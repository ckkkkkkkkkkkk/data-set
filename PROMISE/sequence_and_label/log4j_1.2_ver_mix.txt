package org . apache . log4j . test ; class Base64 { final static int MAX_LINE = 76 ; static byte [ ] asciiEncoding = { 65 , 66 , 67 , 68 , 69 , 70 , 71 , 72 , 73 , 74 , 75 , 76 , 77 , 78 , 79 , 80 , 81 , 82 , 83 , 84 , 85 , 86 , 87 , 88 , 89 , 90 , 97 , 98 , 99 , 100 , 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 , 119 , 120 , 121 , 122 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 43 , 47 } ; static char [ ] charEnc = new char [ 64 ] ; static { for ( int i = 0 ; i < 26 ; i ++ ) { charEnc [ i ] = ( char ) ( 'A' + i ) ; charEnc [ i + 26 ] = ( char ) ( 'a' + i ) ; } for ( int i = 0 ; i < 10 ; i ++ ) { charEnc [ i + 52 ] = ( char ) ( '0' + i ) ; } charEnc [ 62 ] = '+' ; charEnc [ 63 ] = '/' ; } static String toString ( byte [ ] inbuf ) { return toString ( inbuf , 0 , inbuf . length ) ; } static String toString ( byte [ ] inbuf , int offset , int length ) { StringBuffer output = new StringBuffer ( ( length ) * 4 / 3 + 1 ) ; int in ; char [ ] out = new char [ 4 ] ; int i = offset ; boolean ended = false ; int last = offset + length ; int j ; int bitsRead ; while ( ! ended ) { in = 0 ; bitsRead = 0 ; for ( j = 0 ; j < 3 ; j ++ ) { if ( i == last ) { ended = true ; break ; } in = ( in << 8 ) | ( inbuf [ i ++ ] & 0xFF ) ; bitsRead += 8 ; } while ( bitsRead >= 6 ) { bitsRead -= 6 ; output . append ( charEnc [ ( in > > > bitsRead ) & 0x3F ] ) ; } if ( bitsRead == 4 ) { output . append ( charEnc [ ( in & 0x0F ) << 2 ] ) ; output . append ( "=" ) ; } else if ( bitsRead == 2 ) { output . append ( charEnc [ ( in & 0x03 ) << 4 ] ) ; output . append ( "==" ) ; } } return output . toString ( ) ; } public static void main ( String [ ] args ) { byte [ ] inbuf = new byte [ MAX_LINE ] ; while ( true ) { try { int read = System . in . read ( inbuf , 0 , MAX_LINE ) ; if ( read == - 1 ) break ; System . out . println ( "Read " + read + " chars." ) ; System . out . println ( Base64 . toString ( inbuf , 0 , read ) ) ; } catch ( Exception e ) { System . out . println ( "Exception " + e ) ; } } } } 	0	['5', '1', '0', '0', '15', '8', '0', '0', '1', '0.833333333', '479', '0', '0', '0', '0.3125', '0', '0', '94.2', '7', '2', '0']
package org . apache . log4j . chainsaw ; import java . util . StringTokenizer ; import org . apache . log4j . Priority ; import org . xml . sax . Attributes ; import org . xml . sax . SAXException ; import org . xml . sax . helpers . DefaultHandler ; class XMLFileHandler extends DefaultHandler { private static final String TAG_EVENT = "log4j:event" ; private static final String TAG_MESSAGE = "log4j:message" ; private static final String TAG_NDC = "log4j:NDC" ; private static final String TAG_THROWABLE = "log4j:throwable" ; private static final String TAG_LOCATION_INFO = "log4j:locationInfo" ; private final MyTableModel mModel ; private int mNumEvents ; private String mCurrentElement ; private long mTimeStamp ; private Priority mPriority ; private String mCategoryName ; private String mNDC ; private String mThreadName ; private String mMessage ; private String [ ] mThrowableStrRep ; private String mLocationDetails ; XMLFileHandler ( MyTableModel aModel ) { mModel = aModel ; } public void startDocument ( ) throws SAXException { mNumEvents = 0 ; } public void characters ( char [ ] aChars , int aStart , int aLength ) { if ( mCurrentElement == TAG_NDC ) { mNDC = new String ( aChars , aStart , aLength ) ; } else if ( mCurrentElement == TAG_MESSAGE ) { mMessage = new String ( aChars , aStart , aLength ) ; } else if ( mCurrentElement == TAG_THROWABLE ) { final StringTokenizer st = new StringTokenizer ( new String ( aChars , aStart , aLength ) , "\t" ) ; mThrowableStrRep = new String [ st . countTokens ( ) ] ; if ( mThrowableStrRep . length > 0 ) { mThrowableStrRep [ 0 ] = st . nextToken ( ) ; for ( int i = 1 ; i < mThrowableStrRep . length ; i ++ ) { mThrowableStrRep [ i ] = "\t" + st . nextToken ( ) ; } } } } public void endElement ( String aNamespaceURI , String aLocalName , String aQName ) { if ( TAG_EVENT . equals ( aQName ) ) { addEvent ( ) ; resetData ( ) ; } else if ( mCurrentElement != TAG_EVENT ) { mCurrentElement = TAG_EVENT ; } } public void startElement ( String aNamespaceURI , String aLocalName , String aQName , Attributes aAtts ) { if ( TAG_EVENT . equals ( aQName ) ) { mThreadName = aAtts . getValue ( "thread" ) ; mTimeStamp = Long . parseLong ( aAtts . getValue ( "timestamp" ) ) ; mCategoryName = aAtts . getValue ( "category" ) ; mPriority = Priority . toPriority ( aAtts . getValue ( "level" ) ) ; } else if ( TAG_LOCATION_INFO . equals ( aQName ) ) { mLocationDetails = aAtts . getValue ( "class" ) + "." + aAtts . getValue ( "method" ) + "(" + aAtts . getValue ( "file" ) + ":" + aAtts . getValue ( "line" ) + ")" ; } else if ( TAG_NDC . equals ( aQName ) ) { mCurrentElement = TAG_NDC ; } else if ( TAG_MESSAGE . equals ( aQName ) ) { mCurrentElement = TAG_MESSAGE ; } else if ( TAG_THROWABLE . equals ( aQName ) ) { mCurrentElement = TAG_THROWABLE ; } } int getNumEvents ( ) { return mNumEvents ; } private void addEvent ( ) { mModel . addEvent ( new EventDetails ( mTimeStamp , mPriority , mCategoryName , mNDC , mThreadName , mMessage , mThrowableStrRep , mLocationDetails ) ) ; mNumEvents ++ ; } private void resetData ( ) { mTimeStamp = 0 ; mPriority = null ; mCategoryName = null ; mNDC = null ; mThreadName = null ; mMessage = null ; mThrowableStrRep = null ; mLocationDetails = null ; } } 	1	['8', '2', '0', '4', '22', '4', '1', '3', '4', '0.767857143', '273', '1', '2', '0.708333333', '0.291666667', '1', '2', '31.125', '6', '2.375', '3']
package org . apache . log4j . performance ; import org . apache . log4j . Category ; import org . apache . log4j . SimpleLayout ; import org . apache . log4j . ConsoleAppender ; import org . apache . log4j . Level ; public class NotLogging { static int runLength ; final static int INITIAL_HASH_SIZE = 101 ; static String SHORT_MSG = "Hello World" ; static Category SHORT_CAT = Category . getInstance ( "A0123456789" ) ; static Category MEDIUM_CAT = Category . getInstance ( "A0123456789.B0123456789" ) ; static Category LONG_CAT = Category . getInstance ( "A0123456789.B0123456789.C0123456789" ) ; static Category INEXISTENT_SHORT_CAT = Category . getInstance ( "I0123456789" ) ; static Category INEXISTENT_MEDIUM_CAT = Category . getInstance ( "I0123456789.B0123456789" ) ; static Category INEXISTENT_LONG_CAT = Category . getInstance ( "I0123456789.B0123456789.C0123456789" ) ; static Category [ ] CAT_ARRAY = new Category [ ] { SHORT_CAT , MEDIUM_CAT , LONG_CAT , INEXISTENT_SHORT_CAT , INEXISTENT_MEDIUM_CAT , INEXISTENT_LONG_CAT } ; static void Usage ( ) { System . err . println ( "Usage: java org.apache.log4j.test.NotLogging true|false runLength\n" + "true indicates shipped code, false indicates code in development" + "  where runLength is an int representing the run length of loops\n" + "We suggest that runLength be at least 100'000." ) ; System . exit ( 1 ) ; } public static void main ( String argv [ ] ) { if ( argv . length != 2 ) { Usage ( ) ; } ProgramInit ( argv ) ; double delta ; System . out . println ( ) ; for ( int i = 0 ; i < CAT_ARRAY . length ; i ++ ) { delta = SimpleMessage ( CAT_ARRAY [ i ] , SHORT_MSG , runLength ) ; System . out . println ( "Simple argument,          " + delta + " micros. Cat: " + CAT_ARRAY [ i ] . getName ( ) ) ; } System . out . println ( ) ; for ( int i = 0 ; i < CAT_ARRAY . length ; i ++ ) { delta = FullyOptimizedComplexMessage ( CAT_ARRAY [ i ] , runLength ) ; System . out . println ( "Fully optimized complex,  " + delta + " micros. Cat: " + CAT_ARRAY [ i ] . getName ( ) ) ; } System . out . println ( ) ; for ( int i = 0 ; i < CAT_ARRAY . length ; i ++ ) { delta = ComplexMessage ( CAT_ARRAY [ i ] , runLength ) ; System . out . println ( "Complex message argument, " + delta + " micros. Cat: " + CAT_ARRAY [ i ] . getName ( ) ) ; } } static void ProgramInit ( String [ ] args ) { try { runLength = Integer . parseInt ( args [ 1 ] ) ; } catch ( java . lang . NumberFormatException e ) { System . err . println ( e ) ; Usage ( ) ; } ConsoleAppender appender = new ConsoleAppender ( new SimpleLayout ( ) ) ; if ( "false" . equals ( args [ 0 ] ) ) { } else if ( "true" . equals ( args [ 0 ] ) ) { System . out . println ( "Flagging as shipped code." ) ; Category . getDefaultHierarchy ( ) . setThreshold ( ( Level ) Level . WARN ) ; } else Usage ( ) ; SHORT_CAT . setLevel ( ( Level ) Level . INFO ) ; Category . getRoot ( ) . setLevel ( ( Level ) Level . INFO ) ; } static double SimpleMessage ( Category category , String msg , long runLength ) { long before = System . currentTimeMillis ( ) ; for ( int i = 0 ; i < runLength ; i ++ ) { category . debug ( msg ) ; } return ( System . currentTimeMillis ( ) - before ) * 1000.0 / runLength ; } static double FullyOptimizedComplexMessage ( Category category , long runLength ) { long before = System . currentTimeMillis ( ) ; for ( int i = 0 ; i < runLength ; i ++ ) { if ( category . isDebugEnabled ( ) ) category . debug ( "Message" + i + " bottles of beer standing on the wall." ) ; } return ( System . currentTimeMillis ( ) - before ) * 1000.0 / runLength ; } static double ComplexMessage ( Category category , long runLength ) { long before = System . currentTimeMillis ( ) ; for ( int i = 0 ; i < runLength ; i ++ ) { category . debug ( "Message" + i + " bottles of beer standing on the wall." ) ; } return ( System . currentTimeMillis ( ) - before ) * 1000.0 / runLength ; } } 	0	['8', '1', '0', '6', '31', '22', '0', '6', '2', '0.942857143', '325', '0', '7', '0', '0.285714286', '0', '0', '38.375', '5', '2', '0']
package org . apache . log4j . spi ; import org . apache . log4j . spi . LoggerRepository ; import java . net . URL ; public interface Configurator { public static final String INHERITED = "inherited" ; void doConfigure ( URL url , LoggerRepository repository ) ; } 	1	['1', '1', '0', '7', '1', '0', '6', '1', '1', '2', '2', '0', '0', '0', '1', '0', '0', '0', '1', '1', '2']
package org . apache . log4j . performance ; import java . util . Date ; public class ConcatVsArray { static void Usage ( ) { System . err . println ( "Usage: java org.apache.log4j.performance.ConcatVsArray " + "string1 string2 runLength\n" + "       where runLength is an integer." ) ; System . exit ( 1 ) ; } public static void main ( String args [ ] ) { if ( args . length != 3 ) { Usage ( ) ; } String s1 = args [ 0 ] ; String s2 = args [ 1 ] ; int runLength = 0 ; try { runLength = Integer . parseInt ( args [ 2 ] ) ; } catch ( java . lang . NumberFormatException e ) { System . err . println ( e ) ; Usage ( ) ; } double micros ; String [ ] sa ; long before = new Date ( ) . getTime ( ) ; for ( int i = 0 ; i < runLength ; i ++ ) { sa = new String [ ] { s1 , s2 } ; } micros = ( new Date ( ) . getTime ( ) - before ) * 1000.0 / runLength ; System . out . println ( "The anonymous array loop took around " + micros + " microseconds." ) ; String s ; before = new Date ( ) . getTime ( ) ; for ( int i = 0 ; i < runLength ; i ++ ) { s = s1 + s2 ; } micros = ( new Date ( ) . getTime ( ) - before ) * 1000.0 / runLength ; System . out . println ( "The append loop took around " + micros + " microseconds." ) ; } } 	0	['3', '1', '0', '0', '14', '3', '0', '0', '2', '2', '133', '0', '0', '0', '0.333333333', '0', '0', '43.33333333', '4', '1.6667', '0']
package org . apache . log4j . nt . test ; import org . apache . log4j . Category ; import org . apache . log4j . BasicConfigurator ; import org . apache . log4j . nt . NTEventLogAppender ; import org . apache . log4j . Priority ; import org . apache . log4j . NDC ; public class NTMin { static Category cat = Category . getInstance ( NTMin . class . getName ( ) ) ; public static void main ( String argv [ ] ) { init ( ) ; test ( "someHost" ) ; } static void Usage ( String msg ) { System . err . println ( msg ) ; System . err . println ( "Usage: java " + NTMin . class + "" ) ; System . exit ( 1 ) ; } static void init ( ) { BasicConfigurator . configure ( new NTEventLogAppender ( ) ) ; } static void test ( String host ) { NDC . push ( host ) ; int i = 0 ; cat . debug ( "Message " + i ++ ) ; cat . info ( "Message " + i ++ ) ; cat . warn ( "Message " + i ++ ) ; cat . error ( "Message " + i ++ ) ; cat . log ( Priority . FATAL , "Message " + i ++ ) ; cat . debug ( "Message " + i ++ , new Exception ( "Just testing." ) ) ; } } 	1	['7', '1', '0', '6', '30', '17', '0', '6', '2', '0.75', '144', '0', '1', '0', '0.277777778', '0', '0', '19.28571429', '2', '0.8571', '1']
package org . apache . log4j . lf5 . util ; import java . io . BufferedInputStream ; import java . io . ByteArrayInputStream ; import java . io . IOException ; import java . io . InputStream ; import java . util . Properties ; public class ProductProperties { protected Properties _productProperties ; private static ProductProperties _reference = null ; private static Object _synchronizingObject = new Object ( ) ; private ProductProperties ( ) { this ( new Resource ( "org/apache/log4j/lf5/lf5.properties" ) ) ; } private ProductProperties ( Resource resource ) { super ( ) ; _productProperties = new Properties ( ) ; try { InputStream source = getSource ( resource ) ; byte [ ] contents = StreamUtils . getBytes ( source ) ; _productProperties = getProperties ( contents ) ; source . close ( ) ; validateProductProperties ( ) ; } catch ( Exception e ) { String error = e . getMessage ( ) ; throw new ExceptionInInitializerError ( error ) ; } } public static ProductProperties getInstance ( ) { if ( _reference == null ) { synchronized ( _synchronizingObject ) { if ( _reference == null ) { _reference = new ProductProperties ( ) ; } } } return _reference ; } public static String getPropertyNameOfProductName ( ) { return "product.name" ; } public static String getPropertyNameOfProductVersionNumber ( ) { return "product.version.number" ; } public static String getPropertyNameOfProductReleaseDate ( ) { return "product.release.date" ; } public String getProductName ( ) { return _productProperties . getProperty ( getPropertyNameOfProductName ( ) ) ; } public void setProductName ( String productName ) { _productProperties . setProperty ( getPropertyNameOfProductName ( ) , productName ) ; } public String getProductVersionNumber ( ) { return _productProperties . getProperty ( getPropertyNameOfProductVersionNumber ( ) ) ; } public void setProductVersionNumber ( String productVersionNumber ) { _productProperties . setProperty ( getPropertyNameOfProductVersionNumber ( ) , productVersionNumber ) ; } public String getProductReleaseDate ( ) { return _productProperties . getProperty ( getPropertyNameOfProductReleaseDate ( ) ) ; } public void setProductReleaseDate ( String productReleaseDate ) { _productProperties . setProperty ( getPropertyNameOfProductReleaseDate ( ) , productReleaseDate ) ; } public String get ( String name ) { return _productProperties . getProperty ( name ) ; } public Object set ( String name , String value ) { return _productProperties . setProperty ( name , value ) ; } public String getLogFactor5 ( ) { return getString ( "lf5" ) ; } public String getString ( String propertyName ) { return String . valueOf ( get ( propertyName ) ) ; } protected void validateProductProperties ( ) throws Exception { String value = null ; value = getProductVersionNumber ( ) ; if ( ( value == null ) || value . equals ( "" ) ) { throw new Exception ( "Product version number is null." ) ; } value = getProductReleaseDate ( ) ; if ( ( value == null ) || value . equals ( "" ) ) { throw new Exception ( "Product release date is null." ) ; } } private InputStream getSource ( Resource resource ) { return new BufferedInputStream ( ResourceUtils . getResourceAsStream ( this , resource ) ) ; } private Properties getProperties ( byte [ ] contents ) throws IOException { ByteArrayInputStream source = new ByteArrayInputStream ( contents ) ; Properties result = new Properties ( ) ; result . load ( source ) ; source . close ( ) ; return result ; } } 	0	['20', '1', '0', '5', '37', '116', '2', '3', '14', '0.754385965', '209', '1', '1', '0', '0.315789474', '0', '0', '9.3', '3', '0.95', '0']
package org . apache . log4j . or ; class DefaultRenderer implements ObjectRenderer { DefaultRenderer ( ) { } public String doRender ( Object o ) { return o . toString ( ) ; } } 	1	['2', '1', '0', '2', '4', '1', '1', '1', '1', '2', '8', '0', '0', '0', '0.75', '0', '0', '3', '1', '0.5', '2']
package org . apache . log4j . lf5 . viewer ; import org . apache . log4j . lf5 . util . ProductProperties ; import org . apache . log4j . lf5 . util . Resource ; import javax . swing . * ; import java . awt . * ; import java . awt . event . ActionEvent ; import java . awt . event . ActionListener ; import java . net . URL ; public class LogFactor5AboutDialog extends JDialog { public LogFactor5AboutDialog ( Frame owner ) { super ( owner , "About LogFactor5" , true ) ; ProductProperties props = ProductProperties . getInstance ( ) ; setTitle ( "About LogFactor5" ) ; JPanel imagePanel = new JPanel ( ) ; Resource aboutResource = new Resource ( "org/apache/log4j/lf5/viewer/images/" + "lf5_about.gif" ) ; URL aboutIconURL = aboutResource . getURL ( ) ; ImageIcon aboutIcon = null ; if ( aboutIconURL != null ) { aboutIcon = new ImageIcon ( aboutIconURL ) ; } JLabel imageLabel = new JLabel ( ) ; if ( aboutIcon != null ) { imageLabel . setIcon ( aboutIcon ) ; } imagePanel . add ( imageLabel ) ; JPanel textPanel = new JPanel ( ) ; textPanel . setLayout ( new GridLayout ( 3 , 1 ) ) ; int numberOfRows = 13 ; numberOfRows = 11 ; JPanel mainPanel = new JPanel ( ) ; mainPanel . setLayout ( new GridLayout ( numberOfRows , 1 ) ) ; JLabel aboutLF5 = new JLabel ( "LogFactor5 v" + props . getProductVersionNumber ( ) , JLabel . CENTER ) ; aboutLF5 . setHorizontalAlignment ( SwingConstants . CENTER ) ; JLabel donate = new JLabel ( "Contributed by ThoughtWorks Inc." ) ; donate . setHorizontalAlignment ( SwingConstants . CENTER ) ; mainPanel . add ( aboutLF5 ) ; mainPanel . add ( Box . createVerticalStrut ( 10 ) ) ; mainPanel . add ( donate ) ; mainPanel . add ( Box . createVerticalStrut ( 10 ) ) ; JButton ok = new JButton ( "OK" ) ; JPanel southPanel = new JPanel ( ) ; southPanel . setLayout ( new FlowLayout ( ) ) ; southPanel . add ( ok ) ; ok . addActionListener ( new ActionListener ( ) { public void actionPerformed ( ActionEvent e ) { hide ( ) ; } } ) ; getContentPane ( ) . add ( imagePanel , BorderLayout . NORTH ) ; getContentPane ( ) . add ( mainPanel , BorderLayout . CENTER ) ; getContentPane ( ) . add ( southPanel , BorderLayout . SOUTH ) ; setSize ( 414 , 400 ) ; center ( ) ; } protected void center ( ) { Dimension screen = Toolkit . getDefaultToolkit ( ) . getScreenSize ( ) ; Dimension comp = getSize ( ) ; setLocation ( ( ( screen . width - comp . width ) / 2 ) , ( ( screen . height - comp . height ) / 2 ) ) ; } } 	0	['2', '6', '0', '4', '33', '1', '2', '3', '1', '2', '184', '0', '0', '0.998417722', '0.75', '0', '0', '91', '1', '0.5', '0']
package org . apache . log4j . varia ; import org . apache . log4j . spi . ErrorHandler ; import org . apache . log4j . spi . LoggingEvent ; import org . apache . log4j . Appender ; import org . apache . log4j . Logger ; import org . apache . log4j . helpers . LogLog ; import java . util . Vector ; public class FallbackErrorHandler implements ErrorHandler { Appender backup ; Appender primary ; Vector loggers ; public FallbackErrorHandler ( ) { } public void setLogger ( Logger logger ) { LogLog . debug ( "FB: Adding logger [" + logger . getName ( ) + "]." ) ; if ( loggers == null ) { loggers = new Vector ( ) ; } loggers . addElement ( logger ) ; } public void activateOptions ( ) { } public void error ( String message , Exception e , int errorCode ) { error ( message , e , errorCode , null ) ; } public void error ( String message , Exception e , int errorCode , LoggingEvent event ) { for ( int i = 0 ; i < loggers . size ( ) ; i ++ ) { Logger l = ( Logger ) loggers . elementAt ( i ) ; LogLog . debug ( "FB: Searching for [" + primary . getName ( ) + "] in logger" + l . getName ( ) ) ; LogLog . debug ( "FB: Replacing [" + primary . getName ( ) + "] by [" + backup . getName ( ) + " in logger" + l ) ; l . removeAppender ( primary ) ; LogLog . debug ( "FB: Adding appender [" + backup . getName ( ) + "] to logger " + l . getName ( ) ) ; l . addAppender ( backup ) ; } } public void error ( String message ) { } public void setAppender ( Appender primary ) { LogLog . debug ( "FB: Setting primary appender to [" + primary . getName ( ) + "]." ) ; this . primary = primary ; } public void setBackupAppender ( Appender backup ) { LogLog . debug ( "FB: Setting backup appender to [" + backup . getName ( ) + "]." ) ; this . backup = backup ; } } 	1	['8', '1', '0', '6', '22', '22', '0', '6', '8', '0.714285714', '157', '0', '2', '0', '0.339285714', '0', '0', '18.25', '2', '1.125', '3']
package org . apache . log4j . test ; import org . apache . log4j . Category ; import org . apache . log4j . BasicConfigurator ; import org . apache . log4j . NDC ; import java . util . Random ; import java . util . Stack ; public class StressNDC extends Thread { static Category root = Category . getRoot ( ) ; static Random random = new Random ( 101 ) ; static final int LOOP_LENGTH = 24 ; static final int PUSH_MISS = LOOP_LENGTH / 2 ; static final int POP_MISS = PUSH_MISS * 2 ; static final int BRANCHING_FACTOR = 4 + 1 ; static int maxThreads ; static int msgCounter = 0 ; static int threadCounter = 0 ; static double LOG_2 = Math . log ( 2 ) ; static Object lock = new Object ( ) ; public static void main ( String args [ ] ) { BasicConfigurator . configure ( ) ; if ( args . length != 1 ) { usage ( ) ; } try { maxThreads = Integer . parseInt ( args [ 0 ] ) ; } catch ( java . lang . NumberFormatException e ) { System . err . println ( e ) ; usage ( ) ; } root . debug ( "push(IP=127.0.0.1)" ) ; NDC . push ( "IP=127.0.0.1" ) ; while ( true ) { synchronized ( lock ) { createChildren ( randomInt ( BRANCHING_FACTOR ) + 1 ) ; try { root . debug ( "About to wait for notification." ) ; lock . wait ( ) ; root . debug ( "Got a notification." ) ; } catch ( InterruptedException e ) { root . warn ( "Unpextected InterruptedException received." , e ) ; } } } } static void usage ( ) { System . err . println ( "Usage: java org.apache.log4j.test.StressNDC " + "MAX_THREADS" ) ; System . exit ( 1 ) ; } Stack parentDC ; public StressNDC ( Stack parentDC ) { this . setName ( randomID ( ) ) ; this . parentDC = parentDC ; } public void run ( ) { NDC . inherit ( parentDC ) ; int loopLength = StressNDC . randomInt ( LOOP_LENGTH ) ; root . debug ( "In run loop.debug( loopLength = " + loopLength ) ; int createIndex = loopLength / 2 ; for ( int i = 0 ; i <= loopLength ; i ++ ) { if ( i == createIndex ) createChildren ( randomInt ( BRANCHING_FACTOR ) ) ; if ( randomInt ( PUSH_MISS ) == 0 ) { String id = randomID ( ) ; root . debug ( "push(" + id + ")" ) ; NDC . push ( id ) ; } root . debug ( "Message number " + StressNDC . msgCounter ++ ) ; if ( randomInt ( POP_MISS ) == 0 ) { root . debug ( "pop()" ) ; NDC . pop ( ) ; } } synchronized ( lock ) { StressNDC . threadCounter -- ; root . debug ( "Exiting run loop. " + threadCounter ) ; if ( StressNDC . threadCounter <= 0 ) { root . debug ( "Notifying [main] thread." ) ; lock . notify ( ) ; } } if ( ( loopLength % 2 ) == 0 ) { root . debug ( "Removing NDC for this thread." ) ; NDC . remove ( ) ; } } public static void createChildren ( int n ) { if ( n <= 0 ) return ; synchronized ( lock ) { n = maxThreadsConstained ( n ) ; root . debug ( "Creating " + n + " child StressNDC threads." ) ; for ( int i = 0 ; i < n ; i ++ ) { root . debug ( "New StressNDC, threadCounter = " + ( ++ threadCounter ) ) ; new StressNDC ( NDC . cloneStack ( ) ) . start ( ) ; } } } static public int maxThreadsConstained ( int a ) { int maxAllowed = StressNDC . maxThreads - StressNDC . threadCounter ; return a <= maxAllowed ? a : maxAllowed ; } public static int randomInt ( int n ) { int r = random . nextInt ( ) % n ; return r >= 0 ? r : - r ; } public static String randomID ( ) { return Integer . toString ( random . nextInt ( ) & 0xFFFFFF ) ; } } 	0	['9', '2', '0', '3', '36', '8', '0', '3', '7', '0.822916667', '311', '0', '1', '0.897058824', '0.21875', '0', '0', '32.22222222', '7', '2', '0']
package org . apache . log4j . chainsaw ; import org . apache . log4j . Priority ; import org . apache . log4j . spi . LoggingEvent ; class EventDetails { private final long mTimeStamp ; private final Priority mPriority ; private final String mCategoryName ; private final String mNDC ; private final String mThreadName ; private final String mMessage ; private final String [ ] mThrowableStrRep ; private final String mLocationDetails ; EventDetails ( long aTimeStamp , Priority aPriority , String aCategoryName , String aNDC , String aThreadName , String aMessage , String [ ] aThrowableStrRep , String aLocationDetails ) { mTimeStamp = aTimeStamp ; mPriority = aPriority ; mCategoryName = aCategoryName ; mNDC = aNDC ; mThreadName = aThreadName ; mMessage = aMessage ; mThrowableStrRep = aThrowableStrRep ; mLocationDetails = aLocationDetails ; } EventDetails ( LoggingEvent aEvent ) { this ( aEvent . timeStamp , aEvent . level , aEvent . categoryName , aEvent . getNDC ( ) , aEvent . getThreadName ( ) , aEvent . getRenderedMessage ( ) , aEvent . getThrowableStrRep ( ) , ( aEvent . getLocationInformation ( ) == null ) ? null : aEvent . getLocationInformation ( ) . fullInfo ) ; } long getTimeStamp ( ) { return mTimeStamp ; } Priority getPriority ( ) { return mPriority ; } String getCategoryName ( ) { return mCategoryName ; } String getNDC ( ) { return mNDC ; } String getThreadName ( ) { return mThreadName ; } String getMessage ( ) { return mMessage ; } String getLocationDetails ( ) { return mLocationDetails ; } String [ ] getThrowableStrRep ( ) { return mThrowableStrRep ; } } 	1	['10', '1', '0', '9', '16', '29', '6', '3', '0', '0.777777778', '94', '1', '1', '0', '0.25', '0', '0', '7.6', '1', '0.8', '2']
package org . apache . log4j . performance ; import org . apache . log4j . Category ; import org . apache . log4j . xml . DOMConfigurator ; import org . apache . log4j . NDC ; import org . apache . log4j . performance . NOPWriter ; public class Logging { static int runLength ; static int delay = - 1 ; static int burstLen = 100 ; static int DELAY_MULT = 1000 / burstLen ; static Category cat = Category . getInstance ( "A0123456789.B0123456789.C0123456789" ) ; static void Usage ( String msg ) { System . err . println ( msg ) ; System . err . println ( "Usage: java " + Logging . class . getName ( ) + " confFile runLength [delay] [burstLen]\n" + "        confFile is an XML configuration file and\n" + "        runLength (integer) is the length of test loop.\n" + "        delay is the time in millisecs to wait every bustLen log requests." ) ; System . exit ( 1 ) ; } public static void main ( String argv [ ] ) { if ( argv . length == 2 ) init ( argv [ 0 ] , argv [ 1 ] , null , null ) ; else if ( argv . length == 4 ) init ( argv [ 0 ] , argv [ 1 ] , argv [ 2 ] , argv [ 3 ] ) ; else Usage ( "Wrong number of arguments." ) ; NDC . push ( "some context" ) ; double delta ; String msg = "ABCDEGHIJKLMNOPQRSTUVWXYZabcdeghijklmnopqrstuvwxyz1234567890" ; if ( delay <= 0 ) delta = NoDelayLoop ( cat , msg ) ; else delta = DelayedLoop ( cat , msg ) ; System . out . print ( ( int ) delta ) ; Category . shutdown ( ) ; } static void init ( String configFile , String runLengthStr , String delayStr , String burstLenStr ) { try { runLength = Integer . parseInt ( runLengthStr ) ; if ( delayStr != null ) { delay = Integer . parseInt ( delayStr ) ; } if ( delayStr != null ) { burstLen = Integer . parseInt ( burstLenStr ) ; DELAY_MULT = 1000 / burstLen ; } } catch ( java . lang . NumberFormatException e ) { e . printStackTrace ( ) ; } DOMConfigurator . configure ( configFile ) ; } static double NoDelayLoop ( Category category , String msg ) { long before = System . currentTimeMillis ( ) ; for ( int i = 0 ; i < runLength ; i ++ ) { category . info ( msg ) ; } return ( ( System . currentTimeMillis ( ) - before ) * 1000.0 ) / runLength ; } static double DelayedLoop ( Category category , String msg ) { long before = System . currentTimeMillis ( ) ; int j = 0 ; Thread currentThread = Thread . currentThread ( ) ; for ( int i = 0 ; i < runLength ; i ++ ) { category . info ( msg ) ; if ( j ++ == burstLen ) { j = 0 ; try { currentThread . sleep ( delay ) ; } catch ( Exception e ) { } } } double actualTime = ( ( System . currentTimeMillis ( ) - before ) * 1000.0 / runLength ) ; System . out . println ( "actual time: " + actualTime ) ; return ( actualTime - delay * DELAY_MULT ) ; } } 	0	['8', '1', '0', '3', '30', '12', '0', '3', '2', '0.666666667', '228', '0', '1', '0', '0.321428571', '0', '0', '26.75', '4', '1.75', '0']
package org . apache . log4j . nt ; import org . apache . log4j . * ; import org . apache . log4j . spi . LoggingEvent ; import org . apache . log4j . Level ; import org . apache . log4j . helpers . LogLog ; import java . io . * ; public class NTEventLogAppender extends AppenderSkeleton { private int _handle = 0 ; private String source = null ; private String server = null ; private static final int FATAL = Level . FATAL . toInt ( ) ; private static final int ERROR = Level . ERROR . toInt ( ) ; private static final int WARN = Level . WARN . toInt ( ) ; private static final int INFO = Level . INFO . toInt ( ) ; private static final int DEBUG = Level . DEBUG . toInt ( ) ; public NTEventLogAppender ( ) { this ( null , null , null ) ; } public NTEventLogAppender ( String source ) { this ( null , source , null ) ; } public NTEventLogAppender ( String server , String source ) { this ( server , source , null ) ; } public NTEventLogAppender ( Layout layout ) { this ( null , null , layout ) ; } public NTEventLogAppender ( String source , Layout layout ) { this ( null , source , layout ) ; } public NTEventLogAppender ( String server , String source , Layout layout ) { if ( source == null ) { source = "Log4j" ; } if ( layout == null ) { this . layout = new TTCCLayout ( ) ; } else { this . layout = layout ; } try { _handle = registerEventSource ( server , source ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; _handle = 0 ; } } public void close ( ) { } public void activateOptions ( ) { if ( source != null ) { try { _handle = registerEventSource ( server , source ) ; } catch ( Exception e ) { LogLog . error ( "Could not register event source." , e ) ; _handle = 0 ; } } } public void append ( LoggingEvent event ) { StringBuffer sbuf = new StringBuffer ( ) ; sbuf . append ( layout . format ( event ) ) ; if ( layout . ignoresThrowable ( ) ) { String [ ] s = event . getThrowableStrRep ( ) ; if ( s != null ) { int len = s . length ; for ( int i = 0 ; i < len ; i ++ ) { sbuf . append ( s [ i ] ) ; } } } int nt_category = event . level . toInt ( ) ; reportEvent ( _handle , sbuf . toString ( ) , nt_category ) ; } public void finalize ( ) { deregisterEventSource ( _handle ) ; _handle = 0 ; } public void setSource ( String source ) { this . source = source . trim ( ) ; } public String getSource ( ) { return source ; } public boolean requiresLayout ( ) { return true ; } native private int registerEventSource ( String server , String source ) ; native private void reportEvent ( int handle , String message , int level ) ; native private void deregisterEventSource ( int handle ) ; static { System . loadLibrary ( "NTEventLogAppender" ) ; } } 	1	['17', '2', '0', '8', '30', '114', '1', '7', '13', '0.828125', '200', '1', '0', '0.642857143', '0.3625', '1', '1', '10.29411765', '4', '0.8235', '4']
package org . apache . log4j . test ; import org . apache . log4j . * ; import java . util . * ; import java . text . * ; public class L7D { static ResourceBundle [ ] bundles ; public static void main ( String args [ ] ) { if ( args . length == 3 ) init ( args [ 0 ] , args [ 1 ] , args [ 2 ] ) ; else Usage ( "Wrong number of arguments." ) ; test ( ) ; } static void Usage ( String msg ) { System . err . println ( msg ) ; System . err . println ( "Usage: java " + L7D . class . getName ( ) + "configFile ISO639LanguageCode ISO2166CountryCode" ) ; System . exit ( 1 ) ; } static void init ( String configFile , String lanCode , String countryCode ) { PropertyConfigurator . configure ( configFile ) ; bundles = new ResourceBundle [ 3 ] ; try { bundles [ 0 ] = ResourceBundle . getBundle ( "L7D" , new Locale ( "en" , "US" ) ) ; bundles [ 1 ] = ResourceBundle . getBundle ( "L7D" , new Locale ( "fr" , "FR" ) ) ; bundles [ 2 ] = ResourceBundle . getBundle ( "L7D" , new Locale ( "fr" , "CH" ) ) ; } catch ( MissingResourceException e ) { e . printStackTrace ( ) ; } } static void test ( ) { Category root = Category . getRoot ( ) ; for ( int i = 0 ; i < bundles . length ; i ++ ) { root . setResourceBundle ( bundles [ i ] ) ; root . l7dlog ( Priority . DEBUG , "bogus1" , null ) ; root . l7dlog ( Priority . INFO , "test" , null ) ; root . l7dlog ( Priority . WARN , "hello_world" , null ) ; root . l7dlog ( Priority . DEBUG , "msg1" , new Object [ ] { new Integer ( i + 1 ) , "log4j" } , null ) ; root . l7dlog ( Priority . ERROR , "bogusMsg" , new Object [ ] { new Integer ( i + 1 ) , "log4j" } , null ) ; root . l7dlog ( Priority . ERROR , "msg1" , new Object [ ] { new Integer ( i + 1 ) , "log4j" } , null ) ; root . l7dlog ( Priority . INFO , "bogus2" , null ) ; } } } 	0	['6', '1', '0', '3', '25', '13', '0', '3', '2', '0.7', '202', '0', '0', '0', '0.277777778', '0', '0', '32.33333333', '2', '1.3333', '0']
package org . apache . log4j . or . jms ; import org . apache . log4j . helpers . LogLog ; import org . apache . log4j . or . ObjectRenderer ; import javax . jms . Message ; import javax . jms . JMSException ; import javax . jms . DeliveryMode ; public class MessageRenderer implements ObjectRenderer { public MessageRenderer ( ) { } public String doRender ( Object o ) { if ( o instanceof Message ) { StringBuffer sbuf = new StringBuffer ( ) ; Message m = ( Message ) o ; try { sbuf . append ( "DeliveryMode=" ) ; switch ( m . getJMSDeliveryMode ( ) ) { case DeliveryMode . NON_PERSISTENT : sbuf . append ( "NON_PERSISTENT" ) ; break ; case DeliveryMode . PERSISTENT : sbuf . append ( "PERSISTENT" ) ; break ; default : sbuf . append ( "UNKNOWN" ) ; } sbuf . append ( ", CorrelationID=" ) ; sbuf . append ( m . getJMSCorrelationID ( ) ) ; sbuf . append ( ", Destination=" ) ; sbuf . append ( m . getJMSDestination ( ) ) ; sbuf . append ( ", Expiration=" ) ; sbuf . append ( m . getJMSExpiration ( ) ) ; sbuf . append ( ", MessageID=" ) ; sbuf . append ( m . getJMSMessageID ( ) ) ; sbuf . append ( ", Priority=" ) ; sbuf . append ( m . getJMSPriority ( ) ) ; sbuf . append ( ", Redelivered=" ) ; sbuf . append ( m . getJMSRedelivered ( ) ) ; sbuf . append ( ", ReplyTo=" ) ; sbuf . append ( m . getJMSReplyTo ( ) ) ; sbuf . append ( ", Timestamp=" ) ; sbuf . append ( m . getJMSTimestamp ( ) ) ; sbuf . append ( ", Type=" ) ; sbuf . append ( m . getJMSType ( ) ) ; } catch ( JMSException e ) { LogLog . error ( "Could not parse Message." , e ) ; } return sbuf . toString ( ) ; } else { return o . toString ( ) ; } } } 	1	['2', '1', '0', '3', '22', '1', '1', '2', '2', '2', '128', '0', '0', '0', '0.75', '0', '0', '63', '5', '2.5', '2']
