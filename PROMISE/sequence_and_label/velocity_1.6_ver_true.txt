package org . apache . velocity . runtime . parser . node ; import org . apache . velocity . context . InternalContextAdapter ; import org . apache . velocity . runtime . parser . Parser ; public class ASTMulNode extends ASTMathNode { public ASTMulNode ( int id ) { super ( id ) ; } public ASTMulNode ( Parser p , int id ) { super ( p , id ) ; } public Number perform ( Number left , Number right , InternalContextAdapter context ) { return MathUtils . multiply ( left , right ) ; } } 	0	['3', '3', '0', '7', '6', '3', '4', '4', '3', '2', '16', '0', '0', '0.972222222', '0.533333333', '1', '1', '4.333333333', '1', '0.3333', '0']
package org . apache . velocity . texen ; import java . io . File ; import java . io . InputStream ; import java . io . FileInputStream ; import java . io . BufferedInputStream ; import java . io . Writer ; import java . io . FileWriter ; import java . io . IOException ; import java . io . StringWriter ; import java . io . OutputStreamWriter ; import java . io . BufferedWriter ; import java . io . FileOutputStream ; import java . util . Enumeration ; import java . util . Hashtable ; import java . util . Iterator ; import java . util . Properties ; import org . apache . velocity . Template ; import org . apache . velocity . context . Context ; import org . apache . velocity . VelocityContext ; import org . apache . velocity . app . VelocityEngine ; import org . apache . velocity . util . ClassUtils ; public class Generator { public static final String OUTPUT_PATH = "output.path" ; public static final String TEMPLATE_PATH = "template.path" ; private static final String DEFAULT_TEXEN_PROPERTIES = "org/apache/velocity/texen/defaults/texen.properties" ; private Properties props = new Properties ( ) ; private Context controlContext ; private Hashtable writers = new Hashtable ( ) ; private static Generator instance = new Generator ( ) ; protected String outputEncoding ; protected String inputEncoding ; protected VelocityEngine ve ; private Generator ( ) { setDefaultProps ( ) ; } public static Generator getInstance ( ) { return instance ; } public void setVelocityEngine ( VelocityEngine ve ) { this . ve = ve ; } public Generator ( String propFile ) { try { BufferedInputStream bi = null ; try { bi = new BufferedInputStream ( new FileInputStream ( propFile ) ) ; props . load ( bi ) ; } finally { if ( bi != null ) { bi . close ( ) ; } } } catch ( IOException e ) { System . err . println ( "Could not load " + propFile + ", falling back to defaults. (" + e . getMessage ( ) + ")" ) ; setDefaultProps ( ) ; } } public Generator ( Properties props ) { this . props = ( Properties ) props . clone ( ) ; } protected void setDefaultProps ( ) { ClassLoader classLoader = VelocityEngine . class . getClassLoader ( ) ; try { InputStream inputStream = null ; try { inputStream = classLoader . getResourceAsStream ( DEFAULT_TEXEN_PROPERTIES ) ; props . load ( inputStream ) ; } finally { if ( inputStream != null ) { inputStream . close ( ) ; } } } catch ( IOException ioe ) { System . err . println ( "Cannot get default properties: " + ioe . getMessage ( ) ) ; } } public void setTemplatePath ( String templatePath ) { props . put ( TEMPLATE_PATH , templatePath ) ; } public String getTemplatePath ( ) { return props . getProperty ( TEMPLATE_PATH ) ; } public void setOutputPath ( String outputPath ) { props . put ( OUTPUT_PATH , outputPath ) ; } public String getOutputPath ( ) { return props . getProperty ( OUTPUT_PATH ) ; } public void setOutputEncoding ( String outputEncoding ) { this . outputEncoding = outputEncoding ; } public void setInputEncoding ( String inputEncoding ) { this . inputEncoding = inputEncoding ; } public Writer getWriter ( String path , String encoding ) throws Exception { Writer writer ; if ( encoding == null || encoding . length ( ) == 0 || encoding . equals ( "8859-1" ) || encoding . equals ( "8859_1" ) ) { writer = new FileWriter ( path ) ; } else { writer = new BufferedWriter ( new OutputStreamWriter ( new FileOutputStream ( path ) , encoding ) ) ; } return writer ; } public Template getTemplate ( String templateName , String encoding ) throws Exception { Template template ; if ( encoding == null || encoding . length ( ) == 0 || encoding . equals ( "8859-1" ) || encoding . equals ( "8859_1" ) ) { template = ve . getTemplate ( templateName ) ; } else { template = ve . getTemplate ( templateName , encoding ) ; } return template ; } public String parse ( String inputTemplate , String outputFile ) throws Exception { return parse ( inputTemplate , outputFile , null , null ) ; } public String parse ( String inputTemplate , String outputFile , String objectID , Object object ) throws Exception { return parse ( inputTemplate , null , outputFile , null , objectID , object ) ; } public String parse ( String inputTemplate , String inputEncoding , String outputFile , String outputEncoding , String objectID , Object object ) throws Exception { if ( objectID != null && object != null ) { controlContext . put ( objectID , object ) ; } Template template = getTemplate ( inputTemplate , inputEncoding != null ? inputEncoding : this . inputEncoding ) ; if ( outputFile == null || outputFile . equals ( "" ) ) { StringWriter sw = new StringWriter ( ) ; template . merge ( controlContext , sw ) ; return sw . toString ( ) ; } else { Writer writer = null ; if ( writers . get ( outputFile ) == null ) { writer = getWriter ( getOutputPath ( ) + File . separator + outputFile , outputEncoding != null ? outputEncoding : this . outputEncoding ) ; writers . put ( outputFile , writer ) ; } else { writer = ( Writer ) writers . get ( outputFile ) ; } VelocityContext vc = new VelocityContext ( controlContext ) ; template . merge ( vc , writer ) ; return "" ; } } public String parse ( String controlTemplate , Context controlContext ) throws Exception { this . controlContext = controlContext ; fillContextDefaults ( this . controlContext ) ; fillContextProperties ( this . controlContext ) ; Template template = getTemplate ( controlTemplate , inputEncoding ) ; StringWriter sw = new StringWriter ( ) ; template . merge ( controlContext , sw ) ; return sw . toString ( ) ; } protected Context getContext ( Hashtable objs ) { fillContextHash ( controlContext , objs ) ; return controlContext ; } protected void fillContextHash ( Context context , Hashtable objs ) { Enumeration enumeration = objs . keys ( ) ; while ( enumeration . hasMoreElements ( ) ) { String key = enumeration . nextElement ( ) . toString ( ) ; context . put ( key , objs . get ( key ) ) ; } } protected void fillContextDefaults ( Context context ) { context . put ( "generator" , instance ) ; context . put ( "outputDirectory" , getOutputPath ( ) ) ; } protected void fillContextProperties ( Context context ) { Enumeration enumeration = props . propertyNames ( ) ; while ( enumeration . hasMoreElements ( ) ) { String nm = ( String ) enumeration . nextElement ( ) ; if ( nm . startsWith ( "context.objects." ) ) { String contextObj = props . getProperty ( nm ) ; int colon = nm . lastIndexOf ( '.' ) ; String contextName = nm . substring ( colon + 1 ) ; try { Object o = ClassUtils . getNewInstance ( contextObj ) ; context . put ( contextName , o ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; } } } } public void shutdown ( ) { Iterator iterator = writers . values ( ) . iterator ( ) ; while ( iterator . hasNext ( ) ) { Writer writer = ( Writer ) iterator . next ( ) ; try { writer . flush ( ) ; } catch ( IOException e ) { } try { writer . close ( ) ; } catch ( IOException e ) { } } writers . clear ( ) ; } } 	0	['25', '1', '0', '7', '78', '194', '2', '5', '17', '0.878787879', '530', '0.727272727', '3', '0', '0.261904762', '0', '0', '19.76', '3', '1.04', '0']
package org . apache . velocity . servlet ; import java . io . FileNotFoundException ; import java . io . IOException ; import java . io . OutputStreamWriter ; import java . io . PrintWriter ; import java . io . StringWriter ; import java . io . UnsupportedEncodingException ; import java . util . Properties ; import javax . servlet . ServletConfig ; import javax . servlet . ServletContext ; import javax . servlet . ServletException ; import javax . servlet . ServletOutputStream ; import javax . servlet . http . HttpServlet ; import javax . servlet . http . HttpServletRequest ; import javax . servlet . http . HttpServletResponse ; import org . apache . velocity . Template ; import org . apache . velocity . VelocityContext ; import org . apache . velocity . app . Velocity ; import org . apache . velocity . context . Context ; import org . apache . velocity . exception . MethodInvocationException ; import org . apache . velocity . exception . ParseErrorException ; import org . apache . velocity . exception . ResourceNotFoundException ; import org . apache . velocity . io . VelocityWriter ; import org . apache . velocity . runtime . RuntimeConstants ; import org . apache . velocity . runtime . RuntimeSingleton ; import org . apache . velocity . util . SimplePool ; public abstract class VelocityServlet extends HttpServlet { public static final String REQUEST = "req" ; public static final String RESPONSE = "res" ; public static final String CONTENT_TYPE = "default.contentType" ; public static final String DEFAULT_CONTENT_TYPE = "text/html" ; public static final String DEFAULT_OUTPUT_ENCODING = "ISO-8859-1" ; private static String defaultContentType ; protected static final String INIT_PROPS_KEY = "org.apache.velocity.properties" ; private static final String OLD_INIT_PROPS_KEY = "properties" ; private static SimplePool writerPool = new SimplePool ( 40 ) ; public void init ( ServletConfig config ) throws ServletException { super . init ( config ) ; initVelocity ( config ) ; VelocityServlet . defaultContentType = RuntimeSingleton . getString ( CONTENT_TYPE , DEFAULT_CONTENT_TYPE ) ; } protected void initVelocity ( ServletConfig config ) throws ServletException { try { Properties props = loadConfiguration ( config ) ; Velocity . init ( props ) ; } catch ( Exception e ) { throw new ServletException ( "Error initializing Velocity: " + e , e ) ; } } protected Properties loadConfiguration ( ServletConfig config ) throws IOException , FileNotFoundException { String propsFile = config . getInitParameter ( INIT_PROPS_KEY ) ; if ( propsFile == null || propsFile . length ( ) == 0 ) { ServletContext sc = config . getServletContext ( ) ; propsFile = config . getInitParameter ( OLD_INIT_PROPS_KEY ) ; if ( propsFile == null || propsFile . length ( ) == 0 ) { propsFile = sc . getInitParameter ( INIT_PROPS_KEY ) ; if ( propsFile == null || propsFile . length ( ) == 0 ) { propsFile = sc . getInitParameter ( OLD_INIT_PROPS_KEY ) ; if ( propsFile != null && propsFile . length ( ) > 0 ) { sc . log ( "Use of the properties initialization " + "parameter '" + OLD_INIT_PROPS_KEY + "' has " + "been deprecated by '" + INIT_PROPS_KEY + '\'' ) ; } } } else { sc . log ( "Use of the properties initialization parameter '" + OLD_INIT_PROPS_KEY + "' has been deprecated by '" + INIT_PROPS_KEY + '\'' ) ; } } Properties p = new Properties ( ) ; if ( propsFile != null ) { p . load ( getServletContext ( ) . getResourceAsStream ( propsFile ) ) ; } return p ; } public void doGet ( HttpServletRequest request , HttpServletResponse response ) throws ServletException , IOException { doRequest ( request , response ) ; } public void doPost ( HttpServletRequest request , HttpServletResponse response ) throws ServletException , IOException { doRequest ( request , response ) ; } protected void doRequest ( HttpServletRequest request , HttpServletResponse response ) throws ServletException , IOException { Context context = null ; try { context = createContext ( request , response ) ; setContentType ( request , response ) ; Template template = handleRequest ( request , response , context ) ; if ( template == null ) { return ; } mergeTemplate ( template , context , response ) ; } catch ( Exception e ) { error ( request , response , e ) ; } finally { requestCleanup ( request , response , context ) ; } } protected void requestCleanup ( HttpServletRequest request , HttpServletResponse response , Context context ) { } protected void mergeTemplate ( Template template , Context context , HttpServletResponse response ) throws ResourceNotFoundException , ParseErrorException , MethodInvocationException , IOException , UnsupportedEncodingException , Exception { ServletOutputStream output = response . getOutputStream ( ) ; VelocityWriter vw = null ; String encoding = response . getCharacterEncoding ( ) ; try { vw = ( VelocityWriter ) writerPool . get ( ) ; if ( vw == null ) { vw = new VelocityWriter ( new OutputStreamWriter ( output , encoding ) , 4 * 1024 , true ) ; } else { vw . recycle ( new OutputStreamWriter ( output , encoding ) ) ; } template . merge ( context , vw ) ; } finally { if ( vw != null ) { try { vw . flush ( ) ; } catch ( IOException e ) { } vw . recycle ( null ) ; writerPool . put ( vw ) ; } } } protected void setContentType ( HttpServletRequest request , HttpServletResponse response ) { String contentType = VelocityServlet . defaultContentType ; int index = contentType . lastIndexOf ( ';' ) + 1 ; if ( index <= 0 || ( index < contentType . length ( ) && contentType . indexOf ( "charset" , index ) == - 1 ) ) { String encoding = chooseCharacterEncoding ( request ) ; if ( ! DEFAULT_OUTPUT_ENCODING . equalsIgnoreCase ( encoding ) ) { contentType += "; charset=" + encoding ; } } response . setContentType ( contentType ) ; } protected String chooseCharacterEncoding ( HttpServletRequest request ) { return RuntimeSingleton . getString ( RuntimeConstants . OUTPUT_ENCODING , DEFAULT_OUTPUT_ENCODING ) ; } protected Context createContext ( HttpServletRequest request , HttpServletResponse response ) { VelocityContext context = new VelocityContext ( ) ; context . put ( REQUEST , request ) ; context . put ( RESPONSE , response ) ; return context ; } public Template getTemplate ( String name ) throws ResourceNotFoundException , ParseErrorException , Exception { return RuntimeSingleton . getTemplate ( name ) ; } public Template getTemplate ( String name , String encoding ) throws ResourceNotFoundException , ParseErrorException , Exception { return RuntimeSingleton . getTemplate ( name , encoding ) ; } protected Template handleRequest ( HttpServletRequest request , HttpServletResponse response , Context ctx ) throws Exception { Template t = handleRequest ( ctx ) ; if ( t == null ) { throw new Exception ( "handleRequest(Context) returned null - no template selected!" ) ; } return t ; } protected Template handleRequest ( Context ctx ) throws Exception { throw new Exception ( "You must override VelocityServlet.handleRequest( Context) " + " or VelocityServlet.handleRequest( HttpServletRequest, " + " HttpServletResponse, Context)" ) ; } protected void error ( HttpServletRequest request , HttpServletResponse response , Exception cause ) throws ServletException , IOException { StringBuffer html = new StringBuffer ( ) ; html . append ( "<html>" ) ; html . append ( "<title>Error</title>" ) ; html . append ( "<body bgcolor=\"#ffffff\">" ) ; html . append ( "<h2>VelocityServlet: Error processing the template</h2>" ) ; html . append ( "<pre>" ) ; String why = cause . getMessage ( ) ; if ( why != null && why . trim ( ) . length ( ) > 0 ) { html . append ( why ) ; html . append ( "<br>" ) ; } StringWriter sw = new StringWriter ( ) ; cause . printStackTrace ( new PrintWriter ( sw ) ) ; html . append ( sw . toString ( ) ) ; html . append ( "</pre>" ) ; html . append ( "</body>" ) ; html . append ( "</html>" ) ; response . getOutputStream ( ) . print ( html . toString ( ) ) ; } } 	0	['18', '3', '0', '10', '62', '149', '0', '10', '6', '1.019607843', '417', '0.444444444', '1', '0.6', '0.338235294', '1', '2', '21.66666667', '5', '1.1111', '0']
package org . apache . velocity . runtime . log ; public class LogDisplayWrapper extends Log { private final String prefix ; private final boolean outputMessages ; private final Log log ; public LogDisplayWrapper ( final Log log , final String prefix , final boolean outputMessages ) { super ( log . getLogChute ( ) ) ; this . log = log ; this . prefix = prefix ; this . outputMessages = outputMessages ; } protected LogChute getLogChute ( ) { return log . getLogChute ( ) ; } protected void log ( final int level , final Object message ) { log ( outputMessages , level , message ) ; } protected void log ( final boolean doLogging , final int level , final Object message ) { if ( doLogging ) { getLogChute ( ) . log ( level , prefix + String . valueOf ( message ) ) ; } } protected void log ( final int level , final Object message , final Throwable t ) { log ( outputMessages , level , message ) ; } protected void log ( final boolean doLogging , final int level , final Object message , final Throwable t ) { if ( doLogging ) { getLogChute ( ) . log ( level , prefix + String . valueOf ( message ) , t ) ; } } public void trace ( final boolean doLogging , final Object message ) { log ( doLogging , LogChute . TRACE_ID , message ) ; } public void trace ( final boolean doLogging , final Object message , final Throwable t ) { log ( doLogging , LogChute . TRACE_ID , message , t ) ; } public void debug ( final boolean doLogging , final Object message ) { log ( doLogging , LogChute . DEBUG_ID , message ) ; } public void debug ( final boolean doLogging , final Object message , final Throwable t ) { log ( doLogging , LogChute . DEBUG_ID , message , t ) ; } public void info ( final boolean doLogging , final Object message ) { log ( doLogging , LogChute . INFO_ID , message ) ; } public void info ( final boolean doLogging , final Object message , final Throwable t ) { log ( doLogging , LogChute . INFO_ID , message , t ) ; } public void warn ( final boolean doLogging , final Object message ) { log ( doLogging , LogChute . WARN_ID , message ) ; } public void warn ( final boolean doLogging , final Object message , final Throwable t ) { log ( doLogging , LogChute . WARN_ID , message , t ) ; } public void error ( final boolean doLogging , final Object message ) { log ( doLogging , LogChute . ERROR_ID , message ) ; } public void error ( final boolean doLogging , final Object message , final Throwable t ) { log ( doLogging , LogChute . ERROR_ID , message , t ) ; } } 	0	['16', '2', '0', '3', '24', '106', '1', '2', '11', '0.333333333', '151', '1', '1', '0.605263158', '0.5', '1', '6', '8.25', '2', '1.0625', '0']
package org . apache . velocity . runtime . parser . node ; import java . io . IOException ; import java . io . StringReader ; import java . io . StringWriter ; import org . apache . commons . lang . text . StrBuilder ; import org . apache . velocity . context . InternalContextAdapter ; import org . apache . velocity . exception . MethodInvocationException ; import org . apache . velocity . exception . ParseErrorException ; import org . apache . velocity . exception . ResourceNotFoundException ; import org . apache . velocity . exception . TemplateInitException ; import org . apache . velocity . exception . VelocityException ; import org . apache . velocity . runtime . RuntimeConstants ; import org . apache . velocity . runtime . log . Log ; import org . apache . velocity . runtime . parser . ParseException ; import org . apache . velocity . runtime . parser . Parser ; import org . apache . velocity . runtime . parser . Token ; import org . apache . velocity . runtime . visitor . BaseVisitor ; public class ASTStringLiteral extends SimpleNode { private boolean interpolate = true ; private SimpleNode nodeTree = null ; private String image = "" ; private String interpolateimage = "" ; private boolean containsLineComment ; public ASTStringLiteral ( int id ) { super ( id ) ; } public ASTStringLiteral ( Parser p , int id ) { super ( p , id ) ; } public Object init ( InternalContextAdapter context , Object data ) throws TemplateInitException { super . init ( context , data ) ; interpolate = rsvc . getBoolean ( RuntimeConstants . INTERPOLATE_STRINGLITERALS , true ) && getFirstToken ( ) . image . startsWith ( "\"" ) && ( ( getFirstToken ( ) . image . indexOf ( '$' ) != - 1 ) || ( getFirstToken ( ) . image . indexOf ( '#' ) != - 1 ) ) ; image = getFirstToken ( ) . image . substring ( 1 , getFirstToken ( ) . image . length ( ) - 1 ) ; if ( getFirstToken ( ) . image . startsWith ( "\"" ) ) { image = unescape ( image ) ; } containsLineComment = ( image . indexOf ( "##" ) != - 1 ) ; if ( ! containsLineComment ) { interpolateimage = image + " " ; } else { interpolateimage = image ; } if ( interpolate ) { StringReader br = new StringReader ( interpolateimage ) ; String templateName = ( context != null ) ? context . getCurrentTemplateName ( ) : "StringLiteral" ; try { nodeTree = rsvc . parse ( br , templateName , false ) ; } catch ( ParseException e ) { String msg = "Failed to parse String literal at " + Log . formatFileString ( templateName , getLine ( ) , getColumn ( ) ) ; throw new TemplateInitException ( msg , e , templateName , getColumn ( ) , getLine ( ) ) ; } adjTokenLineNums ( nodeTree ) ; nodeTree . init ( context , rsvc ) ; } return data ; } public void adjTokenLineNums ( Node node ) { Token tok = node . getFirstToken ( ) ; while ( tok != null && tok != node . getLastToken ( ) ) { if ( tok . beginLine == 1 ) tok . beginColumn += getColumn ( ) ; if ( tok . endLine == 1 ) tok . endColumn += getColumn ( ) ; tok . beginLine += getLine ( ) - 1 ; tok . endLine += getLine ( ) - 1 ; tok = tok . next ; } } public static String unescape ( final String string ) { int u = string . indexOf ( "\\u" ) ; if ( u < 0 ) return string ; StrBuilder result = new StrBuilder ( ) ; int lastCopied = 0 ; for ( ; ; ) { result . append ( string . substring ( lastCopied , u ) ) ; char c = ( char ) Integer . parseInt ( string . substring ( u + 2 , u + 6 ) , 16 ) ; result . append ( c ) ; lastCopied = u + 6 ; u = string . indexOf ( "\\u" , lastCopied ) ; if ( u < 0 ) { result . append ( string . substring ( lastCopied ) ) ; return result . toString ( ) ; } } } public Object jjtAccept ( ParserVisitor visitor , Object data ) { return visitor . visit ( this , data ) ; } public boolean isConstant ( ) { return ! interpolate ; } public Object value ( InternalContextAdapter context ) { if ( interpolate ) { try { StringWriter writer = new StringWriter ( ) ; nodeTree . render ( context , writer ) ; String ret = writer . toString ( ) ; if ( ! containsLineComment && ret . length ( ) > 0 ) { return ret . substring ( 0 , ret . length ( ) - 1 ) ; } else { return ret ; } } catch ( RuntimeException e ) { throw e ; } catch ( IOException e ) { String msg = "Error in interpolating string literal" ; log . error ( msg , e ) ; throw new VelocityException ( msg , e ) ; } } return image ; } } 	0	['8', '2', '0', '14', '43', '8', '4', '12', '8', '0.628571429', '376', '1', '1', '0.833333333', '0.265625', '1', '2', '45.375', '5', '1.875', '0']
package org . apache . velocity . runtime . parser . node ; import org . apache . velocity . runtime . parser . Parser ; public class ASTWord extends SimpleNode { public ASTWord ( int id ) { super ( id ) ; } public ASTWord ( Parser p , int id ) { super ( p , id ) ; } public Object jjtAccept ( ParserVisitor visitor , Object data ) { return visitor . visit ( this , data ) ; } } 	0	['3', '2', '0', '5', '6', '3', '4', '3', '3', '2', '17', '0', '0', '0.967741935', '0.533333333', '0', '0', '4.666666667', '1', '0.3333', '0']
package org . apache . velocity . util . introspection ; import java . util . HashMap ; import java . util . HashSet ; import java . util . Iterator ; import java . util . Map ; import java . util . Set ; import org . apache . velocity . runtime . log . Log ; public final class IntrospectorCacheImpl implements IntrospectorCache { public final static String CACHEDUMP_MSG = "IntrospectorCache detected classloader change. Dumping cache." ; private final Log log ; private final Map classMapCache = new HashMap ( ) ; private final Set classNameCache = new HashSet ( ) ; public IntrospectorCacheImpl ( final Log log ) { this . log = log ; } public void clear ( ) { synchronized ( classMapCache ) { classMapCache . clear ( ) ; classNameCache . clear ( ) ; log . debug ( CACHEDUMP_MSG ) ; } } public ClassMap get ( final Class c ) { if ( c == null ) { throw new IllegalArgumentException ( "class is null!" ) ; } ClassMap classMap = ( ClassMap ) classMapCache . get ( c ) ; if ( classMap == null ) { synchronized ( classMapCache ) { if ( classNameCache . contains ( c . getName ( ) ) ) { clear ( ) ; } } } return classMap ; } public ClassMap put ( final Class c ) { final ClassMap classMap = new ClassMap ( c , log ) ; synchronized ( classMapCache ) { classMapCache . put ( c , classMap ) ; classNameCache . add ( c . getName ( ) ) ; } return classMap ; } } 	0	['4', '1', '0', '4', '17', '0', '1', '3', '4', '0.333333333', '120', '0.75', '1', '0', '0.583333333', '0', '0', '28', '4', '1.5', '0']
package org . apache . velocity . app . event . implement ; import org . apache . commons . lang . StringEscapeUtils ; public class EscapeJavaScriptReference extends EscapeReference { protected String escape ( Object text ) { return StringEscapeUtils . escapeJavaScript ( text . toString ( ) ) ; } protected String getMatchAttribute ( ) { return "eventhandler.escape.javascript.match" ; } } 	0	['3', '2', '0', '2', '6', '3', '0', '2', '1', '2', '12', '0', '0', '0.714285714', '0.666666667', '1', '2', '3', '1', '0.6667', '0']
package org . apache . velocity . app . event ; import java . util . Iterator ; import org . apache . velocity . context . InternalContextAdapter ; import org . apache . velocity . runtime . RuntimeServices ; import org . apache . velocity . util . ExceptionUtils ; import org . apache . velocity . util . introspection . Info ; public class EventHandlerUtil { public static Object referenceInsert ( RuntimeServices rsvc , InternalContextAdapter context , String reference , Object value ) { EventCartridge ev1 = rsvc . getApplicationEventCartridge ( ) ; Iterator applicationEventHandlerIterator = ( ev1 == null ) ? null : ev1 . getReferenceInsertionEventHandlers ( ) ; EventCartridge ev2 = context . getEventCartridge ( ) ; initializeEventCartridge ( rsvc , ev2 ) ; Iterator contextEventHandlerIterator = ( ev2 == null ) ? null : ev2 . getReferenceInsertionEventHandlers ( ) ; try { EventHandlerMethodExecutor methodExecutor = null ; if ( applicationEventHandlerIterator != null ) { methodExecutor = new ReferenceInsertionEventHandler . referenceInsertExecutor ( context , reference , value ) ; iterateOverEventHandlers ( applicationEventHandlerIterator , methodExecutor ) ; } if ( contextEventHandlerIterator != null ) { if ( methodExecutor == null ) methodExecutor = new ReferenceInsertionEventHandler . referenceInsertExecutor ( context , reference , value ) ; iterateOverEventHandlers ( contextEventHandlerIterator , methodExecutor ) ; } return methodExecutor != null ? methodExecutor . getReturnValue ( ) : value ; } catch ( RuntimeException e ) { throw e ; } catch ( Exception e ) { throw ExceptionUtils . createRuntimeException ( "Exception in event handler." , e ) ; } } public static boolean shouldLogOnNullSet ( RuntimeServices rsvc , InternalContextAdapter context , String lhs , String rhs ) { EventCartridge ev1 = rsvc . getApplicationEventCartridge ( ) ; Iterator applicationEventHandlerIterator = ( ev1 == null ) ? null : ev1 . getNullSetEventHandlers ( ) ; EventCartridge ev2 = context . getEventCartridge ( ) ; initializeEventCartridge ( rsvc , ev2 ) ; Iterator contextEventHandlerIterator = ( ev2 == null ) ? null : ev2 . getNullSetEventHandlers ( ) ; try { EventHandlerMethodExecutor methodExecutor = new NullSetEventHandler . ShouldLogOnNullSetExecutor ( context , lhs , rhs ) ; callEventHandlers ( applicationEventHandlerIterator , contextEventHandlerIterator , methodExecutor ) ; return ( ( Boolean ) methodExecutor . getReturnValue ( ) ) . booleanValue ( ) ; } catch ( RuntimeException e ) { throw e ; } catch ( Exception e ) { throw ExceptionUtils . createRuntimeException ( "Exception in event handler." , e ) ; } } public static Object methodException ( RuntimeServices rsvc , InternalContextAdapter context , Class claz , String method , Exception e ) throws Exception { EventCartridge ev1 = rsvc . getApplicationEventCartridge ( ) ; Iterator applicationEventHandlerIterator = ( ev1 == null ) ? null : ev1 . getMethodExceptionEventHandlers ( ) ; EventCartridge ev2 = context . getEventCartridge ( ) ; initializeEventCartridge ( rsvc , ev2 ) ; Iterator contextEventHandlerIterator = ( ev2 == null ) ? null : ev2 . getMethodExceptionEventHandlers ( ) ; EventHandlerMethodExecutor methodExecutor = new MethodExceptionEventHandler . MethodExceptionExecutor ( context , claz , method , e ) ; if ( ( ( applicationEventHandlerIterator == null ) || ! applicationEventHandlerIterator . hasNext ( ) ) && ( ( contextEventHandlerIterator == null ) || ! contextEventHandlerIterator . hasNext ( ) ) ) { throw e ; } callEventHandlers ( applicationEventHandlerIterator , contextEventHandlerIterator , methodExecutor ) ; return methodExecutor . getReturnValue ( ) ; } public static String includeEvent ( RuntimeServices rsvc , InternalContextAdapter context , String includeResourcePath , String currentResourcePath , String directiveName ) { EventCartridge ev1 = rsvc . getApplicationEventCartridge ( ) ; Iterator applicationEventHandlerIterator = ( ev1 == null ) ? null : ev1 . getIncludeEventHandlers ( ) ; EventCartridge ev2 = context . getEventCartridge ( ) ; initializeEventCartridge ( rsvc , ev2 ) ; Iterator contextEventHandlerIterator = ( ev2 == null ) ? null : ev2 . getIncludeEventHandlers ( ) ; try { EventHandlerMethodExecutor methodExecutor = new IncludeEventHandler . IncludeEventExecutor ( context , includeResourcePath , currentResourcePath , directiveName ) ; callEventHandlers ( applicationEventHandlerIterator , contextEventHandlerIterator , methodExecutor ) ; return ( String ) methodExecutor . getReturnValue ( ) ; } catch ( RuntimeException e ) { throw e ; } catch ( Exception e ) { throw ExceptionUtils . createRuntimeException ( "Exception in event handler." , e ) ; } } public static Object invalidGetMethod ( RuntimeServices rsvc , InternalContextAdapter context , String reference , Object object , String property , Info info ) { return invalidReferenceHandlerCall ( new InvalidReferenceEventHandler . InvalidGetMethodExecutor ( context , reference , object , property , info ) , rsvc , context ) ; } public static void invalidSetMethod ( RuntimeServices rsvc , InternalContextAdapter context , String leftreference , String rightreference , Info info ) { invalidReferenceHandlerCall ( new InvalidReferenceEventHandler . InvalidSetMethodExecutor ( context , leftreference , rightreference , info ) , rsvc , context ) ; } public static Object invalidMethod ( RuntimeServices rsvc , InternalContextAdapter context , String reference , Object object , String method , Info info ) { return invalidReferenceHandlerCall ( new InvalidReferenceEventHandler . InvalidMethodExecutor ( context , reference , object , method , info ) , rsvc , context ) ; } public static Object invalidReferenceHandlerCall ( EventHandlerMethodExecutor methodExecutor , RuntimeServices rsvc , InternalContextAdapter context ) { EventCartridge ev1 = rsvc . getApplicationEventCartridge ( ) ; Iterator applicationEventHandlerIterator = ( ev1 == null ) ? null : ev1 . getInvalidReferenceEventHandlers ( ) ; EventCartridge ev2 = context . getEventCartridge ( ) ; initializeEventCartridge ( rsvc , ev2 ) ; Iterator contextEventHandlerIterator = ( ev2 == null ) ? null : ev2 . getInvalidReferenceEventHandlers ( ) ; try { callEventHandlers ( applicationEventHandlerIterator , contextEventHandlerIterator , methodExecutor ) ; return methodExecutor . getReturnValue ( ) ; } catch ( RuntimeException e ) { throw e ; } catch ( Exception e ) { throw ExceptionUtils . createRuntimeException ( "Exception in event handler." , e ) ; } } private static void initializeEventCartridge ( RuntimeServices rsvc , EventCartridge eventCartridge ) { if ( eventCartridge != null ) { try { eventCartridge . initialize ( rsvc ) ; } catch ( Exception e ) { throw ExceptionUtils . createRuntimeException ( "Couldn't initialize event cartridge : " , e ) ; } } } private static void callEventHandlers ( Iterator applicationEventHandlerIterator , Iterator contextEventHandlerIterator , EventHandlerMethodExecutor eventExecutor ) throws Exception { iterateOverEventHandlers ( applicationEventHandlerIterator , eventExecutor ) ; iterateOverEventHandlers ( contextEventHandlerIterator , eventExecutor ) ; } private static void iterateOverEventHandlers ( Iterator handlerIterator , EventHandlerMethodExecutor eventExecutor ) throws Exception { if ( handlerIterator != null ) { for ( Iterator i = handlerIterator ; i . hasNext ( ) ; ) { EventHandler eventHandler = ( EventHandler ) i . next ( ) ; if ( ! eventExecutor . isDone ( ) ) { eventExecutor . execute ( eventHandler ) ; } } } } } 	0	['12', '1', '0', '21', '35', '66', '6', '15', '9', '2', '337', '0', '0', '0', '0.295454545', '0', '0', '27.08333333', '7', '2', '0']
package org . apache . velocity . context ; public abstract class AbstractContext extends InternalContextBase implements Context { private Context innerContext = null ; public abstract Object internalGet ( String key ) ; public abstract Object internalPut ( String key , Object value ) ; public abstract boolean internalContainsKey ( Object key ) ; public abstract Object [ ] internalGetKeys ( ) ; public abstract Object internalRemove ( Object key ) ; public AbstractContext ( ) { } public AbstractContext ( Context inner ) { innerContext = inner ; if ( innerContext instanceof InternalEventContext ) { attachEventCartridge ( ( ( InternalEventContext ) innerContext ) . getEventCartridge ( ) ) ; } } public Object put ( String key , Object value ) { if ( key == null ) { return null ; } return internalPut ( key , value ) ; } public Object get ( String key ) { if ( key == null ) { return null ; } Object o = internalGet ( key ) ; if ( o == null && innerContext != null ) { o = innerContext . get ( key ) ; } return o ; } public boolean containsKey ( Object key ) { if ( key == null ) { return false ; } boolean exists = internalContainsKey ( key ) ; if ( ! exists && innerContext != null ) { exists = innerContext . containsKey ( key ) ; } return exists ; } public Object [ ] getKeys ( ) { return internalGetKeys ( ) ; } public Object remove ( Object key ) { if ( key == null ) { return null ; } return internalRemove ( key ) ; } public Context getChainedContext ( ) { return innerContext ; } } 	0	['13', '2', '1', '5', '18', '58', '1', '4', '13', '0.666666667', '103', '1', '1', '0.633333333', '0.461538462', '0', '0', '6.846153846', '4', '1.4615', '0']
package org . apache . velocity . runtime . parser ; public class TokenMgrError extends Error { static final int LEXICAL_ERROR = 0 ; static final int STATIC_LEXER_ERROR = 1 ; static final int INVALID_LEXICAL_STATE = 2 ; static final int LOOP_DETECTED = 3 ; int errorCode ; protected static final String addEscapes ( String str ) { StringBuffer retval = new StringBuffer ( ) ; char ch ; for ( int i = 0 ; i < str . length ( ) ; i ++ ) { switch ( str . charAt ( i ) ) { case 0 : continue ; case '\b' : retval . append ( "\\b" ) ; continue ; case '\t' : retval . append ( "\\t" ) ; continue ; case '\n' : retval . append ( "\\n" ) ; continue ; case '\f' : retval . append ( "\\f" ) ; continue ; case '\r' : retval . append ( "\\r" ) ; continue ; case '\"' : retval . append ( "\\\"" ) ; continue ; case '\'' : retval . append ( "\\\'" ) ; continue ; case '\\' : retval . append ( "\\\\" ) ; continue ; default : if ( ( ch = str . charAt ( i ) ) < 0x20 || ch > 0x7e ) { String s = "0000" + Integer . toString ( ch , 16 ) ; retval . append ( "\\u" + s . substring ( s . length ( ) - 4 , s . length ( ) ) ) ; } else { retval . append ( ch ) ; } continue ; } } return retval . toString ( ) ; } protected static String LexicalError ( boolean EOFSeen , int lexState , int errorLine , int errorColumn , String errorAfter , char curChar ) { return ( "Lexical error at line " + errorLine + ", column " + errorColumn + ".  Encountered: " + ( EOFSeen ? "<EOF> " : ( "\"" + addEscapes ( String . valueOf ( curChar ) ) + "\"" ) + " (" + ( int ) curChar + "), " ) + "after : \"" + addEscapes ( errorAfter ) + "\"" ) ; } public String getMessage ( ) { return super . getMessage ( ) ; } public TokenMgrError ( ) { } public TokenMgrError ( String message , int reason ) { super ( message ) ; errorCode = reason ; } public TokenMgrError ( boolean EOFSeen , int lexState , int errorLine , int errorColumn , String errorAfter , char curChar , int reason ) { this ( LexicalError ( EOFSeen , lexState , errorLine , errorColumn , errorAfter , curChar ) , reason ) ; } } 	0	['6', '3', '0', '2', '19', '15', '2', '0', '4', '1.12', '184', '0', '0', '0.8125', '0.5', '1', '1', '28.83333333', '14', '2.8333', '0']
package org . apache . velocity . anakia ; import java . io . IOException ; import java . io . StringWriter ; import java . io . Writer ; import java . util . ArrayList ; import java . util . Collection ; import java . util . Iterator ; import java . util . List ; import java . util . ListIterator ; import org . jdom . Attribute ; import org . jdom . CDATA ; import org . jdom . Comment ; import org . jdom . DocType ; import org . jdom . Document ; import org . jdom . Element ; import org . jdom . EntityRef ; import org . jdom . ProcessingInstruction ; import org . jdom . Text ; import org . jdom . output . XMLOutputter ; public class NodeList implements List , Cloneable { private static final AttributeXMLOutputter DEFAULT_OUTPUTTER = new AttributeXMLOutputter ( ) ; private List nodes ; public NodeList ( ) { nodes = new ArrayList ( ) ; } public NodeList ( Document document ) { this ( ( Object ) document ) ; } public NodeList ( Element element ) { this ( ( Object ) element ) ; } private NodeList ( Object object ) { if ( object == null ) { throw new IllegalArgumentException ( "Cannot construct NodeList with null." ) ; } nodes = new ArrayList ( 1 ) ; nodes . add ( object ) ; } public NodeList ( List nodes ) { this ( nodes , true ) ; } public NodeList ( List nodes , boolean copy ) { if ( nodes == null ) { throw new IllegalArgumentException ( "Cannot initialize NodeList with null list" ) ; } this . nodes = copy ? new ArrayList ( nodes ) : nodes ; } public List getList ( ) { return nodes ; } public String toString ( ) { if ( nodes . isEmpty ( ) ) { return "" ; } StringWriter sw = new StringWriter ( nodes . size ( ) * 128 ) ; try { for ( Iterator i = nodes . iterator ( ) ; i . hasNext ( ) ; ) { Object node = i . next ( ) ; if ( node instanceof Element ) { DEFAULT_OUTPUTTER . output ( ( Element ) node , sw ) ; } else if ( node instanceof Attribute ) { DEFAULT_OUTPUTTER . output ( ( Attribute ) node , sw ) ; } else if ( node instanceof Text ) { DEFAULT_OUTPUTTER . output ( ( Text ) node , sw ) ; } else if ( node instanceof Document ) { DEFAULT_OUTPUTTER . output ( ( Document ) node , sw ) ; } else if ( node instanceof ProcessingInstruction ) { DEFAULT_OUTPUTTER . output ( ( ProcessingInstruction ) node , sw ) ; } else if ( node instanceof Comment ) { DEFAULT_OUTPUTTER . output ( ( Comment ) node , sw ) ; } else if ( node instanceof CDATA ) { DEFAULT_OUTPUTTER . output ( ( CDATA ) node , sw ) ; } else if ( node instanceof DocType ) { DEFAULT_OUTPUTTER . output ( ( DocType ) node , sw ) ; } else if ( node instanceof EntityRef ) { DEFAULT_OUTPUTTER . output ( ( EntityRef ) node , sw ) ; } else { throw new IllegalArgumentException ( "Cannot process a " + ( node == null ? "null node" : "node of class " + node . getClass ( ) . getName ( ) ) ) ; } } } catch ( IOException e ) { throw new Error ( ) ; } return sw . toString ( ) ; } public Object clone ( ) throws CloneNotSupportedException { NodeList clonedList = ( NodeList ) super . clone ( ) ; clonedList . cloneNodes ( ) ; return clonedList ; } private void cloneNodes ( ) throws CloneNotSupportedException { Class listClass = nodes . getClass ( ) ; try { List clonedNodes = ( List ) listClass . newInstance ( ) ; clonedNodes . addAll ( nodes ) ; nodes = clonedNodes ; } catch ( IllegalAccessException e ) { throw new CloneNotSupportedException ( "Cannot clone NodeList since" + " there is no accessible no-arg constructor on class " + listClass . getName ( ) ) ; } catch ( InstantiationException e ) { throw new Error ( ) ; } } public int hashCode ( ) { return nodes . hashCode ( ) ; } public boolean equals ( Object o ) { return o instanceof NodeList ? ( ( NodeList ) o ) . nodes . equals ( nodes ) : false ; } public NodeList selectNodes ( String xpathString ) { return new NodeList ( XPathCache . getXPath ( xpathString ) . applyTo ( nodes ) , false ) ; } public boolean add ( Object o ) { return nodes . add ( o ) ; } public void add ( int index , Object o ) { nodes . add ( index , o ) ; } public boolean addAll ( Collection c ) { return nodes . addAll ( c ) ; } public boolean addAll ( int index , Collection c ) { return nodes . addAll ( index , c ) ; } public void clear ( ) { nodes . clear ( ) ; } public boolean contains ( Object o ) { return nodes . contains ( o ) ; } public boolean containsAll ( Collection c ) { return nodes . containsAll ( c ) ; } public Object get ( int index ) { return nodes . get ( index ) ; } public int indexOf ( Object o ) { return nodes . indexOf ( o ) ; } public boolean isEmpty ( ) { return nodes . isEmpty ( ) ; } public Iterator iterator ( ) { return nodes . iterator ( ) ; } public int lastIndexOf ( Object o ) { return nodes . lastIndexOf ( o ) ; } public ListIterator listIterator ( ) { return nodes . listIterator ( ) ; } public ListIterator listIterator ( int index ) { return nodes . listIterator ( index ) ; } public Object remove ( int index ) { return nodes . remove ( index ) ; } public boolean remove ( Object o ) { return nodes . remove ( o ) ; } public boolean removeAll ( Collection c ) { return nodes . removeAll ( c ) ; } public boolean retainAll ( Collection c ) { return nodes . retainAll ( c ) ; } public Object set ( int index , Object o ) { return nodes . set ( index , o ) ; } public int size ( ) { return nodes . size ( ) ; } public List subList ( int fromIndex , int toIndex ) { return new NodeList ( nodes . subList ( fromIndex , toIndex ) ) ; } public Object [ ] toArray ( ) { return nodes . toArray ( ) ; } public Object [ ] toArray ( Object [ ] a ) { return nodes . toArray ( a ) ; } private static final class AttributeXMLOutputter extends XMLOutputter { public void output ( Attribute attribute , Writer out ) throws IOException { out . write ( " " ) ; out . write ( attribute . getQualifiedName ( ) ) ; out . write ( "=" ) ; out . write ( "\"" ) ; out . write ( escapeAttributeEntities ( attribute . getValue ( ) ) ) ; out . write ( "\"" ) ; } } } 	0	['37', '1', '0', '16', '92', '0', '3', '13', '34', '0.5', '438', '1', '1', '0', '0.177777778', '1', '1', '10.78378378', '12', '1.1351', '0']
package org . apache . velocity . util ; public interface TemplateNumber { public Number getAsNumber ( ) ; } 	0	['1', '1', '0', '7', '1', '0', '7', '0', '1', '2', '1', '0', '0', '0', '1', '0', '0', '0', '1', '1', '0']
package org . apache . velocity . runtime . parser . node ; import org . apache . velocity . context . InternalContextAdapter ; import org . apache . velocity . exception . MethodInvocationException ; import org . apache . velocity . runtime . parser . Parser ; import org . apache . velocity . util . TemplateNumber ; public class ASTNENode extends SimpleNode { public ASTNENode ( int id ) { super ( id ) ; } public ASTNENode ( Parser p , int id ) { super ( p , id ) ; } public Object jjtAccept ( ParserVisitor visitor , Object data ) { return visitor . visit ( this , data ) ; } public boolean evaluate ( InternalContextAdapter context ) throws MethodInvocationException { Object left = jjtGetChild ( 0 ) . value ( context ) ; Object right = jjtGetChild ( 1 ) . value ( context ) ; if ( left instanceof TemplateNumber ) { left = ( ( TemplateNumber ) left ) . getAsNumber ( ) ; } if ( right instanceof TemplateNumber ) { right = ( ( TemplateNumber ) right ) . getAsNumber ( ) ; } if ( left instanceof Number && right instanceof Number ) { return MathUtils . compare ( ( Number ) left , ( Number ) right ) != 0 ; } if ( left != null && right != null && ( left . getClass ( ) . isAssignableFrom ( right . getClass ( ) ) || right . getClass ( ) . isAssignableFrom ( left . getClass ( ) ) ) ) { return ! left . equals ( right ) ; } left = ( left == null ) ? null : left . toString ( ) ; right = ( right == null ) ? null : right . toString ( ) ; if ( left == null && right == null ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Both right (" + getLiteral ( false ) + " and left " + getLiteral ( true ) + " sides of '!=' operation returned null." + "If references, they may not be in the context." + getLocation ( context ) ) ; } return false ; } else if ( left == null || right == null ) { if ( log . isDebugEnabled ( ) ) { log . debug ( ( left == null ? "Left" : "Right" ) + " side (" + getLiteral ( left == null ) + ") of '!=' operation has null value. If it is a " + "reference, it may not be in the context or its " + "toString() returned null. " + getLocation ( context ) ) ; } return true ; } else { return ! left . equals ( right ) ; } } private String getLiteral ( boolean left ) { return jjtGetChild ( left ? 0 : 1 ) . literal ( ) ; } public Object value ( InternalContextAdapter context ) throws MethodInvocationException { boolean val = evaluate ( context ) ; return val ? Boolean . TRUE : Boolean . FALSE ; } } 	0	['6', '2', '0', '11', '24', '15', '4', '9', '5', '2', '207', '0', '0', '0.882352941', '0.333333333', '2', '2', '33.5', '2', '0.8333', '0']
package org . apache . velocity . runtime . parser ; import org . apache . velocity . exception . ExtendedParseException ; import org . apache . velocity . runtime . log . Log ; public class TemplateParseException extends ParseException implements ExtendedParseException { private static final long serialVersionUID = - 3146323135623083918L ; private final String templateName ; public TemplateParseException ( Token currentTokenVal , int [ ] [ ] expectedTokenSequencesVal , String [ ] tokenImageVal , String templateNameVal ) { super ( currentTokenVal , expectedTokenSequencesVal , tokenImageVal ) ; this . templateName = templateNameVal ; } public TemplateParseException ( Token currentTokenVal , int [ ] [ ] expectedTokenSequencesVal , String [ ] tokenImageVal ) { super ( currentTokenVal , expectedTokenSequencesVal , tokenImageVal ) ; templateName = "*unset*" ; } public TemplateParseException ( ) { super ( ) ; templateName = "*unset*" ; } public TemplateParseException ( String message ) { super ( message ) ; templateName = "*unset*" ; } public String getTemplateName ( ) { return templateName ; } public int getLineNumber ( ) { if ( ( currentToken != null ) && ( currentToken . next != null ) ) { return currentToken . next . beginLine ; } else { return - 1 ; } } public int getColumnNumber ( ) { if ( ( currentToken != null ) && ( currentToken . next != null ) ) { return currentToken . next . beginColumn ; } else { return - 1 ; } } public String getMessage ( ) { if ( ! specialConstructor ) { StringBuffer sb = new StringBuffer ( super . getMessage ( ) ) ; appendTemplateInfo ( sb ) ; return sb . toString ( ) ; } int maxSize = 0 ; StringBuffer expected = new StringBuffer ( ) ; for ( int i = 0 ; i < expectedTokenSequences . length ; i ++ ) { if ( maxSize < expectedTokenSequences [ i ] . length ) { maxSize = expectedTokenSequences [ i ] . length ; } for ( int j = 0 ; j < expectedTokenSequences [ i ] . length ; j ++ ) { expected . append ( tokenImage [ expectedTokenSequences [ i ] [ j ] ] ) . append ( " " ) ; } if ( expectedTokenSequences [ i ] [ expectedTokenSequences [ i ] . length - 1 ] != 0 ) { expected . append ( "..." ) ; } expected . append ( eol ) . append ( "    " ) ; } StringBuffer retval = new StringBuffer ( "Encountered \"" ) ; Token tok = currentToken . next ; for ( int i = 0 ; i < maxSize ; i ++ ) { if ( i != 0 ) { retval . append ( " " ) ; } if ( tok . kind == 0 ) { retval . append ( tokenImage [ 0 ] ) ; break ; } retval . append ( add_escapes ( tok . image ) ) ; tok = tok . next ; } retval . append ( "\" at " ) ; appendTemplateInfo ( retval ) ; if ( expectedTokenSequences . length == 1 ) { retval . append ( "Was expecting:" ) . append ( eol ) . append ( "    " ) ; } else { retval . append ( "Was expecting one of:" ) . append ( eol ) . append ( "    " ) ; } retval . append ( expected . toString ( ) ) ; return retval . toString ( ) ; } protected void appendTemplateInfo ( final StringBuffer sb ) { sb . append ( Log . formatFileString ( getTemplateName ( ) , getLineNumber ( ) , getColumnNumber ( ) ) ) ; sb . append ( eol ) ; } } 	0	['9', '4', '0', '5', '19', '8', '1', '4', '8', '0.75', '263', '1', '0', '0.75', '0.333333333', '1', '2', '28', '10', '2', '0']
package org . apache . velocity . exception ; import org . apache . velocity . util . ExceptionUtils ; public class VelocityException extends RuntimeException { private static final long serialVersionUID = 1251243065134956045L ; private final Throwable wrapped ; public VelocityException ( final String exceptionMessage ) { super ( exceptionMessage ) ; wrapped = null ; } public VelocityException ( final String exceptionMessage , final Throwable wrapped ) { super ( exceptionMessage ) ; this . wrapped = wrapped ; ExceptionUtils . setCause ( this , wrapped ) ; } public VelocityException ( final Throwable wrapped ) { super ( ) ; this . wrapped = wrapped ; ExceptionUtils . setCause ( this , wrapped ) ; } public Throwable getWrappedThrowable ( ) { return wrapped ; } } 	0	['4', '4', '6', '38', '7', '0', '37', '1', '4', '0.666666667', '35', '1', '0', '0.928571429', '0.666666667', '0', '0', '7.25', '1', '0.25', '0']
package org . apache . velocity . runtime . parser . node ; import org . apache . velocity . context . InternalContextAdapter ; import org . apache . velocity . exception . MathException ; import org . apache . velocity . runtime . parser . Parser ; public class ASTDivNode extends ASTMathNode { public ASTDivNode ( int id ) { super ( id ) ; } public ASTDivNode ( Parser p , int id ) { super ( p , id ) ; } public Number perform ( Number left , Number right , InternalContextAdapter context ) { if ( MathUtils . isZero ( right ) ) { String msg = "Right side of division operation is zero. Must be non-zero. " + getLocation ( context ) ; if ( strictMode ) { log . error ( msg ) ; throw new MathException ( msg ) ; } else { log . debug ( msg ) ; return null ; } } return MathUtils . divide ( left , right ) ; } } 	0	['3', '3', '0', '9', '14', '3', '4', '6', '3', '2', '48', '0', '0', '0.972222222', '0.533333333', '2', '2', '15', '3', '1', '0']
package org . apache . velocity . io ; import java . io . IOException ; import java . io . Writer ; public final class VelocityWriter extends Writer { public static final int NO_BUFFER = 0 ; public static final int DEFAULT_BUFFER = - 1 ; public static final int UNBOUNDED_BUFFER = - 2 ; private int bufferSize ; private boolean autoFlush ; private Writer writer ; private char cb [ ] ; private int nextChar ; private static int defaultCharBufferSize = 8 * 1024 ; public VelocityWriter ( Writer writer ) { this ( writer , defaultCharBufferSize , true ) ; } private VelocityWriter ( int bufferSize , boolean autoFlush ) { this . bufferSize = bufferSize ; this . autoFlush = autoFlush ; } public int getBufferSize ( ) { return bufferSize ; } public boolean isAutoFlush ( ) { return autoFlush ; } public VelocityWriter ( Writer writer , int sz , boolean autoFlush ) { this ( sz , autoFlush ) ; if ( sz < 0 ) throw new IllegalArgumentException ( "Buffer size <= 0" ) ; this . writer = writer ; cb = sz == 0 ? null : new char [ sz ] ; nextChar = 0 ; } private final void flushBuffer ( ) throws IOException { if ( bufferSize == 0 ) return ; if ( nextChar == 0 ) return ; writer . write ( cb , 0 , nextChar ) ; nextChar = 0 ; } public final void clear ( ) { nextChar = 0 ; } private final void bufferOverflow ( ) throws IOException { throw new IOException ( "overflow" ) ; } public final void flush ( ) throws IOException { flushBuffer ( ) ; if ( writer != null ) { writer . flush ( ) ; } } public final void close ( ) throws IOException { if ( writer == null ) return ; flush ( ) ; } public final int getRemaining ( ) { return bufferSize - nextChar ; } public final void write ( int c ) throws IOException { if ( bufferSize == 0 ) { writer . write ( c ) ; } else { if ( nextChar >= bufferSize ) if ( autoFlush ) flushBuffer ( ) ; else bufferOverflow ( ) ; cb [ nextChar ++ ] = ( char ) c ; } } private final int min ( int a , int b ) { return ( a < b ? a : b ) ; } public final void write ( char cbuf [ ] , int off , int len ) throws IOException { if ( bufferSize == 0 ) { writer . write ( cbuf , off , len ) ; return ; } if ( len == 0 ) { return ; } if ( len >= bufferSize ) { if ( autoFlush ) flushBuffer ( ) ; else bufferOverflow ( ) ; writer . write ( cbuf , off , len ) ; return ; } int b = off , t = off + len ; while ( b < t ) { int d = min ( bufferSize - nextChar , t - b ) ; System . arraycopy ( cbuf , b , cb , nextChar , d ) ; b += d ; nextChar += d ; if ( nextChar >= bufferSize ) if ( autoFlush ) flushBuffer ( ) ; else bufferOverflow ( ) ; } } public final void write ( char buf [ ] ) throws IOException { write ( buf , 0 , buf . length ) ; } public final void write ( String s , int off , int len ) throws IOException { if ( bufferSize == 0 ) { writer . write ( s , off , len ) ; return ; } int b = off , t = off + len ; while ( b < t ) { int d = min ( bufferSize - nextChar , t - b ) ; s . getChars ( b , b + d , cb , nextChar ) ; b += d ; nextChar += d ; if ( nextChar >= bufferSize ) if ( autoFlush ) flushBuffer ( ) ; else bufferOverflow ( ) ; } } public final void write ( String s ) throws IOException { if ( s != null ) { write ( s , 0 , s . length ( ) ) ; } } public final void recycle ( Writer writer ) { this . writer = writer ; clear ( ) ; } } 	0	['19', '2', '0', '1', '29', '61', '1', '0', '14', '0.709876543', '342', '0.666666667', '0', '0.464285714', '0.305555556', '1', '2', '16.52631579', '2', '0.8421', '0']
package org . apache . velocity . runtime . parser . node ; import org . apache . velocity . runtime . parser . Parser ; public class ASTprocess extends SimpleNode { public ASTprocess ( int id ) { super ( id ) ; } public ASTprocess ( Parser p , int id ) { super ( p , id ) ; } public Object jjtAccept ( ParserVisitor visitor , Object data ) { return visitor . visit ( this , data ) ; } } 	0	['3', '2', '0', '5', '6', '3', '4', '3', '3', '2', '17', '0', '0', '0.967741935', '0.533333333', '0', '0', '4.666666667', '1', '0.3333', '0']
package org . apache . velocity . runtime . resource ; import java . util . Iterator ; import org . apache . velocity . runtime . RuntimeServices ; public interface ResourceCache { public void initialize ( RuntimeServices rs ) ; public Resource get ( Object resourceKey ) ; public Resource put ( Object resourceKey , Resource resource ) ; public Resource remove ( Object resourceKey ) ; public Iterator enumerateKeys ( ) ; } 	0	['5', '1', '0', '4', '5', '10', '2', '2', '5', '2', '5', '0', '0', '0', '0.5', '0', '0', '0', '1', '1', '0']
package org . apache . velocity . util ; import org . apache . velocity . runtime . RuntimeServices ; public interface RuntimeServicesAware { public void setRuntimeServices ( RuntimeServices rs ) ; } 	0	['1', '1', '0', '8', '1', '0', '7', '1', '1', '2', '1', '0', '0', '0', '1', '0', '0', '0', '1', '1', '0']
package org . apache . velocity . runtime . parser . node ; import java . util . ArrayList ; import java . util . List ; import org . apache . velocity . context . InternalContextAdapter ; import org . apache . velocity . exception . MethodInvocationException ; import org . apache . velocity . runtime . log . Log ; import org . apache . velocity . runtime . parser . Parser ; public class ASTIntegerRange extends SimpleNode { public ASTIntegerRange ( int id ) { super ( id ) ; } public ASTIntegerRange ( Parser p , int id ) { super ( p , id ) ; } public Object jjtAccept ( ParserVisitor visitor , Object data ) { return visitor . visit ( this , data ) ; } public Object value ( InternalContextAdapter context ) throws MethodInvocationException { Object left = jjtGetChild ( 0 ) . value ( context ) ; Object right = jjtGetChild ( 1 ) . value ( context ) ; if ( left == null || right == null ) { log . error ( ( left == null ? "Left" : "Right" ) + " side of range operator [n..m] has null value." + " Operation not possible. " + Log . formatFileString ( this ) ) ; return null ; } if ( ! ( left instanceof Number ) || ! ( right instanceof Number ) ) { log . error ( ( ! ( left instanceof Number ) ? "Left" : "Right" ) + " side of range operator is not a valid type. " + "Currently only integers (1,2,3...) and the Number type are supported. " + Log . formatFileString ( this ) ) ; return null ; } int l = ( ( Number ) left ) . intValue ( ) ; int r = ( ( Number ) right ) . intValue ( ) ; int nbrElements = Math . abs ( l - r ) ; nbrElements += 1 ; int delta = ( l >= r ) ? - 1 : 1 ; List elements = new ArrayList ( nbrElements ) ; int value = l ; for ( int i = 0 ; i < nbrElements ; i ++ ) { elements . add ( new Integer ( value ) ) ; value += delta ; } return elements ; } } 	0	['4', '2', '0', '9', '19', '6', '4', '7', '4', '2', '133', '0', '0', '0.9375', '0.416666667', '1', '1', '32.25', '1', '0.5', '0']
package org . apache . velocity . runtime . parser ; public class ParseException extends Exception { private static final long serialVersionUID = - 309603325673449381L ; public ParseException ( Token currentTokenVal , int [ ] [ ] expectedTokenSequencesVal , String [ ] tokenImageVal ) { super ( "" ) ; specialConstructor = true ; currentToken = currentTokenVal ; expectedTokenSequences = expectedTokenSequencesVal ; tokenImage = tokenImageVal ; } public ParseException ( ) { super ( ) ; specialConstructor = false ; } public ParseException ( String message ) { super ( message ) ; specialConstructor = false ; } protected boolean specialConstructor ; public Token currentToken ; public int [ ] [ ] expectedTokenSequences ; public String [ ] tokenImage ; public String getMessage ( ) { if ( ! specialConstructor ) { return super . getMessage ( ) ; } String expected = "" ; int maxSize = 0 ; for ( int i = 0 ; i < expectedTokenSequences . length ; i ++ ) { if ( maxSize < expectedTokenSequences [ i ] . length ) { maxSize = expectedTokenSequences [ i ] . length ; } for ( int j = 0 ; j < expectedTokenSequences [ i ] . length ; j ++ ) { expected += tokenImage [ expectedTokenSequences [ i ] [ j ] ] + " " ; } if ( expectedTokenSequences [ i ] [ expectedTokenSequences [ i ] . length - 1 ] != 0 ) { expected += "..." ; } expected += eol + "    " ; } String retval = "Encountered \"" ; Token tok = currentToken . next ; for ( int i = 0 ; i < maxSize ; i ++ ) { if ( i != 0 ) retval += " " ; if ( tok . kind == 0 ) { retval += tokenImage [ 0 ] ; break ; } retval += add_escapes ( tok . image ) ; tok = tok . next ; } retval += "\" at line " + currentToken . next . beginLine + ", column " + currentToken . next . beginColumn ; retval += "." + eol ; if ( expectedTokenSequences . length == 1 ) { retval += "Was expecting:" + eol + "    " ; } else { retval += "Was expecting one of:" + eol + "    " ; } retval += expected ; return retval ; } protected String eol = System . getProperty ( "line.separator" , "\n" ) ; protected String add_escapes ( String str ) { StringBuffer retval = new StringBuffer ( ) ; char ch ; for ( int i = 0 ; i < str . length ( ) ; i ++ ) { switch ( str . charAt ( i ) ) { case 0 : continue ; case '\b' : retval . append ( "\\b" ) ; continue ; case '\t' : retval . append ( "\\t" ) ; continue ; case '\n' : retval . append ( "\\n" ) ; continue ; case '\f' : retval . append ( "\\f" ) ; continue ; case '\r' : retval . append ( "\\r" ) ; continue ; case '\"' : retval . append ( "\\\"" ) ; continue ; case '\'' : retval . append ( "\\\'" ) ; continue ; case '\\' : retval . append ( "\\\\" ) ; continue ; default : if ( ( ch = str . charAt ( i ) ) < 0x20 || ch > 0x7e ) { String s = "0000" + Integer . toString ( ch , 16 ) ; retval . append ( "\\u" + s . substring ( s . length ( ) - 4 , s . length ( ) ) ) ; } else { retval . append ( ch ) ; } continue ; } } return retval . toString ( ) ; } } 	0	['5', '3', '2', '16', '18', '0', '15', '1', '4', '0.666666667', '388', '0.5', '1', '0.866666667', '0.4', '1', '1', '75.4', '14', '4.8', '0']
package org . apache . velocity . runtime . parser . node ; import java . lang . reflect . InvocationTargetException ; import java . lang . reflect . Method ; import org . apache . velocity . runtime . log . Log ; public abstract class AbstractExecutor { protected Log log = null ; private Method method = null ; public abstract Object execute ( Object o ) throws IllegalAccessException , InvocationTargetException ; public boolean isAlive ( ) { return ( method != null ) ; } public Method getMethod ( ) { return method ; } protected void setMethod ( final Method method ) { this . method = method ; } } 	0	['5', '1', '3', '6', '6', '0', '5', '1', '4', '0.625', '30', '1', '1', '0', '0.466666667', '0', '0', '4.6', '2', '1', '0']
package org . apache . velocity . runtime . parser . node ; import java . lang . reflect . InvocationTargetException ; import org . apache . velocity . exception . VelocityException ; import org . apache . velocity . runtime . log . Log ; import org . apache . velocity . util . introspection . Introspector ; public class PutExecutor extends SetExecutor { private final Introspector introspector ; private final String property ; public PutExecutor ( final Log log , final Introspector introspector , final Class clazz , final Object arg , final String property ) { this . log = log ; this . introspector = introspector ; this . property = property ; discover ( clazz , arg ) ; } protected void discover ( final Class clazz , final Object arg ) { Object [ ] params ; if ( property == null ) { params = new Object [ ] { arg } ; } else { params = new Object [ ] { property , arg } ; } try { setMethod ( introspector . getMethod ( clazz , "put" , params ) ) ; } catch ( RuntimeException e ) { throw e ; } catch ( Exception e ) { String msg = "Exception while looking for put('" + params [ 0 ] + "') method" ; log . error ( msg , e ) ; throw new VelocityException ( msg , e ) ; } } public Object execute ( final Object o , final Object value ) throws IllegalAccessException , InvocationTargetException { Object [ ] params ; if ( isAlive ( ) ) { if ( property == null ) { params = new Object [ ] { value } ; } else { params = new Object [ ] { property , value } ; } return getMethod ( ) . invoke ( o , params ) ; } return null ; } } 	0	['3', '2', '0', '5', '15', '0', '1', '4', '2', '0.25', '116', '1', '1', '0.666666667', '0.611111111', '0', '0', '37', '2', '1', '0']
package org . apache . velocity . runtime . log ; import org . apache . velocity . runtime . RuntimeLogger ; public class RuntimeLoggerLog extends Log { private RuntimeLogger rlog ; public RuntimeLoggerLog ( RuntimeLogger rlog ) { if ( rlog == null ) { throw new NullPointerException ( "RuntimeLogger cannot be null!" ) ; } this . rlog = rlog ; } protected void setLogChute ( LogChute newLogChute ) { throw new UnsupportedOperationException ( "RuntimeLoggerLog does not support this method." ) ; } protected LogChute getLogChute ( ) { throw new UnsupportedOperationException ( "RuntimeLoggerLog does not support this method." ) ; } protected void setShowStackTraces ( boolean showStacks ) { throw new UnsupportedOperationException ( "RuntimeLoggerLog does not support this method." ) ; } public boolean getShowStackTraces ( ) { throw new UnsupportedOperationException ( "RuntimeLoggerLog does not support this method." ) ; } public boolean isTraceEnabled ( ) { return true ; } public void trace ( Object message ) { debug ( message ) ; } public void trace ( Object message , Throwable t ) { debug ( message , t ) ; } public boolean isDebugEnabled ( ) { return true ; } public void debug ( Object message ) { rlog . debug ( message ) ; } public void debug ( Object message , Throwable t ) { rlog . debug ( message ) ; rlog . debug ( t ) ; } public boolean isInfoEnabled ( ) { return true ; } public void info ( Object message ) { rlog . info ( message ) ; } public void info ( Object message , Throwable t ) { rlog . info ( message ) ; rlog . info ( t ) ; } public boolean isWarnEnabled ( ) { return true ; } public void warn ( Object message ) { rlog . warn ( message ) ; } public void warn ( Object message , Throwable t ) { rlog . warn ( message ) ; rlog . warn ( t ) ; } public boolean isErrorEnabled ( ) { return true ; } public void error ( Object message ) { rlog . error ( message ) ; } public void error ( Object message , Throwable t ) { rlog . error ( message ) ; rlog . error ( t ) ; } } 	0	['20', '2', '0', '8', '27', '118', '5', '3', '17', '0.473684211', '129', '1', '1', '0.547619048', '0.316666667', '1', '3', '5.4', '1', '0.95', '0']
package org . apache . velocity . runtime . parser . node ; import org . apache . velocity . context . InternalContextAdapter ; import org . apache . velocity . exception . MethodInvocationException ; import org . apache . velocity . runtime . parser . Parser ; import org . apache . velocity . util . TemplateNumber ; public class ASTEQNode extends SimpleNode { public ASTEQNode ( int id ) { super ( id ) ; } public ASTEQNode ( Parser p , int id ) { super ( p , id ) ; } public Object jjtAccept ( ParserVisitor visitor , Object data ) { return visitor . visit ( this , data ) ; } public boolean evaluate ( InternalContextAdapter context ) throws MethodInvocationException { Object left = jjtGetChild ( 0 ) . value ( context ) ; Object right = jjtGetChild ( 1 ) . value ( context ) ; if ( left instanceof TemplateNumber ) { left = ( ( TemplateNumber ) left ) . getAsNumber ( ) ; } if ( right instanceof TemplateNumber ) { right = ( ( TemplateNumber ) right ) . getAsNumber ( ) ; } if ( left instanceof Number && right instanceof Number ) { return MathUtils . compare ( ( Number ) left , ( Number ) right ) == 0 ; } if ( left != null && right != null && ( left . getClass ( ) . isAssignableFrom ( right . getClass ( ) ) || right . getClass ( ) . isAssignableFrom ( left . getClass ( ) ) ) ) { return left . equals ( right ) ; } left = ( left == null ) ? null : left . toString ( ) ; right = ( right == null ) ? null : right . toString ( ) ; if ( left == null && right == null ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Both right (" + getLiteral ( false ) + " and left " + getLiteral ( true ) + " sides of '==' operation returned null." + "If references, they may not be in the context." + getLocation ( context ) ) ; } return true ; } else if ( left == null || right == null ) { if ( log . isDebugEnabled ( ) ) { log . debug ( ( left == null ? "Left" : "Right" ) + " side (" + getLiteral ( left == null ) + ") of '==' operation has null value. If it is a " + "reference, it may not be in the context or its " + "toString() returned null. " + getLocation ( context ) ) ; } return false ; } else { return left . equals ( right ) ; } } private String getLiteral ( boolean left ) { return jjtGetChild ( left ? 0 : 1 ) . literal ( ) ; } public Object value ( InternalContextAdapter context ) throws MethodInvocationException { return evaluate ( context ) ? Boolean . TRUE : Boolean . FALSE ; } } 	0	['6', '2', '0', '11', '24', '15', '4', '9', '5', '2', '197', '0', '0', '0.882352941', '0.333333333', '2', '2', '31.83333333', '2', '0.8333', '0']
package org . apache . velocity . runtime . log ; import java . util . logging . Level ; import java . util . logging . Logger ; import org . apache . velocity . runtime . RuntimeServices ; public class JdkLogChute implements LogChute { public static final String RUNTIME_LOG_JDK_LOGGER = "runtime.log.logsystem.jdk.logger" ; public static final String RUNTIME_LOG_JDK_LOGGER_LEVEL = "runtime.log.logsystem.jdk.logger.level" ; public static final String DEFAULT_LOG_NAME = "org.apache.velocity" ; protected Logger logger = null ; public void init ( RuntimeServices rs ) { String name = ( String ) rs . getProperty ( RUNTIME_LOG_JDK_LOGGER ) ; if ( name == null ) { name = DEFAULT_LOG_NAME ; } logger = Logger . getLogger ( name ) ; String lvl = rs . getString ( RUNTIME_LOG_JDK_LOGGER_LEVEL ) ; if ( lvl != null ) { Level level = Level . parse ( lvl ) ; logger . setLevel ( level ) ; log ( LogChute . DEBUG_ID , "JdkLogChute will use logger '" + name + '\'' + " at level '" + level + '\'' ) ; } } protected Level getJdkLevel ( int level ) { switch ( level ) { case LogChute . WARN_ID : return Level . WARNING ; case LogChute . INFO_ID : return Level . INFO ; case LogChute . DEBUG_ID : return Level . FINE ; case LogChute . TRACE_ID : return Level . FINEST ; case LogChute . ERROR_ID : return Level . SEVERE ; default : return Level . FINER ; } } public void log ( int level , String message ) { log ( level , message , null ) ; } public void log ( int level , String message , Throwable t ) { Level jdkLevel = getJdkLevel ( level ) ; if ( t == null ) { logger . log ( jdkLevel , message ) ; } else { logger . log ( jdkLevel , message , t ) ; } } public boolean isLevelEnabled ( int level ) { Level jdkLevel = getJdkLevel ( level ) ; return logger . isLoggable ( jdkLevel ) ; } } 	0	['6', '1', '0', '2', '20', '3', '0', '2', '5', '0.95', '110', '0.25', '0', '0', '0.466666667', '0', '0', '16.66666667', '3', '1.5', '0']
package org . apache . velocity . util . introspection ; import java . lang . reflect . Method ; import org . apache . velocity . runtime . log . Log ; public abstract class IntrospectorBase { protected final Log log ; private final IntrospectorCache introspectorCache ; protected IntrospectorBase ( final Log log ) { this . log = log ; introspectorCache = new IntrospectorCacheImpl ( log ) ; } public Method getMethod ( final Class c , final String name , final Object [ ] params ) throws IllegalArgumentException , MethodMap . AmbiguousException { if ( c == null ) { throw new IllegalArgumentException ( "class object is null!" ) ; } if ( params == null ) { throw new IllegalArgumentException ( "params object is null!" ) ; } IntrospectorCache ic = getIntrospectorCache ( ) ; ClassMap classMap = ic . get ( c ) ; if ( classMap == null ) { classMap = ic . put ( c ) ; } return classMap . findMethod ( name , params ) ; } protected IntrospectorCache getIntrospectorCache ( ) { return introspectorCache ; } } 	0	['3', '1', '1', '6', '9', '1', '1', '5', '1', '0.5', '52', '1', '2', '0', '0.466666667', '0', '0', '15.66666667', '1', '0.6667', '0']
package org . apache . velocity . runtime . parser . node ; import java . io . IOException ; import java . io . Writer ; import org . apache . velocity . context . InternalContextAdapter ; import org . apache . velocity . exception . MethodInvocationException ; import org . apache . velocity . exception . ParseErrorException ; import org . apache . velocity . exception . ResourceNotFoundException ; import org . apache . velocity . runtime . parser . Parser ; public class ASTIfStatement extends SimpleNode { public ASTIfStatement ( int id ) { super ( id ) ; } public ASTIfStatement ( Parser p , int id ) { super ( p , id ) ; } public Object jjtAccept ( ParserVisitor visitor , Object data ) { return visitor . visit ( this , data ) ; } public boolean render ( InternalContextAdapter context , Writer writer ) throws IOException , MethodInvocationException , ResourceNotFoundException , ParseErrorException { if ( jjtGetChild ( 0 ) . evaluate ( context ) ) { jjtGetChild ( 1 ) . render ( context , writer ) ; return true ; } int totalNodes = jjtGetNumChildren ( ) ; for ( int i = 2 ; i < totalNodes ; i ++ ) { if ( jjtGetChild ( i ) . evaluate ( context ) ) { jjtGetChild ( i ) . render ( context , writer ) ; return true ; } } return true ; } public void process ( InternalContextAdapter context , ParserVisitor visitor ) { } } 	0	['5', '2', '0', '11', '12', '10', '5', '8', '5', '2', '62', '0', '0', '0.909090909', '0.4', '1', '2', '11.4', '1', '0.6', '0']
package org . apache . velocity . exception ; import org . apache . commons . lang . StringUtils ; import org . apache . velocity . runtime . log . Log ; public class MethodInvocationException extends VelocityException implements ExtendedParseException { private static final long serialVersionUID = 7305685093478106342L ; private String referenceName = "" ; private final String methodName ; private final int lineNumber ; private final int columnNumber ; private final String templateName ; public MethodInvocationException ( final String message , final Throwable e , final String methodName , final String templateName , final int lineNumber , final int columnNumber ) { super ( message , e ) ; this . methodName = methodName ; this . templateName = templateName ; this . lineNumber = lineNumber ; this . columnNumber = columnNumber ; } public String getMethodName ( ) { return methodName ; } public void setReferenceName ( String ref ) { referenceName = ref ; } public String getReferenceName ( ) { return referenceName ; } public int getColumnNumber ( ) { return columnNumber ; } public int getLineNumber ( ) { return lineNumber ; } public String getTemplateName ( ) { return templateName ; } public String getMessage ( ) { StringBuffer message = new StringBuffer ( ) ; message . append ( super . getMessage ( ) ) ; message . append ( " at " ) ; message . append ( Log . formatFileString ( templateName , lineNumber , columnNumber ) ) ; return message . toString ( ) ; } } 	0	['8', '5', '0', '46', '14', '6', '43', '3', '8', '0.80952381', '79', '1', '0', '0.666666667', '0.375', '1', '1', '8.125', '1', '0.875', '0']
package org . apache . velocity . app . event ; import org . apache . velocity . context . Context ; import org . apache . velocity . util . ContextAware ; public interface NullSetEventHandler extends EventHandler { public boolean shouldLogOnNullSet ( String lhs , String rhs ) ; static class ShouldLogOnNullSetExecutor implements EventHandlerMethodExecutor { private Context context ; private String lhs ; private String rhs ; private boolean result = true ; private boolean executed = false ; ShouldLogOnNullSetExecutor ( Context context , String lhs , String rhs ) { this . context = context ; this . lhs = lhs ; this . rhs = rhs ; } public void execute ( EventHandler handler ) { NullSetEventHandler eh = ( NullSetEventHandler ) handler ; if ( eh instanceof ContextAware ) ( ( ContextAware ) eh ) . setContext ( context ) ; executed = true ; result = ( ( NullSetEventHandler ) handler ) . shouldLogOnNullSet ( lhs , rhs ) ; } public Object getReturnValue ( ) { return result ? Boolean . TRUE : Boolean . FALSE ; } public boolean isDone ( ) { return executed && ! result ; } } } 	0	['1', '1', '0', '4', '1', '0', '3', '1', '1', '2', '1', '0', '0', '0', '1', '0', '0', '0', '1', '1', '0']
package org . apache . velocity . runtime . log ; import org . apache . velocity . runtime . parser . node . Node ; import org . apache . velocity . util . introspection . Info ; public class Log { private LogChute chute ; public Log ( ) { setLogChute ( new HoldingLogChute ( ) ) ; } public Log ( final LogChute chute ) { setLogChute ( chute ) ; } protected void setLogChute ( final LogChute chute ) { if ( chute == null ) { throw new NullPointerException ( "The LogChute cannot be set to null!" ) ; } this . chute = chute ; } protected LogChute getLogChute ( ) { return this . chute ; } protected void log ( int level , Object message ) { getLogChute ( ) . log ( level , String . valueOf ( message ) ) ; } protected void log ( int level , Object message , Throwable t ) { getLogChute ( ) . log ( level , String . valueOf ( message ) , t ) ; } public boolean isTraceEnabled ( ) { return getLogChute ( ) . isLevelEnabled ( LogChute . TRACE_ID ) ; } public void trace ( Object message ) { log ( LogChute . TRACE_ID , message ) ; } public void trace ( Object message , Throwable t ) { log ( LogChute . TRACE_ID , message , t ) ; } public boolean isDebugEnabled ( ) { return getLogChute ( ) . isLevelEnabled ( LogChute . DEBUG_ID ) ; } public void debug ( Object message ) { log ( LogChute . DEBUG_ID , message ) ; } public void debug ( Object message , Throwable t ) { log ( LogChute . DEBUG_ID , message , t ) ; } public boolean isInfoEnabled ( ) { return getLogChute ( ) . isLevelEnabled ( LogChute . INFO_ID ) ; } public void info ( Object message ) { log ( LogChute . INFO_ID , message ) ; } public void info ( Object message , Throwable t ) { log ( LogChute . INFO_ID , message , t ) ; } public boolean isWarnEnabled ( ) { return getLogChute ( ) . isLevelEnabled ( LogChute . WARN_ID ) ; } public void warn ( Object message ) { log ( LogChute . WARN_ID , message ) ; } public void warn ( Object message , Throwable t ) { log ( LogChute . WARN_ID , message , t ) ; } public boolean isErrorEnabled ( ) { return getLogChute ( ) . isLevelEnabled ( LogChute . ERROR_ID ) ; } public void error ( Object message ) { log ( LogChute . ERROR_ID , message ) ; } public void error ( Object message , Throwable t ) { log ( LogChute . ERROR_ID , message , t ) ; } public static final String formatFileString ( Node node ) { return formatFileString ( node . getTemplateName ( ) , node . getLine ( ) , node . getColumn ( ) ) ; } public static final String formatFileString ( Info info ) { return formatFileString ( info . getTemplateName ( ) , info . getLine ( ) , info . getColumn ( ) ) ; } public static final String formatFileString ( String template , int linenum , int colnum ) { if ( template == null || template . equals ( "" ) ) { template = "<unknown template>" ; } return template + "[line " + linenum + ", column " + colnum + "]" ; } } 	0	['25', '1', '2', '80', '46', '298', '76', '5', '21', '0.166666667', '198', '1', '1', '0', '0.213333333', '0', '0', '6.88', '3', '1.04', '0']
package org . apache . velocity . util ; import java . io . ByteArrayOutputStream ; import java . io . File ; import java . io . FileReader ; import java . io . PrintWriter ; import java . util . ArrayList ; import java . util . Hashtable ; import java . util . List ; import java . util . Map ; import java . util . StringTokenizer ; public class StringUtils { private static final String EOL = System . getProperty ( "line.separator" ) ; public String concat ( List list ) { StringBuffer sb = new StringBuffer ( ) ; int size = list . size ( ) ; for ( int i = 0 ; i < size ; i ++ ) { sb . append ( list . get ( i ) . toString ( ) ) ; } return sb . toString ( ) ; } static public String getPackageAsPath ( String pckge ) { return pckge . replace ( '.' , File . separator . charAt ( 0 ) ) + File . separator ; } static public String removeUnderScores ( String data ) { String temp = null ; StringBuffer out = new StringBuffer ( ) ; temp = data ; StringTokenizer st = new StringTokenizer ( temp , "_" ) ; while ( st . hasMoreTokens ( ) ) { String element = ( String ) st . nextElement ( ) ; out . append ( firstLetterCaps ( element ) ) ; } return out . toString ( ) ; } static public String removeAndHump ( String data ) { return removeAndHump ( data , "_" ) ; } static public String removeAndHump ( String data , String replaceThis ) { String temp = null ; StringBuffer out = new StringBuffer ( ) ; temp = data ; StringTokenizer st = new StringTokenizer ( temp , replaceThis ) ; while ( st . hasMoreTokens ( ) ) { String element = ( String ) st . nextElement ( ) ; out . append ( capitalizeFirstLetter ( element ) ) ; } return out . toString ( ) ; } static public String firstLetterCaps ( String data ) { String firstLetter = data . substring ( 0 , 1 ) . toUpperCase ( ) ; String restLetters = data . substring ( 1 ) . toLowerCase ( ) ; return firstLetter + restLetters ; } static public String capitalizeFirstLetter ( String data ) { String firstLetter = data . substring ( 0 , 1 ) . toUpperCase ( ) ; String restLetters = data . substring ( 1 ) ; return firstLetter + restLetters ; } public static String [ ] split ( String line , String delim ) { List list = new ArrayList ( ) ; StringTokenizer t = new StringTokenizer ( line , delim ) ; while ( t . hasMoreTokens ( ) ) { list . add ( t . nextToken ( ) ) ; } return ( String [ ] ) list . toArray ( new String [ list . size ( ) ] ) ; } public static String chop ( String s , int i ) { return chop ( s , i , EOL ) ; } public static String chop ( String s , int i , String eol ) { if ( i == 0 || s == null || eol == null ) { return s ; } int length = s . length ( ) ; if ( eol . length ( ) == 2 && s . endsWith ( eol ) ) { length -= 2 ; i -= 1 ; } if ( i > 0 ) { length -= i ; } if ( length < 0 ) { length = 0 ; } return s . substring ( 0 , length ) ; } public static StringBuffer stringSubstitution ( String argStr , Hashtable vars ) { return stringSubstitution ( argStr , ( Map ) vars ) ; } public static StringBuffer stringSubstitution ( String argStr , Map vars ) { StringBuffer argBuf = new StringBuffer ( ) ; for ( int cIdx = 0 ; cIdx < argStr . length ( ) ; ) { char ch = argStr . charAt ( cIdx ) ; switch ( ch ) { case '$' : StringBuffer nameBuf = new StringBuffer ( ) ; for ( ++ cIdx ; cIdx < argStr . length ( ) ; ++ cIdx ) { ch = argStr . charAt ( cIdx ) ; if ( ch == '_' || Character . isLetterOrDigit ( ch ) ) nameBuf . append ( ch ) ; else break ; } if ( nameBuf . length ( ) > 0 ) { String value = ( String ) vars . get ( nameBuf . toString ( ) ) ; if ( value != null ) { argBuf . append ( value ) ; } } break ; default : argBuf . append ( ch ) ; ++ cIdx ; break ; } } return argBuf ; } public static String fileContentsToString ( String file ) { String contents = "" ; File f = null ; try { f = new File ( file ) ; if ( f . exists ( ) ) { FileReader fr = null ; try { fr = new FileReader ( f ) ; char [ ] template = new char [ ( int ) f . length ( ) ] ; fr . read ( template ) ; contents = new String ( template ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; } finally { if ( fr != null ) { fr . close ( ) ; } } } } catch ( Exception e ) { e . printStackTrace ( ) ; } return contents ; } public static String collapseNewlines ( String argStr ) { char last = argStr . charAt ( 0 ) ; StringBuffer argBuf = new StringBuffer ( ) ; for ( int cIdx = 0 ; cIdx < argStr . length ( ) ; cIdx ++ ) { char ch = argStr . charAt ( cIdx ) ; if ( ch != '\n' || last != '\n' ) { argBuf . append ( ch ) ; last = ch ; } } return argBuf . toString ( ) ; } public static String collapseSpaces ( String argStr ) { char last = argStr . charAt ( 0 ) ; StringBuffer argBuf = new StringBuffer ( ) ; for ( int cIdx = 0 ; cIdx < argStr . length ( ) ; cIdx ++ ) { char ch = argStr . charAt ( cIdx ) ; if ( ch != ' ' || last != ' ' ) { argBuf . append ( ch ) ; last = ch ; } } return argBuf . toString ( ) ; } public static final String sub ( String line , String oldString , String newString ) { int i = 0 ; if ( ( i = line . indexOf ( oldString , i ) ) >= 0 ) { char [ ] line2 = line . toCharArray ( ) ; char [ ] newString2 = newString . toCharArray ( ) ; int oLength = oldString . length ( ) ; StringBuffer buf = new StringBuffer ( line2 . length ) ; buf . append ( line2 , 0 , i ) . append ( newString2 ) ; i += oLength ; int j = i ; while ( ( i = line . indexOf ( oldString , i ) ) > 0 ) { buf . append ( line2 , j , i - j ) . append ( newString2 ) ; i += oLength ; j = i ; } buf . append ( line2 , j , line2 . length - j ) ; return buf . toString ( ) ; } return line ; } public static final String stackTrace ( Throwable e ) { String foo = null ; try { ByteArrayOutputStream ostr = new ByteArrayOutputStream ( ) ; e . printStackTrace ( new PrintWriter ( ostr , true ) ) ; foo = ostr . toString ( ) ; } catch ( Exception f ) { } return foo ; } public static final String normalizePath ( String path ) { String normalized = path ; if ( normalized . indexOf ( '\\' ) >= 0 ) { normalized = normalized . replace ( '\\' , '/' ) ; } if ( ! normalized . startsWith ( "/" ) ) { normalized = "/" + normalized ; } while ( true ) { int index = normalized . indexOf ( "//" ) ; if ( index < 0 ) break ; normalized = normalized . substring ( 0 , index ) + normalized . substring ( index + 1 ) ; } while ( true ) { int index = normalized . indexOf ( "%20" ) ; if ( index < 0 ) break ; normalized = normalized . substring ( 0 , index ) + " " + normalized . substring ( index + 3 ) ; } while ( true ) { int index = normalized . indexOf ( "/./" ) ; if ( index < 0 ) break ; normalized = normalized . substring ( 0 , index ) + normalized . substring ( index + 2 ) ; } while ( true ) { int index = normalized . indexOf ( "/../" ) ; if ( index < 0 ) break ; if ( index == 0 ) return ( null ) ; int index2 = normalized . lastIndexOf ( '/' , index - 1 ) ; normalized = normalized . substring ( 0 , index2 ) + normalized . substring ( index + 3 ) ; } return ( normalized ) ; } public String select ( boolean state , String trueString , String falseString ) { if ( state ) { return trueString ; } else { return falseString ; } } public boolean allEmpty ( List list ) { int size = list . size ( ) ; for ( int i = 0 ; i < size ; i ++ ) { if ( list . get ( i ) != null && list . get ( i ) . toString ( ) . length ( ) > 0 ) { return false ; } } return true ; } public static List trimStrings ( List list ) { if ( list == null ) return null ; int sz = list . size ( ) ; for ( int i = 0 ; i < sz ; i ++ ) list . set ( i , nullTrim ( ( String ) list . get ( i ) ) ) ; return list ; } public static String nullTrim ( String s ) { if ( s == null ) { return null ; } else { return s . trim ( ) ; } } } 	0	['24', '1', '0', '11', '74', '274', '11', '0', '23', '0.956521739', '731', '1', '0', '0', '0.168478261', '0', '0', '29.41666667', '8', '2.5833', '0']
package org . apache . velocity . runtime . parser . node ; import java . io . IOException ; import java . io . Writer ; import org . apache . velocity . context . InternalContextAdapter ; import org . apache . velocity . exception . MethodInvocationException ; import org . apache . velocity . exception . ParseErrorException ; import org . apache . velocity . exception . ResourceNotFoundException ; import org . apache . velocity . runtime . parser . Parser ; public class ASTBlock extends SimpleNode { public ASTBlock ( int id ) { super ( id ) ; } public ASTBlock ( Parser p , int id ) { super ( p , id ) ; } public Object jjtAccept ( ParserVisitor visitor , Object data ) { return visitor . visit ( this , data ) ; } public boolean render ( InternalContextAdapter context , Writer writer ) throws IOException , MethodInvocationException , ResourceNotFoundException , ParseErrorException { int i , k = jjtGetNumChildren ( ) ; for ( i = 0 ; i < k ; i ++ ) jjtGetChild ( i ) . render ( context , writer ) ; return true ; } } 	0	['4', '2', '0', '10', '10', '6', '4', '8', '4', '2', '37', '0', '0', '0.9375', '0.392857143', '1', '1', '8.25', '1', '0.5', '0']
package org . apache . velocity . runtime . parser . node ; import java . io . IOException ; import java . io . Writer ; import org . apache . velocity . context . InternalContextAdapter ; import org . apache . velocity . exception . MethodInvocationException ; import org . apache . velocity . exception . ParseErrorException ; import org . apache . velocity . exception . ResourceNotFoundException ; import org . apache . velocity . runtime . parser . Parser ; public class ASTElseIfStatement extends SimpleNode { public ASTElseIfStatement ( int id ) { super ( id ) ; } public ASTElseIfStatement ( Parser p , int id ) { super ( p , id ) ; } public Object jjtAccept ( ParserVisitor visitor , Object data ) { return visitor . visit ( this , data ) ; } public boolean evaluate ( InternalContextAdapter context ) throws MethodInvocationException { return jjtGetChild ( 0 ) . evaluate ( context ) ; } public boolean render ( InternalContextAdapter context , Writer writer ) throws IOException , MethodInvocationException , ResourceNotFoundException , ParseErrorException { return jjtGetChild ( 1 ) . render ( context , writer ) ; } } 	0	['5', '2', '0', '10', '11', '10', '4', '8', '5', '2', '32', '0', '0', '0.909090909', '0.371428571', '1', '2', '5.4', '1', '0.6', '0']
package org . apache . velocity . runtime . parser . node ; import org . apache . commons . lang . text . StrBuilder ; import org . apache . velocity . context . Context ; import org . apache . velocity . exception . MethodInvocationException ; import org . apache . velocity . runtime . parser . ParserConstants ; import org . apache . velocity . runtime . parser . Token ; public class NodeUtils { public static String specialText ( Token t ) { if ( t . specialToken == null || t . specialToken . image . startsWith ( "##" ) ) { return "" ; } return getSpecialText ( t ) . toString ( ) ; } public static StrBuilder getSpecialText ( Token t ) { StrBuilder sb = new StrBuilder ( ) ; Token tmp_t = t . specialToken ; while ( tmp_t . specialToken != null ) { tmp_t = tmp_t . specialToken ; } while ( tmp_t != null ) { String st = tmp_t . image ; for ( int i = 0 , is = st . length ( ) ; i < is ; i ++ ) { char c = st . charAt ( i ) ; if ( c == '#' || c == '$' ) { sb . append ( c ) ; } if ( c == '\\' ) { boolean ok = true ; boolean term = false ; int j = i ; for ( ok = true ; ok && j < is ; j ++ ) { char cc = st . charAt ( j ) ; if ( cc == '\\' ) { continue ; } else if ( cc == '$' ) { term = true ; ok = false ; } else { ok = false ; } } if ( term ) { String foo = st . substring ( i , j ) ; sb . append ( foo ) ; i = j ; } } } tmp_t = tmp_t . next ; } return sb ; } public static String tokenLiteral ( Token t ) { if ( t . kind == ParserConstants . MULTI_LINE_COMMENT ) { return "" ; } else if ( t . specialToken == null || t . specialToken . image . startsWith ( "##" ) ) { return t . image ; } else { StrBuilder special = getSpecialText ( t ) ; if ( special . length ( ) > 0 ) { return special . append ( t . image ) . toString ( ) ; } return t . image ; } } public static String interpolate ( String argStr , Context vars ) throws MethodInvocationException { if ( argStr . indexOf ( '$' ) == - 1 ) return argStr ; StrBuilder argBuf = new StrBuilder ( ) ; for ( int cIdx = 0 , is = argStr . length ( ) ; cIdx < is ; ) { char ch = argStr . charAt ( cIdx ) ; if ( ch == '$' ) { StrBuilder nameBuf = new StrBuilder ( ) ; for ( ++ cIdx ; cIdx < is ; ++ cIdx ) { ch = argStr . charAt ( cIdx ) ; if ( ch == '_' || ch == '-' || Character . isLetterOrDigit ( ch ) ) nameBuf . append ( ch ) ; else if ( ch == '{' || ch == '}' ) continue ; else break ; } if ( nameBuf . length ( ) > 0 ) { Object value = vars . get ( nameBuf . toString ( ) ) ; if ( value == null ) argBuf . append ( "$" ) . append ( nameBuf . toString ( ) ) ; else argBuf . append ( value . toString ( ) ) ; } } else { argBuf . append ( ch ) ; ++ cIdx ; } } return argBuf . toString ( ) ; } } 	0	['5', '1', '0', '6', '19', '10', '2', '4', '5', '2', '247', '0', '0', '0', '0.3', '0', '0', '48.4', '12', '4.2', '0']
package org . apache . velocity . anakia ; public class Escape { public static final String LINE_SEPARATOR = System . getProperty ( "line.separator" ) ; public Escape ( ) { } public static final String getText ( String st ) { StringBuffer buff = new StringBuffer ( ) ; char [ ] block = st . toCharArray ( ) ; String stEntity = null ; int i , last ; for ( i = 0 , last = 0 ; i < block . length ; i ++ ) { switch ( block [ i ] ) { case '<' : stEntity = "&lt;" ; break ; case '>' : stEntity = "&gt;" ; break ; case '&' : stEntity = "&amp;" ; break ; case '"' : stEntity = "&quot;" ; break ; case '\n' : stEntity = LINE_SEPARATOR ; break ; default : break ; } if ( stEntity != null ) { buff . append ( block , last , i - last ) ; buff . append ( stEntity ) ; stEntity = null ; last = i + 1 ; } } if ( last < block . length ) { buff . append ( block , last , i - last ) ; } return buff . toString ( ) ; } } 	0	['3', '1', '0', '1', '10', '1', '1', '0', '2', '0.5', '84', '0', '0', '0', '0.5', '0', '0', '26.66666667', '10', '3.3333', '0']
package org . apache . velocity . runtime ; import java . io . StringReader ; import java . util . HashMap ; import java . util . List ; import java . util . Map ; import java . util . Vector ; import java . util . ArrayList ; import org . apache . commons . lang . StringUtils ; import org . apache . velocity . Template ; import org . apache . velocity . exception . VelocityException ; import org . apache . velocity . runtime . directive . Directive ; import org . apache . velocity . runtime . directive . Macro ; import org . apache . velocity . runtime . directive . VelocimacroProxy ; import org . apache . velocity . runtime . log . LogDisplayWrapper ; import org . apache . velocity . runtime . parser . ParseException ; import org . apache . velocity . runtime . parser . node . Node ; public class VelocimacroFactory { private final RuntimeServices rsvc ; private final LogDisplayWrapper log ; private VelocimacroManager vmManager = null ; private boolean replaceAllowed = false ; private boolean addNewAllowed = true ; private boolean templateLocal = false ; private boolean autoReloadLibrary = false ; private List macroLibVec = null ; private Map libModMap ; public VelocimacroFactory ( final RuntimeServices rsvc ) { this . rsvc = rsvc ; this . log = new LogDisplayWrapper ( rsvc . getLog ( ) , "Velocimacro : " , rsvc . getBoolean ( RuntimeConstants . VM_MESSAGES_ON , true ) ) ; libModMap = new HashMap ( ) ; vmManager = new VelocimacroManager ( rsvc ) ; } public void initVelocimacro ( ) { synchronized ( this ) { log . trace ( "initialization starting." ) ; setReplacementPermission ( true ) ; vmManager . setNamespaceUsage ( false ) ; Object libfiles = rsvc . getProperty ( RuntimeConstants . VM_LIBRARY ) ; if ( libfiles == null ) { log . debug ( "\"" + RuntimeConstants . VM_LIBRARY + "\" is not set.  Trying default library: " + RuntimeConstants . VM_LIBRARY_DEFAULT ) ; if ( rsvc . getLoaderNameForResource ( RuntimeConstants . VM_LIBRARY_DEFAULT ) != null ) { libfiles = RuntimeConstants . VM_LIBRARY_DEFAULT ; } else { log . debug ( "Default library not found." ) ; } } if ( libfiles != null ) { macroLibVec = new ArrayList ( ) ; if ( libfiles instanceof Vector ) { macroLibVec . addAll ( ( Vector ) libfiles ) ; } else if ( libfiles instanceof String ) { macroLibVec . add ( libfiles ) ; } for ( int i = 0 , is = macroLibVec . size ( ) ; i < is ; i ++ ) { String lib = ( String ) macroLibVec . get ( i ) ; if ( StringUtils . isNotEmpty ( lib ) ) { vmManager . setRegisterFromLib ( true ) ; log . debug ( "adding VMs from VM library : " + lib ) ; try { Template template = rsvc . getTemplate ( lib ) ; Twonk twonk = new Twonk ( ) ; twonk . template = template ; twonk . modificationTime = template . getLastModified ( ) ; libModMap . put ( lib , twonk ) ; } catch ( Exception e ) { String msg = "Velocimacro : Error using VM library : " + lib ; log . error ( true , msg , e ) ; throw new VelocityException ( msg , e ) ; } log . trace ( "VM library registration complete." ) ; vmManager . setRegisterFromLib ( false ) ; } } } setAddMacroPermission ( true ) ; if ( ! rsvc . getBoolean ( RuntimeConstants . VM_PERM_ALLOW_INLINE , true ) ) { setAddMacroPermission ( false ) ; log . debug ( "allowInline = false : VMs can NOT be defined inline in templates" ) ; } else { log . debug ( "allowInline = true : VMs can be defined inline in templates" ) ; } setReplacementPermission ( false ) ; if ( rsvc . getBoolean ( RuntimeConstants . VM_PERM_ALLOW_INLINE_REPLACE_GLOBAL , false ) ) { setReplacementPermission ( true ) ; log . debug ( "allowInlineToOverride = true : VMs " + "defined inline may replace previous VM definitions" ) ; } else { log . debug ( "allowInlineToOverride = false : VMs " + "defined inline may NOT replace previous VM definitions" ) ; } vmManager . setNamespaceUsage ( true ) ; setTemplateLocalInline ( rsvc . getBoolean ( RuntimeConstants . VM_PERM_INLINE_LOCAL , false ) ) ; if ( getTemplateLocalInline ( ) ) { log . debug ( "allowInlineLocal = true : VMs " + "defined inline will be local to their defining template only." ) ; } else { log . debug ( "allowInlineLocal = false : VMs " + "defined inline will be global in scope if allowed." ) ; } vmManager . setTemplateLocalInlineVM ( getTemplateLocalInline ( ) ) ; setAutoload ( rsvc . getBoolean ( RuntimeConstants . VM_LIBRARY_AUTORELOAD , false ) ) ; if ( getAutoload ( ) ) { log . debug ( "autoload on : VM system " + "will automatically reload global library macros" ) ; } else { log . debug ( "autoload off : VM system " + "will not automatically reload global library macros" ) ; } log . trace ( "Velocimacro : initialization complete." ) ; } } public boolean addVelocimacro ( String name , String macroBody , String argArray [ ] , String sourceTemplate ) { if ( name == null || macroBody == null || argArray == null || sourceTemplate == null ) { String msg = "VM '" + name + "' addition rejected : " ; if ( name == null ) { msg += "name" ; } else if ( macroBody == null ) { msg += "macroBody" ; } else if ( argArray == null ) { msg += "argArray" ; } else { msg += "sourceTemplate" ; } msg += " argument was null" ; log . error ( msg ) ; throw new NullPointerException ( msg ) ; } if ( ! canAddVelocimacro ( name , sourceTemplate ) ) { return false ; } synchronized ( this ) { try { Node macroRootNode = rsvc . parse ( new StringReader ( macroBody ) , sourceTemplate ) ; vmManager . addVM ( name , macroRootNode , argArray , sourceTemplate , replaceAllowed ) ; } catch ( ParseException ex ) { throw new RuntimeException ( ex . toString ( ) ) ; } } if ( log . isDebugEnabled ( ) ) { StringBuffer msg = new StringBuffer ( "added " ) ; Macro . macroToString ( msg , argArray ) ; msg . append ( " : source = " ) . append ( sourceTemplate ) ; log . debug ( msg . toString ( ) ) ; } return true ; } public boolean addVelocimacro ( String name , Node macroBody , String argArray [ ] , String sourceTemplate ) { if ( name == null || macroBody == null || argArray == null || sourceTemplate == null ) { String msg = "VM '" + name + "' addition rejected : " ; if ( name == null ) { msg += "name" ; } else if ( macroBody == null ) { msg += "macroBody" ; } else if ( argArray == null ) { msg += "argArray" ; } else { msg += "sourceTemplate" ; } msg += " argument was null" ; log . error ( msg ) ; throw new NullPointerException ( msg ) ; } if ( ! canAddVelocimacro ( name , sourceTemplate ) ) { return false ; } synchronized ( this ) { vmManager . addVM ( name , macroBody , argArray , sourceTemplate , replaceAllowed ) ; } return ( true ) ; } private synchronized boolean canAddVelocimacro ( String name , String sourceTemplate ) { if ( autoReloadLibrary && ( macroLibVec != null ) ) { if ( macroLibVec . contains ( sourceTemplate ) ) return true ; } if ( ! addNewAllowed ) { log . warn ( "VM addition rejected : " + name + " : inline VMs not allowed." ) ; return false ; } if ( ! templateLocal ) { if ( ! replaceAllowed && isVelocimacro ( name , sourceTemplate ) ) { if ( log . isDebugEnabled ( ) ) log . debug ( "VM addition rejected : " + name + " : inline not allowed to replace existing VM" ) ; return false ; } } return true ; } public boolean isVelocimacro ( String vm , String sourceTemplate ) { return ( vmManager . get ( vm , sourceTemplate ) != null ) ; } public Directive getVelocimacro ( String vmName , String sourceTemplate ) { return ( getVelocimacro ( vmName , sourceTemplate , null ) ) ; } public Directive getVelocimacro ( String vmName , String sourceTemplate , String renderingTemplate ) { VelocimacroProxy vp = null ; vp = vmManager . get ( vmName , sourceTemplate , renderingTemplate ) ; if ( vp != null && autoReloadLibrary ) { synchronized ( this ) { String lib = vmManager . getLibraryName ( vmName , sourceTemplate ) ; if ( lib != null ) { try { Twonk tw = ( Twonk ) libModMap . get ( lib ) ; if ( tw != null ) { Template template = tw . template ; long tt = tw . modificationTime ; long ft = template . getResourceLoader ( ) . getLastModified ( template ) ; if ( ft > tt ) { log . debug ( "auto-reloading VMs from VM library : " + lib ) ; tw . modificationTime = ft ; template = rsvc . getTemplate ( lib ) ; tw . template = template ; tw . modificationTime = template . getLastModified ( ) ; } } } catch ( Exception e ) { String msg = "Velocimacro : Error using VM library : " + lib ; log . error ( true , msg , e ) ; throw new VelocityException ( msg , e ) ; } vp = vmManager . get ( vmName , sourceTemplate , renderingTemplate ) ; } } } return vp ; } public boolean dumpVMNamespace ( String namespace ) { return vmManager . dumpNamespace ( namespace ) ; } private void setTemplateLocalInline ( boolean b ) { templateLocal = b ; } private boolean getTemplateLocalInline ( ) { return templateLocal ; } private boolean setAddMacroPermission ( final boolean addNewAllowed ) { boolean b = this . addNewAllowed ; this . addNewAllowed = addNewAllowed ; return b ; } private boolean setReplacementPermission ( boolean arg ) { boolean b = replaceAllowed ; replaceAllowed = arg ; vmManager . setInlineReplacesGlobal ( arg ) ; return b ; } private void setAutoload ( boolean b ) { autoReloadLibrary = b ; } private boolean getAutoload ( ) { return autoReloadLibrary ; } private static class Twonk { public Template template ; public long modificationTime ; } } 	0	['15', '1', '0', '18', '63', '9', '1', '17', '8', '0.603174603', '830', '1', '3', '0', '0.333333333', '0', '0', '53.73333333', '12', '3.6', '0']
package org . apache . velocity . runtime . parser . node ; import org . apache . velocity . context . InternalContextAdapter ; import org . apache . velocity . runtime . parser . Parser ; public class ASTAddNode extends ASTMathNode { public ASTAddNode ( int id ) { super ( id ) ; } public ASTAddNode ( Parser p , int id ) { super ( p , id ) ; } protected Object handleSpecial ( Object left , Object right , InternalContextAdapter context ) { if ( left instanceof String || right instanceof String ) { if ( left == null ) { left = jjtGetChild ( 0 ) . literal ( ) ; } else if ( right == null ) { right = jjtGetChild ( 1 ) . literal ( ) ; } return left . toString ( ) . concat ( right . toString ( ) ) ; } return null ; } public Number perform ( Number left , Number right , InternalContextAdapter context ) { return MathUtils . add ( left , right ) ; } } 	0	['4', '3', '0', '8', '11', '6', '4', '5', '3', '2', '46', '0', '0', '0.945945946', '0.458333333', '2', '3', '10.5', '5', '1.5', '0']
package org . apache . velocity . app ; import java . lang . reflect . Field ; import java . lang . reflect . Modifier ; import java . util . HashMap ; import org . apache . velocity . util . ClassUtils ; public class FieldMethodizer { private HashMap fieldHash = new HashMap ( ) ; public FieldMethodizer ( ) { } public FieldMethodizer ( String s ) { try { addObject ( s ) ; } catch ( Exception e ) { System . err . println ( "Could not add " + s + " for field methodizing: " + e . getMessage ( ) ) ; } } public FieldMethodizer ( Object o ) { try { addObject ( o ) ; } catch ( Exception e ) { System . err . println ( "Could not add " + o + " for field methodizing: " + e . getMessage ( ) ) ; } } public void addObject ( String s ) throws Exception { inspect ( ClassUtils . getClass ( s ) ) ; } public void addObject ( Object o ) throws Exception { inspect ( o . getClass ( ) ) ; } public Object get ( String fieldName ) { Object value = null ; try { Field f = ( Field ) fieldHash . get ( fieldName ) ; if ( f != null ) { value = f . get ( null ) ; } } catch ( IllegalAccessException e ) { System . err . println ( "IllegalAccessException while trying to access " + fieldName + ": " + e . getMessage ( ) ) ; } return value ; } private void inspect ( Class clas ) { Field [ ] fields = clas . getFields ( ) ; for ( int i = 0 ; i < fields . length ; i ++ ) { int mod = fields [ i ] . getModifiers ( ) ; if ( Modifier . isStatic ( mod ) && Modifier . isPublic ( mod ) ) { fieldHash . put ( fields [ i ] . getName ( ) , fields [ i ] ) ; } } } } 	0	['7', '1', '0', '1', '26', '1', '0', '1', '6', '0', '149', '1', '0', '0', '0.464285714', '0', '0', '20.14285714', '4', '1', '0']
package org . apache . velocity . exception ; public class MathException extends VelocityException { public MathException ( final String exceptionMessage ) { super ( exceptionMessage ) ; } } 	0	['1', '5', '0', '4', '2', '0', '3', '1', '1', '2', '5', '0', '0', '1', '1', '0', '0', '4', '0', '0', '0']
package org . apache . velocity . util . introspection ; import java . lang . reflect . Method ; import org . apache . velocity . runtime . log . Log ; public class SecureIntrospectorImpl extends Introspector implements SecureIntrospectorControl { private String [ ] badClasses ; private String [ ] badPackages ; public SecureIntrospectorImpl ( String [ ] badClasses , String [ ] badPackages , Log log ) { super ( log ) ; this . badClasses = badClasses ; this . badPackages = badPackages ; } public Method getMethod ( Class clazz , String methodName , Object [ ] params ) throws IllegalArgumentException { if ( ! checkObjectExecutePermission ( clazz , methodName ) ) { log . warn ( "Cannot retrieve method " + methodName + " from object of class " + clazz . getName ( ) + " due to security restrictions." ) ; return null ; } else { return super . getMethod ( clazz , methodName , params ) ; } } public boolean checkObjectExecutePermission ( Class clazz , String methodName ) { if ( methodName != null && ( methodName . equals ( "wait" ) || methodName . equals ( "notify" ) ) ) { return false ; } else if ( Number . class . isAssignableFrom ( clazz ) ) { return true ; } else if ( Boolean . class . isAssignableFrom ( clazz ) ) { return true ; } else if ( String . class . isAssignableFrom ( clazz ) ) { return true ; } else if ( Class . class . isAssignableFrom ( clazz ) && ( methodName != null ) && methodName . equals ( "getName" ) ) { return true ; } String className = clazz . getName ( ) ; if ( className . startsWith ( "[L" ) && className . endsWith ( ";" ) ) { className = className . substring ( 2 , className . length ( ) - 1 ) ; } int dotPos = className . lastIndexOf ( '.' ) ; String packageName = ( dotPos == - 1 ) ? "" : className . substring ( 0 , dotPos ) ; for ( int i = 0 , size = badPackages . length ; i < size ; i ++ ) { if ( packageName . equals ( badPackages [ i ] ) ) { return false ; } } for ( int i = 0 , size = badClasses . length ; i < size ; i ++ ) { if ( className . equals ( badClasses [ i ] ) ) { return false ; } } return true ; } } 	0	['4', '3', '0', '4', '21', '4', '1', '3', '3', '0.555555556', '206', '0.333333333', '0', '0.5', '0.458333333', '1', '1', '49', '21', '5.75', '0']
package org . apache . velocity . runtime . parser . node ; import org . apache . velocity . context . InternalContextAdapter ; import org . apache . velocity . runtime . parser . Parser ; public class ASTFalse extends SimpleNode { private static Boolean value = Boolean . FALSE ; public ASTFalse ( int id ) { super ( id ) ; } public ASTFalse ( Parser p , int id ) { super ( p , id ) ; } public Object jjtAccept ( ParserVisitor visitor , Object data ) { return visitor . visit ( this , data ) ; } public boolean evaluate ( InternalContextAdapter context ) { return false ; } public Object value ( InternalContextAdapter context ) { return value ; } } 	0	['6', '2', '0', '6', '9', '13', '4', '4', '5', '0.8', '28', '1', '0', '0.909090909', '0.4', '0', '0', '3.5', '1', '0.5', '0']
package org . apache . velocity . runtime . resource . util ; public interface StringResourceRepository { StringResource getStringResource ( String name ) ; void putStringResource ( String name , String body ) ; void putStringResource ( String name , String body , String encoding ) ; void removeStringResource ( String name ) ; void setEncoding ( String encoding ) ; String getEncoding ( ) ; } 	0	['6', '1', '0', '3', '6', '15', '2', '1', '6', '2', '6', '0', '0', '0', '0.916666667', '0', '0', '0', '1', '1', '0']
package org . apache . velocity . runtime . resource . loader ; import java . io . InputStream ; import java . util . Hashtable ; import java . util . Vector ; import java . util . Map ; import java . util . HashMap ; import org . apache . velocity . util . StringUtils ; import org . apache . velocity . runtime . resource . Resource ; import org . apache . velocity . exception . ResourceNotFoundException ; import org . apache . commons . collections . ExtendedProperties ; public class JarResourceLoader extends ResourceLoader { private Map entryDirectory = new HashMap ( 559 ) ; private Map jarfiles = new HashMap ( 89 ) ; public void init ( ExtendedProperties configuration ) { log . trace ( "JarResourceLoader : initialization starting." ) ; Vector paths = configuration . getVector ( "path" ) ; StringUtils . trimStrings ( paths ) ; if ( paths == null || paths . size ( ) == 0 ) { paths = configuration . getVector ( "resource.path" ) ; StringUtils . trimStrings ( paths ) ; if ( paths != null && paths . size ( ) > 0 ) { log . debug ( "JarResourceLoader : you are using a deprecated configuration" + " property for the JarResourceLoader -> '<name>.resource.loader.resource.path'." + " Please change to the conventional '<name>.resource.loader.path'." ) ; } } if ( paths != null ) { log . debug ( "JarResourceLoader # of paths : " + paths . size ( ) ) ; for ( int i = 0 ; i < paths . size ( ) ; i ++ ) { loadJar ( ( String ) paths . get ( i ) ) ; } } log . trace ( "JarResourceLoader : initialization complete." ) ; } private void loadJar ( String path ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "JarResourceLoader : trying to load \"" + path + "\"" ) ; } if ( path == null ) { String msg = "JarResourceLoader : can not load JAR - JAR path is null" ; log . error ( msg ) ; throw new RuntimeException ( msg ) ; } if ( ! path . startsWith ( "jar:" ) ) { String msg = "JarResourceLoader : JAR path must start with jar: -> see java.net.JarURLConnection for information" ; log . error ( msg ) ; throw new RuntimeException ( msg ) ; } if ( path . indexOf ( "!/" ) < 0 ) { path += "!/" ; } closeJar ( path ) ; JarHolder temp = new JarHolder ( rsvc , path ) ; addEntries ( temp . getEntries ( ) ) ; jarfiles . put ( temp . getUrlPath ( ) , temp ) ; } private void closeJar ( String path ) { if ( jarfiles . containsKey ( path ) ) { JarHolder theJar = ( JarHolder ) jarfiles . get ( path ) ; theJar . close ( ) ; } } private void addEntries ( Hashtable entries ) { entryDirectory . putAll ( entries ) ; } public InputStream getResourceStream ( String source ) throws ResourceNotFoundException { InputStream results = null ; if ( org . apache . commons . lang . StringUtils . isEmpty ( source ) ) { throw new ResourceNotFoundException ( "Need to have a resource!" ) ; } String normalizedPath = StringUtils . normalizePath ( source ) ; if ( normalizedPath == null || normalizedPath . length ( ) == 0 ) { String msg = "JAR resource error : argument " + normalizedPath + " contains .. and may be trying to access " + "content outside of template root.  Rejected." ; log . error ( "JarResourceLoader : " + msg ) ; throw new ResourceNotFoundException ( msg ) ; } if ( normalizedPath . startsWith ( "/" ) ) { normalizedPath = normalizedPath . substring ( 1 ) ; } if ( entryDirectory . containsKey ( normalizedPath ) ) { String jarurl = ( String ) entryDirectory . get ( normalizedPath ) ; if ( jarfiles . containsKey ( jarurl ) ) { JarHolder holder = ( JarHolder ) jarfiles . get ( jarurl ) ; results = holder . getResource ( normalizedPath ) ; return results ; } } throw new ResourceNotFoundException ( "JarResourceLoader Error: cannot find resource " + source ) ; } public boolean isSourceModified ( Resource resource ) { return true ; } public long getLastModified ( Resource resource ) { return 0 ; } } 	0	['8', '2', '0', '9', '39', '8', '0', '9', '5', '0.5', '288', '1', '0', '0.631578947', '0.375', '1', '1', '34.75', '7', '2.25', '0']
package org . apache . velocity . texen . util ; import java . io . File ; public class FileUtil { static public String mkdir ( String s ) { try { if ( ( new File ( s ) ) . mkdirs ( ) ) return "Created dir: " + s ; else return "Failed to create dir or dir already exists: " + s ; } catch ( Exception e ) { return e . toString ( ) ; } } public static File file ( String s ) { File f = new File ( s ) ; return f ; } public static File file ( String base , String s ) { File f = new File ( base , s ) ; return f ; } } 	0	['4', '1', '0', '0', '12', '6', '0', '0', '4', '2', '50', '0', '0', '0', '0.5', '0', '0', '11.5', '2', '1', '0']
package org . apache . velocity . app . event . implement ; import org . apache . commons . lang . StringEscapeUtils ; public class EscapeSqlReference extends EscapeReference { protected String escape ( Object text ) { return StringEscapeUtils . escapeSql ( text . toString ( ) ) ; } protected String getMatchAttribute ( ) { return "eventhandler.escape.sql.match" ; } } 	0	['3', '2', '0', '2', '6', '3', '0', '2', '1', '2', '12', '0', '0', '0.714285714', '0.666666667', '1', '2', '3', '1', '0.6667', '0']
package org . apache . velocity . runtime . log ; import org . apache . log4j . Category ; import org . apache . log4j . Level ; import org . apache . log4j . PatternLayout ; import org . apache . log4j . RollingFileAppender ; import org . apache . velocity . runtime . RuntimeConstants ; import org . apache . velocity . runtime . RuntimeServices ; public class SimpleLog4JLogSystem implements LogSystem { private RuntimeServices rsvc = null ; private RollingFileAppender appender = null ; protected Category logger = null ; public SimpleLog4JLogSystem ( ) { } public void init ( RuntimeServices rs ) { rsvc = rs ; String categoryname = ( String ) rsvc . getProperty ( "runtime.log.logsystem.log4j.category" ) ; if ( categoryname != null ) { logger = Category . getInstance ( categoryname ) ; logVelocityMessage ( 0 , "SimpleLog4JLogSystem using category '" + categoryname + "'" ) ; return ; } String logfile = rsvc . getString ( RuntimeConstants . RUNTIME_LOG ) ; try { internalInit ( logfile ) ; logVelocityMessage ( 0 , "SimpleLog4JLogSystem initialized using logfile '" + logfile + "'" ) ; } catch ( Exception e ) { System . err . println ( "PANIC : error configuring SimpleLog4JLogSystem : " + e ) ; } } private void internalInit ( String logfile ) throws Exception { logger = Category . getInstance ( this . getClass ( ) . getName ( ) ) ; logger . setAdditivity ( false ) ; logger . setLevel ( Level . DEBUG ) ; appender = new RollingFileAppender ( new PatternLayout ( "%d - %m%n" ) , logfile , true ) ; appender . setMaxBackupIndex ( 1 ) ; appender . setMaximumFileSize ( 100000 ) ; logger . addAppender ( appender ) ; } public void logVelocityMessage ( int level , String message ) { switch ( level ) { case LogSystem . WARN_ID : logger . warn ( message ) ; break ; case LogSystem . INFO_ID : logger . info ( message ) ; break ; case LogSystem . ERROR_ID : logger . error ( message ) ; break ; case LogSystem . DEBUG_ID : default : logger . debug ( message ) ; break ; } } protected void finalize ( ) throws Throwable { shutdown ( ) ; } public void shutdown ( ) { if ( appender != null ) { logger . removeAppender ( appender ) ; appender . close ( ) ; appender = null ; } } } 	0	['6', '1', '0', '8', '30', '0', '0', '8', '4', '0.333333333', '163', '1', '1', '0', '0.416666667', '0', '0', '25.66666667', '2', '1.3333', '0']
package org . apache . velocity . app . event ; import org . apache . velocity . context . Context ; import org . apache . velocity . util . ContextAware ; public interface MethodExceptionEventHandler extends EventHandler { public Object methodException ( Class claz , String method , Exception e ) throws Exception ; static class MethodExceptionExecutor implements EventHandlerMethodExecutor { private Context context ; private Class claz ; private String method ; private Exception e ; private Object result ; private boolean executed = false ; MethodExceptionExecutor ( Context context , Class claz , String method , Exception e ) { this . context = context ; this . claz = claz ; this . method = method ; this . e = e ; } public void execute ( EventHandler handler ) throws Exception { MethodExceptionEventHandler eh = ( MethodExceptionEventHandler ) handler ; if ( eh instanceof ContextAware ) ( ( ContextAware ) eh ) . setContext ( context ) ; executed = true ; result = ( ( MethodExceptionEventHandler ) handler ) . methodException ( claz , method , e ) ; } public Object getReturnValue ( ) { return result ; } public boolean isDone ( ) { return executed ; } } } 	0	['1', '1', '0', '5', '1', '0', '4', '1', '1', '2', '1', '0', '0', '0', '1', '0', '0', '0', '1', '1', '0']
package org . apache . velocity . runtime . parser . node ; import java . lang . reflect . InvocationTargetException ; import org . apache . velocity . exception . VelocityException ; import org . apache . velocity . runtime . RuntimeLogger ; import org . apache . velocity . runtime . log . Log ; import org . apache . velocity . runtime . log . RuntimeLoggerLog ; import org . apache . velocity . util . introspection . Introspector ; public class GetExecutor extends AbstractExecutor { private final Introspector introspector ; private Object [ ] params = { } ; public GetExecutor ( final Log log , final Introspector introspector , final Class clazz , final String property ) { this . log = log ; this . introspector = introspector ; if ( property != null ) { this . params = new Object [ ] { property } ; } discover ( clazz ) ; } public GetExecutor ( final RuntimeLogger rlog , final Introspector introspector , final Class clazz , final String property ) { this ( new RuntimeLoggerLog ( rlog ) , introspector , clazz , property ) ; } protected void discover ( final Class clazz ) { try { setMethod ( introspector . getMethod ( clazz , "get" , params ) ) ; } catch ( RuntimeException e ) { throw e ; } catch ( Exception e ) { String msg = "Exception while looking for get('" + params [ 0 ] + "') method" ; log . error ( msg , e ) ; throw new VelocityException ( msg , e ) ; } } public Object execute ( final Object o ) throws IllegalAccessException , InvocationTargetException { return isAlive ( ) ? getMethod ( ) . invoke ( o , params ) : null ; } } 	0	['4', '2', '0', '7', '17', '0', '1', '6', '3', '0.166666667', '94', '1', '1', '0.666666667', '0.5', '0', '0', '22', '1', '0.5', '0']
package org . apache . velocity . runtime . parser . node ; import org . apache . velocity . context . InternalContextAdapter ; import org . apache . velocity . exception . MethodInvocationException ; import org . apache . velocity . runtime . parser . Parser ; public class ASTOrNode extends SimpleNode { public ASTOrNode ( int id ) { super ( id ) ; } public ASTOrNode ( Parser p , int id ) { super ( p , id ) ; } public Object jjtAccept ( ParserVisitor visitor , Object data ) { return visitor . visit ( this , data ) ; } public Object value ( InternalContextAdapter context ) throws MethodInvocationException { return evaluate ( context ) ? Boolean . TRUE : Boolean . FALSE ; } public boolean evaluate ( InternalContextAdapter context ) throws MethodInvocationException { Node left = jjtGetChild ( 0 ) ; Node right = jjtGetChild ( 1 ) ; if ( left != null && left . evaluate ( context ) ) return true ; if ( right != null && right . evaluate ( context ) ) return true ; return false ; } } 	0	['5', '2', '0', '9', '10', '10', '5', '6', '5', '2', '53', '0', '0', '0.909090909', '0.4', '1', '1', '9.6', '1', '0.6', '0']
package org . apache . velocity . runtime . resource . util ; public final class StringResource { private String body ; private String encoding ; private long lastModified ; public StringResource ( final String body , final String encoding ) { setBody ( body ) ; setEncoding ( encoding ) ; } public String getBody ( ) { return body ; } public long getLastModified ( ) { return lastModified ; } public void setBody ( final String body ) { this . body = body ; this . lastModified = System . currentTimeMillis ( ) ; } public void setLastModified ( final long lastModified ) { this . lastModified = lastModified ; } public String getEncoding ( ) { return this . encoding ; } public void setEncoding ( final String encoding ) { this . encoding = encoding ; } } 	0	['7', '1', '0', '3', '9', '11', '3', '0', '7', '0.611111111', '43', '1', '0', '0', '0.523809524', '0', '0', '4.714285714', '1', '0.8571', '0']
package org . apache . velocity . runtime . log ; public class Log4JLogSystem extends Log4JLogChute implements LogSystem { public void logVelocityMessage ( int level , String message ) { log ( level , message ) ; } } 	0	['2', '2', '0', '2', '4', '1', '0', '2', '2', '2', '10', '0', '0', '0.888888889', '0.666666667', '0', '0', '4', '1', '0.5', '0']
package org . apache . velocity . runtime . parser . node ; import java . math . BigDecimal ; import java . math . BigInteger ; import java . util . HashMap ; import java . util . Map ; import java . util . List ; import java . util . ArrayList ; public abstract class MathUtils { protected static final BigDecimal DECIMAL_ZERO = new BigDecimal ( BigInteger . ZERO ) ; protected static final int BASE_LONG = 0 ; protected static final int BASE_FLOAT = 1 ; protected static final int BASE_DOUBLE = 2 ; protected static final int BASE_BIGINTEGER = 3 ; protected static final int BASE_BIGDECIMAL = 4 ; protected static final Map ints = new HashMap ( ) ; static { ints . put ( Byte . class , BigDecimal . valueOf ( Byte . MAX_VALUE ) ) ; ints . put ( Short . class , BigDecimal . valueOf ( Short . MAX_VALUE ) ) ; ints . put ( Integer . class , BigDecimal . valueOf ( Integer . MAX_VALUE ) ) ; ints . put ( Long . class , BigDecimal . valueOf ( Long . MAX_VALUE ) ) ; ints . put ( BigInteger . class , BigDecimal . valueOf ( - 1 ) ) ; } protected static final List typesBySize = new ArrayList ( ) ; static { typesBySize . add ( Byte . class ) ; typesBySize . add ( Short . class ) ; typesBySize . add ( Integer . class ) ; typesBySize . add ( Long . class ) ; typesBySize . add ( Float . class ) ; typesBySize . add ( Double . class ) ; } public static BigDecimal toBigDecimal ( Number n ) { if ( n instanceof BigDecimal ) { return ( BigDecimal ) n ; } if ( n instanceof BigInteger ) { return new BigDecimal ( ( BigInteger ) n ) ; } return new BigDecimal ( n . doubleValue ( ) ) ; } public static BigInteger toBigInteger ( Number n ) { if ( n instanceof BigInteger ) { return ( BigInteger ) n ; } return BigInteger . valueOf ( n . longValue ( ) ) ; } public static boolean isZero ( Number n ) { if ( isInteger ( n ) ) { if ( n instanceof BigInteger ) { return ( ( BigInteger ) n ) . compareTo ( BigInteger . ZERO ) == 0 ; } return n . doubleValue ( ) == 0 ; } if ( n instanceof Float ) { return n . floatValue ( ) == 0f ; } if ( n instanceof Double ) { return n . doubleValue ( ) == 0d ; } return toBigDecimal ( n ) . compareTo ( DECIMAL_ZERO ) == 0 ; } public static boolean isInteger ( Number n ) { return ints . containsKey ( n . getClass ( ) ) ; } public static Number wrapPrimitive ( long value , Class type ) { if ( type == Byte . class ) { if ( value > Byte . MAX_VALUE || value < Byte . MIN_VALUE ) { type = Short . class ; } else { return new Byte ( ( byte ) value ) ; } } if ( type == Short . class ) { if ( value > Short . MAX_VALUE || value < Short . MIN_VALUE ) { type = Integer . class ; } else { return new Short ( ( short ) value ) ; } } if ( type == Integer . class ) { if ( value > Integer . MAX_VALUE || value < Integer . MIN_VALUE ) { type = Long . class ; } else { return new Integer ( ( int ) value ) ; } } if ( type == Long . class ) { return new Long ( value ) ; } return BigInteger . valueOf ( value ) ; } private static Number wrapPrimitive ( long value , Number op1 , Number op2 ) { if ( typesBySize . indexOf ( op1 . getClass ( ) ) > typesBySize . indexOf ( op2 . getClass ( ) ) ) { return wrapPrimitive ( value , op1 . getClass ( ) ) ; } return wrapPrimitive ( value , op2 . getClass ( ) ) ; } private static int findCalculationBase ( Number op1 , Number op2 ) { boolean op1Int = isInteger ( op1 ) ; boolean op2Int = isInteger ( op2 ) ; if ( ( op1 instanceof BigDecimal || op2 instanceof BigDecimal ) || ( ( ! op1Int || ! op2Int ) && ( op1 instanceof BigInteger || op2 instanceof BigInteger ) ) ) { return BASE_BIGDECIMAL ; } if ( op1Int && op2Int ) { if ( op1 instanceof BigInteger || op2 instanceof BigInteger ) { return BASE_BIGINTEGER ; } return BASE_LONG ; } if ( ( op1 instanceof Double ) || ( op2 instanceof Double ) ) { return BASE_DOUBLE ; } return BASE_FLOAT ; } public static Number add ( Number op1 , Number op2 ) { int calcBase = findCalculationBase ( op1 , op2 ) ; switch ( calcBase ) { case BASE_BIGINTEGER : return toBigInteger ( op1 ) . add ( toBigInteger ( op2 ) ) ; case BASE_LONG : long l1 = op1 . longValue ( ) ; long l2 = op2 . longValue ( ) ; long result = l1 + l2 ; if ( ( result ^ l1 ) < 0 && ( result ^ l2 ) < 0 ) { return toBigInteger ( op1 ) . add ( toBigInteger ( op2 ) ) ; } return wrapPrimitive ( result , op1 , op2 ) ; case BASE_FLOAT : return new Float ( op1 . floatValue ( ) + op2 . floatValue ( ) ) ; case BASE_DOUBLE : return new Double ( op1 . doubleValue ( ) + op2 . doubleValue ( ) ) ; default : return toBigDecimal ( op1 ) . add ( toBigDecimal ( op2 ) ) ; } } public static Number subtract ( Number op1 , Number op2 ) { int calcBase = findCalculationBase ( op1 , op2 ) ; switch ( calcBase ) { case BASE_BIGINTEGER : return toBigInteger ( op1 ) . subtract ( toBigInteger ( op2 ) ) ; case BASE_LONG : long l1 = op1 . longValue ( ) ; long l2 = op2 . longValue ( ) ; long result = l1 - l2 ; if ( ( result ^ l1 ) < 0 && ( result ^ ~ l2 ) < 0 ) { return toBigInteger ( op1 ) . subtract ( toBigInteger ( op2 ) ) ; } return wrapPrimitive ( result , op1 , op2 ) ; case BASE_FLOAT : return new Float ( op1 . floatValue ( ) - op2 . floatValue ( ) ) ; case BASE_DOUBLE : return new Double ( op1 . doubleValue ( ) - op2 . doubleValue ( ) ) ; default : return toBigDecimal ( op1 ) . subtract ( toBigDecimal ( op2 ) ) ; } } public static Number multiply ( Number op1 , Number op2 ) { int calcBase = findCalculationBase ( op1 , op2 ) ; switch ( calcBase ) { case BASE_BIGINTEGER : return toBigInteger ( op1 ) . multiply ( toBigInteger ( op2 ) ) ; case BASE_LONG : long l1 = op1 . longValue ( ) ; long l2 = op2 . longValue ( ) ; long result = l1 * l2 ; if ( ( l2 != 0 ) && ( result / l2 != l1 ) ) { return toBigInteger ( op1 ) . multiply ( toBigInteger ( op2 ) ) ; } return wrapPrimitive ( result , op1 , op2 ) ; case BASE_FLOAT : return new Float ( op1 . floatValue ( ) * op2 . floatValue ( ) ) ; case BASE_DOUBLE : return new Double ( op1 . doubleValue ( ) * op2 . doubleValue ( ) ) ; default : return toBigDecimal ( op1 ) . multiply ( toBigDecimal ( op2 ) ) ; } } public static Number divide ( Number op1 , Number op2 ) { int calcBase = findCalculationBase ( op1 , op2 ) ; switch ( calcBase ) { case BASE_BIGINTEGER : BigInteger b1 = toBigInteger ( op1 ) ; BigInteger b2 = toBigInteger ( op2 ) ; return b1 . divide ( b2 ) ; case BASE_LONG : long l1 = op1 . longValue ( ) ; long l2 = op2 . longValue ( ) ; return wrapPrimitive ( l1 / l2 , op1 , op2 ) ; case BASE_FLOAT : return new Float ( op1 . floatValue ( ) / op2 . floatValue ( ) ) ; case BASE_DOUBLE : return new Double ( op1 . doubleValue ( ) / op2 . doubleValue ( ) ) ; default : return toBigDecimal ( op1 ) . divide ( toBigDecimal ( op2 ) , BigDecimal . ROUND_HALF_DOWN ) ; } } public static Number modulo ( Number op1 , Number op2 ) throws ArithmeticException { int calcBase = findCalculationBase ( op1 , op2 ) ; switch ( calcBase ) { case BASE_BIGINTEGER : return toBigInteger ( op1 ) . mod ( toBigInteger ( op2 ) ) ; case BASE_LONG : return wrapPrimitive ( op1 . longValue ( ) % op2 . longValue ( ) , op1 , op2 ) ; case BASE_FLOAT : return new Float ( op1 . floatValue ( ) % op2 . floatValue ( ) ) ; case BASE_DOUBLE : return new Double ( op1 . doubleValue ( ) % op2 . doubleValue ( ) ) ; default : throw new ArithmeticException ( "Cannot calculate the modulo of BigDecimals." ) ; } } public static int compare ( Number op1 , Number op2 ) { int calcBase = findCalculationBase ( op1 , op2 ) ; switch ( calcBase ) { case BASE_BIGINTEGER : return toBigInteger ( op1 ) . compareTo ( toBigInteger ( op2 ) ) ; case BASE_LONG : long l1 = op1 . longValue ( ) ; long l2 = op2 . longValue ( ) ; if ( l1 < l2 ) { return - 1 ; } if ( l1 > l2 ) { return 1 ; } return 0 ; case BASE_FLOAT : float f1 = op1 . floatValue ( ) ; float f2 = op2 . floatValue ( ) ; if ( f1 < f2 ) { return - 1 ; } if ( f1 > f2 ) { return 1 ; } return 0 ; case BASE_DOUBLE : double d1 = op1 . doubleValue ( ) ; double d2 = op2 . doubleValue ( ) ; if ( d1 < d2 ) { return - 1 ; } if ( d1 > d2 ) { return 1 ; } return 0 ; default : return toBigDecimal ( op1 ) . compareTo ( toBigDecimal ( op2 ) ) ; } } } 	0	['16', '1', '0', '11', '52', '112', '11', '0', '12', '0.826666667', '854', '0.533333333', '0', '0', '0.226666667', '0', '0', '51.4375', '18', '4.5625', '0']
package org . apache . velocity . runtime . resource . loader ; import java . io . InputStream ; import java . io . IOException ; import java . lang . reflect . Method ; import java . net . URL ; import java . net . URLConnection ; import java . util . HashMap ; import org . apache . commons . collections . ExtendedProperties ; import org . apache . commons . lang . StringUtils ; import org . apache . velocity . exception . VelocityException ; import org . apache . velocity . exception . ResourceNotFoundException ; import org . apache . velocity . runtime . resource . Resource ; public class URLResourceLoader extends ResourceLoader { private String [ ] roots = null ; protected HashMap templateRoots = null ; private int timeout = - 1 ; private Method [ ] timeoutMethods ; public void init ( ExtendedProperties configuration ) { log . trace ( "URLResourceLoader : initialization starting." ) ; roots = configuration . getStringArray ( "root" ) ; if ( log . isDebugEnabled ( ) ) { for ( int i = 0 ; i < roots . length ; i ++ ) { log . debug ( "URLResourceLoader : adding root '" + roots [ i ] + "'" ) ; } } timeout = configuration . getInt ( "timeout" , - 1 ) ; if ( timeout > 0 ) { try { Class [ ] types = new Class [ ] { Integer . TYPE } ; Method conn = URLConnection . class . getMethod ( "setConnectTimeout" , types ) ; Method read = URLConnection . class . getMethod ( "setReadTimeout" , types ) ; timeoutMethods = new Method [ ] { conn , read } ; log . debug ( "URLResourceLoader : timeout set to " + timeout ) ; } catch ( NoSuchMethodException nsme ) { log . debug ( "URLResourceLoader : Java 1.5+ is required to customize timeout!" , nsme ) ; timeout = - 1 ; } } templateRoots = new HashMap ( ) ; log . trace ( "URLResourceLoader : initialization complete." ) ; } public synchronized InputStream getResourceStream ( String name ) throws ResourceNotFoundException { if ( StringUtils . isEmpty ( name ) ) { throw new ResourceNotFoundException ( "URLResourceLoader : No template name provided" ) ; } InputStream inputStream = null ; Exception exception = null ; for ( int i = 0 ; i < roots . length ; i ++ ) { try { URL u = new URL ( roots [ i ] + name ) ; URLConnection conn = u . openConnection ( ) ; tryToSetTimeout ( conn ) ; inputStream = conn . getInputStream ( ) ; if ( inputStream != null ) { if ( log . isDebugEnabled ( ) ) log . debug ( "URLResourceLoader: Found '" + name + "' at '" + roots [ i ] + "'" ) ; templateRoots . put ( name , roots [ i ] ) ; break ; } } catch ( IOException ioe ) { if ( log . isDebugEnabled ( ) ) log . debug ( "URLResourceLoader: Exception when looking for '" + name + "' at '" + roots [ i ] + "'" , ioe ) ; if ( exception == null ) { exception = ioe ; } } } if ( inputStream == null ) { String msg ; if ( exception == null ) { msg = "URLResourceLoader : Resource '" + name + "' not found." ; } else { msg = exception . getMessage ( ) ; } throw new ResourceNotFoundException ( msg ) ; } return inputStream ; } public boolean isSourceModified ( Resource resource ) { long fileLastModified = getLastModified ( resource ) ; if ( fileLastModified == 0 || fileLastModified != resource . getLastModified ( ) ) { return true ; } return false ; } public long getLastModified ( Resource resource ) { String name = resource . getName ( ) ; String root = ( String ) templateRoots . get ( name ) ; try { URL u = new URL ( root + name ) ; URLConnection conn = u . openConnection ( ) ; tryToSetTimeout ( conn ) ; return conn . getLastModified ( ) ; } catch ( IOException ioe ) { String msg = "URLResourceLoader: '" + name + "' is no longer reachable at '" + root + "'" ; log . error ( msg , ioe ) ; throw new ResourceNotFoundException ( msg , ioe ) ; } } public int getTimeout ( ) { return timeout ; } private void tryToSetTimeout ( URLConnection conn ) { if ( timeout > 0 ) { Object [ ] arg = new Object [ ] { new Integer ( timeout ) } ; try { timeoutMethods [ 0 ] . invoke ( conn , arg ) ; timeoutMethods [ 1 ] . invoke ( conn , arg ) ; } catch ( Exception e ) { String msg = "Unexpected exception while setting connection timeout for " + conn ; log . error ( msg , e ) ; throw new VelocityException ( msg , e ) ; } } } } 	0	['8', '2', '0', '7', '41', '2', '0', '7', '6', '0.6', '425', '0.8', '0', '0.631578947', '0.325', '1', '2', '51.5', '6', '1.875', '0']
package org . apache . velocity . context ; public interface InternalWrapperContext { Context getInternalUserContext ( ) ; InternalContextAdapter getBaseContext ( ) ; Object localPut ( final String key , final Object value ) ; } 	0	['3', '1', '0', '2', '3', '3', '1', '2', '3', '2', '3', '0', '0', '0', '0.555555556', '0', '0', '0', '1', '1', '0']
package org . apache . velocity . util . introspection ; public interface SecureIntrospectorControl { public boolean checkObjectExecutePermission ( Class clazz , String method ) ; } 	0	['1', '1', '0', '2', '1', '0', '2', '0', '1', '2', '1', '0', '0', '0', '1', '0', '0', '0', '1', '1', '0']
package org . apache . velocity . util . introspection ; public interface VelPropertyGet { public Object invoke ( Object o ) throws Exception ; public boolean isCacheable ( ) ; public String getMethodName ( ) ; } 	0	['3', '1', '0', '6', '3', '3', '6', '0', '3', '2', '3', '0', '0', '0', '0.666666667', '0', '0', '0', '1', '1', '0']
package org . apache . velocity . runtime . log ; import java . util . Date ; import org . apache . log . format . PatternFormatter ; public class VelocityFormatter extends PatternFormatter { public VelocityFormatter ( String format ) { super ( format ) ; } protected String getTime ( final long time , final String format ) { return new Date ( ) . toString ( ) ; } } 	0	['2', '2', '0', '2', '5', '1', '1', '1', '1', '2', '11', '0', '0', '0.941176471', '0.833333333', '1', '2', '4.5', '1', '0.5', '0']
package org . apache . velocity . util . introspection ; public interface VelPropertySet { public Object invoke ( Object o , Object arg ) throws Exception ; public boolean isCacheable ( ) ; public String getMethodName ( ) ; } 	0	['3', '1', '0', '6', '3', '3', '6', '0', '3', '2', '3', '0', '0', '0', '0.666666667', '0', '0', '0', '1', '1', '0']
package org . apache . velocity . runtime . parser ; public interface CharStream { char readChar ( ) throws java . io . IOException ; int getColumn ( ) ; int getLine ( ) ; int getEndColumn ( ) ; int getEndLine ( ) ; int getBeginColumn ( ) ; int getBeginLine ( ) ; void backup ( int amount ) ; char BeginToken ( ) throws java . io . IOException ; String GetImage ( ) ; char [ ] GetSuffix ( int len ) ; void Done ( ) ; } 	0	['12', '1', '0', '4', '12', '66', '4', '0', '12', '2', '12', '0', '0', '0', '0.583333333', '0', '0', '0', '1', '1', '0']
package org . apache . velocity . runtime . parser ; public class Token { public int kind ; public int beginLine , beginColumn , endLine , endColumn ; public String image ; public Token next ; public Token specialToken ; public String toString ( ) { return image ; } public static final Token newToken ( int ofKind ) { switch ( ofKind ) { default : return new Token ( ) ; } } } 	0	['3', '1', '0', '25', '4', '3', '25', '0', '3', '1.4375', '23', '0', '2', '0', '0.5', '0', '0', '4', '2', '1', '0']
package org . apache . velocity . app . event . implement ; import org . apache . commons . lang . StringEscapeUtils ; public class EscapeHtmlReference extends EscapeReference { protected String escape ( Object text ) { return StringEscapeUtils . escapeHtml ( text . toString ( ) ) ; } protected String getMatchAttribute ( ) { return "eventhandler.escape.html.match" ; } } 	0	['3', '2', '0', '2', '6', '3', '0', '2', '1', '2', '12', '0', '0', '0.714285714', '0.666666667', '1', '2', '3', '1', '0.6667', '0']
package org . apache . velocity . runtime . parser . node ; import org . apache . velocity . context . InternalContextAdapter ; import org . apache . velocity . exception . MethodInvocationException ; import org . apache . velocity . runtime . parser . Parser ; public class ASTAndNode extends SimpleNode { public ASTAndNode ( int id ) { super ( id ) ; } public ASTAndNode ( Parser p , int id ) { super ( p , id ) ; } public Object jjtAccept ( ParserVisitor visitor , Object data ) { return visitor . visit ( this , data ) ; } public Object value ( InternalContextAdapter context ) throws MethodInvocationException { return evaluate ( context ) ? Boolean . TRUE : Boolean . FALSE ; } public boolean evaluate ( InternalContextAdapter context ) throws MethodInvocationException { Node left = jjtGetChild ( 0 ) ; Node right = jjtGetChild ( 1 ) ; if ( left == null || right == null ) { return false ; } if ( left . evaluate ( context ) ) { if ( right . evaluate ( context ) ) { return true ; } } return false ; } } 	0	['5', '2', '0', '9', '10', '10', '5', '6', '5', '2', '53', '0', '0', '0.909090909', '0.4', '1', '1', '9.6', '1', '0.6', '0']
package org . apache . velocity . runtime . parser ; import org . apache . velocity . runtime . parser . node . Node ; public class JJTParserState { private java . util . List nodes ; private java . util . List marks ; private int sp ; private int mk ; private boolean node_created ; public JJTParserState ( ) { nodes = new java . util . ArrayList ( ) ; marks = new java . util . ArrayList ( ) ; sp = 0 ; mk = 0 ; } public boolean nodeCreated ( ) { return node_created ; } public void reset ( ) { nodes . clear ( ) ; marks . clear ( ) ; sp = 0 ; mk = 0 ; } public Node rootNode ( ) { return ( Node ) nodes . get ( 0 ) ; } public void pushNode ( Node n ) { nodes . add ( n ) ; ++ sp ; } public Node popNode ( ) { if ( -- sp < mk ) { mk = ( ( Integer ) marks . remove ( marks . size ( ) - 1 ) ) . intValue ( ) ; } return ( Node ) nodes . remove ( nodes . size ( ) - 1 ) ; } public Node peekNode ( ) { return ( Node ) nodes . get ( nodes . size ( ) - 1 ) ; } public int nodeArity ( ) { return sp - mk ; } public void clearNodeScope ( Node n ) { while ( sp > mk ) { popNode ( ) ; } mk = ( ( Integer ) marks . remove ( marks . size ( ) - 1 ) ) . intValue ( ) ; } public void openNodeScope ( Node n ) { marks . add ( new Integer ( mk ) ) ; mk = sp ; n . jjtOpen ( ) ; } public void closeNodeScope ( Node n , int num ) { mk = ( ( Integer ) marks . remove ( marks . size ( ) - 1 ) ) . intValue ( ) ; while ( num -- > 0 ) { Node c = popNode ( ) ; c . jjtSetParent ( n ) ; n . jjtAddChild ( c , num ) ; } n . jjtClose ( ) ; pushNode ( n ) ; node_created = true ; } public void closeNodeScope ( Node n , boolean condition ) { if ( condition ) { int a = nodeArity ( ) ; mk = ( ( Integer ) marks . remove ( marks . size ( ) - 1 ) ) . intValue ( ) ; while ( a -- > 0 ) { Node c = popNode ( ) ; c . jjtSetParent ( n ) ; n . jjtAddChild ( c , a ) ; } n . jjtClose ( ) ; pushNode ( n ) ; node_created = true ; } else { mk = ( ( Integer ) marks . remove ( marks . size ( ) - 1 ) ) . intValue ( ) ; node_created = false ; } } } 	0	['12', '1', '0', '2', '25', '0', '1', '1', '12', '0.436363636', '253', '1', '0', '0', '0.395833333', '0', '0', '19.66666667', '3', '1.3333', '0']
package org . apache . velocity . runtime ; public interface RuntimeLogger { public void warn ( Object message ) ; public void info ( Object message ) ; public void error ( Object message ) ; public void debug ( Object message ) ; } 	0	['4', '1', '0', '8', '4', '6', '8', '0', '4', '2', '4', '0', '0', '0', '1', '0', '0', '0', '1', '1', '0']
package org . apache . velocity . runtime . resource . loader ; import java . io . IOException ; import java . io . InputStream ; import java . net . JarURLConnection ; import java . net . URL ; import java . util . Enumeration ; import java . util . jar . JarEntry ; import java . util . jar . JarFile ; import java . util . Hashtable ; import org . apache . velocity . runtime . RuntimeServices ; import org . apache . velocity . runtime . log . Log ; import org . apache . velocity . exception . ResourceNotFoundException ; import org . apache . velocity . exception . VelocityException ; public class JarHolder { private String urlpath = null ; private JarFile theJar = null ; private JarURLConnection conn = null ; private Log log = null ; public JarHolder ( RuntimeServices rs , String urlpath ) { this . log = rs . getLog ( ) ; this . urlpath = urlpath ; init ( ) ; if ( log . isDebugEnabled ( ) ) { log . debug ( "JarHolder: initialized JAR: " + urlpath ) ; } } public void init ( ) { try { if ( log . isDebugEnabled ( ) ) { log . debug ( "JarHolder: attempting to connect to " + urlpath ) ; } URL url = new URL ( urlpath ) ; conn = ( JarURLConnection ) url . openConnection ( ) ; conn . setAllowUserInteraction ( false ) ; conn . setDoInput ( true ) ; conn . setDoOutput ( false ) ; conn . connect ( ) ; theJar = conn . getJarFile ( ) ; } catch ( IOException ioe ) { String msg = "JarHolder: error establishing connection to JAR at \"" + urlpath + "\"" ; log . error ( msg , ioe ) ; throw new VelocityException ( msg , ioe ) ; } } public void close ( ) { try { theJar . close ( ) ; } catch ( Exception e ) { String msg = "JarHolder: error closing the JAR file" ; log . error ( msg , e ) ; throw new VelocityException ( msg , e ) ; } theJar = null ; conn = null ; log . trace ( "JarHolder: JAR file closed" ) ; } public InputStream getResource ( String theentry ) throws ResourceNotFoundException { InputStream data = null ; try { JarEntry entry = theJar . getJarEntry ( theentry ) ; if ( entry != null ) { data = theJar . getInputStream ( entry ) ; } } catch ( Exception fnfe ) { log . error ( "JarHolder: getResource() error" , fnfe ) ; throw new ResourceNotFoundException ( fnfe ) ; } return data ; } public Hashtable getEntries ( ) { Hashtable allEntries = new Hashtable ( 559 ) ; Enumeration all = theJar . entries ( ) ; while ( all . hasMoreElements ( ) ) { JarEntry je = ( JarEntry ) all . nextElement ( ) ; if ( ! je . isDirectory ( ) ) { allEntries . put ( je . getName ( ) , this . urlpath ) ; } } return allEntries ; } public String getUrlPath ( ) { return urlpath ; } } 	0	['6', '1', '0', '5', '34', '0', '1', '4', '6', '0.4', '211', '1', '1', '0', '0.5', '0', '0', '33.5', '2', '1.1667', '0']
package org . apache . velocity . exception ; import org . apache . velocity . runtime . parser . ParseException ; public class TemplateInitException extends VelocityException implements ExtendedParseException { private final String templateName ; private final int col ; private final int line ; private static final long serialVersionUID = - 4985224672336070621L ; public TemplateInitException ( final String msg , final String templateName , final int col , final int line ) { super ( msg ) ; this . templateName = templateName ; this . col = col ; this . line = line ; } public TemplateInitException ( final String msg , ParseException parseException , final String templateName , final int col , final int line ) { super ( msg , parseException ) ; this . templateName = templateName ; this . col = col ; this . line = line ; } public String getTemplateName ( ) { return templateName ; } public int getLineNumber ( ) { return line ; } public int getColumnNumber ( ) { return col ; } } 	0	['5', '5', '0', '28', '7', '0', '25', '3', '5', '0.6875', '45', '1', '0', '0.823529412', '0.5', '0', '0', '7.2', '1', '0.6', '0']
package org . apache . velocity . util . introspection ; import java . lang . reflect . Method ; import org . apache . velocity . runtime . RuntimeLogger ; import org . apache . velocity . runtime . log . Log ; import org . apache . velocity . runtime . log . RuntimeLoggerLog ; public class Introspector extends IntrospectorBase { public Introspector ( final Log log ) { super ( log ) ; } public Introspector ( final RuntimeLogger logger ) { this ( new RuntimeLoggerLog ( logger ) ) ; } public Method getMethod ( final Class c , final String name , final Object [ ] params ) throws IllegalArgumentException { try { return super . getMethod ( c , name , params ) ; } catch ( MethodMap . AmbiguousException ae ) { StringBuffer msg = new StringBuffer ( "Introspection Error : Ambiguous method invocation " ) . append ( name ) . append ( "(" ) ; for ( int i = 0 ; i < params . length ; i ++ ) { if ( i > 0 ) { msg . append ( ", " ) ; } if ( params [ i ] == null ) { msg . append ( "null" ) ; } else { msg . append ( params [ i ] . getClass ( ) . getName ( ) ) ; } } msg . append ( ") for class " ) . append ( c ) ; log . debug ( msg . toString ( ) ) ; } return null ; } } 	0	['3', '2', '1', '16', '13', '3', '11', '5', '3', '2', '74', '0', '0', '0.666666667', '0.444444444', '0', '0', '23.66666667', '1', '0.3333', '0']
package org . apache . velocity . runtime . log ; public class NullLogSystem extends NullLogChute implements LogSystem { public void logVelocityMessage ( int level , String message ) { } } 	0	['2', '2', '0', '2', '3', '1', '0', '2', '2', '2', '6', '0', '0', '0.8', '0.666666667', '0', '0', '2', '1', '0.5', '0']
package org . apache . velocity . runtime ; import org . apache . velocity . context . InternalContextAdapter ; import org . apache . velocity . exception . MethodInvocationException ; import org . apache . velocity . exception . ParseErrorException ; import org . apache . velocity . exception . ResourceNotFoundException ; import java . io . Writer ; import java . io . IOException ; public interface Renderable { public boolean render ( InternalContextAdapter context , Writer writer ) throws IOException , MethodInvocationException , ParseErrorException , ResourceNotFoundException ; } 	0	['1', '1', '0', '6', '1', '0', '2', '4', '1', '2', '1', '0', '0', '0', '1', '0', '0', '0', '1', '1', '0']
package org . apache . velocity . runtime . parser . node ; import org . apache . velocity . context . InternalContextAdapter ; import org . apache . velocity . runtime . parser . Parser ; public class ASTSubtractNode extends ASTMathNode { public ASTSubtractNode ( int id ) { super ( id ) ; } public ASTSubtractNode ( Parser p , int id ) { super ( p , id ) ; } public Number perform ( Number left , Number right , InternalContextAdapter context ) { return MathUtils . subtract ( left , right ) ; } } 	0	['3', '3', '0', '7', '6', '3', '4', '4', '3', '2', '16', '0', '0', '0.972222222', '0.533333333', '1', '1', '4.333333333', '1', '0.3333', '0']
package org . apache . velocity . util . introspection ; import org . apache . velocity . runtime . log . Log ; public class Info { private int line ; private int column ; private String templateName ; public Info ( String source , int line , int column ) { this . templateName = source ; this . line = line ; this . column = column ; } private Info ( ) { } public String getTemplateName ( ) { return templateName ; } public int getLine ( ) { return line ; } public int getColumn ( ) { return column ; } public String toString ( ) { return Log . formatFileString ( getTemplateName ( ) , getLine ( ) , getColumn ( ) ) ; } } 	0	['6', '1', '1', '21', '8', '9', '21', '1', '5', '0.6', '41', '1', '0', '0', '0.444444444', '0', '0', '5.333333333', '1', '0.6667', '0']
package org . apache . velocity . app . event ; import org . apache . velocity . context . Context ; import org . apache . velocity . util . ContextAware ; public interface IncludeEventHandler extends EventHandler { public String includeEvent ( String includeResourcePath , String currentResourcePath , String directiveName ) ; static class IncludeEventExecutor implements EventHandlerMethodExecutor { private Context context ; private String includeResourcePath ; private String currentResourcePath ; private String directiveName ; private boolean executed = false ; IncludeEventExecutor ( Context context , String includeResourcePath , String currentResourcePath , String directiveName ) { this . context = context ; this . includeResourcePath = includeResourcePath ; this . currentResourcePath = currentResourcePath ; this . directiveName = directiveName ; } public void execute ( EventHandler handler ) { IncludeEventHandler eh = ( IncludeEventHandler ) handler ; if ( eh instanceof ContextAware ) ( ( ContextAware ) eh ) . setContext ( context ) ; executed = true ; includeResourcePath = ( ( IncludeEventHandler ) handler ) . includeEvent ( includeResourcePath , currentResourcePath , directiveName ) ; } public Object getReturnValue ( ) { return includeResourcePath ; } public boolean isDone ( ) { return executed && ( includeResourcePath == null ) ; } } } 	0	['1', '1', '0', '6', '1', '0', '5', '1', '1', '2', '1', '0', '0', '0', '1', '0', '0', '0', '1', '1', '0']
package org . apache . velocity . runtime . resource ; import java . io . StringWriter ; import java . io . BufferedReader ; import java . io . InputStreamReader ; import org . apache . velocity . exception . ResourceNotFoundException ; import org . apache . velocity . exception . VelocityException ; public class ContentResource extends Resource { public ContentResource ( ) { super ( ) ; setType ( ResourceManager . RESOURCE_CONTENT ) ; } public boolean process ( ) throws ResourceNotFoundException { BufferedReader reader = null ; try { StringWriter sw = new StringWriter ( ) ; reader = new BufferedReader ( new InputStreamReader ( resourceLoader . getResourceStream ( name ) , encoding ) ) ; char buf [ ] = new char [ 1024 ] ; int len = 0 ; while ( ( len = reader . read ( buf , 0 , 1024 ) ) != - 1 ) sw . write ( buf , 0 , len ) ; setData ( sw . toString ( ) ) ; return true ; } catch ( ResourceNotFoundException e ) { throw e ; } catch ( Exception e ) { String msg = "Cannot process content resource" ; rsvc . getLog ( ) . error ( msg , e ) ; throw new VelocityException ( msg , e ) ; } finally { if ( reader != null ) { try { reader . close ( ) ; } catch ( Exception ignored ) { } } } } } 	0	['2', '2', '0', '11', '16', '1', '6', '6', '2', '2', '87', '0', '0', '0.947368421', '1', '1', '1', '42.5', '1', '0.5', '0']
package org . apache . velocity . util ; import java . lang . reflect . Array ; import java . util . AbstractList ; public class ArrayListWrapper extends AbstractList { private Object array ; public ArrayListWrapper ( Object array ) { this . array = array ; } public Object get ( int index ) { return Array . get ( array , index ) ; } public Object set ( int index , Object element ) { Object old = get ( index ) ; Array . set ( array , index , element ) ; return old ; } public int size ( ) { return Array . getLength ( array ) ; } } 	0	['4', '3', '0', '1', '8', '0', '1', '0', '4', '0', '31', '1', '0', '0.918918919', '0.666666667', '2', '9', '6.5', '1', '0.75', '0']
package org . apache . velocity . anakia ; import org . jdom . Element ; import org . jdom . Namespace ; import org . jdom . DefaultJDOMFactory ; public class AnakiaJDOMFactory extends DefaultJDOMFactory { public AnakiaJDOMFactory ( ) { } public Element element ( String name , Namespace namespace ) { return new AnakiaElement ( name , namespace ) ; } public Element element ( String name ) { return new AnakiaElement ( name ) ; } public Element element ( String name , String uri ) { return new AnakiaElement ( name , uri ) ; } public Element element ( String name , String prefix , String uri ) { return new AnakiaElement ( name , prefix , uri ) ; } } 	0	['5', '2', '0', '5', '10', '10', '1', '4', '5', '2', '32', '0', '0', '0.862068966', '0.666666667', '0', '0', '5.4', '1', '0.8', '0']
package org . apache . velocity . app . tools ; import java . lang . reflect . Array ; import java . text . DateFormat ; import java . util . Date ; import java . util . List ; import org . apache . velocity . context . Context ; public class VelocityFormatter { Context context = null ; public VelocityFormatter ( Context context ) { this . context = context ; } public String formatShortDate ( Date date ) { return DateFormat . getDateInstance ( DateFormat . SHORT ) . format ( date ) ; } public String formatLongDate ( Date date ) { return DateFormat . getDateInstance ( DateFormat . LONG ) . format ( date ) ; } public String formatShortDateTime ( Date date ) { return DateFormat . getDateTimeInstance ( DateFormat . SHORT , DateFormat . SHORT ) . format ( date ) ; } public String formatLongDateTime ( Date date ) { return DateFormat . getDateTimeInstance ( DateFormat . LONG , DateFormat . LONG ) . format ( date ) ; } public String formatArray ( Object array ) { return formatArray ( array , ", " , " and " ) ; } public String formatArray ( Object array , String delim ) { return formatArray ( array , delim , delim ) ; } public String formatArray ( Object array , String delim , String finaldelim ) { StringBuffer sb = new StringBuffer ( ) ; int arrayLen = Array . getLength ( array ) ; for ( int i = 0 ; i < arrayLen ; i ++ ) { sb . append ( Array . get ( array , i ) . toString ( ) ) ; if ( i < arrayLen - 2 ) { sb . append ( delim ) ; } else if ( i < arrayLen - 1 ) { sb . append ( finaldelim ) ; } } return sb . toString ( ) ; } public String formatVector ( List list ) { return formatVector ( list , ", " , " and " ) ; } public String formatVector ( List list , String delim ) { return formatVector ( list , delim , delim ) ; } public String formatVector ( List list , String delim , String finaldelim ) { StringBuffer sb = new StringBuffer ( ) ; int size = list . size ( ) ; for ( int i = 0 ; i < size ; i ++ ) { sb . append ( list . get ( i ) ) ; if ( i < size - 2 ) { sb . append ( delim ) ; } else if ( i < size - 1 ) { sb . append ( finaldelim ) ; } } return sb . toString ( ) ; } public String limitLen ( int maxlen , String string ) { return limitLen ( maxlen , string , "..." ) ; } public String limitLen ( int maxlen , String string , String suffix ) { String ret = string ; if ( string . length ( ) > maxlen ) { ret = string . substring ( 0 , maxlen - suffix . length ( ) ) + suffix ; } return ret ; } public class VelocityAlternator { protected String [ ] alternates = null ; protected int current = 0 ; public VelocityAlternator ( String [ ] alternates ) { this . alternates = alternates ; } public String alternate ( ) { current ++ ; current %= alternates . length ; return "" ; } public String toString ( ) { return alternates [ current ] ; } } public class VelocityAutoAlternator extends VelocityAlternator { public VelocityAutoAlternator ( String [ ] alternates ) { super ( alternates ) ; } public final String toString ( ) { String s = alternates [ current ] ; alternate ( ) ; return s ; } } public String makeAlternator ( String name , String alt1 , String alt2 ) { String [ ] alternates = { alt1 , alt2 } ; context . put ( name , new VelocityAlternator ( alternates ) ) ; return "" ; } public String makeAlternator ( String name , String alt1 , String alt2 , String alt3 ) { String [ ] alternates = { alt1 , alt2 , alt3 } ; context . put ( name , new VelocityAlternator ( alternates ) ) ; return "" ; } public String makeAlternator ( String name , String alt1 , String alt2 , String alt3 , String alt4 ) { String [ ] alternates = { alt1 , alt2 , alt3 , alt4 } ; context . put ( name , new VelocityAlternator ( alternates ) ) ; return "" ; } public String makeAutoAlternator ( String name , String alt1 , String alt2 ) { String [ ] alternates = { alt1 , alt2 } ; context . put ( name , new VelocityAutoAlternator ( alternates ) ) ; return "" ; } public Object isNull ( Object o , Object dflt ) { if ( o == null ) { return dflt ; } else { return o ; } } } 	0	['18', '1', '0', '3', '36', '133', '2', '3', '18', '0.764705882', '298', '0', '1', '0', '0.333333333', '0', '0', '15.5', '4', '1.3889', '0']
package org . apache . velocity . util ; public final class SimplePool { private Object pool [ ] ; private int max ; private int current = - 1 ; public SimplePool ( int max ) { this . max = max ; pool = new Object [ max ] ; } public void put ( Object o ) { int idx = - 1 ; synchronized ( this ) { if ( current < max - 1 ) { idx = ++ current ; } if ( idx >= 0 ) { pool [ idx ] = o ; } } } public Object get ( ) { synchronized ( this ) { if ( current >= 0 ) { Object o = pool [ current ] ; pool [ current ] = null ; current -- ; return o ; } } return null ; } public int getMax ( ) { return max ; } Object [ ] getPool ( ) { return pool ; } } 	0	['5', '1', '0', '2', '6', '0', '2', '0', '4', '0.416666667', '103', '1', '0', '0', '0.466666667', '0', '0', '19', '3', '1.4', '0']
package org . apache . velocity . anakia ; import java . util . ArrayList ; import java . util . Collection ; import java . util . Iterator ; import org . jdom . Element ; public class TreeWalker { public TreeWalker ( ) { } public NodeList allElements ( Element e ) { ArrayList theElements = new ArrayList ( ) ; treeWalk ( e , theElements ) ; return new NodeList ( theElements , false ) ; } private final void treeWalk ( Element e , Collection theElements ) { for ( Iterator i = e . getChildren ( ) . iterator ( ) ; i . hasNext ( ) ; ) { Element child = ( Element ) i . next ( ) ; theElements . add ( child ) ; treeWalk ( child , theElements ) ; } } } 	0	['3', '1', '0', '3', '11', '3', '1', '2', '2', '2', '41', '0', '0', '0', '0.666666667', '0', '0', '12.66666667', '2', '1', '0']
package org . apache . velocity . util ; import java . util . Iterator ; import java . util . Enumeration ; public class EnumerationIterator implements Iterator { private Enumeration enumeration = null ; public EnumerationIterator ( Enumeration enumeration ) { this . enumeration = enumeration ; } public Object next ( ) { return enumeration . nextElement ( ) ; } public boolean hasNext ( ) { return enumeration . hasMoreElements ( ) ; } public void remove ( ) { } } 	0	['4', '1', '0', '1', '7', '0', '1', '0', '4', '0.333333333', '23', '1', '0', '0', '0.625', '0', '0', '4.5', '1', '0.75', '0']
package org . apache . velocity . texen . ant ; import java . io . File ; import java . io . FileInputStream ; import java . io . IOException ; import java . io . InputStream ; import java . io . Writer ; import java . util . Date ; import java . util . Iterator ; import java . util . StringTokenizer ; import org . apache . commons . collections . ExtendedProperties ; import org . apache . tools . ant . BuildException ; import org . apache . tools . ant . Project ; import org . apache . tools . ant . Task ; import org . apache . velocity . VelocityContext ; import org . apache . velocity . app . VelocityEngine ; import org . apache . velocity . context . Context ; import org . apache . velocity . exception . MethodInvocationException ; import org . apache . velocity . exception . ParseErrorException ; import org . apache . velocity . exception . ResourceNotFoundException ; import org . apache . velocity . runtime . RuntimeConstants ; import org . apache . velocity . texen . Generator ; import org . apache . velocity . util . StringUtils ; public class TexenTask extends Task { private final static String ERR_MSG_FRAGMENT = ". For more information consult the velocity log, or invoke ant " + "with the -debug flag." ; protected String controlTemplate ; protected String templatePath ; protected String outputDirectory ; protected String outputFile ; protected String outputEncoding ; protected String inputEncoding ; protected ExtendedProperties contextProperties ; protected boolean useClasspath ; protected String logFile ; protected String useResourceLoaderCache = "false" ; protected String resourceLoaderModificationCheckInterval = "2" ; public void setControlTemplate ( String controlTemplate ) { this . controlTemplate = controlTemplate ; } public String getControlTemplate ( ) { return controlTemplate ; } public void setTemplatePath ( String templatePath ) throws Exception { StringBuffer resolvedPath = new StringBuffer ( ) ; StringTokenizer st = new StringTokenizer ( templatePath , "," ) ; while ( st . hasMoreTokens ( ) ) { File fullPath = project . resolveFile ( st . nextToken ( ) ) ; resolvedPath . append ( fullPath . getCanonicalPath ( ) ) ; if ( st . hasMoreTokens ( ) ) { resolvedPath . append ( "," ) ; } } this . templatePath = resolvedPath . toString ( ) ; System . out . println ( templatePath ) ; } public String getTemplatePath ( ) { return templatePath ; } public void setOutputDirectory ( File outputDirectory ) { try { this . outputDirectory = outputDirectory . getCanonicalPath ( ) ; } catch ( java . io . IOException ioe ) { throw new BuildException ( ioe ) ; } } public String getOutputDirectory ( ) { return outputDirectory ; } public void setOutputFile ( String outputFile ) { this . outputFile = outputFile ; } public void setOutputEncoding ( String outputEncoding ) { this . outputEncoding = outputEncoding ; } public void setInputEncoding ( String inputEncoding ) { this . inputEncoding = inputEncoding ; } public String getOutputFile ( ) { return outputFile ; } public void setLogFile ( String log ) { this . logFile = log ; } public String getLogFile ( ) { return this . logFile ; } public void setContextProperties ( String file ) { String [ ] sources = StringUtils . split ( file , "," ) ; contextProperties = new ExtendedProperties ( ) ; for ( int i = 0 ; i < sources . length ; i ++ ) { ExtendedProperties source = new ExtendedProperties ( ) ; try { File fullPath = project . resolveFile ( sources [ i ] ) ; log ( "Using contextProperties file: " + fullPath ) ; source . load ( new FileInputStream ( fullPath ) ) ; } catch ( IOException e ) { ClassLoader classLoader = this . getClass ( ) . getClassLoader ( ) ; try { InputStream inputStream = classLoader . getResourceAsStream ( sources [ i ] ) ; if ( inputStream == null ) { throw new BuildException ( "Context properties file " + sources [ i ] + " could not be found in the file system or on the classpath!" ) ; } else { source . load ( inputStream ) ; } } catch ( IOException ioe ) { source = null ; } } if ( source != null ) { for ( Iterator j = source . getKeys ( ) ; j . hasNext ( ) ; ) { String name = ( String ) j . next ( ) ; String value = StringUtils . nullTrim ( source . getString ( name ) ) ; contextProperties . setProperty ( name , value ) ; } } } } public ExtendedProperties getContextProperties ( ) { return contextProperties ; } public void setUseClasspath ( boolean useClasspath ) { this . useClasspath = useClasspath ; } public void setUseResourceLoaderCache ( String useResourceLoaderCache ) { this . useResourceLoaderCache = useResourceLoaderCache ; } public void setResourceLoaderModificationCheckInterval ( String resourceLoaderModificationCheckInterval ) { this . resourceLoaderModificationCheckInterval = resourceLoaderModificationCheckInterval ; } public Context initControlContext ( ) throws Exception { return new VelocityContext ( ) ; } public void execute ( ) throws BuildException { if ( templatePath == null && useClasspath == false ) { throw new BuildException ( "The template path needs to be defined if you are not using " + "the classpath for locating templates!" ) ; } if ( controlTemplate == null ) { throw new BuildException ( "The control template needs to be defined!" ) ; } if ( outputDirectory == null ) { throw new BuildException ( "The output directory needs to be defined!" ) ; } if ( outputFile == null ) { throw new BuildException ( "The output file needs to be defined!" ) ; } VelocityEngine ve = new VelocityEngine ( ) ; try { if ( templatePath != null ) { log ( "Using templatePath: " + templatePath , Project . MSG_VERBOSE ) ; ve . setProperty ( RuntimeConstants . FILE_RESOURCE_LOADER_PATH , templatePath ) ; } if ( useClasspath ) { log ( "Using classpath" ) ; ve . addProperty ( VelocityEngine . RESOURCE_LOADER , "classpath" ) ; ve . setProperty ( "classpath." + VelocityEngine . RESOURCE_LOADER + ".class" , "org.apache.velocity.runtime.resource.loader.ClasspathResourceLoader" ) ; ve . setProperty ( "classpath." + VelocityEngine . RESOURCE_LOADER + ".cache" , useResourceLoaderCache ) ; ve . setProperty ( "classpath." + VelocityEngine . RESOURCE_LOADER + ".modificationCheckInterval" , resourceLoaderModificationCheckInterval ) ; } if ( this . logFile != null ) { ve . setProperty ( RuntimeConstants . RUNTIME_LOG , this . logFile ) ; } ve . init ( ) ; Generator generator = Generator . getInstance ( ) ; generator . setVelocityEngine ( ve ) ; generator . setOutputPath ( outputDirectory ) ; generator . setInputEncoding ( inputEncoding ) ; generator . setOutputEncoding ( outputEncoding ) ; if ( templatePath != null ) { generator . setTemplatePath ( templatePath ) ; } File file = new File ( outputDirectory ) ; if ( ! file . exists ( ) ) { file . mkdirs ( ) ; } String path = outputDirectory + File . separator + outputFile ; log ( "Generating to file " + path , Project . MSG_INFO ) ; Writer writer = generator . getWriter ( path , outputEncoding ) ; Context c = initControlContext ( ) ; populateInitialContext ( c ) ; if ( contextProperties != null ) { Iterator i = contextProperties . getKeys ( ) ; while ( i . hasNext ( ) ) { String property = ( String ) i . next ( ) ; String value = StringUtils . nullTrim ( contextProperties . getString ( property ) ) ; try { c . put ( property , new Integer ( value ) ) ; } catch ( NumberFormatException nfe ) { String booleanString = contextProperties . testBoolean ( value ) ; if ( booleanString != null ) { c . put ( property , Boolean . valueOf ( booleanString ) ) ; } else { if ( property . endsWith ( "file.contents" ) ) { value = StringUtils . fileContentsToString ( project . resolveFile ( value ) . getCanonicalPath ( ) ) ; property = property . substring ( 0 , property . indexOf ( "file.contents" ) - 1 ) ; } c . put ( property , value ) ; } } } } writer . write ( generator . parse ( controlTemplate , c ) ) ; writer . flush ( ) ; writer . close ( ) ; generator . shutdown ( ) ; cleanup ( ) ; } catch ( BuildException e ) { throw e ; } catch ( MethodInvocationException e ) { throw new BuildException ( "Exception thrown by '" + e . getReferenceName ( ) + "." + e . getMethodName ( ) + "'" + ERR_MSG_FRAGMENT , e . getWrappedThrowable ( ) ) ; } catch ( ParseErrorException e ) { throw new BuildException ( "Velocity syntax error" + ERR_MSG_FRAGMENT , e ) ; } catch ( ResourceNotFoundException e ) { throw new BuildException ( "Resource not found" + ERR_MSG_FRAGMENT , e ) ; } catch ( Exception e ) { throw new BuildException ( "Generation failed" + ERR_MSG_FRAGMENT , e ) ; } } protected void populateInitialContext ( Context context ) throws Exception { context . put ( "now" , new Date ( ) . toString ( ) ) ; } protected void cleanup ( ) throws Exception { } } 	0	['22', '3', '0', '12', '84', '177', '0', '12', '20', '0.928571429', '565', '1', '0', '0.637931034', '0.309090909', '1', '1', '24.13636364', '5', '1.1364', '0']
package org . apache . velocity . runtime . log ; public class PrimordialLogSystem extends HoldingLogChute implements LogSystem { public void logVelocityMessage ( int level , String message ) { log ( level , message ) ; } public void dumpLogMessages ( LogSystem newLogger ) { transferTo ( new LogChuteSystem ( newLogger ) ) ; } } 	0	['3', '2', '0', '4', '7', '3', '0', '4', '3', '2', '18', '0', '0', '0.714285714', '0.5', '0', '0', '5', '1', '0.6667', '0']
package org . apache . velocity . util . introspection ; import org . apache . velocity . runtime . RuntimeLogger ; import org . apache . velocity . runtime . log . Log ; public interface UberspectLoggable { public void setLog ( Log log ) ; public void setRuntimeLogger ( RuntimeLogger logger ) ; } 	0	['2', '1', '0', '4', '2', '1', '2', '2', '2', '2', '2', '0', '0', '0', '0.666666667', '0', '0', '0', '1', '1', '0']
package org . apache . velocity . app . event . implement ; import org . apache . velocity . app . event . IncludeEventHandler ; public class IncludeRelativePath implements IncludeEventHandler { public String includeEvent ( String includeResourcePath , String currentResourcePath , String directiveName ) { if ( includeResourcePath . startsWith ( "/" ) || includeResourcePath . startsWith ( "\\" ) ) { return includeResourcePath ; } int lastslashpos = Math . max ( currentResourcePath . lastIndexOf ( "/" ) , currentResourcePath . lastIndexOf ( "\\" ) ) ; if ( lastslashpos == - 1 ) { return includeResourcePath ; } return currentResourcePath . substring ( 0 , lastslashpos ) + "/" + includeResourcePath ; } } 	0	['2', '1', '0', '1', '10', '1', '0', '1', '2', '2', '42', '0', '0', '0', '0.75', '0', '0', '20', '4', '2', '0']
package org . apache . velocity . exception ; public interface ExtendedParseException { String getTemplateName ( ) ; int getLineNumber ( ) ; int getColumnNumber ( ) ; } 	0	['3', '1', '0', '5', '3', '3', '5', '0', '3', '2', '3', '0', '0', '0', '1', '0', '0', '0', '1', '1', '0']
package org . apache . velocity . runtime . parser . node ; import java . math . BigInteger ; import org . apache . velocity . context . InternalContextAdapter ; import org . apache . velocity . exception . TemplateInitException ; import org . apache . velocity . runtime . parser . Parser ; public class ASTIntegerLiteral extends SimpleNode { private Number value = null ; public ASTIntegerLiteral ( int id ) { super ( id ) ; } public ASTIntegerLiteral ( Parser p , int id ) { super ( p , id ) ; } public Object jjtAccept ( ParserVisitor visitor , Object data ) { return visitor . visit ( this , data ) ; } public Object init ( InternalContextAdapter context , Object data ) throws TemplateInitException { super . init ( context , data ) ; String str = getFirstToken ( ) . image ; try { value = new Integer ( str ) ; } catch ( NumberFormatException E1 ) { try { value = new Long ( str ) ; } catch ( NumberFormatException E2 ) { value = new BigInteger ( str ) ; } } return data ; } public Object value ( InternalContextAdapter context ) { return value ; } } 	0	['5', '2', '0', '8', '13', '0', '4', '6', '5', '0.25', '62', '1', '0', '0.909090909', '0.433333333', '0', '0', '11.2', '1', '0.6', '0']
package org . apache . velocity . runtime ; import java . io . Reader ; import java . util . Properties ; import org . apache . velocity . Template ; import org . apache . velocity . runtime . parser . ParseException ; import org . apache . velocity . runtime . parser . node . SimpleNode ; import org . apache . velocity . runtime . directive . Directive ; import org . apache . velocity . runtime . resource . ContentResource ; import org . apache . velocity . exception . ResourceNotFoundException ; import org . apache . velocity . exception . ParseErrorException ; import org . apache . commons . collections . ExtendedProperties ; public class Runtime implements RuntimeConstants { public synchronized static void init ( ) throws Exception { RuntimeSingleton . init ( ) ; } public static void setProperty ( String key , Object value ) { RuntimeSingleton . setProperty ( key , value ) ; } public static void setConfiguration ( ExtendedProperties configuration ) { RuntimeSingleton . setConfiguration ( configuration ) ; } public static void addProperty ( String key , Object value ) { RuntimeSingleton . addProperty ( key , value ) ; } public static void clearProperty ( String key ) { RuntimeSingleton . clearProperty ( key ) ; } public static Object getProperty ( String key ) { return RuntimeSingleton . getProperty ( key ) ; } public static void init ( Properties p ) throws Exception { RuntimeSingleton . init ( p ) ; } public static void init ( String configurationFile ) throws Exception { RuntimeSingleton . init ( configurationFile ) ; } public static SimpleNode parse ( Reader reader , String templateName ) throws ParseException { return RuntimeSingleton . parse ( reader , templateName ) ; } public static SimpleNode parse ( Reader reader , String templateName , boolean dumpNamespace ) throws ParseException { return RuntimeSingleton . parse ( reader , templateName , dumpNamespace ) ; } public static Template getTemplate ( String name ) throws ResourceNotFoundException , ParseErrorException , Exception { return RuntimeSingleton . getTemplate ( name ) ; } public static Template getTemplate ( String name , String encoding ) throws ResourceNotFoundException , ParseErrorException , Exception { return RuntimeSingleton . getTemplate ( name , encoding ) ; } public static ContentResource getContent ( String name ) throws ResourceNotFoundException , ParseErrorException , Exception { return RuntimeSingleton . getContent ( name ) ; } public static ContentResource getContent ( String name , String encoding ) throws ResourceNotFoundException , ParseErrorException , Exception { return RuntimeSingleton . getContent ( name , encoding ) ; } public static String getLoaderNameForResource ( String resourceName ) { return RuntimeSingleton . getLoaderNameForResource ( resourceName ) ; } public static void warn ( Object message ) { RuntimeSingleton . warn ( message ) ; } public static void info ( Object message ) { RuntimeSingleton . info ( message ) ; } public static void error ( Object message ) { RuntimeSingleton . error ( message ) ; } public static void debug ( Object message ) { RuntimeSingleton . debug ( message ) ; } public static String getString ( String key , String defaultValue ) { return RuntimeSingleton . getString ( key , defaultValue ) ; } public static Directive getVelocimacro ( String vmName , String templateName ) { return RuntimeSingleton . getVelocimacro ( vmName , templateName ) ; } public static boolean addVelocimacro ( String name , String macro , String argArray [ ] , String sourceTemplate ) { return RuntimeSingleton . addVelocimacro ( name , macro , argArray , sourceTemplate ) ; } public static boolean isVelocimacro ( String vmName , String templateName ) { return RuntimeSingleton . isVelocimacro ( vmName , templateName ) ; } public static boolean dumpVMNamespace ( String namespace ) { return RuntimeSingleton . dumpVMNamespace ( namespace ) ; } public static String getString ( String key ) { return RuntimeSingleton . getString ( key ) ; } public static int getInt ( String key ) { return RuntimeSingleton . getInt ( key ) ; } public static int getInt ( String key , int defaultValue ) { return RuntimeSingleton . getInt ( key , defaultValue ) ; } public static boolean getBoolean ( String key , boolean def ) { return RuntimeSingleton . getBoolean ( key , def ) ; } public static ExtendedProperties getConfiguration ( ) { return RuntimeSingleton . getConfiguration ( ) ; } } 	0	['30', '1', '0', '10', '60', '435', '0', '10', '30', '2', '133', '0', '0', '0', '0.133333333', '0', '0', '3.433333333', '1', '0.9667', '0']
package org . apache . velocity . context ; public interface Context { Object put ( String key , Object value ) ; Object get ( String key ) ; boolean containsKey ( Object key ) ; Object [ ] getKeys ( ) ; Object remove ( Object key ) ; } 	0	['5', '1', '0', '32', '5', '10', '32', '0', '5', '2', '5', '0', '0', '0', '0.666666667', '0', '0', '0', '1', '1', '0']
package org . apache . velocity . runtime . parser . node ; import java . lang . reflect . InvocationTargetException ; import org . apache . velocity . app . event . EventHandlerUtil ; import org . apache . velocity . context . InternalContextAdapter ; import org . apache . velocity . exception . MethodInvocationException ; import org . apache . velocity . exception . TemplateInitException ; import org . apache . velocity . exception . VelocityException ; import org . apache . velocity . runtime . RuntimeConstants ; import org . apache . velocity . runtime . parser . Parser ; import org . apache . velocity . util . introspection . Info ; import org . apache . velocity . util . introspection . IntrospectionCacheData ; import org . apache . velocity . util . introspection . VelPropertyGet ; public class ASTIdentifier extends SimpleNode { private String identifier = "" ; protected Info uberInfo ; protected boolean strictRef = false ; public ASTIdentifier ( int id ) { super ( id ) ; } public ASTIdentifier ( Parser p , int id ) { super ( p , id ) ; } public Object jjtAccept ( ParserVisitor visitor , Object data ) { return visitor . visit ( this , data ) ; } public Object init ( InternalContextAdapter context , Object data ) throws TemplateInitException { super . init ( context , data ) ; identifier = getFirstToken ( ) . image ; uberInfo = new Info ( getTemplateName ( ) , getLine ( ) , getColumn ( ) ) ; strictRef = rsvc . getBoolean ( RuntimeConstants . RUNTIME_REFERENCES_STRICT , false ) ; return data ; } public Object execute ( Object o , InternalContextAdapter context ) throws MethodInvocationException { VelPropertyGet vg = null ; try { IntrospectionCacheData icd = context . icacheGet ( this ) ; if ( icd != null && ( o != null ) && ( icd . contextData == o . getClass ( ) ) ) { vg = ( VelPropertyGet ) icd . thingy ; } else { vg = rsvc . getUberspect ( ) . getPropertyGet ( o , identifier , uberInfo ) ; if ( vg != null && vg . isCacheable ( ) && ( o != null ) ) { icd = new IntrospectionCacheData ( ) ; icd . contextData = o . getClass ( ) ; icd . thingy = vg ; context . icachePut ( this , icd ) ; } } } catch ( RuntimeException e ) { throw e ; } catch ( Exception e ) { String msg = "ASTIdentifier.execute() : identifier = " + identifier ; log . error ( msg , e ) ; throw new VelocityException ( msg , e ) ; } if ( vg == null ) { if ( strictRef ) { throw new MethodInvocationException ( "Object '" + o . getClass ( ) . getName ( ) + "' does not contain property '" + identifier + "'" , null , identifier , uberInfo . getTemplateName ( ) , uberInfo . getLine ( ) , uberInfo . getColumn ( ) ) ; } else { return null ; } } try { return vg . invoke ( o ) ; } catch ( InvocationTargetException ite ) { Throwable t = ite . getTargetException ( ) ; if ( t instanceof Exception ) { try { return EventHandlerUtil . methodException ( rsvc , context , o . getClass ( ) , vg . getMethodName ( ) , ( Exception ) t ) ; } catch ( Exception e ) { throw new MethodInvocationException ( "Invocation of method '" + vg . getMethodName ( ) + "'" + " in  " + o . getClass ( ) + " threw exception " + ite . getTargetException ( ) . toString ( ) , ite . getTargetException ( ) , vg . getMethodName ( ) , getTemplateName ( ) , this . getLine ( ) , this . getColumn ( ) ) ; } } else { throw new MethodInvocationException ( "Invocation of method '" + vg . getMethodName ( ) + "'" + " in  " + o . getClass ( ) + " threw exception " + ite . getTargetException ( ) . toString ( ) , ite . getTargetException ( ) , vg . getMethodName ( ) , getTemplateName ( ) , this . getLine ( ) , this . getColumn ( ) ) ; } } catch ( IllegalArgumentException iae ) { return null ; } catch ( RuntimeException e ) { throw e ; } catch ( Exception e ) { String msg = "ASTIdentifier() : exception invoking method " + "for identifier '" + identifier + "' in " + o . getClass ( ) ; log . error ( msg , e ) ; throw new VelocityException ( msg , e ) ; } } } 	0	['5', '2', '0', '17', '38', '0', '4', '15', '5', '0.416666667', '310', '1', '1', '0.909090909', '0.466666667', '0', '0', '60.4', '1', '0.6', '0']
package org . apache . velocity . runtime . parser . node ; import java . util . ArrayList ; import java . util . List ; import org . apache . velocity . context . InternalContextAdapter ; import org . apache . velocity . exception . MethodInvocationException ; import org . apache . velocity . runtime . parser . Parser ; public class ASTObjectArray extends SimpleNode { public ASTObjectArray ( int id ) { super ( id ) ; } public ASTObjectArray ( Parser p , int id ) { super ( p , id ) ; } public Object jjtAccept ( ParserVisitor visitor , Object data ) { return visitor . visit ( this , data ) ; } public Object value ( InternalContextAdapter context ) throws MethodInvocationException { int size = jjtGetNumChildren ( ) ; List objectArray = new ArrayList ( size ) ; for ( int i = 0 ; i < size ; i ++ ) { objectArray . add ( jjtGetChild ( i ) . value ( context ) ) ; } return objectArray ; } } 	0	['4', '2', '0', '8', '12', '6', '4', '6', '4', '2', '43', '0', '0', '0.9375', '0.416666667', '1', '1', '9.75', '1', '0.5', '0']
package org . apache . velocity . util . introspection ; public class IntrospectionUtils { public static boolean isMethodInvocationConvertible ( Class formal , Class actual , boolean possibleVarArg ) { if ( actual == null && ! formal . isPrimitive ( ) ) { return true ; } if ( actual != null && formal . isAssignableFrom ( actual ) ) { return true ; } if ( formal . isPrimitive ( ) ) { if ( formal == Boolean . TYPE && actual == Boolean . class ) return true ; if ( formal == Character . TYPE && actual == Character . class ) return true ; if ( formal == Byte . TYPE && actual == Byte . class ) return true ; if ( formal == Short . TYPE && ( actual == Short . class || actual == Byte . class ) ) return true ; if ( formal == Integer . TYPE && ( actual == Integer . class || actual == Short . class || actual == Byte . class ) ) return true ; if ( formal == Long . TYPE && ( actual == Long . class || actual == Integer . class || actual == Short . class || actual == Byte . class ) ) return true ; if ( formal == Float . TYPE && ( actual == Float . class || actual == Long . class || actual == Integer . class || actual == Short . class || actual == Byte . class ) ) return true ; if ( formal == Double . TYPE && ( actual == Double . class || actual == Float . class || actual == Long . class || actual == Integer . class || actual == Short . class || actual == Byte . class ) ) return true ; } if ( possibleVarArg && formal . isArray ( ) ) { if ( actual . isArray ( ) ) { actual = actual . getComponentType ( ) ; } return isMethodInvocationConvertible ( formal . getComponentType ( ) , actual , false ) ; } return false ; } public static boolean isStrictMethodInvocationConvertible ( Class formal , Class actual , boolean possibleVarArg ) { if ( actual == null && ! formal . isPrimitive ( ) ) { return true ; } if ( formal . isAssignableFrom ( actual ) ) { return true ; } if ( formal . isPrimitive ( ) ) { if ( formal == Short . TYPE && ( actual == Byte . TYPE ) ) return true ; if ( formal == Integer . TYPE && ( actual == Short . TYPE || actual == Byte . TYPE ) ) return true ; if ( formal == Long . TYPE && ( actual == Integer . TYPE || actual == Short . TYPE || actual == Byte . TYPE ) ) return true ; if ( formal == Float . TYPE && ( actual == Long . TYPE || actual == Integer . TYPE || actual == Short . TYPE || actual == Byte . TYPE ) ) return true ; if ( formal == Double . TYPE && ( actual == Float . TYPE || actual == Long . TYPE || actual == Integer . TYPE || actual == Short . TYPE || actual == Byte . TYPE ) ) return true ; } if ( possibleVarArg && formal . isArray ( ) ) { if ( actual . isArray ( ) ) { actual = actual . getComponentType ( ) ; } return isStrictMethodInvocationConvertible ( formal . getComponentType ( ) , actual , false ) ; } return false ; } } 	0	['4', '1', '0', '2', '12', '6', '2', '0', '3', '1', '437', '0', '0', '0', '0.375', '0', '0', '106.25', '63', '23', '0']
package org . apache . velocity . util ; import java . lang . reflect . Constructor ; import java . lang . reflect . Method ; public class ExceptionUtils { private static boolean causesAllowed = true ; public static RuntimeException createRuntimeException ( String message , Throwable cause ) { return ( RuntimeException ) createWithCause ( RuntimeException . class , message , cause ) ; } public static Throwable createWithCause ( Class clazz , String message , Throwable cause ) { Throwable re = null ; if ( causesAllowed ) { try { Constructor constructor = clazz . getConstructor ( new Class [ ] { String . class , Throwable . class } ) ; re = ( Throwable ) constructor . newInstance ( new Object [ ] { message , cause } ) ; } catch ( RuntimeException e ) { throw e ; } catch ( Exception e ) { causesAllowed = false ; } } if ( re == null ) { try { Constructor constructor = clazz . getConstructor ( new Class [ ] { String . class } ) ; re = ( Throwable ) constructor . newInstance ( new Object [ ] { message + " caused by " + cause } ) ; } catch ( RuntimeException e ) { throw e ; } catch ( Exception e ) { throw new RuntimeException ( "Error caused " + e ) ; } } return re ; } public static void setCause ( Throwable onObject , Throwable cause ) { if ( causesAllowed ) { try { Method method = onObject . getClass ( ) . getMethod ( "initCause" , new Class [ ] { Throwable . class } ) ; method . invoke ( onObject , new Object [ ] { cause } ) ; } catch ( RuntimeException e ) { throw e ; } catch ( Exception e ) { causesAllowed = false ; } } } } 	0	['6', '1', '0', '7', '20', '9', '7', '0', '4', '0.7', '185', '0.25', '0', '0', '0.4', '0', '0', '29.16666667', '6', '2', '0']
package org . apache . velocity . runtime . parser . node ; import org . apache . velocity . context . InternalContextAdapter ; import org . apache . velocity . exception . MethodInvocationException ; import org . apache . velocity . runtime . parser . Parser ; public class ASTExpression extends SimpleNode { public ASTExpression ( int id ) { super ( id ) ; } public ASTExpression ( Parser p , int id ) { super ( p , id ) ; } public Object jjtAccept ( ParserVisitor visitor , Object data ) { return visitor . visit ( this , data ) ; } public boolean evaluate ( InternalContextAdapter context ) throws MethodInvocationException { return jjtGetChild ( 0 ) . evaluate ( context ) ; } public Object value ( InternalContextAdapter context ) throws MethodInvocationException { return jjtGetChild ( 0 ) . value ( context ) ; } } 	0	['5', '2', '0', '10', '11', '10', '6', '6', '5', '2', '31', '0', '0', '0.909090909', '0.4', '1', '2', '5.2', '1', '0.6', '0']
package org . apache . velocity . context ; import org . apache . velocity . app . event . EventCartridge ; public interface InternalEventContext { public EventCartridge attachEventCartridge ( EventCartridge ec ) ; public EventCartridge getEventCartridge ( ) ; } 	0	['2', '1', '0', '5', '2', '1', '5', '1', '2', '2', '2', '0', '0', '0', '0.75', '0', '0', '0', '1', '1', '0']
package org . apache . velocity . runtime . resource . loader ; import java . io . BufferedInputStream ; import java . io . InputStream ; import java . sql . Connection ; import java . sql . PreparedStatement ; import java . sql . ResultSet ; import java . sql . SQLException ; import java . sql . Timestamp ; import javax . naming . InitialContext ; import javax . naming . NamingException ; import javax . sql . DataSource ; import org . apache . commons . collections . ExtendedProperties ; import org . apache . velocity . exception . ResourceNotFoundException ; import org . apache . velocity . exception . VelocityException ; import org . apache . velocity . runtime . resource . Resource ; import org . apache . velocity . util . ExceptionUtils ; import org . apache . velocity . util . StringUtils ; public class DataSourceResourceLoader extends ResourceLoader { private String dataSourceName ; private String tableName ; private String keyColumn ; private String templateColumn ; private String timestampColumn ; private InitialContext ctx ; private DataSource dataSource ; public void init ( ExtendedProperties configuration ) { dataSourceName = StringUtils . nullTrim ( configuration . getString ( "resource.datasource" ) ) ; tableName = StringUtils . nullTrim ( configuration . getString ( "resource.table" ) ) ; keyColumn = StringUtils . nullTrim ( configuration . getString ( "resource.keycolumn" ) ) ; templateColumn = StringUtils . nullTrim ( configuration . getString ( "resource.templatecolumn" ) ) ; timestampColumn = StringUtils . nullTrim ( configuration . getString ( "resource.timestampcolumn" ) ) ; if ( dataSource != null ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "DataSourceResourceLoader: using dataSource instance with table \"" + tableName + "\"" ) ; log . debug ( "DataSourceResourceLoader: using columns \"" + keyColumn + "\", \"" + templateColumn + "\" and \"" + timestampColumn + "\"" ) ; } log . trace ( "DataSourceResourceLoader initialized." ) ; } else if ( dataSourceName != null ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "DataSourceResourceLoader: using \"" + dataSourceName + "\" datasource with table \"" + tableName + "\"" ) ; log . debug ( "DataSourceResourceLoader: using columns \"" + keyColumn + "\", \"" + templateColumn + "\" and \"" + timestampColumn + "\"" ) ; } log . trace ( "DataSourceResourceLoader initialized." ) ; } else { String msg = "DataSourceResourceLoader not properly initialized. No DataSource was identified." ; log . error ( msg ) ; throw new RuntimeException ( msg ) ; } } public void setDataSource ( final DataSource dataSource ) { this . dataSource = dataSource ; } public boolean isSourceModified ( final Resource resource ) { return ( resource . getLastModified ( ) != readLastModified ( resource , "checking timestamp" ) ) ; } public long getLastModified ( final Resource resource ) { return readLastModified ( resource , "getting timestamp" ) ; } public synchronized InputStream getResourceStream ( final String name ) throws ResourceNotFoundException { if ( org . apache . commons . lang . StringUtils . isEmpty ( name ) ) { throw new ResourceNotFoundException ( "DataSourceResourceLoader: Template name was empty or null" ) ; } Connection conn = null ; ResultSet rs = null ; try { conn = openDbConnection ( ) ; rs = readData ( conn , templateColumn , name ) ; if ( rs . next ( ) ) { InputStream stream = rs . getBinaryStream ( templateColumn ) ; if ( stream == null ) { throw new ResourceNotFoundException ( "DataSourceResourceLoader: " + "template column for '" + name + "' is null" ) ; } return new BufferedInputStream ( stream ) ; } else { throw new ResourceNotFoundException ( "DataSourceResourceLoader: " + "could not find resource '" + name + "'" ) ; } } catch ( SQLException sqle ) { String msg = "DataSourceResourceLoader: database problem while getting resource '" + name + "': " ; log . error ( msg , sqle ) ; throw new ResourceNotFoundException ( msg ) ; } catch ( NamingException ne ) { String msg = "DataSourceResourceLoader: database problem while getting resource '" + name + "': " ; log . error ( msg , ne ) ; throw new ResourceNotFoundException ( msg ) ; } finally { closeResultSet ( rs ) ; closeDbConnection ( conn ) ; } } private long readLastModified ( final Resource resource , final String operation ) { long timeStamp = 0 ; String name = resource . getName ( ) ; if ( name == null || name . length ( ) == 0 ) { String msg = "DataSourceResourceLoader: Template name was empty or null" ; log . error ( msg ) ; throw new NullPointerException ( msg ) ; } else { Connection conn = null ; ResultSet rs = null ; try { conn = openDbConnection ( ) ; rs = readData ( conn , timestampColumn , name ) ; if ( rs . next ( ) ) { Timestamp ts = rs . getTimestamp ( timestampColumn ) ; timeStamp = ts != null ? ts . getTime ( ) : 0 ; } else { String msg = "DataSourceResourceLoader: could not find resource " + name + " while " + operation ; log . error ( msg ) ; throw new ResourceNotFoundException ( msg ) ; } } catch ( SQLException sqle ) { String msg = "DataSourceResourceLoader: database problem while " + operation + " of '" + name + "': " ; log . error ( msg , sqle ) ; throw ExceptionUtils . createRuntimeException ( msg , sqle ) ; } catch ( NamingException ne ) { String msg = "DataSourceResourceLoader: database problem while " + operation + " of '" + name + "': " ; log . error ( msg , ne ) ; throw ExceptionUtils . createRuntimeException ( msg , ne ) ; } finally { closeResultSet ( rs ) ; closeDbConnection ( conn ) ; } } return timeStamp ; } private Connection openDbConnection ( ) throws NamingException , SQLException { if ( dataSource != null ) { return dataSource . getConnection ( ) ; } if ( ctx == null ) { ctx = new InitialContext ( ) ; } dataSource = ( DataSource ) ctx . lookup ( dataSourceName ) ; return dataSource . getConnection ( ) ; } private void closeDbConnection ( final Connection conn ) { if ( conn != null ) { try { conn . close ( ) ; } catch ( RuntimeException re ) { throw re ; } catch ( Exception e ) { String msg = "DataSourceResourceLoader: problem when closing connection" ; log . error ( msg , e ) ; throw new VelocityException ( msg , e ) ; } } } private void closeResultSet ( final ResultSet rs ) { if ( rs != null ) { try { rs . close ( ) ; } catch ( RuntimeException re ) { throw re ; } catch ( Exception e ) { String msg = "DataSourceResourceLoader: problem when closing result set" ; log . error ( msg , e ) ; throw new VelocityException ( msg , e ) ; } } } private ResultSet readData ( final Connection conn , final String columnNames , final String templateName ) throws SQLException { PreparedStatement ps = conn . prepareStatement ( "SELECT " + columnNames + " FROM " + tableName + " WHERE " + keyColumn + " = ?" ) ; ps . setString ( 1 , templateName ) ; return ps . executeQuery ( ) ; } } 	0	['11', '2', '0', '9', '44', '27', '0', '9', '6', '0.728571429', '559', '1', '0', '0.545454545', '0.285714286', '1', '1', '49.18181818', '5', '1.9091', '0']
package org . apache . velocity ; import java . util . HashMap ; import java . util . Map ; import org . apache . velocity . context . AbstractContext ; import org . apache . velocity . context . Context ; public class VelocityContext extends AbstractContext implements Cloneable { private static final long serialVersionUID = 9033846851064645037L ; private Map context = null ; public VelocityContext ( ) { this ( null , null ) ; } public VelocityContext ( Map context ) { this ( context , null ) ; } public VelocityContext ( Context innerContext ) { this ( null , innerContext ) ; } public VelocityContext ( Map context , Context innerContext ) { super ( innerContext ) ; this . context = ( context == null ? new HashMap ( ) : context ) ; } public Object internalGet ( String key ) { return context . get ( key ) ; } public Object internalPut ( String key , Object value ) { return context . put ( key , value ) ; } public boolean internalContainsKey ( Object key ) { return context . containsKey ( key ) ; } public Object [ ] internalGetKeys ( ) { return context . keySet ( ) . toArray ( ) ; } public Object internalRemove ( Object key ) { return context . remove ( key ) ; } public Object clone ( ) { VelocityContext clone = null ; try { clone = ( VelocityContext ) super . clone ( ) ; clone . context = new HashMap ( context ) ; } catch ( CloneNotSupportedException ignored ) { } return clone ; } } 	0	['10', '3', '0', '7', '20', '3', '5', '2', '10', '0.555555556', '86', '1', '0', '0.833333333', '0.38', '1', '4', '7.4', '1', '0.6', '0']
package org . apache . velocity . exception ; import org . apache . velocity . runtime . parser . ParseException ; import org . apache . velocity . util . introspection . Info ; public class ParseErrorException extends VelocityException { private static final long serialVersionUID = - 6665197935086306472L ; private int columnNumber = - 1 ; private int lineNumber = - 1 ; private String templateName = "*unset*" ; private String invalidSyntax ; public ParseErrorException ( String exceptionMessage ) { super ( exceptionMessage ) ; } public ParseErrorException ( ParseException pex ) { super ( pex . getMessage ( ) ) ; if ( pex instanceof ExtendedParseException ) { ExtendedParseException xpex = ( ExtendedParseException ) pex ; columnNumber = xpex . getColumnNumber ( ) ; lineNumber = xpex . getLineNumber ( ) ; templateName = xpex . getTemplateName ( ) ; } else { if ( pex . currentToken != null && pex . currentToken . next != null ) { columnNumber = pex . currentToken . next . beginColumn ; lineNumber = pex . currentToken . next . beginLine ; } } } public ParseErrorException ( VelocityException pex ) { super ( pex . getMessage ( ) ) ; if ( pex instanceof ExtendedParseException ) { ExtendedParseException xpex = ( ExtendedParseException ) pex ; columnNumber = xpex . getColumnNumber ( ) ; lineNumber = xpex . getLineNumber ( ) ; templateName = xpex . getTemplateName ( ) ; } else if ( pex . getWrappedThrowable ( ) instanceof ParseException ) { ParseException pex2 = ( ParseException ) pex . getWrappedThrowable ( ) ; if ( pex2 . currentToken != null && pex2 . currentToken . next != null ) { columnNumber = pex2 . currentToken . next . beginColumn ; lineNumber = pex2 . currentToken . next . beginLine ; } } } public ParseErrorException ( String exceptionMessage , Info info ) { super ( exceptionMessage ) ; columnNumber = info . getColumn ( ) ; lineNumber = info . getLine ( ) ; templateName = info . getTemplateName ( ) ; } public ParseErrorException ( String exceptionMessage , Info info , String invalidSyntax ) { super ( exceptionMessage ) ; columnNumber = info . getColumn ( ) ; lineNumber = info . getLine ( ) ; templateName = info . getTemplateName ( ) ; this . invalidSyntax = invalidSyntax ; } public int getColumnNumber ( ) { return columnNumber ; } public int getLineNumber ( ) { return lineNumber ; } public String getTemplateName ( ) { return templateName ; } public String getInvalidSyntax ( ) { return invalidSyntax ; } } 	0	['9', '5', '0', '33', '19', '0', '28', '5', '9', '0.625', '204', '1', '0', '0.777777778', '0.355555556', '0', '0', '21.11111111', '1', '0.4444', '0']
package org . apache . velocity . runtime . parser . node ; import java . lang . reflect . InvocationTargetException ; import org . apache . commons . lang . StringUtils ; import org . apache . commons . lang . text . StrBuilder ; import org . apache . velocity . exception . VelocityException ; import org . apache . velocity . runtime . log . Log ; import org . apache . velocity . util . introspection . Introspector ; public class SetPropertyExecutor extends SetExecutor { private final Introspector introspector ; public SetPropertyExecutor ( final Log log , final Introspector introspector , final Class clazz , final String property , final Object arg ) { this . log = log ; this . introspector = introspector ; if ( StringUtils . isNotEmpty ( property ) ) { discover ( clazz , property , arg ) ; } } protected Introspector getIntrospector ( ) { return this . introspector ; } protected void discover ( final Class clazz , final String property , final Object arg ) { Object [ ] params = new Object [ ] { arg } ; try { StrBuilder sb = new StrBuilder ( "set" ) ; sb . append ( property ) ; setMethod ( introspector . getMethod ( clazz , sb . toString ( ) , params ) ) ; if ( ! isAlive ( ) ) { char c = sb . charAt ( 3 ) ; if ( Character . isLowerCase ( c ) ) { sb . setCharAt ( 3 , Character . toUpperCase ( c ) ) ; } else { sb . setCharAt ( 3 , Character . toLowerCase ( c ) ) ; } setMethod ( introspector . getMethod ( clazz , sb . toString ( ) , params ) ) ; } } catch ( RuntimeException e ) { throw e ; } catch ( Exception e ) { String msg = "Exception while looking for property setter for '" + property ; log . error ( msg , e ) ; throw new VelocityException ( msg , e ) ; } } public Object execute ( final Object o , final Object value ) throws IllegalAccessException , InvocationTargetException { Object [ ] params = new Object [ ] { value } ; return isAlive ( ) ? getMethod ( ) . invoke ( o , params ) : null ; } } 	0	['4', '2', '0', '7', '24', '0', '1', '6', '2', '0.333333333', '126', '1', '1', '0.571428571', '0.541666667', '0', '0', '30.25', '2', '1', '0']
package org . apache . velocity . app . event ; import org . apache . velocity . context . Context ; import org . apache . velocity . util . ContextAware ; public interface ReferenceInsertionEventHandler extends EventHandler { public Object referenceInsert ( String reference , Object value ) ; static class referenceInsertExecutor implements EventHandlerMethodExecutor { private Context context ; private String reference ; private Object value ; referenceInsertExecutor ( Context context , String reference , Object value ) { this . context = context ; this . reference = reference ; this . value = value ; } public void execute ( EventHandler handler ) { ReferenceInsertionEventHandler eh = ( ReferenceInsertionEventHandler ) handler ; if ( eh instanceof ContextAware ) ( ( ContextAware ) eh ) . setContext ( context ) ; value = ( ( ReferenceInsertionEventHandler ) handler ) . referenceInsert ( reference , value ) ; } public Object getReturnValue ( ) { return value ; } public boolean isDone ( ) { return false ; } } } 	0	['1', '1', '0', '5', '1', '0', '4', '1', '1', '2', '1', '0', '0', '0', '1', '0', '0', '0', '1', '1', '0']
package org . apache . velocity . app . event . implement ; import org . apache . oro . text . perl . MalformedPerl5PatternException ; import org . apache . oro . text . perl . Perl5Util ; import org . apache . velocity . app . event . ReferenceInsertionEventHandler ; import org . apache . velocity . runtime . RuntimeServices ; import org . apache . velocity . util . RuntimeServicesAware ; import org . apache . velocity . util . StringUtils ; public abstract class EscapeReference implements ReferenceInsertionEventHandler , RuntimeServicesAware { private Perl5Util perl = new Perl5Util ( ) ; private RuntimeServices rs ; private String matchRegExp = null ; protected abstract String escape ( Object text ) ; protected abstract String getMatchAttribute ( ) ; public Object referenceInsert ( String reference , Object value ) { if ( value == null ) { return value ; } if ( matchRegExp == null ) { return escape ( value ) ; } else if ( perl . match ( matchRegExp , reference ) ) { return escape ( value ) ; } else { return value ; } } public void setRuntimeServices ( RuntimeServices rs ) { this . rs = rs ; matchRegExp = StringUtils . nullTrim ( rs . getConfiguration ( ) . getString ( getMatchAttribute ( ) ) ) ; if ( ( matchRegExp != null ) && ( matchRegExp . length ( ) == 0 ) ) { matchRegExp = null ; } if ( matchRegExp != null ) { try { perl . match ( matchRegExp , "" ) ; } catch ( MalformedPerl5PatternException E ) { rs . getLog ( ) . error ( "Invalid regular expression '" + matchRegExp + "'.  No escaping will be performed." , E ) ; matchRegExp = null ; } } } protected RuntimeServices getRuntimeServices ( ) { return rs ; } } 	0	['6', '1', '4', '12', '18', '7', '4', '8', '3', '0.666666667', '99', '1', '1', '0', '0.416666667', '0', '0', '15', '4', '1.8333', '0']
package org . apache . velocity . runtime . directive ; public interface DirectiveConstants { public static final int BLOCK = 1 ; public static final int LINE = 2 ; } 	0	['0', '1', '0', '1', '0', '0', '1', '0', '0', '2', '2', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0']
package org . apache . velocity . app . event ; public interface EventHandlerMethodExecutor { public void execute ( EventHandler handler ) throws Exception ; public boolean isDone ( ) ; public Object getReturnValue ( ) ; } 	0	['3', '1', '0', '9', '3', '3', '8', '1', '3', '2', '3', '0', '0', '0', '0.666666667', '0', '0', '0', '1', '1', '0']
package org . apache . velocity . util . introspection ; public interface VelMethod { public Object invoke ( Object o , Object [ ] params ) throws Exception ; public boolean isCacheable ( ) ; public String getMethodName ( ) ; public Class getReturnType ( ) ; } 	0	['4', '1', '0', '6', '4', '6', '6', '0', '4', '2', '4', '0', '0', '0', '0.5', '0', '0', '0', '1', '1', '0']
package org . apache . velocity . runtime . parser . node ; import java . lang . reflect . InvocationTargetException ; import java . lang . reflect . Method ; import org . apache . velocity . runtime . log . Log ; public abstract class SetExecutor { protected Log log = null ; private Method method = null ; public abstract Object execute ( Object o , Object value ) throws IllegalAccessException , InvocationTargetException ; public boolean isAlive ( ) { return ( method != null ) ; } public Method getMethod ( ) { return method ; } protected void setMethod ( final Method method ) { this . method = method ; } } 	0	['5', '1', '3', '6', '6', '0', '5', '1', '4', '0.625', '30', '1', '1', '0', '0.466666667', '0', '0', '4.6', '2', '1', '0']
package org . apache . velocity . runtime . resource ; import org . apache . velocity . Template ; public class ResourceFactory { public static Resource getResource ( String resourceName , int resourceType ) { Resource resource = null ; switch ( resourceType ) { case ResourceManager . RESOURCE_TEMPLATE : resource = new Template ( ) ; break ; case ResourceManager . RESOURCE_CONTENT : resource = new ContentResource ( ) ; break ; } return resource ; } } 	0	['2', '1', '0', '4', '5', '1', '1', '3', '2', '2', '20', '0', '0', '0', '0.5', '0', '0', '9', '4', '2', '0']
package org . apache . velocity . runtime . parser . node ; import org . apache . velocity . runtime . parser . Parser ; public class ASTParameters extends SimpleNode { public ASTParameters ( int id ) { super ( id ) ; } public ASTParameters ( Parser p , int id ) { super ( p , id ) ; } public Object jjtAccept ( ParserVisitor visitor , Object data ) { return visitor . visit ( this , data ) ; } } 	0	['3', '2', '0', '3', '6', '3', '0', '3', '3', '2', '17', '0', '0', '0.967741935', '0.533333333', '0', '0', '4.666666667', '1', '0.3333', '0']
package org . apache . velocity . convert ; import java . io . File ; import java . io . FileWriter ; import java . io . IOException ; import org . apache . oro . text . perl . Perl5Util ; import org . apache . velocity . util . StringUtils ; import org . apache . tools . ant . DirectoryScanner ; public class WebMacro { protected static final String VM_EXT = ".vm" ; protected static final String WM_EXT = ".wm" ; protected static String [ ] perLineREs = { "#if\\s*[(]\\s*(.*\\S)\\s*[)]\\s*(#begin|{)[ \\t]?" , "#if( $1 )" , "[ \\t]?(#end|})[ \\t]*\n(\\s*)#else\\s*(#begin|{)[ \\t]?(\\w)" , "$2#else#**#$4" , "[ \\t]?(#end|})[ \\t]*\n(\\s*)#else\\s*(#begin|{)[ \\t]?" , "$2#else" , "(#end|})(\\s*#else)\\s*(#begin|{)[ \\t]?" , "$1\n$2" , "#foreach\\s+(\\$\\w+)\\s+in\\s+(\\$[^\\s#]+)\\s*(#begin|{)[ \\t]?" , "#foreach( $1 in $2 )" , "#set\\s+(\\$[^\\s=]+)\\s*=\\s*([\\S \\t]+)" , "#set( $1 = $2 )" , "(##[# \\t\\w]*)\\)" , ")$1" , "#parse\\s+([^\\s#]+)[ \\t]?" , "#parse( $1 )" , "#include\\s+([^\\s#]+)[ \\t]?" , "#include( $1 )" , "\\$\\(([^\\)]+)\\)" , "${$1}" , "\\${([^}\\(]+)\\(([^}]+)}\\)" , "${$1($2)}" , "\\$_" , "$l_" , "\\${(_[^}]+)}" , "${l$1}" , "(#set\\s*\\([^;]+);(\\s*\\))" , "$1$2" , "(^|[^\\\\])\\$(\\w[^=\n;'\"]*);" , "$1${$2}" , "\\.wm" , ".vm" } ; public void convert ( String target ) { File file = new File ( target ) ; if ( ! file . exists ( ) ) { throw new RuntimeException ( "The specified template or directory does not exist" ) ; } if ( file . isDirectory ( ) ) { String basedir = file . getAbsolutePath ( ) ; String newBasedir = basedir + VM_EXT ; DirectoryScanner ds = new DirectoryScanner ( ) ; ds . setBasedir ( basedir ) ; ds . addDefaultExcludes ( ) ; ds . scan ( ) ; String [ ] files = ds . getIncludedFiles ( ) ; for ( int i = 0 ; i < files . length ; i ++ ) { writeTemplate ( files [ i ] , basedir , newBasedir ) ; } } else { writeTemplate ( file . getAbsolutePath ( ) , "" , "" ) ; } } private boolean writeTemplate ( String file , String basedir , String newBasedir ) { if ( file . indexOf ( WM_EXT ) < 0 ) { return false ; } System . out . println ( "Converting " + file + "..." ) ; String template = file ; String newTemplate = convertName ( file ) ; if ( basedir . length ( ) > 0 ) { String templateDir = newBasedir + extractPath ( file ) ; File outputDirectory = new File ( templateDir ) ; template = basedir + File . separator + file ; if ( ! outputDirectory . exists ( ) ) { outputDirectory . mkdirs ( ) ; } newTemplate = newBasedir + File . separator + convertName ( file ) ; } String convertedTemplate = convertTemplate ( template ) ; FileWriter fw = null ; try { fw = new FileWriter ( newTemplate ) ; fw . write ( convertedTemplate ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; } finally { if ( fw != null ) { try { fw . close ( ) ; } catch ( IOException io ) { } } } return true ; } private final String extractPath ( String file ) { int lastSepPos = file . lastIndexOf ( File . separator ) ; return ( lastSepPos == - 1 ? "" : File . separator + file . substring ( 0 , lastSepPos ) ) ; } private String convertName ( String name ) { return ( name . indexOf ( WM_EXT ) < 0 ) ? name : name . substring ( 0 , name . indexOf ( WM_EXT ) ) + VM_EXT ; } private static final void usage ( ) { System . err . println ( "Usage: convert-wm <template.wm | directory>" ) ; } public String convertTemplate ( String template ) { String contents = StringUtils . fileContentsToString ( template ) ; if ( ! contents . endsWith ( "\n" ) ) { contents += "\n" ; } Perl5Util perl = new Perl5Util ( ) ; for ( int i = 0 ; i < perLineREs . length ; i += 2 ) { contents = perl . substitute ( makeSubstRE ( i ) , contents ) ; } if ( perl . match ( "m/javascript/i" , contents ) ) { contents = perl . substitute ( "s/\n}/\n#end/g" , contents ) ; } else { contents = perl . substitute ( "s/(\n\\s*)}/$1#end/g" , contents ) ; contents = perl . substitute ( "s/#end\\s*\n\\s*#else/#else/g" , contents ) ; } return contents ; } private final String makeSubstRE ( int i ) { return ( "s/" + perLineREs [ i ] + '/' + perLineREs [ i + 1 ] + "/g" ) ; } public static void main ( String [ ] args ) { if ( args . length > 0 ) { for ( int x = 0 ; x < args . length ; x ++ ) { WebMacro converter = new WebMacro ( ) ; converter . convert ( args [ x ] ) ; } } else { usage ( ) ; } } } 	0	['10', '1', '0', '3', '40', '39', '0', '3', '4', '0.962962963', '470', '1', '0', '0', '0.388888889', '0', '0', '45.7', '8', '2.3', '0']
package org . apache . velocity . runtime . parser . node ; import org . apache . velocity . runtime . parser . Parser ; public class ASTIncludeStatement extends SimpleNode { public ASTIncludeStatement ( int id ) { super ( id ) ; } public ASTIncludeStatement ( Parser p , int id ) { super ( p , id ) ; } public Object jjtAccept ( ParserVisitor visitor , Object data ) { return visitor . visit ( this , data ) ; } } 	0	['3', '2', '0', '3', '6', '3', '0', '3', '3', '2', '17', '0', '0', '0.967741935', '0.533333333', '0', '0', '4.666666667', '1', '0.3333', '0']
package org . apache . velocity . runtime . parser . node ; import org . apache . velocity . runtime . parser . Parser ; public class ASTAssignment extends SimpleNode { public ASTAssignment ( int id ) { super ( id ) ; } public ASTAssignment ( Parser p , int id ) { super ( p , id ) ; } public Object jjtAccept ( ParserVisitor visitor , Object data ) { return visitor . visit ( this , data ) ; } } 	0	['3', '2', '0', '5', '6', '3', '4', '3', '3', '2', '17', '0', '0', '0.967741935', '0.533333333', '0', '0', '4.666666667', '1', '0.3333', '0']
package org . apache . velocity . app . event ; import java . util . ArrayList ; import java . util . HashSet ; import java . util . Iterator ; import java . util . List ; import java . util . Set ; import org . apache . velocity . context . Context ; import org . apache . velocity . context . InternalEventContext ; import org . apache . velocity . runtime . RuntimeServices ; import org . apache . velocity . util . RuntimeServicesAware ; public class EventCartridge { private List referenceHandlers = new ArrayList ( ) ; private List nullSetHandlers = new ArrayList ( ) ; private List methodExceptionHandlers = new ArrayList ( ) ; private List includeHandlers = new ArrayList ( ) ; private List invalidReferenceHandlers = new ArrayList ( ) ; Set initializedHandlers = new HashSet ( ) ; public boolean addEventHandler ( EventHandler ev ) { if ( ev == null ) { return false ; } boolean found = false ; if ( ev instanceof ReferenceInsertionEventHandler ) { addReferenceInsertionEventHandler ( ( ReferenceInsertionEventHandler ) ev ) ; found = true ; } if ( ev instanceof NullSetEventHandler ) { addNullSetEventHandler ( ( NullSetEventHandler ) ev ) ; found = true ; } if ( ev instanceof MethodExceptionEventHandler ) { addMethodExceptionHandler ( ( MethodExceptionEventHandler ) ev ) ; found = true ; } if ( ev instanceof IncludeEventHandler ) { addIncludeEventHandler ( ( IncludeEventHandler ) ev ) ; found = true ; } if ( ev instanceof InvalidReferenceEventHandler ) { addInvalidReferenceEventHandler ( ( InvalidReferenceEventHandler ) ev ) ; found = true ; } return found ; } public void addReferenceInsertionEventHandler ( ReferenceInsertionEventHandler ev ) { referenceHandlers . add ( ev ) ; } public void addNullSetEventHandler ( NullSetEventHandler ev ) { nullSetHandlers . add ( ev ) ; } public void addMethodExceptionHandler ( MethodExceptionEventHandler ev ) { methodExceptionHandlers . add ( ev ) ; } public void addIncludeEventHandler ( IncludeEventHandler ev ) { includeHandlers . add ( ev ) ; } public void addInvalidReferenceEventHandler ( InvalidReferenceEventHandler ev ) { invalidReferenceHandlers . add ( ev ) ; } public boolean removeEventHandler ( EventHandler ev ) { if ( ev == null ) { return false ; } boolean found = false ; if ( ev instanceof ReferenceInsertionEventHandler ) return referenceHandlers . remove ( ev ) ; if ( ev instanceof NullSetEventHandler ) return nullSetHandlers . remove ( ev ) ; if ( ev instanceof MethodExceptionEventHandler ) return methodExceptionHandlers . remove ( ev ) ; if ( ev instanceof IncludeEventHandler ) return includeHandlers . remove ( ev ) ; if ( ev instanceof InvalidReferenceEventHandler ) return invalidReferenceHandlers . remove ( ev ) ; return found ; } public Iterator getReferenceInsertionEventHandlers ( ) { return referenceHandlers . size ( ) == 0 ? null : referenceHandlers . iterator ( ) ; } public Iterator getNullSetEventHandlers ( ) { return nullSetHandlers . iterator ( ) ; } public Iterator getMethodExceptionEventHandlers ( ) { return methodExceptionHandlers . iterator ( ) ; } public Iterator getIncludeEventHandlers ( ) { return includeHandlers . iterator ( ) ; } public Iterator getInvalidReferenceEventHandlers ( ) { return invalidReferenceHandlers . iterator ( ) ; } public final boolean attachToContext ( Context context ) { if ( context instanceof InternalEventContext ) { InternalEventContext iec = ( InternalEventContext ) context ; iec . attachEventCartridge ( this ) ; return true ; } else { return false ; } } public void initialize ( RuntimeServices rs ) throws Exception { for ( Iterator i = referenceHandlers . iterator ( ) ; i . hasNext ( ) ; ) { EventHandler eh = ( EventHandler ) i . next ( ) ; if ( ( eh instanceof RuntimeServicesAware ) && ! initializedHandlers . contains ( eh ) ) { ( ( RuntimeServicesAware ) eh ) . setRuntimeServices ( rs ) ; initializedHandlers . add ( eh ) ; } } for ( Iterator i = nullSetHandlers . iterator ( ) ; i . hasNext ( ) ; ) { EventHandler eh = ( EventHandler ) i . next ( ) ; if ( ( eh instanceof RuntimeServicesAware ) && ! initializedHandlers . contains ( eh ) ) { ( ( RuntimeServicesAware ) eh ) . setRuntimeServices ( rs ) ; initializedHandlers . add ( eh ) ; } } for ( Iterator i = methodExceptionHandlers . iterator ( ) ; i . hasNext ( ) ; ) { EventHandler eh = ( EventHandler ) i . next ( ) ; if ( ( eh instanceof RuntimeServicesAware ) && ! initializedHandlers . contains ( eh ) ) { ( ( RuntimeServicesAware ) eh ) . setRuntimeServices ( rs ) ; initializedHandlers . add ( eh ) ; } } for ( Iterator i = includeHandlers . iterator ( ) ; i . hasNext ( ) ; ) { EventHandler eh = ( EventHandler ) i . next ( ) ; if ( ( eh instanceof RuntimeServicesAware ) && ! initializedHandlers . contains ( eh ) ) { ( ( RuntimeServicesAware ) eh ) . setRuntimeServices ( rs ) ; initializedHandlers . add ( eh ) ; } } for ( Iterator i = invalidReferenceHandlers . iterator ( ) ; i . hasNext ( ) ; ) { EventHandler eh = ( EventHandler ) i . next ( ) ; if ( ( eh instanceof RuntimeServicesAware ) && ! initializedHandlers . contains ( eh ) ) { ( ( RuntimeServicesAware ) eh ) . setRuntimeServices ( rs ) ; initializedHandlers . add ( eh ) ; } } } } 	0	['15', '1', '0', '17', '28', '29', '9', '10', '15', '0.69047619', '371', '0.833333333', '0', '0', '0.177777778', '0', '0', '23.33333333', '7', '1.8667', '0']
package org . apache . velocity . app . event . implement ; import java . util . ArrayList ; import java . util . List ; import org . apache . velocity . app . event . InvalidReferenceEventHandler ; import org . apache . velocity . context . Context ; import org . apache . velocity . exception . ParseErrorException ; import org . apache . velocity . runtime . RuntimeServices ; import org . apache . velocity . util . RuntimeServicesAware ; import org . apache . velocity . util . introspection . Info ; public class ReportInvalidReferences implements InvalidReferenceEventHandler , RuntimeServicesAware { public static final String EVENTHANDLER_INVALIDREFERENCE_EXCEPTION = "eventhandler.invalidreference.exception" ; List invalidReferences = new ArrayList ( ) ; private boolean stopOnFirstInvalidReference = false ; public Object invalidGetMethod ( Context context , String reference , Object object , String property , Info info ) { reportInvalidReference ( reference , info ) ; return null ; } public Object invalidMethod ( Context context , String reference , Object object , String method , Info info ) { if ( reference == null ) { reportInvalidReference ( object . getClass ( ) . getName ( ) + "." + method , info ) ; } else { reportInvalidReference ( reference , info ) ; } return null ; } public boolean invalidSetMethod ( Context context , String leftreference , String rightreference , Info info ) { reportInvalidReference ( leftreference , info ) ; return false ; } private void reportInvalidReference ( String reference , Info info ) { InvalidReferenceInfo invalidReferenceInfo = new InvalidReferenceInfo ( reference , info ) ; invalidReferences . add ( invalidReferenceInfo ) ; if ( stopOnFirstInvalidReference ) { throw new ParseErrorException ( "Error in page - invalid reference.  " , info , invalidReferenceInfo . getInvalidReference ( ) ) ; } } public List getInvalidReferences ( ) { return invalidReferences ; } public void setRuntimeServices ( RuntimeServices rs ) { stopOnFirstInvalidReference = rs . getConfiguration ( ) . getBoolean ( EVENTHANDLER_INVALIDREFERENCE_EXCEPTION , false ) ; } } 	0	['7', '1', '0', '8', '20', '11', '0', '8', '6', '0.5', '91', '0.333333333', '0', '0', '0.5', '0', '0', '11.57142857', '2', '1.1429', '0']
package org . apache . velocity . runtime . parser . node ; import java . math . BigDecimal ; import org . apache . velocity . context . InternalContextAdapter ; import org . apache . velocity . exception . TemplateInitException ; import org . apache . velocity . runtime . parser . Parser ; public class ASTFloatingPointLiteral extends SimpleNode { private Number value = null ; public ASTFloatingPointLiteral ( int id ) { super ( id ) ; } public ASTFloatingPointLiteral ( Parser p , int id ) { super ( p , id ) ; } public Object jjtAccept ( ParserVisitor visitor , Object data ) { return visitor . visit ( this , data ) ; } public Object init ( InternalContextAdapter context , Object data ) throws TemplateInitException { super . init ( context , data ) ; String str = getFirstToken ( ) . image ; try { value = new Double ( str ) ; } catch ( NumberFormatException E1 ) { value = new BigDecimal ( str ) ; } return data ; } public Object value ( InternalContextAdapter context ) { return value ; } } 	0	['5', '2', '0', '8', '12', '0', '4', '6', '5', '0.25', '54', '1', '0', '0.909090909', '0.433333333', '0', '0', '9.6', '1', '0.6', '0']
package org . apache . velocity . anakia ; import org . jdom . Element ; import org . jdom . Namespace ; import org . jdom . output . XMLOutputter ; import java . util . List ; public class AnakiaElement extends Element { private static final long serialVersionUID = 8429597252274491314L ; private static final XMLOutputter DEFAULT_OUTPUTTER = new XMLOutputter ( ) ; static { DEFAULT_OUTPUTTER . getFormat ( ) . setLineSeparator ( System . getProperty ( "line.separator" ) ) ; } public AnakiaElement ( String name , Namespace namespace ) { super ( name , namespace ) ; } public AnakiaElement ( String name ) { super ( name ) ; } public AnakiaElement ( String name , String uri ) { super ( name , uri ) ; } public AnakiaElement ( String name , String prefix , String uri ) { super ( name , prefix , uri ) ; } public NodeList selectNodes ( String xpathExpression ) { return new NodeList ( XPathCache . getXPath ( xpathExpression ) . applyTo ( this ) , false ) ; } public String toString ( ) { return DEFAULT_OUTPUTTER . outputString ( this ) ; } public List getContent ( ) { return new NodeList ( super . getContent ( ) , false ) ; } public List getChildren ( ) { return new NodeList ( super . getChildren ( ) , false ) ; } public List getChildren ( String name ) { return new NodeList ( super . getChildren ( name ) ) ; } public List getChildren ( String name , Namespace ns ) { return new NodeList ( super . getChildren ( name , ns ) ) ; } public List getAttributes ( ) { return new NodeList ( super . getAttributes ( ) ) ; } } 	0	['12', '3', '0', '8', '30', '64', '1', '7', '11', '1', '93', '1', '0', '0.920454545', '0.606060606', '1', '2', '6.583333333', '1', '0.5833', '0']
package org . apache . velocity . app . event . implement ; import java . io . PrintWriter ; import java . io . StringWriter ; import org . apache . velocity . app . event . MethodExceptionEventHandler ; import org . apache . velocity . runtime . RuntimeServices ; import org . apache . velocity . util . RuntimeServicesAware ; public class PrintExceptions implements MethodExceptionEventHandler , RuntimeServicesAware { private static String SHOW_MESSAGE = "eventhandler.methodexception.message" ; private static String SHOW_STACK_TRACE = "eventhandler.methodexception.stacktrace" ; private RuntimeServices rs = null ; public Object methodException ( Class claz , String method , Exception e ) throws Exception { boolean showMessage = rs . getBoolean ( SHOW_MESSAGE , false ) ; boolean showStackTrace = rs . getBoolean ( SHOW_STACK_TRACE , false ) ; StringBuffer st ; if ( showMessage && showStackTrace ) { st = new StringBuffer ( 200 ) ; st . append ( e . getClass ( ) . getName ( ) ) . append ( "\n" ) ; st . append ( e . getMessage ( ) ) . append ( "\n" ) ; st . append ( getStackTrace ( e ) ) ; } else if ( showMessage ) { st = new StringBuffer ( 50 ) ; st . append ( e . getClass ( ) . getName ( ) ) . append ( "\n" ) ; st . append ( e . getMessage ( ) ) . append ( "\n" ) ; } else if ( showStackTrace ) { st = new StringBuffer ( 200 ) ; st . append ( e . getClass ( ) . getName ( ) ) . append ( "\n" ) ; st . append ( getStackTrace ( e ) ) ; } else { st = new StringBuffer ( 15 ) ; st . append ( e . getClass ( ) . getName ( ) ) . append ( "\n" ) ; } return st . toString ( ) ; } private static String getStackTrace ( Throwable throwable ) { PrintWriter printWriter = null ; try { StringWriter stackTraceWriter = new StringWriter ( ) ; printWriter = new PrintWriter ( stackTraceWriter ) ; throwable . printStackTrace ( printWriter ) ; printWriter . flush ( ) ; return stackTraceWriter . toString ( ) ; } finally { if ( printWriter != null ) { printWriter . close ( ) ; } } } public void setRuntimeServices ( RuntimeServices rs ) { this . rs = rs ; } } 	0	['5', '1', '0', '3', '19', '2', '0', '3', '3', '0.666666667', '157', '1', '1', '0', '0.333333333', '0', '0', '29.8', '3', '1', '0']
package org . apache . velocity . app . event . implement ; import org . apache . commons . lang . StringEscapeUtils ; public class EscapeXmlReference extends EscapeReference { protected String escape ( Object text ) { return StringEscapeUtils . escapeXml ( text . toString ( ) ) ; } protected String getMatchAttribute ( ) { return "eventhandler.escape.xml.match" ; } } 	0	['3', '2', '0', '2', '6', '3', '0', '2', '1', '2', '12', '0', '0', '0.714285714', '0.666666667', '1', '2', '3', '1', '0.6667', '0']
package org . apache . velocity . runtime . resource . loader ; import java . io . InputStream ; import org . apache . commons . collections . ExtendedProperties ; import org . apache . commons . lang . StringUtils ; import org . apache . velocity . exception . ResourceNotFoundException ; import org . apache . velocity . runtime . resource . Resource ; import org . apache . velocity . util . ClassUtils ; import org . apache . velocity . util . ExceptionUtils ; public class ClasspathResourceLoader extends ResourceLoader { public void init ( ExtendedProperties configuration ) { if ( log . isTraceEnabled ( ) ) { log . trace ( "ClasspathResourceLoader : initialization complete." ) ; } } public InputStream getResourceStream ( String name ) throws ResourceNotFoundException { InputStream result = null ; if ( StringUtils . isEmpty ( name ) ) { throw new ResourceNotFoundException ( "No template name provided" ) ; } try { result = ClassUtils . getResourceAsStream ( getClass ( ) , name ) ; } catch ( Exception fnfe ) { throw ( ResourceNotFoundException ) ExceptionUtils . createWithCause ( ResourceNotFoundException . class , "problem with template: " + name , fnfe ) ; } if ( result == null ) { String msg = "ClasspathResourceLoader Error: cannot find resource " + name ; throw new ResourceNotFoundException ( msg ) ; } return result ; } public boolean isSourceModified ( Resource resource ) { return false ; } public long getLastModified ( Resource resource ) { return 0 ; } } 	0	['6', '2', '0', '8', '20', '15', '0', '8', '5', '1', '88', '0', '0', '0.705882353', '0.416666667', '1', '2', '13.5', '2', '1', '0']
package org . apache . velocity . util . introspection ; public interface ChainableUberspector extends Uberspect { public void wrap ( Uberspect inner ) ; } 	0	['1', '1', '0', '3', '1', '0', '2', '1', '1', '2', '1', '0', '0', '0', '1', '0', '0', '0', '1', '1', '0']
package org . apache . velocity . app . event . implement ; import org . apache . velocity . util . introspection . Info ; public class InvalidReferenceInfo extends Info { private String invalidReference ; public InvalidReferenceInfo ( String invalidReference , Info info ) { super ( info . getTemplateName ( ) , info . getLine ( ) , info . getColumn ( ) ) ; this . invalidReference = invalidReference ; } public String getInvalidReference ( ) { return invalidReference ; } public String toString ( ) { return getTemplateName ( ) + " [line " + getLine ( ) + ", column " + getColumn ( ) + "]: " + invalidReference ; } } 	0	['3', '2', '0', '2', '14', '0', '1', '1', '3', '0', '42', '1', '0', '0.666666667', '0.555555556', '0', '0', '12.66666667', '1', '0.6667', '0']
package org . apache . velocity . util ; import org . apache . velocity . context . Context ; public interface ContextAware { public void setContext ( Context context ) ; } 	0	['1', '1', '0', '5', '1', '0', '4', '1', '1', '2', '1', '0', '0', '0', '1', '0', '0', '0', '1', '1', '0']
package org . apache . velocity . runtime . log ; public class AvalonLogSystem extends AvalonLogChute implements LogSystem { public void logVelocityMessage ( int level , String message ) { log ( level , message ) ; } } 	0	['2', '2', '0', '2', '4', '1', '0', '2', '2', '2', '10', '0', '0', '0.888888889', '0.666666667', '0', '0', '4', '1', '0.5', '0']
package org . apache . velocity . exception ; public class MacroOverflowException extends VelocityException { private static final long serialVersionUID = 7305635093478106342L ; public MacroOverflowException ( final String exceptionMessage ) { super ( exceptionMessage ) ; } public MacroOverflowException ( final String exceptionMessage , final Throwable wrapped ) { super ( exceptionMessage , wrapped ) ; } public MacroOverflowException ( final Throwable wrapped ) { super ( wrapped ) ; } } 	0	['3', '5', '0', '2', '6', '3', '1', '1', '3', '1.5', '17', '1', '0', '1', '0.777777778', '0', '0', '4.333333333', '0', '0', '0']
package org . apache . velocity . runtime . parser . node ; import org . apache . velocity . context . InternalContextAdapter ; import org . apache . velocity . exception . MathException ; import org . apache . velocity . runtime . parser . Parser ; public class ASTModNode extends ASTMathNode { public ASTModNode ( int id ) { super ( id ) ; } public ASTModNode ( Parser p , int id ) { super ( p , id ) ; } public Number perform ( Number left , Number right , InternalContextAdapter context ) { if ( MathUtils . isZero ( right ) ) { String msg = "Right side of modulus operation is zero. Must be non-zero. " + getLocation ( context ) ; if ( strictMode ) { log . error ( msg ) ; throw new MathException ( msg ) ; } else { log . debug ( msg ) ; return null ; } } return MathUtils . modulo ( left , right ) ; } } 	0	['3', '3', '0', '9', '14', '3', '4', '6', '3', '2', '48', '0', '0', '0.972222222', '0.533333333', '2', '2', '15', '3', '1', '0']
package org . apache . velocity . texen . util ; import java . io . FileInputStream ; import java . io . InputStream ; import java . util . Properties ; import java . util . StringTokenizer ; import org . apache . velocity . texen . Generator ; public class PropertiesUtil { public Properties load ( final String propertiesFile ) { Properties properties = null ; String templatePath = Generator . getInstance ( ) . getTemplatePath ( ) ; try { if ( templatePath != null ) { properties = loadFromTemplatePath ( propertiesFile ) ; } else { properties = loadFromClassPath ( propertiesFile ) ; } } catch ( RuntimeException e ) { throw e ; } catch ( Exception e ) { throw new RuntimeException ( "Could not load properties: " + e . getMessage ( ) ) ; } return properties ; } protected Properties loadFromTemplatePath ( final String propertiesFile ) throws Exception { Properties properties = new Properties ( ) ; String templatePath = Generator . getInstance ( ) . getTemplatePath ( ) ; StringTokenizer st = new StringTokenizer ( templatePath , "," ) ; while ( st . hasMoreTokens ( ) ) { String templateDir = st . nextToken ( ) ; InputStream stream = null ; try { String fullPath = propertiesFile ; if ( ! fullPath . startsWith ( templateDir ) ) { fullPath = templateDir + "/" + propertiesFile ; } stream = new FileInputStream ( fullPath ) ; properties . load ( stream ) ; break ; } finally { if ( stream != null ) { stream . close ( ) ; } } } return properties ; } protected Properties loadFromClassPath ( final String propertiesName ) throws Exception { Properties properties = new Properties ( ) ; ClassLoader classLoader = this . getClass ( ) . getClassLoader ( ) ; InputStream inputStream = null ; try { String propertiesFile = propertiesName . startsWith ( "$generator" ) ? propertiesName . substring ( "$generator.templatePath/" . length ( ) ) : propertiesName ; inputStream = classLoader . getResourceAsStream ( propertiesFile ) ; properties . load ( inputStream ) ; } finally { if ( inputStream != null ) { inputStream . close ( ) ; } } return properties ; } } 	0	['4', '1', '0', '1', '25', '6', '0', '1', '2', '2', '145', '0', '0', '0', '0.875', '0', '0', '35.25', '2', '1', '0']
package org . apache . velocity . runtime . parser . node ; import java . util . HashMap ; import java . util . Map ; import org . apache . velocity . context . InternalContextAdapter ; import org . apache . velocity . exception . MethodInvocationException ; import org . apache . velocity . runtime . parser . Parser ; public class ASTMap extends SimpleNode { public ASTMap ( int id ) { super ( id ) ; } public ASTMap ( Parser p , int id ) { super ( p , id ) ; } public Object jjtAccept ( ParserVisitor visitor , Object data ) { return visitor . visit ( this , data ) ; } public Object value ( InternalContextAdapter context ) throws MethodInvocationException { int size = jjtGetNumChildren ( ) ; Map objectMap = new HashMap ( ) ; for ( int i = 0 ; i < size ; i += 2 ) { SimpleNode keyNode = ( SimpleNode ) jjtGetChild ( i ) ; SimpleNode valueNode = ( SimpleNode ) jjtGetChild ( i + 1 ) ; Object key = ( keyNode == null ? null : keyNode . value ( context ) ) ; Object value = ( valueNode == null ? null : valueNode . value ( context ) ) ; objectMap . put ( key , value ) ; } return objectMap ; } } 	0	['4', '2', '0', '8', '12', '6', '4', '6', '4', '2', '67', '0', '0', '0.9375', '0.416666667', '1', '1', '15.75', '1', '0.5', '0']
package org . apache . velocity . runtime . parser . node ; import org . apache . velocity . context . InternalContextAdapter ; import org . apache . velocity . exception . MethodInvocationException ; import org . apache . velocity . runtime . parser . Parser ; public class ASTNotNode extends SimpleNode { public ASTNotNode ( int id ) { super ( id ) ; } public ASTNotNode ( Parser p , int id ) { super ( p , id ) ; } public Object jjtAccept ( ParserVisitor visitor , Object data ) { return visitor . visit ( this , data ) ; } public boolean evaluate ( InternalContextAdapter context ) throws MethodInvocationException { if ( jjtGetChild ( 0 ) . evaluate ( context ) ) return false ; else return true ; } public Object value ( InternalContextAdapter context ) throws MethodInvocationException { return ( jjtGetChild ( 0 ) . evaluate ( context ) ? Boolean . FALSE : Boolean . TRUE ) ; } } 	0	['5', '2', '0', '9', '10', '10', '5', '6', '5', '2', '39', '0', '0', '0.909090909', '0.4', '1', '2', '6.8', '1', '0.6', '0']
package org . apache . velocity . anakia ; import com . werken . xpath . XPath ; import java . util . Map ; import java . util . WeakHashMap ; class XPathCache { private static final Map XPATH_CACHE = new WeakHashMap ( ) ; private XPathCache ( ) { } static XPath getXPath ( String xpathString ) { XPath xpath = null ; synchronized ( XPATH_CACHE ) { xpath = ( XPath ) XPATH_CACHE . get ( xpathString ) ; if ( xpath == null ) { xpath = new XPath ( xpathString ) ; XPATH_CACHE . put ( xpathString , xpath ) ; } } return xpath ; } } 	0	['3', '1', '0', '4', '8', '1', '3', '1', '0', '0.5', '45', '1', '0', '0', '0.5', '0', '0', '13.66666667', '2', '0.6667', '0']
package org . apache . velocity . runtime . parser . node ; import java . lang . reflect . InvocationTargetException ; import org . apache . commons . lang . StringUtils ; import org . apache . velocity . exception . VelocityException ; import org . apache . velocity . runtime . RuntimeLogger ; import org . apache . velocity . runtime . log . Log ; import org . apache . velocity . runtime . log . RuntimeLoggerLog ; import org . apache . velocity . util . introspection . Introspector ; public class PropertyExecutor extends AbstractExecutor { private final Introspector introspector ; public PropertyExecutor ( final Log log , final Introspector introspector , final Class clazz , final String property ) { this . log = log ; this . introspector = introspector ; if ( StringUtils . isNotEmpty ( property ) ) { discover ( clazz , property ) ; } } public PropertyExecutor ( final RuntimeLogger r , final Introspector introspector , final Class clazz , final String property ) { this ( new RuntimeLoggerLog ( r ) , introspector , clazz , property ) ; } protected Introspector getIntrospector ( ) { return this . introspector ; } protected void discover ( final Class clazz , final String property ) { try { Object [ ] params = { } ; StringBuffer sb = new StringBuffer ( "get" ) ; sb . append ( property ) ; setMethod ( introspector . getMethod ( clazz , sb . toString ( ) , params ) ) ; if ( ! isAlive ( ) ) { char c = sb . charAt ( 3 ) ; if ( Character . isLowerCase ( c ) ) { sb . setCharAt ( 3 , Character . toUpperCase ( c ) ) ; } else { sb . setCharAt ( 3 , Character . toLowerCase ( c ) ) ; } setMethod ( introspector . getMethod ( clazz , sb . toString ( ) , params ) ) ; } } catch ( RuntimeException e ) { throw e ; } catch ( Exception e ) { String msg = "Exception while looking for property getter for '" + property ; log . error ( msg , e ) ; throw new VelocityException ( msg , e ) ; } } public Object execute ( Object o ) throws IllegalAccessException , InvocationTargetException { return isAlive ( ) ? getMethod ( ) . invoke ( o , ( ( Object [ ] ) null ) ) : null ; } } 	0	['5', '2', '1', '9', '24', '4', '2', '7', '3', '0.25', '124', '1', '1', '0.571428571', '0.457142857', '0', '0', '23.6', '2', '0.8', '0']
package org . apache . velocity . runtime . parser . node ; import org . apache . velocity . exception . VelocityException ; import org . apache . velocity . runtime . RuntimeLogger ; import org . apache . velocity . runtime . log . Log ; import org . apache . velocity . runtime . log . RuntimeLoggerLog ; import org . apache . velocity . util . introspection . Introspector ; public class BooleanPropertyExecutor extends PropertyExecutor { public BooleanPropertyExecutor ( final Log log , final Introspector introspector , final Class clazz , final String property ) { super ( log , introspector , clazz , property ) ; } public BooleanPropertyExecutor ( final RuntimeLogger rlog , final Introspector introspector , final Class clazz , final String property ) { super ( new RuntimeLoggerLog ( rlog ) , introspector , clazz , property ) ; } protected void discover ( final Class clazz , final String property ) { try { Object [ ] params = { } ; StringBuffer sb = new StringBuffer ( "is" ) ; sb . append ( property ) ; setMethod ( getIntrospector ( ) . getMethod ( clazz , sb . toString ( ) , params ) ) ; if ( ! isAlive ( ) ) { char c = sb . charAt ( 2 ) ; if ( Character . isLowerCase ( c ) ) { sb . setCharAt ( 2 , Character . toUpperCase ( c ) ) ; } else { sb . setCharAt ( 2 , Character . toLowerCase ( c ) ) ; } setMethod ( getIntrospector ( ) . getMethod ( clazz , sb . toString ( ) , params ) ) ; } if ( isAlive ( ) ) { if ( getMethod ( ) . getReturnType ( ) != Boolean . TYPE && getMethod ( ) . getReturnType ( ) != Boolean . class ) { setMethod ( null ) ; } } } catch ( RuntimeException e ) { throw e ; } catch ( Exception e ) { String msg = "Exception while looking for boolean property getter for '" + property ; log . error ( msg , e ) ; throw new VelocityException ( msg , e ) ; } } } 	0	['4', '3', '0', '7', '26', '6', '1', '6', '2', '1', '132', '0', '0', '0.777777778', '0.583333333', '2', '2', '31.75', '4', '1.25', '0']
package org . apache . velocity . util . introspection ; public interface IntrospectorCache { void clear ( ) ; ClassMap get ( Class c ) ; ClassMap put ( Class c ) ; } 	0	['3', '1', '0', '3', '3', '3', '2', '1', '3', '2', '3', '0', '0', '0', '0.833333333', '0', '0', '0', '1', '1', '0']
package org . apache . velocity . exception ; public class ResourceNotFoundException extends VelocityException { private static final long serialVersionUID = - 4287732191458420347L ; public ResourceNotFoundException ( final String exceptionMessage ) { super ( exceptionMessage ) ; } public ResourceNotFoundException ( final String exceptionMessage , final Throwable t ) { super ( exceptionMessage , t ) ; } public ResourceNotFoundException ( final Throwable t ) { super ( t ) ; } } 	0	['3', '5', '0', '38', '6', '3', '37', '1', '3', '1.5', '17', '1', '0', '1', '0.777777778', '0', '0', '4.333333333', '0', '0', '0']
package org . apache . velocity . runtime ; import org . apache . velocity . runtime . parser . Parser ; import org . apache . velocity . util . SimplePool ; import org . apache . velocity . runtime . parser . CharStream ; public class ParserPoolImpl implements ParserPool { SimplePool pool = null ; int max = RuntimeConstants . NUMBER_OF_PARSERS ; public void initialize ( RuntimeServices rsvc ) { max = rsvc . getInt ( RuntimeConstants . PARSER_POOL_SIZE , RuntimeConstants . NUMBER_OF_PARSERS ) ; pool = new SimplePool ( max ) ; for ( int i = 0 ; i < max ; i ++ ) { pool . put ( rsvc . createNewParser ( ) ) ; } if ( rsvc . getLog ( ) . isDebugEnabled ( ) ) { rsvc . getLog ( ) . debug ( "Created '" + max + "' parsers." ) ; } } public Parser get ( ) { return ( Parser ) pool . get ( ) ; } public void put ( Parser parser ) { parser . ReInit ( ( CharStream ) null ) ; pool . put ( parser ) ; } } 	0	['4', '1', '0', '6', '18', '0', '0', '6', '4', '0.333333333', '74', '0', '1', '0', '0.5', '0', '0', '17', '3', '1.25', '0']
package org . apache . velocity . util . introspection ; public class IntrospectionCacheData { public Object thingy ; public Class contextData ; } 	0	['1', '1', '0', '6', '2', '0', '6', '0', '1', '2', '6', '0', '0', '0', '1', '0', '0', '3', '0', '0', '0']
package org . apache . velocity . runtime . directive ; import org . apache . velocity . context . InternalContextAdapter ; import org . apache . velocity . runtime . RuntimeConstants ; import org . apache . velocity . runtime . resource . Resource ; public abstract class InputBase extends Directive { protected String getInputEncoding ( InternalContextAdapter context ) { Resource current = context . getCurrentResource ( ) ; if ( current != null ) { return current . getEncoding ( ) ; } else { return ( String ) rsvc . getProperty ( RuntimeConstants . INPUT_ENCODING ) ; } } } 	0	['2', '2', '2', '6', '6', '1', '2', '4', '1', '2', '19', '0', '0', '0.9', '0.75', '0', '0', '8.5', '2', '1', '0']
package org . apache . velocity . io ; import java . io . IOException ; import java . io . InputStream ; import java . io . PushbackInputStream ; import org . apache . velocity . util . ExceptionUtils ; public class UnicodeInputStream extends InputStream { public static final UnicodeBOM UTF8_BOM = new UnicodeBOM ( "UTF-8" , new byte [ ] { ( byte ) 0xef , ( byte ) 0xbb , ( byte ) 0xbf } ) ; public static final UnicodeBOM UTF16LE_BOM = new UnicodeBOM ( "UTF-16LE" , new byte [ ] { ( byte ) 0xff , ( byte ) 0xfe } ) ; public static final UnicodeBOM UTF16BE_BOM = new UnicodeBOM ( "UTF-16BE" , new byte [ ] { ( byte ) 0xfe , ( byte ) 0xff } ) ; public static final UnicodeBOM UTF32LE_BOM = new UnicodeBOM ( "UTF-32LE" , new byte [ ] { ( byte ) 0xff , ( byte ) 0xfe , ( byte ) 0x00 , ( byte ) 0x00 } ) ; public static final UnicodeBOM UTF32BE_BOM = new UnicodeBOM ( "UTF-32BE" , new byte [ ] { ( byte ) 0x00 , ( byte ) 0x00 , ( byte ) 0xfe , ( byte ) 0xff } ) ; private static final int MAX_BOM_SIZE = 4 ; private byte [ ] buf = new byte [ MAX_BOM_SIZE ] ; private int pos = 0 ; private final String encoding ; private final boolean skipBOM ; private final PushbackInputStream inputStream ; public UnicodeInputStream ( final InputStream inputStream ) throws IllegalStateException , IOException { this ( inputStream , true ) ; } public UnicodeInputStream ( final InputStream inputStream , boolean skipBOM ) throws IllegalStateException , IOException { super ( ) ; this . skipBOM = skipBOM ; this . inputStream = new PushbackInputStream ( inputStream , MAX_BOM_SIZE ) ; try { this . encoding = readEncoding ( ) ; } catch ( IOException ioe ) { IllegalStateException ex = new IllegalStateException ( "Could not read BOM from Stream" ) ; ExceptionUtils . setCause ( ex , ioe ) ; throw ex ; } } public boolean isSkipBOM ( ) { return skipBOM ; } public String getEncodingFromStream ( ) { return encoding ; } protected String readEncoding ( ) throws IOException { pos = 0 ; UnicodeBOM encoding = null ; if ( readByte ( ) ) { switch ( buf [ 0 ] ) { case ( byte ) 0x00 : encoding = match ( UTF32BE_BOM , null ) ; break ; case ( byte ) 0xef : encoding = match ( UTF8_BOM , null ) ; break ; case ( byte ) 0xfe : encoding = match ( UTF16BE_BOM , null ) ; break ; case ( byte ) 0xff : encoding = match ( UTF16LE_BOM , null ) ; if ( encoding != null ) { encoding = match ( UTF32LE_BOM , encoding ) ; } break ; default : encoding = null ; break ; } } pushback ( encoding ) ; return ( encoding != null ) ? encoding . getEncoding ( ) : null ; } private final UnicodeBOM match ( final UnicodeBOM matchEncoding , final UnicodeBOM noMatchEncoding ) throws IOException { byte [ ] bom = matchEncoding . getBytes ( ) ; for ( int i = 0 ; i < bom . length ; i ++ ) { if ( pos <= i ) { if ( ! readByte ( ) ) { return noMatchEncoding ; } } if ( bom [ i ] != buf [ i ] ) { return noMatchEncoding ; } } return matchEncoding ; } private final boolean readByte ( ) throws IOException { int res = inputStream . read ( ) ; if ( res == - 1 ) { return false ; } if ( pos >= buf . length ) { throw new IOException ( "BOM read error" ) ; } buf [ pos ++ ] = ( byte ) res ; return true ; } private final void pushback ( final UnicodeBOM matchBOM ) throws IOException { int count = pos ; int start = 0 ; if ( matchBOM != null && skipBOM ) { start = matchBOM . getBytes ( ) . length ; count = ( pos - start ) ; if ( count < 0 ) { throw new IllegalStateException ( "Match has more bytes than available!" ) ; } } inputStream . unread ( buf , start , count ) ; } public void close ( ) throws IOException { inputStream . close ( ) ; } public int available ( ) throws IOException { return inputStream . available ( ) ; } public void mark ( final int readlimit ) { inputStream . mark ( readlimit ) ; } public boolean markSupported ( ) { return inputStream . markSupported ( ) ; } public int read ( ) throws IOException { return inputStream . read ( ) ; } public int read ( final byte [ ] b ) throws IOException { return inputStream . read ( b ) ; } public int read ( final byte [ ] b , final int off , final int len ) throws IOException { return inputStream . read ( b , off , len ) ; } public void reset ( ) throws IOException { inputStream . reset ( ) ; } public long skip ( final long n ) throws IOException { return inputStream . skip ( n ) ; } static final class UnicodeBOM { private final String encoding ; private final byte [ ] bytes ; private UnicodeBOM ( final String encoding , final byte [ ] bytes ) { this . encoding = encoding ; this . bytes = bytes ; } String getEncoding ( ) { return encoding ; } byte [ ] getBytes ( ) { return bytes ; } } } 	0	['18', '2', '0', '4', '36', '0', '1', '3', '13', '0.79144385', '375', '0.545454545', '5', '0.375', '0.226890756', '1', '2', '19.22222222', '1', '0.8333', '0']
package org . apache . velocity . runtime . parser . node ; import org . apache . velocity . context . InternalContextAdapter ; import org . apache . velocity . runtime . parser . Parser ; public class ASTElseStatement extends SimpleNode { public ASTElseStatement ( int id ) { super ( id ) ; } public ASTElseStatement ( Parser p , int id ) { super ( p , id ) ; } public Object jjtAccept ( ParserVisitor visitor , Object data ) { return visitor . visit ( this , data ) ; } public boolean evaluate ( InternalContextAdapter context ) { return true ; } } 	0	['4', '2', '0', '6', '7', '6', '4', '4', '4', '2', '20', '0', '0', '0.9375', '0.416666667', '0', '0', '4', '1', '0.5', '0']
package org . apache . velocity . runtime . parser . node ; import org . apache . velocity . context . InternalContextAdapter ; import org . apache . velocity . runtime . parser . Parser ; public class ASTTrue extends SimpleNode { private static Boolean value = Boolean . TRUE ; public ASTTrue ( int id ) { super ( id ) ; } public ASTTrue ( Parser p , int id ) { super ( p , id ) ; } public Object jjtAccept ( ParserVisitor visitor , Object data ) { return visitor . visit ( this , data ) ; } public boolean evaluate ( InternalContextAdapter context ) { return true ; } public Object value ( InternalContextAdapter context ) { return value ; } } 	0	['6', '2', '0', '6', '9', '13', '4', '4', '5', '0.8', '28', '1', '0', '0.909090909', '0.4', '0', '0', '3.5', '1', '0.5', '0']
package org . apache . velocity . anakia ; import java . io . IOException ; import java . io . StringWriter ; import org . jdom . Element ; import org . jdom . output . XMLOutputter ; import org . jdom . output . Format ; public class OutputWrapper extends XMLOutputter { public OutputWrapper ( ) { } public OutputWrapper ( Format f ) { super ( f ) ; } public String outputString ( Element element , boolean strip ) { StringWriter buff = new StringWriter ( ) ; try { outputElementContent ( element , buff ) ; } catch ( IOException e ) { } return buff . toString ( ) ; } } 	0	['3', '2', '0', '4', '8', '3', '1', '3', '3', '2', '23', '0', '0', '0.984615385', '0.5', '1', '1', '6.666666667', '1', '0.3333', '0']
package org . apache . velocity . runtime . parser . node ; import java . io . IOException ; import java . io . Writer ; import org . apache . velocity . app . event . EventHandlerUtil ; import org . apache . velocity . context . InternalContextAdapter ; import org . apache . velocity . exception . MethodInvocationException ; import org . apache . velocity . exception . TemplateInitException ; import org . apache . velocity . runtime . RuntimeConstants ; import org . apache . velocity . runtime . log . Log ; import org . apache . velocity . runtime . parser . Parser ; import org . apache . velocity . util . introspection . Info ; public class ASTSetDirective extends SimpleNode { private String leftReference = "" ; private Node right = null ; private ASTReference left = null ; boolean logOnNull = false ; private boolean allowNull = false ; private boolean isInitialized ; protected Info uberInfo ; protected boolean strictRef = false ; public ASTSetDirective ( int id ) { super ( id ) ; } public ASTSetDirective ( Parser p , int id ) { super ( p , id ) ; } public Object jjtAccept ( ParserVisitor visitor , Object data ) { return visitor . visit ( this , data ) ; } public synchronized Object init ( InternalContextAdapter context , Object data ) throws TemplateInitException { if ( ! isInitialized ) { super . init ( context , data ) ; uberInfo = new Info ( getTemplateName ( ) , getLine ( ) , getColumn ( ) ) ; right = getRightHandSide ( ) ; left = getLeftHandSide ( ) ; logOnNull = rsvc . getBoolean ( RuntimeConstants . RUNTIME_LOG_REFERENCE_LOG_INVALID , true ) ; allowNull = rsvc . getBoolean ( RuntimeConstants . SET_NULL_ALLOWED , false ) ; strictRef = rsvc . getBoolean ( RuntimeConstants . RUNTIME_REFERENCES_STRICT , false ) ; if ( strictRef ) allowNull = true ; leftReference = left . getFirstToken ( ) . image . substring ( 1 ) ; isInitialized = true ; } return data ; } public boolean render ( InternalContextAdapter context , Writer writer ) throws IOException , MethodInvocationException { Object value = right . value ( context ) ; if ( ! allowNull ) { if ( value == null ) { if ( logOnNull ) { boolean doit = EventHandlerUtil . shouldLogOnNullSet ( rsvc , context , left . literal ( ) , right . literal ( ) ) ; if ( doit && rsvc . getLog ( ) . isDebugEnabled ( ) ) { rsvc . getLog ( ) . debug ( "RHS of #set statement is null. Context will not be modified. " + Log . formatFileString ( this ) ) ; } } String rightReference = null ; if ( right instanceof ASTExpression ) { rightReference = ( ( ASTExpression ) right ) . getLastToken ( ) . image ; } EventHandlerUtil . invalidSetMethod ( rsvc , context , leftReference , rightReference , uberInfo ) ; return false ; } } if ( value == null && ! strictRef ) { String rightReference = null ; if ( right instanceof ASTExpression ) { rightReference = ( ( ASTExpression ) right ) . getLastToken ( ) . image ; } EventHandlerUtil . invalidSetMethod ( rsvc , context , leftReference , rightReference , uberInfo ) ; if ( left . jjtGetNumChildren ( ) == 0 ) { context . remove ( leftReference ) ; } else { left . setValue ( context , null ) ; } return false ; } else { if ( left . jjtGetNumChildren ( ) == 0 ) { context . put ( leftReference , value ) ; } else { left . setValue ( context , value ) ; } } return true ; } private ASTReference getLeftHandSide ( ) { return ( ASTReference ) jjtGetChild ( 0 ) ; } private Node getRightHandSide ( ) { return jjtGetChild ( 1 ) ; } } 	0	['7', '2', '0', '16', '36', '9', '4', '14', '5', '0.604166667', '271', '0.875', '3', '0.857142857', '0.326530612', '1', '1', '36.57142857', '1', '0.7143', '0']
package org . apache . velocity . runtime . parser . node ; import org . apache . velocity . context . InternalContextAdapter ; import org . apache . velocity . exception . MathException ; import org . apache . velocity . exception . MethodInvocationException ; import org . apache . velocity . exception . TemplateInitException ; import org . apache . velocity . runtime . RuntimeConstants ; import org . apache . velocity . runtime . parser . Parser ; import org . apache . velocity . util . TemplateNumber ; public abstract class ASTMathNode extends SimpleNode { protected boolean strictMode = false ; public ASTMathNode ( int id ) { super ( id ) ; } public ASTMathNode ( Parser p , int id ) { super ( p , id ) ; } public Object init ( InternalContextAdapter context , Object data ) throws TemplateInitException { super . init ( context , data ) ; strictMode = rsvc . getBoolean ( RuntimeConstants . STRICT_MATH , false ) ; return data ; } public Object jjtAccept ( ParserVisitor visitor , Object data ) { return visitor . visit ( this , data ) ; } public Object value ( InternalContextAdapter context ) throws MethodInvocationException { Object left = jjtGetChild ( 0 ) . value ( context ) ; Object right = jjtGetChild ( 1 ) . value ( context ) ; Object special = handleSpecial ( left , right , context ) ; if ( special != null ) { return special ; } if ( left instanceof TemplateNumber ) { left = ( ( TemplateNumber ) left ) . getAsNumber ( ) ; } if ( right instanceof TemplateNumber ) { right = ( ( TemplateNumber ) right ) . getAsNumber ( ) ; } if ( ! ( left instanceof Number ) || ! ( right instanceof Number ) ) { boolean wrongright = ( left instanceof Number ) ; boolean wrongtype = wrongright ? right != null : left != null ; String msg = ( wrongright ? "Right" : "Left" ) + " side of math operation (" + jjtGetChild ( wrongright ? 1 : 0 ) . literal ( ) + ") " + ( wrongtype ? "is not a Number. " : "has a null value. " ) + getLocation ( context ) ; if ( strictMode ) { log . error ( msg ) ; throw new MathException ( msg ) ; } else { log . debug ( msg ) ; return null ; } } return perform ( ( Number ) left , ( Number ) right , context ) ; } protected Object handleSpecial ( Object left , Object right , InternalContextAdapter context ) { return null ; } public abstract Number perform ( Number left , Number right , InternalContextAdapter context ) ; } 	0	['7', '2', '5', '16', '23', '9', '5', '11', '6', '0.5', '163', '1', '0', '0.857142857', '0.387755102', '1', '1', '22.14285714', '1', '0.7143', '0']
package org . apache . velocity . app . event ; public interface EventHandler { } 	0	['0', '1', '0', '16', '0', '0', '16', '0', '0', '2', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0']
package org . apache . velocity . runtime ; import org . apache . velocity . runtime . parser . Parser ; public interface ParserPool { void initialize ( RuntimeServices svc ) ; Parser get ( ) ; void put ( Parser parser ) ; } 	0	['3', '1', '0', '4', '3', '3', '2', '2', '3', '2', '3', '0', '0', '0', '0.555555556', '0', '0', '0', '1', '1', '0']
package org . apache . velocity . runtime . parser ; public final class VelocityCharStream implements CharStream { public static final boolean staticFlag = false ; int bufsize ; private int nextBufExpand ; int available ; int tokenBegin ; public int bufpos = - 1 ; private int bufline [ ] ; private int bufcolumn [ ] ; private int column = 0 ; private int line = 1 ; private boolean prevCharIsCR = false ; private boolean prevCharIsLF = false ; private java . io . Reader inputStream ; private char [ ] buffer ; private int maxNextCharInd = 0 ; private int inBuf = 0 ; private final void ExpandBuff ( boolean wrapAround ) { char [ ] newbuffer = new char [ bufsize + nextBufExpand ] ; int newbufline [ ] = new int [ bufsize + nextBufExpand ] ; int newbufcolumn [ ] = new int [ bufsize + nextBufExpand ] ; try { if ( wrapAround ) { System . arraycopy ( buffer , tokenBegin , newbuffer , 0 , bufsize - tokenBegin ) ; System . arraycopy ( buffer , 0 , newbuffer , bufsize - tokenBegin , bufpos ) ; buffer = newbuffer ; System . arraycopy ( bufline , tokenBegin , newbufline , 0 , bufsize - tokenBegin ) ; System . arraycopy ( bufline , 0 , newbufline , bufsize - tokenBegin , bufpos ) ; bufline = newbufline ; System . arraycopy ( bufcolumn , tokenBegin , newbufcolumn , 0 , bufsize - tokenBegin ) ; System . arraycopy ( bufcolumn , 0 , newbufcolumn , bufsize - tokenBegin , bufpos ) ; bufcolumn = newbufcolumn ; maxNextCharInd = ( bufpos += ( bufsize - tokenBegin ) ) ; } else { System . arraycopy ( buffer , tokenBegin , newbuffer , 0 , bufsize - tokenBegin ) ; buffer = newbuffer ; System . arraycopy ( bufline , tokenBegin , newbufline , 0 , bufsize - tokenBegin ) ; bufline = newbufline ; System . arraycopy ( bufcolumn , tokenBegin , newbufcolumn , 0 , bufsize - tokenBegin ) ; bufcolumn = newbufcolumn ; maxNextCharInd = ( bufpos -= tokenBegin ) ; } } catch ( Throwable t ) { throw new Error ( t . getMessage ( ) ) ; } bufsize += nextBufExpand ; nextBufExpand = bufsize ; available = bufsize ; tokenBegin = 0 ; } private final void FillBuff ( ) throws java . io . IOException { if ( maxNextCharInd == available ) { if ( available == bufsize ) { if ( tokenBegin > nextBufExpand ) { bufpos = maxNextCharInd = 0 ; available = tokenBegin ; } else if ( tokenBegin < 0 ) { bufpos = maxNextCharInd = 0 ; } else { ExpandBuff ( false ) ; } } else if ( available > tokenBegin ) { available = bufsize ; } else if ( ( tokenBegin - available ) < nextBufExpand ) { ExpandBuff ( true ) ; } else { available = tokenBegin ; } } int i ; try { if ( ( i = inputStream . read ( buffer , maxNextCharInd , available - maxNextCharInd ) ) == - 1 ) { inputStream . close ( ) ; throw new java . io . IOException ( ) ; } else { maxNextCharInd += i ; } return ; } catch ( java . io . IOException e ) { -- bufpos ; backup ( 0 ) ; if ( tokenBegin == - 1 ) { tokenBegin = bufpos ; } throw e ; } } public final char BeginToken ( ) throws java . io . IOException { tokenBegin = - 1 ; char c = readChar ( ) ; tokenBegin = bufpos ; return c ; } private final void UpdateLineColumn ( char c ) { column ++ ; if ( prevCharIsLF ) { prevCharIsLF = false ; line += ( column = 1 ) ; } else if ( prevCharIsCR ) { prevCharIsCR = false ; if ( c == '\n' ) { prevCharIsLF = true ; } else { line += ( column = 1 ) ; } } switch ( c ) { case '\r' : prevCharIsCR = true ; break ; case '\n' : prevCharIsLF = true ; break ; case '\t' : column -- ; column += ( 8 - ( column & 07 ) ) ; break ; default : break ; } bufline [ bufpos ] = line ; bufcolumn [ bufpos ] = column ; } public final char readChar ( ) throws java . io . IOException { if ( inBuf > 0 ) { -- inBuf ; return buffer [ ( bufpos == bufsize - 1 ) ? ( bufpos = 0 ) : ++ bufpos ] ; } if ( ++ bufpos >= maxNextCharInd ) { FillBuff ( ) ; } char c = buffer [ bufpos ] ; UpdateLineColumn ( c ) ; return ( c ) ; } public final int getColumn ( ) { return bufcolumn [ bufpos ] ; } public final int getLine ( ) { return bufline [ bufpos ] ; } public final int getEndColumn ( ) { return bufcolumn [ bufpos ] ; } public final int getEndLine ( ) { return bufline [ bufpos ] ; } public final int getBeginColumn ( ) { return bufcolumn [ tokenBegin ] ; } public final int getBeginLine ( ) { return bufline [ tokenBegin ] ; } public final void backup ( int amount ) { inBuf += amount ; if ( ( bufpos -= amount ) < 0 ) bufpos += bufsize ; } public VelocityCharStream ( java . io . Reader dstream , int startline , int startcolumn , int buffersize ) { inputStream = dstream ; line = startline ; column = startcolumn - 1 ; available = bufsize = nextBufExpand = buffersize ; buffer = new char [ buffersize ] ; bufline = new int [ buffersize ] ; bufcolumn = new int [ buffersize ] ; } public VelocityCharStream ( java . io . Reader dstream , int startline , int startcolumn ) { this ( dstream , startline , startcolumn , 4096 ) ; } public void ReInit ( java . io . Reader dstream , int startline , int startcolumn , int buffersize ) { inputStream = dstream ; line = startline ; column = startcolumn - 1 ; if ( buffer == null || buffersize != buffer . length ) { available = bufsize = nextBufExpand = buffersize ; buffer = new char [ buffersize ] ; bufline = new int [ buffersize ] ; bufcolumn = new int [ buffersize ] ; } prevCharIsLF = prevCharIsCR = false ; tokenBegin = inBuf = maxNextCharInd = 0 ; bufpos = - 1 ; } public void ReInit ( java . io . Reader dstream , int startline , int startcolumn ) { ReInit ( dstream , startline , startcolumn , 4096 ) ; } public VelocityCharStream ( java . io . InputStream dstream , int startline , int startcolumn , int buffersize ) { this ( new java . io . InputStreamReader ( dstream ) , startline , startcolumn , buffersize ) ; } public VelocityCharStream ( java . io . InputStream dstream , int startline , int startcolumn ) { this ( dstream , startline , startcolumn , 4096 ) ; } public void ReInit ( java . io . InputStream dstream , int startline , int startcolumn , int buffersize ) { ReInit ( new java . io . InputStreamReader ( dstream ) , startline , startcolumn , buffersize ) ; } public void ReInit ( java . io . InputStream dstream , int startline , int startcolumn ) { ReInit ( dstream , startline , startcolumn , 4096 ) ; } public final String GetImage ( ) { if ( bufpos >= tokenBegin ) { return new String ( buffer , tokenBegin , bufpos - tokenBegin + 1 ) ; } else { return new String ( buffer , tokenBegin , bufsize - tokenBegin ) + new String ( buffer , 0 , bufpos + 1 ) ; } } public final char [ ] GetSuffix ( int len ) { char [ ] ret = new char [ len ] ; if ( ( bufpos + 1 ) >= len ) { System . arraycopy ( buffer , bufpos - len + 1 , ret , 0 , len ) ; } else { System . arraycopy ( buffer , bufsize - ( len - bufpos - 1 ) , ret , 0 , len - bufpos - 1 ) ; System . arraycopy ( buffer , 0 , ret , len - bufpos - 1 , bufpos + 1 ) ; } return ret ; } public void Done ( ) { buffer = null ; bufline = null ; bufcolumn = null ; } public void adjustBeginLineColumn ( int newLine , int newCol ) { int start = tokenBegin ; int len ; if ( bufpos >= tokenBegin ) { len = bufpos - tokenBegin + inBuf + 1 ; } else { len = bufsize - tokenBegin + bufpos + 1 + inBuf ; } int i = 0 , j = 0 , k = 0 ; int nextColDiff = 0 , columnDiff = 0 ; while ( i < len && bufline [ j = start % bufsize ] == bufline [ k = ++ start % bufsize ] ) { bufline [ j ] = newLine ; nextColDiff = columnDiff + bufcolumn [ k ] - bufcolumn [ j ] ; bufcolumn [ j ] = newCol + columnDiff ; columnDiff = nextColDiff ; i ++ ; } if ( i < len ) { bufline [ j ] = newLine ++ ; bufcolumn [ j ] = newCol + columnDiff ; while ( i ++ < len ) { if ( bufline [ j = start % bufsize ] != bufline [ ++ start % bufsize ] ) bufline [ j ] = newLine ++ ; else bufline [ j ] = newLine ; } } line = bufline [ j ] ; column = bufcolumn [ j ] ; } } 	0	['24', '1', '0', '2', '36', '0', '1', '1', '21', '0.508152174', '1008', '0.6875', '0', '0', '0.3125', '0', '0', '40.33333333', '7', '1.5', '0']
package org . apache . velocity . runtime . parser . node ; import org . apache . velocity . runtime . parser . Parser ; public class ASTVariable extends SimpleNode { public ASTVariable ( int id ) { super ( id ) ; } public ASTVariable ( Parser p , int id ) { super ( p , id ) ; } public Object jjtAccept ( ParserVisitor visitor , Object data ) { return visitor . visit ( this , data ) ; } } 	0	['3', '2', '0', '3', '6', '3', '0', '3', '3', '2', '17', '0', '0', '0.967741935', '0.533333333', '0', '0', '4.666666667', '1', '0.3333', '0']
package org . apache . velocity . runtime . resource ; import java . util . Collections ; import java . util . HashMap ; import java . util . Hashtable ; import java . util . Map ; import java . util . Iterator ; import org . apache . commons . collections . map . LRUMap ; import org . apache . velocity . runtime . RuntimeConstants ; import org . apache . velocity . runtime . RuntimeServices ; import org . apache . velocity . util . MapFactory ; public class ResourceCacheImpl implements ResourceCache { protected Map cache = MapFactory . create ( 512 , 0.5f , 30 , false ) ; protected RuntimeServices rsvc = null ; public void initialize ( RuntimeServices rs ) { rsvc = rs ; int maxSize = rsvc . getInt ( RuntimeConstants . RESOURCE_MANAGER_DEFAULTCACHE_SIZE , 89 ) ; if ( maxSize > 0 ) { Map lruCache = Collections . synchronizedMap ( new LRUMap ( maxSize ) ) ; lruCache . putAll ( cache ) ; cache = lruCache ; } rsvc . getLog ( ) . debug ( "ResourceCache: initialized (" + this . getClass ( ) + ") with " + cache . getClass ( ) + " cache map." ) ; } public Resource get ( Object key ) { return ( Resource ) cache . get ( key ) ; } public Resource put ( Object key , Resource value ) { return ( Resource ) cache . put ( key , value ) ; } public Resource remove ( Object key ) { return ( Resource ) cache . remove ( key ) ; } public Iterator enumerateKeys ( ) { return cache . keySet ( ) . iterator ( ) ; } } 	0	['6', '1', '0', '7', '24', '0', '1', '6', '6', '0.4', '91', '1', '1', '0', '0.458333333', '0', '0', '13.83333333', '2', '1', '0']
package org . apache . velocity . util ; import java . util . Iterator ; import java . util . NoSuchElementException ; import java . lang . reflect . Array ; public class ArrayIterator implements Iterator { private Object array ; private int pos ; private int size ; public ArrayIterator ( Object array ) { if ( ! array . getClass ( ) . isArray ( ) ) { throw new IllegalArgumentException ( "Programmer error : internal ArrayIterator invoked w/o array" ) ; } this . array = array ; pos = 0 ; size = Array . getLength ( this . array ) ; } public Object next ( ) { if ( pos < size ) return Array . get ( array , pos ++ ) ; throw new NoSuchElementException ( "No more elements: " + pos + " / " + size ) ; } public boolean hasNext ( ) { return ( pos < size ) ; } public void remove ( ) { throw new UnsupportedOperationException ( ) ; } } 	0	['4', '1', '0', '1', '16', '0', '1', '0', '4', '0.444444444', '77', '1', '0', '0', '0.625', '0', '0', '17.5', '2', '1.25', '0']
package org . apache . velocity . anakia ; import java . io . BufferedWriter ; import java . io . File ; import java . io . FileOutputStream ; import java . io . IOException ; import java . io . OutputStreamWriter ; import java . io . Writer ; import java . util . Iterator ; import java . util . LinkedList ; import java . util . List ; import java . util . StringTokenizer ; import org . apache . commons . collections . ExtendedProperties ; import org . apache . tools . ant . BuildException ; import org . apache . tools . ant . DirectoryScanner ; import org . apache . tools . ant . Project ; import org . apache . tools . ant . taskdefs . MatchingTask ; import org . apache . velocity . Template ; import org . apache . velocity . VelocityContext ; import org . apache . velocity . app . VelocityEngine ; import org . apache . velocity . runtime . RuntimeConstants ; import org . apache . velocity . util . StringUtils ; import org . jdom . Document ; import org . jdom . JDOMException ; import org . jdom . input . SAXBuilder ; import org . jdom . output . Format ; import org . xml . sax . SAXParseException ; public class AnakiaTask extends MatchingTask { SAXBuilder builder ; private File destDir = null ; File baseDir = null ; private String style = null ; private long styleSheetLastModified = 0 ; private String projectAttribute = null ; private File projectFile = null ; private long projectFileLastModified = 0 ; private boolean lastModifiedCheck = true ; private String extension = ".html" ; private String templatePath = null ; private File velocityPropertiesFile = null ; private VelocityEngine ve = new VelocityEngine ( ) ; private List contexts = new LinkedList ( ) ; public AnakiaTask ( ) { builder = new SAXBuilder ( ) ; builder . setFactory ( new AnakiaJDOMFactory ( ) ) ; } public void setBasedir ( File dir ) { baseDir = dir ; } public void setDestdir ( File dir ) { destDir = dir ; } public void setExtension ( String extension ) { this . extension = extension ; } public void setStyle ( String style ) { this . style = style ; } public void setProjectFile ( String projectAttribute ) { this . projectAttribute = projectAttribute ; } public void setTemplatePath ( File templatePath ) { try { this . templatePath = templatePath . getCanonicalPath ( ) ; } catch ( java . io . IOException ioe ) { throw new BuildException ( ioe ) ; } } public void setVelocityPropertiesFile ( File velocityPropertiesFile ) { this . velocityPropertiesFile = velocityPropertiesFile ; } public void setLastModifiedCheck ( String lastmod ) { if ( lastmod . equalsIgnoreCase ( "false" ) || lastmod . equalsIgnoreCase ( "no" ) || lastmod . equalsIgnoreCase ( "off" ) ) { this . lastModifiedCheck = false ; } } public void execute ( ) throws BuildException { DirectoryScanner scanner ; String [ ] list ; if ( baseDir == null ) { baseDir = project . resolveFile ( "." ) ; } if ( destDir == null ) { String msg = "destdir attribute must be set!" ; throw new BuildException ( msg ) ; } if ( style == null ) { throw new BuildException ( "style attribute must be set!" ) ; } if ( velocityPropertiesFile == null ) { velocityPropertiesFile = new File ( "velocity.properties" ) ; } if ( ! velocityPropertiesFile . exists ( ) && templatePath == null ) { throw new BuildException ( "No template path and could not " + "locate velocity.properties file: " + velocityPropertiesFile . getAbsolutePath ( ) ) ; } log ( "Transforming into: " + destDir . getAbsolutePath ( ) , Project . MSG_INFO ) ; if ( projectAttribute != null && projectAttribute . length ( ) > 0 ) { projectFile = new File ( baseDir , projectAttribute ) ; if ( projectFile . exists ( ) ) { projectFileLastModified = projectFile . lastModified ( ) ; } else { log ( "Project file is defined, but could not be located: " + projectFile . getAbsolutePath ( ) , Project . MSG_INFO ) ; projectFile = null ; } } Document projectDocument = null ; try { if ( velocityPropertiesFile . exists ( ) ) { String file = velocityPropertiesFile . getAbsolutePath ( ) ; ExtendedProperties config = new ExtendedProperties ( file ) ; ve . setExtendedProperties ( config ) ; } if ( templatePath != null && templatePath . length ( ) > 0 ) { ve . setProperty ( RuntimeConstants . FILE_RESOURCE_LOADER_PATH , templatePath ) ; } ve . init ( ) ; styleSheetLastModified = ve . getTemplate ( style ) . getLastModified ( ) ; if ( projectFile != null ) { projectDocument = builder . build ( projectFile ) ; } } catch ( Exception e ) { log ( "Error: " + e . toString ( ) , Project . MSG_INFO ) ; throw new BuildException ( e ) ; } scanner = getDirectoryScanner ( baseDir ) ; list = scanner . getIncludedFiles ( ) ; for ( int i = 0 ; i < list . length ; ++ i ) { process ( list [ i ] , projectDocument ) ; } } private void process ( String xmlFile , Document projectDocument ) throws BuildException { File outFile = null ; File inFile = null ; Writer writer = null ; try { inFile = new File ( baseDir , xmlFile ) ; outFile = new File ( destDir , xmlFile . substring ( 0 , xmlFile . lastIndexOf ( '.' ) ) + extension ) ; if ( lastModifiedCheck == false || ( inFile . lastModified ( ) > outFile . lastModified ( ) || styleSheetLastModified > outFile . lastModified ( ) || projectFileLastModified > outFile . lastModified ( ) || userContextsModifed ( outFile . lastModified ( ) ) ) ) { ensureDirectoryFor ( outFile ) ; log ( "Input:  " + xmlFile , Project . MSG_INFO ) ; Document root = builder . build ( inFile ) ; VelocityContext context = new VelocityContext ( ) ; String encoding = ( String ) ve . getProperty ( RuntimeConstants . OUTPUT_ENCODING ) ; if ( encoding == null || encoding . length ( ) == 0 || encoding . equals ( "8859-1" ) || encoding . equals ( "8859_1" ) ) { encoding = "ISO-8859-1" ; } Format f = Format . getRawFormat ( ) ; f . setEncoding ( encoding ) ; OutputWrapper ow = new OutputWrapper ( f ) ; context . put ( "root" , root . getRootElement ( ) ) ; context . put ( "xmlout" , ow ) ; context . put ( "relativePath" , getRelativePath ( xmlFile ) ) ; context . put ( "treeWalk" , new TreeWalker ( ) ) ; context . put ( "xpath" , new XPathTool ( ) ) ; context . put ( "escape" , new Escape ( ) ) ; context . put ( "date" , new java . util . Date ( ) ) ; if ( projectDocument != null ) { context . put ( "project" , projectDocument . getRootElement ( ) ) ; } for ( Iterator iter = contexts . iterator ( ) ; iter . hasNext ( ) ; ) { Context subContext = ( Context ) iter . next ( ) ; if ( subContext == null ) { throw new BuildException ( "Found an undefined SubContext!" ) ; } if ( subContext . getContextDocument ( ) == null ) { throw new BuildException ( "Could not build a subContext for " + subContext . getName ( ) ) ; } context . put ( subContext . getName ( ) , subContext . getContextDocument ( ) . getRootElement ( ) ) ; } writer = new BufferedWriter ( new OutputStreamWriter ( new FileOutputStream ( outFile ) , encoding ) ) ; Template template = ve . getTemplate ( style ) ; template . merge ( context , writer ) ; log ( "Output: " + outFile , Project . MSG_INFO ) ; } } catch ( JDOMException e ) { outFile . delete ( ) ; if ( e . getCause ( ) != null ) { Throwable rootCause = e . getCause ( ) ; if ( rootCause instanceof SAXParseException ) { System . out . println ( "" ) ; System . out . println ( "Error: " + rootCause . getMessage ( ) ) ; System . out . println ( "       Line: " + ( ( SAXParseException ) rootCause ) . getLineNumber ( ) + " Column: " + ( ( SAXParseException ) rootCause ) . getColumnNumber ( ) ) ; System . out . println ( "" ) ; } else { rootCause . printStackTrace ( ) ; } } else { e . printStackTrace ( ) ; } } catch ( Throwable e ) { if ( outFile != null ) { outFile . delete ( ) ; } e . printStackTrace ( ) ; } finally { if ( writer != null ) { try { writer . flush ( ) ; } catch ( IOException e ) { } try { writer . close ( ) ; } catch ( IOException e ) { } } } } private String getRelativePath ( String file ) { if ( file == null || file . length ( ) == 0 ) return "" ; StringTokenizer st = new StringTokenizer ( file , "/\\" ) ; int slashCount = st . countTokens ( ) - 1 ; StringBuffer sb = new StringBuffer ( ) ; for ( int i = 0 ; i < slashCount ; i ++ ) { sb . append ( "../" ) ; } if ( sb . toString ( ) . length ( ) > 0 ) { return StringUtils . chop ( sb . toString ( ) , 1 ) ; } return "." ; } private void ensureDirectoryFor ( File targetFile ) throws BuildException { File directory = new File ( targetFile . getParent ( ) ) ; if ( ! directory . exists ( ) ) { if ( ! directory . mkdirs ( ) ) { throw new BuildException ( "Unable to create directory: " + directory . getAbsolutePath ( ) ) ; } } } private boolean userContextsModifed ( long lastModified ) { for ( Iterator iter = contexts . iterator ( ) ; iter . hasNext ( ) ; ) { AnakiaTask . Context ctx = ( AnakiaTask . Context ) iter . next ( ) ; if ( ctx . getLastModified ( ) > lastModified ) { return true ; } } return false ; } public Context createContext ( ) { Context context = new Context ( ) ; contexts . add ( context ) ; return context ; } public class Context { private String name ; private Document contextDoc = null ; private String file ; public Context ( ) { } public String getName ( ) { return name ; } public void setName ( String name ) { if ( name . equals ( "relativePath" ) || name . equals ( "treeWalk" ) || name . equals ( "xpath" ) || name . equals ( "escape" ) || name . equals ( "date" ) || name . equals ( "project" ) ) { throw new IllegalArgumentException ( "Context name '" + name + "' is reserved by Anakia" ) ; } this . name = name ; } public void setFile ( String file ) { this . file = file ; } public long getLastModified ( ) { return new File ( baseDir , file ) . lastModified ( ) ; } public Document getContextDocument ( ) { if ( contextDoc == null ) { File contextFile = new File ( baseDir , file ) ; try { contextDoc = builder . build ( contextFile ) ; } catch ( Exception e ) { throw new BuildException ( e ) ; } } return contextDoc ; } } } 	0	['15', '4', '0', '22', '89', '51', '1', '22', '11', '0.826530612', '776', '0.857142857', '1', '0.847826087', '0.373333333', '2', '2', '49.8', '5', '1.4667', '0']
package org . apache . velocity . context ; public interface InternalContextAdapter extends InternalHousekeepingContext , Context , InternalWrapperContext , InternalEventContext { } 	0	['0', '1', '0', '67', '0', '0', '64', '4', '0', '2', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0']
package org . apache . velocity . anakia ; import java . util . List ; import org . jdom . Document ; import org . jdom . Element ; public class XPathTool { public XPathTool ( ) { } public NodeList applyTo ( String xpathSpec , Document doc ) { return new NodeList ( XPathCache . getXPath ( xpathSpec ) . applyTo ( doc ) , false ) ; } public NodeList applyTo ( String xpathSpec , Element elem ) { return new NodeList ( XPathCache . getXPath ( xpathSpec ) . applyTo ( elem ) , false ) ; } public NodeList applyTo ( String xpathSpec , List nodeSet ) { return new NodeList ( XPathCache . getXPath ( xpathSpec ) . applyTo ( nodeSet ) , false ) ; } } 	0	['4', '1', '0', '6', '10', '6', '1', '5', '4', '2', '34', '0', '0', '0', '0.5', '0', '0', '7.5', '1', '0.75', '0']
package org . apache . velocity . runtime . resource . util ; import java . util . Collections ; import java . util . HashMap ; import java . util . Map ; import org . apache . velocity . runtime . resource . loader . StringResourceLoader ; public class StringResourceRepositoryImpl implements StringResourceRepository { protected Map resources = Collections . synchronizedMap ( new HashMap ( ) ) ; private String encoding = StringResourceLoader . REPOSITORY_ENCODING_DEFAULT ; public StringResource getStringResource ( final String name ) { return ( StringResource ) resources . get ( name ) ; } public void putStringResource ( final String name , final String body ) { resources . put ( name , new StringResource ( body , getEncoding ( ) ) ) ; } public void putStringResource ( final String name , final String body , final String encoding ) { resources . put ( name , new StringResource ( body , encoding ) ) ; } public void removeStringResource ( final String name ) { resources . remove ( name ) ; } public String getEncoding ( ) { return encoding ; } public void setEncoding ( final String encoding ) { this . encoding = encoding ; } } 	0	['7', '1', '0', '2', '14', '0', '0', '2', '7', '0.416666667', '63', '1', '0', '0', '0.857142857', '0', '0', '7.714285714', '1', '0.8571', '0']
