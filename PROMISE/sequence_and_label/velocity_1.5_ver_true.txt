package org . apache . velocity . runtime . parser . node ; import java . io . IOException ; import java . io . Writer ; import org . apache . velocity . context . InternalContextAdapter ; import org . apache . velocity . exception . MethodInvocationException ; import org . apache . velocity . exception . ParseErrorException ; import org . apache . velocity . exception . ResourceNotFoundException ; import org . apache . velocity . runtime . parser . Parser ; import org . apache . velocity . runtime . parser . ParserVisitor ; public class ASTIfStatement extends SimpleNode { public ASTIfStatement ( int id ) { super ( id ) ; } public ASTIfStatement ( Parser p , int id ) { super ( p , id ) ; } public Object jjtAccept ( ParserVisitor visitor , Object data ) { return visitor . visit ( this , data ) ; } public boolean render ( InternalContextAdapter context , Writer writer ) throws IOException , MethodInvocationException , ResourceNotFoundException , ParseErrorException { if ( jjtGetChild ( 0 ) . evaluate ( context ) ) { jjtGetChild ( 1 ) . render ( context , writer ) ; return true ; } int totalNodes = jjtGetNumChildren ( ) ; for ( int i = 2 ; i < totalNodes ; i ++ ) { if ( jjtGetChild ( i ) . evaluate ( context ) ) { jjtGetChild ( i ) . render ( context , writer ) ; return true ; } } return true ; } public void process ( InternalContextAdapter context , ParserVisitor visitor ) { } } 	0	['5', '2', '0', '10', '12', '10', '4', '8', '5', '2', '62', '0', '0', '0.903225806', '0.4', '1', '2', '11.4', '1', '0.6', '0']
package org . apache . velocity . anakia ; import org . jdom . Element ; import org . jdom . Namespace ; import org . jdom . output . XMLOutputter ; import java . util . List ; public class AnakiaElement extends Element { private static final long serialVersionUID = 8429597252274491314L ; private static final XMLOutputter DEFAULT_OUTPUTTER = new XMLOutputter ( ) ; static { DEFAULT_OUTPUTTER . getFormat ( ) . setLineSeparator ( System . getProperty ( "line.separator" ) ) ; } public AnakiaElement ( String name , Namespace namespace ) { super ( name , namespace ) ; } public AnakiaElement ( String name ) { super ( name ) ; } public AnakiaElement ( String name , String uri ) { super ( name , uri ) ; } public AnakiaElement ( String name , String prefix , String uri ) { super ( name , prefix , uri ) ; } public NodeList selectNodes ( String xpathExpression ) { return new NodeList ( XPathCache . getXPath ( xpathExpression ) . applyTo ( this ) , false ) ; } public String toString ( ) { return DEFAULT_OUTPUTTER . outputString ( this ) ; } public List getContent ( ) { return new NodeList ( super . getContent ( ) , false ) ; } public List getChildren ( ) { return new NodeList ( super . getChildren ( ) , false ) ; } public List getChildren ( String name ) { return new NodeList ( super . getChildren ( name ) ) ; } public List getChildren ( String name , Namespace ns ) { return new NodeList ( super . getChildren ( name , ns ) ) ; } public List getAttributes ( ) { return new NodeList ( super . getAttributes ( ) ) ; } } 	0	['12', '3', '0', '8', '30', '64', '1', '7', '11', '1', '93', '1', '0', '0.920454545', '0.606060606', '1', '2', '6.583333333', '1', '0.5833', '0']
package org . apache . velocity . runtime . resource . loader ; import java . io . InputStream ; import org . apache . commons . collections . ExtendedProperties ; import org . apache . commons . lang . StringUtils ; import org . apache . velocity . exception . ResourceNotFoundException ; import org . apache . velocity . runtime . resource . Resource ; import org . apache . velocity . util . ClassUtils ; import org . apache . velocity . util . ExceptionUtils ; public class ClasspathResourceLoader extends ResourceLoader { public void init ( ExtendedProperties configuration ) { if ( log . isTraceEnabled ( ) ) { log . trace ( "ClasspathResourceLoader : initialization complete." ) ; } } public InputStream getResourceStream ( String name ) throws ResourceNotFoundException { InputStream result = null ; if ( StringUtils . isEmpty ( name ) ) { throw new ResourceNotFoundException ( "No template name provided" ) ; } try { result = ClassUtils . getResourceAsStream ( getClass ( ) , name ) ; } catch ( Exception fnfe ) { throw ( ResourceNotFoundException ) ExceptionUtils . createWithCause ( ResourceNotFoundException . class , "problem with template: " + name , fnfe ) ; } if ( result == null ) { String msg = "ClasspathResourceLoader Error: cannot find resource " + name ; throw new ResourceNotFoundException ( msg ) ; } return result ; } public boolean isSourceModified ( Resource resource ) { return false ; } public long getLastModified ( Resource resource ) { return 0 ; } } 	0	['6', '2', '0', '8', '20', '15', '0', '8', '5', '1', '88', '0', '0', '0.6875', '0.416666667', '1', '1', '13.5', '2', '1', '0']
package org . apache . velocity . anakia ; public class Escape { public static final String LINE_SEPARATOR = System . getProperty ( "line.separator" ) ; public Escape ( ) { } public static final String getText ( String st ) { StringBuffer buff = new StringBuffer ( ) ; char [ ] block = st . toCharArray ( ) ; String stEntity = null ; int i , last ; for ( i = 0 , last = 0 ; i < block . length ; i ++ ) { switch ( block [ i ] ) { case '<' : stEntity = "&lt;" ; break ; case '>' : stEntity = "&gt;" ; break ; case '&' : stEntity = "&amp;" ; break ; case '"' : stEntity = "&quot;" ; break ; case '\n' : stEntity = LINE_SEPARATOR ; break ; default : break ; } if ( stEntity != null ) { buff . append ( block , last , i - last ) ; buff . append ( stEntity ) ; stEntity = null ; last = i + 1 ; } } if ( last < block . length ) { buff . append ( block , last , i - last ) ; } return buff . toString ( ) ; } } 	0	['3', '1', '0', '1', '10', '1', '1', '0', '2', '0.5', '84', '0', '0', '0', '0.5', '0', '0', '26.66666667', '10', '3.3333', '0']
package org . apache . velocity . runtime . parser . node ; import org . apache . velocity . context . InternalContextAdapter ; import org . apache . velocity . runtime . parser . Parser ; import org . apache . velocity . runtime . parser . ParserVisitor ; public class ASTFalse extends SimpleNode { private static Boolean value = Boolean . FALSE ; public ASTFalse ( int id ) { super ( id ) ; } public ASTFalse ( Parser p , int id ) { super ( p , id ) ; } public Object jjtAccept ( ParserVisitor visitor , Object data ) { return visitor . visit ( this , data ) ; } public boolean evaluate ( InternalContextAdapter context ) { return false ; } public Object value ( InternalContextAdapter context ) { return value ; } } 	0	['6', '2', '0', '6', '9', '13', '4', '4', '5', '0.8', '28', '1', '0', '0.903225806', '0.4', '0', '0', '3.5', '1', '0.5', '0']
package org . apache . velocity . runtime . log ; import org . apache . log4j . Category ; import org . apache . log4j . Level ; import org . apache . log4j . PatternLayout ; import org . apache . log4j . RollingFileAppender ; import org . apache . velocity . runtime . RuntimeConstants ; import org . apache . velocity . runtime . RuntimeServices ; public class SimpleLog4JLogSystem implements LogSystem { private RuntimeServices rsvc = null ; private RollingFileAppender appender = null ; protected Category logger = null ; public SimpleLog4JLogSystem ( ) { } public void init ( RuntimeServices rs ) { rsvc = rs ; String categoryname = ( String ) rsvc . getProperty ( "runtime.log.logsystem.log4j.category" ) ; if ( categoryname != null ) { logger = Category . getInstance ( categoryname ) ; logVelocityMessage ( 0 , "SimpleLog4JLogSystem using category '" + categoryname + "'" ) ; return ; } String logfile = rsvc . getString ( RuntimeConstants . RUNTIME_LOG ) ; try { internalInit ( logfile ) ; logVelocityMessage ( 0 , "SimpleLog4JLogSystem initialized using logfile '" + logfile + "'" ) ; } catch ( Exception e ) { System . err . println ( "PANIC : error configuring SimpleLog4JLogSystem : " + e ) ; } } private void internalInit ( String logfile ) throws Exception { logger = Category . getInstance ( this . getClass ( ) . getName ( ) ) ; logger . setAdditivity ( false ) ; logger . setLevel ( Level . DEBUG ) ; appender = new RollingFileAppender ( new PatternLayout ( "%d - %m%n" ) , logfile , true ) ; appender . setMaxBackupIndex ( 1 ) ; appender . setMaximumFileSize ( 100000 ) ; logger . addAppender ( appender ) ; } public void logVelocityMessage ( int level , String message ) { switch ( level ) { case LogSystem . WARN_ID : logger . warn ( message ) ; break ; case LogSystem . INFO_ID : logger . info ( message ) ; break ; case LogSystem . DEBUG_ID : logger . debug ( message ) ; break ; case LogSystem . ERROR_ID : logger . error ( message ) ; break ; default : logger . debug ( message ) ; break ; } } protected void finalize ( ) throws Throwable { shutdown ( ) ; } public void shutdown ( ) { if ( appender != null ) { logger . removeAppender ( appender ) ; appender . close ( ) ; appender = null ; } } } 	0	['6', '1', '0', '8', '30', '0', '0', '8', '4', '0.333333333', '168', '1', '1', '0', '0.416666667', '0', '0', '26.5', '2', '1.3333', '0']
package org . apache . velocity . runtime . parser . node ; import org . apache . velocity . context . InternalContextAdapter ; import org . apache . velocity . runtime . parser . Parser ; import org . apache . velocity . runtime . parser . ParserVisitor ; import org . apache . velocity . exception . MethodInvocationException ; public class ASTExpression extends SimpleNode { public ASTExpression ( int id ) { super ( id ) ; } public ASTExpression ( Parser p , int id ) { super ( p , id ) ; } public Object jjtAccept ( ParserVisitor visitor , Object data ) { return visitor . visit ( this , data ) ; } public boolean evaluate ( InternalContextAdapter context ) throws MethodInvocationException { return jjtGetChild ( 0 ) . evaluate ( context ) ; } public Object value ( InternalContextAdapter context ) throws MethodInvocationException { return jjtGetChild ( 0 ) . value ( context ) ; } } 	0	['5', '2', '0', '9', '11', '10', '5', '6', '5', '2', '31', '0', '0', '0.903225806', '0.4', '1', '2', '5.2', '1', '0.6', '0']
package org . apache . velocity . context ; import org . apache . velocity . app . event . EventCartridge ; public interface InternalEventContext { public EventCartridge attachEventCartridge ( EventCartridge ec ) ; public EventCartridge getEventCartridge ( ) ; } 	0	['2', '1', '0', '5', '2', '1', '5', '1', '2', '2', '2', '0', '0', '0', '0.75', '0', '0', '0', '1', '1', '0']
package org . apache . velocity . io ; import java . io . IOException ; import java . io . Writer ; public final class VelocityWriter extends Writer { public static final int NO_BUFFER = 0 ; public static final int DEFAULT_BUFFER = - 1 ; public static final int UNBOUNDED_BUFFER = - 2 ; private int bufferSize ; private boolean autoFlush ; private Writer writer ; private char cb [ ] ; private int nextChar ; private static int defaultCharBufferSize = 8 * 1024 ; public VelocityWriter ( Writer writer ) { this ( writer , defaultCharBufferSize , true ) ; } private VelocityWriter ( int bufferSize , boolean autoFlush ) { this . bufferSize = bufferSize ; this . autoFlush = autoFlush ; } public int getBufferSize ( ) { return bufferSize ; } public boolean isAutoFlush ( ) { return autoFlush ; } public VelocityWriter ( Writer writer , int sz , boolean autoFlush ) { this ( sz , autoFlush ) ; if ( sz < 0 ) throw new IllegalArgumentException ( "Buffer size <= 0" ) ; this . writer = writer ; cb = sz == 0 ? null : new char [ sz ] ; nextChar = 0 ; } private final void flushBuffer ( ) throws IOException { if ( bufferSize == 0 ) return ; if ( nextChar == 0 ) return ; writer . write ( cb , 0 , nextChar ) ; nextChar = 0 ; } public final void clear ( ) { nextChar = 0 ; } private final void bufferOverflow ( ) throws IOException { throw new IOException ( "overflow" ) ; } public final void flush ( ) throws IOException { flushBuffer ( ) ; if ( writer != null ) { writer . flush ( ) ; } } public final void close ( ) throws IOException { if ( writer == null ) return ; flush ( ) ; } public final int getRemaining ( ) { return bufferSize - nextChar ; } public final void write ( int c ) throws IOException { if ( bufferSize == 0 ) { writer . write ( c ) ; } else { if ( nextChar >= bufferSize ) if ( autoFlush ) flushBuffer ( ) ; else bufferOverflow ( ) ; cb [ nextChar ++ ] = ( char ) c ; } } private final int min ( int a , int b ) { return ( a < b ? a : b ) ; } public final void write ( char cbuf [ ] , int off , int len ) throws IOException { if ( bufferSize == 0 ) { writer . write ( cbuf , off , len ) ; return ; } if ( len == 0 ) { return ; } if ( len >= bufferSize ) { if ( autoFlush ) flushBuffer ( ) ; else bufferOverflow ( ) ; writer . write ( cbuf , off , len ) ; return ; } int b = off , t = off + len ; while ( b < t ) { int d = min ( bufferSize - nextChar , t - b ) ; System . arraycopy ( cbuf , b , cb , nextChar , d ) ; b += d ; nextChar += d ; if ( nextChar >= bufferSize ) if ( autoFlush ) flushBuffer ( ) ; else bufferOverflow ( ) ; } } public final void write ( char buf [ ] ) throws IOException { write ( buf , 0 , buf . length ) ; } public final void write ( String s , int off , int len ) throws IOException { if ( bufferSize == 0 ) { writer . write ( s , off , len ) ; return ; } int b = off , t = off + len ; while ( b < t ) { int d = min ( bufferSize - nextChar , t - b ) ; s . getChars ( b , b + d , cb , nextChar ) ; b += d ; nextChar += d ; if ( nextChar >= bufferSize ) if ( autoFlush ) flushBuffer ( ) ; else bufferOverflow ( ) ; } } public final void write ( String s ) throws IOException { if ( s != null ) { write ( s , 0 , s . length ( ) ) ; } } public final void recycle ( Writer writer ) { this . writer = writer ; clear ( ) ; } } 	0	['19', '2', '0', '1', '29', '61', '1', '0', '14', '0.709876543', '342', '0.666666667', '0', '0.464285714', '0.305555556', '1', '2', '16.52631579', '2', '0.8421', '0']
package org . apache . velocity . runtime . parser . node ; import org . apache . velocity . runtime . parser . Parser ; import org . apache . velocity . runtime . parser . ParserVisitor ; public class ASTprocess extends SimpleNode { public ASTprocess ( int id ) { super ( id ) ; } public ASTprocess ( Parser p , int id ) { super ( p , id ) ; } public Object jjtAccept ( ParserVisitor visitor , Object data ) { return visitor . visit ( this , data ) ; } } 	0	['3', '2', '0', '5', '6', '3', '4', '3', '3', '2', '17', '0', '0', '0.965517241', '0.533333333', '0', '0', '4.666666667', '1', '0.3333', '0']
package org . apache . velocity . runtime . resource ; import java . util . Iterator ; import org . apache . velocity . runtime . RuntimeServices ; public interface ResourceCache { public void initialize ( RuntimeServices rs ) ; public Resource get ( Object resourceKey ) ; public Resource put ( Object resourceKey , Resource resource ) ; public Resource remove ( Object resourceKey ) ; public Iterator enumerateKeys ( ) ; } 	0	['5', '1', '0', '4', '5', '10', '2', '2', '5', '2', '5', '0', '0', '0', '0.5', '0', '0', '0', '1', '1', '0']
package org . apache . velocity . runtime . parser ; public class TokenMgrError extends Error { static final int LEXICAL_ERROR = 0 ; static final int STATIC_LEXER_ERROR = 1 ; static final int INVALID_LEXICAL_STATE = 2 ; static final int LOOP_DETECTED = 3 ; int errorCode ; protected static final String addEscapes ( String str ) { StringBuffer retval = new StringBuffer ( ) ; char ch ; for ( int i = 0 ; i < str . length ( ) ; i ++ ) { switch ( str . charAt ( i ) ) { case 0 : continue ; case '\b' : retval . append ( "\\b" ) ; continue ; case '\t' : retval . append ( "\\t" ) ; continue ; case '\n' : retval . append ( "\\n" ) ; continue ; case '\f' : retval . append ( "\\f" ) ; continue ; case '\r' : retval . append ( "\\r" ) ; continue ; case '\"' : retval . append ( "\\\"" ) ; continue ; case '\'' : retval . append ( "\\\'" ) ; continue ; case '\\' : retval . append ( "\\\\" ) ; continue ; default : if ( ( ch = str . charAt ( i ) ) < 0x20 || ch > 0x7e ) { String s = "0000" + Integer . toString ( ch , 16 ) ; retval . append ( "\\u" + s . substring ( s . length ( ) - 4 , s . length ( ) ) ) ; } else { retval . append ( ch ) ; } continue ; } } return retval . toString ( ) ; } protected static String LexicalError ( boolean EOFSeen , int lexState , int errorLine , int errorColumn , String errorAfter , char curChar ) { return ( "Lexical error at line " + errorLine + ", column " + errorColumn + ".  Encountered: " + ( EOFSeen ? "<EOF> " : ( "\"" + addEscapes ( String . valueOf ( curChar ) ) + "\"" ) + " (" + ( int ) curChar + "), " ) + "after : \"" + addEscapes ( errorAfter ) + "\"" ) ; } public String getMessage ( ) { return super . getMessage ( ) ; } public TokenMgrError ( ) { } public TokenMgrError ( String message , int reason ) { super ( message ) ; errorCode = reason ; } public TokenMgrError ( boolean EOFSeen , int lexState , int errorLine , int errorColumn , String errorAfter , char curChar , int reason ) { this ( LexicalError ( EOFSeen , lexState , errorLine , errorColumn , errorAfter , curChar ) , reason ) ; } } 	0	['6', '3', '0', '2', '19', '15', '2', '0', '4', '1.12', '184', '0', '0', '0.8125', '0.5', '1', '1', '28.83333333', '14', '2.8333', '0']
package org . apache . velocity . anakia ; import java . io . IOException ; import java . io . StringWriter ; import java . io . Writer ; import java . util . ArrayList ; import java . util . Collection ; import java . util . Iterator ; import java . util . List ; import java . util . ListIterator ; import org . jdom . Attribute ; import org . jdom . CDATA ; import org . jdom . Comment ; import org . jdom . DocType ; import org . jdom . Document ; import org . jdom . Element ; import org . jdom . EntityRef ; import org . jdom . ProcessingInstruction ; import org . jdom . Text ; import org . jdom . output . XMLOutputter ; public class NodeList implements List , Cloneable { private static final AttributeXMLOutputter DEFAULT_OUTPUTTER = new AttributeXMLOutputter ( ) ; private List nodes ; public NodeList ( ) { nodes = new ArrayList ( ) ; } public NodeList ( Document document ) { this ( ( Object ) document ) ; } public NodeList ( Element element ) { this ( ( Object ) element ) ; } private NodeList ( Object object ) { if ( object == null ) { throw new IllegalArgumentException ( "Cannot construct NodeList with null." ) ; } nodes = new ArrayList ( 1 ) ; nodes . add ( object ) ; } public NodeList ( List nodes ) { this ( nodes , true ) ; } public NodeList ( List nodes , boolean copy ) { if ( nodes == null ) { throw new IllegalArgumentException ( "Cannot initialize NodeList with null list" ) ; } this . nodes = copy ? new ArrayList ( nodes ) : nodes ; } public List getList ( ) { return nodes ; } public String toString ( ) { if ( nodes . isEmpty ( ) ) { return "" ; } StringWriter sw = new StringWriter ( nodes . size ( ) * 128 ) ; try { for ( Iterator i = nodes . iterator ( ) ; i . hasNext ( ) ; ) { Object node = i . next ( ) ; if ( node instanceof Element ) { DEFAULT_OUTPUTTER . output ( ( Element ) node , sw ) ; } else if ( node instanceof Attribute ) { DEFAULT_OUTPUTTER . output ( ( Attribute ) node , sw ) ; } else if ( node instanceof Text ) { DEFAULT_OUTPUTTER . output ( ( Text ) node , sw ) ; } else if ( node instanceof Document ) { DEFAULT_OUTPUTTER . output ( ( Document ) node , sw ) ; } else if ( node instanceof ProcessingInstruction ) { DEFAULT_OUTPUTTER . output ( ( ProcessingInstruction ) node , sw ) ; } else if ( node instanceof Comment ) { DEFAULT_OUTPUTTER . output ( ( Comment ) node , sw ) ; } else if ( node instanceof CDATA ) { DEFAULT_OUTPUTTER . output ( ( CDATA ) node , sw ) ; } else if ( node instanceof DocType ) { DEFAULT_OUTPUTTER . output ( ( DocType ) node , sw ) ; } else if ( node instanceof EntityRef ) { DEFAULT_OUTPUTTER . output ( ( EntityRef ) node , sw ) ; } else { throw new IllegalArgumentException ( "Cannot process a " + ( node == null ? "null node" : "node of class " + node . getClass ( ) . getName ( ) ) ) ; } } } catch ( IOException e ) { throw new Error ( ) ; } return sw . toString ( ) ; } public Object clone ( ) throws CloneNotSupportedException { NodeList clonedList = ( NodeList ) super . clone ( ) ; clonedList . cloneNodes ( ) ; return clonedList ; } private void cloneNodes ( ) throws CloneNotSupportedException { Class listClass = nodes . getClass ( ) ; try { List clonedNodes = ( List ) listClass . newInstance ( ) ; clonedNodes . addAll ( nodes ) ; nodes = clonedNodes ; } catch ( IllegalAccessException e ) { throw new CloneNotSupportedException ( "Cannot clone NodeList since" + " there is no accessible no-arg constructor on class " + listClass . getName ( ) ) ; } catch ( InstantiationException e ) { throw new Error ( ) ; } } public int hashCode ( ) { return nodes . hashCode ( ) ; } public boolean equals ( Object o ) { return o instanceof NodeList ? ( ( NodeList ) o ) . nodes . equals ( nodes ) : false ; } public NodeList selectNodes ( String xpathString ) { return new NodeList ( XPathCache . getXPath ( xpathString ) . applyTo ( nodes ) , false ) ; } public boolean add ( Object o ) { return nodes . add ( o ) ; } public void add ( int index , Object o ) { nodes . add ( index , o ) ; } public boolean addAll ( Collection c ) { return nodes . addAll ( c ) ; } public boolean addAll ( int index , Collection c ) { return nodes . addAll ( index , c ) ; } public void clear ( ) { nodes . clear ( ) ; } public boolean contains ( Object o ) { return nodes . contains ( o ) ; } public boolean containsAll ( Collection c ) { return nodes . containsAll ( c ) ; } public Object get ( int index ) { return nodes . get ( index ) ; } public int indexOf ( Object o ) { return nodes . indexOf ( o ) ; } public boolean isEmpty ( ) { return nodes . isEmpty ( ) ; } public Iterator iterator ( ) { return nodes . iterator ( ) ; } public int lastIndexOf ( Object o ) { return nodes . lastIndexOf ( o ) ; } public ListIterator listIterator ( ) { return nodes . listIterator ( ) ; } public ListIterator listIterator ( int index ) { return nodes . listIterator ( index ) ; } public Object remove ( int index ) { return nodes . remove ( index ) ; } public boolean remove ( Object o ) { return nodes . remove ( o ) ; } public boolean removeAll ( Collection c ) { return nodes . removeAll ( c ) ; } public boolean retainAll ( Collection c ) { return nodes . retainAll ( c ) ; } public Object set ( int index , Object o ) { return nodes . set ( index , o ) ; } public int size ( ) { return nodes . size ( ) ; } public List subList ( int fromIndex , int toIndex ) { return new NodeList ( nodes . subList ( fromIndex , toIndex ) ) ; } public Object [ ] toArray ( ) { return nodes . toArray ( ) ; } public Object [ ] toArray ( Object [ ] a ) { return nodes . toArray ( a ) ; } private static final class AttributeXMLOutputter extends XMLOutputter { public void output ( Attribute attribute , Writer out ) throws IOException { out . write ( " " ) ; out . write ( attribute . getQualifiedName ( ) ) ; out . write ( "=" ) ; out . write ( "\"" ) ; out . write ( escapeAttributeEntities ( attribute . getValue ( ) ) ) ; out . write ( "\"" ) ; } } } 	0	['37', '1', '0', '16', '92', '0', '3', '13', '34', '0.5', '438', '1', '1', '0', '0.177777778', '1', '1', '10.78378378', '12', '1.1351', '0']
package org . apache . velocity . util . introspection ; import java . util . Iterator ; public interface Uberspect { public void init ( ) throws Exception ; public Iterator getIterator ( Object obj , Info info ) throws Exception ; public VelMethod getMethod ( Object obj , String method , Object [ ] args , Info info ) throws Exception ; public VelPropertyGet getPropertyGet ( Object obj , String identifier , Info info ) throws Exception ; public VelPropertySet getPropertySet ( Object obj , String identifier , Object arg , Info info ) throws Exception ; } 	0	['5', '1', '0', '12', '5', '10', '8', '4', '5', '2', '5', '0', '0', '0', '0.68', '0', '0', '0', '1', '1', '0']
package org . apache . velocity . runtime . log ; import java . util . Date ; import org . apache . log . format . PatternFormatter ; public class VelocityFormatter extends PatternFormatter { public VelocityFormatter ( String format ) { super ( format ) ; } protected String getTime ( final long time , final String format ) { return new Date ( ) . toString ( ) ; } } 	0	['2', '2', '0', '2', '5', '1', '1', '1', '1', '2', '11', '0', '0', '0.941176471', '0.833333333', '1', '2', '4.5', '1', '0.5', '0']
package org . apache . velocity . util . introspection ; public interface VelPropertySet { public Object invoke ( Object o , Object arg ) throws Exception ; public boolean isCacheable ( ) ; public String getMethodName ( ) ; } 	0	['3', '1', '0', '4', '3', '3', '4', '0', '3', '2', '3', '0', '0', '0', '0.666666667', '0', '0', '0', '1', '1', '0']
package org . apache . velocity . anakia ; import java . io . IOException ; import java . io . StringWriter ; import org . jdom . Element ; import org . jdom . output . XMLOutputter ; import org . jdom . output . Format ; public class OutputWrapper extends XMLOutputter { public OutputWrapper ( ) { } public OutputWrapper ( Format f ) { super ( f ) ; } public String outputString ( Element element , boolean strip ) { StringWriter buff = new StringWriter ( ) ; try { outputElementContent ( element , buff ) ; } catch ( IOException e ) { } return buff . toString ( ) ; } } 	0	['3', '2', '0', '4', '8', '3', '1', '3', '3', '2', '23', '0', '0', '0.984615385', '0.5', '1', '1', '6.666666667', '1', '0.3333', '0']
package org . apache . velocity . runtime . parser . node ; import org . apache . velocity . context . InternalContextAdapter ; import org . apache . velocity . runtime . parser . Parser ; import org . apache . velocity . runtime . parser . ParserVisitor ; import org . apache . velocity . exception . MethodInvocationException ; public class ASTAndNode extends SimpleNode { public ASTAndNode ( int id ) { super ( id ) ; } public ASTAndNode ( Parser p , int id ) { super ( p , id ) ; } public Object jjtAccept ( ParserVisitor visitor , Object data ) { return visitor . visit ( this , data ) ; } public Object value ( InternalContextAdapter context ) throws MethodInvocationException { return new Boolean ( evaluate ( context ) ) ; } public boolean evaluate ( InternalContextAdapter context ) throws MethodInvocationException { Node left = jjtGetChild ( 0 ) ; Node right = jjtGetChild ( 1 ) ; if ( left == null || right == null ) { log . error ( ( left == null ? "Left" : "Right" ) + " side of '&&' operation is null." + " Operation not possible. " + context . getCurrentTemplateName ( ) + " [line " + getLine ( ) + ", column " + getColumn ( ) + "]" ) ; return false ; } if ( left . evaluate ( context ) ) { if ( right . evaluate ( context ) ) { return true ; } } return false ; } } 	0	['5', '2', '0', '9', '19', '10', '4', '7', '5', '2', '84', '0', '0', '0.903225806', '0.4', '1', '1', '15.8', '1', '0.6', '0']
package org . apache . velocity . runtime . parser ; import org . apache . velocity . runtime . parser . node . ASTAddNode ; import org . apache . velocity . runtime . parser . node . ASTAndNode ; import org . apache . velocity . runtime . parser . node . ASTAssignment ; import org . apache . velocity . runtime . parser . node . ASTBlock ; import org . apache . velocity . runtime . parser . node . ASTComment ; import org . apache . velocity . runtime . parser . node . ASTDirective ; import org . apache . velocity . runtime . parser . node . ASTDivNode ; import org . apache . velocity . runtime . parser . node . ASTEQNode ; import org . apache . velocity . runtime . parser . node . ASTElseIfStatement ; import org . apache . velocity . runtime . parser . node . ASTElseStatement ; import org . apache . velocity . runtime . parser . node . ASTEscape ; import org . apache . velocity . runtime . parser . node . ASTEscapedDirective ; import org . apache . velocity . runtime . parser . node . ASTExpression ; import org . apache . velocity . runtime . parser . node . ASTFalse ; import org . apache . velocity . runtime . parser . node . ASTFloatingPointLiteral ; import org . apache . velocity . runtime . parser . node . ASTGENode ; import org . apache . velocity . runtime . parser . node . ASTGTNode ; import org . apache . velocity . runtime . parser . node . ASTIdentifier ; import org . apache . velocity . runtime . parser . node . ASTIfStatement ; import org . apache . velocity . runtime . parser . node . ASTIntegerLiteral ; import org . apache . velocity . runtime . parser . node . ASTIntegerRange ; import org . apache . velocity . runtime . parser . node . ASTLENode ; import org . apache . velocity . runtime . parser . node . ASTLTNode ; import org . apache . velocity . runtime . parser . node . ASTMap ; import org . apache . velocity . runtime . parser . node . ASTMethod ; import org . apache . velocity . runtime . parser . node . ASTModNode ; import org . apache . velocity . runtime . parser . node . ASTMulNode ; import org . apache . velocity . runtime . parser . node . ASTNENode ; import org . apache . velocity . runtime . parser . node . ASTNotNode ; import org . apache . velocity . runtime . parser . node . ASTObjectArray ; import org . apache . velocity . runtime . parser . node . ASTOrNode ; import org . apache . velocity . runtime . parser . node . ASTReference ; import org . apache . velocity . runtime . parser . node . ASTSetDirective ; import org . apache . velocity . runtime . parser . node . ASTStop ; import org . apache . velocity . runtime . parser . node . ASTStringLiteral ; import org . apache . velocity . runtime . parser . node . ASTSubtractNode ; import org . apache . velocity . runtime . parser . node . ASTText ; import org . apache . velocity . runtime . parser . node . ASTTrue ; import org . apache . velocity . runtime . parser . node . ASTWord ; import org . apache . velocity . runtime . parser . node . ASTprocess ; import org . apache . velocity . runtime . parser . node . SimpleNode ; public interface ParserVisitor { public Object visit ( SimpleNode node , Object data ) ; public Object visit ( ASTprocess node , Object data ) ; public Object visit ( ASTEscapedDirective node , Object data ) ; public Object visit ( ASTEscape node , Object data ) ; public Object visit ( ASTComment node , Object data ) ; public Object visit ( ASTFloatingPointLiteral node , Object data ) ; public Object visit ( ASTIntegerLiteral node , Object data ) ; public Object visit ( ASTStringLiteral node , Object data ) ; public Object visit ( ASTIdentifier node , Object data ) ; public Object visit ( ASTWord node , Object data ) ; public Object visit ( ASTDirective node , Object data ) ; public Object visit ( ASTBlock node , Object data ) ; public Object visit ( ASTMap node , Object data ) ; public Object visit ( ASTObjectArray node , Object data ) ; public Object visit ( ASTIntegerRange node , Object data ) ; public Object visit ( ASTMethod node , Object data ) ; public Object visit ( ASTReference node , Object data ) ; public Object visit ( ASTTrue node , Object data ) ; public Object visit ( ASTFalse node , Object data ) ; public Object visit ( ASTText node , Object data ) ; public Object visit ( ASTIfStatement node , Object data ) ; public Object visit ( ASTElseStatement node , Object data ) ; public Object visit ( ASTElseIfStatement node , Object data ) ; public Object visit ( ASTSetDirective node , Object data ) ; public Object visit ( ASTStop node , Object data ) ; public Object visit ( ASTExpression node , Object data ) ; public Object visit ( ASTAssignment node , Object data ) ; public Object visit ( ASTOrNode node , Object data ) ; public Object visit ( ASTAndNode node , Object data ) ; public Object visit ( ASTEQNode node , Object data ) ; public Object visit ( ASTNENode node , Object data ) ; public Object visit ( ASTLTNode node , Object data ) ; public Object visit ( ASTGTNode node , Object data ) ; public Object visit ( ASTLENode node , Object data ) ; public Object visit ( ASTGENode node , Object data ) ; public Object visit ( ASTAddNode node , Object data ) ; public Object visit ( ASTSubtractNode node , Object data ) ; public Object visit ( ASTMulNode node , Object data ) ; public Object visit ( ASTDivNode node , Object data ) ; public Object visit ( ASTModNode node , Object data ) ; public Object visit ( ASTNotNode node , Object data ) ; } 	0	['41', '1', '0', '49', '41', '820', '49', '41', '41', '2', '41', '0', '0', '0', '0.069767442', '0', '0', '0', '1', '1', '0']
package org . apache . velocity . context ; public interface Context { Object put ( String key , Object value ) ; Object get ( String key ) ; boolean containsKey ( Object key ) ; Object [ ] getKeys ( ) ; Object remove ( Object key ) ; } 	0	['5', '1', '0', '30', '5', '10', '30', '0', '5', '2', '5', '0', '0', '0', '0.666666667', '0', '0', '0', '1', '1', '0']
package org . apache . velocity . runtime . parser . node ; import org . apache . velocity . runtime . parser . Parser ; import org . apache . velocity . runtime . parser . ParserVisitor ; public class ASTVariable extends SimpleNode { public ASTVariable ( int id ) { super ( id ) ; } public ASTVariable ( Parser p , int id ) { super ( p , id ) ; } public Object jjtAccept ( ParserVisitor visitor , Object data ) { return visitor . visit ( this , data ) ; } } 	0	['3', '2', '0', '3', '6', '3', '0', '3', '3', '2', '17', '0', '0', '0.965517241', '0.533333333', '0', '0', '4.666666667', '1', '0.3333', '0']
package org . apache . velocity . texen ; import java . io . File ; import java . io . InputStream ; import java . io . FileInputStream ; import java . io . BufferedInputStream ; import java . io . Writer ; import java . io . FileWriter ; import java . io . IOException ; import java . io . StringWriter ; import java . io . OutputStreamWriter ; import java . io . BufferedWriter ; import java . io . FileOutputStream ; import java . util . Enumeration ; import java . util . Hashtable ; import java . util . Iterator ; import java . util . Properties ; import org . apache . velocity . Template ; import org . apache . velocity . context . Context ; import org . apache . velocity . VelocityContext ; import org . apache . velocity . app . VelocityEngine ; import org . apache . velocity . util . ClassUtils ; public class Generator { public static final String OUTPUT_PATH = "output.path" ; public static final String TEMPLATE_PATH = "template.path" ; private static final String DEFAULT_TEXEN_PROPERTIES = "org/apache/velocity/texen/defaults/texen.properties" ; private Properties props = new Properties ( ) ; private Context controlContext ; private Hashtable writers = new Hashtable ( ) ; private static Generator instance = new Generator ( ) ; protected String outputEncoding ; protected String inputEncoding ; protected VelocityEngine ve ; private Generator ( ) { setDefaultProps ( ) ; } public static Generator getInstance ( ) { return instance ; } public void setVelocityEngine ( VelocityEngine ve ) { this . ve = ve ; } public Generator ( String propFile ) { try { BufferedInputStream bi = null ; try { bi = new BufferedInputStream ( new FileInputStream ( propFile ) ) ; props . load ( bi ) ; } finally { if ( bi != null ) { bi . close ( ) ; } } } catch ( IOException e ) { System . err . println ( "Could not load " + propFile + ", falling back to defaults. (" + e . getMessage ( ) + ")" ) ; setDefaultProps ( ) ; } } public Generator ( Properties props ) { this . props = ( Properties ) props . clone ( ) ; } protected void setDefaultProps ( ) { ClassLoader classLoader = VelocityEngine . class . getClassLoader ( ) ; try { InputStream inputStream = null ; try { inputStream = classLoader . getResourceAsStream ( DEFAULT_TEXEN_PROPERTIES ) ; props . load ( inputStream ) ; } finally { if ( inputStream != null ) { inputStream . close ( ) ; } } } catch ( IOException ioe ) { System . err . println ( "Cannot get default properties: " + ioe . getMessage ( ) ) ; } } public void setTemplatePath ( String templatePath ) { props . put ( TEMPLATE_PATH , templatePath ) ; } public String getTemplatePath ( ) { return props . getProperty ( TEMPLATE_PATH ) ; } public void setOutputPath ( String outputPath ) { props . put ( OUTPUT_PATH , outputPath ) ; } public String getOutputPath ( ) { return props . getProperty ( OUTPUT_PATH ) ; } public void setOutputEncoding ( String outputEncoding ) { this . outputEncoding = outputEncoding ; } public void setInputEncoding ( String inputEncoding ) { this . inputEncoding = inputEncoding ; } public Writer getWriter ( String path , String encoding ) throws Exception { Writer writer ; if ( encoding == null || encoding . length ( ) == 0 || encoding . equals ( "8859-1" ) || encoding . equals ( "8859_1" ) ) { writer = new FileWriter ( path ) ; } else { writer = new BufferedWriter ( new OutputStreamWriter ( new FileOutputStream ( path ) , encoding ) ) ; } return writer ; } public Template getTemplate ( String templateName , String encoding ) throws Exception { Template template ; if ( encoding == null || encoding . length ( ) == 0 || encoding . equals ( "8859-1" ) || encoding . equals ( "8859_1" ) ) { template = ve . getTemplate ( templateName ) ; } else { template = ve . getTemplate ( templateName , encoding ) ; } return template ; } public String parse ( String inputTemplate , String outputFile ) throws Exception { return parse ( inputTemplate , outputFile , null , null ) ; } public String parse ( String inputTemplate , String outputFile , String objectID , Object object ) throws Exception { return parse ( inputTemplate , null , outputFile , null , objectID , object ) ; } public String parse ( String inputTemplate , String inputEncoding , String outputFile , String outputEncoding , String objectID , Object object ) throws Exception { if ( objectID != null && object != null ) { controlContext . put ( objectID , object ) ; } Template template = getTemplate ( inputTemplate , inputEncoding != null ? inputEncoding : this . inputEncoding ) ; if ( outputFile == null || outputFile . equals ( "" ) ) { StringWriter sw = new StringWriter ( ) ; template . merge ( controlContext , sw ) ; return sw . toString ( ) ; } else { Writer writer = null ; if ( writers . get ( outputFile ) == null ) { writer = getWriter ( getOutputPath ( ) + File . separator + outputFile , outputEncoding != null ? outputEncoding : this . outputEncoding ) ; writers . put ( outputFile , writer ) ; } else { writer = ( Writer ) writers . get ( outputFile ) ; } VelocityContext vc = new VelocityContext ( controlContext ) ; template . merge ( vc , writer ) ; return "" ; } } public String parse ( String controlTemplate , Context controlContext ) throws Exception { this . controlContext = controlContext ; fillContextDefaults ( this . controlContext ) ; fillContextProperties ( this . controlContext ) ; Template template = getTemplate ( controlTemplate , inputEncoding ) ; StringWriter sw = new StringWriter ( ) ; template . merge ( controlContext , sw ) ; return sw . toString ( ) ; } protected Context getContext ( Hashtable objs ) { fillContextHash ( controlContext , objs ) ; return controlContext ; } protected void fillContextHash ( Context context , Hashtable objs ) { Enumeration enumeration = objs . keys ( ) ; while ( enumeration . hasMoreElements ( ) ) { String key = enumeration . nextElement ( ) . toString ( ) ; context . put ( key , objs . get ( key ) ) ; } } protected void fillContextDefaults ( Context context ) { context . put ( "generator" , instance ) ; context . put ( "outputDirectory" , getOutputPath ( ) ) ; } protected void fillContextProperties ( Context context ) { Enumeration enumeration = props . propertyNames ( ) ; while ( enumeration . hasMoreElements ( ) ) { String nm = ( String ) enumeration . nextElement ( ) ; if ( nm . startsWith ( "context.objects." ) ) { String contextObj = props . getProperty ( nm ) ; int colon = nm . lastIndexOf ( '.' ) ; String contextName = nm . substring ( colon + 1 ) ; try { Object o = ClassUtils . getNewInstance ( contextObj ) ; context . put ( contextName , o ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; } } } } public void shutdown ( ) { Iterator iterator = writers . values ( ) . iterator ( ) ; while ( iterator . hasNext ( ) ) { Writer writer = ( Writer ) iterator . next ( ) ; try { writer . flush ( ) ; } catch ( IOException e ) { } try { writer . close ( ) ; } catch ( IOException e ) { } } writers . clear ( ) ; } } 	0	['25', '1', '0', '7', '78', '194', '2', '5', '17', '0.878787879', '530', '0.727272727', '3', '0', '0.261904762', '0', '0', '19.76', '3', '1.04', '0']
package org . apache . velocity . util ; import java . util . Iterator ; import java . util . NoSuchElementException ; import java . lang . reflect . Array ; public class ArrayIterator implements Iterator { private Object array ; private int pos ; private int size ; public ArrayIterator ( Object array ) { if ( ! array . getClass ( ) . isArray ( ) ) { throw new IllegalArgumentException ( "Programmer error : internal ArrayIterator invoked w/o array" ) ; } this . array = array ; pos = 0 ; size = Array . getLength ( this . array ) ; } public Object next ( ) { if ( pos < size ) return Array . get ( array , pos ++ ) ; throw new NoSuchElementException ( "No more elements: " + pos + " / " + size ) ; } public boolean hasNext ( ) { return ( pos < size ) ; } public void remove ( ) { throw new UnsupportedOperationException ( ) ; } } 	0	['4', '1', '0', '1', '16', '0', '1', '0', '4', '0.444444444', '77', '1', '0', '0', '0.625', '0', '0', '17.5', '2', '1.25', '0']
package org . apache . velocity . anakia ; import org . jdom . Element ; import org . jdom . Namespace ; import org . jdom . DefaultJDOMFactory ; public class AnakiaJDOMFactory extends DefaultJDOMFactory { public AnakiaJDOMFactory ( ) { } public Element element ( String name , Namespace namespace ) { return new AnakiaElement ( name , namespace ) ; } public Element element ( String name ) { return new AnakiaElement ( name ) ; } public Element element ( String name , String uri ) { return new AnakiaElement ( name , uri ) ; } public Element element ( String name , String prefix , String uri ) { return new AnakiaElement ( name , prefix , uri ) ; } } 	0	['5', '2', '0', '5', '10', '10', '1', '4', '5', '2', '32', '0', '0', '0.862068966', '0.666666667', '0', '0', '5.4', '1', '0.8', '0']
package org . apache . velocity . app . tools ; import java . lang . reflect . Array ; import java . text . DateFormat ; import java . util . Date ; import java . util . List ; import org . apache . velocity . context . Context ; public class VelocityFormatter { Context context = null ; public VelocityFormatter ( Context context ) { this . context = context ; } public String formatShortDate ( Date date ) { return DateFormat . getDateInstance ( DateFormat . SHORT ) . format ( date ) ; } public String formatLongDate ( Date date ) { return DateFormat . getDateInstance ( DateFormat . LONG ) . format ( date ) ; } public String formatShortDateTime ( Date date ) { return DateFormat . getDateTimeInstance ( DateFormat . SHORT , DateFormat . SHORT ) . format ( date ) ; } public String formatLongDateTime ( Date date ) { return DateFormat . getDateTimeInstance ( DateFormat . LONG , DateFormat . LONG ) . format ( date ) ; } public String formatArray ( Object array ) { return formatArray ( array , ", " , " and " ) ; } public String formatArray ( Object array , String delim ) { return formatArray ( array , delim , delim ) ; } public String formatArray ( Object array , String delim , String finaldelim ) { StringBuffer sb = new StringBuffer ( ) ; int arrayLen = Array . getLength ( array ) ; for ( int i = 0 ; i < arrayLen ; i ++ ) { sb . append ( Array . get ( array , i ) . toString ( ) ) ; if ( i < arrayLen - 2 ) { sb . append ( delim ) ; } else if ( i < arrayLen - 1 ) { sb . append ( finaldelim ) ; } } return sb . toString ( ) ; } public String formatVector ( List list ) { return formatVector ( list , ", " , " and " ) ; } public String formatVector ( List list , String delim ) { return formatVector ( list , delim , delim ) ; } public String formatVector ( List list , String delim , String finaldelim ) { StringBuffer sb = new StringBuffer ( ) ; int size = list . size ( ) ; for ( int i = 0 ; i < size ; i ++ ) { sb . append ( list . get ( i ) ) ; if ( i < size - 2 ) { sb . append ( delim ) ; } else if ( i < size - 1 ) { sb . append ( finaldelim ) ; } } return sb . toString ( ) ; } public String limitLen ( int maxlen , String string ) { return limitLen ( maxlen , string , "..." ) ; } public String limitLen ( int maxlen , String string , String suffix ) { String ret = string ; if ( string . length ( ) > maxlen ) { ret = string . substring ( 0 , maxlen - suffix . length ( ) ) + suffix ; } return ret ; } public class VelocityAlternator { protected String [ ] alternates = null ; protected int current = 0 ; public VelocityAlternator ( String [ ] alternates ) { this . alternates = alternates ; } public String alternate ( ) { current ++ ; current %= alternates . length ; return "" ; } public String toString ( ) { return alternates [ current ] ; } } public class VelocityAutoAlternator extends VelocityAlternator { public VelocityAutoAlternator ( String [ ] alternates ) { super ( alternates ) ; } public final String toString ( ) { String s = alternates [ current ] ; alternate ( ) ; return s ; } } public String makeAlternator ( String name , String alt1 , String alt2 ) { String [ ] alternates = { alt1 , alt2 } ; context . put ( name , new VelocityAlternator ( alternates ) ) ; return "" ; } public String makeAlternator ( String name , String alt1 , String alt2 , String alt3 ) { String [ ] alternates = { alt1 , alt2 , alt3 } ; context . put ( name , new VelocityAlternator ( alternates ) ) ; return "" ; } public String makeAlternator ( String name , String alt1 , String alt2 , String alt3 , String alt4 ) { String [ ] alternates = { alt1 , alt2 , alt3 , alt4 } ; context . put ( name , new VelocityAlternator ( alternates ) ) ; return "" ; } public String makeAutoAlternator ( String name , String alt1 , String alt2 ) { String [ ] alternates = { alt1 , alt2 } ; context . put ( name , new VelocityAutoAlternator ( alternates ) ) ; return "" ; } public Object isNull ( Object o , Object dflt ) { if ( o == null ) { return dflt ; } else { return o ; } } } 	0	['18', '1', '0', '3', '36', '133', '2', '3', '18', '0.764705882', '298', '0', '1', '0', '0.333333333', '0', '0', '15.5', '4', '1.3889', '0']
package org . apache . velocity . anakia ; import java . io . BufferedWriter ; import java . io . File ; import java . io . FileOutputStream ; import java . io . IOException ; import java . io . OutputStreamWriter ; import java . io . Writer ; import java . util . Iterator ; import java . util . LinkedList ; import java . util . List ; import java . util . StringTokenizer ; import org . apache . commons . collections . ExtendedProperties ; import org . apache . tools . ant . BuildException ; import org . apache . tools . ant . DirectoryScanner ; import org . apache . tools . ant . Project ; import org . apache . tools . ant . taskdefs . MatchingTask ; import org . apache . velocity . Template ; import org . apache . velocity . VelocityContext ; import org . apache . velocity . app . VelocityEngine ; import org . apache . velocity . runtime . RuntimeConstants ; import org . apache . velocity . util . StringUtils ; import org . jdom . Document ; import org . jdom . JDOMException ; import org . jdom . input . SAXBuilder ; import org . jdom . output . Format ; import org . xml . sax . SAXParseException ; public class AnakiaTask extends MatchingTask { SAXBuilder builder ; private File destDir = null ; File baseDir = null ; private String style = null ; private long styleSheetLastModified = 0 ; private String projectAttribute = null ; private File projectFile = null ; private long projectFileLastModified = 0 ; private boolean lastModifiedCheck = true ; private String extension = ".html" ; private String templatePath = null ; private File velocityPropertiesFile = null ; private VelocityEngine ve = new VelocityEngine ( ) ; private List contexts = new LinkedList ( ) ; public AnakiaTask ( ) { builder = new SAXBuilder ( ) ; builder . setFactory ( new AnakiaJDOMFactory ( ) ) ; } public void setBasedir ( File dir ) { baseDir = dir ; } public void setDestdir ( File dir ) { destDir = dir ; } public void setExtension ( String extension ) { this . extension = extension ; } public void setStyle ( String style ) { this . style = style ; } public void setProjectFile ( String projectAttribute ) { this . projectAttribute = projectAttribute ; } public void setTemplatePath ( File templatePath ) { try { this . templatePath = templatePath . getCanonicalPath ( ) ; } catch ( java . io . IOException ioe ) { throw new BuildException ( ioe ) ; } } public void setVelocityPropertiesFile ( File velocityPropertiesFile ) { this . velocityPropertiesFile = velocityPropertiesFile ; } public void setLastModifiedCheck ( String lastmod ) { if ( lastmod . equalsIgnoreCase ( "false" ) || lastmod . equalsIgnoreCase ( "no" ) || lastmod . equalsIgnoreCase ( "off" ) ) { this . lastModifiedCheck = false ; } } public void execute ( ) throws BuildException { DirectoryScanner scanner ; String [ ] list ; if ( baseDir == null ) { baseDir = project . resolveFile ( "." ) ; } if ( destDir == null ) { String msg = "destdir attribute must be set!" ; throw new BuildException ( msg ) ; } if ( style == null ) { throw new BuildException ( "style attribute must be set!" ) ; } if ( velocityPropertiesFile == null ) { velocityPropertiesFile = new File ( "velocity.properties" ) ; } if ( ! velocityPropertiesFile . exists ( ) && templatePath == null ) { throw new BuildException ( "No template path and could not " + "locate velocity.properties file: " + velocityPropertiesFile . getAbsolutePath ( ) ) ; } log ( "Transforming into: " + destDir . getAbsolutePath ( ) , Project . MSG_INFO ) ; if ( projectAttribute != null && projectAttribute . length ( ) > 0 ) { projectFile = new File ( baseDir , projectAttribute ) ; if ( projectFile . exists ( ) ) { projectFileLastModified = projectFile . lastModified ( ) ; } else { log ( "Project file is defined, but could not be located: " + projectFile . getAbsolutePath ( ) , Project . MSG_INFO ) ; projectFile = null ; } } Document projectDocument = null ; try { if ( velocityPropertiesFile . exists ( ) ) { String file = velocityPropertiesFile . getAbsolutePath ( ) ; ExtendedProperties config = new ExtendedProperties ( file ) ; ve . setExtendedProperties ( config ) ; } if ( templatePath != null && templatePath . length ( ) > 0 ) { ve . setProperty ( RuntimeConstants . FILE_RESOURCE_LOADER_PATH , templatePath ) ; } ve . init ( ) ; styleSheetLastModified = ve . getTemplate ( style ) . getLastModified ( ) ; if ( projectFile != null ) { projectDocument = builder . build ( projectFile ) ; } } catch ( Exception e ) { log ( "Error: " + e . toString ( ) , Project . MSG_INFO ) ; throw new BuildException ( e ) ; } scanner = getDirectoryScanner ( baseDir ) ; list = scanner . getIncludedFiles ( ) ; for ( int i = 0 ; i < list . length ; ++ i ) { process ( list [ i ] , projectDocument ) ; } } private void process ( String xmlFile , Document projectDocument ) throws BuildException { File outFile = null ; File inFile = null ; Writer writer = null ; try { inFile = new File ( baseDir , xmlFile ) ; outFile = new File ( destDir , xmlFile . substring ( 0 , xmlFile . lastIndexOf ( '.' ) ) + extension ) ; if ( lastModifiedCheck == false || ( inFile . lastModified ( ) > outFile . lastModified ( ) || styleSheetLastModified > outFile . lastModified ( ) || projectFileLastModified > outFile . lastModified ( ) || userContextsModifed ( outFile . lastModified ( ) ) ) ) { ensureDirectoryFor ( outFile ) ; log ( "Input:  " + xmlFile , Project . MSG_INFO ) ; Document root = builder . build ( inFile ) ; VelocityContext context = new VelocityContext ( ) ; String encoding = ( String ) ve . getProperty ( RuntimeConstants . OUTPUT_ENCODING ) ; if ( encoding == null || encoding . length ( ) == 0 || encoding . equals ( "8859-1" ) || encoding . equals ( "8859_1" ) ) { encoding = "ISO-8859-1" ; } Format f = Format . getRawFormat ( ) ; f . setEncoding ( encoding ) ; OutputWrapper ow = new OutputWrapper ( f ) ; context . put ( "root" , root . getRootElement ( ) ) ; context . put ( "xmlout" , ow ) ; context . put ( "relativePath" , getRelativePath ( xmlFile ) ) ; context . put ( "treeWalk" , new TreeWalker ( ) ) ; context . put ( "xpath" , new XPathTool ( ) ) ; context . put ( "escape" , new Escape ( ) ) ; context . put ( "date" , new java . util . Date ( ) ) ; if ( projectDocument != null ) { context . put ( "project" , projectDocument . getRootElement ( ) ) ; } for ( Iterator iter = contexts . iterator ( ) ; iter . hasNext ( ) ; ) { Context subContext = ( Context ) iter . next ( ) ; if ( subContext == null ) { throw new BuildException ( "Found an undefined SubContext!" ) ; } if ( subContext . getContextDocument ( ) == null ) { throw new BuildException ( "Could not build a subContext for " + subContext . getName ( ) ) ; } context . put ( subContext . getName ( ) , subContext . getContextDocument ( ) . getRootElement ( ) ) ; } writer = new BufferedWriter ( new OutputStreamWriter ( new FileOutputStream ( outFile ) , encoding ) ) ; Template template = ve . getTemplate ( style ) ; template . merge ( context , writer ) ; log ( "Output: " + outFile , Project . MSG_INFO ) ; } } catch ( JDOMException e ) { outFile . delete ( ) ; if ( e . getCause ( ) != null ) { Throwable rootCause = e . getCause ( ) ; if ( rootCause instanceof SAXParseException ) { System . out . println ( "" ) ; System . out . println ( "Error: " + rootCause . getMessage ( ) ) ; System . out . println ( "       Line: " + ( ( SAXParseException ) rootCause ) . getLineNumber ( ) + " Column: " + ( ( SAXParseException ) rootCause ) . getColumnNumber ( ) ) ; System . out . println ( "" ) ; } else { rootCause . printStackTrace ( ) ; } } else { e . printStackTrace ( ) ; } } catch ( Throwable e ) { if ( outFile != null ) { outFile . delete ( ) ; } e . printStackTrace ( ) ; } finally { if ( writer != null ) { try { writer . flush ( ) ; } catch ( IOException e ) { } try { writer . close ( ) ; } catch ( IOException e ) { } } } } private String getRelativePath ( String file ) { if ( file == null || file . length ( ) == 0 ) return "" ; StringTokenizer st = new StringTokenizer ( file , "/\\" ) ; int slashCount = st . countTokens ( ) - 1 ; StringBuffer sb = new StringBuffer ( ) ; for ( int i = 0 ; i < slashCount ; i ++ ) { sb . append ( "../" ) ; } if ( sb . toString ( ) . length ( ) > 0 ) { return StringUtils . chop ( sb . toString ( ) , 1 ) ; } return "." ; } private void ensureDirectoryFor ( File targetFile ) throws BuildException { File directory = new File ( targetFile . getParent ( ) ) ; if ( ! directory . exists ( ) ) { if ( ! directory . mkdirs ( ) ) { throw new BuildException ( "Unable to create directory: " + directory . getAbsolutePath ( ) ) ; } } } private boolean userContextsModifed ( long lastModified ) { for ( Iterator iter = contexts . iterator ( ) ; iter . hasNext ( ) ; ) { AnakiaTask . Context ctx = ( AnakiaTask . Context ) iter . next ( ) ; if ( ctx . getLastModified ( ) > lastModified ) { return true ; } } return false ; } public Context createContext ( ) { Context context = new Context ( ) ; contexts . add ( context ) ; return context ; } public class Context { private String name ; private Document contextDoc = null ; private String file ; public Context ( ) { } public String getName ( ) { return name ; } public void setName ( String name ) { if ( name . equals ( "relativePath" ) || name . equals ( "treeWalk" ) || name . equals ( "xpath" ) || name . equals ( "escape" ) || name . equals ( "date" ) || name . equals ( "project" ) ) { throw new IllegalArgumentException ( "Context name '" + name + "' is reserved by Anakia" ) ; } this . name = name ; } public void setFile ( String file ) { this . file = file ; } public long getLastModified ( ) { return new File ( baseDir , file ) . lastModified ( ) ; } public Document getContextDocument ( ) { if ( contextDoc == null ) { File contextFile = new File ( baseDir , file ) ; try { contextDoc = builder . build ( contextFile ) ; } catch ( Exception e ) { throw new BuildException ( e ) ; } } return contextDoc ; } } } 	0	['15', '4', '0', '22', '89', '51', '1', '22', '11', '0.826530612', '776', '0.857142857', '1', '0.847826087', '0.373333333', '2', '2', '49.8', '5', '1.4667', '0']
package org . apache . velocity . context ; public interface InternalContextAdapter extends InternalHousekeepingContext , Context , InternalWrapperContext , InternalEventContext { } 	0	['0', '1', '0', '61', '0', '0', '58', '4', '0', '2', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0']
package org . apache . velocity . runtime . parser . node ; import org . apache . velocity . runtime . parser . Parser ; import org . apache . velocity . runtime . parser . ParserVisitor ; public class ASTWord extends SimpleNode { public ASTWord ( int id ) { super ( id ) ; } public ASTWord ( Parser p , int id ) { super ( p , id ) ; } public Object jjtAccept ( ParserVisitor visitor , Object data ) { return visitor . visit ( this , data ) ; } } 	0	['3', '2', '0', '5', '6', '3', '4', '3', '3', '2', '17', '0', '0', '0.965517241', '0.533333333', '0', '0', '4.666666667', '1', '0.3333', '0']
package org . apache . velocity . runtime . parser . node ; import java . io . Writer ; import java . io . IOException ; import org . apache . velocity . context . InternalContextAdapter ; import org . apache . velocity . exception . TemplateInitException ; import org . apache . velocity . runtime . parser . Parser ; import org . apache . velocity . runtime . parser . ParserVisitor ; import org . apache . velocity . runtime . parser . Token ; public class ASTText extends SimpleNode { private char [ ] ctext ; public ASTText ( int id ) { super ( id ) ; } public ASTText ( Parser p , int id ) { super ( p , id ) ; } public Object jjtAccept ( ParserVisitor visitor , Object data ) { return visitor . visit ( this , data ) ; } public Object init ( InternalContextAdapter context , Object data ) throws TemplateInitException { Token t = getFirstToken ( ) ; String text = NodeUtils . tokenLiteral ( t ) ; ctext = text . toCharArray ( ) ; return data ; } public boolean render ( InternalContextAdapter context , Writer writer ) throws IOException { if ( context . getAllowRendering ( ) ) { writer . write ( ctext ) ; } return true ; } } 	0	['5', '2', '0', '9', '13', '8', '4', '7', '5', '0.75', '41', '1', '0', '0.903225806', '0.4', '0', '0', '7', '1', '0.6', '0']
package org . apache . velocity . runtime . resource ; import org . apache . velocity . runtime . RuntimeServices ; import org . apache . velocity . exception . ResourceNotFoundException ; import org . apache . velocity . exception . ParseErrorException ; public interface ResourceManager { public static final int RESOURCE_TEMPLATE = 1 ; public static final int RESOURCE_CONTENT = 2 ; public void initialize ( RuntimeServices rs ) throws Exception ; public Resource getResource ( String resourceName , int resourceType , String encoding ) throws ResourceNotFoundException , ParseErrorException , Exception ; public String getLoaderNameForResource ( String resourceName ) ; } 	0	['3', '1', '0', '6', '3', '3', '2', '4', '3', '1.5', '5', '0', '0', '0', '0.583333333', '0', '0', '0', '1', '1', '0']
package org . apache . velocity . runtime . parser . node ; import org . apache . velocity . context . InternalContextAdapter ; import org . apache . velocity . exception . MethodInvocationException ; import org . apache . velocity . runtime . parser . Parser ; import org . apache . velocity . runtime . parser . ParserVisitor ; public class ASTNotNode extends SimpleNode { public ASTNotNode ( int id ) { super ( id ) ; } public ASTNotNode ( Parser p , int id ) { super ( p , id ) ; } public Object jjtAccept ( ParserVisitor visitor , Object data ) { return visitor . visit ( this , data ) ; } public boolean evaluate ( InternalContextAdapter context ) throws MethodInvocationException { if ( jjtGetChild ( 0 ) . evaluate ( context ) ) return false ; else return true ; } public Object value ( InternalContextAdapter context ) throws MethodInvocationException { return ( jjtGetChild ( 0 ) . evaluate ( context ) ? Boolean . FALSE : Boolean . TRUE ) ; } } 	0	['5', '2', '0', '8', '10', '10', '4', '6', '5', '2', '39', '0', '0', '0.903225806', '0.4', '1', '2', '6.8', '1', '0.6', '0']
package org . apache . velocity . anakia ; import com . werken . xpath . XPath ; import java . util . Map ; import java . util . WeakHashMap ; class XPathCache { private static final Map XPATH_CACHE = new WeakHashMap ( ) ; private XPathCache ( ) { } static XPath getXPath ( String xpathString ) { XPath xpath = null ; synchronized ( XPATH_CACHE ) { xpath = ( XPath ) XPATH_CACHE . get ( xpathString ) ; if ( xpath == null ) { xpath = new XPath ( xpathString ) ; XPATH_CACHE . put ( xpathString , xpath ) ; } } return xpath ; } } 	0	['3', '1', '0', '4', '8', '1', '3', '1', '0', '0.5', '45', '1', '0', '0', '0.5', '0', '0', '13.66666667', '2', '0.6667', '0']
package org . apache . velocity . runtime . log ; public class Log4JLogSystem extends Log4JLogChute implements LogSystem { public void logVelocityMessage ( int level , String message ) { log ( level , message ) ; } } 	0	['2', '2', '0', '2', '4', '1', '0', '2', '2', '2', '10', '0', '0', '0.888888889', '0.666666667', '0', '0', '4', '1', '0.5', '0']
package org . apache . velocity . util . introspection ; public interface VelMethod { public Object invoke ( Object o , Object [ ] params ) throws Exception ; public boolean isCacheable ( ) ; public String getMethodName ( ) ; public Class getReturnType ( ) ; } 	0	['4', '1', '0', '4', '4', '6', '4', '0', '4', '2', '4', '0', '0', '0', '0.5', '0', '0', '0', '1', '1', '0']
package org . apache . velocity . convert ; import java . io . File ; import java . io . FileWriter ; import java . io . IOException ; import org . apache . oro . text . perl . Perl5Util ; import org . apache . velocity . util . StringUtils ; import org . apache . tools . ant . DirectoryScanner ; public class WebMacro { protected static final String VM_EXT = ".vm" ; protected static final String WM_EXT = ".wm" ; protected static String [ ] perLineREs = { "#if\\s*[(]\\s*(.*\\S)\\s*[)]\\s*(#begin|{)[ \\t]?" , "#if( $1 )" , "[ \\t]?(#end|})[ \\t]*\n(\\s*)#else\\s*(#begin|{)[ \\t]?(\\w)" , "$2#else#**#$4" , "[ \\t]?(#end|})[ \\t]*\n(\\s*)#else\\s*(#begin|{)[ \\t]?" , "$2#else" , "(#end|})(\\s*#else)\\s*(#begin|{)[ \\t]?" , "$1\n$2" , "#foreach\\s+(\\$\\w+)\\s+in\\s+(\\$[^\\s#]+)\\s*(#begin|{)[ \\t]?" , "#foreach( $1 in $2 )" , "#set\\s+(\\$[^\\s=]+)\\s*=\\s*([\\S \\t]+)" , "#set( $1 = $2 )" , "(##[# \\t\\w]*)\\)" , ")$1" , "#parse\\s+([^\\s#]+)[ \\t]?" , "#parse( $1 )" , "#include\\s+([^\\s#]+)[ \\t]?" , "#include( $1 )" , "\\$\\(([^\\)]+)\\)" , "${$1}" , "\\${([^}\\(]+)\\(([^}]+)}\\)" , "${$1($2)}" , "\\$_" , "$l_" , "\\${(_[^}]+)}" , "${l$1}" , "(#set\\s*\\([^;]+);(\\s*\\))" , "$1$2" , "(^|[^\\\\])\\$(\\w[^=\n;'\"]*);" , "$1${$2}" , "\\.wm" , ".vm" } ; public void convert ( String target ) { File file = new File ( target ) ; if ( ! file . exists ( ) ) { throw new RuntimeException ( "The specified template or directory does not exist" ) ; } if ( file . isDirectory ( ) ) { String basedir = file . getAbsolutePath ( ) ; String newBasedir = basedir + VM_EXT ; DirectoryScanner ds = new DirectoryScanner ( ) ; ds . setBasedir ( basedir ) ; ds . addDefaultExcludes ( ) ; ds . scan ( ) ; String [ ] files = ds . getIncludedFiles ( ) ; for ( int i = 0 ; i < files . length ; i ++ ) { writeTemplate ( files [ i ] , basedir , newBasedir ) ; } } else { writeTemplate ( file . getAbsolutePath ( ) , "" , "" ) ; } } private boolean writeTemplate ( String file , String basedir , String newBasedir ) { if ( file . indexOf ( WM_EXT ) < 0 ) { return false ; } System . out . println ( "Converting " + file + "..." ) ; String template = file ; String newTemplate = convertName ( file ) ; if ( basedir . length ( ) > 0 ) { String templateDir = newBasedir + extractPath ( file ) ; File outputDirectory = new File ( templateDir ) ; template = basedir + File . separator + file ; if ( ! outputDirectory . exists ( ) ) { outputDirectory . mkdirs ( ) ; } newTemplate = newBasedir + File . separator + convertName ( file ) ; } String convertedTemplate = convertTemplate ( template ) ; FileWriter fw = null ; try { fw = new FileWriter ( newTemplate ) ; fw . write ( convertedTemplate ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; } finally { if ( fw != null ) { try { fw . close ( ) ; } catch ( IOException io ) { } } } return true ; } private final String extractPath ( String file ) { int lastSepPos = file . lastIndexOf ( File . separator ) ; return ( lastSepPos == - 1 ? "" : File . separator + file . substring ( 0 , lastSepPos ) ) ; } private String convertName ( String name ) { return ( name . indexOf ( WM_EXT ) < 0 ) ? name : name . substring ( 0 , name . indexOf ( WM_EXT ) ) + VM_EXT ; } private static final void usage ( ) { System . err . println ( "Usage: convert-wm <template.wm | directory>" ) ; } public String convertTemplate ( String template ) { String contents = StringUtils . fileContentsToString ( template ) ; if ( ! contents . endsWith ( "\n" ) ) { contents += "\n" ; } Perl5Util perl = new Perl5Util ( ) ; for ( int i = 0 ; i < perLineREs . length ; i += 2 ) { contents = perl . substitute ( makeSubstRE ( i ) , contents ) ; } if ( perl . match ( "m/javascript/i" , contents ) ) { contents = perl . substitute ( "s/\n}/\n#end/g" , contents ) ; } else { contents = perl . substitute ( "s/(\n\\s*)}/$1#end/g" , contents ) ; contents = perl . substitute ( "s/#end\\s*\n\\s*#else/#else/g" , contents ) ; } return contents ; } private final String makeSubstRE ( int i ) { return ( "s/" + perLineREs [ i ] + '/' + perLineREs [ i + 1 ] + "/g" ) ; } public static void main ( String [ ] args ) { if ( args . length > 0 ) { for ( int x = 0 ; x < args . length ; x ++ ) { WebMacro converter = new WebMacro ( ) ; converter . convert ( args [ x ] ) ; } } else { usage ( ) ; } } } 	0	['10', '1', '0', '3', '40', '39', '0', '3', '4', '0.962962963', '470', '1', '0', '0', '0.388888889', '0', '0', '45.7', '8', '2.3', '0']
package org . apache . velocity . runtime . parser . node ; import java . io . Writer ; import java . io . IOException ; import org . apache . velocity . context . InternalContextAdapter ; import org . apache . velocity . runtime . parser . Parser ; import org . apache . velocity . runtime . parser . ParserVisitor ; public class ASTEscape extends SimpleNode { public String val ; private char [ ] ctext ; public ASTEscape ( int id ) { super ( id ) ; } public ASTEscape ( Parser p , int id ) { super ( p , id ) ; } public Object jjtAccept ( ParserVisitor visitor , Object data ) { return visitor . visit ( this , data ) ; } public Object init ( InternalContextAdapter context , Object data ) { ctext = val . toCharArray ( ) ; return data ; } public boolean render ( InternalContextAdapter context , Writer writer ) throws IOException { if ( context . getAllowRendering ( ) ) { writer . write ( ctext ) ; } return true ; } } 	0	['5', '2', '0', '6', '11', '8', '4', '4', '5', '0.875', '37', '0.5', '0', '0.903225806', '0.4', '0', '0', '6', '1', '0.6', '0']
package org . apache . velocity . util . introspection ; public interface VelPropertyGet { public Object invoke ( Object o ) throws Exception ; public boolean isCacheable ( ) ; public String getMethodName ( ) ; } 	0	['3', '1', '0', '4', '3', '3', '4', '0', '3', '2', '3', '0', '0', '0', '0.666666667', '0', '0', '0', '1', '1', '0']
package org . apache . velocity . runtime . parser . node ; import org . apache . velocity . runtime . parser . Parser ; import org . apache . velocity . runtime . parser . ParserVisitor ; public class ASTIncludeStatement extends SimpleNode { public ASTIncludeStatement ( int id ) { super ( id ) ; } public ASTIncludeStatement ( Parser p , int id ) { super ( p , id ) ; } public Object jjtAccept ( ParserVisitor visitor , Object data ) { return visitor . visit ( this , data ) ; } } 	0	['3', '2', '0', '3', '6', '3', '0', '3', '3', '2', '17', '0', '0', '0.965517241', '0.533333333', '0', '0', '4.666666667', '1', '0.3333', '0']
package org . apache . velocity . runtime . parser . node ; import org . apache . velocity . runtime . parser . Parser ; import org . apache . velocity . runtime . parser . ParserVisitor ; public class ASTAssignment extends SimpleNode { public ASTAssignment ( int id ) { super ( id ) ; } public ASTAssignment ( Parser p , int id ) { super ( p , id ) ; } public Object jjtAccept ( ParserVisitor visitor , Object data ) { return visitor . visit ( this , data ) ; } } 	0	['3', '2', '0', '5', '6', '3', '4', '3', '3', '2', '17', '0', '0', '0.965517241', '0.533333333', '0', '0', '4.666666667', '1', '0.3333', '0']
package org . apache . velocity . runtime . parser . node ; import java . io . Writer ; import java . io . IOException ; import org . apache . velocity . context . InternalContextAdapter ; import org . apache . velocity . runtime . parser . Parser ; import org . apache . velocity . runtime . parser . ParserVisitor ; import org . apache . velocity . exception . MethodInvocationException ; import org . apache . velocity . exception . ParseErrorException ; import org . apache . velocity . exception . ResourceNotFoundException ; public class ASTBlock extends SimpleNode { public ASTBlock ( int id ) { super ( id ) ; } public ASTBlock ( Parser p , int id ) { super ( p , id ) ; } public Object jjtAccept ( ParserVisitor visitor , Object data ) { return visitor . visit ( this , data ) ; } public boolean render ( InternalContextAdapter context , Writer writer ) throws IOException , MethodInvocationException , ResourceNotFoundException , ParseErrorException { int i , k = jjtGetNumChildren ( ) ; for ( i = 0 ; i < k ; i ++ ) jjtGetChild ( i ) . render ( context , writer ) ; return true ; } } 	0	['4', '2', '0', '10', '10', '6', '4', '8', '4', '2', '37', '0', '0', '0.933333333', '0.392857143', '1', '1', '8.25', '1', '0.5', '0']
package org . apache . velocity . runtime . parser . node ; import java . io . IOException ; import java . io . Writer ; import org . apache . velocity . context . InternalContextAdapter ; import org . apache . velocity . exception . MethodInvocationException ; import org . apache . velocity . exception . ParseErrorException ; import org . apache . velocity . exception . ResourceNotFoundException ; import org . apache . velocity . runtime . parser . Parser ; import org . apache . velocity . runtime . parser . ParserVisitor ; public class ASTElseIfStatement extends SimpleNode { public ASTElseIfStatement ( int id ) { super ( id ) ; } public ASTElseIfStatement ( Parser p , int id ) { super ( p , id ) ; } public Object jjtAccept ( ParserVisitor visitor , Object data ) { return visitor . visit ( this , data ) ; } public boolean evaluate ( InternalContextAdapter context ) throws MethodInvocationException { return jjtGetChild ( 0 ) . evaluate ( context ) ; } public boolean render ( InternalContextAdapter context , Writer writer ) throws IOException , MethodInvocationException , ResourceNotFoundException , ParseErrorException { return jjtGetChild ( 1 ) . render ( context , writer ) ; } } 	0	['5', '2', '0', '10', '11', '10', '4', '8', '5', '2', '32', '0', '0', '0.903225806', '0.371428571', '1', '2', '5.4', '1', '0.6', '0']
package org . apache . velocity . runtime . log ; public class AvalonLogSystem extends AvalonLogChute implements LogSystem { public void logVelocityMessage ( int level , String message ) { log ( level , message ) ; } } 	0	['2', '2', '0', '2', '4', '1', '0', '2', '2', '2', '10', '0', '0', '0.888888889', '0.666666667', '0', '0', '4', '1', '0.5', '0']
package org . apache . velocity . runtime . log ; import org . apache . velocity . runtime . RuntimeServices ; public interface LogSystem { public final static boolean DEBUG_ON = true ; public final static int DEBUG_ID = 0 ; public final static int INFO_ID = 1 ; public final static int WARN_ID = 2 ; public final static int ERROR_ID = 3 ; public void init ( RuntimeServices rs ) throws Exception ; public void logVelocityMessage ( int level , String message ) ; } 	0	['2', '1', '0', '8', '2', '1', '7', '1', '2', '2', '7', '0', '0', '0', '0.625', '0', '0', '0', '1', '1', '0']
package org . apache . velocity . texen . util ; import java . io . File ; public class FileUtil { static public String mkdir ( String s ) { try { if ( ( new File ( s ) ) . mkdirs ( ) ) return "Created dir: " + s ; else return "Failed to create dir or dir already exists: " + s ; } catch ( Exception e ) { return e . toString ( ) ; } } public static File file ( String s ) { File f = new File ( s ) ; return f ; } public static File file ( String base , String s ) { File f = new File ( base , s ) ; return f ; } } 	0	['4', '1', '0', '0', '12', '6', '0', '0', '4', '2', '50', '0', '0', '0', '0.5', '0', '0', '11.5', '2', '1', '0']
package org . apache . velocity . texen . util ; import java . io . FileInputStream ; import java . io . InputStream ; import java . util . Properties ; import java . util . StringTokenizer ; import org . apache . velocity . texen . Generator ; public class PropertiesUtil { public Properties load ( final String propertiesFile ) { Properties properties = null ; String templatePath = Generator . getInstance ( ) . getTemplatePath ( ) ; try { if ( templatePath != null ) { properties = loadFromTemplatePath ( propertiesFile ) ; } else { properties = loadFromClassPath ( propertiesFile ) ; } } catch ( RuntimeException e ) { throw e ; } catch ( Exception e ) { throw new RuntimeException ( "Could not load properties: " + e . getMessage ( ) ) ; } return properties ; } protected Properties loadFromTemplatePath ( final String propertiesFile ) throws Exception { Properties properties = new Properties ( ) ; String templatePath = Generator . getInstance ( ) . getTemplatePath ( ) ; StringTokenizer st = new StringTokenizer ( templatePath , "," ) ; while ( st . hasMoreTokens ( ) ) { String templateDir = st . nextToken ( ) ; InputStream stream = null ; try { String fullPath = propertiesFile ; if ( ! fullPath . startsWith ( templateDir ) ) { fullPath = templateDir + "/" + propertiesFile ; } stream = new FileInputStream ( fullPath ) ; properties . load ( stream ) ; break ; } finally { if ( stream != null ) { stream . close ( ) ; } } } return properties ; } protected Properties loadFromClassPath ( final String propertiesName ) throws Exception { Properties properties = new Properties ( ) ; ClassLoader classLoader = this . getClass ( ) . getClassLoader ( ) ; InputStream inputStream = null ; try { String propertiesFile = propertiesName . startsWith ( "$generator" ) ? propertiesName . substring ( "$generator.templatePath/" . length ( ) ) : propertiesName ; inputStream = classLoader . getResourceAsStream ( propertiesFile ) ; properties . load ( inputStream ) ; } finally { if ( inputStream != null ) { inputStream . close ( ) ; } } return properties ; } } 	0	['4', '1', '0', '1', '25', '6', '0', '1', '2', '2', '145', '0', '0', '0', '0.875', '0', '0', '35.25', '2', '1', '0']
package org . apache . velocity . runtime . parser . node ; import java . io . Writer ; import java . io . IOException ; import org . apache . velocity . context . InternalContextAdapter ; import org . apache . velocity . runtime . parser . Parser ; import org . apache . velocity . runtime . parser . ParserVisitor ; public class ASTEscapedDirective extends SimpleNode { public ASTEscapedDirective ( int id ) { super ( id ) ; } public ASTEscapedDirective ( Parser p , int id ) { super ( p , id ) ; } public Object jjtAccept ( ParserVisitor visitor , Object data ) { return visitor . visit ( this , data ) ; } public boolean render ( InternalContextAdapter context , Writer writer ) throws IOException { if ( context . getAllowRendering ( ) ) { writer . write ( getFirstToken ( ) . image ) ; } return true ; } } 	0	['4', '2', '0', '7', '10', '6', '4', '5', '4', '2', '28', '0', '0', '0.933333333', '0.392857143', '0', '0', '6', '1', '0.5', '0']
package org . apache . velocity ; import java . util . HashMap ; import java . util . Map ; import org . apache . velocity . context . AbstractContext ; import org . apache . velocity . context . Context ; public class VelocityContext extends AbstractContext implements Cloneable { private static final long serialVersionUID = 9033846851064645037L ; private Map context = null ; public VelocityContext ( ) { this ( null , null ) ; } public VelocityContext ( Map context ) { this ( context , null ) ; } public VelocityContext ( Context innerContext ) { this ( null , innerContext ) ; } public VelocityContext ( Map context , Context innerContext ) { super ( innerContext ) ; this . context = ( context == null ? new HashMap ( ) : context ) ; } public Object internalGet ( String key ) { return context . get ( key ) ; } public Object internalPut ( String key , Object value ) { return context . put ( key , value ) ; } public boolean internalContainsKey ( Object key ) { return context . containsKey ( key ) ; } public Object [ ] internalGetKeys ( ) { return context . keySet ( ) . toArray ( ) ; } public Object internalRemove ( Object key ) { return context . remove ( key ) ; } public Object clone ( ) { VelocityContext clone = null ; try { clone = ( VelocityContext ) super . clone ( ) ; clone . context = new HashMap ( context ) ; } catch ( CloneNotSupportedException ignored ) { } return clone ; } } 	0	['10', '3', '0', '8', '20', '3', '6', '2', '10', '0.555555556', '86', '1', '0', '0.793103448', '0.38', '1', '4', '7.4', '1', '0.6', '0']
package org . apache . velocity . texen . ant ; import java . io . File ; import java . io . FileInputStream ; import java . io . IOException ; import java . io . InputStream ; import java . io . Writer ; import java . util . Date ; import java . util . Iterator ; import java . util . StringTokenizer ; import org . apache . commons . collections . ExtendedProperties ; import org . apache . tools . ant . BuildException ; import org . apache . tools . ant . Project ; import org . apache . tools . ant . Task ; import org . apache . velocity . VelocityContext ; import org . apache . velocity . app . VelocityEngine ; import org . apache . velocity . context . Context ; import org . apache . velocity . exception . MethodInvocationException ; import org . apache . velocity . exception . ParseErrorException ; import org . apache . velocity . exception . ResourceNotFoundException ; import org . apache . velocity . runtime . RuntimeConstants ; import org . apache . velocity . texen . Generator ; import org . apache . velocity . util . StringUtils ; public class TexenTask extends Task { private final static String ERR_MSG_FRAGMENT = ". For more information consult the velocity log, or invoke ant " + "with the -debug flag." ; protected String controlTemplate ; protected String templatePath ; protected String outputDirectory ; protected String outputFile ; protected String outputEncoding ; protected String inputEncoding ; protected ExtendedProperties contextProperties ; protected boolean useClasspath ; protected String logFile ; protected String useResourceLoaderCache = "false" ; protected String resourceLoaderModificationCheckInterval = "2" ; public void setControlTemplate ( String controlTemplate ) { this . controlTemplate = controlTemplate ; } public String getControlTemplate ( ) { return controlTemplate ; } public void setTemplatePath ( String templatePath ) throws Exception { StringBuffer resolvedPath = new StringBuffer ( ) ; StringTokenizer st = new StringTokenizer ( templatePath , "," ) ; while ( st . hasMoreTokens ( ) ) { File fullPath = project . resolveFile ( st . nextToken ( ) ) ; resolvedPath . append ( fullPath . getCanonicalPath ( ) ) ; if ( st . hasMoreTokens ( ) ) { resolvedPath . append ( "," ) ; } } this . templatePath = resolvedPath . toString ( ) ; System . out . println ( templatePath ) ; } public String getTemplatePath ( ) { return templatePath ; } public void setOutputDirectory ( File outputDirectory ) { try { this . outputDirectory = outputDirectory . getCanonicalPath ( ) ; } catch ( java . io . IOException ioe ) { throw new BuildException ( ioe ) ; } } public String getOutputDirectory ( ) { return outputDirectory ; } public void setOutputFile ( String outputFile ) { this . outputFile = outputFile ; } public void setOutputEncoding ( String outputEncoding ) { this . outputEncoding = outputEncoding ; } public void setInputEncoding ( String inputEncoding ) { this . inputEncoding = inputEncoding ; } public String getOutputFile ( ) { return outputFile ; } public void setLogFile ( String log ) { this . logFile = log ; } public String getLogFile ( ) { return this . logFile ; } public void setContextProperties ( String file ) { String [ ] sources = StringUtils . split ( file , "," ) ; contextProperties = new ExtendedProperties ( ) ; for ( int i = 0 ; i < sources . length ; i ++ ) { ExtendedProperties source = new ExtendedProperties ( ) ; try { File fullPath = project . resolveFile ( sources [ i ] ) ; log ( "Using contextProperties file: " + fullPath ) ; source . load ( new FileInputStream ( fullPath ) ) ; } catch ( IOException e ) { ClassLoader classLoader = this . getClass ( ) . getClassLoader ( ) ; try { InputStream inputStream = classLoader . getResourceAsStream ( sources [ i ] ) ; if ( inputStream == null ) { throw new BuildException ( "Context properties file " + sources [ i ] + " could not be found in the file system or on the classpath!" ) ; } else { source . load ( inputStream ) ; } } catch ( IOException ioe ) { source = null ; } } if ( source != null ) { for ( Iterator j = source . getKeys ( ) ; j . hasNext ( ) ; ) { String name = ( String ) j . next ( ) ; String value = StringUtils . nullTrim ( source . getString ( name ) ) ; contextProperties . setProperty ( name , value ) ; } } } } public ExtendedProperties getContextProperties ( ) { return contextProperties ; } public void setUseClasspath ( boolean useClasspath ) { this . useClasspath = useClasspath ; } public void setUseResourceLoaderCache ( String useResourceLoaderCache ) { this . useResourceLoaderCache = useResourceLoaderCache ; } public void setResourceLoaderModificationCheckInterval ( String resourceLoaderModificationCheckInterval ) { this . resourceLoaderModificationCheckInterval = resourceLoaderModificationCheckInterval ; } public Context initControlContext ( ) throws Exception { return new VelocityContext ( ) ; } public void execute ( ) throws BuildException { if ( templatePath == null && useClasspath == false ) { throw new BuildException ( "The template path needs to be defined if you are not using " + "the classpath for locating templates!" ) ; } if ( controlTemplate == null ) { throw new BuildException ( "The control template needs to be defined!" ) ; } if ( outputDirectory == null ) { throw new BuildException ( "The output directory needs to be defined!" ) ; } if ( outputFile == null ) { throw new BuildException ( "The output file needs to be defined!" ) ; } VelocityEngine ve = new VelocityEngine ( ) ; try { if ( templatePath != null ) { log ( "Using templatePath: " + templatePath , Project . MSG_VERBOSE ) ; ve . setProperty ( RuntimeConstants . FILE_RESOURCE_LOADER_PATH , templatePath ) ; } if ( useClasspath ) { log ( "Using classpath" ) ; ve . addProperty ( VelocityEngine . RESOURCE_LOADER , "classpath" ) ; ve . setProperty ( "classpath." + VelocityEngine . RESOURCE_LOADER + ".class" , "org.apache.velocity.runtime.resource.loader.ClasspathResourceLoader" ) ; ve . setProperty ( "classpath." + VelocityEngine . RESOURCE_LOADER + ".cache" , useResourceLoaderCache ) ; ve . setProperty ( "classpath." + VelocityEngine . RESOURCE_LOADER + ".modificationCheckInterval" , resourceLoaderModificationCheckInterval ) ; } if ( this . logFile != null ) { ve . setProperty ( RuntimeConstants . RUNTIME_LOG , this . logFile ) ; } ve . init ( ) ; Generator generator = Generator . getInstance ( ) ; generator . setVelocityEngine ( ve ) ; generator . setOutputPath ( outputDirectory ) ; generator . setInputEncoding ( inputEncoding ) ; generator . setOutputEncoding ( outputEncoding ) ; if ( templatePath != null ) { generator . setTemplatePath ( templatePath ) ; } File file = new File ( outputDirectory ) ; if ( ! file . exists ( ) ) { file . mkdirs ( ) ; } String path = outputDirectory + File . separator + outputFile ; log ( "Generating to file " + path , Project . MSG_INFO ) ; Writer writer = generator . getWriter ( path , outputEncoding ) ; Context c = initControlContext ( ) ; populateInitialContext ( c ) ; if ( contextProperties != null ) { Iterator i = contextProperties . getKeys ( ) ; while ( i . hasNext ( ) ) { String property = ( String ) i . next ( ) ; String value = StringUtils . nullTrim ( contextProperties . getString ( property ) ) ; try { c . put ( property , new Integer ( value ) ) ; } catch ( NumberFormatException nfe ) { String booleanString = contextProperties . testBoolean ( value ) ; if ( booleanString != null ) { c . put ( property , Boolean . valueOf ( booleanString ) ) ; } else { if ( property . endsWith ( "file.contents" ) ) { value = StringUtils . fileContentsToString ( project . resolveFile ( value ) . getCanonicalPath ( ) ) ; property = property . substring ( 0 , property . indexOf ( "file.contents" ) - 1 ) ; } c . put ( property , value ) ; } } } } writer . write ( generator . parse ( controlTemplate , c ) ) ; writer . flush ( ) ; writer . close ( ) ; generator . shutdown ( ) ; cleanup ( ) ; } catch ( BuildException e ) { throw e ; } catch ( MethodInvocationException e ) { throw new BuildException ( "Exception thrown by '" + e . getReferenceName ( ) + "." + e . getMethodName ( ) + "'" + ERR_MSG_FRAGMENT , e . getWrappedThrowable ( ) ) ; } catch ( ParseErrorException e ) { throw new BuildException ( "Velocity syntax error" + ERR_MSG_FRAGMENT , e ) ; } catch ( ResourceNotFoundException e ) { throw new BuildException ( "Resource not found" + ERR_MSG_FRAGMENT , e ) ; } catch ( Exception e ) { throw new BuildException ( "Generation failed" + ERR_MSG_FRAGMENT , e ) ; } } protected void populateInitialContext ( Context context ) throws Exception { context . put ( "now" , new Date ( ) . toString ( ) ) ; } protected void cleanup ( ) throws Exception { } } 	0	['22', '3', '0', '12', '84', '177', '0', '12', '20', '0.928571429', '565', '1', '0', '0.637931034', '0.309090909', '1', '1', '24.13636364', '5', '1.1364', '0']
package org . apache . velocity . runtime . log ; public class PrimordialLogSystem extends HoldingLogChute implements LogSystem { public void logVelocityMessage ( int level , String message ) { log ( level , message ) ; } public void dumpLogMessages ( LogSystem newLogger ) { transferTo ( new LogChuteSystem ( newLogger ) ) ; } } 	0	['3', '2', '0', '4', '7', '3', '0', '4', '3', '2', '18', '0', '0', '0.714285714', '0.5', '0', '0', '5', '1', '0.6667', '0']
package org . apache . velocity . util . introspection ; import org . apache . velocity . runtime . RuntimeLogger ; import org . apache . velocity . runtime . log . Log ; public interface UberspectLoggable { public void setLog ( Log log ) ; public void setRuntimeLogger ( RuntimeLogger logger ) ; } 	0	['2', '1', '0', '4', '2', '1', '2', '2', '2', '2', '2', '0', '0', '0', '0.666666667', '0', '0', '0', '1', '1', '0']
package org . apache . velocity . runtime . directive ; import org . apache . velocity . context . InternalContextAdapter ; import org . apache . velocity . runtime . RuntimeConstants ; import org . apache . velocity . runtime . resource . Resource ; public abstract class InputBase extends Directive { protected String getInputEncoding ( InternalContextAdapter context ) { Resource current = context . getCurrentResource ( ) ; if ( current != null ) { return current . getEncoding ( ) ; } else { return ( String ) rsvc . getProperty ( RuntimeConstants . INPUT_ENCODING ) ; } } } 	0	['2', '2', '2', '6', '6', '1', '2', '4', '1', '2', '19', '0', '0', '0.875', '0.75', '0', '0', '8.5', '2', '1', '0']
package org . apache . velocity . runtime . parser . node ; import org . apache . velocity . context . InternalContextAdapter ; import org . apache . velocity . runtime . parser . Parser ; import org . apache . velocity . runtime . parser . ParserVisitor ; public class ASTElseStatement extends SimpleNode { public ASTElseStatement ( int id ) { super ( id ) ; } public ASTElseStatement ( Parser p , int id ) { super ( p , id ) ; } public Object jjtAccept ( ParserVisitor visitor , Object data ) { return visitor . visit ( this , data ) ; } public boolean evaluate ( InternalContextAdapter context ) { return true ; } } 	0	['4', '2', '0', '6', '7', '6', '4', '4', '4', '2', '20', '0', '0', '0.933333333', '0.416666667', '0', '0', '4', '1', '0.5', '0']
package org . apache . velocity . runtime . parser . node ; import org . apache . velocity . context . InternalContextAdapter ; import org . apache . velocity . runtime . parser . Parser ; import org . apache . velocity . runtime . parser . ParserVisitor ; public class ASTTrue extends SimpleNode { private static Boolean value = Boolean . TRUE ; public ASTTrue ( int id ) { super ( id ) ; } public ASTTrue ( Parser p , int id ) { super ( p , id ) ; } public Object jjtAccept ( ParserVisitor visitor , Object data ) { return visitor . visit ( this , data ) ; } public boolean evaluate ( InternalContextAdapter context ) { return true ; } public Object value ( InternalContextAdapter context ) { return value ; } } 	0	['6', '2', '0', '6', '9', '13', '4', '4', '5', '0.8', '28', '1', '0', '0.903225806', '0.4', '0', '0', '3.5', '1', '0.5', '0']
package org . apache . velocity . runtime . parser ; public interface CharStream { char readChar ( ) throws java . io . IOException ; int getColumn ( ) ; int getLine ( ) ; int getEndColumn ( ) ; int getEndLine ( ) ; int getBeginColumn ( ) ; int getBeginLine ( ) ; void backup ( int amount ) ; char BeginToken ( ) throws java . io . IOException ; String GetImage ( ) ; char [ ] GetSuffix ( int len ) ; void Done ( ) ; } 	0	['12', '1', '0', '3', '12', '66', '3', '0', '12', '2', '12', '0', '0', '0', '0.583333333', '0', '0', '0', '1', '1', '0']
package org . apache . velocity . runtime . parser ; public class Token { public int kind ; public int beginLine , beginColumn , endLine , endColumn ; public String image ; public Token next ; public Token specialToken ; public String toString ( ) { return image ; } public static final Token newToken ( int ofKind ) { switch ( ofKind ) { default : return new Token ( ) ; } } } 	0	['3', '1', '0', '24', '4', '3', '24', '0', '3', '1.4375', '23', '0', '2', '0', '0.5', '0', '0', '4', '2', '1', '0']
package org . apache . velocity . app . event ; public interface EventHandler { } 	0	['0', '1', '0', '16', '0', '0', '16', '0', '0', '2', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0']
package org . apache . velocity . runtime ; public interface RuntimeLogger { public void warn ( Object message ) ; public void info ( Object message ) ; public void error ( Object message ) ; public void debug ( Object message ) ; } 	0	['4', '1', '0', '8', '4', '6', '8', '0', '4', '2', '4', '0', '0', '0', '1', '0', '0', '0', '1', '1', '0']
package org . apache . velocity . servlet ; import java . io . FileNotFoundException ; import java . io . IOException ; import java . io . OutputStreamWriter ; import java . io . PrintWriter ; import java . io . StringWriter ; import java . io . UnsupportedEncodingException ; import java . util . Properties ; import javax . servlet . ServletConfig ; import javax . servlet . ServletContext ; import javax . servlet . ServletException ; import javax . servlet . ServletOutputStream ; import javax . servlet . http . HttpServlet ; import javax . servlet . http . HttpServletRequest ; import javax . servlet . http . HttpServletResponse ; import org . apache . velocity . Template ; import org . apache . velocity . VelocityContext ; import org . apache . velocity . app . Velocity ; import org . apache . velocity . context . Context ; import org . apache . velocity . exception . MethodInvocationException ; import org . apache . velocity . exception . ParseErrorException ; import org . apache . velocity . exception . ResourceNotFoundException ; import org . apache . velocity . io . VelocityWriter ; import org . apache . velocity . runtime . RuntimeConstants ; import org . apache . velocity . runtime . RuntimeSingleton ; import org . apache . velocity . util . SimplePool ; public abstract class VelocityServlet extends HttpServlet { public static final String REQUEST = "req" ; public static final String RESPONSE = "res" ; public static final String CONTENT_TYPE = "default.contentType" ; public static final String DEFAULT_CONTENT_TYPE = "text/html" ; public static final String DEFAULT_OUTPUT_ENCODING = "ISO-8859-1" ; private static String defaultContentType ; protected static final String INIT_PROPS_KEY = "org.apache.velocity.properties" ; private static final String OLD_INIT_PROPS_KEY = "properties" ; private static SimplePool writerPool = new SimplePool ( 40 ) ; public void init ( ServletConfig config ) throws ServletException { super . init ( config ) ; initVelocity ( config ) ; VelocityServlet . defaultContentType = RuntimeSingleton . getString ( CONTENT_TYPE , DEFAULT_CONTENT_TYPE ) ; } protected void initVelocity ( ServletConfig config ) throws ServletException { try { Properties props = loadConfiguration ( config ) ; Velocity . init ( props ) ; } catch ( Exception e ) { throw new ServletException ( "Error initializing Velocity: " + e , e ) ; } } protected Properties loadConfiguration ( ServletConfig config ) throws IOException , FileNotFoundException { String propsFile = config . getInitParameter ( INIT_PROPS_KEY ) ; if ( propsFile == null || propsFile . length ( ) == 0 ) { ServletContext sc = config . getServletContext ( ) ; propsFile = config . getInitParameter ( OLD_INIT_PROPS_KEY ) ; if ( propsFile == null || propsFile . length ( ) == 0 ) { propsFile = sc . getInitParameter ( INIT_PROPS_KEY ) ; if ( propsFile == null || propsFile . length ( ) == 0 ) { propsFile = sc . getInitParameter ( OLD_INIT_PROPS_KEY ) ; if ( propsFile != null && propsFile . length ( ) > 0 ) { sc . log ( "Use of the properties initialization " + "parameter '" + OLD_INIT_PROPS_KEY + "' has " + "been deprecated by '" + INIT_PROPS_KEY + '\'' ) ; } } } else { sc . log ( "Use of the properties initialization parameter '" + OLD_INIT_PROPS_KEY + "' has been deprecated by '" + INIT_PROPS_KEY + '\'' ) ; } } Properties p = new Properties ( ) ; if ( propsFile != null ) { p . load ( getServletContext ( ) . getResourceAsStream ( propsFile ) ) ; } return p ; } public void doGet ( HttpServletRequest request , HttpServletResponse response ) throws ServletException , IOException { doRequest ( request , response ) ; } public void doPost ( HttpServletRequest request , HttpServletResponse response ) throws ServletException , IOException { doRequest ( request , response ) ; } protected void doRequest ( HttpServletRequest request , HttpServletResponse response ) throws ServletException , IOException { Context context = null ; try { context = createContext ( request , response ) ; setContentType ( request , response ) ; Template template = handleRequest ( request , response , context ) ; if ( template == null ) { return ; } mergeTemplate ( template , context , response ) ; } catch ( Exception e ) { error ( request , response , e ) ; } finally { requestCleanup ( request , response , context ) ; } } protected void requestCleanup ( HttpServletRequest request , HttpServletResponse response , Context context ) { } protected void mergeTemplate ( Template template , Context context , HttpServletResponse response ) throws ResourceNotFoundException , ParseErrorException , MethodInvocationException , IOException , UnsupportedEncodingException , Exception { ServletOutputStream output = response . getOutputStream ( ) ; VelocityWriter vw = null ; String encoding = response . getCharacterEncoding ( ) ; try { vw = ( VelocityWriter ) writerPool . get ( ) ; if ( vw == null ) { vw = new VelocityWriter ( new OutputStreamWriter ( output , encoding ) , 4 * 1024 , true ) ; } else { vw . recycle ( new OutputStreamWriter ( output , encoding ) ) ; } template . merge ( context , vw ) ; } finally { if ( vw != null ) { try { vw . flush ( ) ; } catch ( IOException e ) { } vw . recycle ( null ) ; writerPool . put ( vw ) ; } } } protected void setContentType ( HttpServletRequest request , HttpServletResponse response ) { String contentType = VelocityServlet . defaultContentType ; int index = contentType . lastIndexOf ( ';' ) + 1 ; if ( index <= 0 || ( index < contentType . length ( ) && contentType . indexOf ( "charset" , index ) == - 1 ) ) { String encoding = chooseCharacterEncoding ( request ) ; if ( ! DEFAULT_OUTPUT_ENCODING . equalsIgnoreCase ( encoding ) ) { contentType += "; charset=" + encoding ; } } response . setContentType ( contentType ) ; } protected String chooseCharacterEncoding ( HttpServletRequest request ) { return RuntimeSingleton . getString ( RuntimeConstants . OUTPUT_ENCODING , DEFAULT_OUTPUT_ENCODING ) ; } protected Context createContext ( HttpServletRequest request , HttpServletResponse response ) { VelocityContext context = new VelocityContext ( ) ; context . put ( REQUEST , request ) ; context . put ( RESPONSE , response ) ; return context ; } public Template getTemplate ( String name ) throws ResourceNotFoundException , ParseErrorException , Exception { return RuntimeSingleton . getTemplate ( name ) ; } public Template getTemplate ( String name , String encoding ) throws ResourceNotFoundException , ParseErrorException , Exception { return RuntimeSingleton . getTemplate ( name , encoding ) ; } protected Template handleRequest ( HttpServletRequest request , HttpServletResponse response , Context ctx ) throws Exception { Template t = handleRequest ( ctx ) ; if ( t == null ) { throw new Exception ( "handleRequest(Context) returned null - no template selected!" ) ; } return t ; } protected Template handleRequest ( Context ctx ) throws Exception { throw new Exception ( "You must override VelocityServlet.handleRequest( Context) " + " or VelocityServlet.handleRequest( HttpServletRequest, " + " HttpServletResponse, Context)" ) ; } protected void error ( HttpServletRequest request , HttpServletResponse response , Exception cause ) throws ServletException , IOException { StringBuffer html = new StringBuffer ( ) ; html . append ( "<html>" ) ; html . append ( "<title>Error</title>" ) ; html . append ( "<body bgcolor=\"#ffffff\">" ) ; html . append ( "<h2>VelocityServlet: Error processing the template</h2>" ) ; html . append ( "<pre>" ) ; String why = cause . getMessage ( ) ; if ( why != null && why . trim ( ) . length ( ) > 0 ) { html . append ( why ) ; html . append ( "<br>" ) ; } StringWriter sw = new StringWriter ( ) ; cause . printStackTrace ( new PrintWriter ( sw ) ) ; html . append ( sw . toString ( ) ) ; html . append ( "</pre>" ) ; html . append ( "</body>" ) ; html . append ( "</html>" ) ; response . getOutputStream ( ) . print ( html . toString ( ) ) ; } } 	0	['18', '3', '0', '10', '62', '149', '0', '10', '6', '1.019607843', '417', '0.444444444', '1', '0.6', '0.338235294', '1', '2', '21.66666667', '5', '1.1111', '0']
package org . apache . velocity . runtime . log ; public class NullLogSystem extends NullLogChute implements LogSystem { public void logVelocityMessage ( int level , String message ) { } } 	0	['2', '2', '0', '2', '3', '1', '0', '2', '2', '2', '6', '0', '0', '0.8', '0.666666667', '0', '0', '2', '1', '0.5', '0']
package org . apache . velocity . runtime . directive ; import java . io . IOException ; import java . io . Writer ; import org . apache . velocity . context . InternalContextAdapter ; import org . apache . velocity . exception . TemplateInitException ; import org . apache . velocity . runtime . RuntimeServices ; import org . apache . velocity . runtime . parser . node . Node ; public class Literal extends Directive { String literalText ; public String getName ( ) { return "literal" ; } public int getType ( ) { return BLOCK ; } public void init ( RuntimeServices rs , InternalContextAdapter context , Node node ) throws TemplateInitException { super . init ( rs , context , node ) ; literalText = node . jjtGetChild ( 0 ) . literal ( ) ; } public boolean render ( InternalContextAdapter context , Writer writer , Node node ) throws IOException { writer . write ( literalText ) ; return true ; } } 	0	['5', '2', '0', '5', '10', '8', '0', '5', '5', '0.75', '31', '0', '0', '0.636363636', '0.44', '0', '0', '5', '1', '0.8', '0']
package org . apache . velocity . util ; public final class SimplePool { private Object pool [ ] ; private int max ; private int current = - 1 ; public SimplePool ( int max ) { this . max = max ; pool = new Object [ max ] ; } public void put ( Object o ) { int idx = - 1 ; synchronized ( this ) { if ( current < max - 1 ) { idx = ++ current ; } if ( idx >= 0 ) { pool [ idx ] = o ; } } } public Object get ( ) { synchronized ( this ) { if ( current >= 0 ) { Object o = pool [ current ] ; pool [ current ] = null ; current -- ; return o ; } } return null ; } public int getMax ( ) { return max ; } Object [ ] getPool ( ) { return pool ; } } 	0	['5', '1', '0', '2', '6', '0', '2', '0', '4', '0.416666667', '103', '1', '0', '0', '0.466666667', '0', '0', '19', '3', '1.4', '0']
package org . apache . velocity . anakia ; import java . util . ArrayList ; import java . util . Collection ; import java . util . Iterator ; import org . jdom . Element ; public class TreeWalker { public TreeWalker ( ) { } public NodeList allElements ( Element e ) { ArrayList theElements = new ArrayList ( ) ; treeWalk ( e , theElements ) ; return new NodeList ( theElements , false ) ; } private final void treeWalk ( Element e , Collection theElements ) { for ( Iterator i = e . getChildren ( ) . iterator ( ) ; i . hasNext ( ) ; ) { Element child = ( Element ) i . next ( ) ; theElements . add ( child ) ; treeWalk ( child , theElements ) ; } } } 	0	['3', '1', '0', '3', '11', '3', '1', '2', '2', '2', '41', '0', '0', '0', '0.666666667', '0', '0', '12.66666667', '2', '1', '0']
package org . apache . velocity . anakia ; import java . util . List ; import org . jdom . Document ; import org . jdom . Element ; public class XPathTool { public XPathTool ( ) { } public NodeList applyTo ( String xpathSpec , Document doc ) { return new NodeList ( XPathCache . getXPath ( xpathSpec ) . applyTo ( doc ) , false ) ; } public NodeList applyTo ( String xpathSpec , Element elem ) { return new NodeList ( XPathCache . getXPath ( xpathSpec ) . applyTo ( elem ) , false ) ; } public NodeList applyTo ( String xpathSpec , List nodeSet ) { return new NodeList ( XPathCache . getXPath ( xpathSpec ) . applyTo ( nodeSet ) , false ) ; } } 	0	['4', '1', '0', '6', '10', '6', '1', '5', '4', '2', '34', '0', '0', '0', '0.5', '0', '0', '7.5', '1', '0.75', '0']
package org . apache . velocity . util ; import java . util . Iterator ; import java . util . Enumeration ; public class EnumerationIterator implements Iterator { private Enumeration enumeration = null ; public EnumerationIterator ( Enumeration enumeration ) { this . enumeration = enumeration ; } public Object next ( ) { return enumeration . nextElement ( ) ; } public boolean hasNext ( ) { return enumeration . hasMoreElements ( ) ; } public void remove ( ) { } } 	0	['4', '1', '0', '1', '7', '0', '1', '0', '4', '0.333333333', '23', '1', '0', '0', '0.625', '0', '0', '4.5', '1', '0.75', '0']
package org . apache . velocity . runtime . parser . node ; import org . apache . velocity . runtime . parser . Parser ; import org . apache . velocity . runtime . parser . ParserVisitor ; import org . apache . velocity . context . InternalContextAdapter ; import org . apache . velocity . exception . MethodInvocationException ; public class ASTOrNode extends SimpleNode { public ASTOrNode ( int id ) { super ( id ) ; } public ASTOrNode ( Parser p , int id ) { super ( p , id ) ; } public Object jjtAccept ( ParserVisitor visitor , Object data ) { return visitor . visit ( this , data ) ; } public Object value ( InternalContextAdapter context ) throws MethodInvocationException { return new Boolean ( evaluate ( context ) ) ; } public boolean evaluate ( InternalContextAdapter context ) throws MethodInvocationException { Node left = jjtGetChild ( 0 ) ; Node right = jjtGetChild ( 1 ) ; if ( left != null && left . evaluate ( context ) ) return true ; if ( right != null && right . evaluate ( context ) ) return true ; return false ; } } 	0	['5', '2', '0', '8', '11', '10', '4', '6', '5', '2', '52', '0', '0', '0.903225806', '0.4', '1', '1', '9.4', '1', '0.6', '0']
package org . apache . velocity . runtime . directive ; public interface DirectiveConstants { public static final int BLOCK = 1 ; public static final int LINE = 2 ; } 	0	['0', '1', '0', '1', '0', '0', '1', '0', '0', '2', '2', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0']
package org . apache . velocity . runtime . parser ; public class ParseException extends Exception { private static final long serialVersionUID = - 309603325673449381L ; public ParseException ( Token currentTokenVal , int [ ] [ ] expectedTokenSequencesVal , String [ ] tokenImageVal ) { super ( "" ) ; specialConstructor = true ; currentToken = currentTokenVal ; expectedTokenSequences = expectedTokenSequencesVal ; tokenImage = tokenImageVal ; } public ParseException ( ) { super ( ) ; specialConstructor = false ; } public ParseException ( String message ) { super ( message ) ; specialConstructor = false ; } protected boolean specialConstructor ; public Token currentToken ; public int [ ] [ ] expectedTokenSequences ; public String [ ] tokenImage ; public String getMessage ( ) { if ( ! specialConstructor ) { return super . getMessage ( ) ; } String expected = "" ; int maxSize = 0 ; for ( int i = 0 ; i < expectedTokenSequences . length ; i ++ ) { if ( maxSize < expectedTokenSequences [ i ] . length ) { maxSize = expectedTokenSequences [ i ] . length ; } for ( int j = 0 ; j < expectedTokenSequences [ i ] . length ; j ++ ) { expected += tokenImage [ expectedTokenSequences [ i ] [ j ] ] + " " ; } if ( expectedTokenSequences [ i ] [ expectedTokenSequences [ i ] . length - 1 ] != 0 ) { expected += "..." ; } expected += eol + "    " ; } String retval = "Encountered \"" ; Token tok = currentToken . next ; for ( int i = 0 ; i < maxSize ; i ++ ) { if ( i != 0 ) retval += " " ; if ( tok . kind == 0 ) { retval += tokenImage [ 0 ] ; break ; } retval += add_escapes ( tok . image ) ; tok = tok . next ; } retval += "\" at line " + currentToken . next . beginLine + ", column " + currentToken . next . beginColumn ; retval += "." + eol ; if ( expectedTokenSequences . length == 1 ) { retval += "Was expecting:" + eol + "    " ; } else { retval += "Was expecting one of:" + eol + "    " ; } retval += expected ; return retval ; } protected String eol = System . getProperty ( "line.separator" , "\n" ) ; protected String add_escapes ( String str ) { StringBuffer retval = new StringBuffer ( ) ; char ch ; for ( int i = 0 ; i < str . length ( ) ; i ++ ) { switch ( str . charAt ( i ) ) { case 0 : continue ; case '\b' : retval . append ( "\\b" ) ; continue ; case '\t' : retval . append ( "\\t" ) ; continue ; case '\n' : retval . append ( "\\n" ) ; continue ; case '\f' : retval . append ( "\\f" ) ; continue ; case '\r' : retval . append ( "\\r" ) ; continue ; case '\"' : retval . append ( "\\\"" ) ; continue ; case '\'' : retval . append ( "\\\'" ) ; continue ; case '\\' : retval . append ( "\\\\" ) ; continue ; default : if ( ( ch = str . charAt ( i ) ) < 0x20 || ch > 0x7e ) { String s = "0000" + Integer . toString ( ch , 16 ) ; retval . append ( "\\u" + s . substring ( s . length ( ) - 4 , s . length ( ) ) ) ; } else { retval . append ( ch ) ; } continue ; } } return retval . toString ( ) ; } } 	0	['5', '3', '2', '16', '18', '0', '15', '1', '4', '0.666666667', '388', '0.5', '1', '0.866666667', '0.4', '1', '1', '75.4', '14', '4.8', '0']
package org . apache . velocity . runtime . resource ; import org . apache . velocity . Template ; public class ResourceFactory { public static Resource getResource ( String resourceName , int resourceType ) { Resource resource = null ; switch ( resourceType ) { case ResourceManager . RESOURCE_TEMPLATE : resource = new Template ( ) ; break ; case ResourceManager . RESOURCE_CONTENT : resource = new ContentResource ( ) ; break ; } return resource ; } } 	0	['2', '1', '0', '4', '5', '1', '1', '3', '2', '2', '20', '0', '0', '0', '0.5', '0', '0', '9', '4', '2', '0']
package org . apache . velocity . runtime . parser . node ; import org . apache . velocity . runtime . parser . Parser ; import org . apache . velocity . runtime . parser . ParserVisitor ; public class ASTParameters extends SimpleNode { public ASTParameters ( int id ) { super ( id ) ; } public ASTParameters ( Parser p , int id ) { super ( p , id ) ; } public Object jjtAccept ( ParserVisitor visitor , Object data ) { return visitor . visit ( this , data ) ; } } 	0	['3', '2', '0', '3', '6', '3', '0', '3', '3', '2', '17', '0', '0', '0.965517241', '0.533333333', '0', '0', '4.666666667', '1', '0.3333', '0']
package org . apache . velocity . context ; public interface InternalWrapperContext { Context getInternalUserContext ( ) ; InternalContextAdapter getBaseContext ( ) ; Object localPut ( final String key , final Object value ) ; } 	0	['3', '1', '0', '2', '3', '3', '1', '2', '3', '2', '3', '0', '0', '0', '0.555555556', '0', '0', '0', '1', '1', '0']
package org . apache . velocity . util . introspection ; public class IntrospectionCacheData { public Object thingy ; public Class contextData ; } 	0	['1', '1', '0', '7', '2', '0', '7', '0', '1', '2', '6', '0', '0', '0', '1', '0', '0', '3', '0', '0', '0']
package org . apache . velocity . runtime . parser . node ; import java . io . IOException ; import java . io . Writer ; import org . apache . velocity . context . InternalContextAdapter ; import org . apache . velocity . exception . MethodInvocationException ; import org . apache . velocity . exception . ParseErrorException ; import org . apache . velocity . exception . ResourceNotFoundException ; import org . apache . velocity . runtime . parser . Parser ; import org . apache . velocity . runtime . parser . ParserVisitor ; import org . apache . velocity . runtime . parser . Token ; public class ASTComment extends SimpleNode { private static final char [ ] ZILCH = "" . toCharArray ( ) ; private char [ ] carr ; public ASTComment ( int id ) { super ( id ) ; } public ASTComment ( Parser p , int id ) { super ( p , id ) ; } public Object jjtAccept ( ParserVisitor visitor , Object data ) { return visitor . visit ( this , data ) ; } public Object init ( InternalContextAdapter context , Object data ) { Token t = getFirstToken ( ) ; int loc1 = t . image . indexOf ( "##" ) ; int loc2 = t . image . indexOf ( "#*" ) ; if ( loc1 == - 1 && loc2 == - 1 ) { carr = ZILCH ; } else { carr = t . image . substring ( 0 , ( loc1 == - 1 ) ? loc2 : loc1 ) . toCharArray ( ) ; } return data ; } public boolean render ( InternalContextAdapter context , Writer writer ) throws IOException , MethodInvocationException , ParseErrorException , ResourceNotFoundException { if ( context . getAllowRendering ( ) ) { writer . write ( carr ) ; } return true ; } } 	0	['6', '2', '0', '9', '15', '11', '3', '8', '5', '0.8', '73', '1', '0', '0.903225806', '0.4', '0', '0', '10.83333333', '4', '1', '0']
