package org . apache . synapse . config . xml ; import org . apache . axiom . om . OMAttribute ; import org . apache . axiom . om . OMElement ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import org . apache . synapse . SynapseException ; import org . apache . synapse . config . xml . endpoints . EndpointAbstractFactory ; import org . apache . synapse . config . xml . endpoints . EndpointFactory ; import org . apache . synapse . core . axis2 . ProxyService ; import org . apache . axis2 . wsdl . WSDLConstants ; import javax . xml . namespace . QName ; import java . util . Iterator ; import java . util . StringTokenizer ; import java . util . ArrayList ; import java . net . URI ; import java . net . URISyntaxException ; public class ProxyServiceFactory { private static final Log log = LogFactory . getLog ( ProxyServiceFactory . class ) ; public static ProxyService createProxy ( OMElement elem ) { ProxyService proxy = new ProxyService ( ) ; OMAttribute name = elem . getAttribute ( new QName ( Constants . NULL_NAMESPACE , "name" ) ) ; if ( name == null ) { handleException ( "The 'name' attribute is required for a Proxy service definition" ) ; } else { proxy . setName ( name . getAttributeValue ( ) ) ; } OMAttribute statistics = elem . getAttribute ( new QName ( Constants . NULL_NAMESPACE , Constants . STATISTICS_ATTRIB_NAME ) ) ; if ( statistics != null ) { String statisticsValue = statistics . getAttributeValue ( ) ; if ( statisticsValue != null ) { if ( Constants . STATISTICS_ENABLE . equals ( statisticsValue ) ) { proxy . setStatisticsEnable ( org . apache . synapse . Constants . STATISTICS_ON ) ; } else if ( Constants . STATISTICS_DISABLE . equals ( statisticsValue ) ) { proxy . setStatisticsEnable ( org . apache . synapse . Constants . STATISTICS_OFF ) ; } } } OMAttribute trans = elem . getAttribute ( new QName ( Constants . NULL_NAMESPACE , "transports" ) ) ; if ( trans != null ) { String transports = trans . getAttributeValue ( ) ; if ( transports == null || ProxyService . ALL_TRANSPORTS . equals ( transports ) ) { } else { StringTokenizer st = new StringTokenizer ( transports , " ," ) ; ArrayList transportList = new ArrayList ( ) ; while ( st . hasMoreTokens ( ) ) { String token = st . nextToken ( ) ; if ( token . length ( ) != 0 ) { transportList . add ( token ) ; } } proxy . setTransports ( transportList ) ; } } OMAttribute trace = elem . getAttribute ( new QName ( Constants . NULL_NAMESPACE , Constants . TRACE_ATTRIB_NAME ) ) ; if ( trace != null ) { String traceValue = trace . getAttributeValue ( ) ; if ( traceValue != null ) { if ( traceValue . equals ( Constants . TRACE_ENABLE ) ) { proxy . setTraceState ( org . apache . synapse . Constants . TRACING_ON ) ; } else if ( traceValue . equals ( Constants . TRACE_DISABLE ) ) { proxy . setTraceState ( org . apache . synapse . Constants . TRACING_OFF ) ; } } } OMAttribute startOnLoad = elem . getAttribute ( new QName ( Constants . NULL_NAMESPACE , "startOnLoad" ) ) ; if ( startOnLoad != null ) { proxy . setStartOnLoad ( Boolean . valueOf ( startOnLoad . getAttributeValue ( ) ) . booleanValue ( ) ) ; } else { proxy . setStartOnLoad ( true ) ; } OMElement descriptionElement = elem . getFirstChildWithName ( new QName ( Constants . SYNAPSE_NAMESPACE , "description" ) ) ; if ( descriptionElement != null ) { proxy . setDescription ( descriptionElement . getText ( ) . trim ( ) ) ; } OMElement target = elem . getFirstChildWithName ( new QName ( Constants . SYNAPSE_NAMESPACE , "target" ) ) ; if ( target != null ) { boolean isTargetOk = false ; SequenceMediatorFactory mediatorFactory = new SequenceMediatorFactory ( ) ; OMAttribute inSequence = target . getAttribute ( new QName ( Constants . NULL_NAMESPACE , "inSequence" ) ) ; if ( inSequence != null ) { proxy . setTargetInSequence ( inSequence . getAttributeValue ( ) ) ; isTargetOk = true ; } else { OMElement inSequenceElement = target . getFirstChildWithName ( new QName ( Constants . SYNAPSE_NAMESPACE , "inSequence" ) ) ; if ( inSequenceElement != null ) { proxy . setTargetInLineInSequence ( mediatorFactory . createAnonymousSequence ( inSequenceElement ) ) ; isTargetOk = true ; } } OMAttribute outSequence = target . getAttribute ( new QName ( Constants . NULL_NAMESPACE , "outSequence" ) ) ; if ( outSequence != null ) { proxy . setTargetOutSequence ( outSequence . getAttributeValue ( ) ) ; } else { OMElement outSequenceElement = target . getFirstChildWithName ( new QName ( Constants . SYNAPSE_NAMESPACE , "outSequence" ) ) ; if ( outSequenceElement != null ) { proxy . setTargetInLineOutSequence ( mediatorFactory . createAnonymousSequence ( outSequenceElement ) ) ; } else { handleException ( "Target for the proxy service must declare an out sequence" ) ; } } OMAttribute faultSequence = target . getAttribute ( new QName ( Constants . NULL_NAMESPACE , "faultSequence" ) ) ; if ( faultSequence != null ) { proxy . setTargetFaultSequence ( faultSequence . getAttributeValue ( ) ) ; } else { OMElement faultSequenceElement = target . getFirstChildWithName ( new QName ( Constants . SYNAPSE_NAMESPACE , "faultSequence" ) ) ; if ( faultSequenceElement != null ) { proxy . setTargetInLineFaultSequence ( mediatorFactory . createAnonymousSequence ( faultSequenceElement ) ) ; } } OMAttribute tgtEndpt = target . getAttribute ( new QName ( Constants . NULL_NAMESPACE , "endpoint" ) ) ; if ( tgtEndpt != null ) { proxy . setTargetEndpoint ( tgtEndpt . getAttributeValue ( ) ) ; isTargetOk = true ; } else { OMElement endpointElement = target . getFirstChildWithName ( new QName ( Constants . SYNAPSE_NAMESPACE , "endpoint" ) ) ; if ( endpointElement != null ) { EndpointFactory fac = EndpointAbstractFactory . getEndpointFactroy ( endpointElement ) ; proxy . setTargetInLineEndpoint ( fac . createEndpoint ( endpointElement , true ) ) ; isTargetOk = true ; } } if ( ! isTargetOk ) { handleException ( "Target of the proxy service must declare either an inSequence or endpoint or both" ) ; } } else { handleException ( "Target is required for a Proxy service definition" ) ; } OMElement wsdl = elem . getFirstChildWithName ( new QName ( Constants . SYNAPSE_NAMESPACE , "publishWSDL" ) ) ; if ( wsdl != null ) { OMAttribute wsdlkey = wsdl . getAttribute ( new QName ( Constants . NULL_NAMESPACE , "key" ) ) ; if ( wsdlkey != null ) { proxy . setWSDLKey ( wsdlkey . getAttributeValue ( ) ) ; } else { OMAttribute wsdlURI = wsdl . getAttribute ( new QName ( Constants . NULL_NAMESPACE , "uri" ) ) ; if ( wsdlURI != null ) { try { proxy . setWsdlURI ( new URI ( wsdlURI . getAttributeValue ( ) ) ) ; } catch ( URISyntaxException e ) { String msg = "Error creating uri for proxy service wsdl" ; log . error ( msg ) ; handleException ( msg , e ) ; } } else { OMElement wsdl11 = wsdl . getFirstChildWithName ( new QName ( WSDLConstants . WSDL1_1_NAMESPACE , "definitions" ) ) ; if ( wsdl11 != null ) { proxy . setInLineWSDL ( wsdl11 ) ; } else { OMElement wsdl20 = wsdl . getFirstChildWithName ( new QName ( WSDLConstants . WSDL2_0_NAMESPACE , "descriptions" ) ) ; if ( wsdl20 != null ) { proxy . setInLineWSDL ( wsdl20 ) ; } } } } } Iterator policies = elem . getChildrenWithName ( new QName ( Constants . SYNAPSE_NAMESPACE , "policy" ) ) ; while ( policies . hasNext ( ) ) { Object o = policies . next ( ) ; if ( o instanceof OMElement ) { OMElement policy = ( OMElement ) o ; OMAttribute key = policy . getAttribute ( new QName ( Constants . NULL_NAMESPACE , "key" ) ) ; if ( key != null ) { proxy . addServiceLevelPolicy ( key . getAttributeValue ( ) ) ; } else { handleException ( "Policy element does not specify the policy key" ) ; } } else { handleException ( "Invalid 'policy' element found under element 'policies'" ) ; } } Iterator props = elem . getChildrenWithName ( new QName ( Constants . SYNAPSE_NAMESPACE , "parameter" ) ) ; while ( props . hasNext ( ) ) { Object o = props . next ( ) ; if ( o instanceof OMElement ) { OMElement prop = ( OMElement ) o ; OMAttribute pname = prop . getAttribute ( new QName ( Constants . NULL_NAMESPACE , "name" ) ) ; OMElement propertyValue = prop . getFirstElement ( ) ; if ( pname != null ) { if ( propertyValue != null ) { proxy . addParameter ( pname . getAttributeValue ( ) , propertyValue ) ; } else { proxy . addParameter ( pname . getAttributeValue ( ) , prop . getText ( ) . trim ( ) ) ; } } else { handleException ( "Invalid property specified for proxy service : " + name ) ; } } else { handleException ( "Invalid property specified for proxy service : " + name ) ; } } if ( elem . getFirstChildWithName ( new QName ( Constants . SYNAPSE_NAMESPACE , "enableRM" ) ) != null ) { proxy . setWsRMEnabled ( true ) ; } if ( elem . getFirstChildWithName ( new QName ( Constants . SYNAPSE_NAMESPACE , "enableSec" ) ) != null ) { proxy . setWsSecEnabled ( true ) ; } return proxy ; } private static void handleException ( String msg ) { log . error ( msg ) ; throw new SynapseException ( msg ) ; } private static void handleException ( String msg , Exception e ) { log . error ( msg , e ) ; throw new SynapseException ( msg , e ) ; } } 	0	['6', '1', '0', '12', '65', '3', '1', '11', '2', '0.7', '585', '0.5', '0', '0', '0.3', '0', '0', '96.16666667', '39', '7', '0']
package org . apache . synapse . core . axis2 ; import org . apache . synapse . MessageContext ; import org . apache . synapse . Constants ; import org . apache . synapse . FaultHandler ; import org . apache . synapse . mediators . transform . FaultMediator ; import org . apache . synapse . mediators . MediatorFaultHandler ; import java . util . TimerTask ; import java . util . Map ; import java . util . Iterator ; import java . util . Stack ; public class TimeoutHandler extends TimerTask { private Map callbackStore = null ; private Object lock = new Object ( ) ; private boolean alreadyExecuting = false ; public TimeoutHandler ( Map callbacks ) { this . callbackStore = callbacks ; } public void run ( ) { if ( alreadyExecuting ) return ; synchronized ( lock ) { alreadyExecuting = true ; try { processCallbacks ( ) ; } catch ( Exception ignore ) { } alreadyExecuting = false ; } } private void processCallbacks ( ) { synchronized ( callbackStore ) { if ( callbackStore . size ( ) > 0 ) { long currentTime = currentTime ( ) ; Iterator i = callbackStore . keySet ( ) . iterator ( ) ; while ( i . hasNext ( ) ) { Object key = i . next ( ) ; AsyncCallback callback = ( AsyncCallback ) callbackStore . get ( key ) ; if ( callback . getTimeOutAction ( ) != Constants . NONE ) { if ( callback . getTimeOutOn ( ) <= currentTime ) { callbackStore . remove ( key ) ; if ( callback . getTimeOutAction ( ) == Constants . DISCARD_AND_FAULT ) { MessageContext msgContext = callback . getSynapseOutMsgCtx ( ) ; msgContext . setProperty ( Constants . ERROR_CODE , Constants . TIME_OUT ) ; Stack faultStack = msgContext . getFaultStack ( ) ; for ( int j = 0 ; j < faultStack . size ( ) ; j ++ ) { Object o = faultStack . pop ( ) ; if ( o instanceof MediatorFaultHandler ) { ( ( MediatorFaultHandler ) o ) . handleFault ( msgContext ) ; } } } } } } } } } private long currentTime ( ) { return System . currentTimeMillis ( ) ; } } 	1	['4', '2', '0', '4', '22', '2', '1', '3', '2', '0.555555556', '139', '1', '0', '0.5', '0.625', '0', '0', '33', '4', '1.75', '1']
package org . apache . synapse . config . xml ; import org . apache . axiom . om . OMElement ; import org . apache . synapse . Mediator ; import org . apache . synapse . mediators . filters . OutMediator ; import javax . xml . namespace . QName ; public class OutMediatorFactory extends AbstractListMediatorFactory { private static final QName OUT_Q = new QName ( Constants . SYNAPSE_NAMESPACE , "out" ) ; public Mediator createMediator ( OMElement elem ) { OutMediator filter = new OutMediator ( ) ; initMediator ( filter , elem ) ; addChildren ( elem , filter ) ; return filter ; } public QName getTagQName ( ) { return OUT_Q ; } } 	0	['4', '3', '0', '5', '9', '4', '0', '5', '3', '0.666666667', '30', '1', '0', '0.6', '0.666666667', '0', '0', '6.25', '1', '0.5', '0']
package org . apache . synapse . mediators . transform ; import org . apache . axiom . om . OMElement ; import org . apache . axiom . om . OMNode ; import org . apache . axiom . om . impl . builder . StAXOMBuilder ; import org . apache . axiom . om . xpath . AXIOMXPath ; import org . apache . axiom . soap . SOAP11Constants ; import org . apache . axiom . soap . SOAP12Constants ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import org . apache . synapse . MessageContext ; import org . apache . synapse . SynapseException ; import org . apache . synapse . Constants ; import org . apache . synapse . config . Util ; import org . apache . synapse . config . Entry ; import org . apache . synapse . mediators . AbstractMediator ; import org . apache . synapse . mediators . MediatorProperty ; import org . jaxen . JaxenException ; import javax . xml . stream . XMLOutputFactory ; import javax . xml . stream . XMLStreamException ; import javax . xml . stream . XMLStreamWriter ; import javax . xml . transform . * ; import javax . xml . transform . stream . StreamResult ; import javax . xml . transform . stream . StreamSource ; import java . io . ByteArrayInputStream ; import java . io . ByteArrayOutputStream ; import java . util . ArrayList ; import java . util . List ; public class XSLTMediator extends AbstractMediator { private static final Log log = LogFactory . getLog ( XSLTMediator . class ) ; private static final Log trace = LogFactory . getLog ( Constants . TRACE_LOGGER ) ; private String xsltKey = null ; private AXIOMXPath source = null ; private List properties = new ArrayList ( ) ; private Transformer transformer = null ; private final Object transformerLock = new Object ( ) ; public static final String DEFAULT_XPATH = "//s11:Envelope/s11:Body/child::*[position()=1] | " + "//s12:Envelope/s12:Body/child::*[position()=1]" ; public XSLTMediator ( ) { try { this . source = new AXIOMXPath ( DEFAULT_XPATH ) ; this . source . addNamespace ( "s11" , SOAP11Constants . SOAP_ENVELOPE_NAMESPACE_URI ) ; this . source . addNamespace ( "s12" , SOAP12Constants . SOAP_ENVELOPE_NAMESPACE_URI ) ; } catch ( JaxenException e ) { handleException ( "Error creating source XPath expression" , e ) ; } } public boolean mediate ( MessageContext synCtx ) { try { log . debug ( "XSLT mediator mediate()" ) ; boolean shouldTrace = shouldTrace ( synCtx . getTracingState ( ) ) ; if ( shouldTrace ) { trace . trace ( "Start : XSLT mediator" ) ; } log . debug ( "Performing XSLT transformation against resource with key : " + xsltKey ) ; performXLST ( synCtx , shouldTrace ) ; if ( shouldTrace ) { trace . trace ( "Start : XSLT mediator" ) ; } return true ; } catch ( Exception e ) { handleException ( "Unable to do the transformation" ) ; } return false ; } private void performXLST ( MessageContext msgCtx , boolean shouldTrace ) { Source transformSrc = null ; ByteArrayOutputStream baosForTarget = new ByteArrayOutputStream ( ) ; StreamResult transformTgt = new StreamResult ( baosForTarget ) ; OMNode sourceNode = getTransformSource ( msgCtx ) ; if ( shouldTrace ) { trace . trace ( "Transformation source : " + sourceNode . toString ( ) ) ; } if ( log . isDebugEnabled ( ) ) { log . debug ( "Transformation source : " + sourceNode ) ; } try { ByteArrayOutputStream baosForSource = new ByteArrayOutputStream ( ) ; XMLStreamWriter xsWriterForSource = XMLOutputFactory . newInstance ( ) . createXMLStreamWriter ( baosForSource ) ; sourceNode . serialize ( xsWriterForSource ) ; transformSrc = new StreamSource ( new ByteArrayInputStream ( baosForSource . toByteArray ( ) ) ) ; } catch ( XMLStreamException e ) { handleException ( "Error gettting transform source " + e . getMessage ( ) , e ) ; } Entry dp = msgCtx . getConfiguration ( ) . getEntryDefinition ( xsltKey ) ; if ( dp != null && dp . isDynamic ( ) ) { if ( ! dp . isCached ( ) || dp . isExpired ( ) ) { synchronized ( transformerLock ) { try { transformer = TransformerFactory . newInstance ( ) . newTransformer ( Util . getStreamSource ( msgCtx . getEntry ( xsltKey ) ) ) ; } catch ( TransformerConfigurationException e ) { handleException ( "Error creating XSLT transformer using : " + xsltKey , e ) ; } } } } else { if ( transformer == null ) { synchronized ( transformerLock ) { try { transformer = TransformerFactory . newInstance ( ) . newTransformer ( Util . getStreamSource ( msgCtx . getEntry ( xsltKey ) ) ) ; } catch ( TransformerConfigurationException e ) { handleException ( "Error creating XSLT transformer using : " + xsltKey , e ) ; } } } } try { transformer . transform ( transformSrc , transformTgt ) ; StAXOMBuilder builder = new StAXOMBuilder ( new ByteArrayInputStream ( baosForTarget . toByteArray ( ) ) ) ; OMElement result = builder . getDocumentElement ( ) ; if ( shouldTrace ) { trace . trace ( "Transformation result : " + result . toString ( ) ) ; } if ( log . isDebugEnabled ( ) ) { log . debug ( "Transformation result : " + result ) ; } sourceNode . insertSiblingAfter ( result ) ; sourceNode . detach ( ) ; } catch ( TransformerException e ) { handleException ( "Error performing XSLT transformation " + xsltKey , e ) ; } catch ( XMLStreamException e ) { handleException ( "Error building result from XSLT transformation" , e ) ; } } private OMNode getTransformSource ( MessageContext synCtx ) { try { Object o = source . evaluate ( synCtx . getEnvelope ( ) ) ; if ( o instanceof OMNode ) { return ( OMNode ) o ; } else if ( o instanceof List && ! ( ( List ) o ) . isEmpty ( ) ) { return ( OMNode ) ( ( List ) o ) . get ( 0 ) ; } else { handleException ( "The evaluation of the XPath expression " + source + " must result in an OMNode" ) ; } } catch ( JaxenException e ) { handleException ( "Error evaluating XPath " + source + " on message" ) ; } return null ; } private void handleException ( String msg , Exception e ) { log . error ( msg , e ) ; throw new SynapseException ( msg , e ) ; } private void handleException ( String msg ) { log . error ( msg ) ; throw new SynapseException ( msg ) ; } public AXIOMXPath getSource ( ) { return source ; } public void setSource ( AXIOMXPath source ) { this . source = source ; } public String getXsltKey ( ) { return xsltKey ; } public void setXsltKey ( String xsltKey ) { this . xsltKey = xsltKey ; } public void addProperty ( MediatorProperty p ) { properties . add ( p ) ; } public void addAllProperties ( List list ) { properties . addAll ( list ) ; } public List getProperties ( ) { return properties ; } } 	1	['15', '2', '0', '17', '68', '43', '2', '15', '9', '0.825396825', '473', '0.777777778', '0', '0.315789474', '0.223214286', '0', '0', '29.93333333', '10', '1.8', '1']
package org . apache . synapse . config . xml ; import org . apache . axiom . om . OMAttribute ; import org . apache . axiom . om . OMElement ; import org . apache . axiom . om . xpath . AXIOMXPath ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import org . apache . synapse . SynapseException ; import org . apache . synapse . Mediator ; import org . apache . synapse . mediators . transform . FaultMediator ; import org . jaxen . JaxenException ; import javax . xml . namespace . QName ; import java . net . URI ; import java . net . URISyntaxException ; public class FaultMediatorFactory extends AbstractMediatorFactory { private static final QName FAULT_Q = new QName ( Constants . SYNAPSE_NAMESPACE , "makefault" ) ; private static final QName ATT_VERSION_Q = new QName ( Constants . NULL_NAMESPACE , "version" ) ; private static final QName CODE_Q = new QName ( Constants . SYNAPSE_NAMESPACE , "code" ) ; private static final QName REASON_Q = new QName ( Constants . SYNAPSE_NAMESPACE , "reason" ) ; private static final QName NODE_Q = new QName ( Constants . SYNAPSE_NAMESPACE , "node" ) ; private static final QName ROLE_Q = new QName ( Constants . SYNAPSE_NAMESPACE , "role" ) ; private static final QName DETAIL_Q = new QName ( Constants . SYNAPSE_NAMESPACE , "detail" ) ; private static final QName ATT_VALUE_Q = new QName ( Constants . NULL_NAMESPACE , "value" ) ; private static final QName ATT_EXPR_Q = new QName ( Constants . NULL_NAMESPACE , "expression" ) ; private static final String SOAP11 = "soap11" ; private static final String SOAP12 = "soap12" ; private static final Log log = LogFactory . getLog ( FaultMediatorFactory . class ) ; public Mediator createMediator ( OMElement elem ) { FaultMediator faultMediator = new FaultMediator ( ) ; OMAttribute version = elem . getAttribute ( ATT_VERSION_Q ) ; if ( version != null ) { if ( SOAP11 . equals ( version . getAttributeValue ( ) ) ) { faultMediator . setSoapVersion ( FaultMediator . SOAP11 ) ; } else if ( SOAP12 . equals ( version . getAttributeValue ( ) ) ) { faultMediator . setSoapVersion ( FaultMediator . SOAP12 ) ; } else { String msg = "Invalid SOAP version" ; log . error ( msg ) ; throw new SynapseException ( msg ) ; } } OMElement code = elem . getFirstChildWithName ( CODE_Q ) ; if ( code != null ) { OMAttribute value = code . getAttribute ( ATT_VALUE_Q ) ; OMAttribute expression = code . getAttribute ( ATT_EXPR_Q ) ; if ( value != null ) { String strValue = value . getAttributeValue ( ) ; String prefix , name ; if ( strValue . indexOf ( ":" ) != - 1 ) { prefix = strValue . substring ( 0 , strValue . indexOf ( ":" ) ) ; name = strValue . substring ( strValue . indexOf ( ":" ) + 1 ) ; } else { String msg = "A QName is expected for fault code as prefix:name" ; log . error ( msg ) ; throw new SynapseException ( msg ) ; } faultMediator . setFaultCodeValue ( new QName ( OMElementUtils . getNameSpaceWithPrefix ( prefix , code ) , name , prefix ) ) ; } else if ( expression != null ) { try { AXIOMXPath xp = new AXIOMXPath ( expression . getAttributeValue ( ) ) ; OMElementUtils . addNameSpaces ( xp , code , log ) ; faultMediator . setFaultCodeExpr ( xp ) ; } catch ( JaxenException je ) { String msg = "Invalid fault code expression : " + je . getMessage ( ) ; log . error ( msg ) ; throw new SynapseException ( msg , je ) ; } } else { String msg = "A 'value' or 'expression' attribute must specify the fault code" ; log . error ( msg ) ; throw new SynapseException ( msg ) ; } } else { String msg = "The fault code is a required attribute for the makefault mediator" ; log . error ( msg ) ; throw new SynapseException ( msg ) ; } OMElement reason = elem . getFirstChildWithName ( REASON_Q ) ; if ( reason != null ) { OMAttribute value = reason . getAttribute ( ATT_VALUE_Q ) ; OMAttribute expression = reason . getAttribute ( ATT_EXPR_Q ) ; if ( value != null ) { faultMediator . setFaultReasonValue ( value . getAttributeValue ( ) ) ; } else if ( expression != null ) { try { AXIOMXPath xp = new AXIOMXPath ( expression . getAttributeValue ( ) ) ; OMElementUtils . addNameSpaces ( xp , reason , log ) ; faultMediator . setFaultReasonExpr ( xp ) ; } catch ( JaxenException je ) { String msg = "Invalid fault reason expression : " + je . getMessage ( ) ; log . error ( msg ) ; throw new SynapseException ( msg , je ) ; } } else { String msg = "A 'value' or 'expression' attribute must specify the fault code" ; log . error ( msg ) ; throw new SynapseException ( msg ) ; } } else { String msg = "The fault reason is a required attribute for the makefault mediator" ; log . error ( msg ) ; throw new SynapseException ( msg ) ; } initMediator ( faultMediator , elem ) ; OMElement node = elem . getFirstChildWithName ( NODE_Q ) ; if ( node != null && node . getText ( ) != null ) { try { faultMediator . setFaultNode ( new URI ( node . getText ( ) ) ) ; } catch ( URISyntaxException e ) { String msg = "Invalid URI specified for fault node : " + node . getText ( ) ; log . error ( msg ) ; throw new SynapseException ( msg ) ; } } OMElement role = elem . getFirstChildWithName ( ROLE_Q ) ; if ( role != null && role . getText ( ) != null ) { try { faultMediator . setFaultRole ( new URI ( role . getText ( ) ) ) ; } catch ( URISyntaxException e ) { String msg = "Invalid URI specified for fault role : " + role . getText ( ) ; log . error ( msg ) ; throw new SynapseException ( msg ) ; } } OMElement detail = elem . getFirstChildWithName ( DETAIL_Q ) ; if ( detail != null && detail . getText ( ) != null ) { faultMediator . setFaultDetail ( detail . getText ( ) ) ; } return faultMediator ; } public QName getTagQName ( ) { return FAULT_Q ; } } 	0	['5', '2', '0', '11', '41', '6', '0', '11', '3', '0.846153846', '423', '0.923076923', '0', '0.25', '0.416666667', '0', '0', '81', '17', '3.8', '0']
package org . apache . synapse . mediators . transform ; import org . apache . axiom . om . xpath . AXIOMXPath ; import org . apache . axiom . om . OMElement ; import org . apache . axiom . soap . SOAPHeaderBlock ; import org . apache . axiom . soap . SOAPEnvelope ; import org . apache . axiom . soap . SOAPFactory ; import org . apache . axiom . soap . SOAPHeader ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import org . apache . synapse . * ; import org . apache . synapse . core . axis2 . Axis2MessageContext ; import org . apache . synapse . mediators . AbstractMediator ; import org . apache . axis2 . addressing . EndpointReference ; import javax . xml . namespace . QName ; import java . util . List ; import java . util . Iterator ; public class HeaderMediator extends AbstractMediator { private static final Log log = LogFactory . getLog ( HeaderMediator . class ) ; private static final Log trace = LogFactory . getLog ( Constants . TRACE_LOGGER ) ; public static final int ACTION_SET = 0 ; public static final int ACTION_REMOVE = 1 ; private QName qName = null ; private String value = null ; private int action = ACTION_SET ; private AXIOMXPath expression = null ; public boolean mediate ( MessageContext synCtx ) { log . debug ( "Header mediator <" + ( action == ACTION_SET ? "Set" : "Remove" ) + "> :: mediate()" ) ; boolean shouldTrace = shouldTrace ( synCtx . getTracingState ( ) ) ; if ( shouldTrace ) { trace . trace ( "Start : Header mediator, action = " + ( action == ACTION_SET ? "set" : "remove" ) ) ; } if ( action == ACTION_SET ) { String value = ( getValue ( ) != null ? getValue ( ) : Axis2MessageContext . getStringValue ( getExpression ( ) , synCtx ) ) ; log . debug ( "Setting header : " + qName + " to : " + value ) ; if ( shouldTrace ) { trace . trace ( "Set Header : " + qName + " to : " + value ) ; } if ( qName . getNamespaceURI ( ) == null || "" . equals ( qName . getNamespaceURI ( ) ) ) { if ( Constants . HEADER_TO . equals ( qName . getLocalPart ( ) ) ) { synCtx . setTo ( new EndpointReference ( value ) ) ; } else if ( Constants . HEADER_FROM . equals ( qName . getLocalPart ( ) ) ) { synCtx . setFrom ( new EndpointReference ( value ) ) ; } else if ( Constants . HEADER_ACTION . equals ( qName . getLocalPart ( ) ) ) { synCtx . setWSAAction ( value ) ; } else if ( Constants . HEADER_FAULT . equals ( qName . getLocalPart ( ) ) ) { synCtx . setFaultTo ( new EndpointReference ( value ) ) ; } else if ( Constants . HEADER_REPLY_TO . equals ( qName . getLocalPart ( ) ) ) { synCtx . setReplyTo ( new EndpointReference ( value ) ) ; } else { addCustomHeader ( synCtx ) ; } } else { addCustomHeader ( synCtx ) ; } } else { log . debug ( "Removing header : " + qName + " from current message" ) ; if ( shouldTrace ) { trace . trace ( "Remove Header : " + qName ) ; } if ( qName . getNamespaceURI ( ) == null || "" . equals ( qName . getNamespaceURI ( ) ) ) { if ( Constants . HEADER_TO . equals ( qName . getLocalPart ( ) ) ) { synCtx . setTo ( null ) ; } else if ( Constants . HEADER_FROM . equals ( qName . getLocalPart ( ) ) ) { synCtx . setFrom ( null ) ; } else if ( Constants . HEADER_ACTION . equals ( qName . getLocalPart ( ) ) ) { synCtx . setWSAAction ( null ) ; } else if ( Constants . HEADER_FAULT . equals ( qName . getLocalPart ( ) ) ) { synCtx . setFaultTo ( null ) ; } else if ( Constants . HEADER_REPLY_TO . equals ( qName . getLocalPart ( ) ) ) { synCtx . setReplyTo ( null ) ; } else { removeFromHeaderList ( synCtx . getEnvelope ( ) . getHeader ( ) . getHeaderBlocksWithNSURI ( "" ) ) ; } } else { removeFromHeaderList ( synCtx . getEnvelope ( ) . getHeader ( ) . getHeaderBlocksWithNSURI ( qName . getNamespaceURI ( ) ) ) ; } } if ( shouldTrace ) { trace . trace ( "End : Header mediator" ) ; } return true ; } private void addCustomHeader ( MessageContext synCtx ) { SOAPEnvelope env = synCtx . getEnvelope ( ) ; SOAPFactory fac = ( SOAPFactory ) env . getOMFactory ( ) ; SOAPHeader header = env . getHeader ( ) ; if ( header == null ) { header = fac . createSOAPHeader ( env ) ; } SOAPHeaderBlock hb = header . addHeaderBlock ( qName . getLocalPart ( ) , fac . createOMNamespace ( qName . getNamespaceURI ( ) , qName . getPrefix ( ) ) ) ; hb . setText ( value ) ; } private void removeFromHeaderList ( List headersList ) { if ( headersList == null || headersList . isEmpty ( ) ) { return ; } Iterator iter = headersList . iterator ( ) ; while ( iter . hasNext ( ) ) { Object o = iter . next ( ) ; if ( o instanceof SOAPHeaderBlock ) { SOAPHeaderBlock header = ( SOAPHeaderBlock ) o ; if ( header . getLocalName ( ) . equals ( qName . getLocalPart ( ) ) ) { header . detach ( ) ; } } else if ( o instanceof OMElement ) { OMElement omElem = ( OMElement ) o ; if ( omElem . getLocalName ( ) . equals ( qName . getLocalPart ( ) ) ) { omElem . detach ( ) ; } } } } public int getAction ( ) { return action ; } public void setAction ( int action ) { this . action = action ; } public QName getQName ( ) { return qName ; } public void setQName ( QName qName ) { this . qName = qName ; } public String getValue ( ) { return value ; } public void setValue ( String value ) { this . value = value ; } public AXIOMXPath getExpression ( ) { return expression ; } public void setExpression ( AXIOMXPath expression ) { this . expression = expression ; } private void handleException ( String msg ) { log . error ( msg ) ; throw new SynapseException ( msg ) ; } } 	1	['15', '2', '0', '18', '58', '43', '2', '16', '10', '0.873015873', '459', '0.666666667', '0', '0.315789474', '0.224489796', '0', '0', '29', '23', '2.6667', '1']
package org . apache . synapse . statistics . impl ; import org . apache . synapse . statistics . StatisticsStack ; import org . apache . synapse . statistics . StatisticsCollector ; import java . util . ArrayList ; import java . util . Iterator ; import java . util . List ; public class SequenceStatisticsStack implements StatisticsStack { private List sequenceStatisticsList = new ArrayList ( ) ; public void put ( String sequenceName , long initTime , boolean isInFlow , boolean isStatisticsEnable , boolean isFault ) { sequenceStatisticsList . add ( new SequenceStatistics ( sequenceName , initTime , isInFlow , isStatisticsEnable , isFault ) ) ; } public void reportToStatisticsCollector ( StatisticsCollector statisticsCollector , boolean isFault ) { int top = sequenceStatisticsList . size ( ) ; if ( top > 0 ) { popSequenceStatistics ( sequenceStatisticsList . size ( ) - 1 , statisticsCollector ) ; } } public void reportToStatisticsCollector ( StatisticsCollector statisticsCollector , boolean isFault , String name ) { if ( ! sequenceStatisticsList . isEmpty ( ) ) { List tobeRemoved = new ArrayList ( ) ; for ( Iterator seqIterator = sequenceStatisticsList . iterator ( ) ; seqIterator . hasNext ( ) ; ) { SequenceStatistics sequenceStatistics = ( SequenceStatistics ) seqIterator . next ( ) ; if ( sequenceStatistics != null ) { if ( sequenceStatistics . isStatisticsEnable && sequenceStatistics . sequenceName != null && sequenceStatistics . sequenceName . equals ( name ) ) { statisticsCollector . reportForSequence ( sequenceStatistics . sequenceName , ! sequenceStatistics . isInFlow , sequenceStatistics . initTime , System . currentTimeMillis ( ) , sequenceStatistics . isFault ) ; } tobeRemoved . add ( sequenceStatistics ) ; } } sequenceStatisticsList . removeAll ( tobeRemoved ) ; } } public void reportAllToStatisticsCollector ( StatisticsCollector statisticsCollector , boolean isFault ) { int i = sequenceStatisticsList . size ( ) - 1 ; for ( ; i >= 0 ; i -- ) { popSequenceStatistics ( i , statisticsCollector ) ; } } private void popSequenceStatistics ( int index , StatisticsCollector statisticsCollector ) { if ( index >= 0 ) { SequenceStatistics sequenceStatistics = ( SequenceStatistics ) sequenceStatisticsList . get ( index ) ; if ( sequenceStatistics != null ) { if ( sequenceStatistics . isStatisticsEnable && sequenceStatistics . sequenceName != null ) { statisticsCollector . reportForSequence ( sequenceStatistics . sequenceName , ! sequenceStatistics . isInFlow , sequenceStatistics . initTime , System . currentTimeMillis ( ) , sequenceStatistics . isFault ) ; } sequenceStatisticsList . remove ( index ) ; } } } class SequenceStatistics { String sequenceName ; long initTime ; boolean isInFlow ; boolean isStatisticsEnable ; private boolean isFault ; public SequenceStatistics ( String sequenceName , long initTime , boolean inFlow , boolean statisticsEnable , boolean isFault ) { this . sequenceName = sequenceName ; this . initTime = initTime ; isInFlow = inFlow ; isStatisticsEnable = statisticsEnable ; this . isFault = isFault ; } public boolean equals ( Object o ) { if ( this == o ) return true ; if ( o == null || getClass ( ) != o . getClass ( ) ) return false ; final SequenceStatistics that = ( SequenceStatistics ) o ; if ( ! sequenceName . equals ( that . sequenceName ) ) return false ; return true ; } public int hashCode ( ) { return sequenceName . hashCode ( ) ; } } } 	0	['6', '1', '0', '6', '22', '0', '4', '3', '5', '0', '154', '1', '0', '0', '0.5', '0', '0', '24.5', '7', '3', '0']
package org . apache . synapse . config . xml ; import javax . xml . namespace . QName ; import org . apache . axiom . om . OMAttribute ; import org . apache . axiom . om . OMElement ; import org . apache . axiom . om . xpath . AXIOMXPath ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import org . apache . synapse . Mediator ; import org . apache . synapse . SynapseException ; import org . apache . synapse . mediators . builtin . PropertyMediator ; import org . jaxen . JaxenException ; public class PropertyMediatorFactory extends AbstractMediatorFactory { private static final Log log = LogFactory . getLog ( LogMediatorFactory . class ) ; private static final QName PROP_Q = new QName ( Constants . SYNAPSE_NAMESPACE , "property" ) ; public Mediator createMediator ( OMElement elem ) { PropertyMediator propMediator = new PropertyMediator ( ) ; OMAttribute name = elem . getAttribute ( new QName ( Constants . NULL_NAMESPACE , "name" ) ) ; OMAttribute value = elem . getAttribute ( new QName ( Constants . NULL_NAMESPACE , "value" ) ) ; OMAttribute expression = elem . getAttribute ( new QName ( Constants . NULL_NAMESPACE , "expression" ) ) ; OMAttribute scope = elem . getAttribute ( new QName ( Constants . NULL_NAMESPACE , "scope" ) ) ; OMAttribute action = elem . getAttribute ( new QName ( Constants . NULL_NAMESPACE , "action" ) ) ; if ( name == null ) { String msg = "The 'name' attribute is required for the configuration of a property mediator" ; log . error ( msg ) ; throw new SynapseException ( msg ) ; } else if ( ( value == null && expression == null ) && ! ( action != null && "remove" . equals ( action . getAttributeValue ( ) ) ) ) { String msg = "Either an 'value' or 'expression' attribute is required for a property mediator when action is SET" ; log . error ( msg ) ; throw new SynapseException ( msg ) ; } propMediator . setName ( name . getAttributeValue ( ) ) ; if ( value != null ) { propMediator . setValue ( value . getAttributeValue ( ) ) ; } else if ( expression != null ) { try { AXIOMXPath xp = new AXIOMXPath ( expression . getAttributeValue ( ) ) ; OMElementUtils . addNameSpaces ( xp , elem , log ) ; propMediator . setExpression ( xp ) ; } catch ( JaxenException e ) { String msg = "Invalid XPath expression for attribute 'expression' : " + expression . getAttributeValue ( ) ; log . error ( msg ) ; throw new SynapseException ( msg ) ; } } if ( scope != null ) { String valueStr = scope . getAttributeValue ( ) ; if ( ! Constants . SCOPE_AXIS2 . equals ( valueStr ) && ! Constants . SCOPE_TRANSPORT . equals ( valueStr ) && ! Constants . SCOPE_DEFAULT . equals ( valueStr ) ) { String msg = "Only '" + Constants . SCOPE_AXIS2 + "' or '" + Constants . SCOPE_TRANSPORT + "' values are allowed for attribute scope for a property mediator" + ", Unsupported scope " + valueStr ; log . error ( msg ) ; throw new SynapseException ( msg ) ; } propMediator . setScope ( valueStr ) ; } initMediator ( propMediator , elem ) ; if ( action != null && "remove" . equals ( action . getAttributeValue ( ) ) ) { propMediator . setAction ( PropertyMediator . ACTION_REMOVE ) ; } return propMediator ; } public QName getTagQName ( ) { return PROP_Q ; } } 	1	['5', '2', '0', '11', '28', '6', '0', '11', '3', '0.833333333', '216', '0.666666667', '0', '0.25', '0.416666667', '0', '0', '41.6', '14', '3.2', '1']
package org . apache . synapse . config ; import org . apache . axiom . om . OMNode ; public interface XMLToObjectMapper { public Object getObjectFromOMNode ( OMNode om ) ; } 	0	['1', '1', '0', '9', '1', '0', '8', '1', '1', '2', '1', '0', '0', '0', '1', '0', '0', '0', '1', '1', '0']
package org . apache . synapse . endpoints ; import org . apache . synapse . MessageContext ; import org . apache . synapse . Constants ; import org . apache . synapse . FaultHandler ; import org . apache . synapse . endpoints . utils . EndpointDefinition ; import org . apache . synapse . core . axis2 . Axis2MessageContext ; import org . apache . synapse . statistics . impl . EndPointStatisticsStack ; import org . apache . axis2 . addressing . EndpointReference ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import java . util . Stack ; public class AddressEndpoint extends FaultHandler implements Endpoint { private static final Log log = LogFactory . getLog ( AddressEndpoint . class ) ; private String name = null ; private volatile boolean active = true ; private EndpointDefinition endpoint = null ; private Endpoint parentEndpoint = null ; private long suspendOnFailDuration = - 1 ; private long recoverOn = Long . MAX_VALUE ; public EndpointDefinition getEndpoint ( ) { return endpoint ; } public void setEndpoint ( EndpointDefinition endpoint ) { this . endpoint = endpoint ; } public String getName ( ) { return name ; } public void setName ( String name ) { this . name = name . trim ( ) ; } public boolean isActive ( MessageContext synMessageContext ) { if ( ! active ) { if ( System . currentTimeMillis ( ) > recoverOn ) { active = true ; recoverOn = 0 ; } } return active ; } public synchronized void setActive ( boolean active , MessageContext synMessageContext ) { if ( ! active ) { if ( suspendOnFailDuration != - 1 ) { recoverOn = System . currentTimeMillis ( ) + suspendOnFailDuration ; } else { recoverOn = Long . MAX_VALUE ; } } this . active = active ; } public void send ( MessageContext synCtx ) { String endPointName = this . getName ( ) ; if ( endPointName == null ) { endPointName = Constants . ANONYMOUS_ENDPOINTS ; } boolean statisticsEnable = ( org . apache . synapse . Constants . STATISTICS_ON == endpoint . getStatisticsEnable ( ) ) ; if ( statisticsEnable ) { EndPointStatisticsStack endPointStatisticsStack = null ; Object statisticsStackObj = synCtx . getProperty ( org . apache . synapse . Constants . ENDPOINT_STATISTICS_STACK ) ; if ( statisticsStackObj == null ) { endPointStatisticsStack = new EndPointStatisticsStack ( ) ; synCtx . setProperty ( org . apache . synapse . Constants . ENDPOINT_STATISTICS_STACK , endPointStatisticsStack ) ; } else if ( statisticsStackObj instanceof EndPointStatisticsStack ) { endPointStatisticsStack = ( EndPointStatisticsStack ) statisticsStackObj ; } if ( endPointStatisticsStack != null ) { boolean isFault = synCtx . getEnvelope ( ) . getBody ( ) . hasFault ( ) ; endPointStatisticsStack . put ( endPointName , System . currentTimeMillis ( ) , ! synCtx . isResponse ( ) , statisticsEnable , isFault ) ; } } if ( endpoint . getAddress ( ) != null ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Sending message to endpoint :: name = " + endPointName + " resolved address = " + endpoint . getAddress ( ) ) ; log . debug ( "SOAPAction: " + ( synCtx . getSoapAction ( ) != null ? synCtx . getSoapAction ( ) : "null" ) ) ; log . debug ( "WSA-Action: " + ( synCtx . getWSAAction ( ) != null ? synCtx . getWSAAction ( ) : "null" ) ) ; log . debug ( "Body : \n" + synCtx . getEnvelope ( ) ) ; } } synCtx . pushFaultHandler ( this ) ; synCtx . setProperty ( Constants . PROCESSED_ENDPOINT , this ) ; synCtx . getEnvironment ( ) . send ( endpoint , synCtx ) ; } public void onChildEndpointFail ( Endpoint endpoint , MessageContext synMessageContext ) { } public void setParentEndpoint ( Endpoint parentEndpoint ) { this . parentEndpoint = parentEndpoint ; } public long getSuspendOnFailDuration ( ) { return suspendOnFailDuration ; } public void setSuspendOnFailDuration ( long suspendOnFailDuration ) { this . suspendOnFailDuration = suspendOnFailDuration ; } public void onFault ( MessageContext synCtx ) { setActive ( false , synCtx ) ; if ( parentEndpoint != null ) { parentEndpoint . onChildEndpointFail ( this , synCtx ) ; } else { Stack faultStack = synCtx . getFaultStack ( ) ; if ( ! faultStack . isEmpty ( ) ) { ( ( FaultHandler ) faultStack . pop ( ) ) . handleFault ( synCtx ) ; } } } } 	1	['15', '2', '0', '13', '48', '63', '3', '10', '13', '0.830357143', '295', '0.875', '2', '0.235294118', '0.255102041', '1', '1', '18.13333333', '12', '2', '1']
package org . apache . synapse . mediators . builtin ; import org . apache . axiom . soap . SOAPHeaderBlock ; import org . apache . axiom . soap . SOAPHeader ; import org . apache . axiom . om . OMElement ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import org . apache . synapse . Constants ; import org . apache . synapse . MessageContext ; import org . apache . synapse . mediators . AbstractMediator ; import org . apache . synapse . mediators . MediatorProperty ; import java . util . ArrayList ; import java . util . Iterator ; import java . util . List ; public class LogMediator extends AbstractMediator { private static final Log log = LogFactory . getLog ( LogMediator . class ) ; private static final Log trace = LogFactory . getLog ( Constants . TRACE_LOGGER ) ; public static final int CUSTOM = 0 ; public static final int SIMPLE = 1 ; public static final int HEADERS = 2 ; public static final int FULL = 3 ; public static final String DEFAULT_SEP = ", " ; private int logLevel = SIMPLE ; private String separator = DEFAULT_SEP ; private List properties = new ArrayList ( ) ; public boolean mediate ( MessageContext synCtx ) { log . debug ( "Log mediator :: mediate()" ) ; boolean shouldTrace = shouldTrace ( synCtx . getTracingState ( ) ) ; if ( shouldTrace ) { trace . trace ( "Start : Log mediator" ) ; } String logMessage = getLogMessage ( synCtx ) ; log . info ( logMessage ) ; if ( shouldTrace ) { trace . trace ( logMessage ) ; trace . trace ( "End : Log mediator" ) ; } return true ; } private String getLogMessage ( MessageContext synCtx ) { switch ( logLevel ) { case CUSTOM : return getCustomLogMessage ( synCtx ) ; case SIMPLE : return getSimpleLogMessage ( synCtx ) ; case HEADERS : return getHeadersLogMessage ( synCtx ) ; case FULL : return getFullLogMessage ( synCtx ) ; default : return "Invalid log level specified" ; } } private String getCustomLogMessage ( MessageContext synCtx ) { StringBuffer sb = new StringBuffer ( ) ; setCustomProperties ( sb , synCtx ) ; return trimLeadingSeparator ( sb ) ; } private String getSimpleLogMessage ( MessageContext synCtx ) { StringBuffer sb = new StringBuffer ( ) ; if ( synCtx . getTo ( ) != null ) sb . append ( "To: " + synCtx . getTo ( ) . getAddress ( ) ) ; else sb . append ( "To: " ) ; if ( synCtx . getFrom ( ) != null ) sb . append ( separator + "From: " + synCtx . getFrom ( ) . getAddress ( ) ) ; if ( synCtx . getWSAAction ( ) != null ) sb . append ( separator + "WSAction: " + synCtx . getWSAAction ( ) ) ; if ( synCtx . getSoapAction ( ) != null ) sb . append ( separator + "SOAPAction: " + synCtx . getSoapAction ( ) ) ; if ( synCtx . getReplyTo ( ) != null ) sb . append ( separator + "ReplyTo: " + synCtx . getReplyTo ( ) . getAddress ( ) ) ; if ( synCtx . getMessageID ( ) != null ) sb . append ( separator + "MessageID: " + synCtx . getMessageID ( ) ) ; setCustomProperties ( sb , synCtx ) ; return trimLeadingSeparator ( sb ) ; } private String getHeadersLogMessage ( MessageContext synCtx ) { StringBuffer sb = new StringBuffer ( ) ; SOAPHeader header = synCtx . getEnvelope ( ) . getHeader ( ) ; if ( header != null ) { Iterator iter = header . examineAllHeaderBlocks ( ) ; while ( iter . hasNext ( ) ) { Object o = iter . next ( ) ; if ( o instanceof SOAPHeaderBlock ) { SOAPHeaderBlock headerBlk = ( SOAPHeaderBlock ) o ; sb . append ( separator + headerBlk . getLocalName ( ) + " : " + headerBlk . getText ( ) ) ; } else if ( o instanceof OMElement ) { OMElement headerElem = ( OMElement ) o ; sb . append ( separator + headerElem . getLocalName ( ) + " : " + headerElem . getText ( ) ) ; } } } setCustomProperties ( sb , synCtx ) ; return trimLeadingSeparator ( sb ) ; } private String getFullLogMessage ( MessageContext synCtx ) { StringBuffer sb = new StringBuffer ( ) ; sb . append ( getSimpleLogMessage ( synCtx ) ) ; if ( synCtx . getEnvelope ( ) != null ) sb . append ( separator + "Envelope: " + synCtx . getEnvelope ( ) ) ; return trimLeadingSeparator ( sb ) ; } private void setCustomProperties ( StringBuffer sb , MessageContext synCtx ) { if ( properties != null && ! properties . isEmpty ( ) ) { Iterator iter = properties . iterator ( ) ; while ( iter . hasNext ( ) ) { MediatorProperty prop = ( MediatorProperty ) iter . next ( ) ; sb . append ( separator + prop . getName ( ) + " = " + ( prop . getValue ( ) != null ? prop . getValue ( ) : prop . getEvaluatedExpression ( synCtx ) ) ) ; } } } public int getLogLevel ( ) { return logLevel ; } public void setLogLevel ( int logLevel ) { this . logLevel = logLevel ; } public String getSeparator ( ) { return separator ; } public void setSeparator ( String separator ) { this . separator = separator ; } public void addProperty ( MediatorProperty p ) { properties . add ( p ) ; } public void addAllProperties ( List list ) { properties . addAll ( list ) ; } public List getProperties ( ) { return properties ; } private String trimLeadingSeparator ( StringBuffer sb ) { String retStr = sb . toString ( ) ; if ( retStr . startsWith ( separator ) ) { return retStr . substring ( separator . length ( ) ) ; } else { return retStr ; } } } 	0	['18', '2', '0', '13', '60', '65', '3', '10', '9', '0.903743316', '454', '0.454545455', '0', '0.272727273', '0.25210084', '0', '0', '23.61111111', '7', '1.8889', '0']
package org . apache . synapse . mediators . transform ; import org . apache . axiom . om . OMAbstractFactory ; import org . apache . axiom . om . OMDocument ; import org . apache . axiom . om . OMElement ; import org . apache . axiom . om . xpath . AXIOMXPath ; import org . apache . axiom . soap . * ; import org . apache . axis2 . AxisFault ; import org . apache . axis2 . addressing . EndpointReference ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import org . apache . synapse . MessageContext ; import org . apache . synapse . SynapseException ; import org . apache . synapse . Constants ; import org . apache . synapse . core . axis2 . Axis2MessageContext ; import org . apache . synapse . mediators . AbstractMediator ; import javax . xml . namespace . QName ; import java . net . URI ; import java . util . Iterator ; public class FaultMediator extends AbstractMediator { private static final Log log = LogFactory . getLog ( FaultMediator . class ) ; private static final Log trace = LogFactory . getLog ( Constants . TRACE_LOGGER ) ; public static final String WSA_ACTION = "Action" ; public static final int SOAP11 = 1 ; public static final int SOAP12 = 2 ; private int soapVersion ; private QName faultCodeValue = null ; private AXIOMXPath faultCodeExpr = null ; private String faultReasonValue = null ; private AXIOMXPath faultReasonExpr = null ; private URI faultNode = null ; private URI faultRole = null ; private String faultDetail = null ; public boolean mediate ( MessageContext synCtx ) { log . debug ( "Fault mediator mediate()" ) ; boolean shouldTrace = shouldTrace ( synCtx . getTracingState ( ) ) ; SOAPEnvelope envelop = synCtx . getEnvelope ( ) ; if ( shouldTrace ) { trace . trace ( "Start : Fault mediator" ) ; } switch ( soapVersion ) { case SOAP11 : return makeSOAPFault ( synCtx , SOAP11 , shouldTrace ) ; case SOAP12 : return makeSOAPFault ( synCtx , SOAP12 , shouldTrace ) ; default : { if ( envelop != null ) { if ( SOAP12Constants . SOAP_ENVELOPE_NAMESPACE_URI . equals ( envelop . getNamespace ( ) . getNamespaceURI ( ) ) ) { soapVersion = SOAP12 ; return makeSOAPFault ( synCtx , SOAP12 , shouldTrace ) ; } else { soapVersion = SOAP11 ; return makeSOAPFault ( synCtx , SOAP11 , shouldTrace ) ; } } else { return makeSOAPFault ( synCtx , SOAP11 , shouldTrace ) ; } } } } private boolean makeSOAPFault ( MessageContext synCtx , int soapVersion , boolean shouldTrace ) { log . debug ( "Creating a SOAP fault using SOAP " + ( soapVersion == SOAP11 ? "1.1" : "1.2" ) ) ; SOAPFactory factory = ( soapVersion == SOAP11 ? OMAbstractFactory . getSOAP11Factory ( ) : OMAbstractFactory . getSOAP12Factory ( ) ) ; OMDocument soapFaultDocument = factory . createOMDocument ( ) ; SOAPEnvelope faultEnvelope = factory . getDefaultFaultEnvelope ( ) ; soapFaultDocument . addChild ( faultEnvelope ) ; SOAPFault fault = faultEnvelope . getBody ( ) . getFault ( ) ; if ( fault == null ) { fault = factory . createSOAPFault ( ) ; } setFaultCode ( synCtx , factory , fault ) ; setFaultResaon ( synCtx , factory , fault ) ; setFaultNode ( factory , fault ) ; setFaultRole ( factory , fault ) ; setFaultDetail ( factory , fault ) ; Iterator iter = synCtx . getEnvelope ( ) . getHeader ( ) . examineAllHeaderBlocks ( ) ; if ( iter . hasNext ( ) ) { while ( iter . hasNext ( ) ) { Object o = iter . next ( ) ; if ( o instanceof SOAPHeaderBlock ) { SOAPHeaderBlock header = ( SOAPHeaderBlock ) o ; faultEnvelope . getHeader ( ) . addChild ( header ) ; } else if ( o instanceof OMElement ) { faultEnvelope . getHeader ( ) . addChild ( ( OMElement ) o ) ; } } } log . debug ( "The fault message as : " + fault ) ; try { if ( shouldTrace ) { trace . trace ( "Original SOAP Message : " + synCtx . getEnvelope ( ) . toString ( ) ) ; trace . trace ( "Fault Message created : " + faultEnvelope . toString ( ) ) ; } synCtx . setEnvelope ( faultEnvelope ) ; } catch ( AxisFault af ) { String msg = "Error replacing SOAP envelope with a fault envelope " + af . getMessage ( ) ; log . error ( msg ) ; throw new SynapseException ( af ) ; } if ( synCtx . getFaultTo ( ) != null ) { synCtx . setTo ( synCtx . getFaultTo ( ) ) ; } else if ( synCtx . getReplyTo ( ) != null ) { synCtx . setTo ( synCtx . getReplyTo ( ) ) ; } else { synCtx . setTo ( null ) ; } if ( shouldTrace ) { trace . trace ( "End : Fault mediator" ) ; } return true ; } private void setFaultCode ( MessageContext synCtx , SOAPFactory factory , SOAPFault fault ) { QName fault_code = null ; if ( faultCodeValue == null && faultCodeExpr == null ) { handleException ( "A valid fault code QName value or expression is required" ) ; } else if ( faultCodeValue != null ) { fault_code = faultCodeValue ; } else { fault_code = QName . valueOf ( Axis2MessageContext . getStringValue ( faultCodeExpr , synCtx ) ) ; } SOAPFaultCode code = factory . createSOAPFaultCode ( ) ; switch ( soapVersion ) { case SOAP11 : code . setText ( fault_code ) ; break ; case SOAP12 : SOAPFaultValue value = factory . createSOAPFaultValue ( code ) ; value . setText ( fault_code ) ; break ; } fault . setCode ( code ) ; } private void setFaultResaon ( MessageContext synCtx , SOAPFactory factory , SOAPFault fault ) { String reasonString = null ; if ( faultReasonValue == null && faultReasonExpr == null ) { handleException ( "A valid fault reason value or expression is required" ) ; } else if ( faultReasonValue != null ) { reasonString = faultReasonValue ; } else { reasonString = Axis2MessageContext . getStringValue ( faultReasonExpr , synCtx ) ; } SOAPFaultReason reason = factory . createSOAPFaultReason ( ) ; switch ( soapVersion ) { case SOAP11 : reason . setText ( reasonString ) ; break ; case SOAP12 : SOAPFaultText text = factory . createSOAPFaultText ( ) ; text . setText ( reasonString ) ; reason . addSOAPText ( text ) ; break ; } fault . setReason ( reason ) ; } private void setFaultNode ( SOAPFactory factory , SOAPFault fault ) { if ( faultNode != null ) { SOAPFaultNode soapfaultNode = factory . createSOAPFaultNode ( ) ; soapfaultNode . setNodeValue ( faultNode . toString ( ) ) ; fault . setNode ( soapfaultNode ) ; } } private void setFaultRole ( SOAPFactory factory , SOAPFault fault ) { if ( faultRole != null ) { SOAPFaultRole soapFaultRole = factory . createSOAPFaultRole ( ) ; soapFaultRole . setRoleValue ( faultRole . toString ( ) ) ; fault . setRole ( soapFaultRole ) ; } } private void setFaultDetail ( SOAPFactory factory , SOAPFault fault ) { if ( faultDetail != null ) { SOAPFaultDetail soapFaultDetail = factory . createSOAPFaultDetail ( ) ; soapFaultDetail . setText ( faultDetail ) ; fault . setDetail ( soapFaultDetail ) ; } } private void handleException ( String msg ) { log . error ( msg ) ; throw new SynapseException ( msg ) ; } public int getSoapVersion ( ) { return soapVersion ; } public void setSoapVersion ( int soapVersion ) { this . soapVersion = soapVersion ; } public QName getFaultCodeValue ( ) { return faultCodeValue ; } public void setFaultCodeValue ( QName faultCodeValue ) { if ( soapVersion == SOAP11 ) { this . faultCodeValue = faultCodeValue ; } else { if ( SOAP12Constants . SOAP_ENVELOPE_NAMESPACE_URI . equals ( faultCodeValue . getNamespaceURI ( ) ) && ( SOAP12Constants . FAULT_CODE_DATA_ENCODING_UNKNOWN . equals ( faultCodeValue . getLocalPart ( ) ) || SOAP12Constants . FAULT_CODE_MUST_UNDERSTAND . equals ( faultCodeValue . getLocalPart ( ) ) || SOAP12Constants . FAULT_CODE_RECEIVER . equals ( faultCodeValue . getLocalPart ( ) ) || SOAP12Constants . FAULT_CODE_SENDER . equals ( faultCodeValue . getLocalPart ( ) ) || SOAP12Constants . FAULT_CODE_VERSION_MISMATCH . equals ( faultCodeValue . getLocalPart ( ) ) ) ) { this . faultCodeValue = faultCodeValue ; } else { String msg = "Invalid Fault code value for a SOAP 1.2 fault : " + faultCodeValue ; log . error ( msg ) ; throw new SynapseException ( msg ) ; } } } public AXIOMXPath getFaultCodeExpr ( ) { return faultCodeExpr ; } public void setFaultCodeExpr ( AXIOMXPath faultCodeExpr ) { this . faultCodeExpr = faultCodeExpr ; } public String getFaultReasonValue ( ) { return faultReasonValue ; } public void setFaultReasonValue ( String faultReasonValue ) { this . faultReasonValue = faultReasonValue ; } public AXIOMXPath getFaultReasonExpr ( ) { return faultReasonExpr ; } public void setFaultReasonExpr ( AXIOMXPath faultReasonExpr ) { this . faultReasonExpr = faultReasonExpr ; } public URI getFaultNode ( ) { return faultNode ; } public void setFaultNode ( URI faultNode ) { if ( soapVersion == SOAP11 ) { handleException ( "A fault node does not apply to a SOAP 1.1 fault" ) ; } this . faultNode = faultNode ; } public URI getFaultRole ( ) { return faultRole ; } public void setFaultRole ( URI faultRole ) { this . faultRole = faultRole ; } public String getFaultDetail ( ) { return faultDetail ; } public void setFaultDetail ( String faultDetail ) { this . faultDetail = faultDetail ; } } 	1	['27', '2', '0', '29', '92', '213', '2', '27', '18', '0.887362637', '596', '0.714285714', '0', '0.193548387', '0.196153846', '0', '0', '20.55555556', '11', '2.3704', '2']
package org . apache . synapse . config . xml ; import org . apache . synapse . mediators . AbstractListMediator ; import org . apache . synapse . MessageContext ; public class AnonymousListMediator extends AbstractListMediator { public boolean mediate ( MessageContext synCtx ) { return super . mediate ( synCtx ) ; } } 	0	['2', '3', '0', '7', '4', '1', '5', '2', '2', '2', '9', '0', '0', '0.933333333', '0.75', '0', '0', '3.5', '1', '0.5', '0']
package org . apache . synapse . config . xml . endpoints ; import org . apache . axiom . om . OMElement ; import org . apache . axiom . om . OMFactory ; import org . apache . axiom . om . OMAbstractFactory ; import org . apache . synapse . endpoints . Endpoint ; import org . apache . synapse . endpoints . AddressEndpoint ; import org . apache . synapse . SynapseException ; import org . apache . synapse . Constants ; import org . apache . synapse . endpoints . utils . EndpointDefinition ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class AddressEndpointSerializer implements EndpointSerializer { private static Log log = LogFactory . getLog ( AddressEndpointSerializer . class ) ; private OMFactory fac = null ; public OMElement serializeEndpoint ( Endpoint endpoint ) { if ( ! ( endpoint instanceof AddressEndpoint ) ) { throw new SynapseException ( "Invalid endpoint type." ) ; } fac = OMAbstractFactory . getOMFactory ( ) ; OMElement endpointElement = fac . createOMElement ( "endpoint" , Constants . SYNAPSE_OMNAMESPACE ) ; AddressEndpoint addressEndpoint = ( AddressEndpoint ) endpoint ; String name = addressEndpoint . getName ( ) ; if ( name != null ) { endpointElement . addAttribute ( "name" , name , null ) ; } EndpointDefinition epAddress = addressEndpoint . getEndpoint ( ) ; OMElement addressElement = serializeEndpointDefinition ( epAddress ) ; endpointElement . addChild ( addressElement ) ; long suspendDuration = addressEndpoint . getSuspendOnFailDuration ( ) ; if ( suspendDuration != - 1 ) { OMElement suspendElement = fac . createOMElement ( org . apache . synapse . config . xml . Constants . SUSPEND_DURATION_ON_FAILURE , Constants . SYNAPSE_OMNAMESPACE ) ; suspendElement . setText ( Long . toString ( suspendDuration / 1000 ) ) ; addressElement . addChild ( suspendElement ) ; } return endpointElement ; } public OMElement serializeEndpointDefinition ( EndpointDefinition endpt ) { OMElement address = fac . createOMElement ( "address" , Constants . SYNAPSE_OMNAMESPACE ) ; if ( endpt . isForcePOX ( ) ) { address . addAttribute ( fac . createOMAttribute ( "format" , null , "pox" ) ) ; } else if ( endpt . isForceSOAP ( ) ) { address . addAttribute ( fac . createOMAttribute ( "format" , null , "soap" ) ) ; } if ( endpt . isUseSwa ( ) ) { address . addAttribute ( fac . createOMAttribute ( "optimize" , null , "swa" ) ) ; } else if ( endpt . isUseMTOM ( ) ) { address . addAttribute ( fac . createOMAttribute ( "optimize" , null , "mtom" ) ) ; } if ( endpt . getAddress ( ) != null ) { address . addAttribute ( fac . createOMAttribute ( "uri" , null , endpt . getAddress ( ) ) ) ; } else { handleException ( "Invalid Endpoint. Address is required" ) ; } int isEnableStatistics = endpt . getStatisticsEnable ( ) ; String statisticsValue = null ; if ( isEnableStatistics == org . apache . synapse . Constants . STATISTICS_ON ) { statisticsValue = org . apache . synapse . config . xml . Constants . STATISTICS_ENABLE ; } else if ( isEnableStatistics == org . apache . synapse . Constants . STATISTICS_OFF ) { statisticsValue = org . apache . synapse . config . xml . Constants . STATISTICS_DISABLE ; } if ( statisticsValue != null ) { address . addAttribute ( fac . createOMAttribute ( org . apache . synapse . config . xml . Constants . STATISTICS_ATTRIB_NAME , null , statisticsValue ) ) ; } if ( endpt . isAddressingOn ( ) ) { OMElement addressing = fac . createOMElement ( "enableAddressing" , Constants . SYNAPSE_OMNAMESPACE ) ; if ( endpt . isUseSeparateListener ( ) ) { addressing . addAttribute ( fac . createOMAttribute ( "separateListener" , null , "true" ) ) ; } address . addChild ( addressing ) ; } if ( endpt . isReliableMessagingOn ( ) ) { OMElement rm = fac . createOMElement ( "enableRM" , Constants . SYNAPSE_OMNAMESPACE ) ; if ( endpt . getWsRMPolicyKey ( ) != null ) { rm . addAttribute ( fac . createOMAttribute ( "policy" , null , endpt . getWsRMPolicyKey ( ) ) ) ; } address . addChild ( rm ) ; } if ( endpt . isSecurityOn ( ) ) { OMElement sec = fac . createOMElement ( "enableSec" , Constants . SYNAPSE_OMNAMESPACE ) ; if ( endpt . getWsSecPolicyKey ( ) != null ) { sec . addAttribute ( fac . createOMAttribute ( "policy" , null , endpt . getWsSecPolicyKey ( ) ) ) ; } address . addChild ( sec ) ; } if ( endpt . getTimeoutAction ( ) != Constants . NONE ) { OMElement timeout = fac . createOMElement ( "timeout" , Constants . SYNAPSE_OMNAMESPACE ) ; address . addChild ( timeout ) ; OMElement duration = fac . createOMElement ( "duration" , Constants . SYNAPSE_OMNAMESPACE ) ; duration . setText ( Long . toString ( endpt . getTimeoutDuration ( ) / 1000 ) ) ; timeout . addChild ( duration ) ; OMElement action = fac . createOMElement ( "action" , Constants . SYNAPSE_OMNAMESPACE ) ; if ( endpt . getTimeoutAction ( ) == Constants . DISCARD ) { action . setText ( "discard" ) ; } else if ( endpt . getTimeoutAction ( ) == Constants . DISCARD_AND_FAULT ) { action . setText ( "fault" ) ; } timeout . addChild ( action ) ; } return address ; } private static void handleException ( String msg ) { log . error ( msg ) ; throw new SynapseException ( msg ) ; } } 	1	['6', '1', '0', '15', '38', '7', '1', '14', '3', '0.733333333', '336', '0.666666667', '0', '0', '0.35', '0', '0', '54.5', '18', '4', '1']
package org . apache . synapse . registry ; import org . apache . axiom . om . OMNode ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import org . apache . synapse . config . XMLToObjectMapper ; import org . apache . synapse . config . Entry ; import org . apache . synapse . mediators . base . SequenceMediator ; import org . apache . synapse . endpoints . Endpoint ; import java . net . URI ; import java . util . HashMap ; import java . util . Map ; public abstract class AbstractRegistry implements Registry { private static final Log log = LogFactory . getLog ( AbstractRegistry . class ) ; protected Map properties = new HashMap ( ) ; public Object getResource ( Entry entry ) { OMNode omNode = null ; RegistryEntry re = null ; if ( entry . isCached ( ) && ! entry . isExpired ( ) ) { return entry . getValue ( ) ; } else if ( ! entry . isCached ( ) ) { omNode = lookup ( entry . getKey ( ) ) ; if ( omNode == null ) { return null ; } else { re = getRegistryEntry ( entry . getKey ( ) ) ; } } else if ( entry . isExpired ( ) ) { log . debug ( "Cached object has expired for key : " + entry . getKey ( ) ) ; re = getRegistryEntry ( entry . getKey ( ) ) ; if ( re . getVersion ( ) != Long . MIN_VALUE && re . getVersion ( ) == entry . getVersion ( ) ) { log . debug ( "Expired version number is same as current version in registry" ) ; entry . setExpiryTime ( System . currentTimeMillis ( ) + re . getCachableDuration ( ) ) ; log . debug ( "Renew cache lease for another " + re . getCachableDuration ( ) / 1000 + "s" ) ; return entry . getValue ( ) ; } else { omNode = lookup ( entry . getKey ( ) ) ; } } if ( entry . getMapper ( ) != null ) { entry . setValue ( entry . getMapper ( ) . getObjectFromOMNode ( omNode ) ) ; if ( entry . getValue ( ) instanceof SequenceMediator ) { SequenceMediator seq = ( SequenceMediator ) entry . getValue ( ) ; seq . setDynamic ( true ) ; seq . setRegistryKey ( entry . getKey ( ) ) ; } else if ( entry . getValue ( ) instanceof Endpoint ) { Endpoint ep = ( Endpoint ) entry . getValue ( ) ; } } else { if ( re != null && re . getType ( ) != null ) { XMLToObjectMapper mapper = getMapper ( re . getType ( ) ) ; if ( mapper != null ) { entry . setMapper ( mapper ) ; entry . setValue ( mapper . getObjectFromOMNode ( omNode ) ) ; } else { entry . setValue ( omNode ) ; } } } entry . setExpiryTime ( System . currentTimeMillis ( ) + re . getCachableDuration ( ) ) ; entry . setVersion ( re . getVersion ( ) ) ; return entry . getValue ( ) ; } private XMLToObjectMapper getMapper ( URI type ) { return null ; } public String getProviderClass ( ) { return this . getClass ( ) . getName ( ) ; } public Map getConfigProperties ( ) { return properties ; } public void addConfigProperty ( String name , String value ) { properties . put ( name , value ) ; } } 	0	['8', '1', '1', '10', '41', '20', '1', '9', '5', '0.857142857', '220', '0.666666667', '0', '0', '0.357142857', '0', '0', '26.125', '14', '2.375', '0']
package org . apache . synapse ; import org . apache . axis2 . util . OptionsParser ; import org . apache . axis2 . context . ConfigurationContext ; import org . apache . axis2 . context . ConfigurationContextFactory ; import org . apache . axis2 . engine . ListenerManager ; import org . apache . axis2 . description . TransportInDescription ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import javax . xml . namespace . QName ; import java . io . File ; import java . util . Iterator ; import java . net . ServerSocket ; import java . net . Socket ; public class SynapseServer { private static final Log log = LogFactory . getLog ( SynapseServer . class ) ; public static void printUsage ( ) { System . out . println ( "Usage: SynapseServer <repository>" ) ; System . out . println ( " Opts: -? this message" ) ; System . exit ( 1 ) ; } public static void main ( String [ ] args ) throws Exception { if ( args . length != 1 || ! new File ( args [ 0 ] ) . exists ( ) ) { printUsage ( ) ; } System . out . println ( "[SynapseServer] Using the Axis2 Repository " + new File ( args [ 0 ] ) . getAbsolutePath ( ) ) ; try { ConfigurationContext configctx = ConfigurationContextFactory . createConfigurationContextFromFileSystem ( args [ 0 ] , null ) ; ListenerManager listenerManager = configctx . getListenerManager ( ) ; if ( listenerManager == null ) { listenerManager = new ListenerManager ( ) ; listenerManager . init ( configctx ) ; } selectPort ( configctx ) ; Iterator iter = configctx . getAxisConfiguration ( ) . getTransportsIn ( ) . keySet ( ) . iterator ( ) ; while ( iter . hasNext ( ) ) { String trp = ( String ) iter . next ( ) ; TransportInDescription trsIn = ( TransportInDescription ) configctx . getAxisConfiguration ( ) . getTransportsIn ( ) . get ( trp ) ; listenerManager . addListener ( trsIn , false ) ; String msg = "[SynapseServer] Starting transport " + trsIn . getName ( ) ; if ( trsIn . getParameter ( "port" ) != null ) { msg += " on port " + trsIn . getParameter ( "port" ) . getValue ( ) ; } System . out . println ( msg ) ; } System . out . println ( "[SynapseServer] Ready" ) ; } catch ( Throwable t ) { t . printStackTrace ( ) ; System . out . println ( "[SynapseServer] Startup failed..." ) ; } } private static void selectPort ( ConfigurationContext configCtx ) { TransportInDescription trsIn = ( TransportInDescription ) configCtx . getAxisConfiguration ( ) . getTransportsIn ( ) . get ( "http" ) ; if ( trsIn != null ) { int port = 8080 ; String strPort = System . getProperty ( "port" ) ; if ( strPort != null ) { try { port = new Integer ( strPort ) . intValue ( ) ; } catch ( NumberFormatException e ) { log . error ( "Given port is not a valid integer. Port specified in the configuration is used for the server." ) ; port = Integer . parseInt ( trsIn . getParameter ( "port" ) . getValue ( ) . toString ( ) ) ; } } else { port = Integer . parseInt ( trsIn . getParameter ( "port" ) . getValue ( ) . toString ( ) ) ; } while ( true ) { ServerSocket sock = null ; try { sock = new ServerSocket ( port ) ; trsIn . getParameter ( "port" ) . setValue ( Integer . toString ( port ) ) ; break ; } catch ( Exception e ) { System . out . println ( "[SynapseServer] Port " + port + " already in use. Trying alternate" ) ; if ( port == 8080 ) { port = 8008 ; } else { port ++ ; } } finally { if ( sock != null ) { try { sock . close ( ) ; } catch ( Exception e ) { } } } } } } } 	1	['6', '1', '0', '8', '47', '13', '0', '8', '3', '0.8', '257', '0.5', '0', '0', '0.2', '0', '0', '41.5', '6', '1.5', '1']
package org . apache . synapse . statistics ; public class Statistics { private long maxProcessingTime = 0 ; private long minProcessingTime = - 1 ; private double avgProcessingTime = 0 ; private double totalProcessingTime ; private int count = 0 ; private int faultCount = 0 ; public void update ( long inTime , long outTime , boolean isFault ) { count ++ ; if ( isFault ) { faultCount ++ ; } long responseTime = outTime - inTime ; if ( maxProcessingTime < responseTime ) { maxProcessingTime = responseTime ; } if ( minProcessingTime > responseTime ) { minProcessingTime = responseTime ; } if ( minProcessingTime == - 1 ) { minProcessingTime = responseTime ; } totalProcessingTime = totalProcessingTime + responseTime ; avgProcessingTime = totalProcessingTime / count ; } public long getMaxProcessingTime ( ) { return maxProcessingTime ; } public double getAvgProcessingTime ( ) { return avgProcessingTime ; } public long getMinProcessingTime ( ) { return minProcessingTime ; } public int getFaultCount ( ) { return faultCount ; } public int getCount ( ) { return count ; } } 	0	['7', '1', '0', '1', '8', '0', '1', '0', '7', '0.722222222', '104', '1', '0', '0', '0.428571429', '0', '0', '13', '5', '1.4286', '0']
package org . apache . synapse . mediators ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import org . apache . synapse . MessageContext ; import org . apache . synapse . Constants ; import org . apache . synapse . core . axis2 . Axis2MessageContext ; import org . jaxen . Context ; import org . jaxen . Function ; import org . jaxen . FunctionCallException ; import org . jaxen . Navigator ; import org . jaxen . function . StringFunction ; import java . util . List ; import java . util . Map ; import java . util . HashMap ; public class GetPropertyFunction implements Function { private static final Log log = LogFactory . getLog ( GetPropertyFunction . class ) ; private MessageContext synCtx = null ; public MessageContext getSynCtx ( ) { return synCtx ; } public void setSynCtx ( MessageContext synCtx ) { this . synCtx = synCtx ; } public Object call ( Context context , List args ) throws FunctionCallException { int size = args . size ( ) ; if ( size == 0 ) { log . warn ( "Property key value for lookup was not specified" ) ; return null ; } else if ( size == 1 ) { return evaluate ( Constants . SCOPE_DEFAULT , args . get ( 0 ) , context . getNavigator ( ) ) ; } else if ( size == 2 ) { return evaluate ( args . get ( 0 ) , args . get ( 1 ) , context . getNavigator ( ) ) ; } else { String msg = "Invalid arguments for synapse:get-property(prop-name) 0r  " + "synapse:get-property(scope,prop-name) XPath function " ; log . warn ( msg ) ; throw new FunctionCallException ( msg ) ; } } public Object evaluate ( Object scopeObject , Object keyObject , Navigator navigator ) { if ( synCtx == null ) { log . warn ( "Synapse context has not been set for the XPath extension function" + "'synapse:get-property(prop-name)'" ) ; return null ; } String scope = StringFunction . evaluate ( scopeObject , navigator ) ; String key = StringFunction . evaluate ( keyObject , navigator ) ; if ( key == null || "" . equals ( key ) ) { log . warn ( "property-name should be provided when executing " + "synapse:get-property(scope,prop-name)" + " or synapse:get-property(prop-name) Xpath function" ) ; return null ; } if ( Constants . SCOPE_DEFAULT . equals ( scope ) ) { if ( Constants . HEADER_TO . equals ( key ) && synCtx . getTo ( ) != null ) { return synCtx . getTo ( ) . getAddress ( ) ; } else if ( Constants . HEADER_FROM . equals ( key ) && synCtx . getFrom ( ) != null ) { return synCtx . getFrom ( ) . getAddress ( ) ; } else if ( Constants . HEADER_ACTION . equals ( key ) && synCtx . getWSAAction ( ) != null ) { return synCtx . getWSAAction ( ) ; } else if ( Constants . HEADER_FAULT . equals ( key ) && synCtx . getFaultTo ( ) != null ) { return synCtx . getFaultTo ( ) . getAddress ( ) ; } else if ( Constants . HEADER_REPLY_TO . equals ( key ) && synCtx . getReplyTo ( ) != null ) { return synCtx . getReplyTo ( ) . getAddress ( ) ; } else if ( Constants . HEADER_MESSAGE_ID . equals ( key ) && synCtx . getMessageID ( ) != null ) { return synCtx . getMessageID ( ) ; } else { Object result = synCtx . getProperty ( key ) ; if ( result != null ) { return result ; } else { return synCtx . getEntry ( key ) ; } } } else if ( Constants . SCOPE_AXIS2 . equals ( scope ) && synCtx instanceof Axis2MessageContext ) { org . apache . axis2 . context . MessageContext axis2MessageContext = ( ( Axis2MessageContext ) synCtx ) . getAxis2MessageContext ( ) ; return axis2MessageContext . getConfigurationContext ( ) . getProperty ( key ) ; } else if ( Constants . SCOPE_TRANSPORT . equals ( scope ) && synCtx instanceof Axis2MessageContext ) { org . apache . axis2 . context . MessageContext axis2MessageContext = ( ( Axis2MessageContext ) synCtx ) . getAxis2MessageContext ( ) ; Object headers = axis2MessageContext . getProperty ( org . apache . axis2 . context . MessageContext . TRANSPORT_HEADERS ) ; if ( headers != null && headers instanceof Map ) { Map headersMap = ( HashMap ) headers ; return headersMap . get ( key ) ; } } else { log . warn ( "Invalid scope : '" + scope + "' has been set for the " + "synapse:get-property(scope,prop-name) XPath function" ) ; } return null ; } } 	1	['7', '1', '0', '12', '36', '3', '1', '12', '5', '0.666666667', '275', '0.666666667', '1', '0', '0.261904762', '0', '0', '37.85714286', '22', '3.7143', '2']
package org . apache . synapse . config . xml . endpoints ; import org . apache . axiom . om . OMElement ; import org . apache . synapse . endpoints . Endpoint ; public interface EndpointSerializer { public OMElement serializeEndpoint ( Endpoint endpoint ) ; } 	0	['1', '1', '0', '12', '1', '0', '10', '2', '1', '2', '1', '0', '0', '0', '1', '0', '0', '0', '1', '1', '0']
package org . apache . synapse . core . axis2 ; import org . apache . axis2 . context . ConfigurationContext ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import org . apache . synapse . Constants ; import org . apache . synapse . Mediator ; import org . apache . synapse . MessageContext ; import org . apache . synapse . SynapseException ; import org . apache . synapse . config . SynapseConfiguration ; import org . apache . synapse . endpoints . utils . EndpointDefinition ; import org . apache . synapse . core . SynapseEnvironment ; import org . apache . synapse . statistics . StatisticsCollector ; import org . apache . synapse . statistics . StatisticsUtils ; public class Axis2SynapseEnvironment implements SynapseEnvironment { private static final Log log = LogFactory . getLog ( Axis2SynapseEnvironment . class ) ; private SynapseConfiguration synapseConfig ; private StatisticsCollector statisticsCollector ; public Axis2SynapseEnvironment ( ) { } public Axis2SynapseEnvironment ( ConfigurationContext cfgCtx , SynapseConfiguration synapseConfig ) { this . synapseConfig = synapseConfig ; } public void injectMessage ( final MessageContext synCtx ) { synCtx . setEnvironment ( this ) ; if ( synCtx . isResponse ( ) ) { StatisticsUtils . processEndPointStatistics ( synCtx ) ; StatisticsUtils . processProxyServiceStatistics ( synCtx ) ; StatisticsUtils . processSequenceStatistics ( synCtx ) ; } if ( synCtx . getProperty ( Constants . PROXY_SERVICE ) != null ) { if ( synCtx . getConfiguration ( ) . getProxyService ( ( String ) synCtx . getProperty ( Constants . PROXY_SERVICE ) ) . getTargetOutSequence ( ) != null ) { String sequenceName = synCtx . getConfiguration ( ) . getProxyService ( ( String ) synCtx . getProperty ( Constants . PROXY_SERVICE ) ) . getTargetOutSequence ( ) ; Mediator outSequence = synCtx . getSequence ( sequenceName ) ; if ( outSequence != null ) { log . debug ( "Using the sequence named " + sequenceName + " for the outgoing message mediation of the proxy service " + synCtx . getProperty ( Constants . PROXY_SERVICE ) ) ; outSequence . mediate ( synCtx ) ; } else { log . error ( "Unable to find the out-sequence " + "specified by the name " + sequenceName ) ; throw new SynapseException ( "Unable to find the " + "out-sequence specified by the name " + sequenceName ) ; } } else if ( synCtx . getConfiguration ( ) . getProxyService ( ( String ) synCtx . getProperty ( Constants . PROXY_SERVICE ) ) . getTargetInLineOutSequence ( ) != null ) { log . debug ( "Using the anonymous out-sequence specified in the proxy service " + synCtx . getProperty ( Constants . PROXY_SERVICE ) + " for outgoing message mediation" ) ; synCtx . getConfiguration ( ) . getProxyService ( ( String ) synCtx . getProperty ( Constants . PROXY_SERVICE ) ) . getTargetInLineOutSequence ( ) . mediate ( synCtx ) ; } else { log . debug ( "Proxy service " + synCtx . getProperty ( Constants . PROXY_SERVICE ) + " does not specifies an out-sequence - sending the response back" ) ; Axis2Sender . sendBack ( synCtx ) ; } } else { synCtx . getMainSequence ( ) . mediate ( synCtx ) ; } } public void send ( EndpointDefinition endpoint , MessageContext synCtx ) { if ( synCtx . isResponse ( ) ) Axis2Sender . sendBack ( synCtx ) ; else Axis2Sender . sendOn ( endpoint , synCtx ) ; } public MessageContext createMessageContext ( ) { org . apache . axis2 . context . MessageContext axis2MC = new org . apache . axis2 . context . MessageContext ( ) ; MessageContext mc = new Axis2MessageContext ( axis2MC , synapseConfig , this ) ; return mc ; } public StatisticsCollector getStatisticsCollector ( ) { return statisticsCollector ; } public void setStatisticsCollector ( StatisticsCollector collector ) { this . statisticsCollector = collector ; } } 	1	['9', '1', '0', '17', '39', '30', '1', '16', '7', '0.90625', '216', '0.75', '2', '0', '0.25', '0', '0', '22.55555556', '6', '1.3333', '1']
package org . apache . synapse . mediators . filters ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import org . apache . synapse . Constants ; import org . apache . synapse . MessageContext ; import org . apache . synapse . mediators . AbstractListMediator ; public class OutMediator extends AbstractListMediator implements org . apache . synapse . mediators . FilterMediator { private static final Log log = LogFactory . getLog ( OutMediator . class ) ; private static final Log trace = LogFactory . getLog ( Constants . TRACE_LOGGER ) ; public boolean mediate ( MessageContext synCtx ) { log . debug ( "Out mediator mediate()" ) ; boolean shouldTrace = shouldTrace ( synCtx . getTracingState ( ) ) ; try { if ( shouldTrace ) { trace . trace ( "Start : Out mediator" ) ; } if ( test ( synCtx ) ) { log . debug ( "Current message is outgoing.. executing child mediators" ) ; return super . mediate ( synCtx ) ; } else { log . debug ( "Current message is not outgoing.. skipping child mediators" ) ; return true ; } } finally { if ( shouldTrace ) { trace . trace ( "End : Out mediator" ) ; } } } public boolean test ( MessageContext synCtx ) { return synCtx . isResponse ( ) ; } } 	0	['5', '3', '0', '7', '17', '8', '2', '5', '3', '0.833333333', '89', '0.666666667', '0', '0.823529412', '0.5', '2', '2', '16.2', '6', '1.6', '0']
package org . apache . synapse . core ; import org . apache . synapse . MessageContext ; import org . apache . synapse . endpoints . utils . EndpointDefinition ; import org . apache . synapse . statistics . StatisticsCollector ; public interface SynapseEnvironment { public void injectMessage ( MessageContext smc ) ; public void send ( EndpointDefinition endpoint , MessageContext smc ) ; public MessageContext createMessageContext ( ) ; public StatisticsCollector getStatisticsCollector ( ) ; public void setStatisticsCollector ( StatisticsCollector statisticsCollector ) ; } 	1	['5', '1', '0', '13', '5', '10', '11', '3', '5', '2', '5', '0', '0', '0', '0.45', '0', '0', '0', '1', '1', '1']
package org . apache . synapse . config . xml ; import org . apache . axiom . om . OMElement ; import org . apache . synapse . Mediator ; import org . apache . synapse . mediators . builtin . DropMediator ; import javax . xml . namespace . QName ; public class DropMediatorFactory extends AbstractMediatorFactory { private static final QName DROP_Q = new QName ( Constants . SYNAPSE_NAMESPACE , "drop" ) ; public Mediator createMediator ( OMElement el ) { Mediator dropMediator = new DropMediator ( ) ; initMediator ( dropMediator , el ) ; return dropMediator ; } public QName getTagQName ( ) { return DROP_Q ; } } 	0	['4', '2', '0', '4', '8', '4', '0', '4', '3', '0.666666667', '27', '1', '0', '0.333333333', '0.666666667', '0', '0', '5.5', '1', '0.5', '0']
package org . apache . synapse . core . axis2 ; import java . util . ArrayList ; import java . util . Iterator ; import javax . xml . namespace . QName ; import org . apache . axiom . om . OMElement ; import org . apache . axiom . om . OMNamespace ; import org . apache . axiom . om . OMAbstractFactory ; import org . apache . axiom . soap . SOAPEnvelope ; import org . apache . axiom . soap . SOAPHeader ; import org . apache . axiom . soap . SOAPHeaderBlock ; import org . apache . axiom . soap . SOAPFactory ; import org . apache . axis2 . AxisFault ; import org . apache . axis2 . wsdl . WSDLConstants ; import org . apache . axis2 . addressing . AddressingConstants ; import org . apache . axis2 . addressing . EndpointReference ; import org . apache . axis2 . client . OperationClient ; import org . apache . axis2 . client . Options ; import org . apache . axis2 . context . ConfigurationContext ; import org . apache . axis2 . context . MessageContext ; import org . apache . axis2 . context . ServiceContext ; import org . apache . axis2 . context . ServiceGroupContext ; import org . apache . axis2 . description . AxisOperation ; import org . apache . axis2 . description . AxisService ; import org . apache . axis2 . description . AxisServiceGroup ; import org . apache . axis2 . engine . AxisConfiguration ; import org . apache . synapse . util . UUIDGenerator ; import org . apache . axiom . attachments . Attachments ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import org . apache . neethi . Policy ; import org . apache . neethi . PolicyEngine ; import org . apache . synapse . Constants ; import org . apache . synapse . SynapseException ; import org . apache . synapse . statistics . impl . EndPointStatisticsStack ; import org . apache . synapse . endpoints . utils . EndpointDefinition ; import org . apache . rampart . handler . WSSHandlerConstants ; import org . apache . sandesha2 . client . SandeshaClientConstants ; public class Axis2FlexibleMEPClient { private static final Log log = LogFactory . getLog ( Axis2FlexibleMEPClient . class ) ; public static void send ( EndpointDefinition endpoint , org . apache . synapse . MessageContext synapseOutMessageContext ) throws AxisFault { boolean separateListener = false ; boolean wsSecurityEnabled = false ; String wsSecPolicyKey = null ; boolean wsRMEnabled = false ; String wsRMPolicyKey = null ; boolean wsAddressingEnabled = false ; if ( endpoint != null ) { separateListener = endpoint . isUseSeparateListener ( ) ; wsSecurityEnabled = endpoint . isSecurityOn ( ) ; wsSecPolicyKey = endpoint . getWsSecPolicyKey ( ) ; wsRMEnabled = endpoint . isReliableMessagingOn ( ) ; wsRMPolicyKey = endpoint . getWsRMPolicyKey ( ) ; wsAddressingEnabled = endpoint . isAddressingOn ( ) || wsSecurityEnabled || wsRMEnabled ; } if ( log . isDebugEnabled ( ) ) { log . debug ( "sending [add = " + wsAddressingEnabled + "] [sec = " + wsSecurityEnabled + "] [rm = " + wsRMEnabled + ( endpoint != null ? "] [ mtom = " + endpoint . isUseMTOM ( ) + "] [ swa = " + endpoint . isUseSwa ( ) + "] [ force soap=" + endpoint . isForceSOAP ( ) + "; pox=" + endpoint . isForcePOX ( ) : "" ) + "] [ to " + synapseOutMessageContext . getTo ( ) + "]" ) ; } MessageContext originalInMsgCtx = ( ( Axis2MessageContext ) synapseOutMessageContext ) . getAxis2MessageContext ( ) ; MessageContext axisOutMsgCtx = cloneForSend ( originalInMsgCtx ) ; String eprAddress = null ; if ( endpoint != null && endpoint . getAddress ( ) != null ) { eprAddress = endpoint . getAddress ( ) . toString ( ) ; if ( endpoint . isForcePOX ( ) ) { axisOutMsgCtx . setDoingREST ( true ) ; } else if ( endpoint . isForceSOAP ( ) ) { axisOutMsgCtx . setDoingREST ( false ) ; if ( axisOutMsgCtx . getSoapAction ( ) == null && axisOutMsgCtx . getWSAAction ( ) != null ) { axisOutMsgCtx . setSoapAction ( axisOutMsgCtx . getWSAAction ( ) ) ; } } if ( endpoint . isUseMTOM ( ) ) { axisOutMsgCtx . setDoingMTOM ( true ) ; axisOutMsgCtx . setProperty ( org . apache . axis2 . Constants . Configuration . ENABLE_MTOM , org . apache . axis2 . Constants . VALUE_TRUE ) ; axisOutMsgCtx . setDoingMTOM ( true ) ; } else if ( endpoint . isUseSwa ( ) ) { axisOutMsgCtx . setDoingSwA ( true ) ; axisOutMsgCtx . setProperty ( org . apache . axis2 . Constants . Configuration . ENABLE_SWA , org . apache . axis2 . Constants . VALUE_TRUE ) ; axisOutMsgCtx . setDoingSwA ( true ) ; } if ( endpoint . isUseSeparateListener ( ) ) { axisOutMsgCtx . setProperty ( Constants . OUTFLOW_USE_SEPARATE_LISTENER , Boolean . TRUE ) ; } axisOutMsgCtx . setTo ( new EndpointReference ( eprAddress ) ) ; } if ( wsAddressingEnabled ) { axisOutMsgCtx . setProperty ( AddressingConstants . DISABLE_ADDRESSING_FOR_OUT_MESSAGES , Boolean . FALSE ) ; } else { axisOutMsgCtx . setProperty ( AddressingConstants . DISABLE_ADDRESSING_FOR_OUT_MESSAGES , Boolean . TRUE ) ; } ConfigurationContext axisCfgCtx = axisOutMsgCtx . getConfigurationContext ( ) ; AxisConfiguration axisCfg = axisCfgCtx . getAxisConfiguration ( ) ; AxisService anoymousService = AnonymousServiceFactory . getAnonymousService ( axisCfg , wsAddressingEnabled , wsRMEnabled , wsSecurityEnabled ) ; ServiceGroupContext sgc = new ServiceGroupContext ( axisCfgCtx , ( AxisServiceGroup ) anoymousService . getParent ( ) ) ; ServiceContext serviceCtx = sgc . getServiceContext ( anoymousService ) ; AxisOperation axisAnonymousOperation = anoymousService . getOperation ( new QName ( AnonymousServiceFactory . DYNAMIC_OPERATION ) ) ; Options clientOptions = new Options ( ) ; clientOptions . setUseSeparateListener ( separateListener ) ; if ( wsRMEnabled ) { if ( wsRMPolicyKey != null ) { clientOptions . setProperty ( org . apache . synapse . config . xml . Constants . SANDESHA_POLICY , getPolicy ( synapseOutMessageContext , wsRMPolicyKey ) ) ; } copyRMOptions ( originalInMsgCtx , clientOptions ) ; } if ( wsSecurityEnabled ) { if ( wsSecPolicyKey != null ) { clientOptions . setProperty ( org . apache . synapse . config . xml . Constants . RAMPART_POLICY , getPolicy ( synapseOutMessageContext , wsSecPolicyKey ) ) ; } if ( axisOutMsgCtx . getEnvelope ( ) . getHeader ( ) == null ) { SOAPFactory fac = axisOutMsgCtx . isSOAP11 ( ) ? OMAbstractFactory . getSOAP11Factory ( ) : OMAbstractFactory . getSOAP12Factory ( ) ; fac . createSOAPHeader ( axisOutMsgCtx . getEnvelope ( ) ) ; } } OperationClient mepClient = axisAnonymousOperation . createClient ( serviceCtx , clientOptions ) ; mepClient . addMessageContext ( axisOutMsgCtx ) ; axisOutMsgCtx . setAxisMessage ( axisAnonymousOperation . getMessage ( WSDLConstants . MESSAGE_LABEL_OUT_VALUE ) ) ; AsyncCallback callback = new AsyncCallback ( synapseOutMessageContext ) ; if ( endpoint != null ) { callback . setTimeOutOn ( System . currentTimeMillis ( ) + endpoint . getTimeoutDuration ( ) ) ; callback . setTimeOutAction ( endpoint . getTimeoutAction ( ) ) ; } mepClient . setCallback ( callback ) ; mepClient . execute ( false ) ; originalInMsgCtx . getOperationContext ( ) . setProperty ( org . apache . axis2 . Constants . RESPONSE_WRITTEN , "SKIP" ) ; } private static MessageContext cloneForSend ( MessageContext ori ) throws AxisFault { MessageContext newMC = new MessageContext ( ) ; newMC . setConfigurationContext ( ori . getConfigurationContext ( ) ) ; newMC . setMessageID ( UUIDGenerator . getUUID ( ) ) ; newMC . setTo ( ori . getTo ( ) ) ; newMC . setSoapAction ( ori . getSoapAction ( ) ) ; newMC . setProperty ( org . apache . axis2 . Constants . Configuration . CHARACTER_SET_ENCODING , ori . getProperty ( org . apache . axis2 . Constants . Configuration . CHARACTER_SET_ENCODING ) ) ; newMC . setProperty ( org . apache . axis2 . Constants . Configuration . ENABLE_MTOM , ori . getProperty ( org . apache . axis2 . Constants . Configuration . ENABLE_MTOM ) ) ; newMC . setProperty ( org . apache . axis2 . Constants . Configuration . ENABLE_SWA , ori . getProperty ( org . apache . axis2 . Constants . Configuration . ENABLE_SWA ) ) ; newMC . setDoingREST ( ori . isDoingREST ( ) ) ; newMC . setDoingMTOM ( ori . isDoingMTOM ( ) ) ; newMC . setDoingSwA ( ori . isDoingSwA ( ) ) ; Attachments attachments = ori . getAttachmentMap ( ) ; if ( attachments != null && attachments . getAllContentIDs ( ) . length > 0 ) { String [ ] cIDs = attachments . getAllContentIDs ( ) ; String soapPart = attachments . getSOAPPartContentID ( ) ; for ( int i = 0 ; i < cIDs . length ; i ++ ) { if ( ! cIDs [ i ] . equals ( soapPart ) ) { newMC . addAttachment ( cIDs [ i ] , attachments . getDataHandler ( cIDs [ i ] ) ) ; } } } newMC . setServerSide ( false ) ; newMC . setEnvelope ( ori . getEnvelope ( ) ) ; removeAddressingHeaders ( newMC ) ; newMC . setProperty ( MessageContext . TRANSPORT_HEADERS , ori . getProperty ( MessageContext . TRANSPORT_HEADERS ) ) ; return newMC ; } private static void copyRMOptions ( MessageContext oriContext , Options targetOptions ) { Options oriOptions = oriContext . getOptions ( ) ; if ( oriOptions . getProperty ( Constants . SANDESHA_LAST_MESSAGE ) != null ) { targetOptions . setProperty ( Constants . SANDESHA_LAST_MESSAGE , oriOptions . getProperty ( Constants . SANDESHA_LAST_MESSAGE ) ) ; } if ( oriOptions . getProperty ( Constants . SANDESHA_SPEC_VERSION ) != null ) { targetOptions . setProperty ( Constants . SANDESHA_SPEC_VERSION , oriOptions . getProperty ( Constants . SANDESHA_SPEC_VERSION ) ) ; } if ( oriOptions . getProperty ( Constants . SANDESHA_SEQUENCE_KEY ) != null ) { targetOptions . setProperty ( Constants . SANDESHA_SEQUENCE_KEY , oriOptions . getProperty ( Constants . SANDESHA_SEQUENCE_KEY ) ) ; } if ( oriOptions . getProperty ( SandeshaClientConstants . OFFERED_SEQUENCE_ID ) != null ) { targetOptions . setProperty ( SandeshaClientConstants . OFFERED_SEQUENCE_ID , oriOptions . getProperty ( SandeshaClientConstants . OFFERED_SEQUENCE_ID ) ) ; } } private static Policy getPolicy ( org . apache . synapse . MessageContext synCtx , String propertyKey ) { Object property = synCtx . getEntry ( propertyKey ) ; if ( property != null && property instanceof OMElement ) { return PolicyEngine . getPolicy ( ( OMElement ) property ) ; } else { handleException ( "Cannot locate Policy from the property : " + propertyKey ) ; } return null ; } private static void handleException ( String msg ) { log . error ( msg ) ; throw new SynapseException ( msg ) ; } public static SOAPEnvelope removeAddressingHeaders ( MessageContext axisMsgCtx ) { SOAPEnvelope env = axisMsgCtx . getEnvelope ( ) ; SOAPHeader soapHeader = env . getHeader ( ) ; ArrayList addressingHeaders ; if ( soapHeader != null ) { addressingHeaders = soapHeader . getHeaderBlocksWithNSURI ( AddressingConstants . Submission . WSA_NAMESPACE ) ; if ( addressingHeaders != null && addressingHeaders . size ( ) != 0 ) { detachAddressingInformation ( addressingHeaders ) ; } else { addressingHeaders = soapHeader . getHeaderBlocksWithNSURI ( AddressingConstants . Final . WSA_NAMESPACE ) ; if ( addressingHeaders != null && addressingHeaders . size ( ) != 0 ) { detachAddressingInformation ( addressingHeaders ) ; } } } return env ; } private static void detachAddressingInformation ( ArrayList headerInformation ) { Iterator iterator = headerInformation . iterator ( ) ; while ( iterator . hasNext ( ) ) { Object o = iterator . next ( ) ; if ( o instanceof SOAPHeaderBlock ) { SOAPHeaderBlock headerBlock = ( SOAPHeaderBlock ) o ; headerBlock . detach ( ) ; } else if ( o instanceof OMElement ) { OMElement om = ( OMElement ) o ; OMNamespace ns = om . getNamespace ( ) ; if ( ns != null && ( AddressingConstants . Submission . WSA_NAMESPACE . equals ( ns . getNamespaceURI ( ) ) || AddressingConstants . Final . WSA_NAMESPACE . equals ( ns . getNamespaceURI ( ) ) ) ) { om . detach ( ) ; } } } } } 	1	['10', '1', '0', '38', '108', '39', '1', '37', '3', '0.833333333', '604', '0.5', '0', '0', '0.19047619', '0', '0', '59.2', '6', '2.2', '4']
package org . apache . synapse . config . xml ; import org . apache . axiom . om . OMAbstractFactory ; import org . apache . axiom . om . OMElement ; import org . apache . axiom . om . OMFactory ; import org . apache . axiom . om . OMNamespace ; import org . apache . axiom . om . xpath . AXIOMXPath ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import org . apache . synapse . Mediator ; import org . apache . synapse . SynapseException ; import org . apache . synapse . mediators . MediatorProperty ; import java . util . Collection ; import java . util . Iterator ; public abstract class AbstractMediatorSerializer implements MediatorSerializer { protected static final OMFactory fac = OMAbstractFactory . getOMFactory ( ) ; protected static final OMNamespace synNS = fac . createOMNamespace ( Constants . SYNAPSE_NAMESPACE , "syn" ) ; protected static final OMNamespace nullNS = fac . createOMNamespace ( Constants . NULL_NAMESPACE , "" ) ; private static final Log log = LogFactory . getLog ( AbstractMediatorSerializer . class ) ; protected static void finalizeSerialization ( OMElement mediatorOmElement , Mediator mediator ) { int traceState = mediator . getTraceState ( ) ; String traceValue = null ; if ( traceState == org . apache . synapse . Constants . TRACING_ON ) { traceValue = Constants . TRACE_ENABLE ; } else if ( traceState == org . apache . synapse . Constants . TRACING_OFF ) { traceValue = Constants . TRACE_DISABLE ; } if ( traceValue != null ) { mediatorOmElement . addAttribute ( fac . createOMAttribute ( Constants . TRACE_ATTRIB_NAME , nullNS , traceValue ) ) ; } } public void serializeMediatorProperties ( OMElement parent , Collection props ) { Iterator iter = props . iterator ( ) ; while ( iter . hasNext ( ) ) { MediatorProperty mp = ( MediatorProperty ) iter . next ( ) ; OMElement prop = fac . createOMElement ( "property" , synNS , parent ) ; if ( mp . getName ( ) != null ) { prop . addAttribute ( fac . createOMAttribute ( "name" , nullNS , mp . getName ( ) ) ) ; } else { handleException ( "Mediator property name missing" ) ; } if ( mp . getValue ( ) != null ) { prop . addAttribute ( fac . createOMAttribute ( "value" , nullNS , mp . getValue ( ) ) ) ; } else if ( mp . getExpression ( ) != null ) { prop . addAttribute ( fac . createOMAttribute ( "expression" , nullNS , mp . getExpression ( ) . toString ( ) ) ) ; serializeNamespaces ( prop , mp . getExpression ( ) ) ; } else { handleException ( "Mediator property must have a literal value or be an expression" ) ; } } } public void serializeProperties ( OMElement parent , Collection props ) { serializeMediatorProperties ( parent , props ) ; } public void serializeNamespaces ( OMElement elem , AXIOMXPath xpath ) { Iterator iter = xpath . getNamespaces ( ) . keySet ( ) . iterator ( ) ; while ( iter . hasNext ( ) ) { String prefix = ( String ) iter . next ( ) ; String uri = xpath . getNamespaceContext ( ) . translateNamespacePrefixToUri ( prefix ) ; if ( ! Constants . SYNAPSE_NAMESPACE . equals ( uri ) ) { elem . declareNamespace ( uri , prefix ) ; } } } private static void handleException ( String msg ) { log . error ( msg ) ; throw new SynapseException ( msg ) ; } } 	0	['8', '1', '11', '25', '35', '20', '11', '14', '4', '0.685714286', '183', '0.8', '0', '0', '0.333333333', '0', '0', '21.25', '5', '1.75', '0']
package org . apache . synapse . mediators . builtin ; import org . apache . axiom . om . xpath . AXIOMXPath ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import org . apache . synapse . MessageContext ; import org . apache . synapse . Constants ; import org . apache . synapse . SynapseException ; import org . apache . synapse . core . axis2 . Axis2MessageContext ; import org . apache . synapse . mediators . AbstractMediator ; import java . util . Map ; import java . util . HashMap ; import java . util . Set ; public class PropertyMediator extends AbstractMediator { private String name = null ; private String value = null ; private AXIOMXPath expression = null ; private String scope = null ; public static final int ACTION_SET = 0 ; public static final int ACTION_REMOVE = 1 ; private int action = ACTION_SET ; private static final Log log = LogFactory . getLog ( PropertyMediator . class ) ; private static final Log trace = LogFactory . getLog ( Constants . TRACE_LOGGER ) ; public boolean mediate ( MessageContext smc ) { log . debug ( "Property mediator :: mediate()" ) ; boolean shouldTrace = shouldTrace ( smc . getTracingState ( ) ) ; if ( shouldTrace ) { trace . trace ( "Start : Property mediator" ) ; } if ( action == ACTION_SET ) { String resultValue = ( this . value != null ? this . value : Axis2MessageContext . getStringValue ( expression , smc ) ) ; log . debug ( "Setting : " + name + " property (scope:" + ( scope == null ? "default" : scope ) + ") = " + resultValue ) ; if ( shouldTrace ) { trace . trace ( "Property Name : " + name + " (scope:" + ( scope == null ? "default" : scope ) + ") set to " + ( value != null ? " resultValue = " + value : " result of expression " + expression + " = " + resultValue ) ) ; } if ( scope == null ) { smc . setProperty ( name , resultValue ) ; } else if ( Constants . SCOPE_DEFAULT . equals ( scope ) ) { smc . setProperty ( name , resultValue ) ; } else if ( Constants . SCOPE_AXIS2 . equals ( scope ) && smc instanceof Axis2MessageContext ) { Axis2MessageContext axis2smc = ( Axis2MessageContext ) smc ; org . apache . axis2 . context . MessageContext axis2MessageCtx = axis2smc . getAxis2MessageContext ( ) ; axis2MessageCtx . setProperty ( name , resultValue ) ; } else if ( Constants . SCOPE_TRANSPORT . equals ( scope ) && smc instanceof Axis2MessageContext ) { Axis2MessageContext axis2smc = ( Axis2MessageContext ) smc ; org . apache . axis2 . context . MessageContext axis2MessageCtx = axis2smc . getAxis2MessageContext ( ) ; Object headers = axis2MessageCtx . getProperty ( org . apache . axis2 . context . MessageContext . TRANSPORT_HEADERS ) ; if ( headers != null && headers instanceof Map ) { Map headersMap = ( HashMap ) headers ; headersMap . put ( name , resultValue ) ; } if ( headers == null ) { Map headersMap = new HashMap ( ) ; headersMap . put ( name , resultValue ) ; axis2MessageCtx . setProperty ( org . apache . axis2 . context . MessageContext . TRANSPORT_HEADERS , headersMap ) ; } } else { String msg = "Unsupported scope : " + scope + " for property mediator" ; handleException ( msg ) ; } } else { log . debug ( "Removing : " + name + " property (scope:" + ( scope == null ? "default" : scope ) + ") " ) ; trace . trace ( "Remove - Property Name : " + name + " (scope:" + ( scope == null ? "default" : scope ) + ")" ) ; if ( scope == null ) { Set pros = smc . getPropertyKeySet ( ) ; if ( pros != null ) { pros . remove ( name ) ; } } else if ( Constants . SCOPE_DEFAULT . equals ( scope ) ) { Set pros = smc . getPropertyKeySet ( ) ; if ( pros != null ) { pros . remove ( name ) ; } } else if ( Constants . SCOPE_AXIS2 . equals ( scope ) && smc instanceof Axis2MessageContext ) { Axis2MessageContext axis2smc = ( Axis2MessageContext ) smc ; org . apache . axis2 . context . MessageContext axis2MessageCtx = axis2smc . getAxis2MessageContext ( ) ; Map pros = axis2MessageCtx . getProperties ( ) ; if ( pros != null ) { pros . remove ( name ) ; } } else if ( Constants . SCOPE_TRANSPORT . equals ( scope ) && smc instanceof Axis2MessageContext ) { Axis2MessageContext axis2smc = ( Axis2MessageContext ) smc ; org . apache . axis2 . context . MessageContext axis2MessageCtx = axis2smc . getAxis2MessageContext ( ) ; Object headers = axis2MessageCtx . getProperty ( org . apache . axis2 . context . MessageContext . TRANSPORT_HEADERS ) ; if ( headers != null && headers instanceof Map ) { Map headersMap = ( HashMap ) headers ; headersMap . remove ( name ) ; } if ( headers == null ) { log . info ( "No Headers found " ) ; } } else { String msg = "Unsupported scope : " + scope + " for property mediator" ; handleException ( msg ) ; } } if ( shouldTrace ) { trace . trace ( "End : Property mediator" ) ; } return true ; } private void handleException ( String msg ) { log . error ( msg ) ; throw new SynapseException ( msg ) ; } public String getName ( ) { return name ; } public void setName ( String name ) { this . name = name ; } public String getValue ( ) { return value ; } public void setValue ( String value ) { this . value = value ; } public AXIOMXPath getExpression ( ) { return expression ; } public void setExpression ( AXIOMXPath expression ) { this . expression = expression ; } public String getScope ( ) { return scope ; } public void setScope ( String scope ) { this . scope = scope ; } public int getAction ( ) { return action ; } public void setAction ( int action ) { this . action = action ; } } 	1	['15', '2', '0', '10', '44', '47', '2', '8', '12', '0.885714286', '479', '0.7', '0', '0.315789474', '0.3', '0', '0', '30.26666667', '27', '2.6', '1']
package org . apache . synapse . core . axis2 ; import org . apache . axis2 . AxisFault ; import org . apache . axis2 . wsdl . WSDLConstants ; import org . apache . axis2 . util . CallbackReceiver ; import org . apache . axis2 . description . AxisService ; import org . apache . axis2 . description . AxisMessage ; import org . apache . axis2 . engine . AxisConfiguration ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import org . apache . synapse . Constants ; import org . apache . synapse . SynapseException ; import javax . xml . namespace . QName ; public class AnonymousServiceFactory { private static final Log log = LogFactory . getLog ( AnonymousServiceFactory . class ) ; private static final String NONE = "__NONE__" ; private static final String ADDR_ONLY = "__ADDR_ONLY__" ; private static final String RM_AND_ADDR = "__RM_AND_ADDR__" ; private static final String SEC_AND_ADDR = "__SEC_AND_ADDR__" ; private static final String RM_SEC_AND_ADDR = "__RM_SEC_AND_ADDR__" ; public static final String DYNAMIC_OPERATION = "__DYNAMIC_OPERATION__" ; private static final SynapseCallbackReceiver synapseCallback = new SynapseCallbackReceiver ( ) ; public static AxisService getAnonymousService ( AxisConfiguration axisCfg , boolean wsAddrOn , boolean wsRMOn , boolean wsSecOn ) { String servicekey = null ; if ( ! wsAddrOn ) { servicekey = NONE ; } else { if ( ! wsSecOn && ! wsRMOn ) { servicekey = ADDR_ONLY ; } else if ( wsRMOn && ! wsSecOn ) { servicekey = RM_AND_ADDR ; } else if ( wsSecOn && ! wsRMOn ) { servicekey = SEC_AND_ADDR ; } else { servicekey = RM_SEC_AND_ADDR ; } } try { AxisService service = axisCfg . getService ( servicekey ) ; if ( service == null ) { synchronized ( AnonymousServiceFactory . class ) { service = axisCfg . getService ( servicekey ) ; if ( service != null ) { return service ; } service = createAnonymousService ( axisCfg , servicekey ) ; if ( wsAddrOn ) { service . engageModule ( axisCfg . getModule ( Constants . ADDRESSING_MODULE_NAME ) , axisCfg ) ; if ( wsRMOn ) { service . engageModule ( axisCfg . getModule ( Constants . SANDESHA2_MODULE_NAME ) , axisCfg ) ; } if ( wsSecOn ) { service . engageModule ( axisCfg . getModule ( Constants . RAMPART_MODULE_NAME ) , axisCfg ) ; } } } } return service ; } catch ( AxisFault e ) { handleException ( "Error retrieving anonymous service for QoS : " + servicekey , e ) ; } return null ; } private static void handleException ( String msg , Exception e ) { log . error ( msg , e ) ; throw new SynapseException ( msg , e ) ; } private static AxisService createAnonymousService ( AxisConfiguration axisCfg , String serviceKey ) { try { DynamicAxisOperation dynamicOperation = new DynamicAxisOperation ( new QName ( DYNAMIC_OPERATION ) ) ; dynamicOperation . setMessageReceiver ( synapseCallback ) ; AxisMessage inMsg = new AxisMessage ( ) ; inMsg . setName ( "in-message" ) ; inMsg . setParent ( dynamicOperation ) ; AxisMessage outMsg = new AxisMessage ( ) ; outMsg . setName ( "out-message" ) ; outMsg . setParent ( dynamicOperation ) ; dynamicOperation . addMessage ( inMsg , WSDLConstants . MESSAGE_LABEL_OUT_VALUE ) ; dynamicOperation . addMessage ( outMsg , WSDLConstants . MESSAGE_LABEL_IN_VALUE ) ; AxisService axisAnonymousService = new AxisService ( serviceKey ) ; axisAnonymousService . addOperation ( dynamicOperation ) ; axisCfg . addService ( axisAnonymousService ) ; axisCfg . getPhasesInfo ( ) . setOperationPhases ( dynamicOperation ) ; return axisAnonymousService ; } catch ( AxisFault e ) { handleException ( "Error occured while creating an anonymous service for QoS : " + serviceKey , e ) ; } return null ; } } 	0	['6', '1', '0', '15', '32', '9', '1', '14', '2', '1', '230', '0.777777778', '1', '0', '0.32', '0', '0', '35.83333333', '14', '2.8333', '0']
package org . apache . synapse . config . xml . endpoints ; import org . apache . synapse . endpoints . Endpoint ; import org . apache . synapse . endpoints . AddressEndpoint ; import org . apache . synapse . endpoints . utils . EndpointDefinition ; import org . apache . synapse . Constants ; import org . apache . synapse . SynapseException ; import org . apache . axiom . om . OMElement ; import org . apache . axiom . om . OMAttribute ; import org . apache . axiom . om . OMNode ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import javax . xml . namespace . QName ; public class AddressEndpointFactory implements EndpointFactory { private static Log log = LogFactory . getLog ( AddressEndpointFactory . class ) ; private static AddressEndpointFactory instance = new AddressEndpointFactory ( ) ; private AddressEndpointFactory ( ) { } public static AddressEndpointFactory getInstance ( ) { return instance ; } public Endpoint createEndpoint ( OMElement epConfig , boolean anonymousEndpoint ) { AddressEndpoint addressEndpoint = new AddressEndpoint ( ) ; if ( ! anonymousEndpoint ) { OMAttribute name = epConfig . getAttribute ( new QName ( org . apache . synapse . config . xml . Constants . NULL_NAMESPACE , "name" ) ) ; if ( name != null ) { addressEndpoint . setName ( name . getAttributeValue ( ) ) ; } } OMElement addressElement = epConfig . getFirstChildWithName ( new QName ( Constants . SYNAPSE_NAMESPACE , "address" ) ) ; if ( addressElement != null ) { EndpointDefinition endpoint = createEndpointDefinition ( addressElement ) ; addressEndpoint . setEndpoint ( endpoint ) ; OMElement suspendElement = addressElement . getFirstChildWithName ( new QName ( Constants . SYNAPSE_NAMESPACE , org . apache . synapse . config . xml . Constants . SUSPEND_DURATION_ON_FAILURE ) ) ; if ( suspendElement != null ) { String suspend = suspendElement . getText ( ) ; try { if ( suspend != null ) { long suspendDuration = Long . parseLong ( suspend . trim ( ) ) ; addressEndpoint . setSuspendOnFailDuration ( suspendDuration * 1000 ) ; } } catch ( NumberFormatException e ) { handleException ( "The suspend duration should be specified as a valid number :: " + e . getMessage ( ) , e ) ; } } } return addressEndpoint ; } public Object getObjectFromOMNode ( OMNode om ) { if ( om instanceof OMElement ) { return createEndpoint ( ( OMElement ) om , false ) ; } else { handleException ( "Invalid XML configuration for an Endpoint. OMElement expected" ) ; } return null ; } public EndpointDefinition createEndpointDefinition ( OMElement elem ) { OMAttribute address = elem . getAttribute ( new QName ( org . apache . synapse . config . xml . Constants . NULL_NAMESPACE , "uri" ) ) ; OMAttribute format = elem . getAttribute ( new QName ( org . apache . synapse . config . xml . Constants . NULL_NAMESPACE , "format" ) ) ; OMAttribute optimize = elem . getAttribute ( new QName ( org . apache . synapse . config . xml . Constants . NULL_NAMESPACE , "optimize" ) ) ; EndpointDefinition endpoint = new EndpointDefinition ( ) ; OMAttribute statistics = elem . getAttribute ( new QName ( org . apache . synapse . config . xml . Constants . NULL_NAMESPACE , org . apache . synapse . config . xml . Constants . STATISTICS_ATTRIB_NAME ) ) ; if ( statistics != null ) { String statisticsValue = statistics . getAttributeValue ( ) ; if ( statisticsValue != null ) { if ( org . apache . synapse . config . xml . Constants . STATISTICS_ENABLE . equals ( statisticsValue ) ) { endpoint . setStatisticsEnable ( org . apache . synapse . Constants . STATISTICS_ON ) ; } else if ( org . apache . synapse . config . xml . Constants . STATISTICS_DISABLE . equals ( statisticsValue ) ) { endpoint . setStatisticsEnable ( org . apache . synapse . Constants . STATISTICS_OFF ) ; } } } if ( address != null ) { endpoint . setAddress ( address . getAttributeValue ( ) ) ; } else { handleException ( "One of the 'address' or 'ref' attributes are required in an " + "anonymous endpoint" ) ; } if ( format != null ) { String forceValue = format . getAttributeValue ( ) . trim ( ) . toLowerCase ( ) ; if ( forceValue . equals ( "pox" ) ) { endpoint . setForcePOX ( true ) ; } else if ( forceValue . equals ( "soap" ) ) { endpoint . setForceSOAP ( true ) ; } else { handleException ( "force value -\"" + forceValue + "\" not yet implemented" ) ; } } if ( optimize != null && optimize . getAttributeValue ( ) . length ( ) > 0 ) { String method = optimize . getAttributeValue ( ) . trim ( ) ; if ( "mtom" . equalsIgnoreCase ( method ) ) { endpoint . setUseMTOM ( true ) ; } else if ( "swa" . equalsIgnoreCase ( method ) ) { endpoint . setUseSwa ( true ) ; } } OMElement wsAddr = elem . getFirstChildWithName ( new QName ( org . apache . synapse . config . xml . Constants . SYNAPSE_NAMESPACE , "enableAddressing" ) ) ; if ( wsAddr != null ) { endpoint . setAddressingOn ( true ) ; String useSepList = wsAddr . getAttributeValue ( new QName ( "separateListener" ) ) ; if ( useSepList != null ) { if ( useSepList . trim ( ) . toLowerCase ( ) . startsWith ( "tr" ) || useSepList . trim ( ) . startsWith ( "1" ) ) { endpoint . setUseSeparateListener ( true ) ; } } } OMElement wsSec = elem . getFirstChildWithName ( new QName ( org . apache . synapse . config . xml . Constants . SYNAPSE_NAMESPACE , "enableSec" ) ) ; if ( wsSec != null ) { endpoint . setSecurityOn ( true ) ; OMAttribute policy = wsSec . getAttribute ( new QName ( org . apache . synapse . config . xml . Constants . NULL_NAMESPACE , "policy" ) ) ; if ( policy != null ) { endpoint . setWsSecPolicyKey ( policy . getAttributeValue ( ) ) ; } } OMElement wsRm = elem . getFirstChildWithName ( new QName ( org . apache . synapse . config . xml . Constants . SYNAPSE_NAMESPACE , "enableRM" ) ) ; if ( wsRm != null ) { endpoint . setReliableMessagingOn ( true ) ; OMAttribute policy = wsRm . getAttribute ( new QName ( org . apache . synapse . config . xml . Constants . NULL_NAMESPACE , "policy" ) ) ; if ( policy != null ) { endpoint . setWsRMPolicyKey ( policy . getAttributeValue ( ) ) ; } } OMElement timeout = elem . getFirstChildWithName ( new QName ( org . apache . synapse . config . xml . Constants . SYNAPSE_NAMESPACE , "timeout" ) ) ; if ( timeout != null ) { OMElement duration = timeout . getFirstChildWithName ( new QName ( org . apache . synapse . config . xml . Constants . SYNAPSE_NAMESPACE , "duration" ) ) ; if ( duration != null ) { String d = duration . getText ( ) ; if ( d != null ) { try { long timeoutSeconds = new Long ( d . trim ( ) ) . longValue ( ) ; endpoint . setTimeoutDuration ( timeoutSeconds * 1000 ) ; } catch ( NumberFormatException e ) { handleException ( "The timeout seconds should be specified as a valid number :: " + e . getMessage ( ) , e ) ; } } } OMElement action = timeout . getFirstChildWithName ( new QName ( org . apache . synapse . config . xml . Constants . SYNAPSE_NAMESPACE , "action" ) ) ; if ( action != null ) { String a = action . getText ( ) ; if ( a != null ) { if ( ( a . trim ( ) ) . equalsIgnoreCase ( "discard" ) ) { endpoint . setTimeoutAction ( Constants . DISCARD ) ; if ( endpoint . getTimeoutDuration ( ) == 0 ) { endpoint . setTimeoutDuration ( 30000 ) ; } } else if ( ( a . trim ( ) ) . equalsIgnoreCase ( "fault" ) ) { endpoint . setTimeoutAction ( Constants . DISCARD_AND_FAULT ) ; if ( endpoint . getTimeoutDuration ( ) == 0 ) { endpoint . setTimeoutDuration ( 30000 ) ; } } } } } return endpoint ; } private static void handleException ( String msg ) { log . error ( msg ) ; throw new SynapseException ( msg ) ; } private static void handleException ( String msg , Exception e ) { log . error ( msg , e ) ; throw new SynapseException ( msg , e ) ; } } 	1	['9', '1', '0', '11', '58', '28', '1', '10', '4', '0.75', '465', '0.666666667', '1', '0', '0.25', '0', '0', '50.33333333', '30', '4.5556', '1']
package org . apache . synapse . config . xml . endpoints . utils ; import org . apache . synapse . endpoints . utils . EndpointDefinition ; import org . apache . synapse . SynapseException ; import org . apache . axiom . om . OMElement ; import org . apache . woden . WSDLFactory ; import org . apache . woden . WSDLReader ; import org . apache . woden . WSDLException ; import org . apache . woden . types . NCName ; import org . apache . woden . wsdl20 . xml . DescriptionElement ; import org . apache . woden . wsdl20 . Description ; import org . apache . woden . wsdl20 . Service ; import org . apache . woden . wsdl20 . Endpoint ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import javax . xml . namespace . QName ; public class WSDL20EndpointBuilder { } 	0	['1', '1', '0', '0', '2', '0', '0', '0', '1', '2', '4', '0', '0', '0', '1', '0', '0', '3', '0', '0', '0']
package org . apache . synapse . core . axis2 ; import org . apache . axiom . soap . SOAPEnvelope ; import org . apache . axiom . soap . SOAPHeaderBlock ; import org . apache . axiom . om . xpath . AXIOMXPath ; import org . apache . axiom . om . impl . llom . OMTextImpl ; import org . apache . axiom . om . impl . llom . OMElementImpl ; import org . apache . axiom . om . OMElement ; import org . apache . axis2 . AxisFault ; import org . apache . axis2 . addressing . EndpointReference ; import org . apache . axis2 . addressing . RelatesTo ; import org . apache . synapse . * ; import org . apache . synapse . mediators . GetPropertyFunction ; import org . apache . synapse . mediators . MediatorFaultHandler ; import org . apache . synapse . endpoints . Endpoint ; import org . apache . synapse . config . SynapseConfiguration ; import org . apache . synapse . config . Entry ; import org . apache . synapse . core . SynapseEnvironment ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import org . jaxen . SimpleFunctionContext ; import org . jaxen . XPathFunctionContext ; import org . jaxen . JaxenException ; import java . util . * ; public class Axis2MessageContext implements MessageContext { private static final Log log = LogFactory . getLog ( Axis2MessageContext . class ) ; private SynapseConfiguration synCfg = null ; private SynapseEnvironment synEnv = null ; private Map properties = new HashMap ( ) ; private Map localEntries = new HashMap ( ) ; private Stack faultStack = new Stack ( ) ; private org . apache . axis2 . context . MessageContext axis2MessageContext = null ; private boolean response = false ; private boolean faultResponse = false ; private int tracingState = Constants . TRACING_UNSET ; public SynapseConfiguration getConfiguration ( ) { return synCfg ; } public void setConfiguration ( SynapseConfiguration synCfg ) { this . synCfg = synCfg ; } public SynapseEnvironment getEnvironment ( ) { return synEnv ; } public void setEnvironment ( SynapseEnvironment synEnv ) { this . synEnv = synEnv ; } public Mediator getMainSequence ( ) { Object o = localEntries . get ( Constants . MAIN_SEQUENCE_KEY ) ; if ( o != null && o instanceof Mediator ) { return ( Mediator ) o ; } else { Mediator main = getConfiguration ( ) . getMainSequence ( ) ; localEntries . put ( Constants . MAIN_SEQUENCE_KEY , main ) ; return main ; } } public Mediator getFaultSequence ( ) { Object o = localEntries . get ( Constants . FAULT_SEQUENCE_KEY ) ; if ( o != null && o instanceof Mediator ) { return ( Mediator ) o ; } else { Mediator fault = getConfiguration ( ) . getFaultSequence ( ) ; localEntries . put ( Constants . FAULT_SEQUENCE_KEY , fault ) ; return fault ; } } public Mediator getSequence ( String key ) { Object o = localEntries . get ( key ) ; if ( o != null && o instanceof Mediator ) { return ( Mediator ) o ; } else { Mediator m = getConfiguration ( ) . getSequence ( key ) ; localEntries . put ( key , m ) ; return m ; } } public Endpoint getEndpoint ( String key ) { Object o = localEntries . get ( key ) ; if ( o != null && o instanceof Endpoint ) { return ( Endpoint ) o ; } else { Endpoint e = getConfiguration ( ) . getEndpoint ( key ) ; localEntries . put ( key , e ) ; return e ; } } public Object getEntry ( String key ) { Object o = localEntries . get ( key ) ; if ( o != null && o instanceof Entry ) { return ( ( Entry ) o ) . getValue ( ) ; } else { Object e = getConfiguration ( ) . getEntry ( key ) ; if ( e != null ) { localEntries . put ( key , e ) ; return e ; } else { getConfiguration ( ) . getEntryDefinition ( key ) ; return getConfiguration ( ) . getEntry ( key ) ; } } } public Object getProperty ( String key ) { return properties . get ( key ) ; } public void setProperty ( String key , Object value ) { properties . put ( key , value ) ; if ( Constants . RESPONSE . equals ( key ) ) { getAxis2MessageContext ( ) . getOperationContext ( ) . setProperty ( org . apache . axis2 . Constants . RESPONSE_WRITTEN , "SKIP" ) ; } } public Set getPropertyKeySet ( ) { return properties . keySet ( ) ; } public Axis2MessageContext ( org . apache . axis2 . context . MessageContext axisMsgCtx , SynapseConfiguration synCfg , SynapseEnvironment synEnv ) { setAxis2MessageContext ( axisMsgCtx ) ; this . synCfg = synCfg ; this . synEnv = synEnv ; this . pushFaultHandler ( new MediatorFaultHandler ( synCfg . getFaultSequence ( ) ) ) ; } public EndpointReference getFaultTo ( ) { return axis2MessageContext . getFaultTo ( ) ; } public void setFaultTo ( EndpointReference reference ) { axis2MessageContext . setFaultTo ( reference ) ; } public EndpointReference getFrom ( ) { return axis2MessageContext . getFrom ( ) ; } public void setFrom ( EndpointReference reference ) { axis2MessageContext . setFrom ( reference ) ; } public SOAPEnvelope getEnvelope ( ) { return axis2MessageContext . getEnvelope ( ) ; } public void setEnvelope ( SOAPEnvelope envelope ) throws AxisFault { axis2MessageContext . setEnvelope ( envelope ) ; } public String getMessageID ( ) { return axis2MessageContext . getMessageID ( ) ; } public void setMessageID ( String string ) { axis2MessageContext . setMessageID ( string ) ; } public RelatesTo getRelatesTo ( ) { return axis2MessageContext . getRelatesTo ( ) ; } public void setRelatesTo ( RelatesTo [ ] reference ) { axis2MessageContext . setRelationships ( reference ) ; } public EndpointReference getReplyTo ( ) { return axis2MessageContext . getReplyTo ( ) ; } public void setReplyTo ( EndpointReference reference ) { axis2MessageContext . setReplyTo ( reference ) ; } public EndpointReference getTo ( ) { return axis2MessageContext . getTo ( ) ; } public void setTo ( EndpointReference reference ) { axis2MessageContext . setTo ( reference ) ; } public void setWSAAction ( String actionURI ) { axis2MessageContext . setWSAAction ( actionURI ) ; } public String getWSAAction ( ) { return axis2MessageContext . getWSAAction ( ) ; } public void setWSAMessageID ( String messageID ) { axis2MessageContext . setWSAMessageId ( messageID ) ; } public String getWSAMessageID ( ) { return axis2MessageContext . getMessageID ( ) ; } public String getSoapAction ( ) { return axis2MessageContext . getSoapAction ( ) ; } public void setSoapAction ( String string ) { axis2MessageContext . setSoapAction ( string ) ; } public boolean isDoingMTOM ( ) { return axis2MessageContext . isDoingMTOM ( ) ; } public boolean isDoingSWA ( ) { return axis2MessageContext . isDoingSwA ( ) ; } public void setDoingMTOM ( boolean b ) { axis2MessageContext . setDoingMTOM ( b ) ; } public void setDoingSWA ( boolean b ) { axis2MessageContext . setDoingSwA ( b ) ; } public boolean isDoingPOX ( ) { return axis2MessageContext . isDoingREST ( ) ; } public void setDoingPOX ( boolean b ) { axis2MessageContext . setDoingREST ( b ) ; } public boolean isSOAP11 ( ) { return axis2MessageContext . isSOAP11 ( ) ; } public void setResponse ( boolean b ) { response = b ; axis2MessageContext . setProperty ( Constants . ISRESPONSE_PROPERTY , Boolean . valueOf ( b ) ) ; } public boolean isResponse ( ) { Object o = properties . get ( Constants . RESPONSE ) ; if ( o != null && o instanceof String && ( ( String ) o ) . equalsIgnoreCase ( "true" ) ) { return true ; } return response ; } public void setFaultResponse ( boolean b ) { this . faultResponse = b ; } public boolean isFaultResponse ( ) { return this . faultResponse ; } public int getTracingState ( ) { return tracingState ; } public void setTracingState ( int tracingState ) { this . tracingState = tracingState ; } public Stack getFaultStack ( ) { return this . faultStack ; } public void pushFaultHandler ( FaultHandler fault ) { this . faultStack . push ( fault ) ; } public org . apache . axis2 . context . MessageContext getAxis2MessageContext ( ) { return axis2MessageContext ; } public void setAxis2MessageContext ( org . apache . axis2 . context . MessageContext axisMsgCtx ) { this . axis2MessageContext = axisMsgCtx ; Boolean resp = ( Boolean ) axisMsgCtx . getProperty ( Constants . ISRESPONSE_PROPERTY ) ; if ( resp != null ) response = resp . booleanValue ( ) ; } public void setPaused ( boolean value ) { axis2MessageContext . setPaused ( value ) ; } public boolean isPaused ( ) { return axis2MessageContext . isPaused ( ) ; } public boolean isServerSide ( ) { return axis2MessageContext . isServerSide ( ) ; } public void setServerSide ( boolean value ) { axis2MessageContext . setServerSide ( value ) ; } public static String getStringValue ( AXIOMXPath xpath , MessageContext synCtx ) { if ( xpath != null ) { try { GetPropertyFunction getPropertyFunc = new GetPropertyFunction ( ) ; getPropertyFunc . setSynCtx ( synCtx ) ; SimpleFunctionContext fc = new XPathFunctionContext ( ) ; fc . registerFunction ( Constants . SYNAPSE_NAMESPACE , "get-property" , getPropertyFunc ) ; fc . registerFunction ( null , "get-property" , getPropertyFunc ) ; xpath . setFunctionContext ( fc ) ; xpath . addNamespace ( "synapse" , Constants . SYNAPSE_NAMESPACE ) ; xpath . addNamespace ( "syn" , Constants . SYNAPSE_NAMESPACE ) ; } catch ( JaxenException je ) { handleException ( "Error setting up the Synapse XPath " + "extension function for XPath : " + xpath , je ) ; } try { Object result = xpath . evaluate ( synCtx . getEnvelope ( ) ) ; if ( result == null ) { return null ; } StringBuffer textValue = new StringBuffer ( ) ; if ( result instanceof List ) { Iterator iter = ( ( List ) result ) . iterator ( ) ; while ( iter . hasNext ( ) ) { Object o = iter . next ( ) ; if ( o == null ) { return null ; } if ( o instanceof OMTextImpl ) { textValue . append ( ( ( OMTextImpl ) o ) . getText ( ) ) ; } else if ( o instanceof OMElementImpl ) { textValue . append ( ( ( OMElementImpl ) o ) . getText ( ) ) ; } } } else { textValue . append ( result . toString ( ) ) ; } return textValue . toString ( ) ; } catch ( JaxenException je ) { handleException ( "Evaluation of the XPath expression " + xpath . toString ( ) + " resulted in an error" , je ) ; } } else { handleException ( "Invalid (null) XPath expression" ) ; } return null ; } private static void handleException ( String msg , Exception e ) { log . error ( msg , e ) ; throw new SynapseException ( msg , e ) ; } private static void handleException ( String msg ) { log . error ( msg ) ; throw new SynapseException ( msg ) ; } public String toString ( ) { StringBuffer sb = new StringBuffer ( ) ; String separator = "\n" ; if ( getTo ( ) != null ) sb . append ( "To: " + getTo ( ) . getAddress ( ) ) ; else sb . append ( "To: " ) ; if ( getFrom ( ) != null ) sb . append ( separator + "From: " + getFrom ( ) . getAddress ( ) ) ; if ( getWSAAction ( ) != null ) sb . append ( separator + "WSAction: " + getWSAAction ( ) ) ; if ( getSoapAction ( ) != null ) sb . append ( separator + "SOAPAction: " + getSoapAction ( ) ) ; if ( getReplyTo ( ) != null ) sb . append ( separator + "ReplyTo: " + getReplyTo ( ) . getAddress ( ) ) ; if ( getMessageID ( ) != null ) sb . append ( separator + "MessageID: " + getMessageID ( ) ) ; Iterator iter = getEnvelope ( ) . getHeader ( ) . examineAllHeaderBlocks ( ) ; if ( iter . hasNext ( ) ) { sb . append ( separator + "Headers : " ) ; while ( iter . hasNext ( ) ) { Object o = iter . next ( ) ; if ( o instanceof SOAPHeaderBlock ) { SOAPHeaderBlock header = ( SOAPHeaderBlock ) o ; sb . append ( separator + header . getLocalName ( ) + " : " + header . getText ( ) ) ; } else if ( o instanceof OMElement ) { OMElement headerElem = ( OMElement ) o ; sb . append ( separator + headerElem . getLocalName ( ) + " : " + headerElem . getText ( ) ) ; } } } return sb . toString ( ) ; } } 	1	['60', '1', '0', '45', '147', '490', '17', '29', '56', '0.898305085', '867', '0.909090909', '2', '0', '0.103954802', '0', '0', '13.26666667', '10', '1.4667', '1']
package org . apache . synapse . core . axis2 ; import org . apache . axis2 . client . async . Callback ; import org . apache . axis2 . client . async . AsyncResult ; import org . apache . synapse . MessageContext ; import org . apache . synapse . Constants ; public class AsyncCallback extends Callback { MessageContext synapseOutMsgCtx = null ; private long timeOutOn ; private int timeOutAction = Constants . NONE ; public AsyncCallback ( org . apache . synapse . MessageContext synapseOutMsgCtx ) { this . synapseOutMsgCtx = synapseOutMsgCtx ; } public void onComplete ( AsyncResult result ) { } public void onError ( Exception e ) { } public void setSynapseOutMshCtx ( MessageContext synapseOutMsgCtx ) { this . synapseOutMsgCtx = synapseOutMsgCtx ; } public MessageContext getSynapseOutMsgCtx ( ) { return synapseOutMsgCtx ; } public long getTimeOutOn ( ) { return timeOutOn ; } public void setTimeOutOn ( long timeOutOn ) { this . timeOutOn = timeOutOn ; } public int getTimeOutAction ( ) { return timeOutAction ; } public void setTimeOutAction ( int timeOutAction ) { this . timeOutAction = timeOutAction ; } } 	0	['9', '2', '0', '6', '10', '22', '3', '3', '9', '0.791666667', '47', '0.666666667', '1', '0.333333333', '0.277777778', '0', '0', '3.888888889', '1', '0.8889', '0']
package org . apache . synapse . core . axis2 ; import org . apache . axis2 . engine . MessageReceiver ; import org . apache . axis2 . client . async . Callback ; import org . apache . axis2 . context . MessageContext ; import org . apache . axis2 . AxisFault ; import org . apache . axis2 . util . Utils ; import org . apache . axis2 . transport . nhttp . NhttpConstants ; import org . apache . axis2 . addressing . RelatesTo ; import org . apache . axis2 . addressing . AddressingConstants ; import org . apache . axis2 . addressing . EndpointReference ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import org . apache . synapse . Constants ; import org . apache . synapse . FaultHandler ; import org . apache . synapse . SynapseException ; import org . apache . synapse . endpoints . Endpoint ; import org . apache . axiom . soap . SOAPFault ; import org . apache . sandesha2 . client . SandeshaClientConstants ; import java . util . * ; public class SynapseCallbackReceiver implements MessageReceiver { private static final Log log = LogFactory . getLog ( SynapseCallbackReceiver . class ) ; private Map callbackStore ; private Timer timeOutTimer = null ; public SynapseCallbackReceiver ( ) { callbackStore = Collections . synchronizedMap ( new HashMap ( ) ) ; TimeoutHandler timeoutHandler = new TimeoutHandler ( callbackStore ) ; timeOutTimer = new Timer ( true ) ; timeOutTimer . schedule ( timeoutHandler , 0 , Constants . TIMEOUT_HANDLER_INTERVAL ) ; } public void addCallback ( String MsgID , Callback callback ) { callbackStore . put ( MsgID , callback ) ; } public void receive ( MessageContext messageCtx ) throws AxisFault { String messageID = null ; if ( messageCtx . getOptions ( ) != null && messageCtx . getOptions ( ) . getRelatesTo ( ) != null ) { messageID = messageCtx . getOptions ( ) . getRelatesTo ( ) . getValue ( ) ; } else if ( messageCtx . getProperty ( SandeshaClientConstants . SEQUENCE_KEY ) == null ) { messageID = ( String ) messageCtx . getProperty ( Constants . RELATES_TO_FOR_POX ) ; } if ( messageID != null ) { Callback callback = ( Callback ) callbackStore . remove ( messageID ) ; RelatesTo [ ] relates = messageCtx . getRelationships ( ) ; if ( relates != null && relates . length > 1 ) { removeDuplicateRelatesTo ( messageCtx , relates ) ; } if ( callback != null ) { handleMessage ( messageCtx , ( ( AsyncCallback ) callback ) . getSynapseOutMsgCtx ( ) ) ; } else { log . warn ( "Synapse received a response for the request with message Id : " + messageID + " But a callback has not been registered to process this response" ) ; } } else if ( ! Utils . isExplicitlyTrue ( messageCtx , NhttpConstants . SC_ACCEPTED ) ) { log . warn ( "Synapse received a response message without a message Id" ) ; } } private void handleMessage ( MessageContext response , org . apache . synapse . MessageContext synapseOutMsgCtx ) { Object o = response . getProperty ( NhttpConstants . SENDING_FAULT ) ; if ( o != null && Boolean . TRUE . equals ( o ) ) { Stack faultStack = synapseOutMsgCtx . getFaultStack ( ) ; if ( faultStack != null && ! faultStack . isEmpty ( ) ) { SOAPFault fault = response . getEnvelope ( ) . getBody ( ) . getFault ( ) ; Exception e = fault . getException ( ) ; if ( e == null ) { e = new Exception ( fault . toString ( ) ) ; } synapseOutMsgCtx . setProperty ( Constants . ERROR_CODE , Constants . SENDING_FAULT ) ; if ( fault != null && fault . getReason ( ) != null ) { synapseOutMsgCtx . setProperty ( Constants . ERROR_MESSAGE , fault . getReason ( ) . getText ( ) ) ; } ( ( FaultHandler ) faultStack . pop ( ) ) . handleFault ( synapseOutMsgCtx , e ) ; } } else { Stack faultStack = synapseOutMsgCtx . getFaultStack ( ) ; if ( ! faultStack . isEmpty ( ) && faultStack . peek ( ) instanceof Endpoint ) { faultStack . pop ( ) ; } if ( log . isDebugEnabled ( ) ) { log . debug ( "Synapse received an asynchronous response message" ) ; log . debug ( "Received To: " + ( response . getTo ( ) != null ? response . getTo ( ) . getAddress ( ) : "null" ) ) ; log . debug ( "SOAPAction: " + ( response . getSoapAction ( ) != null ? response . getSoapAction ( ) : "null" ) ) ; log . debug ( "WSA-Action: " + ( response . getWSAAction ( ) != null ? response . getWSAAction ( ) : "null" ) ) ; String [ ] cids = response . getAttachmentMap ( ) . getAllContentIDs ( ) ; if ( cids != null && cids . length > 0 ) { for ( int i = 0 ; i < cids . length ; i ++ ) { log . debug ( "Attachment : " + cids [ i ] ) ; } } log . debug ( "Body : \n" + response . getEnvelope ( ) ) ; } MessageContext axisOutMsgCtx = ( ( Axis2MessageContext ) synapseOutMsgCtx ) . getAxis2MessageContext ( ) ; response . setOperationContext ( axisOutMsgCtx . getOperationContext ( ) ) ; response . getAxisMessage ( ) . setParent ( axisOutMsgCtx . getOperationContext ( ) . getAxisOperation ( ) ) ; response . setAxisService ( axisOutMsgCtx . getAxisService ( ) ) ; response . setServerSide ( true ) ; response . setProperty ( Constants . ISRESPONSE_PROPERTY , Boolean . TRUE ) ; response . setProperty ( MessageContext . TRANSPORT_OUT , axisOutMsgCtx . getProperty ( MessageContext . TRANSPORT_OUT ) ) ; response . setProperty ( org . apache . axis2 . Constants . OUT_TRANSPORT_INFO , axisOutMsgCtx . getProperty ( org . apache . axis2 . Constants . OUT_TRANSPORT_INFO ) ) ; response . setTransportIn ( axisOutMsgCtx . getTransportIn ( ) ) ; response . setTransportOut ( axisOutMsgCtx . getTransportOut ( ) ) ; response . setDoingREST ( axisOutMsgCtx . isDoingREST ( ) ) ; if ( axisOutMsgCtx . isDoingMTOM ( ) ) { response . setDoingMTOM ( true ) ; response . setProperty ( org . apache . axis2 . Constants . Configuration . ENABLE_MTOM , org . apache . axis2 . Constants . VALUE_TRUE ) ; } if ( axisOutMsgCtx . isDoingSwA ( ) ) { response . setDoingSwA ( true ) ; response . setProperty ( org . apache . axis2 . Constants . Configuration . ENABLE_SWA , org . apache . axis2 . Constants . VALUE_TRUE ) ; } if ( axisOutMsgCtx . getMessageID ( ) != null ) { response . setRelationships ( new RelatesTo [ ] { new RelatesTo ( axisOutMsgCtx . getMessageID ( ) ) } ) ; } Axis2MessageContext synapseInMessageContext = new Axis2MessageContext ( response , synapseOutMsgCtx . getConfiguration ( ) , synapseOutMsgCtx . getEnvironment ( ) ) ; synapseInMessageContext . setResponse ( true ) ; synapseInMessageContext . setTo ( new EndpointReference ( AddressingConstants . Final . WSA_ANONYMOUS_URL ) ) ; Iterator iter = synapseOutMsgCtx . getPropertyKeySet ( ) . iterator ( ) ; while ( iter . hasNext ( ) ) { Object key = iter . next ( ) ; synapseInMessageContext . setProperty ( ( String ) key , synapseOutMsgCtx . getProperty ( ( String ) key ) ) ; } try { synapseOutMsgCtx . getEnvironment ( ) . injectMessage ( synapseInMessageContext ) ; } catch ( SynapseException syne ) { if ( ! synapseInMessageContext . getFaultStack ( ) . isEmpty ( ) ) { ( ( FaultHandler ) synapseInMessageContext . getFaultStack ( ) . pop ( ) ) . handleFault ( synapseInMessageContext , syne ) ; } else { log . error ( "Synapse encountered an exception, " + "No error handlers found - [Message Dropped]\n" + syne . getMessage ( ) ) ; } } } } private void removeDuplicateRelatesTo ( MessageContext mc , RelatesTo [ ] relates ) { int insertPos = 0 ; RelatesTo [ ] newRelates = new RelatesTo [ relates . length ] ; for ( int i = 0 ; i < relates . length ; i ++ ) { RelatesTo current = relates [ i ] ; boolean found = false ; for ( int j = 0 ; j < newRelates . length && j < insertPos ; j ++ ) { if ( newRelates [ j ] . equals ( current ) || newRelates [ j ] . getValue ( ) . equals ( current . getValue ( ) ) ) { found = true ; break ; } } if ( ! found ) { newRelates [ insertPos ++ ] = current ; } } RelatesTo [ ] trimmedRelates = new RelatesTo [ insertPos ] ; System . arraycopy ( newRelates , 0 , trimmedRelates , 0 , insertPos ) ; mc . setRelationships ( trimmedRelates ) ; } } 	1	['7', '1', '0', '34', '96', '9', '2', '32', '3', '0.833333333', '527', '0.75', '0', '0', '0.361111111', '0', '0', '73.71428571', '20', '4.2857', '1']
