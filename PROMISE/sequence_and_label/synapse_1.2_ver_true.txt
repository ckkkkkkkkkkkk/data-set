package org . apache . synapse . util . concurrent ; import org . apache . synapse . config . SynapseConfiguration ; import java . util . concurrent . * ; public class SynapseThreadPool extends ThreadPoolExecutor { public static final int SYNAPSE_CORE_THREADS = 20 ; public static final int SYNAPSE_MAX_THREADS = 100 ; public static final int SYNAPSE_KEEP_ALIVE = 5 ; public static final int SYNAPSE_THREAD_QLEN = 10 ; public static final String SYNAPSE_THREAD_GROUP = "synapse-thread-group" ; public static final String SYNAPSE_THREAD_ID_PREFIX = "SynapseWorker" ; public static final String SYN_THREAD_CORE = "synapse.threads.core" ; public static final String SYN_THREAD_MAX = "synapse.threads.max" ; public static final String SYN_THREAD_ALIVE = "synapse.threads.keepalive" ; public static final String SYN_THREAD_QLEN = "synapse.threads.qlen" ; public static final String SYN_THREAD_GROUP = "synapse.threads.group" ; public static final String SYN_THREAD_IDPREFIX = "synapse.threads.idprefix" ; public SynapseThreadPool ( int corePoolSize , int maximumPoolSize , long keepAliveTime , TimeUnit unit , BlockingQueue < Runnable > workQueue ) { super ( corePoolSize , maximumPoolSize , keepAliveTime , unit , workQueue , new SynapseThreadFactory ( new ThreadGroup ( SYNAPSE_THREAD_GROUP ) , SYNAPSE_THREAD_ID_PREFIX ) ) ; } public SynapseThreadPool ( ) { this ( SYNAPSE_CORE_THREADS , SYNAPSE_MAX_THREADS , SYNAPSE_KEEP_ALIVE , TimeUnit . SECONDS , new LinkedBlockingQueue < Runnable > ( ) ) ; } public SynapseThreadPool ( int corePoolSize , int maxPoolSize , long keepAliveTime , int qlen , String threadGroup , String threadIdPrefix ) { super ( corePoolSize , maxPoolSize , keepAliveTime , TimeUnit . SECONDS , new LinkedBlockingQueue < Runnable > ( qlen ) , new SynapseThreadFactory ( new ThreadGroup ( threadGroup ) , threadIdPrefix ) ) ; } } 	0	['3', '3', '0', '2', '8', '3', '1', '1', '3', '1.5', '60', '0', '0', '1', '0.555555556', '0', '0', '15', '0', '0', '0']
package org . apache . synapse . config . xml ; import org . apache . synapse . Mediator ; import org . apache . synapse . SynapseException ; import org . apache . axiom . om . OMElement ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import java . util . Iterator ; public abstract class AnonymousListMediatorFactory extends AbstractListMediatorFactory { public static AnonymousListMediator createAnonymousListMediator ( OMElement el ) { AnonymousListMediator mediator = new AnonymousListMediator ( ) ; { addChildren ( el , mediator ) ; } return mediator ; } } 	0	['2', '3', '0', '6', '5', '1', '2', '4', '2', '2', '14', '0', '0', '0.8', '0.5', '0', '0', '6', '1', '0.5', '0']
package org . apache . synapse . config . xml ; import org . apache . axiom . om . OMAttribute ; import org . apache . axiom . om . OMElement ; import org . apache . axiom . om . OMNode ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import org . apache . synapse . Mediator ; import org . apache . synapse . SynapseException ; import org . apache . synapse . mediators . ext . ClassMediator ; import javax . xml . namespace . QName ; import java . util . Iterator ; public class ClassMediatorFactory extends AbstractMediatorFactory { private static final QName CLASS_Q = new QName ( XMLConfigConstants . SYNAPSE_NAMESPACE , "class" ) ; public Mediator createMediator ( OMElement elem ) { ClassMediator classMediator = new ClassMediator ( ) ; OMAttribute name = elem . getAttribute ( ATT_NAME ) ; if ( name == null ) { String msg = "The name of the actual mediator class is a required attribute" ; log . error ( msg ) ; throw new SynapseException ( msg ) ; } Class clazz = null ; Mediator m = null ; try { clazz = getClass ( ) . getClassLoader ( ) . loadClass ( name . getAttributeValue ( ) ) ; m = ( Mediator ) clazz . newInstance ( ) ; } catch ( Exception e ) { String msg = "Error : " + name . getAttributeValue ( ) ; log . error ( msg , e ) ; throw new SynapseException ( msg , e ) ; } for ( Iterator it = elem . getChildrenWithName ( PROP_Q ) ; it . hasNext ( ) ; ) { OMElement child = ( OMElement ) it . next ( ) ; String propName = child . getAttribute ( ATT_NAME ) . getAttributeValue ( ) ; if ( propName == null ) { handleException ( "A Class mediator property must specify the name attribute" ) ; } else { if ( child . getAttribute ( ATT_VALUE ) != null ) { String value = child . getAttribute ( ATT_VALUE ) . getAttributeValue ( ) ; classMediator . addProperty ( propName , value ) ; PropertyHelper . setInstanceProperty ( propName , value , m ) ; } else { OMNode omElt = child . getFirstElement ( ) ; if ( omElt != null ) { classMediator . addProperty ( propName , omElt ) ; PropertyHelper . setInstanceProperty ( propName , omElt , m ) ; } else { handleException ( "A Class mediator property must specify " + "name and value attributes, or a name and a child XML fragment" ) ; } } } } classMediator . setMediator ( m ) ; processTraceState ( classMediator , elem ) ; return classMediator ; } public QName getTagQName ( ) { return CLASS_Q ; } } 	0	['4', '2', '0', '8', '29', '4', '0', '8', '3', '0.666666667', '141', '1', '0', '0.6', '0.666666667', '0', '0', '34', '6', '1.75', '0']
package org . apache . synapse . util ; import java . io . IOException ; import java . io . Reader ; import java . util . Collections ; import javax . xml . XMLConstants ; import javax . xml . namespace . NamespaceContext ; import javax . xml . namespace . QName ; import javax . xml . stream . Location ; import javax . xml . stream . XMLStreamException ; import javax . xml . stream . XMLStreamReader ; import org . apache . axiom . om . impl . EmptyOMLocation ; import org . apache . axiom . om . impl . llom . util . NamespaceContextImpl ; import org . apache . commons . io . IOUtils ; public class WrappedTextNodeStreamReader implements XMLStreamReader { private final static Location EMPTY_LOCATION = new EmptyOMLocation ( ) ; private final QName wrapperElementName ; private final Reader reader ; private final int chunkSize ; private int eventType = START_DOCUMENT ; private char [ ] charData ; private int charDataLength ; private NamespaceContext namespaceContext ; public WrappedTextNodeStreamReader ( QName wrapperElementName , Reader reader , int chunkSize ) { this . wrapperElementName = wrapperElementName ; this . reader = reader ; this . chunkSize = chunkSize ; } public WrappedTextNodeStreamReader ( QName wrapperElementName , Reader reader ) { this ( wrapperElementName , reader , 4096 ) ; } public Object getProperty ( String name ) throws IllegalArgumentException { return null ; } public boolean hasNext ( ) throws XMLStreamException { return eventType != END_DOCUMENT ; } public int next ( ) throws XMLStreamException { switch ( eventType ) { case START_DOCUMENT : eventType = START_ELEMENT ; break ; case START_ELEMENT : charData = new char [ chunkSize ] ; case CHARACTERS : try { charDataLength = reader . read ( charData ) ; } catch ( IOException ex ) { throw new XMLStreamException ( ex ) ; } if ( charDataLength == - 1 ) { charData = null ; eventType = END_ELEMENT ; } else { eventType = CHARACTERS ; } break ; case END_ELEMENT : eventType = END_DOCUMENT ; break ; default : throw new IllegalStateException ( ) ; } return eventType ; } public int nextTag ( ) throws XMLStreamException { throw new XMLStreamException ( "Current event is not white space" ) ; } public int getEventType ( ) { return eventType ; } public boolean isStartElement ( ) { return eventType == START_ELEMENT ; } public boolean isEndElement ( ) { return eventType == END_ELEMENT ; } public boolean isCharacters ( ) { return eventType == CHARACTERS ; } public boolean isWhiteSpace ( ) { return false ; } public boolean hasText ( ) { return eventType == CHARACTERS ; } public boolean hasName ( ) { return eventType == START_ELEMENT || eventType == END_ELEMENT ; } public void require ( int type , String namespaceURI , String localName ) throws XMLStreamException { if ( type != eventType || ( namespaceURI != null && ! namespaceURI . equals ( getNamespaceURI ( ) ) ) || ( localName != null && ! namespaceURI . equals ( getLocalName ( ) ) ) ) { throw new XMLStreamException ( "Unexpected event type" ) ; } } public Location getLocation ( ) { return EMPTY_LOCATION ; } public void close ( ) throws XMLStreamException { try { reader . close ( ) ; } catch ( IOException ex ) { throw new XMLStreamException ( ex ) ; } } public String getEncoding ( ) { return null ; } public String getCharacterEncodingScheme ( ) { return null ; } public String getVersion ( ) { return null ; } public boolean standaloneSet ( ) { return false ; } public boolean isStandalone ( ) { return true ; } public NamespaceContext getNamespaceContext ( ) { if ( namespaceContext == null ) { namespaceContext = new NamespaceContextImpl ( Collections . singletonMap ( wrapperElementName . getPrefix ( ) , wrapperElementName . getNamespaceURI ( ) ) ) ; } return namespaceContext ; } public String getNamespaceURI ( String prefix ) { String namespaceURI = getNamespaceContext ( ) . getNamespaceURI ( prefix ) ; return namespaceURI . equals ( XMLConstants . NULL_NS_URI ) ? null : prefix ; } private void checkStartElement ( ) { if ( eventType != START_ELEMENT ) { throw new IllegalStateException ( ) ; } } public String getAttributeValue ( String namespaceURI , String localName ) { checkStartElement ( ) ; return null ; } public int getAttributeCount ( ) { checkStartElement ( ) ; return 0 ; } public QName getAttributeName ( int index ) { checkStartElement ( ) ; throw new ArrayIndexOutOfBoundsException ( ) ; } public String getAttributeLocalName ( int index ) { checkStartElement ( ) ; throw new ArrayIndexOutOfBoundsException ( ) ; } public String getAttributePrefix ( int index ) { checkStartElement ( ) ; throw new ArrayIndexOutOfBoundsException ( ) ; } public String getAttributeNamespace ( int index ) { checkStartElement ( ) ; throw new ArrayIndexOutOfBoundsException ( ) ; } public String getAttributeType ( int index ) { checkStartElement ( ) ; throw new ArrayIndexOutOfBoundsException ( ) ; } public String getAttributeValue ( int index ) { checkStartElement ( ) ; throw new ArrayIndexOutOfBoundsException ( ) ; } public boolean isAttributeSpecified ( int index ) { checkStartElement ( ) ; throw new ArrayIndexOutOfBoundsException ( ) ; } private void checkElement ( ) { if ( eventType != START_ELEMENT && eventType != END_ELEMENT ) { throw new IllegalStateException ( ) ; } } public QName getName ( ) { return null ; } public String getLocalName ( ) { checkElement ( ) ; return wrapperElementName . getLocalPart ( ) ; } public String getPrefix ( ) { return wrapperElementName . getPrefix ( ) ; } public String getNamespaceURI ( ) { checkElement ( ) ; return wrapperElementName . getNamespaceURI ( ) ; } public int getNamespaceCount ( ) { checkElement ( ) ; return 1 ; } public String getNamespacePrefix ( int index ) { checkElement ( ) ; if ( index == 0 ) { return wrapperElementName . getPrefix ( ) ; } else { throw new IndexOutOfBoundsException ( ) ; } } public String getNamespaceURI ( int index ) { checkElement ( ) ; if ( index == 0 ) { return wrapperElementName . getNamespaceURI ( ) ; } else { throw new IndexOutOfBoundsException ( ) ; } } public String getElementText ( ) throws XMLStreamException { if ( eventType == START_ELEMENT ) { try { String result = IOUtils . toString ( reader ) ; eventType = END_ELEMENT ; return result ; } catch ( IOException ex ) { throw new XMLStreamException ( ex ) ; } } else { throw new XMLStreamException ( "Current event is not a START_ELEMENT" ) ; } } private void checkCharacters ( ) { if ( eventType != CHARACTERS ) { throw new IllegalStateException ( ) ; } } public String getText ( ) { checkCharacters ( ) ; return new String ( charData , 0 , charDataLength ) ; } public char [ ] getTextCharacters ( ) { checkCharacters ( ) ; return charData ; } public int getTextStart ( ) { checkCharacters ( ) ; return 0 ; } public int getTextLength ( ) { checkCharacters ( ) ; return charDataLength ; } public int getTextCharacters ( int sourceStart , char [ ] target , int targetStart , int length ) throws XMLStreamException { checkCharacters ( ) ; int c = Math . min ( charDataLength - sourceStart , length ) ; System . arraycopy ( charData , sourceStart , target , targetStart , c ) ; return c ; } public String getPIData ( ) { throw new IllegalStateException ( ) ; } public String getPITarget ( ) { throw new IllegalStateException ( ) ; } } 	0	['51', '1', '0', '4', '71', '1025', '1', '3', '47', '0.86', '481', '1', '0', '0', '0.236666667', '0', '0', '8.274509804', '3', '1.2157', '0']
package org . apache . synapse . endpoints . dispatch ; import org . apache . axis2 . clustering . ClusteringFault ; import org . apache . axis2 . clustering . context . Replicator ; import org . apache . axis2 . context . ConfigurationContext ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import org . apache . synapse . SynapseConstants ; import org . apache . synapse . SynapseException ; import org . apache . synapse . endpoints . Endpoint ; import org . apache . synapse . endpoints . IndirectEndpoint ; import org . apache . synapse . endpoints . SALoadbalanceEndpoint ; import java . util . Collections ; import java . util . HashMap ; import java . util . List ; import java . util . Map ; public class DispatcherContext { private static final Log log = LogFactory . getLog ( DispatcherContext . class ) ; private static final String SESSION = "session" ; private static final String UNDERSCORE_STRING = "_" ; private final Map < String , Endpoint > sessionMap = Collections . synchronizedMap ( new HashMap < String , Endpoint > ( ) ) ; private ConfigurationContext configCtx ; private boolean isClusteringEnable = false ; private String keyPrefix ; private final Map < String , Endpoint > endpointsMap = new HashMap < String , Endpoint > ( ) ; public Endpoint getEndpoint ( String sessionID ) { if ( isClusteringEnable ) { if ( keyPrefix == null || "" . equals ( keyPrefix ) ) { handleException ( "Cannot find the required key prefix to find the " + "shared state of one of  'session'" ) ; } Object value = this . configCtx . getPropertyNonReplicable ( this . keyPrefix + sessionID ) ; if ( value != null && value instanceof String ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Retrieving the endpoint from the session id " + value ) ; } return endpointsMap . get ( value . toString ( ) ) ; } } else { synchronized ( sessionMap ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Retrieving the endpoint from the session id " + sessionID ) ; } return sessionMap . get ( sessionID ) ; } } return null ; } public void setEndpoint ( String sessionID , Endpoint endpoint ) { if ( isClusteringEnable ) { String endpointName ; if ( endpoint instanceof IndirectEndpoint ) { endpointName = ( ( IndirectEndpoint ) endpoint ) . getKey ( ) ; } else { endpointName = endpoint . getName ( ) ; } if ( endpointName == null ) { if ( log . isDebugEnabled ( ) && isClusteringEnable ( ) ) { log . warn ( SALoadbalanceEndpoint . WARN_MESSAGE ) ; } endpointName = SynapseConstants . ANONYMOUS_ENDPOINT ; } if ( keyPrefix != null ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Adding the enpoint " + endpointName + " with the session id " + keyPrefix + sessionID + " for replication to the session" ) ; } setAndReplicateState ( keyPrefix + sessionID , endpointName ) ; } } else { synchronized ( sessionMap ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Adding the endpoint " + endpoint + " with the session id " + sessionID + " to the session" ) ; } sessionMap . put ( sessionID , endpoint ) ; } } } public void removeSession ( String id ) { if ( isClusteringEnable ) { if ( keyPrefix != null ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Removing and replicating " + "the session with the session id " + keyPrefix + id ) ; } removeAndReplicateState ( keyPrefix + id ) ; } } else { synchronized ( sessionMap ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Removing the session with the session id " + id ) ; } sessionMap . remove ( id ) ; } } } public ConfigurationContext getConfigurationContext ( ) { return configCtx ; } public void setConfigurationContext ( ConfigurationContext configCtx ) { if ( configCtx == null ) { handleException ( "The ConfigurationContext cannot be null" + " when system in a cluster environment" ) ; } this . configCtx = configCtx ; this . isClusteringEnable = true ; } public void setContextID ( String contextID ) { if ( contextID == null || "" . equals ( contextID ) ) { handleException ( "The Context ID cannot be null when system in a cluster environment" ) ; } StringBuffer buffer = new StringBuffer ( ) ; buffer . append ( contextID ) ; buffer . append ( UNDERSCORE_STRING ) ; buffer . append ( SESSION ) ; buffer . append ( UNDERSCORE_STRING ) ; keyPrefix = buffer . toString ( ) ; } protected void handleException ( String msg ) { log . error ( msg ) ; throw new SynapseException ( msg ) ; } protected void handleException ( String msg , Exception e ) { log . error ( msg , e ) ; throw new SynapseException ( msg , e ) ; } private void setAndReplicateState ( String key , Object value ) { if ( configCtx != null && key != null && value != null ) { try { if ( log . isDebugEnabled ( ) ) { log . debug ( "Start replicating the property with key : " + key + " value : " + value ) ; } Object prop = configCtx . getPropertyNonReplicable ( key ) ; if ( prop == null ) { configCtx . setProperty ( key , value ) ; Replicator . replicate ( configCtx , new String [ ] { key } ) ; } if ( log . isDebugEnabled ( ) ) { log . debug ( "Completed replication of the property with key: " + key ) ; } } catch ( ClusteringFault clusteringFault ) { handleException ( "Error during the replicating states " , clusteringFault ) ; } } } private void removeAndReplicateState ( String key ) { if ( configCtx != null && key != null ) { try { if ( log . isDebugEnabled ( ) ) { log . debug ( "Start replicating the property removal with key : " + key ) ; } configCtx . removeProperty ( key ) ; Replicator . replicate ( configCtx , new String [ ] { key } ) ; if ( log . isDebugEnabled ( ) ) { log . debug ( "Completed replication of the property removal with key : " + key ) ; } } catch ( ClusteringFault clusteringFault ) { handleException ( "Error during the replicating states " , clusteringFault ) ; } } } public boolean isClusteringEnable ( ) { return isClusteringEnable ; } public void setEndpoints ( List < Endpoint > endpoints ) { if ( endpoints != null ) { for ( Endpoint endpoint : endpoints ) { String endpointName ; if ( endpoint instanceof IndirectEndpoint ) { endpointName = ( ( IndirectEndpoint ) endpoint ) . getKey ( ) ; } else { endpointName = endpoint . getName ( ) ; } if ( endpointName == null ) { if ( log . isDebugEnabled ( ) && isClusteringEnable ( ) ) { log . warn ( SALoadbalanceEndpoint . WARN_MESSAGE ) ; } endpointName = SynapseConstants . ANONYMOUS_ENDPOINT ; } if ( log . isDebugEnabled ( ) ) { log . debug ( "Adding an endpoint with the name/key " + endpointName + " to the endpoints map" ) ; } endpointsMap . put ( endpointName , endpoint ) ; } } } } 	0	['14', '1', '0', '14', '46', '0', '5', '9', '9', '0.730769231', '544', '1', '0', '0', '0.285714286', '0', '0', '37.28571429', '8', '3.2857', '0']
package org . apache . synapse . util ; import java . net . InetAddress ; import java . net . UnknownHostException ; import java . security . MessageDigest ; import java . security . NoSuchAlgorithmException ; import java . util . Random ; public class UUIDGenerator { private static String baseUUID = null ; private static long incrementingValue = 0 ; private static Random myRand = null ; private static boolean useNano = false ; public static String getUUID ( ) { if ( baseUUID == null ) { baseUUID = getInitialUUID ( ) ; baseUUID = "urn:uuid:" + baseUUID ; } if ( ++ incrementingValue >= Long . MAX_VALUE ) { incrementingValue = 0 ; } if ( useNano ) { return baseUUID + ( System . nanoTime ( ) + incrementingValue ) + Integer . toString ( myRand . nextInt ( ) ) ; } else { return baseUUID + ( System . currentTimeMillis ( ) + incrementingValue + Integer . toString ( myRand . nextInt ( ) ) ) ; } } protected static String getInitialUUID ( ) { try { if ( System . class . getMethod ( "nanoTime" , new Class [ 0 ] ) != null ) { useNano = true ; } } catch ( NoSuchMethodException ignore ) { } if ( myRand == null ) { myRand = new Random ( ) ; } long rand = myRand . nextLong ( ) ; String sid ; try { sid = InetAddress . getLocalHost ( ) . toString ( ) ; } catch ( UnknownHostException e ) { sid = Thread . currentThread ( ) . getName ( ) ; } StringBuffer sb = new StringBuffer ( ) ; sb . append ( sid ) ; sb . append ( ":" ) ; sb . append ( Long . toString ( rand ) ) ; MessageDigest md5 = null ; try { md5 = MessageDigest . getInstance ( "MD5" ) ; } catch ( NoSuchAlgorithmException e ) { } md5 . update ( sb . toString ( ) . getBytes ( ) ) ; byte [ ] array = md5 . digest ( ) ; StringBuffer sb2 = new StringBuffer ( ) ; for ( int j = 0 ; j < array . length ; ++ j ) { int b = array [ j ] & 0xFF ; sb2 . append ( Integer . toHexString ( b ) ) ; } int begin = myRand . nextInt ( ) ; if ( begin < 0 ) begin = begin * - 1 ; begin = begin % 8 ; return sb2 . toString ( ) . substring ( begin , begin + 18 ) . toUpperCase ( ) ; } } 	0	['4', '1', '0', '4', '31', '0', '4', '0', '2', '0.5', '179', '1', '0', '0', '0.333333333', '0', '0', '42.75', '4', '2', '0']
package org . apache . synapse . config . xml ; import org . apache . axiom . om . OMElement ; import org . apache . axiom . om . OMText ; import org . apache . synapse . SynapseException ; import org . apache . synapse . mediators . db . AbstractDBMediator ; import org . apache . synapse . mediators . db . Statement ; import javax . xml . namespace . QName ; import javax . xml . stream . XMLStreamConstants ; import java . sql . Types ; import java . util . Iterator ; public abstract class AbstractDBMediatorSerializer extends AbstractMediatorSerializer { protected void serializeDBInformation ( AbstractDBMediator mediator , OMElement dbParent ) { OMElement connElt = fac . createOMElement ( "connection" , synNS ) ; OMElement poolElt = fac . createOMElement ( "pool" , synNS ) ; Iterator iter = mediator . getDataSourceProps ( ) . keySet ( ) . iterator ( ) ; while ( iter . hasNext ( ) ) { Object o = iter . next ( ) ; String value = ( String ) mediator . getDataSourceProps ( ) . get ( o ) ; if ( o instanceof QName ) { QName name = ( QName ) o ; OMElement elt = fac . createOMElement ( name . getLocalPart ( ) , synNS ) ; elt . setText ( value ) ; poolElt . addChild ( elt ) ; } else if ( o instanceof String ) { OMElement elt = fac . createOMElement ( AbstractDBMediatorFactory . PROP_Q . getLocalPart ( ) , synNS ) ; elt . addAttribute ( fac . createOMAttribute ( "name" , nullNS , ( String ) o ) ) ; elt . addAttribute ( fac . createOMAttribute ( "value" , nullNS , value ) ) ; poolElt . addChild ( elt ) ; } } connElt . addChild ( poolElt ) ; dbParent . addChild ( connElt ) ; Iterator statementIter = mediator . getStatementList ( ) . iterator ( ) ; while ( statementIter . hasNext ( ) ) { Statement statement = ( Statement ) statementIter . next ( ) ; OMElement stmntElt = fac . createOMElement ( AbstractDBMediatorFactory . STMNT_Q . getLocalPart ( ) , synNS ) ; OMElement sqlElt = fac . createOMElement ( AbstractDBMediatorFactory . SQL_Q . getLocalPart ( ) , synNS ) ; OMText sqlText = fac . createOMText ( statement . getRawStatement ( ) , XMLStreamConstants . CDATA ) ; sqlElt . addChild ( sqlText ) ; stmntElt . addChild ( sqlElt ) ; for ( Iterator it = statement . getParameters ( ) . iterator ( ) ; it . hasNext ( ) ; ) { Statement . Parameter param = ( Statement . Parameter ) it . next ( ) ; OMElement paramElt = fac . createOMElement ( AbstractDBMediatorFactory . PARAM_Q . getLocalPart ( ) , synNS ) ; if ( param . getPropertyName ( ) != null ) { paramElt . addAttribute ( fac . createOMAttribute ( "value" , nullNS , param . getPropertyName ( ) ) ) ; } if ( param . getXpath ( ) != null ) { SynapseXPathSerializer . serializeXPath ( param . getXpath ( ) , paramElt , "expression" ) ; } switch ( param . getType ( ) ) { case Types . CHAR : { paramElt . addAttribute ( fac . createOMAttribute ( "type" , nullNS , "CHAR" ) ) ; break ; } case Types . VARCHAR : { paramElt . addAttribute ( fac . createOMAttribute ( "type" , nullNS , "VARCHAR" ) ) ; break ; } case Types . LONGVARCHAR : { paramElt . addAttribute ( fac . createOMAttribute ( "type" , nullNS , "LONGVARCHAR" ) ) ; break ; } case Types . NUMERIC : { paramElt . addAttribute ( fac . createOMAttribute ( "type" , nullNS , "NUMERIC" ) ) ; break ; } case Types . DECIMAL : { paramElt . addAttribute ( fac . createOMAttribute ( "type" , nullNS , "DECIMAL" ) ) ; break ; } case Types . BIT : { paramElt . addAttribute ( fac . createOMAttribute ( "type" , nullNS , "BIT" ) ) ; break ; } case Types . TINYINT : { paramElt . addAttribute ( fac . createOMAttribute ( "type" , nullNS , "TINYINT" ) ) ; break ; } case Types . SMALLINT : { paramElt . addAttribute ( fac . createOMAttribute ( "type" , nullNS , "SMALLINT" ) ) ; break ; } case Types . INTEGER : { paramElt . addAttribute ( fac . createOMAttribute ( "type" , nullNS , "INTEGER" ) ) ; break ; } case Types . BIGINT : { paramElt . addAttribute ( fac . createOMAttribute ( "type" , nullNS , "BIGINT" ) ) ; break ; } case Types . REAL : { paramElt . addAttribute ( fac . createOMAttribute ( "type" , nullNS , "REAL" ) ) ; break ; } case Types . FLOAT : { paramElt . addAttribute ( fac . createOMAttribute ( "type" , nullNS , "FLOAT" ) ) ; break ; } case Types . DOUBLE : { paramElt . addAttribute ( fac . createOMAttribute ( "type" , nullNS , "DOUBLE" ) ) ; break ; } case Types . DATE : { paramElt . addAttribute ( fac . createOMAttribute ( "type" , nullNS , "DATE" ) ) ; break ; } case Types . TIME : { paramElt . addAttribute ( fac . createOMAttribute ( "type" , nullNS , "TIME" ) ) ; break ; } case Types . TIMESTAMP : { paramElt . addAttribute ( fac . createOMAttribute ( "type" , nullNS , "TIMESTAMP" ) ) ; break ; } default : { throw new SynapseException ( "Unknown or unsupported JDBC type : " + param . getType ( ) ) ; } } stmntElt . addChild ( paramElt ) ; } for ( Iterator it = statement . getResultsMap ( ) . keySet ( ) . iterator ( ) ; it . hasNext ( ) ; ) { String name = ( String ) it . next ( ) ; String columnStr = ( String ) statement . getResultsMap ( ) . get ( name ) ; OMElement resultElt = fac . createOMElement ( AbstractDBMediatorFactory . RESULT_Q . getLocalPart ( ) , synNS ) ; resultElt . addAttribute ( fac . createOMAttribute ( "name" , nullNS , name ) ) ; resultElt . addAttribute ( fac . createOMAttribute ( "column" , nullNS , columnStr ) ) ; stmntElt . addChild ( resultElt ) ; } dbParent . addChild ( stmntElt ) ; } } } 	0	['2', '2', '2', '16', '30', '1', '2', '14', '1', '2', '373', '0', '0', '0.857142857', '0.666666667', '0', '0', '185.5', '25', '12.5', '0']
package org . apache . synapse . endpoints ; import org . apache . axis2 . clustering . ClusterManager ; import org . apache . axis2 . context . ConfigurationContext ; import org . apache . axis2 . context . OperationContext ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import org . apache . synapse . FaultHandler ; import org . apache . synapse . MessageContext ; import org . apache . synapse . SynapseConstants ; import org . apache . synapse . core . axis2 . Axis2MessageContext ; import org . apache . synapse . endpoints . algorithms . AlgorithmContext ; import org . apache . synapse . endpoints . algorithms . LoadbalanceAlgorithm ; import org . apache . synapse . endpoints . dispatch . Dispatcher ; import org . apache . synapse . endpoints . dispatch . DispatcherContext ; import java . util . ArrayList ; import java . util . List ; public class SALoadbalanceEndpoint implements Endpoint { private static final Log log = LogFactory . getLog ( SALoadbalanceEndpoint . class ) ; private static final String FIRST_MESSAGE_IN_SESSION = "first_message_in_session" ; public static final String ENDPOINT_LIST = "endpointList" ; public static final String ROOT_ENDPOINT = "rootendpoint" ; public static final String ENDPOINT_NAME_LIST = "endpointNameList" ; public static final String WARN_MESSAGE = "In a clustering environment, the endpoint " + "name should be specified even for anonymous endpoints. Otherwise the clustering " + "would not function properly, if there are more than one anonymous endpoints." ; private String name = null ; private List < Endpoint > endpoints = null ; private LoadbalanceAlgorithm algorithm = null ; private Endpoint parentEndpoint = null ; private Dispatcher dispatcher = null ; private final DispatcherContext dispatcherContext = new DispatcherContext ( ) ; private final EndpointContext endpointContext = new EndpointContext ( ) ; private final AlgorithmContext algorithmContext = new AlgorithmContext ( ) ; public void send ( MessageContext synMessageContext ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Start : Session Affinity Load-balance Endpoint " + name ) ; } boolean isClusteringEnable = false ; org . apache . axis2 . context . MessageContext axisMC = ( ( Axis2MessageContext ) synMessageContext ) . getAxis2MessageContext ( ) ; ConfigurationContext cc = axisMC . getConfigurationContext ( ) ; ClusterManager clusterManager = cc . getAxisConfiguration ( ) . getClusterManager ( ) ; if ( clusterManager != null && clusterManager . getContextManager ( ) != null ) { isClusteringEnable = true ; } String endpointName = this . getName ( ) ; if ( endpointName == null ) { if ( isClusteringEnable ) { log . warn ( WARN_MESSAGE ) ; } if ( log . isDebugEnabled ( ) ) { log . debug ( "Using the name for the anonymous endpoint as : '" + SynapseConstants . ANONYMOUS_ENDPOINT + "'" ) ; } endpointName = SynapseConstants . ANONYMOUS_ENDPOINT ; } if ( isClusteringEnable ) { if ( endpointContext . getConfigurationContext ( ) == null ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Setting the ConfigurationContext to " + "the EndpointContext with the name " + endpointName + " for replicating data on the cluster" ) ; } endpointContext . setConfigurationContext ( cc ) ; endpointContext . setContextID ( endpointName ) ; } if ( algorithmContext . getConfigurationContext ( ) == null ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Setting the ConfigurationContext to " + "the AlgorithmContext with the name " + endpointName + " for replicating data on the cluster" ) ; } algorithmContext . setConfigurationContext ( cc ) ; algorithmContext . setContextID ( endpointName ) ; } if ( dispatcherContext . getConfigurationContext ( ) == null ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Setting the ConfigurationContext to " + "the DispatcherContext with the name " + endpointName + " for replicating data on the cluster" ) ; } dispatcherContext . setConfigurationContext ( cc ) ; dispatcherContext . setContextID ( endpointName ) ; if ( log . isDebugEnabled ( ) ) { log . debug ( "Setting the endpoints to the DispatcherContext : " + endpoints ) ; } dispatcherContext . setEndpoints ( endpoints ) ; } } Endpoint endpoint = dispatcher . getEndpoint ( synMessageContext , dispatcherContext ) ; if ( endpoint == null ) { endpoint = algorithm . getNextEndpoint ( synMessageContext , algorithmContext ) ; if ( dispatcher . isServerInitiatedSession ( ) ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Adding a new server initiated session for the current message" ) ; } Axis2MessageContext axis2MsgCtx = ( Axis2MessageContext ) synMessageContext ; OperationContext opCtx = axis2MsgCtx . getAxis2MessageContext ( ) . getOperationContext ( ) ; if ( isClusteringEnable ) { Object o = opCtx . getPropertyNonReplicable ( ENDPOINT_NAME_LIST ) ; List < String > epNameList ; if ( o instanceof List ) { epNameList = ( List < String > ) o ; epNameList . add ( endpointName ) ; } else { epNameList = new ArrayList < String > ( ) ; epNameList . add ( endpointName ) ; opCtx . setNonReplicableProperty ( ROOT_ENDPOINT , this ) ; } if ( ! ( endpoint instanceof SALoadbalanceEndpoint ) ) { String name ; if ( endpoint instanceof IndirectEndpoint ) { name = ( ( IndirectEndpoint ) endpoint ) . getKey ( ) ; } else { name = endpoint . getName ( ) ; } if ( name == null ) { log . warn ( WARN_MESSAGE ) ; name = SynapseConstants . ANONYMOUS_ENDPOINT ; } epNameList . add ( name ) ; } if ( log . isDebugEnabled ( ) ) { log . debug ( "Operating on a cluster. Setting the endpoint name list to " + "the OperationContext : " + epNameList ) ; } opCtx . setProperty ( ENDPOINT_NAME_LIST , epNameList ) ; } else { Object o = opCtx . getProperty ( ENDPOINT_LIST ) ; List < Endpoint > endpointList ; if ( o instanceof List ) { endpointList = ( List < Endpoint > ) o ; endpointList . add ( this ) ; } else { endpointList = new ArrayList < Endpoint > ( ) ; endpointList . add ( this ) ; opCtx . setProperty ( ENDPOINT_LIST , endpointList ) ; } if ( ! ( endpoint instanceof SALoadbalanceEndpoint ) ) { endpointList . add ( endpoint ) ; } } } else { dispatcher . updateSession ( synMessageContext , dispatcherContext , endpoint ) ; } synMessageContext . getEnvelope ( ) . build ( ) ; synMessageContext . setProperty ( FIRST_MESSAGE_IN_SESSION , Boolean . TRUE ) ; } if ( endpoint != null ) { if ( endpoint . isActive ( synMessageContext ) ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Using the endpoint on the session with " + ( ( endpoint instanceof IndirectEndpoint ) ? "key : " + ( ( IndirectEndpoint ) endpoint ) . getKey ( ) : "name : " + endpoint . getName ( ) ) + " for sending the message" ) ; } endpoint . send ( synMessageContext ) ; } else { informFailure ( synMessageContext ) ; } } else { if ( log . isDebugEnabled ( ) ) { log . debug ( "Marking the Endpoint as failed, " + "because all child endpoints has been failed" ) ; } setActive ( false , synMessageContext ) ; informFailure ( synMessageContext ) ; } } public void updateSession ( MessageContext responseMsgCtx , List endpointList , boolean isClusteringEnable ) { Endpoint endpoint = null ; if ( isClusteringEnable ) { String epNameObj = ( String ) endpointList . remove ( 0 ) ; for ( Endpoint ep : endpoints ) { if ( ep != null ) { String name ; if ( ep instanceof IndirectEndpoint ) { name = ( ( IndirectEndpoint ) ep ) . getKey ( ) ; } else { name = ep . getName ( ) ; } if ( name != null && name . equals ( epNameObj ) ) { endpoint = ep ; break ; } } } } else { endpoint = ( Endpoint ) endpointList . remove ( 0 ) ; } if ( endpoint != null ) { dispatcher . updateSession ( responseMsgCtx , dispatcherContext , endpoint ) ; if ( endpoint instanceof SALoadbalanceEndpoint ) { ( ( SALoadbalanceEndpoint ) endpoint ) . updateSession ( responseMsgCtx , endpointList , isClusteringEnable ) ; } } } public String getName ( ) { return name ; } public void setName ( String name ) { this . name = name . trim ( ) ; } public LoadbalanceAlgorithm getAlgorithm ( ) { return algorithm ; } public void setAlgorithm ( LoadbalanceAlgorithm algorithm ) { this . algorithm = algorithm ; } public boolean isActive ( MessageContext synMessageContext ) { boolean active ; Endpoint endpoint = dispatcher . getEndpoint ( synMessageContext , dispatcherContext ) ; if ( endpoint == null ) { active = endpointContext . isActive ( ) ; if ( ! active && endpoints != null ) { for ( Endpoint ep : endpoints ) { if ( ep != null ) { active = ep . isActive ( synMessageContext ) ; if ( active ) { endpointContext . setActive ( active ) ; } } } } } else { active = endpoint . isActive ( synMessageContext ) ; if ( active ) { endpointContext . setActive ( active ) ; } } if ( log . isDebugEnabled ( ) ) { log . debug ( "SALoadbalanceEndpoint with name '" + getName ( ) + "' is in " + ( active ? "active" : "inactive" ) + " state" ) ; } return active ; } public void setActive ( boolean active , MessageContext synMessageContext ) { endpointContext . setActive ( active ) ; } public List < Endpoint > getEndpoints ( ) { return endpoints ; } public void setEndpoints ( List < Endpoint > endpoints ) { this . endpoints = endpoints ; } public void setParentEndpoint ( Endpoint parentEndpoint ) { this . parentEndpoint = parentEndpoint ; } public Dispatcher getDispatcher ( ) { return dispatcher ; } public void setDispatcher ( Dispatcher dispatcher ) { this . dispatcher = dispatcher ; } public void onChildEndpointFail ( Endpoint endpoint , MessageContext synMessageContext ) { Object o = synMessageContext . getProperty ( FIRST_MESSAGE_IN_SESSION ) ; if ( o != null && Boolean . TRUE . equals ( o ) ) { dispatcher . unbind ( synMessageContext , dispatcherContext ) ; send ( synMessageContext ) ; } else { informFailure ( synMessageContext ) ; } } private void informFailure ( MessageContext synMessageContext ) { log . warn ( "Failed to send using the selected endpoint, becasue it is inactive" ) ; if ( parentEndpoint != null ) { parentEndpoint . onChildEndpointFail ( this , synMessageContext ) ; } else { Object o = synMessageContext . getFaultStack ( ) . pop ( ) ; if ( o != null ) { ( ( FaultHandler ) o ) . handleFault ( synMessageContext ) ; } } } } 	0	['17', '1', '0', '23', '77', '34', '4', '19', '15', '0.848214286', '673', '0.714285714', '6', '0', '0.2421875', '0', '0', '37.76470588', '30', '3.4118', '0']
package org . apache . synapse . config . xml ; import org . apache . axiom . om . OMElement ; import org . apache . synapse . Mediator ; import org . apache . synapse . mediators . transform . HeaderMediator ; import javax . xml . namespace . QName ; public class HeaderMediatorSerializer extends AbstractMediatorSerializer { public OMElement serializeMediator ( OMElement parent , Mediator m ) { if ( ! ( m instanceof HeaderMediator ) ) { handleException ( "Unsupported mediator passed in for serialization : " + m . getType ( ) ) ; } HeaderMediator mediator = ( HeaderMediator ) m ; OMElement header = fac . createOMElement ( "header" , synNS ) ; saveTracingState ( header , mediator ) ; QName qName = mediator . getQName ( ) ; if ( qName != null ) { if ( qName . getNamespaceURI ( ) != null ) { header . addAttribute ( fac . createOMAttribute ( "name" , nullNS , ( qName . getPrefix ( ) != null && ! "" . equals ( qName . getPrefix ( ) ) ? qName . getPrefix ( ) + ":" : "" ) + qName . getLocalPart ( ) ) ) ; header . declareNamespace ( qName . getNamespaceURI ( ) , qName . getPrefix ( ) ) ; } else { header . addAttribute ( fac . createOMAttribute ( "name" , nullNS , qName . getLocalPart ( ) ) ) ; } } if ( mediator . getAction ( ) == HeaderMediator . ACTION_REMOVE ) { header . addAttribute ( fac . createOMAttribute ( "action" , nullNS , "remove" ) ) ; } else { if ( mediator . getValue ( ) != null ) { header . addAttribute ( fac . createOMAttribute ( "value" , nullNS , mediator . getValue ( ) ) ) ; } else if ( mediator . getExpression ( ) != null ) { SynapseXPathSerializer . serializeXPath ( mediator . getExpression ( ) , header , "expression" ) ; } else { handleException ( "Value or expression required for a set header mediator" ) ; } } if ( parent != null ) { parent . addChild ( header ) ; } return header ; } public String getMediatorClassName ( ) { return HeaderMediator . class . getName ( ) ; } } 	0	['3', '2', '0', '10', '25', '3', '0', '10', '3', '2', '139', '0', '0', '0.75', '0.555555556', '0', '0', '45.33333333', '10', '3.6667', '0']
package org . apache . synapse . core ; import org . apache . synapse . MessageContext ; import org . apache . synapse . endpoints . utils . EndpointDefinition ; import org . apache . synapse . mediators . base . SequenceMediator ; import org . apache . synapse . statistics . StatisticsCollector ; import org . apache . synapse . util . TemporaryData ; import java . util . concurrent . ExecutorService ; public interface SynapseEnvironment { public boolean injectMessage ( MessageContext smc ) ; public void injectAsync ( MessageContext smc , SequenceMediator seq ) ; public void send ( EndpointDefinition endpoint , MessageContext smc ) ; public MessageContext createMessageContext ( ) ; public TemporaryData createTemporaryData ( ) ; public StatisticsCollector getStatisticsCollector ( ) ; public void setStatisticsCollector ( StatisticsCollector statisticsCollector ) ; public ExecutorService getExecutorService ( ) ; public boolean isInitialized ( ) ; public void setInitialized ( boolean state ) ; } 	0	['10', '1', '0', '33', '10', '45', '30', '5', '10', '2', '10', '0', '0', '0', '0.283333333', '0', '0', '0', '1', '1', '0']
package org . apache . synapse . registry . url ; import org . apache . axiom . om . OMNode ; import org . apache . axiom . om . OMException ; import org . apache . axiom . om . impl . builder . StAXOMBuilder ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import org . apache . synapse . SynapseException ; import org . apache . synapse . config . SynapseConfigUtils ; import org . apache . synapse . registry . AbstractRegistry ; import org . apache . synapse . registry . Registry ; import org . apache . synapse . registry . RegistryEntry ; import org . apache . synapse . registry . RegistryEntryImpl ; import javax . xml . stream . XMLInputFactory ; import javax . xml . stream . XMLStreamException ; import javax . xml . stream . XMLStreamReader ; import java . io . * ; import java . net . * ; import java . util . ArrayList ; import java . util . Properties ; public class SimpleURLRegistry extends AbstractRegistry implements Registry { private static final Log log = LogFactory . getLog ( SimpleURLRegistry . class ) ; private static final int MAX_KEYS = 200 ; private String root = "" ; public OMNode lookup ( String key ) { log . debug ( "==> Repository fetch of resource with key : " + key ) ; URL url = SynapseConfigUtils . getURLFromPath ( root + key ) ; if ( url == null ) { return null ; } BufferedInputStream inputStream ; try { URLConnection connection = url . openConnection ( ) ; connection . connect ( ) ; inputStream = new BufferedInputStream ( connection . getInputStream ( ) ) ; } catch ( IOException e ) { return null ; } OMNode result = null ; if ( inputStream != null ) { try { XMLStreamReader parser = XMLInputFactory . newInstance ( ) . createXMLStreamReader ( inputStream ) ; StAXOMBuilder builder = new StAXOMBuilder ( parser ) ; result = builder . getDocumentElement ( ) ; } catch ( OMException ignored ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "The resource at the provided URL isn't " + "well-formed XML,So,takes it as a text" ) ; } try { inputStream . close ( ) ; } catch ( IOException e ) { log . error ( "Error in closing the input stream. " , e ) ; } result = SynapseConfigUtils . readNonXML ( url ) ; } catch ( XMLStreamException ignored ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "The resource at the provided URL isn't " + "well-formed XML,So,takes it as a text" ) ; } try { inputStream . close ( ) ; } catch ( IOException e ) { log . error ( "Error in closing the input stream. " , e ) ; } result = SynapseConfigUtils . readNonXML ( url ) ; } finally { try { inputStream . close ( ) ; } catch ( IOException e ) { log . error ( "Error in closing the input stream." , e ) ; } } } return result ; } public RegistryEntry getRegistryEntry ( String key ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Perform RegistryEntry lookup for key : " + key ) ; } try { URL url = SynapseConfigUtils . getURLFromPath ( root + key ) ; if ( url == null ) { return null ; } URLConnection urlc = url . openConnection ( ) ; urlc . setReadTimeout ( 30000 ) ; urlc . setRequestProperty ( "Connection" , "Close" ) ; RegistryEntryImpl wre = new RegistryEntryImpl ( ) ; wre . setKey ( key ) ; wre . setName ( url . getFile ( ) ) ; wre . setType ( new URI ( urlc . getContentType ( ) ) ) ; wre . setDescription ( "Resource at : " + url . toString ( ) ) ; wre . setLastModified ( urlc . getLastModified ( ) ) ; wre . setVersion ( urlc . getLastModified ( ) ) ; if ( urlc . getExpiration ( ) > 0 ) { wre . setCachableDuration ( urlc . getExpiration ( ) - System . currentTimeMillis ( ) ) ; } else { wre . setCachableDuration ( getCachableDuration ( key ) ) ; } return wre ; } catch ( MalformedURLException e ) { handleException ( "Invalid URL reference " + root + key , e ) ; } catch ( IOException e ) { handleException ( "IO Error reading from URL " + root + key , e ) ; } catch ( URISyntaxException e ) { handleException ( "URI Syntax error reading from URL " + root + key , e ) ; } return null ; } public void init ( Properties properties ) { super . init ( properties ) ; String value = properties . getProperty ( "root" ) ; if ( value != null ) { try { URL url = new URL ( value ) ; if ( url . getProtocol ( ) . equals ( "file" ) ) { if ( ! value . endsWith ( "/" ) ) { value = value + "/" ; } } } catch ( MalformedURLException e ) { } root = value ; } else { handleException ( "" ) ; } } public void delete ( String path ) { } public void newResource ( String path , boolean isDirectory ) { } public void updateResource ( String path , Object value ) { } public void updateRegistryEntry ( RegistryEntry entry ) { } public long getCachableDuration ( String rootPath ) { String cachableDuration = ( String ) properties . get ( "cachableDuration" ) ; return cachableDuration == null ? 1500 : Long . parseLong ( cachableDuration ) ; } public RegistryEntry [ ] getChildren ( RegistryEntry entry ) { URL url ; if ( entry == null ) { RegistryEntryImpl entryImpl = new RegistryEntryImpl ( ) ; entryImpl . setKey ( "" ) ; entry = entryImpl ; } url = SynapseConfigUtils . getURLFromPath ( root + entry . getKey ( ) ) ; if ( url == null ) { return null ; } if ( url . getProtocol ( ) . equals ( "file" ) ) { File file = new File ( url . getFile ( ) ) ; if ( ! file . isDirectory ( ) ) { return null ; } InputStream inStream = null ; try { inStream = ( InputStream ) url . getContent ( ) ; BufferedReader reader = new BufferedReader ( new InputStreamReader ( inStream ) ) ; ArrayList entryList = new ArrayList ( ) ; String key = "" ; while ( ( key = reader . readLine ( ) ) != null ) { RegistryEntryImpl registryEntryImpl = new RegistryEntryImpl ( ) ; if ( entry . getKey ( ) . equals ( "" ) ) { registryEntryImpl . setKey ( key ) ; } else { if ( entry . getKey ( ) . endsWith ( "/" ) ) { registryEntryImpl . setKey ( entry . getKey ( ) + key ) ; } else { registryEntryImpl . setKey ( entry . getKey ( ) + "/" + key ) ; } } entryList . add ( registryEntryImpl ) ; } RegistryEntry [ ] entries = new RegistryEntry [ entryList . size ( ) ] ; for ( int i = 0 ; i < entryList . size ( ) ; i ++ ) { entries [ i ] = ( RegistryEntry ) entryList . get ( i ) ; } return entries ; } catch ( Exception e ) { throw new SynapseException ( "Error in reading the URL." ) ; } } else { throw new SynapseException ( "Invalid protocol." ) ; } } public RegistryEntry [ ] getDescendants ( RegistryEntry entry ) { ArrayList list = new ArrayList ( ) ; RegistryEntry [ ] entries = getChildren ( entry ) ; if ( entries != null ) { for ( int i = 0 ; i < entries . length ; i ++ ) { if ( list . size ( ) > MAX_KEYS ) { break ; } fillDescendants ( entries [ i ] , list ) ; } } RegistryEntry [ ] descendants = new RegistryEntry [ list . size ( ) ] ; for ( int i = 0 ; i < list . size ( ) ; i ++ ) { descendants [ i ] = ( RegistryEntry ) list . get ( i ) ; } return descendants ; } private void fillDescendants ( RegistryEntry parent , ArrayList list ) { RegistryEntry [ ] entries = getChildren ( parent ) ; if ( entries != null ) { for ( int i = 0 ; i < entries . length ; i ++ ) { if ( list . size ( ) > MAX_KEYS ) { break ; } fillDescendants ( entries [ i ] , list ) ; } } else { list . add ( parent ) ; } } private void handleException ( String msg , Exception e ) { log . error ( msg , e ) ; throw new SynapseException ( msg , e ) ; } private void handleException ( String msg ) { log . error ( msg ) ; throw new SynapseException ( msg ) ; } } 	0	['15', '2', '0', '12', '73', '67', '0', '12', '11', '0.761904762', '609', '1', '0', '0.277777778', '0.276785714', '2', '3', '39.4', '9', '2.4', '0']
package org . apache . synapse . config . xml ; import org . apache . axiom . om . OMElement ; import org . apache . axiom . om . OMNode ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import org . apache . synapse . Mediator ; import org . apache . synapse . mediators . ext . ClassMediator ; import javax . xml . namespace . QName ; import java . util . Iterator ; public class ClassMediatorSerializer extends AbstractMediatorSerializer { public OMElement serializeMediator ( OMElement parent , Mediator m ) { if ( ! ( m instanceof ClassMediator ) ) { handleException ( "Unsupported mediator passed in for serialization : " + m . getType ( ) ) ; } ClassMediator mediator = ( ClassMediator ) m ; OMElement clazz = fac . createOMElement ( "class" , synNS ) ; saveTracingState ( clazz , mediator ) ; if ( mediator . getMediator ( ) != null && mediator . getMediator ( ) . getClass ( ) . getName ( ) != null ) { clazz . addAttribute ( fac . createOMAttribute ( "name" , nullNS , mediator . getMediator ( ) . getClass ( ) . getName ( ) ) ) ; } else { handleException ( "Invalid class mediator. The class name is required" ) ; } Iterator itr = mediator . getProperties ( ) . keySet ( ) . iterator ( ) ; while ( itr . hasNext ( ) ) { String propName = ( String ) itr . next ( ) ; Object o = mediator . getProperties ( ) . get ( propName ) ; OMElement prop = fac . createOMElement ( PROP_Q ) ; prop . addAttribute ( fac . createOMAttribute ( "name" , nullNS , propName ) ) ; if ( o instanceof String ) { prop . addAttribute ( fac . createOMAttribute ( "value" , nullNS , ( String ) o ) ) ; } else { prop . addChild ( ( OMNode ) o ) ; } clazz . addChild ( prop ) ; } if ( parent != null ) { parent . addChild ( clazz ) ; } return clazz ; } public String getMediatorClassName ( ) { return ClassMediator . class . getName ( ) ; } } 	0	['3', '2', '0', '8', '24', '3', '0', '8', '3', '2', '114', '0', '0', '0.75', '0.555555556', '0', '0', '37', '7', '2.6667', '0']
package org . apache . synapse . config . xml ; import org . apache . axiom . om . OMElement ; import org . apache . synapse . Mediator ; import org . apache . synapse . mediators . builtin . CalloutMediator ; public class CalloutMediatorSerializer extends AbstractMediatorSerializer { public OMElement serializeMediator ( OMElement parent , Mediator m ) { if ( ! ( m instanceof CalloutMediator ) ) { handleException ( "Unsupported mediator passed in for serialization : " + m . getType ( ) ) ; } CalloutMediator mediator = ( CalloutMediator ) m ; OMElement callout = fac . createOMElement ( "callout" , synNS ) ; saveTracingState ( callout , mediator ) ; callout . addAttribute ( fac . createOMAttribute ( "serviceURL" , nullNS , mediator . getServiceURL ( ) ) ) ; if ( mediator . getAction ( ) != null ) { callout . addAttribute ( fac . createOMAttribute ( "action" , nullNS , mediator . getAction ( ) ) ) ; } if ( mediator . getClientRepository ( ) != null || mediator . getAxis2xml ( ) != null ) { OMElement config = fac . createOMElement ( "configuration" , synNS ) ; if ( mediator . getClientRepository ( ) != null ) { config . addAttribute ( fac . createOMAttribute ( "repository" , nullNS , mediator . getClientRepository ( ) ) ) ; } if ( mediator . getAxis2xml ( ) != null ) { config . addAttribute ( fac . createOMAttribute ( "axis2xml" , nullNS , mediator . getAxis2xml ( ) ) ) ; } callout . addChild ( config ) ; } OMElement source = fac . createOMElement ( "source" , synNS , callout ) ; if ( mediator . getRequestXPath ( ) != null ) { SynapseXPathSerializer . serializeXPath ( mediator . getRequestXPath ( ) , source , "xpath" ) ; } else if ( mediator . getRequestKey ( ) != null ) { source . addAttribute ( fac . createOMAttribute ( "key" , nullNS , mediator . getRequestKey ( ) ) ) ; } OMElement target = fac . createOMElement ( "target" , synNS , callout ) ; if ( mediator . getTargetXPath ( ) != null ) { SynapseXPathSerializer . serializeXPath ( mediator . getTargetXPath ( ) , target , "xpath" ) ; } else if ( mediator . getTargetKey ( ) != null ) { target . addAttribute ( fac . createOMAttribute ( "key" , nullNS , mediator . getTargetKey ( ) ) ) ; } if ( parent != null ) { parent . addChild ( callout ) ; } return callout ; } public String getMediatorClassName ( ) { return CalloutMediator . class . getName ( ) ; } } 	0	['3', '2', '0', '11', '25', '3', '0', '11', '3', '2', '156', '0', '0', '0.75', '0.555555556', '0', '0', '51', '12', '4.3333', '0']
package org . apache . synapse . config . xml ; import org . apache . axiom . om . OMElement ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import org . apache . synapse . Mediator ; import org . apache . synapse . mediators . filters . OutMediator ; public class OutMediatorSerializer extends AbstractListMediatorSerializer { public OMElement serializeMediator ( OMElement parent , Mediator m ) { if ( ! ( m instanceof OutMediator ) ) { handleException ( "Unsupported mediator passed out for serialization : " + m . getType ( ) ) ; } OutMediator mediator = ( OutMediator ) m ; OMElement out = fac . createOMElement ( "out" , synNS ) ; saveTracingState ( out , mediator ) ; serializeChildren ( out , mediator . getList ( ) ) ; if ( parent != null ) { parent . addChild ( out ) ; } return out ; } public String getMediatorClassName ( ) { return OutMediator . class . getName ( ) ; } } 	0	['3', '3', '0', '7', '15', '3', '0', '7', '3', '2', '46', '0', '0', '0.777777778', '0.555555556', '0', '0', '14.33333333', '3', '1.3333', '0']
package org . apache . synapse . registry ; import org . apache . axiom . om . OMNode ; import org . apache . synapse . config . Entry ; import java . util . Map ; import java . util . Properties ; public interface Registry { public void init ( Properties properties ) ; public OMNode lookup ( String key ) ; public Object getResource ( Entry entry ) ; public RegistryEntry getRegistryEntry ( String key ) ; public RegistryEntry [ ] getChildren ( RegistryEntry entry ) ; public RegistryEntry [ ] getDescendants ( RegistryEntry entry ) ; public String getProviderClass ( ) ; public Properties getConfigurationProperties ( ) ; public void delete ( String path ) ; public void newResource ( String path , boolean isDirectory ) ; public void updateResource ( String path , Object value ) ; public void updateRegistryEntry ( RegistryEntry entry ) ; } 	0	['12', '1', '0', '10', '12', '66', '7', '3', '12', '2', '12', '0', '0', '0', '0.285714286', '0', '0', '0', '1', '1', '0']
package org . apache . synapse . core . axis2 ; import org . apache . axis2 . AxisFault ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import org . apache . synapse . * ; import org . apache . synapse . mediators . MediatorFaultHandler ; import org . apache . synapse . endpoints . Endpoint ; import org . apache . synapse . statistics . impl . ProxyServiceStatisticsStack ; public class ProxyServiceMessageReceiver extends SynapseMessageReceiver { private static final Log log = LogFactory . getLog ( ProxyServiceMessageReceiver . class ) ; private static final Log trace = LogFactory . getLog ( SynapseConstants . TRACE_LOGGER ) ; private String name = null ; private ProxyService proxy = null ; public void receive ( org . apache . axis2 . context . MessageContext mc ) throws AxisFault { boolean traceOn = proxy . getTraceState ( ) == SynapseConstants . TRACING_ON ; boolean traceOrDebugOn = traceOn || log . isDebugEnabled ( ) ; String remoteAddr = ( String ) mc . getProperty ( org . apache . axis2 . context . MessageContext . REMOTE_ADDR ) ; if ( traceOrDebugOn ) { traceOrDebug ( traceOn , "Proxy Service " + name + " received a new message" + ( remoteAddr != null ? " from : " + remoteAddr : "..." ) ) ; traceOrDebug ( traceOn , ( "Message To: " + ( mc . getTo ( ) != null ? mc . getTo ( ) . getAddress ( ) : "null" ) ) ) ; traceOrDebug ( traceOn , ( "SOAPAction: " + ( mc . getSoapAction ( ) != null ? mc . getSoapAction ( ) : "null" ) ) ) ; traceOrDebug ( traceOn , ( "WSA-Action: " + ( mc . getWSAAction ( ) != null ? mc . getWSAAction ( ) : "null" ) ) ) ; if ( traceOn && trace . isTraceEnabled ( ) ) { String [ ] cids = mc . getAttachmentMap ( ) . getAllContentIDs ( ) ; if ( cids != null && cids . length > 0 ) { for ( String cid : cids ) { trace . trace ( "With attachment content ID : " + cid ) ; } } trace . trace ( "Envelope : " + mc . getEnvelope ( ) ) ; } } MessageContext synCtx = MessageContextCreatorForAxis2 . getSynapseMessageContext ( mc ) ; Log serviceLog = LogFactory . getLog ( SynapseConstants . SERVICE_LOGGER_PREFIX + name ) ; ( ( Axis2MessageContext ) synCtx ) . setServiceLog ( serviceLog ) ; synCtx . setProperty ( SynapseConstants . PROXY_SERVICE , name ) ; synCtx . setTracingState ( proxy . getTraceState ( ) ) ; try { boolean statsOn = ( SynapseConstants . STATISTICS_ON == proxy . getStatisticsState ( ) ) ; if ( statsOn ) { ProxyServiceStatisticsStack proxyServiceStatisticsStack = new ProxyServiceStatisticsStack ( ) ; boolean isFault = synCtx . getEnvelope ( ) . getBody ( ) . hasFault ( ) ; proxyServiceStatisticsStack . put ( name , System . currentTimeMillis ( ) , ! synCtx . isResponse ( ) , statsOn , isFault ) ; synCtx . setProperty ( SynapseConstants . PROXY_STATS , proxyServiceStatisticsStack ) ; } Mediator mandatorySeq = synCtx . getConfiguration ( ) . getMandatorySequence ( ) ; if ( mandatorySeq != null ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Start mediating the message in the " + "pre-mediate state using the mandatory sequence" ) ; } if ( ! mandatorySeq . mediate ( synCtx ) ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Request message for the proxy service " + name + " dropped in " + "the pre-mediation state by the mandatory sequence : \n" + synCtx ) ; } return ; } } if ( proxy . getTargetFaultSequence ( ) != null ) { Mediator faultSequence = synCtx . getSequence ( proxy . getTargetFaultSequence ( ) ) ; if ( faultSequence != null ) { if ( traceOrDebugOn ) { traceOrDebug ( traceOn , "Setting the fault-sequence to : " + faultSequence ) ; } synCtx . pushFaultHandler ( new MediatorFaultHandler ( synCtx . getSequence ( proxy . getTargetFaultSequence ( ) ) ) ) ; } else { traceOrDebug ( traceOn , "Unable to find fault-sequence : " + proxy . getTargetFaultSequence ( ) + "; using default fault sequence" ) ; synCtx . pushFaultHandler ( new MediatorFaultHandler ( synCtx . getSequence ( SynapseConstants . FAULT_SEQUENCE_KEY ) ) ) ; } } else if ( proxy . getTargetInLineFaultSequence ( ) != null ) { if ( traceOrDebugOn ) { traceOrDebug ( traceOn , "Setting specified anonymous fault-sequence for proxy" ) ; } synCtx . pushFaultHandler ( new MediatorFaultHandler ( proxy . getTargetInLineFaultSequence ( ) ) ) ; } boolean inSequenceResult = true ; if ( proxy . getTargetInSequence ( ) != null ) { Mediator inSequence = synCtx . getSequence ( proxy . getTargetInSequence ( ) ) ; if ( inSequence != null ) { traceOrDebug ( traceOn , "Using sequence named : " + proxy . getTargetInSequence ( ) + " for incoming message mediation" ) ; inSequenceResult = inSequence . mediate ( synCtx ) ; } else { handleException ( "Unable to find in-sequence : " + proxy . getTargetInSequence ( ) , synCtx ) ; } } else if ( proxy . getTargetInLineInSequence ( ) != null ) { traceOrDebug ( traceOn , "Using the anonymous " + "in-sequence of the proxy service for mediation" ) ; inSequenceResult = proxy . getTargetInLineInSequence ( ) . mediate ( synCtx ) ; } if ( inSequenceResult ) { if ( proxy . getTargetEndpoint ( ) != null ) { Endpoint endpoint = synCtx . getEndpoint ( proxy . getTargetEndpoint ( ) ) ; if ( endpoint != null ) { traceOrDebug ( traceOn , "Forwarding message to the endpoint : " + proxy . getTargetEndpoint ( ) ) ; endpoint . send ( synCtx ) ; } else { handleException ( "Unable to find the endpoint specified : " + proxy . getTargetEndpoint ( ) , synCtx ) ; } } else if ( proxy . getTargetInLineEndpoint ( ) != null ) { traceOrDebug ( traceOn , "Forwarding the message to the anonymous " + "endpoint of the proxy service" ) ; proxy . getTargetInLineEndpoint ( ) . send ( synCtx ) ; } } } catch ( SynapseException syne ) { if ( ! synCtx . getFaultStack ( ) . isEmpty ( ) ) { warn ( traceOn , "Executing fault handler due to exception encountered" , synCtx ) ; ( ( FaultHandler ) synCtx . getFaultStack ( ) . pop ( ) ) . handleFault ( synCtx , syne ) ; } else { warn ( traceOn , "Exception encountered but no fault handler found - " + "message dropped" , synCtx ) ; } } } public void setName ( String name ) { this . name = name ; } public void setProxy ( ProxyService proxy ) { this . proxy = proxy ; } private void traceOrDebug ( boolean traceOn , String msg ) { if ( traceOn ) { trace . info ( msg ) ; } if ( log . isDebugEnabled ( ) ) { log . debug ( msg ) ; } } private void warn ( boolean traceOn , String msg , MessageContext msgContext ) { if ( traceOn ) { trace . warn ( msg ) ; } if ( log . isDebugEnabled ( ) ) { log . warn ( msg ) ; } if ( msgContext . getServiceLog ( ) != null ) { msgContext . getServiceLog ( ) . warn ( msg ) ; } } private void handleException ( String msg , MessageContext msgContext ) { log . error ( msg ) ; if ( msgContext . getServiceLog ( ) != null ) { msgContext . getServiceLog ( ) . error ( msg ) ; } if ( proxy . getTraceState ( ) == SynapseConstants . TRACING_ON ) { trace . error ( msg ) ; } throw new SynapseException ( msg ) ; } } 	0	['8', '2', '0', '21', '64', '0', '1', '21', '4', '0.535714286', '570', '1', '1', '0.333333333', '0.404761905', '1', '2', '69.75', '4', '1.625', '0']
package org . apache . synapse . config . xml ; import javax . xml . namespace . QName ; import org . apache . axiom . om . OMElement ; import org . apache . synapse . config . SynapseConfiguration ; public interface ConfigurationFactory { QName getTagQName ( ) ; SynapseConfiguration getConfiguration ( OMElement element ) ; Class getSerializerClass ( ) ; } 	0	['3', '1', '0', '4', '3', '3', '2', '2', '3', '2', '3', '0', '0', '0', '0.666666667', '0', '0', '0', '1', '1', '0']
package org . apache . synapse . config . xml ; import org . apache . axiom . om . OMElement ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import org . apache . synapse . config . SynapseConfiguration ; import javax . xml . stream . XMLStreamException ; import java . io . OutputStream ; public class XMLConfigurationSerializer { private static final Log log = LogFactory . getLog ( XMLConfigurationSerializer . class ) ; public static void serializeConfiguration ( SynapseConfiguration synCfg , OutputStream outputStream ) throws XMLStreamException { log . info ( "Serializing the XML Configuration to the output stream" ) ; OMElement definitions = ConfigurationFactoryAndSerializerFinder . serializeConfiguration ( synCfg ) ; definitions . serialize ( outputStream ) ; } } 	0	['3', '1', '0', '5', '8', '1', '0', '5', '2', '0.5', '21', '1', '0', '0', '0.5', '0', '0', '5.666666667', '1', '0.3333', '0']
package org . apache . synapse . config ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import org . apache . synapse . SynapseException ; import java . net . URL ; public class Entry { private static final Log log = LogFactory . getLog ( Entry . class ) ; private String key ; private int type ; private URL src ; private Object value ; private XMLToObjectMapper mapper ; private long version ; private long expiryTime ; public Entry ( ) { } public Entry ( String key ) { this . key = key ; } public int getType ( ) { return type ; } public boolean isRemote ( ) { return type == REMOTE_ENTRY ; } public boolean isURLSource ( ) { return type == URL_SRC ; } public boolean isInlineXML ( ) { return type == INLINE_XML ; } public boolean isInlineText ( ) { return type == INLINE_TEXT ; } public void setType ( int type ) { if ( type <= 4 && type >= 0 ) { this . type = type ; } else { handleException ( "Invalid entry type for the static entry" ) ; } } public URL getSrc ( ) { return src ; } public void setSrc ( URL src ) { this . src = src ; } public String getKey ( ) { return this . key ; } public void setKey ( String key ) { this . key = key ; } public Object getValue ( ) { return value ; } public void setValue ( Object value ) { this . value = value ; } public XMLToObjectMapper getMapper ( ) { return mapper ; } public void setMapper ( XMLToObjectMapper mapper ) { this . mapper = mapper ; } public long getVersion ( ) { return version ; } public void setVersion ( long version ) { this . version = version ; } public long getExpiryTime ( ) { return expiryTime ; } public void setExpiryTime ( long expiryTime ) { this . expiryTime = expiryTime ; } public boolean isExpired ( ) { if ( getType ( ) == REMOTE_ENTRY && getExpiryTime ( ) > 0 ) { return System . currentTimeMillis ( ) > expiryTime ; } else { return false ; } } public boolean isCached ( ) { return value != null ; } public void clearCache ( ) { if ( this . isDynamic ( ) ) { value = null ; expiryTime = System . currentTimeMillis ( ) ; } } public boolean isDynamic ( ) { return type == REMOTE_ENTRY ; } private void handleException ( String msg ) { log . error ( msg ) ; throw new SynapseException ( msg ) ; } public static final int INLINE_TEXT = 0 ; public static final int INLINE_XML = 1 ; public static final int URL_SRC = 2 ; public static final int REMOTE_ENTRY = 3 ; } 	0	['26', '1', '0', '17', '31', '245', '13', '4', '24', '0.943333333', '193', '0.666666667', '1', '0', '0.194285714', '0', '0', '5.961538462', '4', '1.3462', '0']
package org . apache . synapse . config . xml ; import org . apache . axiom . om . OMElement ; import org . apache . synapse . Mediator ; import org . apache . synapse . mediators . builtin . ValidateMediator ; import org . apache . synapse . mediators . MediatorProperty ; import java . util . List ; public class ValidateMediatorSerializer extends AbstractListMediatorSerializer implements MediatorSerializer { public OMElement serializeMediator ( OMElement parent , Mediator m ) { if ( ! ( m instanceof ValidateMediator ) ) { handleException ( "Unsupported mediator passed in for serialization : " + m . getType ( ) ) ; } ValidateMediator mediator = ( ValidateMediator ) m ; OMElement validate = fac . createOMElement ( "validate" , synNS ) ; saveTracingState ( validate , mediator ) ; if ( mediator . getSource ( ) != null ) { SynapseXPathSerializer . serializeXPath ( mediator . getSource ( ) , validate , "source" ) ; } for ( String key : mediator . getSchemaKeys ( ) ) { OMElement schema = fac . createOMElement ( "schema" , synNS , validate ) ; schema . addAttribute ( fac . createOMAttribute ( "key" , nullNS , key ) ) ; } List < MediatorProperty > features = mediator . getFeatures ( ) ; if ( ! features . isEmpty ( ) ) { for ( MediatorProperty mp : features ) { OMElement feature = fac . createOMElement ( "feature" , synNS , validate ) ; if ( mp . getName ( ) != null ) { feature . addAttribute ( fac . createOMAttribute ( "name" , nullNS , mp . getName ( ) ) ) ; } else { handleException ( "The Feature name is missing" ) ; } if ( mp . getValue ( ) != null ) { feature . addAttribute ( fac . createOMAttribute ( "value" , nullNS , mp . getValue ( ) ) ) ; } else { handleException ( "The Feature value is missing" ) ; } } } OMElement onFail = fac . createOMElement ( "on-fail" , synNS , validate ) ; serializeChildren ( onFail , mediator . getList ( ) ) ; if ( parent != null ) { parent . addChild ( validate ) ; } return validate ; } public String getMediatorClassName ( ) { return ValidateMediator . class . getName ( ) ; } } 	0	['3', '3', '0', '13', '28', '3', '0', '13', '3', '2', '142', '0', '0', '0.777777778', '0.555555556', '0', '0', '46.33333333', '9', '3.3333', '0']
package org . apache . synapse . util ; import java . util . Iterator ; import javax . activation . DataHandler ; import javax . xml . namespace . QName ; import javax . xml . stream . XMLStreamReader ; import org . apache . axiom . om . OMAbstractFactory ; import org . apache . axiom . om . OMElement ; import org . apache . axiom . om . OMFactory ; import org . apache . axiom . om . OMNode ; import org . apache . axiom . om . OMText ; import org . apache . axiom . om . impl . builder . StAXOMBuilder ; import org . apache . axiom . soap . SOAP11Version ; import org . apache . axiom . soap . SOAPBody ; import org . apache . axiom . soap . SOAPEnvelope ; import org . apache . axiom . soap . SOAPVersion ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import org . apache . synapse . MessageContext ; import org . apache . synapse . SynapseException ; import org . apache . synapse . util . SimpleMap ; public class PayloadHelper { public final static String AXIOMPAYLOADNS = "http://ws.apache.org/commons/ns/payload" ; public final static QName BINARYELT = new QName ( AXIOMPAYLOADNS , "binary" , "ax" ) ; public final static QName TEXTELT = new QName ( AXIOMPAYLOADNS , "text" , "ax" ) ; public final static QName MAPELT = new QName ( AXIOMPAYLOADNS , "map" , "ax" ) ; public final static int XMLPAYLOADTYPE = 0 , BINARYPAYLOADTYPE = 1 , TEXTPAYLOADTYPE = 2 , MAPPAYLOADTYPE = 3 ; public static final Log log = LogFactory . getLog ( PayloadHelper . class ) ; public static int getPayloadType ( SOAPEnvelope envelope ) { OMElement el = getXMLPayload ( envelope ) ; if ( el . getQName ( ) . equals ( BINARYELT ) ) return BINARYPAYLOADTYPE ; else if ( el . getQName ( ) . equals ( TEXTELT ) ) return TEXTPAYLOADTYPE ; else if ( el . getQName ( ) . equals ( MAPELT ) ) return MAPPAYLOADTYPE ; else return XMLPAYLOADTYPE ; } public static int getPayloadType ( MessageContext mc ) { if ( mc . getEnvelope ( ) == null ) return 0 ; return getPayloadType ( mc . getEnvelope ( ) ) ; } public static OMElement getXMLPayload ( SOAPEnvelope envelope ) { SOAPBody body = envelope . getBody ( ) ; if ( body == null ) { log . error ( "No body found" ) ; return null ; } OMElement bodyEl = body . getFirstElement ( ) ; if ( bodyEl == null ) { log . error ( "No body child found" ) ; return null ; } return bodyEl ; } public static void setXMLPayload ( SOAPEnvelope envelope , OMElement element ) { SOAPBody body = envelope . getBody ( ) ; if ( body == null ) { SOAPVersion version = envelope . getVersion ( ) ; if ( version . getEnvelopeURI ( ) . equals ( SOAP11Version . SOAP_ENVELOPE_NAMESPACE_URI ) ) { body = OMAbstractFactory . getSOAP11Factory ( ) . createSOAPBody ( ) ; } else { body = OMAbstractFactory . getSOAP12Factory ( ) . createSOAPBody ( ) ; } if ( envelope . getHeader ( ) != null ) { envelope . getHeader ( ) . insertSiblingAfter ( body ) ; } else { envelope . addChild ( body ) ; } } else { for ( Iterator it = body . getChildren ( ) ; it . hasNext ( ) ; ) { OMNode node = ( OMNode ) it . next ( ) ; node . discard ( ) ; } } body . addChild ( element ) ; } public static void setXMLPayload ( MessageContext mc , OMElement element ) { if ( mc . getEnvelope ( ) == null ) { try { mc . setEnvelope ( OMAbstractFactory . getSOAP12Factory ( ) . createSOAPEnvelope ( ) ) ; } catch ( Exception e ) { throw new SynapseException ( e ) ; } } setXMLPayload ( mc . getEnvelope ( ) , element ) ; } public static DataHandler getBinaryPayload ( SOAPEnvelope envelope ) { OMElement el = getXMLPayload ( envelope ) ; if ( el == null ) return null ; if ( ! el . getQName ( ) . equals ( BINARYELT ) ) { log . error ( "Wrong QName" + el . getQName ( ) ) ; return null ; } OMNode textNode = el . getFirstOMChild ( ) ; if ( textNode . getType ( ) != OMNode . TEXT_NODE ) { log . error ( "Text Node not found" ) ; return null ; } OMText text = ( OMText ) textNode ; DataHandler dh = null ; try { dh = ( DataHandler ) text . getDataHandler ( ) ; } catch ( ClassCastException ce ) { log . error ( "cannot get DataHandler" + ce . getMessage ( ) ) ; return null ; } return dh ; } public static DataHandler getBinaryPayload ( MessageContext mc ) { if ( mc . getEnvelope ( ) == null ) { log . error ( "null envelope" ) ; return null ; } return getBinaryPayload ( mc . getEnvelope ( ) ) ; } public static void setBinaryPayload ( SOAPEnvelope envelope , DataHandler dh ) { OMFactory fac = envelope . getOMFactory ( ) ; OMElement binaryElt = envelope . getOMFactory ( ) . createOMElement ( BINARYELT ) ; OMText text = fac . createOMText ( dh , true ) ; binaryElt . addChild ( text ) ; setXMLPayload ( envelope , binaryElt ) ; } public static void setBinaryPayload ( MessageContext mc , DataHandler dh ) { if ( mc . getEnvelope ( ) == null ) { try { mc . setEnvelope ( OMAbstractFactory . getSOAP12Factory ( ) . createSOAPEnvelope ( ) ) ; } catch ( Exception e ) { throw new SynapseException ( e ) ; } } setBinaryPayload ( mc . getEnvelope ( ) , dh ) ; } public static String getTextPayload ( SOAPEnvelope envelope ) { OMElement el = getXMLPayload ( envelope ) ; if ( el == null ) return null ; if ( ! el . getQName ( ) . equals ( TEXTELT ) ) { log . error ( "Wrong QName" + el . getQName ( ) ) ; return null ; } OMNode textNode = el . getFirstOMChild ( ) ; if ( textNode . getType ( ) != OMNode . TEXT_NODE ) { log . error ( "Text Node not found" ) ; return null ; } OMText text = ( OMText ) textNode ; return text . getText ( ) ; } public static String getTextPayload ( MessageContext mc ) { if ( mc . getEnvelope ( ) == null ) { log . error ( "null envelope" ) ; return null ; } return getTextPayload ( mc . getEnvelope ( ) ) ; } public static void setTextPayload ( SOAPEnvelope envelope , String text ) { OMFactory fac = envelope . getOMFactory ( ) ; OMElement textElt = envelope . getOMFactory ( ) . createOMElement ( TEXTELT ) ; OMText textNode = fac . createOMText ( text ) ; textElt . addChild ( textNode ) ; setXMLPayload ( envelope , textElt ) ; } public static void setTextPayload ( MessageContext mc , String text ) { if ( mc . getEnvelope ( ) == null ) { try { mc . setEnvelope ( OMAbstractFactory . getSOAP12Factory ( ) . createSOAPEnvelope ( ) ) ; } catch ( Exception e ) { throw new SynapseException ( e ) ; } } setTextPayload ( mc . getEnvelope ( ) , text ) ; } public static SimpleMap getMapPayload ( SOAPEnvelope envelope ) { OMElement el = getXMLPayload ( envelope ) ; if ( el == null ) return null ; if ( ! el . getQName ( ) . equals ( MAPELT ) ) { log . error ( "Wrong QName" + el . getQName ( ) ) ; return null ; } SimpleMap map = new SimpleMapImpl ( el ) ; return map ; } public static SimpleMap getMapPayload ( MessageContext mc ) { if ( mc . getEnvelope ( ) == null ) { log . error ( "null envelope" ) ; return null ; } return getMapPayload ( mc . getEnvelope ( ) ) ; } public static void setMapPayload ( SOAPEnvelope envelope , SimpleMap map ) { if ( map instanceof SimpleMapImpl ) { SimpleMapImpl impl = ( SimpleMapImpl ) map ; OMElement mapElt = impl . getOMElement ( envelope . getOMFactory ( ) ) ; if ( mapElt == null ) { log . debug ( "null map element returned" ) ; return ; } setXMLPayload ( envelope , mapElt ) ; } else { throw new SynapseException ( "cannot handle any other instance of SimpleMap at this point TODO" ) ; } } public static void setMapPayload ( MessageContext mc , SimpleMap map ) { if ( mc . getEnvelope ( ) == null ) { try { mc . setEnvelope ( OMAbstractFactory . getSOAP12Factory ( ) . createSOAPEnvelope ( ) ) ; } catch ( Exception e ) { throw new SynapseException ( e ) ; } } setMapPayload ( mc . getEnvelope ( ) , map ) ; } public static XMLStreamReader getStAXPayload ( SOAPEnvelope envelope ) { OMElement el = getXMLPayload ( envelope ) ; if ( el == null ) { return null ; } return el . getXMLStreamReader ( ) ; } public static XMLStreamReader getStAXPayload ( MessageContext mc ) { if ( mc . getEnvelope ( ) == null ) { log . error ( "null envelope" ) ; return null ; } return getStAXPayload ( mc . getEnvelope ( ) ) ; } public static void setStAXPayload ( SOAPEnvelope envelope , XMLStreamReader streamReader ) { StAXOMBuilder builder = new StAXOMBuilder ( envelope . getOMFactory ( ) , streamReader ) ; OMElement el = builder . getDocumentElement ( ) ; setXMLPayload ( envelope , el ) ; } public static void setStAXPayload ( MessageContext mc , XMLStreamReader streamReader ) { if ( mc . getEnvelope ( ) == null ) { try { mc . setEnvelope ( OMAbstractFactory . getSOAP12Factory ( ) . createSOAPEnvelope ( ) ) ; } catch ( Exception e ) { throw new SynapseException ( e ) ; } setStAXPayload ( mc . getEnvelope ( ) , streamReader ) ; } } } 	0	['23', '1', '0', '18', '70', '143', '2', '17', '22', '0.878787879', '537', '0', '0', '0', '0.181818182', '0', '0', '21.95652174', '5', '2.2174', '0']
package org . apache . synapse . config . xml ; import org . apache . axiom . om . OMAttribute ; import org . apache . axiom . om . OMElement ; import org . apache . axis2 . description . WSDL2Constants ; import org . apache . axis2 . wsdl . WSDLConstants ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import org . apache . synapse . SynapseException ; import org . apache . synapse . config . xml . endpoints . EndpointFactory ; import org . apache . synapse . core . axis2 . ProxyService ; import org . apache . synapse . util . PolicyInfo ; import javax . xml . namespace . QName ; import java . net . URI ; import java . net . URISyntaxException ; import java . util . ArrayList ; import java . util . Iterator ; import java . util . List ; import java . util . StringTokenizer ; public class ProxyServiceFactory { private static final Log log = LogFactory . getLog ( ProxyServiceFactory . class ) ; public static ProxyService createProxy ( OMElement elem ) { ProxyService proxy = null ; OMAttribute name = elem . getAttribute ( new QName ( XMLConfigConstants . NULL_NAMESPACE , "name" ) ) ; if ( name == null ) { handleException ( "The 'name' attribute is required for a Proxy service definition" ) ; } else { proxy = new ProxyService ( name . getAttributeValue ( ) ) ; } OMAttribute statistics = elem . getAttribute ( new QName ( XMLConfigConstants . NULL_NAMESPACE , XMLConfigConstants . STATISTICS_ATTRIB_NAME ) ) ; if ( statistics != null ) { String statisticsValue = statistics . getAttributeValue ( ) ; if ( statisticsValue != null ) { if ( XMLConfigConstants . STATISTICS_ENABLE . equals ( statisticsValue ) ) { proxy . setStatisticsState ( org . apache . synapse . SynapseConstants . STATISTICS_ON ) ; } else if ( XMLConfigConstants . STATISTICS_DISABLE . equals ( statisticsValue ) ) { proxy . setStatisticsState ( org . apache . synapse . SynapseConstants . STATISTICS_OFF ) ; } } } OMAttribute trans = elem . getAttribute ( new QName ( XMLConfigConstants . NULL_NAMESPACE , "transports" ) ) ; if ( trans != null ) { String transports = trans . getAttributeValue ( ) ; if ( transports == null || ProxyService . ALL_TRANSPORTS . equals ( transports ) ) { } else { StringTokenizer st = new StringTokenizer ( transports , " ," ) ; ArrayList transportList = new ArrayList ( ) ; while ( st . hasMoreTokens ( ) ) { String token = st . nextToken ( ) ; if ( token . length ( ) != 0 ) { transportList . add ( token ) ; } } proxy . setTransports ( transportList ) ; } } OMAttribute pinnedServers = elem . getAttribute ( new QName ( XMLConfigConstants . NULL_NAMESPACE , "pinnedServers" ) ) ; if ( pinnedServers != null ) { String pinnedServersValue = pinnedServers . getAttributeValue ( ) ; if ( pinnedServersValue == null ) { } else { StringTokenizer st = new StringTokenizer ( pinnedServersValue , " ," ) ; List pinnedServersList = new ArrayList ( ) ; while ( st . hasMoreTokens ( ) ) { String token = st . nextToken ( ) ; if ( token . length ( ) != 0 ) { pinnedServersList . add ( token ) ; } } proxy . setPinnedServers ( pinnedServersList ) ; } } OMAttribute trace = elem . getAttribute ( new QName ( XMLConfigConstants . NULL_NAMESPACE , XMLConfigConstants . TRACE_ATTRIB_NAME ) ) ; if ( trace != null ) { String traceValue = trace . getAttributeValue ( ) ; if ( traceValue != null ) { if ( traceValue . equals ( XMLConfigConstants . TRACE_ENABLE ) ) { proxy . setTraceState ( org . apache . synapse . SynapseConstants . TRACING_ON ) ; } else if ( traceValue . equals ( XMLConfigConstants . TRACE_DISABLE ) ) { proxy . setTraceState ( org . apache . synapse . SynapseConstants . TRACING_OFF ) ; } } } OMAttribute startOnLoad = elem . getAttribute ( new QName ( XMLConfigConstants . NULL_NAMESPACE , "startOnLoad" ) ) ; if ( startOnLoad != null ) { proxy . setStartOnLoad ( Boolean . valueOf ( startOnLoad . getAttributeValue ( ) ) . booleanValue ( ) ) ; } else { proxy . setStartOnLoad ( true ) ; } OMElement descriptionElement = elem . getFirstChildWithName ( new QName ( XMLConfigConstants . SYNAPSE_NAMESPACE , "description" ) ) ; if ( descriptionElement != null ) { proxy . setDescription ( descriptionElement . getText ( ) . trim ( ) ) ; } OMElement target = elem . getFirstChildWithName ( new QName ( XMLConfigConstants . SYNAPSE_NAMESPACE , "target" ) ) ; if ( target != null ) { boolean isTargetOk = false ; SequenceMediatorFactory mediatorFactory = new SequenceMediatorFactory ( ) ; OMAttribute inSequence = target . getAttribute ( new QName ( XMLConfigConstants . NULL_NAMESPACE , "inSequence" ) ) ; if ( inSequence != null ) { proxy . setTargetInSequence ( inSequence . getAttributeValue ( ) ) ; isTargetOk = true ; } else { OMElement inSequenceElement = target . getFirstChildWithName ( new QName ( XMLConfigConstants . SYNAPSE_NAMESPACE , "inSequence" ) ) ; if ( inSequenceElement != null ) { proxy . setTargetInLineInSequence ( mediatorFactory . createAnonymousSequence ( inSequenceElement ) ) ; isTargetOk = true ; } } OMAttribute outSequence = target . getAttribute ( new QName ( XMLConfigConstants . NULL_NAMESPACE , "outSequence" ) ) ; if ( outSequence != null ) { proxy . setTargetOutSequence ( outSequence . getAttributeValue ( ) ) ; } else { OMElement outSequenceElement = target . getFirstChildWithName ( new QName ( XMLConfigConstants . SYNAPSE_NAMESPACE , "outSequence" ) ) ; if ( outSequenceElement != null ) { proxy . setTargetInLineOutSequence ( mediatorFactory . createAnonymousSequence ( outSequenceElement ) ) ; } } OMAttribute faultSequence = target . getAttribute ( new QName ( XMLConfigConstants . NULL_NAMESPACE , "faultSequence" ) ) ; if ( faultSequence != null ) { proxy . setTargetFaultSequence ( faultSequence . getAttributeValue ( ) ) ; } else { OMElement faultSequenceElement = target . getFirstChildWithName ( new QName ( XMLConfigConstants . SYNAPSE_NAMESPACE , "faultSequence" ) ) ; if ( faultSequenceElement != null ) { proxy . setTargetInLineFaultSequence ( mediatorFactory . createAnonymousSequence ( faultSequenceElement ) ) ; } } OMAttribute tgtEndpt = target . getAttribute ( new QName ( XMLConfigConstants . NULL_NAMESPACE , "endpoint" ) ) ; if ( tgtEndpt != null ) { proxy . setTargetEndpoint ( tgtEndpt . getAttributeValue ( ) ) ; isTargetOk = true ; } else { OMElement endpointElement = target . getFirstChildWithName ( new QName ( XMLConfigConstants . SYNAPSE_NAMESPACE , "endpoint" ) ) ; if ( endpointElement != null ) { proxy . setTargetInLineEndpoint ( EndpointFactory . getEndpointFromElement ( endpointElement , true ) ) ; isTargetOk = true ; } } if ( ! isTargetOk ) { handleException ( "Target of the proxy service must declare " + "either an inSequence or endpoint or both" ) ; } } else { handleException ( "Target is required for a Proxy service definition" ) ; } OMElement wsdl = elem . getFirstChildWithName ( new QName ( XMLConfigConstants . SYNAPSE_NAMESPACE , "publishWSDL" ) ) ; if ( wsdl != null ) { OMAttribute wsdlkey = wsdl . getAttribute ( new QName ( XMLConfigConstants . NULL_NAMESPACE , "key" ) ) ; if ( wsdlkey != null ) { proxy . setWSDLKey ( wsdlkey . getAttributeValue ( ) ) ; } else { OMAttribute wsdlURI = wsdl . getAttribute ( new QName ( XMLConfigConstants . NULL_NAMESPACE , "uri" ) ) ; if ( wsdlURI != null ) { try { proxy . setWsdlURI ( new URI ( wsdlURI . getAttributeValue ( ) ) ) ; } catch ( URISyntaxException e ) { String msg = "Error creating uri for proxy service wsdl" ; log . error ( msg ) ; handleException ( msg , e ) ; } } else { OMElement wsdl11 = wsdl . getFirstChildWithName ( new QName ( WSDLConstants . WSDL1_1_NAMESPACE , "definitions" ) ) ; if ( wsdl11 != null ) { proxy . setInLineWSDL ( wsdl11 ) ; } else { OMElement wsdl20 = wsdl . getFirstChildWithName ( new QName ( WSDL2Constants . WSDL_NAMESPACE , "description" ) ) ; if ( wsdl20 != null ) { proxy . setInLineWSDL ( wsdl20 ) ; } } } } proxy . setResourceMap ( ResourceMapFactory . createResourceMap ( wsdl ) ) ; } Iterator policies = elem . getChildrenWithName ( new QName ( XMLConfigConstants . SYNAPSE_NAMESPACE , "policy" ) ) ; while ( policies . hasNext ( ) ) { Object o = policies . next ( ) ; if ( o instanceof OMElement ) { OMElement policy = ( OMElement ) o ; OMAttribute key = policy . getAttribute ( new QName ( XMLConfigConstants . NULL_NAMESPACE , "key" ) ) ; OMAttribute type = policy . getAttribute ( new QName ( XMLConfigConstants . NULL_NAMESPACE , "type" ) ) ; OMAttribute operationName = policy . getAttribute ( new QName ( XMLConfigConstants . NULL_NAMESPACE , "operationName" ) ) ; OMAttribute operationNS = policy . getAttribute ( new QName ( XMLConfigConstants . NULL_NAMESPACE , "operationNamespace" ) ) ; if ( key != null ) { PolicyInfo pi = new PolicyInfo ( key . getAttributeValue ( ) ) ; if ( type != null && type . getAttributeValue ( ) != null ) { if ( "in" . equals ( type . getAttributeValue ( ) ) ) { pi . setType ( PolicyInfo . MESSAGE_TYPE_IN ) ; } else if ( "out" . equals ( type . getAttributeValue ( ) ) ) { pi . setType ( PolicyInfo . MESSAGE_TYPE_OUT ) ; } else { handleException ( "Undefined policy type for the policy with key : " + key . getAttributeValue ( ) ) ; } } if ( operationName != null && operationName . getAttributeValue ( ) != null ) { if ( operationNS != null && operationNS . getAttributeValue ( ) != null ) { pi . setOperation ( new QName ( operationNS . getAttributeValue ( ) , operationName . getAttributeValue ( ) ) ) ; } else { pi . setOperation ( new QName ( operationName . getAttributeValue ( ) ) ) ; } } proxy . addPolicyInfo ( pi ) ; } else { handleException ( "Policy element does not specify the policy key" ) ; } } else { handleException ( "Invalid 'policy' element found under element 'policies'" ) ; } } Iterator props = elem . getChildrenWithName ( new QName ( XMLConfigConstants . SYNAPSE_NAMESPACE , "parameter" ) ) ; while ( props . hasNext ( ) ) { Object o = props . next ( ) ; if ( o instanceof OMElement ) { OMElement prop = ( OMElement ) o ; OMAttribute pname = prop . getAttribute ( new QName ( XMLConfigConstants . NULL_NAMESPACE , "name" ) ) ; OMElement propertyValue = prop . getFirstElement ( ) ; if ( pname != null ) { if ( propertyValue != null ) { proxy . addParameter ( pname . getAttributeValue ( ) , propertyValue ) ; } else { proxy . addParameter ( pname . getAttributeValue ( ) , prop . getText ( ) . trim ( ) ) ; } } else { handleException ( "Invalid property specified for proxy service : " + name ) ; } } else { handleException ( "Invalid property specified for proxy service : " + name ) ; } } if ( elem . getFirstChildWithName ( new QName ( XMLConfigConstants . SYNAPSE_NAMESPACE , "enableRM" ) ) != null ) { proxy . setWsRMEnabled ( true ) ; } if ( elem . getFirstChildWithName ( new QName ( XMLConfigConstants . SYNAPSE_NAMESPACE , "enableSec" ) ) != null ) { proxy . setWsSecEnabled ( true ) ; } return proxy ; } private static void handleException ( String msg ) { log . error ( msg ) ; throw new SynapseException ( msg ) ; } private static void handleException ( String msg , Exception e ) { log . error ( msg , e ) ; throw new SynapseException ( msg , e ) ; } } 	0	['5', '1', '0', '14', '67', '0', '1', '13', '2', '0.25', '695', '1', '0', '0', '0.3125', '0', '0', '137.8', '50', '10.4', '0']
package org . apache . synapse . endpoints . utils ; import org . apache . synapse . SynapseConstants ; public class EndpointDefinition { private String address = null ; private boolean reliableMessagingOn = false ; private boolean addressingOn = false ; private String addressingVersion = null ; private boolean securityOn = false ; private String wsRMPolicyKey = null ; private String wsSecPolicyKey = null ; private boolean useSeparateListener = false ; private boolean forcePOX = false ; private boolean forceGET = false ; private boolean forceSOAP11 = false ; private boolean forceSOAP12 = false ; private boolean useMTOM = false ; private boolean useSwa = false ; private String format = null ; private String charSetEncoding ; private long timeoutDuration = 0 ; private int timeoutAction = SynapseConstants . NONE ; private long suspendOnFailDuration = - 1 ; private int statisticsState = SynapseConstants . STATISTICS_UNSET ; private int traceState = SynapseConstants . TRACING_UNSET ; public String getAddress ( ) { return address ; } public void setAddress ( String address ) { this . address = address ; } public boolean isReliableMessagingOn ( ) { return reliableMessagingOn ; } public void setReliableMessagingOn ( boolean reliableMessagingOn ) { this . reliableMessagingOn = reliableMessagingOn ; } public boolean isAddressingOn ( ) { return addressingOn ; } public void setAddressingOn ( boolean addressingOn ) { this . addressingOn = addressingOn ; } public String getAddressingVersion ( ) { return addressingVersion ; } public void setAddressingVersion ( String addressingVersion ) { this . addressingVersion = addressingVersion ; } public boolean isSecurityOn ( ) { return securityOn ; } public void setSecurityOn ( boolean securityOn ) { this . securityOn = securityOn ; } public String getWsSecPolicyKey ( ) { return wsSecPolicyKey ; } public void setWsSecPolicyKey ( String wsSecPolicyKey ) { this . wsSecPolicyKey = wsSecPolicyKey ; } public String getWsRMPolicyKey ( ) { return wsRMPolicyKey ; } public void setWsRMPolicyKey ( String wsRMPolicyKey ) { this . wsRMPolicyKey = wsRMPolicyKey ; } public void setUseSeparateListener ( boolean b ) { this . useSeparateListener = b ; } public boolean isUseSeparateListener ( ) { return useSeparateListener ; } public void setForcePOX ( boolean forcePOX ) { this . forcePOX = forcePOX ; } public boolean isForcePOX ( ) { return forcePOX ; } public boolean isForceGET ( ) { return forceGET ; } public void setForceGET ( boolean forceGET ) { this . forceGET = forceGET ; } public void setForceSOAP11 ( boolean forceSOAP11 ) { this . forceSOAP11 = forceSOAP11 ; } public boolean isForceSOAP11 ( ) { return forceSOAP11 ; } public void setForceSOAP12 ( boolean forceSOAP12 ) { this . forceSOAP12 = forceSOAP12 ; } public boolean isForceSOAP12 ( ) { return forceSOAP12 ; } public boolean isUseMTOM ( ) { return useMTOM ; } public void setUseMTOM ( boolean useMTOM ) { this . useMTOM = useMTOM ; } public boolean isUseSwa ( ) { return useSwa ; } public void setUseSwa ( boolean useSwa ) { this . useSwa = useSwa ; } public long getTimeoutDuration ( ) { return timeoutDuration ; } public void setTimeoutDuration ( long timeoutDuration ) { this . timeoutDuration = timeoutDuration ; } public int getTimeoutAction ( ) { return timeoutAction ; } public void setTimeoutAction ( int timeoutAction ) { this . timeoutAction = timeoutAction ; } public String getFormat ( ) { return format ; } public void setFormat ( String format ) { this . format = format ; } public String getCharSetEncoding ( ) { return charSetEncoding ; } public void setCharSetEncoding ( String charSetEncoding ) { this . charSetEncoding = charSetEncoding ; } public long getSuspendOnFailDuration ( ) { return suspendOnFailDuration ; } public void setSuspendOnFailDuration ( long suspendOnFailDuration ) { this . suspendOnFailDuration = suspendOnFailDuration ; } public int getStatisticsState ( ) { return statisticsState ; } public void setStatisticsState ( int statisticsState ) { this . statisticsState = statisticsState ; } public int getTraceState ( ) { return traceState ; } public void setTraceState ( int traceState ) { this . traceState = traceState ; } } 	0	['43', '1', '0', '18', '44', '781', '18', '0', '43', '0.953514739', '274', '1', '0', '0', '0.297674419', '0', '0', '4.88372093', '1', '0.9767', '0']
package org . apache . synapse . config . xml ; import org . apache . axiom . om . OMElement ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import org . apache . synapse . Mediator ; import org . apache . synapse . mediators . base . SynapseMediator ; public class SynapseMediatorSerializer extends AbstractListMediatorSerializer { public OMElement serializeMediator ( OMElement parent , Mediator m ) { if ( ! ( m instanceof SynapseMediator ) ) { handleException ( "Unsupported mediator passed in for serialization : " + m . getType ( ) ) ; } SynapseMediator mediator = ( SynapseMediator ) m ; OMElement rules = fac . createOMElement ( "rules" , synNS ) ; saveTracingState ( rules , mediator ) ; serializeChildren ( rules , mediator . getList ( ) ) ; if ( parent != null ) { parent . addChild ( rules ) ; } return rules ; } public String getMediatorClassName ( ) { return SynapseMediator . class . getName ( ) ; } } 	0	['3', '3', '0', '7', '15', '3', '0', '7', '3', '2', '46', '0', '0', '0.777777778', '0.555555556', '0', '0', '14.33333333', '3', '1.3333', '0']
package org . apache . synapse . endpoints . dispatch ; import org . apache . axiom . om . OMElement ; import org . apache . axiom . soap . SOAPHeader ; import org . apache . axis2 . addressing . AddressingConstants ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import org . apache . synapse . MessageContext ; import org . apache . synapse . endpoints . Endpoint ; import javax . xml . namespace . QName ; public class SoapSessionDispatcher implements Dispatcher { private static final Log log = LogFactory . getLog ( SoapSessionDispatcher . class ) ; private static final QName QNAME_SERVICE_GROUP_ID = new QName ( "http://ws.apache.org/namespaces/axis2" , "ServiceGroupId" , "axis2" ) ; public Endpoint getEndpoint ( MessageContext synCtx , DispatcherContext dispatcherContext ) { Endpoint endpoint = null ; SOAPHeader header = synCtx . getEnvelope ( ) . getHeader ( ) ; if ( header != null ) { OMElement sgcElm = header . getFirstChildWithName ( QNAME_SERVICE_GROUP_ID ) ; if ( sgcElm != null ) { String sgcID = sgcElm . getText ( ) ; if ( sgcID != null ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Using the ServiceGroupId SOAP header value " + sgcID + " to retrieve endpoint on the session" ) ; } endpoint = dispatcherContext . getEndpoint ( sgcID ) ; } } else if ( log . isDebugEnabled ( ) ) { log . debug ( "Couldn't find the ServiceQroupId SOAP " + "header to retrieve the endpoint on the session" ) ; } } return endpoint ; } public void updateSession ( MessageContext synCtx , DispatcherContext dispatcherContext , Endpoint endpoint ) { if ( endpoint == null || dispatcherContext == null ) { return ; } SOAPHeader header = synCtx . getEnvelope ( ) . getHeader ( ) ; if ( header != null ) { OMElement replyTo = header . getFirstChildWithName ( AddressingConstants . Final . QNAME_WSA_REPLY_TO ) ; if ( replyTo != null ) { OMElement referenceParameters = replyTo . getFirstChildWithName ( new QName ( "http://www.w3.org/2005/08/addressing" , "ReferenceParameters" , "wsa" ) ) ; if ( referenceParameters != null ) { OMElement sgcElm = referenceParameters . getFirstChildWithName ( QNAME_SERVICE_GROUP_ID ) ; if ( sgcElm != null ) { String sgcID = sgcElm . getText ( ) ; if ( sgcID != null ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Using the ServiceGroupId value " + sgcID + " to update the endpoint session" ) ; } dispatcherContext . setEndpoint ( sgcID , endpoint ) ; } } else if ( log . isDebugEnabled ( ) ) { log . debug ( "Couldn't find the WSA ServiceQroupId on the " + "ReferenceParameters of the Reply-To header to update the session" ) ; } } else if ( log . isDebugEnabled ( ) ) { log . debug ( "Couldn't find the WSA ReferenceParameters in the Reply-To " + "header to retrieve the ServiceQroupId" ) ; } } else if ( log . isDebugEnabled ( ) ) { log . debug ( "Couldn't find the WSA Reply-To header to retrieve the ServiceQroupId" ) ; } } } public void unbind ( MessageContext synCtx , DispatcherContext dispatcherContext ) { SOAPHeader header = synCtx . getEnvelope ( ) . getHeader ( ) ; if ( header != null ) { OMElement sgcIDElm = header . getFirstChildWithName ( QNAME_SERVICE_GROUP_ID ) ; if ( sgcIDElm != null ) { String sgcID = sgcIDElm . getText ( ) ; if ( sgcID != null ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Using the ServiceGroupId value " + sgcID + " to unbind session" ) ; } dispatcherContext . removeSession ( sgcID ) ; } } else if ( log . isDebugEnabled ( ) ) { log . debug ( "Couldn't find the ServiceQroupId SOAP header to unbind the session" ) ; } } } public boolean isServerInitiatedSession ( ) { return true ; } } 	0	['6', '1', '0', '12', '22', '3', '2', '10', '5', '0.4', '194', '1', '0', '0', '0.6', '0', '0', '31', '9', '3.3333', '0']
package org . apache . synapse . startup ; public interface Task { public void execute ( ) ; } 	0	['1', '1', '0', '2', '1', '0', '2', '0', '1', '2', '1', '0', '0', '0', '1', '0', '0', '0', '1', '1', '0']
package org . apache . synapse . config . xml ; import org . apache . axiom . om . OMAttribute ; import org . apache . axiom . om . OMElement ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import org . apache . synapse . Mediator ; import org . apache . synapse . mediators . builtin . LogMediator ; import javax . xml . namespace . QName ; public class LogMediatorFactory extends AbstractMediatorFactory { private static final QName LOG_Q = new QName ( XMLConfigConstants . SYNAPSE_NAMESPACE , "log" ) ; private static final String SIMPLE = "simple" ; private static final String HEADERS = "headers" ; private static final String FULL = "full" ; private static final String CUSTOM = "custom" ; private static final QName ATT_LEVEL = new QName ( "level" ) ; private static final QName ATT_SEPERATOR = new QName ( "separator" ) ; public QName getTagQName ( ) { return LOG_Q ; } public Mediator createMediator ( OMElement elem ) { LogMediator logMediator = new LogMediator ( ) ; processTraceState ( logMediator , elem ) ; OMAttribute level = elem . getAttribute ( ATT_LEVEL ) ; if ( level != null ) { String levelstr = level . getAttributeValue ( ) ; if ( SIMPLE . equals ( levelstr ) ) { logMediator . setLogLevel ( LogMediator . SIMPLE ) ; } else if ( HEADERS . equals ( levelstr ) ) { logMediator . setLogLevel ( LogMediator . HEADERS ) ; } else if ( FULL . equals ( levelstr ) ) { logMediator . setLogLevel ( LogMediator . FULL ) ; } else if ( CUSTOM . equals ( levelstr ) ) { logMediator . setLogLevel ( LogMediator . CUSTOM ) ; } } OMAttribute separator = elem . getAttribute ( ATT_SEPERATOR ) ; if ( separator != null ) { logMediator . setSeparator ( separator . getAttributeValue ( ) ) ; } logMediator . addAllProperties ( MediatorPropertyFactory . getMediatorProperties ( elem ) ) ; return logMediator ; } } 	0	['4', '2', '0', '6', '16', '2', '0', '6', '3', '1.047619048', '97', '1', '0', '0.6', '0.666666667', '0', '0', '21.5', '7', '2', '0']
package org . apache . synapse . config . xml ; import org . apache . axiom . om . OMAttribute ; import org . apache . axiom . om . OMElement ; import org . apache . synapse . Mediator ; import org . apache . synapse . SynapseException ; import org . apache . synapse . mediators . ext . AnnotatedCommandMediator ; import org . apache . synapse . util . xpath . SynapseXPath ; import org . jaxen . JaxenException ; import javax . xml . namespace . QName ; import java . util . Iterator ; public class AnnotatedCommandMediatorFactory extends AbstractMediatorFactory { private static final QName ANNOTATED_COMMAND_Q = new QName ( XMLConfigConstants . SYNAPSE_NAMESPACE , "annotatedCommand" ) ; public Mediator createMediator ( OMElement elem ) { AnnotatedCommandMediator pojoMediator = new AnnotatedCommandMediator ( ) ; OMAttribute name = elem . getAttribute ( ATT_NAME ) ; if ( name == null ) { String msg = "The name of the actual POJO command implementation class" + " is a required attribute" ; log . error ( msg ) ; throw new SynapseException ( msg ) ; } try { pojoMediator . setCommand ( getClass ( ) . getClassLoader ( ) . loadClass ( name . getAttributeValue ( ) ) ) ; } catch ( ClassNotFoundException e ) { handleException ( "Unable to load the class specified as the command " + name . getAttributeValue ( ) , e ) ; } for ( Iterator it = elem . getChildElements ( ) ; it . hasNext ( ) ; ) { OMElement child = ( OMElement ) it . next ( ) ; if ( "property" . equals ( child . getLocalName ( ) ) ) { String propName = child . getAttribute ( ATT_NAME ) . getAttributeValue ( ) ; if ( propName == null ) { handleException ( "A POJO command mediator property must specify the name attribute" ) ; } else { if ( child . getAttribute ( ATT_EXPRN ) != null ) { SynapseXPath xpath = null ; try { xpath = SynapseXPathFactory . getSynapseXPath ( child , ATT_EXPRN ) ; pojoMediator . addMessageSetterProperty ( propName , xpath ) ; } catch ( JaxenException e ) { handleException ( "Error instantiating XPath expression : " + child . getAttribute ( ATT_EXPRN ) , e ) ; } } else { if ( child . getAttribute ( ATT_VALUE ) != null ) { pojoMediator . addStaticSetterProperty ( propName , child . getAttribute ( ATT_VALUE ) . getAttributeValue ( ) ) ; } else { handleException ( "A POJO mediator property must specify either " + "name and expression attributes, or name and value attributes" ) ; } } } } } return pojoMediator ; } public QName getTagQName ( ) { return ANNOTATED_COMMAND_Q ; } } 	0	['4', '2', '0', '10', '29', '4', '0', '10', '3', '0.666666667', '133', '1', '0', '0.6', '0.666666667', '0', '0', '32', '6', '1.75', '0']
package org . apache . synapse . core . axis2 ; import org . apache . axiom . soap . SOAPEnvelope ; import org . apache . axis2 . AxisFault ; import org . apache . axis2 . Constants ; import org . apache . axis2 . addressing . EndpointReference ; import org . apache . axis2 . client . OperationClient ; import org . apache . axis2 . client . Options ; import org . apache . axis2 . client . async . Callback ; import org . apache . axis2 . context . ConfigurationContext ; import org . apache . axis2 . context . MessageContext ; import org . apache . axis2 . context . ServiceContext ; import org . apache . axis2 . description . ClientUtils ; import org . apache . axis2 . description . OutInAxisOperation ; import org . apache . axis2 . description . TransportOutDescription ; import org . apache . axis2 . engine . AxisEngine ; import org . apache . axis2 . i18n . Messages ; import org . apache . axis2 . transport . TransportUtils ; import org . apache . axis2 . util . TargetResolver ; import org . apache . axis2 . wsdl . WSDLConstants ; import org . apache . synapse . SynapseConstants ; import org . apache . synapse . transport . nhttp . NhttpConstants ; import javax . xml . namespace . QName ; public class DynamicAxisOperation extends OutInAxisOperation { public DynamicAxisOperation ( ) { super ( ) ; } public DynamicAxisOperation ( QName name ) { super ( name ) ; } public OperationClient createClient ( ServiceContext sc , Options options ) { return new DynamicOperationClient ( this , sc , options ) ; } class DynamicOperationClient extends OperationClient { DynamicOperationClient ( OutInAxisOperation axisOp , ServiceContext sc , Options options ) { super ( axisOp , sc , options ) ; } public void addMessageContext ( MessageContext mc ) throws AxisFault { mc . setServiceContext ( sc ) ; if ( mc . getMessageID ( ) == null ) { setMessageID ( mc ) ; } axisOp . registerOperationContext ( mc , oc ) ; } public MessageContext getMessageContext ( String messageLabel ) throws AxisFault { return oc . getMessageContext ( messageLabel ) ; } public void setCallback ( Callback callback ) { this . callback = callback ; } public void executeImpl ( boolean block ) throws AxisFault { if ( completed ) { throw new AxisFault ( Messages . getMessage ( "mepiscomplted" ) ) ; } MessageContext outMsgCtx = oc . getMessageContext ( WSDLConstants . MESSAGE_LABEL_OUT_VALUE ) ; if ( outMsgCtx == null ) { throw new AxisFault ( Messages . getMessage ( "outmsgctxnull" ) ) ; } ConfigurationContext cfgCtx = sc . getConfigurationContext ( ) ; outMsgCtx . setOptions ( options ) ; TargetResolver tr = cfgCtx . getAxisConfiguration ( ) . getTargetResolverChain ( ) ; if ( tr != null ) { tr . resolveTarget ( outMsgCtx ) ; } TransportOutDescription transportOut = options . getTransportOut ( ) ; if ( transportOut == null ) { EndpointReference toEPR = ( options . getTo ( ) != null ) ? options . getTo ( ) : outMsgCtx . getTo ( ) ; transportOut = ClientUtils . inferOutTransport ( cfgCtx . getAxisConfiguration ( ) , toEPR , outMsgCtx ) ; } outMsgCtx . setTransportOut ( transportOut ) ; if ( options . getTransportIn ( ) == null && outMsgCtx . getTransportIn ( ) == null ) { outMsgCtx . setTransportIn ( ClientUtils . inferInTransport ( cfgCtx . getAxisConfiguration ( ) , options , outMsgCtx ) ) ; } else if ( outMsgCtx . getTransportIn ( ) == null ) { outMsgCtx . setTransportIn ( options . getTransportIn ( ) ) ; } addReferenceParameters ( outMsgCtx ) ; if ( options . isUseSeparateListener ( ) ) { options . setTransportIn ( outMsgCtx . getConfigurationContext ( ) . getAxisConfiguration ( ) . getTransportIn ( Constants . TRANSPORT_HTTP ) ) ; SynapseCallbackReceiver callbackReceiver = ( SynapseCallbackReceiver ) axisOp . getMessageReceiver ( ) ; ( ( Axis2MessageContext ) ( ( AsyncCallback ) axisCallback ) . getSynapseOutMsgCtx ( ) ) . getAxis2MessageContext ( ) . setProperty ( NhttpConstants . IGNORE_SC_ACCEPTED , Constants . VALUE_TRUE ) ; callbackReceiver . addCallback ( outMsgCtx . getMessageID ( ) , axisCallback ) ; EndpointReference replyToFromTransport = outMsgCtx . getConfigurationContext ( ) . getListenerManager ( ) . getEPRforService ( sc . getAxisService ( ) . getName ( ) , axisOp . getName ( ) . getLocalPart ( ) , outMsgCtx . getTransportOut ( ) . getName ( ) ) ; if ( outMsgCtx . getReplyTo ( ) == null ) { outMsgCtx . setReplyTo ( replyToFromTransport ) ; } else { outMsgCtx . getReplyTo ( ) . setAddress ( replyToFromTransport . getAddress ( ) ) ; } outMsgCtx . getConfigurationContext ( ) . registerOperationContext ( outMsgCtx . getMessageID ( ) , oc ) ; AxisEngine . send ( outMsgCtx ) ; options . setAction ( "" ) ; } else { SynapseCallbackReceiver callbackReceiver = ( SynapseCallbackReceiver ) axisOp . getMessageReceiver ( ) ; callbackReceiver . addCallback ( outMsgCtx . getMessageID ( ) , axisCallback ) ; send ( outMsgCtx ) ; } } private void send ( MessageContext msgctx ) throws AxisFault { MessageContext responseMessageContext = new MessageContext ( ) ; responseMessageContext . setMessageID ( msgctx . getMessageID ( ) ) ; responseMessageContext . setProperty ( SynapseConstants . RELATES_TO_FOR_POX , msgctx . getMessageID ( ) ) ; responseMessageContext . setOptions ( options ) ; addMessageContext ( responseMessageContext ) ; AxisEngine . send ( msgctx ) ; if ( msgctx . getProperty ( MessageContext . TRANSPORT_IN ) != null ) { responseMessageContext . setOperationContext ( msgctx . getOperationContext ( ) ) ; responseMessageContext . setAxisMessage ( msgctx . getOperationContext ( ) . getAxisOperation ( ) . getMessage ( WSDLConstants . MESSAGE_LABEL_IN_VALUE ) ) ; responseMessageContext . setAxisService ( msgctx . getAxisService ( ) ) ; responseMessageContext . setServerSide ( true ) ; responseMessageContext . setProperty ( MessageContext . TRANSPORT_OUT , msgctx . getProperty ( MessageContext . TRANSPORT_OUT ) ) ; responseMessageContext . setProperty ( org . apache . axis2 . Constants . OUT_TRANSPORT_INFO , msgctx . getProperty ( org . apache . axis2 . Constants . OUT_TRANSPORT_INFO ) ) ; responseMessageContext . setProperty ( org . apache . synapse . SynapseConstants . ISRESPONSE_PROPERTY , Boolean . TRUE ) ; responseMessageContext . setTransportIn ( msgctx . getTransportIn ( ) ) ; responseMessageContext . setTransportOut ( msgctx . getTransportOut ( ) ) ; responseMessageContext . setDoingREST ( msgctx . isDoingREST ( ) ) ; responseMessageContext . setProperty ( MessageContext . TRANSPORT_IN , msgctx . getProperty ( MessageContext . TRANSPORT_IN ) ) ; responseMessageContext . setTransportIn ( msgctx . getTransportIn ( ) ) ; responseMessageContext . setTransportOut ( msgctx . getTransportOut ( ) ) ; responseMessageContext . setSoapAction ( "" ) ; if ( responseMessageContext . getEnvelope ( ) == null ) { SOAPEnvelope resenvelope = TransportUtils . createSOAPMessage ( responseMessageContext ) ; if ( resenvelope != null ) { responseMessageContext . setEnvelope ( resenvelope ) ; AxisEngine . receive ( responseMessageContext ) ; if ( responseMessageContext . getReplyTo ( ) != null ) { sc . setTargetEPR ( responseMessageContext . getReplyTo ( ) ) ; } } else { throw new AxisFault ( Messages . getMessage ( "blockingInvocationExpectsResponse" ) ) ; } } } } } } 	0	['3', '5', '0', '6', '6', '3', '2', '5', '3', '2', '18', '0', '0', '0.991150442', '0.5', '0', '0', '5', '1', '0.3333', '0']
package org . apache . synapse . statistics . impl ; import org . apache . synapse . statistics . StatisticsStack ; import org . apache . synapse . statistics . StatisticsCollector ; import org . apache . synapse . SynapseException ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class ProxyServiceStatisticsStack implements StatisticsStack { private static final Log log = LogFactory . getLog ( ProxyServiceStatisticsStack . class ) ; private String proxyServiceName ; private boolean isStatisticsEnable = false ; private long inTimeForInFlow = - 1 ; private long inTimeForOutFlow = - 1 ; private boolean isINFault ; private boolean isOUTFault ; public void put ( String key , long initTime , boolean isInFlow , boolean isStatisticsEnable , boolean isFault ) { if ( isInFlow ) { this . proxyServiceName = key ; this . isStatisticsEnable = isStatisticsEnable ; this . inTimeForInFlow = initTime ; this . isINFault = isFault ; } } public void reportToStatisticsCollector ( StatisticsCollector statisticsCollector , boolean isFault ) { synchronized ( this ) { if ( proxyServiceName != null && isStatisticsEnable && inTimeForInFlow != - 1 ) { inTimeForOutFlow = System . currentTimeMillis ( ) ; isOUTFault = isFault ; statisticsCollector . reportForProxyService ( proxyServiceName , false , inTimeForInFlow , inTimeForOutFlow , isINFault ) ; inTimeForInFlow = - 1 ; } else if ( inTimeForOutFlow != - 1 ) { statisticsCollector . reportForProxyService ( proxyServiceName , true , inTimeForOutFlow , System . currentTimeMillis ( ) , isFault ) ; inTimeForOutFlow = - 1 ; } } } public void reportToStatisticsCollector ( StatisticsCollector statisticsCollector , boolean isFault , String name ) { if ( name != null && proxyServiceName != null && proxyServiceName . equals ( name ) ) { reportToStatisticsCollector ( statisticsCollector , isFault ) ; } else { handleException ( "Invalid ProxyService Name " + name + " expected " + proxyServiceName ) ; } } public void reportAllToStatisticsCollector ( StatisticsCollector statisticsCollector , boolean isFault ) { reportToStatisticsCollector ( statisticsCollector , isFault ) ; } private void handleException ( String msg ) { log . error ( msg ) ; throw new SynapseException ( msg ) ; } } 	0	['7', '1', '0', '8', '17', '9', '3', '5', '5', '0.5', '151', '1', '0', '0', '0.566666667', '0', '0', '19.57142857', '5', '1.8571', '0']
package org . apache . synapse . config ; import org . apache . axiom . om . OMNode ; public interface XMLToObjectMapper { public Object getObjectFromOMNode ( OMNode om ) ; } 	0	['1', '1', '0', '10', '1', '0', '9', '1', '1', '2', '1', '0', '0', '0', '1', '0', '0', '0', '1', '1', '0']
package org . apache . synapse . config . xml . endpoints ; import org . apache . axiom . om . OMAbstractFactory ; import org . apache . axiom . om . OMElement ; import org . apache . synapse . SynapseConstants ; import org . apache . synapse . SynapseException ; import org . apache . synapse . endpoints . DefaultEndpoint ; import org . apache . synapse . endpoints . Endpoint ; import org . apache . synapse . endpoints . utils . EndpointDefinition ; public class DefaultEndpointSerializer extends EndpointSerializer { protected OMElement serializeEndpoint ( Endpoint endpoint ) { if ( ! ( endpoint instanceof DefaultEndpoint ) ) { throw new SynapseException ( "Invalid endpoint type." ) ; } fac = OMAbstractFactory . getOMFactory ( ) ; OMElement endpointElement = fac . createOMElement ( "endpoint" , SynapseConstants . SYNAPSE_OMNAMESPACE ) ; DefaultEndpoint defaultEndpoint = ( DefaultEndpoint ) endpoint ; String name = defaultEndpoint . getName ( ) ; if ( name != null ) { endpointElement . addAttribute ( "name" , name , null ) ; } EndpointDefinition epAddress = defaultEndpoint . getEndpoint ( ) ; OMElement defaultElement = serializeEndpointDefinition ( epAddress ) ; endpointElement . addChild ( defaultElement ) ; return endpointElement ; } protected void serializeSpecificEndpointProperties ( EndpointDefinition endpointDefinition , OMElement element ) { if ( SynapseConstants . FORMAT_POX . equals ( endpointDefinition . getFormat ( ) ) ) { element . addAttribute ( fac . createOMAttribute ( "format" , null , "pox" ) ) ; } else if ( SynapseConstants . FORMAT_GET . equals ( endpointDefinition . getFormat ( ) ) ) { element . addAttribute ( fac . createOMAttribute ( "format" , null , "get" ) ) ; } else if ( SynapseConstants . FORMAT_SOAP11 . equals ( endpointDefinition . getFormat ( ) ) ) { element . addAttribute ( fac . createOMAttribute ( "format" , null , "soap11" ) ) ; } else if ( SynapseConstants . FORMAT_SOAP12 . equals ( endpointDefinition . getFormat ( ) ) ) { element . addAttribute ( fac . createOMAttribute ( "format" , null , "soap12" ) ) ; } else if ( endpointDefinition . isForcePOX ( ) ) { element . addAttribute ( fac . createOMAttribute ( "format" , null , "pox" ) ) ; } else if ( endpointDefinition . isForceGET ( ) ) { element . addAttribute ( fac . createOMAttribute ( "format" , null , "get" ) ) ; } else if ( endpointDefinition . isForceSOAP11 ( ) ) { element . addAttribute ( fac . createOMAttribute ( "format" , null , "soap11" ) ) ; } else if ( endpointDefinition . isForceSOAP12 ( ) ) { element . addAttribute ( fac . createOMAttribute ( "format" , null , "soap12" ) ) ; } } public OMElement serializeEndpointDefinition ( EndpointDefinition endpointDefinition ) { OMElement element = fac . createOMElement ( "default" , SynapseConstants . SYNAPSE_OMNAMESPACE ) ; serializeCommonEndpointProperties ( endpointDefinition , element ) ; serializeSpecificEndpointProperties ( endpointDefinition , element ) ; return element ; } } 	0	['4', '2', '1', '13', '21', '0', '1', '12', '2', '2', '178', '0', '0', '0.666666667', '0.5', '2', '3', '43.5', '9', '3.25', '0']
package org . apache . synapse . metrics ; import org . apache . axis2 . AxisFault ; import org . apache . axis2 . context . ConfigurationContext ; import org . apache . axis2 . description . AxisDescription ; import org . apache . axis2 . description . AxisModule ; import org . apache . axis2 . description . Parameter ; import org . apache . axis2 . engine . AxisConfiguration ; import org . apache . axis2 . modules . Module ; import org . apache . neethi . Assertion ; import org . apache . neethi . Policy ; public class MetricsAggregatorModule implements Module { public void init ( ConfigurationContext configContext , AxisModule module ) throws AxisFault { AxisConfiguration axiConfiguration = configContext . getAxisConfiguration ( ) ; Counter globalRequestCounter = new Counter ( ) ; Parameter globalRequestCounterParameter = new Parameter ( ) ; globalRequestCounterParameter . setName ( MetricsConstants . GLOBAL_REQUEST_COUNTER ) ; globalRequestCounterParameter . setValue ( globalRequestCounter ) ; axiConfiguration . addParameter ( globalRequestCounterParameter ) ; } public void engageNotify ( AxisDescription axisDescription ) throws AxisFault { } public boolean canSupportAssertion ( Assertion assertion ) { return false ; } public void applyPolicy ( Policy policy , AxisDescription axisDescription ) throws AxisFault { } public void shutdown ( ConfigurationContext configurationContext ) throws AxisFault { } } 	0	['6', '1', '0', '10', '13', '15', '0', '10', '6', '2', '35', '0', '0', '0', '0.361111111', '0', '0', '4.833333333', '1', '0.8333', '0']
package org . apache . synapse . startup . quartz ; import java . util . List ; import org . apache . axiom . om . OMAbstractFactory ; import org . apache . axiom . om . OMElement ; import org . apache . axiom . om . OMFactory ; import org . apache . axiom . om . OMNamespace ; import org . apache . synapse . Startup ; import org . apache . synapse . SynapseException ; import org . apache . synapse . config . xml . StartupSerializer ; import org . apache . synapse . config . xml . XMLConfigConstants ; import javax . xml . namespace . QName ; public class SimpleQuartzSerializer implements StartupSerializer { protected static final OMFactory fac = OMAbstractFactory . getOMFactory ( ) ; protected static final OMNamespace synNS = fac . createOMNamespace ( XMLConfigConstants . SYNAPSE_NAMESPACE , "syn" ) ; protected static final OMNamespace nullNS = fac . createOMNamespace ( XMLConfigConstants . NULL_NAMESPACE , "" ) ; protected static final QName PROP_Q = new QName ( XMLConfigConstants . SYNAPSE_NAMESPACE , "property" , "syn" ) ; public OMElement serializeStartup ( OMElement parent , Startup s ) { if ( ! ( s instanceof SimpleQuartz ) ) { throw new SynapseException ( "called TaskSerializer on some other " + "kind of startup" + s . getClass ( ) . getName ( ) ) ; } SimpleQuartz sq = ( SimpleQuartz ) s ; OMElement task = fac . createOMElement ( "task" , synNS , parent ) ; task . addAttribute ( "name" , sq . getName ( ) , nullNS ) ; task . addAttribute ( "class" , sq . getJobClass ( ) , nullNS ) ; List pinnedServers = sq . getPinnedServers ( ) ; if ( pinnedServers != null && ! pinnedServers . isEmpty ( ) ) { String pinnedServersStr = "" + pinnedServers . get ( 0 ) ; for ( int i = 1 ; i < pinnedServers . size ( ) ; i ++ ) { pinnedServersStr = pinnedServersStr + " " + pinnedServers . get ( i ) ; } task . addAttribute ( fac . createOMAttribute ( "pinnedServers" , nullNS , pinnedServersStr ) ) ; } OMElement el = fac . createOMElement ( "trigger" , synNS , task ) ; if ( sq . getInterval ( ) == 1 && sq . getCount ( ) == 1 ) { el . addAttribute ( "once" , "true" , nullNS ) ; } else if ( sq . getCron ( ) != null ) { el . addAttribute ( "cron" , sq . getCron ( ) , nullNS ) ; } else { if ( sq . getCount ( ) != - 1 ) { el . addAttribute ( "count" , Integer . toString ( sq . getCount ( ) ) , nullNS ) ; } if ( sq . getInterval ( ) != 0 ) { long interval = sq . getInterval ( ) / 1000 ; el . addAttribute ( "interval" , Long . toString ( interval ) , nullNS ) ; } } for ( Object o : sq . getProperties ( ) ) { OMElement prop = ( OMElement ) o ; task . addChild ( prop . cloneOMElement ( ) ) ; } return task ; } } 	0	['3', '1', '0', '11', '35', '1', '0', '11', '2', '0.625', '200', '1', '0', '0', '0.666666667', '0', '0', '64.33333333', '11', '3.6667', '0']
package org . apache . synapse . core . axis2 ; import org . apache . axis2 . AxisFault ; import org . apache . axis2 . engine . MessageReceiver ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import org . apache . synapse . FaultHandler ; import org . apache . synapse . MessageContext ; import org . apache . synapse . SynapseConstants ; import org . apache . synapse . SynapseException ; import org . apache . synapse . mediators . MediatorFaultHandler ; import org . apache . synapse . statistics . StatisticsStack ; import org . apache . synapse . statistics . impl . ProxyServiceStatisticsStack ; public class SynapseMessageReceiver implements MessageReceiver { private static final Log log = LogFactory . getLog ( SynapseMessageReceiver . class ) ; private static final Log trace = LogFactory . getLog ( SynapseConstants . TRACE_LOGGER ) ; public void receive ( org . apache . axis2 . context . MessageContext mc ) throws AxisFault { MessageContext synCtx = MessageContextCreatorForAxis2 . getSynapseMessageContext ( mc ) ; boolean traceOn = synCtx . getMainSequence ( ) . getTraceState ( ) == SynapseConstants . TRACING_ON ; boolean traceOrDebugOn = traceOn || log . isDebugEnabled ( ) ; if ( traceOrDebugOn ) { traceOrDebug ( traceOn , "Synapse received a new message for message mediation..." ) ; traceOrDebug ( traceOn , "Received To: " + ( mc . getTo ( ) != null ? mc . getTo ( ) . getAddress ( ) : "null" ) ) ; traceOrDebug ( traceOn , "SOAPAction: " + ( mc . getSoapAction ( ) != null ? mc . getSoapAction ( ) : "null" ) ) ; traceOrDebug ( traceOn , "WSA-Action: " + ( mc . getWSAAction ( ) != null ? mc . getWSAAction ( ) : "null" ) ) ; if ( traceOn && trace . isTraceEnabled ( ) ) { String [ ] cids = mc . getAttachmentMap ( ) . getAllContentIDs ( ) ; if ( cids != null && cids . length > 0 ) { for ( int i = 0 ; i < cids . length ; i ++ ) { trace . trace ( "Attachment : " + cids [ i ] ) ; } } trace . trace ( "Envelope : " + mc . getEnvelope ( ) ) ; } } Log serviceLog = LogFactory . getLog ( SynapseConstants . SERVICE_LOGGER_PREFIX + SynapseConstants . SYNAPSE_SERVICE_NAME ) ; ( ( Axis2MessageContext ) synCtx ) . setServiceLog ( serviceLog ) ; try { StatisticsStack synapseServiceStack = new ProxyServiceStatisticsStack ( ) ; boolean isFault = synCtx . getEnvelope ( ) . getBody ( ) . hasFault ( ) ; synapseServiceStack . put ( SynapseConstants . SYNAPSE_SERVICE_NAME , System . currentTimeMillis ( ) , ! synCtx . isResponse ( ) , true , isFault ) ; synCtx . setProperty ( SynapseConstants . SERVICE_STATS , synapseServiceStack ) ; synCtx . pushFaultHandler ( new MediatorFaultHandler ( synCtx . getSequence ( SynapseConstants . FAULT_SEQUENCE_KEY ) ) ) ; synCtx . getEnvironment ( ) . injectMessage ( synCtx ) ; } catch ( SynapseException syne ) { if ( ! synCtx . getFaultStack ( ) . isEmpty ( ) ) { warn ( traceOn , "Executing fault handler due to exception encountered" , synCtx ) ; ( ( FaultHandler ) synCtx . getFaultStack ( ) . pop ( ) ) . handleFault ( synCtx , syne ) ; } else { warn ( traceOn , "Exception encountered but no fault handler found - " + "message dropped" , synCtx ) ; } } } private void traceOrDebug ( boolean traceOn , String msg ) { if ( traceOn ) { trace . info ( msg ) ; } if ( log . isDebugEnabled ( ) ) { log . debug ( msg ) ; } } private void warn ( boolean traceOn , String msg , MessageContext msgContext ) { if ( traceOn ) { trace . warn ( msg ) ; } if ( log . isDebugEnabled ( ) ) { log . warn ( msg ) ; } if ( msgContext . getServiceLog ( ) != null ) { msgContext . getServiceLog ( ) . warn ( msg ) ; } } } 	0	['5', '1', '1', '21', '47', '0', '2', '19', '2', '0.25', '242', '1', '0', '0', '0.5', '0', '0', '47', '4', '1.6', '0']
package org . apache . synapse . mediators . annotations ; import static java . lang . annotation . ElementType . FIELD ; import static java . lang . annotation . RetentionPolicy . RUNTIME ; import java . lang . annotation . Retention ; import java . lang . annotation . Target ; @ Target ( { FIELD } ) @ Retention ( RUNTIME ) public @ interface ReadAndUpdate { String value ( ) ; } 	0	['1', '1', '0', '1', '1', '0', '1', '0', '1', '2', '1', '0', '0', '0', '1', '0', '0', '0', '1', '1', '0']
package org . apache . synapse . config . xml ; import org . apache . axiom . om . OMAttribute ; import org . apache . axiom . om . OMElement ; import org . apache . synapse . Mediator ; import org . apache . synapse . SynapseConstants ; import org . apache . synapse . mediators . filters . FilterMediator ; import org . jaxen . JaxenException ; import javax . xml . namespace . QName ; import java . util . regex . Pattern ; import java . util . regex . PatternSyntaxException ; public class FilterMediatorFactory extends AbstractListMediatorFactory { private static final QName FILTER_Q = new QName ( SynapseConstants . SYNAPSE_NAMESPACE , "filter" ) ; private static final QName THEN_Q = new QName ( SynapseConstants . SYNAPSE_NAMESPACE , "then" ) ; private static final QName ELSE_Q = new QName ( SynapseConstants . SYNAPSE_NAMESPACE , "else" ) ; public Mediator createMediator ( OMElement elem ) { FilterMediator filter = new FilterMediator ( ) ; OMAttribute attXpath = elem . getAttribute ( ATT_XPATH ) ; OMAttribute attSource = elem . getAttribute ( ATT_SOURCE ) ; OMAttribute attRegex = elem . getAttribute ( ATT_REGEX ) ; if ( attXpath != null ) { if ( attXpath . getAttributeValue ( ) != null && attXpath . getAttributeValue ( ) . trim ( ) . length ( ) == 0 ) { handleException ( "Invalid attribute value specified for xpath" ) ; } else { try { filter . setXpath ( SynapseXPathFactory . getSynapseXPath ( elem , ATT_XPATH ) ) ; } catch ( JaxenException e ) { handleException ( "Invalid XPath expression for attribute xpath : " + attXpath . getAttributeValue ( ) , e ) ; } } } else if ( attSource != null && attRegex != null ) { if ( ( attSource . getAttributeValue ( ) != null && attSource . getAttributeValue ( ) . trim ( ) . length ( ) == 0 ) || ( attRegex . getAttributeValue ( ) != null && attRegex . getAttributeValue ( ) . trim ( ) . length ( ) == 0 ) ) { handleException ( "Invalid attribute values for source and/or regex specified" ) ; } else { try { filter . setSource ( SynapseXPathFactory . getSynapseXPath ( elem , ATT_SOURCE ) ) ; } catch ( JaxenException e ) { handleException ( "Invalid XPath expression for attribute source : " + attSource . getAttributeValue ( ) , e ) ; } try { filter . setRegex ( Pattern . compile ( attRegex . getAttributeValue ( ) ) ) ; } catch ( PatternSyntaxException pse ) { handleException ( "Invalid Regular Expression for attribute regex : " + attRegex . getAttributeValue ( ) , pse ) ; } } } else { handleException ( "An xpath or (source, regex) attributes are required for a filter" ) ; } processTraceState ( filter , elem ) ; OMElement thenElem = elem . getFirstChildWithName ( THEN_Q ) ; if ( thenElem != null ) { filter . setThenElementPresent ( true ) ; OMAttribute sequenceAttr = thenElem . getAttribute ( ATT_SEQUENCE ) ; if ( sequenceAttr != null && sequenceAttr . getAttributeValue ( ) != null ) { filter . setThenKey ( sequenceAttr . getAttributeValue ( ) ) ; } else { addChildren ( thenElem , filter ) ; } OMElement elseElem = elem . getFirstChildWithName ( ELSE_Q ) ; if ( elseElem != null ) { sequenceAttr = elseElem . getAttribute ( ATT_SEQUENCE ) ; if ( sequenceAttr != null && sequenceAttr . getAttributeValue ( ) != null ) { filter . setElseKey ( sequenceAttr . getAttributeValue ( ) ) ; } else { AnonymousListMediator listMediator = AnonymousListMediatorFactory . createAnonymousListMediator ( elseElem ) ; filter . setElseMediator ( listMediator ) ; } } } else { filter . setThenElementPresent ( false ) ; addChildren ( elem , filter ) ; } return filter ; } public QName getTagQName ( ) { return FILTER_Q ; } } 	0	['4', '3', '0', '11', '29', '2', '0', '11', '3', '0.666666667', '212', '1', '0', '0.666666667', '0.666666667', '0', '0', '51.25', '15', '4', '0']
package org . apache . synapse . mediators ; import org . apache . synapse . * ; import org . apache . synapse . core . axis2 . Axis2MessageContext ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class MediatorWorker implements Runnable { private static final Log log = LogFactory . getLog ( MediatorWorker . class ) ; private static final Log trace = LogFactory . getLog ( SynapseConstants . TRACE_LOGGER ) ; private Mediator seq = null ; private MessageContext synCtx = null ; public MediatorWorker ( Mediator seq , MessageContext synCtx ) { this . seq = seq ; this . synCtx = synCtx ; } public MediatorWorker ( MessageContext synCtx ) { this . synCtx = synCtx ; seq = synCtx . getMainSequence ( ) ; } public void run ( ) { try { seq . mediate ( synCtx ) ; } catch ( SynapseException syne ) { if ( ! synCtx . getFaultStack ( ) . isEmpty ( ) ) { warn ( false , "Executing fault handler due to exception encountered" , synCtx ) ; ( ( FaultHandler ) synCtx . getFaultStack ( ) . pop ( ) ) . handleFault ( synCtx , syne ) ; } else { warn ( false , "Exception encountered but no fault handler found - " + "message dropped" , synCtx ) ; } } catch ( Exception e ) { String msg = "Unexpected error executing task/async inject" ; log . error ( msg , e ) ; if ( synCtx . getServiceLog ( ) != null ) { synCtx . getServiceLog ( ) . error ( msg , e ) ; } if ( ! synCtx . getFaultStack ( ) . isEmpty ( ) ) { warn ( false , "Executing fault handler due to exception encountered" , synCtx ) ; ( ( FaultHandler ) synCtx . getFaultStack ( ) . pop ( ) ) . handleFault ( synCtx , e ) ; } else { warn ( false , "Exception encountered but no fault handler found - " + "message dropped" , synCtx ) ; } } synCtx = null ; seq = null ; } private void warn ( boolean traceOn , String msg , MessageContext msgContext ) { if ( traceOn ) { trace . warn ( msg ) ; } if ( log . isDebugEnabled ( ) ) { log . warn ( msg ) ; } if ( msgContext . getServiceLog ( ) != null ) { msgContext . getServiceLog ( ) . warn ( msg ) ; } } } 	0	['5', '1', '0', '7', '18', '0', '1', '6', '3', '0.5', '153', '1', '2', '0', '0.5', '0', '0', '28.8', '4', '1.6', '0']
package org . apache . synapse . mediators . annotations ; import static java . lang . annotation . ElementType . METHOD ; import static java . lang . annotation . RetentionPolicy . RUNTIME ; import java . lang . annotation . Retention ; import java . lang . annotation . Target ; @ Target ( { METHOD } ) @ Retention ( RUNTIME ) public @ interface Execute { } 	0	['0', '1', '0', '0', '0', '0', '0', '0', '0', '2', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0']
package org . apache . synapse . config . xml ; import org . apache . axiom . om . OMAttribute ; import org . apache . axiom . om . OMElement ; import org . apache . synapse . Mediator ; import org . apache . synapse . mediators . builtin . ValidateMediator ; import org . jaxen . JaxenException ; import org . xml . sax . SAXException ; import javax . xml . namespace . QName ; import java . util . ArrayList ; import java . util . Iterator ; import java . util . List ; public class ValidateMediatorFactory extends AbstractListMediatorFactory { private static final QName VALIDATE_Q = new QName ( XMLConfigConstants . SYNAPSE_NAMESPACE , "validate" ) ; private static final QName ON_FAIL_Q = new QName ( XMLConfigConstants . SYNAPSE_NAMESPACE , "on-fail" ) ; private static final QName SCHEMA_Q = new QName ( XMLConfigConstants . SYNAPSE_NAMESPACE , "schema" ) ; public Mediator createMediator ( OMElement elem ) { ValidateMediator validateMediator = new ValidateMediator ( ) ; List < String > schemaKeys = new ArrayList < String > ( ) ; Iterator schemas = elem . getChildrenWithName ( SCHEMA_Q ) ; while ( schemas . hasNext ( ) ) { Object o = schemas . next ( ) ; if ( o instanceof OMElement ) { OMElement omElem = ( OMElement ) o ; OMAttribute keyAtt = omElem . getAttribute ( ATT_KEY ) ; if ( keyAtt != null ) { schemaKeys . add ( keyAtt . getAttributeValue ( ) ) ; } else { handleException ( "A 'schema' definition must contain a local property 'key'" ) ; } } else { handleException ( "Invalid 'schema' declaration for validate mediator" ) ; } } if ( schemaKeys . size ( ) == 0 ) { handleException ( "No schemas specified for the validate mediator" ) ; } else { validateMediator . setSchemaKeys ( schemaKeys ) ; } OMAttribute attSource = elem . getAttribute ( ATT_SOURCE ) ; if ( attSource != null ) { try { validateMediator . setSource ( SynapseXPathFactory . getSynapseXPath ( elem , ATT_SOURCE ) ) ; } catch ( JaxenException e ) { handleException ( "Invalid XPath expression specified for attribute 'source'" , e ) ; } } OMElement onFail = null ; Iterator iterator = elem . getChildrenWithName ( ON_FAIL_Q ) ; if ( iterator . hasNext ( ) ) { onFail = ( OMElement ) iterator . next ( ) ; } if ( onFail != null && onFail . getChildElements ( ) . hasNext ( ) ) { addChildren ( onFail , validateMediator ) ; } else { handleException ( "A non-empty <on-fail> child element is required for " + "the <validate> mediator" ) ; } processTraceState ( validateMediator , elem ) ; Iterator iter = elem . getChildrenWithName ( FEATURE_Q ) ; while ( iter . hasNext ( ) ) { OMElement featureElem = ( OMElement ) iter . next ( ) ; OMAttribute attName = featureElem . getAttribute ( ATT_NAME ) ; OMAttribute attValue = featureElem . getAttribute ( ATT_VALUE ) ; if ( attName != null && attValue != null ) { String name = attName . getAttributeValue ( ) ; String value = attValue . getAttributeValue ( ) ; if ( name != null && value != null ) { try { if ( "true" . equals ( value . trim ( ) ) ) { validateMediator . addFeature ( name . trim ( ) , true ) ; } else if ( "false" . equals ( value . trim ( ) ) ) { validateMediator . addFeature ( name . trim ( ) , false ) ; } else { handleException ( "The feature must have value true or false" ) ; } } catch ( SAXException e ) { handleException ( "Error setting validation feature : " + name + " to : " + value , e ) ; } } else { handleException ( "The valid values for both of the name and value are need" ) ; } } else { handleException ( "Both of the name and value attribute are required for a feature" ) ; } } return validateMediator ; } public QName getTagQName ( ) { return VALIDATE_Q ; } } 	0	['4', '3', '0', '9', '29', '2', '0', '9', '3', '0.666666667', '218', '1', '0', '0.666666667', '0.666666667', '0', '0', '52.75', '16', '4.25', '0']
package org . apache . synapse . core . axis2 ; import org . apache . axis2 . AxisFault ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import org . apache . synapse . SynapseConstants ; import org . apache . synapse . MessageContext ; import org . apache . synapse . SynapseException ; import org . apache . synapse . config . SynapseConfiguration ; import org . apache . synapse . core . SynapseEnvironment ; public class MessageContextCreatorForAxis2 { private static final Log log = LogFactory . getLog ( MessageContextCreatorForAxis2 . class ) ; private static SynapseConfiguration synCfg = null ; private static SynapseEnvironment synEnv = null ; public static MessageContext getSynapseMessageContext ( org . apache . axis2 . context . MessageContext axisMsgCtx ) throws AxisFault { if ( synCfg == null || synEnv == null ) { String msg = "Synapse environment has not initialized properly.." ; log . fatal ( msg ) ; throw new SynapseException ( msg ) ; } return new Axis2MessageContext ( axisMsgCtx , synCfg , synEnv ) ; } public static void setSynConfig ( SynapseConfiguration synCfg ) { MessageContextCreatorForAxis2 . synCfg = synCfg ; } public static void setSynEnv ( SynapseEnvironment synEnv ) { MessageContextCreatorForAxis2 . synEnv = synEnv ; } } 	0	['5', '1', '0', '12', '10', '0', '3', '9', '4', '0.583333333', '46', '1', '2', '0', '0.25', '0', '0', '7.6', '1', '0.6', '0']
package org . apache . synapse . endpoints ; import org . apache . axis2 . clustering . ClusterManager ; import org . apache . axis2 . context . ConfigurationContext ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import org . apache . synapse . FaultHandler ; import org . apache . synapse . MessageContext ; import org . apache . synapse . SynapseConstants ; import org . apache . synapse . core . axis2 . Axis2MessageContext ; import java . util . List ; public class FailoverEndpoint implements Endpoint { private static final Log log = LogFactory . getLog ( FailoverEndpoint . class ) ; private String name = null ; private List < Endpoint > endpoints = null ; private Endpoint currentEndpoint = null ; private Endpoint parentEndpoint = null ; private final EndpointContext endpointContext = new EndpointContext ( ) ; public void send ( MessageContext synMessageContext ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Start : Failover Endpoint" ) ; } boolean isClusteringEnable = false ; org . apache . axis2 . context . MessageContext axisMC = ( ( Axis2MessageContext ) synMessageContext ) . getAxis2MessageContext ( ) ; ConfigurationContext cc = axisMC . getConfigurationContext ( ) ; ClusterManager clusterManager = cc . getAxisConfiguration ( ) . getClusterManager ( ) ; if ( clusterManager != null && clusterManager . getContextManager ( ) != null ) { isClusteringEnable = true ; } String endPointName = this . getName ( ) ; if ( endPointName == null ) { if ( log . isDebugEnabled ( ) && isClusteringEnable ) { log . warn ( "In a clustering environment , the endpoint  name should be specified" + "even for anonymous endpoints. Otherwise , the clustering would not be " + "functioned correctly if there are more than one anonymous endpoints. " ) ; } endPointName = SynapseConstants . ANONYMOUS_ENDPOINT ; } if ( isClusteringEnable ) { if ( endpointContext . getConfigurationContext ( ) == null ) { endpointContext . setConfigurationContext ( cc ) ; endpointContext . setContextID ( endPointName ) ; } } synMessageContext . getEnvelope ( ) . build ( ) ; if ( currentEndpoint . isActive ( synMessageContext ) ) { currentEndpoint . send ( synMessageContext ) ; } else { boolean foundEndpoint = false ; for ( Endpoint endpoint : endpoints ) { if ( endpoint . isActive ( synMessageContext ) ) { foundEndpoint = true ; currentEndpoint = endpoint ; currentEndpoint . send ( synMessageContext ) ; break ; } } if ( ! foundEndpoint ) { setActive ( false , synMessageContext ) ; if ( parentEndpoint != null ) { parentEndpoint . onChildEndpointFail ( this , synMessageContext ) ; } else { Object o = synMessageContext . getFaultStack ( ) . pop ( ) ; if ( o != null ) { ( ( FaultHandler ) o ) . handleFault ( synMessageContext ) ; } } } } } public String getName ( ) { return this . name ; } public void setName ( String name ) { this . name = name . trim ( ) ; } public boolean isActive ( MessageContext synMessageContext ) { boolean active = endpointContext . isActive ( ) ; if ( ! active ) { for ( Endpoint endpoint : endpoints ) { if ( endpoint . isActive ( synMessageContext ) ) { active = true ; endpointContext . setActive ( true ) ; } } } if ( log . isDebugEnabled ( ) ) { log . debug ( "Endpoint  '" + name + "' is in state ' " + active + " '" ) ; } return active ; } public void setActive ( boolean active , MessageContext synMessageContext ) { this . endpointContext . setActive ( active ) ; } public List < Endpoint > getEndpoints ( ) { return endpoints ; } public void setEndpoints ( List < Endpoint > endpoints ) { this . endpoints = endpoints ; if ( endpoints . size ( ) > 0 ) { currentEndpoint = endpoints . get ( 0 ) ; } } public void onChildEndpointFail ( Endpoint endpoint , MessageContext synMessageContext ) { send ( synMessageContext ) ; } public void setParentEndpoint ( Endpoint parentEndpoint ) { this . parentEndpoint = parentEndpoint ; } } 	0	['11', '1', '0', '16', '45', '11', '3', '13', '10', '0.616666667', '250', '1', '3', '0', '0.316666667', '0', '0', '21.18181818', '14', '2.3636', '0']
package org . apache . synapse . config . xml ; import javax . xml . namespace . QName ; import org . apache . axiom . om . OMElement ; import org . apache . synapse . Startup ; public interface StartupFactory { public Startup createStartup ( OMElement elem ) ; public QName getTagQName ( ) ; public Class getSerializerClass ( ) ; } 	0	['3', '1', '0', '4', '3', '3', '2', '2', '3', '2', '3', '0', '0', '0', '0.666666667', '0', '0', '0', '1', '1', '0']
package org . apache . synapse . util . xpath ; import org . apache . synapse . MessageContext ; import org . apache . synapse . mediators . GetPropertyFunction ; import org . jaxen . Function ; import org . jaxen . FunctionContext ; import org . jaxen . UnresolvableException ; public class SynapseXPathFunctionContext implements FunctionContext { private final FunctionContext parent ; private final MessageContext synCtx ; public SynapseXPathFunctionContext ( FunctionContext parent , MessageContext synCtx ) { this . parent = parent ; this . synCtx = synCtx ; } public Function getFunction ( String namespaceURI , String prefix , String localName ) throws UnresolvableException { if ( localName != null && SynapseXPathConstants . GET_PROPERTY_FUNCTION . equals ( localName ) ) { GetPropertyFunction getPropertyFunc = new GetPropertyFunction ( ) ; getPropertyFunc . setSynCtx ( synCtx ) ; return getPropertyFunc ; } return parent . getFunction ( namespaceURI , prefix , localName ) ; } } 	0	['2', '1', '0', '6', '7', '0', '1', '5', '2', '0', '36', '1', '1', '0', '0.625', '0', '0', '16', '1', '0.5', '0']
package org . apache . synapse . config . xml ; import org . apache . axiom . om . OMElement ; import org . apache . synapse . Mediator ; import org . apache . synapse . mediators . eip . splitter . CloneMediator ; import org . apache . synapse . mediators . eip . Target ; import java . util . Iterator ; public class CloneMediatorSerializer extends AbstractMediatorSerializer { public OMElement serializeMediator ( OMElement parent , Mediator m ) { OMElement cloneElem = fac . createOMElement ( "clone" , synNS ) ; saveTracingState ( cloneElem , m ) ; CloneMediator clone = ( CloneMediator ) m ; if ( clone . isContinueParent ( ) ) { cloneElem . addAttribute ( "continueParent" , Boolean . toString ( true ) , nullNS ) ; } for ( Iterator itr = clone . getTargets ( ) . iterator ( ) ; itr . hasNext ( ) ; ) { Object o = itr . next ( ) ; if ( o instanceof Target ) { cloneElem . addChild ( TargetSerializer . serializeTarget ( ( Target ) o ) ) ; } } if ( parent != null ) { parent . addChild ( cloneElem ) ; } return cloneElem ; } public String getMediatorClassName ( ) { return CloneMediator . class . getName ( ) ; } } 	0	['3', '2', '0', '10', '16', '3', '0', '10', '3', '2', '56', '0', '0', '0.75', '0.555555556', '0', '0', '17.66666667', '4', '1.6667', '0']
package org . apache . synapse . config . xml ; import org . apache . axiom . om . OMElement ; import org . apache . synapse . Mediator ; import org . apache . synapse . mediators . filters . FilterMediator ; public class FilterMediatorSerializer extends AbstractListMediatorSerializer { public OMElement serializeMediator ( OMElement parent , Mediator m ) { if ( ! ( m instanceof FilterMediator ) ) { handleException ( "Unsupported mediator passed in for serialization : " + m . getType ( ) ) ; } FilterMediator mediator = ( FilterMediator ) m ; OMElement filter = fac . createOMElement ( "filter" , synNS ) ; if ( mediator . getSource ( ) != null && mediator . getRegex ( ) != null ) { SynapseXPathSerializer . serializeXPath ( mediator . getSource ( ) , filter , "source" ) ; filter . addAttribute ( fac . createOMAttribute ( "regex" , nullNS , mediator . getRegex ( ) . pattern ( ) ) ) ; } else if ( mediator . getXpath ( ) != null ) { SynapseXPathSerializer . serializeXPath ( mediator . getXpath ( ) , filter , "xpath" ) ; } else { handleException ( "Invalid filter mediator. " + "Should have either a 'source' and a 'regex' OR an 'xpath' " ) ; } saveTracingState ( filter , mediator ) ; if ( mediator . isThenElementPresent ( ) ) { OMElement thenElem = fac . createOMElement ( "then" , synNS ) ; filter . addChild ( thenElem ) ; if ( mediator . getThenKey ( ) != null ) { thenElem . addAttribute ( fac . createOMAttribute ( "sequence" , nullNS , mediator . getThenKey ( ) ) ) ; } else { serializeChildren ( thenElem , mediator . getList ( ) ) ; } if ( mediator . getElseMediator ( ) != null || mediator . getElseKey ( ) != null ) { OMElement elseElem = fac . createOMElement ( "else" , synNS ) ; filter . addChild ( elseElem ) ; if ( mediator . getElseKey ( ) != null ) { elseElem . addAttribute ( fac . createOMAttribute ( "sequence" , nullNS , mediator . getElseKey ( ) ) ) ; } else { serializeChildren ( elseElem , mediator . getElseMediator ( ) . getList ( ) ) ; } } } else { serializeChildren ( filter , mediator . getList ( ) ) ; } if ( parent != null ) { parent . addChild ( filter ) ; } return filter ; } public String getMediatorClassName ( ) { return FilterMediator . class . getName ( ) ; } } 	0	['3', '3', '0', '11', '27', '3', '0', '11', '3', '2', '145', '0', '0', '0.777777778', '0.555555556', '0', '0', '47.33333333', '10', '3.6667', '0']
package org . apache . synapse . metrics ; public class Counter { private long count = 0 ; public synchronized void increment ( ) { count ++ ; } public long getCount ( ) { return count ; } } 	0	['3', '1', '0', '2', '4', '0', '2', '0', '3', '0', '20', '1', '0', '0', '1', '0', '0', '5.333333333', '1', '0.6667', '0']
package org . apache . synapse . config . xml ; import org . apache . axiom . om . OMElement ; import org . apache . synapse . Mediator ; import org . apache . synapse . SynapseConstants ; import org . apache . synapse . mediators . db . DBLookupMediator ; import javax . xml . namespace . QName ; public class DBLookupMediatorFactory extends AbstractDBMediatorFactory { private static final QName DBLOOKUP_Q = new QName ( SynapseConstants . SYNAPSE_NAMESPACE , "dblookup" ) ; public Mediator createMediator ( OMElement elem ) { DBLookupMediator mediator = new DBLookupMediator ( ) ; buildDataSource ( elem , mediator ) ; processStatements ( elem , mediator ) ; return mediator ; } public QName getTagQName ( ) { return DBLOOKUP_Q ; } } 	0	['4', '3', '0', '5', '9', '4', '0', '5', '3', '0.666666667', '31', '1', '0', '0.818181818', '0.666666667', '0', '0', '6.5', '1', '0.5', '0']
package org . apache . synapse . config . xml ; import org . apache . axiom . om . OMAttribute ; import org . apache . axiom . om . OMElement ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import org . apache . synapse . SynapseException ; import org . apache . synapse . util . xpath . SynapseXPath ; import org . jaxen . JaxenException ; import javax . xml . namespace . QName ; public class SynapseXPathFactory { private static final Log log = LogFactory . getLog ( SynapseXPathFactory . class ) ; public static SynapseXPath getSynapseXPath ( OMElement elem , QName attribName ) throws JaxenException { SynapseXPath xpath = null ; OMAttribute xpathAttrib = elem . getAttribute ( attribName ) ; if ( xpathAttrib != null && xpathAttrib . getAttributeValue ( ) != null ) { xpath = new SynapseXPath ( xpathAttrib . getAttributeValue ( ) ) ; OMElementUtils . addNameSpaces ( xpath , elem , log ) ; } else { handleException ( "Couldn't find the XPath attribute with the QName : " + attribName . toString ( ) + " in the element : " + elem . toString ( ) ) ; } return xpath ; } private static void handleException ( String message ) { log . error ( message ) ; throw new SynapseException ( message ) ; } } 	0	['4', '1', '0', '24', '17', '0', '15', '9', '2', '0.333333333', '59', '1', '0', '0', '0.333333333', '0', '0', '13.5', '1', '0.5', '0']
package org . apache . synapse . config . xml ; import org . apache . synapse . config . XMLToObjectMapper ; import org . apache . synapse . config . Entry ; import org . apache . synapse . SynapseException ; import org . apache . axiom . om . OMNode ; import org . apache . axiom . om . OMElement ; import org . apache . axiom . om . OMAttribute ; import org . apache . axiom . om . OMText ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import javax . xml . namespace . QName ; import java . net . URL ; import java . net . MalformedURLException ; public class EntryFactory implements XMLToObjectMapper { private static Log log = LogFactory . getLog ( EntryFactory . class ) ; public static Entry createEntry ( OMElement elem ) { OMAttribute key = elem . getAttribute ( new QName ( XMLConfigConstants . NULL_NAMESPACE , "key" ) ) ; if ( key == null ) { handleException ( "The 'key' attribute is required for a local registry entry" ) ; return null ; } else { Entry entry = new Entry ( key . getAttributeValue ( ) ) ; String src = elem . getAttributeValue ( new QName ( XMLConfigConstants . NULL_NAMESPACE , "src" ) ) ; if ( src != null ) { try { entry . setSrc ( new URL ( src . trim ( ) ) ) ; entry . setType ( Entry . URL_SRC ) ; entry . setValue ( org . apache . synapse . config . SynapseConfigUtils . getObject ( entry . getSrc ( ) ) ) ; } catch ( MalformedURLException e ) { handleException ( "The entry with key : " + key + " refers to an invalid URL" ) ; } } else { OMNode nodeValue = elem . getFirstOMChild ( ) ; OMElement elemValue = elem . getFirstElement ( ) ; if ( elemValue != null ) { entry . setType ( Entry . INLINE_XML ) ; entry . setValue ( elemValue ) ; } else if ( nodeValue != null && nodeValue instanceof OMText ) { entry . setType ( Entry . INLINE_TEXT ) ; entry . setValue ( ( ( OMText ) nodeValue ) . getText ( ) . trim ( ) ) ; } } return entry ; } } private static void handleException ( String msg ) { log . error ( msg ) ; throw new SynapseException ( msg ) ; } public Object getObjectFromOMNode ( OMNode om ) { if ( om instanceof OMElement ) { return createEntry ( ( OMElement ) om ) ; } else { handleException ( "Invalid XML configuration for an Entry. OMElement expected" ) ; } return null ; } } 	0	['5', '1', '0', '11', '28', '8', '1', '10', '3', '0.25', '122', '1', '0', '0', '0.3125', '0', '0', '23.2', '6', '1.8', '0']
package org . apache . synapse . statistics ; import org . apache . synapse . SynapseConstants ; import java . util . * ; public class StatisticsCollector { private Map sequenceStatistics = Collections . synchronizedMap ( new HashMap ( ) ) ; private Map endpointStatistics = Collections . synchronizedMap ( new HashMap ( ) ) ; private Map proxyServicesStatistics = Collections . synchronizedMap ( new HashMap ( ) ) ; public void reportForEndPoint ( String keyOfStatistic , boolean isResponse , long inTime , long outTime , boolean isFault ) { StatisticsHolder statisticsHolder = ( StatisticsHolder ) endpointStatistics . get ( keyOfStatistic ) ; if ( statisticsHolder == null ) { statisticsHolder = new StatisticsHolder ( ) ; statisticsHolder . setKey ( keyOfStatistic ) ; statisticsHolder . setStatisticsCategory ( SynapseConstants . ENDPOINT_STATISTICS ) ; endpointStatistics . put ( keyOfStatistic , statisticsHolder ) ; } statisticsHolder . update ( isResponse , inTime , outTime , isFault ) ; } public void reportForProxyService ( String keyOfStatistic , boolean isResponse , long inTime , long outTime , boolean isFault ) { StatisticsHolder statisticsHolder = ( StatisticsHolder ) proxyServicesStatistics . get ( keyOfStatistic ) ; if ( statisticsHolder == null ) { statisticsHolder = new StatisticsHolder ( ) ; statisticsHolder . setKey ( keyOfStatistic ) ; statisticsHolder . setStatisticsCategory ( SynapseConstants . PROXYSERVICE_STATISTICS ) ; proxyServicesStatistics . put ( keyOfStatistic , statisticsHolder ) ; } statisticsHolder . update ( isResponse , inTime , outTime , isFault ) ; } public void reportForSequence ( String keyOfStatistic , boolean isResponse , long inTime , long outTime , boolean isFault ) { StatisticsHolder statisticsHolder = ( StatisticsHolder ) sequenceStatistics . get ( keyOfStatistic ) ; if ( statisticsHolder == null ) { statisticsHolder = new StatisticsHolder ( ) ; statisticsHolder . setKey ( keyOfStatistic ) ; statisticsHolder . setStatisticsCategory ( SynapseConstants . SEQUENCE_STATISTICS ) ; sequenceStatistics . put ( keyOfStatistic , statisticsHolder ) ; } statisticsHolder . update ( isResponse , inTime , outTime , isFault ) ; } public Map getSequenceStatistics ( ) { return sequenceStatistics ; } public Map getProxyServiceStatistics ( ) { return proxyServicesStatistics ; } public Map getEndPointStatistics ( ) { return endpointStatistics ; } public void resetSequenceStatistics ( ) { this . sequenceStatistics . clear ( ) ; } public void resetProxyServiceStatistics ( ) { this . proxyServicesStatistics . clear ( ) ; } public void resetEndPointStatistics ( ) { this . endpointStatistics . clear ( ) ; } } 	0	['10', '1', '0', '8', '20', '9', '7', '1', '10', '0.666666667', '148', '1', '0', '0', '0.475', '0', '0', '13.5', '2', '1.2', '0']
package org . apache . synapse . config . xml ; import org . apache . axiom . om . OMElement ; import org . apache . synapse . Mediator ; public interface MediatorSerializer { public OMElement serializeMediator ( OMElement parent , Mediator m ) ; public String getMediatorClassName ( ) ; } 	0	['2', '1', '0', '8', '2', '1', '6', '2', '2', '2', '2', '0', '0', '0', '0.666666667', '0', '0', '0', '1', '1', '0']
package org . apache . synapse . core . axis2 ; import org . apache . axis2 . AxisFault ; import org . apache . axis2 . context . MessageContext ; import org . apache . axis2 . description . AxisOperation ; import org . apache . axis2 . description . AxisService ; import org . apache . axis2 . description . HandlerDescription ; import org . apache . axis2 . engine . AbstractDispatcher ; import org . apache . axis2 . engine . AxisConfiguration ; import org . apache . synapse . SynapseConstants ; import javax . xml . namespace . QName ; public class SynapseDispatcher extends AbstractDispatcher { public void initDispatcher ( ) { QName qn = new QName ( "http://synapse.apache.org" , "SynapseDispatcher" ) ; HandlerDescription hd = new HandlerDescription ( qn . getLocalPart ( ) ) ; super . init ( hd ) ; } public AxisService findService ( MessageContext mc ) throws AxisFault { AxisConfiguration ac = mc . getConfigurationContext ( ) . getAxisConfiguration ( ) ; return ac . getService ( SynapseConstants . SYNAPSE_SERVICE_NAME ) ; } public AxisOperation findOperation ( AxisService svc , MessageContext mc ) throws AxisFault { return svc . getOperation ( SynapseConstants . SYNAPSE_OPERATION_NAME ) ; } } 	0	['4', '3', '0', '9', '13', '6', '0', '9', '4', '2', '35', '0', '0', '0.8', '0.583333333', '2', '2', '7.75', '1', '0.75', '0']
package org . apache . synapse . mediators ; import org . apache . synapse . Mediator ; import java . util . List ; public interface ListMediator extends Mediator { public boolean addChild ( Mediator m ) ; public boolean addAll ( List < Mediator > c ) ; public Mediator getChild ( int pos ) ; public boolean removeChild ( Mediator m ) ; public Mediator removeChild ( int pos ) ; public List getList ( ) ; } 	0	['6', '1', '0', '13', '6', '15', '12', '1', '6', '2', '6', '0', '0', '0', '0.458333333', '0', '0', '0', '1', '1', '0']
package org . apache . synapse . config . xml ; import org . apache . axiom . om . OMAttribute ; import org . apache . axiom . om . OMElement ; import org . apache . synapse . SynapseException ; import org . apache . synapse . Mediator ; import org . apache . synapse . mediators . base . SequenceMediator ; import javax . xml . namespace . QName ; public class SequenceMediatorFactory extends AbstractListMediatorFactory { private static final QName SEQUENCE_Q = new QName ( XMLConfigConstants . SYNAPSE_NAMESPACE , "sequence" ) ; public QName getTagQName ( ) { return SEQUENCE_Q ; } public SequenceMediator createAnonymousSequence ( OMElement elem ) { SequenceMediator seqMediator = new SequenceMediator ( ) ; OMAttribute e = elem . getAttribute ( ATT_ONERROR ) ; if ( e != null ) { seqMediator . setErrorHandler ( e . getAttributeValue ( ) ) ; } processTraceState ( seqMediator , elem ) ; addChildren ( elem , seqMediator ) ; OMAttribute statistics = elem . getAttribute ( ATT_STATS ) ; if ( statistics != null ) { String statisticsValue = statistics . getAttributeValue ( ) ; if ( statisticsValue != null ) { if ( XMLConfigConstants . STATISTICS_ENABLE . equals ( statisticsValue ) ) { seqMediator . setStatisticsState ( org . apache . synapse . SynapseConstants . STATISTICS_ON ) ; } else if ( XMLConfigConstants . STATISTICS_DISABLE . equals ( statisticsValue ) ) { seqMediator . setStatisticsState ( org . apache . synapse . SynapseConstants . STATISTICS_OFF ) ; } } } return seqMediator ; } public Mediator createMediator ( OMElement elem ) { SequenceMediator seqMediator = new SequenceMediator ( ) ; OMAttribute n = elem . getAttribute ( ATT_NAME ) ; OMAttribute e = elem . getAttribute ( ATT_ONERROR ) ; if ( n != null ) { seqMediator . setName ( n . getAttributeValue ( ) ) ; if ( e != null ) { seqMediator . setErrorHandler ( e . getAttributeValue ( ) ) ; } processTraceState ( seqMediator , elem ) ; addChildren ( elem , seqMediator ) ; } else { n = elem . getAttribute ( ATT_KEY ) ; if ( n != null ) { seqMediator . setKey ( n . getAttributeValue ( ) ) ; if ( e != null ) { String msg = "A sequence mediator with a reference to another " + "sequence can not have 'ErrorHandler'" ; log . error ( msg ) ; throw new SynapseException ( msg ) ; } } else { String msg = "A sequence mediator should be a named sequence or a reference " + "to another sequence (i.e. a name attribute or key attribute is required)" ; log . error ( msg ) ; throw new SynapseException ( msg ) ; } } OMAttribute statistics = elem . getAttribute ( ATT_STATS ) ; if ( statistics != null ) { String statisticsValue = statistics . getAttributeValue ( ) ; if ( statisticsValue != null ) { if ( XMLConfigConstants . STATISTICS_ENABLE . equals ( statisticsValue ) ) { seqMediator . setStatisticsState ( org . apache . synapse . SynapseConstants . STATISTICS_ON ) ; } else if ( XMLConfigConstants . STATISTICS_DISABLE . equals ( statisticsValue ) ) { seqMediator . setStatisticsState ( org . apache . synapse . SynapseConstants . STATISTICS_OFF ) ; } } } return seqMediator ; } } 	0	['5', '3', '0', '12', '19', '6', '4', '8', '4', '0.75', '159', '1', '0', '0.571428571', '0.75', '0', '0', '30.6', '9', '3.2', '0']
package org . apache . synapse . statistics . impl ; import org . apache . synapse . statistics . StatisticsStack ; import org . apache . synapse . statistics . StatisticsCollector ; import java . util . ArrayList ; import java . util . Iterator ; import java . util . List ; public class SequenceStatisticsStack implements StatisticsStack { private List sequenceStatisticsList = new ArrayList ( ) ; public void put ( String sequenceName , long initTime , boolean isInFlow , boolean isStatisticsEnable , boolean isFault ) { sequenceStatisticsList . add ( new SequenceStatistics ( sequenceName , initTime , isInFlow , isStatisticsEnable , isFault ) ) ; } public void reportToStatisticsCollector ( StatisticsCollector statisticsCollector , boolean isFault ) { int top = sequenceStatisticsList . size ( ) ; if ( top > 0 ) { popSequenceStatistics ( sequenceStatisticsList . size ( ) - 1 , statisticsCollector ) ; } } public void reportToStatisticsCollector ( StatisticsCollector statisticsCollector , boolean isFault , String name ) { if ( ! sequenceStatisticsList . isEmpty ( ) ) { List tobeRemoved = new ArrayList ( ) ; for ( Iterator seqIterator = sequenceStatisticsList . iterator ( ) ; seqIterator . hasNext ( ) ; ) { SequenceStatistics sequenceStatistics = ( SequenceStatistics ) seqIterator . next ( ) ; if ( sequenceStatistics != null ) { if ( sequenceStatistics . isStatisticsEnable && sequenceStatistics . sequenceName != null && sequenceStatistics . sequenceName . equals ( name ) ) { statisticsCollector . reportForSequence ( sequenceStatistics . sequenceName , ! sequenceStatistics . isInFlow , sequenceStatistics . initTime , System . currentTimeMillis ( ) , sequenceStatistics . isFault ) ; } tobeRemoved . add ( sequenceStatistics ) ; } } sequenceStatisticsList . removeAll ( tobeRemoved ) ; } } public void reportAllToStatisticsCollector ( StatisticsCollector statisticsCollector , boolean isFault ) { int i = sequenceStatisticsList . size ( ) - 1 ; for ( ; i >= 0 ; i -- ) { popSequenceStatistics ( i , statisticsCollector ) ; } } private void popSequenceStatistics ( int index , StatisticsCollector statisticsCollector ) { if ( index >= 0 ) { SequenceStatistics sequenceStatistics = ( SequenceStatistics ) sequenceStatisticsList . get ( index ) ; if ( sequenceStatistics != null ) { if ( sequenceStatistics . isStatisticsEnable && sequenceStatistics . sequenceName != null ) { statisticsCollector . reportForSequence ( sequenceStatistics . sequenceName , ! sequenceStatistics . isInFlow , sequenceStatistics . initTime , System . currentTimeMillis ( ) , sequenceStatistics . isFault ) ; } sequenceStatisticsList . remove ( index ) ; } } } class SequenceStatistics { String sequenceName ; long initTime ; boolean isInFlow ; boolean isStatisticsEnable ; private boolean isFault ; public SequenceStatistics ( String sequenceName , long initTime , boolean inFlow , boolean statisticsEnable , boolean isFault ) { this . sequenceName = sequenceName ; this . initTime = initTime ; isInFlow = inFlow ; isStatisticsEnable = statisticsEnable ; this . isFault = isFault ; } public boolean equals ( Object o ) { if ( this == o ) return true ; if ( o == null || getClass ( ) != o . getClass ( ) ) return false ; final SequenceStatistics that = ( SequenceStatistics ) o ; if ( ! sequenceName . equals ( that . sequenceName ) ) return false ; return true ; } public int hashCode ( ) { return sequenceName . hashCode ( ) ; } } } 	0	['6', '1', '0', '6', '22', '0', '4', '3', '5', '0', '154', '1', '0', '0', '0.5', '0', '0', '24.5', '7', '3', '0']
package org . apache . synapse . config . xml ; import org . apache . synapse . Mediator ; import org . apache . synapse . mediators . builtin . CacheMediator ; import org . apache . axiom . om . OMElement ; import org . apache . axiom . om . OMAttribute ; import org . wso2 . caching . CachingConstants ; import org . wso2 . caching . digest . DigestGenerator ; import javax . xml . namespace . QName ; import java . util . Iterator ; public class CacheMediatorFactory extends AbstractMediatorFactory { private static final QName CACHE_Q = new QName ( XMLConfigConstants . SYNAPSE_NAMESPACE , "cache" ) ; private static final QName ATT_ID = new QName ( "id" ) ; private static final QName ATT_COLLECTOR = new QName ( "collector" ) ; private static final QName ATT_HASH_GENERATOR = new QName ( "hashGenerator" ) ; private static final QName ATT_MAX_MSG_SIZE = new QName ( "maxMessageSize" ) ; private static final QName ATT_TIMEOUT = new QName ( "timeout" ) ; private static final QName ATT_SCOPE = new QName ( "scope" ) ; private static final QName ATT_SEQUENCE = new QName ( "sequence" ) ; private static final QName ATT_TYPE = new QName ( "type" ) ; private static final QName ATT_SIZE = new QName ( "maxSize" ) ; private static final QName ON_CACHE_HIT_Q = new QName ( XMLConfigConstants . SYNAPSE_NAMESPACE , "onCacheHit" ) ; private static final QName IMPLEMENTATION_Q = new QName ( XMLConfigConstants . SYNAPSE_NAMESPACE , "implementation" ) ; private static final long DEFAULT_TIMEOUT = 5000L ; private static final int DEFAULT_DISK_CACHE_SIZE = 200 ; public Mediator createMediator ( OMElement elem ) { if ( ! CACHE_Q . equals ( elem . getQName ( ) ) ) { handleException ( "Unable to create the cache mediator. " + "Unexpected element as the cache mediator configuration" ) ; } CacheMediator cache = new CacheMediator ( ) ; OMAttribute idAttr = elem . getAttribute ( ATT_ID ) ; if ( idAttr != null && idAttr . getAttributeValue ( ) != null ) { cache . setId ( idAttr . getAttributeValue ( ) ) ; } OMAttribute scopeAttr = elem . getAttribute ( ATT_SCOPE ) ; if ( scopeAttr != null && scopeAttr . getAttributeValue ( ) != null && isValidScope ( scopeAttr . getAttributeValue ( ) , cache . getId ( ) ) ) { cache . setScope ( scopeAttr . getAttributeValue ( ) ) ; } else { cache . setScope ( CachingConstants . SCOPE_PER_HOST ) ; } OMAttribute collectorAttr = elem . getAttribute ( ATT_COLLECTOR ) ; if ( collectorAttr != null && collectorAttr . getAttributeValue ( ) != null && "true" . equals ( collectorAttr . getAttributeValue ( ) ) ) { cache . setCollector ( true ) ; } else { cache . setCollector ( false ) ; OMAttribute hashGeneratorAttr = elem . getAttribute ( ATT_HASH_GENERATOR ) ; if ( hashGeneratorAttr != null && hashGeneratorAttr . getAttributeValue ( ) != null ) { try { Class generator = Class . forName ( hashGeneratorAttr . getAttributeValue ( ) ) ; Object o = generator . newInstance ( ) ; if ( o instanceof DigestGenerator ) { cache . setDigestGenerator ( ( DigestGenerator ) o ) ; } else { handleException ( "Specified class for the hashGenerator is not a " + "DigestGenerator. It *must* implement " + "org.wso2.caching.digest.DigestGenerator interface" ) ; } } catch ( ClassNotFoundException e ) { handleException ( "Unable to load the hash generator class" , e ) ; } catch ( IllegalAccessException e ) { handleException ( "Unable to access the hash generator class" , e ) ; } catch ( InstantiationException e ) { handleException ( "Unable to instantiate the hash generator class" , e ) ; } } OMAttribute timeoutAttr = elem . getAttribute ( ATT_TIMEOUT ) ; if ( timeoutAttr != null && timeoutAttr . getAttributeValue ( ) != null ) { cache . setTimeout ( Long . parseLong ( timeoutAttr . getAttributeValue ( ) ) ) ; } else { cache . setTimeout ( DEFAULT_TIMEOUT ) ; } OMAttribute maxMessageSizeAttr = elem . getAttribute ( ATT_MAX_MSG_SIZE ) ; if ( maxMessageSizeAttr != null && maxMessageSizeAttr . getAttributeValue ( ) != null ) { cache . setMaxMessageSize ( Integer . parseInt ( maxMessageSizeAttr . getAttributeValue ( ) ) ) ; } OMElement onCacheHitElem = elem . getFirstChildWithName ( ON_CACHE_HIT_Q ) ; if ( onCacheHitElem != null ) { OMAttribute sequenceAttr = onCacheHitElem . getAttribute ( ATT_SEQUENCE ) ; if ( sequenceAttr != null && sequenceAttr . getAttributeValue ( ) != null ) { cache . setOnCacheHitRef ( sequenceAttr . getAttributeValue ( ) ) ; } else if ( onCacheHitElem . getFirstElement ( ) != null ) { cache . setOnCacheHitSequence ( new SequenceMediatorFactory ( ) . createAnonymousSequence ( onCacheHitElem ) ) ; } } for ( Iterator itr = elem . getChildrenWithName ( IMPLEMENTATION_Q ) ; itr . hasNext ( ) ; ) { OMElement implElem = ( OMElement ) itr . next ( ) ; OMAttribute typeAttr = implElem . getAttribute ( ATT_TYPE ) ; OMAttribute sizeAttr = implElem . getAttribute ( ATT_SIZE ) ; if ( typeAttr != null && typeAttr . getAttributeValue ( ) != null ) { String type = typeAttr . getAttributeValue ( ) ; if ( CachingConstants . TYPE_MEMORY . equals ( type ) && sizeAttr != null && sizeAttr . getAttributeValue ( ) != null ) { cache . setInMemoryCacheSize ( Integer . parseInt ( sizeAttr . getAttributeValue ( ) ) ) ; } else if ( CachingConstants . TYPE_DISK . equals ( type ) ) { log . warn ( "Disk based and hirearchycal caching is not implemented yet" ) ; if ( sizeAttr != null && sizeAttr . getAttributeValue ( ) != null ) { cache . setDiskCacheSize ( Integer . parseInt ( sizeAttr . getAttributeValue ( ) ) ) ; } else { cache . setDiskCacheSize ( DEFAULT_DISK_CACHE_SIZE ) ; } } else { handleException ( "unknown implementation type for the Cache mediator" ) ; } } } } return cache ; } private boolean isValidScope ( String scope , String id ) { if ( CachingConstants . SCOPE_PER_HOST . equals ( scope ) ) { return true ; } else if ( CachingConstants . SCOPE_PER_MEDIATOR . equals ( scope ) ) { if ( id != null ) { return true ; } else { handleException ( "Id is required for a cache wirth scope : " + scope ) ; return false ; } } else if ( CachingConstants . SCOPE_DISTRIBUTED . equals ( scope ) ) { handleException ( "Scope distributed is not supported yet by the Cache mediator" ) ; return false ; } else { handleException ( "Unknown scope " + scope + " for the Cache mediator" ) ; return false ; } } public QName getTagQName ( ) { return CACHE_Q ; } } 	0	['5', '2', '0', '9', '42', '4', '0', '9', '3', '0.803571429', '384', '1', '0', '0.5', '0.5', '0', '0', '73', '28', '6.8', '0']
package org . apache . synapse . startup . quartz ; import java . util . ArrayList ; import java . util . Iterator ; import java . util . List ; import java . util . StringTokenizer ; import javax . xml . namespace . QName ; import org . apache . axiom . om . OMAttribute ; import org . apache . axiom . om . OMElement ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import org . apache . synapse . config . xml . XMLConfigConstants ; import org . apache . synapse . config . xml . PropertyHelper ; import org . apache . synapse . config . xml . StartupFactory ; import org . apache . synapse . Startup ; import org . apache . synapse . SynapseException ; public class SimpleQuartzFactory implements StartupFactory { public final static QName TASK = new QName ( XMLConfigConstants . SYNAPSE_NAMESPACE , "task" ) ; private final static QName TRIGGER = new QName ( XMLConfigConstants . SYNAPSE_NAMESPACE , "trigger" ) ; private final static QName PROPERTY = new QName ( XMLConfigConstants . SYNAPSE_NAMESPACE , "property" ) ; private final static Log log = LogFactory . getLog ( SimpleQuartzFactory . class ) ; public Startup createStartup ( OMElement el ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Creating SimpleQuartz Task" ) ; } if ( el . getQName ( ) . equals ( TASK ) ) { SimpleQuartz q = new SimpleQuartz ( ) ; String name = el . getAttributeValue ( new QName ( XMLConfigConstants . NULL_NAMESPACE , "name" ) ) ; if ( name != null ) { q . setName ( name ) ; } else { handleException ( "Name for a task is required, missing name in the task" ) ; } OMAttribute classAttr = el . getAttribute ( new QName ( "class" ) ) ; if ( classAttr != null && classAttr . getAttributeValue ( ) != null ) { String classname = classAttr . getAttributeValue ( ) ; try { Class . forName ( classname ) . newInstance ( ) ; } catch ( Exception e ) { handleException ( "Failed to load task class " + classname , e ) ; } q . setJobClass ( classname ) ; } else { handleException ( "Syntax error in the Task : no task class specified" ) ; } OMAttribute pinnedServers = el . getAttribute ( new QName ( XMLConfigConstants . NULL_NAMESPACE , "pinnedServers" ) ) ; if ( pinnedServers != null ) { String pinnedServersValue = pinnedServers . getAttributeValue ( ) ; if ( pinnedServersValue == null ) { } else { StringTokenizer st = new StringTokenizer ( pinnedServersValue , " ," ) ; List pinnedServersList = new ArrayList ( ) ; while ( st . hasMoreTokens ( ) ) { String token = st . nextToken ( ) ; if ( token . length ( ) != 0 ) { pinnedServersList . add ( token ) ; } } q . setPinnedServers ( pinnedServersList ) ; } } Iterator it = el . getChildrenWithName ( PROPERTY ) ; while ( it . hasNext ( ) ) { OMElement prop = ( OMElement ) it . next ( ) ; if ( PropertyHelper . isStaticProperty ( prop ) ) { q . addProperty ( prop ) ; } else { handleException ( "Tasks does not support dynamic properties" ) ; } } OMElement trigger = el . getFirstChildWithName ( TRIGGER ) ; if ( trigger != null ) { OMAttribute count = trigger . getAttribute ( new QName ( "count" ) ) ; if ( count != null ) { try { q . setCount ( Integer . parseInt ( count . getAttributeValue ( ) ) ) ; } catch ( Exception e ) { handleException ( "Failed to parse trigger count as an integer" , e ) ; } } OMAttribute once = trigger . getAttribute ( new QName ( "once" ) ) ; if ( once != null && Boolean . TRUE . toString ( ) . equals ( once . getAttributeValue ( ) ) ) { q . setCount ( 1 ) ; q . setInterval ( 1 ) ; } OMAttribute repeatInterval = trigger . getAttribute ( new QName ( "interval" ) ) ; if ( repeatInterval == null && q . getCount ( ) > 1 ) { handleException ( "Trigger seems to be " + "a simple trigger, but no interval specified" ) ; } else if ( repeatInterval != null && repeatInterval . getAttributeValue ( ) != null ) { try { long repeatIntervalInSeconds = Long . parseLong ( repeatInterval . getAttributeValue ( ) ) ; long repeatIntervalInMillis = repeatIntervalInSeconds * 1000 ; q . setInterval ( repeatIntervalInMillis ) ; } catch ( Exception e ) { handleException ( "Failed to parse trigger interval as a long value" , e ) ; } } OMAttribute expr = trigger . getAttribute ( new QName ( "cron" ) ) ; if ( expr == null && q . getInterval ( ) == 0 ) { q . setCount ( 1 ) ; q . setInterval ( 1 ) ; } else if ( expr != null && q . getInterval ( ) > 0 ) { handleException ( "Trigger syntax error : " + "both cron and simple trigger attributes are present" ) ; } else if ( expr != null && expr . getAttributeValue ( ) != null ) { q . setCron ( expr . getAttributeValue ( ) ) ; } } else { q . setCount ( 1 ) ; q . setInterval ( 1 ) ; } return q ; } else { handleException ( "Syntax error in the task : wrong QName for the task" ) ; return null ; } } public Class getSerializerClass ( ) { return SimpleQuartzSerializer . class ; } public QName getTagQName ( ) { return TASK ; } private void handleException ( String message , Exception e ) { log . error ( message ) ; throw new SynapseException ( message , e ) ; } private void handleException ( String message ) { log . error ( message ) ; throw new SynapseException ( message ) ; } } 	0	['7', '1', '0', '9', '51', '5', '1', '9', '4', '0.708333333', '334', '0.75', '0', '0', '0.416666667', '0', '0', '46.14285714', '23', '3.8571', '0']
package org . apache . synapse . core . axis2 ; import org . apache . axis2 . client . async . AxisCallback ; import org . apache . synapse . MessageContext ; import org . apache . synapse . SynapseConstants ; public class AsyncCallback implements AxisCallback { MessageContext synapseOutMsgCtx = null ; private long timeOutOn ; private int timeOutAction = SynapseConstants . NONE ; public AsyncCallback ( MessageContext synapseOutMsgCtx ) { this . synapseOutMsgCtx = synapseOutMsgCtx ; } public void onMessage ( org . apache . axis2 . context . MessageContext messageContext ) { } public void onFault ( org . apache . axis2 . context . MessageContext messageContext ) { } public void onError ( Exception e ) { } public void onComplete ( ) { } public org . apache . synapse . MessageContext getSynapseOutMsgCtx ( ) { return synapseOutMsgCtx ; } public long getTimeOutOn ( ) { return timeOutOn ; } public void setTimeOutOn ( long timeOutOn ) { this . timeOutOn = timeOutOn ; } public int getTimeOutAction ( ) { return timeOutAction ; } public void setTimeOutAction ( int timeOutAction ) { this . timeOutAction = timeOutAction ; } } 	0	['10', '1', '0', '7', '11', '35', '4', '3', '10', '0.851851852', '46', '0.666666667', '1', '0', '0.266666667', '0', '0', '3.3', '1', '0.9', '0']
package org . apache . synapse . util ; import java . io . IOException ; import java . io . InputStream ; import java . io . OutputStream ; import java . net . MalformedURLException ; import java . net . URL ; import java . net . URLConnection ; import java . net . URLStreamHandler ; import org . apache . commons . lang . StringUtils ; public final class ClasspathURLStreamHandler extends URLStreamHandler { public URLConnection openConnection ( URL url ) { return new URLConnectionImpl ( url ) ; } private static final class URLConnectionImpl extends URLConnection { public URLConnectionImpl ( URL url ) { super ( url ) ; } public void connect ( ) { } public InputStream getInputStream ( ) throws IOException { if ( StringUtils . isNotEmpty ( url . getHost ( ) ) ) { throw new MalformedURLException ( "No host expected in classpath URLs" ) ; } InputStream is = ClasspathURLStreamHandler . class . getClassLoader ( ) . getResourceAsStream ( url . getFile ( ) ) ; if ( is == null ) { throw new IOException ( "Classpath resource not found: " + url ) ; } return is ; } public OutputStream getOutputStream ( ) { throw new UnsupportedOperationException ( ) ; } } } 	0	['2', '2', '0', '2', '4', '1', '1', '1', '2', '2', '10', '0', '0', '0.923076923', '0.75', '0', '0', '4', '1', '0.5', '0']
package org . apache . synapse . endpoints . dispatch ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import org . apache . synapse . MessageContext ; import org . apache . synapse . core . axis2 . Axis2MessageContext ; import org . apache . synapse . endpoints . Endpoint ; import java . util . Map ; public class HttpSessionDispatcher implements Dispatcher { private static final Log log = LogFactory . getLog ( HttpSessionDispatcher . class ) ; private final static String TRANSPORT_HEADERS = "TRANSPORT_HEADERS" ; private final static String COOKIE = "Cookie" ; private final static String SET_COOKIE = "Set-Cookie" ; public Endpoint getEndpoint ( MessageContext synCtx , DispatcherContext dispatcherContext ) { Endpoint endpoint = null ; org . apache . axis2 . context . MessageContext axis2MessageContext = ( ( Axis2MessageContext ) synCtx ) . getAxis2MessageContext ( ) ; Object o = axis2MessageContext . getProperty ( TRANSPORT_HEADERS ) ; if ( o != null && o instanceof Map ) { Map headerMap = ( Map ) o ; Object cookie = headerMap . get ( COOKIE ) ; if ( cookie != null && cookie instanceof String ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Using the HTTP header 'Cookie: " + cookie + "' to retrieve the endpoint in the transport session" ) ; } Object ep = dispatcherContext . getEndpoint ( ( String ) cookie ) ; if ( ep != null && ep instanceof Endpoint ) { endpoint = ( Endpoint ) ep ; } else if ( log . isDebugEnabled ( ) ) { log . debug ( "No endpoint found in the transport " + "session for the session id " + cookie ) ; } } else if ( log . isDebugEnabled ( ) ) { log . debug ( "No 'Cookie' HTTP headers found to extract the " + "endpoint from the transport session" ) ; } } return endpoint ; } public void updateSession ( MessageContext synCtx , DispatcherContext dispatcherContext , Endpoint endpoint ) { if ( endpoint == null || dispatcherContext == null ) { return ; } org . apache . axis2 . context . MessageContext axis2MessageContext = ( ( Axis2MessageContext ) synCtx ) . getAxis2MessageContext ( ) ; Object o = axis2MessageContext . getProperty ( TRANSPORT_HEADERS ) ; if ( o != null && o instanceof Map ) { Map headerMap = ( Map ) o ; Object cookie = headerMap . get ( SET_COOKIE ) ; if ( cookie != null && cookie instanceof String ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Found the HTTP header 'Set-Cookie: " + cookie + "' for updating the session" ) ; } String sessionId = ( ( String ) cookie ) . split ( ";" ) [ 0 ] ; if ( log . isDebugEnabled ( ) ) { log . debug ( "Using the session id '" + sessionId + "' extracted from the Set-Cookie header to update the session " + "with the endpoint " + endpoint ) ; } dispatcherContext . setEndpoint ( sessionId , endpoint ) ; } else if ( log . isDebugEnabled ( ) ) { log . debug ( "No 'Set-Cookie' HTTP header is specified in " + "the message to update the session" ) ; } } } public void unbind ( MessageContext synCtx , DispatcherContext dispatcherContext ) { org . apache . axis2 . context . MessageContext axis2MessageContext = ( ( Axis2MessageContext ) synCtx ) . getAxis2MessageContext ( ) ; Object o = axis2MessageContext . getProperty ( TRANSPORT_HEADERS ) ; if ( o != null && o instanceof Map ) { Map headerMap = ( Map ) o ; Object cookie = headerMap . get ( COOKIE ) ; if ( cookie != null && cookie instanceof String ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Using the HTTP header 'Cookie: " + cookie + "' to unbind the session" ) ; } dispatcherContext . removeSession ( ( String ) cookie ) ; } else if ( log . isDebugEnabled ( ) ) { log . debug ( "No 'Cookie' HTTP header is specified in " + "the message to unbind the session" ) ; } } } public boolean isServerInitiatedSession ( ) { return true ; } } 	0	['6', '1', '0', '10', '21', '3', '2', '8', '5', '1', '232', '1', '0', '0', '0.6', '0', '0', '37', '10', '4.5', '0']
package org . apache . synapse . endpoints ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import org . apache . synapse . FaultHandler ; import org . apache . synapse . MessageContext ; import org . apache . synapse . SynapseConstants ; import org . apache . synapse . endpoints . utils . EndpointDefinition ; import org . apache . synapse . statistics . impl . EndPointStatisticsStack ; import java . util . Stack ; public class DefaultEndpoint extends FaultHandler implements Endpoint { protected Log log ; protected static final Log trace = LogFactory . getLog ( SynapseConstants . TRACE_LOGGER ) ; private String name = null ; private EndpointDefinition endpoint = null ; private Endpoint parentEndpoint = null ; public DefaultEndpoint ( ) { log = LogFactory . getLog ( this . getClass ( ) ) ; } public EndpointDefinition getEndpoint ( ) { return endpoint ; } public void setEndpoint ( EndpointDefinition endpoint ) { this . endpoint = endpoint ; } public String getName ( ) { return name ; } public void setName ( String name ) { this . name = name . trim ( ) ; } public boolean isActive ( MessageContext synMessageContext ) { return true ; } public synchronized void setActive ( boolean active , MessageContext synMessageContext ) { } public void send ( MessageContext synCtx ) { boolean traceOn = isTraceOn ( synCtx ) ; boolean traceOrDebugOn = isTraceOrDebugOn ( traceOn ) ; if ( traceOrDebugOn ) { traceOrDebug ( traceOn , "Start : Default Endpoint" ) ; if ( traceOn && trace . isTraceEnabled ( ) ) { trace . trace ( "Message : " + synCtx . getEnvelope ( ) ) ; } } String endPointName = this . getName ( ) ; if ( endPointName == null ) { endPointName = SynapseConstants . ANONYMOUS_ENDPOINT ; } boolean statisticsEnable = ( SynapseConstants . STATISTICS_ON == endpoint . getStatisticsState ( ) ) ; if ( statisticsEnable ) { EndPointStatisticsStack endPointStatisticsStack = null ; Object statisticsStackObj = synCtx . getProperty ( org . apache . synapse . SynapseConstants . ENDPOINT_STATS ) ; if ( statisticsStackObj == null ) { endPointStatisticsStack = new EndPointStatisticsStack ( ) ; synCtx . setProperty ( org . apache . synapse . SynapseConstants . ENDPOINT_STATS , endPointStatisticsStack ) ; } else if ( statisticsStackObj instanceof EndPointStatisticsStack ) { endPointStatisticsStack = ( EndPointStatisticsStack ) statisticsStackObj ; } if ( endPointStatisticsStack != null ) { boolean isFault = synCtx . getEnvelope ( ) . getBody ( ) . hasFault ( ) ; endPointStatisticsStack . put ( endPointName , System . currentTimeMillis ( ) , ! synCtx . isResponse ( ) , statisticsEnable , isFault ) ; } } if ( synCtx . getTo ( ) != null && synCtx . getTo ( ) . getAddress ( ) != null ) { if ( traceOrDebugOn ) { traceOrDebug ( traceOn , "Sending message to endpoint : " + endPointName + " resolves to address = " + synCtx . getTo ( ) . getAddress ( ) ) ; traceOrDebug ( traceOn , "SOAPAction: " + ( synCtx . getSoapAction ( ) != null ? synCtx . getSoapAction ( ) : "null" ) ) ; traceOrDebug ( traceOn , "WSA-Action: " + ( synCtx . getWSAAction ( ) != null ? synCtx . getWSAAction ( ) : "null" ) ) ; if ( traceOn && trace . isTraceEnabled ( ) ) { trace . trace ( "Envelope : \n" + synCtx . getEnvelope ( ) ) ; } } } synCtx . pushFaultHandler ( this ) ; synCtx . setProperty ( SynapseConstants . PROCESSED_ENDPOINT , this ) ; synCtx . getEnvironment ( ) . send ( endpoint , synCtx ) ; } public void onChildEndpointFail ( Endpoint endpoint , MessageContext synMessageContext ) { } public void setParentEndpoint ( Endpoint parentEndpoint ) { this . parentEndpoint = parentEndpoint ; } public void onFault ( MessageContext synCtx ) { if ( parentEndpoint != null ) { parentEndpoint . onChildEndpointFail ( this , synCtx ) ; } else { Stack faultStack = synCtx . getFaultStack ( ) ; if ( ! faultStack . isEmpty ( ) ) { ( ( FaultHandler ) faultStack . pop ( ) ) . handleFault ( synCtx ) ; } } } protected boolean isTraceOn ( MessageContext msgCtx ) { return ( endpoint . getTraceState ( ) == SynapseConstants . TRACING_ON ) || ( endpoint . getTraceState ( ) == SynapseConstants . TRACING_UNSET && msgCtx . getTracingState ( ) == SynapseConstants . TRACING_ON ) ; } protected boolean isTraceOrDebugOn ( boolean isTraceOn ) { return isTraceOn || log . isDebugEnabled ( ) ; } protected void traceOrDebug ( boolean traceOn , String msg ) { if ( traceOn ) { trace . info ( msg ) ; } if ( log . isDebugEnabled ( ) ) { log . debug ( msg ) ; } } } 	0	['15', '2', '1', '14', '53', '61', '3', '11', '11', '0.8', '307', '1', '2', '0.277777778', '0.333333333', '1', '1', '19.13333333', '18', '2.6', '0']
package org . apache . synapse . util ; import java . io . ByteArrayOutputStream ; import java . util . HashMap ; import java . util . Iterator ; import javax . activation . DataHandler ; import javax . xml . namespace . QName ; import org . apache . axiom . attachments . ByteArrayDataSource ; import org . apache . axiom . om . OMAbstractFactory ; import org . apache . axiom . om . OMElement ; import org . apache . axiom . om . OMFactory ; import org . apache . axiom . om . OMNamespace ; import org . apache . axiom . om . OMNode ; import org . apache . axiom . om . OMText ; public class SimpleMapImpl extends HashMap implements SimpleMap { private static final OMNamespace attrNS = OMAbstractFactory . getOMFactory ( ) . createOMNamespace ( "" , "" ) ; private static final String TYPE = "type" ; private static final String NAME = "name" ; private static final String ENTRY = "entry" ; private static final String SHORT = "short" ; private static final String LONG = "long" ; private static final String DOUBLE = "double" ; private static final String INTEGER = "int" ; private static final String FLOAT = "float" ; private static final String BYTEARRAY = "byte[]" ; private static final String BYTE = "byte" ; private static final String STRING = "string" ; private static final String BOOLEAN = "boolean" ; private static final String CHAR = "char" ; private static final long serialVersionUID = 1L ; public SimpleMapImpl ( ) { super ( ) ; } public Object get ( String name ) { return this . get ( ( Object ) name ) ; } public boolean getBoolean ( String name ) { Object o = this . get ( ( Object ) name ) ; if ( o instanceof Boolean ) { return ( ( Boolean ) o ) . booleanValue ( ) ; } else { throw new RuntimeException ( "getBoolean(" + name + "): " + o . getClass ( ) . getName ( ) + " is not an instance of Boolean" ) ; } } public byte getByte ( String name ) { Object o = this . get ( ( Object ) name ) ; if ( o instanceof Byte ) { return ( ( Byte ) o ) . byteValue ( ) ; } else { throw new RuntimeException ( "getByte(" + name + "): " + o . getClass ( ) . getName ( ) + " is not an instance of Byte" ) ; } } public byte [ ] getBytes ( String name ) { Object o = this . get ( ( Object ) name ) ; if ( o instanceof byte [ ] ) { return ( byte [ ] ) o ; } else { throw new RuntimeException ( "getByteArray(" + name + "): " + o . getClass ( ) . getName ( ) + " is not an instance of byte[]" ) ; } } public char getChar ( String name ) { Object o = this . get ( ( Object ) name ) ; if ( o instanceof Character ) { return ( ( Character ) o ) . charValue ( ) ; } else { throw new RuntimeException ( "getChar(" + name + "): " + o . getClass ( ) . getName ( ) + " is not an instance of Character" ) ; } } public double getDouble ( String name ) { Object o = this . get ( ( Object ) name ) ; if ( o instanceof Double ) { return ( ( Double ) o ) . doubleValue ( ) ; } else { throw new RuntimeException ( "getDouble(" + name + "): " + o . getClass ( ) . getName ( ) + " is not an instance of Double" ) ; } } public float getFloat ( String name ) { Object o = this . get ( ( Object ) name ) ; if ( o instanceof Float ) { return ( ( Float ) o ) . floatValue ( ) ; } else { throw new RuntimeException ( "getFloat(" + name + "): " + o . getClass ( ) . getName ( ) + " is not an instance of Float" ) ; } } public int getInt ( String name ) { Object o = this . get ( ( Object ) name ) ; if ( o instanceof Integer ) { return ( ( Integer ) o ) . intValue ( ) ; } else { throw new RuntimeException ( "getInt(" + name + "): " + o . getClass ( ) . getName ( ) + " is not an instance of Integer" ) ; } } public long getLong ( String name ) { Object o = this . get ( ( Object ) name ) ; if ( o instanceof Long ) { return ( ( Long ) o ) . longValue ( ) ; } else { throw new RuntimeException ( "getLong(" + name + "): " + o . getClass ( ) . getName ( ) + " is not an instance of Long" ) ; } } public short getShort ( String name ) { Object o = this . get ( ( Object ) name ) ; if ( o instanceof Short ) { return ( ( Short ) o ) . shortValue ( ) ; } else { throw new RuntimeException ( "getShort(" + name + "): " + o . getClass ( ) . getName ( ) + " is not an instance of Short" ) ; } } public String getString ( String name ) { Object o = this . get ( ( Object ) name ) ; if ( o instanceof String ) { return ( ( String ) o ) ; } else { throw new RuntimeException ( "getString(" + name + "): " + o . getClass ( ) . getName ( ) + " is not an instance of String" ) ; } } public void put ( String name , Object value ) { this . put ( ( Object ) name , value ) ; } public void putBoolean ( String name , boolean b ) { this . put ( ( Object ) name , new Boolean ( b ) ) ; } public void putByte ( String name , byte b ) { this . put ( ( Object ) name , new Byte ( b ) ) ; } public void putBytes ( String name , byte [ ] bytes ) { this . put ( ( Object ) name , bytes ) ; } public void putChar ( String name , char c ) { this . put ( ( Object ) name , new Character ( c ) ) ; } public void putDouble ( String name , double d ) { this . put ( ( Object ) name , new Double ( d ) ) ; } public void putFloat ( String name , float fl ) { this . put ( ( Object ) name , new Float ( fl ) ) ; } public void putInt ( String name , int i ) { this . put ( ( Object ) name , new Integer ( i ) ) ; } public void putLong ( String name , long l ) { this . put ( ( Object ) name , new Long ( l ) ) ; } public void putShort ( String name , short s ) { this . put ( ( Object ) name , new Short ( s ) ) ; } public void putString ( String name , String value ) { this . put ( ( Object ) name , value ) ; } public OMElement getOMElement ( ) { return getOMElement ( OMAbstractFactory . getOMFactory ( ) ) ; } public OMElement getOMElement ( OMFactory fac ) { OMElement mapElement = fac . createOMElement ( PayloadHelper . MAPELT ) ; for ( Iterator it = this . keySet ( ) . iterator ( ) ; it . hasNext ( ) ; ) { OMElement entry = fac . createOMElement ( new QName ( PayloadHelper . AXIOMPAYLOADNS , ENTRY ) , mapElement ) ; Object key = it . next ( ) ; if ( key instanceof String ) { Object o = this . get ( key ) ; entry . addAttribute ( NAME , ( String ) key , attrNS ) ; if ( o instanceof Character ) { entry . addAttribute ( TYPE , CHAR , attrNS ) ; entry . setText ( o . toString ( ) ) ; } else if ( o instanceof Boolean ) { entry . addAttribute ( TYPE , BOOLEAN , attrNS ) ; entry . setText ( o . toString ( ) ) ; } else if ( o instanceof String ) { entry . addAttribute ( TYPE , STRING , attrNS ) ; entry . setText ( o . toString ( ) ) ; } else if ( o instanceof Byte ) { entry . addAttribute ( TYPE , BYTE , attrNS ) ; entry . setText ( ( ( Byte ) o ) . toString ( ) ) ; } else if ( o instanceof byte [ ] ) { entry . addAttribute ( TYPE , BYTEARRAY , attrNS ) ; OMText text = fac . createOMText ( new DataHandler ( new ByteArrayDataSource ( ( byte [ ] ) o ) ) , true ) ; entry . addChild ( text ) ; } else if ( o instanceof Float ) { entry . addAttribute ( TYPE , FLOAT , attrNS ) ; entry . setText ( o . toString ( ) ) ; } else if ( o instanceof Double ) { entry . addAttribute ( TYPE , DOUBLE , attrNS ) ; entry . setText ( o . toString ( ) ) ; } else if ( o instanceof Long ) { entry . addAttribute ( TYPE , LONG , attrNS ) ; entry . setText ( o . toString ( ) ) ; } else if ( o instanceof Short ) { entry . addAttribute ( TYPE , SHORT , attrNS ) ; entry . setText ( o . toString ( ) ) ; } else if ( o instanceof Integer ) { entry . addAttribute ( TYPE , INTEGER , attrNS ) ; entry . setText ( o . toString ( ) ) ; } } else { } } return mapElement ; } public SimpleMapImpl ( OMElement el ) { super ( ) ; if ( el . getQName ( ) . equals ( PayloadHelper . MAPELT ) ) { for ( Iterator it = el . getChildElements ( ) ; it . hasNext ( ) ; ) { OMElement child = ( OMElement ) it . next ( ) ; if ( child . getLocalName ( ) . equals ( ENTRY ) ) { String name = child . getAttributeValue ( new QName ( "" , NAME ) ) ; String type = child . getAttributeValue ( new QName ( "" , TYPE ) ) ; try { if ( type == null || name == null ) { continue ; } OMNode data = child . getFirstOMChild ( ) ; if ( data . getType ( ) != OMNode . TEXT_NODE ) { continue ; } OMText text = ( OMText ) data ; if ( type . equals ( INTEGER ) ) { this . put ( ( Object ) name , new Integer ( text . getText ( ) ) ) ; } else if ( type . equals ( CHAR ) ) { this . put ( ( Object ) name , new Character ( ( text . getText ( ) . charAt ( 0 ) ) ) ) ; } else if ( type . equals ( DOUBLE ) ) { this . put ( ( Object ) name , new Double ( text . getText ( ) ) ) ; } else if ( type . equals ( FLOAT ) ) { this . put ( ( Object ) name , new Float ( text . getText ( ) ) ) ; } else if ( type . equals ( BYTE ) ) { this . put ( ( Object ) name , new Byte ( text . getText ( ) . getBytes ( ) [ 0 ] ) ) ; } else if ( type . equals ( SHORT ) ) { this . put ( ( Object ) name , new Short ( text . getText ( ) ) ) ; } else if ( type . equals ( LONG ) ) { this . put ( ( Object ) name , new Long ( text . getText ( ) ) ) ; } else if ( type . equals ( STRING ) ) { this . put ( ( Object ) name , text . getText ( ) ) ; } else if ( type . equals ( BYTEARRAY ) ) { DataHandler dh = ( DataHandler ) text . getDataHandler ( ) ; ByteArrayOutputStream baos = new ByteArrayOutputStream ( ) ; dh . writeTo ( baos ) ; this . put ( ( Object ) name , baos . toByteArray ( ) ) ; } } catch ( Exception e ) { e . printStackTrace ( ) ; } } } } } } 	0	['27', '3', '0', '11', '90', '349', '1', '11', '26', '1.030769231', '845', '1', '0', '0.619047619', '0.164835165', '1', '2', '29.74074074', '11', '1.6296', '0']
package org . apache . synapse . config . xml ; import org . apache . axiom . om . OMElement ; import org . apache . synapse . Mediator ; import org . apache . synapse . mediators . builtin . DropMediator ; public class DropMediatorSerializer extends AbstractMediatorSerializer { public OMElement serializeMediator ( OMElement parent , Mediator m ) { if ( ! ( m instanceof DropMediator ) ) { handleException ( "Unsupported mediator passed in for serialization : " + m . getType ( ) ) ; } DropMediator mediator = ( DropMediator ) m ; OMElement drop = fac . createOMElement ( "drop" , synNS ) ; saveTracingState ( drop , mediator ) ; if ( parent != null ) { parent . addChild ( drop ) ; } return drop ; } public String getMediatorClassName ( ) { return DropMediator . class . getName ( ) ; } } 	0	['3', '2', '0', '7', '13', '3', '0', '7', '3', '2', '41', '0', '0', '0.75', '0.555555556', '0', '0', '12.66666667', '3', '1.3333', '0']
package org . apache . synapse . config . xml ; import org . apache . axiom . om . OMElement ; import org . apache . synapse . Mediator ; import org . apache . synapse . mediators . db . DBLookupMediator ; public class DBLookupMediatorSerializer extends AbstractDBMediatorSerializer { public OMElement serializeMediator ( OMElement parent , Mediator m ) { if ( ! ( m instanceof DBLookupMediator ) ) { handleException ( "Unsupported mediator passed in for serialization : " + m . getType ( ) ) ; } DBLookupMediator mediator = ( DBLookupMediator ) m ; OMElement dbLookup = fac . createOMElement ( "dblookup" , synNS ) ; saveTracingState ( dbLookup , mediator ) ; serializeDBInformation ( mediator , dbLookup ) ; if ( parent != null ) { parent . addChild ( dbLookup ) ; } return dbLookup ; } public String getMediatorClassName ( ) { return DBLookupMediator . class . getName ( ) ; } } 	0	['3', '3', '0', '8', '14', '3', '0', '8', '3', '2', '45', '0', '0', '0.777777778', '0.555555556', '0', '0', '14', '3', '1.3333', '0']
package org . apache . synapse . config . xml ; import org . apache . axiom . om . OMElement ; import org . apache . synapse . Mediator ; import org . apache . synapse . SynapseConstants ; import org . apache . synapse . mediators . base . SynapseMediator ; import javax . xml . namespace . QName ; public class SynapseMediatorFactory extends AbstractListMediatorFactory { private final static QName RULES_Q = new QName ( SynapseConstants . SYNAPSE_NAMESPACE , "rules" ) ; public QName getTagQName ( ) { return RULES_Q ; } public Mediator createMediator ( OMElement elem ) { SynapseMediator sm = new SynapseMediator ( ) ; processTraceState ( sm , elem ) ; addChildren ( elem , sm ) ; return sm ; } } 	0	['4', '3', '0', '5', '9', '4', '0', '5', '3', '0.666666667', '30', '1', '0', '0.666666667', '0.666666667', '0', '0', '6.25', '1', '0.5', '0']
package org . apache . synapse . config . xml ; import org . apache . axiom . om . OMAttribute ; import org . apache . axiom . om . OMElement ; import org . apache . synapse . Mediator ; import org . apache . synapse . mediators . builtin . CalloutMediator ; import org . jaxen . JaxenException ; import javax . xml . namespace . QName ; public class CalloutMediatorFactory extends AbstractMediatorFactory { private static final QName TAG_NAME = new QName ( XMLConfigConstants . SYNAPSE_NAMESPACE , "callout" ) ; private static final QName ATT_URL = new QName ( "serviceURL" ) ; private static final QName ATT_ACTION = new QName ( "action" ) ; private static final QName ATT_AXIS2XML = new QName ( "axis2xml" ) ; private static final QName ATT_REPOSITORY = new QName ( "repository" ) ; private static final QName Q_CONFIG = new QName ( XMLConfigConstants . SYNAPSE_NAMESPACE , "configuration" ) ; private static final QName Q_SOURCE = new QName ( XMLConfigConstants . SYNAPSE_NAMESPACE , "source" ) ; private static final QName Q_TARGET = new QName ( XMLConfigConstants . SYNAPSE_NAMESPACE , "target" ) ; public Mediator createMediator ( OMElement elem ) { CalloutMediator callout = new CalloutMediator ( ) ; OMAttribute attServiceURL = elem . getAttribute ( ATT_URL ) ; OMAttribute attAction = elem . getAttribute ( ATT_ACTION ) ; OMElement configElt = elem . getFirstChildWithName ( Q_CONFIG ) ; OMElement sourceElt = elem . getFirstChildWithName ( Q_SOURCE ) ; OMElement targetElt = elem . getFirstChildWithName ( Q_TARGET ) ; if ( attServiceURL != null ) { callout . setServiceURL ( attServiceURL . getAttributeValue ( ) ) ; } else { handleException ( "The 'serviceURL' attribute is required for the Callout mediator" ) ; } if ( attAction != null ) { callout . setAction ( attAction . getAttributeValue ( ) ) ; } if ( configElt != null ) { OMAttribute axis2xmlAttr = configElt . getAttribute ( ATT_AXIS2XML ) ; OMAttribute repoAttr = configElt . getAttribute ( ATT_REPOSITORY ) ; if ( axis2xmlAttr != null && axis2xmlAttr . getAttributeValue ( ) != null ) { callout . setAxis2xml ( axis2xmlAttr . getAttributeValue ( ) ) ; } if ( repoAttr != null && repoAttr . getAttributeValue ( ) != null ) { callout . setClientRepository ( repoAttr . getAttributeValue ( ) ) ; } } if ( sourceElt != null ) { if ( sourceElt . getAttribute ( ATT_XPATH ) != null ) { try { callout . setRequestXPath ( SynapseXPathFactory . getSynapseXPath ( sourceElt , ATT_XPATH ) ) ; } catch ( JaxenException e ) { handleException ( "Invalid source XPath : " + sourceElt . getAttributeValue ( ATT_XPATH ) ) ; } } else if ( sourceElt . getAttribute ( ATT_KEY ) != null ) { callout . setRequestKey ( sourceElt . getAttributeValue ( ATT_KEY ) ) ; } else { handleException ( "A 'xpath' or 'key' attribute " + "is required for the Callout 'source'" ) ; } } else { handleException ( "The message 'source' must be specified for a Callout mediator" ) ; } if ( targetElt != null ) { if ( targetElt . getAttribute ( ATT_XPATH ) != null ) { try { callout . setTargetXPath ( SynapseXPathFactory . getSynapseXPath ( targetElt , ATT_XPATH ) ) ; } catch ( JaxenException e ) { handleException ( "Invalid target XPath : " + targetElt . getAttributeValue ( ATT_XPATH ) ) ; } } else if ( targetElt . getAttribute ( ATT_KEY ) != null ) { callout . setTargetKey ( targetElt . getAttributeValue ( ATT_KEY ) ) ; } else { handleException ( "A 'xpath' or 'key' attribute " + "is required for the Callout 'target'" ) ; } } else { handleException ( "The message 'target' must be specified for a Callout mediator" ) ; } return callout ; } public QName getTagQName ( ) { return TAG_NAME ; } } 	0	['4', '2', '0', '8', '25', '2', '0', '8', '3', '0.666666667', '218', '1', '0', '0.6', '0.666666667', '0', '0', '51.5', '14', '3.75', '0']
package org . apache . synapse . config . xml ; import org . apache . synapse . mediators . AbstractListMediator ; import org . apache . synapse . MessageContext ; public class AnonymousListMediator extends AbstractListMediator { public boolean mediate ( MessageContext synCtx ) { return super . mediate ( synCtx ) ; } } 	0	['2', '3', '0', '8', '4', '1', '6', '2', '2', '2', '9', '0', '0', '0.956521739', '0.75', '0', '0', '3.5', '1', '0.5', '0']
package org . apache . synapse . config . xml ; import org . apache . axiom . om . OMElement ; import org . apache . synapse . Mediator ; import org . apache . synapse . mediators . ext . POJOCommandMediator ; public class POJOCommandMediatorSerializer extends AbstractMediatorSerializer { public OMElement serializeMediator ( OMElement parent , Mediator m ) { if ( ! ( m instanceof POJOCommandMediator ) ) { handleException ( "Unsupported mediator passed in for serialization : " + m . getType ( ) ) ; } POJOCommandMediator mediator = ( POJOCommandMediator ) m ; OMElement pojoCommand = fac . createOMElement ( "pojoCommand" , synNS ) ; saveTracingState ( pojoCommand , mediator ) ; if ( mediator . getCommand ( ) != null && mediator . getCommand ( ) . getClass ( ) . getName ( ) != null ) { pojoCommand . addAttribute ( fac . createOMAttribute ( "name" , nullNS , mediator . getCommand ( ) . getName ( ) ) ) ; } else { handleException ( "Invalid POJO Command mediator. The command class name is required" ) ; } for ( String propName : mediator . getStaticSetterProperties ( ) . keySet ( ) ) { Object value = mediator . getStaticSetterProperties ( ) . get ( propName ) ; OMElement prop = fac . createOMElement ( PROP_Q ) ; prop . addAttribute ( fac . createOMAttribute ( "name" , nullNS , propName ) ) ; if ( value instanceof String ) { prop . addAttribute ( fac . createOMAttribute ( "value" , nullNS , ( String ) value ) ) ; } else if ( value instanceof OMElement ) { prop . addChild ( ( OMElement ) value ) ; } else { handleException ( "Unable to serialize the command " + "mediator property with the naem " + propName + " : Unknown type" ) ; } if ( mediator . getContextGetterProperties ( ) . containsKey ( propName ) ) { prop . addAttribute ( fac . createOMAttribute ( "context-name" , nullNS , mediator . getContextGetterProperties ( ) . get ( propName ) ) ) ; } else if ( mediator . getMessageGetterProperties ( ) . containsKey ( propName ) ) { SynapseXPathSerializer . serializeXPath ( mediator . getMessageGetterProperties ( ) . get ( propName ) , prop , "expression" ) ; } pojoCommand . addChild ( prop ) ; } for ( String propName : mediator . getMessageSetterProperties ( ) . keySet ( ) ) { OMElement prop = fac . createOMElement ( PROP_Q ) ; prop . addAttribute ( fac . createOMAttribute ( "name" , nullNS , propName ) ) ; SynapseXPathSerializer . serializeXPath ( mediator . getMessageSetterProperties ( ) . get ( propName ) , prop , "expression" ) ; if ( mediator . getMessageGetterProperties ( ) . containsKey ( propName ) ) { prop . addAttribute ( fac . createOMAttribute ( "action" , nullNS , "ReadAndUpdateMessage" ) ) ; } else if ( mediator . getContextGetterProperties ( ) . containsKey ( propName ) ) { prop . addAttribute ( fac . createOMAttribute ( "context-name" , nullNS , mediator . getContextGetterProperties ( ) . get ( propName ) ) ) ; prop . addAttribute ( fac . createOMAttribute ( "action" , nullNS , "ReadMessage" ) ) ; } else { prop . addAttribute ( fac . createOMAttribute ( "action" , nullNS , "ReadMessage" ) ) ; } pojoCommand . addChild ( prop ) ; } for ( String propName : mediator . getContextSetterProperties ( ) . keySet ( ) ) { OMElement prop = fac . createOMElement ( PROP_Q ) ; prop . addAttribute ( fac . createOMAttribute ( "name" , nullNS , propName ) ) ; prop . addAttribute ( fac . createOMAttribute ( "context-name" , nullNS , mediator . getContextSetterProperties ( ) . get ( propName ) ) ) ; if ( mediator . getContextGetterProperties ( ) . containsKey ( propName ) ) { prop . addAttribute ( fac . createOMAttribute ( "action" , nullNS , "ReadAndUpdateContext" ) ) ; } else if ( mediator . getMessageGetterProperties ( ) . containsKey ( propName ) ) { SynapseXPathSerializer . serializeXPath ( mediator . getMessageGetterProperties ( ) . get ( propName ) , prop , "expression" ) ; prop . addAttribute ( fac . createOMAttribute ( "action" , nullNS , "ReadContext" ) ) ; } else { prop . addAttribute ( fac . createOMAttribute ( "action" , nullNS , "ReadContext" ) ) ; } pojoCommand . addChild ( prop ) ; } for ( String propName : mediator . getContextGetterProperties ( ) . keySet ( ) ) { if ( ! isSerialized ( propName , mediator ) ) { String value = mediator . getContextGetterProperties ( ) . get ( propName ) ; OMElement prop = fac . createOMElement ( PROP_Q ) ; prop . addAttribute ( fac . createOMAttribute ( "name" , nullNS , propName ) ) ; prop . addAttribute ( fac . createOMAttribute ( "context-name" , nullNS , value ) ) ; prop . addAttribute ( fac . createOMAttribute ( "action" , nullNS , "UpdateContext" ) ) ; pojoCommand . addChild ( prop ) ; } } for ( String propName : mediator . getMessageGetterProperties ( ) . keySet ( ) ) { if ( ! isSerialized ( propName , mediator ) ) { OMElement prop = fac . createOMElement ( PROP_Q ) ; prop . addAttribute ( fac . createOMAttribute ( "name" , nullNS , propName ) ) ; SynapseXPathSerializer . serializeXPath ( mediator . getMessageGetterProperties ( ) . get ( propName ) , prop , "expression" ) ; prop . addAttribute ( fac . createOMAttribute ( "action" , nullNS , "UpdateMessage" ) ) ; pojoCommand . addChild ( prop ) ; } } if ( parent != null ) { parent . addChild ( pojoCommand ) ; } return pojoCommand ; } private boolean isSerialized ( String propName , POJOCommandMediator m ) { return m . getContextSetterProperties ( ) . containsKey ( propName ) || m . getStaticSetterProperties ( ) . containsKey ( propName ) || m . getMessageSetterProperties ( ) . containsKey ( propName ) ; } public String getMediatorClassName ( ) { return POJOCommandMediator . class . getName ( ) ; } } 	0	['4', '2', '0', '10', '31', '6', '0', '10', '3', '2', '456', '0', '0', '0.666666667', '0.4', '0', '0', '113', '18', '5.75', '0']
package org . apache . synapse . config . xml ; import org . apache . axiom . om . OMAttribute ; import org . apache . axiom . om . OMElement ; import org . apache . synapse . Mediator ; import org . apache . synapse . SynapseException ; import org . apache . synapse . mediators . transform . HeaderMediator ; import org . jaxen . JaxenException ; import javax . xml . namespace . QName ; public class HeaderMediatorFactory extends AbstractMediatorFactory { private static final QName HEADER_Q = new QName ( XMLConfigConstants . SYNAPSE_NAMESPACE , "header" ) ; private static final QName ATT_ACTION = new QName ( "action" ) ; public Mediator createMediator ( OMElement elem ) { HeaderMediator headerMediator = new HeaderMediator ( ) ; OMAttribute name = elem . getAttribute ( ATT_NAME ) ; OMAttribute value = elem . getAttribute ( ATT_VALUE ) ; OMAttribute exprn = elem . getAttribute ( ATT_EXPRN ) ; OMAttribute action = elem . getAttribute ( ATT_ACTION ) ; if ( name == null || name . getAttributeValue ( ) == null ) { String msg = "A valid name attribute is required for the header mediator" ; log . error ( msg ) ; throw new SynapseException ( msg ) ; } else { String nameAtt = name . getAttributeValue ( ) ; int colonPos = nameAtt . indexOf ( ":" ) ; if ( colonPos != - 1 ) { String prefix = nameAtt . substring ( 0 , colonPos ) ; String namespaceURI = OMElementUtils . getNameSpaceWithPrefix ( prefix , elem ) ; if ( namespaceURI == null ) { String msg = "Invalid namespace prefix '" + prefix + "' in name attribute" ; log . error ( msg ) ; throw new SynapseException ( msg ) ; } else { headerMediator . setQName ( new QName ( namespaceURI , nameAtt . substring ( colonPos + 1 ) , prefix ) ) ; } } else { headerMediator . setQName ( new QName ( nameAtt ) ) ; } } processTraceState ( headerMediator , elem ) ; if ( action != null && "remove" . equals ( action . getAttributeValue ( ) ) ) { headerMediator . setAction ( HeaderMediator . ACTION_REMOVE ) ; } if ( headerMediator . getAction ( ) == HeaderMediator . ACTION_SET && value == null && exprn == null ) { String msg = "A 'value' or 'expression' attribute is required for a [set] header mediator" ; log . error ( msg ) ; throw new SynapseException ( msg ) ; } if ( value != null && value . getAttributeValue ( ) != null ) { headerMediator . setValue ( value . getAttributeValue ( ) ) ; } else if ( exprn != null && exprn . getAttributeValue ( ) != null ) { try { headerMediator . setExpression ( SynapseXPathFactory . getSynapseXPath ( elem , ATT_EXPRN ) ) ; } catch ( JaxenException je ) { String msg = "Invalid XPath expression : " + exprn . getAttributeValue ( ) ; log . error ( msg ) ; throw new SynapseException ( msg , je ) ; } } return headerMediator ; } public QName getTagQName ( ) { return HEADER_Q ; } } 	0	['4', '2', '0', '11', '29', '2', '0', '11', '3', '0.666666667', '191', '1', '0', '0.6', '0.666666667', '0', '0', '46.25', '14', '3.75', '0']
package org . apache . synapse . config . xml ; import org . apache . axiom . om . OMElement ; import org . apache . synapse . Mediator ; import org . apache . synapse . mediators . builtin . CacheMediator ; public class CacheMediatorSerializer extends AbstractMediatorSerializer { public OMElement serializeMediator ( OMElement parent , Mediator m ) { if ( ! ( m instanceof CacheMediator ) ) { handleException ( "Unsupported mediator passed in for serialization : " + m . getType ( ) ) ; } CacheMediator mediator = ( CacheMediator ) m ; OMElement cache = fac . createOMElement ( "cache" , synNS ) ; saveTracingState ( cache , mediator ) ; if ( mediator . getId ( ) != null ) { cache . addAttribute ( fac . createOMAttribute ( "id" , nullNS , mediator . getId ( ) ) ) ; } if ( mediator . getScope ( ) != null ) { cache . addAttribute ( fac . createOMAttribute ( "scope" , nullNS , mediator . getScope ( ) ) ) ; } if ( mediator . isCollector ( ) ) { cache . addAttribute ( fac . createOMAttribute ( "collector" , nullNS , "true" ) ) ; } else { cache . addAttribute ( fac . createOMAttribute ( "collector" , nullNS , "false" ) ) ; if ( mediator . getDigestGenerator ( ) != null ) { cache . addAttribute ( fac . createOMAttribute ( "hashGenerator" , nullNS , mediator . getDigestGenerator ( ) . getClass ( ) . getName ( ) ) ) ; } if ( mediator . getTimeout ( ) != 0 ) { cache . addAttribute ( fac . createOMAttribute ( "timeout" , nullNS , Long . toString ( mediator . getTimeout ( ) ) ) ) ; } if ( mediator . getMaxMessageSize ( ) != 0 ) { cache . addAttribute ( fac . createOMAttribute ( "maxMessageSize" , nullNS , Integer . toString ( mediator . getMaxMessageSize ( ) ) ) ) ; } if ( mediator . getOnCacheHitRef ( ) != null ) { OMElement onCacheHit = fac . createOMElement ( "onCacheHit" , synNS ) ; onCacheHit . addAttribute ( fac . createOMAttribute ( "sequence" , nullNS , mediator . getOnCacheHitRef ( ) ) ) ; cache . addChild ( onCacheHit ) ; } else if ( mediator . getOnCacheHitSequence ( ) != null ) { OMElement onCacheHit = fac . createOMElement ( "onCacheHit" , synNS ) ; new SequenceMediatorSerializer ( ) . serializeChildren ( onCacheHit , mediator . getOnCacheHitSequence ( ) . getList ( ) ) ; cache . addChild ( onCacheHit ) ; } if ( mediator . getInMemoryCacheSize ( ) != 0 ) { OMElement implElem = fac . createOMElement ( "implementation" , synNS ) ; implElem . addAttribute ( fac . createOMAttribute ( "type" , nullNS , "memory" ) ) ; implElem . addAttribute ( fac . createOMAttribute ( "maxSize" , nullNS , Integer . toString ( mediator . getInMemoryCacheSize ( ) ) ) ) ; cache . addChild ( implElem ) ; } if ( mediator . getDiskCacheSize ( ) != 0 ) { OMElement implElem = fac . createOMElement ( "implementation" , synNS ) ; implElem . addAttribute ( fac . createOMAttribute ( "type" , nullNS , "disk" ) ) ; implElem . addAttribute ( fac . createOMAttribute ( "maxSize" , nullNS , Integer . toString ( mediator . getDiskCacheSize ( ) ) ) ) ; cache . addChild ( implElem ) ; } } if ( parent != null ) { parent . addChild ( cache ) ; } return cache ; } public String getMediatorClassName ( ) { return CacheMediator . class . getName ( ) ; } } 	0	['3', '2', '0', '11', '31', '3', '0', '11', '3', '2', '225', '0', '0', '0.75', '0.555555556', '0', '0', '74', '13', '4.6667', '0']
package org . apache . synapse . config . xml ; import org . apache . axiom . om . OMElement ; import org . apache . synapse . Mediator ; import javax . xml . namespace . QName ; public interface MediatorFactory { public Mediator createMediator ( OMElement elem ) ; public QName getTagQName ( ) ; } 	0	['2', '1', '0', '5', '2', '1', '3', '2', '2', '2', '2', '0', '0', '0', '0.75', '0', '0', '0', '1', '1', '0']
package org . apache . synapse . util ; import org . apache . axiom . om . OMAbstractFactory ; import org . apache . axiom . om . OMDataSourceExt ; import org . apache . axiom . om . OMFactory ; import org . apache . axiom . om . OMOutputFormat ; import org . apache . axiom . om . OMSourcedElement ; import org . apache . axiom . om . ds . OMDataSourceExtBase ; import org . apache . axiom . om . impl . MTOMXMLStreamWriter ; import org . apache . axiom . om . impl . llom . OMSourcedElementImpl ; import org . apache . axiom . om . impl . serialize . StreamingOMSerializer ; import org . apache . axiom . om . util . StAXUtils ; import org . apache . synapse . transport . base . BaseConstants ; import javax . xml . stream . XMLStreamException ; import javax . xml . stream . XMLStreamReader ; import javax . xml . stream . XMLStreamWriter ; import java . io . IOException ; import java . io . InputStream ; import java . io . InputStreamReader ; import java . io . OutputStream ; import java . io . UnsupportedEncodingException ; import java . io . Writer ; import java . nio . charset . Charset ; public class TextFileDataSource extends OMDataSourceExtBase { private final TemporaryData temporaryData ; private final Charset charset ; public TextFileDataSource ( TemporaryData temporaryData , Charset charset ) { this . temporaryData = temporaryData ; this . charset = charset ; } public static OMSourcedElement createOMSourcedElement ( TemporaryData temporaryData , Charset charset ) { OMFactory fac = OMAbstractFactory . getOMFactory ( ) ; TextFileDataSource txtFileDS = new TextFileDataSource ( temporaryData , charset ) ; return new OMSourcedElementImpl ( BaseConstants . DEFAULT_TEXT_WRAPPER , fac , txtFileDS ) ; } @ Override public void serialize ( OutputStream out , OMOutputFormat format ) throws XMLStreamException { XMLStreamWriter writer = new MTOMXMLStreamWriter ( out , format ) ; serialize ( writer ) ; writer . flush ( ) ; } @ Override public void serialize ( Writer writer , OMOutputFormat format ) throws XMLStreamException { MTOMXMLStreamWriter xmlWriter = new MTOMXMLStreamWriter ( StAXUtils . createXMLStreamWriter ( writer ) ) ; xmlWriter . setOutputFormat ( format ) ; serialize ( xmlWriter ) ; xmlWriter . flush ( ) ; } @ Override public void serialize ( XMLStreamWriter xmlWriter ) throws XMLStreamException { StreamingOMSerializer serializer = new StreamingOMSerializer ( ) ; serializer . serialize ( getReader ( ) , xmlWriter ) ; } public XMLStreamReader getReader ( ) throws XMLStreamException { InputStream is ; try { is = temporaryData . getInputStream ( ) ; } catch ( IOException ex ) { throw new XMLStreamException ( ex ) ; } return new WrappedTextNodeStreamReader ( BaseConstants . DEFAULT_TEXT_WRAPPER , new InputStreamReader ( is , charset ) ) ; } public Object getObject ( ) { return temporaryData ; } public boolean isDestructiveRead ( ) { return false ; } public boolean isDestructiveWrite ( ) { return false ; } public byte [ ] getXMLBytes ( String encoding ) throws UnsupportedEncodingException { throw new UnsupportedOperationException ( ) ; } public void close ( ) { } public OMDataSourceExt copy ( ) { return new TextFileDataSource ( temporaryData , charset ) ; } } 	0	['12', '2', '0', '15', '28', '54', '1', '14', '12', '0.590909091', '117', '1', '1', '0.476190476', '0.21875', '1', '3', '8.583333333', '1', '0.9167', '0']
package org . apache . synapse . mediators . db ; import org . apache . synapse . SynapseException ; import org . apache . synapse . util . xpath . SynapseXPath ; import java . sql . Types ; import java . util . ArrayList ; import java . util . HashMap ; import java . util . List ; import java . util . Map ; public class Statement { String rawStatement = null ; List parameters = new ArrayList ( ) ; Map resultsMap = new HashMap ( ) ; public Statement ( String rawStatement ) { this . rawStatement = rawStatement ; } public String getRawStatement ( ) { return rawStatement ; } public void addParameter ( String propertyName , SynapseXPath xpath , String type ) { parameters . add ( new Parameter ( propertyName , xpath , type ) ) ; } public void addResult ( String propertyName , String column ) { resultsMap . put ( propertyName , column ) ; } public List getParameters ( ) { return parameters ; } public Map getResultsMap ( ) { return resultsMap ; } public class Parameter { String propertyName = null ; SynapseXPath xpath = null ; int type = 0 ; Parameter ( String value , SynapseXPath xpath , String type ) { this . propertyName = value ; this . xpath = xpath ; if ( "CHAR" . equals ( type ) ) { this . type = Types . CHAR ; } else if ( "VARCHAR" . equals ( type ) ) { this . type = Types . VARCHAR ; } else if ( "LONGVARCHAR" . equals ( type ) ) { this . type = Types . LONGVARCHAR ; } else if ( "NUMERIC" . equals ( type ) ) { this . type = Types . NUMERIC ; } else if ( "DECIMAL" . equals ( type ) ) { this . type = Types . DECIMAL ; } else if ( "BIT" . equals ( type ) ) { this . type = Types . BIT ; } else if ( "TINYINT" . equals ( type ) ) { this . type = Types . TINYINT ; } else if ( "SMALLINT" . equals ( type ) ) { this . type = Types . SMALLINT ; } else if ( "INTEGER" . equals ( type ) ) { this . type = Types . INTEGER ; } else if ( "BIGINT" . equals ( type ) ) { this . type = Types . BIGINT ; } else if ( "REAL" . equals ( type ) ) { this . type = Types . REAL ; } else if ( "FLOAT" . equals ( type ) ) { this . type = Types . FLOAT ; } else if ( "DOUBLE" . equals ( type ) ) { this . type = Types . DOUBLE ; } else if ( "DATE" . equals ( type ) ) { this . type = Types . DATE ; } else if ( "TIME" . equals ( type ) ) { this . type = Types . TIME ; } else if ( "TIMESTAMP" . equals ( type ) ) { this . type = Types . TIMESTAMP ; } else { throw new SynapseException ( "Unknown or unsupported JDBC type : " + type ) ; } } public String getPropertyName ( ) { return propertyName ; } public SynapseXPath getXpath ( ) { return xpath ; } public int getType ( ) { return type ; } } } 	0	['6', '1', '0', '7', '12', '1', '6', '2', '6', '0.666666667', '56', '0', '0', '0', '0.555555556', '0', '0', '7.833333333', '1', '0.8333', '0']
package org . apache . synapse . mediators ; import org . apache . synapse . MessageContext ; import org . apache . synapse . config . xml . XMLConfigConstants ; import org . apache . synapse . util . xpath . SynapseXPath ; import javax . xml . namespace . QName ; public class MediatorProperty { public static final QName PROPERTY_Q = new QName ( XMLConfigConstants . SYNAPSE_NAMESPACE , "property" ) ; public static final QName ATT_NAME_Q = new QName ( XMLConfigConstants . NULL_NAMESPACE , "name" ) ; public static final QName ATT_VALUE_Q = new QName ( XMLConfigConstants . NULL_NAMESPACE , "value" ) ; public static final QName ATT_EXPR_Q = new QName ( XMLConfigConstants . NULL_NAMESPACE , "expression" ) ; private String name ; private String value ; private SynapseXPath expression ; public MediatorProperty ( ) { } public String getName ( ) { return name ; } public void setName ( String name ) { this . name = name ; } public String getValue ( ) { return value ; } public void setValue ( String value ) { this . value = value ; } public SynapseXPath getExpression ( ) { return expression ; } public void setExpression ( SynapseXPath expression ) { this . expression = expression ; } public String getEvaluatedExpression ( MessageContext synCtx ) { return expression . stringValueOf ( synCtx ) ; } } 	0	['9', '1', '0', '10', '12', '26', '8', '2', '8', '0.928571429', '70', '0.428571429', '1', '0', '0.375', '0', '0', '6', '1', '0.7778', '0']
package org . apache . synapse . registry ; import java . net . URI ; public interface RegistryEntry { public String getKey ( ) ; public String getName ( ) ; public long getVersion ( ) ; public URI getType ( ) ; public String getDescription ( ) ; public long getCreated ( ) ; public long getLastModified ( ) ; public long getCachableDuration ( ) ; } 	0	['8', '1', '0', '4', '8', '28', '4', '0', '8', '2', '8', '0', '0', '0', '1', '0', '0', '0', '1', '1', '0']
package org . apache . synapse . config . xml ; import org . apache . axiom . om . OMElement ; import org . apache . synapse . Mediator ; import org . apache . synapse . mediators . builtin . DropMediator ; import javax . xml . namespace . QName ; public class DropMediatorFactory extends AbstractMediatorFactory { private static final QName DROP_Q = new QName ( XMLConfigConstants . SYNAPSE_NAMESPACE , "drop" ) ; public Mediator createMediator ( OMElement el ) { Mediator dropMediator = new DropMediator ( ) ; processTraceState ( dropMediator , el ) ; return dropMediator ; } public QName getTagQName ( ) { return DROP_Q ; } } 	0	['4', '2', '0', '4', '8', '4', '0', '4', '3', '0.666666667', '27', '1', '0', '0.6', '0.666666667', '0', '0', '5.5', '1', '0.5', '0']
package org . apache . synapse . startup . quartz ; import java . net . InetAddress ; import java . net . UnknownHostException ; import java . util . HashSet ; import java . util . List ; import java . util . Random ; import java . util . Set ; import javax . xml . namespace . QName ; import org . apache . axiom . om . OMElement ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import org . apache . synapse . core . SynapseEnvironment ; import org . apache . synapse . SynapseConstants ; import org . apache . synapse . SynapseException ; import org . apache . synapse . ServerManager ; import org . apache . synapse . startup . AbstractStartup ; import org . quartz . CronTrigger ; import org . quartz . JobDataMap ; import org . quartz . JobDetail ; import org . quartz . Scheduler ; import org . quartz . SchedulerException ; import org . quartz . Trigger ; import org . quartz . TriggerUtils ; import org . quartz . impl . DirectSchedulerFactory ; public class SimpleQuartz extends AbstractStartup { private static final Log log = LogFactory . getLog ( SimpleQuartz . class ) ; private static final int THREADPOOLSIZE = 5 ; static { try { DirectSchedulerFactory . getInstance ( ) . createVolatileScheduler ( THREADPOOLSIZE ) ; } catch ( SchedulerException e ) { throw new SynapseException ( "Error initializing scheduler factory" , e ) ; } } private String cron ; private int repeatCount = - 1 ; private long repeatInterval ; private String className ; private List pinnedServers ; private Scheduler sch ; Set xmlProperties = new HashSet ( ) ; public QName getTagQName ( ) { return SimpleQuartzFactory . TASK ; } public void destroy ( ) { if ( sch != null ) { try { sch . shutdown ( ) ; } catch ( SchedulerException e ) { log . warn ( "Error shutting down scheduler" , e ) ; throw new SynapseException ( "Error shutting down scheduler" , e ) ; } } } public void init ( SynapseEnvironment synapseEnvironment ) { String thisServerName = ServerManager . getInstance ( ) . getServerName ( ) ; if ( thisServerName == null || thisServerName . equals ( "" ) ) { try { InetAddress addr = InetAddress . getLocalHost ( ) ; thisServerName = addr . getHostName ( ) ; } catch ( UnknownHostException e ) { log . warn ( "Could not get local host name" , e ) ; } if ( thisServerName == null || thisServerName . equals ( "" ) ) { thisServerName = "localhost" ; } } log . debug ( "Synapse server name : " + thisServerName ) ; List pinnedServers = getPinnedServers ( ) ; if ( pinnedServers != null && ! pinnedServers . isEmpty ( ) ) { if ( ! pinnedServers . contains ( thisServerName ) ) { log . info ( "Server name not in pinned servers list. Not starting Task : " + getName ( ) ) ; return ; } } try { sch = DirectSchedulerFactory . getInstance ( ) . getScheduler ( ) ; if ( sch == null ) { DirectSchedulerFactory . getInstance ( ) . createVolatileScheduler ( THREADPOOLSIZE ) ; sch = DirectSchedulerFactory . getInstance ( ) . getScheduler ( ) ; } if ( sch == null ) { throw new NullPointerException ( "Scheduler is null" ) ; } Trigger trigger = null ; if ( cron == null ) { if ( repeatCount >= 0 ) { trigger = TriggerUtils . makeImmediateTrigger ( repeatCount - 1 , repeatInterval ) ; } else { trigger = TriggerUtils . makeImmediateTrigger ( - 1 , repeatInterval ) ; } } else { CronTrigger cronTrig = new CronTrigger ( ) ; cronTrig . setCronExpression ( cron ) ; trigger = cronTrig ; } trigger . setName ( "Trigger" + String . valueOf ( ( new Random ( ) ) . nextLong ( ) ) ) ; trigger . setGroup ( "synapse.simple.quartz" ) ; trigger . setVolatility ( true ) ; JobDetail jobDetail = new JobDetail ( ) ; jobDetail . setName ( name ) ; jobDetail . setGroup ( "synapse.simple.quartz" ) ; jobDetail . setJobClass ( SimpleQuartzJob . class ) ; JobDataMap jdm = new JobDataMap ( ) ; jdm . put ( SimpleQuartzJob . SYNAPSE_ENVIRONMENT , synapseEnvironment ) ; jdm . put ( SimpleQuartzJob . CLASSNAME , className ) ; jdm . put ( SimpleQuartzJob . PROPERTIES , xmlProperties ) ; jobDetail . setJobDataMap ( jdm ) ; sch . scheduleJob ( jobDetail , trigger ) ; sch . start ( ) ; log . info ( "Scheduled job " + jobDetail . getFullName ( ) + " for class " + className ) ; } catch ( Exception e ) { log . fatal ( "Error starting up Scheduler" , e ) ; throw new SynapseException ( "Error starting up Scheduler" , e ) ; } } public String getJobClass ( ) { return className ; } public void setJobClass ( String attributeValue ) { className = attributeValue ; } public void setInterval ( long l ) { repeatInterval = l ; } public long getInterval ( ) { return repeatInterval ; } public void setCount ( int i ) { repeatCount = i ; } public int getCount ( ) { return repeatCount ; } public void addProperty ( OMElement prop ) { xmlProperties . add ( prop ) ; } public Set getProperties ( ) { return xmlProperties ; } public void setCron ( String attributeValue ) { cron = attributeValue ; } public String getCron ( ) { return cron ; } public List getPinnedServers ( ) { return pinnedServers ; } public void setPinnedServers ( List pinnedServers ) { this . pinnedServers = pinnedServers ; } } 	0	['17', '2', '0', '17', '62', '88', '2', '16', '16', '0.888888889', '329', '0.888888889', '0', '0.117647059', '0.205357143', '0', '0', '17.82352941', '12', '1.5882', '0']
package org . apache . synapse . config . xml ; import org . apache . axiom . om . OMContainer ; import org . apache . axiom . om . OMDocument ; import org . apache . axiom . om . OMElement ; import org . apache . axiom . om . OMNamespace ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import org . apache . synapse . SynapseException ; import org . jaxen . JaxenException ; import org . jaxen . XPath ; import java . util . Iterator ; public class OMElementUtils { private static final Log log = LogFactory . getLog ( OMElementUtils . class ) ; public static String getNameSpaceWithPrefix ( String prefix , OMElement elem ) { if ( prefix == null || elem == null ) { log . warn ( "Searching for null NS prefix and/or using null OMElement" ) ; return null ; } OMElement currentElem = elem ; while ( true ) { Iterator iter = currentElem . getAllDeclaredNamespaces ( ) ; while ( iter . hasNext ( ) ) { OMNamespace ns = ( OMNamespace ) iter . next ( ) ; if ( prefix . equals ( ns . getPrefix ( ) ) ) { return ns . getNamespaceURI ( ) ; } } OMContainer parent = currentElem . getParent ( ) ; if ( parent != null && parent instanceof OMElement ) { currentElem = ( OMElement ) parent ; } else { return null ; } } } public static void addNameSpaces ( XPath xpath , OMElement elem , Log log ) { OMElement currentElem = elem ; while ( currentElem != null ) { Iterator it = currentElem . getAllDeclaredNamespaces ( ) ; while ( it . hasNext ( ) ) { OMNamespace n = ( OMNamespace ) it . next ( ) ; if ( n != null && ! "" . equals ( n . getPrefix ( ) ) ) { try { xpath . addNamespace ( n . getPrefix ( ) , n . getNamespaceURI ( ) ) ; } catch ( JaxenException je ) { String msg = "Error adding declared name space with prefix : " + n . getPrefix ( ) + "and uri : " + n . getNamespaceURI ( ) + " to the XPath : " + xpath ; log . error ( msg ) ; throw new SynapseException ( msg , je ) ; } } } OMContainer parent = currentElem . getParent ( ) ; if ( parent == null || parent instanceof OMDocument ) { return ; } if ( parent instanceof OMElement ) { currentElem = ( OMElement ) parent ; } } } } 	0	['4', '1', '0', '13', '21', '4', '4', '9', '3', '0.666666667', '132', '1', '0', '0', '0.4', '0', '0', '31.75', '6', '2.75', '0']
package org . apache . synapse . config . xml ; import org . apache . axiom . om . OMAttribute ; import org . apache . axiom . om . OMElement ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import org . apache . synapse . Mediator ; import org . apache . synapse . SynapseConstants ; import org . apache . synapse . mediators . eip . splitter . IterateMediator ; import org . apache . synapse . util . xpath . SynapseXPath ; import org . jaxen . JaxenException ; import javax . xml . namespace . QName ; public class IterateMediatorFactory extends AbstractMediatorFactory { private static final Log log = LogFactory . getLog ( IterateMediatorFactory . class ) ; private static final QName ITERATE_Q = new QName ( SynapseConstants . SYNAPSE_NAMESPACE , "iterate" ) ; private static final QName ATT_CONTPAR = new QName ( "continueParent" ) ; private static final QName ATT_PREPLD = new QName ( "preservePayload" ) ; private static final QName ATT_ATTACHPATH = new QName ( "attachPath" ) ; public Mediator createMediator ( OMElement elem ) { IterateMediator mediator = new IterateMediator ( ) ; processTraceState ( mediator , elem ) ; OMAttribute continueParent = elem . getAttribute ( ATT_CONTPAR ) ; if ( continueParent != null ) { mediator . setContinueParent ( Boolean . valueOf ( continueParent . getAttributeValue ( ) ) . booleanValue ( ) ) ; } OMAttribute preservePayload = elem . getAttribute ( ATT_PREPLD ) ; if ( preservePayload != null ) { mediator . setPreservePayload ( Boolean . valueOf ( preservePayload . getAttributeValue ( ) ) . booleanValue ( ) ) ; } OMAttribute expression = elem . getAttribute ( ATT_EXPRN ) ; if ( expression != null ) { try { mediator . setExpression ( SynapseXPathFactory . getSynapseXPath ( elem , ATT_EXPRN ) ) ; } catch ( JaxenException e ) { handleException ( "Unable to build the IterateMediator. " + "Invalid XPATH " + expression . getAttributeValue ( ) , e ) ; } } else { handleException ( "XPATH expression is required " + "for an IterateMediator under the \"expression\" attribute" ) ; } OMAttribute attachPath = elem . getAttribute ( ATT_ATTACHPATH ) ; String attachPathValue = "." ; if ( attachPath != null && ! mediator . isPreservePayload ( ) ) { handleException ( "Wrong configuration for the iterate mediator :: if the iterator " + "should not preserve payload, then attachPath can not be present" ) ; } else if ( attachPath != null ) { attachPathValue = attachPath . getAttributeValue ( ) ; } try { SynapseXPath xp = new SynapseXPath ( attachPathValue ) ; OMElementUtils . addNameSpaces ( xp , elem , log ) ; mediator . setAttachPath ( xp ) ; } catch ( JaxenException e ) { handleException ( "Unable to build the IterateMediator. Invalid XPATH " + attachPathValue , e ) ; } OMElement targetElement = elem . getFirstChildWithName ( TARGET_Q ) ; if ( targetElement != null ) { mediator . setTarget ( TargetFactory . createTarget ( targetElement ) ) ; } else { handleException ( "Target for an iterate mediator is required :: missing target" ) ; } return mediator ; } public QName getTagQName ( ) { return ITERATE_Q ; } } 	0	['4', '2', '0', '14', '30', '2', '0', '14', '3', '0.666666667', '161', '1', '0', '0.6', '0.666666667', '0', '0', '38', '8', '2.25', '0']
package org . apache . synapse . mediators ; import org . apache . synapse . MessageContext ; public interface FilterMediator extends ListMediator { public boolean test ( MessageContext synCtx ) ; } 	0	['1', '1', '0', '5', '1', '0', '3', '2', '1', '2', '1', '0', '0', '0', '1', '0', '0', '0', '1', '1', '0']
package org . apache . synapse . config . xml ; import org . apache . axiom . om . OMElement ; import org . apache . synapse . Mediator ; import org . apache . synapse . mediators . db . DBReportMediator ; public class DBReportMediatorSerializer extends AbstractDBMediatorSerializer { public OMElement serializeMediator ( OMElement parent , Mediator m ) { if ( ! ( m instanceof DBReportMediator ) ) { handleException ( "Unsupported mediator passed in for serialization : " + m . getType ( ) ) ; } DBReportMediator mediator = ( DBReportMediator ) m ; OMElement dbReport = fac . createOMElement ( "dbreport" , synNS ) ; saveTracingState ( dbReport , mediator ) ; serializeDBInformation ( mediator , dbReport ) ; if ( parent != null ) { parent . addChild ( dbReport ) ; } return dbReport ; } public String getMediatorClassName ( ) { return DBReportMediator . class . getName ( ) ; } } 	0	['3', '3', '0', '8', '14', '3', '0', '8', '3', '2', '45', '0', '0', '0.777777778', '0.555555556', '0', '0', '14', '3', '1.3333', '0']
package org . apache . synapse . config . xml ; import org . apache . axiom . om . * ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import org . apache . synapse . SynapseException ; import org . apache . synapse . config . xml . endpoints . EndpointSerializer ; import org . apache . synapse . core . axis2 . ProxyService ; import org . apache . synapse . endpoints . Endpoint ; import org . apache . synapse . mediators . base . SequenceMediator ; import org . apache . synapse . util . PolicyInfo ; import java . net . URI ; import java . util . ArrayList ; import java . util . List ; public class ProxyServiceSerializer { private static final Log log = LogFactory . getLog ( PropertyMediatorSerializer . class ) ; protected static final OMFactory fac = OMAbstractFactory . getOMFactory ( ) ; protected static final OMNamespace synNS = fac . createOMNamespace ( XMLConfigConstants . SYNAPSE_NAMESPACE , "syn" ) ; protected static final OMNamespace nullNS = fac . createOMNamespace ( XMLConfigConstants . NULL_NAMESPACE , "" ) ; public static OMElement serializeProxy ( OMElement parent , ProxyService service ) { OMElement proxy = fac . createOMElement ( "proxy" , synNS ) ; if ( service . getName ( ) != null ) { proxy . addAttribute ( fac . createOMAttribute ( "name" , nullNS , service . getName ( ) ) ) ; } else { handleException ( "Invalid proxy service. Service name is required" ) ; } String descriptionStr = service . getDescription ( ) ; if ( descriptionStr != null ) { OMElement description = fac . createOMElement ( "description" , synNS ) ; description . addChild ( fac . createOMText ( descriptionStr ) ) ; proxy . addChild ( description ) ; } ArrayList transports = service . getTransports ( ) ; if ( transports != null && ! transports . isEmpty ( ) ) { String transportStr = "" + transports . get ( 0 ) ; for ( int i = 1 ; i < transports . size ( ) ; i ++ ) { transportStr = transportStr + " " + transports . get ( i ) ; } proxy . addAttribute ( fac . createOMAttribute ( "transports" , nullNS , transportStr ) ) ; } List pinnedServers = service . getPinnedServers ( ) ; if ( pinnedServers != null && ! pinnedServers . isEmpty ( ) ) { String pinnedServersStr = "" + pinnedServers . get ( 0 ) ; for ( int i = 1 ; i < pinnedServers . size ( ) ; i ++ ) { pinnedServersStr = pinnedServersStr + " " + pinnedServers . get ( i ) ; } proxy . addAttribute ( fac . createOMAttribute ( "pinnedServers" , nullNS , pinnedServersStr ) ) ; } if ( service . isStartOnLoad ( ) ) { proxy . addAttribute ( fac . createOMAttribute ( "startOnLoad" , nullNS , "true" ) ) ; } else { proxy . addAttribute ( fac . createOMAttribute ( "startOnLoad" , nullNS , "false" ) ) ; } String endpoint = service . getTargetEndpoint ( ) ; OMElement target = fac . createOMElement ( "target" , synNS ) ; Endpoint inLineEndpoint = service . getTargetInLineEndpoint ( ) ; if ( endpoint != null ) { target . addAttribute ( fac . createOMAttribute ( "endpoint" , nullNS , endpoint ) ) ; proxy . addChild ( target ) ; } else if ( inLineEndpoint != null ) { OMElement epElement = EndpointSerializer . getElementFromEndpoint ( inLineEndpoint ) ; target . addChild ( epElement ) ; proxy . addChild ( target ) ; } String inSeq = service . getTargetInSequence ( ) ; String outSeq = service . getTargetOutSequence ( ) ; String faultSeq = service . getTargetFaultSequence ( ) ; SequenceMediatorSerializer serializer = new SequenceMediatorSerializer ( ) ; if ( inSeq != null ) { target . addAttribute ( fac . createOMAttribute ( "inSequence" , nullNS , inSeq ) ) ; proxy . addChild ( target ) ; } else { SequenceMediator inLineInSeq = service . getTargetInLineInSequence ( ) ; if ( inLineInSeq != null ) { OMElement inSeqElement = serializer . serializeAnonymousSequence ( null , inLineInSeq ) ; inSeqElement . setLocalName ( "inSequence" ) ; target . addChild ( inSeqElement ) ; proxy . addChild ( target ) ; } } if ( outSeq != null ) { target . addAttribute ( fac . createOMAttribute ( "outSequence" , nullNS , outSeq ) ) ; proxy . addChild ( target ) ; } else { SequenceMediator inLineOutSeq = service . getTargetInLineOutSequence ( ) ; if ( inLineOutSeq != null ) { OMElement outSeqElement = serializer . serializeAnonymousSequence ( null , inLineOutSeq ) ; outSeqElement . setLocalName ( "outSequence" ) ; target . addChild ( outSeqElement ) ; proxy . addChild ( target ) ; } } if ( faultSeq != null ) { target . addAttribute ( fac . createOMAttribute ( "faultSequence" , nullNS , faultSeq ) ) ; proxy . addChild ( target ) ; } else { SequenceMediator inLineFaultSeq = service . getTargetInLineFaultSequence ( ) ; if ( inLineFaultSeq != null ) { OMElement faultSeqElement = serializer . serializeAnonymousSequence ( null , inLineFaultSeq ) ; faultSeqElement . setLocalName ( "faultSequence" ) ; target . addChild ( faultSeqElement ) ; proxy . addChild ( target ) ; } } String wsdlKey = service . getWSDLKey ( ) ; URI wsdlUri = service . getWsdlURI ( ) ; Object inLineWSDL = service . getInLineWSDL ( ) ; if ( wsdlKey != null || wsdlUri != null || inLineWSDL != null ) { OMElement wsdl = fac . createOMElement ( "publishWSDL" , synNS ) ; if ( wsdlKey != null ) { wsdl . addAttribute ( fac . createOMAttribute ( "key" , nullNS , wsdlKey ) ) ; } else if ( inLineWSDL != null ) { wsdl . addChild ( ( OMNode ) inLineWSDL ) ; } else if ( wsdlUri != null ) { wsdl . addAttribute ( fac . createOMAttribute ( "uri" , nullNS , wsdlUri . toString ( ) ) ) ; } ResourceMapSerializer . serializeResourceMap ( wsdl , service . getResourceMap ( ) ) ; proxy . addChild ( wsdl ) ; } for ( PolicyInfo pi : service . getPolicies ( ) ) { OMElement policy = fac . createOMElement ( "policy" , synNS ) ; if ( pi . getPolicyKey ( ) != null ) { policy . addAttribute ( fac . createOMAttribute ( "key" , nullNS , pi . getPolicyKey ( ) ) ) ; } else { handleException ( "Policy without a key has been found" ) ; } if ( pi . getOperation ( ) != null ) { policy . addAttribute ( fac . createOMAttribute ( "operationName" , nullNS , pi . getOperation ( ) . getLocalPart ( ) ) ) ; if ( pi . getOperation ( ) . getNamespaceURI ( ) != null ) { policy . addAttribute ( fac . createOMAttribute ( "operationNamespace" , nullNS , pi . getOperation ( ) . getNamespaceURI ( ) ) ) ; } } if ( pi . getType ( ) != 0 ) { policy . addAttribute ( fac . createOMAttribute ( "type" , nullNS , pi . getMessageLable ( ) . toLowerCase ( ) ) ) ; } proxy . addChild ( policy ) ; } for ( String propertyName : service . getParameterMap ( ) . keySet ( ) ) { OMElement property = fac . createOMElement ( "parameter" , synNS ) ; property . addAttribute ( fac . createOMAttribute ( "name" , nullNS , propertyName ) ) ; Object value = service . getParameterMap ( ) . get ( propertyName ) ; if ( value != null ) { if ( value instanceof String ) { property . setText ( ( ( String ) value ) . trim ( ) ) ; proxy . addChild ( property ) ; } else if ( value instanceof OMNode ) { property . addChild ( ( OMNode ) value ) ; proxy . addChild ( property ) ; } } } if ( service . isWsRMEnabled ( ) ) { proxy . addChild ( fac . createOMElement ( "enableRM" , synNS ) ) ; } if ( service . isWsSecEnabled ( ) ) { proxy . addChild ( fac . createOMElement ( "enableSec" , synNS ) ) ; } int isEnableStatistics = service . getStatisticsState ( ) ; String statisticsValue = null ; if ( isEnableStatistics == org . apache . synapse . SynapseConstants . STATISTICS_ON ) { statisticsValue = XMLConfigConstants . STATISTICS_ENABLE ; } else if ( isEnableStatistics == org . apache . synapse . SynapseConstants . STATISTICS_OFF ) { statisticsValue = XMLConfigConstants . STATISTICS_DISABLE ; } if ( statisticsValue != null ) { proxy . addAttribute ( fac . createOMAttribute ( XMLConfigConstants . STATISTICS_ATTRIB_NAME , nullNS , statisticsValue ) ) ; } int traceState = service . getTraceState ( ) ; String traceValue = null ; if ( traceState == org . apache . synapse . SynapseConstants . TRACING_ON ) { traceValue = XMLConfigConstants . TRACE_ENABLE ; } else if ( traceState == org . apache . synapse . SynapseConstants . TRACING_OFF ) { traceValue = XMLConfigConstants . TRACE_DISABLE ; } if ( traceValue != null ) { proxy . addAttribute ( fac . createOMAttribute ( XMLConfigConstants . TRACE_ATTRIB_NAME , nullNS , traceValue ) ) ; } if ( parent != null ) { parent . addChild ( proxy ) ; } return proxy ; } private static void handleException ( String msg ) { log . error ( msg ) ; throw new SynapseException ( msg ) ; } } 	0	['4', '1', '0', '19', '69', '2', '1', '18', '2', '0.583333333', '598', '1', '0', '0', '0.333333333', '0', '0', '147.5', '40', '10.25', '0']
package org . apache . synapse ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import java . util . Stack ; import java . io . StringWriter ; import java . io . Writer ; import java . io . PrintWriter ; public abstract class FaultHandler { private static final Log log = LogFactory . getLog ( FaultHandler . class ) ; private static final Log trace = LogFactory . getLog ( SynapseConstants . TRACE_LOGGER ) ; public void handleFault ( MessageContext synCtx ) { boolean traceOn = synCtx . getTracingState ( ) == SynapseConstants . TRACING_ON ; boolean traceOrDebugOn = traceOn || log . isDebugEnabled ( ) ; if ( traceOrDebugOn ) { traceOrDebugWarn ( traceOn , "FaultHandler executing impl: " + this . getClass ( ) . getName ( ) ) ; } try { synCtx . getServiceLog ( ) . info ( "FaultHandler executing impl: " + this . getClass ( ) . getName ( ) ) ; onFault ( synCtx ) ; } catch ( SynapseException e ) { Stack faultStack = synCtx . getFaultStack ( ) ; if ( faultStack != null && ! faultStack . isEmpty ( ) ) { ( ( FaultHandler ) faultStack . pop ( ) ) . handleFault ( synCtx ) ; } } } public void handleFault ( MessageContext synCtx , Exception e ) { boolean traceOn = synCtx . getTracingState ( ) == SynapseConstants . TRACING_ON ; boolean traceOrDebugOn = traceOn || log . isDebugEnabled ( ) ; synCtx . setProperty ( SynapseConstants . ERROR_CODE , "00000" ) ; synCtx . setProperty ( SynapseConstants . ERROR_MESSAGE , e . getMessage ( ) . split ( "\n" ) [ 0 ] ) ; synCtx . setProperty ( SynapseConstants . ERROR_DETAIL , getStackTrace ( e ) ) ; synCtx . setProperty ( SynapseConstants . ERROR_EXCEPTION , e ) ; if ( traceOrDebugOn ) { traceOrDebugWarn ( traceOn , "Fault handler - setting ERROR_MESSAGE : " + synCtx . getProperty ( SynapseConstants . ERROR_MESSAGE ) ) ; traceOrDebugWarn ( traceOn , "Fault handler - setting ERROR_DETAIL : " + synCtx . getProperty ( SynapseConstants . ERROR_DETAIL ) ) ; traceOrDebugWarn ( traceOn , "Fault handler - setting ERROR_EXCEPTION : " + synCtx . getProperty ( SynapseConstants . ERROR_EXCEPTION ) ) ; } synCtx . getServiceLog ( ) . warn ( "Fault handler - setting ERROR_MESSAGE : " + synCtx . getProperty ( SynapseConstants . ERROR_MESSAGE ) ) ; try { onFault ( synCtx ) ; } catch ( SynapseException se ) { Stack faultStack = synCtx . getFaultStack ( ) ; if ( faultStack != null && ! faultStack . isEmpty ( ) ) { ( ( FaultHandler ) faultStack . pop ( ) ) . handleFault ( synCtx , se ) ; } } } public abstract void onFault ( MessageContext synCtx ) ; public static String getStackTrace ( Throwable aThrowable ) { final Writer result = new StringWriter ( ) ; final PrintWriter printWriter = new PrintWriter ( result ) ; aThrowable . printStackTrace ( printWriter ) ; return result . toString ( ) ; } private void traceOrDebugWarn ( boolean traceOn , String msg ) { if ( traceOn ) { trace . warn ( msg ) ; } log . warn ( msg ) ; } } 	0	['7', '1', '4', '20', '32', '9', '17', '4', '5', '0.5', '220', '1', '0', '0', '0.333333333', '0', '0', '30.14285714', '7', '2.5714', '0']
package org . apache . synapse . mediators ; import org . apache . synapse . * ; import org . apache . synapse . mediators . base . SequenceMediator ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class MediatorFaultHandler extends FaultHandler { private static final Log log = LogFactory . getLog ( MediatorFaultHandler . class ) ; private static final Log trace = LogFactory . getLog ( SynapseConstants . TRACE_LOGGER ) ; private Mediator faultMediator = null ; public MediatorFaultHandler ( Mediator faultMediator ) { this . faultMediator = faultMediator ; } public void onFault ( MessageContext synCtx ) throws SynapseException { boolean traceOn = synCtx . getTracingState ( ) == SynapseConstants . TRACING_ON ; boolean traceOrDebugOn = traceOn || log . isDebugEnabled ( ) ; String name = null ; if ( faultMediator instanceof SequenceMediator ) { name = ( ( SequenceMediator ) faultMediator ) . getName ( ) ; } if ( name == null ) { name = faultMediator . getClass ( ) . getName ( ) ; } if ( traceOrDebugOn ) { traceOrDebugWarn ( traceOn , "Executing fault handler mediator : " + name ) ; } synCtx . getServiceLog ( ) . warn ( "Executing fault sequence mediator : " + name ) ; this . faultMediator . mediate ( synCtx ) ; } public Mediator getFaultMediator ( ) { return faultMediator ; } public void setFaultMediator ( Mediator faultMediator ) { this . faultMediator = faultMediator ; } private void traceOrDebugWarn ( boolean traceOn , String msg ) { if ( traceOn ) { trace . warn ( msg ) ; } log . warn ( msg ) ; } } 	0	['6', '2', '0', '10', '20', '0', '4', '7', '4', '0.533333333', '106', '1', '1', '0.555555556', '0.4', '1', '2', '16.16666667', '2', '0.8333', '0']
package org . apache . synapse . core . axis2 ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import org . apache . synapse . FaultHandler ; import org . apache . synapse . MessageContext ; import org . apache . synapse . SynapseConstants ; import org . apache . synapse . ServerManager ; import java . util . Iterator ; import java . util . Map ; import java . util . Stack ; import java . util . TimerTask ; public class TimeoutHandler extends TimerTask { private static final Log log = LogFactory . getLog ( TimeoutHandler . class ) ; private Map callbackStore = null ; private Object lock = new Object ( ) ; private boolean alreadyExecuting = false ; private long globalTimeout = SynapseConstants . DEFAULT_GLOBAL_TIMEOUT ; public TimeoutHandler ( Map callbacks ) { this . callbackStore = callbacks ; globalTimeout = ServerManager . getInstance ( ) . getGlobalTimeoutInterval ( ) ; log . info ( "This engine will expire all callbacks after : " + ( globalTimeout / 1000 ) + " seconds, irrespective of the timeout action, after the specified or optional timeout" ) ; } public void run ( ) { if ( alreadyExecuting ) return ; synchronized ( lock ) { alreadyExecuting = true ; try { processCallbacks ( ) ; } catch ( Exception ignore ) { } alreadyExecuting = false ; } } private void processCallbacks ( ) { synchronized ( callbackStore ) { if ( callbackStore . size ( ) > 0 ) { long currentTime = currentTime ( ) ; Iterator i = callbackStore . keySet ( ) . iterator ( ) ; while ( i . hasNext ( ) ) { Object key = i . next ( ) ; AsyncCallback callback = ( AsyncCallback ) callbackStore . get ( key ) ; if ( callback . getTimeOutAction ( ) != SynapseConstants . NONE ) { if ( callback . getTimeOutOn ( ) <= currentTime ) { callbackStore . remove ( key ) ; if ( callback . getTimeOutAction ( ) == SynapseConstants . DISCARD_AND_FAULT ) { MessageContext msgContext = callback . getSynapseOutMsgCtx ( ) ; msgContext . setProperty ( SynapseConstants . ERROR_CODE , SynapseConstants . TIME_OUT ) ; msgContext . setProperty ( SynapseConstants . ERROR_MESSAGE , "Send timeout" ) ; Stack faultStack = msgContext . getFaultStack ( ) ; for ( int j = 0 ; j < faultStack . size ( ) ; j ++ ) { Object o = faultStack . pop ( ) ; if ( o instanceof FaultHandler ) { ( ( FaultHandler ) o ) . handleFault ( msgContext ) ; } } } } } else if ( currentTime > globalTimeout + callback . getTimeOutOn ( ) ) { log . warn ( "Expiring message ID : " + key + "; dropping message after " + "global timeout of : " + ( globalTimeout / 1000 ) + " seconds" ) ; callbackStore . remove ( key ) ; } } } } } private long currentTime ( ) { return System . currentTimeMillis ( ) ; } } 	0	['5', '2', '0', '7', '33', '2', '1', '6', '2', '0.55', '207', '1', '0', '0.5', '0.625', '0', '0', '39.4', '5', '1.6', '0']
package org . apache . synapse . util ; import org . apache . synapse . SynapseException ; import java . io . ByteArrayOutputStream ; public class FixedByteArrayOutputStream extends ByteArrayOutputStream { public FixedByteArrayOutputStream ( int size ) { super ( size ) ; } public synchronized void write ( int b ) { if ( count + 1 > buf . length ) { throw new SynapseException ( "Fixed size of internal byte array exceeded" ) ; } super . write ( b ) ; } public synchronized void write ( byte b [ ] , int off , int len ) { if ( count + len > buf . length ) { throw new SynapseException ( "Fixed size of internal byte array exceeded" ) ; } super . write ( b , off , len ) ; } } 	0	['3', '3', '0', '2', '7', '1', '1', '1', '3', '2', '43', '0', '0', '0.882352941', '0.777777778', '2', '2', '13.33333333', '2', '1.3333', '0']
package org . apache . synapse . config . xml ; import java . util . HashMap ; import java . util . Iterator ; import java . util . Map ; import javax . xml . namespace . QName ; import org . apache . axiom . om . * ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import org . apache . synapse . SynapseException ; import org . apache . synapse . Startup ; import org . apache . synapse . startup . quartz . SimpleQuartzFactory ; import sun . misc . Service ; public class StartupFinder { private static final Log log = LogFactory . getLog ( ConfigurationFactoryAndSerializerFinder . class ) ; private static StartupFinder instance = null ; private static Map factoryMap = new HashMap ( ) , serializerMap = new HashMap ( ) ; public static synchronized StartupFinder getInstance ( ) { if ( instance == null ) { instance = new StartupFinder ( ) ; } return instance ; } public synchronized void reset ( ) { factoryMap . clear ( ) ; instance = null ; } private static final Class [ ] builtins = { SimpleQuartzFactory . class } ; private StartupFinder ( ) { for ( int i = 0 ; i < builtins . length ; i ++ ) { Class b = builtins [ i ] ; StartupFactory sf ; try { sf = ( StartupFactory ) b . newInstance ( ) ; } catch ( Exception e ) { throw new SynapseException ( "cannot instantiate " + b . getName ( ) , e ) ; } factoryMap . put ( sf . getTagQName ( ) , b ) ; serializerMap . put ( sf . getTagQName ( ) , sf . getSerializerClass ( ) ) ; } registerExtensions ( ) ; } private void handleException ( String msg ) { log . error ( msg ) ; throw new SynapseException ( msg ) ; } private void registerExtensions ( ) { Iterator it = Service . providers ( StartupFactory . class ) ; while ( it . hasNext ( ) ) { StartupFactory sf = ( StartupFactory ) it . next ( ) ; QName tag = sf . getTagQName ( ) ; factoryMap . put ( tag , sf . getClass ( ) ) ; serializerMap . put ( tag , sf . getSerializerClass ( ) ) ; if ( log . isDebugEnabled ( ) ) { log . debug ( "Added StartupFactory " + sf . getClass ( ) + " to handle " + tag ) ; } } } public Startup getStartup ( OMElement element ) { QName qName = element . getQName ( ) ; if ( log . isDebugEnabled ( ) ) { log . debug ( "Creating the Startup for : " + qName ) ; } Class cls = ( Class ) factoryMap . get ( qName ) ; if ( cls == null ) { String msg = "Unknown Startup type referenced by startup element : " + qName ; log . error ( msg ) ; throw new SynapseException ( msg ) ; } try { StartupFactory sf = ( StartupFactory ) cls . newInstance ( ) ; return sf . createStartup ( element ) ; } catch ( InstantiationException e ) { String msg = "Error initializing configuration factory : " + cls ; log . error ( msg ) ; throw new SynapseException ( msg , e ) ; } catch ( IllegalAccessException e ) { String msg = "Error initializing configuration factory : " + cls ; log . error ( msg ) ; throw new SynapseException ( msg , e ) ; } } public OMElement serializeStartup ( OMElement parent , Startup startup ) { Class cls = ( Class ) serializerMap . get ( startup . getTagQName ( ) ) ; if ( cls == null ) { String msg = "Unknown startup type referenced by startup element : " + startup . getTagQName ( ) ; log . error ( msg ) ; throw new SynapseException ( msg ) ; } try { StartupSerializer ss = ( StartupSerializer ) cls . newInstance ( ) ; return ss . serializeStartup ( parent , startup ) ; } catch ( InstantiationException e ) { String msg = "Error initializing startup serializer: " + cls ; log . error ( msg ) ; throw new SynapseException ( msg , e ) ; } catch ( IllegalAccessException e ) { String msg = "Error initializing startup ser: " + cls ; log . error ( msg ) ; throw new SynapseException ( msg , e ) ; } } public Map getFactoryMap ( ) { return factoryMap ; } public Map getSerializerMap ( ) { return serializerMap ; } public Startup getObjectFromOMNode ( OMNode om ) { if ( om instanceof OMElement ) { return getStartup ( ( OMElement ) om ) ; } else { handleException ( "Invalid configuration XML : " + om ) ; } return null ; } } 	0	['11', '1', '0', '11', '38', '0', '2', '9', '7', '0.56', '336', '1', '1', '0', '0.28', '0', '0', '29.09090909', '3', '1.3636', '0']
package org . apache . synapse . config . xml . endpoints ; import org . apache . axiom . om . OMElement ; import org . apache . axiom . om . OMAbstractFactory ; import org . apache . axiom . om . OMFactory ; import org . apache . synapse . endpoints . Endpoint ; import org . apache . synapse . endpoints . IndirectEndpoint ; import org . apache . synapse . SynapseException ; import org . apache . synapse . SynapseConstants ; public class IndirectEndpointSerializer extends EndpointSerializer { protected OMElement serializeEndpoint ( Endpoint endpoint ) { if ( ! ( endpoint instanceof IndirectEndpoint ) ) { throw new SynapseException ( "Invalid endpoint type." ) ; } fac = OMAbstractFactory . getOMFactory ( ) ; OMElement endpointElement = fac . createOMElement ( "endpoint" , SynapseConstants . SYNAPSE_OMNAMESPACE ) ; IndirectEndpoint indirectEndpoint = ( IndirectEndpoint ) endpoint ; String ref = indirectEndpoint . getKey ( ) ; if ( ref != null ) { endpointElement . addAttribute ( "key" , ref , null ) ; } return endpointElement ; } } 	0	['2', '2', '0', '10', '8', '1', '1', '10', '1', '2', '38', '0', '0', '0.857142857', '0.75', '1', '2', '18', '3', '1.5', '0']
package org . apache . synapse . config . xml ; import org . apache . synapse . Mediator ; import org . apache . synapse . SynapseException ; import org . apache . axiom . om . OMElement ; import org . apache . axiom . om . OMAttribute ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import javax . xml . namespace . QName ; public abstract class AbstractMediatorFactory implements MediatorFactory { protected static Log log ; protected static final QName ATT_NAME = new QName ( "name" ) ; protected static final QName ATT_VALUE = new QName ( "value" ) ; protected static final QName ATT_XPATH = new QName ( "xpath" ) ; protected static final QName ATT_REGEX = new QName ( "regex" ) ; protected static final QName ATT_SEQUENCE = new QName ( "sequence" ) ; protected static final QName ATT_EXPRN = new QName ( "expression" ) ; protected static final QName ATT_KEY = new QName ( "key" ) ; protected static final QName ATT_SOURCE = new QName ( "source" ) ; protected static final QName ATT_TARGET = new QName ( "target" ) ; protected static final QName ATT_ONERROR = new QName ( "onError" ) ; protected static final QName ATT_STATS = new QName ( XMLConfigConstants . STATISTICS_ATTRIB_NAME ) ; protected static final QName PROP_Q = new QName ( XMLConfigConstants . SYNAPSE_NAMESPACE , "property" ) ; protected static final QName FEATURE_Q = new QName ( XMLConfigConstants . SYNAPSE_NAMESPACE , "feature" ) ; protected static final QName TARGET_Q = new QName ( XMLConfigConstants . SYNAPSE_NAMESPACE , "target" ) ; protected AbstractMediatorFactory ( ) { log = LogFactory . getLog ( this . getClass ( ) ) ; } protected void processTraceState ( Mediator mediator , OMElement mediatorOmElement ) { OMAttribute trace = mediatorOmElement . getAttribute ( new QName ( XMLConfigConstants . NULL_NAMESPACE , XMLConfigConstants . TRACE_ATTRIB_NAME ) ) ; if ( trace != null ) { String traceValue = trace . getAttributeValue ( ) ; if ( traceValue != null ) { if ( traceValue . equals ( XMLConfigConstants . TRACE_ENABLE ) ) { mediator . setTraceState ( org . apache . synapse . SynapseConstants . TRACING_ON ) ; } else if ( traceValue . equals ( XMLConfigConstants . TRACE_DISABLE ) ) { mediator . setTraceState ( org . apache . synapse . SynapseConstants . TRACING_OFF ) ; } } } } protected void handleException ( String message , Exception e ) { LogFactory . getLog ( this . getClass ( ) ) . error ( message , e ) ; throw new SynapseException ( message , e ) ; } protected void handleException ( String message ) { LogFactory . getLog ( this . getClass ( ) ) . error ( message ) ; throw new SynapseException ( message ) ; } } 	0	['5', '1', '19', '26', '18', '10', '19', '7', '0', '1', '154', '1', '0', '0', '0.45', '0', '0', '26.8', '5', '1.4', '0']
package org . apache . synapse . mediators . eip ; import org . apache . synapse . MessageContext ; import org . apache . synapse . endpoints . Endpoint ; import org . apache . synapse . mediators . base . SequenceMediator ; import org . apache . axis2 . addressing . EndpointReference ; public class Target { private String toAddress = null ; private String soapAction = null ; private SequenceMediator sequence = null ; private String sequenceRef = null ; private Endpoint endpoint = null ; private String endpointRef = null ; public void mediate ( MessageContext synCtx ) { if ( soapAction != null ) { synCtx . setSoapAction ( soapAction ) ; } if ( toAddress != null ) { if ( synCtx . getTo ( ) != null ) { synCtx . getTo ( ) . setAddress ( toAddress ) ; } else { synCtx . setTo ( new EndpointReference ( toAddress ) ) ; } } if ( sequence != null ) { synCtx . getEnvironment ( ) . injectAsync ( synCtx , sequence ) ; } else if ( sequenceRef != null ) { SequenceMediator refSequence = ( SequenceMediator ) synCtx . getSequence ( sequenceRef ) ; if ( refSequence != null ) { synCtx . getEnvironment ( ) . injectAsync ( synCtx , refSequence ) ; } } else if ( endpoint != null ) { endpoint . send ( synCtx ) ; } else if ( endpointRef != null ) { Endpoint epr = synCtx . getConfiguration ( ) . getEndpoint ( endpointRef ) ; if ( epr != null ) { epr . send ( synCtx ) ; } } } public String getToAddress ( ) { return toAddress ; } public void setToAddress ( String toAddress ) { this . toAddress = toAddress ; } public String getSoapAction ( ) { return soapAction ; } public void setSoapAction ( String soapAction ) { this . soapAction = soapAction ; } public SequenceMediator getSequence ( ) { return sequence ; } public void setSequence ( SequenceMediator sequence ) { this . sequence = sequence ; } public String getSequenceRef ( ) { return sequenceRef ; } public void setSequenceRef ( String sequenceRef ) { this . sequenceRef = sequenceRef ; } public Endpoint getEndpoint ( ) { return endpoint ; } public void setEndpoint ( Endpoint endpoint ) { this . endpoint = endpoint ; } public String getEndpointRef ( ) { return endpointRef ; } public void setEndpointRef ( String endpointRef ) { this . endpointRef = endpointRef ; } } 	0	['14', '1', '0', '15', '26', '29', '8', '7', '14', '0.769230769', '159', '1', '2', '0', '0.3', '0', '0', '9.928571429', '9', '1.5', '0']
package org . apache . synapse . registry ; import org . apache . synapse . registry . RegistryEntry ; import java . net . URI ; import java . util . Date ; public class RegistryEntryImpl implements RegistryEntry { private String key = null ; private String name = null ; private long version = Long . MIN_VALUE ; private URI type = null ; private String description ; private long created ; private long lastModified ; private long cachableDuration ; public String getKey ( ) { return key ; } public void setKey ( String key ) { this . key = key ; } public String getName ( ) { return name ; } public void setName ( String name ) { this . name = name ; } public long getVersion ( ) { return version ; } public void setVersion ( long version ) { this . version = version ; } public URI getType ( ) { return type ; } public void setType ( URI type ) { this . type = type ; } public String getDescription ( ) { return description ; } public void setDescription ( String description ) { this . description = description ; } public long getCreated ( ) { return created ; } public void setCreated ( long created ) { this . created = created ; } public long getLastModified ( ) { return lastModified ; } public void setLastModified ( long lastModified ) { this . lastModified = lastModified ; } public long getCachableDuration ( ) { return cachableDuration ; } public void setCachableDuration ( long cachableDuration ) { this . cachableDuration = cachableDuration ; } public String toString ( ) { StringBuffer sb = new StringBuffer ( ) ; sb . append ( "RegistryEntry {" ) . append ( " Key : " + key ) . append ( " Name : " + name ) . append ( " Ver : " + version ) . append ( " Type : " + type ) . append ( " Desc : " + description ) . append ( " Created : " + new Date ( created ) ) . append ( " Modified : " + new Date ( lastModified ) ) . append ( " Cacheable for : " + ( cachableDuration / 1000 ) + "sec" ) . append ( "}" ) ; return sb . toString ( ) ; } } 	0	['18', '1', '0', '2', '28', '87', '1', '1', '18', '0.852941176', '200', '1', '0', '0', '0.361111111', '0', '0', '9.666666667', '1', '0.9444', '0']
package org . apache . synapse . config . xml ; import org . apache . axiom . om . OMElement ; import org . apache . synapse . Mediator ; import org . apache . synapse . SynapseConstants ; import org . apache . synapse . mediators . db . DBReportMediator ; import javax . xml . namespace . QName ; public class DBReportMediatorFactory extends AbstractDBMediatorFactory { private static final QName DBREPORT_Q = new QName ( SynapseConstants . SYNAPSE_NAMESPACE , "dbreport" ) ; public Mediator createMediator ( OMElement elem ) { DBReportMediator mediator = new DBReportMediator ( ) ; buildDataSource ( elem , mediator ) ; processStatements ( elem , mediator ) ; return mediator ; } public QName getTagQName ( ) { return DBREPORT_Q ; } } 	0	['4', '3', '0', '5', '9', '4', '0', '5', '3', '0.666666667', '31', '1', '0', '0.818181818', '0.666666667', '0', '0', '6.5', '1', '0.5', '0']
package org . apache . synapse . config . xml ; import org . apache . axiom . om . OMElement ; import org . apache . synapse . Mediator ; import org . apache . synapse . mediators . filters . InMediator ; public class InMediatorSerializer extends AbstractListMediatorSerializer { public OMElement serializeMediator ( OMElement parent , Mediator m ) { if ( ! ( m instanceof InMediator ) ) { handleException ( "Unsupported mediator passed in for serialization : " + m . getType ( ) ) ; } InMediator mediator = ( InMediator ) m ; OMElement in = fac . createOMElement ( "in" , synNS ) ; saveTracingState ( in , mediator ) ; serializeChildren ( in , mediator . getList ( ) ) ; if ( parent != null ) { parent . addChild ( in ) ; } return in ; } public String getMediatorClassName ( ) { return InMediator . class . getName ( ) ; } } 	0	['3', '3', '0', '7', '15', '3', '0', '7', '3', '2', '46', '0', '0', '0.777777778', '0.555555556', '0', '0', '14.33333333', '3', '1.3333', '0']
package org . apache . synapse . util . xpath ; import org . apache . axiom . soap . SOAPEnvelope ; import org . apache . synapse . MessageContext ; import org . apache . synapse . core . axis2 . Axis2MessageContext ; import org . jaxen . UnresolvableException ; import org . jaxen . VariableContext ; import java . util . Map ; public class SynapseXPathVariableContext implements VariableContext { private final VariableContext parent ; private final MessageContext synCtx ; private final SOAPEnvelope env ; public SynapseXPathVariableContext ( VariableContext parent , MessageContext synCtx ) { this . parent = parent ; this . synCtx = synCtx ; this . env = synCtx . getEnvelope ( ) ; } public SynapseXPathVariableContext ( VariableContext parent , SOAPEnvelope env ) { this . parent = parent ; this . synCtx = null ; this . env = env ; } public Object getVariableValue ( String namespaceURI , String prefix , String localName ) throws UnresolvableException { if ( namespaceURI == null ) { if ( env != null ) { if ( SynapseXPathConstants . SOAP_BODY_VARIABLE . equals ( localName ) ) { return env . getBody ( ) ; } else if ( SynapseXPathConstants . SOAP_HEADER_VARIABLE . equals ( localName ) ) { return env . getHeader ( ) ; } } if ( prefix != null && ! "" . equals ( prefix ) && synCtx != null ) { if ( SynapseXPathConstants . MESSAGE_CONTEXT_VARIABLE_PREFIX . equals ( prefix ) ) { return synCtx . getProperty ( localName ) ; } else if ( SynapseXPathConstants . AXIS2_CONTEXT_VARIABLE_PREFIX . equals ( prefix ) ) { return ( ( Axis2MessageContext ) synCtx ) . getAxis2MessageContext ( ) . getProperty ( localName ) ; } else if ( SynapseXPathConstants . TRANSPORT_VARIABLE_PREFIX . equals ( prefix ) ) { org . apache . axis2 . context . MessageContext axis2MessageContext = ( ( Axis2MessageContext ) synCtx ) . getAxis2MessageContext ( ) ; Object headers = axis2MessageContext . getProperty ( org . apache . axis2 . context . MessageContext . TRANSPORT_HEADERS ) ; if ( headers != null && headers instanceof Map ) { Map headersMap = ( Map ) headers ; return headersMap . get ( localName ) ; } } } } return parent . getVariableValue ( namespaceURI , prefix , localName ) ; } } 	0	['3', '1', '0', '9', '13', '0', '1', '8', '3', '0', '113', '1', '1', '0', '0.533333333', '0', '0', '35.66666667', '1', '0.3333', '0']
package org . apache . synapse . config . xml ; import org . apache . axiom . om . OMElement ; import org . apache . synapse . Mediator ; import org . apache . synapse . mediators . eip . splitter . IterateMediator ; public class IterateMediatorSerializer extends AbstractMediatorSerializer { public OMElement serializeMediator ( OMElement parent , Mediator m ) { if ( ! ( m instanceof IterateMediator ) ) { handleException ( "Unsupported mediator passed in for serialization : " + m . getType ( ) ) ; } OMElement itrElem = fac . createOMElement ( "iterate" , synNS ) ; saveTracingState ( itrElem , m ) ; IterateMediator itrMed = ( IterateMediator ) m ; if ( itrMed . isContinueParent ( ) ) { itrElem . addAttribute ( "continueParent" , Boolean . toString ( true ) , nullNS ) ; } if ( itrMed . isPreservePayload ( ) ) { itrElem . addAttribute ( "preservePayload" , Boolean . toString ( true ) , nullNS ) ; } if ( itrMed . getAttachPath ( ) != null && ! "." . equals ( itrMed . getAttachPath ( ) . toString ( ) ) ) { SynapseXPathSerializer . serializeXPath ( itrMed . getAttachPath ( ) , itrElem , "attachPath" ) ; } if ( itrMed . getExpression ( ) != null ) { SynapseXPathSerializer . serializeXPath ( itrMed . getExpression ( ) , itrElem , "expression" ) ; } else { handleException ( "Missing expression of the IterateMediator which is required." ) ; } itrElem . addChild ( TargetSerializer . serializeTarget ( itrMed . getTarget ( ) ) ) ; if ( parent != null ) { parent . addChild ( itrElem ) ; } return itrElem ; } public String getMediatorClassName ( ) { return IterateMediator . class . getName ( ) ; } } 	0	['3', '2', '0', '12', '24', '3', '0', '12', '3', '2', '94', '0', '0', '0.75', '0.555555556', '0', '0', '30.33333333', '8', '3', '0']
package org . apache . synapse . registry ; import org . apache . axiom . om . OMNode ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import org . apache . synapse . config . Entry ; import org . apache . synapse . config . XMLToObjectMapper ; import org . apache . synapse . endpoints . Endpoint ; import org . apache . synapse . mediators . base . SequenceMediator ; import java . net . URI ; import java . util . HashMap ; import java . util . Map ; import java . util . Properties ; public abstract class AbstractRegistry implements Registry { private static final Log log = LogFactory . getLog ( AbstractRegistry . class ) ; protected Properties properties = new Properties ( ) ; public Object getResource ( Entry entry ) { OMNode omNode = null ; RegistryEntry re = null ; if ( entry . isCached ( ) && ! entry . isExpired ( ) ) { return entry . getValue ( ) ; } else if ( ! entry . isCached ( ) ) { omNode = lookup ( entry . getKey ( ) ) ; if ( omNode == null ) { return null ; } else { re = getRegistryEntry ( entry . getKey ( ) ) ; } } else if ( entry . isExpired ( ) ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Cached object has expired for key : " + entry . getKey ( ) ) ; } re = getRegistryEntry ( entry . getKey ( ) ) ; if ( re . getVersion ( ) != Long . MIN_VALUE && re . getVersion ( ) == entry . getVersion ( ) ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Expired version number is same as current version in registry" ) ; } if ( re . getCachableDuration ( ) > 0 ) { entry . setExpiryTime ( System . currentTimeMillis ( ) + re . getCachableDuration ( ) ) ; } else { entry . setExpiryTime ( - 1 ) ; } if ( log . isDebugEnabled ( ) ) { log . debug ( "Renew cache lease for another " + re . getCachableDuration ( ) / 1000 + "s" ) ; } return entry . getValue ( ) ; } else { omNode = lookup ( entry . getKey ( ) ) ; } } if ( entry . getMapper ( ) != null ) { entry . setValue ( entry . getMapper ( ) . getObjectFromOMNode ( omNode ) ) ; if ( entry . getValue ( ) instanceof SequenceMediator ) { SequenceMediator seq = ( SequenceMediator ) entry . getValue ( ) ; seq . setDynamic ( true ) ; seq . setRegistryKey ( entry . getKey ( ) ) ; } else if ( entry . getValue ( ) instanceof Endpoint ) { Endpoint ep = ( Endpoint ) entry . getValue ( ) ; } } else { if ( re != null && re . getType ( ) != null ) { XMLToObjectMapper mapper = getMapper ( re . getType ( ) ) ; if ( mapper != null ) { entry . setMapper ( mapper ) ; entry . setValue ( mapper . getObjectFromOMNode ( omNode ) ) ; } else { entry . setValue ( omNode ) ; } } } if ( re != null ) { if ( re . getCachableDuration ( ) > 0 ) { entry . setExpiryTime ( System . currentTimeMillis ( ) + re . getCachableDuration ( ) ) ; } else { entry . setExpiryTime ( - 1 ) ; } entry . setVersion ( re . getVersion ( ) ) ; } return entry . getValue ( ) ; } private XMLToObjectMapper getMapper ( URI type ) { return null ; } public String getProviderClass ( ) { return this . getClass ( ) . getName ( ) ; } public Properties getConfigurationProperties ( ) { return properties ; } public void init ( Properties properties ) { this . properties = properties ; } } 	0	['7', '1', '1', '10', '37', '13', '1', '9', '5', '0.75', '227', '1', '0', '0', '0.375', '0', '0', '31.14285714', '20', '3.4286', '0']
package org . apache . synapse . config . xml ; import org . apache . axiom . om . OMElement ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import org . apache . synapse . Mediator ; import org . apache . synapse . mediators . builtin . PropertyMediator ; public class PropertyMediatorSerializer extends AbstractMediatorSerializer { public OMElement serializeMediator ( OMElement parent , Mediator m ) { if ( ! ( m instanceof PropertyMediator ) ) { handleException ( "Unsupported mediator passed in for serialization : " + m . getType ( ) ) ; } PropertyMediator mediator = ( PropertyMediator ) m ; OMElement property = fac . createOMElement ( "property" , synNS ) ; saveTracingState ( property , mediator ) ; if ( mediator . getName ( ) != null ) { property . addAttribute ( fac . createOMAttribute ( "name" , nullNS , mediator . getName ( ) ) ) ; } else { handleException ( "Invalid property mediator. Name is required" ) ; } if ( mediator . getValue ( ) != null ) { property . addAttribute ( fac . createOMAttribute ( "value" , nullNS , mediator . getValue ( ) ) ) ; } else if ( mediator . getExpression ( ) != null ) { SynapseXPathSerializer . serializeXPath ( mediator . getExpression ( ) , property , "expression" ) ; } else if ( mediator . getAction ( ) == PropertyMediator . ACTION_SET ) { handleException ( "Invalid property mediator. Value or expression is required if action is SET" ) ; } if ( mediator . getScope ( ) != null ) { property . addAttribute ( fac . createOMAttribute ( "scope" , nullNS , mediator . getScope ( ) ) ) ; } if ( mediator . getAction ( ) == PropertyMediator . ACTION_REMOVE ) { property . addAttribute ( fac . createOMAttribute ( "action" , nullNS , "remove" ) ) ; } if ( parent != null ) { parent . addChild ( property ) ; } return property ; } public String getMediatorClassName ( ) { return PropertyMediator . class . getName ( ) ; } } 	0	['3', '2', '0', '10', '21', '3', '0', '10', '3', '2', '110', '0', '0', '0.75', '0.555555556', '0', '0', '35.66666667', '9', '3.3333', '0']
package org . apache . synapse . metrics ; import org . apache . axis2 . AxisFault ; import org . apache . axis2 . context . MessageContext ; import org . apache . axis2 . handlers . AbstractHandler ; public class GlobalRequestCountHandler extends AbstractHandler { public InvocationResponse invoke ( MessageContext msgContext ) throws AxisFault { msgContext . setProperty ( MetricsConstants . REQUEST_RECEIVED_TIME , new Long ( System . currentTimeMillis ( ) ) ) ; ( ( Counter ) msgContext . getParameter ( MetricsConstants . GLOBAL_REQUEST_COUNTER ) . getValue ( ) ) . increment ( ) ; return InvocationResponse . CONTINUE ; } } 	0	['2', '2', '0', '6', '9', '1', '0', '6', '2', '2', '20', '0', '0', '0.875', '0.75', '0', '0', '9', '1', '0.5', '0']
package org . apache . synapse . config . xml . endpoints ; import org . apache . axiom . om . OMElement ; import org . apache . axiom . om . OMAbstractFactory ; import org . apache . synapse . endpoints . Endpoint ; import org . apache . synapse . endpoints . FailoverEndpoint ; import org . apache . synapse . SynapseException ; import org . apache . synapse . SynapseConstants ; import java . util . List ; public class FailoverEndpointSerializer extends EndpointSerializer { protected OMElement serializeEndpoint ( Endpoint endpoint ) { if ( ! ( endpoint instanceof FailoverEndpoint ) ) { throw new SynapseException ( "Invalid endpoint type." ) ; } FailoverEndpoint failoverEndpoint = ( FailoverEndpoint ) endpoint ; fac = OMAbstractFactory . getOMFactory ( ) ; OMElement endpointElement = fac . createOMElement ( "endpoint" , SynapseConstants . SYNAPSE_OMNAMESPACE ) ; OMElement failoverElement = fac . createOMElement ( "failover" , SynapseConstants . SYNAPSE_OMNAMESPACE ) ; endpointElement . addChild ( failoverElement ) ; String name = failoverEndpoint . getName ( ) ; if ( name != null ) { endpointElement . addAttribute ( "name" , name , null ) ; } for ( Endpoint childEndpoint : failoverEndpoint . getEndpoints ( ) ) { failoverElement . addChild ( EndpointSerializer . getElementFromEndpoint ( childEndpoint ) ) ; } return endpointElement ; } } 	0	['2', '2', '0', '11', '14', '1', '1', '11', '1', '2', '63', '0', '0', '0.857142857', '0.75', '1', '2', '30.5', '4', '2', '0']
package org . apache . synapse . config . xml . endpoints ; import org . apache . axiom . om . OMAttribute ; import org . apache . axiom . om . OMElement ; import org . apache . axiom . om . OMNamespace ; import org . apache . axiom . om . OMNode ; import org . apache . axis2 . description . WSDL2Constants ; import org . apache . synapse . SynapseConstants ; import org . apache . synapse . ServerManager ; import org . apache . synapse . config . SynapseConfigUtils ; import org . apache . synapse . config . xml . endpoints . utils . WSDL11EndpointBuilder ; import org . apache . synapse . endpoints . Endpoint ; import org . apache . synapse . endpoints . WSDLEndpoint ; import org . apache . synapse . endpoints . utils . EndpointDefinition ; import javax . xml . namespace . QName ; import java . io . File ; import java . net . URL ; public class WSDLEndpointFactory extends EndpointFactory { private static WSDLEndpointFactory instance = new WSDLEndpointFactory ( ) ; private WSDLEndpointFactory ( ) { } public static WSDLEndpointFactory getInstance ( ) { return instance ; } protected Endpoint createEndpoint ( OMElement epConfig , boolean anonymousEndpoint ) { WSDLEndpoint wsdlEndpoint = new WSDLEndpoint ( ) ; OMAttribute name = epConfig . getAttribute ( new QName ( org . apache . synapse . config . xml . XMLConfigConstants . NULL_NAMESPACE , "name" ) ) ; if ( name != null ) { wsdlEndpoint . setName ( name . getAttributeValue ( ) ) ; } OMElement wsdlElement = epConfig . getFirstChildWithName ( new QName ( SynapseConstants . SYNAPSE_NAMESPACE , "wsdl" ) ) ; if ( wsdlElement != null ) { EndpointDefinition endpoint = null ; String serviceName = wsdlElement . getAttributeValue ( new QName ( "service" ) ) ; String portName = wsdlElement . getAttributeValue ( new QName ( "port" ) ) ; String wsdlURI = wsdlElement . getAttributeValue ( new QName ( "uri" ) ) ; wsdlEndpoint . setServiceName ( serviceName ) ; wsdlEndpoint . setPortName ( portName ) ; if ( wsdlURI != null ) { wsdlEndpoint . setWsdlURI ( wsdlURI . trim ( ) ) ; try { OMNode wsdlOM = SynapseConfigUtils . getOMElementFromURL ( new URL ( wsdlURI ) . toString ( ) ) ; if ( wsdlOM != null && wsdlOM instanceof OMElement ) { OMElement omElement = ( OMElement ) wsdlOM ; OMNamespace ns = omElement . getNamespace ( ) ; if ( ns != null ) { String nsUri = omElement . getNamespace ( ) . getNamespaceURI ( ) ; if ( org . apache . axis2 . namespace . Constants . NS_URI_WSDL11 . equals ( nsUri ) ) { endpoint = new WSDL11EndpointBuilder ( ) . createEndpointDefinitionFromWSDL ( wsdlURI . trim ( ) , omElement , serviceName , portName ) ; } else if ( WSDL2Constants . WSDL_NAMESPACE . equals ( nsUri ) ) { handleException ( "WSDL 2.0 Endpoints are currently not supported" ) ; } } } } catch ( Exception e ) { handleException ( "Couldn't create endpoint from the given WSDL URI : " + e . getMessage ( ) , e ) ; } } OMElement definitionElement = wsdlElement . getFirstChildWithName ( new QName ( org . apache . axis2 . namespace . Constants . NS_URI_WSDL11 , "definitions" ) ) ; if ( endpoint == null && definitionElement != null ) { wsdlEndpoint . setWsdlDoc ( definitionElement ) ; String resolveRoot = ServerManager . getInstance ( ) . getResolveRoot ( ) ; String baseUri = "file:./" ; if ( resolveRoot != null ) { baseUri = resolveRoot . trim ( ) ; } if ( ! baseUri . endsWith ( File . separator ) ) { baseUri = baseUri + File . separator ; } endpoint = new WSDL11EndpointBuilder ( ) . createEndpointDefinitionFromWSDL ( baseUri , definitionElement , serviceName , portName ) ; } OMElement descriptionElement = wsdlElement . getFirstChildWithName ( new QName ( org . apache . axis2 . namespace . Constants . NS_URI_WSDL11 , "description" ) ) ; if ( endpoint == null && descriptionElement != null ) { wsdlEndpoint . setWsdlDoc ( descriptionElement ) ; handleException ( "WSDL 2.0 Endpoints are currently not supported." ) ; } if ( endpoint != null ) { extractCommonEndpointProperties ( endpoint , wsdlElement ) ; extractSpecificEndpointProperties ( endpoint , wsdlElement ) ; wsdlEndpoint . setEndpoint ( endpoint ) ; } else { handleException ( "WSDL is not specified for WSDL endpoint." ) ; } } return wsdlEndpoint ; } protected void extractSpecificEndpointProperties ( EndpointDefinition definition , OMElement elem ) { } } 	0	['5', '2', '0', '11', '38', '8', '1', '11', '1', '0.75', '220', '1', '1', '0.75', '0.4375', '2', '4', '42.8', '12', '2.8', '0']
package org . apache . synapse . util ; import javax . xml . transform . Source ; import javax . xml . transform . dom . DOMSource ; import org . apache . axiom . om . OMElement ; import org . apache . axiom . om . OMNode ; import org . apache . axiom . om . impl . dom . NodeImpl ; import org . springframework . xml . transform . StaxSource ; public class AXIOMUtils { private AXIOMUtils ( ) { } public static Source asSource ( OMNode node ) { if ( node instanceof NodeImpl ) { return new DOMSource ( ( NodeImpl ) node ) ; } else { return new StaxSource ( ( ( OMElement ) node ) . getXMLStreamReader ( ) ) ; } } } 	0	['2', '1', '0', '6', '6', '1', '2', '4', '1', '2', '21', '0', '0', '0', '0.5', '0', '0', '9.5', '2', '1', '0']
package org . apache . synapse . statistics ; public class Statistics { private long maxProcessingTime = 0 ; private long minProcessingTime = - 1 ; private double avgProcessingTime = 0 ; private double totalProcessingTime ; private int count = 0 ; private int faultCount = 0 ; public void update ( long inTime , long outTime , boolean isFault ) { if ( outTime < 0 || inTime < 0 ) { return ; } count ++ ; if ( isFault ) { faultCount ++ ; } long responseTime = outTime - inTime ; if ( maxProcessingTime < responseTime ) { maxProcessingTime = responseTime ; } if ( minProcessingTime > responseTime ) { minProcessingTime = responseTime ; } if ( minProcessingTime == - 1 ) { minProcessingTime = responseTime ; } totalProcessingTime = totalProcessingTime + responseTime ; avgProcessingTime = totalProcessingTime / count ; } public long getMaxProcessingTime ( ) { return maxProcessingTime ; } public double getAvgProcessingTime ( ) { return avgProcessingTime ; } public long getMinProcessingTime ( ) { return minProcessingTime ; } public int getFaultCount ( ) { return faultCount ; } public int getCount ( ) { return count ; } } 	0	['7', '1', '0', '1', '8', '0', '1', '0', '7', '0.722222222', '113', '1', '0', '0', '0.428571429', '0', '0', '14.28571429', '7', '1.7143', '0']
package org . apache . synapse . mediators . eip ; import org . apache . axiom . om . OMElement ; import org . apache . axiom . om . OMNode ; import org . apache . axiom . soap . SOAPEnvelope ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import org . apache . synapse . util . xpath . SynapseXPath ; import org . jaxen . JaxenException ; import java . util . ArrayList ; import java . util . Iterator ; import java . util . List ; public class EIPUtils { private static final Log log = LogFactory . getLog ( EIPUtils . class ) ; public static List getMatchingElements ( SOAPEnvelope envelope , SynapseXPath expression ) throws JaxenException { Object o = expression . evaluate ( envelope ) ; if ( o instanceof OMNode ) { List list = new ArrayList ( ) ; list . add ( o ) ; return list ; } else if ( o instanceof List ) { return ( List ) o ; } else { return new ArrayList ( ) ; } } public static List < OMNode > getDetachedMatchingElements ( SOAPEnvelope envelope , SynapseXPath expression ) throws JaxenException { List < OMNode > elementList = new ArrayList < OMNode > ( ) ; Object o = expression . evaluate ( envelope ) ; if ( o instanceof OMNode ) { elementList . add ( ( ( OMNode ) o ) . detach ( ) ) ; } else if ( o instanceof List ) { for ( Object elem : ( List ) o ) { if ( elem instanceof OMNode ) { elementList . add ( ( ( OMNode ) elem ) . detach ( ) ) ; } } } return elementList ; } public static void enrichEnvelope ( SOAPEnvelope envelope , SOAPEnvelope enricher , SynapseXPath expression ) throws JaxenException { OMElement enrichingElement ; List elementList = getMatchingElements ( envelope , expression ) ; if ( elementList != null && ! elementList . isEmpty ( ) ) { Object o = elementList . get ( 0 ) ; if ( o instanceof OMElement && ( ( OMElement ) o ) . getParent ( ) != null && ( ( OMElement ) o ) . getParent ( ) instanceof OMElement ) { enrichingElement = ( OMElement ) ( ( OMElement ) o ) . getParent ( ) ; } else { enrichingElement = envelope . getBody ( ) ; } List list = getMatchingElements ( enricher , expression ) ; if ( list != null ) { Iterator itr = list . iterator ( ) ; while ( itr . hasNext ( ) ) { o = itr . next ( ) ; if ( o != null && o instanceof OMElement ) { enrichingElement . addChild ( ( OMElement ) o ) ; } } } } } } 	0	['5', '1', '0', '12', '19', '10', '3', '9', '4', '1', '143', '1', '0', '0', '0.583333333', '0', '0', '27.4', '1', '0.6', '0']
package org . apache . synapse ; import org . apache . synapse . core . SynapseEnvironment ; public interface ManagedLifecycle { public void init ( SynapseEnvironment se ) ; public void destroy ( ) ; } 	0	['2', '1', '0', '11', '2', '1', '10', '1', '2', '2', '2', '0', '0', '0', '0.75', '0', '0', '0', '1', '1', '0']
package org . apache . synapse . statistics ; public interface StatisticsStack { public void put ( String key , long initTime , boolean isInFlow , boolean isStatisticsEnable , boolean isFault ) ; public void reportToStatisticsCollector ( StatisticsCollector statisticsCollector , boolean isFault ) ; public void reportToStatisticsCollector ( StatisticsCollector statisticsCollector , boolean isFault , String name ) ; public void reportAllToStatisticsCollector ( StatisticsCollector statisticsCollector , boolean isFault ) ; } 	0	['4', '1', '0', '7', '4', '6', '6', '1', '4', '2', '4', '0', '0', '0', '0.7', '0', '0', '0', '1', '1', '0']
package org . apache . synapse . config . xml . endpoints . utils ; import org . apache . synapse . endpoints . utils . EndpointDefinition ; import org . apache . synapse . SynapseException ; import org . apache . axiom . om . OMElement ; import org . apache . woden . WSDLFactory ; import org . apache . woden . WSDLReader ; import org . apache . woden . WSDLException ; import org . apache . woden . types . NCName ; import org . apache . woden . wsdl20 . xml . DescriptionElement ; import org . apache . woden . wsdl20 . Description ; import org . apache . woden . wsdl20 . Service ; import org . apache . woden . wsdl20 . Endpoint ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import javax . xml . namespace . QName ; public class WSDL20EndpointBuilder { } 	0	['1', '1', '0', '0', '2', '0', '0', '0', '1', '2', '4', '0', '0', '0', '1', '0', '0', '3', '0', '0', '0']
package org . apache . synapse . startup ; import org . apache . synapse . Startup ; public abstract class AbstractStartup implements Startup { protected String name = null ; public String getName ( ) { return this . name ; } public void setName ( String name ) { this . name = name ; } } 	0	['3', '1', '1', '2', '4', '0', '1', '1', '3', '0', '17', '1', '0', '0', '0.666666667', '0', '0', '4.333333333', '1', '0.6667', '0']
package org . apache . synapse . mediators . annotations ; import static java . lang . annotation . ElementType . FIELD ; import static java . lang . annotation . ElementType . METHOD ; import static java . lang . annotation . RetentionPolicy . RUNTIME ; import java . lang . annotation . Retention ; import java . lang . annotation . Target ; @ Target ( { FIELD , METHOD } ) @ Retention ( RUNTIME ) public @ interface ReadFromMessage { String value ( ) ; } 	0	['1', '1', '0', '1', '1', '0', '1', '0', '1', '2', '1', '0', '0', '0', '1', '0', '0', '0', '1', '1', '0']
package org . apache . synapse . config . xml ; import org . apache . axiom . om . OMAbstractFactory ; import org . apache . axiom . om . OMElement ; import org . apache . axiom . om . OMFactory ; import org . apache . axiom . om . OMNamespace ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import org . apache . synapse . SynapseException ; import org . apache . synapse . registry . Registry ; import java . util . Iterator ; public class RegistrySerializer { private static final Log log = LogFactory . getLog ( RegistrySerializer . class ) ; protected static final OMFactory fac = OMAbstractFactory . getOMFactory ( ) ; protected static final OMNamespace synNS = fac . createOMNamespace ( XMLConfigConstants . SYNAPSE_NAMESPACE , "syn" ) ; protected static final OMNamespace nullNS = fac . createOMNamespace ( XMLConfigConstants . NULL_NAMESPACE , "" ) ; public static OMElement serializeRegistry ( OMElement parent , Registry registry ) { OMElement reg = fac . createOMElement ( "registry" , synNS ) ; if ( registry . getProviderClass ( ) != null ) { reg . addAttribute ( fac . createOMAttribute ( "provider" , nullNS , registry . getProviderClass ( ) ) ) ; } else { handleException ( "Invalid registry. Provider is required" ) ; } Iterator iter = registry . getConfigurationProperties ( ) . keySet ( ) . iterator ( ) ; while ( iter . hasNext ( ) ) { String name = ( String ) iter . next ( ) ; String value = ( String ) registry . getConfigurationProperties ( ) . get ( name ) ; OMElement property = fac . createOMElement ( "parameter" , synNS ) ; property . addAttribute ( fac . createOMAttribute ( "name" , nullNS , name ) ) ; property . setText ( value . trim ( ) ) ; reg . addChild ( property ) ; } if ( parent != null ) { parent . addChild ( reg ) ; } return reg ; } private static void handleException ( String msg ) { log . error ( msg ) ; throw new SynapseException ( msg ) ; } } 	0	['4', '1', '0', '11', '23', '2', '1', '10', '2', '0.583333333', '101', '1', '0', '0', '0.333333333', '0', '0', '23.25', '4', '1.25', '0']
package org . apache . synapse . config . xml . endpoints ; import org . apache . synapse . config . XMLToObjectMapper ; import org . apache . synapse . SynapseException ; import org . apache . axiom . om . OMNode ; import org . apache . axiom . om . OMElement ; public class XMLToEndpointMapper implements XMLToObjectMapper { private static XMLToEndpointMapper instance = new XMLToEndpointMapper ( ) ; private XMLToEndpointMapper ( ) { } public static XMLToEndpointMapper getInstance ( ) { return instance ; } public Object getObjectFromOMNode ( OMNode om ) { if ( om instanceof OMElement ) { OMElement epElement = ( OMElement ) om ; return EndpointFactory . getEndpointFromElement ( epElement , false ) ; } else { throw new SynapseException ( "Configuration is not in proper format." ) ; } } } 	0	['4', '1', '0', '7', '7', '4', '1', '6', '2', '0.666666667', '30', '1', '1', '0', '0.5', '0', '0', '6.25', '2', '0.75', '0']
package org . apache . synapse . config . xml ; import org . apache . axiom . om . OMAbstractFactory ; import org . apache . axiom . om . OMElement ; import org . apache . axiom . om . OMFactory ; import org . apache . axiom . om . OMNamespace ; import org . apache . axiom . om . xpath . AXIOMXPath ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import org . apache . synapse . Mediator ; import org . apache . synapse . SynapseException ; import org . apache . synapse . mediators . MediatorProperty ; import javax . xml . namespace . QName ; import java . util . Collection ; import java . util . Iterator ; public abstract class AbstractMediatorSerializer implements MediatorSerializer { protected static Log log ; protected static final OMFactory fac = OMAbstractFactory . getOMFactory ( ) ; protected static final OMNamespace synNS = fac . createOMNamespace ( XMLConfigConstants . SYNAPSE_NAMESPACE , "syn" ) ; protected static final OMNamespace nullNS = fac . createOMNamespace ( XMLConfigConstants . NULL_NAMESPACE , "" ) ; protected static final QName PROP_Q = new QName ( XMLConfigConstants . SYNAPSE_NAMESPACE , "property" , "syn" ) ; protected AbstractMediatorSerializer ( ) { log = LogFactory . getLog ( this . getClass ( ) ) ; } protected static void saveTracingState ( OMElement mediatorOmElement , Mediator mediator ) { int traceState = mediator . getTraceState ( ) ; String traceValue = null ; if ( traceState == org . apache . synapse . SynapseConstants . TRACING_ON ) { traceValue = XMLConfigConstants . TRACE_ENABLE ; } else if ( traceState == org . apache . synapse . SynapseConstants . TRACING_OFF ) { traceValue = XMLConfigConstants . TRACE_DISABLE ; } if ( traceValue != null ) { mediatorOmElement . addAttribute ( fac . createOMAttribute ( XMLConfigConstants . TRACE_ATTRIB_NAME , nullNS , traceValue ) ) ; } } protected void serializeMediatorProperties ( OMElement parent , Collection props ) { Iterator iter = props . iterator ( ) ; while ( iter . hasNext ( ) ) { MediatorProperty mp = ( MediatorProperty ) iter . next ( ) ; OMElement prop = fac . createOMElement ( "property" , synNS , parent ) ; if ( mp . getName ( ) != null ) { prop . addAttribute ( fac . createOMAttribute ( "name" , nullNS , mp . getName ( ) ) ) ; } else { handleException ( "Mediator property name missing" ) ; } if ( mp . getValue ( ) != null ) { prop . addAttribute ( fac . createOMAttribute ( "value" , nullNS , mp . getValue ( ) ) ) ; } else if ( mp . getExpression ( ) != null ) { SynapseXPathSerializer . serializeXPath ( mp . getExpression ( ) , prop , "expression" ) ; } else { handleException ( "Mediator property must have a literal value or be an expression" ) ; } } } protected void serializeProperties ( OMElement parent , Collection props ) { serializeMediatorProperties ( parent , props ) ; } protected void serializeNamespaces ( OMElement elem , AXIOMXPath xpath ) { Iterator iter = xpath . getNamespaces ( ) . keySet ( ) . iterator ( ) ; while ( iter . hasNext ( ) ) { String prefix = ( String ) iter . next ( ) ; String uri = xpath . getNamespaceContext ( ) . translateNamespacePrefixToUri ( prefix ) ; if ( ! XMLConfigConstants . SYNAPSE_NAMESPACE . equals ( uri ) ) { elem . declareNamespace ( uri , prefix ) ; } } } protected void handleException ( String msg ) { LogFactory . getLog ( this . getClass ( ) ) . error ( msg ) ; throw new SynapseException ( msg ) ; } protected void handleException ( String msg , Exception e ) { LogFactory . getLog ( this . getClass ( ) ) . error ( msg , e ) ; throw new SynapseException ( msg , e ) ; } } 	0	['8', '1', '18', '34', '36', '22', '18', '16', '0', '0.771428571', '181', '1', '0', '0', '0.346938776', '0', '0', '21', '5', '1.75', '0']
package org . apache . synapse . config . xml ; import org . apache . axiom . om . OMElement ; import org . apache . synapse . Mediator ; import org . apache . synapse . mediators . filters . SwitchMediator ; import java . util . Iterator ; public class SwitchMediatorSerializer extends AbstractMediatorSerializer { public OMElement serializeMediator ( OMElement parent , Mediator m ) { if ( ! ( m instanceof SwitchMediator ) ) { handleException ( "Unsupported mediator passed in for serialization : " + m . getType ( ) ) ; } SwitchMediator mediator = ( SwitchMediator ) m ; OMElement switchMed = fac . createOMElement ( "switch" , synNS ) ; saveTracingState ( switchMed , mediator ) ; if ( mediator . getSource ( ) != null ) { SynapseXPathSerializer . serializeXPath ( mediator . getSource ( ) , switchMed , "source" ) ; } else { handleException ( "Invalid switch mediator. Source required" ) ; } Iterator iter = mediator . getCases ( ) . iterator ( ) ; while ( iter . hasNext ( ) ) { OMElement caseElem = fac . createOMElement ( "case" , synNS ) ; SwitchCase aCase = ( ( SwitchCase ) iter . next ( ) ) ; if ( aCase . getRegex ( ) != null ) { caseElem . addAttribute ( fac . createOMAttribute ( "regex" , nullNS , aCase . getRegex ( ) . pattern ( ) ) ) ; } else { handleException ( "Invalid switch case. Regex required" ) ; } AnonymousListMediator caseMediator = aCase . getCaseMediator ( ) ; if ( caseMediator != null ) { new AnonymousListMediatorSerializer ( ) . serializeMediator ( caseElem , caseMediator ) ; switchMed . addChild ( caseElem ) ; } } SwitchCase defaultCase = mediator . getDefaultCase ( ) ; if ( defaultCase != null ) { OMElement caseDefaultElem = fac . createOMElement ( "default" , synNS ) ; AnonymousListMediator caseDefaultMediator = defaultCase . getCaseMediator ( ) ; if ( caseDefaultMediator != null ) { new AnonymousListMediatorSerializer ( ) . serializeMediator ( caseDefaultElem , caseDefaultMediator ) ; switchMed . addChild ( caseDefaultElem ) ; } } if ( parent != null ) { parent . addChild ( switchMed ) ; } return switchMed ; } public String getMediatorClassName ( ) { return SwitchMediator . class . getName ( ) ; } } 	0	['3', '2', '0', '13', '27', '3', '0', '13', '3', '2', '128', '0', '0', '0.75', '0.555555556', '0', '0', '41.66666667', '8', '3', '0']
package org . apache . synapse ; import javax . xml . namespace . QName ; public interface Startup extends ManagedLifecycle { public abstract QName getTagQName ( ) ; public String getName ( ) ; public void setName ( String id ) ; } 	0	['3', '1', '0', '11', '3', '3', '10', '1', '3', '2', '3', '0', '0', '0', '0.666666667', '0', '0', '0', '1', '1', '0']
package org . apache . synapse . config . xml ; import org . apache . axiom . om . OMElement ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import org . apache . synapse . SynapseException ; import org . apache . synapse . Mediator ; import java . util . Iterator ; import java . util . List ; public abstract class AbstractListMediatorSerializer extends AbstractMediatorSerializer { protected void serializeChildren ( OMElement parent , List list ) { Iterator iter = list . iterator ( ) ; while ( iter . hasNext ( ) ) { Mediator child = ( Mediator ) iter . next ( ) ; MediatorSerializer medSer = MediatorSerializerFinder . getInstance ( ) . getSerializer ( child ) ; if ( medSer != null ) { medSer . serializeMediator ( parent , child ) ; } else { handleException ( "Unable to find a serializer for mediator : " + child . getType ( ) ) ; } } } } 	0	['2', '2', '7', '12', '14', '1', '7', '5', '1', '2', '40', '0', '0', '0.857142857', '0.666666667', '0', '0', '19', '3', '1.5', '0']
package org . apache . synapse . config . xml ; import org . apache . axiom . om . OMAbstractFactory ; import org . apache . axiom . om . OMElement ; import org . apache . axiom . om . OMFactory ; import org . apache . axiom . om . OMNamespace ; import org . apache . synapse . config . xml . endpoints . EndpointSerializer ; import org . apache . synapse . mediators . eip . Target ; public class TargetSerializer { private static final OMFactory fac = OMAbstractFactory . getOMFactory ( ) ; private static final OMNamespace synNS = fac . createOMNamespace ( XMLConfigConstants . SYNAPSE_NAMESPACE , "syn" ) ; private static final OMNamespace nullNS = fac . createOMNamespace ( XMLConfigConstants . NULL_NAMESPACE , "" ) ; public static OMElement serializeTarget ( Target target ) { OMElement targetElem = fac . createOMElement ( "target" , synNS ) ; if ( target . getToAddress ( ) != null ) { targetElem . addAttribute ( "to" , target . getToAddress ( ) , nullNS ) ; } if ( target . getSoapAction ( ) != null ) { targetElem . addAttribute ( "soapAction" , target . getSoapAction ( ) , nullNS ) ; } if ( target . getSequenceRef ( ) != null ) { targetElem . addAttribute ( "sequence" , target . getSequenceRef ( ) , nullNS ) ; } if ( target . getEndpointRef ( ) != null ) { targetElem . addAttribute ( "endpoint" , target . getEndpointRef ( ) , nullNS ) ; } if ( target . getSequence ( ) != null ) { SequenceMediatorSerializer serializer = new SequenceMediatorSerializer ( ) ; serializer . serializeAnonymousSequence ( targetElem , target . getSequence ( ) ) ; } if ( target . getEndpoint ( ) != null ) { targetElem . addChild ( EndpointSerializer . getElementFromEndpoint ( target . getEndpoint ( ) ) ) ; } return targetElem ; } } 	0	['3', '1', '0', '13', '18', '1', '2', '11', '2', '0.5', '90', '1', '0', '0', '0.5', '0', '0', '28', '7', '2.3333', '0']
package org . apache . synapse . config . xml ; import org . apache . synapse . mediators . eip . Target ; import org . apache . synapse . SynapseException ; import org . apache . synapse . config . xml . endpoints . EndpointFactory ; import org . apache . axiom . om . OMElement ; import org . apache . axiom . om . OMAttribute ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import javax . xml . namespace . QName ; public class TargetFactory { private static final Log log = LogFactory . getLog ( TargetFactory . class ) ; private static final QName TARGET_Q = new QName ( XMLConfigConstants . SYNAPSE_NAMESPACE , "target" ) ; public static Target createTarget ( OMElement elem ) { if ( ! TARGET_Q . equals ( elem . getQName ( ) ) ) { handleException ( "Element does not match with the target QName" ) ; } Target target = new Target ( ) ; OMAttribute toAttr = elem . getAttribute ( new QName ( XMLConfigConstants . NULL_NAMESPACE , "to" ) ) ; if ( toAttr != null && toAttr . getAttributeValue ( ) != null ) { target . setToAddress ( toAttr . getAttributeValue ( ) ) ; } OMAttribute soapAction = elem . getAttribute ( new QName ( XMLConfigConstants . NULL_NAMESPACE , "soapAction" ) ) ; if ( soapAction != null && soapAction . getAttributeValue ( ) != null ) { target . setSoapAction ( soapAction . getAttributeValue ( ) ) ; } OMAttribute sequenceAttr = elem . getAttribute ( new QName ( XMLConfigConstants . NULL_NAMESPACE , "sequence" ) ) ; if ( sequenceAttr != null && sequenceAttr . getAttributeValue ( ) != null ) { target . setSequenceRef ( sequenceAttr . getAttributeValue ( ) ) ; } OMAttribute endpointAttr = elem . getAttribute ( new QName ( XMLConfigConstants . NULL_NAMESPACE , "endpoint" ) ) ; if ( endpointAttr != null && endpointAttr . getAttributeValue ( ) != null ) { target . setEndpointRef ( endpointAttr . getAttributeValue ( ) ) ; } OMElement sequence = elem . getFirstChildWithName ( new QName ( XMLConfigConstants . SYNAPSE_NAMESPACE , "sequence" ) ) ; if ( sequence != null ) { SequenceMediatorFactory fac = new SequenceMediatorFactory ( ) ; target . setSequence ( fac . createAnonymousSequence ( sequence ) ) ; } OMElement endpoint = elem . getFirstChildWithName ( new QName ( XMLConfigConstants . SYNAPSE_NAMESPACE , "endpoint" ) ) ; if ( endpoint != null ) { target . setEndpoint ( EndpointFactory . getEndpointFromElement ( endpoint , true ) ) ; } return target ; } private static void handleException ( String message ) { if ( log . isDebugEnabled ( ) ) { log . debug ( message ) ; } throw new SynapseException ( message ) ; } } 	0	['4', '1', '0', '12', '25', '2', '2', '10', '2', '0.5', '145', '1', '0', '0', '0.333333333', '0', '0', '34.75', '12', '3.5', '0']
package org . apache . synapse . mediators . annotations ; import static java . lang . annotation . ElementType . FIELD ; import static java . lang . annotation . ElementType . METHOD ; import static java . lang . annotation . ElementType . TYPE ; import static java . lang . annotation . RetentionPolicy . RUNTIME ; import java . lang . annotation . Retention ; import java . lang . annotation . Target ; @ Target ( { TYPE , FIELD , METHOD } ) @ Retention ( RUNTIME ) public @ interface Namespaces { String [ ] value ( ) ; } 	0	['1', '1', '0', '1', '1', '0', '1', '0', '1', '2', '1', '0', '0', '0', '1', '0', '0', '0', '1', '1', '0']
package org . apache . synapse . statistics ; public class StatisticsHolder { private int statisticsCategory ; private String key ; private Statistics inFlowStatistics ; private Statistics outFlowStatistics ; public synchronized void update ( boolean isResponse , long inTime , long outTime , boolean isFault ) { if ( isResponse ) { if ( outFlowStatistics == null ) { outFlowStatistics = new Statistics ( ) ; } outFlowStatistics . update ( inTime , outTime , isFault ) ; } else { if ( inFlowStatistics == null ) { inFlowStatistics = new Statistics ( ) ; } inFlowStatistics . update ( inTime , outTime , isFault ) ; } } public synchronized Statistics getInFlowStatistics ( ) { return inFlowStatistics ; } public synchronized Statistics getOutFlowStatistics ( ) { return outFlowStatistics ; } public int getStatisticsCategory ( ) { return statisticsCategory ; } public void setStatisticsCategory ( int statisticsCategory ) { this . statisticsCategory = statisticsCategory ; } public String getKey ( ) { return key ; } public void setKey ( String key ) { this . key = key ; } public synchronized void clearStatistics ( ) { this . inFlowStatistics = null ; this . outFlowStatistics = null ; } } 	0	['9', '1', '0', '2', '12', '22', '1', '1', '9', '0.8125', '75', '1', '2', '0', '0.288888889', '0', '0', '6.888888889', '4', '1.2222', '0']
package org . apache . synapse . util ; import org . apache . axis2 . wsdl . WSDLConstants ; import javax . xml . namespace . QName ; public class PolicyInfo { private String policyKey ; private int type ; private QName operation ; public static final int MESSAGE_TYPE_IN = 1 ; public static final int MESSAGE_TYPE_OUT = 2 ; public PolicyInfo ( String policyKey ) { this . policyKey = policyKey ; } public PolicyInfo ( String policyKey , int type ) { this . policyKey = policyKey ; this . type = type ; } public PolicyInfo ( String policyKey , QName operation ) { this . policyKey = policyKey ; this . operation = operation ; } public PolicyInfo ( String policyKey , int type , QName operation ) { this . policyKey = policyKey ; this . type = type ; this . operation = operation ; } public boolean isServicePolicy ( ) { return policyKey != null && type == 0 && operation == null ; } public boolean isOperationPolicy ( ) { return policyKey != null && type == 0 && operation != null ; } public boolean isMessagePolicy ( ) { return policyKey != null && type != 0 ; } public String getMessageLable ( ) { if ( type == MESSAGE_TYPE_IN ) { return WSDLConstants . MESSAGE_LABEL_IN_VALUE ; } else if ( type == MESSAGE_TYPE_OUT ) { return WSDLConstants . MESSAGE_LABEL_OUT_VALUE ; } else { return null ; } } public String getPolicyKey ( ) { return policyKey ; } public void setPolicyKey ( String policyKey ) { this . policyKey = policyKey ; } public int getType ( ) { return type ; } public void setType ( int type ) { this . type = type ; } public QName getOperation ( ) { return operation ; } public void setOperation ( QName operation ) { this . operation = operation ; } } 	0	['14', '1', '0', '3', '15', '0', '3', '0', '14', '0.723076923', '126', '0.6', '0', '0', '0.446428571', '0', '0', '7.642857143', '4', '1.4286', '0']
package org . apache . synapse . config . xml ; import java . io . OutputStream ; import javax . xml . namespace . QName ; import javax . xml . stream . XMLStreamException ; import org . apache . synapse . config . SynapseConfiguration ; import org . apache . axiom . om . OMElement ; public interface ConfigurationSerializer { OMElement serializeConfiguration ( SynapseConfiguration synCfg ) ; QName getTagQName ( ) ; } 	0	['2', '1', '0', '4', '2', '1', '2', '2', '2', '2', '2', '0', '0', '0', '0.75', '0', '0', '0', '1', '1', '0']
package org . apache . synapse . config . xml ; import org . apache . axiom . om . OMAttribute ; import org . apache . axiom . om . OMElement ; import org . apache . synapse . Mediator ; import org . apache . synapse . SynapseException ; import org . apache . synapse . mediators . builtin . PropertyMediator ; import org . jaxen . JaxenException ; import javax . xml . namespace . QName ; public class PropertyMediatorFactory extends AbstractMediatorFactory { private static final QName ATT_SCOPE = new QName ( "scope" ) ; private static final QName ATT_ACTION = new QName ( "action" ) ; public Mediator createMediator ( OMElement elem ) { PropertyMediator propMediator = new PropertyMediator ( ) ; OMAttribute name = elem . getAttribute ( ATT_NAME ) ; OMAttribute value = elem . getAttribute ( ATT_VALUE ) ; OMAttribute expression = elem . getAttribute ( ATT_EXPRN ) ; OMAttribute scope = elem . getAttribute ( ATT_SCOPE ) ; OMAttribute action = elem . getAttribute ( ATT_ACTION ) ; if ( name == null ) { String msg = "The 'name' attribute is required for the configuration of a property mediator" ; log . error ( msg ) ; throw new SynapseException ( msg ) ; } else if ( ( value == null && expression == null ) && ! ( action != null && "remove" . equals ( action . getAttributeValue ( ) ) ) ) { String msg = "Either an 'value' or 'expression' attribute is required for a property mediator when action is SET" ; log . error ( msg ) ; throw new SynapseException ( msg ) ; } propMediator . setName ( name . getAttributeValue ( ) ) ; if ( value != null ) { propMediator . setValue ( value . getAttributeValue ( ) ) ; } else if ( expression != null ) { try { propMediator . setExpression ( SynapseXPathFactory . getSynapseXPath ( elem , ATT_EXPRN ) ) ; } catch ( JaxenException e ) { String msg = "Invalid XPath expression for attribute 'expression' : " + expression . getAttributeValue ( ) ; log . error ( msg ) ; throw new SynapseException ( msg ) ; } } if ( scope != null ) { String valueStr = scope . getAttributeValue ( ) ; if ( ! XMLConfigConstants . SCOPE_AXIS2 . equals ( valueStr ) && ! XMLConfigConstants . SCOPE_TRANSPORT . equals ( valueStr ) && ! XMLConfigConstants . SCOPE_DEFAULT . equals ( valueStr ) && ! XMLConfigConstants . SCOPE_CLIENT . equals ( valueStr ) ) { String msg = "Only '" + XMLConfigConstants . SCOPE_AXIS2 + "' or '" + XMLConfigConstants . SCOPE_TRANSPORT + "' or '" + XMLConfigConstants . SCOPE_CLIENT + "' values are allowed for attribute scope for a property mediator" + ", Unsupported scope " + valueStr ; log . error ( msg ) ; throw new SynapseException ( msg ) ; } propMediator . setScope ( valueStr ) ; } processTraceState ( propMediator , elem ) ; if ( action != null && "remove" . equals ( action . getAttributeValue ( ) ) ) { propMediator . setAction ( PropertyMediator . ACTION_REMOVE ) ; } return propMediator ; } public QName getTagQName ( ) { return PROP_Q ; } } 	0	['4', '2', '0', '10', '22', '4', '0', '10', '3', '0.666666667', '174', '1', '0', '0.6', '0.666666667', '0', '0', '42', '15', '4', '0']
package org . apache . synapse . config . xml ; import org . apache . axiom . om . OMElement ; import org . apache . synapse . Startup ; public interface StartupSerializer { public OMElement serializeStartup ( OMElement parent , Startup startup ) ; } 	0	['1', '1', '0', '4', '1', '0', '2', '2', '1', '2', '1', '0', '0', '0', '1', '0', '0', '0', '1', '1', '0']
package org . apache . synapse . config . xml ; import org . apache . axiom . om . OMElement ; import org . apache . synapse . Mediator ; import org . apache . synapse . mediators . filters . OutMediator ; import javax . xml . namespace . QName ; public class OutMediatorFactory extends AbstractListMediatorFactory { private static final QName OUT_Q = new QName ( XMLConfigConstants . SYNAPSE_NAMESPACE , "out" ) ; public Mediator createMediator ( OMElement elem ) { OutMediator filter = new OutMediator ( ) ; processTraceState ( filter , elem ) ; addChildren ( elem , filter ) ; return filter ; } public QName getTagQName ( ) { return OUT_Q ; } } 	0	['4', '3', '0', '5', '9', '4', '0', '5', '3', '0.666666667', '30', '1', '0', '0.666666667', '0.666666667', '0', '0', '6.25', '1', '0.5', '0']
package org . apache . synapse ; import org . apache . axiom . soap . SOAPEnvelope ; import org . apache . axis2 . AxisFault ; import org . apache . axis2 . addressing . EndpointReference ; import org . apache . axis2 . addressing . RelatesTo ; import org . apache . synapse . config . SynapseConfiguration ; import org . apache . synapse . core . SynapseEnvironment ; import org . apache . synapse . endpoints . Endpoint ; import org . apache . commons . logging . Log ; import java . util . Set ; import java . util . Stack ; import java . util . Map ; public interface MessageContext { public SynapseConfiguration getConfiguration ( ) ; public void setConfiguration ( SynapseConfiguration cfg ) ; public SynapseEnvironment getEnvironment ( ) ; public void setEnvironment ( SynapseEnvironment se ) ; public Map getContextEntries ( ) ; public void setContextEntries ( Map < String , Object > entries ) ; public Mediator getMainSequence ( ) ; public Mediator getFaultSequence ( ) ; public Mediator getSequence ( String key ) ; public Endpoint getEndpoint ( String key ) ; public Object getProperty ( String key ) ; public Object getEntry ( String key ) ; public void setProperty ( String key , Object value ) ; public Set getPropertyKeySet ( ) ; public SOAPEnvelope getEnvelope ( ) ; public void setEnvelope ( SOAPEnvelope envelope ) throws AxisFault ; public EndpointReference getFaultTo ( ) ; public void setFaultTo ( EndpointReference reference ) ; public EndpointReference getFrom ( ) ; public void setFrom ( EndpointReference reference ) ; public String getMessageID ( ) ; public void setMessageID ( String string ) ; public RelatesTo getRelatesTo ( ) ; public void setRelatesTo ( RelatesTo [ ] reference ) ; public EndpointReference getReplyTo ( ) ; public void setReplyTo ( EndpointReference reference ) ; public EndpointReference getTo ( ) ; public void setTo ( EndpointReference reference ) ; public void setWSAAction ( String actionURI ) ; public String getWSAAction ( ) ; public String getSoapAction ( ) ; public void setSoapAction ( String string ) ; public void setWSAMessageID ( String messageID ) ; public String getWSAMessageID ( ) ; public boolean isDoingMTOM ( ) ; public boolean isDoingSWA ( ) ; public void setDoingMTOM ( boolean b ) ; public void setDoingSWA ( boolean b ) ; public boolean isDoingPOX ( ) ; public void setDoingPOX ( boolean b ) ; public boolean isDoingGET ( ) ; public void setDoingGET ( boolean b ) ; public boolean isSOAP11 ( ) ; public void setResponse ( boolean b ) ; public boolean isResponse ( ) ; public void setFaultResponse ( boolean b ) ; public boolean isFaultResponse ( ) ; public int getTracingState ( ) ; public void setTracingState ( int tracingState ) ; public Stack getFaultStack ( ) ; public void pushFaultHandler ( FaultHandler fault ) ; public Log getServiceLog ( ) ; } 	0	['52', '1', '0', '78', '52', '1326', '72', '10', '52', '2', '52', '0', '0', '0', '0.126602564', '0', '0', '0', '1', '1', '0']
package org . apache . synapse . config . xml ; import org . apache . axiom . om . OMElement ; import org . apache . synapse . Mediator ; import org . apache . synapse . SynapseException ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class AnonymousListMediatorSerializer extends AbstractListMediatorSerializer { public OMElement serializeMediator ( OMElement parent , Mediator m ) { if ( ! ( m instanceof AnonymousListMediator ) ) { handleException ( "Unsupported mediator passed in for serialization : " + m . getType ( ) ) ; } AnonymousListMediator mediator = ( AnonymousListMediator ) m ; serializeChildren ( parent , mediator . getList ( ) ) ; return parent ; } public String getMediatorClassName ( ) { return AnonymousListMediator . class . getName ( ) ; } } 	0	['3', '3', '0', '5', '12', '3', '1', '4', '3', '2', '33', '0', '0', '0.777777778', '0.555555556', '0', '0', '10', '2', '1', '0']
package org . apache . synapse . startup . quartz ; import java . util . Iterator ; import java . util . Set ; import org . apache . axiom . om . OMElement ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import org . apache . synapse . ManagedLifecycle ; import org . apache . synapse . startup . Task ; import org . apache . synapse . config . xml . PropertyHelper ; import org . apache . synapse . core . SynapseEnvironment ; import org . quartz . Job ; import org . quartz . JobDataMap ; import org . quartz . JobExecutionContext ; import org . quartz . JobExecutionException ; public class SimpleQuartzJob implements Job { public static final String SYNAPSE_ENVIRONMENT = "SynapseEnvironment" , CLASSNAME = "ClassName" , PROPERTIES = "Properties" ; private static final Log log = LogFactory . getLog ( SimpleQuartzJob . class ) ; public void execute ( JobExecutionContext ctx ) throws JobExecutionException { log . debug ( "Executing task : " + ctx . getJobDetail ( ) . getFullName ( ) ) ; JobDataMap jdm = ctx . getMergedJobDataMap ( ) ; String jobClassName = ( String ) jdm . get ( CLASSNAME ) ; if ( jobClassName == null ) { handleException ( "No " + CLASSNAME + " in JobDetails" ) ; } Task task = null ; try { task = ( Task ) getClass ( ) . getClassLoader ( ) . loadClass ( jobClassName ) . newInstance ( ) ; } catch ( Exception e ) { handleException ( "Cannot instantiate task : " + jobClassName , e ) ; } Set properties = ( Set ) jdm . get ( PROPERTIES ) ; Iterator it = properties . iterator ( ) ; while ( it . hasNext ( ) ) { OMElement prop = ( OMElement ) it . next ( ) ; log . debug ( "Found Property : " + prop . toString ( ) ) ; PropertyHelper . setStaticProperty ( prop , task ) ; } SynapseEnvironment se = ( SynapseEnvironment ) jdm . get ( "SynapseEnvironment" ) ; if ( task instanceof ManagedLifecycle ) { if ( se != null ) { ( ( ManagedLifecycle ) task ) . init ( se ) ; } } if ( se . isInitialized ( ) ) { task . execute ( ) ; } } private void handleException ( String msg ) throws JobExecutionException { log . error ( msg ) ; throw new JobExecutionException ( msg ) ; } private void handleException ( String msg , Exception e ) throws JobExecutionException { log . error ( msg , e ) ; throw new JobExecutionException ( msg , e ) ; } } 	0	['5', '1', '0', '12', '31', '0', '0', '12', '2', '1', '132', '0.25', '0', '0', '0.5', '0', '0', '24.6', '1', '0.6', '0']
package org . apache . synapse . config . xml ; import org . apache . axiom . om . OMElement ; import org . apache . synapse . Mediator ; import org . apache . synapse . mediators . base . SequenceMediator ; public class SequenceMediatorSerializer extends AbstractListMediatorSerializer { public OMElement serializeAnonymousSequence ( OMElement parent , SequenceMediator mediator ) { OMElement sequence = fac . createOMElement ( "sequence" , synNS ) ; int isEnableStatistics = mediator . getStatisticsState ( ) ; String statisticsValue = null ; if ( isEnableStatistics == org . apache . synapse . SynapseConstants . STATISTICS_ON ) { statisticsValue = XMLConfigConstants . STATISTICS_ENABLE ; } else if ( isEnableStatistics == org . apache . synapse . SynapseConstants . STATISTICS_OFF ) { statisticsValue = XMLConfigConstants . STATISTICS_DISABLE ; } if ( statisticsValue != null ) { sequence . addAttribute ( fac . createOMAttribute ( XMLConfigConstants . STATISTICS_ATTRIB_NAME , nullNS , statisticsValue ) ) ; } if ( mediator . getErrorHandler ( ) != null ) { sequence . addAttribute ( fac . createOMAttribute ( "onError" , nullNS , mediator . getErrorHandler ( ) ) ) ; } saveTracingState ( sequence , mediator ) ; serializeChildren ( sequence , mediator . getList ( ) ) ; if ( parent != null ) { parent . addChild ( sequence ) ; } return sequence ; } public OMElement serializeMediator ( OMElement parent , Mediator m ) { if ( ! ( m instanceof SequenceMediator ) ) { handleException ( "Unsupported mediator passed in for serialization : " + m . getType ( ) ) ; } SequenceMediator mediator = ( SequenceMediator ) m ; OMElement sequence = fac . createOMElement ( "sequence" , synNS ) ; if ( mediator . isDynamic ( ) ) { sequence . addAttribute ( fac . createOMAttribute ( "name" , nullNS , mediator . getName ( ) ) ) ; sequence . addAttribute ( fac . createOMAttribute ( "key" , nullNS , mediator . getRegistryKey ( ) ) ) ; } else { int isEnableStatistics = mediator . getStatisticsState ( ) ; String statisticsValue = null ; if ( isEnableStatistics == org . apache . synapse . SynapseConstants . STATISTICS_ON ) { statisticsValue = XMLConfigConstants . STATISTICS_ENABLE ; } else if ( isEnableStatistics == org . apache . synapse . SynapseConstants . STATISTICS_OFF ) { statisticsValue = XMLConfigConstants . STATISTICS_DISABLE ; } if ( statisticsValue != null ) { sequence . addAttribute ( fac . createOMAttribute ( XMLConfigConstants . STATISTICS_ATTRIB_NAME , nullNS , statisticsValue ) ) ; } if ( mediator . getKey ( ) != null ) { sequence . addAttribute ( fac . createOMAttribute ( "key" , nullNS , mediator . getKey ( ) ) ) ; } else if ( mediator . getName ( ) != null ) { sequence . addAttribute ( fac . createOMAttribute ( "name" , nullNS , mediator . getName ( ) ) ) ; if ( mediator . getErrorHandler ( ) != null ) { sequence . addAttribute ( fac . createOMAttribute ( "onError" , nullNS , mediator . getErrorHandler ( ) ) ) ; } saveTracingState ( sequence , mediator ) ; serializeChildren ( sequence , mediator . getList ( ) ) ; } } if ( parent != null ) { parent . addChild ( sequence ) ; } return sequence ; } public String getMediatorClassName ( ) { return SequenceMediator . class . getName ( ) ; } } 	0	['4', '3', '0', '12', '24', '4', '4', '8', '4', '2', '188', '0', '0', '0.7', '0.5', '0', '0', '46', '10', '4.25', '0']
package org . apache . synapse . util ; import java . util . Map ; public interface SimpleMap extends Map { public Object get ( String name ) ; public void put ( String name , Object value ) ; public boolean getBoolean ( String name ) ; public void putBoolean ( String name , boolean b ) ; public String getString ( String value ) ; public void putString ( String name , String value ) ; public char getChar ( String name ) ; public void putChar ( String name , char c ) ; public int getInt ( String name ) ; public void putInt ( String name , int i ) ; public short getShort ( String name ) ; public void putShort ( String name , short s ) ; public float getFloat ( String name ) ; public void putFloat ( String name , float fl ) ; public double getDouble ( String name ) ; public void putDouble ( String name , double d ) ; public long getLong ( String name ) ; public void putLong ( String name , long l ) ; public byte getByte ( String name ) ; public void putByte ( String name , byte b ) ; public byte [ ] getBytes ( String name ) ; public void putBytes ( String name , byte [ ] bytes ) ; } 	0	['22', '1', '0', '2', '22', '231', '2', '0', '22', '2', '22', '0', '0', '0', '0.204545455', '0', '0', '0', '1', '1', '0']
package org . apache . synapse . config . xml ; import org . apache . axiom . om . OMAttribute ; import org . apache . axiom . om . OMElement ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import org . apache . synapse . SynapseException ; import org . apache . synapse . mediators . MediatorProperty ; import org . jaxen . JaxenException ; import javax . xml . namespace . QName ; import java . util . ArrayList ; import java . util . Iterator ; import java . util . List ; public class MediatorPropertyFactory { private static final Log log = LogFactory . getLog ( MediatorPropertyFactory . class ) ; public static List < MediatorProperty > getMediatorProperties ( OMElement elem ) { List < MediatorProperty > propertyList = new ArrayList < MediatorProperty > ( ) ; Iterator iter = elem . getChildrenWithName ( new QName ( XMLConfigConstants . SYNAPSE_NAMESPACE , "property" ) ) ; while ( iter . hasNext ( ) ) { OMElement propEle = ( OMElement ) iter . next ( ) ; OMAttribute attName = propEle . getAttribute ( MediatorProperty . ATT_NAME_Q ) ; OMAttribute attValue = propEle . getAttribute ( MediatorProperty . ATT_VALUE_Q ) ; OMAttribute attExpr = propEle . getAttribute ( MediatorProperty . ATT_EXPR_Q ) ; MediatorProperty prop = new MediatorProperty ( ) ; if ( attName == null || attName . getAttributeValue ( ) == null || attName . getAttributeValue ( ) . trim ( ) . length ( ) == 0 ) { String msg = "Entry name is a required attribute for a Log property" ; log . error ( msg ) ; throw new SynapseException ( msg ) ; } else { prop . setName ( attName . getAttributeValue ( ) ) ; } if ( attValue != null ) { if ( attValue . getAttributeValue ( ) == null || attValue . getAttributeValue ( ) . trim ( ) . length ( ) == 0 ) { String msg = "Entry attribute value (if specified) " + "is required for a Log property" ; log . error ( msg ) ; throw new SynapseException ( msg ) ; } else { prop . setValue ( attValue . getAttributeValue ( ) ) ; } } else if ( attExpr != null ) { if ( attExpr . getAttributeValue ( ) == null || attExpr . getAttributeValue ( ) . trim ( ) . length ( ) == 0 ) { String msg = "Entry attribute expression (if specified) " + "is required for a mediator property" ; log . error ( msg ) ; throw new SynapseException ( msg ) ; } else { try { prop . setExpression ( SynapseXPathFactory . getSynapseXPath ( propEle , MediatorProperty . ATT_EXPR_Q ) ) ; } catch ( JaxenException e ) { String msg = "Invalid XPapth expression : " + attExpr . getAttributeValue ( ) ; log . error ( msg ) ; throw new SynapseException ( msg , e ) ; } } } else { String msg = "Entry attribute value OR expression must " + "be specified for a mediator property" ; log . error ( msg ) ; throw new SynapseException ( msg ) ; } propertyList . add ( prop ) ; } return propertyList ; } } 	0	['3', '1', '0', '11', '26', '1', '2', '9', '2', '0.5', '158', '1', '0', '0', '0.5', '0', '0', '51.33333333', '11', '3.6667', '0']
package org . apache . synapse . util ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import org . apache . synapse . SynapseException ; import java . rmi . registry . Registry ; import java . rmi . registry . LocateRegistry ; import java . rmi . RemoteException ; import java . rmi . NoSuchObjectException ; import java . rmi . server . UnicastRemoteObject ; public class RMIRegistryController { public static final Log log = LogFactory . getLog ( RMIRegistryController . class ) ; private static RMIRegistryController ourInstance = new RMIRegistryController ( ) ; private Registry localRegistry ; private boolean weCreatedRMIReg = false ; public static RMIRegistryController getInstance ( ) { return ourInstance ; } private RMIRegistryController ( ) { } public void createLocalRegistry ( int port ) { try { localRegistry = LocateRegistry . createRegistry ( port ) ; } catch ( RemoteException e ) { String msg = "Couldn't create a local registry(RMI) : port " + port + " already in use." ; handleException ( msg , e ) ; } } public void removeLocalRegistry ( ) { if ( localRegistry != null ) { try { log . info ( "Removing the RMI registy instance from the RMI runtime " ) ; UnicastRemoteObject . unexportObject ( localRegistry , true ) ; } catch ( NoSuchObjectException e ) { String msg = "Error when stoping localregistry(RMI)" ; handleException ( msg , e ) ; } } } private static void handleException ( String msg , Exception e ) { log . error ( msg , e ) ; throw new SynapseException ( msg , e ) ; } } 	0	['6', '1', '0', '5', '17', '5', '2', '3', '3', '0.7', '76', '0.75', '1', '0', '0.3', '0', '0', '11', '2', '0.8333', '0']
package org . apache . synapse . endpoints . dispatch ; import org . apache . axiom . om . OMElement ; import org . apache . axiom . soap . SOAPHeader ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import org . apache . synapse . MessageContext ; import org . apache . synapse . endpoints . Endpoint ; import javax . xml . namespace . QName ; public class SimpleClientSessionDispatcher implements Dispatcher { private static final Log log = LogFactory . getLog ( SimpleClientSessionDispatcher . class ) ; private static final QName CSID_QNAME = new QName ( "http://ws.apache.org/ns/synapse" , "ClientID" , "syn" ) ; public Endpoint getEndpoint ( MessageContext synCtx , DispatcherContext dispatcherContext ) { SOAPHeader header = synCtx . getEnvelope ( ) . getHeader ( ) ; if ( header != null ) { OMElement sgcIDElm = header . getFirstChildWithName ( CSID_QNAME ) ; if ( sgcIDElm != null ) { String sgcID = sgcIDElm . getText ( ) ; if ( sgcID != null ) { log . debug ( "Using the client session id : '" + sgcID + "' extracted from current message to retrieve endpoint" ) ; Object o = dispatcherContext . getEndpoint ( sgcID ) ; if ( o != null && o instanceof Endpoint ) { return ( Endpoint ) o ; } } else if ( log . isDebugEnabled ( ) ) { log . debug ( "Couldn't find the client session id for the current message " + "to retrieve endpoint" ) ; } } else if ( log . isDebugEnabled ( ) ) { log . debug ( "Couldn't find a SOAP header with the QName " + CSID_QNAME + " for the current message to retrieve the endpoint" ) ; } } return null ; } public void updateSession ( MessageContext synCtx , DispatcherContext dispatcherContext , Endpoint endpoint ) { if ( endpoint == null || dispatcherContext == null ) { return ; } SOAPHeader header = synCtx . getEnvelope ( ) . getHeader ( ) ; if ( header != null ) { OMElement csIDElm = header . getFirstChildWithName ( CSID_QNAME ) ; if ( csIDElm != null ) { String csID = csIDElm . getText ( ) ; if ( csID != null ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Using the client session id : '" + csID + "' extracted from current message to update the session" ) ; } dispatcherContext . setEndpoint ( csID , endpoint ) ; } else if ( log . isDebugEnabled ( ) ) { log . debug ( "Couldn't find the client session id for the current message " + "to update the session" ) ; } } else if ( log . isDebugEnabled ( ) ) { log . debug ( "Couldn't find a SOAP header with the QName " + CSID_QNAME + " for the current message to update the session" ) ; } } } public void unbind ( MessageContext synCtx , DispatcherContext dispatcherContext ) { if ( dispatcherContext == null ) { return ; } SOAPHeader header = synCtx . getEnvelope ( ) . getHeader ( ) ; if ( header != null ) { OMElement csIDElm = header . getFirstChildWithName ( CSID_QNAME ) ; if ( csIDElm != null ) { String csID = csIDElm . getText ( ) ; if ( csID != null ) { dispatcherContext . removeSession ( csID ) ; } else if ( log . isDebugEnabled ( ) ) { log . debug ( "Couldn't find the client session id for the current message " + "to unbind the session" ) ; } } else if ( log . isDebugEnabled ( ) ) { log . debug ( "Couldn't find a SOAP header with the QName " + CSID_QNAME + " for the current message to unbind the session" ) ; } } } public boolean isServerInitiatedSession ( ) { return false ; } } 	0	['6', '1', '0', '11', '22', '3', '2', '9', '5', '0.4', '202', '1', '0', '0', '0.6', '0', '0', '32.33333333', '8', '3.3333', '0']
package org . apache . synapse . mediators . annotations ; import static java . lang . annotation . ElementType . FIELD ; import static java . lang . annotation . ElementType . METHOD ; import static java . lang . annotation . RetentionPolicy . RUNTIME ; import java . lang . annotation . Retention ; import java . lang . annotation . Target ; @ Target ( { FIELD , METHOD } ) @ Retention ( RUNTIME ) public @ interface UpdateMessage { String value ( ) ; } 	0	['1', '1', '0', '1', '1', '0', '1', '0', '1', '2', '1', '0', '0', '0', '1', '0', '0', '0', '1', '1', '0']
package org . apache . synapse . config . xml ; import org . apache . axiom . om . OMAttribute ; import org . apache . axiom . om . OMElement ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import org . apache . synapse . SynapseException ; import org . apache . synapse . registry . Registry ; import javax . xml . namespace . QName ; import java . util . Iterator ; import java . util . Properties ; public class RegistryFactory { private static final Log log = LogFactory . getLog ( RegistryFactory . class ) ; public static final QName PROVIDER_Q = new QName ( XMLConfigConstants . NULL_NAMESPACE , "provider" ) ; public static final QName PARAMETER_Q = new QName ( XMLConfigConstants . SYNAPSE_NAMESPACE , "parameter" ) ; public static final QName NAME_Q = new QName ( XMLConfigConstants . NULL_NAMESPACE , "name" ) ; public static Registry createRegistry ( OMElement elem ) { OMAttribute prov = elem . getAttribute ( PROVIDER_Q ) ; if ( prov != null ) { try { Class provider = Class . forName ( prov . getAttributeValue ( ) ) ; Registry registry = ( Registry ) provider . newInstance ( ) ; registry . init ( getProperties ( elem ) ) ; return registry ; } catch ( ClassNotFoundException e ) { handleException ( "Cannot locate registry provider class : " + prov . getAttributeValue ( ) , e ) ; } catch ( IllegalAccessException e ) { handleException ( "Error instantiating registry provider : " + prov . getAttributeValue ( ) , e ) ; } catch ( InstantiationException e ) { handleException ( "Error instantiating registry provider : " + prov . getAttributeValue ( ) , e ) ; } } else { handleException ( "The registry 'provider' attribute is required for a registry definition" ) ; } return null ; } private static Properties getProperties ( OMElement elem ) { Iterator params = elem . getChildrenWithName ( PARAMETER_Q ) ; Properties props = new Properties ( ) ; while ( params . hasNext ( ) ) { Object o = params . next ( ) ; if ( o instanceof OMElement ) { OMElement prop = ( OMElement ) o ; OMAttribute pname = prop . getAttribute ( NAME_Q ) ; String propertyValue = prop . getText ( ) ; if ( pname != null ) { if ( propertyValue != null ) { props . setProperty ( pname . getAttributeValue ( ) , propertyValue . trim ( ) ) ; } } else { handleException ( "Invalid registry property - property should have a name " ) ; } } else { handleException ( "Invalid registry property" ) ; } } return props ; } private static void handleException ( String msg ) { log . error ( msg ) ; throw new SynapseException ( msg ) ; } private static void handleException ( String msg , Exception e ) { log . error ( msg , e ) ; throw new SynapseException ( msg , e ) ; } } 	0	['6', '1', '0', '7', '28', '5', '1', '6', '2', '0.55', '163', '0.25', '0', '0', '0.3', '0', '0', '25.5', '4', '1.3333', '0']
package org . apache . synapse . config . xml . endpoints ; import org . apache . axiom . om . OMElement ; import org . apache . synapse . SynapseConstants ; import org . apache . synapse . config . xml . XMLConfigConstants ; import org . apache . synapse . endpoints . Endpoint ; import org . apache . synapse . endpoints . FailoverEndpoint ; import org . apache . synapse . endpoints . IndirectEndpoint ; import org . apache . synapse . endpoints . utils . EndpointDefinition ; import javax . xml . namespace . QName ; import java . util . ArrayList ; import java . util . Iterator ; public class FailoverEndpointFactory extends EndpointFactory { private static FailoverEndpointFactory instance = new FailoverEndpointFactory ( ) ; private FailoverEndpointFactory ( ) { } public static FailoverEndpointFactory getInstance ( ) { return instance ; } protected Endpoint createEndpoint ( OMElement epConfig , boolean anonymousEndpoint ) { OMElement failoverElement = epConfig . getFirstChildWithName ( new QName ( SynapseConstants . SYNAPSE_NAMESPACE , "failover" ) ) ; if ( failoverElement != null ) { FailoverEndpoint failoverEndpoint = new FailoverEndpoint ( ) ; String name = epConfig . getAttributeValue ( new QName ( "name" ) ) ; if ( name != null ) { failoverEndpoint . setName ( name ) ; } failoverEndpoint . setEndpoints ( getEndpoints ( failoverElement , failoverEndpoint ) ) ; return failoverEndpoint ; } return null ; } } 	0	['4', '2', '0', '4', '13', '4', '1', '4', '1', '0.666666667', '51', '1', '1', '0.818181818', '0.444444444', '1', '1', '11.5', '3', '1', '0']
package org . apache . synapse . config . xml ; import org . apache . axiom . om . OMAttribute ; import org . apache . axiom . om . OMElement ; import org . apache . synapse . Mediator ; import org . apache . synapse . SynapseException ; import org . apache . synapse . mediators . ext . POJOCommandMediator ; import org . apache . synapse . util . xpath . SynapseXPath ; import org . jaxen . JaxenException ; import javax . xml . namespace . QName ; import java . util . Iterator ; public class POJOCommandMediatorFactory extends AbstractMediatorFactory { private static final QName POJO_COMMAND_Q = new QName ( XMLConfigConstants . SYNAPSE_NAMESPACE , "pojoCommand" ) ; protected static final QName ATT_ACTION = new QName ( "action" ) ; protected static final QName ATT_CTXNAME = new QName ( "context-name" ) ; protected static final String RM_ACTION = "ReadMessage" ; protected static final String UM_ACTION = "UpdateMessage" ; protected static final String RC_ACTION = "ReadContext" ; protected static final String UC_ACTION = "UpdateContext" ; protected static final String RAUM_ACTION = "ReadAndUpdateMessage" ; protected static final String RAUC_ACTION = "ReadAndUpdateContext" ; public Mediator createMediator ( OMElement elem ) { POJOCommandMediator pojoMediator = new POJOCommandMediator ( ) ; OMAttribute name = elem . getAttribute ( ATT_NAME ) ; if ( name == null ) { String msg = "The name of the actual POJO command implementation class" + " is a required attribute" ; log . error ( msg ) ; throw new SynapseException ( msg ) ; } try { pojoMediator . setCommand ( getClass ( ) . getClassLoader ( ) . loadClass ( name . getAttributeValue ( ) ) ) ; } catch ( ClassNotFoundException e ) { handleException ( "Unable to load the class specified as the command " + name . getAttributeValue ( ) , e ) ; } for ( Iterator it = elem . getChildElements ( ) ; it . hasNext ( ) ; ) { OMElement child = ( OMElement ) it . next ( ) ; if ( "property" . equals ( child . getLocalName ( ) ) ) { OMAttribute nameAttr = child . getAttribute ( ATT_NAME ) ; if ( nameAttr != null && nameAttr . getAttributeValue ( ) != null && ! "" . equals ( nameAttr . getAttributeValue ( ) ) ) { handlePropertyAction ( nameAttr . getAttributeValue ( ) , child , pojoMediator ) ; } else { handleException ( "A POJO command mediator " + "property must specify the name attribute" ) ; } } } return pojoMediator ; } private void handlePropertyAction ( String name , OMElement propElem , POJOCommandMediator m ) { OMAttribute valueAttr = propElem . getAttribute ( ATT_VALUE ) ; OMAttribute exprAttr = propElem . getAttribute ( ATT_EXPRN ) ; OMAttribute ctxNameAttr = propElem . getAttribute ( ATT_CTXNAME ) ; OMAttribute actionAttr = propElem . getAttribute ( ATT_ACTION ) ; SynapseXPath xpath = null ; try { if ( exprAttr != null ) { xpath = SynapseXPathFactory . getSynapseXPath ( propElem , ATT_EXPRN ) ; } } catch ( JaxenException e ) { handleException ( "Error in building the expression as an SynapseXPath" + e ) ; } if ( valueAttr != null ) { String value = valueAttr . getAttributeValue ( ) ; if ( exprAttr != null && ctxNameAttr != null ) { handleException ( "Command properties can not contain all three 'value', " + "'expression' and 'context-name' attributes. Only one or " + "combination of two can be there." ) ; } else { m . addStaticSetterProperty ( name , value ) ; if ( exprAttr != null ) { m . addMessageGetterProperty ( name , xpath ) ; } else if ( ctxNameAttr != null ) { m . addContextGetterProperty ( name , ctxNameAttr . getAttributeValue ( ) ) ; } } } else if ( propElem . getFirstElement ( ) != null ) { if ( exprAttr != null && ctxNameAttr != null ) { handleException ( "Command properties can not contain all the " + "'expression' and 'context-name' attributes with a child. Only one " + "attribute of those can co-exists with a child" ) ; } else { m . addStaticSetterProperty ( name , propElem . getFirstElement ( ) ) ; if ( exprAttr != null ) { m . addMessageGetterProperty ( name , xpath ) ; } else if ( ctxNameAttr != null ) { m . addContextGetterProperty ( name , ctxNameAttr . getAttributeValue ( ) ) ; } } } else { if ( exprAttr != null && ctxNameAttr != null ) { if ( actionAttr != null && actionAttr . getAttributeValue ( ) != null ) { String action = actionAttr . getAttributeValue ( ) ; if ( RM_ACTION . equals ( action ) || UC_ACTION . equals ( action ) ) { m . addMessageSetterProperty ( name , xpath ) ; m . addContextGetterProperty ( name , ctxNameAttr . getAttributeValue ( ) ) ; } else if ( RC_ACTION . equals ( action ) || UM_ACTION . equals ( action ) ) { m . addContextSetterProperty ( name , ctxNameAttr . getAttributeValue ( ) ) ; m . addMessageGetterProperty ( name , xpath ) ; } else { handleException ( "Invalid action for " + "the command property with the name " + name ) ; } } else { handleException ( "Action attribute " + "is required for the command property with name " + name ) ; } } else { if ( actionAttr != null && actionAttr . getAttributeValue ( ) != null ) { String action = actionAttr . getAttributeValue ( ) ; if ( exprAttr != null ) { if ( RM_ACTION . equals ( action ) ) { m . addMessageSetterProperty ( name , xpath ) ; } else if ( UM_ACTION . equals ( action ) ) { m . addMessageGetterProperty ( name , xpath ) ; } else if ( RAUM_ACTION . equals ( action ) ) { m . addMessageSetterProperty ( name , xpath ) ; m . addMessageGetterProperty ( name , xpath ) ; } else { handleException ( "Invalid action for " + "the command property with the name " + name ) ; } } else if ( ctxNameAttr != null ) { String ctxName = ctxNameAttr . getAttributeValue ( ) ; if ( RC_ACTION . equals ( action ) ) { m . addContextSetterProperty ( name , ctxName ) ; } else if ( UC_ACTION . equals ( action ) ) { m . addContextGetterProperty ( name , ctxName ) ; } else if ( RAUC_ACTION . equals ( action ) ) { m . addContextSetterProperty ( name , ctxName ) ; m . addContextGetterProperty ( name , ctxName ) ; } else { handleException ( "Invalid action for " + "the command property with the name " + name ) ; } } else { handleException ( "Unrecognized command property with the name " + name ) ; } } else { if ( exprAttr != null ) { m . addMessageSetterProperty ( name , xpath ) ; m . addMessageGetterProperty ( name , xpath ) ; } else if ( ctxNameAttr != null ) { String ctxName = ctxNameAttr . getAttributeValue ( ) ; m . addContextSetterProperty ( name , ctxName ) ; m . addContextGetterProperty ( name , ctxName ) ; } else { handleException ( "Unrecognized command property with the name " + name ) ; } } } } } public QName getTagQName ( ) { return POJO_COMMAND_Q ; } } 	0	['5', '2', '0', '10', '35', '6', '0', '10', '3', '1.027777778', '435', '1', '0', '0.5', '0.5', '0', '0', '84.2', '30', '7.4', '0']
package org . apache . synapse . config . xml ; import org . apache . axiom . om . OMAttribute ; import org . apache . axiom . om . OMElement ; import org . apache . synapse . Mediator ; import org . apache . synapse . SynapseException ; import org . apache . synapse . mediators . builtin . RMSequenceMediator ; import org . jaxen . JaxenException ; import javax . xml . namespace . QName ; public class RMSequenceMediatorFactory extends AbstractMediatorFactory { private static final QName SEQUENCE_Q = new QName ( XMLConfigConstants . SYNAPSE_NAMESPACE , "RMSequence" ) ; private static final QName ATT_CORR = new QName ( "correlation" ) ; private static final QName ATT_LASTMSG = new QName ( "last-message" ) ; private static final QName ATT_VERSION = new QName ( "version" ) ; private static final QName ATT_SINGLE = new QName ( "single" ) ; public Mediator createMediator ( OMElement elem ) { RMSequenceMediator sequenceMediator = new RMSequenceMediator ( ) ; OMAttribute correlation = elem . getAttribute ( ATT_CORR ) ; OMAttribute lastMessage = elem . getAttribute ( ATT_LASTMSG ) ; OMAttribute single = elem . getAttribute ( ATT_SINGLE ) ; OMAttribute version = elem . getAttribute ( ATT_VERSION ) ; if ( single == null && correlation == null ) { String msg = "The 'single' attribute value of true or a 'correlation' attribute is " + "required for the configuration of a RMSequence mediator" ; log . error ( msg ) ; throw new SynapseException ( msg ) ; } if ( correlation != null ) { if ( correlation . getAttributeValue ( ) != null && correlation . getAttributeValue ( ) . trim ( ) . length ( ) == 0 ) { String msg = "Invalid attribute value specified for correlation" ; log . error ( msg ) ; throw new SynapseException ( msg ) ; } else { try { sequenceMediator . setCorrelation ( SynapseXPathFactory . getSynapseXPath ( elem , ATT_CORR ) ) ; } catch ( JaxenException e ) { String msg = "Invalid XPath expression for attribute correlation : " + correlation . getAttributeValue ( ) ; log . error ( msg ) ; throw new SynapseException ( msg ) ; } } } if ( single != null ) { sequenceMediator . setSingle ( Boolean . valueOf ( single . getAttributeValue ( ) ) ) ; } if ( sequenceMediator . isSingle ( ) && sequenceMediator . getCorrelation ( ) != null ) { String msg = "Invalid RMSequence mediator. A RMSequence can't have both a " + "single attribute value of true and a correlation attribute specified." ; log . error ( msg ) ; throw new SynapseException ( msg ) ; } else if ( ! sequenceMediator . isSingle ( ) && sequenceMediator . getCorrelation ( ) == null ) { String msg = "Invalid RMSequence mediator. A RMSequence must have a " + "single attribute value of true or a correlation attribute specified." ; log . error ( msg ) ; throw new SynapseException ( msg ) ; } if ( lastMessage != null ) { if ( lastMessage . getAttributeValue ( ) != null && lastMessage . getAttributeValue ( ) . trim ( ) . length ( ) == 0 ) { String msg = "Invalid attribute value specified for last-message" ; log . error ( msg ) ; throw new SynapseException ( msg ) ; } else { try { sequenceMediator . setLastMessage ( SynapseXPathFactory . getSynapseXPath ( elem , ATT_LASTMSG ) ) ; } catch ( JaxenException e ) { String msg = "Invalid XPath expression for attribute last-message : " + lastMessage . getAttributeValue ( ) ; log . error ( msg ) ; throw new SynapseException ( msg ) ; } } } if ( sequenceMediator . isSingle ( ) && sequenceMediator . getLastMessage ( ) != null ) { String msg = "Invalid RMSequence mediator. A RMSequence can't have both a " + "single attribute value of true and a last-message attribute specified." ; log . error ( msg ) ; throw new SynapseException ( msg ) ; } if ( version != null ) { if ( ! XMLConfigConstants . SEQUENCE_VERSION_1_0 . equals ( version . getAttributeValue ( ) ) && ! XMLConfigConstants . SEQUENCE_VERSION_1_1 . equals ( version . getAttributeValue ( ) ) ) { String msg = "Only '" + XMLConfigConstants . SEQUENCE_VERSION_1_0 + "' or '" + XMLConfigConstants . SEQUENCE_VERSION_1_1 + "' values are allowed for attribute version for a RMSequence mediator" + ", Unsupported version " + version . getAttributeValue ( ) ; log . error ( msg ) ; throw new SynapseException ( msg ) ; } sequenceMediator . setVersion ( version . getAttributeValue ( ) ) ; } processTraceState ( sequenceMediator , elem ) ; return sequenceMediator ; } public QName getTagQName ( ) { return SEQUENCE_Q ; } } 	0	['4', '2', '0', '10', '28', '2', '0', '10', '3', '0.666666667', '260', '1', '0', '0.6', '0.666666667', '0', '0', '62.75', '19', '5', '0']
package org . apache . synapse . config . xml ; import org . apache . axiom . om . OMAttribute ; import org . apache . axiom . om . OMElement ; import org . apache . synapse . Mediator ; import org . apache . synapse . mediators . eip . splitter . CloneMediator ; import javax . xml . namespace . QName ; import java . util . Iterator ; public class CloneMediatorFactory extends AbstractMediatorFactory { private static final QName CLONE_Q = new QName ( XMLConfigConstants . SYNAPSE_NAMESPACE , "clone" ) ; private static final QName ATT_CONTPAR = new QName ( "continueParent" ) ; private static final QName TARGET_Q = new QName ( XMLConfigConstants . SYNAPSE_NAMESPACE , "target" ) ; public Mediator createMediator ( OMElement elem ) { CloneMediator mediator = new CloneMediator ( ) ; processTraceState ( mediator , elem ) ; OMAttribute continueParent = elem . getAttribute ( ATT_CONTPAR ) ; if ( continueParent != null ) { mediator . setContinueParent ( Boolean . valueOf ( continueParent . getAttributeValue ( ) ) . booleanValue ( ) ) ; } Iterator targetElements = elem . getChildrenWithName ( TARGET_Q ) ; while ( targetElements . hasNext ( ) ) { mediator . addTarget ( TargetFactory . createTarget ( ( OMElement ) targetElements . next ( ) ) ) ; } return mediator ; } public QName getTagQName ( ) { return CLONE_Q ; } } 	0	['4', '2', '0', '7', '19', '2', '0', '7', '3', '0.666666667', '66', '1', '0', '0.6', '0.666666667', '0', '0', '14.75', '3', '1', '0']
package org . apache . synapse . config . xml . endpoints ; import org . apache . axiom . om . OMAttribute ; import org . apache . axiom . om . OMElement ; import org . apache . axiom . om . OMNode ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import org . apache . synapse . SynapseConstants ; import org . apache . synapse . SynapseException ; import org . apache . synapse . config . XMLToObjectMapper ; import org . apache . synapse . config . xml . XMLConfigConstants ; import org . apache . synapse . endpoints . Endpoint ; import org . apache . synapse . endpoints . IndirectEndpoint ; import org . apache . synapse . endpoints . utils . EndpointDefinition ; import javax . xml . namespace . QName ; import java . util . ArrayList ; import java . util . Iterator ; public abstract class EndpointFactory implements XMLToObjectMapper { private static Log log = LogFactory . getLog ( EndpointFactory . class ) ; public static Endpoint getEndpointFromElement ( OMElement elem , boolean isAnonymous ) { return getEndpointFactory ( elem ) . createEndpoint ( elem , isAnonymous ) ; } public Object getObjectFromOMNode ( OMNode om ) { if ( om instanceof OMElement ) { return createEndpoint ( ( OMElement ) om , false ) ; } else { handleException ( "Invalid XML configuration for an Endpoint. OMElement expected" ) ; } return null ; } protected abstract Endpoint createEndpoint ( OMElement epConfig , boolean anonymousEndpoint ) ; protected void extractCommonEndpointProperties ( EndpointDefinition definition , OMElement elem ) { OMAttribute optimize = elem . getAttribute ( new QName ( XMLConfigConstants . NULL_NAMESPACE , "optimize" ) ) ; OMAttribute encoding = elem . getAttribute ( new QName ( XMLConfigConstants . NULL_NAMESPACE , "encoding" ) ) ; OMAttribute statistics = elem . getAttribute ( new QName ( XMLConfigConstants . NULL_NAMESPACE , XMLConfigConstants . STATISTICS_ATTRIB_NAME ) ) ; if ( statistics != null && statistics . getAttributeValue ( ) != null ) { String statisticsValue = statistics . getAttributeValue ( ) ; if ( XMLConfigConstants . STATISTICS_ENABLE . equals ( statisticsValue ) ) { definition . setStatisticsState ( SynapseConstants . STATISTICS_ON ) ; } else if ( XMLConfigConstants . STATISTICS_DISABLE . equals ( statisticsValue ) ) { definition . setStatisticsState ( SynapseConstants . STATISTICS_OFF ) ; } } else { definition . setStatisticsState ( SynapseConstants . STATISTICS_UNSET ) ; } OMAttribute trace = elem . getAttribute ( new QName ( XMLConfigConstants . NULL_NAMESPACE , XMLConfigConstants . TRACE_ATTRIB_NAME ) ) ; if ( trace != null && trace . getAttributeValue ( ) != null ) { String traceValue = trace . getAttributeValue ( ) ; if ( XMLConfigConstants . TRACE_ENABLE . equals ( traceValue ) ) { definition . setTraceState ( SynapseConstants . TRACING_ON ) ; } else if ( XMLConfigConstants . TRACE_DISABLE . equals ( traceValue ) ) { definition . setTraceState ( SynapseConstants . TRACING_OFF ) ; } } else { definition . setTraceState ( SynapseConstants . TRACING_UNSET ) ; } if ( optimize != null && optimize . getAttributeValue ( ) . length ( ) > 0 ) { String method = optimize . getAttributeValue ( ) . trim ( ) ; if ( "mtom" . equalsIgnoreCase ( method ) ) { definition . setUseMTOM ( true ) ; } else if ( "swa" . equalsIgnoreCase ( method ) ) { definition . setUseSwa ( true ) ; } } if ( encoding != null && encoding . getAttributeValue ( ) != null ) { definition . setCharSetEncoding ( encoding . getAttributeValue ( ) ) ; } OMElement wsAddr = elem . getFirstChildWithName ( new QName ( XMLConfigConstants . SYNAPSE_NAMESPACE , "enableAddressing" ) ) ; if ( wsAddr != null ) { definition . setAddressingOn ( true ) ; OMAttribute version = wsAddr . getAttribute ( new QName ( "version" ) ) ; if ( version != null && version . getAttributeValue ( ) != null ) { String versionValue = version . getAttributeValue ( ) . trim ( ) . toLowerCase ( ) ; if ( SynapseConstants . ADDRESSING_VERSION_FINAL . equals ( versionValue ) || SynapseConstants . ADDRESSING_VERSION_SUBMISSION . equals ( versionValue ) ) { definition . setAddressingVersion ( version . getAttributeValue ( ) ) ; } else { handleException ( "Unknown value for the addressing version. Possible values " + "for the addressing version are 'final' and 'submission' only." ) ; } } String useSepList = wsAddr . getAttributeValue ( new QName ( "separateListener" ) ) ; if ( useSepList != null ) { if ( "true" . equals ( useSepList . trim ( ) . toLowerCase ( ) ) ) { definition . setUseSeparateListener ( true ) ; } } } OMElement wsSec = elem . getFirstChildWithName ( new QName ( XMLConfigConstants . SYNAPSE_NAMESPACE , "enableSec" ) ) ; if ( wsSec != null ) { definition . setSecurityOn ( true ) ; OMAttribute policy = wsSec . getAttribute ( new QName ( XMLConfigConstants . NULL_NAMESPACE , "policy" ) ) ; if ( policy != null ) { definition . setWsSecPolicyKey ( policy . getAttributeValue ( ) ) ; } } OMElement wsRm = elem . getFirstChildWithName ( new QName ( XMLConfigConstants . SYNAPSE_NAMESPACE , "enableRM" ) ) ; if ( wsRm != null ) { definition . setReliableMessagingOn ( true ) ; OMAttribute policy = wsRm . getAttribute ( new QName ( XMLConfigConstants . NULL_NAMESPACE , "policy" ) ) ; if ( policy != null ) { definition . setWsRMPolicyKey ( policy . getAttributeValue ( ) ) ; } } OMElement timeout = elem . getFirstChildWithName ( new QName ( XMLConfigConstants . SYNAPSE_NAMESPACE , "timeout" ) ) ; if ( timeout != null ) { OMElement duration = timeout . getFirstChildWithName ( new QName ( XMLConfigConstants . SYNAPSE_NAMESPACE , "duration" ) ) ; if ( duration != null ) { String d = duration . getText ( ) ; if ( d != null ) { try { long timeoutSeconds = Long . parseLong ( d . trim ( ) ) ; definition . setTimeoutDuration ( timeoutSeconds * 1000 ) ; } catch ( NumberFormatException e ) { handleException ( "Endpoint timeout duration expected as a " + "number but was not a number" ) ; } } } OMElement action = timeout . getFirstChildWithName ( new QName ( XMLConfigConstants . SYNAPSE_NAMESPACE , "action" ) ) ; if ( action != null && action . getText ( ) != null ) { String actionString = action . getText ( ) ; if ( "discard" . equalsIgnoreCase ( actionString . trim ( ) ) ) { definition . setTimeoutAction ( SynapseConstants . DISCARD ) ; if ( definition . getTimeoutDuration ( ) == 0 ) { definition . setTimeoutDuration ( 30000 ) ; } } else if ( "fault" . equalsIgnoreCase ( actionString . trim ( ) ) ) { definition . setTimeoutAction ( SynapseConstants . DISCARD_AND_FAULT ) ; if ( definition . getTimeoutDuration ( ) == 0 ) { definition . setTimeoutDuration ( 30000 ) ; } } else { handleException ( "Invalid timeout action, action : " + actionString + " is not supported" ) ; } } } OMElement suspendElement = elem . getFirstChildWithName ( new QName ( SynapseConstants . SYNAPSE_NAMESPACE , XMLConfigConstants . SUSPEND_DURATION_ON_FAILURE ) ) ; if ( suspendElement != null && suspendElement . getText ( ) != null ) { try { long suspendDuration = Long . parseLong ( suspendElement . getText ( ) . trim ( ) ) ; definition . setSuspendOnFailDuration ( suspendDuration * 1000 ) ; } catch ( NumberFormatException e ) { handleException ( "The suspend duration should be specified as a valid number :: " + e . getMessage ( ) , e ) ; } } } protected void extractSpecificEndpointProperties ( EndpointDefinition definition , OMElement elem ) { } private static EndpointFactory getEndpointFactory ( OMElement configElement ) { if ( configElement . getAttribute ( new QName ( "key" ) ) != null ) { return IndirectEndpointFactory . getInstance ( ) ; } OMElement addressElement = configElement . getFirstChildWithName ( new QName ( SynapseConstants . SYNAPSE_NAMESPACE , "address" ) ) ; if ( addressElement != null ) { return AddressEndpointFactory . getInstance ( ) ; } OMElement wsdlElement = configElement . getFirstChildWithName ( new QName ( SynapseConstants . SYNAPSE_NAMESPACE , "wsdl" ) ) ; if ( wsdlElement != null ) { return WSDLEndpointFactory . getInstance ( ) ; } OMElement defaultElement = configElement . getFirstChildWithName ( new QName ( SynapseConstants . SYNAPSE_NAMESPACE , "default" ) ) ; if ( defaultElement != null ) { return DefaultEndpointFactory . getInstance ( ) ; } OMElement lbElement = configElement . getFirstChildWithName ( new QName ( SynapseConstants . SYNAPSE_NAMESPACE , "loadbalance" ) ) ; if ( lbElement != null ) { OMElement sessionElement = configElement . getFirstChildWithName ( new QName ( SynapseConstants . SYNAPSE_NAMESPACE , "session" ) ) ; if ( sessionElement != null ) { return SALoadbalanceEndpointFactory . getInstance ( ) ; } else { return LoadbalanceEndpointFactory . getInstance ( ) ; } } OMElement foElement = configElement . getFirstChildWithName ( new QName ( SynapseConstants . SYNAPSE_NAMESPACE , "failover" ) ) ; if ( foElement != null ) { return FailoverEndpointFactory . getInstance ( ) ; } handleException ( "Invalid endpoint configuration." ) ; return null ; } protected ArrayList < Endpoint > getEndpoints ( OMElement listEndpointElement , Endpoint parent ) { ArrayList < Endpoint > endpoints = new ArrayList < Endpoint > ( ) ; ArrayList < String > keys = new ArrayList < String > ( ) ; Iterator iter = listEndpointElement . getChildrenWithName ( XMLConfigConstants . ENDPOINT_ELT ) ; while ( iter . hasNext ( ) ) { OMElement endptElem = ( OMElement ) iter . next ( ) ; Endpoint endpoint = EndpointFactory . getEndpointFromElement ( endptElem , true ) ; if ( endpoint instanceof IndirectEndpoint ) { String key = ( ( IndirectEndpoint ) endpoint ) . getKey ( ) ; if ( ! keys . contains ( key ) ) { keys . add ( key ) ; } else { handleException ( "Same endpoint definition cannot be used with in the siblings" ) ; } } endpoint . setParentEndpoint ( parent ) ; endpoints . add ( endpoint ) ; } return endpoints ; } protected static void handleException ( String msg ) { log . error ( msg ) ; throw new SynapseException ( msg ) ; } protected static void handleException ( String msg , Exception e ) { log . error ( msg , e ) ; throw new SynapseException ( msg , e ) ; } } 	0	['11', '1', '6', '23', '65', '49', '11', '18', '3', '0.4', '566', '1', '0', '0', '0.2625', '0', '0', '50.36363636', '35', '4.9091', '0']
package org . apache . synapse . endpoints ; import org . apache . axiom . om . OMElement ; import org . apache . axis2 . clustering . ClusterManager ; import org . apache . axis2 . context . ConfigurationContext ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import org . apache . synapse . FaultHandler ; import org . apache . synapse . MessageContext ; import org . apache . synapse . SynapseConstants ; import org . apache . synapse . core . axis2 . Axis2MessageContext ; import org . apache . synapse . endpoints . utils . EndpointDefinition ; import org . apache . synapse . statistics . impl . EndPointStatisticsStack ; import java . util . Stack ; public class WSDLEndpoint extends FaultHandler implements Endpoint { private static final Log log = LogFactory . getLog ( WSDLEndpoint . class ) ; private static final Log trace = LogFactory . getLog ( SynapseConstants . TRACE_LOGGER ) ; private String name = null ; private String wsdlURI ; private OMElement wsdlDoc ; private String serviceName ; private String portName ; private Endpoint parentEndpoint = null ; private EndpointDefinition endpoint = null ; private final EndpointContext endpointContext = new EndpointContext ( ) ; public void send ( MessageContext synCtx ) { boolean traceOn = isTraceOn ( synCtx ) ; boolean traceOrDebugOn = isTraceOrDebugOn ( traceOn ) ; if ( traceOrDebugOn ) { traceOrDebug ( traceOn , "Start : WSDL Endpoint" ) ; if ( traceOn && trace . isTraceEnabled ( ) ) { trace . trace ( "Message : " + synCtx . getEnvelope ( ) ) ; } } if ( endpoint . getAddress ( ) != null ) { String eprAddress = endpoint . getAddress ( ) ; boolean isClusteringEnable = false ; org . apache . axis2 . context . MessageContext axisMC = ( ( Axis2MessageContext ) synCtx ) . getAxis2MessageContext ( ) ; ConfigurationContext cc = axisMC . getConfigurationContext ( ) ; ClusterManager clusterManager = cc . getAxisConfiguration ( ) . getClusterManager ( ) ; if ( clusterManager != null && clusterManager . getContextManager ( ) != null ) { isClusteringEnable = true ; } String endPointName = this . getName ( ) ; if ( endPointName == null ) { if ( traceOrDebugOn && isClusteringEnable ) { log . warn ( "In a clustering environment , the endpoint  name should be " + "specified even for anonymous endpoints. Otherwise, the clustering " + "would not be functioned correctly if there are more than one " + "anonymous endpoints. " ) ; } endPointName = SynapseConstants . ANONYMOUS_ENDPOINT ; } if ( isClusteringEnable ) { if ( endpointContext . getConfigurationContext ( ) == null ) { endpointContext . setConfigurationContext ( cc ) ; endpointContext . setContextID ( endPointName ) ; } } boolean statisticsEnable = ( SynapseConstants . STATISTICS_ON == endpoint . getStatisticsState ( ) ) ; if ( statisticsEnable ) { EndPointStatisticsStack endPointStatisticsStack = null ; Object statisticsStackObj = synCtx . getProperty ( org . apache . synapse . SynapseConstants . ENDPOINT_STATS ) ; if ( statisticsStackObj == null ) { endPointStatisticsStack = new EndPointStatisticsStack ( ) ; synCtx . setProperty ( org . apache . synapse . SynapseConstants . ENDPOINT_STATS , endPointStatisticsStack ) ; } else if ( statisticsStackObj instanceof EndPointStatisticsStack ) { endPointStatisticsStack = ( EndPointStatisticsStack ) statisticsStackObj ; } if ( endPointStatisticsStack != null ) { boolean isFault = synCtx . getEnvelope ( ) . getBody ( ) . hasFault ( ) ; endPointStatisticsStack . put ( endPointName , System . currentTimeMillis ( ) , ! synCtx . isResponse ( ) , statisticsEnable , isFault ) ; } } if ( traceOrDebugOn ) { traceOrDebug ( traceOn , "Sending message to WSDL endpoint : " + endPointName + " resolves to address = " + eprAddress ) ; traceOrDebug ( traceOn , "SOAPAction: " + ( synCtx . getSoapAction ( ) != null ? synCtx . getSoapAction ( ) : "null" ) ) ; traceOrDebug ( traceOn , "WSA-Action: " + ( synCtx . getWSAAction ( ) != null ? synCtx . getWSAAction ( ) : "null" ) ) ; if ( traceOn && trace . isTraceEnabled ( ) ) { trace . trace ( "Envelope : \n" + synCtx . getEnvelope ( ) ) ; } } synCtx . pushFaultHandler ( this ) ; synCtx . setProperty ( SynapseConstants . PROCESSED_ENDPOINT , this ) ; synCtx . getEnvironment ( ) . send ( endpoint , synCtx ) ; } } public void onFault ( MessageContext synCtx ) { setActive ( false , synCtx ) ; if ( parentEndpoint != null ) { parentEndpoint . onChildEndpointFail ( this , synCtx ) ; } else { Stack faultStack = synCtx . getFaultStack ( ) ; if ( ! faultStack . isEmpty ( ) ) { ( ( FaultHandler ) faultStack . pop ( ) ) . handleFault ( synCtx ) ; } } } public void onChildEndpointFail ( Endpoint endpoint , MessageContext synMessageContext ) { } public String getName ( ) { return name ; } public void setName ( String name ) { this . name = name . trim ( ) ; } public String getWsdlURI ( ) { return wsdlURI ; } public void setWsdlURI ( String wsdlURI ) { this . wsdlURI = wsdlURI ; } public OMElement getWsdlDoc ( ) { return wsdlDoc ; } public void setWsdlDoc ( OMElement wsdlDoc ) { this . wsdlDoc = wsdlDoc ; } public String getServiceName ( ) { return serviceName ; } public void setServiceName ( String serviceName ) { this . serviceName = serviceName ; } public String getPortName ( ) { return portName ; } public void setPortName ( String portName ) { this . portName = portName ; } public boolean isActive ( MessageContext synMessageContext ) { boolean active = endpointContext . isActive ( ) ; if ( ! active ) { long recoverOn = endpointContext . getRecoverOn ( ) ; if ( System . currentTimeMillis ( ) > recoverOn ) { active = true ; endpointContext . setActive ( true ) ; } } if ( log . isDebugEnabled ( ) ) { log . debug ( "WSDLEndpoint with name '" + name + "' is in " + ( active ? "active" : "inactive" ) + " state" ) ; } return active ; } public void setActive ( boolean active , MessageContext synMessageContext ) { if ( ! active ) { if ( endpoint . getSuspendOnFailDuration ( ) != - 1 ) { endpointContext . setRecoverOn ( System . currentTimeMillis ( ) + endpoint . getSuspendOnFailDuration ( ) ) ; } else { endpointContext . setRecoverOn ( Long . MAX_VALUE ) ; } } endpointContext . setActive ( true ) ; } public void setParentEndpoint ( Endpoint parentEndpoint ) { this . parentEndpoint = parentEndpoint ; } public EndpointDefinition getEndpoint ( ) { return endpoint ; } public void setEndpoint ( EndpointDefinition endpoint ) { this . endpoint = endpoint ; } protected boolean isTraceOn ( MessageContext msgCtx ) { return ( endpoint . getTraceState ( ) == SynapseConstants . TRACING_ON ) || ( endpoint . getTraceState ( ) == SynapseConstants . TRACING_UNSET && msgCtx . getTracingState ( ) == SynapseConstants . TRACING_ON ) ; } protected boolean isTraceOrDebugOn ( boolean isTraceOn ) { return isTraceOn || log . isDebugEnabled ( ) ; } protected void traceOrDebug ( boolean traceOn , String msg ) { if ( traceOn ) { trace . info ( msg ) ; } if ( log . isDebugEnabled ( ) ) { log . debug ( msg ) ; } } } 	0	['23', '2', '0', '22', '74', '175', '4', '18', '19', '0.881818182', '461', '1', '3', '0.192307692', '0.25974026', '1', '1', '18.60869565', '23', '2.5217', '0']
package org . apache . synapse . config . xml ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import org . apache . axiom . om . OMFactory ; import org . apache . axiom . om . OMAbstractFactory ; import org . apache . axiom . om . OMNamespace ; import org . apache . axiom . om . OMElement ; import org . apache . synapse . config . Entry ; import org . apache . synapse . SynapseException ; import org . apache . axiom . om . impl . llom . OMTextImpl ; import javax . xml . stream . XMLStreamConstants ; import java . net . URL ; public class EntrySerializer { private static Log log = LogFactory . getLog ( EntrySerializer . class ) ; protected static final OMFactory fac = OMAbstractFactory . getOMFactory ( ) ; protected static final OMNamespace synNS = fac . createOMNamespace ( XMLConfigConstants . SYNAPSE_NAMESPACE , "syn" ) ; protected static final OMNamespace nullNS = fac . createOMNamespace ( XMLConfigConstants . NULL_NAMESPACE , "" ) ; public static OMElement serializeEntry ( Entry entry , OMElement parent ) { OMElement propertyElement = fac . createOMElement ( "localEntry" , synNS ) ; propertyElement . addAttribute ( fac . createOMAttribute ( "key" , nullNS , entry . getKey ( ) . trim ( ) ) ) ; int type = entry . getType ( ) ; if ( type == Entry . URL_SRC ) { URL srcUrl = entry . getSrc ( ) ; if ( srcUrl != null ) { propertyElement . addAttribute ( fac . createOMAttribute ( "src" , nullNS , srcUrl . toString ( ) . trim ( ) ) ) ; } } else if ( type == Entry . INLINE_XML ) { Object value = entry . getValue ( ) ; if ( value != null && value instanceof OMElement ) { propertyElement . addChild ( ( OMElement ) value ) ; } } else if ( type == Entry . INLINE_TEXT ) { Object value = entry . getValue ( ) ; if ( value != null && value instanceof String ) { OMTextImpl textData = ( OMTextImpl ) fac . createOMText ( ( ( String ) value ) . trim ( ) ) ; textData . setType ( XMLStreamConstants . CDATA ) ; propertyElement . addChild ( textData ) ; } } else if ( type == Entry . REMOTE_ENTRY ) { return null ; } else { handleException ( "Entry type undefined" ) ; } if ( parent != null ) { parent . addChild ( propertyElement ) ; } return propertyElement ; } private static void handleException ( String msg ) { log . error ( msg ) ; throw new SynapseException ( msg ) ; } } 	0	['4', '1', '0', '13', '22', '2', '1', '12', '2', '0.583333333', '126', '1', '0', '0', '0.333333333', '0', '0', '29.5', '6', '1.75', '0']
package org . apache . synapse . config . xml . endpoints ; import org . apache . axiom . om . OMAbstractFactory ; import org . apache . axiom . om . OMElement ; import org . apache . synapse . SynapseConstants ; import org . apache . synapse . SynapseException ; import org . apache . synapse . endpoints . AddressEndpoint ; import org . apache . synapse . endpoints . Endpoint ; import org . apache . synapse . endpoints . utils . EndpointDefinition ; public class AddressEndpointSerializer extends DefaultEndpointSerializer { protected OMElement serializeEndpoint ( Endpoint endpoint ) { if ( ! ( endpoint instanceof AddressEndpoint ) ) { throw new SynapseException ( "Invalid endpoint type." ) ; } fac = OMAbstractFactory . getOMFactory ( ) ; OMElement endpointElement = fac . createOMElement ( "endpoint" , SynapseConstants . SYNAPSE_OMNAMESPACE ) ; AddressEndpoint addressEndpoint = ( AddressEndpoint ) endpoint ; String name = addressEndpoint . getName ( ) ; if ( name != null ) { endpointElement . addAttribute ( "name" , name , null ) ; } EndpointDefinition epAddress = addressEndpoint . getEndpoint ( ) ; OMElement addressElement = serializeEndpointDefinition ( epAddress ) ; endpointElement . addChild ( addressElement ) ; return endpointElement ; } public OMElement serializeEndpointDefinition ( EndpointDefinition endpointDefinition ) { OMElement element = fac . createOMElement ( "address" , SynapseConstants . SYNAPSE_OMNAMESPACE ) ; if ( endpointDefinition . getAddress ( ) != null ) { element . addAttribute ( fac . createOMAttribute ( "uri" , null , endpointDefinition . getAddress ( ) ) ) ; } else { handleException ( "Invalid Endpoint. Address is required" ) ; } serializeCommonEndpointProperties ( endpointDefinition , element ) ; serializeSpecificEndpointProperties ( endpointDefinition , element ) ; return element ; } } 	0	['3', '3', '0', '13', '17', '1', '1', '12', '2', '2', '82', '0', '0', '0.818181818', '0.555555556', '2', '7', '26.33333333', '3', '1.6667', '0']
package org . apache . synapse . config . xml . endpoints ; import org . apache . axiom . om . OMAbstractFactory ; import org . apache . axiom . om . OMElement ; import org . apache . synapse . SynapseConstants ; import org . apache . synapse . SynapseException ; import org . apache . synapse . endpoints . Endpoint ; import org . apache . synapse . endpoints . WSDLEndpoint ; import org . apache . synapse . endpoints . utils . EndpointDefinition ; public class WSDLEndpointSerializer extends EndpointSerializer { protected OMElement serializeEndpoint ( Endpoint endpoint ) { if ( ! ( endpoint instanceof WSDLEndpoint ) ) { throw new SynapseException ( "Invalid endpoint type." ) ; } fac = OMAbstractFactory . getOMFactory ( ) ; OMElement endpointElement = fac . createOMElement ( "endpoint" , SynapseConstants . SYNAPSE_OMNAMESPACE ) ; WSDLEndpoint wsdlEndpoint = ( WSDLEndpoint ) endpoint ; String name = wsdlEndpoint . getName ( ) ; if ( name != null ) { endpointElement . addAttribute ( "name" , name , null ) ; } OMElement wsdlElement = fac . createOMElement ( "wsdl" , SynapseConstants . SYNAPSE_OMNAMESPACE ) ; String serviceName = wsdlEndpoint . getServiceName ( ) ; if ( serviceName != null ) { wsdlElement . addAttribute ( "service" , serviceName , null ) ; } String portName = wsdlEndpoint . getPortName ( ) ; if ( portName != null ) { wsdlElement . addAttribute ( "port" , portName , null ) ; } String uri = wsdlEndpoint . getWsdlURI ( ) ; if ( uri != null ) { wsdlElement . addAttribute ( "uri" , uri , null ) ; } OMElement wsdlDoc = wsdlEndpoint . getWsdlDoc ( ) ; if ( wsdlDoc != null ) { wsdlElement . addChild ( wsdlDoc ) ; } EndpointDefinition epDefinition = wsdlEndpoint . getEndpoint ( ) ; serializeCommonEndpointProperties ( epDefinition , wsdlElement ) ; serializeSpecificEndpointProperties ( epDefinition , wsdlElement ) ; endpointElement . addChild ( wsdlElement ) ; return endpointElement ; } protected void serializeSpecificEndpointProperties ( EndpointDefinition endpointDefinition , OMElement element ) { } } 	0	['3', '2', '0', '12', '16', '3', '1', '12', '1', '2', '101', '0', '0', '0.75', '0.5', '1', '2', '32.66666667', '7', '2.6667', '0']
package org . apache . synapse . config . xml ; import org . apache . axiom . om . OMElement ; import org . apache . synapse . Mediator ; import org . apache . synapse . mediators . filters . InMediator ; import javax . xml . namespace . QName ; public class InMediatorFactory extends AbstractListMediatorFactory { private static final QName IN_Q = new QName ( XMLConfigConstants . SYNAPSE_NAMESPACE , "in" ) ; public Mediator createMediator ( OMElement elem ) { InMediator filter = new InMediator ( ) ; processTraceState ( filter , elem ) ; addChildren ( elem , filter ) ; return filter ; } public QName getTagQName ( ) { return IN_Q ; } } 	0	['4', '3', '0', '5', '9', '4', '0', '5', '3', '0.666666667', '30', '1', '0', '0.666666667', '0.666666667', '0', '0', '6.25', '1', '0.5', '0']
package org . apache . synapse . config . xml ; import org . apache . axiom . om . OMElement ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import org . apache . synapse . SynapseException ; import org . apache . synapse . mediators . ListMediator ; import org . apache . synapse . Mediator ; import javax . xml . namespace . QName ; import java . util . Iterator ; public abstract class AbstractListMediatorFactory extends AbstractMediatorFactory { protected static void addChildren ( OMElement el , ListMediator m ) { Iterator it = el . getChildElements ( ) ; while ( it . hasNext ( ) ) { OMElement child = ( OMElement ) it . next ( ) ; Mediator med = MediatorFactoryFinder . getInstance ( ) . getMediator ( child ) ; if ( med != null ) { m . addChild ( med ) ; } else { String msg = "Unknown mediator : " + child . getLocalName ( ) ; log . error ( msg ) ; throw new SynapseException ( msg ) ; } } } } 	0	['2', '2', '7', '14', '15', '1', '7', '7', '1', '2', '46', '0', '0', '0.75', '0.5', '0', '0', '22', '3', '1.5', '0']
package org . apache . synapse . util . xpath ; public final class SynapseXPathConstants { public static final String GET_PROPERTY_FUNCTION = "get-property" ; public static final String SOAP_BODY_VARIABLE = "body" ; public static final String SOAP_HEADER_VARIABLE = "header" ; public static final String MESSAGE_CONTEXT_VARIABLE_PREFIX = "ctx" ; public static final String AXIS2_CONTEXT_VARIABLE_PREFIX = "axis2" ; public static final String TRANSPORT_VARIABLE_PREFIX = "trp" ; } 	0	['1', '1', '0', '0', '2', '0', '0', '0', '1', '2', '10', '0', '0', '0', '1', '0', '0', '3', '0', '0', '0']
package org . apache . synapse . core . axis2 ; import org . apache . axiom . soap . SOAPEnvelope ; import org . apache . axiom . soap . SOAPHeaderBlock ; import org . apache . axis2 . AxisFault ; import org . apache . axis2 . context . MessageContext ; import org . apache . axis2 . handlers . AbstractHandler ; import java . util . ArrayList ; import java . util . Iterator ; public class SynapseMustUnderstandHandler extends AbstractHandler { public InvocationResponse invoke ( MessageContext messageContext ) throws AxisFault { SOAPEnvelope envelope = messageContext . getEnvelope ( ) ; if ( envelope . getHeader ( ) != null ) { Iterator headerBlocks = envelope . getHeader ( ) . getHeadersToProcess ( null ) ; ArrayList markedHeaderBlocks = new ArrayList ( ) ; while ( headerBlocks . hasNext ( ) ) { SOAPHeaderBlock headerBlock = ( SOAPHeaderBlock ) headerBlocks . next ( ) ; if ( ! headerBlock . isProcessed ( ) && headerBlock . getMustUnderstand ( ) ) { markedHeaderBlocks . add ( headerBlock ) ; headerBlock . setProcessed ( ) ; } } messageContext . setProperty ( "headersMarkedAsProcessedBySynapse" , markedHeaderBlocks ) ; } return InvocationResponse . CONTINUE ; } } 	0	['2', '2', '0', '8', '14', '1', '0', '8', '2', '2', '46', '0', '0', '0.875', '0.75', '0', '0', '22', '1', '0.5', '0']
package org . apache . synapse . config . xml ; import org . apache . axiom . om . OMElement ; import org . apache . synapse . Mediator ; import org . apache . synapse . config . xml . endpoints . EndpointSerializer ; import org . apache . synapse . mediators . builtin . SendMediator ; import org . apache . synapse . endpoints . Endpoint ; public class SendMediatorSerializer extends AbstractMediatorSerializer { public OMElement serializeMediator ( OMElement parent , Mediator m ) { if ( ! ( m instanceof SendMediator ) ) { handleException ( "Unsupported mediator passed in for serialization : " + m . getType ( ) ) ; } SendMediator mediator = ( SendMediator ) m ; OMElement send = fac . createOMElement ( "send" , synNS ) ; saveTracingState ( send , mediator ) ; Endpoint activeEndpoint = mediator . getEndpoint ( ) ; if ( activeEndpoint != null ) { send . addChild ( EndpointSerializer . getElementFromEndpoint ( activeEndpoint ) ) ; } if ( parent != null ) { parent . addChild ( send ) ; } return send ; } public String getMediatorClassName ( ) { return SendMediator . class . getName ( ) ; } } 	0	['3', '2', '0', '9', '15', '3', '0', '9', '3', '2', '50', '0', '0', '0.75', '0.555555556', '0', '0', '15.66666667', '4', '1.6667', '0']
package org . apache . synapse . config . xml ; import org . apache . axiom . om . OMElement ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import org . apache . synapse . Mediator ; import org . apache . synapse . mediators . builtin . LogMediator ; public class LogMediatorSerializer extends AbstractMediatorSerializer { public OMElement serializeMediator ( OMElement parent , Mediator m ) { if ( ! ( m instanceof LogMediator ) ) { handleException ( "Unsupported mediator passed in for serialization : " + m . getType ( ) ) ; } LogMediator mediator = ( LogMediator ) m ; OMElement log = fac . createOMElement ( "log" , synNS ) ; saveTracingState ( log , mediator ) ; if ( mediator . getLogLevel ( ) != LogMediator . SIMPLE ) { log . addAttribute ( fac . createOMAttribute ( "level" , nullNS , mediator . getLogLevel ( ) == LogMediator . HEADERS ? "headers" : mediator . getLogLevel ( ) == LogMediator . FULL ? "full" : mediator . getLogLevel ( ) == LogMediator . CUSTOM ? "custom" : "simple" ) ) ; } if ( mediator . getSeparator ( ) != LogMediator . DEFAULT_SEP ) { log . addAttribute ( fac . createOMAttribute ( "separator" , nullNS , mediator . getSeparator ( ) ) ) ; } super . serializeProperties ( log , mediator . getProperties ( ) ) ; if ( parent != null ) { parent . addChild ( log ) ; } return log ; } public String getMediatorClassName ( ) { return LogMediator . class . getName ( ) ; } } 	0	['3', '2', '0', '8', '19', '3', '0', '8', '3', '2', '88', '0', '0', '0.75', '0.555555556', '0', '0', '28.33333333', '8', '3', '0']
package org . apache . synapse . metrics ; public final class MetricsConstants { public static final String GLOBAL_REQUEST_COUNTER = "__GLOBAL_REQUEST_COUNTER__" ; public static final String REQUEST_RECEIVED_TIME = "__REQUEST_RECEIVED_TIME__" ; } 	0	['1', '1', '0', '0', '2', '0', '0', '0', '1', '2', '6', '0', '0', '0', '1', '0', '0', '3', '0', '0', '0']
package org . apache . synapse . config . xml ; import java . io . InputStream ; import org . apache . axiom . om . * ; import org . apache . axiom . om . impl . builder . StAXOMBuilder ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import org . apache . synapse . config . SynapseConfiguration ; import javax . xml . stream . XMLStreamException ; public class XMLConfigurationBuilder { private static Log log = LogFactory . getLog ( XMLConfigurationBuilder . class ) ; public static SynapseConfiguration getConfiguration ( InputStream is ) throws XMLStreamException { log . info ( "Generating the Synapse configuration model by parsing the XML configuration" ) ; OMElement definitions = new StAXOMBuilder ( is ) . getDocumentElement ( ) ; definitions . build ( ) ; return ConfigurationFactoryAndSerializerFinder . getInstance ( ) . getConfiguration ( definitions ) ; } } 	0	['3', '1', '0', '8', '11', '1', '2', '6', '2', '0.5', '26', '1', '0', '0', '0.5', '0', '0', '7.333333333', '1', '0.3333', '0']
package org . apache . synapse . config . xml ; import org . apache . axiom . om . OMElement ; import org . apache . axiom . om . OMNode ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import org . apache . synapse . SynapseException ; import org . apache . synapse . config . SynapseConfiguration ; import org . apache . synapse . config . XMLToObjectMapper ; import sun . misc . Service ; import javax . xml . namespace . QName ; import javax . xml . stream . XMLStreamException ; import java . io . OutputStream ; import java . util . HashMap ; import java . util . Iterator ; import java . util . Map ; public class ConfigurationFactoryAndSerializerFinder implements XMLToObjectMapper { private static final Log log = LogFactory . getLog ( ConfigurationFactoryAndSerializerFinder . class ) ; private static final Class [ ] configurationFactories = { SynapseXMLConfigurationFactory . class , } ; private static ConfigurationFactoryAndSerializerFinder instance = null ; private static Map factoryMap = new HashMap ( ) ; private static Map serializerMap = new HashMap ( ) ; public static synchronized ConfigurationFactoryAndSerializerFinder getInstance ( ) { if ( instance == null ) { instance = new ConfigurationFactoryAndSerializerFinder ( ) ; } return instance ; } public synchronized void reset ( ) { factoryMap . clear ( ) ; instance = null ; } private ConfigurationFactoryAndSerializerFinder ( ) { factoryMap = new HashMap ( ) ; for ( int i = 0 ; i < configurationFactories . length ; i ++ ) { Class c = configurationFactories [ i ] ; try { ConfigurationFactory fac = ( ConfigurationFactory ) c . newInstance ( ) ; factoryMap . put ( fac . getTagQName ( ) , c ) ; serializerMap . put ( fac . getTagQName ( ) , fac . getSerializerClass ( ) ) ; } catch ( Exception e ) { throw new SynapseException ( "Error instantiating " + c . getName ( ) , e ) ; } } registerExtensions ( ) ; } private void handleException ( String msg , Exception e ) { log . error ( msg , e ) ; throw new SynapseException ( msg , e ) ; } private void handleException ( String msg ) { log . error ( msg ) ; throw new SynapseException ( msg ) ; } private void registerExtensions ( ) { Iterator it = Service . providers ( ConfigurationFactory . class ) ; while ( it . hasNext ( ) ) { ConfigurationFactory cf = ( ConfigurationFactory ) it . next ( ) ; QName tag = cf . getTagQName ( ) ; factoryMap . put ( tag , cf . getClass ( ) ) ; serializerMap . put ( tag , cf . getSerializerClass ( ) ) ; if ( log . isDebugEnabled ( ) ) { log . debug ( "Added MediatorFactory " + cf . getClass ( ) + " to handle " + tag ) ; } } } public SynapseConfiguration getConfiguration ( OMElement element ) { String localName = element . getLocalName ( ) ; QName qName = null ; if ( element . getNamespace ( ) != null ) { qName = new QName ( element . getNamespace ( ) . getNamespaceURI ( ) , localName ) ; } else { qName = new QName ( localName ) ; } if ( log . isDebugEnabled ( ) ) { log . debug ( "getConfiguration(" + qName + ")" ) ; } Class cls = ( Class ) factoryMap . get ( qName ) ; if ( cls == null ) { String msg = "Unknown Configuration type " + "referenced by configuration element : " + qName ; log . error ( msg ) ; throw new SynapseException ( msg ) ; } try { ConfigurationFactory cf = ( ConfigurationFactory ) cls . newInstance ( ) ; return cf . getConfiguration ( element ) ; } catch ( InstantiationException e ) { String msg = "Error initializing configuration factory : " + cls ; log . error ( msg ) ; throw new SynapseException ( msg , e ) ; } catch ( IllegalAccessException e ) { String msg = "Error initializing configuration factory : " + cls ; log . error ( msg ) ; throw new SynapseException ( msg , e ) ; } } public static OMElement serializeConfiguration ( SynapseConfiguration synCfg ) { if ( synCfg . getDefaultQName ( ) == null ) { return serializeConfiguration ( synCfg , XMLConfigConstants . DEFINITIONS_ELT ) ; } else { return serializeConfiguration ( synCfg , synCfg . getDefaultQName ( ) ) ; } } public static OMElement serializeConfiguration ( SynapseConfiguration synCfg , QName qName ) { Class cls = ( Class ) serializerMap . get ( qName ) ; if ( cls == null ) { String msg = "Unknown Configuration type " + "referenced by configuration element : " + qName ; log . error ( msg ) ; throw new SynapseException ( msg ) ; } try { ConfigurationSerializer cs = ( ConfigurationSerializer ) cls . newInstance ( ) ; return cs . serializeConfiguration ( synCfg ) ; } catch ( InstantiationException e ) { String msg = "Error initializing configuration factory : " + cls ; log . error ( msg ) ; throw new SynapseException ( msg , e ) ; } catch ( IllegalAccessException e ) { String msg = "Error initializing configuration factory : " + cls ; log . error ( msg ) ; throw new SynapseException ( msg , e ) ; } } public Map getFactoryMap ( ) { return factoryMap ; } public static Map getSerializerMap ( ) { return serializerMap ; } public Object getObjectFromOMNode ( OMNode om ) { if ( om instanceof OMElement ) { return getConfiguration ( ( OMElement ) om ) ; } else { handleException ( "Invalid configuration XML : " + om ) ; } return null ; } } 	0	['13', '1', '0', '14', '45', '10', '2', '12', '8', '0.583333333', '382', '1', '1', '0', '0.19047619', '0', '0', '28', '4', '1.4615', '0']
package org . apache . synapse . config . xml ; import org . apache . axiom . om . OMAttribute ; import org . apache . axiom . om . OMElement ; import org . apache . synapse . Mediator ; import org . apache . synapse . SynapseException ; import org . apache . synapse . mediators . filters . SwitchMediator ; import org . jaxen . JaxenException ; import javax . xml . namespace . QName ; import java . util . Iterator ; import java . util . regex . Pattern ; import java . util . regex . PatternSyntaxException ; public class SwitchMediatorFactory extends AbstractMediatorFactory { private static final QName SWITCH_Q = new QName ( XMLConfigConstants . SYNAPSE_NAMESPACE , "switch" ) ; private static final QName CASE_Q = new QName ( XMLConfigConstants . SYNAPSE_NAMESPACE , "case" ) ; private static final QName DEFAULT_Q = new QName ( XMLConfigConstants . SYNAPSE_NAMESPACE , "default" ) ; public Mediator createMediator ( OMElement elem ) { SwitchMediator switchMediator = new SwitchMediator ( ) ; OMAttribute source = elem . getAttribute ( ATT_SOURCE ) ; if ( source == null ) { String msg = "A 'source' XPath attribute is required for a switch mediator" ; log . error ( msg ) ; throw new SynapseException ( msg ) ; } else { try { switchMediator . setSource ( SynapseXPathFactory . getSynapseXPath ( elem , ATT_SOURCE ) ) ; } catch ( JaxenException e ) { String msg = "Invalid XPath for attribute 'source' : " + source . getAttributeValue ( ) ; log . error ( msg ) ; throw new SynapseException ( msg ) ; } } processTraceState ( switchMediator , elem ) ; Iterator iter = elem . getChildrenWithName ( CASE_Q ) ; while ( iter . hasNext ( ) ) { OMElement caseElem = ( OMElement ) iter . next ( ) ; SwitchCase aCase = new SwitchCase ( ) ; OMAttribute regex = caseElem . getAttribute ( ATT_REGEX ) ; if ( regex == null ) { String msg = "The 'regex' attribute is required for a switch case definition" ; log . error ( msg ) ; throw new SynapseException ( msg ) ; } try { aCase . setRegex ( Pattern . compile ( regex . getAttributeValue ( ) ) ) ; } catch ( PatternSyntaxException pse ) { String msg = "Invalid Regular Expression for attribute 'regex' : " + regex . getAttributeValue ( ) ; log . error ( msg ) ; throw new SynapseException ( msg ) ; } aCase . setCaseMediator ( AnonymousListMediatorFactory . createAnonymousListMediator ( caseElem ) ) ; switchMediator . addCase ( aCase ) ; } iter = elem . getChildrenWithName ( DEFAULT_Q ) ; while ( iter . hasNext ( ) ) { SwitchCase aCase = new SwitchCase ( ) ; aCase . setCaseMediator ( AnonymousListMediatorFactory . createAnonymousListMediator ( ( OMElement ) iter . next ( ) ) ) ; switchMediator . setDefaultCase ( aCase ) ; break ; } return switchMediator ; } public QName getTagQName ( ) { return SWITCH_Q ; } } 	0	['4', '2', '0', '13', '27', '2', '0', '13', '3', '0.666666667', '167', '1', '0', '0.6', '0.666666667', '0', '0', '40', '5', '1.5', '0']
package org . apache . synapse . config . xml ; import org . apache . axiom . om . OMAttribute ; import org . apache . axiom . om . OMElement ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import org . apache . synapse . Mediator ; import org . apache . synapse . mediators . base . SequenceMediator ; import org . apache . synapse . mediators . builtin . DropMediator ; import org . apache . synapse . mediators . eip . aggregator . AggregateMediator ; import org . jaxen . JaxenException ; import javax . xml . namespace . QName ; public class AggregateMediatorFactory extends AbstractMediatorFactory { private static final Log log = LogFactory . getLog ( AggregateMediatorFactory . class ) ; private static final QName AGGREGATE_Q = new QName ( XMLConfigConstants . SYNAPSE_NAMESPACE , "aggregate" ) ; private static final QName CORELATE_ON_Q = new QName ( XMLConfigConstants . SYNAPSE_NAMESPACE , "correlateOn" ) ; private static final QName COMPLETE_CONDITION_Q = new QName ( XMLConfigConstants . SYNAPSE_NAMESPACE , "completeCondition" ) ; private static final QName MESSAGE_COUNT_Q = new QName ( XMLConfigConstants . SYNAPSE_NAMESPACE , "messageCount" ) ; private static final QName ON_COMPLETE_Q = new QName ( XMLConfigConstants . SYNAPSE_NAMESPACE , "onComplete" ) ; private static final QName EXPRESSION_Q = new QName ( XMLConfigConstants . NULL_NAMESPACE , "expression" ) ; private static final QName TIMEOUT_Q = new QName ( XMLConfigConstants . NULL_NAMESPACE , "timeout" ) ; private static final QName MIN_Q = new QName ( XMLConfigConstants . NULL_NAMESPACE , "min" ) ; private static final QName MAX_Q = new QName ( XMLConfigConstants . NULL_NAMESPACE , "max" ) ; private static final QName SEQUENCE_Q = new QName ( XMLConfigConstants . NULL_NAMESPACE , "sequence" ) ; public Mediator createMediator ( OMElement elem ) { AggregateMediator mediator = new AggregateMediator ( ) ; processTraceState ( mediator , elem ) ; OMElement corelateOn = elem . getFirstChildWithName ( CORELATE_ON_Q ) ; if ( corelateOn != null ) { OMAttribute corelateExpr = corelateOn . getAttribute ( EXPRESSION_Q ) ; if ( corelateExpr != null ) { try { mediator . setCorrelateExpression ( SynapseXPathFactory . getSynapseXPath ( corelateOn , EXPRESSION_Q ) ) ; } catch ( JaxenException e ) { handleException ( "Unable to load the corelate XPATH expression" , e ) ; } } } OMElement completeCond = elem . getFirstChildWithName ( COMPLETE_CONDITION_Q ) ; if ( completeCond != null ) { OMAttribute completeTimeout = completeCond . getAttribute ( TIMEOUT_Q ) ; if ( completeTimeout != null ) { mediator . setCompletionTimeoutMillis ( Long . parseLong ( completeTimeout . getAttributeValue ( ) ) * 1000 ) ; } OMElement messageCount = completeCond . getFirstChildWithName ( MESSAGE_COUNT_Q ) ; if ( messageCount != null ) { OMAttribute min = messageCount . getAttribute ( MIN_Q ) ; if ( min != null ) { mediator . setMinMessagesToComplete ( Integer . parseInt ( min . getAttributeValue ( ) ) ) ; } OMAttribute max = messageCount . getAttribute ( MAX_Q ) ; if ( max != null ) { mediator . setMaxMessagesToComplete ( Integer . parseInt ( max . getAttributeValue ( ) ) ) ; } } } OMElement onComplete = elem . getFirstChildWithName ( ON_COMPLETE_Q ) ; if ( onComplete != null ) { OMAttribute aggregateExpr = onComplete . getAttribute ( EXPRESSION_Q ) ; if ( aggregateExpr != null ) { try { mediator . setAggregationExpression ( SynapseXPathFactory . getSynapseXPath ( onComplete , EXPRESSION_Q ) ) ; } catch ( JaxenException e ) { handleException ( "Unable to load the aggregating XPATH" , e ) ; } } OMAttribute onCompleteSequence = onComplete . getAttribute ( SEQUENCE_Q ) ; if ( onCompleteSequence != null ) { mediator . setOnCompleteSequenceRef ( onCompleteSequence . getAttributeValue ( ) ) ; } else if ( onComplete . getFirstElement ( ) != null ) { mediator . setOnCompleteSequence ( ( new SequenceMediatorFactory ( ) ) . createAnonymousSequence ( onComplete ) ) ; } else { SequenceMediator sequence = new SequenceMediator ( ) ; sequence . addChild ( new DropMediator ( ) ) ; mediator . setOnCompleteSequence ( sequence ) ; } } return mediator ; } public QName getTagQName ( ) { return AGGREGATE_Q ; } } 	0	['4', '2', '0', '13', '29', '2', '0', '13', '3', '0.696969697', '222', '1', '0', '0.6', '0.666666667', '0', '0', '51.75', '12', '3.25', '0']
package org . apache . synapse . util . concurrent ; import java . util . concurrent . atomic . AtomicInteger ; import java . util . concurrent . ThreadFactory ; public class SynapseThreadFactory implements ThreadFactory { final ThreadGroup group ; final AtomicInteger count ; final String namePrefix ; public SynapseThreadFactory ( final ThreadGroup group , final String namePrefix ) { super ( ) ; this . count = new AtomicInteger ( 1 ) ; this . group = group ; this . namePrefix = namePrefix ; } public Thread newThread ( final Runnable runnable ) { StringBuffer buffer = new StringBuffer ( ) ; buffer . append ( this . namePrefix ) ; buffer . append ( '-' ) ; buffer . append ( this . count . getAndIncrement ( ) ) ; Thread t = new Thread ( group , runnable , buffer . toString ( ) , 0 ) ; t . setDaemon ( false ) ; t . setPriority ( Thread . NORM_PRIORITY ) ; return t ; } } 	0	['2', '1', '0', '1', '13', '0', '1', '0', '2', '0', '57', '0', '0', '0', '0.625', '0', '0', '26', '1', '0.5', '0']
package org . apache . synapse . config . xml ; import org . apache . axiom . om . OMElement ; import org . apache . synapse . Mediator ; import org . apache . synapse . mediators . eip . aggregator . AggregateMediator ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class AggregateMediatorSerializer extends AbstractMediatorSerializer { private static final Log log = LogFactory . getLog ( AggregateMediatorSerializer . class ) ; public OMElement serializeMediator ( OMElement parent , Mediator m ) { if ( ! ( m instanceof AggregateMediator ) ) { handleException ( "Unsupported mediator passed in for serialization : " + m . getType ( ) ) ; } AggregateMediator mediator = ( AggregateMediator ) m ; OMElement aggregator = fac . createOMElement ( "aggregate" , synNS ) ; saveTracingState ( aggregator , mediator ) ; if ( mediator . getCorrelateExpression ( ) != null ) { OMElement corelateOn = fac . createOMElement ( "correlateOn" , synNS ) ; SynapseXPathSerializer . serializeXPath ( mediator . getCorrelateExpression ( ) , corelateOn , "expression" ) ; aggregator . addChild ( corelateOn ) ; } OMElement completeCond = fac . createOMElement ( "completeCondition" , synNS ) ; if ( mediator . getCompletionTimeoutMillis ( ) != 0 ) { completeCond . addAttribute ( "timeout" , Long . toString ( mediator . getCompletionTimeoutMillis ( ) / 1000 ) , nullNS ) ; } OMElement messageCount = fac . createOMElement ( "messageCount" , synNS ) ; if ( mediator . getMinMessagesToComplete ( ) != 0 ) { messageCount . addAttribute ( "min" , Integer . toString ( mediator . getMinMessagesToComplete ( ) ) , nullNS ) ; } if ( mediator . getMaxMessagesToComplete ( ) != 0 ) { messageCount . addAttribute ( "max" , Integer . toString ( mediator . getMaxMessagesToComplete ( ) ) , nullNS ) ; } completeCond . addChild ( messageCount ) ; aggregator . addChild ( completeCond ) ; OMElement onCompleteElem = fac . createOMElement ( "onComplete" , synNS ) ; if ( mediator . getAggregationExpression ( ) != null ) { SynapseXPathSerializer . serializeXPath ( mediator . getAggregationExpression ( ) , onCompleteElem , "expression" ) ; } if ( mediator . getOnCompleteSequenceRef ( ) != null ) { onCompleteElem . addAttribute ( "sequence" , mediator . getOnCompleteSequenceRef ( ) , nullNS ) ; } else if ( mediator . getOnCompleteSequence ( ) != null ) { new SequenceMediatorSerializer ( ) . serializeChildren ( onCompleteElem , mediator . getOnCompleteSequence ( ) . getList ( ) ) ; } aggregator . addChild ( onCompleteElem ) ; if ( parent != null ) { parent . addChild ( aggregator ) ; } return aggregator ; } public String getMediatorClassName ( ) { return AggregateMediator . class . getName ( ) ; } } 	0	['4', '2', '0', '14', '29', '6', '0', '14', '3', '1', '156', '1', '0', '0.75', '0.555555556', '0', '0', '37.75', '10', '2.75', '0']
package org . apache . synapse . util ; import org . apache . axiom . om . OMElement ; import org . apache . axiom . om . OMFactory ; import org . apache . axiom . soap . SOAPBody ; import org . apache . axiom . soap . SOAPFault ; import org . apache . axis2 . context . MessageContext ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import javax . xml . namespace . QName ; public class POXUtils { private static final Log log = LogFactory . getLog ( POXUtils . class ) ; public static void convertSOAPFaultToPOX ( MessageContext msgCtx ) { SOAPBody body = msgCtx . getEnvelope ( ) . getBody ( ) ; SOAPFault fault = body . getFault ( ) ; if ( fault != null ) { OMFactory fac = msgCtx . getEnvelope ( ) . getOMFactory ( ) ; OMElement faultPayload = fac . createOMElement ( new QName ( "Exception" ) ) ; if ( fault . getDetail ( ) != null && ! fault . getDetail ( ) . getText ( ) . equals ( "" ) ) { String faultDetail = fault . getDetail ( ) . getText ( ) ; if ( log . isDebugEnabled ( ) ) { log . debug ( "Setting the fault detail : " + faultDetail + " as athe POX Fault" ) ; } faultPayload . setText ( faultDetail ) ; } else if ( fault . getReason ( ) != null && ! fault . getReason ( ) . getText ( ) . equals ( "" ) ) { String faultReasonValue = fault . getReason ( ) . getText ( ) ; if ( log . isDebugEnabled ( ) ) { log . debug ( "Setting the fault reason : " + faultReasonValue + " as athe POX Fault" ) ; } faultPayload . setText ( faultReasonValue ) ; } else if ( log . isDebugEnabled ( ) ) { log . debug ( "Couldn't find the fault detail or reason to compose POX Fault" ) ; } if ( body . getFirstElement ( ) != null ) { body . getFirstElement ( ) . detach ( ) ; } msgCtx . setProcessingFault ( true ) ; if ( log . isDebugEnabled ( ) ) { String msg = "Original SOAP Message : " + msgCtx . getEnvelope ( ) . toString ( ) + "POXFault Message created : " + faultPayload . toString ( ) ; log . debug ( msg ) ; if ( log . isTraceEnabled ( ) ) { log . trace ( msg ) ; } } body . addChild ( faultPayload ) ; } } } 	0	['3', '1', '0', '12', '29', '1', '1', '11', '2', '0.5', '143', '1', '0', '0', '0.5', '0', '0', '46.33333333', '12', '4', '0']
package org . apache . synapse . config . xml ; import org . apache . axiom . om . OMElement ; import org . apache . axiom . om . OMNamespace ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import org . apache . synapse . SynapseException ; import org . apache . synapse . util . xpath . SynapseXPath ; public class SynapseXPathSerializer { private static final Log log = LogFactory . getLog ( SynapseXPathSerializer . class ) ; public static OMElement serializeXPath ( SynapseXPath xpath , OMElement elem , String attribName ) { OMNamespace nullNS = elem . getOMFactory ( ) . createOMNamespace ( XMLConfigConstants . NULL_NAMESPACE , "" ) ; if ( xpath != null ) { elem . addAttribute ( elem . getOMFactory ( ) . createOMAttribute ( attribName , nullNS , xpath . toString ( ) ) ) ; serializeNamespaces ( elem , xpath ) ; } else { handleException ( "Couldn't find the xpath in the SynapseXPath" ) ; } return elem ; } private static void serializeNamespaces ( OMElement elem , SynapseXPath xpath ) { for ( Object o : xpath . getNamespaces ( ) . keySet ( ) ) { String prefix = ( String ) o ; String uri = xpath . getNamespaceContext ( ) . translateNamespacePrefixToUri ( prefix ) ; if ( ! XMLConfigConstants . SYNAPSE_NAMESPACE . equals ( uri ) ) { elem . declareNamespace ( uri , prefix ) ; } } } private static void handleException ( String message ) { log . error ( message ) ; throw new SynapseException ( message ) ; } } 	0	['5', '1', '0', '23', '23', '8', '14', '9', '2', '0.5', '77', '1', '0', '0', '0.4375', '0', '0', '14.2', '2', '1', '0']
package org . apache . synapse ; public interface Command { public void execute ( ) ; } 	0	['1', '1', '0', '2', '1', '0', '2', '0', '1', '2', '1', '0', '0', '0', '1', '0', '0', '0', '1', '1', '0']
package org . apache . synapse . config . xml ; import org . apache . axiom . om . OMElement ; import org . apache . synapse . Mediator ; import org . apache . synapse . SynapseException ; import org . apache . synapse . config . xml . endpoints . EndpointFactory ; import org . apache . synapse . mediators . builtin . SendMediator ; import org . apache . synapse . endpoints . Endpoint ; import javax . xml . namespace . QName ; public class SendMediatorFactory extends AbstractMediatorFactory { private static final QName SEND_Q = new QName ( XMLConfigConstants . SYNAPSE_NAMESPACE , "send" ) ; private static final QName ENDPOINT_Q = new QName ( XMLConfigConstants . SYNAPSE_NAMESPACE , "endpoint" ) ; public Mediator createMediator ( OMElement elem ) { SendMediator sm = new SendMediator ( ) ; processTraceState ( sm , elem ) ; OMElement epElement = elem . getFirstChildWithName ( ENDPOINT_Q ) ; if ( epElement != null ) { Endpoint endpoint = EndpointFactory . getEndpointFromElement ( epElement , true ) ; if ( endpoint != null ) { sm . setEndpoint ( endpoint ) ; } } return sm ; } public QName getTagQName ( ) { return SEND_Q ; } } 	0	['4', '2', '0', '6', '11', '2', '0', '6', '3', '0.666666667', '49', '1', '0', '0.6', '0.666666667', '0', '0', '10.75', '3', '1', '0']
package org . apache . synapse . endpoints . dispatch ; import org . apache . synapse . MessageContext ; import org . apache . synapse . endpoints . Endpoint ; public interface Dispatcher { public Endpoint getEndpoint ( MessageContext synCtx , DispatcherContext dispatcherContext ) ; public void updateSession ( MessageContext synCtx , DispatcherContext dispatcherContext , Endpoint endpoint ) ; public void unbind ( MessageContext synCtx , DispatcherContext dispatcherContext ) ; public boolean isServerInitiatedSession ( ) ; } 	0	['4', '1', '0', '9', '4', '6', '6', '3', '4', '2', '4', '0', '0', '0', '0.6875', '0', '0', '0', '1', '1', '0']
package org . apache . synapse . endpoints ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import org . apache . synapse . FaultHandler ; import org . apache . synapse . MessageContext ; import org . apache . synapse . SynapseConstants ; import org . apache . synapse . SynapseException ; import org . apache . synapse . endpoints . utils . EndpointDefinition ; public class IndirectEndpoint extends FaultHandler implements Endpoint { private static final Log trace = LogFactory . getLog ( SynapseConstants . TRACE_LOGGER ) ; private static final Log log = LogFactory . getLog ( IndirectEndpoint . class ) ; private String name = null ; private String key = null ; private Endpoint parentEndpoint = null ; public void send ( MessageContext synMessageContext ) { Endpoint endpoint = synMessageContext . getEndpoint ( key ) ; if ( endpoint == null ) { handleException ( "Reference to non-existent endpoint for key : " + key ) ; } assert endpoint != null ; if ( endpoint . isActive ( synMessageContext ) ) { synMessageContext . pushFaultHandler ( this ) ; endpoint . send ( synMessageContext ) ; } else { if ( parentEndpoint != null ) { auditWarn ( "Endpoint : " + endpoint . getName ( ) + " is currently inactive" + " - invoking parent endpoint" , synMessageContext ) ; parentEndpoint . onChildEndpointFail ( this , synMessageContext ) ; } else { auditWarn ( "Endpoint : " + endpoint . getName ( ) + " is currently inactive" + " - invoking fault handler / assuming failure" , synMessageContext ) ; Object o = synMessageContext . getFaultStack ( ) . pop ( ) ; if ( o != null ) { ( ( FaultHandler ) o ) . handleFault ( synMessageContext ) ; } } } } public String getName ( ) { return name ; } public void setName ( String name ) { this . name = name . trim ( ) ; } public String getKey ( ) { return key ; } public void setKey ( String key ) { this . key = key ; } public boolean isActive ( MessageContext synMessageContext ) { Endpoint endpoint = synMessageContext . getEndpoint ( key ) ; if ( endpoint == null ) { handleException ( "Reference to non-existent endpoint for key : " + key ) ; } assert endpoint != null ; return endpoint . isActive ( synMessageContext ) ; } public void setActive ( boolean active , MessageContext synMessageContext ) { Endpoint endpoint = synMessageContext . getEndpoint ( key ) ; if ( endpoint == null ) { handleException ( "Reference to non-existent endpoint for key : " + key ) ; } assert endpoint != null ; endpoint . setActive ( active , synMessageContext ) ; } public void setParentEndpoint ( Endpoint parentEndpoint ) { this . parentEndpoint = parentEndpoint ; } public void onChildEndpointFail ( Endpoint endpoint , MessageContext synMessageContext ) { if ( parentEndpoint != null ) { parentEndpoint . onChildEndpointFail ( this , synMessageContext ) ; } else { Object o = synMessageContext . getFaultStack ( ) . pop ( ) ; if ( o != null ) { ( ( FaultHandler ) o ) . handleFault ( synMessageContext ) ; } } } private void handleException ( String msg ) { log . error ( msg ) ; throw new SynapseException ( msg ) ; } protected void auditWarn ( String msg , MessageContext msgContext ) { log . warn ( msg ) ; if ( msgContext . getServiceLog ( ) != null ) { msgContext . getServiceLog ( ) . warn ( msg ) ; } if ( shouldTrace ( msgContext ) ) { trace . warn ( msg ) ; } } public boolean shouldTrace ( MessageContext synCtx ) { Endpoint endpoint = synCtx . getEndpoint ( key ) ; EndpointDefinition endptDefn = null ; if ( endpoint instanceof AddressEndpoint ) { AddressEndpoint addEndpt = ( AddressEndpoint ) endpoint ; endptDefn = addEndpt . getEndpoint ( ) ; } else if ( endpoint instanceof WSDLEndpoint ) { WSDLEndpoint wsdlEndpt = ( WSDLEndpoint ) endpoint ; endptDefn = wsdlEndpt . getEndpoint ( ) ; } return endptDefn != null && ( ( endptDefn . getTraceState ( ) == SynapseConstants . TRACING_ON ) || ( endptDefn . getTraceState ( ) == SynapseConstants . TRACING_UNSET && synCtx . getTracingState ( ) == SynapseConstants . TRACING_ON ) ) ; } public void onFault ( MessageContext synMessageContext ) { if ( parentEndpoint != null ) { parentEndpoint . onChildEndpointFail ( this , synMessageContext ) ; } else { Object o = synMessageContext . getFaultStack ( ) . pop ( ) ; if ( o != null ) { ( ( FaultHandler ) o ) . handleFault ( synMessageContext ) ; } } } } 	0	['15', '2', '0', '15', '42', '27', '6', '9', '12', '0.726190476', '326', '0.833333333', '1', '0.277777778', '0.4', '1', '1', '20.33333333', '7', '2.4667', '0']
package org . apache . synapse . statistics . impl ; import org . apache . synapse . statistics . StatisticsStack ; import org . apache . synapse . statistics . StatisticsCollector ; import java . util . Iterator ; import java . util . ArrayList ; import java . util . List ; public class EndPointStatisticsStack implements StatisticsStack { private List endpointStatistics ; private boolean isCompleteInFlowStatisicsReport = false ; public void put ( String key , long initTime , boolean isInFlow , boolean isStatisticsEnable , boolean isFault ) { if ( endpointStatistics == null ) { endpointStatistics = new ArrayList ( ) ; } endpointStatistics . add ( new EndPointStatistics ( key , initTime , isInFlow , isStatisticsEnable , isFault ) ) ; } public void reportToStatisticsCollector ( StatisticsCollector statisticsCollector , boolean isFault ) { if ( endpointStatistics != null && ! endpointStatistics . isEmpty ( ) ) { EndPointStatistics statistics = ( EndPointStatistics ) endpointStatistics . get ( endpointStatistics . size ( ) - 1 ) ; if ( statistics != null && statistics . isStatisticsEnable && statistics . endPointName != null ) { if ( statistics . inTimeForInFlow != - 1 ) { long initTimeForOutFlow = System . currentTimeMillis ( ) ; statisticsCollector . reportForEndPoint ( statistics . endPointName , false , statistics . inTimeForInFlow , initTimeForOutFlow , isFault ) ; statistics . inTimeForInFlow = - 1 ; statistics . inTimeForOutFlow = initTimeForOutFlow ; } else if ( statistics . inTimeForOutFlow != - 1 && isCompleteInFlowStatisicsReport ) { statisticsCollector . reportForEndPoint ( statistics . endPointName , true , statistics . inTimeForOutFlow , System . currentTimeMillis ( ) , isFault ) ; endpointStatistics . remove ( statistics ) ; } } } } public void reportToStatisticsCollector ( StatisticsCollector statisticsCollector , boolean isFault , String name ) { if ( endpointStatistics != null && ! endpointStatistics . isEmpty ( ) ) { List tobeRemoved = new ArrayList ( ) ; for ( Iterator epIterator = endpointStatistics . iterator ( ) ; epIterator . hasNext ( ) ; ) { Object statisticsObj = epIterator . next ( ) ; if ( statisticsObj instanceof EndPointStatistics ) { EndPointStatistics statistics = ( EndPointStatistics ) statisticsObj ; if ( statistics . isStatisticsEnable && statistics . endPointName != null && statistics . endPointName . equals ( name ) ) { if ( statistics . inTimeForInFlow != - 1 ) { long initTimeForOutFlow = System . currentTimeMillis ( ) ; statisticsCollector . reportForEndPoint ( statistics . endPointName , false , statistics . inTimeForInFlow , initTimeForOutFlow , isFault ) ; statistics . inTimeForInFlow = - 1 ; statistics . inTimeForOutFlow = initTimeForOutFlow ; } else if ( statistics . inTimeForOutFlow != - 1 && isCompleteInFlowStatisicsReport ) { statisticsCollector . reportForEndPoint ( statistics . endPointName , true , statistics . inTimeForOutFlow , System . currentTimeMillis ( ) , isFault ) ; tobeRemoved . add ( statistics ) ; } } } } endpointStatistics . removeAll ( tobeRemoved ) ; } } public void reportAllToStatisticsCollector ( StatisticsCollector statisticsCollector , boolean isFault ) { if ( endpointStatistics != null && ! endpointStatistics . isEmpty ( ) ) { List tobeRemoved = new ArrayList ( ) ; for ( Iterator epIterator = endpointStatistics . iterator ( ) ; epIterator . hasNext ( ) ; ) { Object statisticsObj = epIterator . next ( ) ; if ( statisticsObj instanceof EndPointStatistics ) { EndPointStatistics statistics = ( EndPointStatistics ) statisticsObj ; if ( statistics . isStatisticsEnable && statistics . endPointName != null ) { if ( statistics . inTimeForInFlow != - 1 ) { long initTimeForOutFlow = System . currentTimeMillis ( ) ; statisticsCollector . reportForEndPoint ( statistics . endPointName , false , statistics . inTimeForInFlow , initTimeForOutFlow , isFault ) ; statistics . inTimeForInFlow = - 1 ; statistics . inTimeForOutFlow = initTimeForOutFlow ; } else if ( statistics . inTimeForOutFlow != - 1 && isCompleteInFlowStatisicsReport ) { statisticsCollector . reportForEndPoint ( statistics . endPointName , true , statistics . inTimeForOutFlow , System . currentTimeMillis ( ) , isFault ) ; tobeRemoved . add ( statistics ) ; } } } } endpointStatistics . removeAll ( tobeRemoved ) ; } isCompleteInFlowStatisicsReport = true ; } class EndPointStatistics { private String endPointName ; private boolean isStatisticsEnable ; private boolean isFault ; private long inTimeForInFlow = - 1 ; private long inTimeForOutFlow = - 1 ; public EndPointStatistics ( String endPointName , long initTime , boolean inFlow , boolean statisticsEnable , boolean fault ) { if ( inFlow ) { this . endPointName = endPointName ; this . inTimeForInFlow = initTime ; isStatisticsEnable = statisticsEnable ; isFault = fault ; } } public boolean equals ( Object o ) { if ( this == o ) return true ; if ( o == null || getClass ( ) != o . getClass ( ) ) return false ; EndPointStatistics that = ( EndPointStatistics ) o ; if ( endPointName != null ? ! endPointName . equals ( that . endPointName ) : that . endPointName != null ) return false ; return true ; } public int hashCode ( ) { return ( endPointName != null ? endPointName . hashCode ( ) : 0 ) ; } } } 	0	['5', '1', '0', '7', '26', '0', '5', '3', '5', '0.25', '288', '1', '0', '0', '0.6', '0', '0', '56.2', '9', '4.2', '0']
package org . apache . synapse ; import org . apache . synapse . MessageContext ; public interface Mediator { public boolean mediate ( MessageContext synCtx ) ; public String getType ( ) ; public int getTraceState ( ) ; public void setTraceState ( int traceState ) ; } 	0	['4', '1', '0', '78', '4', '6', '78', '1', '4', '2', '4', '0', '0', '0', '0.5', '0', '0', '0', '1', '1', '0']
package org . apache . synapse . statistics ; import org . apache . synapse . SynapseConstants ; import org . apache . synapse . MessageContext ; import org . apache . synapse . endpoints . Endpoint ; import org . apache . synapse . core . SynapseEnvironment ; import org . apache . synapse . statistics . impl . SequenceStatisticsStack ; import org . apache . synapse . statistics . impl . EndPointStatisticsStack ; import org . apache . synapse . statistics . impl . ProxyServiceStatisticsStack ; public class StatisticsUtils { public static void processProxyServiceStatistics ( MessageContext synCtx ) { StatisticsCollector statisticsCollector = getStatisticsCollector ( synCtx ) ; boolean isFault = synCtx . getEnvelope ( ) . getBody ( ) . hasFault ( ) ; ProxyServiceStatisticsStack proxyServiceStatisticsStack = ( ProxyServiceStatisticsStack ) synCtx . getProperty ( SynapseConstants . PROXY_STATS ) ; if ( proxyServiceStatisticsStack != null ) { proxyServiceStatisticsStack . reportToStatisticsCollector ( statisticsCollector , isFault ) ; } ProxyServiceStatisticsStack synapseServiceStatisticsStack = ( ProxyServiceStatisticsStack ) synCtx . getProperty ( SynapseConstants . SERVICE_STATS ) ; if ( synapseServiceStatisticsStack != null ) { synapseServiceStatisticsStack . reportToStatisticsCollector ( statisticsCollector , isFault ) ; } } public static void processEndPointStatistics ( MessageContext synCtx ) { StatisticsCollector statisticsCollector = getStatisticsCollector ( synCtx ) ; boolean isFault = synCtx . getEnvelope ( ) . getBody ( ) . hasFault ( ) ; EndPointStatisticsStack endPointStatisticsStack = ( EndPointStatisticsStack ) synCtx . getProperty ( SynapseConstants . ENDPOINT_STATS ) ; if ( endPointStatisticsStack != null ) { Object endpointObj = synCtx . getProperty ( SynapseConstants . PROCESSED_ENDPOINT ) ; if ( endpointObj instanceof Endpoint ) { Endpoint endpoint = ( Endpoint ) endpointObj ; String name = endpoint . getName ( ) ; if ( name == null ) { endPointStatisticsStack . reportToStatisticsCollector ( statisticsCollector , isFault ) ; } else { endPointStatisticsStack . reportToStatisticsCollector ( statisticsCollector , isFault , name ) ; } endPointStatisticsStack . reportAllToStatisticsCollector ( statisticsCollector , true ) ; } } } public static void processSequenceStatistics ( MessageContext synCtx ) { StatisticsCollector statisticsCollector = getStatisticsCollector ( synCtx ) ; boolean isFault = synCtx . getEnvelope ( ) . getBody ( ) . hasFault ( ) ; SequenceStatisticsStack sequenceStatisticsStack = ( SequenceStatisticsStack ) synCtx . getProperty ( SynapseConstants . SEQUENCE_STATS ) ; if ( sequenceStatisticsStack != null ) { sequenceStatisticsStack . reportToStatisticsCollector ( statisticsCollector , isFault ) ; } } public static void processAllSequenceStatistics ( MessageContext synCtx ) { StatisticsCollector statisticsCollector = getStatisticsCollector ( synCtx ) ; boolean isFault = synCtx . getEnvelope ( ) . getBody ( ) . hasFault ( ) ; SequenceStatisticsStack sequenceStatisticsStack = ( SequenceStatisticsStack ) synCtx . getProperty ( SynapseConstants . SEQUENCE_STATS ) ; if ( sequenceStatisticsStack != null ) { sequenceStatisticsStack . reportAllToStatisticsCollector ( statisticsCollector , isFault ) ; } } private static StatisticsCollector getStatisticsCollector ( MessageContext synCtx ) { SynapseEnvironment synEnv = synCtx . getEnvironment ( ) ; StatisticsCollector statisticsCollector = null ; if ( synEnv != null ) { statisticsCollector = synEnv . getStatisticsCollector ( ) ; if ( statisticsCollector == null ) { statisticsCollector = new StatisticsCollector ( ) ; synEnv . setStatisticsCollector ( statisticsCollector ) ; } } return statisticsCollector ; } } 	0	['6', '1', '0', '14', '22', '15', '5', '9', '5', '2', '146', '0', '0', '0', '0.5', '0', '0', '23.33333333', '4', '2.3333', '0']
package org . apache . synapse . mediators . eip ; public final class EIPConstants { public static final String AGGREGATE_CORRELATION = "aggregateCorelation" ; public static final String MESSAGE_SEQUENCE = "messageSequence" ; public static final String MESSAGE_SEQUENCE_DELEMITER = "/" ; } 	0	['1', '1', '0', '0', '2', '0', '0', '0', '1', '2', '7', '0', '0', '0', '1', '0', '0', '3', '0', '0', '0']
package org . apache . synapse . startup . tasks ; import org . apache . axiom . om . OMElement ; import org . apache . axis2 . addressing . EndpointReference ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import org . apache . synapse . ManagedLifecycle ; import org . apache . synapse . MessageContext ; import org . apache . synapse . core . SynapseEnvironment ; import org . apache . synapse . startup . Task ; import org . apache . synapse . util . PayloadHelper ; public class MessageInjector implements Task , ManagedLifecycle { private Log log = LogFactory . getLog ( MessageInjector . class ) ; private OMElement message = null ; private String to = null ; private String soapAction = null ; private SynapseEnvironment synapseEnvironment ; public void init ( SynapseEnvironment se ) { synapseEnvironment = se ; } public void setMessage ( OMElement elem ) { log . debug ( "set message " + elem . toString ( ) ) ; message = elem ; } public void setTo ( String url ) { to = url ; } public void setSoapAction ( String soapAction ) { this . soapAction = soapAction ; } public void execute ( ) { log . debug ( "execute" ) ; if ( synapseEnvironment == null ) { log . error ( "Synapse Environment not set" ) ; return ; } if ( message == null ) { log . error ( "message not set" ) ; return ; } if ( to == null ) { log . error ( "to address not set" ) ; return ; } MessageContext mc = synapseEnvironment . createMessageContext ( ) ; mc . setTo ( new EndpointReference ( to ) ) ; PayloadHelper . setXMLPayload ( mc , message . cloneOMElement ( ) ) ; if ( soapAction != null ) { mc . setSoapAction ( soapAction ) ; } synapseEnvironment . injectMessage ( mc ) ; } public void destroy ( ) { } } 	0	['7', '1', '0', '9', '22', '5', '0', '9', '7', '0.7', '114', '1', '1', '0', '0.392857143', '0', '0', '14.57142857', '5', '1.4286', '0']
package org . apache . synapse . config . xml ; import org . apache . axiom . om . OMElement ; import org . apache . synapse . Mediator ; import org . apache . synapse . mediators . builtin . RMSequenceMediator ; public class RMSequenceMediatorSerializer extends AbstractMediatorSerializer { public OMElement serializeMediator ( OMElement parent , Mediator m ) { if ( ! ( m instanceof RMSequenceMediator ) ) { handleException ( "Unsupported mediator passed in for serialization : " + m . getType ( ) ) ; } RMSequenceMediator mediator = ( RMSequenceMediator ) m ; OMElement sequence = fac . createOMElement ( "RMSequence" , synNS ) ; saveTracingState ( sequence , mediator ) ; if ( mediator . isSingle ( ) && mediator . getCorrelation ( ) != null ) { handleException ( "Invalid RMSequence mediator. A RMSequence can't have both a " + "single attribute value of true and a correlation attribute specified." ) ; } if ( mediator . isSingle ( ) && mediator . getLastMessage ( ) != null ) { handleException ( "Invalid RMSequence mediator. A RMSequence can't have both a " + "single attribute value of true and a last-message attribute specified." ) ; } if ( mediator . isSingle ( ) ) { sequence . addAttribute ( fac . createOMAttribute ( "single" , nullNS , String . valueOf ( mediator . isSingle ( ) ) ) ) ; } else if ( mediator . getCorrelation ( ) != null ) { SynapseXPathSerializer . serializeXPath ( mediator . getCorrelation ( ) , sequence , "correlation" ) ; } else { handleException ( "Invalid RMSequence mediator. Specify a single message sequence " + "or a correlation attribute." ) ; } if ( mediator . getLastMessage ( ) != null ) { SynapseXPathSerializer . serializeXPath ( mediator . getLastMessage ( ) , sequence , "last-message" ) ; } if ( mediator . getVersion ( ) != null ) { sequence . addAttribute ( fac . createOMAttribute ( "version" , nullNS , mediator . getVersion ( ) ) ) ; } if ( parent != null ) { parent . addChild ( sequence ) ; } return sequence ; } public String getMediatorClassName ( ) { return RMSequenceMediator . class . getName ( ) ; } } 	0	['3', '2', '0', '10', '21', '3', '0', '10', '3', '2', '107', '0', '0', '0.75', '0.555555556', '0', '0', '34.66666667', '11', '4', '0']
package org . apache . synapse . config . xml . endpoints ; import org . apache . synapse . endpoints . Endpoint ; import org . apache . synapse . endpoints . IndirectEndpoint ; import org . apache . synapse . SynapseException ; import org . apache . axiom . om . OMElement ; import org . apache . axiom . om . OMNode ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import javax . xml . namespace . QName ; public class IndirectEndpointFactory extends EndpointFactory { private static IndirectEndpointFactory instance = new IndirectEndpointFactory ( ) ; private IndirectEndpointFactory ( ) { } public static IndirectEndpointFactory getInstance ( ) { return instance ; } protected Endpoint createEndpoint ( OMElement epConfig , boolean anonymousEndpoint ) { IndirectEndpoint indirectEndpoint = new IndirectEndpoint ( ) ; String ref = epConfig . getAttributeValue ( new QName ( "key" ) ) ; String name = epConfig . getAttributeValue ( new QName ( "name" ) ) ; if ( name != null ) { indirectEndpoint . setName ( name ) ; } indirectEndpoint . setKey ( ref ) ; return indirectEndpoint ; } } 	0	['4', '2', '0', '4', '10', '4', '1', '4', '1', '0.666666667', '43', '1', '1', '0.818181818', '0.444444444', '1', '1', '9.5', '2', '0.75', '0']
package org . apache . synapse . util ; import org . apache . synapse . core . SynapseEnvironment ; import javax . activation . DataSource ; import java . io . IOException ; import java . io . InputStream ; import java . io . OutputStream ; public class SynapseBinaryDataSource implements DataSource { private String contentType ; private TemporaryData data ; public SynapseBinaryDataSource ( InputStream inputstream , String contentType ) throws IOException { this . contentType = contentType ; this . data = new TemporaryData ( 4 , 1024 , "tmp_" , ".dat" ) ; data . readFrom ( inputstream ) ; inputstream . close ( ) ; } public SynapseBinaryDataSource ( InputStream inputstream , String contentType , SynapseEnvironment synEnv ) throws IOException { this . contentType = contentType ; this . data = synEnv . createTemporaryData ( ) ; data . readFrom ( inputstream ) ; inputstream . close ( ) ; } public String getContentType ( ) { return contentType ; } public InputStream getInputStream ( ) throws IOException { return data . getInputStream ( ) ; } public String getName ( ) { return this . getClass ( ) . getName ( ) ; } public OutputStream getOutputStream ( ) throws IOException { return data . getOutputStream ( ) ; } } 	0	['6', '1', '0', '3', '15', '0', '1', '2', '6', '0.5', '60', '1', '1', '0', '0.458333333', '0', '0', '8.666666667', '1', '0.6667', '0']
