package org . apache . xerces . readers ; import org . apache . xerces . framework . XMLErrorReporter ; import org . apache . xerces . utils . CharDataChunk ; import org . apache . xerces . utils . QName ; import org . apache . xerces . utils . StringHasher ; import org . apache . xerces . utils . StringPool ; import org . apache . xerces . utils . XMLCharacterProperties ; import org . apache . xerces . utils . ImplementationMessages ; import org . xml . sax . SAXParseException ; import java . io . Reader ; import java . util . Vector ; public class StreamingCharReader extends XMLEntityReader { public StreamingCharReader ( XMLEntityHandler entityHandler , XMLErrorReporter errorReporter , boolean sendCharDataAsCharArray , Reader reader , StringPool stringPool ) throws Exception { super ( entityHandler , errorReporter , sendCharDataAsCharArray ) ; fStringPool = stringPool ; fCharacterStream = reader ; fCurrentChunk = CharDataChunk . createChunk ( fStringPool , null ) ; loadFirstChar ( ) ; } protected void deferException ( int errorCode , Object [ ] args , int offset ) { if ( fDeferredErrors == null ) fDeferredErrors = new Vector ( ) ; DeferredError de = new DeferredError ( errorCode , args , offset ) ; fDeferredErrors . addElement ( de ) ; } protected XMLEntityHandler . EntityReader changeReaders ( ) throws Exception { XMLEntityHandler . EntityReader nextReader = super . changeReaders ( ) ; fCurrentChunk . releaseChunk ( ) ; fCurrentChunk = null ; return nextReader ; } public void append ( XMLEntityHandler . CharBuffer charBuffer , int offset , int length ) { fCurrentChunk . append ( charBuffer , offset , length ) ; } public int addString ( int offset , int length ) { if ( length == 0 ) return 0 ; return fCurrentChunk . addString ( offset , length ) ; } public int addSymbol ( int offset , int length ) { if ( length == 0 ) return 0 ; return fCurrentChunk . addSymbol ( offset , length , 0 ) ; } public boolean lookingAtChar ( char chr , boolean skipPastChar ) throws Exception { int ch = fMostRecentChar ; if ( ch != chr ) { if ( ch == 0 ) { if ( atEOF ( fCurrentOffset + 1 ) ) { return changeReaders ( ) . lookingAtChar ( chr , skipPastChar ) ; } } return false ; } if ( skipPastChar ) { fCharacterCounter ++ ; loadNextChar ( ) ; } return true ; } public boolean lookingAtValidChar ( boolean skipPastChar ) throws Exception { int ch = fMostRecentChar ; if ( ch < 0xD800 ) { if ( ch >= 0x20 || ch == 0x09 ) { if ( skipPastChar ) { fCharacterCounter ++ ; loadNextChar ( ) ; } return true ; } if ( ch == 0x0A ) { if ( skipPastChar ) { fLinefeedCounter ++ ; fCharacterCounter = 1 ; loadNextChar ( ) ; } return true ; } if ( ch == 0 ) { if ( atEOF ( fCurrentOffset + 1 ) ) { return changeReaders ( ) . lookingAtValidChar ( skipPastChar ) ; } } return false ; } if ( ch > 0xFFFD ) { return false ; } if ( ch < 0xDC00 ) { CharDataChunk savedChunk = fCurrentChunk ; int savedIndex = fCurrentIndex ; int savedOffset = fCurrentOffset ; ch = loadNextChar ( ) ; boolean valid = ( ch >= 0xDC00 && ch < 0xE000 ) ; if ( ! valid || ! skipPastChar ) { fCurrentChunk = savedChunk ; fCurrentIndex = savedIndex ; fCurrentOffset = savedOffset ; fMostRecentData = savedChunk . toCharArray ( ) ; fMostRecentChar = fMostRecentData [ savedIndex ] & 0xFFFF ; return valid ; } } else if ( ch < 0xE000 ) { return false ; } if ( skipPastChar ) { fCharacterCounter ++ ; loadNextChar ( ) ; } return true ; } public boolean lookingAtSpace ( boolean skipPastChar ) throws Exception { int ch = fMostRecentChar ; if ( ch > 0x20 ) return false ; if ( ch == 0x20 || ch == 0x09 ) { if ( ! skipPastChar ) return true ; fCharacterCounter ++ ; } else if ( ch == 0x0A ) { if ( ! skipPastChar ) return true ; fLinefeedCounter ++ ; fCharacterCounter = 1 ; } else { if ( ch == 0 ) { if ( atEOF ( fCurrentOffset + 1 ) ) { return changeReaders ( ) . lookingAtSpace ( skipPastChar ) ; } } return false ; } loadNextChar ( ) ; return true ; } public void skipToChar ( char chr ) throws Exception { int ch = fMostRecentChar ; while ( true ) { if ( ch == chr ) return ; if ( ch == 0 ) { if ( atEOF ( fCurrentOffset + 1 ) ) { changeReaders ( ) . skipToChar ( chr ) ; return ; } fCharacterCounter ++ ; } else if ( ch == 0x0A ) { fLinefeedCounter ++ ; fCharacterCounter = 1 ; } else if ( ch >= 0xD800 && ch < 0xDC00 ) { fCharacterCounter ++ ; ch = loadNextChar ( ) ; if ( ch < 0xDC00 || ch >= 0xE000 ) continue ; } else fCharacterCounter ++ ; ch = loadNextChar ( ) ; } } public void skipPastSpaces ( ) throws Exception { int ch = fMostRecentChar ; while ( true ) { if ( ch == 0x20 || ch == 0x09 ) { fCharacterCounter ++ ; } else if ( ch == 0x0A ) { fLinefeedCounter ++ ; fCharacterCounter = 1 ; } else { if ( ch == 0 && atEOF ( fCurrentOffset + 1 ) ) changeReaders ( ) . skipPastSpaces ( ) ; return ; } ch = loadNextChar ( ) ; } } public void skipPastName ( char fastcheck ) throws Exception { int ch = fMostRecentChar ; if ( ch < 0x80 ) { if ( XMLCharacterProperties . fgAsciiInitialNameChar [ ch ] == 0 ) return ; } else { if ( ! fCalledCharPropInit ) { XMLCharacterProperties . initCharFlags ( ) ; fCalledCharPropInit = true ; } if ( ( XMLCharacterProperties . fgCharFlags [ ch ] & XMLCharacterProperties . E_InitialNameCharFlag ) == 0 ) return ; } while ( true ) { fCharacterCounter ++ ; ch = loadNextChar ( ) ; if ( fastcheck == ch ) return ; if ( ch < 0x80 ) { if ( XMLCharacterProperties . fgAsciiNameChar [ ch ] == 0 ) return ; } else { if ( ! fCalledCharPropInit ) { XMLCharacterProperties . initCharFlags ( ) ; fCalledCharPropInit = true ; } if ( ( XMLCharacterProperties . fgCharFlags [ ch ] & XMLCharacterProperties . E_NameCharFlag ) == 0 ) return ; } } } public void skipPastNmtoken ( char fastcheck ) throws Exception { int ch = fMostRecentChar ; while ( true ) { if ( fastcheck == ch ) return ; if ( ch < 0x80 ) { if ( XMLCharacterProperties . fgAsciiNameChar [ ch ] == 0 ) return ; } else { if ( ! fCalledCharPropInit ) { XMLCharacterProperties . initCharFlags ( ) ; fCalledCharPropInit = true ; } if ( ( XMLCharacterProperties . fgCharFlags [ ch ] & XMLCharacterProperties . E_NameCharFlag ) == 0 ) return ; } fCharacterCounter ++ ; ch = loadNextChar ( ) ; } } public boolean skippedString ( char [ ] s ) throws Exception { int ch = fMostRecentChar ; if ( ch != s [ 0 ] ) return false ; int length = s . length ; CharDataChunk dataChunk = fCurrentChunk ; int offset = fCurrentOffset ; int index = fCurrentIndex ; ch = loadNextChar ( ) ; for ( int i = 1 ; i < length ; i ++ ) { if ( ch != s [ i ] ) { fCurrentChunk = dataChunk ; fCurrentIndex = index ; fCurrentOffset = offset ; fMostRecentData = dataChunk . toCharArray ( ) ; fMostRecentChar = fMostRecentData [ index ] & 0xFFFF ; return false ; } ch = loadNextChar ( ) ; } fCharacterCounter += length ; return true ; } public int scanInvalidChar ( ) throws Exception { int ch = fMostRecentChar ; if ( ch == 0x0A ) { fLinefeedCounter ++ ; fCharacterCounter = 1 ; loadNextChar ( ) ; } else if ( ch == 0 ) { if ( atEOF ( fCurrentOffset + 1 ) ) { return changeReaders ( ) . scanInvalidChar ( ) ; } if ( fDeferredErrors != null ) { for ( int i = 0 ; i < fDeferredErrors . size ( ) ; i ++ ) { DeferredError de = ( DeferredError ) fDeferredErrors . elementAt ( i ) ; if ( de . offset == fCurrentIndex ) { fErrorReporter . reportError ( fErrorReporter . getLocator ( ) , ImplementationMessages . XERCES_IMPLEMENTATION_DOMAIN , de . errorCode , 0 , de . args , XMLErrorReporter . ERRORTYPE_FATAL_ERROR ) ; fDeferredErrors . removeElementAt ( i ) ; fCharacterCounter ++ ; loadNextChar ( ) ; return - 1 ; } } } fCharacterCounter ++ ; loadNextChar ( ) ; } else { fCharacterCounter ++ ; if ( ch >= 0xD800 && ch < 0xDC00 ) { int ch2 = loadNextChar ( ) ; if ( ch2 >= 0xDC00 && ch2 < 0xE000 ) { ch = ( ( ch - 0xD800 ) << 10 ) + ( ch2 - 0xDC00 ) + 0x10000 ; loadNextChar ( ) ; } } else loadNextChar ( ) ; } return ch ; } public int scanCharRef ( boolean hex ) throws Exception { int ch = fMostRecentChar ; if ( ch == 0 ) { if ( atEOF ( fCurrentOffset + 1 ) ) { return changeReaders ( ) . scanCharRef ( hex ) ; } return XMLEntityHandler . CHARREF_RESULT_INVALID_CHAR ; } int num = 0 ; if ( hex ) { if ( ch > 'f' || XMLCharacterProperties . fgAsciiXDigitChar [ ch ] == 0 ) return XMLEntityHandler . CHARREF_RESULT_INVALID_CHAR ; num = ch - ( ch < 'A' ? '0' : ( ch < 'a' ? 'A' : 'a' ) - 10 ) ; } else { if ( ch < '0' || ch > '9' ) return XMLEntityHandler . CHARREF_RESULT_INVALID_CHAR ; num = ch - '0' ; } fCharacterCounter ++ ; loadNextChar ( ) ; boolean toobig = false ; while ( true ) { ch = fMostRecentChar ; if ( ch == 0 ) break ; if ( hex ) { if ( ch > 'f' || XMLCharacterProperties . fgAsciiXDigitChar [ ch ] == 0 ) break ; } else { if ( ch < '0' || ch > '9' ) break ; } fCharacterCounter ++ ; loadNextChar ( ) ; if ( hex ) { int dig = ch - ( ch < 'A' ? '0' : ( ch < 'a' ? 'A' : 'a' ) - 10 ) ; num = ( num << 4 ) + dig ; } else { int dig = ch - '0' ; num = ( num * 10 ) + dig ; } if ( num > 0x10FFFF ) { toobig = true ; num = 0 ; } } if ( ch != ';' ) return XMLEntityHandler . CHARREF_RESULT_SEMICOLON_REQUIRED ; fCharacterCounter ++ ; loadNextChar ( ) ; if ( toobig ) return XMLEntityHandler . CHARREF_RESULT_OUT_OF_RANGE ; return num ; } public int scanStringLiteral ( ) throws Exception { boolean single ; if ( ! ( single = lookingAtChar ( '\'' , true ) ) && ! lookingAtChar ( '\"' , true ) ) { return XMLEntityHandler . STRINGLIT_RESULT_QUOTE_REQUIRED ; } int offset = fCurrentOffset ; char qchar = single ? '\'' : '\"' ; while ( ! lookingAtChar ( qchar , false ) ) { if ( ! lookingAtValidChar ( true ) ) { return XMLEntityHandler . STRINGLIT_RESULT_INVALID_CHAR ; } } int stringIndex = addString ( offset , fCurrentOffset - offset ) ; lookingAtChar ( qchar , true ) ; return stringIndex ; } public int scanAttValue ( char qchar , boolean asSymbol ) throws Exception { int offset = fCurrentOffset ; while ( true ) { if ( lookingAtChar ( qchar , false ) ) { break ; } if ( lookingAtChar ( ' ' , true ) ) { continue ; } if ( lookingAtSpace ( false ) ) { return XMLEntityHandler . ATTVALUE_RESULT_COMPLEX ; } if ( lookingAtChar ( '&' , false ) ) { return XMLEntityHandler . ATTVALUE_RESULT_COMPLEX ; } if ( lookingAtChar ( '<' , false ) ) { return XMLEntityHandler . ATTVALUE_RESULT_LESSTHAN ; } if ( ! lookingAtValidChar ( true ) ) { return XMLEntityHandler . ATTVALUE_RESULT_INVALID_CHAR ; } } int result = asSymbol ? addSymbol ( offset , fCurrentOffset - offset ) : addString ( offset , fCurrentOffset - offset ) ; lookingAtChar ( qchar , true ) ; return result ; } public int scanEntityValue ( int qchar , boolean createString ) throws Exception { int offset = fCurrentOffset ; while ( true ) { if ( atEOF ( fCurrentOffset + 1 ) ) { changeReaders ( ) ; return XMLEntityHandler . ENTITYVALUE_RESULT_END_OF_INPUT ; } if ( qchar != - 1 && lookingAtChar ( ( char ) qchar , false ) ) { if ( ! createString ) return XMLEntityHandler . ENTITYVALUE_RESULT_FINISHED ; break ; } if ( lookingAtChar ( '&' , false ) ) { return XMLEntityHandler . ENTITYVALUE_RESULT_REFERENCE ; } if ( lookingAtChar ( '%' , false ) ) { return XMLEntityHandler . ENTITYVALUE_RESULT_PEREF ; } if ( ! lookingAtValidChar ( true ) ) { return XMLEntityHandler . ENTITYVALUE_RESULT_INVALID_CHAR ; } } int result = addString ( offset , fCurrentOffset - offset ) ; lookingAtChar ( ( char ) qchar , true ) ; return result ; } public int scanName ( char fastcheck ) throws Exception { int ch = fMostRecentChar ; if ( ch < 0x80 ) { if ( XMLCharacterProperties . fgAsciiInitialNameChar [ ch ] == 0 ) return - 1 ; } else { if ( ! fCalledCharPropInit ) { XMLCharacterProperties . initCharFlags ( ) ; fCalledCharPropInit = true ; } if ( ( XMLCharacterProperties . fgCharFlags [ ch ] & XMLCharacterProperties . E_InitialNameCharFlag ) == 0 ) return - 1 ; } int offset = fCurrentOffset ; fCharacterCounter ++ ; int hashcode = 0 ; while ( true ) { hashcode = StringHasher . hashChar ( hashcode , ch ) ; ch = loadNextChar ( ) ; if ( fastcheck == ch ) break ; if ( ch < 0x80 ) { if ( XMLCharacterProperties . fgAsciiNameChar [ ch ] == 0 ) break ; } else { if ( ! fCalledCharPropInit ) { XMLCharacterProperties . initCharFlags ( ) ; fCalledCharPropInit = true ; } if ( ( XMLCharacterProperties . fgCharFlags [ ch ] & XMLCharacterProperties . E_NameCharFlag ) == 0 ) break ; } fCharacterCounter ++ ; } hashcode = StringHasher . finishHash ( hashcode ) ; int length = fCurrentOffset - offset ; int nameIndex = fCurrentChunk . addSymbol ( offset , length , hashcode ) ; return nameIndex ; } public boolean scanExpectedName ( char fastcheck , StringPool . CharArrayRange expectedName ) throws Exception { char [ ] expected = expectedName . chars ; int offset = expectedName . offset ; int len = expectedName . length ; int ch = fMostRecentChar ; for ( int i = 0 ; i < len ; i ++ ) { if ( ch != expected [ offset ++ ] ) { skipPastNmtoken ( fastcheck ) ; return false ; } fCharacterCounter ++ ; ch = loadNextChar ( ) ; } if ( ch == fastcheck ) return true ; if ( ch < 0x80 ) { if ( XMLCharacterProperties . fgAsciiNameChar [ ch ] == 0 ) return true ; } else { if ( ! fCalledCharPropInit ) { XMLCharacterProperties . initCharFlags ( ) ; fCalledCharPropInit = true ; } if ( ( XMLCharacterProperties . fgCharFlags [ ch ] & XMLCharacterProperties . E_NameCharFlag ) == 0 ) return true ; } skipPastNmtoken ( fastcheck ) ; return false ; } public void scanQName ( char fastcheck , QName qname ) throws Exception { int ch = fMostRecentChar ; if ( ch < 0x80 ) { if ( XMLCharacterProperties . fgAsciiInitialNameChar [ ch ] == 0 ) { qname . clear ( ) ; return ; } if ( ch == ':' ) { qname . clear ( ) ; return ; } } else { if ( ! fCalledCharPropInit ) { XMLCharacterProperties . initCharFlags ( ) ; fCalledCharPropInit = true ; } if ( ( XMLCharacterProperties . fgCharFlags [ ch ] & XMLCharacterProperties . E_InitialNameCharFlag ) == 0 ) { qname . clear ( ) ; return ; } } int offset = fCurrentOffset ; fCharacterCounter ++ ; int hashcode = 0 ; int prefixend = - 1 ; while ( true ) { hashcode = StringHasher . hashChar ( hashcode , ch ) ; ch = loadNextChar ( ) ; if ( fastcheck == ch ) break ; if ( ch < 0x80 ) { if ( XMLCharacterProperties . fgAsciiNameChar [ ch ] == 0 ) break ; if ( ch == ':' ) { if ( prefixend != - 1 ) break ; prefixend = fCurrentOffset ; CharDataChunk savedChunk = fCurrentChunk ; int savedOffset = fCurrentOffset ; int savedIndex = fCurrentIndex ; ch = loadNextChar ( ) ; fCurrentChunk = savedChunk ; fCurrentOffset = savedOffset ; fCurrentIndex = savedIndex ; fMostRecentData = savedChunk . toCharArray ( ) ; boolean lpok = true ; if ( ch < 0x80 ) { if ( XMLCharacterProperties . fgAsciiInitialNameChar [ ch ] == 0 || ch == ':' ) lpok = false ; } else { if ( ! fCalledCharPropInit ) { XMLCharacterProperties . initCharFlags ( ) ; fCalledCharPropInit = true ; } if ( ( XMLCharacterProperties . fgCharFlags [ ch ] & XMLCharacterProperties . E_InitialNameCharFlag ) == 0 ) lpok = false ; } ch = ':' ; if ( ! lpok ) { prefixend = - 1 ; fMostRecentChar = ch ; break ; } } } else { if ( ! fCalledCharPropInit ) { XMLCharacterProperties . initCharFlags ( ) ; fCalledCharPropInit = true ; } if ( ( XMLCharacterProperties . fgCharFlags [ ch ] & XMLCharacterProperties . E_NameCharFlag ) == 0 ) break ; } fCharacterCounter ++ ; } hashcode = StringHasher . finishHash ( hashcode ) ; int length = fCurrentOffset - offset ; qname . rawname = fCurrentChunk . addSymbol ( offset , length , hashcode ) ; qname . prefix = prefixend == - 1 ? - 1 : addSymbol ( offset , prefixend - offset ) ; qname . localpart = prefixend == - 1 ? qname . rawname : addSymbol ( prefixend + 1 , fCurrentOffset - ( prefixend + 1 ) ) ; qname . uri = - 1 ; } public int scanContent ( QName element ) throws Exception { if ( fCallClearPreviousChunk && fCurrentChunk . clearPreviousChunk ( ) ) fCallClearPreviousChunk = false ; int charDataOffset = fCurrentOffset ; int ch = fMostRecentChar ; if ( ch < 0x80 ) { switch ( XMLCharacterProperties . fgAsciiWSCharData [ ch ] ) { case 0 : fCharacterCounter ++ ; ch = loadNextChar ( ) ; break ; case 1 : fCharacterCounter ++ ; ch = loadNextChar ( ) ; if ( ! fInCDSect ) { return recognizeMarkup ( ch ) ; } break ; case 2 : fCharacterCounter ++ ; ch = loadNextChar ( ) ; if ( ! fInCDSect ) { return recognizeReference ( ch ) ; } break ; case 3 : fCharacterCounter ++ ; ch = loadNextChar ( ) ; if ( ch != ']' ) break ; { CharDataChunk dataChunk = fCurrentChunk ; int index = fCurrentIndex ; int offset = fCurrentOffset ; if ( loadNextChar ( ) != '>' ) { fCurrentChunk = dataChunk ; fCurrentIndex = index ; fCurrentOffset = offset ; fMostRecentData = dataChunk . toCharArray ( ) ; fMostRecentChar = ']' ; break ; } } loadNextChar ( ) ; fCharacterCounter += 2 ; return XMLEntityHandler . CONTENT_RESULT_END_OF_CDSECT ; case 4 : if ( ch == 0 && atEOF ( fCurrentOffset + 1 ) ) { changeReaders ( ) ; return XMLEntityHandler . CONTENT_RESULT_INVALID_CHAR ; } return XMLEntityHandler . CONTENT_RESULT_INVALID_CHAR ; case 5 : do { if ( ch == 0x0A ) { fLinefeedCounter ++ ; fCharacterCounter = 1 ; } else fCharacterCounter ++ ; ch = loadNextChar ( ) ; } while ( ch == 0x20 || ch == 0x09 || ch == 0x0A ) ; if ( ch < 0x80 ) { switch ( XMLCharacterProperties . fgAsciiCharData [ ch ] ) { case 0 : fCharacterCounter ++ ; ch = loadNextChar ( ) ; break ; case 1 : if ( ! fInCDSect ) { callCharDataHandler ( charDataOffset , fCurrentOffset , true ) ; fCharacterCounter ++ ; ch = loadNextChar ( ) ; return recognizeMarkup ( ch ) ; } fCharacterCounter ++ ; ch = loadNextChar ( ) ; break ; case 2 : if ( ! fInCDSect ) { callCharDataHandler ( charDataOffset , fCurrentOffset , true ) ; fCharacterCounter ++ ; ch = loadNextChar ( ) ; return recognizeReference ( ch ) ; } fCharacterCounter ++ ; ch = loadNextChar ( ) ; break ; case 3 : int endOffset = fCurrentOffset ; ch = loadNextChar ( ) ; if ( ch != ']' ) { fCharacterCounter ++ ; break ; } { CharDataChunk dataChunk = fCurrentChunk ; int index = fCurrentIndex ; int offset = fCurrentOffset ; if ( loadNextChar ( ) != '>' ) { fCurrentChunk = dataChunk ; fCurrentIndex = index ; fCurrentOffset = offset ; fMostRecentData = dataChunk . toCharArray ( ) ; fMostRecentChar = ']' ; fCharacterCounter ++ ; break ; } } loadNextChar ( ) ; callCharDataHandler ( charDataOffset , endOffset , true ) ; fCharacterCounter += 3 ; return XMLEntityHandler . CONTENT_RESULT_END_OF_CDSECT ; case 4 : callCharDataHandler ( charDataOffset , fCurrentOffset , true ) ; if ( ch == 0 && atEOF ( fCurrentOffset + 1 ) ) { changeReaders ( ) ; return XMLEntityHandler . CONTENT_RESULT_INVALID_CHAR ; } return XMLEntityHandler . CONTENT_RESULT_INVALID_CHAR ; } } else if ( ! skipMultiByteCharData ( ch ) ) { callCharDataHandler ( charDataOffset , fCurrentOffset , true ) ; return XMLEntityHandler . CONTENT_RESULT_INVALID_CHAR ; } break ; } } else if ( ! skipMultiByteCharData ( ch ) ) { return XMLEntityHandler . CONTENT_RESULT_INVALID_CHAR ; } ch = skipAsciiCharData ( ) ; while ( true ) { if ( ch < 0x80 ) { switch ( XMLCharacterProperties . fgAsciiCharData [ ch ] ) { case 0 : fCharacterCounter ++ ; ch = loadNextChar ( ) ; break ; case 1 : if ( ! fInCDSect ) { callCharDataHandler ( charDataOffset , fCurrentOffset , false ) ; fCharacterCounter ++ ; ch = loadNextChar ( ) ; return recognizeMarkup ( ch ) ; } fCharacterCounter ++ ; ch = loadNextChar ( ) ; break ; case 2 : if ( ! fInCDSect ) { callCharDataHandler ( charDataOffset , fCurrentOffset , false ) ; fCharacterCounter ++ ; ch = loadNextChar ( ) ; return recognizeReference ( ch ) ; } fCharacterCounter ++ ; ch = loadNextChar ( ) ; break ; case 3 : int endOffset = fCurrentOffset ; ch = loadNextChar ( ) ; if ( ch != ']' ) { fCharacterCounter ++ ; break ; } CharDataChunk dataChunk = fCurrentChunk ; int index = fCurrentIndex ; int offset = fCurrentOffset ; if ( loadNextChar ( ) != '>' ) { fCurrentChunk = dataChunk ; fCurrentIndex = index ; fCurrentOffset = offset ; fMostRecentData = dataChunk . toCharArray ( ) ; fMostRecentChar = ']' ; fCharacterCounter ++ ; break ; } loadNextChar ( ) ; callCharDataHandler ( charDataOffset , endOffset , false ) ; fCharacterCounter += 3 ; return XMLEntityHandler . CONTENT_RESULT_END_OF_CDSECT ; case 4 : if ( ch == 0x0A ) { fLinefeedCounter ++ ; fCharacterCounter = 1 ; ch = loadNextChar ( ) ; break ; } callCharDataHandler ( charDataOffset , fCurrentOffset , false ) ; if ( ch == 0 && atEOF ( fCurrentOffset + 1 ) ) { changeReaders ( ) ; return XMLEntityHandler . CONTENT_RESULT_INVALID_CHAR ; } return XMLEntityHandler . CONTENT_RESULT_INVALID_CHAR ; } } else { if ( ! skipMultiByteCharData ( ch ) ) { callCharDataHandler ( charDataOffset , fCurrentOffset , false ) ; return XMLEntityHandler . CONTENT_RESULT_INVALID_CHAR ; } ch = fMostRecentChar ; } } } private static final char [ ] cdata_string = { 'C' , 'D' , 'A' , 'T' , 'A' , '[' } ; private StringPool fStringPool = null ; private boolean fCallClearPreviousChunk = true ; private Vector fDeferredErrors = null ; private class DeferredError { int errorCode ; Object [ ] args ; int offset ; DeferredError ( int ec , Object [ ] a , int o ) { errorCode = ec ; args = a ; offset = o ; } } private int recognizeMarkup ( int ch ) throws Exception { switch ( ch ) { case 0 : return XMLEntityHandler . CONTENT_RESULT_MARKUP_END_OF_INPUT ; case '?' : fCharacterCounter ++ ; loadNextChar ( ) ; return XMLEntityHandler . CONTENT_RESULT_START_OF_PI ; case '!' : fCharacterCounter ++ ; ch = loadNextChar ( ) ; if ( ch == 0 ) { fCharacterCounter -- ; fCurrentOffset -- ; return XMLEntityHandler . CONTENT_RESULT_MARKUP_END_OF_INPUT ; } if ( ch == '-' ) { fCharacterCounter ++ ; ch = loadNextChar ( ) ; if ( ch == 0 ) { fCharacterCounter -= 2 ; fCurrentOffset -= 2 ; return XMLEntityHandler . CONTENT_RESULT_MARKUP_END_OF_INPUT ; } if ( ch == '-' ) { fCharacterCounter ++ ; loadNextChar ( ) ; return XMLEntityHandler . CONTENT_RESULT_START_OF_COMMENT ; } break ; } if ( ch == '[' ) { for ( int i = 0 ; i < 6 ; i ++ ) { fCharacterCounter ++ ; ch = loadNextChar ( ) ; if ( ch == 0 ) { fCharacterCounter -= ( 2 + i ) ; fCurrentOffset -= ( 2 + i ) ; return XMLEntityHandler . CONTENT_RESULT_MARKUP_END_OF_INPUT ; } if ( ch != cdata_string [ i ] ) { return XMLEntityHandler . CONTENT_RESULT_MARKUP_NOT_RECOGNIZED ; } } fCharacterCounter ++ ; loadNextChar ( ) ; return XMLEntityHandler . CONTENT_RESULT_START_OF_CDSECT ; } break ; case '/' : fCharacterCounter ++ ; loadNextChar ( ) ; return XMLEntityHandler . CONTENT_RESULT_START_OF_ETAG ; default : return XMLEntityHandler . CONTENT_RESULT_START_OF_ELEMENT ; } return XMLEntityHandler . CONTENT_RESULT_MARKUP_NOT_RECOGNIZED ; } private int recognizeReference ( int ch ) throws Exception { if ( ch == 0 ) { return XMLEntityHandler . CONTENT_RESULT_REFERENCE_END_OF_INPUT ; } if ( ch == '#' ) { fCharacterCounter ++ ; loadNextChar ( ) ; return XMLEntityHandler . CONTENT_RESULT_START_OF_CHARREF ; } else { return XMLEntityHandler . CONTENT_RESULT_START_OF_ENTITYREF ; } } private boolean skipMultiByteCharData ( int ch ) throws Exception { if ( ch < 0xD800 ) { loadNextChar ( ) ; return true ; } if ( ch > 0xFFFD ) return false ; if ( ch >= 0xDC00 && ch < 0xE000 ) return false ; if ( ch >= 0xD800 && ch < 0xDC00 ) { CharDataChunk savedChunk = fCurrentChunk ; int savedIndex = fCurrentIndex ; int savedOffset = fCurrentOffset ; ch = loadNextChar ( ) ; if ( ch < 0xDC00 || ch >= 0xE000 ) { fCurrentChunk = savedChunk ; fCurrentIndex = savedIndex ; fCurrentOffset = savedOffset ; fMostRecentData = savedChunk . toCharArray ( ) ; fMostRecentChar = fMostRecentData [ savedIndex ] & 0xFFFF ; return false ; } } loadNextChar ( ) ; return true ; } private int skipAsciiCharData ( ) throws Exception { int ch = fMostRecentChar ; while ( true ) { if ( ch >= 0x80 ) { return ch ; } if ( XMLCharacterProperties . fgAsciiCharData [ ch ] == 0 ) { fCharacterCounter ++ ; } else if ( ch == 0x0A ) { fLinefeedCounter ++ ; fCharacterCounter = 1 ; } else { return ch ; } ch = loadNextChar ( ) ; } } private void callCharDataHandler ( int offset , int endOffset , boolean isWhitespace ) throws Exception { int length = endOffset - offset ; if ( ! fSendCharDataAsCharArray ) { int stringIndex = addString ( offset , length ) ; if ( isWhitespace ) fCharDataHandler . processWhitespace ( stringIndex ) ; else fCharDataHandler . processCharacters ( stringIndex ) ; return ; } CharDataChunk dataChunk = fCurrentChunk . chunkFor ( offset ) ; int index = offset & CharDataChunk . CHUNK_MASK ; if ( index + length <= CharDataChunk . CHUNK_SIZE ) { if ( length != 0 ) { if ( isWhitespace ) fCharDataHandler . processWhitespace ( dataChunk . toCharArray ( ) , index , length ) ; else fCharDataHandler . processCharacters ( dataChunk . toCharArray ( ) , index , length ) ; } return ; } int count = length ; int nbytes = CharDataChunk . CHUNK_SIZE - index ; if ( isWhitespace ) fCharDataHandler . processWhitespace ( dataChunk . toCharArray ( ) , index , nbytes ) ; else fCharDataHandler . processCharacters ( dataChunk . toCharArray ( ) , index , nbytes ) ; count -= nbytes ; do { dataChunk = dataChunk . nextChunk ( ) ; if ( dataChunk == null ) { throw new RuntimeException ( new ImplementationMessages ( ) . createMessage ( null , ImplementationMessages . INT_DCN , 0 , null ) ) ; } nbytes = count <= CharDataChunk . CHUNK_SIZE ? count : CharDataChunk . CHUNK_SIZE ; if ( isWhitespace ) fCharDataHandler . processWhitespace ( dataChunk . toCharArray ( ) , 0 , nbytes ) ; else fCharDataHandler . processCharacters ( dataChunk . toCharArray ( ) , 0 , nbytes ) ; count -= nbytes ; } while ( count > 0 ) ; } private int slowLoadNextChar ( ) throws Exception { fCallClearPreviousChunk = true ; if ( fCurrentChunk . nextChunk ( ) != null ) { fCurrentChunk = fCurrentChunk . nextChunk ( ) ; fCurrentIndex = 0 ; fMostRecentData = fCurrentChunk . toCharArray ( ) ; return ( fMostRecentChar = fMostRecentData [ fCurrentIndex ] & 0xFFFF ) ; } else { fCurrentChunk = CharDataChunk . createChunk ( fStringPool , fCurrentChunk ) ; fCurrentIndex = 0 ; fFillIndex = 0 ; loadFirstChar ( ) ; return fMostRecentChar ; } } private int loadNextChar ( ) throws Exception { fCurrentOffset ++ ; if ( ++ fCurrentIndex == CharDataChunk . CHUNK_SIZE ) return slowLoadNextChar ( ) ; if ( fCurrentIndex < fFillIndex ) return ( fMostRecentChar = fMostRecentData [ fCurrentIndex ] & 0xFFFF ) ; return loadMoreChars ( ) ; } private void loadFirstChar ( ) throws Exception { fMostRecentData = fCurrentChunk . toCharArray ( ) ; if ( fMostRecentData == null ) { fMostRecentData = new char [ CharDataChunk . CHUNK_SIZE ] ; fCurrentChunk . setCharArray ( fMostRecentData ) ; } loadMoreChars ( ) ; } private boolean seenCR = false ; private int oweChar = - 1 ; private char [ ] inBuffer = new char [ 2 ] ; private int loadMoreChars ( ) throws Exception { if ( oweChar != - 1 ) { fMostRecentData [ fFillIndex ] = ( char ) oweChar ; fFillIndex ++ ; fLength ++ ; fMostRecentChar = oweChar ; oweChar = - 1 ; return fMostRecentChar ; } int result = - 1 ; try { while ( true ) { result = fCharacterStream . read ( inBuffer , 0 , 2 ) ; switch ( result ) { case - 1 : break ; case 0 : continue ; case 1 : result = inBuffer [ 0 ] ; if ( seenCR ) { seenCR = false ; if ( result == 0x0A ) continue ; } if ( result == 0x0D ) { seenCR = true ; result = 0x0A ; } fMostRecentChar = ( fMostRecentData [ fFillIndex ] = ( char ) result ) ; fFillIndex ++ ; fLength ++ ; return fMostRecentChar ; case 2 : result = inBuffer [ 0 ] ; boolean readchar2 = false ; if ( seenCR ) { seenCR = false ; if ( result == 0x0A ) { result = inBuffer [ 1 ] ; readchar2 = true ; } } if ( result == 0x0D ) { seenCR = true ; result = 0x0A ; } fMostRecentChar = ( fMostRecentData [ fFillIndex ] = ( char ) result ) ; fFillIndex ++ ; fLength ++ ; if ( ! readchar2 ) { result = inBuffer [ 1 ] ; if ( seenCR ) { seenCR = false ; if ( result == 0x0A ) return fMostRecentChar ; } if ( result == 0x0D ) { seenCR = true ; result = 0x0A ; } oweChar = result ; } return fMostRecentChar ; } break ; } } catch ( java . io . IOException ex ) { } try { fCharacterStream . close ( ) ; } catch ( java . io . IOException ex ) { } fCharacterStream = null ; fMostRecentChar = ( fMostRecentData [ fFillIndex ] = 0 ) ; return 0 ; } private boolean atEOF ( int offset ) { return ( offset > fLength ) ; } protected Reader fCharacterStream = null ; protected CharDataChunk fCurrentChunk = null ; protected int fCurrentIndex = 0 ; protected int fFillIndex = 0 ; protected char [ ] fMostRecentData = null ; protected int fMostRecentChar = 0 ; protected int fLength = 0 ; protected boolean fCalledCharPropInit = false ; } 	0	['34', '2', '0', '14', '74', '0', '1', '14', '21', '0.672727273', '2890', '1', '2', '0.179487179', '0.160839161', '1', '3', '83.55882353', '2', '1.0588', '0']
package org . apache . xml . serialize ; import java . util . Hashtable ; import org . w3c . dom . Document ; import org . w3c . dom . DocumentType ; import org . w3c . dom . Node ; import org . w3c . dom . html . HTMLDocument ; public class OutputFormat { public static class DTD { public static final String HTMLPublicId = "-//W3C//DTD HTML 4.0//EN" ; public static final String HTMLSystemId = "http://www.w3.org/TR/WD-html-in-xml/DTD/xhtml1-strict.dtd" ; public static final String XHTMLPublicId = "-//W3C//DTD XHTML 1.0 Strict//EN" ; public static final String XHTMLSystemId = "http://www.w3.org/TR/WD-html-in-xml/DTD/xhtml1-strict.dtd" ; } public static class Defaults { public static final int Indent = 4 ; public static final String Encoding = "UTF-8" ; public static final int LineWidth = 72 ; } private String _method ; private String _version ; private int _indent = 0 ; private String _encoding = Defaults . Encoding ; private EncodingInfo _encodingInfo = null ; private String _mediaType ; private String _doctypeSystem ; private String _doctypePublic ; private boolean _omitXmlDeclaration = false ; private boolean _omitDoctype = false ; private boolean _omitComments = false ; private boolean _stripComments = false ; private boolean _standalone = false ; private String [ ] _cdataElements ; private String [ ] _nonEscapingElements ; private String _lineSeparator = LineSeparator . Web ; private int _lineWidth = Defaults . LineWidth ; private boolean _preserve = false ; public OutputFormat ( ) { } public OutputFormat ( String method , String encoding , boolean indenting ) { setMethod ( method ) ; setEncoding ( encoding ) ; setIndenting ( indenting ) ; } public OutputFormat ( Document doc ) { setMethod ( whichMethod ( doc ) ) ; setDoctype ( whichDoctypePublic ( doc ) , whichDoctypeSystem ( doc ) ) ; setMediaType ( whichMediaType ( getMethod ( ) ) ) ; } public OutputFormat ( Document doc , String encoding , boolean indenting ) { this ( doc ) ; setEncoding ( encoding ) ; setIndenting ( indenting ) ; } public String getMethod ( ) { return _method ; } public void setMethod ( String method ) { _method = method ; } public String getVersion ( ) { return _version ; } public void setVersion ( String version ) { _version = version ; } public int getIndent ( ) { return _indent ; } public boolean getIndenting ( ) { return ( _indent > 0 ) ; } public void setIndent ( int indent ) { if ( indent < 0 ) _indent = 0 ; else _indent = indent ; } public void setIndenting ( boolean on ) { if ( on ) { _indent = Defaults . Indent ; _lineWidth = Defaults . LineWidth ; } else { _indent = 0 ; _lineWidth = 0 ; } } public String getEncoding ( ) { return _encoding ; } public void setEncoding ( String encoding ) { _encoding = encoding ; _encodingInfo = null ; } public void setEncoding ( EncodingInfo encInfo ) { _encoding = encInfo . getName ( ) ; _encodingInfo = encInfo ; } public EncodingInfo getEncodingInfo ( ) { if ( _encodingInfo == null ) _encodingInfo = Encodings . getEncodingInfo ( _encoding ) ; return _encodingInfo ; } public String getMediaType ( ) { return _mediaType ; } public void setMediaType ( String mediaType ) { _mediaType = mediaType ; } public void setDoctype ( String publicId , String systemId ) { _doctypePublic = publicId ; _doctypeSystem = systemId ; } public String getDoctypePublic ( ) { return _doctypePublic ; } public String getDoctypeSystem ( ) { return _doctypeSystem ; } public boolean getOmitComments ( ) { return _omitComments ; } public void setOmitComments ( boolean omit ) { _omitComments = omit ; } public boolean getOmitDocumentType ( ) { return _omitDoctype ; } public void setOmitDocumentType ( boolean omit ) { _omitDoctype = omit ; } public boolean getOmitXMLDeclaration ( ) { return _omitXmlDeclaration ; } public void setOmitXMLDeclaration ( boolean omit ) { _omitXmlDeclaration = omit ; } public boolean getStandalone ( ) { return _standalone ; } public void setStandalone ( boolean standalone ) { _standalone = standalone ; } public String [ ] getCDataElements ( ) { return _cdataElements ; } public boolean isCDataElement ( String tagName ) { int i ; if ( _cdataElements == null ) return false ; for ( i = 0 ; i < _cdataElements . length ; ++ i ) if ( _cdataElements [ i ] . equals ( tagName ) ) return true ; return false ; } public void setCDataElements ( String [ ] cdataElements ) { _cdataElements = cdataElements ; } public String [ ] getNonEscapingElements ( ) { return _nonEscapingElements ; } public boolean isNonEscapingElement ( String tagName ) { int i ; if ( _nonEscapingElements == null ) return false ; for ( i = 0 ; i < _nonEscapingElements . length ; ++ i ) if ( _nonEscapingElements [ i ] . equals ( tagName ) ) return true ; return false ; } public void setNonEscapingElements ( String [ ] nonEscapingElements ) { _nonEscapingElements = nonEscapingElements ; } public String getLineSeparator ( ) { return _lineSeparator ; } public void setLineSeparator ( String lineSeparator ) { if ( lineSeparator == null ) _lineSeparator = LineSeparator . Web ; else _lineSeparator = lineSeparator ; } public boolean getPreserveSpace ( ) { return _preserve ; } public void setPreserveSpace ( boolean preserve ) { _preserve = preserve ; } public int getLineWidth ( ) { return _lineWidth ; } public void setLineWidth ( int lineWidth ) { if ( lineWidth <= 0 ) _lineWidth = 0 ; else _lineWidth = lineWidth ; } public char getLastPrintable ( ) { if ( getEncoding ( ) != null && ( getEncoding ( ) . equalsIgnoreCase ( "ASCII" ) ) ) return 0xFF ; else return 0xFFFF ; } public static String whichMethod ( Document doc ) { Node node ; String value ; int i ; if ( doc instanceof HTMLDocument ) return Method . HTML ; node = doc . getFirstChild ( ) ; while ( node != null ) { if ( node . getNodeType ( ) == Node . ELEMENT_NODE ) { if ( node . getNodeName ( ) . equalsIgnoreCase ( "html" ) ) { return Method . HTML ; } else if ( node . getNodeName ( ) . equalsIgnoreCase ( "root" ) ) { return Method . FOP ; } else { return Method . XML ; } } else if ( node . getNodeType ( ) == Node . TEXT_NODE ) { value = node . getNodeValue ( ) ; for ( i = 0 ; i < value . length ( ) ; ++ i ) if ( value . charAt ( i ) != 0x20 && value . charAt ( i ) != 0x0A && value . charAt ( i ) != 0x09 && value . charAt ( i ) != 0x0D ) return Method . XML ; } node = node . getNextSibling ( ) ; } return Method . XML ; } public static String whichDoctypePublic ( Document doc ) { DocumentType doctype ; doctype = doc . getDoctype ( ) ; if ( doctype != null ) { try { return doctype . getPublicId ( ) ; } catch ( Error except ) { } } if ( doc instanceof HTMLDocument ) return DTD . XHTMLPublicId ; return null ; } public static String whichDoctypeSystem ( Document doc ) { DocumentType doctype ; doctype = doc . getDoctype ( ) ; if ( doctype != null ) { try { return doctype . getSystemId ( ) ; } catch ( Error except ) { } } if ( doc instanceof HTMLDocument ) return DTD . XHTMLSystemId ; return null ; } public static String whichMediaType ( String method ) { if ( method . equalsIgnoreCase ( Method . XML ) ) return "text/xml" ; if ( method . equalsIgnoreCase ( Method . HTML ) ) return "text/html" ; if ( method . equalsIgnoreCase ( Method . XHTML ) ) return "text/html" ; if ( method . equalsIgnoreCase ( Method . TEXT ) ) return "text/plain" ; if ( method . equalsIgnoreCase ( Method . FOP ) ) return "application/pdf" ; return null ; } } 	0	['46', '1', '0', '13', '61', '833', '11', '2', '46', '0.903703704', '579', '1', '1', '0', '0.220496894', '0', '0', '11.19565217', '12', '1.6522', '0']
package org . w3c . dom . html ; public interface HTMLFrameSetElement extends HTMLElement { public String getCols ( ) ; public void setCols ( String cols ) ; public String getRows ( ) ; public void setRows ( String rows ) ; } 	0	['4', '1', '0', '0', '4', '6', '0', '0', '4', '2', '4', '0', '0', '0', '0.75', '0', '0', '0', '1', '1', '0']
package org . w3c . dom . html ; public interface HTMLLIElement extends HTMLElement { public String getType ( ) ; public void setType ( String type ) ; public int getValue ( ) ; public void setValue ( int value ) ; } 	0	['4', '1', '0', '0', '4', '6', '0', '0', '4', '2', '4', '0', '0', '0', '0.5', '0', '0', '0', '1', '1', '0']
package org . apache . xerces . validators . dtd ; import org . apache . xerces . dom . DocumentImpl ; import org . apache . xerces . framework . XMLContentSpec ; import org . apache . xerces . framework . XMLDTDScanner ; import org . apache . xerces . readers . XMLEntityHandler ; import org . apache . xerces . utils . QName ; import org . apache . xerces . utils . StringPool ; import org . apache . xerces . validators . common . Grammar ; import org . apache . xerces . validators . common . XMLAttributeDecl ; import org . apache . xerces . validators . common . XMLElementDecl ; import org . apache . xerces . validators . datatype . DatatypeValidatorFactoryImpl ; import org . apache . xerces . validators . schema . XUtil ; import org . w3c . dom . Document ; import org . w3c . dom . Element ; import org . w3c . dom . ProcessingInstruction ; import org . w3c . dom . Text ; public class DTDGrammar extends Grammar implements XMLDTDScanner . EventHandler { private static final int CHUNK_SHIFT = 8 ; private static final int CHUNK_SIZE = ( 1 << CHUNK_SHIFT ) ; private static final int CHUNK_MASK = CHUNK_SIZE - 1 ; private static final int INITIAL_CHUNK_COUNT = ( 1 << ( 10 - CHUNK_SHIFT ) ) ; private StringPool fStringPool ; private XMLElementDecl fElementDecl = new XMLElementDecl ( ) ; private XMLAttributeDecl fAttributeDecl = new XMLAttributeDecl ( ) ; private XMLContentSpec fContentSpec = new XMLContentSpec ( ) ; private Document fGrammarDocument ; private Element fRootElement ; private QName fRootElementQName = new QName ( ) ; private Element fCurrentElement ; private int fElementDeclIsExternal [ ] [ ] = new int [ INITIAL_CHUNK_COUNT ] [ ] ; private int fElementDeclMap [ ] [ ] = new int [ INITIAL_CHUNK_COUNT ] [ ] ; private int fAttributeDeclIsExternal [ ] [ ] = new int [ INITIAL_CHUNK_COUNT ] [ ] ; private int fAttributeDeclMap [ ] [ ] = new int [ INITIAL_CHUNK_COUNT ] [ ] ; private int fContentSpecMap [ ] [ ] = new int [ INITIAL_CHUNK_COUNT ] [ ] ; private QName fQName = new QName ( ) ; public DTDGrammar ( StringPool stringPool ) { reset ( stringPool ) ; } public void reset ( StringPool stringPool ) { fStringPool = stringPool ; } public void callStartDTD ( ) throws Exception { setGrammarDocument ( null ) ; fGrammarDocument = new DocumentImpl ( ) ; fRootElement = fGrammarDocument . createElement ( "dtd" ) ; fCurrentElement = fRootElement ; } public void callEndDTD ( ) throws Exception { setGrammarDocument ( fGrammarDocument ) ; } public void callTextDecl ( int version , int encoding ) throws Exception { Element textDecl = fGrammarDocument . createElement ( "textDecl" ) ; textDecl . setAttribute ( "version" , fStringPool . toString ( version ) ) ; textDecl . setAttribute ( "encoding" , fStringPool . toString ( encoding ) ) ; fCurrentElement . appendChild ( textDecl ) ; } public void doctypeDecl ( QName rootElement , int publicId , int systemId ) throws Exception { Element doctypeDecl = fGrammarDocument . createElement ( "doctypeDecl" ) ; doctypeDecl . setAttribute ( "name" , fStringPool . toString ( rootElement . rawname ) ) ; if ( rootElement . uri != - 1 ) { doctypeDecl . setAttribute ( "xmlns:" + fStringPool . toString ( rootElement . prefix ) , fStringPool . toString ( rootElement . uri ) ) ; } doctypeDecl . setAttribute ( "publicId" , fStringPool . toString ( publicId ) ) ; doctypeDecl . setAttribute ( "systemId" , fStringPool . toString ( systemId ) ) ; fCurrentElement . appendChild ( doctypeDecl ) ; fRootElementQName . setValues ( rootElement ) ; } public void startReadingFromExternalSubset ( int publicId , int systemId ) throws Exception { Element externalSubset = fGrammarDocument . createElement ( "external" ) ; externalSubset . setAttribute ( "publicId" , fStringPool . toString ( publicId ) ) ; externalSubset . setAttribute ( "systemId" , fStringPool . toString ( systemId ) ) ; fCurrentElement . appendChild ( externalSubset ) ; fCurrentElement = externalSubset ; } public void stopReadingFromExternalSubset ( ) throws Exception { fCurrentElement = ( Element ) fCurrentElement . getParentNode ( ) ; } public int addElementDecl ( QName elementDecl ) throws Exception { Element elementDeclElement = fGrammarDocument . createElement ( "elementDecl" ) ; elementDeclElement . setAttribute ( "name" , fStringPool . toString ( elementDecl . localpart ) ) ; if ( elementDecl . uri != - 1 ) { elementDeclElement . setAttribute ( "xmlns:" + fStringPool . toString ( elementDecl . prefix ) , fStringPool . toString ( elementDecl . uri ) ) ; } fCurrentElement . appendChild ( elementDeclElement ) ; int elementDeclIndex = createElementDecl ( ) ; fElementDecl . clear ( ) ; fElementDecl . name . setValues ( elementDecl ) ; setElementDecl ( elementDeclIndex , fElementDecl ) ; return elementDeclIndex ; } public int addElementDecl ( QName elementDecl , int contentSpecType , int contentSpec , boolean isExternal ) throws Exception { Element elementDeclElement = fGrammarDocument . createElement ( "elementDecl" ) ; elementDeclElement . setAttribute ( "name" , fStringPool . toString ( elementDecl . localpart ) ) ; if ( elementDecl . uri != - 1 ) { elementDeclElement . setAttribute ( "xmlns:" + fStringPool . toString ( elementDecl . prefix ) , fStringPool . toString ( elementDecl . uri ) ) ; } elementDeclElement . setAttribute ( "type" , fStringPool . toString ( contentSpecType ) ) ; fCurrentElement . appendChild ( elementDeclElement ) ; int elementDeclIndex = createElementDecl ( ) ; fElementDecl . clear ( ) ; fElementDecl . name . setValues ( elementDecl ) ; fElementDecl . type = contentSpecType ; fElementDecl . contentSpecIndex = contentSpec ; setElementDecl ( elementDeclIndex , fElementDecl ) ; int chunk = elementDeclIndex > > CHUNK_SHIFT ; int index = elementDeclIndex & CHUNK_MASK ; ensureElementDeclCapacity ( chunk ) ; fElementDeclIsExternal [ chunk ] [ index ] = isExternal ? 1 : 0 ; return elementDeclIndex ; } protected void putElementNameMapping ( QName name , int scope , int elementDeclIndex ) { fQName . uri = - 1 ; fQName . localpart = name . rawname ; super . putElementNameMapping ( fQName , scope , elementDeclIndex ) ; } public int getElementDeclIndex ( QName element , int scopeIndex ) { return super . getElementDeclIndex ( element . rawname , - 1 ) ; } public void setElementDeclDTD ( int elementDeclIndex , XMLElementDecl elementDecl ) { super . setElementDecl ( elementDeclIndex , elementDecl ) ; } private XMLContentSpec fTempContentSpec = new XMLContentSpec ( ) ; public void setElementDeclIsExternal ( int elementDeclIndex , boolean isExternal ) { int chunk = elementDeclIndex > > CHUNK_SHIFT ; int index = elementDeclIndex & CHUNK_MASK ; ensureElementDeclCapacity ( chunk ) ; fElementDeclIsExternal [ chunk ] [ index ] = isExternal ? 1 : 0 ; } public boolean getElementDeclIsExternal ( int elementDeclIndex ) { if ( elementDeclIndex < 0 ) { return false ; } int chunk = elementDeclIndex > > CHUNK_SHIFT ; int index = elementDeclIndex & CHUNK_MASK ; return ( fElementDeclIsExternal [ chunk ] [ index ] != 0 ) ; } public boolean getAttributeDeclIsExternal ( int attributeDeclIndex ) { if ( attributeDeclIndex < 0 ) { return false ; } int chunk = attributeDeclIndex > > CHUNK_SHIFT ; int index = attributeDeclIndex & CHUNK_MASK ; return ( fAttributeDeclIsExternal [ chunk ] [ index ] != 0 ) ; } public boolean getRootElementQName ( QName root ) { if ( fRootElementQName . rawname == - 1 ) { return false ; } root . setValues ( fRootElementQName ) ; return true ; } public int addAttDef ( QName elementDecl , QName attributeDecl , int attType , boolean attList , int enumeration , int attDefaultType , int attDefaultValue , boolean isExternal ) throws Exception { Element attributeDeclElement = fGrammarDocument . createElement ( "attributeDecl" ) ; attributeDeclElement . setAttribute ( "element" , fStringPool . toString ( elementDecl . localpart ) ) ; attributeDeclElement . setAttribute ( "name" , fStringPool . toString ( attributeDecl . localpart ) ) ; if ( attributeDecl . uri != - 1 ) { attributeDeclElement . setAttribute ( "xmlns:" + fStringPool . toString ( attributeDecl . prefix ) , fStringPool . toString ( attributeDecl . uri ) ) ; } attributeDeclElement . setAttribute ( "type" , fStringPool . toString ( attType ) ) ; attributeDeclElement . setAttribute ( "defaultType" , fStringPool . toString ( attDefaultType ) ) ; attributeDeclElement . setAttribute ( "defaultValue" , fStringPool . toString ( attDefaultValue ) ) ; fCurrentElement . appendChild ( attributeDeclElement ) ; int attributeDeclIndex = createAttributeDecl ( ) ; String attTypeString = "" ; switch ( attType ) { case XMLAttributeDecl . TYPE_CDATA : attTypeString = "string" ; case XMLAttributeDecl . TYPE_ENTITY : attTypeString = "ENTITY" ; ; case XMLAttributeDecl . TYPE_ENUMERATION : attTypeString = "ENUMERATION" ; ; case XMLAttributeDecl . TYPE_ID : attTypeString = "ID" ; ; case XMLAttributeDecl . TYPE_IDREF : attTypeString = "IDREF" ; ; case XMLAttributeDecl . TYPE_NMTOKEN : attTypeString = "NMTOKEN" ; ; case XMLAttributeDecl . TYPE_NOTATION : attTypeString = "NOTATION" ; ; default : ; } fAttributeDecl . clear ( ) ; fAttributeDecl . name . setValues ( attributeDecl ) ; fAttributeDecl . type = attType ; fAttributeDecl . list = attList ; fAttributeDecl . enumeration = enumeration ; fAttributeDecl . defaultType = attDefaultType ; fAttributeDecl . defaultValue = fStringPool . toString ( attDefaultValue ) ; int elementDeclIndex = getElementDeclIndex ( elementDecl , - 1 ) ; setAttributeDecl ( elementDeclIndex , attributeDeclIndex , fAttributeDecl ) ; int chunk = attributeDeclIndex > > CHUNK_SHIFT ; int index = attributeDeclIndex & CHUNK_MASK ; ensureAttributeDeclCapacity ( chunk ) ; fAttributeDeclIsExternal [ chunk ] [ index ] = isExternal ? 1 : 0 ; return attributeDeclIndex ; } public int addUniqueLeafNode ( int nameIndex ) throws Exception { int contentSpecIndex = createContentSpec ( ) ; fContentSpec . setValues ( XMLContentSpec . CONTENTSPECNODE_LEAF , nameIndex , - 1 ) ; setContentSpec ( contentSpecIndex , fContentSpec ) ; return contentSpecIndex ; } public int addContentSpecNode ( int nodeType , int nodeValue ) throws Exception { int contentSpecIndex = createContentSpec ( ) ; fContentSpec . setValues ( nodeType , nodeValue , - 1 ) ; setContentSpec ( contentSpecIndex , fContentSpec ) ; return contentSpecIndex ; } public int addContentSpecNode ( int nodeType , int leftNodeIndex , int rightNodeIndex ) throws Exception { int contentSpecIndex = createContentSpec ( ) ; fContentSpec . setValues ( nodeType , leftNodeIndex , rightNodeIndex ) ; setContentSpec ( contentSpecIndex , fContentSpec ) ; return contentSpecIndex ; } public String getContentSpecNodeAsString ( int nodeIndex ) throws Exception { return XMLContentSpec . toString ( this , fStringPool , nodeIndex ) ; } public boolean startEntityDecl ( boolean isPE , int entityName ) throws Exception { Element entityDecl = fGrammarDocument . createElement ( "entityDecl" ) ; entityDecl . setAttribute ( "name" , fStringPool . toString ( entityName ) ) ; entityDecl . setAttribute ( "parameter" , isPE ? "true" : "false" ) ; fCurrentElement . appendChild ( entityDecl ) ; fCurrentElement = entityDecl ; return true ; } public void endEntityDecl ( ) throws Exception { fCurrentElement = ( Element ) fCurrentElement . getParentNode ( ) ; } public int addInternalPEDecl ( int name , int value ) throws Exception { Element internalPEDecl = fGrammarDocument . createElement ( "internalPEDecl" ) ; internalPEDecl . setAttribute ( "name" , fStringPool . toString ( name ) ) ; internalPEDecl . setAttribute ( "value" , fStringPool . toString ( value ) ) ; fCurrentElement . appendChild ( internalPEDecl ) ; int peDeclIndex = - 1 ; return peDeclIndex ; } public int addExternalPEDecl ( int name , int publicId , int systemId ) throws Exception { Element externalPEDecl = fGrammarDocument . createElement ( "externalPEDecl" ) ; externalPEDecl . setAttribute ( "name" , fStringPool . toString ( name ) ) ; externalPEDecl . setAttribute ( "publicId" , fStringPool . toString ( publicId ) ) ; externalPEDecl . setAttribute ( "systemId" , fStringPool . toString ( systemId ) ) ; fCurrentElement . appendChild ( externalPEDecl ) ; int peDeclIndex = - 1 ; return peDeclIndex ; } public int addInternalEntityDecl ( int name , int value ) throws Exception { Element internalEntityDecl = fGrammarDocument . createElement ( "internalEntityDecl" ) ; internalEntityDecl . setAttribute ( "name" , fStringPool . toString ( name ) ) ; internalEntityDecl . setAttribute ( "value" , fStringPool . toString ( value ) ) ; fCurrentElement . appendChild ( internalEntityDecl ) ; int internalEntityDeclIndex = - 1 ; return internalEntityDeclIndex ; } public int addExternalEntityDecl ( int name , int publicId , int systemId ) throws Exception { Element externalEntityDecl = fGrammarDocument . createElement ( "externalEntityDecl" ) ; externalEntityDecl . setAttribute ( "name" , fStringPool . toString ( name ) ) ; externalEntityDecl . setAttribute ( "publicId" , fStringPool . toString ( publicId ) ) ; externalEntityDecl . setAttribute ( "systemId" , fStringPool . toString ( systemId ) ) ; fCurrentElement . appendChild ( externalEntityDecl ) ; int externalEntityDeclIndex = - 1 ; return externalEntityDeclIndex ; } public int addUnparsedEntityDecl ( int name , int publicId , int systemId , int notationName ) throws Exception { Element unparsedEntityDecl = fGrammarDocument . createElement ( "unparsedEntityDecl" ) ; unparsedEntityDecl . setAttribute ( "name" , fStringPool . toString ( name ) ) ; unparsedEntityDecl . setAttribute ( "publicId" , fStringPool . toString ( publicId ) ) ; unparsedEntityDecl . setAttribute ( "systemId" , fStringPool . toString ( systemId ) ) ; unparsedEntityDecl . setAttribute ( "notation" , fStringPool . toString ( notationName ) ) ; fCurrentElement . appendChild ( unparsedEntityDecl ) ; int unparsedEntityDeclIndex = - 1 ; return unparsedEntityDeclIndex ; } public int startEnumeration ( ) throws Exception { Element enumeration = fGrammarDocument . createElement ( "enumeration" ) ; fCurrentElement . appendChild ( enumeration ) ; fCurrentElement = enumeration ; int enumIndex = fStringPool . startStringList ( ) ; return enumIndex ; } public void addNameToEnumeration ( int enumIndex , int elementType , int attrName , int nameIndex , boolean isNotationType ) throws Exception { Element literal = fGrammarDocument . createElement ( "literal" ) ; literal . setAttribute ( "element" , fStringPool . toString ( elementType ) ) ; literal . setAttribute ( "attribute" , fStringPool . toString ( attrName ) ) ; literal . setAttribute ( "name" , fStringPool . toString ( nameIndex ) ) ; literal . setAttribute ( "notation" , isNotationType ? "true" : "false" ) ; fCurrentElement . appendChild ( literal ) ; fStringPool . addStringToList ( enumIndex , nameIndex ) ; } public void endEnumeration ( int enumIndex ) throws Exception { fCurrentElement = ( Element ) fCurrentElement . getParentNode ( ) ; fStringPool . finishStringList ( enumIndex ) ; } public int addNotationDecl ( int notationName , int publicId , int systemId ) throws Exception { Element notationDecl = fGrammarDocument . createElement ( "notationDecl" ) ; notationDecl . setAttribute ( "name" , fStringPool . toString ( notationName ) ) ; notationDecl . setAttribute ( "publicId" , fStringPool . toString ( publicId ) ) ; notationDecl . setAttribute ( "systemId" , fStringPool . toString ( systemId ) ) ; fCurrentElement . appendChild ( notationDecl ) ; int notationDeclIndex = - 1 ; return notationDeclIndex ; } public void callComment ( int data ) throws Exception { } public void callProcessingInstruction ( int piTarget , int piData ) throws Exception { ProcessingInstruction pi = fGrammarDocument . createProcessingInstruction ( fStringPool . toString ( piTarget ) , fStringPool . toString ( piData ) ) ; fCurrentElement . appendChild ( pi ) ; } public void internalSubset ( int internalSubset ) throws Exception { } protected boolean isDTD ( ) { return true ; } private boolean ensureElementDeclCapacity ( int chunk ) { try { return fElementDeclMap [ chunk ] [ 0 ] == 0 ; } catch ( ArrayIndexOutOfBoundsException ex ) { fElementDeclMap = resize ( fElementDeclMap , fElementDeclMap . length * 2 ) ; fElementDeclIsExternal = resize ( fElementDeclIsExternal , fElementDeclIsExternal . length * 2 ) ; } catch ( NullPointerException ex ) { } fElementDeclMap [ chunk ] = new int [ CHUNK_SIZE ] ; fElementDeclIsExternal [ chunk ] = new int [ CHUNK_SIZE ] ; return true ; } private boolean ensureAttributeDeclCapacity ( int chunk ) { try { return fAttributeDeclMap [ chunk ] [ 0 ] == 0 ; } catch ( ArrayIndexOutOfBoundsException ex ) { fAttributeDeclMap = resize ( fAttributeDeclMap , fAttributeDeclMap . length * 2 ) ; fAttributeDeclIsExternal = resize ( fAttributeDeclIsExternal , fAttributeDeclIsExternal . length * 2 ) ; } catch ( NullPointerException ex ) { } fAttributeDeclMap [ chunk ] = new int [ CHUNK_SIZE ] ; fAttributeDeclIsExternal [ chunk ] = new int [ CHUNK_SIZE ] ; return true ; } private boolean ensureContentSpecCapacity ( int chunk ) { try { return fContentSpecMap [ chunk ] [ 0 ] == 0 ; } catch ( ArrayIndexOutOfBoundsException ex ) { fContentSpecMap = resize ( fContentSpecMap , fContentSpecMap . length * 2 ) ; } catch ( NullPointerException ex ) { } fContentSpecMap [ chunk ] = new int [ CHUNK_SIZE ] ; return true ; } private int [ ] [ ] resize ( int array [ ] [ ] , int newsize ) { int newarray [ ] [ ] = new int [ newsize ] [ ] ; System . arraycopy ( array , 0 , newarray , 0 , array . length ) ; return newarray ; } } 	0	['41', '2', '0', '11', '75', '280', '2', '9', '35', '0.903947368', '1225', '1', '10', '0.487179487', '0.306620209', '1', '7', '28.41463415', '3', '1.1951', '0']
package javax . xml . parsers ; import java . io . File ; import java . io . InputStream ; import java . io . IOException ; import java . io . FileInputStream ; import java . util . Locale ; import java . util . Properties ; import java . io . BufferedReader ; import java . io . InputStreamReader ; import org . xml . sax . Parser ; import org . xml . sax . XMLReader ; import org . xml . sax . HandlerBase ; import org . xml . sax . helpers . DefaultHandler ; import org . xml . sax . InputSource ; import org . xml . sax . SAXException ; import org . xml . sax . SAXNotRecognizedException ; import org . xml . sax . SAXNotSupportedException ; public abstract class SAXParser { protected SAXParser ( ) { } public void parse ( InputStream is , HandlerBase hb ) throws SAXException , IOException { if ( is == null ) { throw new IllegalArgumentException ( "InputStream cannot be null" ) ; } InputSource input = new InputSource ( is ) ; this . parse ( input , hb ) ; } public void parse ( InputStream is , HandlerBase hb , String systemId ) throws SAXException , IOException { if ( is == null ) { throw new IllegalArgumentException ( "InputStream cannot be null" ) ; } InputSource input = new InputSource ( is ) ; input . setSystemId ( systemId ) ; this . parse ( input , hb ) ; } public void parse ( InputStream is , DefaultHandler dh ) throws SAXException , IOException { if ( is == null ) { throw new IllegalArgumentException ( "InputStream cannot be null" ) ; } InputSource input = new InputSource ( is ) ; this . parse ( input , dh ) ; } public void parse ( InputStream is , DefaultHandler dh , String systemId ) throws SAXException , IOException { if ( is == null ) { throw new IllegalArgumentException ( "InputStream cannot be null" ) ; } InputSource input = new InputSource ( is ) ; input . setSystemId ( systemId ) ; this . parse ( input , dh ) ; } public void parse ( String uri , HandlerBase hb ) throws SAXException , IOException { if ( uri == null ) { throw new IllegalArgumentException ( "uri cannot be null" ) ; } InputSource input = new InputSource ( uri ) ; this . parse ( input , hb ) ; } public void parse ( String uri , DefaultHandler dh ) throws SAXException , IOException { if ( uri == null ) { throw new IllegalArgumentException ( "uri cannot be null" ) ; } InputSource input = new InputSource ( uri ) ; this . parse ( input , dh ) ; } public void parse ( File f , HandlerBase hb ) throws SAXException , IOException { if ( f == null ) { throw new IllegalArgumentException ( "File cannot be null" ) ; } String uri = "file:" + f . getAbsolutePath ( ) ; if ( File . separatorChar == '\\' ) { uri = uri . replace ( '\\' , '/' ) ; } InputSource input = new InputSource ( uri ) ; this . parse ( input , hb ) ; } public void parse ( File f , DefaultHandler dh ) throws SAXException , IOException { if ( f == null ) { throw new IllegalArgumentException ( "File cannot be null" ) ; } String uri = "file:" + f . getAbsolutePath ( ) ; if ( File . separatorChar == '\\' ) { uri = uri . replace ( '\\' , '/' ) ; } InputSource input = new InputSource ( uri ) ; this . parse ( input , dh ) ; } public void parse ( InputSource is , HandlerBase hb ) throws SAXException , IOException { if ( is == null ) { throw new IllegalArgumentException ( "InputSource cannot be null" ) ; } Parser parser = this . getParser ( ) ; if ( hb != null ) { parser . setDocumentHandler ( hb ) ; parser . setEntityResolver ( hb ) ; parser . setErrorHandler ( hb ) ; parser . setDTDHandler ( hb ) ; } parser . parse ( is ) ; } public void parse ( InputSource is , DefaultHandler dh ) throws SAXException , IOException { if ( is == null ) { throw new IllegalArgumentException ( "InputSource cannot be null" ) ; } XMLReader reader = this . getXMLReader ( ) ; if ( dh != null ) { reader . setContentHandler ( dh ) ; reader . setEntityResolver ( dh ) ; reader . setErrorHandler ( dh ) ; reader . setDTDHandler ( dh ) ; } reader . parse ( is ) ; } public abstract org . xml . sax . Parser getParser ( ) throws SAXException ; public abstract org . xml . sax . XMLReader getXMLReader ( ) throws SAXException ; public abstract boolean isNamespaceAware ( ) ; public abstract boolean isValidating ( ) ; public abstract void setProperty ( String name , Object value ) throws SAXNotRecognizedException , SAXNotSupportedException ; public abstract Object getProperty ( String name ) throws SAXNotRecognizedException , SAXNotSupportedException ; } 	0	['17', '1', '1', '0', '37', '136', '0', '0', '16', '2', '254', '0', '0', '0', '0.308823529', '0', '0', '13.94117647', '1', '0.9412', '0']
package org . apache . wml ; public interface WMLOneventElement extends WMLElement { public void setType ( String newValue ) ; public String getType ( ) ; } 	0	['2', '1', '0', '2', '2', '1', '1', '1', '2', '2', '2', '0', '0', '0', '0.75', '0', '0', '0', '1', '1', '0']
package org . w3c . dom . html ; public interface HTMLHtmlElement extends HTMLElement { public String getVersion ( ) ; public void setVersion ( String version ) ; } 	0	['2', '1', '0', '0', '2', '1', '0', '0', '2', '2', '2', '0', '0', '0', '0.75', '0', '0', '0', '1', '1', '0']
package org . apache . wml ; public interface WMLFieldsetElement extends WMLElement { public void setTitle ( String newValue ) ; public String getTitle ( ) ; public void setXmlLang ( String newValue ) ; public String getXmlLang ( ) ; } 	0	['4', '1', '0', '2', '4', '6', '1', '1', '4', '2', '4', '0', '0', '0', '0.75', '0', '0', '0', '1', '1', '0']
package org . apache . xerces . dom ; import org . w3c . dom . * ; public class DocumentFragmentImpl extends ParentNode implements DocumentFragment { static final long serialVersionUID = - 7596449967279236746L ; public DocumentFragmentImpl ( DocumentImpl ownerDoc ) { super ( ownerDoc ) ; } public DocumentFragmentImpl ( ) { } public short getNodeType ( ) { return Node . DOCUMENT_FRAGMENT_NODE ; } public String getNodeName ( ) { return "#document-fragment" ; } } 	0	['4', '4', '0', '2', '6', '6', '1', '2', '4', '1.333333333', '16', '0', '0', '0.975308642', '0.625', '2', '5', '2.75', '1', '0.5', '0']
package org . apache . xerces . validators . common ; public abstract class CMNode { CMNode ( int type ) throws CMException { fType = type ; } abstract boolean isNullable ( ) throws CMException ; final int type ( ) { return fType ; } final CMStateSet firstPos ( ) throws CMException { if ( fFirstPos == null ) { fFirstPos = new CMStateSet ( fMaxStates ) ; calcFirstPos ( fFirstPos ) ; } return fFirstPos ; } final CMStateSet lastPos ( ) throws CMException { if ( fLastPos == null ) { fLastPos = new CMStateSet ( fMaxStates ) ; calcLastPos ( fLastPos ) ; } return fLastPos ; } final void setFollowPos ( CMStateSet setToAdopt ) { fFollowPos = setToAdopt ; } final void setMaxStates ( int maxStates ) { fMaxStates = maxStates ; } protected abstract void calcFirstPos ( CMStateSet toSet ) throws CMException ; protected abstract void calcLastPos ( CMStateSet toSet ) throws CMException ; private int fType ; private CMStateSet fFirstPos = null ; private CMStateSet fFollowPos = null ; private CMStateSet fLastPos = null ; private int fMaxStates = - 1 ; } ; 	0	['9', '1', '4', '8', '11', '20', '6', '2', '0', '0.825', '77', '1', '3', '0', '0.518518519', '0', '0', '7', '1', '0.8889', '0']
package org . apache . xerces . validators . datatype ; import java . util . Hashtable ; import java . util . Locale ; public interface DatatypeValidator { public static final int FACET_LENGTH = 1 ; public static final int FACET_MINLENGTH = 1 << 1 ; public static final int FACET_MAXLENGTH = 1 << 2 ; public static final int FACET_PATTERN = 1 << 3 ; public static final int FACET_ENUMERATION = 1 << 4 ; public static final int FACET_MAXINCLUSIVE = 1 << 5 ; public static final int FACET_MAXEXCLUSIVE = 1 << 6 ; public static final int FACET_MININCLUSIVE = 1 << 7 ; public static final int FACET_MINEXCLUSIVE = 1 << 8 ; public static final int FACET_PRECISSION = 1 << 9 ; public static final int FACET_SCALE = 1 << 10 ; public static final int FACET_ENCODING = 1 << 11 ; public static final int FACET_DURATION = 1 << 12 ; public static final int FACET_PERIOD = 1 << 13 ; public Object validate ( String content , Object state ) throws InvalidDatatypeValueException ; public Hashtable getFacets ( ) ; public int compare ( String value1 , String value2 ) ; } 	0	['3', '1', '0', '28', '3', '3', '27', '1', '3', '1.5', '17', '0', '0', '0', '0.666666667', '0', '0', '0', '1', '1', '0']
package org . w3c . dom . events ; import org . w3c . dom . DOMException ; public interface DocumentEvent { public Event createEvent ( String eventType ) throws DOMException ; } 	0	['1', '1', '0', '0', '1', '0', '0', '0', '1', '2', '1', '0', '0', '0', '1', '0', '0', '0', '1', '1', '0']
package org . apache . html . dom ; import org . w3c . dom . * ; import org . w3c . dom . html . * ; public class HTMLTitleElementImpl extends HTMLElementImpl implements HTMLTitleElement { public String getText ( ) { Node child ; String text ; child = getFirstChild ( ) ; text = "" ; while ( child != null ) { if ( child instanceof Text ) text = text + ( ( Text ) child ) . getData ( ) ; child = child . getNextSibling ( ) ; } return text ; } public void setText ( String text ) { Node child ; Node next ; child = getFirstChild ( ) ; while ( child != null ) { next = child . getNextSibling ( ) ; removeChild ( child ) ; child = next ; } insertBefore ( getOwnerDocument ( ) . createTextNode ( text ) , getFirstChild ( ) ) ; } public HTMLTitleElementImpl ( HTMLDocumentImpl owner , String name ) { super ( owner , name ) ; } } 	0	['3', '4', '0', '2', '14', '3', '1', '2', '3', '2', '60', '0', '0', '0.979166667', '0.666666667', '0', '0', '19', '3', '1.6667', '0']
package org . apache . wml . dom ; import org . apache . wml . * ; public class WMLSmallElementImpl extends WMLElementImpl implements WMLSmallElement { public WMLSmallElementImpl ( WMLDocumentImpl owner , String tagName ) { super ( owner , tagName ) ; } public void setClassName ( String newValue ) { setAttribute ( "class" , newValue ) ; } public String getClassName ( ) { return getAttribute ( "class" ) ; } public void setXmlLang ( String newValue ) { setAttribute ( "xml:lang" , newValue ) ; } public String getXmlLang ( ) { return getAttribute ( "xml:lang" ) ; } public void setId ( String newValue ) { setAttribute ( "id" , newValue ) ; } public String getId ( ) { return getAttribute ( "id" ) ; } } 	0	['7', '4', '0', '3', '10', '21', '0', '3', '7', '2', '39', '0', '0', '0.931818182', '0.571428571', '1', '6', '4.571428571', '1', '0.8571', '0']
package org . apache . html . dom ; import org . w3c . dom . * ; import org . w3c . dom . html . * ; public class HTMLButtonElementImpl extends HTMLElementImpl implements HTMLButtonElement , HTMLFormControl { public String getAccessKey ( ) { String accessKey ; accessKey = getAttribute ( "accesskey" ) ; if ( accessKey != null && accessKey . length ( ) > 1 ) accessKey = accessKey . substring ( 0 , 1 ) ; return accessKey ; } public void setAccessKey ( String accessKey ) { if ( accessKey != null && accessKey . length ( ) > 1 ) accessKey = accessKey . substring ( 0 , 1 ) ; setAttribute ( "accesskey" , accessKey ) ; } public boolean getDisabled ( ) { return getBinary ( "disabled" ) ; } public void setDisabled ( boolean disabled ) { setAttribute ( "disabled" , disabled ) ; } public String getName ( ) { return getAttribute ( "name" ) ; } public void setName ( String name ) { setAttribute ( "name" , name ) ; } public int getTabIndex ( ) { try { return Integer . parseInt ( getAttribute ( "tabindex" ) ) ; } catch ( NumberFormatException except ) { return 0 ; } } public void setTabIndex ( int tabIndex ) { setAttribute ( "tabindex" , String . valueOf ( tabIndex ) ) ; } public String getType ( ) { return capitalize ( getAttribute ( "type" ) ) ; } public String getValue ( ) { return getAttribute ( "value" ) ; } public void setValue ( String value ) { setAttribute ( "value" , value ) ; } public HTMLButtonElementImpl ( HTMLDocumentImpl owner , String name ) { super ( owner , name ) ; } } 	0	['12', '4', '0', '3', '22', '66', '0', '3', '12', '2', '97', '0', '0', '0.895238095', '0.316666667', '1', '1', '7.083333333', '3', '1.25', '0']
package org . apache . xerces . utils . regex ; import java . text . CharacterIterator ; public final class REUtil { private REUtil ( ) { } static final int composeFromSurrogates ( int high , int low ) { return 0x10000 + ( ( high - 0xd800 ) << 10 ) + low - 0xdc00 ; } static final boolean isLowSurrogate ( int ch ) { return ( ch & 0xfc00 ) == 0xdc00 ; } static final boolean isHighSurrogate ( int ch ) { return ( ch & 0xfc00 ) == 0xd800 ; } static final String decomposeToSurrogates ( int ch ) { char [ ] chs = new char [ 2 ] ; ch -= 0x10000 ; chs [ 0 ] = ( char ) ( ( ch > > 10 ) + 0xd800 ) ; chs [ 1 ] = ( char ) ( ( ch & 0x3ff ) + 0xdc00 ) ; return new String ( chs ) ; } static final String substring ( CharacterIterator iterator , int begin , int end ) { char [ ] src = new char [ end - begin ] ; for ( int i = 0 ; i < src . length ; i ++ ) src [ i ] = iterator . setIndex ( i + begin ) ; return new String ( src ) ; } static final int getOptionValue ( int ch ) { int ret = 0 ; switch ( ch ) { case 'i' : ret = RegularExpression . IGNORE_CASE ; break ; case 'm' : ret = RegularExpression . MULTIPLE_LINES ; break ; case 's' : ret = RegularExpression . SINGLE_LINE ; break ; case 'x' : ret = RegularExpression . EXTENDED_COMMENT ; break ; case 'u' : ret = RegularExpression . USE_UNICODE_CATEGORY ; break ; case 'w' : ret = RegularExpression . UNICODE_WORD_BOUNDARY ; break ; case 'F' : ret = RegularExpression . PROHIBIT_FIXED_STRING_OPTIMIZATION ; break ; case 'H' : ret = RegularExpression . PROHIBIT_HEAD_CHARACTER_OPTIMIZATION ; break ; case 'X' : ret = RegularExpression . XMLSCHEMA_MODE ; break ; case ',' : ret = RegularExpression . SPECIAL_COMMA ; break ; default : } return ret ; } static final int parseOptions ( String opts ) throws ParseException { if ( opts == null ) return 0 ; int options = 0 ; for ( int i = 0 ; i < opts . length ( ) ; i ++ ) { int v = getOptionValue ( opts . charAt ( i ) ) ; if ( v == 0 ) throw new ParseException ( "Unknown Option: " + opts . substring ( i ) , - 1 ) ; options |= v ; } return options ; } static final String createOptionString ( int options ) { StringBuffer sb = new StringBuffer ( 9 ) ; if ( ( options & RegularExpression . PROHIBIT_FIXED_STRING_OPTIMIZATION ) != 0 ) sb . append ( ( char ) 'F' ) ; if ( ( options & RegularExpression . PROHIBIT_HEAD_CHARACTER_OPTIMIZATION ) != 0 ) sb . append ( ( char ) 'H' ) ; if ( ( options & RegularExpression . XMLSCHEMA_MODE ) != 0 ) sb . append ( ( char ) 'X' ) ; if ( ( options & RegularExpression . IGNORE_CASE ) != 0 ) sb . append ( ( char ) 'i' ) ; if ( ( options & RegularExpression . MULTIPLE_LINES ) != 0 ) sb . append ( ( char ) 'm' ) ; if ( ( options & RegularExpression . SINGLE_LINE ) != 0 ) sb . append ( ( char ) 's' ) ; if ( ( options & RegularExpression . USE_UNICODE_CATEGORY ) != 0 ) sb . append ( ( char ) 'u' ) ; if ( ( options & RegularExpression . UNICODE_WORD_BOUNDARY ) != 0 ) sb . append ( ( char ) 'w' ) ; if ( ( options & RegularExpression . EXTENDED_COMMENT ) != 0 ) sb . append ( ( char ) 'x' ) ; if ( ( options & RegularExpression . SPECIAL_COMMA ) != 0 ) sb . append ( ( char ) ',' ) ; return sb . toString ( ) . intern ( ) ; } static String stripExtendedComment ( String regex ) { int len = regex . length ( ) ; StringBuffer buffer = new StringBuffer ( len ) ; int offset = 0 ; while ( offset < len ) { int ch = regex . charAt ( offset ++ ) ; if ( ch == '\t' || ch == '\n' || ch == '\f' || ch == '\r' || ch == ' ' ) continue ; if ( ch == '#' ) { while ( offset < len ) { ch = regex . charAt ( offset ++ ) ; if ( ch == '\r' || ch == '\n' ) break ; } continue ; } int next ; if ( ch == '\\' && offset < len ) { if ( ( next = regex . charAt ( offset ) ) == '#' || next == '\t' || next == '\n' || next == '\f' || next == '\r' || next == ' ' ) { buffer . append ( ( char ) next ) ; offset ++ ; } else { buffer . append ( ( char ) '\\' ) ; buffer . append ( ( char ) next ) ; offset ++ ; } } else buffer . append ( ( char ) ch ) ; } return buffer . toString ( ) ; } public static void main ( String [ ] argv ) { String pattern = null ; try { String options = "" ; String target = null ; if ( argv . length == 0 ) { System . out . println ( "Error:Usage: java REUtil -i|-m|-s|-u|-w|-X regularExpression String" ) ; System . exit ( 0 ) ; } for ( int i = 0 ; i < argv . length ; i ++ ) { if ( argv [ i ] . length ( ) == 0 || argv [ i ] . charAt ( 0 ) != '-' ) { if ( pattern == null ) pattern = argv [ i ] ; else if ( target == null ) target = argv [ i ] ; else System . err . println ( "Unnecessary: " + argv [ i ] ) ; } else if ( argv [ i ] . equals ( "-i" ) ) { options += "i" ; } else if ( argv [ i ] . equals ( "-m" ) ) { options += "m" ; } else if ( argv [ i ] . equals ( "-s" ) ) { options += "s" ; } else if ( argv [ i ] . equals ( "-u" ) ) { options += "u" ; } else if ( argv [ i ] . equals ( "-w" ) ) { options += "w" ; } else if ( argv [ i ] . equals ( "-X" ) ) { options += "X" ; } else { System . err . println ( "Unknown option: " + argv [ i ] ) ; } } RegularExpression reg = new RegularExpression ( pattern , options ) ; System . out . println ( "RegularExpression: " + reg ) ; Match match = new Match ( ) ; reg . matches ( target , match ) ; for ( int i = 0 ; i < match . getNumberOfGroups ( ) ; i ++ ) { if ( i == 0 ) System . out . print ( "Matched range for the whole pattern: " ) ; else System . out . print ( "[" + i + "]: " ) ; if ( match . getBeginning ( i ) < 0 ) System . out . println ( "-1" ) ; else { System . out . print ( match . getBeginning ( i ) + ", " + match . getEnd ( i ) + ", " ) ; System . out . println ( "\"" + match . getCapturedText ( i ) + "\"" ) ; } } } catch ( ParseException pe ) { if ( pattern == null ) { pe . printStackTrace ( ) ; } else { System . err . println ( "org.apache.xerces.utils.regex.ParseException: " + pe . getMessage ( ) ) ; String indent = "        " ; System . err . println ( indent + pattern ) ; int loc = pe . getLocation ( ) ; if ( loc >= 0 ) { System . err . print ( indent ) ; for ( int i = 0 ; i < loc ; i ++ ) System . err . print ( "-" ) ; System . err . println ( "^" ) ; } } } catch ( Exception e ) { e . printStackTrace ( ) ; } } static final int CACHESIZE = 20 ; static RegularExpression [ ] regexCache = new RegularExpression [ CACHESIZE ] ; public static RegularExpression createRegex ( String pattern , String options ) throws ParseException { RegularExpression re = null ; int intOptions = REUtil . parseOptions ( options ) ; synchronized ( REUtil . regexCache ) { int i ; for ( i = 0 ; i < REUtil . CACHESIZE ; i ++ ) { re = REUtil . regexCache [ i ] ; if ( re == null ) { i = - 1 ; break ; } if ( re . equals ( pattern , intOptions ) ) break ; } if ( re != null ) { if ( i != 0 ) { System . arraycopy ( REUtil . regexCache , 0 , REUtil . regexCache , 1 , i ) ; REUtil . regexCache [ 0 ] = re ; } } else { re = new RegularExpression ( pattern , options ) ; System . arraycopy ( REUtil . regexCache , 0 , REUtil . regexCache , 1 , REUtil . CACHESIZE - 1 ) ; REUtil . regexCache [ 0 ] = re ; } } return re ; } public static boolean matches ( String regex , String target ) throws ParseException { return REUtil . createRegex ( regex , null ) . matches ( target ) ; } public static boolean matches ( String regex , String options , String target ) throws ParseException { return REUtil . createRegex ( regex , options ) . matches ( target ) ; } public static String quoteMeta ( String literal ) { int len = literal . length ( ) ; StringBuffer buffer = null ; for ( int i = 0 ; i < len ; i ++ ) { int ch = literal . charAt ( i ) ; if ( ".*+?{[()|\\^$" . indexOf ( ch ) >= 0 ) { if ( buffer == null ) { buffer = new StringBuffer ( i + ( len - i ) * 2 ) ; if ( i > 0 ) buffer . append ( literal . substring ( 0 , i ) ) ; } buffer . append ( ( char ) '\\' ) ; } else if ( buffer != null ) buffer . append ( ( char ) ch ) ; } return buffer != null ? buffer . toString ( ) : literal ; } static void dumpString ( String v ) { for ( int i = 0 ; i < v . length ( ) ; i ++ ) { System . out . print ( Integer . toHexString ( v . charAt ( i ) ) ) ; System . out . print ( " " ) ; } System . out . println ( ) ; } } 	0	['17', '1', '0', '8', '54', '134', '7', '3', '5', '0.9375', '867', '0', '1', '0', '0.2125', '0', '0', '49.88235294', '19', '4.7059', '0']
package org . apache . xerces . dom ; import java . io . * ; import org . w3c . dom . * ; import org . w3c . dom . events . * ; import org . apache . xerces . dom . * ; import org . apache . xerces . dom . events . * ; public abstract class ParentNode extends ChildNode { static final long serialVersionUID = 2815829867152120872L ; protected DocumentImpl ownerDocument ; protected ChildNode firstChild = null ; protected transient int fCachedLength = - 1 ; protected transient ChildNode fCachedChild ; protected transient int fCachedChildIndex = - 1 ; protected ParentNode ( DocumentImpl ownerDocument ) { super ( ownerDocument ) ; this . ownerDocument = ownerDocument ; } public ParentNode ( ) { } public Node cloneNode ( boolean deep ) { ParentNode newnode = ( ParentNode ) super . cloneNode ( deep ) ; newnode . ownerDocument = ownerDocument ; if ( needsSyncChildren ( ) ) { synchronizeChildren ( ) ; } newnode . firstChild = null ; newnode . fCachedChildIndex = - 1 ; newnode . fCachedLength = - 1 ; if ( deep ) { for ( ChildNode child = firstChild ; child != null ; child = child . nextSibling ) { newnode . appendChild ( child . cloneNode ( true ) ) ; } } return newnode ; } public Document getOwnerDocument ( ) { return ownerDocument ; } DocumentImpl ownerDocument ( ) { return ownerDocument ; } void setOwnerDocument ( DocumentImpl doc ) { if ( needsSyncChildren ( ) ) { synchronizeChildren ( ) ; } for ( ChildNode child = firstChild ; child != null ; child = child . nextSibling ) { child . setOwnerDocument ( doc ) ; } ownerDocument = doc ; } public boolean hasChildNodes ( ) { if ( needsSyncChildren ( ) ) { synchronizeChildren ( ) ; } return firstChild != null ; } public NodeList getChildNodes ( ) { if ( needsSyncChildren ( ) ) { synchronizeChildren ( ) ; } return this ; } public Node getFirstChild ( ) { if ( needsSyncChildren ( ) ) { synchronizeChildren ( ) ; } return firstChild ; } public Node getLastChild ( ) { if ( needsSyncChildren ( ) ) { synchronizeChildren ( ) ; } return lastChild ( ) ; } final ChildNode lastChild ( ) { return firstChild != null ? firstChild . previousSibling : null ; } final void lastChild ( ChildNode node ) { if ( firstChild != null ) { firstChild . previousSibling = node ; } } public Node insertBefore ( Node newChild , Node refChild ) throws DOMException { return internalInsertBefore ( newChild , refChild , MUTATION_ALL ) ; } Node internalInsertBefore ( Node newChild , Node refChild , int mutationMask ) throws DOMException { boolean errorChecking = ownerDocument . errorChecking ; if ( newChild . getNodeType ( ) == Node . DOCUMENT_FRAGMENT_NODE ) { if ( errorChecking ) { for ( Node kid = newChild . getFirstChild ( ) ; kid != null ; kid = kid . getNextSibling ( ) ) { if ( ! ownerDocument . isKidOK ( this , kid ) ) { throw new DOMException ( DOMException . HIERARCHY_REQUEST_ERR , "DOM006 Hierarchy request error" ) ; } } } while ( newChild . hasChildNodes ( ) ) { insertBefore ( newChild . getFirstChild ( ) , refChild ) ; } return newChild ; } if ( newChild == refChild ) { refChild = refChild . getNextSibling ( ) ; removeChild ( newChild ) ; insertBefore ( newChild , refChild ) ; return newChild ; } if ( needsSyncChildren ( ) ) { synchronizeChildren ( ) ; } if ( errorChecking ) { if ( isReadOnly ( ) ) { throw new DOMException ( DOMException . NO_MODIFICATION_ALLOWED_ERR , "DOM001 Modification not allowed" ) ; } if ( newChild . getOwnerDocument ( ) != ownerDocument ) { throw new DOMException ( DOMException . WRONG_DOCUMENT_ERR , "DOM005 Wrong document" ) ; } if ( ! ownerDocument . isKidOK ( this , newChild ) ) { throw new DOMException ( DOMException . HIERARCHY_REQUEST_ERR , "DOM006 Hierarchy request error" ) ; } if ( refChild != null && refChild . getParentNode ( ) != this ) { throw new DOMException ( DOMException . NOT_FOUND_ERR , "DOM008 Not found" ) ; } boolean treeSafe = true ; for ( NodeImpl a = this ; treeSafe && a != null ; a = a . parentNode ( ) ) { treeSafe = newChild != a ; } if ( ! treeSafe ) { throw new DOMException ( DOMException . HIERARCHY_REQUEST_ERR , "DOM006 Hierarchy request error" ) ; } } EnclosingAttr enclosingAttr = null ; if ( MUTATIONEVENTS && ownerDocument . mutationEvents && ( mutationMask & MUTATION_AGGREGATE ) != 0 ) { LCount lc = LCount . lookup ( MutationEventImpl . DOM_ATTR_MODIFIED ) ; if ( lc . captures + lc . bubbles + lc . defaults > 0 ) { enclosingAttr = getEnclosingAttr ( ) ; } } ChildNode newInternal = ( ChildNode ) newChild ; Node oldparent = newInternal . parentNode ( ) ; if ( oldparent != null ) { oldparent . removeChild ( newInternal ) ; } ChildNode refInternal = ( ChildNode ) refChild ; newInternal . ownerNode = this ; newInternal . isOwned ( true ) ; if ( firstChild == null ) { firstChild = newInternal ; newInternal . isFirstChild ( true ) ; newInternal . previousSibling = newInternal ; } else { if ( refInternal == null ) { ChildNode lastChild = firstChild . previousSibling ; lastChild . nextSibling = newInternal ; newInternal . previousSibling = lastChild ; firstChild . previousSibling = newInternal ; } else { if ( refChild == firstChild ) { firstChild . isFirstChild ( false ) ; newInternal . nextSibling = firstChild ; newInternal . previousSibling = firstChild . previousSibling ; firstChild . previousSibling = newInternal ; firstChild = newInternal ; newInternal . isFirstChild ( true ) ; } else { ChildNode prev = refInternal . previousSibling ; newInternal . nextSibling = refInternal ; prev . nextSibling = newInternal ; refInternal . previousSibling = newInternal ; newInternal . previousSibling = prev ; } } } changed ( ) ; if ( fCachedLength != - 1 ) { fCachedLength ++ ; } if ( fCachedChildIndex != - 1 ) { if ( fCachedChild == refInternal ) { fCachedChild = newInternal ; } else { fCachedChildIndex = - 1 ; } } if ( MUTATIONEVENTS && ownerDocument . mutationEvents ) { if ( ( mutationMask & MUTATION_LOCAL ) != 0 ) { LCount lc = LCount . lookup ( MutationEventImpl . DOM_NODE_INSERTED ) ; if ( lc . captures + lc . bubbles + lc . defaults > 0 ) { MutationEvent me = new MutationEventImpl ( ) ; me . initMutationEvent ( MutationEventImpl . DOM_NODE_INSERTED , true , false , this , null , null , null , ( short ) 0 ) ; newInternal . dispatchEvent ( me ) ; } lc = LCount . lookup ( MutationEventImpl . DOM_NODE_INSERTED_INTO_DOCUMENT ) ; if ( lc . captures + lc . bubbles + lc . defaults > 0 ) { NodeImpl eventAncestor = this ; if ( enclosingAttr != null ) eventAncestor = ( NodeImpl ) ( enclosingAttr . node . getOwnerElement ( ) ) ; if ( eventAncestor != null ) { NodeImpl p = eventAncestor ; while ( p != null ) { eventAncestor = p ; if ( p . getNodeType ( ) == ATTRIBUTE_NODE ) { p = ( ElementImpl ) ( ( AttrImpl ) p ) . getOwnerElement ( ) ; } else { p = p . parentNode ( ) ; } } if ( eventAncestor . getNodeType ( ) == Node . DOCUMENT_NODE ) { MutationEvent me = new MutationEventImpl ( ) ; me . initMutationEvent ( MutationEventImpl . DOM_NODE_INSERTED_INTO_DOCUMENT , false , false , null , null , null , null , ( short ) 0 ) ; dispatchEventToSubtree ( newInternal , me ) ; } } } } if ( ( mutationMask & MUTATION_AGGREGATE ) != 0 ) { dispatchAggregateEvents ( enclosingAttr ) ; } } checkNormalizationAfterInsert ( newInternal ) ; return newChild ; } public Node removeChild ( Node oldChild ) throws DOMException { return internalRemoveChild ( oldChild , MUTATION_ALL ) ; } Node internalRemoveChild ( Node oldChild , int mutationMask ) throws DOMException { DocumentImpl ownerDocument = ownerDocument ( ) ; if ( ownerDocument . errorChecking ) { if ( isReadOnly ( ) ) { throw new DOMException ( DOMException . NO_MODIFICATION_ALLOWED_ERR , "DOM001 Modification not allowed" ) ; } if ( oldChild != null && oldChild . getParentNode ( ) != this ) { throw new DOMException ( DOMException . NOT_FOUND_ERR , "DOM008 Not found" ) ; } } ownerDocument . removedChildNode ( oldChild ) ; ChildNode oldInternal = ( ChildNode ) oldChild ; EnclosingAttr enclosingAttr = null ; if ( MUTATIONEVENTS && ownerDocument . mutationEvents ) { LCount lc = LCount . lookup ( MutationEventImpl . DOM_ATTR_MODIFIED ) ; if ( lc . captures + lc . bubbles + lc . defaults > 0 ) { enclosingAttr = getEnclosingAttr ( ) ; } if ( ( mutationMask & MUTATION_LOCAL ) != 0 ) { lc = LCount . lookup ( MutationEventImpl . DOM_NODE_REMOVED ) ; if ( lc . captures + lc . bubbles + lc . defaults > 0 ) { MutationEvent me = new MutationEventImpl ( ) ; me . initMutationEvent ( MutationEventImpl . DOM_NODE_REMOVED , true , false , this , null , null , null , ( short ) 0 ) ; oldInternal . dispatchEvent ( me ) ; } lc = LCount . lookup ( MutationEventImpl . DOM_NODE_REMOVED_FROM_DOCUMENT ) ; if ( lc . captures + lc . bubbles + lc . defaults > 0 ) { NodeImpl eventAncestor = this ; if ( enclosingAttr != null ) eventAncestor = ( NodeImpl ) enclosingAttr . node . getOwnerElement ( ) ; if ( eventAncestor != null ) { for ( NodeImpl p = eventAncestor . parentNode ( ) ; p != null ; p = p . parentNode ( ) ) { eventAncestor = p ; } if ( eventAncestor . getNodeType ( ) == Node . DOCUMENT_NODE ) { MutationEvent me = new MutationEventImpl ( ) ; me . initMutationEvent ( MutationEventImpl . DOM_NODE_REMOVED_FROM_DOCUMENT , false , false , null , null , null , null , ( short ) 0 ) ; dispatchEventToSubtree ( oldInternal , me ) ; } } } } } if ( fCachedLength != - 1 ) { fCachedLength -- ; } if ( fCachedChildIndex != - 1 ) { if ( fCachedChild == oldInternal ) { fCachedChildIndex -- ; fCachedChild = oldInternal . previousSibling ( ) ; } else { fCachedChildIndex = - 1 ; } } if ( oldInternal == firstChild ) { oldInternal . isFirstChild ( false ) ; firstChild = oldInternal . nextSibling ; if ( firstChild != null ) { firstChild . isFirstChild ( true ) ; firstChild . previousSibling = oldInternal . previousSibling ; } } else { ChildNode prev = oldInternal . previousSibling ; ChildNode next = oldInternal . nextSibling ; prev . nextSibling = next ; if ( next == null ) { firstChild . previousSibling = prev ; } else { next . previousSibling = prev ; } } ChildNode oldPreviousSibling = oldInternal . previousSibling ( ) ; oldInternal . ownerNode = ownerDocument ; oldInternal . isOwned ( false ) ; oldInternal . nextSibling = null ; oldInternal . previousSibling = null ; changed ( ) ; if ( MUTATIONEVENTS && ownerDocument . mutationEvents ) { if ( ( mutationMask & MUTATION_AGGREGATE ) != 0 ) dispatchAggregateEvents ( enclosingAttr ) ; } checkNormalizationAfterRemove ( oldPreviousSibling ) ; return oldInternal ; } public Node replaceChild ( Node newChild , Node oldChild ) throws DOMException { EnclosingAttr enclosingAttr = null ; if ( MUTATIONEVENTS && ownerDocument . mutationEvents ) { LCount lc = LCount . lookup ( MutationEventImpl . DOM_ATTR_MODIFIED ) ; if ( lc . captures + lc . bubbles + lc . defaults > 0 ) { enclosingAttr = getEnclosingAttr ( ) ; } } internalInsertBefore ( newChild , oldChild , MUTATION_LOCAL ) ; if ( newChild != oldChild ) { internalRemoveChild ( oldChild , MUTATION_LOCAL ) ; } if ( MUTATIONEVENTS && ownerDocument . mutationEvents ) { dispatchAggregateEvents ( enclosingAttr ) ; } return oldChild ; } private int nodeListGetLength ( ) { if ( fCachedLength == - 1 ) { ChildNode node ; if ( fCachedChildIndex != - 1 && fCachedChild != null ) { fCachedLength = fCachedChildIndex ; node = fCachedChild ; } else { node = firstChild ; fCachedLength = 0 ; } for ( ; node != null ; node = node . nextSibling ) { fCachedLength ++ ; } } return fCachedLength ; } public int getLength ( ) { return nodeListGetLength ( ) ; } private Node nodeListItem ( int index ) { if ( fCachedChildIndex != - 1 && fCachedChild != null ) { if ( fCachedChildIndex < index ) { while ( fCachedChildIndex < index && fCachedChild != null ) { fCachedChildIndex ++ ; fCachedChild = fCachedChild . nextSibling ; } } else if ( fCachedChildIndex > index ) { while ( fCachedChildIndex > index && fCachedChild != null ) { fCachedChildIndex -- ; fCachedChild = fCachedChild . previousSibling ( ) ; } } return fCachedChild ; } fCachedChild = firstChild ; for ( fCachedChildIndex = 0 ; fCachedChildIndex < index && fCachedChild != null ; fCachedChildIndex ++ ) { fCachedChild = fCachedChild . nextSibling ; } return fCachedChild ; } public Node item ( int index ) { return nodeListItem ( index ) ; } protected final NodeList getChildNodesUnoptimized ( ) { if ( needsSyncChildren ( ) ) { synchronizeChildren ( ) ; } return new NodeList ( ) { public int getLength ( ) { return nodeListGetLength ( ) ; } public Node item ( int index ) { return nodeListItem ( index ) ; } } ; } public void normalize ( ) { if ( isNormalized ( ) ) { return ; } if ( needsSyncChildren ( ) ) { synchronizeChildren ( ) ; } ChildNode kid ; for ( kid = firstChild ; kid != null ; kid = kid . nextSibling ) { kid . normalize ( ) ; } isNormalized ( true ) ; } public void setReadOnly ( boolean readOnly , boolean deep ) { super . setReadOnly ( readOnly , deep ) ; if ( deep ) { if ( needsSyncChildren ( ) ) { synchronizeChildren ( ) ; } for ( ChildNode mykid = firstChild ; mykid != null ; mykid = mykid . nextSibling ) { if ( mykid . getNodeType ( ) != Node . ENTITY_REFERENCE_NODE ) { mykid . setReadOnly ( readOnly , true ) ; } } } } protected void synchronizeChildren ( ) { needsSyncChildren ( false ) ; } protected final void synchronizeChildren ( int nodeIndex ) { boolean orig = ownerDocument . mutationEvents ; ownerDocument . mutationEvents = false ; needsSyncChildren ( false ) ; DeferredDocumentImpl ownerDocument = ( DeferredDocumentImpl ) this . ownerDocument ; ChildNode first = null ; ChildNode last = null ; for ( int index = ownerDocument . getLastChild ( nodeIndex ) ; index != - 1 ; index = ownerDocument . getPrevSibling ( index ) ) { ChildNode node = ( ChildNode ) ownerDocument . getNodeObject ( index ) ; if ( last == null ) { last = node ; } else { first . previousSibling = node ; } node . ownerNode = this ; node . isOwned ( true ) ; node . nextSibling = first ; first = node ; } if ( last != null ) { firstChild = first ; first . isFirstChild ( true ) ; lastChild ( last ) ; } ownerDocument . mutationEvents = orig ; } void checkNormalizationAfterInsert ( ChildNode insertedChild ) { if ( insertedChild . getNodeType ( ) == Node . TEXT_NODE ) { ChildNode prev = insertedChild . previousSibling ( ) ; ChildNode next = insertedChild . nextSibling ; if ( ( prev != null && prev . getNodeType ( ) == Node . TEXT_NODE ) || ( next != null && next . getNodeType ( ) == Node . TEXT_NODE ) ) { isNormalized ( false ) ; } } else { if ( ! insertedChild . isNormalized ( ) ) { isNormalized ( false ) ; } } } void checkNormalizationAfterRemove ( ChildNode previousSibling ) { if ( previousSibling != null && previousSibling . getNodeType ( ) == Node . TEXT_NODE ) { ChildNode next = previousSibling . nextSibling ; if ( next != null && next . getNodeType ( ) == Node . TEXT_NODE ) { isNormalized ( false ) ; } } } private void writeObject ( ObjectOutputStream out ) throws IOException { if ( needsSyncChildren ( ) ) { synchronizeChildren ( ) ; } out . defaultWriteObject ( ) ; } private void readObject ( ObjectInputStream ois ) throws ClassNotFoundException , IOException { ois . defaultReadObject ( ) ; needsSyncChildren ( false ) ; fCachedLength = - 1 ; fCachedChildIndex = - 1 ; } } 	0	['32', '3', '7', '16', '77', '236', '8', '11', '14', '0.650537634', '1240', '0.833333333', '3', '0.625', '0.180555556', '2', '25', '37.5625', '11', '2.3438', '0']
package org . apache . xerces . utils . regex ; final class RangeToken extends Token implements java . io . Serializable { int [ ] ranges ; boolean sorted ; boolean compacted ; RangeToken icaseCache = null ; int [ ] map = null ; int nonMapIndex ; RangeToken ( int type ) { super ( type ) ; this . setSorted ( false ) ; } protected void addRange ( int start , int end ) { this . icaseCache = null ; int r1 , r2 ; if ( start <= end ) { r1 = start ; r2 = end ; } else { r1 = end ; r2 = start ; } int pos = 0 ; if ( this . ranges == null ) { this . ranges = new int [ 2 ] ; this . ranges [ 0 ] = r1 ; this . ranges [ 1 ] = r2 ; this . setSorted ( true ) ; } else { pos = this . ranges . length ; if ( this . ranges [ pos - 1 ] + 1 == r1 ) { this . ranges [ pos - 1 ] = r2 ; return ; } int [ ] temp = new int [ pos + 2 ] ; System . arraycopy ( this . ranges , 0 , temp , 0 , pos ) ; this . ranges = temp ; if ( this . ranges [ pos - 1 ] >= r1 ) this . setSorted ( false ) ; this . ranges [ pos ++ ] = r1 ; this . ranges [ pos ] = r2 ; if ( ! this . sorted ) this . sortRanges ( ) ; } } private final boolean isSorted ( ) { return this . sorted ; } private final void setSorted ( boolean sort ) { this . sorted = sort ; if ( ! sort ) this . compacted = false ; } private final boolean isCompacted ( ) { return this . compacted ; } private final void setCompacted ( ) { this . compacted = true ; } protected void sortRanges ( ) { if ( this . isSorted ( ) ) return ; if ( this . ranges == null ) return ; for ( int i = this . ranges . length - 4 ; i >= 0 ; i -= 2 ) { for ( int j = 0 ; j <= i ; j += 2 ) { if ( this . ranges [ j ] > this . ranges [ j + 2 ] || this . ranges [ j ] == this . ranges [ j + 2 ] && this . ranges [ j + 1 ] > this . ranges [ j + 3 ] ) { int tmp ; tmp = this . ranges [ j + 2 ] ; this . ranges [ j + 2 ] = this . ranges [ j ] ; this . ranges [ j ] = tmp ; tmp = this . ranges [ j + 3 ] ; this . ranges [ j + 3 ] = this . ranges [ j + 1 ] ; this . ranges [ j + 1 ] = tmp ; } } } this . setSorted ( true ) ; } protected void compactRanges ( ) { boolean DEBUG = false ; if ( this . ranges == null || this . ranges . length <= 2 ) return ; if ( this . isCompacted ( ) ) return ; int base = 0 ; int target = 0 ; while ( target < this . ranges . length ) { if ( base != target ) { this . ranges [ base ] = this . ranges [ target ++ ] ; this . ranges [ base + 1 ] = this . ranges [ target ++ ] ; } else target += 2 ; int baseend = this . ranges [ base + 1 ] ; while ( target < this . ranges . length ) { if ( baseend + 1 < this . ranges [ target ] ) break ; if ( baseend + 1 == this . ranges [ target ] ) { if ( DEBUG ) System . err . println ( "Token#compactRanges(): Compaction: [" + this . ranges [ base ] + ", " + this . ranges [ base + 1 ] + "], [" + this . ranges [ target ] + ", " + this . ranges [ target + 1 ] + "] -> [" + this . ranges [ base ] + ", " + this . ranges [ target + 1 ] + "]" ) ; this . ranges [ base + 1 ] = this . ranges [ target + 1 ] ; baseend = this . ranges [ base + 1 ] ; target += 2 ; } else if ( baseend >= this . ranges [ target + 1 ] ) { if ( DEBUG ) System . err . println ( "Token#compactRanges(): Compaction: [" + this . ranges [ base ] + ", " + this . ranges [ base + 1 ] + "], [" + this . ranges [ target ] + ", " + this . ranges [ target + 1 ] + "] -> [" + this . ranges [ base ] + ", " + this . ranges [ base + 1 ] + "]" ) ; target += 2 ; } else if ( baseend < this . ranges [ target + 1 ] ) { if ( DEBUG ) System . err . println ( "Token#compactRanges(): Compaction: [" + this . ranges [ base ] + ", " + this . ranges [ base + 1 ] + "], [" + this . ranges [ target ] + ", " + this . ranges [ target + 1 ] + "] -> [" + this . ranges [ base ] + ", " + this . ranges [ target + 1 ] + "]" ) ; this . ranges [ base + 1 ] = this . ranges [ target + 1 ] ; baseend = this . ranges [ base + 1 ] ; target += 2 ; } else { throw new RuntimeException ( "Token#compactRanges(): Internel Error: [" + this . ranges [ base ] + "," + this . ranges [ base + 1 ] + "] [" + this . ranges [ target ] + "," + this . ranges [ target + 1 ] + "]" ) ; } } base += 2 ; } if ( base != this . ranges . length ) { int [ ] result = new int [ base ] ; System . arraycopy ( this . ranges , 0 , result , 0 , base ) ; this . ranges = result ; } this . setCompacted ( ) ; } protected void mergeRanges ( Token token ) { if ( token . type != this . type ) throw new IllegalArgumentException ( "Token#mergeRanges(): Mismatched Type: " + token . type ) ; RangeToken tok = ( RangeToken ) token ; this . sortRanges ( ) ; tok . sortRanges ( ) ; if ( tok . ranges == null ) return ; this . icaseCache = null ; this . setSorted ( true ) ; if ( this . ranges == null ) { this . ranges = new int [ tok . ranges . length ] ; System . arraycopy ( tok . ranges , 0 , this . ranges , 0 , tok . ranges . length ) ; return ; } int [ ] result = new int [ this . ranges . length + tok . ranges . length ] ; for ( int i = 0 , j = 0 , k = 0 ; i < this . ranges . length || j < tok . ranges . length ; ) { if ( i >= this . ranges . length ) { result [ k ++ ] = tok . ranges [ j ++ ] ; result [ k ++ ] = tok . ranges [ j ++ ] ; } else if ( j >= tok . ranges . length ) { result [ k ++ ] = this . ranges [ i ++ ] ; result [ k ++ ] = this . ranges [ i ++ ] ; } else if ( tok . ranges [ j ] < this . ranges [ i ] || tok . ranges [ j ] == this . ranges [ i ] && tok . ranges [ j + 1 ] < this . ranges [ i + 1 ] ) { result [ k ++ ] = tok . ranges [ j ++ ] ; result [ k ++ ] = tok . ranges [ j ++ ] ; } else { result [ k ++ ] = this . ranges [ i ++ ] ; result [ k ++ ] = this . ranges [ i ++ ] ; } } this . ranges = result ; } protected void subtractRanges ( Token token ) { if ( token . type == NRANGE ) { this . intersectRanges ( token ) ; return ; } RangeToken tok = ( RangeToken ) token ; if ( tok . ranges == null || this . ranges == null ) return ; this . icaseCache = null ; this . sortRanges ( ) ; this . compactRanges ( ) ; tok . sortRanges ( ) ; tok . compactRanges ( ) ; int [ ] result = new int [ this . ranges . length + tok . ranges . length ] ; int wp = 0 , src = 0 , sub = 0 ; while ( src < this . ranges . length && sub < tok . ranges . length ) { int srcbegin = this . ranges [ src ] ; int srcend = this . ranges [ src + 1 ] ; int subbegin = tok . ranges [ sub ] ; int subend = tok . ranges [ sub + 1 ] ; if ( srcend < subbegin ) { result [ wp ++ ] = this . ranges [ src ++ ] ; result [ wp ++ ] = this . ranges [ src ++ ] ; } else if ( srcend >= subbegin && srcbegin <= subend ) { if ( subbegin <= srcbegin && srcend <= subend ) { src += 2 ; } else if ( subbegin <= srcbegin ) { this . ranges [ src ] = subend + 1 ; sub += 2 ; } else if ( srcend <= subend ) { result [ wp ++ ] = srcbegin ; result [ wp ++ ] = subbegin - 1 ; src += 2 ; } else { result [ wp ++ ] = srcbegin ; result [ wp ++ ] = subbegin - 1 ; this . ranges [ src ] = subend + 1 ; sub += 2 ; } } else if ( subend < srcbegin ) { sub += 2 ; } else { throw new RuntimeException ( "Token#subtractRanges(): Internal Error: [" + this . ranges [ src ] + "," + this . ranges [ src + 1 ] + "] - [" + tok . ranges [ sub ] + "," + tok . ranges [ sub + 1 ] + "]" ) ; } } while ( src < this . ranges . length ) { result [ wp ++ ] = this . ranges [ src ++ ] ; result [ wp ++ ] = this . ranges [ src ++ ] ; } this . ranges = new int [ wp ] ; System . arraycopy ( result , 0 , this . ranges , 0 , wp ) ; } protected void intersectRanges ( Token token ) { RangeToken tok = ( RangeToken ) token ; if ( tok . ranges == null || this . ranges == null ) return ; this . icaseCache = null ; this . sortRanges ( ) ; this . compactRanges ( ) ; tok . sortRanges ( ) ; tok . compactRanges ( ) ; int [ ] result = new int [ this . ranges . length + tok . ranges . length ] ; int wp = 0 , src1 = 0 , src2 = 0 ; while ( src1 < this . ranges . length && src2 < tok . ranges . length ) { int src1begin = this . ranges [ src1 ] ; int src1end = this . ranges [ src1 + 1 ] ; int src2begin = tok . ranges [ src2 ] ; int src2end = tok . ranges [ src2 + 1 ] ; if ( src1end < src2begin ) { src1 += 2 ; } else if ( src1end >= src2begin && src1begin <= src2end ) { if ( src2begin <= src2begin && src1end <= src2end ) { result [ wp ++ ] = src1begin ; result [ wp ++ ] = src1end ; src1 += 2 ; } else if ( src2begin <= src1begin ) { result [ wp ++ ] = src1begin ; result [ wp ++ ] = src2end ; this . ranges [ src1 ] = src2end + 1 ; src2 += 2 ; } else if ( src1end <= src2end ) { result [ wp ++ ] = src2begin ; result [ wp ++ ] = src1end ; src1 += 2 ; } else { result [ wp ++ ] = src2begin ; result [ wp ++ ] = src2end ; this . ranges [ src1 ] = src2end + 1 ; } } else if ( src2end < src1begin ) { src2 += 2 ; } else { throw new RuntimeException ( "Token#intersectRanges(): Internal Error: [" + this . ranges [ src1 ] + "," + this . ranges [ src1 + 1 ] + "] & [" + tok . ranges [ src2 ] + "," + tok . ranges [ src2 + 1 ] + "]" ) ; } } while ( src1 < this . ranges . length ) { result [ wp ++ ] = this . ranges [ src1 ++ ] ; result [ wp ++ ] = this . ranges [ src1 ++ ] ; } this . ranges = new int [ wp ] ; System . arraycopy ( result , 0 , this . ranges , 0 , wp ) ; } static Token complementRanges ( Token token ) { if ( token . type != RANGE && token . type != NRANGE ) throw new IllegalArgumentException ( "Token#complementRanges(): must be RANGE: " + token . type ) ; RangeToken tok = ( RangeToken ) token ; tok . sortRanges ( ) ; tok . compactRanges ( ) ; int len = tok . ranges . length + 2 ; if ( tok . ranges [ 0 ] == 0 ) len -= 2 ; int last = tok . ranges [ tok . ranges . length - 1 ] ; if ( last == UTF16_MAX ) len -= 2 ; RangeToken ret = Token . createRange ( ) ; ret . ranges = new int [ len ] ; int wp = 0 ; if ( tok . ranges [ 0 ] > 0 ) { ret . ranges [ wp ++ ] = 0 ; ret . ranges [ wp ++ ] = tok . ranges [ 0 ] - 1 ; } for ( int i = 1 ; i < tok . ranges . length - 2 ; i += 2 ) { ret . ranges [ wp ++ ] = tok . ranges [ i ] + 1 ; ret . ranges [ wp ++ ] = tok . ranges [ i + 1 ] - 1 ; } if ( last != UTF16_MAX ) { ret . ranges [ wp ++ ] = last + 1 ; ret . ranges [ wp ] = UTF16_MAX ; } ret . setCompacted ( ) ; return ret ; } synchronized RangeToken getCaseInsensitiveToken ( ) { if ( this . icaseCache != null ) return this . icaseCache ; RangeToken uppers = this . type == Token . RANGE ? Token . createRange ( ) : Token . createNRange ( ) ; for ( int i = 0 ; i < this . ranges . length ; i += 2 ) { for ( int ch = this . ranges [ i ] ; ch <= this . ranges [ i + 1 ] ; ch ++ ) { if ( ch > 0xffff ) uppers . addRange ( ch , ch ) ; else { char uch = Character . toUpperCase ( ( char ) ch ) ; uppers . addRange ( uch , uch ) ; } } } RangeToken lowers = this . type == Token . RANGE ? Token . createRange ( ) : Token . createNRange ( ) ; for ( int i = 0 ; i < uppers . ranges . length ; i += 2 ) { for ( int ch = uppers . ranges [ i ] ; ch <= uppers . ranges [ i + 1 ] ; ch ++ ) { if ( ch > 0xffff ) lowers . addRange ( ch , ch ) ; else { char uch = Character . toUpperCase ( ( char ) ch ) ; lowers . addRange ( uch , uch ) ; } } } lowers . mergeRanges ( uppers ) ; lowers . mergeRanges ( this ) ; lowers . compactRanges ( ) ; this . icaseCache = lowers ; return lowers ; } void dumpRanges ( ) { System . err . print ( "RANGE: " ) ; if ( this . ranges == null ) System . err . println ( " NULL" ) ; for ( int i = 0 ; i < this . ranges . length ; i += 2 ) { System . err . print ( "[" + this . ranges [ i ] + "," + this . ranges [ i + 1 ] + "] " ) ; } System . err . println ( "" ) ; } boolean match ( int ch ) { if ( this . map == null ) this . createMap ( ) ; boolean ret ; if ( this . type == RANGE ) { if ( ch < MAPSIZE ) return ( this . map [ ch / 32 ] & ( 1 << ( ch & 0x1f ) ) ) != 0 ; ret = false ; for ( int i = this . nonMapIndex ; i < this . ranges . length ; i += 2 ) { if ( this . ranges [ i ] <= ch && ch <= this . ranges [ i + 1 ] ) return true ; } } else { if ( ch < MAPSIZE ) return ( this . map [ ch / 32 ] & ( 1 << ( ch & 0x1f ) ) ) == 0 ; ret = true ; for ( int i = this . nonMapIndex ; i < this . ranges . length ; i += 2 ) { if ( this . ranges [ i ] <= ch && ch <= this . ranges [ i + 1 ] ) return false ; } } return ret ; } private static final int MAPSIZE = 256 ; private void createMap ( ) { int asize = MAPSIZE / 32 ; this . map = new int [ asize ] ; this . nonMapIndex = this . ranges . length ; for ( int i = 0 ; i < asize ; i ++ ) this . map [ i ] = 0 ; for ( int i = 0 ; i < this . ranges . length ; i += 2 ) { int s = this . ranges [ i ] ; int e = this . ranges [ i + 1 ] ; if ( s < MAPSIZE ) { for ( int j = s ; j <= e && j < MAPSIZE ; j ++ ) this . map [ j / 32 ] |= 1 << ( j & 0x1f ) ; } else { this . nonMapIndex = i ; break ; } if ( e >= MAPSIZE ) { this . nonMapIndex = i ; break ; } } } public String toString ( int options ) { String ret ; if ( this . type == RANGE ) { if ( this == Token . token_dot ) ret = "." ; else if ( this == Token . token_0to9 ) ret = "\\d" ; else if ( this == Token . token_wordchars ) ret = "\\w" ; else if ( this == Token . token_spaces ) ret = "\\s" ; else { StringBuffer sb = new StringBuffer ( ) ; sb . append ( "[" ) ; for ( int i = 0 ; i < this . ranges . length ; i += 2 ) { if ( ( options & RegularExpression . SPECIAL_COMMA ) != 0 && i > 0 ) sb . append ( "," ) ; if ( this . ranges [ i ] == this . ranges [ i + 1 ] ) { sb . append ( escapeCharInCharClass ( this . ranges [ i ] ) ) ; } else { sb . append ( escapeCharInCharClass ( this . ranges [ i ] ) ) ; sb . append ( ( char ) '-' ) ; sb . append ( escapeCharInCharClass ( this . ranges [ i + 1 ] ) ) ; } } sb . append ( "]" ) ; ret = sb . toString ( ) ; } } else { if ( this == Token . token_not_0to9 ) ret = "\\D" ; else if ( this == Token . token_not_wordchars ) ret = "\\W" ; else if ( this == Token . token_not_spaces ) ret = "\\S" ; else { StringBuffer sb = new StringBuffer ( ) ; sb . append ( "[^" ) ; for ( int i = 0 ; i < this . ranges . length ; i += 2 ) { if ( ( options & RegularExpression . SPECIAL_COMMA ) != 0 && i > 0 ) sb . append ( "," ) ; if ( this . ranges [ i ] == this . ranges [ i + 1 ] ) { sb . append ( escapeCharInCharClass ( this . ranges [ i ] ) ) ; } else { sb . append ( escapeCharInCharClass ( this . ranges [ i ] ) ) ; sb . append ( '-' ) ; sb . append ( escapeCharInCharClass ( this . ranges [ i + 1 ] ) ) ; } } sb . append ( "]" ) ; ret = sb . toString ( ) ; } } return ret ; } private static String escapeCharInCharClass ( int ch ) { String ret ; switch ( ch ) { case '[' : case ']' : case '-' : case '^' : case ',' : case '\\' : ret = "\\" + ( char ) ch ; break ; case '\f' : ret = "\\f" ; break ; case '\n' : ret = "\\n" ; break ; case '\r' : ret = "\\r" ; break ; case '\t' : ret = "\\t" ; break ; case 0x1b : ret = "\\e" ; break ; default : if ( ch < 0x20 ) { String pre = "0" + Integer . toHexString ( ch ) ; ret = "\\x" + pre . substring ( pre . length ( ) - 2 , pre . length ( ) ) ; } else if ( ch >= 0x10000 ) { String pre = "0" + Integer . toHexString ( ch ) ; ret = "\\v" + pre . substring ( pre . length ( ) - 6 , pre . length ( ) ) ; } else ret = "" + ( char ) ch ; } return ret ; } } 	0	['18', '2', '0', '6', '35', '0', '6', '1', '1', '0.680672269', '2128', '0.142857143', '1', '0.734375', '0.361111111', '1', '7', '116.8333333', '17', '8', '0']
package org . apache . xerces . validators . common ; public class CMException extends Exception { public CMException ( int errCode ) { fErrorCode = errCode ; } public int getErrorCode ( ) { return fErrorCode ; } static final int fUnused = - 1000 ; private int fErrorCode ; } ; 	0	['2', '3', '0', '11', '3', '0', '11', '0', '2', '1', '13', '0.5', '0', '0.944444444', '0.75', '0', '0', '4.5', '1', '0.5', '0']
package org . apache . html . dom ; public interface HTMLFormControl { } 	0	['0', '1', '0', '8', '0', '0', '8', '0', '0', '2', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0']
package org . apache . xerces . validators . datatype ; import java . util . Hashtable ; import java . util . Locale ; import java . util . Enumeration ; import org . apache . xerces . validators . schema . SchemaSymbols ; import org . apache . xerces . utils . regex . RegularExpression ; import org . apache . xerces . validators . schema . SchemaSymbols ; import org . apache . xerces . validators . datatype . InvalidDatatypeFacetException ; public class BooleanDatatypeValidator extends AbstractDatatypeValidator { private Locale fLocale = null ; private DatatypeValidator fBaseValidator = null ; private String fPattern = null ; private int fFacetsDefined = 0 ; private DatatypeMessageProvider fMessageProvider = new DatatypeMessageProvider ( ) ; private static final String fValueSpace [ ] = { "false" , "true" , "0" , "1" } ; private RegularExpression fRegex = null ; public BooleanDatatypeValidator ( ) throws InvalidDatatypeFacetException { this ( null , null , false ) ; } public BooleanDatatypeValidator ( DatatypeValidator base , Hashtable facets , boolean derivedByList ) throws InvalidDatatypeFacetException { setBasetype ( base ) ; if ( facets != null ) { if ( derivedByList == false ) { for ( Enumeration e = facets . keys ( ) ; e . hasMoreElements ( ) ; ) { String key = ( String ) e . nextElement ( ) ; if ( key . equals ( SchemaSymbols . ELT_PATTERN ) ) { fFacetsDefined += DatatypeValidator . FACET_PATTERN ; fPattern = ( String ) facets . get ( key ) ; if ( fPattern != null ) fRegex = new RegularExpression ( fPattern , "X" ) ; } else { throw new InvalidDatatypeFacetException ( "Only constraining facet in boolean datatype is PATTERN" ) ; } } } else { } } } public Object validate ( String content , Object state ) throws InvalidDatatypeValueException { checkContent ( content ) ; return null ; } public int compare ( String content1 , String content2 ) { return 0 ; } public Hashtable getFacets ( ) { return null ; } private void setBasetype ( DatatypeValidator base ) { fBaseValidator = base ; } private String getErrorString ( int major , int minor , Object args [ ] ) { try { return fMessageProvider . createMessage ( fLocale , major , minor , args ) ; } catch ( Exception e ) { return "Illegal Errorcode " + minor ; } } public Object clone ( ) throws CloneNotSupportedException { throw new CloneNotSupportedException ( "clone() is not supported in " + this . getClass ( ) . getName ( ) ) ; } private void checkContent ( String content ) throws InvalidDatatypeValueException { boolean isContentInDomain = false ; for ( int i = 0 ; i < fValueSpace . length ; i ++ ) { if ( content . equals ( fValueSpace [ i ] ) ) isContentInDomain = true ; } if ( isContentInDomain == false ) throw new InvalidDatatypeValueException ( getErrorString ( DatatypeMessageProvider . NotBoolean , DatatypeMessageProvider . MSG_NONE , new Object [ ] { content } ) ) ; if ( ( fFacetsDefined & DatatypeValidator . FACET_PATTERN ) != 0 ) { if ( fRegex == null || fRegex . matches ( content ) == false ) throw new InvalidDatatypeValueException ( "Value'" + content + "does not match regular expression facet" + fPattern ) ; } } } 	0	['10', '2', '0', '7', '29', '37', '1', '6', '6', '0.698412698', '228', '1', '3', '0.363636364', '0.263888889', '0', '0', '21.1', '1', '0.7', '0']
package org . apache . wml ; public interface WMLPrevElement extends WMLElement { } 	0	['0', '1', '0', '2', '0', '0', '1', '1', '0', '2', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0']
package org . w3c . dom . html ; public interface HTMLUListElement extends HTMLElement { public boolean getCompact ( ) ; public void setCompact ( boolean compact ) ; public String getType ( ) ; public void setType ( String type ) ; } 	0	['4', '1', '0', '0', '4', '6', '0', '0', '4', '2', '4', '0', '0', '0', '0.5', '0', '0', '0', '1', '1', '0']
package org . apache . html . dom ; import org . w3c . dom . * ; import org . w3c . dom . html . * ; public class HTMLDListElementImpl extends HTMLElementImpl implements HTMLDListElement { public boolean getCompact ( ) { return getBinary ( "compact" ) ; } public void setCompact ( boolean compact ) { setAttribute ( "compact" , compact ) ; } public HTMLDListElementImpl ( HTMLDocumentImpl owner , String name ) { super ( owner , name ) ; } } 	0	['3', '4', '0', '2', '6', '3', '0', '2', '3', '2', '17', '0', '0', '0.979166667', '0.5', '0', '0', '4.666666667', '1', '0.6667', '0']
package org . apache . xerces . dom ; import org . w3c . dom . * ; public class DocumentTypeImpl extends ParentNode implements DocumentType { static final long serialVersionUID = 7751299192316526485L ; protected String name ; protected NamedNodeMapImpl entities ; protected NamedNodeMapImpl notations ; protected NamedNodeMapImpl elements ; protected String publicID ; protected String systemID ; protected String internalSubset ; public DocumentTypeImpl ( DocumentImpl ownerDocument , String name ) { super ( ownerDocument ) ; this . name = name ; entities = new NamedNodeMapImpl ( this ) ; notations = new NamedNodeMapImpl ( this ) ; elements = new NamedNodeMapImpl ( this ) ; } public DocumentTypeImpl ( DocumentImpl ownerDocument , String qualifiedName , String publicID , String systemID ) { this ( ownerDocument , qualifiedName ) ; this . publicID = publicID ; this . systemID = systemID ; } public String getPublicId ( ) { if ( needsSyncData ( ) ) { synchronizeData ( ) ; } return publicID ; } public String getSystemId ( ) { if ( needsSyncData ( ) ) { synchronizeData ( ) ; } return systemID ; } public void setInternalSubset ( String internalSubset ) { if ( needsSyncData ( ) ) { synchronizeData ( ) ; } this . internalSubset = internalSubset ; } public String getInternalSubset ( ) { if ( needsSyncData ( ) ) { synchronizeData ( ) ; } return internalSubset ; } public short getNodeType ( ) { return Node . DOCUMENT_TYPE_NODE ; } public String getNodeName ( ) { if ( needsSyncData ( ) ) { synchronizeData ( ) ; } return name ; } public Node cloneNode ( boolean deep ) { DocumentTypeImpl newnode = ( DocumentTypeImpl ) super . cloneNode ( deep ) ; newnode . entities = entities . cloneMap ( newnode ) ; newnode . notations = notations . cloneMap ( newnode ) ; newnode . elements = elements . cloneMap ( newnode ) ; return newnode ; } void setOwnerDocument ( DocumentImpl doc ) { super . setOwnerDocument ( doc ) ; entities . setOwnerDocument ( doc ) ; notations . setOwnerDocument ( doc ) ; elements . setOwnerDocument ( doc ) ; } public String getName ( ) { if ( needsSyncData ( ) ) { synchronizeData ( ) ; } return name ; } public NamedNodeMap getEntities ( ) { if ( needsSyncChildren ( ) ) { synchronizeChildren ( ) ; } return entities ; } public NamedNodeMap getNotations ( ) { if ( needsSyncChildren ( ) ) { synchronizeChildren ( ) ; } return notations ; } public void setReadOnly ( boolean readOnly , boolean deep ) { if ( needsSyncChildren ( ) ) { synchronizeChildren ( ) ; } super . setReadOnly ( readOnly , deep ) ; elements . setReadOnly ( readOnly , true ) ; entities . setReadOnly ( readOnly , true ) ; notations . setReadOnly ( readOnly , true ) ; } public NamedNodeMap getElements ( ) { if ( needsSyncChildren ( ) ) { synchronizeChildren ( ) ; } return elements ; } } 	0	['15', '4', '1', '9', '27', '57', '6', '4', '14', '0.821428571', '200', '0.875', '3', '0.858695652', '0.383333333', '2', '8', '11.8', '2', '1.5333', '0']
package org . apache . xerces . validators . schema . identity ; public class Unique extends IdentityConstraint { public Unique ( String elementName ) { super ( elementName ) ; } public short getType ( ) { return UNIQUE ; } } 	0	['2', '2', '0', '4', '3', '1', '3', '1', '2', '2', '8', '0', '0', '0.888888889', '0.75', '0', '0', '3', '1', '0.5', '0']
package org . apache . html . dom ; import org . w3c . dom . * ; import org . w3c . dom . html . * ; public class HTMLMetaElementImpl extends HTMLElementImpl implements HTMLMetaElement { public String getContent ( ) { return getAttribute ( "content" ) ; } public void setContent ( String content ) { setAttribute ( "content" , content ) ; } public String getHttpEquiv ( ) { return getAttribute ( "http-equiv" ) ; } public void setHttpEquiv ( String httpEquiv ) { setAttribute ( "http-equiv" , httpEquiv ) ; } public String getName ( ) { return getAttribute ( "name" ) ; } public void setName ( String name ) { setAttribute ( "name" , name ) ; } public String getScheme ( ) { return getAttribute ( "scheme" ) ; } public void setScheme ( String scheme ) { setAttribute ( "scheme" , scheme ) ; } public HTMLMetaElementImpl ( HTMLDocumentImpl owner , String name ) { super ( owner , name ) ; } } 	0	['9', '4', '0', '2', '12', '36', '0', '2', '9', '2', '50', '0', '0', '0.921568627', '0.555555556', '0', '0', '4.555555556', '1', '0.8889', '0']
package org . apache . wml . dom ; import org . apache . wml . * ; public class WMLOptgroupElementImpl extends WMLElementImpl implements WMLOptgroupElement { public WMLOptgroupElementImpl ( WMLDocumentImpl owner , String tagName ) { super ( owner , tagName ) ; } public void setClassName ( String newValue ) { setAttribute ( "class" , newValue ) ; } public String getClassName ( ) { return getAttribute ( "class" ) ; } public void setXmlLang ( String newValue ) { setAttribute ( "xml:lang" , newValue ) ; } public String getXmlLang ( ) { return getAttribute ( "xml:lang" ) ; } public void setTitle ( String newValue ) { setAttribute ( "title" , newValue ) ; } public String getTitle ( ) { return getAttribute ( "title" ) ; } public void setId ( String newValue ) { setAttribute ( "id" , newValue ) ; } public String getId ( ) { return getAttribute ( "id" ) ; } } 	0	['9', '4', '0', '3', '12', '36', '0', '3', '9', '2', '50', '0', '0', '0.911111111', '0.555555556', '1', '6', '4.555555556', '1', '0.8889', '0']
package org . apache . xml . serialize ; public final class Method { public static final String XML = "xml" ; public static final String HTML = "html" ; public static final String XHTML = "xhtml" ; public static final String TEXT = "text" ; public static final String FOP = "fop" ; } 	0	['1', '1', '0', '0', '2', '0', '0', '0', '1', '2', '9', '0', '0', '0', '1', '0', '0', '3', '0', '0', '0']
package org . apache . wml ; public interface WMLSetvarElement extends WMLElement { public void setValue ( String newValue ) ; public String getValue ( ) ; public void setName ( String newValue ) ; public String getName ( ) ; } 	0	['4', '1', '0', '2', '4', '6', '1', '1', '4', '2', '4', '0', '0', '0', '0.75', '0', '0', '0', '1', '1', '0']
package org . apache . html . dom ; import org . w3c . dom . * ; import org . w3c . dom . html . * ; public class HTMLFieldSetElementImpl extends HTMLElementImpl implements HTMLFieldSetElement , HTMLFormControl { public HTMLFieldSetElementImpl ( HTMLDocumentImpl owner , String name ) { super ( owner , name ) ; } } 	0	['1', '4', '0', '3', '2', '0', '0', '3', '1', '2', '6', '0', '0', '1', '1', '0', '0', '5', '0', '0', '0']
package org . w3c . dom . html ; public interface HTMLAnchorElement extends HTMLElement { public String getAccessKey ( ) ; public void setAccessKey ( String accessKey ) ; public String getCharset ( ) ; public void setCharset ( String charset ) ; public String getCoords ( ) ; public void setCoords ( String coords ) ; public String getHref ( ) ; public void setHref ( String href ) ; public String getHreflang ( ) ; public void setHreflang ( String hreflang ) ; public String getName ( ) ; public void setName ( String name ) ; public String getRel ( ) ; public void setRel ( String rel ) ; public String getRev ( ) ; public void setRev ( String rev ) ; public String getShape ( ) ; public void setShape ( String shape ) ; public int getTabIndex ( ) ; public void setTabIndex ( int tabIndex ) ; public String getTarget ( ) ; public void setTarget ( String target ) ; public String getType ( ) ; public void setType ( String type ) ; public void blur ( ) ; public void focus ( ) ; } 	0	['26', '1', '0', '0', '26', '325', '0', '0', '26', '2', '26', '0', '0', '0', '0.487179487', '0', '0', '0', '1', '1', '0']
package org . apache . xerces . dom ; import org . w3c . dom . * ; public class TextImpl extends CharacterDataImpl implements CharacterData , Text { static final long serialVersionUID = - 5294980852957403469L ; public TextImpl ( DocumentImpl ownerDoc , String data ) { super ( ownerDoc , data ) ; } public short getNodeType ( ) { return Node . TEXT_NODE ; } public String getNodeName ( ) { return "#text" ; } public void setIgnorableWhitespace ( boolean ignore ) { if ( needsSyncData ( ) ) { synchronizeData ( ) ; } isIgnorableWhitespace ( ignore ) ; } public boolean isIgnorableWhitespace ( ) { if ( needsSyncData ( ) ) { synchronizeData ( ) ; } return internalIsIgnorableWhitespace ( ) ; } public Text splitText ( int offset ) throws DOMException { if ( isReadOnly ( ) ) { throw new DOMException ( DOMException . NO_MODIFICATION_ALLOWED_ERR , "DOM001 Modification not allowed" ) ; } if ( needsSyncData ( ) ) { synchronizeData ( ) ; } if ( offset < 0 || offset > data . length ( ) ) { throw new DOMException ( DOMException . INDEX_SIZE_ERR , "DOM004 Index out of bounds" ) ; } Text newText = getOwnerDocument ( ) . createTextNode ( data . substring ( offset ) ) ; setNodeValue ( data . substring ( 0 , offset ) ) ; Node parentNode = getParentNode ( ) ; if ( parentNode != null ) { parentNode . insertBefore ( newText , nextSibling ) ; } return newText ; } } 	0	['6', '3', '2', '9', '21', '15', '7', '3', '6', '1.2', '88', '0', '0', '0.915254237', '0.333333333', '1', '4', '13.5', '2', '1.1667', '0']
package org . xml . sax . helpers ; import java . io . IOException ; import org . xml . sax . XMLReader ; import org . xml . sax . XMLFilter ; import org . xml . sax . InputSource ; import org . xml . sax . Locator ; import org . xml . sax . Attributes ; import org . xml . sax . EntityResolver ; import org . xml . sax . DTDHandler ; import org . xml . sax . ContentHandler ; import org . xml . sax . ErrorHandler ; import org . xml . sax . SAXException ; import org . xml . sax . SAXParseException ; import org . xml . sax . SAXNotSupportedException ; import org . xml . sax . SAXNotRecognizedException ; public class XMLFilterImpl implements XMLFilter , EntityResolver , DTDHandler , ContentHandler , ErrorHandler { public XMLFilterImpl ( ) { super ( ) ; } public XMLFilterImpl ( XMLReader parent ) { super ( ) ; setParent ( parent ) ; } public void setParent ( XMLReader parent ) { if ( parent == null ) { throw new NullPointerException ( "Null parent" ) ; } this . parent = parent ; } public XMLReader getParent ( ) { return parent ; } public void setFeature ( String name , boolean state ) throws SAXNotRecognizedException , SAXNotSupportedException { if ( parent != null ) { parent . setFeature ( name , state ) ; } else { throw new SAXNotRecognizedException ( "Feature: " + name ) ; } } public boolean getFeature ( String name ) throws SAXNotRecognizedException , SAXNotSupportedException { if ( parent != null ) { return parent . getFeature ( name ) ; } else { throw new SAXNotRecognizedException ( "Feature: " + name ) ; } } public void setProperty ( String name , Object value ) throws SAXNotRecognizedException , SAXNotSupportedException { if ( parent != null ) { parent . setProperty ( name , value ) ; } else { throw new SAXNotRecognizedException ( "Property: " + name ) ; } } public Object getProperty ( String name ) throws SAXNotRecognizedException , SAXNotSupportedException { if ( parent != null ) { return parent . getProperty ( name ) ; } else { throw new SAXNotRecognizedException ( "Property: " + name ) ; } } public void setEntityResolver ( EntityResolver resolver ) { if ( resolver == null ) { throw new NullPointerException ( "Null entity resolver" ) ; } else { entityResolver = resolver ; } } public EntityResolver getEntityResolver ( ) { return entityResolver ; } public void setDTDHandler ( DTDHandler handler ) { if ( handler == null ) { throw new NullPointerException ( "Null DTD handler" ) ; } else { dtdHandler = handler ; } } public DTDHandler getDTDHandler ( ) { return dtdHandler ; } public void setContentHandler ( ContentHandler handler ) { if ( handler == null ) { throw new NullPointerException ( "Null content handler" ) ; } else { contentHandler = handler ; } } public ContentHandler getContentHandler ( ) { return contentHandler ; } public void setErrorHandler ( ErrorHandler handler ) { if ( handler == null ) { throw new NullPointerException ( "Null error handler" ) ; } else { errorHandler = handler ; } } public ErrorHandler getErrorHandler ( ) { return errorHandler ; } public void parse ( InputSource input ) throws SAXException , IOException { setupParse ( ) ; parent . parse ( input ) ; } public void parse ( String systemId ) throws SAXException , IOException { parse ( new InputSource ( systemId ) ) ; } public InputSource resolveEntity ( String publicId , String systemId ) throws SAXException , IOException { if ( entityResolver != null ) { return entityResolver . resolveEntity ( publicId , systemId ) ; } else { return null ; } } public void notationDecl ( String name , String publicId , String systemId ) throws SAXException { if ( dtdHandler != null ) { dtdHandler . notationDecl ( name , publicId , systemId ) ; } } public void unparsedEntityDecl ( String name , String publicId , String systemId , String notationName ) throws SAXException { if ( dtdHandler != null ) { dtdHandler . unparsedEntityDecl ( name , publicId , systemId , notationName ) ; } } public void setDocumentLocator ( Locator locator ) { this . locator = locator ; if ( contentHandler != null ) { contentHandler . setDocumentLocator ( locator ) ; } } public void startDocument ( ) throws SAXException { if ( contentHandler != null ) { contentHandler . startDocument ( ) ; } } public void endDocument ( ) throws SAXException { if ( contentHandler != null ) { contentHandler . endDocument ( ) ; } } public void startPrefixMapping ( String prefix , String uri ) throws SAXException { if ( contentHandler != null ) { contentHandler . startPrefixMapping ( prefix , uri ) ; } } public void endPrefixMapping ( String prefix ) throws SAXException { if ( contentHandler != null ) { contentHandler . endPrefixMapping ( prefix ) ; } } public void startElement ( String uri , String localName , String qName , Attributes atts ) throws SAXException { if ( contentHandler != null ) { contentHandler . startElement ( uri , localName , qName , atts ) ; } } public void endElement ( String uri , String localName , String qName ) throws SAXException { if ( contentHandler != null ) { contentHandler . endElement ( uri , localName , qName ) ; } } public void characters ( char ch [ ] , int start , int length ) throws SAXException { if ( contentHandler != null ) { contentHandler . characters ( ch , start , length ) ; } } public void ignorableWhitespace ( char ch [ ] , int start , int length ) throws SAXException { if ( contentHandler != null ) { contentHandler . ignorableWhitespace ( ch , start , length ) ; } } public void processingInstruction ( String target , String data ) throws SAXException { if ( contentHandler != null ) { contentHandler . processingInstruction ( target , data ) ; } } public void skippedEntity ( String name ) throws SAXException { if ( contentHandler != null ) { contentHandler . skippedEntity ( name ) ; } } public void warning ( SAXParseException e ) throws SAXException { if ( errorHandler != null ) { errorHandler . warning ( e ) ; } } public void error ( SAXParseException e ) throws SAXException { if ( errorHandler != null ) { errorHandler . error ( e ) ; } } public void fatalError ( SAXParseException e ) throws SAXException { if ( errorHandler != null ) { errorHandler . fatalError ( e ) ; } } private void setupParse ( ) { if ( parent == null ) { throw new NullPointerException ( "No parent for filter" ) ; } parent . setEntityResolver ( this ) ; parent . setDTDHandler ( this ) ; parent . setContentHandler ( this ) ; parent . setErrorHandler ( this ) ; } private XMLReader parent = null ; private Locator locator = null ; private EntityResolver entityResolver = null ; private DTDHandler dtdHandler = null ; private ContentHandler contentHandler = null ; private ErrorHandler errorHandler = null ; } 	0	['36', '1', '0', '0', '69', '246', '0', '0', '35', '0.804761905', '436', '1', '6', '0', '0.125925926', '0', '0', '10.94444444', '2', '1.1389', '0']
package org . w3c . dom . html ; public interface HTMLScriptElement extends HTMLElement { public String getText ( ) ; public void setText ( String text ) ; public String getHtmlFor ( ) ; public void setHtmlFor ( String htmlFor ) ; public String getEvent ( ) ; public void setEvent ( String event ) ; public String getCharset ( ) ; public void setCharset ( String charset ) ; public boolean getDefer ( ) ; public void setDefer ( boolean defer ) ; public String getSrc ( ) ; public void setSrc ( String src ) ; public String getType ( ) ; public void setType ( String type ) ; } 	0	['14', '1', '0', '0', '14', '91', '0', '0', '14', '2', '14', '0', '0', '0', '0.5', '0', '0', '0', '1', '1', '0']
package org . apache . xerces . readers ; import org . apache . xerces . framework . XMLErrorReporter ; abstract class XMLEntityReader implements XMLEntityHandler . EntityReader { protected XMLEntityHandler fEntityHandler = null ; protected XMLErrorReporter fErrorReporter = null ; protected boolean fSendCharDataAsCharArray ; protected XMLEntityHandler . CharDataHandler fCharDataHandler = null ; protected boolean fInCDSect = false ; private boolean fStillActive = true ; protected int fCarriageReturnCounter = 1 ; protected int fLinefeedCounter = 1 ; protected int fCharacterCounter = 1 ; protected int fCurrentOffset = 0 ; protected XMLEntityReader ( XMLEntityHandler entityHandler , XMLErrorReporter errorReporter , boolean sendCharDataAsCharArray ) { fEntityHandler = entityHandler ; fErrorReporter = errorReporter ; fSendCharDataAsCharArray = sendCharDataAsCharArray ; fCharDataHandler = fEntityHandler . getCharDataHandler ( ) ; } protected XMLEntityReader ( XMLEntityHandler entityHandler , XMLErrorReporter errorReporter , boolean sendCharDataAsCharArray , int lineNumber , int columnNumber ) { fEntityHandler = entityHandler ; fErrorReporter = errorReporter ; fSendCharDataAsCharArray = sendCharDataAsCharArray ; fCharDataHandler = fEntityHandler . getCharDataHandler ( ) ; fLinefeedCounter = lineNumber ; fCharacterCounter = columnNumber ; } protected void init ( XMLEntityHandler entityHandler , XMLErrorReporter errorReporter , boolean sendCharDataAsCharArray , int lineNumber , int columnNumber ) { fEntityHandler = entityHandler ; fErrorReporter = errorReporter ; fSendCharDataAsCharArray = sendCharDataAsCharArray ; fCharDataHandler = fEntityHandler . getCharDataHandler ( ) ; fLinefeedCounter = lineNumber ; fCharacterCounter = columnNumber ; fStillActive = true ; fInCDSect = false ; fCarriageReturnCounter = 1 ; fCurrentOffset = 0 ; } public int currentOffset ( ) { return fCurrentOffset ; } public int getLineNumber ( ) { if ( fLinefeedCounter > 1 ) return fLinefeedCounter ; else return fCarriageReturnCounter ; } public int getColumnNumber ( ) { return fCharacterCounter ; } public void setInCDSect ( boolean inCDSect ) { fInCDSect = inCDSect ; } public boolean getInCDSect ( ) { return fInCDSect ; } protected XMLEntityHandler . EntityReader changeReaders ( ) throws Exception { XMLEntityHandler . EntityReader nextReader = null ; if ( fStillActive ) { nextReader = fEntityHandler . changeReaders ( ) ; fStillActive = false ; } return nextReader ; } } 	0	['9', '1', '6', '10', '12', '0', '6', '4', '5', '0.65', '183', '1', '3', '0', '0.466666667', '0', '0', '18.22222222', '2', '0.8889', '0']
package org . apache . wml . dom ; import org . apache . wml . * ; public class WMLTemplateElementImpl extends WMLElementImpl implements WMLTemplateElement { public WMLTemplateElementImpl ( WMLDocumentImpl owner , String tagName ) { super ( owner , tagName ) ; } public void setOnTimer ( String newValue ) { setAttribute ( "ontimer" , newValue ) ; } public String getOnTimer ( ) { return getAttribute ( "ontimer" ) ; } public void setOnEnterBackward ( String newValue ) { setAttribute ( "onenterbackward" , newValue ) ; } public String getOnEnterBackward ( ) { return getAttribute ( "onenterbackward" ) ; } public void setClassName ( String newValue ) { setAttribute ( "class" , newValue ) ; } public String getClassName ( ) { return getAttribute ( "class" ) ; } public void setId ( String newValue ) { setAttribute ( "id" , newValue ) ; } public String getId ( ) { return getAttribute ( "id" ) ; } public void setOnEnterForward ( String newValue ) { setAttribute ( "onenterforward" , newValue ) ; } public String getOnEnterForward ( ) { return getAttribute ( "onenterforward" ) ; } } 	0	['11', '4', '0', '3', '14', '55', '0', '3', '11', '2', '61', '0', '0', '0.891304348', '0.545454545', '1', '4', '4.545454545', '1', '0.9091', '0']
package org . apache . html . dom ; import org . w3c . dom . * ; import org . w3c . dom . html . * ; import org . apache . xerces . dom . ElementImpl ; public class HTMLElementImpl extends ElementImpl implements HTMLElement { HTMLElementImpl ( HTMLDocumentImpl owner , String tagName ) { super ( owner , tagName . toUpperCase ( ) ) ; } public String getId ( ) { return getAttribute ( "id" ) ; } public void setId ( String id ) { setAttribute ( "id" , id ) ; } public String getTitle ( ) { return getAttribute ( "title" ) ; } public void setTitle ( String title ) { setAttribute ( "title" , title ) ; } public String getLang ( ) { return getAttribute ( "lang" ) ; } public void setLang ( String lang ) { setAttribute ( "lang" , lang ) ; } public String getDir ( ) { return getAttribute ( "dir" ) ; } public void setDir ( String dir ) { setAttribute ( "dir" , dir ) ; } public String getClassName ( ) { return getAttribute ( "class" ) ; } public void setClassName ( String className ) { setAttribute ( "class" , className ) ; } int getInteger ( String value ) { try { return Integer . parseInt ( value ) ; } catch ( NumberFormatException except ) { return 0 ; } } boolean getBinary ( String name ) { return ( getAttributeNode ( name ) != null ) ; } void setAttribute ( String name , boolean value ) { if ( value ) setAttribute ( name , name ) ; else removeAttribute ( name ) ; } public Attr getAttributeNode ( String attrName ) { return super . getAttributeNode ( attrName . toLowerCase ( ) ) ; } public Attr getAttributeNodeNS ( String namespaceURI , String localName ) { if ( namespaceURI != null && namespaceURI . length ( ) > 0 ) return super . getAttributeNodeNS ( namespaceURI , localName ) ; else return super . getAttributeNode ( localName . toLowerCase ( ) ) ; } public String getAttribute ( String attrName ) { return super . getAttribute ( attrName . toLowerCase ( ) ) ; } public String getAttributeNS ( String namespaceURI , String localName ) { if ( namespaceURI != null && namespaceURI . length ( ) > 0 ) return super . getAttributeNS ( namespaceURI , localName ) ; else return super . getAttribute ( localName . toLowerCase ( ) ) ; } public final NodeList getElementsByTagName ( String tagName ) { return super . getElementsByTagName ( tagName . toUpperCase ( ) ) ; } public final NodeList getElementsByTagNameNS ( String namespaceURI , String localName ) { if ( namespaceURI != null && namespaceURI . length ( ) > 0 ) return super . getElementsByTagNameNS ( namespaceURI , localName . toUpperCase ( ) ) ; else return super . getElementsByTagName ( localName . toUpperCase ( ) ) ; } String capitalize ( String value ) { char [ ] chars ; int i ; chars = value . toCharArray ( ) ; if ( chars . length > 0 ) { chars [ 0 ] = Character . toUpperCase ( chars [ 0 ] ) ; for ( i = 1 ; i < chars . length ; ++ i ) chars [ i ] = Character . toLowerCase ( chars [ i ] ) ; return String . valueOf ( chars ) ; } return value ; } String getCapitalized ( String name ) { String value ; char [ ] chars ; int i ; value = getAttribute ( name ) ; if ( value != null ) { chars = value . toCharArray ( ) ; if ( chars . length > 0 ) { chars [ 0 ] = Character . toUpperCase ( chars [ 0 ] ) ; for ( i = 1 ; i < chars . length ; ++ i ) chars [ i ] = Character . toLowerCase ( chars [ i ] ) ; return String . valueOf ( chars ) ; } } return value ; } public HTMLFormElement getForm ( ) { Node parent ; parent = getParentNode ( ) ; while ( parent != null ) { if ( parent instanceof HTMLFormElement ) return ( HTMLFormElement ) parent ; parent = parent . getParentNode ( ) ; } return null ; } } 	0	['23', '3', '52', '55', '42', '253', '53', '3', '17', '2', '249', '0', '0', '0.765957447', '0.456521739', '1', '2', '9.826086957', '4', '1.6087', '0']
package org . w3c . dom . html ; public interface HTMLPreElement extends HTMLElement { public int getWidth ( ) ; public void setWidth ( int width ) ; } 	0	['2', '1', '0', '0', '2', '1', '0', '0', '2', '2', '2', '0', '0', '0', '0.75', '0', '0', '0', '1', '1', '0']
package org . apache . html . dom ; import org . w3c . dom . * ; import org . w3c . dom . html . * ; public class HTMLBodyElementImpl extends HTMLElementImpl implements HTMLBodyElement { public String getALink ( ) { return getAttribute ( "alink" ) ; } public void setALink ( String aLink ) { setAttribute ( "alink" , aLink ) ; } public String getBackground ( ) { return getAttribute ( "background" ) ; } public void setBackground ( String background ) { setAttribute ( "background" , background ) ; } public String getBgColor ( ) { return getAttribute ( "bgcolor" ) ; } public void setBgColor ( String bgColor ) { setAttribute ( "bgcolor" , bgColor ) ; } public String getLink ( ) { return getAttribute ( "link" ) ; } public void setLink ( String link ) { setAttribute ( "link" , link ) ; } public String getText ( ) { return getAttribute ( "text" ) ; } public void setText ( String text ) { setAttribute ( "text" , text ) ; } public String getVLink ( ) { return getAttribute ( "vlink" ) ; } public void setVLink ( String vLink ) { setAttribute ( "vlink" , vLink ) ; } public HTMLBodyElementImpl ( HTMLDocumentImpl owner , String name ) { super ( owner , name ) ; } } 	0	['13', '4', '0', '2', '16', '78', '1', '2', '13', '2', '72', '0', '0', '0.886792453', '0.538461538', '0', '0', '4.538461538', '1', '0.9231', '0']
package org . apache . xerces . utils ; import org . apache . xerces . readers . XMLEntityHandler ; public final class CharDataChunk implements StringPool . StringProducer { public static final int CHUNK_SHIFT = 14 ; public static final int CHUNK_SIZE = ( 1 << CHUNK_SHIFT ) ; public static final int CHUNK_MASK = CHUNK_SIZE - 1 ; public static CharDataChunk createChunk ( StringPool stringPool , CharDataChunk prev ) { CharDataChunk newChunk = null ; synchronized ( CharDataChunk . class ) { newChunk = fgFreeChunks ; if ( newChunk != null ) { fgFreeChunks = newChunk . fNextChunk ; } else { newChunk = new CharDataChunk ( ) ; } } newChunk . fStringPool = stringPool ; newChunk . fRefCount = 1 ; newChunk . fChunk = prev == null ? 0 : prev . fChunk + 1 ; newChunk . fNextChunk = null ; newChunk . fPreviousChunk = prev ; if ( prev != null ) { prev . setNextChunk ( newChunk ) ; } return newChunk ; } public CharDataChunk chunkFor ( int offset ) { int firstChunk = offset > > CHUNK_SHIFT ; if ( firstChunk == fChunk ) return this ; CharDataChunk dataChunk = fPreviousChunk ; while ( firstChunk != dataChunk . fChunk ) dataChunk = dataChunk . fPreviousChunk ; return dataChunk ; } public char [ ] toCharArray ( ) { return fData ; } public void setCharArray ( char [ ] data ) { fData = data ; } public CharDataChunk nextChunk ( ) { return fNextChunk ; } public boolean clearPreviousChunk ( ) { if ( fPreviousChunk != null ) { fPreviousChunk . clearNextChunk ( ) ; fPreviousChunk . removeRef ( ) ; fPreviousChunk = null ; return true ; } return false ; } public void releaseChunk ( ) { removeRef ( ) ; } public int addString ( int offset , int length ) { int chunk = offset > > CHUNK_SHIFT ; if ( chunk != fChunk ) { if ( fPreviousChunk == null ) throw new RuntimeException ( new ImplementationMessages ( ) . createMessage ( null , ImplementationMessages . INT_PCN , 0 , null ) ) ; return fPreviousChunk . addString ( offset , length ) ; } int lastChunk = ( offset + length - 1 ) > > CHUNK_SHIFT ; if ( chunk == lastChunk ) { addRef ( ) ; return fStringPool . addString ( this , offset & CHUNK_MASK , length ) ; } String str = toString ( offset & CHUNK_MASK , length ) ; return fStringPool . addString ( str ) ; } public int addSymbol ( int offset , int length , int hashcode ) { int chunk = offset > > CHUNK_SHIFT ; if ( chunk != fChunk ) { if ( fPreviousChunk == null ) throw new RuntimeException ( new ImplementationMessages ( ) . createMessage ( null , ImplementationMessages . INT_PCN , 0 , null ) ) ; return fPreviousChunk . addSymbol ( offset , length , hashcode ) ; } int lastChunk = ( offset + length - 1 ) > > CHUNK_SHIFT ; int index = offset & CHUNK_MASK ; if ( chunk == lastChunk ) { if ( hashcode == 0 ) hashcode = StringHasher . hashChars ( fData , index , length ) ; int symbol = fStringPool . lookupSymbol ( this , offset & CHUNK_MASK , length , hashcode ) ; if ( symbol == - 1 ) { String str = toString ( offset & CHUNK_MASK , length ) ; symbol = fStringPool . addNewSymbol ( str , hashcode ) ; } return symbol ; } String str = toString ( offset & CHUNK_MASK , length ) ; return fStringPool . addSymbol ( str ) ; } public void append ( XMLEntityHandler . CharBuffer charBuffer , int offset , int length ) { CharDataChunk dataChunk = chunkFor ( offset ) ; int index = offset & CHUNK_MASK ; int nbytes = ( index + length <= CHUNK_SIZE ) ? length : CHUNK_SIZE - index ; while ( true ) { charBuffer . append ( dataChunk . fData , index , nbytes ) ; length -= nbytes ; if ( length == 0 ) break ; dataChunk = dataChunk . fNextChunk ; index = 0 ; nbytes = length <= CHUNK_SIZE ? length : CHUNK_SIZE ; } } public String toString ( int offset , int length ) { if ( offset + length <= CHUNK_SIZE ) { return new String ( fData , offset , length ) ; } StringBuffer sb = new StringBuffer ( length ) ; int nbytes = CHUNK_SIZE - offset ; sb . append ( fData , offset , nbytes ) ; length -= nbytes ; CharDataChunk aChunk = fNextChunk ; do { nbytes = length <= CHUNK_SIZE ? length : CHUNK_SIZE ; sb . append ( aChunk . fData , 0 , nbytes ) ; length -= nbytes ; aChunk = aChunk . fNextChunk ; } while ( length > 0 ) ; String retval = sb . toString ( ) ; sb = null ; return retval ; } public void releaseString ( int offset , int length ) { removeRef ( ) ; } public boolean equalsString ( int offset , int length , char [ ] strChars , int strOffset , int strLength ) { if ( length != strLength ) return false ; if ( offset + length <= CHUNK_SIZE ) { for ( int i = 0 ; i < length ; i ++ ) { if ( fData [ offset ++ ] != strChars [ strOffset ++ ] ) return false ; } return true ; } int nbytes = CHUNK_SIZE - offset ; length -= nbytes ; while ( nbytes -- > 0 ) { if ( fData [ offset ++ ] != strChars [ strOffset ++ ] ) return false ; } CharDataChunk aChunk = fNextChunk ; do { offset = 0 ; nbytes = length <= CHUNK_SIZE ? length : CHUNK_SIZE ; length -= nbytes ; while ( nbytes -- > 0 ) { if ( aChunk . fData [ offset ++ ] != strChars [ strOffset ++ ] ) return false ; } aChunk = aChunk . fNextChunk ; } while ( length > 0 ) ; return true ; } private CharDataChunk ( ) { } private void addRef ( ) { fRefCount ++ ; } private void removeRef ( ) { fRefCount -- ; if ( fRefCount == 0 ) { fStringPool = null ; fChunk = - 1 ; fPreviousChunk = null ; synchronized ( CharDataChunk . class ) { fNextChunk = null ; fgFreeChunks = this ; } } } private void clearNextChunk ( ) { if ( fNextChunk != null ) fNextChunk . removeRef ( ) ; fNextChunk = null ; } private void setNextChunk ( CharDataChunk nextChunk ) { if ( fNextChunk != null ) { throw new RuntimeException ( "CharDataChunk::setNextChunk" ) ; } nextChunk . addRef ( ) ; fNextChunk = nextChunk ; } private StringPool fStringPool ; private int fRefCount ; private int fChunk ; private char [ ] fData = null ; private CharDataChunk fNextChunk ; private CharDataChunk fPreviousChunk ; private static CharDataChunk fgFreeChunks = null ; } 	0	['20', '1', '0', '10', '38', '62', '5', '5', '13', '0.708133971', '601', '0.636363636', '4', '0', '0.233082707', '0', '0', '28.5', '11', '2.65', '0']
package org . apache . xerces . utils ; public final class SymbolCache { public static final int CHAR_OFFSET = 0 ; public static final int INDEX_OFFSET = 1 ; public static final int NEXT_OFFSET = 2 ; public static final int CACHE_RECORD_SIZE = 3 ; public static final int INITIAL_CACHE_RECORD_COUNT = 4 ; public char [ ] fSymbolChars = new char [ 8192 ] ; public int fSymbolCharsOffset = 0 ; public int [ ] [ ] fCacheLines = new int [ 8 ] [ ] ; public int fCacheLineCount = 0 ; public SymbolCache ( ) { fCacheLines [ fCacheLineCount ++ ] = new int [ 1 + ( INITIAL_CACHE_RECORD_COUNT * CACHE_RECORD_SIZE ) ] ; } public void reset ( ) { fSymbolCharsOffset = 0 ; fCacheLineCount = 0 ; fCacheLines [ fCacheLineCount ++ ] = new int [ 1 + ( INITIAL_CACHE_RECORD_COUNT * CACHE_RECORD_SIZE ) ] ; } public char [ ] getSymbolChars ( ) { return fSymbolChars ; } public String createSymbol ( int symbolHandle , int startOffset , int entry , int [ ] entries , int offset ) { int slen = fSymbolCharsOffset - startOffset ; String str = new String ( fSymbolChars , startOffset , slen ) ; try { entries [ offset + SymbolCache . INDEX_OFFSET ] = symbolHandle ; } catch ( ArrayIndexOutOfBoundsException ex ) { throw new RuntimeException ( "UTL001 untested" ) ; } return str ; } public int addSymbolToCache ( String str , int slen , int symbolHandle ) { int charsOffset = fSymbolCharsOffset ; if ( slen == 0 ) return charsOffset ; int strIndex = 0 ; char ch = str . charAt ( strIndex ++ ) ; try { fSymbolChars [ fSymbolCharsOffset ] = ch ; } catch ( ArrayIndexOutOfBoundsException ex ) { char [ ] newChars = new char [ fSymbolChars . length * 2 ] ; System . arraycopy ( fSymbolChars , 0 , newChars , 0 , fSymbolChars . length ) ; fSymbolChars = newChars ; fSymbolChars [ fSymbolCharsOffset ] = ch ; } fSymbolCharsOffset ++ ; int entry = 0 ; int [ ] entries = fCacheLines [ entry ] ; int count = entries [ 0 ] ; int i = 0 ; int offset = 1 ; while ( true ) { if ( i == count ) break ; if ( entries [ offset + CHAR_OFFSET ] != ch ) { i ++ ; offset += CACHE_RECORD_SIZE ; continue ; } if ( strIndex == slen ) { if ( entries [ offset + INDEX_OFFSET ] != - 1 ) { throw new RuntimeException ( "addSymbolToCache" ) ; } entries [ offset + INDEX_OFFSET ] = symbolHandle ; return charsOffset ; } ch = str . charAt ( strIndex ++ ) ; try { fSymbolChars [ fSymbolCharsOffset ] = ch ; } catch ( ArrayIndexOutOfBoundsException ex ) { char [ ] newChars = new char [ fSymbolChars . length * 2 ] ; System . arraycopy ( fSymbolChars , 0 , newChars , 0 , fSymbolChars . length ) ; fSymbolChars = newChars ; fSymbolChars [ fSymbolCharsOffset ] = ch ; } fSymbolCharsOffset ++ ; entry = entries [ offset + NEXT_OFFSET ] ; try { entries = fCacheLines [ entry ] ; } catch ( ArrayIndexOutOfBoundsException ex ) { if ( entry == - 1 ) { entry = fCacheLineCount ++ ; entries [ offset + NEXT_OFFSET ] = entry ; entries = new int [ 1 + ( INITIAL_CACHE_RECORD_COUNT * CACHE_RECORD_SIZE ) ] ; try { fCacheLines [ entry ] = entries ; } catch ( ArrayIndexOutOfBoundsException ex2 ) { int [ ] [ ] newCache = new int [ entry * 2 ] [ ] ; System . arraycopy ( fCacheLines , 0 , newCache , 0 , entry ) ; fCacheLines = newCache ; fCacheLines [ entry ] = entries ; } } else { entries = fCacheLines [ entry ] ; throw new RuntimeException ( "UTL001 untested" ) ; } } count = entries [ 0 ] ; i = 0 ; offset = 1 ; } while ( true ) { entries [ 0 ] ++ ; try { entries [ offset + CHAR_OFFSET ] = ch ; } catch ( ArrayIndexOutOfBoundsException ex ) { int newSize = 1 + ( ( offset - 1 ) * 2 ) ; int [ ] newEntries = new int [ newSize ] ; System . arraycopy ( entries , 0 , newEntries , 0 , offset ) ; fCacheLines [ entry ] = entries = newEntries ; entries [ offset + CHAR_OFFSET ] = ch ; } if ( strIndex == slen ) { entries [ offset + INDEX_OFFSET ] = symbolHandle ; entries [ offset + NEXT_OFFSET ] = - 1 ; break ; } entry = fCacheLineCount ++ ; entries [ offset + INDEX_OFFSET ] = - 1 ; entries [ offset + NEXT_OFFSET ] = entry ; entries = new int [ 1 + ( INITIAL_CACHE_RECORD_COUNT * CACHE_RECORD_SIZE ) ] ; try { fCacheLines [ entry ] = entries ; } catch ( ArrayIndexOutOfBoundsException ex ) { int [ ] [ ] newCache = new int [ entry * 2 ] [ ] ; System . arraycopy ( fCacheLines , 0 , newCache , 0 , entry ) ; fCacheLines = newCache ; fCacheLines [ entry ] = entries ; } offset = 1 ; ch = str . charAt ( strIndex ++ ) ; try { fSymbolChars [ fSymbolCharsOffset ] = ch ; } catch ( ArrayIndexOutOfBoundsException ex ) { char [ ] newChars = new char [ fSymbolChars . length * 2 ] ; System . arraycopy ( fSymbolChars , 0 , newChars , 0 , fSymbolChars . length ) ; fSymbolChars = newChars ; fSymbolChars [ fSymbolCharsOffset ] = ch ; } fSymbolCharsOffset ++ ; } return charsOffset ; } public void updateCacheLine ( int charsOffset , int totalMisses , int length ) { int entry = 0 ; int [ ] entries = fCacheLines [ 0 ] ; int ch = fSymbolChars [ charsOffset ++ ] ; int count = entries [ 0 ] ; int offset = 1 + ( ( count - 1 ) * CACHE_RECORD_SIZE ) ; int misses = 0 ; while ( true ) { if ( ch != entries [ offset + CHAR_OFFSET ] ) { offset -= CACHE_RECORD_SIZE ; misses ++ ; continue ; } if ( misses > 4 ) { int symIndex = entries [ offset + INDEX_OFFSET ] ; int nextIndex = entries [ offset + NEXT_OFFSET ] ; System . arraycopy ( entries , offset + CACHE_RECORD_SIZE , entries , offset , misses * CACHE_RECORD_SIZE ) ; offset = 1 + ( ( count - 1 ) * CACHE_RECORD_SIZE ) ; entries [ offset + CHAR_OFFSET ] = ch ; entries [ offset + INDEX_OFFSET ] = symIndex ; entries [ offset + NEXT_OFFSET ] = nextIndex ; } if ( -- length == 0 ) break ; entry = entries [ offset + NEXT_OFFSET ] ; entries = fCacheLines [ entry ] ; ch = fSymbolChars [ charsOffset ++ ] ; count = entries [ 0 ] ; offset = 1 + ( ( count - 1 ) * CACHE_RECORD_SIZE ) ; misses = 0 ; } } } 	0	['6', '1', '0', '2', '11', '0', '2', '0', '6', '0.844444444', '608', '0', '0', '0', '0.458333333', '0', '0', '98.83333333', '8', '2.5', '0']
package org . apache . xerces . readers ; import org . apache . xerces . framework . XMLErrorReporter ; import org . apache . xerces . utils . QName ; import org . apache . xerces . utils . StringPool ; import org . xml . sax . EntityResolver ; import org . xml . sax . InputSource ; import org . xml . sax . Locator ; import java . io . InputStream ; public interface XMLEntityHandler extends Locator { public static final int CHARREF_RESULT_SEMICOLON_REQUIRED = - 1 , CHARREF_RESULT_INVALID_CHAR = - 2 , CHARREF_RESULT_OUT_OF_RANGE = - 3 ; public static final int STRINGLIT_RESULT_QUOTE_REQUIRED = - 1 , STRINGLIT_RESULT_INVALID_CHAR = - 2 ; public static final int ATTVALUE_RESULT_COMPLEX = - 1 , ATTVALUE_RESULT_LESSTHAN = - 2 , ATTVALUE_RESULT_INVALID_CHAR = - 3 ; public static final int ENTITYVALUE_RESULT_FINISHED = - 1 , ENTITYVALUE_RESULT_REFERENCE = - 2 , ENTITYVALUE_RESULT_PEREF = - 3 , ENTITYVALUE_RESULT_INVALID_CHAR = - 4 , ENTITYVALUE_RESULT_END_OF_INPUT = - 5 ; public static final int CONTENT_RESULT_START_OF_PI = 0 , CONTENT_RESULT_START_OF_COMMENT = 1 , CONTENT_RESULT_START_OF_CDSECT = 2 , CONTENT_RESULT_END_OF_CDSECT = 3 , CONTENT_RESULT_START_OF_ETAG = 4 , CONTENT_RESULT_MATCHING_ETAG = 5 , CONTENT_RESULT_START_OF_ELEMENT = 6 , CONTENT_RESULT_START_OF_CHARREF = 7 , CONTENT_RESULT_START_OF_ENTITYREF = 8 , CONTENT_RESULT_INVALID_CHAR = 9 , CONTENT_RESULT_MARKUP_NOT_RECOGNIZED = 10 , CONTENT_RESULT_MARKUP_END_OF_INPUT = 11 , CONTENT_RESULT_REFERENCE_END_OF_INPUT = 12 ; public static final int ENTITYTYPE_INTERNAL_PE = 0 , ENTITYTYPE_EXTERNAL_PE = 1 , ENTITYTYPE_INTERNAL = 2 , ENTITYTYPE_EXTERNAL = 3 , ENTITYTYPE_UNPARSED = 4 , ENTITYTYPE_DOCUMENT = 5 , ENTITYTYPE_EXTERNAL_SUBSET = 6 ; public static final int ENTITYREF_IN_ATTVALUE = 0 , ENTITYREF_IN_DEFAULTATTVALUE = 1 , ENTITYREF_IN_CONTENT = 2 , ENTITYREF_IN_DTD_AS_MARKUP = 3 , ENTITYREF_IN_ENTITYVALUE = 4 , ENTITYREF_IN_DTD_WITHIN_MARKUP = 5 , ENTITYREF_DOCUMENT = 6 , ENTITYREF_EXTERNAL_SUBSET = 7 ; public boolean startReadingFromDocument ( InputSource source ) throws Exception ; public boolean startReadingFromEntity ( int entityName , int readerDepth , int entityContext ) throws Exception ; public String expandSystemId ( String systemId ) ; public interface DTDHandler { public void startReadingFromExternalSubset ( String publicId , String systemId , int readerDepth ) throws Exception ; public void stopReadingFromExternalSubset ( ) throws Exception ; public boolean startEntityDecl ( boolean isPE , int entityName ) throws Exception ; public void endEntityDecl ( ) throws Exception ; public int addInternalPEDecl ( int entityName , int value , boolean isExternal ) throws Exception ; public int addExternalPEDecl ( int entityName , int publicId , int systemId , boolean isExternal ) throws Exception ; public int addInternalEntityDecl ( int entityName , int value , boolean isExternal ) throws Exception ; public int addExternalEntityDecl ( int entityName , int publicId , int systemId , boolean isExternal ) throws Exception ; public int addUnparsedEntityDecl ( int entityName , int publicId , int systemId , int notationName , boolean isExternal ) throws Exception ; public int addNotationDecl ( int notationName , int publicId , int systemId , boolean isExternal ) throws Exception ; public boolean isUnparsedEntity ( int entityName ) ; public boolean isNotationDeclared ( int entityName ) ; public void addRequiredNotation ( int notationName , Locator locator , int majorCode , int minorCode , Object [ ] args ) ; public void checkRequiredNotations ( ) throws Exception ; } public int getReaderId ( ) ; public void setReaderDepth ( int depth ) ; public int getReaderDepth ( ) ; public EntityReader getEntityReader ( ) ; public EntityReader changeReaders ( ) throws Exception ; public interface CharBuffer { public void append ( char ch ) ; public void append ( char [ ] chars , int offset , int length ) ; public int length ( ) ; public int addString ( int offset , int length ) ; } public void setCharDataHandler ( XMLEntityHandler . CharDataHandler charDataHandler ) ; public XMLEntityHandler . CharDataHandler getCharDataHandler ( ) ; public interface CharDataHandler { public void processCharacters ( char [ ] chars , int offset , int length ) throws Exception ; public void processCharacters ( int stringHandle ) throws Exception ; public void processWhitespace ( char [ ] chars , int offset , int length ) throws Exception ; public void processWhitespace ( int stringHandle ) throws Exception ; } public interface EntityReader { public int currentOffset ( ) ; public int getLineNumber ( ) ; public int getColumnNumber ( ) ; public void setInCDSect ( boolean inCDSect ) ; public boolean getInCDSect ( ) ; public void append ( XMLEntityHandler . CharBuffer charBuffer , int offset , int length ) ; public int addString ( int offset , int length ) ; public int addSymbol ( int offset , int length ) ; public boolean lookingAtChar ( char ch , boolean skipPastChar ) throws Exception ; public boolean lookingAtValidChar ( boolean skipPastChar ) throws Exception ; public boolean lookingAtSpace ( boolean skipPastChar ) throws Exception ; public void skipToChar ( char ch ) throws Exception ; public void skipPastSpaces ( ) throws Exception ; public void skipPastName ( char fastcheck ) throws Exception ; public void skipPastNmtoken ( char fastcheck ) throws Exception ; public boolean skippedString ( char [ ] s ) throws Exception ; public int scanInvalidChar ( ) throws Exception ; public int scanCharRef ( boolean isHexadecimal ) throws Exception ; public int scanStringLiteral ( ) throws Exception ; public int scanAttValue ( char qchar , boolean asSymbol ) throws Exception ; public int scanEntityValue ( int qchar , boolean createString ) throws Exception ; public int scanName ( char fastcheck ) throws Exception ; public boolean scanExpectedName ( char fastcheck , StringPool . CharArrayRange expectedName ) throws Exception ; public void scanQName ( char fastcheck , QName qname ) throws Exception ; public int scanContent ( QName element ) throws Exception ; } } 	0	['10', '1', '0', '22', '10', '45', '20', '2', '10', '1.111111111', '51', '0', '0', '0', '0.3', '0', '0', '0', '1', '1', '0']
package org . apache . xerces . dom ; import java . io . * ; import java . util . Vector ; import java . util . Enumeration ; import org . w3c . dom . * ; public class NamedNodeMapImpl implements NamedNodeMap , Serializable { static final long serialVersionUID = - 7039242451046758020L ; protected short flags ; protected final static short READONLY = 0x1 << 0 ; protected final static short CHANGED = 0x1 << 1 ; protected final static short HASDEFAULTS = 0x1 << 2 ; protected Vector nodes ; protected NodeImpl ownerNode ; protected NamedNodeMapImpl ( NodeImpl ownerNode ) { this . ownerNode = ownerNode ; } public int getLength ( ) { return ( nodes != null ) ? nodes . size ( ) : 0 ; } public Node item ( int index ) { return ( nodes != null && index < nodes . size ( ) ) ? ( Node ) ( nodes . elementAt ( index ) ) : null ; } public Node getNamedItem ( String name ) { int i = findNamePoint ( name , 0 ) ; return ( i < 0 ) ? null : ( Node ) ( nodes . elementAt ( i ) ) ; } public Node getNamedItemNS ( String namespaceURI , String localName ) { int i = findNamePoint ( namespaceURI , localName ) ; return ( i < 0 ) ? null : ( Node ) ( nodes . elementAt ( i ) ) ; } public Node setNamedItem ( Node arg ) throws DOMException { if ( isReadOnly ( ) ) { throw new DOMException ( DOMException . NO_MODIFICATION_ALLOWED_ERR , "DOM001 Modification not allowed" ) ; } if ( arg . getOwnerDocument ( ) != ownerNode . ownerDocument ( ) ) { throw new DOMException ( DOMException . WRONG_DOCUMENT_ERR , "DOM005 Wrong document" ) ; } int i = findNamePoint ( arg . getNodeName ( ) , 0 ) ; NodeImpl previous = null ; if ( i >= 0 ) { previous = ( NodeImpl ) nodes . elementAt ( i ) ; nodes . setElementAt ( arg , i ) ; } else { i = - 1 - i ; if ( null == nodes ) { nodes = new Vector ( 5 , 10 ) ; } nodes . insertElementAt ( arg , i ) ; } return previous ; } public Node setNamedItemNS ( Node arg ) throws DOMException { if ( isReadOnly ( ) ) { throw new DOMException ( DOMException . NO_MODIFICATION_ALLOWED_ERR , "DOM001 Modification not allowed" ) ; } if ( arg . getOwnerDocument ( ) != ownerNode . ownerDocument ( ) ) { throw new DOMException ( DOMException . WRONG_DOCUMENT_ERR , "DOM005 Wrong document" ) ; } int i = findNamePoint ( arg . getNamespaceURI ( ) , arg . getLocalName ( ) ) ; NodeImpl previous = null ; if ( i >= 0 ) { previous = ( NodeImpl ) nodes . elementAt ( i ) ; nodes . setElementAt ( arg , i ) ; } else { i = findNamePoint ( arg . getNodeName ( ) , 0 ) ; if ( i >= 0 ) { previous = ( NodeImpl ) nodes . elementAt ( i ) ; nodes . insertElementAt ( arg , i ) ; } else { i = - 1 - i ; if ( null == nodes ) { nodes = new Vector ( 5 , 10 ) ; } nodes . insertElementAt ( arg , i ) ; } } return previous ; } public Node removeNamedItem ( String name ) throws DOMException { if ( isReadOnly ( ) ) { throw new DOMException ( DOMException . NO_MODIFICATION_ALLOWED_ERR , "DOM001 Modification not allowed" ) ; } int i = findNamePoint ( name , 0 ) ; if ( i < 0 ) { throw new DOMException ( DOMException . NOT_FOUND_ERR , "DOM008 Not found" ) ; } NodeImpl n = ( NodeImpl ) nodes . elementAt ( i ) ; nodes . removeElementAt ( i ) ; return n ; } public Node removeNamedItemNS ( String namespaceURI , String name ) throws DOMException { if ( isReadOnly ( ) ) { throw new DOMException ( DOMException . NO_MODIFICATION_ALLOWED_ERR , "DOM001 Modification not allowed" ) ; } int i = findNamePoint ( namespaceURI , name ) ; if ( i < 0 ) { throw new DOMException ( DOMException . NOT_FOUND_ERR , "DOM008 Not found" ) ; } NodeImpl n = ( NodeImpl ) nodes . elementAt ( i ) ; nodes . removeElementAt ( i ) ; return n ; } public NamedNodeMapImpl cloneMap ( NodeImpl ownerNode ) { NamedNodeMapImpl newmap = new NamedNodeMapImpl ( ownerNode ) ; newmap . cloneContent ( this ) ; return newmap ; } protected void cloneContent ( NamedNodeMapImpl srcmap ) { if ( srcmap . nodes != null ) { nodes = new Vector ( srcmap . nodes . size ( ) ) ; for ( int i = 0 ; i < srcmap . nodes . size ( ) ; ++ i ) { NodeImpl n = ( NodeImpl ) srcmap . nodes . elementAt ( i ) ; NodeImpl clone = ( NodeImpl ) n . cloneNode ( true ) ; clone . isSpecified ( n . isSpecified ( ) ) ; nodes . insertElementAt ( clone , i ) ; } } } void setReadOnly ( boolean readOnly , boolean deep ) { isReadOnly ( readOnly ) ; if ( deep && nodes != null ) { Enumeration e = nodes . elements ( ) ; while ( e . hasMoreElements ( ) ) { ( ( NodeImpl ) e . nextElement ( ) ) . setReadOnly ( readOnly , deep ) ; } } } boolean getReadOnly ( ) { return isReadOnly ( ) ; } void setOwnerDocument ( DocumentImpl doc ) { if ( nodes != null ) { for ( int i = 0 ; i < nodes . size ( ) ; i ++ ) { ( ( NodeImpl ) item ( i ) ) . setOwnerDocument ( doc ) ; } } } final boolean isReadOnly ( ) { return ( flags & READONLY ) != 0 ; } final void isReadOnly ( boolean value ) { flags = ( short ) ( value ? flags | READONLY : flags & ~ READONLY ) ; } final boolean changed ( ) { return ( flags & CHANGED ) != 0 ; } final void changed ( boolean value ) { flags = ( short ) ( value ? flags | CHANGED : flags & ~ CHANGED ) ; } final boolean hasDefaults ( ) { return ( flags & HASDEFAULTS ) != 0 ; } final void hasDefaults ( boolean value ) { flags = ( short ) ( value ? flags | HASDEFAULTS : flags & ~ HASDEFAULTS ) ; } protected int findNamePoint ( String name , int start ) { int i = 0 ; if ( nodes != null ) { int first = start ; int last = nodes . size ( ) - 1 ; while ( first <= last ) { i = ( first + last ) / 2 ; int test = name . compareTo ( ( ( Node ) ( nodes . elementAt ( i ) ) ) . getNodeName ( ) ) ; if ( test == 0 ) { return i ; } else if ( test < 0 ) { last = i - 1 ; } else { first = i + 1 ; } } if ( first > i ) { i = first ; } } return - 1 - i ; } protected int findNamePoint ( String namespaceURI , String name ) { if ( nodes == null ) return - 1 ; if ( name == null ) return - 1 ; for ( int i = 0 ; i < nodes . size ( ) ; i ++ ) { NodeImpl a = ( NodeImpl ) nodes . elementAt ( i ) ; String aNamespaceURI = a . getNamespaceURI ( ) ; String aLocalName = a . getLocalName ( ) ; if ( namespaceURI == null ) { if ( aNamespaceURI == null && ( name . equals ( aLocalName ) || ( aLocalName == null && name . equals ( a . getNodeName ( ) ) ) ) ) return i ; } else { if ( namespaceURI . equals ( aNamespaceURI ) && name . equals ( aLocalName ) ) return i ; } } return - 1 ; } } 	0	['22', '1', '1', '8', '49', '41', '6', '2', '9', '0.843537415', '596', '0.857142857', '1', '0', '0.227272727', '0', '0', '25.77272727', '11', '2.4545', '0']
package org . apache . wml . dom ; import org . apache . wml . * ; public class WMLStrongElementImpl extends WMLElementImpl implements WMLStrongElement { public WMLStrongElementImpl ( WMLDocumentImpl owner , String tagName ) { super ( owner , tagName ) ; } public void setClassName ( String newValue ) { setAttribute ( "class" , newValue ) ; } public String getClassName ( ) { return getAttribute ( "class" ) ; } public void setXmlLang ( String newValue ) { setAttribute ( "xml:lang" , newValue ) ; } public String getXmlLang ( ) { return getAttribute ( "xml:lang" ) ; } public void setId ( String newValue ) { setAttribute ( "id" , newValue ) ; } public String getId ( ) { return getAttribute ( "id" ) ; } } 	0	['7', '4', '0', '3', '10', '21', '0', '3', '7', '2', '39', '0', '0', '0.931818182', '0.571428571', '1', '6', '4.571428571', '1', '0.8571', '0']
package org . apache . xerces . utils ; import java . lang . * ; public final class Base64 { static private final int BASELENGTH = 255 ; static private final int LOOKUPLENGTH = 64 ; static private final int TWENTYFOURBITGROUP = 24 ; static private final int EIGHTBIT = 8 ; static private final int SIXTEENBIT = 16 ; static private final int SIXBIT = 6 ; static private final int FOURBYTE = 4 ; static private final int SIGN = - 128 ; static private final byte PAD = ( byte ) '=' ; static private final boolean fDebug = false ; static private byte [ ] base64Alphabet = new byte [ BASELENGTH ] ; static private byte [ ] lookUpBase64Alphabet = new byte [ LOOKUPLENGTH ] ; static { for ( int i = 0 ; i < BASELENGTH ; i ++ ) { base64Alphabet [ i ] = - 1 ; } for ( int i = 'Z' ; i >= 'A' ; i -- ) { base64Alphabet [ i ] = ( byte ) ( i - 'A' ) ; } for ( int i = 'z' ; i >= 'a' ; i -- ) { base64Alphabet [ i ] = ( byte ) ( i - 'a' + 26 ) ; } for ( int i = '9' ; i >= '0' ; i -- ) { base64Alphabet [ i ] = ( byte ) ( i - '0' + 52 ) ; } base64Alphabet [ '+' ] = 62 ; base64Alphabet [ '/' ] = 63 ; for ( int i = 0 ; i <= 25 ; i ++ ) lookUpBase64Alphabet [ i ] = ( byte ) ( 'A' + i ) ; for ( int i = 26 , j = 0 ; i <= 51 ; i ++ , j ++ ) lookUpBase64Alphabet [ i ] = ( byte ) ( 'a' + j ) ; for ( int i = 52 , j = 0 ; i <= 61 ; i ++ , j ++ ) lookUpBase64Alphabet [ i ] = ( byte ) ( '0' + j ) ; lookUpBase64Alphabet [ 62 ] = ( byte ) '+' ; lookUpBase64Alphabet [ 63 ] = ( byte ) '/' ; } public static boolean isBase64 ( String isValidString ) { return ( isArrayByteBase64 ( isValidString . getBytes ( ) ) ) ; } public static boolean isBase64 ( byte octect ) { return ( octect == PAD || base64Alphabet [ octect ] != - 1 ) ; } public static boolean isArrayByteBase64 ( byte [ ] arrayOctect ) { int length = arrayOctect . length ; if ( length == 0 ) return false ; for ( int i = 0 ; i < length ; i ++ ) { if ( Base64 . isBase64 ( arrayOctect [ i ] ) == false ) return false ; } return true ; } public static byte [ ] encode ( byte [ ] binaryData ) { int lengthDataBits = binaryData . length * EIGHTBIT ; int fewerThan24bits = lengthDataBits % TWENTYFOURBITGROUP ; int numberTriplets = lengthDataBits / TWENTYFOURBITGROUP ; byte encodedData [ ] = null ; if ( fewerThan24bits != 0 ) encodedData = new byte [ ( numberTriplets + 1 ) * 4 ] ; else encodedData = new byte [ numberTriplets * 4 ] ; byte k = 0 , l = 0 , b1 = 0 , b2 = 0 , b3 = 0 ; int encodedIndex = 0 ; int dataIndex = 0 ; int i = 0 ; if ( fDebug ) { System . out . println ( "number of triplets = " + numberTriplets ) ; } for ( i = 0 ; i < numberTriplets ; i ++ ) { dataIndex = i * 3 ; b1 = binaryData [ dataIndex ] ; b2 = binaryData [ dataIndex + 1 ] ; b3 = binaryData [ dataIndex + 2 ] ; if ( fDebug ) { System . out . println ( "b1= " + b1 + ", b2= " + b2 + ", b3= " + b3 ) ; } l = ( byte ) ( b2 & 0x0f ) ; k = ( byte ) ( b1 & 0x03 ) ; encodedIndex = i * 4 ; byte val1 = ( ( b1 & SIGN ) == 0 ) ? ( byte ) ( b1 > > 2 ) : ( byte ) ( ( b1 ) > > 2 ^ 0xc0 ) ; byte val2 = ( ( b2 & SIGN ) == 0 ) ? ( byte ) ( b2 > > 4 ) : ( byte ) ( ( b2 ) > > 4 ^ 0xf0 ) ; byte val3 = ( ( b3 & SIGN ) == 0 ) ? ( byte ) ( b3 > > 6 ) : ( byte ) ( ( b3 ) > > 6 ^ 0xfc ) ; encodedData [ encodedIndex ] = lookUpBase64Alphabet [ val1 ] ; if ( fDebug ) { System . out . println ( "val2 = " + val2 ) ; System . out . println ( "k4   = " + ( k << 4 ) ) ; System . out . println ( "vak  = " + ( val2 | ( k << 4 ) ) ) ; } encodedData [ encodedIndex + 1 ] = lookUpBase64Alphabet [ val2 | ( k << 4 ) ] ; encodedData [ encodedIndex + 2 ] = lookUpBase64Alphabet [ ( l << 2 ) | val3 ] ; encodedData [ encodedIndex + 3 ] = lookUpBase64Alphabet [ b3 & 0x3f ] ; } dataIndex = i * 3 ; encodedIndex = i * 4 ; if ( fewerThan24bits == EIGHTBIT ) { b1 = binaryData [ dataIndex ] ; k = ( byte ) ( b1 & 0x03 ) ; if ( fDebug ) { System . out . println ( "b1=" + b1 ) ; System . out . println ( "b1<<2 = " + ( b1 > > 2 ) ) ; } byte val1 = ( ( b1 & SIGN ) == 0 ) ? ( byte ) ( b1 > > 2 ) : ( byte ) ( ( b1 ) > > 2 ^ 0xc0 ) ; encodedData [ encodedIndex ] = lookUpBase64Alphabet [ val1 ] ; encodedData [ encodedIndex + 1 ] = lookUpBase64Alphabet [ k << 4 ] ; encodedData [ encodedIndex + 2 ] = PAD ; encodedData [ encodedIndex + 3 ] = PAD ; } else if ( fewerThan24bits == SIXTEENBIT ) { b1 = binaryData [ dataIndex ] ; b2 = binaryData [ dataIndex + 1 ] ; l = ( byte ) ( b2 & 0x0f ) ; k = ( byte ) ( b1 & 0x03 ) ; byte val1 = ( ( b1 & SIGN ) == 0 ) ? ( byte ) ( b1 > > 2 ) : ( byte ) ( ( b1 ) > > 2 ^ 0xc0 ) ; byte val2 = ( ( b2 & SIGN ) == 0 ) ? ( byte ) ( b2 > > 4 ) : ( byte ) ( ( b2 ) > > 4 ^ 0xf0 ) ; encodedData [ encodedIndex ] = lookUpBase64Alphabet [ val1 ] ; encodedData [ encodedIndex + 1 ] = lookUpBase64Alphabet [ val2 | ( k << 4 ) ] ; encodedData [ encodedIndex + 2 ] = lookUpBase64Alphabet [ l << 2 ] ; encodedData [ encodedIndex + 3 ] = PAD ; } return encodedData ; } public static byte [ ] decode ( byte [ ] base64Data ) { int numberQuadruple = base64Data . length / FOURBYTE ; byte decodedData [ ] = null ; byte b1 = 0 , b2 = 0 , b3 = 0 , b4 = 0 , marker0 = 0 , marker1 = 0 ; int encodedIndex = 0 ; int dataIndex = 0 ; decodedData = new byte [ numberQuadruple * 3 + 1 ] ; for ( int i = 0 ; i < numberQuadruple ; i ++ ) { dataIndex = i * 4 ; marker0 = base64Data [ dataIndex + 2 ] ; marker1 = base64Data [ dataIndex + 3 ] ; b1 = base64Alphabet [ base64Data [ dataIndex ] ] ; b2 = base64Alphabet [ base64Data [ dataIndex + 1 ] ] ; if ( marker0 != PAD && marker1 != PAD ) { b3 = base64Alphabet [ marker0 ] ; b4 = base64Alphabet [ marker1 ] ; decodedData [ encodedIndex ] = ( byte ) ( b1 << 2 | b2 > > 4 ) ; decodedData [ encodedIndex + 1 ] = ( byte ) ( ( ( b2 & 0xf ) << 4 ) | ( ( b3 > > 2 ) & 0xf ) ) ; decodedData [ encodedIndex + 2 ] = ( byte ) ( b3 << 6 | b4 ) ; } else if ( marker0 == PAD ) { decodedData [ encodedIndex ] = ( byte ) ( b1 << 2 | b2 > > 4 ) ; decodedData [ encodedIndex + 1 ] = ( byte ) ( ( b2 & 0xf ) << 4 ) ; decodedData [ encodedIndex + 2 ] = ( byte ) 0 ; } else if ( marker1 == PAD ) { b3 = base64Alphabet [ marker0 ] ; decodedData [ encodedIndex ] = ( byte ) ( b1 << 2 | b2 > > 4 ) ; decodedData [ encodedIndex + 1 ] = ( byte ) ( ( ( b2 & 0xf ) << 4 ) | ( ( b3 > > 2 ) & 0xf ) ) ; decodedData [ encodedIndex + 2 ] = ( byte ) ( b3 << 6 ) ; } encodedIndex += 3 ; } return decodedData ; } } 	0	['7', '1', '0', '1', '9', '13', '1', '0', '6', '1.083333333', '720', '1', '0', '0', '0.25', '0', '0', '100.1428571', '11', '3.5714', '0']
package org . apache . xml . serialize ; import java . io . ByteArrayOutputStream ; import java . io . IOException ; import java . io . OutputStreamWriter ; import java . io . Writer ; public class SieveEncodingInfo extends EncodingInfo { BAOutputStream checkerStream = null ; Writer checkerWriter = null ; String dangerChars = null ; public SieveEncodingInfo ( String mimeName , String javaName , int lastPrintable , String dangers ) { super ( mimeName , javaName , lastPrintable ) ; this . dangerChars = dangers ; } public SieveEncodingInfo ( String mimeName , int lastPrintable ) { this ( mimeName , mimeName , lastPrintable , null ) ; } public boolean isPrintable ( int ch ) { if ( this . dangerChars != null && ch <= 0xffff ) { if ( this . dangerChars . indexOf ( ch ) >= 0 ) return false ; } if ( ch <= this . lastPrintable ) return true ; boolean printable = true ; synchronized ( this ) { try { if ( this . checkerWriter == null ) { this . checkerStream = new BAOutputStream ( 10 ) ; this . checkerWriter = new OutputStreamWriter ( this . checkerStream , this . javaName ) ; } if ( ch > 0xffff ) { this . checkerWriter . write ( ( ( ch - 0x10000 ) > > 10 ) + 0xd800 ) ; this . checkerWriter . write ( ( ( ch - 0x10000 ) & 0x3ff ) + 0xdc00 ) ; byte [ ] result = this . checkerStream . getBuffer ( ) ; if ( this . checkerStream . size ( ) == 2 && result [ 0 ] == '?' && result [ 1 ] == '?' ) printable = false ; } else { this . checkerWriter . write ( ch ) ; this . checkerWriter . flush ( ) ; byte [ ] result = this . checkerStream . getBuffer ( ) ; if ( this . checkerStream . size ( ) == 1 && result [ 0 ] == '?' ) printable = false ; } this . checkerStream . reset ( ) ; } catch ( IOException ioe ) { printable = false ; } } return printable ; } static class BAOutputStream extends ByteArrayOutputStream { BAOutputStream ( ) { super ( ) ; } BAOutputStream ( int size ) { super ( size ) ; } byte [ ] getBuffer ( ) { return this . buf ; } } } 	0	['3', '2', '0', '3', '12', '1', '1', '2', '3', '0', '159', '0', '1', '0.75', '0.888888889', '0', '0', '51', '9', '3', '0']
package org . w3c . dom . html ; public interface HTMLHRElement extends HTMLElement { public String getAlign ( ) ; public void setAlign ( String align ) ; public boolean getNoShade ( ) ; public void setNoShade ( boolean noShade ) ; public String getSize ( ) ; public void setSize ( String size ) ; public String getWidth ( ) ; public void setWidth ( String width ) ; } 	0	['8', '1', '0', '0', '8', '28', '0', '0', '8', '2', '8', '0', '0', '0', '0.5', '0', '0', '0', '1', '1', '0']
package org . apache . xerces . framework ; import org . apache . xerces . utils . QName ; public interface XMLDocumentHandler { public void startDocument ( ) throws Exception ; public void endDocument ( ) throws Exception ; public void xmlDecl ( int version , int encoding , int standalone ) throws Exception ; public void textDecl ( int version , int encoding ) throws Exception ; public void startNamespaceDeclScope ( int prefix , int uri ) throws Exception ; public void endNamespaceDeclScope ( int prefix ) throws Exception ; public void startElement ( QName element , XMLAttrList attrList , int attrListHandle ) throws Exception ; public void endElement ( QName element ) throws Exception ; public void startEntityReference ( int entityName , int entityType , int entityContext ) throws Exception ; public void endEntityReference ( int entityName , int entityType , int entityContext ) throws Exception ; public void processingInstruction ( int target , int data ) throws Exception ; public void comment ( int comment ) throws Exception ; public void characters ( int data ) throws Exception ; public void characters ( char ch [ ] , int start , int length ) throws Exception ; public void ignorableWhitespace ( int data ) throws Exception ; public void ignorableWhitespace ( char ch [ ] , int start , int length ) throws Exception ; public void startCDATA ( ) throws Exception ; public void endCDATA ( ) throws Exception ; public interface DTDHandler { public void startDTD ( QName rootElement , int publicId , int systemId ) throws Exception ; public void internalSubset ( int internalSubset ) throws Exception ; public void textDecl ( int version , int encoding ) throws Exception ; public void endDTD ( ) throws Exception ; public void elementDecl ( QName elementDecl , int contentSpecType , int contentSpecIndex , XMLContentSpec . Provider contentSpecProvider ) throws Exception ; public void attlistDecl ( QName elementDecl , QName attributeDecl , int attType , boolean attList , String enumString , int attDefaultType , int attDefaultValue ) throws Exception ; public void internalPEDecl ( int entityName , int entityValue ) throws Exception ; public void externalPEDecl ( int entityName , int publicId , int systemId ) throws Exception ; public void internalEntityDecl ( int entityName , int entityValue ) throws Exception ; public void externalEntityDecl ( int entityName , int publicId , int systemId ) throws Exception ; public void unparsedEntityDecl ( int entityName , int publicId , int systemId , int notationName ) throws Exception ; public void notationDecl ( int notationName , int publicId , int systemId ) throws Exception ; public void processingInstruction ( int targetIndex , int dataIndex ) throws Exception ; public void comment ( int dataIndex ) throws Exception ; } } 	0	['18', '1', '0', '6', '18', '153', '4', '2', '18', '2', '18', '0', '0', '0', '0.4', '0', '0', '0', '1', '1', '0']
package org . apache . html . dom ; import org . w3c . dom . * ; import org . w3c . dom . html . * ; public class HTMLObjectElementImpl extends HTMLElementImpl implements HTMLObjectElement , HTMLFormControl { public String getCode ( ) { return getAttribute ( "code" ) ; } public void setCode ( String code ) { setAttribute ( "code" , code ) ; } public String getAlign ( ) { return capitalize ( getAttribute ( "align" ) ) ; } public void setAlign ( String align ) { setAttribute ( "align" , align ) ; } public String getArchive ( ) { return getAttribute ( "archive" ) ; } public void setArchive ( String archive ) { setAttribute ( "archive" , archive ) ; } public String getBorder ( ) { return getAttribute ( "border" ) ; } public void setBorder ( String border ) { setAttribute ( "border" , border ) ; } public String getCodeBase ( ) { return getAttribute ( "codebase" ) ; } public void setCodeBase ( String codeBase ) { setAttribute ( "codebase" , codeBase ) ; } public String getCodeType ( ) { return getAttribute ( "codetype" ) ; } public void setCodeType ( String codeType ) { setAttribute ( "codetype" , codeType ) ; } public String getData ( ) { return getAttribute ( "data" ) ; } public void setData ( String data ) { setAttribute ( "data" , data ) ; } public boolean getDeclare ( ) { return getBinary ( "declare" ) ; } public void setDeclare ( boolean declare ) { setAttribute ( "declare" , declare ) ; } public String getHeight ( ) { return getAttribute ( "height" ) ; } public void setHeight ( String height ) { setAttribute ( "height" , height ) ; } public String getHspace ( ) { return getAttribute ( "hspace" ) ; } public void setHspace ( String hspace ) { setAttribute ( "hspace" , hspace ) ; } public String getName ( ) { return getAttribute ( "name" ) ; } public void setName ( String name ) { setAttribute ( "name" , name ) ; } public String getStandby ( ) { return getAttribute ( "standby" ) ; } public void setStandby ( String standby ) { setAttribute ( "standby" , standby ) ; } public int getTabIndex ( ) { try { return Integer . parseInt ( getAttribute ( "tabindex" ) ) ; } catch ( NumberFormatException except ) { return 0 ; } } public void setTabIndex ( int tabIndex ) { setAttribute ( "tabindex" , String . valueOf ( tabIndex ) ) ; } public String getType ( ) { return getAttribute ( "type" ) ; } public void setType ( String type ) { setAttribute ( "type" , type ) ; } public String getUseMap ( ) { return getAttribute ( "useMap" ) ; } public void setUseMap ( String useMap ) { setAttribute ( "useMap" , useMap ) ; } public String getVspace ( ) { return getAttribute ( "vspace" ) ; } public void setVspace ( String vspace ) { setAttribute ( "vspace" , vspace ) ; } public String getWidth ( ) { return getAttribute ( "width" ) ; } public void setWidth ( String width ) { setAttribute ( "width" , width ) ; } public HTMLObjectElementImpl ( HTMLDocumentImpl owner , String name ) { super ( owner , name ) ; } } 	0	['35', '4', '0', '3', '43', '595', '0', '3', '35', '2', '200', '0', '0', '0.734375', '0.308571429', '0', '0', '4.714285714', '1', '0.9714', '0']
package org . apache . wml ; public interface WMLCardElement extends WMLElement { public void setOnEnterBackward ( String href ) ; public String getOnEnterBackward ( ) ; public void setOnEnterForward ( String href ) ; public String getOnEnterForward ( ) ; public void setOnTimer ( String href ) ; public String getOnTimer ( ) ; public void setTitle ( String newValue ) ; public String getTitle ( ) ; public void setNewContext ( boolean newValue ) ; public boolean getNewContext ( ) ; public void setOrdered ( boolean newValue ) ; public boolean getOrdered ( ) ; public void setXmlLang ( String newValue ) ; public String getXmlLang ( ) ; } 	0	['14', '1', '0', '2', '14', '91', '1', '1', '14', '2', '14', '0', '0', '0', '0.5', '0', '0', '0', '1', '1', '0']
package org . apache . xerces . readers ; import org . apache . xerces . framework . XMLErrorReporter ; import org . apache . xerces . utils . ChunkyByteArray ; import org . apache . xerces . utils . StringPool ; import org . xml . sax . InputSource ; import java . io . InputStream ; import java . io . InputStreamReader ; import java . io . Reader ; import java . net . URL ; import java . util . Stack ; public class DefaultReaderFactory implements XMLEntityReaderFactory { private static final boolean USE_CHAR_READER_FOR_UTF8 = false ; private static final boolean USE_BYTE_READER_FOR_UTF8 = true ; private boolean fSendCharDataAsCharArray = false ; private boolean fAllowJavaEncodingName = false ; private Stack fRecognizers = null ; public DefaultReaderFactory ( ) { } public void addRecognizer ( XMLDeclRecognizer recognizer ) { if ( fRecognizers == null ) { fRecognizers = new Stack ( ) ; XMLDeclRecognizer . registerDefaultRecognizers ( fRecognizers ) ; } fRecognizers . push ( recognizer ) ; } public void setSendCharDataAsCharArray ( boolean flag ) { fSendCharDataAsCharArray = flag ; } public void setAllowJavaEncodingName ( boolean flag ) { fAllowJavaEncodingName = flag ; } public boolean getAllowJavaEncodingName ( ) { return fAllowJavaEncodingName ; } public XMLEntityHandler . EntityReader createReader ( XMLEntityHandler entityHandler , XMLErrorReporter errorReporter , InputSource source , String systemId , boolean xmlDecl , StringPool stringPool ) throws Exception { if ( source . getCharacterStream ( ) != null ) { return createCharReader ( entityHandler , errorReporter , fSendCharDataAsCharArray , source . getCharacterStream ( ) , stringPool ) ; } if ( source . getEncoding ( ) != null && source . getByteStream ( ) != null ) { java . io . Reader reader = new InputStreamReader ( source . getByteStream ( ) , source . getEncoding ( ) ) ; return createCharReader ( entityHandler , errorReporter , fSendCharDataAsCharArray , reader , stringPool ) ; } InputStream is = source . getByteStream ( ) ; if ( is == null ) { URL url = new URL ( systemId ) ; is = url . openStream ( ) ; } ChunkyByteArray data = new ChunkyByteArray ( is ) ; if ( fRecognizers == null ) { fRecognizers = new Stack ( ) ; XMLDeclRecognizer . registerDefaultRecognizers ( fRecognizers ) ; } for ( int i = fRecognizers . size ( ) - 1 ; i >= 0 ; i -- ) { XMLDeclRecognizer recognizer = ( XMLDeclRecognizer ) fRecognizers . elementAt ( i ) ; XMLEntityHandler . EntityReader reader = recognizer . recognize ( this , entityHandler , errorReporter , fSendCharDataAsCharArray , stringPool , data , xmlDecl , fAllowJavaEncodingName ) ; if ( reader != null ) { return reader ; } } return createUTF8Reader ( entityHandler , errorReporter , fSendCharDataAsCharArray , data , stringPool ) ; } public XMLEntityHandler . EntityReader createCharReader ( XMLEntityHandler entityHandler , XMLErrorReporter errorReporter , boolean sendCharDataAsCharArray , Reader reader , StringPool stringPool ) throws Exception { return new CharReader ( entityHandler , errorReporter , sendCharDataAsCharArray , reader , stringPool ) ; } public XMLEntityHandler . EntityReader createUTF8Reader ( XMLEntityHandler entityHandler , XMLErrorReporter errorReporter , boolean sendCharDataAsCharArray , InputStream data , StringPool stringPool ) throws Exception { XMLEntityHandler . EntityReader reader ; if ( USE_CHAR_READER_FOR_UTF8 ) { reader = new CharReader ( entityHandler , errorReporter , sendCharDataAsCharArray , new InputStreamReader ( data , "UTF8" ) , stringPool ) ; } else if ( USE_BYTE_READER_FOR_UTF8 ) { reader = new UTF8Reader ( entityHandler , errorReporter , sendCharDataAsCharArray , data , stringPool ) ; } else { reader = new UTF8CharReader ( entityHandler , errorReporter , sendCharDataAsCharArray , data , stringPool ) ; } return reader ; } public XMLEntityHandler . EntityReader createStringReader ( XMLEntityHandler entityHandler , XMLErrorReporter errorReporter , boolean sendCharDataAsCharArray , int lineNumber , int columnNumber , int stringHandle , StringPool stringPool , boolean addEnclosingSpaces ) throws Exception { return StringReader . createStringReader ( entityHandler , errorReporter , sendCharDataAsCharArray , lineNumber , columnNumber , stringHandle , stringPool , addEnclosingSpaces ) ; } } 	0	['9', '1', '0', '11', '26', '16', '1', '10', '9', '0.875', '191', '1', '0', '0', '0.333333333', '0', '0', '19.66666667', '2', '1', '0']
package org . w3c . dom ; public interface NamedNodeMap { public Node getNamedItem ( String name ) ; public Node setNamedItem ( Node arg ) throws DOMException ; public Node removeNamedItem ( String name ) throws DOMException ; public Node item ( int index ) ; public int getLength ( ) ; public Node getNamedItemNS ( String namespaceURI , String localName ) ; public Node setNamedItemNS ( Node arg ) throws DOMException ; public Node removeNamedItemNS ( String namespaceURI , String localName ) throws DOMException ; } 	0	['8', '1', '0', '0', '8', '28', '0', '0', '8', '2', '8', '0', '0', '0', '0.46875', '0', '0', '0', '1', '1', '0']
package org . apache . xerces . validators . common ; import java . util . Vector ; import org . apache . xerces . utils . QName ; import org . apache . xerces . validators . datatype . DatatypeValidator ; public class XMLElementDecl { public static final int TYPE_EMPTY = 0 ; public static final int TYPE_ANY = 1 ; public static final int TYPE_MIXED = 2 ; public static final int TYPE_CHILDREN = 3 ; public static final int TYPE_SIMPLE = 4 ; public final QName name = new QName ( ) ; public int type ; public boolean list ; public DatatypeValidator datatypeValidator ; public int contentSpecIndex ; public int enclosingScope ; public final Vector unique = new Vector ( ) ; public final Vector key = new Vector ( ) ; public final Vector keyRef = new Vector ( ) ; public XMLElementDecl ( ) { clear ( ) ; } public XMLElementDecl ( XMLElementDecl elementDecl ) { setValues ( elementDecl ) ; } public void clear ( ) { name . clear ( ) ; type = - 1 ; list = false ; datatypeValidator = null ; contentSpecIndex = - 1 ; enclosingScope = - 1 ; unique . removeAllElements ( ) ; key . removeAllElements ( ) ; keyRef . removeAllElements ( ) ; } public void setValues ( XMLElementDecl elementDecl ) { name . setValues ( elementDecl . name ) ; type = elementDecl . type ; list = elementDecl . list ; datatypeValidator = elementDecl . datatypeValidator ; contentSpecIndex = elementDecl . contentSpecIndex ; enclosingScope = elementDecl . enclosingScope ; } public int hashCode ( ) { return super . hashCode ( ) ; } public boolean equals ( Object object ) { return super . equals ( object ) ; } } 	0	['6', '1', '0', '9', '14', '3', '7', '2', '6', '0.728571429', '132', '0', '2', '0', '0.5', '1', '1', '18.66666667', '1', '0.6667', '0']
package org . apache . html . dom ; import org . w3c . dom . * ; import org . w3c . dom . html . * ; public class HTMLOListElementImpl extends HTMLElementImpl implements HTMLOListElement { public boolean getCompact ( ) { return getBinary ( "compact" ) ; } public void setCompact ( boolean compact ) { setAttribute ( "compact" , compact ) ; } public int getStart ( ) { return getInteger ( getAttribute ( "start" ) ) ; } public void setStart ( int start ) { setAttribute ( "start" , String . valueOf ( start ) ) ; } public String getType ( ) { return getAttribute ( "type" ) ; } public void setType ( String type ) { setAttribute ( "type" , type ) ; } public HTMLOListElementImpl ( HTMLDocumentImpl owner , String name ) { super ( owner , name ) ; } } 	0	['7', '4', '0', '2', '14', '21', '0', '2', '7', '2', '42', '0', '0', '0.94', '0.342857143', '0', '0', '5', '1', '0.8571', '0']
package org . apache . xerces . validators . schema ; import org . apache . xerces . dom . AttrImpl ; import org . apache . xerces . dom . DocumentImpl ; import org . w3c . dom . Attr ; import org . w3c . dom . Document ; import org . w3c . dom . DOMException ; import org . w3c . dom . Element ; import org . w3c . dom . NamedNodeMap ; import org . w3c . dom . Node ; public class XUtil { protected XUtil ( ) { } public static void copyInto ( Node src , Node dest ) throws DOMException { Document factory = dest . getOwnerDocument ( ) ; boolean domimpl = factory instanceof DocumentImpl ; Node start = src ; Node parent = src ; Node place = src ; while ( place != null ) { Node node = null ; int type = place . getNodeType ( ) ; switch ( type ) { case Node . CDATA_SECTION_NODE : { node = factory . createCDATASection ( place . getNodeValue ( ) ) ; break ; } case Node . COMMENT_NODE : { node = factory . createComment ( place . getNodeValue ( ) ) ; break ; } case Node . ELEMENT_NODE : { Element element = factory . createElement ( place . getNodeName ( ) ) ; node = element ; NamedNodeMap attrs = place . getAttributes ( ) ; int attrCount = attrs . getLength ( ) ; for ( int i = 0 ; i < attrCount ; i ++ ) { Attr attr = ( Attr ) attrs . item ( i ) ; String attrName = attr . getNodeName ( ) ; String attrValue = attr . getNodeValue ( ) ; element . setAttribute ( attrName , attrValue ) ; if ( domimpl && ! attr . getSpecified ( ) ) { ( ( AttrImpl ) element . getAttributeNode ( attrName ) ) . setSpecified ( false ) ; } } break ; } case Node . ENTITY_REFERENCE_NODE : { node = factory . createEntityReference ( place . getNodeName ( ) ) ; break ; } case Node . PROCESSING_INSTRUCTION_NODE : { node = factory . createProcessingInstruction ( place . getNodeName ( ) , place . getNodeValue ( ) ) ; break ; } case Node . TEXT_NODE : { node = factory . createTextNode ( place . getNodeValue ( ) ) ; break ; } default : { throw new IllegalArgumentException ( "can't copy node type, " + type + " (" + node . getNodeName ( ) + ')' ) ; } } dest . appendChild ( node ) ; if ( place . hasChildNodes ( ) ) { parent = place ; place = place . getFirstChild ( ) ; dest = node ; } else { place = place . getNextSibling ( ) ; while ( place == null && parent != start ) { place = parent . getNextSibling ( ) ; parent = parent . getParentNode ( ) ; dest = dest . getParentNode ( ) ; } } } } public static Element getFirstChildElement ( Node parent ) { Node child = parent . getFirstChild ( ) ; while ( child != null ) { if ( child . getNodeType ( ) == Node . ELEMENT_NODE ) { return ( Element ) child ; } child = child . getNextSibling ( ) ; } return null ; } public static Element getLastChildElement ( Node parent ) { Node child = parent . getLastChild ( ) ; while ( child != null ) { if ( child . getNodeType ( ) == Node . ELEMENT_NODE ) { return ( Element ) child ; } child = child . getPreviousSibling ( ) ; } return null ; } public static Element getNextSiblingElement ( Node node ) { Node sibling = node . getNextSibling ( ) ; while ( sibling != null ) { if ( sibling . getNodeType ( ) == Node . ELEMENT_NODE ) { return ( Element ) sibling ; } sibling = sibling . getNextSibling ( ) ; } return null ; } public static Element getFirstChildElement ( Node parent , String elemName ) { Node child = parent . getFirstChild ( ) ; while ( child != null ) { if ( child . getNodeType ( ) == Node . ELEMENT_NODE ) { if ( child . getNodeName ( ) . equals ( elemName ) ) { return ( Element ) child ; } } child = child . getNextSibling ( ) ; } return null ; } public static Element getLastChildElement ( Node parent , String elemName ) { Node child = parent . getLastChild ( ) ; while ( child != null ) { if ( child . getNodeType ( ) == Node . ELEMENT_NODE ) { if ( child . getNodeName ( ) . equals ( elemName ) ) { return ( Element ) child ; } } child = child . getPreviousSibling ( ) ; } return null ; } public static Element getNextSiblingElement ( Node node , String elemName ) { Node sibling = node . getNextSibling ( ) ; while ( sibling != null ) { if ( sibling . getNodeType ( ) == Node . ELEMENT_NODE ) { if ( sibling . getNodeName ( ) . equals ( elemName ) ) { return ( Element ) sibling ; } } sibling = sibling . getNextSibling ( ) ; } return null ; } public static Element getFirstChildElement ( Node parent , String elemNames [ ] ) { Node child = parent . getFirstChild ( ) ; while ( child != null ) { if ( child . getNodeType ( ) == Node . ELEMENT_NODE ) { for ( int i = 0 ; i < elemNames . length ; i ++ ) { if ( child . getNodeName ( ) . equals ( elemNames [ i ] ) ) { return ( Element ) child ; } } } child = child . getNextSibling ( ) ; } return null ; } public static Element getLastChildElement ( Node parent , String elemNames [ ] ) { Node child = parent . getLastChild ( ) ; while ( child != null ) { if ( child . getNodeType ( ) == Node . ELEMENT_NODE ) { for ( int i = 0 ; i < elemNames . length ; i ++ ) { if ( child . getNodeName ( ) . equals ( elemNames [ i ] ) ) { return ( Element ) child ; } } } child = child . getPreviousSibling ( ) ; } return null ; } public static Element getNextSiblingElement ( Node node , String elemNames [ ] ) { Node sibling = node . getNextSibling ( ) ; while ( sibling != null ) { if ( sibling . getNodeType ( ) == Node . ELEMENT_NODE ) { for ( int i = 0 ; i < elemNames . length ; i ++ ) { if ( sibling . getNodeName ( ) . equals ( elemNames [ i ] ) ) { return ( Element ) sibling ; } } } sibling = sibling . getNextSibling ( ) ; } return null ; } public static Element getFirstChildElement ( Node parent , String elemName , String attrName , String attrValue ) { Node child = parent . getFirstChild ( ) ; while ( child != null ) { if ( child . getNodeType ( ) == Node . ELEMENT_NODE ) { Element element = ( Element ) child ; if ( element . getNodeName ( ) . equals ( elemName ) && element . getAttribute ( attrName ) . equals ( attrValue ) ) { return element ; } } child = child . getNextSibling ( ) ; } return null ; } public static Element getLastChildElement ( Node parent , String elemName , String attrName , String attrValue ) { Node child = parent . getLastChild ( ) ; while ( child != null ) { if ( child . getNodeType ( ) == Node . ELEMENT_NODE ) { Element element = ( Element ) child ; if ( element . getNodeName ( ) . equals ( elemName ) && element . getAttribute ( attrName ) . equals ( attrValue ) ) { return element ; } } child = child . getPreviousSibling ( ) ; } return null ; } public static Element getNextSiblingElement ( Node node , String elemName , String attrName , String attrValue ) { Node sibling = node . getNextSibling ( ) ; while ( sibling != null ) { if ( sibling . getNodeType ( ) == Node . ELEMENT_NODE ) { Element element = ( Element ) sibling ; if ( element . getNodeName ( ) . equals ( elemName ) && element . getAttribute ( attrName ) . equals ( attrValue ) ) { return element ; } } sibling = sibling . getNextSibling ( ) ; } return null ; } public static String getChildText ( Node node ) { if ( node == null ) { return null ; } StringBuffer str = new StringBuffer ( ) ; Node child = node . getFirstChild ( ) ; while ( child != null ) { short type = child . getNodeType ( ) ; if ( type == Node . TEXT_NODE ) { str . append ( child . getNodeValue ( ) ) ; } else if ( type == Node . CDATA_SECTION_NODE ) { str . append ( getChildText ( child ) ) ; } child = child . getNextSibling ( ) ; } return str . toString ( ) ; } } 	0	['15', '1', '0', '5', '51', '105', '3', '2', '14', '2', '527', '0', '0', '0', '0.4', '0', '0', '34.13333333', '5', '3.8', '0']
package org . apache . xerces . readers ; import org . apache . xerces . framework . XMLErrorReporter ; import org . apache . xerces . utils . ChunkyByteArray ; import org . apache . xerces . utils . QName ; import org . apache . xerces . utils . StringPool ; import java . io . InputStreamReader ; import java . io . IOException ; import java . io . UnsupportedEncodingException ; final class UTF8Recognizer extends XMLDeclRecognizer { private byte [ ] fUTF8BOM = { ( byte ) 0xEF , ( byte ) 0xBB , ( byte ) 0xBF } ; public XMLEntityHandler . EntityReader recognize ( XMLEntityReaderFactory readerFactory , XMLEntityHandler entityHandler , XMLErrorReporter errorReporter , boolean sendCharDataAsCharArray , StringPool stringPool , ChunkyByteArray data , boolean xmlDecl , boolean allowJavaEncodingName ) throws Exception { XMLEntityHandler . EntityReader reader = null ; boolean seeBOM = false ; byte bom0 = data . byteAt ( 0 ) ; if ( bom0 == fUTF8BOM [ 0 ] ) { byte bom1 = data . byteAt ( 1 ) ; if ( bom1 == fUTF8BOM [ 1 ] ) { byte bom2 = data . byteAt ( 2 ) ; if ( bom2 == fUTF8BOM [ 2 ] ) { seeBOM = true ; } } } if ( seeBOM ) { data . read ( fUTF8BOM , 0 , 3 ) ; } byte b0 = data . byteAt ( 0 ) ; boolean debug = false ; if ( b0 == '<' ) { int b1 = data . byteAt ( 1 ) ; if ( b1 == '?' ) { if ( data . byteAt ( 2 ) == 'x' && data . byteAt ( 3 ) == 'm' && data . byteAt ( 4 ) == 'l' ) { int b5 = data . byteAt ( 5 ) ; if ( b5 == 0x20 || b5 == 0x09 || b5 == 0x0a || b5 == 0x0d ) { XMLEntityHandler . EntityReader declReader = new XMLDeclReader ( entityHandler , errorReporter , sendCharDataAsCharArray , data , stringPool ) ; int encoding = prescanXMLDeclOrTextDecl ( declReader , xmlDecl ) ; if ( encoding != - 1 ) { String encname = stringPool . orphanString ( encoding ) ; String enc = encname . toUpperCase ( ) ; if ( "ISO-10646-UCS-2" . equals ( enc ) ) throw new UnsupportedEncodingException ( encname ) ; if ( "ISO-10646-UCS-4" . equals ( enc ) ) throw new UnsupportedEncodingException ( encname ) ; if ( "UTF-16" . equals ( enc ) ) throw new UnsupportedEncodingException ( encname ) ; String javaencname = MIME2Java . convert ( enc ) ; if ( null == javaencname ) { if ( allowJavaEncodingName ) { javaencname = encname ; } else { throw new UnsupportedEncodingException ( encname ) ; } } try { data . rewind ( ) ; if ( "UTF-8" . equalsIgnoreCase ( javaencname ) || "UTF8" . equalsIgnoreCase ( javaencname ) ) { reader = readerFactory . createUTF8Reader ( entityHandler , errorReporter , sendCharDataAsCharArray , data , stringPool ) ; } else { reader = readerFactory . createCharReader ( entityHandler , errorReporter , sendCharDataAsCharArray , new InputStreamReader ( data , javaencname ) , stringPool ) ; } } catch ( UnsupportedEncodingException e ) { throw new UnsupportedEncodingException ( encname ) ; } catch ( Exception e ) { if ( debug == true ) e . printStackTrace ( ) ; } } else { data . rewind ( ) ; reader = readerFactory . createUTF8Reader ( entityHandler , errorReporter , sendCharDataAsCharArray , data , stringPool ) ; } } } } } return reader ; } final class XMLDeclReader extends XMLEntityReader { private StringPool fStringPool = null ; private ChunkyByteArray fData = null ; XMLDeclReader ( XMLEntityHandler entityHandler , XMLErrorReporter errorReporter , boolean sendCharDataAsCharArray , ChunkyByteArray data , StringPool stringPool ) { super ( entityHandler , errorReporter , sendCharDataAsCharArray ) ; fStringPool = stringPool ; fData = data ; } public boolean lookingAtChar ( char ch , boolean skipPastChar ) throws IOException { if ( fData . byteAt ( fCurrentOffset ) != ch ) return false ; if ( skipPastChar ) fCurrentOffset ++ ; return true ; } public boolean lookingAtSpace ( boolean skipPastChar ) throws IOException { int ch = fData . byteAt ( fCurrentOffset ) & 0xff ; if ( ch != 0x20 && ch != 0x09 && ch != 0x0A && ch != 0x0D ) return false ; if ( skipPastChar ) fCurrentOffset ++ ; return true ; } public void skipPastSpaces ( ) throws IOException { while ( true ) { int ch = fData . byteAt ( fCurrentOffset ) & 0xff ; if ( ch != 0x20 && ch != 0x09 && ch != 0x0A && ch != 0x0D ) return ; fCurrentOffset ++ ; } } public boolean skippedString ( char [ ] s ) throws IOException { int offset = fCurrentOffset ; for ( int i = 0 ; i < s . length ; i ++ ) { if ( fData . byteAt ( offset ) != s [ i ] ) return false ; offset ++ ; } fCurrentOffset = offset ; return true ; } public int scanStringLiteral ( ) throws Exception { boolean single ; if ( ! ( single = lookingAtChar ( '\'' , true ) ) && ! lookingAtChar ( '\"' , true ) ) { return XMLEntityHandler . STRINGLIT_RESULT_QUOTE_REQUIRED ; } int offset = fCurrentOffset ; char qchar = single ? '\'' : '\"' ; while ( true ) { byte b = fData . byteAt ( fCurrentOffset ) ; if ( b == qchar ) break ; if ( b == - 1 ) return XMLEntityHandler . STRINGLIT_RESULT_QUOTE_REQUIRED ; fCurrentOffset ++ ; } int length = fCurrentOffset - offset ; StringBuffer str = new StringBuffer ( length ) ; for ( int i = 0 ; i < length ; i ++ ) { str . append ( ( char ) fData . byteAt ( offset + i ) ) ; } int stringIndex = fStringPool . addString ( str . toString ( ) ) ; fCurrentOffset ++ ; return stringIndex ; } public void append ( XMLEntityHandler . CharBuffer charBuffer , int offset , int length ) { throw new RuntimeException ( "RDR002 cannot happen" ) ; } public int addString ( int offset , int length ) { throw new RuntimeException ( "RDR002 cannot happen" ) ; } public int addSymbol ( int offset , int length ) { throw new RuntimeException ( "RDR002 cannot happen" ) ; } public void skipToChar ( char ch ) throws IOException { throw new IOException ( "RDR002 cannot happen" ) ; } public void skipPastName ( char fastcheck ) throws IOException { throw new IOException ( "RDR002 cannot happen" ) ; } public void skipPastNmtoken ( char fastcheck ) throws IOException { throw new IOException ( "RDR002 cannot happen" ) ; } public boolean lookingAtValidChar ( boolean skipPastChar ) throws IOException { throw new IOException ( "RDR002 cannot happen" ) ; } public int scanInvalidChar ( ) throws IOException { throw new IOException ( "RDR002 cannot happen" ) ; } public int scanCharRef ( boolean hex ) throws IOException { throw new IOException ( "RDR002 cannot happen" ) ; } public int scanAttValue ( char qchar , boolean asSymbol ) throws IOException { throw new IOException ( "RDR002 cannot happen" ) ; } public int scanEntityValue ( int qchar , boolean createString ) throws IOException { throw new IOException ( "RDR002 cannot happen" ) ; } public boolean scanExpectedName ( char fastcheck , StringPool . CharArrayRange expectedName ) throws IOException { throw new IOException ( "RDR002 cannot happen" ) ; } public void scanQName ( char fastcheck , QName qname ) throws IOException { throw new IOException ( "RDR002 cannot happen" ) ; } public int scanName ( char fastcheck ) throws IOException { throw new IOException ( "RDR002 cannot happen" ) ; } public int scanContent ( QName element ) throws IOException { throw new IOException ( "RDR002 cannot happen" ) ; } } } 	0	['2', '2', '0', '9', '18', '0', '2', '9', '1', '0', '239', '1', '0', '0.75', '0.571428571', '2', '2', '118', '1', '0.5', '0']
package org . apache . html . dom ; import org . w3c . dom . * ; import org . w3c . dom . html . * ; public class HTMLIsIndexElementImpl extends HTMLElementImpl implements HTMLIsIndexElement { public String getPrompt ( ) { return getAttribute ( "prompt" ) ; } public void setPrompt ( String prompt ) { setAttribute ( "prompt" , prompt ) ; } public HTMLIsIndexElementImpl ( HTMLDocumentImpl owner , String name ) { super ( owner , name ) ; } } 	0	['3', '4', '0', '2', '6', '3', '0', '2', '3', '2', '17', '0', '0', '0.979166667', '0.666666667', '0', '0', '4.666666667', '1', '0.6667', '0']
package org . w3c . dom . html ; public interface HTMLBodyElement extends HTMLElement { public String getALink ( ) ; public void setALink ( String aLink ) ; public String getBackground ( ) ; public void setBackground ( String background ) ; public String getBgColor ( ) ; public void setBgColor ( String bgColor ) ; public String getLink ( ) ; public void setLink ( String link ) ; public String getText ( ) ; public void setText ( String text ) ; public String getVLink ( ) ; public void setVLink ( String vLink ) ; } 	0	['12', '1', '0', '0', '12', '66', '0', '0', '12', '2', '12', '0', '0', '0', '0.75', '0', '0', '0', '1', '1', '0']
package org . apache . xerces . validators . datatype ; import java . util . Hashtable ; import java . util . Vector ; import java . util . Enumeration ; import java . util . Locale ; import java . text . Collator ; import java . util . Enumeration ; import java . util . StringTokenizer ; import java . util . NoSuchElementException ; import org . apache . xerces . validators . schema . SchemaSymbols ; import org . apache . xerces . utils . regex . RegularExpression ; public class ListDatatypeValidator extends AbstractDatatypeValidator { private Locale fLocale = null ; DatatypeValidator fBaseValidator = null ; private int fLength = 0 ; private int fMaxLength = Integer . MAX_VALUE ; private int fMinLength = 0 ; private String fPattern = null ; private Vector fEnumeration = null ; private int fFacetsDefined = 0 ; private boolean fDerivedByList = false ; private RegularExpression fRegex = null ; public ListDatatypeValidator ( ) throws InvalidDatatypeFacetException { this ( null , null , false ) ; } public ListDatatypeValidator ( DatatypeValidator base , Hashtable facets , boolean derivedByList ) throws InvalidDatatypeFacetException { setBasetype ( base ) ; fDerivedByList = derivedByList ; if ( facets != null ) { for ( Enumeration e = facets . keys ( ) ; e . hasMoreElements ( ) ; ) { String key = ( String ) e . nextElement ( ) ; if ( key . equals ( SchemaSymbols . ELT_LENGTH ) ) { fFacetsDefined += DatatypeValidator . FACET_LENGTH ; String lengthValue = ( String ) facets . get ( key ) ; try { fLength = Integer . parseInt ( lengthValue ) ; } catch ( NumberFormatException nfe ) { throw new InvalidDatatypeFacetException ( "Length value '" + lengthValue + "' is invalid." ) ; } if ( fLength < 0 ) throw new InvalidDatatypeFacetException ( "Length value '" + lengthValue + "'  must be a nonNegativeInteger." ) ; } else if ( key . equals ( SchemaSymbols . ELT_MINLENGTH ) ) { fFacetsDefined += DatatypeValidator . FACET_MINLENGTH ; String minLengthValue = ( String ) facets . get ( key ) ; try { fMinLength = Integer . parseInt ( minLengthValue ) ; } catch ( NumberFormatException nfe ) { throw new InvalidDatatypeFacetException ( "maxLength value '" + minLengthValue + "' is invalid." ) ; } } else if ( key . equals ( SchemaSymbols . ELT_MAXLENGTH ) ) { fFacetsDefined += DatatypeValidator . FACET_MAXLENGTH ; String maxLengthValue = ( String ) facets . get ( key ) ; try { fMaxLength = Integer . parseInt ( maxLengthValue ) ; } catch ( NumberFormatException nfe ) { throw new InvalidDatatypeFacetException ( "maxLength value '" + maxLengthValue + "' is invalid." ) ; } } else if ( key . equals ( SchemaSymbols . ELT_ENUMERATION ) ) { fFacetsDefined += DatatypeValidator . FACET_ENUMERATION ; fEnumeration = ( Vector ) facets . get ( key ) ; } else { throw new InvalidDatatypeFacetException ( "invalid facet tag : " + key ) ; } } if ( ( ( fFacetsDefined & DatatypeValidator . FACET_LENGTH ) != 0 ) ) { if ( ( ( fFacetsDefined & DatatypeValidator . FACET_MAXLENGTH ) != 0 ) ) { throw new InvalidDatatypeFacetException ( "It is an error for both length and maxLength to be members of facets." ) ; } else if ( ( ( fFacetsDefined & DatatypeValidator . FACET_MINLENGTH ) != 0 ) ) { throw new InvalidDatatypeFacetException ( "It is an error for both length and minLength to be members of facets." ) ; } } if ( ( ( fFacetsDefined & ( DatatypeValidator . FACET_MINLENGTH | DatatypeValidator . FACET_MAXLENGTH ) ) != 0 ) ) { if ( fMinLength > fMaxLength ) { throw new InvalidDatatypeFacetException ( "Value of minLength = " + fMinLength + "must be greater that the value of maxLength" + fMaxLength ) ; } } } } public Object validate ( String content , Object state ) throws InvalidDatatypeValueException { if ( content == null && state != null ) { this . fBaseValidator . validate ( content , state ) ; } else { checkContentEnum ( content , state , null ) ; } return null ; } public void setLocale ( Locale locale ) { fLocale = locale ; } public Hashtable getFacets ( ) { return null ; } public int compare ( String content , String facetValue ) { return 0 ; } public Object clone ( ) throws CloneNotSupportedException { ListDatatypeValidator newObj = null ; try { newObj = new ListDatatypeValidator ( ) ; newObj . fLocale = this . fLocale ; newObj . fBaseValidator = this . fBaseValidator ; newObj . fLength = this . fLength ; newObj . fMaxLength = this . fMaxLength ; newObj . fMinLength = this . fMinLength ; newObj . fPattern = this . fPattern ; newObj . fEnumeration = this . fEnumeration ; newObj . fFacetsDefined = this . fFacetsDefined ; newObj . fDerivedByList = this . fDerivedByList ; } catch ( InvalidDatatypeFacetException ex ) { ex . printStackTrace ( ) ; } return newObj ; } protected void checkContentEnum ( String content , Object state , Vector enumeration ) throws InvalidDatatypeValueException { StringTokenizer parsedList = null ; int numberOfTokens = 0 ; parsedList = new StringTokenizer ( content ) ; numberOfTokens = parsedList . countTokens ( ) ; if ( ! this . fDerivedByList ) { try { if ( ( fFacetsDefined & DatatypeValidator . FACET_MAXLENGTH ) != 0 ) { if ( numberOfTokens > fMaxLength ) { throw new InvalidDatatypeValueException ( "Value '" + content + "' with length ='" + numberOfTokens + "' tokens" + "' exceeds maximum length facet of '" + fMaxLength + "' tokens." ) ; } } if ( ( fFacetsDefined & DatatypeValidator . FACET_MINLENGTH ) != 0 ) { if ( numberOfTokens < fMinLength ) { throw new InvalidDatatypeValueException ( "Value '" + content + "' with length ='" + numberOfTokens + "' tokens" + "' is less than minimum length facet of '" + fMinLength + "' tokens." ) ; } } if ( ( fFacetsDefined & DatatypeValidator . FACET_LENGTH ) != 0 ) { if ( numberOfTokens != fLength ) { throw new InvalidDatatypeValueException ( "Value '" + content + "' with length ='" + numberOfTokens + "' tokens" + "' is not equal to length facet of '" + fLength + "' tokens." ) ; } } if ( enumeration != null ) { if ( ! verifyEnum ( enumeration ) ) { throw new InvalidDatatypeValueException ( "Enumeration '" + enumeration + "' for value '" + content + "' is based on enumeration '" + fEnumeration + "'" ) ; } } else { enumeration = ( fEnumeration != null ) ? fEnumeration : null ; } ( ( ListDatatypeValidator ) this . fBaseValidator ) . checkContentEnum ( content , state , enumeration ) ; } catch ( NoSuchElementException e ) { e . printStackTrace ( ) ; } } else { if ( enumeration != null ) { StringTokenizer eTokens = null ; StringTokenizer cTokens = null ; String token = null ; String eToken = null ; boolean valid = true ; int eSize = enumeration . size ( ) ; Vector enumTemp = new Vector ( ) ; enumTemp . setSize ( 1 ) ; String currentEnumeration = null ; for ( int i = 0 ; i < eSize ; i ++ ) { currentEnumeration = ( String ) enumeration . elementAt ( i ) ; eTokens = new StringTokenizer ( currentEnumeration ) ; valid = true ; cTokens = parsedList ; if ( numberOfTokens == eTokens . countTokens ( ) ) { try { if ( currentEnumeration . equals ( content ) ) { for ( int k = 0 ; k < numberOfTokens ; k ++ ) { if ( this . fBaseValidator != null ) { this . fBaseValidator . validate ( cTokens . nextToken ( ) , state ) ; } } } else { for ( int j = 0 ; j < numberOfTokens ; j ++ ) { token = cTokens . nextToken ( ) ; eToken = eTokens . nextToken ( ) ; enumTemp . setElementAt ( eToken , 0 ) ; if ( fBaseValidator instanceof DecimalDatatypeValidator ) { ( ( DecimalDatatypeValidator ) fBaseValidator ) . checkContentEnum ( token , state , enumTemp ) ; } else if ( fBaseValidator instanceof FloatDatatypeValidator ) { ( ( FloatDatatypeValidator ) fBaseValidator ) . checkContentEnum ( token , state , enumTemp ) ; } else if ( fBaseValidator instanceof DoubleDatatypeValidator ) { ( ( DoubleDatatypeValidator ) fBaseValidator ) . checkContentEnum ( token , state , enumTemp ) ; } else { if ( ! token . equals ( eToken ) ) { throw new InvalidDatatypeValueException ( "Value '" + content + "' must be one of " + enumeration ) ; } this . fBaseValidator . validate ( token , state ) ; } } } } catch ( InvalidDatatypeValueException e ) { valid = false ; } } else valid = false ; if ( valid ) break ; } if ( ! valid ) { throw new InvalidDatatypeValueException ( "Value '" + content + "' does not match list type" ) ; } } else { for ( int k = 0 ; k < numberOfTokens ; k ++ ) { if ( this . fBaseValidator != null ) { this . fBaseValidator . validate ( parsedList . nextToken ( ) , state ) ; } } } } } private boolean verifyEnum ( Vector enum ) { if ( ( fFacetsDefined & DatatypeValidator . FACET_ENUMERATION ) != 0 ) { for ( Enumeration e = enum . elements ( ) ; e . hasMoreElements ( ) ; ) { if ( fEnumeration . contains ( e . nextElement ( ) ) == false ) { return false ; } } } return true ; } private void setBasetype ( DatatypeValidator base ) { fBaseValidator = base ; } } 	0	['10', '2', '0', '10', '40', '15', '2', '8', '7', '0.577777778', '745', '0.9', '2', '0.333333333', '0.275', '0', '0', '72.5', '4', '1.1', '0']
package org . apache . wml ; import org . w3c . dom . * ; public interface WMLDOMImplementation extends DOMImplementation { } 	0	['0', '1', '0', '1', '0', '0', '1', '0', '0', '2', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0']
package org . apache . wml . dom ; import org . apache . wml . * ; public class WMLAElementImpl extends WMLElementImpl implements WMLAElement { public WMLAElementImpl ( WMLDocumentImpl owner , String tagName ) { super ( owner , tagName ) ; } public void setHref ( String newValue ) { setAttribute ( "href" , newValue ) ; } public String getHref ( ) { return getAttribute ( "href" ) ; } public void setClassName ( String newValue ) { setAttribute ( "class" , newValue ) ; } public String getClassName ( ) { return getAttribute ( "class" ) ; } public void setXmlLang ( String newValue ) { setAttribute ( "xml:lang" , newValue ) ; } public String getXmlLang ( ) { return getAttribute ( "xml:lang" ) ; } public void setTitle ( String newValue ) { setAttribute ( "title" , newValue ) ; } public String getTitle ( ) { return getAttribute ( "title" ) ; } public void setId ( String newValue ) { setAttribute ( "id" , newValue ) ; } public String getId ( ) { return getAttribute ( "id" ) ; } } 	0	['11', '4', '0', '3', '14', '55', '0', '3', '11', '2', '61', '0', '0', '0.891304348', '0.545454545', '1', '6', '4.545454545', '1', '0.9091', '0']
package org . xml . sax ; import java . io . IOException ; public interface EntityResolver { public abstract InputSource resolveEntity ( String publicId , String systemId ) throws SAXException , IOException ; } 	0	['1', '1', '0', '0', '1', '0', '0', '0', '1', '2', '1', '0', '0', '0', '1', '0', '0', '0', '1', '1', '0']
package org . xml . sax . ext ; import org . xml . sax . SAXException ; public interface DeclHandler { public abstract void elementDecl ( String name , String model ) throws SAXException ; public abstract void attributeDecl ( String eName , String aName , String type , String valueDefault , String value ) throws SAXException ; public abstract void internalEntityDecl ( String name , String value ) throws SAXException ; public abstract void externalEntityDecl ( String name , String publicId , String systemId ) throws SAXException ; } 	0	['4', '1', '0', '0', '4', '6', '0', '0', '4', '2', '4', '0', '0', '0', '1', '0', '0', '0', '1', '1', '0']
package org . apache . html . dom ; import org . w3c . dom . * ; import org . w3c . dom . html . * ; public class HTMLHeadingElementImpl extends HTMLElementImpl implements HTMLHeadingElement { public String getAlign ( ) { return getCapitalized ( "align" ) ; } public void setAlign ( String align ) { setAttribute ( "align" , align ) ; } public HTMLHeadingElementImpl ( HTMLDocumentImpl owner , String name ) { super ( owner , name ) ; } } 	0	['3', '4', '0', '2', '6', '3', '0', '2', '3', '2', '17', '0', '0', '0.979166667', '0.666666667', '0', '0', '4.666666667', '1', '0.6667', '0']
package org . apache . xerces . readers ; import org . apache . xerces . framework . XMLErrorReporter ; import org . apache . xerces . utils . QName ; import org . apache . xerces . utils . StringPool ; import org . apache . xerces . utils . XMLCharacterProperties ; import org . xml . sax . Locator ; import org . xml . sax . InputSource ; import java . io . IOException ; final class StringReader extends XMLEntityReader { public static StringReader createStringReader ( XMLEntityHandler entityHandler , XMLErrorReporter errorReporter , boolean sendCharDataAsCharArray , int lineNumber , int columnNumber , int stringHandle , StringPool stringPool , boolean addEnclosingSpaces ) { StringReader reader = null ; synchronized ( StringReader . class ) { reader = fgFreeReaders ; if ( reader == null ) { return new StringReader ( entityHandler , errorReporter , sendCharDataAsCharArray , lineNumber , columnNumber , stringHandle , stringPool , addEnclosingSpaces ) ; } fgFreeReaders = reader . fNextFreeReader ; } reader . init ( entityHandler , errorReporter , sendCharDataAsCharArray , lineNumber , columnNumber , stringHandle , stringPool , addEnclosingSpaces ) ; return reader ; } private StringReader ( XMLEntityHandler entityHandler , XMLErrorReporter errorReporter , boolean sendCharDataAsCharArray , int lineNumber , int columnNumber , int stringHandle , StringPool stringPool , boolean addEnclosingSpaces ) { super ( entityHandler , errorReporter , sendCharDataAsCharArray , lineNumber , columnNumber ) ; fStringPool = stringPool ; fData = fStringPool . toString ( stringHandle ) ; fCurrentOffset = 0 ; fEndOffset = fData . length ( ) ; if ( addEnclosingSpaces ) { fMostRecentChar = ' ' ; fCurrentOffset -- ; oweTrailingSpace = hadTrailingSpace = true ; } else { fMostRecentChar = fEndOffset == 0 ? - 1 : fData . charAt ( 0 ) ; } } private void init ( XMLEntityHandler entityHandler , XMLErrorReporter errorReporter , boolean sendCharDataAsCharArray , int lineNumber , int columnNumber , int stringHandle , StringPool stringPool , boolean addEnclosingSpaces ) { super . init ( entityHandler , errorReporter , sendCharDataAsCharArray , lineNumber , columnNumber ) ; fStringPool = stringPool ; fData = fStringPool . toString ( stringHandle ) ; fCurrentOffset = 0 ; fEndOffset = fData . length ( ) ; fNextFreeReader = null ; if ( addEnclosingSpaces ) { fMostRecentChar = ' ' ; fCurrentOffset -- ; oweTrailingSpace = hadTrailingSpace = true ; } else { fMostRecentChar = fEndOffset == 0 ? - 1 : fData . charAt ( 0 ) ; oweTrailingSpace = hadTrailingSpace = false ; } } public int addString ( int offset , int length ) { if ( length == 0 ) return 0 ; return fStringPool . addString ( fData . substring ( offset , offset + length ) ) ; } public int addSymbol ( int offset , int length ) { if ( length == 0 ) return 0 ; return fStringPool . addSymbol ( fData . substring ( offset , offset + length ) ) ; } public void append ( XMLEntityHandler . CharBuffer charBuffer , int offset , int length ) { boolean addSpace = false ; for ( int i = 0 ; i < length ; i ++ ) { try { charBuffer . append ( fData . charAt ( offset ++ ) ) ; } catch ( StringIndexOutOfBoundsException ex ) { if ( offset == fEndOffset + 1 && hadTrailingSpace ) { charBuffer . append ( ' ' ) ; } else { System . err . println ( "StringReader.append()" ) ; throw ex ; } } } } private int loadNextChar ( ) { if ( ++ fCurrentOffset >= fEndOffset ) { if ( oweTrailingSpace ) { oweTrailingSpace = false ; fMostRecentChar = ' ' ; } else { fMostRecentChar = - 1 ; } } else { fMostRecentChar = fData . charAt ( fCurrentOffset ) ; } return fMostRecentChar ; } public XMLEntityHandler . EntityReader changeReaders ( ) throws Exception { XMLEntityHandler . EntityReader nextReader = super . changeReaders ( ) ; synchronized ( StringReader . class ) { fNextFreeReader = fgFreeReaders ; fgFreeReaders = this ; } return nextReader ; } public boolean lookingAtChar ( char chr , boolean skipPastChar ) throws Exception { int ch = fMostRecentChar ; if ( ch != chr ) { if ( ch == - 1 ) { return changeReaders ( ) . lookingAtChar ( chr , skipPastChar ) ; } return false ; } if ( skipPastChar ) { if ( ++ fCurrentOffset >= fEndOffset ) { if ( oweTrailingSpace ) { oweTrailingSpace = false ; fMostRecentChar = ' ' ; } else { fMostRecentChar = - 1 ; } } else { fMostRecentChar = fData . charAt ( fCurrentOffset ) ; } } return true ; } public boolean lookingAtValidChar ( boolean skipPastChar ) throws Exception { int ch = fMostRecentChar ; if ( ch < 0xD800 ) { if ( ch < 0x20 && ch != 0x09 && ch != 0x0A && ch != 0x0D ) { if ( ch == - 1 ) return changeReaders ( ) . lookingAtValidChar ( skipPastChar ) ; return false ; } if ( skipPastChar ) { if ( ++ fCurrentOffset >= fEndOffset ) { if ( oweTrailingSpace ) { oweTrailingSpace = false ; fMostRecentChar = ' ' ; } else { fMostRecentChar = - 1 ; } } else { fMostRecentChar = fData . charAt ( fCurrentOffset ) ; } } return true ; } if ( ch > 0xFFFD ) { return false ; } if ( ch < 0xDC00 ) { if ( fCurrentOffset + 1 >= fEndOffset ) { return false ; } ch = fData . charAt ( fCurrentOffset + 1 ) ; if ( ch < 0xDC00 || ch >= 0xE000 ) { return false ; } else if ( ! skipPastChar ) { return true ; } else { fCurrentOffset ++ ; } } else if ( ch < 0xE000 ) { return false ; } if ( skipPastChar ) { if ( ++ fCurrentOffset >= fEndOffset ) { if ( oweTrailingSpace ) { oweTrailingSpace = false ; fMostRecentChar = ' ' ; } else { fMostRecentChar = - 1 ; } } else { fMostRecentChar = fData . charAt ( fCurrentOffset ) ; } } return true ; } public boolean lookingAtSpace ( boolean skipPastChar ) throws Exception { int ch = fMostRecentChar ; if ( ch > 0x20 ) return false ; if ( ch == 0x20 || ch == 0x0A || ch == 0x0D || ch == 0x09 ) { if ( skipPastChar ) { loadNextChar ( ) ; } return true ; } if ( ch == - 1 ) { return changeReaders ( ) . lookingAtSpace ( skipPastChar ) ; } return false ; } public void skipToChar ( char chr ) throws Exception { int ch = fMostRecentChar ; while ( true ) { if ( ch == chr ) return ; if ( ch == - 1 ) { changeReaders ( ) . skipToChar ( chr ) ; return ; } ch = loadNextChar ( ) ; } } public void skipPastSpaces ( ) throws Exception { int ch = fMostRecentChar ; if ( ch == - 1 ) { changeReaders ( ) . skipPastSpaces ( ) ; return ; } while ( true ) { if ( ch > 0x20 || ( ch != 0x20 && ch != 0x0A && ch != 0x09 && ch != 0x0D ) ) { fMostRecentChar = ch ; return ; } if ( ++ fCurrentOffset >= fEndOffset ) { changeReaders ( ) . skipPastSpaces ( ) ; return ; } ch = fData . charAt ( fCurrentOffset ) ; } } public void skipPastName ( char fastcheck ) throws Exception { int ch = fMostRecentChar ; if ( ch < 0x80 ) { if ( ch == - 1 || XMLCharacterProperties . fgAsciiInitialNameChar [ ch ] == 0 ) return ; } else { if ( ! fCalledCharPropInit ) { XMLCharacterProperties . initCharFlags ( ) ; fCalledCharPropInit = true ; } if ( ( XMLCharacterProperties . fgCharFlags [ ch ] & XMLCharacterProperties . E_InitialNameCharFlag ) == 0 ) return ; } while ( true ) { ch = loadNextChar ( ) ; if ( fastcheck == ch ) return ; if ( ch < 0x80 ) { if ( ch == - 1 || XMLCharacterProperties . fgAsciiNameChar [ ch ] == 0 ) return ; } else { if ( ! fCalledCharPropInit ) { XMLCharacterProperties . initCharFlags ( ) ; fCalledCharPropInit = true ; } if ( ( XMLCharacterProperties . fgCharFlags [ ch ] & XMLCharacterProperties . E_NameCharFlag ) == 0 ) return ; } } } public void skipPastNmtoken ( char fastcheck ) throws Exception { int ch = fMostRecentChar ; while ( true ) { if ( fastcheck == ch ) return ; if ( ch < 0x80 ) { if ( ch == - 1 || XMLCharacterProperties . fgAsciiNameChar [ ch ] == 0 ) return ; } else { if ( ! fCalledCharPropInit ) { XMLCharacterProperties . initCharFlags ( ) ; fCalledCharPropInit = true ; } if ( ( XMLCharacterProperties . fgCharFlags [ ch ] & XMLCharacterProperties . E_NameCharFlag ) == 0 ) return ; } ch = loadNextChar ( ) ; } } public boolean skippedString ( char [ ] s ) throws Exception { int ch = fMostRecentChar ; if ( ch != s [ 0 ] ) { if ( ch == - 1 ) return changeReaders ( ) . skippedString ( s ) ; return false ; } if ( fCurrentOffset + s . length > fEndOffset ) return false ; for ( int i = 1 ; i < s . length ; i ++ ) { if ( fData . charAt ( fCurrentOffset + i ) != s [ i ] ) return false ; } fCurrentOffset += ( s . length - 1 ) ; loadNextChar ( ) ; return true ; } public int scanInvalidChar ( ) throws Exception { int ch = fMostRecentChar ; if ( ch == - 1 ) return changeReaders ( ) . scanInvalidChar ( ) ; loadNextChar ( ) ; return ch ; } public int scanCharRef ( boolean hex ) throws Exception { int ch = fMostRecentChar ; if ( ch == - 1 ) return changeReaders ( ) . scanCharRef ( hex ) ; int num = 0 ; if ( hex ) { if ( ch > 'f' || XMLCharacterProperties . fgAsciiXDigitChar [ ch ] == 0 ) return XMLEntityHandler . CHARREF_RESULT_INVALID_CHAR ; num = ch - ( ch < 'A' ? '0' : ( ch < 'a' ? 'A' : 'a' ) - 10 ) ; } else { if ( ch < '0' || ch > '9' ) return XMLEntityHandler . CHARREF_RESULT_INVALID_CHAR ; num = ch - '0' ; } boolean toobig = false ; while ( true ) { ch = loadNextChar ( ) ; if ( ch == - 1 ) return XMLEntityHandler . CHARREF_RESULT_SEMICOLON_REQUIRED ; if ( hex ) { if ( ch > 'f' || XMLCharacterProperties . fgAsciiXDigitChar [ ch ] == 0 ) break ; } else { if ( ch < '0' || ch > '9' ) break ; } if ( hex ) { int dig = ch - ( ch < 'A' ? '0' : ( ch < 'a' ? 'A' : 'a' ) - 10 ) ; num = ( num << 4 ) + dig ; } else { int dig = ch - '0' ; num = ( num * 10 ) + dig ; } if ( num > 0x10FFFF ) { toobig = true ; num = 0 ; } } if ( ch != ';' ) return XMLEntityHandler . CHARREF_RESULT_SEMICOLON_REQUIRED ; loadNextChar ( ) ; if ( toobig ) return XMLEntityHandler . CHARREF_RESULT_OUT_OF_RANGE ; return num ; } public int scanStringLiteral ( ) throws Exception { boolean single ; if ( ! ( single = lookingAtChar ( '\'' , true ) ) && ! lookingAtChar ( '\"' , true ) ) { return XMLEntityHandler . STRINGLIT_RESULT_QUOTE_REQUIRED ; } int offset = fCurrentOffset ; char qchar = single ? '\'' : '\"' ; while ( ! lookingAtChar ( qchar , false ) ) { if ( ! lookingAtValidChar ( true ) ) { return XMLEntityHandler . STRINGLIT_RESULT_INVALID_CHAR ; } } int stringIndex = addString ( offset , fCurrentOffset - offset ) ; lookingAtChar ( qchar , true ) ; return stringIndex ; } public int scanAttValue ( char qchar , boolean asSymbol ) throws Exception { int offset = fCurrentOffset ; while ( true ) { if ( lookingAtChar ( qchar , false ) ) { break ; } if ( lookingAtChar ( ' ' , true ) ) { continue ; } if ( lookingAtSpace ( false ) ) { return XMLEntityHandler . ATTVALUE_RESULT_COMPLEX ; } if ( lookingAtChar ( '&' , false ) ) { return XMLEntityHandler . ATTVALUE_RESULT_COMPLEX ; } if ( lookingAtChar ( '<' , false ) ) { return XMLEntityHandler . ATTVALUE_RESULT_LESSTHAN ; } if ( ! lookingAtValidChar ( true ) ) { return XMLEntityHandler . ATTVALUE_RESULT_INVALID_CHAR ; } } int result = asSymbol ? addSymbol ( offset , fCurrentOffset - offset ) : addString ( offset , fCurrentOffset - offset ) ; lookingAtChar ( qchar , true ) ; return result ; } public static final byte fgAsciiEntityValueChar [ ] = { 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 0 , 0 , 4 , 4 , 0 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 0 , 0 , 1 , 0 , 0 , 3 , 2 , 1 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 } ; public int scanEntityValue ( int qchar , boolean createString ) throws Exception { int offset = fCurrentOffset ; int ch = fMostRecentChar ; while ( true ) { if ( ch == - 1 ) { changeReaders ( ) ; return XMLEntityHandler . ENTITYVALUE_RESULT_END_OF_INPUT ; } if ( ch < 0x80 ) { switch ( fgAsciiEntityValueChar [ ch ] ) { case 1 : if ( ch == qchar ) { if ( ! createString ) return XMLEntityHandler . ENTITYVALUE_RESULT_FINISHED ; int length = fCurrentOffset - offset ; int result = length == 0 ? StringPool . EMPTY_STRING : addString ( offset , length ) ; loadNextChar ( ) ; return result ; } case 0 : if ( ++ fCurrentOffset >= fEndOffset ) { if ( oweTrailingSpace ) { oweTrailingSpace = false ; ch = fMostRecentChar = ' ' ; } else { ch = fMostRecentChar = - 1 ; } } else { ch = fMostRecentChar = fData . charAt ( fCurrentOffset ) ; } continue ; case 2 : return XMLEntityHandler . ENTITYVALUE_RESULT_REFERENCE ; case 3 : return XMLEntityHandler . ENTITYVALUE_RESULT_PEREF ; case 4 : return XMLEntityHandler . ENTITYVALUE_RESULT_INVALID_CHAR ; } } else if ( ch < 0xD800 ) { ch = loadNextChar ( ) ; } else if ( ch >= 0xE000 && ( ch <= 0xFFFD || ( ch >= 0x10000 && ch <= 0x10FFFF ) ) ) { ch = loadNextChar ( ) ; } else { return XMLEntityHandler . ENTITYVALUE_RESULT_INVALID_CHAR ; } } } public boolean scanExpectedName ( char fastcheck , StringPool . CharArrayRange expectedName ) throws Exception { int ch = fMostRecentChar ; if ( ch == - 1 ) { return changeReaders ( ) . scanExpectedName ( fastcheck , expectedName ) ; } if ( ! fCalledCharPropInit ) { XMLCharacterProperties . initCharFlags ( ) ; fCalledCharPropInit = true ; } int nameOffset = fCurrentOffset ; if ( ( XMLCharacterProperties . fgCharFlags [ ch ] & XMLCharacterProperties . E_InitialNameCharFlag ) == 0 ) return false ; while ( true ) { ch = loadNextChar ( ) ; if ( fastcheck == ch ) break ; if ( ch == - 1 ) break ; if ( ( XMLCharacterProperties . fgCharFlags [ ch ] & XMLCharacterProperties . E_NameCharFlag ) == 0 ) break ; } int nameIndex = fStringPool . addSymbol ( fData . substring ( nameOffset , fCurrentOffset ) ) ; return true ; } public void scanQName ( char fastcheck , QName qname ) throws Exception { int ch = fMostRecentChar ; if ( ch == - 1 ) { changeReaders ( ) . scanQName ( fastcheck , qname ) ; return ; } if ( ! fCalledCharPropInit ) { XMLCharacterProperties . initCharFlags ( ) ; fCalledCharPropInit = true ; } int nameOffset = fCurrentOffset ; if ( ( XMLCharacterProperties . fgCharFlags [ ch ] & XMLCharacterProperties . E_InitialNameCharFlag ) == 0 ) { qname . clear ( ) ; return ; } while ( true ) { ch = loadNextChar ( ) ; if ( fastcheck == ch ) break ; if ( ch == - 1 ) break ; if ( ( XMLCharacterProperties . fgCharFlags [ ch ] & XMLCharacterProperties . E_NameCharFlag ) == 0 ) break ; } qname . clear ( ) ; qname . rawname = fStringPool . addSymbol ( fData . substring ( nameOffset , fCurrentOffset ) ) ; int index = fData . indexOf ( ':' , nameOffset ) ; if ( index != - 1 && index < fCurrentOffset ) { qname . prefix = fStringPool . addSymbol ( fData . substring ( nameOffset , index ) ) ; int indexOfSpaceChar = fData . indexOf ( ' ' , index + 1 ) ; String localPart ; if ( indexOfSpaceChar != - 1 ) { localPart = fData . substring ( index + 1 , indexOfSpaceChar ) ; qname . localpart = fStringPool . addSymbol ( localPart ) ; } else { int lenfData = fData . length ( ) ; localPart = fData . substring ( index + 1 , lenfData ) ; qname . localpart = fStringPool . addSymbol ( localPart ) ; } qname . localpart = fStringPool . addSymbol ( localPart ) ; } else { qname . localpart = qname . rawname ; } } public int scanName ( char fastcheck ) throws Exception { int ch = fMostRecentChar ; if ( ch == - 1 ) { return changeReaders ( ) . scanName ( fastcheck ) ; } if ( ! fCalledCharPropInit ) { XMLCharacterProperties . initCharFlags ( ) ; fCalledCharPropInit = true ; } int nameOffset = fCurrentOffset ; if ( ( XMLCharacterProperties . fgCharFlags [ ch ] & XMLCharacterProperties . E_InitialNameCharFlag ) == 0 ) return - 1 ; while ( true ) { if ( ++ fCurrentOffset >= fEndOffset ) { if ( oweTrailingSpace ) { oweTrailingSpace = false ; fMostRecentChar = ' ' ; } else { fMostRecentChar = - 1 ; } break ; } ch = fMostRecentChar = fData . charAt ( fCurrentOffset ) ; if ( fastcheck == ch ) break ; if ( ( XMLCharacterProperties . fgCharFlags [ ch ] & XMLCharacterProperties . E_NameCharFlag ) == 0 ) break ; } int nameIndex = fStringPool . addSymbol ( fData . substring ( nameOffset , fCurrentOffset ) ) ; return nameIndex ; } private int recognizeMarkup ( int ch ) throws Exception { if ( ch == - 1 ) { return XMLEntityHandler . CONTENT_RESULT_MARKUP_END_OF_INPUT ; } switch ( ch ) { case '?' : loadNextChar ( ) ; return XMLEntityHandler . CONTENT_RESULT_START_OF_PI ; case '!' : ch = loadNextChar ( ) ; if ( ch == - 1 ) { fCurrentOffset -= 2 ; loadNextChar ( ) ; return XMLEntityHandler . CONTENT_RESULT_MARKUP_END_OF_INPUT ; } if ( ch == '-' ) { ch = loadNextChar ( ) ; if ( ch == - 1 ) { fCurrentOffset -= 3 ; loadNextChar ( ) ; return XMLEntityHandler . CONTENT_RESULT_MARKUP_END_OF_INPUT ; } if ( ch == '-' ) { loadNextChar ( ) ; return XMLEntityHandler . CONTENT_RESULT_START_OF_COMMENT ; } break ; } if ( ch == '[' ) { for ( int i = 0 ; i < 6 ; i ++ ) { ch = loadNextChar ( ) ; if ( ch == - 1 ) { fCurrentOffset -= ( 3 + i ) ; loadNextChar ( ) ; return XMLEntityHandler . CONTENT_RESULT_MARKUP_END_OF_INPUT ; } if ( ch != cdata_string [ i ] ) { return XMLEntityHandler . CONTENT_RESULT_MARKUP_NOT_RECOGNIZED ; } } loadNextChar ( ) ; return XMLEntityHandler . CONTENT_RESULT_START_OF_CDSECT ; } break ; case '/' : loadNextChar ( ) ; return XMLEntityHandler . CONTENT_RESULT_START_OF_ETAG ; default : return XMLEntityHandler . CONTENT_RESULT_START_OF_ELEMENT ; } return XMLEntityHandler . CONTENT_RESULT_MARKUP_NOT_RECOGNIZED ; } private int recognizeReference ( int ch ) throws Exception { if ( ch == - 1 ) { return XMLEntityHandler . CONTENT_RESULT_MARKUP_END_OF_INPUT ; } if ( ch == '#' ) { loadNextChar ( ) ; return XMLEntityHandler . CONTENT_RESULT_START_OF_CHARREF ; } else { return XMLEntityHandler . CONTENT_RESULT_START_OF_ENTITYREF ; } } public int scanContent ( QName element ) throws Exception { int ch = fMostRecentChar ; if ( ch == - 1 ) { return changeReaders ( ) . scanContent ( element ) ; } int offset = fCurrentOffset ; if ( ch < 0x80 ) { switch ( XMLCharacterProperties . fgAsciiWSCharData [ ch ] ) { case 0 : ch = loadNextChar ( ) ; break ; case 1 : ch = loadNextChar ( ) ; if ( ! fInCDSect ) { return recognizeMarkup ( ch ) ; } break ; case 2 : ch = loadNextChar ( ) ; if ( ! fInCDSect ) { return recognizeReference ( ch ) ; } break ; case 3 : ch = loadNextChar ( ) ; if ( ch == ']' && fCurrentOffset + 1 < fEndOffset && fData . charAt ( fCurrentOffset + 1 ) == '>' ) { loadNextChar ( ) ; loadNextChar ( ) ; return XMLEntityHandler . CONTENT_RESULT_END_OF_CDSECT ; } break ; case 4 : return XMLEntityHandler . CONTENT_RESULT_INVALID_CHAR ; case 5 : do { ch = loadNextChar ( ) ; if ( ch == - 1 ) { callCharDataHandler ( offset , fEndOffset , true ) ; return changeReaders ( ) . scanContent ( element ) ; } } while ( ch == 0x20 || ch == 0x0A || ch == 0x0D || ch == 0x09 ) ; if ( ch < 0x80 ) { switch ( XMLCharacterProperties . fgAsciiCharData [ ch ] ) { case 0 : ch = loadNextChar ( ) ; break ; case 1 : ch = loadNextChar ( ) ; if ( ! fInCDSect ) { callCharDataHandler ( offset , fCurrentOffset - 1 , true ) ; return recognizeMarkup ( ch ) ; } break ; case 2 : ch = loadNextChar ( ) ; if ( ! fInCDSect ) { callCharDataHandler ( offset , fCurrentOffset - 1 , true ) ; return recognizeReference ( ch ) ; } break ; case 3 : ch = loadNextChar ( ) ; if ( ch == ']' && fCurrentOffset + 1 < fEndOffset && fData . charAt ( fCurrentOffset + 1 ) == '>' ) { callCharDataHandler ( offset , fCurrentOffset - 1 , true ) ; loadNextChar ( ) ; loadNextChar ( ) ; return XMLEntityHandler . CONTENT_RESULT_END_OF_CDSECT ; } break ; case 4 : callCharDataHandler ( offset , fCurrentOffset , true ) ; return XMLEntityHandler . CONTENT_RESULT_INVALID_CHAR ; } } else { if ( ch == 0xFFFE || ch == 0xFFFF ) { callCharDataHandler ( offset , fCurrentOffset , true ) ; return XMLEntityHandler . CONTENT_RESULT_INVALID_CHAR ; } ch = loadNextChar ( ) ; } } } else { if ( ch == 0xFFFE || ch == 0xFFFF ) { callCharDataHandler ( offset , fCurrentOffset , false ) ; return XMLEntityHandler . CONTENT_RESULT_INVALID_CHAR ; } ch = loadNextChar ( ) ; } while ( true ) { if ( ch == - 1 ) { callCharDataHandler ( offset , fEndOffset , false ) ; return changeReaders ( ) . scanContent ( element ) ; } if ( ch >= 0x80 ) break ; if ( XMLCharacterProperties . fgAsciiCharData [ ch ] != 0 ) break ; ch = loadNextChar ( ) ; } while ( true ) { if ( ch < 0x80 ) { switch ( XMLCharacterProperties . fgAsciiCharData [ ch ] ) { case 0 : ch = loadNextChar ( ) ; break ; case 1 : ch = loadNextChar ( ) ; if ( ! fInCDSect ) { callCharDataHandler ( offset , fCurrentOffset - 1 , false ) ; return recognizeMarkup ( ch ) ; } break ; case 2 : ch = loadNextChar ( ) ; if ( ! fInCDSect ) { callCharDataHandler ( offset , fCurrentOffset - 1 , false ) ; return recognizeReference ( ch ) ; } break ; case 3 : ch = loadNextChar ( ) ; if ( ch == ']' && fCurrentOffset + 1 < fEndOffset && fData . charAt ( fCurrentOffset + 1 ) == '>' ) { callCharDataHandler ( offset , fCurrentOffset - 1 , false ) ; loadNextChar ( ) ; loadNextChar ( ) ; return XMLEntityHandler . CONTENT_RESULT_END_OF_CDSECT ; } break ; case 4 : callCharDataHandler ( offset , fCurrentOffset , false ) ; return XMLEntityHandler . CONTENT_RESULT_INVALID_CHAR ; } } else { if ( ch == 0xFFFE || ch == 0xFFFF ) { callCharDataHandler ( offset , fCurrentOffset , false ) ; return XMLEntityHandler . CONTENT_RESULT_INVALID_CHAR ; } ch = loadNextChar ( ) ; } if ( ch == - 1 ) { callCharDataHandler ( offset , fCurrentOffset , false ) ; return changeReaders ( ) . scanContent ( element ) ; } } } private void callCharDataHandler ( int offset , int endOffset , boolean isWhitespace ) throws Exception { int length = endOffset - offset ; if ( ! fSendCharDataAsCharArray ) { int stringIndex = addString ( offset , length ) ; if ( isWhitespace ) fCharDataHandler . processWhitespace ( stringIndex ) ; else fCharDataHandler . processCharacters ( stringIndex ) ; return ; } if ( isWhitespace ) fCharDataHandler . processWhitespace ( fData . toCharArray ( ) , offset , length ) ; else fCharDataHandler . processCharacters ( fData . toCharArray ( ) , offset , length ) ; } private static final char [ ] cdata_string = { 'C' , 'D' , 'A' , 'T' , 'A' , '[' } ; private StringPool fStringPool = null ; private String fData = null ; private int fEndOffset ; private boolean hadTrailingSpace = false ; private boolean oweTrailingSpace = false ; private int fMostRecentChar ; private StringReader fNextFreeReader = null ; private static StringReader fgFreeReaders = null ; private boolean fCalledCharPropInit = false ; } 	0	['30', '2', '0', '11', '64', '0', '1', '10', '22', '0.522988506', '2603', '0.833333333', '3', '0.2', '0.201149425', '1', '2', '85.36666667', '4', '1.3', '0']
package org . xml . sax ; public interface ContentHandler { public void setDocumentLocator ( Locator locator ) ; public void startDocument ( ) throws SAXException ; public void endDocument ( ) throws SAXException ; public void startPrefixMapping ( String prefix , String uri ) throws SAXException ; public void endPrefixMapping ( String prefix ) throws SAXException ; public void startElement ( String namespaceURI , String localName , String qName , Attributes atts ) throws SAXException ; public void endElement ( String namespaceURI , String localName , String qName ) throws SAXException ; public void characters ( char ch [ ] , int start , int length ) throws SAXException ; public void ignorableWhitespace ( char ch [ ] , int start , int length ) throws SAXException ; public void processingInstruction ( String target , String data ) throws SAXException ; public void skippedEntity ( String name ) throws SAXException ; } 	0	['11', '1', '0', '0', '11', '55', '0', '0', '11', '2', '11', '0', '0', '0', '0.348484848', '0', '0', '0', '1', '1', '0']
package org . w3c . dom . html ; import org . w3c . dom . DOMImplementation ; public interface HTMLDOMImplementation extends DOMImplementation { public HTMLDocument createHTMLDocument ( String title ) ; } 	0	['1', '1', '0', '0', '1', '0', '0', '0', '1', '2', '1', '0', '0', '0', '1', '0', '0', '0', '1', '1', '0']
package org . w3c . dom ; public interface DocumentType extends Node { public String getName ( ) ; public NamedNodeMap getEntities ( ) ; public NamedNodeMap getNotations ( ) ; public String getPublicId ( ) ; public String getSystemId ( ) ; public String getInternalSubset ( ) ; } 	0	['6', '1', '0', '0', '6', '15', '0', '0', '6', '2', '6', '0', '0', '0', '1', '0', '0', '0', '1', '1', '0']
package org . apache . wml ; public interface WMLTimerElement extends WMLElement { public void setName ( String newValue ) ; public String getName ( ) ; public void setValue ( String newValue ) ; public String getValue ( ) ; } 	0	['4', '1', '0', '2', '4', '6', '1', '1', '4', '2', '4', '0', '0', '0', '0.75', '0', '0', '0', '1', '1', '0']
package org . apache . html . dom ; import org . w3c . dom . * ; import org . w3c . dom . html . * ; public class HTMLTableElementImpl extends HTMLElementImpl implements HTMLTableElement { public synchronized HTMLTableCaptionElement getCaption ( ) { Node child ; child = getFirstChild ( ) ; while ( child != null ) { if ( child instanceof HTMLTableCaptionElement && child . getNodeName ( ) . equals ( "CAPTION" ) ) return ( HTMLTableCaptionElement ) child ; child = child . getNextSibling ( ) ; } return null ; } public synchronized void setCaption ( HTMLTableCaptionElement caption ) { if ( caption != null && ! caption . getTagName ( ) . equals ( "CAPTION" ) ) throw new IllegalArgumentException ( "HTM016 Argument 'caption' is not an element of type <CAPTION>." ) ; deleteCaption ( ) ; if ( caption != null ) appendChild ( caption ) ; } public synchronized HTMLElement createCaption ( ) { HTMLElement section ; section = getCaption ( ) ; if ( section != null ) return section ; section = new HTMLTableCaptionElementImpl ( ( HTMLDocumentImpl ) getOwnerDocument ( ) , "CAPTION" ) ; appendChild ( section ) ; return section ; } public synchronized void deleteCaption ( ) { Node old ; old = getCaption ( ) ; if ( old != null ) removeChild ( old ) ; } public synchronized HTMLTableSectionElement getTHead ( ) { Node child ; child = getFirstChild ( ) ; while ( child != null ) { if ( child instanceof HTMLTableSectionElement && child . getNodeName ( ) . equals ( "THEAD" ) ) return ( HTMLTableSectionElement ) child ; child = child . getNextSibling ( ) ; } return null ; } public synchronized void setTHead ( HTMLTableSectionElement tHead ) { if ( tHead != null && ! tHead . getTagName ( ) . equals ( "THEAD" ) ) throw new IllegalArgumentException ( "HTM017 Argument 'tHead' is not an element of type <THEAD>." ) ; deleteTHead ( ) ; if ( tHead != null ) appendChild ( tHead ) ; } public synchronized HTMLElement createTHead ( ) { HTMLElement section ; section = getTHead ( ) ; if ( section != null ) return section ; section = new HTMLTableSectionElementImpl ( ( HTMLDocumentImpl ) getOwnerDocument ( ) , "THEAD" ) ; appendChild ( section ) ; return section ; } public synchronized void deleteTHead ( ) { Node old ; old = getTHead ( ) ; if ( old != null ) removeChild ( old ) ; } public synchronized HTMLTableSectionElement getTFoot ( ) { Node child ; child = getFirstChild ( ) ; while ( child != null ) { if ( child instanceof HTMLTableSectionElement && child . getNodeName ( ) . equals ( "TFOOT" ) ) return ( HTMLTableSectionElement ) child ; child = child . getNextSibling ( ) ; } return null ; } public synchronized void setTFoot ( HTMLTableSectionElement tFoot ) { if ( tFoot != null && ! tFoot . getTagName ( ) . equals ( "TFOOT" ) ) throw new IllegalArgumentException ( "HTM018 Argument 'tFoot' is not an element of type <TFOOT>." ) ; deleteTFoot ( ) ; if ( tFoot != null ) appendChild ( tFoot ) ; } public synchronized HTMLElement createTFoot ( ) { HTMLElement section ; section = getTFoot ( ) ; if ( section != null ) return section ; section = new HTMLTableSectionElementImpl ( ( HTMLDocumentImpl ) getOwnerDocument ( ) , "TFOOT" ) ; appendChild ( section ) ; return section ; } public synchronized void deleteTFoot ( ) { Node old ; old = getTFoot ( ) ; if ( old != null ) removeChild ( old ) ; } public HTMLCollection getRows ( ) { if ( _rows == null ) _rows = new HTMLCollectionImpl ( this , HTMLCollectionImpl . ROW ) ; return _rows ; } public HTMLCollection getTBodies ( ) { if ( _bodies == null ) _bodies = new HTMLCollectionImpl ( this , HTMLCollectionImpl . TBODY ) ; return _bodies ; } public String getAlign ( ) { return capitalize ( getAttribute ( "align" ) ) ; } public void setAlign ( String align ) { setAttribute ( "align" , align ) ; } public String getBgColor ( ) { return getAttribute ( "bgcolor" ) ; } public void setBgColor ( String bgColor ) { setAttribute ( "bgcolor" , bgColor ) ; } public String getBorder ( ) { return getAttribute ( "border" ) ; } public void setBorder ( String border ) { setAttribute ( "border" , border ) ; } public String getCellPadding ( ) { return getAttribute ( "cellpadding" ) ; } public void setCellPadding ( String cellPadding ) { setAttribute ( "cellpadding" , cellPadding ) ; } public String getCellSpacing ( ) { return getAttribute ( "cellspacing" ) ; } public void setCellSpacing ( String cellSpacing ) { setAttribute ( "cellspacing" , cellSpacing ) ; } public String getFrame ( ) { return capitalize ( getAttribute ( "frame" ) ) ; } public void setFrame ( String frame ) { setAttribute ( "frame" , frame ) ; } public String getRules ( ) { return capitalize ( getAttribute ( "rules" ) ) ; } public void setRules ( String rules ) { setAttribute ( "rules" , rules ) ; } public String getSummary ( ) { return getAttribute ( "summary" ) ; } public void setSummary ( String summary ) { setAttribute ( "summary" , summary ) ; } public String getWidth ( ) { return getAttribute ( "width" ) ; } public void setWidth ( String width ) { setAttribute ( "width" , width ) ; } public HTMLElement insertRow ( int index ) { HTMLTableRowElementImpl newRow ; newRow = new HTMLTableRowElementImpl ( ( HTMLDocumentImpl ) getOwnerDocument ( ) , "TR" ) ; insertRowX ( index , newRow ) ; return newRow ; } void insertRowX ( int index , HTMLTableRowElementImpl newRow ) { Node child ; Node lastSection = null ; child = getFirstChild ( ) ; while ( child != null ) { if ( child instanceof HTMLTableRowElement ) { if ( index == 0 ) { insertBefore ( newRow , child ) ; return ; } } else if ( child instanceof HTMLTableSectionElementImpl ) { lastSection = child ; index = ( ( HTMLTableSectionElementImpl ) child ) . insertRowX ( index , newRow ) ; if ( index < 0 ) return ; } child = child . getNextSibling ( ) ; } if ( lastSection != null ) lastSection . appendChild ( newRow ) ; else appendChild ( newRow ) ; } public synchronized void deleteRow ( int index ) { Node child ; child = getFirstChild ( ) ; while ( child != null ) { if ( child instanceof HTMLTableRowElement ) { if ( index == 0 ) { removeChild ( child ) ; return ; } } else if ( child instanceof HTMLTableSectionElementImpl ) { index = ( ( HTMLTableSectionElementImpl ) child ) . deleteRowX ( index ) ; if ( index < 0 ) return ; } child = child . getNextSibling ( ) ; } } public HTMLTableElementImpl ( HTMLDocumentImpl owner , String name ) { super ( owner , name ) ; } private HTMLCollectionImpl _rows ; private HTMLCollectionImpl _bodies ; } 	0	['36', '4', '0', '6', '58', '630', '1', '6', '35', '1', '471', '1', '2', '0.728682171', '0.214285714', '0', '0', '12.02777778', '7', '2', '0']
package org . apache . wml ; public interface WMLHeadElement extends WMLElement { } 	0	['0', '1', '0', '2', '0', '0', '1', '1', '0', '2', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0']
package org . apache . wml ; public interface WMLAccessElement extends WMLElement { public void setDomain ( String newValue ) ; public String getDomain ( ) ; public void setPath ( String newValue ) ; public String getPath ( ) ; } 	0	['4', '1', '0', '2', '4', '6', '1', '1', '4', '2', '4', '0', '0', '0', '0.75', '0', '0', '0', '1', '1', '0']
package org . apache . html . dom ; import org . w3c . dom . * ; import org . w3c . dom . html . * ; public class HTMLFrameElementImpl extends HTMLElementImpl implements HTMLFrameElement { public String getFrameBorder ( ) { return getAttribute ( "frameborder" ) ; } public void setFrameBorder ( String frameBorder ) { setAttribute ( "frameborder" , frameBorder ) ; } public String getLongDesc ( ) { return getAttribute ( "longdesc" ) ; } public void setLongDesc ( String longDesc ) { setAttribute ( "longdesc" , longDesc ) ; } public String getMarginHeight ( ) { return getAttribute ( "marginheight" ) ; } public void setMarginHeight ( String marginHeight ) { setAttribute ( "marginheight" , marginHeight ) ; } public String getMarginWidth ( ) { return getAttribute ( "marginwidth" ) ; } public void setMarginWidth ( String marginWidth ) { setAttribute ( "marginwidth" , marginWidth ) ; } public String getName ( ) { return getAttribute ( "name" ) ; } public void setName ( String name ) { setAttribute ( "name" , name ) ; } public boolean getNoResize ( ) { return getBinary ( "noresize" ) ; } public void setNoResize ( boolean noResize ) { setAttribute ( "noresize" , noResize ) ; } public String getScrolling ( ) { return capitalize ( getAttribute ( "scrolling" ) ) ; } public void setScrolling ( String scrolling ) { setAttribute ( "scrolling" , scrolling ) ; } public String getSrc ( ) { return getAttribute ( "src" ) ; } public void setSrc ( String src ) { setAttribute ( "src" , src ) ; } public HTMLFrameElementImpl ( HTMLDocumentImpl owner , String name ) { super ( owner , name ) ; } } 	0	['17', '4', '0', '2', '23', '136', '0', '2', '17', '2', '96', '0', '0', '0.854545455', '0.397058824', '0', '0', '4.647058824', '1', '0.9412', '0']
package org . apache . wml ; public interface WMLSmallElement extends WMLElement { public void setXmlLang ( String newValue ) ; public String getXmlLang ( ) ; } 	0	['2', '1', '0', '2', '2', '1', '1', '1', '2', '2', '2', '0', '0', '0', '0.75', '0', '0', '0', '1', '1', '0']
package org . apache . html . dom ; import org . w3c . dom . * ; import org . w3c . dom . html . * ; public class HTMLAreaElementImpl extends HTMLElementImpl implements HTMLAreaElement { public String getAccessKey ( ) { String accessKey ; accessKey = getAttribute ( "accesskey" ) ; if ( accessKey != null && accessKey . length ( ) > 1 ) accessKey = accessKey . substring ( 0 , 1 ) ; return accessKey ; } public void setAccessKey ( String accessKey ) { if ( accessKey != null && accessKey . length ( ) > 1 ) accessKey = accessKey . substring ( 0 , 1 ) ; setAttribute ( "accesskey" , accessKey ) ; } public String getAlt ( ) { return getAttribute ( "alt" ) ; } public void setAlt ( String alt ) { setAttribute ( "alt" , alt ) ; } public String getCoords ( ) { return getAttribute ( "coords" ) ; } public void setCoords ( String coords ) { setAttribute ( "coords" , coords ) ; } public String getHref ( ) { return getAttribute ( "href" ) ; } public void setHref ( String href ) { setAttribute ( "href" , href ) ; } public boolean getNoHref ( ) { return getBinary ( "href" ) ; } public void setNoHref ( boolean noHref ) { setAttribute ( "nohref" , noHref ) ; } public String getShape ( ) { return capitalize ( getAttribute ( "shape" ) ) ; } public void setShape ( String shape ) { setAttribute ( "shape" , shape ) ; } public int getTabIndex ( ) { return getInteger ( getAttribute ( "tabindex" ) ) ; } public void setTabIndex ( int tabIndex ) { setAttribute ( "tabindex" , String . valueOf ( tabIndex ) ) ; } public String getTarget ( ) { return getAttribute ( "target" ) ; } public void setTarget ( String target ) { setAttribute ( "target" , target ) ; } public HTMLAreaElementImpl ( HTMLDocumentImpl owner , String name ) { super ( owner , name ) ; } } 	0	['17', '4', '0', '2', '27', '136', '0', '2', '17', '2', '123', '0', '0', '0.854545455', '0.317647059', '0', '0', '6.235294118', '3', '1.1765', '0']
package org . apache . html . dom ; import org . w3c . dom . * ; import org . w3c . dom . html . * ; public class HTMLStyleElementImpl extends HTMLElementImpl implements HTMLStyleElement { public boolean getDisabled ( ) { return getBinary ( "disabled" ) ; } public void setDisabled ( boolean disabled ) { setAttribute ( "disabled" , disabled ) ; } public String getMedia ( ) { return getAttribute ( "media" ) ; } public void setMedia ( String media ) { setAttribute ( "media" , media ) ; } public String getType ( ) { return getAttribute ( "type" ) ; } public void setType ( String type ) { setAttribute ( "type" , type ) ; } public HTMLStyleElementImpl ( HTMLDocumentImpl owner , String name ) { super ( owner , name ) ; } } 	0	['7', '4', '0', '2', '12', '21', '0', '2', '7', '2', '39', '0', '0', '0.94', '0.428571429', '0', '0', '4.571428571', '1', '0.8571', '0']
package org . apache . xerces . validators . common ; import org . apache . xerces . framework . XMLContentSpec ; import org . apache . xerces . utils . ImplementationMessages ; import org . apache . xerces . utils . QName ; import org . apache . xerces . utils . StringPool ; public class CMAny extends CMNode { private int fType ; private int fURI ; private int fPosition = - 1 ; public CMAny ( int type , int uri , int position ) throws CMException { super ( type ) ; fType = type ; fURI = uri ; fPosition = position ; } final int getType ( ) { return fType ; } final int getURI ( ) { return fURI ; } final int getPosition ( ) { return fPosition ; } final void setPosition ( int newPosition ) { fPosition = newPosition ; } boolean isNullable ( ) throws CMException { return ( fPosition == - 1 ) ; } String toString ( StringPool stringPool ) { StringBuffer strRet = new StringBuffer ( ) ; strRet . append ( "(" ) ; strRet . append ( "##any:uri=" ) ; strRet . append ( stringPool . toString ( fURI ) ) ; strRet . append ( ')' ) ; if ( fPosition >= 0 ) { strRet . append ( " (Pos:" + new Integer ( fPosition ) . toString ( ) + ")" ) ; } return strRet . toString ( ) ; } protected void calcFirstPos ( CMStateSet toSet ) throws CMException { if ( fPosition == - 1 ) toSet . zeroBits ( ) ; else toSet . setBit ( fPosition ) ; } protected void calcLastPos ( CMStateSet toSet ) throws CMException { if ( fPosition == - 1 ) toSet . zeroBits ( ) ; else toSet . setBit ( fPosition ) ; } } 	0	['9', '2', '0', '6', '19', '0', '2', '4', '1', '0.625', '120', '1', '0', '0.5', '0.388888889', '1', '2', '12', '2', '1', '0']
package org . apache . xerces . readers ; import org . apache . xerces . framework . XMLErrorReporter ; import org . apache . xerces . utils . ChunkyByteArray ; import org . apache . xerces . utils . ChunkyCharArray ; import org . apache . xerces . utils . QName ; import org . apache . xerces . utils . StringHasher ; import org . apache . xerces . utils . StringPool ; import org . apache . xerces . utils . XMLCharacterProperties ; import java . io . IOException ; final class UCSReader extends XMLEntityReader implements StringPool . StringProducer { private static final boolean DEBUG_UTF16_BIG = false ; static final int E_UCS4B = 0 , E_UCS4L = 1 , E_UCS2B = 2 , E_UCS2L = 3 , E_UCS2B_NOBOM = 4 , E_UCS2L_NOBOM = 5 ; private ChunkyByteArray fData = null ; private int fEncoding = - 1 ; private StringPool fStringPool = null ; private int fBytesPerChar = - 1 ; private boolean fBigEndian = true ; private ChunkyCharArray fStringCharArray = null ; private boolean fCalledCharPropInit = false ; UCSReader ( XMLEntityHandler entityHandler , XMLErrorReporter errorReporter , boolean sendCharDataAsCharArray , ChunkyByteArray data , int encoding , StringPool stringPool ) throws Exception { super ( entityHandler , errorReporter , sendCharDataAsCharArray ) ; fCurrentOffset = ( encoding == E_UCS2B || encoding == E_UCS2L ) ? 2 : 0 ; fData = data ; fEncoding = encoding ; fStringPool = stringPool ; fBytesPerChar = ( fEncoding == E_UCS4B || fEncoding == E_UCS4L ) ? 4 : 2 ; fBigEndian = fEncoding == E_UCS4B || fEncoding == E_UCS2B || fEncoding == E_UCS2B_NOBOM ; } private int getChar ( int offset ) throws IOException { int b0 = fData . byteAt ( offset ++ ) & 0xff ; if ( b0 == 0xff && fData . atEOF ( offset ) ) return - 1 ; int b1 = fData . byteAt ( offset ++ ) & 0xff ; if ( fBytesPerChar == 4 ) { int b2 = fData . byteAt ( offset ++ ) & 0xff ; int b3 = fData . byteAt ( offset ++ ) & 0xff ; if ( fBigEndian ) return ( b0 << 24 ) + ( b1 << 16 ) + ( b2 << 8 ) + b3 ; else return ( b3 << 24 ) + ( b2 << 16 ) + ( b1 << 8 ) + b0 ; } else { if ( fBigEndian ) return ( b0 << 8 ) + b1 ; else return ( b1 << 8 ) + b0 ; } } public int addString ( int offset , int length ) { if ( length == 0 ) return 0 ; return fStringPool . addString ( this , offset , length ) ; } public int addSymbol ( int offset , int length ) { if ( length == 0 ) return 0 ; return fStringPool . addSymbol ( this , offset , length , getHashcode ( offset , length ) ) ; } public void append ( XMLEntityHandler . CharBuffer charBuffer , int offset , int length ) { int endOffset = offset + length ; while ( offset < endOffset ) { int ch ; try { ch = getChar ( offset ) ; } catch ( IOException ex ) { ch = 0 ; } charBuffer . append ( ( char ) ch ) ; offset += fBytesPerChar ; } } public void releaseString ( int offset , int length ) { } public String toString ( int offset , int length ) { if ( fStringCharArray == null ) fStringCharArray = new ChunkyCharArray ( fStringPool ) ; int newOffset = fStringCharArray . length ( ) ; append ( fStringCharArray , offset , length ) ; int newLength = fStringCharArray . length ( ) - newOffset ; int stringIndex = fStringCharArray . addString ( newOffset , newLength ) ; return fStringPool . toString ( stringIndex ) ; } private int getHashcode ( int offset , int length ) { int endOffset = offset + length ; int hashcode = 0 ; while ( offset < endOffset ) { int ch ; try { ch = getChar ( offset ) ; } catch ( IOException ex ) { ch = 0 ; } hashcode = StringHasher . hashChar ( hashcode , ch ) ; offset += fBytesPerChar ; } return StringHasher . finishHash ( hashcode ) ; } public boolean equalsString ( int offset , int length , char [ ] strChars , int strOffset , int strLength ) { int endOffset = offset + length ; int slen = strLength ; while ( offset < endOffset ) { if ( slen -- == 0 ) return false ; int ch ; try { ch = getChar ( offset ) ; } catch ( IOException ex ) { ch = 0 ; } if ( ch != strChars [ strOffset ++ ] ) return false ; offset += fBytesPerChar ; } return slen == 0 ; } private static char [ ] fCharacters = new char [ 256 ] ; private int fCharDataLength = 0 ; private void appendCharData ( int ch ) { if ( fCharacters . length == fCharDataLength ) { char [ ] newchars = new char [ fCharacters . length * 2 ] ; System . arraycopy ( fCharacters , 0 , newchars , 0 , fCharacters . length ) ; fCharacters = newchars ; } fCharacters [ fCharDataLength ++ ] = ( char ) ch ; } public void callCharDataHandler ( int offset , int length , boolean isWhitespace ) throws Exception { int endOffset = offset + length ; boolean skiplf = false ; while ( offset < endOffset ) { int ch = getChar ( offset ) ; if ( skiplf ) { skiplf = false ; if ( ch == 0x0A ) { offset += fBytesPerChar ; continue ; } } if ( ch == 0x0D ) { skiplf = true ; ch = 0x0A ; } appendCharData ( ch ) ; offset += fBytesPerChar ; } if ( fSendCharDataAsCharArray ) { if ( isWhitespace ) fCharDataHandler . processWhitespace ( fCharacters , 0 , fCharDataLength ) ; else fCharDataHandler . processCharacters ( fCharacters , 0 , fCharDataLength ) ; } else { int stringIndex = fStringPool . addString ( new String ( fCharacters , 0 , fCharDataLength ) ) ; if ( isWhitespace ) fCharDataHandler . processWhitespace ( stringIndex ) ; else fCharDataHandler . processCharacters ( stringIndex ) ; } fCharDataLength = 0 ; } public boolean lookingAtChar ( char ch , boolean skipPastChar ) throws Exception { int ch2 = getChar ( fCurrentOffset ) ; if ( ch2 == ch ) { if ( skipPastChar ) { fCharacterCounter ++ ; fCurrentOffset += fBytesPerChar ; } return true ; } return false ; } public boolean lookingAtValidChar ( boolean skipPastChar ) throws Exception { int ch = getChar ( fCurrentOffset ) ; if ( ch < 0x20 ) { if ( ch == 0x09 ) { if ( ! skipPastChar ) return true ; fCharacterCounter ++ ; } else if ( ch == 0x0A ) { if ( ! skipPastChar ) return true ; fLinefeedCounter ++ ; fCharacterCounter = 1 ; } else if ( ch == 0x0D ) { if ( ! skipPastChar ) return true ; fCarriageReturnCounter ++ ; fCharacterCounter = 1 ; } else { if ( ch == - 1 ) { return changeReaders ( ) . lookingAtValidChar ( skipPastChar ) ; } return false ; } fCurrentOffset += fBytesPerChar ; return true ; } if ( ch <= 0xD7FF ) { if ( skipPastChar ) { fCharacterCounter ++ ; fCurrentOffset += fBytesPerChar ; } return true ; } if ( ch <= 0xDFFF ) { if ( skipPastChar ) { fCharacterCounter ++ ; fCurrentOffset += fBytesPerChar ; } return true ; } if ( ch <= 0xFFFD ) { if ( skipPastChar ) { fCharacterCounter ++ ; fCurrentOffset += fBytesPerChar ; } return true ; } return false ; } public boolean lookingAtSpace ( boolean skipPastChar ) throws Exception { int ch = getChar ( fCurrentOffset ) ; if ( ch > 0x20 ) return false ; if ( ch == 0x20 || ch == 0x09 ) { if ( ! skipPastChar ) return true ; fCharacterCounter ++ ; } else if ( ch == 0x0A ) { if ( ! skipPastChar ) return true ; fLinefeedCounter ++ ; fCharacterCounter = 1 ; } else if ( ch == 0x0D ) { if ( ! skipPastChar ) return true ; fCarriageReturnCounter ++ ; fCharacterCounter = 1 ; } else { if ( ch == - 1 ) { return changeReaders ( ) . lookingAtSpace ( skipPastChar ) ; } return false ; } fCurrentOffset += fBytesPerChar ; return true ; } public void skipToChar ( char chr ) throws Exception { while ( true ) { int ch = getChar ( fCurrentOffset ) ; if ( ch == chr ) return ; if ( ch == - 1 ) { changeReaders ( ) . skipToChar ( chr ) ; return ; } if ( ch == 0x0A ) { fLinefeedCounter ++ ; fCharacterCounter = 1 ; } else if ( ch == 0x0D ) { fCarriageReturnCounter ++ ; fCharacterCounter = 1 ; } else if ( ch >= 0xD800 && ch < 0xDC00 ) { fCharacterCounter ++ ; fCurrentOffset += fBytesPerChar ; ch = getChar ( fCurrentOffset ) ; if ( ch < 0xDC00 || ch >= 0xE000 ) continue ; } else fCharacterCounter ++ ; fCurrentOffset += fBytesPerChar ; } } public void skipPastSpaces ( ) throws Exception { while ( true ) { int ch = getChar ( fCurrentOffset ) ; if ( ch > 0x20 ) return ; if ( ch == 0x20 || ch == 0x09 ) { fCharacterCounter ++ ; } else if ( ch == 0x0A ) { fLinefeedCounter ++ ; fCharacterCounter = 1 ; } else if ( ch == 0x0D ) { fCarriageReturnCounter ++ ; fCharacterCounter = 1 ; } else { if ( ch == - 1 ) changeReaders ( ) . skipPastSpaces ( ) ; return ; } fCurrentOffset += fBytesPerChar ; } } public void skipPastName ( char fastcheck ) throws Exception { int ch = getChar ( fCurrentOffset ) ; if ( ! fCalledCharPropInit ) { XMLCharacterProperties . initCharFlags ( ) ; fCalledCharPropInit = true ; } if ( ( XMLCharacterProperties . fgCharFlags [ ch ] & XMLCharacterProperties . E_InitialNameCharFlag ) == 0 ) return ; while ( true ) { fCurrentOffset += fBytesPerChar ; fCharacterCounter ++ ; ch = getChar ( fCurrentOffset ) ; if ( fastcheck == ch ) return ; if ( ( XMLCharacterProperties . fgCharFlags [ ch ] & XMLCharacterProperties . E_NameCharFlag ) == 0 ) return ; } } public void skipPastNmtoken ( char fastcheck ) throws Exception { int ch = getChar ( fCurrentOffset ) ; if ( ! fCalledCharPropInit ) { XMLCharacterProperties . initCharFlags ( ) ; fCalledCharPropInit = true ; } while ( true ) { if ( fastcheck == ch ) return ; if ( ( XMLCharacterProperties . fgCharFlags [ ch ] & XMLCharacterProperties . E_NameCharFlag ) == 0 ) return ; fCurrentOffset += fBytesPerChar ; fCharacterCounter ++ ; ch = getChar ( fCurrentOffset ) ; } } public boolean skippedString ( char [ ] s ) throws Exception { int offset = fCurrentOffset ; for ( int i = 0 ; i < s . length ; i ++ ) { if ( getChar ( offset ) != s [ i ] ) return false ; offset += fBytesPerChar ; } fCurrentOffset = offset ; fCharacterCounter += s . length ; return true ; } public int scanInvalidChar ( ) throws Exception { int ch = getChar ( fCurrentOffset ) ; if ( ch == - 1 ) { return changeReaders ( ) . scanInvalidChar ( ) ; } fCurrentOffset += fBytesPerChar ; if ( ch == 0x0A ) { fLinefeedCounter ++ ; fCharacterCounter = 1 ; } else if ( ch == 0x0D ) { fCarriageReturnCounter ++ ; fCharacterCounter = 1 ; } else { fCharacterCounter ++ ; if ( ch >= 0xD800 && ch < 0xDC00 ) { int ch2 = getChar ( fCurrentOffset ) ; if ( ch2 >= 0xDC00 && ch2 < 0xE000 ) { ch = ( ( ch - 0xD800 ) << 10 ) + ( ch2 - 0xDC00 ) + 0x10000 ; fCurrentOffset += fBytesPerChar ; } } } return ch ; } public int scanCharRef ( boolean hex ) throws Exception { int ch = getChar ( fCurrentOffset ) ; if ( ch == - 1 ) { return changeReaders ( ) . scanCharRef ( hex ) ; } int num = 0 ; if ( hex ) { if ( ch > 'f' || XMLCharacterProperties . fgAsciiXDigitChar [ ch ] == 0 ) return XMLEntityHandler . CHARREF_RESULT_INVALID_CHAR ; num = ch - ( ch < 'A' ? '0' : ( ch < 'a' ? 'A' : 'a' ) - 10 ) ; } else { if ( ch < '0' || ch > '9' ) return XMLEntityHandler . CHARREF_RESULT_INVALID_CHAR ; num = ch - '0' ; } fCharacterCounter ++ ; fCurrentOffset += fBytesPerChar ; boolean toobig = false ; while ( true ) { ch = getChar ( fCurrentOffset ) ; if ( ch == - 1 ) break ; if ( hex ) { if ( ch > 'f' || XMLCharacterProperties . fgAsciiXDigitChar [ ch ] == 0 ) break ; } else { if ( ch < '0' || ch > '9' ) break ; } fCharacterCounter ++ ; fCurrentOffset += fBytesPerChar ; if ( hex ) { int dig = ch - ( ch < 'A' ? '0' : ( ch < 'a' ? 'A' : 'a' ) - 10 ) ; num = ( num << 4 ) + dig ; } else { int dig = ch - '0' ; num = ( num * 10 ) + dig ; } if ( num > 0x10FFFF ) { toobig = true ; num = 0 ; } } if ( ch != ';' ) return XMLEntityHandler . CHARREF_RESULT_SEMICOLON_REQUIRED ; fCharacterCounter ++ ; fCurrentOffset += fBytesPerChar ; if ( toobig ) return XMLEntityHandler . CHARREF_RESULT_OUT_OF_RANGE ; return num ; } public int scanStringLiteral ( ) throws Exception { boolean single ; if ( ! ( single = lookingAtChar ( '\'' , true ) ) && ! lookingAtChar ( '\"' , true ) ) { return XMLEntityHandler . STRINGLIT_RESULT_QUOTE_REQUIRED ; } int offset = fCurrentOffset ; char qchar = single ? '\'' : '\"' ; while ( ! lookingAtChar ( qchar , false ) ) { if ( ! lookingAtValidChar ( true ) ) { return XMLEntityHandler . STRINGLIT_RESULT_INVALID_CHAR ; } } int stringIndex = addString ( offset , fCurrentOffset - offset ) ; lookingAtChar ( qchar , true ) ; return stringIndex ; } public int scanAttValue ( char qchar , boolean asSymbol ) throws Exception { int offset = fCurrentOffset ; while ( true ) { if ( lookingAtChar ( qchar , false ) ) { break ; } if ( lookingAtChar ( ' ' , true ) ) { continue ; } if ( lookingAtSpace ( false ) ) { return XMLEntityHandler . ATTVALUE_RESULT_COMPLEX ; } if ( lookingAtChar ( '&' , false ) ) { return XMLEntityHandler . ATTVALUE_RESULT_COMPLEX ; } if ( lookingAtChar ( '<' , false ) ) { return XMLEntityHandler . ATTVALUE_RESULT_LESSTHAN ; } if ( ! lookingAtValidChar ( true ) ) { return XMLEntityHandler . ATTVALUE_RESULT_INVALID_CHAR ; } } int result = asSymbol ? addSymbol ( offset , fCurrentOffset - offset ) : addString ( offset , fCurrentOffset - offset ) ; lookingAtChar ( qchar , true ) ; return result ; } public int scanEntityValue ( int qchar , boolean createString ) throws Exception { int offset = fCurrentOffset ; while ( true ) { if ( qchar != - 1 && lookingAtChar ( ( char ) qchar , false ) ) { if ( ! createString ) return XMLEntityHandler . ENTITYVALUE_RESULT_FINISHED ; break ; } if ( lookingAtChar ( '&' , false ) ) { return XMLEntityHandler . ENTITYVALUE_RESULT_REFERENCE ; } if ( lookingAtChar ( '%' , false ) ) { return XMLEntityHandler . ENTITYVALUE_RESULT_PEREF ; } if ( ! lookingAtValidChar ( true ) ) { return XMLEntityHandler . ENTITYVALUE_RESULT_INVALID_CHAR ; } } int result = addString ( offset , fCurrentOffset - offset ) ; lookingAtChar ( ( char ) qchar , true ) ; return result ; } public boolean scanExpectedName ( char fastcheck , StringPool . CharArrayRange expectedName ) throws Exception { int nameOffset = fCurrentOffset ; skipPastName ( fastcheck ) ; int nameLength = fCurrentOffset - nameOffset ; if ( nameLength == 0 ) return false ; int nameIndex = addSymbol ( nameOffset , nameLength ) ; return true ; } public void scanQName ( char fastcheck , QName qname ) throws Exception { int nameOffset = fCurrentOffset ; int ch ; int prefixend = - 1 ; int offset = fCurrentOffset ; ch = getChar ( fCurrentOffset ) ; if ( ch < 0x80 ) { if ( XMLCharacterProperties . fgAsciiInitialNameChar [ ch ] == 0 ) { qname . clear ( ) ; return ; } if ( ch == ':' ) { qname . clear ( ) ; return ; } } else { if ( ! fCalledCharPropInit ) { XMLCharacterProperties . initCharFlags ( ) ; fCalledCharPropInit = true ; } if ( ( XMLCharacterProperties . fgCharFlags [ ch ] & XMLCharacterProperties . E_InitialNameCharFlag ) == 0 ) return ; } while ( true ) { fCurrentOffset += fBytesPerChar ; fCharacterCounter ++ ; ch = getChar ( fCurrentOffset ) ; if ( fastcheck == ch ) { break ; } if ( ch < 0x80 ) { if ( XMLCharacterProperties . fgAsciiNameChar [ ch ] == 0 ) { break ; } if ( ch == ':' ) { if ( prefixend != - 1 ) { break ; } prefixend = fCurrentOffset ; ch = getChar ( fCurrentOffset + fBytesPerChar ) ; boolean lpok = true ; if ( ch < 0x80 ) { if ( XMLCharacterProperties . fgAsciiInitialNameChar [ ch ] == 0 || ch == ':' ) { lpok = false ; } } else { if ( ! fCalledCharPropInit ) { XMLCharacterProperties . initCharFlags ( ) ; fCalledCharPropInit = true ; } if ( ( XMLCharacterProperties . fgCharFlags [ ch ] & XMLCharacterProperties . E_InitialNameCharFlag ) == 0 ) { lpok = false ; } } if ( ! lpok ) { prefixend = - 1 ; break ; } } } else { if ( ! fCalledCharPropInit ) { XMLCharacterProperties . initCharFlags ( ) ; fCalledCharPropInit = true ; } if ( ( XMLCharacterProperties . fgCharFlags [ ch ] & XMLCharacterProperties . E_InitialNameCharFlag ) == 0 ) { break ; } } } int length = fCurrentOffset - offset ; qname . prefix = prefixend == - 1 ? - 1 : addSymbol ( offset , prefixend - offset ) ; qname . rawname = addSymbol ( offset , length ) ; qname . localpart = prefixend == - 1 ? qname . rawname : addSymbol ( prefixend + fBytesPerChar , fCurrentOffset - ( prefixend + fBytesPerChar ) ) ; qname . uri = - 1 ; } public int scanName ( char fastcheck ) throws Exception { int nameOffset = fCurrentOffset ; skipPastName ( fastcheck ) ; int nameLength = fCurrentOffset - nameOffset ; if ( nameLength == 0 ) return - 1 ; int nameIndex = addSymbol ( nameOffset , nameLength ) ; return nameIndex ; } private static final char [ ] cdata_string = { 'C' , 'D' , 'A' , 'T' , 'A' , '[' } ; private int recognizeMarkup ( ) throws Exception { int ch = getChar ( fCurrentOffset ) ; switch ( ch ) { case - 1 : return XMLEntityHandler . CONTENT_RESULT_MARKUP_END_OF_INPUT ; case '?' : fCharacterCounter ++ ; fCurrentOffset += fBytesPerChar ; return XMLEntityHandler . CONTENT_RESULT_START_OF_PI ; case '!' : fCharacterCounter ++ ; fCurrentOffset += fBytesPerChar ; ch = getChar ( fCurrentOffset ) ; if ( ch == - 1 ) { fCharacterCounter -- ; fCurrentOffset -= fBytesPerChar ; ; return XMLEntityHandler . CONTENT_RESULT_MARKUP_END_OF_INPUT ; } if ( ch == '-' ) { fCharacterCounter ++ ; fCurrentOffset += fBytesPerChar ; ch = getChar ( fCurrentOffset ) ; if ( ch == - 1 ) { fCharacterCounter -= 2 ; fCurrentOffset -= 2 ; return XMLEntityHandler . CONTENT_RESULT_MARKUP_END_OF_INPUT ; } if ( ch == '-' ) { fCharacterCounter ++ ; fCurrentOffset += fBytesPerChar ; return XMLEntityHandler . CONTENT_RESULT_START_OF_COMMENT ; } break ; } if ( ch == '[' ) { fCharacterCounter ++ ; fCurrentOffset += fBytesPerChar ; for ( int i = 0 ; i < 6 ; i ++ ) { ch = getChar ( fCurrentOffset ) ; if ( ch == - 1 ) { fCharacterCounter -= ( 2 + i ) ; fCurrentOffset -= ( ( 2 + i ) * fBytesPerChar ) ; return XMLEntityHandler . CONTENT_RESULT_MARKUP_END_OF_INPUT ; } if ( ch != cdata_string [ i ] ) { return XMLEntityHandler . CONTENT_RESULT_MARKUP_NOT_RECOGNIZED ; } fCharacterCounter ++ ; fCurrentOffset += fBytesPerChar ; } return XMLEntityHandler . CONTENT_RESULT_START_OF_CDSECT ; } break ; case '/' : fCharacterCounter ++ ; fCurrentOffset += fBytesPerChar ; return XMLEntityHandler . CONTENT_RESULT_START_OF_ETAG ; default : return XMLEntityHandler . CONTENT_RESULT_START_OF_ELEMENT ; } return XMLEntityHandler . CONTENT_RESULT_MARKUP_NOT_RECOGNIZED ; } private int recognizeReference ( ) throws Exception { int ch = getChar ( fCurrentOffset ) ; if ( ch == - 1 ) { return XMLEntityHandler . CONTENT_RESULT_REFERENCE_END_OF_INPUT ; } if ( ch == '#' ) { fCharacterCounter ++ ; fCurrentOffset += fBytesPerChar ; return XMLEntityHandler . CONTENT_RESULT_START_OF_CHARREF ; } else { return XMLEntityHandler . CONTENT_RESULT_START_OF_ENTITYREF ; } } public int scanContent ( QName element ) throws Exception { int offset = fCurrentOffset ; int ch = getChar ( fCurrentOffset ) ; fCurrentOffset += fBytesPerChar ; byte prop ; if ( ! fCalledCharPropInit ) { XMLCharacterProperties . initCharFlags ( ) ; fCalledCharPropInit = true ; } if ( ch < 0x80 ) { if ( ch == - 1 ) { fCurrentOffset -= fBytesPerChar ; return changeReaders ( ) . scanContent ( element ) ; } prop = XMLCharacterProperties . fgCharFlags [ ch ] ; if ( ( prop & XMLCharacterProperties . E_CharDataFlag ) == 0 && ch != 0x0A && ch != 0x0D ) { if ( ch == '<' ) { fCharacterCounter ++ ; if ( ! fInCDSect ) { return recognizeMarkup ( ) ; } } else if ( ch == '&' ) { fCharacterCounter ++ ; if ( ! fInCDSect ) { return recognizeReference ( ) ; } } else if ( ch == ']' ) { if ( getChar ( fCurrentOffset ) == ']' && getChar ( fCurrentOffset + fBytesPerChar ) == '>' ) { fCharacterCounter += 3 ; fCurrentOffset += ( 2 * fBytesPerChar ) ; return XMLEntityHandler . CONTENT_RESULT_END_OF_CDSECT ; } } else { fCurrentOffset -= fBytesPerChar ; return XMLEntityHandler . CONTENT_RESULT_INVALID_CHAR ; } } else if ( ch == 0x20 || ch == 0x09 || ch == 0x0A || ch == 0x0D ) { do { if ( ch == 0x0A ) { fLinefeedCounter ++ ; fCharacterCounter = 1 ; } else if ( ch == 0x0D ) { fCarriageReturnCounter ++ ; fCharacterCounter = 1 ; } else { fCharacterCounter ++ ; } ch = getChar ( fCurrentOffset ) ; fCurrentOffset += fBytesPerChar ; } while ( ch == 0x20 || ch == 0x09 || ch == 0x0A || ch == 0x0D ) ; if ( ch < 0x80 ) { if ( ch == - 1 ) { fCurrentOffset -= fBytesPerChar ; callCharDataHandler ( offset , fCurrentOffset - offset , true ) ; return changeReaders ( ) . scanContent ( element ) ; } prop = XMLCharacterProperties . fgCharFlags [ ch ] ; if ( ( prop & XMLCharacterProperties . E_CharDataFlag ) == 0 ) { if ( ch == '<' ) { if ( ! fInCDSect ) { callCharDataHandler ( offset , ( fCurrentOffset - fBytesPerChar ) - offset , true ) ; fCharacterCounter ++ ; return recognizeMarkup ( ) ; } fCharacterCounter ++ ; } else if ( ch == '&' ) { if ( ! fInCDSect ) { callCharDataHandler ( offset , ( fCurrentOffset - fBytesPerChar ) - offset , true ) ; fCharacterCounter ++ ; return recognizeReference ( ) ; } fCharacterCounter ++ ; } else if ( ch == ']' ) { if ( getChar ( fCurrentOffset ) == ']' && getChar ( fCurrentOffset + fBytesPerChar ) == '>' ) { callCharDataHandler ( offset , ( fCurrentOffset - fBytesPerChar ) - offset , true ) ; fCharacterCounter += 3 ; fCurrentOffset += ( 2 * fBytesPerChar ) ; return XMLEntityHandler . CONTENT_RESULT_END_OF_CDSECT ; } } else { fCurrentOffset -= fBytesPerChar ; callCharDataHandler ( offset , fCurrentOffset - offset , true ) ; return XMLEntityHandler . CONTENT_RESULT_INVALID_CHAR ; } } } else { if ( ch >= 0xD800 && ch <= 0xDFFF ) { fCurrentOffset += fBytesPerChar ; } else if ( ch == 0xFFFE || ch == 0xFFFF ) { fCurrentOffset -= fBytesPerChar ; callCharDataHandler ( offset , fCurrentOffset - offset , true ) ; return XMLEntityHandler . CONTENT_RESULT_INVALID_CHAR ; } } } } else { if ( ch >= 0xD800 && ch <= 0xDFFF ) { fCurrentOffset += fBytesPerChar ; } else if ( ch == 0xFFFE || ch == 0xFFFF ) { fCurrentOffset -= fBytesPerChar ; return XMLEntityHandler . CONTENT_RESULT_INVALID_CHAR ; } } fCharacterCounter ++ ; while ( true ) { ch = getChar ( fCurrentOffset ) ; fCurrentOffset += fBytesPerChar ; if ( ch >= 0x80 || ch < 0 ) break ; prop = XMLCharacterProperties . fgCharFlags [ ch ] ; if ( ( prop & XMLCharacterProperties . E_CharDataFlag ) == 0 ) { if ( ch == 0x0A ) { fLinefeedCounter ++ ; fCharacterCounter = 1 ; } else if ( ch == 0x0D ) { fCarriageReturnCounter ++ ; fCharacterCounter = 1 ; } else break ; } else fCharacterCounter ++ ; } while ( true ) { if ( ch < 0x80 ) { if ( ch == - 1 ) { fCurrentOffset -= fBytesPerChar ; callCharDataHandler ( offset , fCurrentOffset - offset , false ) ; return changeReaders ( ) . scanContent ( element ) ; } prop = XMLCharacterProperties . fgCharFlags [ ch ] ; if ( ( prop & XMLCharacterProperties . E_CharDataFlag ) == 0 ) { if ( ch == '<' ) { if ( ! fInCDSect ) { callCharDataHandler ( offset , ( fCurrentOffset - fBytesPerChar ) - offset , false ) ; fCharacterCounter ++ ; return recognizeMarkup ( ) ; } fCharacterCounter ++ ; } else if ( ch == '&' ) { if ( ! fInCDSect ) { callCharDataHandler ( offset , ( fCurrentOffset - fBytesPerChar ) - offset , false ) ; fCharacterCounter ++ ; return recognizeReference ( ) ; } fCharacterCounter ++ ; } else if ( ch == 0x0A ) { fLinefeedCounter ++ ; fCharacterCounter = 1 ; } else if ( ch == 0x0D ) { fCarriageReturnCounter ++ ; fCharacterCounter = 1 ; } else if ( ch == ']' ) { if ( getChar ( fCurrentOffset ) == ']' && getChar ( fCurrentOffset + fBytesPerChar ) == '>' ) { callCharDataHandler ( offset , ( fCurrentOffset - fBytesPerChar ) - offset , false ) ; fCharacterCounter += 3 ; fCurrentOffset += ( 2 * fBytesPerChar ) ; return XMLEntityHandler . CONTENT_RESULT_END_OF_CDSECT ; } fCharacterCounter ++ ; } else { fCurrentOffset -= fBytesPerChar ; callCharDataHandler ( offset , fCurrentOffset - offset , false ) ; return XMLEntityHandler . CONTENT_RESULT_INVALID_CHAR ; } } else { fCharacterCounter ++ ; } } else { if ( ch >= 0xD800 && ch <= 0xDFFF ) { fCharacterCounter ++ ; fCurrentOffset += fBytesPerChar ; } else if ( ch == 0xFFFE || ch == 0xFFFF ) { fCurrentOffset -= fBytesPerChar ; callCharDataHandler ( offset , fCurrentOffset - offset , false ) ; return XMLEntityHandler . CONTENT_RESULT_INVALID_CHAR ; } fCharacterCounter ++ ; } ch = getChar ( fCurrentOffset ) ; fCurrentOffset += fBytesPerChar ; } } } 	0	['31', '2', '0', '15', '60', '0', '1', '14', '24', '0.81372549', '2714', '0.647058824', '3', '0.194444444', '0.188888889', '1', '4', '86', '5', '1.2581', '0']
package org . apache . wml . dom ; import org . apache . wml . * ; public class WMLRefreshElementImpl extends WMLElementImpl implements WMLRefreshElement { public WMLRefreshElementImpl ( WMLDocumentImpl owner , String tagName ) { super ( owner , tagName ) ; } public void setClassName ( String newValue ) { setAttribute ( "class" , newValue ) ; } public String getClassName ( ) { return getAttribute ( "class" ) ; } public void setId ( String newValue ) { setAttribute ( "id" , newValue ) ; } public String getId ( ) { return getAttribute ( "id" ) ; } } 	0	['5', '4', '0', '3', '8', '10', '0', '3', '5', '2', '28', '0', '0', '0.953488372', '0.6', '1', '4', '4.6', '1', '0.8', '0']
package org . xml . sax . helpers ; import java . lang . ClassNotFoundException ; import java . lang . IllegalAccessException ; import java . lang . InstantiationException ; import java . lang . SecurityException ; import java . lang . ClassCastException ; import org . xml . sax . Parser ; public class ParserFactory { private ParserFactory ( ) { } public static Parser makeParser ( ) throws ClassNotFoundException , IllegalAccessException , InstantiationException , NullPointerException , ClassCastException { String className = System . getProperty ( "org.xml.sax.parser" ) ; if ( className == null ) { throw new NullPointerException ( "No value for sax.parser property" ) ; } else { return makeParser ( className ) ; } } public static Parser makeParser ( String className ) throws ClassNotFoundException , IllegalAccessException , InstantiationException , ClassCastException { return ( Parser ) ( Class . forName ( className ) . newInstance ( ) ) ; } } 	0	['3', '1', '0', '0', '8', '3', '0', '0', '2', '2', '25', '0', '0', '0', '0.333333333', '0', '0', '7.333333333', '1', '0.6667', '0']
package org . apache . xerces . dom ; import org . w3c . dom . * ; import java . util . Vector ; public class DeepNodeListImpl implements NodeList { protected NodeImpl rootNode ; protected String tagName ; protected int changes = 0 ; protected Vector nodes ; protected String nsName ; protected boolean enableNS = false ; public DeepNodeListImpl ( NodeImpl rootNode , String tagName ) { this . rootNode = rootNode ; this . tagName = tagName ; nodes = new Vector ( ) ; } public DeepNodeListImpl ( NodeImpl rootNode , String nsName , String tagName ) { this ( rootNode , tagName ) ; this . nsName = ( nsName != null && ! nsName . equals ( "" ) ) ? nsName : null ; enableNS = true ; } public int getLength ( ) { item ( java . lang . Integer . MAX_VALUE ) ; return nodes . size ( ) ; } public Node item ( int index ) { Node thisNode ; if ( rootNode . changes ( ) != changes ) { nodes = new Vector ( ) ; changes = rootNode . changes ( ) ; } if ( index < nodes . size ( ) ) return ( Node ) nodes . elementAt ( index ) ; else { if ( nodes . size ( ) == 0 ) thisNode = rootNode ; else thisNode = ( NodeImpl ) ( nodes . lastElement ( ) ) ; while ( thisNode != null && index >= nodes . size ( ) ) { thisNode = nextMatchingElementAfter ( thisNode ) ; if ( thisNode != null ) nodes . addElement ( thisNode ) ; } return thisNode ; } } protected Node nextMatchingElementAfter ( Node current ) { Node next ; while ( current != null ) { if ( current . hasChildNodes ( ) ) { current = ( current . getFirstChild ( ) ) ; } else if ( current != rootNode && null != ( next = current . getNextSibling ( ) ) ) { current = next ; } else { next = null ; for ( ; current != rootNode ; current = current . getParentNode ( ) ) { next = current . getNextSibling ( ) ; if ( next != null ) break ; } current = next ; } if ( current != rootNode && current != null && current . getNodeType ( ) == Node . ELEMENT_NODE ) { if ( ! enableNS ) { if ( tagName . equals ( "*" ) || ( ( ElementImpl ) current ) . getTagName ( ) . equals ( tagName ) ) { return current ; } } else { if ( tagName . equals ( "*" ) ) { if ( nsName != null && nsName . equals ( "*" ) ) { return current ; } else { ElementImpl el = ( ElementImpl ) current ; if ( ( nsName == null && el . getNamespaceURI ( ) == null ) || ( nsName != null && nsName . equals ( el . getNamespaceURI ( ) ) ) ) { return current ; } } } else { ElementImpl el = ( ElementImpl ) current ; if ( el . getLocalName ( ) != null && el . getLocalName ( ) . equals ( tagName ) ) { if ( nsName != null && nsName . equals ( "*" ) ) { return current ; } else { if ( ( nsName == null && el . getNamespaceURI ( ) == null ) || ( nsName != null && nsName . equals ( el . getNamespaceURI ( ) ) ) ) { return current ; } } } } } } } return null ; } } 	0	['5', '1', '1', '4', '21', '0', '3', '2', '4', '0.25', '264', '1', '1', '0', '0.44', '0', '0', '50.6', '22', '6', '0']
package org . apache . html . dom ; import org . w3c . dom . DOMException ; import org . w3c . dom . html . * ; import org . apache . xerces . dom . DOMImplementationImpl ; public class HTMLDOMImplementationImpl extends DOMImplementationImpl implements HTMLDOMImplementation { private static HTMLDOMImplementation _instance = new HTMLDOMImplementationImpl ( ) ; private HTMLDOMImplementationImpl ( ) { } public final HTMLDocument createHTMLDocument ( String title ) throws DOMException { HTMLDocument doc ; if ( title == null ) throw new NullPointerException ( "HTM014 Argument 'title' is null." ) ; doc = new HTMLDocumentImpl ( ) ; doc . setTitle ( title ) ; return doc ; } public static HTMLDOMImplementation getHTMLDOMImplementation ( ) { return _instance ; } } 	0	['4', '2', '0', '2', '8', '4', '0', '2', '2', '0.666666667', '31', '1', '1', '0.666666667', '0.5', '0', '0', '6.5', '1', '0.5', '0']
package org . w3c . dom . html ; public interface HTMLBaseFontElement extends HTMLElement { public String getColor ( ) ; public void setColor ( String color ) ; public String getFace ( ) ; public void setFace ( String face ) ; public String getSize ( ) ; public void setSize ( String size ) ; } 	0	['6', '1', '0', '0', '6', '15', '0', '0', '6', '2', '6', '0', '0', '0', '0.75', '0', '0', '0', '1', '1', '0']
package org . apache . html . dom ; import org . w3c . dom . * ; import org . w3c . dom . html . * ; public class HTMLDivElementImpl extends HTMLElementImpl implements HTMLDivElement { public String getAlign ( ) { return capitalize ( getAttribute ( "align" ) ) ; } public void setAlign ( String align ) { setAttribute ( "align" , align ) ; } public HTMLDivElementImpl ( HTMLDocumentImpl owner , String name ) { super ( owner , name ) ; } } 	0	['3', '4', '0', '2', '7', '3', '0', '2', '3', '2', '19', '0', '0', '0.979166667', '0.666666667', '0', '0', '5.333333333', '1', '0.6667', '0']
package org . apache . xerces . utils ; import java . lang . * ; public final class HexBin { static private final int BASELENGTH = 255 ; static private final int LOOKUPLENGTH = 16 ; static private byte [ ] hexNumberTable = new byte [ BASELENGTH ] ; static private byte [ ] lookUpHexAlphabet = new byte [ LOOKUPLENGTH ] ; static { for ( int i = 0 ; i < BASELENGTH ; i ++ ) { hexNumberTable [ i ] = - 1 ; } for ( int i = '9' ; i >= '0' ; i -- ) { hexNumberTable [ i ] = ( byte ) ( i - '0' ) ; } for ( int i = 'F' ; i >= 'A' ; i -- ) { hexNumberTable [ i ] = ( byte ) ( i - 'A' + 10 ) ; } for ( int i = 'f' ; i >= 'a' ; i -- ) { hexNumberTable [ i ] = ( byte ) ( i - 'a' + 10 ) ; } for ( int i = 0 ; i < 10 ; i ++ ) lookUpHexAlphabet [ i ] = ( byte ) ( '0' + i ) ; for ( int i = 10 ; i <= 15 ; i ++ ) lookUpHexAlphabet [ i ] = ( byte ) ( 'A' + i - 10 ) ; } static boolean isHex ( byte octect ) { return ( hexNumberTable [ octect ] != - 1 ) ; } static boolean isArrayByteHex ( byte [ ] arrayOctect ) { int length = arrayOctect . length ; if ( length == 0 ) return false ; for ( int i = 0 ; i < length ; i ++ ) { if ( HexBin . isHex ( arrayOctect [ i ] ) == false ) return false ; } return true ; } public static boolean isHex ( String isValidString ) { return ( isArrayByteHex ( isValidString . getBytes ( ) ) ) ; } static public byte [ ] encode ( byte [ ] binaryData ) { int lengthData = binaryData . length ; int lengthEncode = lengthData ; byte [ ] encodedData = new byte [ lengthData ] ; for ( int i = 0 ; i < lengthData ; i ++ ) { encodedData [ i ] = lookUpHexAlphabet [ binaryData [ i ] ] ; } return encodedData ; } static public byte [ ] decode ( byte [ ] binaryData ) { int lengthData = binaryData . length ; int lengthEncode = lengthData ; byte [ ] decodedData = new byte [ lengthData ] ; for ( int i = 0 ; i < lengthData ; i ++ ) { decodedData [ i ] = hexNumberTable [ binaryData [ i ] ] ; } return decodedData ; } } 	0	['7', '1', '0', '1', '9', '13', '1', '0', '4', '0.875', '194', '1', '0', '0', '0.25', '0', '0', '26.14285714', '4', '1.5714', '0']
package org . apache . xerces . readers ; import org . apache . xerces . framework . XMLParser ; import org . apache . xerces . parsers . SAXParser ; import org . apache . xerces . utils . StringPool ; import org . xml . sax . AttributeList ; import org . xml . sax . DocumentHandler ; import org . xml . sax . EntityResolver ; import org . xml . sax . InputSource ; import org . xml . sax . SAXException ; import java . io . InputStream ; import java . io . InputStreamReader ; import java . io . IOException ; import java . util . Enumeration ; import java . util . Hashtable ; import java . util . Vector ; public class XCatalog extends XMLCatalogHandler { public static final String XCATALOG_DTD_PUBLICID = "-//DTD XCatalog//EN" ; static final String DTD = "xcatalog.dtd" ; static final String XCATALOG = "XCatalog" ; static final String MAP = "Map" ; static final String PUBLICID = "PublicID" ; static final String HREF = "HRef" ; static final String DELEGATE = "Delegate" ; static final String EXTEND = "Extend" ; static final String BASE = "Base" ; static final String REMAP = "Remap" ; static final String SYSTEMID = "SystemID" ; private static final boolean DEBUG = false ; private Hashtable delegate = new Hashtable ( ) ; private Vector delegateOrder = new Vector ( ) ; public XCatalog ( ) { } public void loadCatalog ( InputSource source ) throws SAXException , IOException { new Parser ( source ) ; } public InputSource resolveEntity ( String publicId , String systemId ) throws SAXException , IOException { if ( DEBUG ) { System . out . println ( "resolveEntity(\"" + publicId + "\", \"" + systemId + "\")" ) ; } if ( publicId != null ) { String value = getPublicMapping ( publicId ) ; if ( DEBUG ) { System . out . println ( "  map: \"" + publicId + "\" -> \"" + value + "\"" ) ; } if ( value != null ) { InputSource source = resolveEntity ( null , value ) ; if ( source == null ) { source = new InputSource ( value ) ; } source . setPublicId ( publicId ) ; return source ; } Enumeration delegates = getDelegateCatalogKeys ( ) ; while ( delegates . hasMoreElements ( ) ) { String key = ( String ) delegates . nextElement ( ) ; if ( DEBUG ) { System . out . println ( "  delegate: \"" + key + "\"" ) ; } if ( publicId . startsWith ( key ) ) { XMLCatalogHandler catalog = getDelegateCatalog ( key ) ; InputSource source = catalog . resolveEntity ( publicId , systemId ) ; if ( source != null ) { return source ; } } } } String value = getSystemMapping ( systemId ) ; if ( value != null ) { if ( DEBUG ) { System . out . println ( "  remap: \"" + systemId + "\" -> \"" + value + "\"" ) ; } InputSource source = new InputSource ( value ) ; source . setPublicId ( publicId ) ; return source ; } if ( DEBUG ) { System . out . println ( "  returning null!" ) ; } return null ; } public void addDelegateCatalog ( String prefix , XCatalog catalog ) { synchronized ( delegate ) { if ( ! delegate . containsKey ( prefix ) ) { int size = delegateOrder . size ( ) ; boolean found = false ; for ( int i = 0 ; i < size ; i ++ ) { String element = ( String ) delegateOrder . elementAt ( i ) ; if ( prefix . startsWith ( element ) || prefix . compareTo ( element ) < 0 ) { delegateOrder . insertElementAt ( prefix , i ) ; found = true ; break ; } } if ( ! found ) { delegateOrder . addElement ( prefix ) ; } } delegate . put ( prefix , catalog ) ; } } public void removeDelegateCatalog ( String prefix ) { synchronized ( delegate ) { delegate . remove ( prefix ) ; delegateOrder . removeElement ( prefix ) ; } } public Enumeration getDelegateCatalogKeys ( ) { return delegateOrder . elements ( ) ; } public XCatalog getDelegateCatalog ( String prefix ) { return ( XCatalog ) delegate . get ( prefix ) ; } boolean isURL ( String str ) { try { new java . net . URL ( str ) ; return true ; } catch ( java . net . MalformedURLException e ) { } return false ; } class Parser extends SAXParser implements DocumentHandler { private String base ; public Parser ( InputSource source ) throws SAXException , IOException { setEntityResolver ( new Resolver ( ) ) ; setDocumentHandler ( ( DocumentHandler ) this ) ; setBase ( source . getSystemId ( ) ) ; parse ( source ) ; } protected void setBase ( String systemId ) throws SAXException { if ( systemId == null ) { systemId = "" ; } systemId = fEntityHandler . expandSystemId ( systemId ) ; int index = systemId . lastIndexOf ( '/' ) ; if ( index != - 1 ) { systemId = systemId . substring ( 0 , index + 1 ) ; } base = systemId ; } public void processingInstruction ( String target , String data ) { } public void setDocumentLocator ( org . xml . sax . Locator locator ) { } public void startDocument ( ) { } public void endElement ( String elementName ) { } public void endDocument ( ) { } public void characters ( char ch [ ] , int start , int length ) { } public void ignorableWhitespace ( char ch [ ] , int start , int length ) { } public void startElement ( String elementName , AttributeList attrList ) throws SAXException { try { if ( elementName . equals ( XCATALOG ) ) { return ; } if ( elementName . equals ( MAP ) ) { String publicId = attrList . getValue ( PUBLICID ) ; String href = attrList . getValue ( HREF ) ; if ( DEBUG ) { System . out . println ( "MAP \"" + publicId + "\" \"" + href + "\"" ) ; } if ( ! isURL ( href ) ) { href = base + href ; } addPublicMapping ( publicId , href ) ; } else if ( elementName . equals ( DELEGATE ) ) { String publicId = attrList . getValue ( PUBLICID ) ; String href = attrList . getValue ( HREF ) ; if ( DEBUG ) { System . out . println ( "DELEGATE \"" + publicId + "\" \"" + href + "\"" ) ; } if ( ! isURL ( href ) ) { href = base + href ; } String systemId = fEntityHandler . expandSystemId ( href ) ; XCatalog catalog = new XCatalog ( ) ; catalog . loadCatalog ( new InputSource ( systemId ) ) ; addDelegateCatalog ( publicId , catalog ) ; } else if ( elementName . equals ( EXTEND ) ) { String href = attrList . getValue ( HREF ) ; if ( DEBUG ) { System . out . println ( "EXTEND \"" + href + "\"" ) ; } if ( ! isURL ( href ) ) { href = base + href ; } String systemId = fEntityHandler . expandSystemId ( href ) ; XCatalog . this . loadCatalog ( new InputSource ( systemId ) ) ; } else if ( elementName . equals ( BASE ) ) { String href = attrList . getValue ( HREF ) ; setBase ( href ) ; if ( DEBUG ) { System . out . println ( "BASE \"" + href + "\" -> \"" + base + "\"" ) ; } } else if ( elementName . equals ( REMAP ) ) { String systemId = attrList . getValue ( SYSTEMID ) ; String href = attrList . getValue ( HREF ) ; if ( DEBUG ) { System . out . println ( "REMAP \"" + systemId + "\" \"" + href + "\"" ) ; } if ( ! isURL ( href ) ) { href = base + href ; } addSystemMapping ( systemId , href ) ; } } catch ( Exception e ) { throw new SAXException ( e ) ; } } class Resolver implements EntityResolver { public InputSource resolveEntity ( String publicId , String systemId ) throws SAXException , IOException { if ( publicId != null && publicId . equals ( XCATALOG_DTD_PUBLICID ) ) { InputSource src = new InputSource ( ) ; src . setPublicId ( publicId ) ; InputStream is = getClass ( ) . getResourceAsStream ( DTD ) ; src . setByteStream ( is ) ; src . setCharacterStream ( new InputStreamReader ( is ) ) ; return src ; } return null ; } } } } 	0	['8', '2', '0', '2', '32', '10', '1', '2', '7', '1.040816327', '223', '0.214285714', '0', '0.588235294', '0.46875', '1', '1', '25.125', '6', '1.5', '0']
package org . apache . wml ; public interface WMLTrElement extends WMLElement { } 	0	['0', '1', '0', '2', '0', '0', '1', '1', '0', '2', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0']
package org . w3c . dom . html ; public interface HTMLFrameElement extends HTMLElement { public String getFrameBorder ( ) ; public void setFrameBorder ( String frameBorder ) ; public String getLongDesc ( ) ; public void setLongDesc ( String longDesc ) ; public String getMarginHeight ( ) ; public void setMarginHeight ( String marginHeight ) ; public String getMarginWidth ( ) ; public void setMarginWidth ( String marginWidth ) ; public String getName ( ) ; public void setName ( String name ) ; public boolean getNoResize ( ) ; public void setNoResize ( boolean noResize ) ; public String getScrolling ( ) ; public void setScrolling ( String scrolling ) ; public String getSrc ( ) ; public void setSrc ( String src ) ; } 	0	['16', '1', '0', '0', '16', '120', '0', '0', '16', '2', '16', '0', '0', '0', '0.5', '0', '0', '0', '1', '1', '0']
package org . w3c . dom . html ; public interface HTMLDivElement extends HTMLElement { public String getAlign ( ) ; public void setAlign ( String align ) ; } 	0	['2', '1', '0', '0', '2', '1', '0', '0', '2', '2', '2', '0', '0', '0', '0.75', '0', '0', '0', '1', '1', '0']
package org . apache . xerces . utils . regex ; import java . text . CharacterIterator ; public class Match implements Cloneable { int [ ] beginpos = null ; int [ ] endpos = null ; int nofgroups = 0 ; CharacterIterator ciSource = null ; String strSource = null ; char [ ] charSource = null ; public Match ( ) { } public synchronized Object clone ( ) { Match ma = new Match ( ) ; if ( this . nofgroups > 0 ) { ma . setNumberOfGroups ( this . nofgroups ) ; if ( this . ciSource != null ) ma . setSource ( this . ciSource ) ; if ( this . strSource != null ) ma . setSource ( this . strSource ) ; for ( int i = 0 ; i < this . nofgroups ; i ++ ) { ma . setBeginning ( i , this . getBeginning ( i ) ) ; ma . setEnd ( i , this . getEnd ( i ) ) ; } } return ma ; } protected void setNumberOfGroups ( int n ) { int oldn = this . nofgroups ; this . nofgroups = n ; if ( oldn <= 0 || oldn < n || n * 2 < oldn ) { this . beginpos = new int [ n ] ; this . endpos = new int [ n ] ; } for ( int i = 0 ; i < n ; i ++ ) { this . beginpos [ i ] = - 1 ; this . endpos [ i ] = - 1 ; } } protected void setSource ( CharacterIterator ci ) { this . ciSource = ci ; this . strSource = null ; this . charSource = null ; } protected void setSource ( String str ) { this . ciSource = null ; this . strSource = str ; this . charSource = null ; } protected void setSource ( char [ ] chars ) { this . ciSource = null ; this . strSource = null ; this . charSource = chars ; } protected void setBeginning ( int index , int v ) { this . beginpos [ index ] = v ; } protected void setEnd ( int index , int v ) { this . endpos [ index ] = v ; } public int getNumberOfGroups ( ) { if ( this . nofgroups <= 0 ) throw new IllegalStateException ( "A result is not set." ) ; return this . nofgroups ; } public int getBeginning ( int index ) { if ( this . beginpos == null ) throw new IllegalStateException ( "A result is not set." ) ; if ( index < 0 || this . nofgroups <= index ) throw new IllegalArgumentException ( "The parameter must be less than " + this . nofgroups + ": " + index ) ; return this . beginpos [ index ] ; } public int getEnd ( int index ) { if ( this . endpos == null ) throw new IllegalStateException ( "A result is not set." ) ; if ( index < 0 || this . nofgroups <= index ) throw new IllegalArgumentException ( "The parameter must be less than " + this . nofgroups + ": " + index ) ; return this . endpos [ index ] ; } public String getCapturedText ( int index ) { if ( this . beginpos == null ) throw new IllegalStateException ( "match() has never been called." ) ; if ( index < 0 || this . nofgroups <= index ) throw new IllegalArgumentException ( "The parameter must be less than " + this . nofgroups + ": " + index ) ; String ret ; int begin = this . beginpos [ index ] , end = this . endpos [ index ] ; if ( begin < 0 || end < 0 ) return null ; if ( this . ciSource != null ) { ret = REUtil . substring ( this . ciSource , begin , end ) ; } else if ( this . strSource != null ) { ret = this . strSource . substring ( begin , end ) ; } else { ret = new String ( this . charSource , begin , end - begin ) ; } return ret ; } } 	0	['12', '1', '0', '3', '22', '0', '3', '1', '6', '0.53030303', '332', '0', '0', '0', '0.35', '0', '0', '26.16666667', '8', '2.75', '0']
package org . apache . wml ; public interface WMLNoopElement extends WMLElement { } 	0	['0', '1', '0', '2', '0', '0', '1', '1', '0', '2', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0']
package org . apache . xerces . dom ; import org . w3c . dom . DOMException ; import org . w3c . dom . DocumentFragment ; import org . w3c . dom . Document ; import org . w3c . dom . Node ; import org . w3c . dom . CharacterData ; import org . apache . xerces . dom . DocumentImpl ; import org . w3c . dom . ranges . * ; import java . util . Vector ; public class RangeImpl implements Range { DocumentImpl fDocument ; Node fStartContainer ; Node fEndContainer ; int fStartOffset ; int fEndOffset ; boolean fIsCollapsed ; boolean fDetach = false ; Node fInsertNode = null ; Node fDeleteNode = null ; Node fSplitNode = null ; public RangeImpl ( DocumentImpl document ) { fDocument = document ; fStartContainer = document ; fEndContainer = document ; fStartOffset = 0 ; fEndOffset = 0 ; fDetach = false ; } public Node getStartContainer ( ) { return fStartContainer ; } public int getStartOffset ( ) { return fStartOffset ; } public Node getEndContainer ( ) { return fEndContainer ; } public int getEndOffset ( ) { return fEndOffset ; } public boolean getCollapsed ( ) { return ( fStartContainer == fEndContainer && fStartOffset == fEndOffset ) ; } public Node getCommonAncestorContainer ( ) { Vector startV = new Vector ( ) ; Node node ; for ( node = fStartContainer ; node != null ; node = node . getParentNode ( ) ) { startV . addElement ( node ) ; } Vector endV = new Vector ( ) ; for ( node = fEndContainer ; node != null ; node = node . getParentNode ( ) ) { endV . addElement ( node ) ; } int s = startV . size ( ) - 1 ; int e = endV . size ( ) - 1 ; Object result = null ; while ( s >= 0 && e >= 0 ) { if ( startV . elementAt ( s ) == endV . elementAt ( e ) ) { result = startV . elementAt ( s ) ; } else { break ; } -- s ; -- e ; } return ( Node ) result ; } public void setStart ( Node refNode , int offset ) throws RangeException , DOMException { if ( fDetach ) { throw new DOMException ( DOMException . INVALID_STATE_ERR , "DOM011 Invalid state" ) ; } if ( ! isLegalContainer ( refNode ) ) { throw new RangeExceptionImpl ( RangeException . INVALID_NODE_TYPE_ERR , "DOM012 Invalid node type" ) ; } checkIndex ( refNode , offset ) ; fStartContainer = refNode ; fStartOffset = offset ; } public void setEnd ( Node refNode , int offset ) throws RangeException , DOMException { if ( fDetach ) { throw new DOMException ( DOMException . INVALID_STATE_ERR , "DOM011 Invalid state" ) ; } if ( ! isLegalContainer ( refNode ) ) { throw new RangeExceptionImpl ( RangeException . INVALID_NODE_TYPE_ERR , "DOM012 Invalid node type" ) ; } checkIndex ( refNode , offset ) ; fEndContainer = refNode ; fEndOffset = offset ; } public void setStartBefore ( Node refNode ) throws RangeException { if ( fDetach ) { throw new DOMException ( DOMException . INVALID_STATE_ERR , "DOM011 Invalid state" ) ; } if ( ! hasLegalRootContainer ( refNode ) || ! isLegalContainedNode ( refNode ) ) { throw new RangeExceptionImpl ( RangeException . INVALID_NODE_TYPE_ERR , "DOM012 Invalid node type" ) ; } fStartContainer = refNode . getParentNode ( ) ; int i = 0 ; for ( Node n = refNode ; n != null ; n = n . getPreviousSibling ( ) ) { i ++ ; } fStartOffset = i - 1 ; } public void setStartAfter ( Node refNode ) throws RangeException { if ( fDetach ) { throw new DOMException ( DOMException . INVALID_STATE_ERR , "DOM011 Invalid state" ) ; } if ( ! hasLegalRootContainer ( refNode ) || ! isLegalContainedNode ( refNode ) ) { throw new RangeExceptionImpl ( RangeException . INVALID_NODE_TYPE_ERR , "DOM012 Invalid node type" ) ; } fStartContainer = refNode . getParentNode ( ) ; int i = 0 ; for ( Node n = refNode ; n != null ; n = n . getPreviousSibling ( ) ) { i ++ ; } fStartOffset = i ; } public void setEndBefore ( Node refNode ) throws RangeException { if ( fDetach ) { throw new DOMException ( DOMException . INVALID_STATE_ERR , "DOM011 Invalid state" ) ; } if ( ! hasLegalRootContainer ( refNode ) || ! isLegalContainedNode ( refNode ) ) { throw new RangeExceptionImpl ( RangeException . INVALID_NODE_TYPE_ERR , "DOM012 Invalid node type" ) ; } fEndContainer = refNode . getParentNode ( ) ; int i = 0 ; for ( Node n = refNode ; n != null ; n = n . getPreviousSibling ( ) ) { i ++ ; } fEndOffset = i - 1 ; } public void setEndAfter ( Node refNode ) throws RangeException { if ( fDetach ) { throw new DOMException ( DOMException . INVALID_STATE_ERR , "DOM011 Invalid state" ) ; } if ( ! hasLegalRootContainer ( refNode ) || ! isLegalContainedNode ( refNode ) ) { throw new RangeExceptionImpl ( RangeException . INVALID_NODE_TYPE_ERR , "DOM012 Invalid node type" ) ; } fEndContainer = refNode . getParentNode ( ) ; int i = 0 ; for ( Node n = refNode ; n != null ; n = n . getPreviousSibling ( ) ) { i ++ ; } fEndOffset = i ; } public void collapse ( boolean toStart ) { if ( fDetach ) { throw new DOMException ( DOMException . INVALID_STATE_ERR , "DOM011 Invalid state" ) ; } if ( toStart ) { fEndContainer = fStartContainer ; fEndOffset = fStartOffset ; } else { fStartContainer = fEndContainer ; fStartOffset = fEndOffset ; } } public void selectNode ( Node refNode ) throws RangeException { if ( fDetach ) { throw new DOMException ( DOMException . INVALID_STATE_ERR , "DOM011 Invalid state" ) ; } if ( ! isLegalContainer ( refNode . getParentNode ( ) ) || ! isLegalContainedNode ( refNode ) ) { throw new RangeExceptionImpl ( RangeException . INVALID_NODE_TYPE_ERR , "DOM012 Invalid node type" ) ; } Node parent = refNode . getParentNode ( ) ; if ( parent != null ) { fStartContainer = parent ; fEndContainer = parent ; int i = 0 ; for ( Node n = refNode ; n != null ; n = n . getPreviousSibling ( ) ) { i ++ ; } fStartOffset = i - 1 ; fEndOffset = fStartOffset + 1 ; } } public void selectNodeContents ( Node refNode ) throws RangeException { if ( fDetach ) { throw new DOMException ( DOMException . INVALID_STATE_ERR , "DOM011 Invalid state" ) ; } if ( ! isLegalContainer ( refNode ) ) { throw new RangeExceptionImpl ( RangeException . INVALID_NODE_TYPE_ERR , "DOM012 Invalid node type" ) ; } fStartContainer = refNode ; fEndContainer = refNode ; Node first = refNode . getFirstChild ( ) ; fStartOffset = 0 ; if ( first == null ) { fEndOffset = 0 ; } else { int i = 0 ; for ( Node n = first ; n != null ; n = n . getNextSibling ( ) ) { i ++ ; } fEndOffset = i ; } } public short compareBoundaryPoints ( short how , Range sourceRange ) throws DOMException { if ( fDetach ) { throw new DOMException ( DOMException . INVALID_STATE_ERR , "DOM011 Invalid state" ) ; } Node endPointA ; Node endPointB ; int offsetA ; int offsetB ; if ( how == START_TO_START ) { endPointA = sourceRange . getStartContainer ( ) ; endPointB = fStartContainer ; offsetA = sourceRange . getStartOffset ( ) ; offsetB = fStartOffset ; } else if ( how == START_TO_END ) { endPointA = sourceRange . getStartContainer ( ) ; endPointB = fEndContainer ; offsetA = sourceRange . getStartOffset ( ) ; offsetB = fEndOffset ; } else if ( how == END_TO_START ) { endPointA = sourceRange . getEndContainer ( ) ; endPointB = fStartContainer ; offsetA = sourceRange . getEndOffset ( ) ; offsetB = fStartOffset ; } else { endPointA = sourceRange . getEndContainer ( ) ; endPointB = fEndContainer ; offsetA = sourceRange . getEndOffset ( ) ; offsetB = fEndOffset ; } if ( endPointA == endPointB ) { if ( offsetA < offsetB ) return 1 ; if ( offsetA == offsetB ) return 0 ; return - 1 ; } for ( Node c = endPointB , p = c . getParentNode ( ) ; p != null ; c = p , p = p . getParentNode ( ) ) { if ( p == endPointA ) { int index = indexOf ( c , endPointA ) ; if ( offsetA <= index ) return 1 ; return - 1 ; } } for ( Node c = endPointA , p = c . getParentNode ( ) ; p != null ; c = p , p = p . getParentNode ( ) ) { if ( p == endPointB ) { int index = indexOf ( c , endPointB ) ; if ( index < offsetB ) return 1 ; return - 1 ; } } int depthDiff = 0 ; for ( Node n = endPointA ; n != null ; n = n . getParentNode ( ) ) depthDiff ++ ; for ( Node n = endPointB ; n != null ; n = n . getParentNode ( ) ) depthDiff -- ; while ( depthDiff > 0 ) { endPointA = endPointA . getParentNode ( ) ; depthDiff -- ; } while ( depthDiff < 0 ) { endPointB = endPointB . getParentNode ( ) ; depthDiff ++ ; } for ( Node pA = endPointA . getParentNode ( ) , pB = endPointB . getParentNode ( ) ; pA != pB ; pA = pA . getParentNode ( ) , pB = pB . getParentNode ( ) ) { endPointA = pA ; endPointB = pB ; } for ( Node n = endPointA . getNextSibling ( ) ; n != null ; n = n . getNextSibling ( ) ) { if ( n == endPointB ) { return 1 ; } } return - 1 ; } public void deleteContents ( ) throws DOMException { traverseContents ( DELETE_CONTENTS ) ; } public DocumentFragment extractContents ( ) throws DOMException { return traverseContents ( EXTRACT_CONTENTS ) ; } public DocumentFragment cloneContents ( ) throws DOMException { return traverseContents ( CLONE_CONTENTS ) ; } public void insertNode ( Node newNode ) throws DOMException , RangeException { if ( newNode == null ) return ; if ( fDetach ) { throw new DOMException ( DOMException . INVALID_STATE_ERR , "DOM011 Invalid state" ) ; } if ( fDocument != newNode . getOwnerDocument ( ) ) { throw new DOMException ( DOMException . WRONG_DOCUMENT_ERR , "DOM004 Wrong document" ) ; } int type = newNode . getNodeType ( ) ; if ( type == Node . ATTRIBUTE_NODE || type == Node . ENTITY_NODE || type == Node . NOTATION_NODE || type == Node . DOCUMENT_NODE ) { throw new RangeExceptionImpl ( RangeException . INVALID_NODE_TYPE_ERR , "DOM012 Invalid node type" ) ; } Node cloneCurrent ; Node current ; int currentChildren = 0 ; if ( fStartContainer . getNodeType ( ) == Node . TEXT_NODE ) { Node parent = fStartContainer . getParentNode ( ) ; currentChildren = parent . getChildNodes ( ) . getLength ( ) ; cloneCurrent = fStartContainer . cloneNode ( false ) ; ( ( TextImpl ) cloneCurrent ) . setNodeValueInternal ( ( cloneCurrent . getNodeValue ( ) ) . substring ( fStartOffset ) ) ; ( ( TextImpl ) fStartContainer ) . setNodeValueInternal ( ( fStartContainer . getNodeValue ( ) ) . substring ( 0 , fStartOffset ) ) ; Node next = fStartContainer . getNextSibling ( ) ; if ( next != null ) { if ( parent != null ) { parent . insertBefore ( newNode , next ) ; parent . insertBefore ( cloneCurrent , next ) ; } } else { if ( parent != null ) { parent . appendChild ( newNode ) ; parent . appendChild ( cloneCurrent ) ; } } if ( fEndContainer == fStartContainer ) { fEndContainer = cloneCurrent ; fEndOffset -= fStartOffset ; } else if ( fEndContainer == parent ) { fEndOffset += ( parent . getChildNodes ( ) . getLength ( ) - currentChildren ) ; } signalSplitData ( fStartContainer , cloneCurrent , fStartOffset ) ; } else { if ( fEndContainer == fStartContainer ) currentChildren = fEndContainer . getChildNodes ( ) . getLength ( ) ; current = fStartContainer . getFirstChild ( ) ; int i = 0 ; for ( i = 0 ; i < fStartOffset && current != null ; i ++ ) { current = current . getNextSibling ( ) ; } if ( current != null ) { fStartContainer . insertBefore ( newNode , current ) ; } else { fStartContainer . appendChild ( newNode ) ; } if ( fEndContainer == fStartContainer ) { fEndOffset += ( fEndContainer . getChildNodes ( ) . getLength ( ) - currentChildren ) ; } } } public void surroundContents ( Node newParent ) throws DOMException , RangeException { if ( newParent == null ) return ; if ( fDetach ) { throw new DOMException ( DOMException . INVALID_STATE_ERR , "DOM011 Invalid state" ) ; } int type = newParent . getNodeType ( ) ; if ( type == Node . ATTRIBUTE_NODE || type == Node . ENTITY_NODE || type == Node . NOTATION_NODE || type == Node . DOCUMENT_TYPE_NODE || type == Node . DOCUMENT_NODE || type == Node . DOCUMENT_FRAGMENT_NODE ) { throw new RangeExceptionImpl ( RangeException . INVALID_NODE_TYPE_ERR , "DOM012 Invalid node type" ) ; } Node root = getCommonAncestorContainer ( ) ; Node realStart = fStartContainer ; Node realEnd = fEndContainer ; if ( fStartContainer . getNodeType ( ) == Node . TEXT_NODE ) { realStart = fStartContainer . getParentNode ( ) ; } if ( fEndContainer . getNodeType ( ) == Node . TEXT_NODE ) { realEnd = fEndContainer . getParentNode ( ) ; } if ( realStart != realEnd ) { throw new RangeExceptionImpl ( RangeException . BAD_BOUNDARYPOINTS_ERR , "DOM013 Bad boundary points" ) ; } DocumentFragment frag = extractContents ( ) ; insertNode ( newParent ) ; newParent . appendChild ( frag ) ; selectNode ( newParent ) ; } public Range cloneRange ( ) { if ( fDetach ) { throw new DOMException ( DOMException . INVALID_STATE_ERR , "DOM011 Invalid state" ) ; } Range range = fDocument . createRange ( ) ; range . setStart ( fStartContainer , fStartOffset ) ; range . setEnd ( fEndContainer , fEndOffset ) ; return range ; } public String toString ( ) { if ( fDetach ) { throw new DOMException ( DOMException . INVALID_STATE_ERR , "DOM011 Invalid state" ) ; } Node node = fStartContainer ; Node stopNode = fEndContainer ; StringBuffer sb = new StringBuffer ( ) ; if ( fStartContainer . getNodeType ( ) == Node . TEXT_NODE || fStartContainer . getNodeType ( ) == Node . CDATA_SECTION_NODE ) { if ( fStartContainer == fEndContainer ) { sb . append ( fStartContainer . getNodeValue ( ) . substring ( fStartOffset , fEndOffset ) ) ; return sb . toString ( ) ; } sb . append ( fStartContainer . getNodeValue ( ) . substring ( fStartOffset ) ) ; node = nextNode ( node , true ) ; } else { node = node . getFirstChild ( ) ; if ( fStartOffset > 0 ) { int counter = 0 ; while ( counter < fStartOffset && node != null ) { node = node . getNextSibling ( ) ; counter ++ ; } } if ( node == null ) { node = nextNode ( fStartContainer , false ) ; } } if ( fEndContainer . getNodeType ( ) != Node . TEXT_NODE && fEndContainer . getNodeType ( ) != Node . CDATA_SECTION_NODE ) { int i = fEndOffset ; stopNode = fEndContainer . getFirstChild ( ) ; while ( i > 0 && stopNode != null ) { -- i ; stopNode = stopNode . getNextSibling ( ) ; } if ( stopNode == null ) stopNode = nextNode ( fEndContainer , false ) ; } while ( node != stopNode ) { if ( node == null ) break ; if ( node . getNodeType ( ) == Node . TEXT_NODE || node . getNodeType ( ) == Node . CDATA_SECTION_NODE ) { sb . append ( node . getNodeValue ( ) ) ; } node = nextNode ( node , true ) ; } if ( fEndContainer . getNodeType ( ) == Node . TEXT_NODE || fEndContainer . getNodeType ( ) == Node . CDATA_SECTION_NODE ) { sb . append ( fEndContainer . getNodeValue ( ) . substring ( 0 , fEndOffset ) ) ; } return sb . toString ( ) ; } public void detach ( ) { fDetach = true ; fDocument . removeRange ( this ) ; } void signalSplitData ( Node node , Node newNode , int offset ) { fSplitNode = node ; fDocument . splitData ( node , newNode , offset ) ; fSplitNode = null ; } void receiveSplitData ( Node node , Node newNode , int offset ) { if ( node == null || newNode == null ) return ; if ( fSplitNode == node ) return ; if ( node == fStartContainer && fStartContainer . getNodeType ( ) == Node . TEXT_NODE ) { if ( fStartOffset > offset ) { fStartOffset = fStartOffset - offset ; fStartContainer = newNode ; } } if ( node == fEndContainer && fEndContainer . getNodeType ( ) == Node . TEXT_NODE ) { if ( fEndOffset > offset ) { fEndOffset = fEndOffset - offset ; fEndContainer = newNode ; } } } void deleteData ( CharacterData node , int offset , int count ) { fDeleteNode = node ; node . deleteData ( offset , count ) ; fDeleteNode = null ; } void receiveDeletedText ( Node node , int offset , int count ) { if ( node == null ) return ; if ( fDeleteNode == node ) return ; if ( node == fStartContainer && fStartContainer . getNodeType ( ) == Node . TEXT_NODE ) { if ( fStartOffset > offset + count ) { fStartOffset = offset + ( fStartOffset - ( offset + count ) ) ; } else if ( fStartOffset > offset ) { fStartOffset = offset ; } } if ( node == fEndContainer && fEndContainer . getNodeType ( ) == Node . TEXT_NODE ) { if ( fEndOffset > offset + count ) { fEndOffset = offset + ( fEndOffset - ( offset + count ) ) ; } else if ( fEndOffset > offset ) { fEndOffset = offset ; } } } void insertData ( CharacterData node , int index , String insert ) { fInsertNode = node ; node . insertData ( index , insert ) ; fInsertNode = null ; } void receiveInsertedText ( Node node , int index , int len ) { if ( node == null ) return ; if ( fInsertNode == node ) return ; if ( node == fStartContainer && fStartContainer . getNodeType ( ) == Node . TEXT_NODE ) { if ( index < fStartOffset ) { fStartOffset = fStartOffset + len ; } } if ( node == fEndContainer && fEndContainer . getNodeType ( ) == Node . TEXT_NODE ) { if ( index < fEndOffset ) { fEndOffset = fEndOffset + len ; } } } void receiveReplacedText ( Node node ) { if ( node == null ) return ; if ( node == fStartContainer && fStartContainer . getNodeType ( ) == Node . TEXT_NODE ) { fStartOffset = 0 ; } if ( node == fEndContainer && fEndContainer . getNodeType ( ) == Node . TEXT_NODE ) { fEndOffset = 0 ; } } public void insertedNodeFromDOM ( Node node ) { if ( node == null ) return ; if ( fInsertNode == node ) return ; Node parent = node . getParentNode ( ) ; if ( parent == fStartContainer ) { int index = indexOf ( node , fStartContainer ) ; if ( index < fStartOffset ) { fStartOffset ++ ; } } if ( parent == fEndContainer ) { int index = indexOf ( node , fEndContainer ) ; if ( index < fEndOffset ) { fEndOffset ++ ; } } } Node fRemoveChild = null ; Node removeChild ( Node parent , Node child ) { fRemoveChild = child ; Node n = parent . removeChild ( child ) ; fRemoveChild = null ; return n ; } void removeNode ( Node node ) { if ( node == null ) return ; if ( fRemoveChild == node ) return ; Node parent = node . getParentNode ( ) ; if ( parent == fStartContainer ) { int index = indexOf ( node , fStartContainer ) ; if ( index < fStartOffset ) { fStartOffset -- ; } } if ( parent == fEndContainer ) { int index = indexOf ( node , fEndContainer ) ; if ( index < fEndOffset ) { fEndOffset -- ; } } if ( parent != fStartContainer || parent != fEndContainer ) { if ( isAncestorOf ( node , fStartContainer ) ) { fStartContainer = parent ; fStartOffset = indexOf ( node , parent ) ; } if ( isAncestorOf ( node , fEndContainer ) ) { fEndContainer = parent ; fEndOffset = indexOf ( node , parent ) ; } } } static final int EXTRACT_CONTENTS = 1 ; static final int CLONE_CONTENTS = 2 ; static final int DELETE_CONTENTS = 3 ; private DocumentFragment traverseContents ( int how ) throws DOMException { if ( fStartContainer == null || fEndContainer == null ) { return null ; } if ( fDetach ) { throw new DOMException ( DOMException . INVALID_STATE_ERR , "DOM011 Invalid state" ) ; } if ( fStartContainer == fEndContainer ) return traverseSameContainer ( how ) ; int endContainerDepth = 0 ; for ( Node c = fEndContainer , p = c . getParentNode ( ) ; p != null ; c = p , p = p . getParentNode ( ) ) { if ( p == fStartContainer ) return traverseCommonStartContainer ( c , how ) ; ++ endContainerDepth ; } int startContainerDepth = 0 ; for ( Node c = fStartContainer , p = c . getParentNode ( ) ; p != null ; c = p , p = p . getParentNode ( ) ) { if ( p == fEndContainer ) return traverseCommonEndContainer ( c , how ) ; ++ startContainerDepth ; } int depthDiff = startContainerDepth - endContainerDepth ; Node startNode = fStartContainer ; while ( depthDiff > 0 ) { startNode = startNode . getParentNode ( ) ; depthDiff -- ; } Node endNode = fEndContainer ; while ( depthDiff < 0 ) { endNode = endNode . getParentNode ( ) ; depthDiff ++ ; } for ( Node sp = startNode . getParentNode ( ) , ep = endNode . getParentNode ( ) ; sp != ep ; sp = sp . getParentNode ( ) , ep = ep . getParentNode ( ) ) { startNode = sp ; endNode = ep ; } return traverseCommonAncestors ( startNode , endNode , how ) ; } private DocumentFragment traverseSameContainer ( int how ) { DocumentFragment frag = null ; if ( how != DELETE_CONTENTS ) frag = fDocument . createDocumentFragment ( ) ; if ( fStartOffset == fEndOffset ) return frag ; if ( fStartContainer . getNodeType ( ) == Node . TEXT_NODE ) { String s = fStartContainer . getNodeValue ( ) ; String sub = s . substring ( fStartOffset , fEndOffset ) ; if ( how != CLONE_CONTENTS ) { fStartContainer . setNodeValue ( s . substring ( 0 , fStartOffset ) + s . substring ( fEndOffset ) ) ; collapse ( true ) ; } if ( how == DELETE_CONTENTS ) return null ; frag . appendChild ( fDocument . createTextNode ( sub ) ) ; return frag ; } Node n = getSelectedNode ( fStartContainer , fStartOffset ) ; int cnt = fEndOffset - fStartOffset ; while ( cnt > 0 ) { Node sibling = n . getNextSibling ( ) ; Node xferNode = traverseFullySelected ( n , how ) ; if ( frag != null ) frag . appendChild ( xferNode ) ; -- cnt ; n = sibling ; } if ( how != CLONE_CONTENTS ) collapse ( true ) ; return frag ; } private DocumentFragment traverseCommonStartContainer ( Node endAncestor , int how ) { DocumentFragment frag = null ; if ( how != DELETE_CONTENTS ) frag = fDocument . createDocumentFragment ( ) ; Node n = traverseRightBoundary ( endAncestor , how ) ; if ( frag != null ) frag . appendChild ( n ) ; int endIdx = indexOf ( endAncestor , fStartContainer ) ; int cnt = endIdx - fStartOffset ; if ( cnt <= 0 ) { if ( how != CLONE_CONTENTS ) { setEndBefore ( endAncestor ) ; collapse ( false ) ; } return frag ; } n = endAncestor . getPreviousSibling ( ) ; while ( cnt > 0 ) { Node sibling = n . getPreviousSibling ( ) ; Node xferNode = traverseFullySelected ( n , how ) ; if ( frag != null ) frag . insertBefore ( xferNode , frag . getFirstChild ( ) ) ; -- cnt ; n = sibling ; } if ( how != CLONE_CONTENTS ) { setEndBefore ( endAncestor ) ; collapse ( false ) ; } return frag ; } private DocumentFragment traverseCommonEndContainer ( Node startAncestor , int how ) { DocumentFragment frag = null ; if ( how != DELETE_CONTENTS ) frag = fDocument . createDocumentFragment ( ) ; Node n = traverseLeftBoundary ( startAncestor , how ) ; if ( frag != null ) frag . appendChild ( n ) ; int startIdx = indexOf ( startAncestor , fEndContainer ) ; ++ startIdx ; int cnt = fEndOffset - startIdx ; n = startAncestor . getNextSibling ( ) ; while ( cnt > 0 ) { Node sibling = n . getNextSibling ( ) ; Node xferNode = traverseFullySelected ( n , how ) ; if ( frag != null ) frag . appendChild ( xferNode ) ; -- cnt ; n = sibling ; } if ( how != CLONE_CONTENTS ) { setStartAfter ( startAncestor ) ; collapse ( true ) ; } return frag ; } private DocumentFragment traverseCommonAncestors ( Node startAncestor , Node endAncestor , int how ) { DocumentFragment frag = null ; if ( how != DELETE_CONTENTS ) frag = fDocument . createDocumentFragment ( ) ; Node n = traverseLeftBoundary ( startAncestor , how ) ; if ( frag != null ) frag . appendChild ( n ) ; Node commonParent = startAncestor . getParentNode ( ) ; int startOffset = indexOf ( startAncestor , commonParent ) ; int endOffset = indexOf ( endAncestor , commonParent ) ; ++ startOffset ; int cnt = endOffset - startOffset ; Node sibling = startAncestor . getNextSibling ( ) ; while ( cnt > 0 ) { Node nextSibling = sibling . getNextSibling ( ) ; n = traverseFullySelected ( sibling , how ) ; if ( frag != null ) frag . appendChild ( n ) ; sibling = nextSibling ; -- cnt ; } n = traverseRightBoundary ( endAncestor , how ) ; if ( frag != null ) frag . appendChild ( n ) ; if ( how != CLONE_CONTENTS ) { setStartAfter ( startAncestor ) ; collapse ( true ) ; } return frag ; } private Node traverseRightBoundary ( Node root , int how ) { Node next = getSelectedNode ( fEndContainer , fEndOffset - 1 ) ; boolean isFullySelected = ( next != fEndContainer ) ; if ( next == root ) return traverseNode ( next , isFullySelected , false , how ) ; Node parent = next . getParentNode ( ) ; Node clonedParent = traverseNode ( parent , false , false , how ) ; while ( parent != null ) { while ( next != null ) { Node prevSibling = next . getPreviousSibling ( ) ; Node clonedChild = traverseNode ( next , isFullySelected , false , how ) ; if ( how != DELETE_CONTENTS ) { clonedParent . insertBefore ( clonedChild , clonedParent . getFirstChild ( ) ) ; } isFullySelected = true ; next = prevSibling ; } if ( parent == root ) return clonedParent ; next = parent . getPreviousSibling ( ) ; parent = parent . getParentNode ( ) ; Node clonedGrandParent = traverseNode ( parent , false , false , how ) ; if ( how != DELETE_CONTENTS ) clonedGrandParent . appendChild ( clonedParent ) ; clonedParent = clonedGrandParent ; } return null ; } private Node traverseLeftBoundary ( Node root , int how ) { Node next = getSelectedNode ( getStartContainer ( ) , getStartOffset ( ) ) ; boolean isFullySelected = ( next != getStartContainer ( ) ) ; if ( next == root ) return traverseNode ( next , isFullySelected , true , how ) ; Node parent = next . getParentNode ( ) ; Node clonedParent = traverseNode ( parent , false , true , how ) ; while ( parent != null ) { while ( next != null ) { Node nextSibling = next . getNextSibling ( ) ; Node clonedChild = traverseNode ( next , isFullySelected , true , how ) ; if ( how != DELETE_CONTENTS ) clonedParent . appendChild ( clonedChild ) ; isFullySelected = true ; next = nextSibling ; } if ( parent == root ) return clonedParent ; next = parent . getNextSibling ( ) ; parent = parent . getParentNode ( ) ; Node clonedGrandParent = traverseNode ( parent , false , true , how ) ; if ( how != DELETE_CONTENTS ) clonedGrandParent . appendChild ( clonedParent ) ; clonedParent = clonedGrandParent ; } return null ; } private Node traverseNode ( Node n , boolean isFullySelected , boolean isLeft , int how ) { if ( isFullySelected ) return traverseFullySelected ( n , how ) ; if ( n . getNodeType ( ) == Node . TEXT_NODE ) return traverseTextNode ( n , isLeft , how ) ; return traversePartiallySelected ( n , how ) ; } private Node traverseFullySelected ( Node n , int how ) { switch ( how ) { case CLONE_CONTENTS : return n . cloneNode ( true ) ; case EXTRACT_CONTENTS : if ( n . getNodeType ( ) == Node . DOCUMENT_TYPE_NODE ) { throw new RangeExceptionImpl ( RangeException . INVALID_NODE_TYPE_ERR , "DOM012 Invalid node type" ) ; } return n ; case DELETE_CONTENTS : n . getParentNode ( ) . removeChild ( n ) ; return null ; } return null ; } private Node traversePartiallySelected ( Node n , int how ) { switch ( how ) { case DELETE_CONTENTS : return null ; case CLONE_CONTENTS : case EXTRACT_CONTENTS : return n . cloneNode ( false ) ; } return null ; } private Node traverseTextNode ( Node n , boolean isLeft , int how ) { String txtValue = n . getNodeValue ( ) ; String newNodeValue ; String oldNodeValue ; if ( isLeft ) { int offset = getStartOffset ( ) ; newNodeValue = txtValue . substring ( offset ) ; oldNodeValue = txtValue . substring ( 0 , offset ) ; } else { int offset = getEndOffset ( ) ; newNodeValue = txtValue . substring ( 0 , offset ) ; oldNodeValue = txtValue . substring ( offset ) ; } if ( how != CLONE_CONTENTS ) n . setNodeValue ( oldNodeValue ) ; if ( how == DELETE_CONTENTS ) return null ; Node newNode = n . cloneNode ( false ) ; newNode . setNodeValue ( newNodeValue ) ; return newNode ; } void checkIndex ( Node refNode , int offset ) throws DOMException { if ( offset < 0 ) { throw new DOMException ( DOMException . INDEX_SIZE_ERR , "DOM004 Index out of bounds" ) ; } int type = refNode . getNodeType ( ) ; if ( type == Node . TEXT_NODE || type == Node . CDATA_SECTION_NODE || type == Node . COMMENT_NODE || type == Node . PROCESSING_INSTRUCTION_NODE ) { if ( offset > refNode . getNodeValue ( ) . length ( ) ) { throw new DOMException ( DOMException . INDEX_SIZE_ERR , "DOM004 Index out of bounds" ) ; } } else { if ( offset > refNode . getChildNodes ( ) . getLength ( ) ) { throw new DOMException ( DOMException . INDEX_SIZE_ERR , "DOM004 Index out of bounds" ) ; } } } private Node getRootContainer ( Node node ) { if ( node == null ) return null ; while ( node . getParentNode ( ) != null ) node = node . getParentNode ( ) ; return node ; } private boolean isLegalContainer ( Node node ) { if ( node == null ) return false ; while ( node != null ) { switch ( node . getNodeType ( ) ) { case Node . ENTITY_NODE : case Node . NOTATION_NODE : case Node . DOCUMENT_TYPE_NODE : return false ; } node = node . getParentNode ( ) ; } return true ; } private boolean hasLegalRootContainer ( Node node ) { if ( node == null ) return false ; Node rootContainer = getRootContainer ( node ) ; switch ( rootContainer . getNodeType ( ) ) { case Node . ATTRIBUTE_NODE : case Node . DOCUMENT_NODE : case Node . DOCUMENT_FRAGMENT_NODE : return true ; } return false ; } private boolean isLegalContainedNode ( Node node ) { if ( node == null ) return false ; switch ( node . getNodeType ( ) ) { case Node . DOCUMENT_NODE : case Node . DOCUMENT_FRAGMENT_NODE : case Node . ATTRIBUTE_NODE : case Node . ENTITY_NODE : case Node . NOTATION_NODE : return false ; } return true ; } Node nextNode ( Node node , boolean visitChildren ) { if ( node == null ) return null ; Node result ; if ( visitChildren ) { result = node . getFirstChild ( ) ; if ( result != null ) { return result ; } } result = node . getNextSibling ( ) ; if ( result != null ) { return result ; } Node parent = node . getParentNode ( ) ; while ( parent != null && parent != fDocument ) { result = parent . getNextSibling ( ) ; if ( result != null ) { return result ; } else { parent = parent . getParentNode ( ) ; } } return null ; } boolean isAncestorOf ( Node a , Node b ) { for ( Node node = b ; node != null ; node = node . getParentNode ( ) ) { if ( node == a ) return true ; } return false ; } int indexOf ( Node child , Node parent ) { if ( child . getParentNode ( ) != parent ) return - 1 ; int i = 0 ; for ( Node node = parent . getFirstChild ( ) ; node != child ; node = node . getNextSibling ( ) ) { i ++ ; } return i ; } private Node getSelectedNode ( Node container , int offset ) { if ( container . getNodeType ( ) == Node . TEXT_NODE ) return container ; if ( offset < 0 ) return container ; Node child = container . getFirstChild ( ) ; while ( child != null && offset > 0 ) { -- offset ; child = child . getNextSibling ( ) ; } if ( child != null ) return child ; return container ; } } 	0	['55', '1', '0', '3', '99', '473', '1', '3', '26', '0.798941799', '2660', '0', '7', '0', '0.246464646', '0', '0', '47.10909091', '20', '3.8182', '0']
package org . apache . wml . dom ; import org . apache . wml . * ; public class WMLTimerElementImpl extends WMLElementImpl implements WMLTimerElement { public WMLTimerElementImpl ( WMLDocumentImpl owner , String tagName ) { super ( owner , tagName ) ; } public void setValue ( String newValue ) { setAttribute ( "value" , newValue ) ; } public String getValue ( ) { return getAttribute ( "value" ) ; } public void setClassName ( String newValue ) { setAttribute ( "class" , newValue ) ; } public String getClassName ( ) { return getAttribute ( "class" ) ; } public void setId ( String newValue ) { setAttribute ( "id" , newValue ) ; } public String getId ( ) { return getAttribute ( "id" ) ; } public void setName ( String newValue ) { setAttribute ( "name" , newValue ) ; } public String getName ( ) { return getAttribute ( "name" ) ; } } 	0	['9', '4', '0', '3', '12', '36', '0', '3', '9', '2', '50', '0', '0', '0.911111111', '0.555555556', '1', '5', '4.555555556', '1', '0.8889', '0']
package org . xml . sax ; public class SAXNotRecognizedException extends SAXException { public SAXNotRecognizedException ( String message ) { super ( message ) ; } } 	0	['1', '4', '0', '0', '2', '0', '0', '0', '1', '2', '5', '0', '0', '1', '1', '0', '0', '4', '0', '0', '0']
package org . xml . sax . helpers ; import org . xml . sax . InputSource ; import org . xml . sax . Locator ; import org . xml . sax . Attributes ; import org . xml . sax . EntityResolver ; import org . xml . sax . DTDHandler ; import org . xml . sax . ContentHandler ; import org . xml . sax . ErrorHandler ; import org . xml . sax . SAXException ; import org . xml . sax . SAXParseException ; public class DefaultHandler implements EntityResolver , DTDHandler , ContentHandler , ErrorHandler { public InputSource resolveEntity ( String publicId , String systemId ) throws SAXException { return null ; } public void notationDecl ( String name , String publicId , String systemId ) throws SAXException { } public void unparsedEntityDecl ( String name , String publicId , String systemId , String notationName ) throws SAXException { } public void setDocumentLocator ( Locator locator ) { } public void startDocument ( ) throws SAXException { } public void endDocument ( ) throws SAXException { } public void startPrefixMapping ( String prefix , String uri ) throws SAXException { } public void endPrefixMapping ( String prefix ) throws SAXException { } public void startElement ( String uri , String localName , String qName , Attributes attributes ) throws SAXException { } public void endElement ( String uri , String localName , String qName ) throws SAXException { } public void characters ( char ch [ ] , int start , int length ) throws SAXException { } public void ignorableWhitespace ( char ch [ ] , int start , int length ) throws SAXException { } public void processingInstruction ( String target , String data ) throws SAXException { } public void skippedEntity ( String name ) throws SAXException { } public void warning ( SAXParseException e ) throws SAXException { } public void error ( SAXParseException e ) throws SAXException { } public void fatalError ( SAXParseException e ) throws SAXException { throw e ; } } 	0	['18', '1', '0', '0', '19', '153', '0', '0', '18', '2', '40', '0', '0', '0', '0.285714286', '0', '0', '1.222222222', '1', '0.9444', '0']
package org . w3c . dom . html ; import org . w3c . dom . DOMException ; public interface HTMLTableSectionElement extends HTMLElement { public String getAlign ( ) ; public void setAlign ( String align ) ; public String getCh ( ) ; public void setCh ( String ch ) ; public String getChOff ( ) ; public void setChOff ( String chOff ) ; public String getVAlign ( ) ; public void setVAlign ( String vAlign ) ; public HTMLCollection getRows ( ) ; public HTMLElement insertRow ( int index ) throws DOMException ; public void deleteRow ( int index ) throws DOMException ; } 	0	['11', '1', '0', '0', '11', '55', '0', '0', '11', '2', '11', '0', '0', '0', '0.515151515', '0', '0', '0', '1', '1', '0']
package org . apache . xerces . framework ; import org . apache . xerces . utils . StringPool ; public class XMLContentSpec { public static final int CONTENTSPECNODE_LEAF = 0 ; public static final int CONTENTSPECNODE_ZERO_OR_ONE = 1 ; public static final int CONTENTSPECNODE_ZERO_OR_MORE = 2 ; public static final int CONTENTSPECNODE_ONE_OR_MORE = 3 ; public static final int CONTENTSPECNODE_CHOICE = 4 ; public static final int CONTENTSPECNODE_SEQ = 5 ; public static final int CONTENTSPECNODE_ANY = 6 ; public static final int CONTENTSPECNODE_ANY_OTHER = 7 ; public static final int CONTENTSPECNODE_ANY_LOCAL = 8 ; public static final int CONTENTSPECNODE_ANY_LAX = 22 ; public static final int CONTENTSPECNODE_ANY_OTHER_LAX = 23 ; public static final int CONTENTSPECNODE_ANY_LOCAL_LAX = 24 ; public static final int CONTENTSPECNODE_ANY_SKIP = 38 ; public static final int CONTENTSPECNODE_ANY_OTHER_SKIP = 39 ; public static final int CONTENTSPECNODE_ANY_LOCAL_SKIP = 40 ; public int type ; public int value ; public int otherValue ; public XMLContentSpec ( ) { clear ( ) ; } public XMLContentSpec ( int type , int value , int otherValue ) { setValues ( type , value , otherValue ) ; } public XMLContentSpec ( XMLContentSpec contentSpec ) { setValues ( contentSpec ) ; } public XMLContentSpec ( XMLContentSpec . Provider provider , int contentSpecIndex ) { setValues ( provider , contentSpecIndex ) ; } public void clear ( ) { type = - 1 ; value = - 1 ; otherValue = - 1 ; } public void setValues ( int type , int value , int otherValue ) { this . type = type ; this . value = value ; this . otherValue = otherValue ; } public void setValues ( XMLContentSpec contentSpec ) { type = contentSpec . type ; value = contentSpec . value ; otherValue = contentSpec . otherValue ; } public void setValues ( XMLContentSpec . Provider provider , int contentSpecIndex ) { if ( ! provider . getContentSpec ( contentSpecIndex , this ) ) { clear ( ) ; } } public static String toString ( XMLContentSpec . Provider provider , StringPool stringPool , int contentSpecIndex ) { XMLContentSpec contentSpec = new XMLContentSpec ( ) ; if ( provider . getContentSpec ( contentSpecIndex , contentSpec ) ) { StringBuffer str = new StringBuffer ( ) ; int parentContentSpecType = contentSpec . type & 0x0f ; int nextContentSpec ; switch ( parentContentSpecType ) { case XMLContentSpec . CONTENTSPECNODE_LEAF : { str . append ( '(' ) ; if ( contentSpec . value == - 1 && contentSpec . otherValue == - 1 ) { str . append ( "#PCDATA" ) ; } else { str . append ( stringPool . toString ( contentSpec . value ) ) ; } str . append ( ')' ) ; break ; } case XMLContentSpec . CONTENTSPECNODE_ZERO_OR_ONE : { provider . getContentSpec ( contentSpec . value , contentSpec ) ; nextContentSpec = contentSpec . type ; if ( nextContentSpec == XMLContentSpec . CONTENTSPECNODE_LEAF ) { str . append ( '(' ) ; str . append ( stringPool . toString ( contentSpec . value ) ) ; str . append ( ')' ) ; } else if ( nextContentSpec == XMLContentSpec . CONTENTSPECNODE_ONE_OR_MORE || nextContentSpec == XMLContentSpec . CONTENTSPECNODE_ZERO_OR_MORE || nextContentSpec == XMLContentSpec . CONTENTSPECNODE_ZERO_OR_ONE ) { str . append ( '(' ) ; appendContentSpec ( provider , stringPool , contentSpec , str , true , parentContentSpecType ) ; str . append ( ')' ) ; } else { appendContentSpec ( provider , stringPool , contentSpec , str , true , parentContentSpecType ) ; } str . append ( '?' ) ; break ; } case XMLContentSpec . CONTENTSPECNODE_ZERO_OR_MORE : { provider . getContentSpec ( contentSpec . value , contentSpec ) ; nextContentSpec = contentSpec . type ; if ( nextContentSpec == XMLContentSpec . CONTENTSPECNODE_LEAF ) { str . append ( '(' ) ; if ( contentSpec . value == - 1 && contentSpec . otherValue == - 1 ) { str . append ( "#PCDATA" ) ; } else if ( contentSpec . otherValue != - 1 ) { str . append ( "##any:uri=" + stringPool . toString ( contentSpec . otherValue ) ) ; } else if ( contentSpec . value == - 1 ) { str . append ( "##any" ) ; } else { appendContentSpec ( provider , stringPool , contentSpec , str , true , parentContentSpecType ) ; } str . append ( ')' ) ; } else if ( nextContentSpec == XMLContentSpec . CONTENTSPECNODE_ONE_OR_MORE || nextContentSpec == XMLContentSpec . CONTENTSPECNODE_ZERO_OR_MORE || nextContentSpec == XMLContentSpec . CONTENTSPECNODE_ZERO_OR_ONE ) { str . append ( '(' ) ; appendContentSpec ( provider , stringPool , contentSpec , str , true , parentContentSpecType ) ; str . append ( ')' ) ; } else { appendContentSpec ( provider , stringPool , contentSpec , str , true , parentContentSpecType ) ; } str . append ( '*' ) ; break ; } case XMLContentSpec . CONTENTSPECNODE_ONE_OR_MORE : { provider . getContentSpec ( contentSpec . value , contentSpec ) ; nextContentSpec = contentSpec . type ; if ( nextContentSpec == XMLContentSpec . CONTENTSPECNODE_LEAF ) { str . append ( '(' ) ; if ( contentSpec . value == - 1 && contentSpec . otherValue == - 1 ) { str . append ( "#PCDATA" ) ; } else if ( contentSpec . otherValue != - 1 ) { str . append ( "##any:uri=" + stringPool . toString ( contentSpec . otherValue ) ) ; } else if ( contentSpec . value == - 1 ) { str . append ( "##any" ) ; } else { str . append ( stringPool . toString ( contentSpec . value ) ) ; } str . append ( ')' ) ; } else if ( nextContentSpec == XMLContentSpec . CONTENTSPECNODE_ONE_OR_MORE || nextContentSpec == XMLContentSpec . CONTENTSPECNODE_ZERO_OR_MORE || nextContentSpec == XMLContentSpec . CONTENTSPECNODE_ZERO_OR_ONE ) { str . append ( '(' ) ; appendContentSpec ( provider , stringPool , contentSpec , str , true , parentContentSpecType ) ; str . append ( ')' ) ; } else { appendContentSpec ( provider , stringPool , contentSpec , str , true , parentContentSpecType ) ; } str . append ( '+' ) ; break ; } case XMLContentSpec . CONTENTSPECNODE_CHOICE : case XMLContentSpec . CONTENTSPECNODE_SEQ : { appendContentSpec ( provider , stringPool , contentSpec , str , true , parentContentSpecType ) ; break ; } case XMLContentSpec . CONTENTSPECNODE_ANY : { str . append ( "##any" ) ; if ( contentSpec . otherValue != - 1 ) { str . append ( ":uri=" ) ; str . append ( stringPool . toString ( contentSpec . otherValue ) ) ; } break ; } case XMLContentSpec . CONTENTSPECNODE_ANY_OTHER : { str . append ( "##other:uri=" ) ; str . append ( stringPool . toString ( contentSpec . otherValue ) ) ; break ; } case XMLContentSpec . CONTENTSPECNODE_ANY_LOCAL : { str . append ( "##local" ) ; break ; } default : { str . append ( "???" ) ; } } return str . toString ( ) ; } return null ; } public int hashCode ( ) { return type << 16 | value << 8 | otherValue ; } public boolean equals ( Object object ) { if ( object != null && object instanceof XMLContentSpec ) { XMLContentSpec contentSpec = ( XMLContentSpec ) object ; return type == contentSpec . type && value == contentSpec . value && otherValue == contentSpec . otherValue ; } return false ; } private static void appendContentSpec ( XMLContentSpec . Provider provider , StringPool stringPool , XMLContentSpec contentSpec , StringBuffer str , boolean parens , int parentContentSpecType ) { int thisContentSpec = contentSpec . type & 0x0f ; switch ( thisContentSpec ) { case XMLContentSpec . CONTENTSPECNODE_LEAF : { if ( contentSpec . value == - 1 && contentSpec . otherValue == - 1 ) { str . append ( "#PCDATA" ) ; } else if ( contentSpec . value == - 1 && contentSpec . otherValue != - 1 ) { str . append ( "##any:uri=" + stringPool . toString ( contentSpec . otherValue ) ) ; } else if ( contentSpec . value == - 1 ) { str . append ( "##any" ) ; } else { str . append ( stringPool . toString ( contentSpec . value ) ) ; } break ; } case XMLContentSpec . CONTENTSPECNODE_ZERO_OR_ONE : { if ( parentContentSpecType == XMLContentSpec . CONTENTSPECNODE_ONE_OR_MORE || parentContentSpecType == XMLContentSpec . CONTENTSPECNODE_ZERO_OR_MORE || parentContentSpecType == XMLContentSpec . CONTENTSPECNODE_ZERO_OR_ONE ) { provider . getContentSpec ( contentSpec . value , contentSpec ) ; str . append ( '(' ) ; appendContentSpec ( provider , stringPool , contentSpec , str , true , thisContentSpec ) ; str . append ( ')' ) ; } else { provider . getContentSpec ( contentSpec . value , contentSpec ) ; appendContentSpec ( provider , stringPool , contentSpec , str , true , thisContentSpec ) ; } str . append ( '?' ) ; break ; } case XMLContentSpec . CONTENTSPECNODE_ZERO_OR_MORE : { if ( parentContentSpecType == XMLContentSpec . CONTENTSPECNODE_ONE_OR_MORE || parentContentSpecType == XMLContentSpec . CONTENTSPECNODE_ZERO_OR_MORE || parentContentSpecType == XMLContentSpec . CONTENTSPECNODE_ZERO_OR_ONE ) { provider . getContentSpec ( contentSpec . value , contentSpec ) ; str . append ( '(' ) ; appendContentSpec ( provider , stringPool , contentSpec , str , true , thisContentSpec ) ; str . append ( ')' ) ; } else { provider . getContentSpec ( contentSpec . value , contentSpec ) ; appendContentSpec ( provider , stringPool , contentSpec , str , true , thisContentSpec ) ; } str . append ( '*' ) ; break ; } case XMLContentSpec . CONTENTSPECNODE_ONE_OR_MORE : { if ( parentContentSpecType == XMLContentSpec . CONTENTSPECNODE_ONE_OR_MORE || parentContentSpecType == XMLContentSpec . CONTENTSPECNODE_ZERO_OR_MORE || parentContentSpecType == XMLContentSpec . CONTENTSPECNODE_ZERO_OR_ONE ) { str . append ( '(' ) ; provider . getContentSpec ( contentSpec . value , contentSpec ) ; appendContentSpec ( provider , stringPool , contentSpec , str , true , thisContentSpec ) ; str . append ( ')' ) ; } else { provider . getContentSpec ( contentSpec . value , contentSpec ) ; appendContentSpec ( provider , stringPool , contentSpec , str , true , thisContentSpec ) ; } str . append ( '+' ) ; break ; } case XMLContentSpec . CONTENTSPECNODE_CHOICE : case XMLContentSpec . CONTENTSPECNODE_SEQ : { if ( parens ) { str . append ( '(' ) ; } int type = contentSpec . type ; int otherValue = contentSpec . otherValue ; provider . getContentSpec ( contentSpec . value , contentSpec ) ; appendContentSpec ( provider , stringPool , contentSpec , str , contentSpec . type != type , thisContentSpec ) ; if ( type == XMLContentSpec . CONTENTSPECNODE_CHOICE ) { str . append ( '|' ) ; } else { str . append ( ',' ) ; } provider . getContentSpec ( otherValue , contentSpec ) ; appendContentSpec ( provider , stringPool , contentSpec , str , true , thisContentSpec ) ; if ( parens ) { str . append ( ')' ) ; } break ; } case XMLContentSpec . CONTENTSPECNODE_ANY : { str . append ( "##any" ) ; if ( contentSpec . otherValue != - 1 ) { str . append ( ":uri=" ) ; str . append ( stringPool . toString ( contentSpec . otherValue ) ) ; } break ; } case XMLContentSpec . CONTENTSPECNODE_ANY_OTHER : { str . append ( "##other:uri=" ) ; str . append ( stringPool . toString ( contentSpec . otherValue ) ) ; break ; } case XMLContentSpec . CONTENTSPECNODE_ANY_LOCAL : { str . append ( "##local" ) ; break ; } default : { str . append ( "???" ) ; break ; } } } public interface Provider { public boolean getContentSpec ( int contentSpecIndex , XMLContentSpec contentSpec ) ; } } 	0	['12', '1', '0', '9', '19', '24', '8', '2', '11', '0.924242424', '827', '0', '0', '0', '0.291666667', '1', '1', '66.41666667', '26', '4.9167', '0']
package org . apache . xerces . dom ; import java . util . Enumeration ; import java . util . Vector ; import org . w3c . dom . * ; import org . w3c . dom . events . * ; public abstract class ChildNode extends NodeImpl { static final long serialVersionUID = - 6112455738802414002L ; protected ChildNode previousSibling ; protected ChildNode nextSibling ; protected ChildNode ( DocumentImpl ownerDocument ) { super ( ownerDocument ) ; } public ChildNode ( ) { } public Node cloneNode ( boolean deep ) { ChildNode newnode = ( ChildNode ) super . cloneNode ( deep ) ; newnode . previousSibling = null ; newnode . nextSibling = null ; newnode . isFirstChild ( false ) ; return newnode ; } public Node getParentNode ( ) { return isOwned ( ) ? ownerNode : null ; } final NodeImpl parentNode ( ) { return isOwned ( ) ? ownerNode : null ; } public Node getNextSibling ( ) { return nextSibling ; } public Node getPreviousSibling ( ) { return isFirstChild ( ) ? null : previousSibling ; } final ChildNode previousSibling ( ) { return isFirstChild ( ) ? null : previousSibling ; } } 	0	['8', '2', '2', '9', '14', '18', '9', '2', '5', '0.904761905', '69', '0.666666667', '2', '0.88', '0.416666667', '1', '3', '7.25', '2', '1.25', '0']
package org . apache . xerces . validators . schema . identity ; public class KeyRef extends IdentityConstraint { protected String fKeyName ; public KeyRef ( String elementName , String keyName ) { super ( elementName ) ; fKeyName = keyName ; } public short getType ( ) { return KEYREF ; } public String getName ( ) { return fKeyName ; } } 	0	['3', '2', '0', '5', '4', '1', '4', '1', '3', '0.5', '16', '1', '0', '0.8', '0.666666667', '0', '0', '4', '1', '0.6667', '0']
package org . apache . html . dom ; import org . w3c . dom . * ; import org . w3c . dom . html . * ; public class HTMLAnchorElementImpl extends HTMLElementImpl implements HTMLAnchorElement { public String getAccessKey ( ) { String accessKey ; accessKey = getAttribute ( "accesskey" ) ; if ( accessKey != null && accessKey . length ( ) > 1 ) accessKey = accessKey . substring ( 0 , 1 ) ; return accessKey ; } public void setAccessKey ( String accessKey ) { if ( accessKey != null && accessKey . length ( ) > 1 ) accessKey = accessKey . substring ( 0 , 1 ) ; setAttribute ( "accesskey" , accessKey ) ; } public String getCharset ( ) { return getAttribute ( "charset" ) ; } public void setCharset ( String charset ) { setAttribute ( "charset" , charset ) ; } public String getCoords ( ) { return getAttribute ( "coords" ) ; } public void setCoords ( String coords ) { setAttribute ( "coords" , coords ) ; } public String getHref ( ) { return getAttribute ( "href" ) ; } public void setHref ( String href ) { setAttribute ( "href" , href ) ; } public String getHreflang ( ) { return getAttribute ( "hreflang" ) ; } public void setHreflang ( String hreflang ) { setAttribute ( "hreflang" , hreflang ) ; } public String getName ( ) { return getAttribute ( "name" ) ; } public void setName ( String name ) { setAttribute ( "name" , name ) ; } public String getRel ( ) { return getAttribute ( "rel" ) ; } public void setRel ( String rel ) { setAttribute ( "rel" , rel ) ; } public String getRev ( ) { return getAttribute ( "rev" ) ; } public void setRev ( String rev ) { setAttribute ( "rev" , rev ) ; } public String getShape ( ) { return capitalize ( getAttribute ( "shape" ) ) ; } public void setShape ( String shape ) { setAttribute ( "shape" , shape ) ; } public int getTabIndex ( ) { return this . getInteger ( getAttribute ( "tabindex" ) ) ; } public void setTabIndex ( int tabIndex ) { setAttribute ( "tabindex" , String . valueOf ( tabIndex ) ) ; } public String getTarget ( ) { return getAttribute ( "target" ) ; } public void setTarget ( String target ) { setAttribute ( "target" , target ) ; } public String getType ( ) { return getAttribute ( "type" ) ; } public void setType ( String type ) { setAttribute ( "type" , type ) ; } public void blur ( ) { } public void focus ( ) { } public HTMLAnchorElementImpl ( HTMLDocumentImpl owner , String name ) { super ( owner , name ) ; } } 	0	['27', '4', '0', '2', '35', '351', '0', '2', '27', '2', '171', '0', '0', '0.783333333', '0.37962963', '0', '0', '5.333333333', '3', '1.1111', '0']
package org . xml . sax . helpers ; import java . util . EmptyStackException ; import java . util . Enumeration ; import java . util . Hashtable ; import java . util . Vector ; public class NamespaceSupport { public final static String XMLNS = "http://www.w3.org/XML/1998/namespace" ; private final static Enumeration EMPTY_ENUMERATION = new Vector ( ) . elements ( ) ; public NamespaceSupport ( ) { reset ( ) ; } public void reset ( ) { contexts = new Context [ 32 ] ; contextPos = 0 ; contexts [ contextPos ] = currentContext = new Context ( ) ; currentContext . declarePrefix ( "xml" , XMLNS ) ; } public void pushContext ( ) { int max = contexts . length ; contextPos ++ ; if ( contextPos >= max ) { Context newContexts [ ] = new Context [ max * 2 ] ; System . arraycopy ( contexts , 0 , newContexts , 0 , max ) ; max *= 2 ; contexts = newContexts ; } currentContext = contexts [ contextPos ] ; if ( currentContext == null ) { contexts [ contextPos ] = currentContext = new Context ( ) ; } if ( contextPos > 0 ) { currentContext . setParent ( contexts [ contextPos - 1 ] ) ; } } public void popContext ( ) { contextPos -- ; if ( contextPos < 0 ) { throw new EmptyStackException ( ) ; } currentContext = contexts [ contextPos ] ; } public boolean declarePrefix ( String prefix , String uri ) { if ( prefix . equals ( "xml" ) || prefix . equals ( "xmlns" ) ) { return false ; } else { currentContext . declarePrefix ( prefix , uri ) ; return true ; } } public String [ ] processName ( String qName , String parts [ ] , boolean isAttribute ) { String myParts [ ] = currentContext . processName ( qName , isAttribute ) ; if ( myParts == null ) { return null ; } else { parts [ 0 ] = myParts [ 0 ] ; parts [ 1 ] = myParts [ 1 ] ; parts [ 2 ] = myParts [ 2 ] ; return parts ; } } public String getURI ( String prefix ) { return currentContext . getURI ( prefix ) ; } public Enumeration getPrefixes ( ) { return currentContext . getPrefixes ( ) ; } public String getPrefix ( String uri ) { return currentContext . getPrefix ( uri ) ; } public Enumeration getPrefixes ( String uri ) { Vector prefixes = new Vector ( ) ; Enumeration allPrefixes = getPrefixes ( ) ; while ( allPrefixes . hasMoreElements ( ) ) { String prefix = ( String ) allPrefixes . nextElement ( ) ; if ( uri . equals ( getURI ( prefix ) ) ) { prefixes . addElement ( prefix ) ; } } return prefixes . elements ( ) ; } public Enumeration getDeclaredPrefixes ( ) { return currentContext . getDeclaredPrefixes ( ) ; } private Context contexts [ ] ; private Context currentContext ; private int contextPos ; final class Context { Context ( ) { copyTables ( ) ; } void setParent ( Context parent ) { this . parent = parent ; declarations = null ; prefixTable = parent . prefixTable ; uriTable = parent . uriTable ; elementNameTable = parent . elementNameTable ; attributeNameTable = parent . attributeNameTable ; defaultNS = parent . defaultNS ; tablesDirty = false ; } void declarePrefix ( String prefix , String uri ) { if ( ! tablesDirty ) { copyTables ( ) ; } if ( declarations == null ) { declarations = new Vector ( ) ; } prefix = prefix . intern ( ) ; uri = uri . intern ( ) ; if ( "" . equals ( prefix ) ) { if ( "" . equals ( uri ) ) { defaultNS = null ; } else { defaultNS = uri ; } } else { prefixTable . put ( prefix , uri ) ; uriTable . put ( uri , prefix ) ; } declarations . addElement ( prefix ) ; } String [ ] processName ( String qName , boolean isAttribute ) { String name [ ] ; Hashtable table ; if ( isAttribute ) { table = elementNameTable ; } else { table = attributeNameTable ; } name = ( String [ ] ) table . get ( qName ) ; if ( name != null ) { return name ; } name = new String [ 3 ] ; int index = qName . indexOf ( ':' ) ; if ( index == - 1 ) { if ( isAttribute || defaultNS == null ) { name [ 0 ] = "" ; } else { name [ 0 ] = defaultNS ; } name [ 1 ] = qName . intern ( ) ; name [ 2 ] = name [ 1 ] ; } else { String prefix = qName . substring ( 0 , index ) ; String local = qName . substring ( index + 1 ) ; String uri ; if ( "" . equals ( prefix ) ) { uri = defaultNS ; } else { uri = ( String ) prefixTable . get ( prefix ) ; } if ( uri == null ) { return null ; } name [ 0 ] = uri ; name [ 1 ] = local . intern ( ) ; name [ 2 ] = qName . intern ( ) ; } table . put ( name [ 2 ] , name ) ; tablesDirty = true ; return name ; } String getURI ( String prefix ) { if ( "" . equals ( prefix ) ) { return defaultNS ; } else if ( prefixTable == null ) { return null ; } else { return ( String ) prefixTable . get ( prefix ) ; } } String getPrefix ( String uri ) { if ( uriTable == null ) { return null ; } else { return ( String ) uriTable . get ( uri ) ; } } Enumeration getDeclaredPrefixes ( ) { if ( declarations == null ) { return EMPTY_ENUMERATION ; } else { return declarations . elements ( ) ; } } Enumeration getPrefixes ( ) { if ( prefixTable == null ) { return EMPTY_ENUMERATION ; } else { return prefixTable . keys ( ) ; } } private void copyTables ( ) { if ( prefixTable != null ) { prefixTable = ( Hashtable ) prefixTable . clone ( ) ; } else { prefixTable = new Hashtable ( ) ; } if ( uriTable != null ) { uriTable = ( Hashtable ) uriTable . clone ( ) ; } else { uriTable = new Hashtable ( ) ; } elementNameTable = new Hashtable ( ) ; attributeNameTable = new Hashtable ( ) ; tablesDirty = true ; } Hashtable prefixTable ; Hashtable uriTable ; Hashtable elementNameTable ; Hashtable attributeNameTable ; String defaultNS = null ; private Vector declarations = null ; private boolean tablesDirty = false ; private Context parent = null ; } } 	0	['13', '1', '0', '0', '30', '4', '0', '0', '11', '0.733333333', '238', '0.8', '2', '0', '0.375', '0', '0', '16.92307692', '4', '1.4615', '0']
package org . apache . wml . dom ; import java . io . * ; import java . util . * ; import java . lang . reflect . * ; import org . w3c . dom . * ; import org . w3c . dom . html . * ; import org . apache . xerces . dom . DocumentImpl ; import org . apache . xerces . dom . NodeImpl ; import org . apache . xerces . dom . AttrImpl ; import org . w3c . dom . DOMException ; import org . apache . wml . * ; public class WMLDocumentImpl extends DocumentImpl implements WMLDocument { private static Hashtable _elementTypesWML ; private static final Class [ ] _elemClassSigWML = new Class [ ] { WMLDocumentImpl . class , String . class } ; public Element createElement ( String tagName ) throws DOMException { Class elemClass ; Constructor cnst ; elemClass = ( Class ) _elementTypesWML . get ( tagName ) ; if ( elemClass != null ) { try { cnst = elemClass . getConstructor ( _elemClassSigWML ) ; return ( Element ) cnst . newInstance ( new Object [ ] { this , tagName } ) ; } catch ( Exception except ) { Throwable thrw ; if ( except instanceof java . lang . reflect . InvocationTargetException ) thrw = ( ( java . lang . reflect . InvocationTargetException ) except ) . getTargetException ( ) ; else thrw = except ; System . out . println ( "Exception " + thrw . getClass ( ) . getName ( ) ) ; System . out . println ( thrw . getMessage ( ) ) ; throw new IllegalStateException ( "Tag '" + tagName + "' associated with an Element class that failed to construct." ) ; } } return new WMLElementImpl ( this , tagName ) ; } static { _elementTypesWML = new Hashtable ( ) ; _elementTypesWML . put ( "b" , WMLBElementImpl . class ) ; _elementTypesWML . put ( "noop" , WMLNoopElementImpl . class ) ; _elementTypesWML . put ( "a" , WMLAElementImpl . class ) ; _elementTypesWML . put ( "setvar" , WMLSetvarElementImpl . class ) ; _elementTypesWML . put ( "access" , WMLAccessElementImpl . class ) ; _elementTypesWML . put ( "strong" , WMLStrongElementImpl . class ) ; _elementTypesWML . put ( "postfield" , WMLPostfieldElementImpl . class ) ; _elementTypesWML . put ( "do" , WMLDoElementImpl . class ) ; _elementTypesWML . put ( "wml" , WMLWmlElementImpl . class ) ; _elementTypesWML . put ( "tr" , WMLTrElementImpl . class ) ; _elementTypesWML . put ( "go" , WMLGoElementImpl . class ) ; _elementTypesWML . put ( "big" , WMLBigElementImpl . class ) ; _elementTypesWML . put ( "anchor" , WMLAnchorElementImpl . class ) ; _elementTypesWML . put ( "timer" , WMLTimerElementImpl . class ) ; _elementTypesWML . put ( "small" , WMLSmallElementImpl . class ) ; _elementTypesWML . put ( "optgroup" , WMLOptgroupElementImpl . class ) ; _elementTypesWML . put ( "head" , WMLHeadElementImpl . class ) ; _elementTypesWML . put ( "td" , WMLTdElementImpl . class ) ; _elementTypesWML . put ( "fieldset" , WMLFieldsetElementImpl . class ) ; _elementTypesWML . put ( "img" , WMLImgElementImpl . class ) ; _elementTypesWML . put ( "refresh" , WMLRefreshElementImpl . class ) ; _elementTypesWML . put ( "onevent" , WMLOneventElementImpl . class ) ; _elementTypesWML . put ( "input" , WMLInputElementImpl . class ) ; _elementTypesWML . put ( "prev" , WMLPrevElementImpl . class ) ; _elementTypesWML . put ( "table" , WMLTableElementImpl . class ) ; _elementTypesWML . put ( "meta" , WMLMetaElementImpl . class ) ; _elementTypesWML . put ( "template" , WMLTemplateElementImpl . class ) ; _elementTypesWML . put ( "br" , WMLBrElementImpl . class ) ; _elementTypesWML . put ( "option" , WMLOptionElementImpl . class ) ; _elementTypesWML . put ( "u" , WMLUElementImpl . class ) ; _elementTypesWML . put ( "p" , WMLPElementImpl . class ) ; _elementTypesWML . put ( "select" , WMLSelectElementImpl . class ) ; _elementTypesWML . put ( "em" , WMLEmElementImpl . class ) ; _elementTypesWML . put ( "i" , WMLIElementImpl . class ) ; _elementTypesWML . put ( "card" , WMLCardElementImpl . class ) ; } public WMLDocumentImpl ( DocumentType doctype ) { super ( doctype , false ) ; } } 	0	['4', '3', '0', '39', '23', '4', '37', '3', '2', '0.982905983', '580', '0.051282051', '0', '0.977777778', '0.555555556', '1', '1', '134.25', '1', '0.5', '0']
package org . w3c . dom . events ; import org . w3c . dom . Node ; public interface MutationEvent extends Event { public static final short MODIFICATION = 1 ; public static final short ADDITION = 2 ; public static final short REMOVAL = 3 ; public Node getRelatedNode ( ) ; public String getPrevValue ( ) ; public String getNewValue ( ) ; public String getAttrName ( ) ; public short getAttrChange ( ) ; public void initMutationEvent ( String typeArg , boolean canBubbleArg , boolean cancelableArg , Node relatedNodeArg , String prevValueArg , String newValueArg , String attrNameArg , short attrChangeArg ) ; } 	0	['6', '1', '0', '0', '6', '15', '0', '0', '6', '1.2', '9', '0', '0', '0', '0.333333333', '0', '0', '0', '1', '1', '0']
package org . apache . xerces . utils ; import org . apache . xerces . readers . XMLEntityHandler ; import java . util . Vector ; public class UTF8DataChunk implements StringPool . StringProducer { public static final int CHUNK_SHIFT = 14 ; public static final int CHUNK_SIZE = ( 1 << CHUNK_SHIFT ) ; public static final int CHUNK_MASK = CHUNK_SIZE - 1 ; public static UTF8DataChunk createChunk ( StringPool stringPool , UTF8DataChunk prev ) { synchronized ( UTF8DataChunk . class ) { if ( fgFreeChunks != null ) { UTF8DataChunk newChunk = fgFreeChunks ; fgFreeChunks = newChunk . fNextChunk ; newChunk . fNextChunk = null ; newChunk . init ( stringPool , prev ) ; return newChunk ; } } UTF8DataChunk chunk = new UTF8DataChunk ( stringPool , prev ) ; return chunk ; } public final byte [ ] toByteArray ( ) { return fData ; } public void setByteArray ( byte [ ] data ) { fData = data ; } public UTF8DataChunk nextChunk ( ) { return fNextChunk ; } public boolean clearPreviousChunk ( ) { if ( fPreviousChunk != null ) { fPreviousChunk . setNextChunk ( null ) ; fPreviousChunk . removeRef ( ) ; fPreviousChunk = null ; return true ; } return fChunk == 0 ; } public void releaseChunk ( ) { removeRef ( ) ; } public void releaseString ( int offset , int length ) { removeRef ( ) ; } public String toString ( int offset , int length ) { synchronized ( fgTempBufferLock ) { int outOffset = 0 ; UTF8DataChunk dataChunk = this ; int endOffset = offset + length ; int index = offset & CHUNK_MASK ; byte [ ] data = fData ; boolean skiplf = false ; while ( offset < endOffset ) { int b0 = data [ index ++ ] & 0xff ; offset ++ ; if ( index == CHUNK_SIZE && offset < endOffset ) { dataChunk = dataChunk . fNextChunk ; data = dataChunk . fData ; index = 0 ; } if ( b0 < 0x80 ) { if ( skiplf ) { skiplf = false ; if ( b0 == 0x0A ) continue ; } if ( b0 == 0x0D ) { b0 = 0x0A ; skiplf = true ; } try { fgTempBuffer [ outOffset ] = ( char ) b0 ; outOffset ++ ; } catch ( NullPointerException ex ) { fgTempBuffer = new char [ CHUNK_SIZE ] ; fgTempBuffer [ outOffset ++ ] = ( char ) b0 ; } catch ( ArrayIndexOutOfBoundsException ex ) { char [ ] newBuffer = new char [ outOffset * 2 ] ; System . arraycopy ( fgTempBuffer , 0 , newBuffer , 0 , outOffset ) ; fgTempBuffer = newBuffer ; fgTempBuffer [ outOffset ++ ] = ( char ) b0 ; } continue ; } int b1 = data [ index ++ ] & 0xff ; offset ++ ; if ( index == CHUNK_SIZE && offset < endOffset ) { dataChunk = dataChunk . fNextChunk ; data = dataChunk . fData ; index = 0 ; } if ( ( 0xe0 & b0 ) == 0xc0 ) { int ch = ( ( 0x1f & b0 ) << 6 ) + ( 0x3f & b1 ) ; try { fgTempBuffer [ outOffset ] = ( char ) ch ; outOffset ++ ; } catch ( NullPointerException ex ) { fgTempBuffer = new char [ CHUNK_SIZE ] ; fgTempBuffer [ outOffset ++ ] = ( char ) ch ; } catch ( ArrayIndexOutOfBoundsException ex ) { char [ ] newBuffer = new char [ outOffset * 2 ] ; System . arraycopy ( fgTempBuffer , 0 , newBuffer , 0 , outOffset ) ; fgTempBuffer = newBuffer ; fgTempBuffer [ outOffset ++ ] = ( char ) ch ; } continue ; } int b2 = data [ index ++ ] & 0xff ; offset ++ ; if ( index == CHUNK_SIZE && offset < endOffset ) { dataChunk = dataChunk . fNextChunk ; data = dataChunk . fData ; index = 0 ; } if ( ( 0xf0 & b0 ) == 0xe0 ) { int ch = ( ( 0x0f & b0 ) << 12 ) + ( ( 0x3f & b1 ) << 6 ) + ( 0x3f & b2 ) ; try { fgTempBuffer [ outOffset ] = ( char ) ch ; outOffset ++ ; } catch ( NullPointerException ex ) { fgTempBuffer = new char [ CHUNK_SIZE ] ; fgTempBuffer [ outOffset ++ ] = ( char ) ch ; } catch ( ArrayIndexOutOfBoundsException ex ) { char [ ] newBuffer = new char [ outOffset * 2 ] ; System . arraycopy ( fgTempBuffer , 0 , newBuffer , 0 , outOffset ) ; fgTempBuffer = newBuffer ; fgTempBuffer [ outOffset ++ ] = ( char ) ch ; } continue ; } int b3 = data [ index ++ ] & 0xff ; offset ++ ; if ( index == CHUNK_SIZE && offset < endOffset ) { dataChunk = dataChunk . fNextChunk ; data = dataChunk . fData ; index = 0 ; } int ch = ( ( 0x0f & b0 ) << 18 ) + ( ( 0x3f & b1 ) << 12 ) + ( ( 0x3f & b2 ) << 6 ) + ( 0x3f & b3 ) ; if ( ch < 0x10000 ) { try { fgTempBuffer [ outOffset ] = ( char ) ch ; outOffset ++ ; } catch ( NullPointerException ex ) { fgTempBuffer = new char [ CHUNK_SIZE ] ; fgTempBuffer [ outOffset ++ ] = ( char ) ch ; } catch ( ArrayIndexOutOfBoundsException ex ) { char [ ] newBuffer = new char [ outOffset * 2 ] ; System . arraycopy ( fgTempBuffer , 0 , newBuffer , 0 , outOffset ) ; fgTempBuffer = newBuffer ; fgTempBuffer [ outOffset ++ ] = ( char ) ch ; } } else { char ch1 = ( char ) ( ( ( ch - 0x00010000 ) > > 10 ) + 0xd800 ) ; char ch2 = ( char ) ( ( ( ch - 0x00010000 ) & 0x3ff ) + 0xdc00 ) ; try { fgTempBuffer [ outOffset ] = ( char ) ch1 ; outOffset ++ ; } catch ( NullPointerException ex ) { fgTempBuffer = new char [ CHUNK_SIZE ] ; fgTempBuffer [ outOffset ++ ] = ( char ) ch1 ; } catch ( ArrayIndexOutOfBoundsException ex ) { char [ ] newBuffer = new char [ outOffset * 2 ] ; System . arraycopy ( fgTempBuffer , 0 , newBuffer , 0 , outOffset ) ; fgTempBuffer = newBuffer ; fgTempBuffer [ outOffset ++ ] = ( char ) ch1 ; } try { fgTempBuffer [ outOffset ] = ( char ) ch2 ; outOffset ++ ; } catch ( NullPointerException ex ) { fgTempBuffer = new char [ CHUNK_SIZE ] ; fgTempBuffer [ outOffset ++ ] = ( char ) ch2 ; } catch ( ArrayIndexOutOfBoundsException ex ) { char [ ] newBuffer = new char [ outOffset * 2 ] ; System . arraycopy ( fgTempBuffer , 0 , newBuffer , 0 , outOffset ) ; fgTempBuffer = newBuffer ; fgTempBuffer [ outOffset ++ ] = ( char ) ch2 ; } } } return new String ( fgTempBuffer , 0 , outOffset ) ; } } public boolean equalsString ( int offset , int length , char [ ] strChars , int strOffset , int strLength ) { UTF8DataChunk dataChunk = this ; int endOffset = offset + length ; int index = offset & CHUNK_MASK ; byte [ ] data = fData ; boolean skiplf = false ; while ( offset < endOffset ) { if ( strLength -- == 0 ) return false ; int b0 = data [ index ++ ] & 0xff ; offset ++ ; if ( index == CHUNK_SIZE && offset < endOffset ) { dataChunk = dataChunk . fNextChunk ; data = dataChunk . fData ; index = 0 ; } if ( b0 < 0x80 ) { if ( skiplf ) { skiplf = false ; if ( b0 == 0x0A ) continue ; } if ( b0 == 0x0D ) { b0 = 0x0A ; skiplf = true ; } if ( b0 != strChars [ strOffset ++ ] ) return false ; continue ; } int b1 = data [ index ++ ] & 0xff ; offset ++ ; if ( index == CHUNK_SIZE && offset < endOffset ) { dataChunk = dataChunk . fNextChunk ; data = dataChunk . fData ; index = 0 ; } if ( ( 0xe0 & b0 ) == 0xc0 ) { int ch = ( ( 0x1f & b0 ) << 6 ) + ( 0x3f & b1 ) ; if ( ch != strChars [ strOffset ++ ] ) return false ; continue ; } int b2 = data [ index ++ ] & 0xff ; offset ++ ; if ( index == CHUNK_SIZE && offset < endOffset ) { dataChunk = dataChunk . fNextChunk ; data = dataChunk . fData ; index = 0 ; } if ( ( 0xf0 & b0 ) == 0xe0 ) { int ch = ( ( 0x0f & b0 ) << 12 ) + ( ( 0x3f & b1 ) << 6 ) + ( 0x3f & b2 ) ; if ( ch != strChars [ strOffset ++ ] ) return false ; continue ; } int b3 = data [ index ++ ] & 0xff ; offset ++ ; if ( index == CHUNK_SIZE && offset < endOffset ) { dataChunk = dataChunk . fNextChunk ; data = dataChunk . fData ; index = 0 ; } int ch = ( ( 0x0f & b0 ) << 18 ) + ( ( 0x3f & b1 ) << 12 ) + ( ( 0x3f & b2 ) << 6 ) + ( 0x3f & b3 ) ; if ( ch < 0x10000 ) { if ( ch != strChars [ strOffset ++ ] ) return false ; } else { if ( ( ( ( ch - 0x00010000 ) > > 10 ) + 0xd800 ) != strChars [ strOffset ++ ] ) return false ; if ( strLength -- == 0 ) return false ; if ( ( ( ( ch - 0x00010000 ) & 0x3ff ) + 0xdc00 ) != strChars [ strOffset ++ ] ) return false ; } } return ( strLength == 0 ) ; } public int addString ( int offset , int length ) { if ( length == 0 ) return StringPool . EMPTY_STRING ; int chunk = offset > > CHUNK_SHIFT ; if ( chunk != fChunk ) { if ( fPreviousChunk == null ) throw new RuntimeException ( new ImplementationMessages ( ) . createMessage ( null , ImplementationMessages . INT_PCN , 0 , null ) ) ; return fPreviousChunk . addString ( offset , length ) ; } int lastChunk = ( offset + length - 1 ) > > CHUNK_SHIFT ; if ( chunk == lastChunk ) { addRef ( ) ; return fStringPool . addString ( this , offset & CHUNK_MASK , length ) ; } String str = toString ( offset & CHUNK_MASK , length ) ; return fStringPool . addString ( str ) ; } public int addSymbol ( int offset , int length , int hashcode ) { if ( length == 0 ) return StringPool . EMPTY_STRING ; int chunk = offset > > CHUNK_SHIFT ; if ( chunk != fChunk ) { if ( fPreviousChunk == null ) throw new RuntimeException ( new ImplementationMessages ( ) . createMessage ( null , ImplementationMessages . INT_PCN , 0 , null ) ) ; return fPreviousChunk . addSymbol ( offset , length , hashcode ) ; } int lastChunk = ( offset + length - 1 ) > > CHUNK_SHIFT ; int index = offset & CHUNK_MASK ; if ( chunk == lastChunk ) { if ( hashcode == 0 ) { hashcode = getHashcode ( index , length ) ; } int symbol = fStringPool . lookupSymbol ( this , index , length , hashcode ) ; if ( symbol == - 1 ) { String str = toString ( index , length ) ; symbol = fStringPool . addNewSymbol ( str , hashcode ) ; } return symbol ; } String str = toString ( index , length ) ; return fStringPool . addSymbol ( str ) ; } public void append ( XMLEntityHandler . CharBuffer charBuffer , int offset , int length ) { UTF8DataChunk dataChunk = chunkFor ( offset ) ; int endOffset = offset + length ; int index = offset & CHUNK_MASK ; byte [ ] data = dataChunk . fData ; boolean skiplf = false ; while ( offset < endOffset ) { int b0 = data [ index ++ ] & 0xff ; offset ++ ; if ( index == CHUNK_SIZE && offset < endOffset ) { dataChunk = dataChunk . fNextChunk ; data = dataChunk . fData ; index = 0 ; } if ( b0 < 0x80 ) { if ( skiplf ) { skiplf = false ; if ( b0 == 0x0A ) continue ; } if ( b0 == 0x0D ) { b0 = 0x0A ; skiplf = true ; } charBuffer . append ( ( char ) b0 ) ; continue ; } int b1 = data [ index ++ ] & 0xff ; offset ++ ; if ( index == CHUNK_SIZE && offset < endOffset ) { dataChunk = dataChunk . fNextChunk ; data = dataChunk . fData ; index = 0 ; } if ( ( 0xe0 & b0 ) == 0xc0 ) { int ch = ( ( 0x1f & b0 ) << 6 ) + ( 0x3f & b1 ) ; charBuffer . append ( ( char ) ch ) ; continue ; } int b2 = data [ index ++ ] & 0xff ; offset ++ ; if ( index == CHUNK_SIZE && offset < endOffset ) { dataChunk = dataChunk . fNextChunk ; data = dataChunk . fData ; index = 0 ; } if ( ( 0xf0 & b0 ) == 0xe0 ) { int ch = ( ( 0x0f & b0 ) << 12 ) + ( ( 0x3f & b1 ) << 6 ) + ( 0x3f & b2 ) ; charBuffer . append ( ( char ) ch ) ; continue ; } int b3 = data [ index ++ ] & 0xff ; offset ++ ; if ( index == CHUNK_SIZE && offset < endOffset ) { dataChunk = dataChunk . fNextChunk ; data = dataChunk . fData ; index = 0 ; } int ch = ( ( 0x0f & b0 ) << 18 ) + ( ( 0x3f & b1 ) << 12 ) + ( ( 0x3f & b2 ) << 6 ) + ( 0x3f & b3 ) ; if ( ch < 0x10000 ) charBuffer . append ( ( char ) ch ) ; else { charBuffer . append ( ( char ) ( ( ( ch - 0x00010000 ) > > 10 ) + 0xd800 ) ) ; charBuffer . append ( ( char ) ( ( ( ch - 0x00010000 ) & 0x3ff ) + 0xdc00 ) ) ; } } } private int getHashcode ( int index , int length ) { int endIndex = index + length ; int hashcode = 0 ; byte [ ] data = fData ; while ( index < endIndex ) { int b0 = data [ index ++ ] & 0xff ; if ( ( b0 & 0x80 ) == 0 ) { hashcode = StringHasher . hashChar ( hashcode , b0 ) ; continue ; } int b1 = data [ index ++ ] & 0xff ; if ( ( 0xe0 & b0 ) == 0xc0 ) { int ch = ( ( 0x1f & b0 ) << 6 ) + ( 0x3f & b1 ) ; hashcode = StringHasher . hashChar ( hashcode , ch ) ; continue ; } int b2 = data [ index ++ ] & 0xff ; if ( ( 0xf0 & b0 ) == 0xe0 ) { int ch = ( ( 0x0f & b0 ) << 12 ) + ( ( 0x3f & b1 ) << 6 ) + ( 0x3f & b2 ) ; hashcode = StringHasher . hashChar ( hashcode , ch ) ; continue ; } int b3 = data [ index ++ ] & 0xff ; int ch = ( ( 0x0f & b0 ) << 18 ) + ( ( 0x3f & b1 ) << 12 ) + ( ( 0x3f & b2 ) << 6 ) + ( 0x3f & b3 ) ; if ( ch < 0x10000 ) hashcode = StringHasher . hashChar ( hashcode , ch ) ; else { hashcode = StringHasher . hashChar ( hashcode , ( int ) ( ( ( ch - 0x00010000 ) > > 10 ) + 0xd800 ) ) ; hashcode = StringHasher . hashChar ( hashcode , ( int ) ( ( ( ch - 0x00010000 ) & 0x3ff ) + 0xdc00 ) ) ; } } return StringHasher . finishHash ( hashcode ) ; } private void init ( StringPool stringPool , UTF8DataChunk prev ) { fStringPool = stringPool ; fRefCount = 1 ; fChunk = prev == null ? 0 : prev . fChunk + 1 ; fNextChunk = null ; fPreviousChunk = prev ; if ( prev != null ) { prev . addRef ( ) ; prev . setNextChunk ( this ) ; prev . removeRef ( ) ; } } private UTF8DataChunk ( StringPool stringPool , UTF8DataChunk prev ) { init ( stringPool , prev ) ; } private final UTF8DataChunk chunkFor ( int offset ) { if ( ( offset > > CHUNK_SHIFT ) == fChunk ) return this ; return slowChunkFor ( offset ) ; } private UTF8DataChunk slowChunkFor ( int offset ) { int firstChunk = offset > > CHUNK_SHIFT ; UTF8DataChunk dataChunk = this ; while ( firstChunk != dataChunk . fChunk ) dataChunk = dataChunk . fPreviousChunk ; return dataChunk ; } private final void addRef ( ) { fRefCount ++ ; } private final void removeRef ( ) { fRefCount -- ; if ( fRefCount == 0 ) { fStringPool = null ; fChunk = - 1 ; fPreviousChunk = null ; synchronized ( UTF8DataChunk . class ) { fNextChunk = null ; fgFreeChunks = this ; } } } private void setNextChunk ( UTF8DataChunk nextChunk ) { if ( nextChunk == null ) { if ( fNextChunk != null ) fNextChunk . removeRef ( ) ; } else if ( fNextChunk == null ) { nextChunk . addRef ( ) ; } else throw new RuntimeException ( "UTF8DataChunk::setNextChunk" ) ; fNextChunk = nextChunk ; } private StringPool fStringPool ; private int fRefCount ; private int fChunk ; private byte [ ] fData = null ; private UTF8DataChunk fNextChunk ; private UTF8DataChunk fPreviousChunk ; private static UTF8DataChunk fgFreeChunks = null ; private static char [ ] fgTempBuffer = null ; private static Object fgTempBufferLock = new Object ( ) ; } 	0	['22', '1', '0', '6', '39', '89', '1', '5', '12', '0.703296703', '1528', '0.692307692', '4', '0', '0.232142857', '0', '0', '67.86363636', '24', '4.6818', '0']
package org . apache . xml . serialize ; import java . io . OutputStream ; import java . io . Writer ; import java . io . UnsupportedEncodingException ; import java . util . Hashtable ; import java . util . StringTokenizer ; public abstract class SerializerFactory { public static final String FactoriesProperty = "org.apache.xml.serialize.factories" ; private static Hashtable _factories = new Hashtable ( ) ; static { SerializerFactory factory ; String list ; StringTokenizer token ; String className ; factory = new SerializerFactoryImpl ( Method . XML ) ; registerSerializerFactory ( factory ) ; factory = new SerializerFactoryImpl ( Method . HTML ) ; registerSerializerFactory ( factory ) ; factory = new SerializerFactoryImpl ( Method . XHTML ) ; registerSerializerFactory ( factory ) ; factory = new SerializerFactoryImpl ( Method . TEXT ) ; registerSerializerFactory ( factory ) ; list = System . getProperty ( FactoriesProperty ) ; if ( list != null ) { token = new StringTokenizer ( list , " ;,:" ) ; while ( token . hasMoreTokens ( ) ) { className = token . nextToken ( ) ; try { factory = ( SerializerFactory ) Class . forName ( className ) . newInstance ( ) ; if ( _factories . containsKey ( factory . getSupportedMethod ( ) ) ) _factories . put ( factory . getSupportedMethod ( ) , factory ) ; } catch ( Exception except ) { } } } } public static void registerSerializerFactory ( SerializerFactory factory ) { String method ; synchronized ( _factories ) { method = factory . getSupportedMethod ( ) ; _factories . put ( method , factory ) ; } } public static SerializerFactory getSerializerFactory ( String method ) { return ( SerializerFactory ) _factories . get ( method ) ; } protected abstract String getSupportedMethod ( ) ; public abstract Serializer makeSerializer ( OutputFormat format ) ; public abstract Serializer makeSerializer ( Writer writer , OutputFormat format ) ; public abstract Serializer makeSerializer ( OutputStream output , OutputFormat format ) throws UnsupportedEncodingException ; } 	0	['8', '1', '1', '3', '20', '22', '1', '3', '6', '0.928571429', '108', '0.5', '0', '0', '0.285714286', '0', '0', '12.25', '1', '0.75', '0']
package org . apache . wml ; import org . w3c . dom . * ; public interface WMLDocument extends Document { } 	0	['0', '1', '0', '1', '0', '0', '1', '0', '0', '2', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0']
package org . apache . wml ; import org . w3c . dom . Element ; public interface WMLElement extends Element { public void setId ( String newValue ) ; public String getId ( ) ; public void setClassName ( String newValue ) ; public String getClassName ( ) ; } 	0	['4', '1', '0', '36', '4', '6', '36', '0', '4', '2', '4', '0', '0', '0', '0.75', '0', '0', '0', '1', '1', '0']
package org . apache . xml . serialize ; import java . util . Hashtable ; class ElementState { String rawName ; String localName ; String namespaceURI ; boolean preserveSpace ; boolean empty ; boolean afterElement ; boolean doCData ; boolean unescaped ; boolean inCData ; Hashtable prefixes ; } 	0	['1', '1', '0', '4', '2', '0', '4', '0', '0', '2', '14', '0', '0', '0', '1', '0', '0', '3', '0', '0', '0']
package org . apache . xerces . readers ; import org . apache . xerces . framework . XMLErrorReporter ; import org . apache . xerces . utils . ChunkyByteArray ; import org . apache . xerces . utils . StringPool ; import java . io . IOException ; final class UCSRecognizer extends XMLDeclRecognizer { public XMLEntityHandler . EntityReader recognize ( XMLEntityReaderFactory readerFactory , XMLEntityHandler entityHandler , XMLErrorReporter errorReporter , boolean sendCharDataAsCharArray , StringPool stringPool , ChunkyByteArray data , boolean xmlDecl , boolean allowJavaEncodingName ) throws Exception { XMLEntityHandler . EntityReader reader = null ; byte b0 = data . byteAt ( 0 ) ; if ( b0 == 0 ) { int b1 = data . byteAt ( 1 ) ; if ( b1 == 0 ) { if ( data . byteAt ( 2 ) == 0 && data . byteAt ( 3 ) == '<' ) reader = new UCSReader ( entityHandler , errorReporter , sendCharDataAsCharArray , data , UCSReader . E_UCS4B , stringPool ) ; } else if ( b1 == '<' ) { if ( data . byteAt ( 2 ) == 0 && data . byteAt ( 3 ) == '?' ) reader = new UCSReader ( entityHandler , errorReporter , sendCharDataAsCharArray , data , UCSReader . E_UCS2B_NOBOM , stringPool ) ; } } else if ( b0 == '<' ) { int b1 = data . byteAt ( 1 ) ; if ( b1 == 0 ) { int b2 = data . byteAt ( 2 ) ; if ( data . byteAt ( 3 ) == 0 ) { if ( b2 == 0 ) reader = new UCSReader ( entityHandler , errorReporter , sendCharDataAsCharArray , data , UCSReader . E_UCS4L , stringPool ) ; else if ( b2 == '?' ) reader = new UCSReader ( entityHandler , errorReporter , sendCharDataAsCharArray , data , UCSReader . E_UCS2L_NOBOM , stringPool ) ; } } } else if ( b0 == ( byte ) 0xfe ) { if ( data . byteAt ( 1 ) == ( byte ) 0xff ) reader = new UCSReader ( entityHandler , errorReporter , sendCharDataAsCharArray , data , UCSReader . E_UCS2B , stringPool ) ; } else if ( b0 == ( byte ) 0xff ) { if ( data . byteAt ( 1 ) == ( byte ) 0xfe ) reader = new UCSReader ( entityHandler , errorReporter , sendCharDataAsCharArray , data , UCSReader . E_UCS2L , stringPool ) ; } return reader ; } } 	0	['2', '2', '0', '8', '5', '1', '1', '8', '1', '2', '145', '0', '0', '0.75', '0.571428571', '0', '0', '71.5', '1', '0.5', '0']
package org . xml . sax ; public interface AttributeList { public abstract int getLength ( ) ; public abstract String getName ( int i ) ; public abstract String getType ( int i ) ; public abstract String getValue ( int i ) ; public abstract String getType ( String name ) ; public abstract String getValue ( String name ) ; } 	0	['6', '1', '0', '0', '6', '15', '0', '0', '6', '2', '6', '0', '0', '0', '0.611111111', '0', '0', '0', '1', '1', '0']
package org . w3c . dom . html ; public interface HTMLImageElement extends HTMLElement { public String getLowSrc ( ) ; public void setLowSrc ( String lowSrc ) ; public String getName ( ) ; public void setName ( String name ) ; public String getAlign ( ) ; public void setAlign ( String align ) ; public String getAlt ( ) ; public void setAlt ( String alt ) ; public String getBorder ( ) ; public void setBorder ( String border ) ; public String getHeight ( ) ; public void setHeight ( String height ) ; public String getHspace ( ) ; public void setHspace ( String hspace ) ; public boolean getIsMap ( ) ; public void setIsMap ( boolean isMap ) ; public String getLongDesc ( ) ; public void setLongDesc ( String longDesc ) ; public String getSrc ( ) ; public void setSrc ( String src ) ; public String getUseMap ( ) ; public void setUseMap ( String useMap ) ; public String getVspace ( ) ; public void setVspace ( String vspace ) ; public String getWidth ( ) ; public void setWidth ( String width ) ; } 	0	['26', '1', '0', '0', '26', '325', '0', '0', '26', '2', '26', '0', '0', '0', '0.5', '0', '0', '0', '1', '1', '0']
package org . apache . wml ; public interface WMLPElement extends WMLElement { public void setMode ( String newValue ) ; public String getMode ( ) ; public void setAlign ( String newValue ) ; public String getAlign ( ) ; public void setXmlLang ( String newValue ) ; public String getXmlLang ( ) ; } 	0	['6', '1', '0', '2', '6', '15', '1', '1', '6', '2', '6', '0', '0', '0', '0.75', '0', '0', '0', '1', '1', '0']
package org . apache . wml . dom ; import org . apache . wml . * ; public class WMLSetvarElementImpl extends WMLElementImpl implements WMLSetvarElement { public WMLSetvarElementImpl ( WMLDocumentImpl owner , String tagName ) { super ( owner , tagName ) ; } public void setValue ( String newValue ) { setAttribute ( "value" , newValue ) ; } public String getValue ( ) { return getAttribute ( "value" ) ; } public void setClassName ( String newValue ) { setAttribute ( "class" , newValue ) ; } public String getClassName ( ) { return getAttribute ( "class" ) ; } public void setId ( String newValue ) { setAttribute ( "id" , newValue ) ; } public String getId ( ) { return getAttribute ( "id" ) ; } public void setName ( String newValue ) { setAttribute ( "name" , newValue ) ; } public String getName ( ) { return getAttribute ( "name" ) ; } } 	0	['9', '4', '0', '3', '12', '36', '0', '3', '9', '2', '50', '0', '0', '0.911111111', '0.555555556', '1', '5', '4.555555556', '1', '0.8889', '0']
package org . w3c . dom . html ; public interface HTMLLegendElement extends HTMLElement { public HTMLFormElement getForm ( ) ; public String getAccessKey ( ) ; public void setAccessKey ( String accessKey ) ; public String getAlign ( ) ; public void setAlign ( String align ) ; } 	0	['5', '1', '0', '0', '5', '10', '0', '0', '5', '2', '5', '0', '0', '0', '0.7', '0', '0', '0', '1', '1', '0']
package org . apache . wml ; public interface WMLAnchorElement extends WMLElement { public void setTitle ( String newValue ) ; public String getTitle ( ) ; public void setXmlLang ( String newValue ) ; public String getXmlLang ( ) ; } 	0	['4', '1', '0', '2', '4', '6', '1', '1', '4', '2', '4', '0', '0', '0', '0.75', '0', '0', '0', '1', '1', '0']
package org . apache . xerces . validators . datatype ; import java . util . Enumeration ; import java . util . Hashtable ; import java . util . Locale ; import java . util . Vector ; import org . apache . xerces . validators . schema . SchemaSymbols ; import org . apache . xerces . utils . regex . RegularExpression ; public class DoubleDatatypeValidator extends AbstractDatatypeValidator { private Locale fLocale = null ; private DatatypeValidator fBaseValidator = null ; private double [ ] fEnumDoubles = null ; private String fPattern = null ; private double fMaxInclusive = Double . POSITIVE_INFINITY ; private double fMaxExclusive = Double . POSITIVE_INFINITY ; private double fMinInclusive = Double . NEGATIVE_INFINITY ; private double fMinExclusive = Double . NEGATIVE_INFINITY ; private int fFacetsDefined = 0 ; private boolean isMaxExclusiveDefined = false ; private boolean isMaxInclusiveDefined = false ; private boolean isMinExclusiveDefined = false ; private boolean isMinInclusiveDefined = false ; private RegularExpression fRegex = null ; private DatatypeMessageProvider fMessageProvider = new DatatypeMessageProvider ( ) ; public DoubleDatatypeValidator ( ) throws InvalidDatatypeFacetException { this ( null , null , false ) ; } public DoubleDatatypeValidator ( DatatypeValidator base , Hashtable facets , boolean derivedByList ) throws InvalidDatatypeFacetException { if ( base != null ) setBasetype ( base ) ; if ( facets != null ) { for ( Enumeration e = facets . keys ( ) ; e . hasMoreElements ( ) ; ) { String key = ( String ) e . nextElement ( ) ; if ( key . equals ( SchemaSymbols . ELT_PATTERN ) ) { fFacetsDefined += DatatypeValidator . FACET_PATTERN ; fPattern = ( String ) facets . get ( key ) ; if ( fPattern != null ) fRegex = new RegularExpression ( fPattern , "X" ) ; } else if ( key . equals ( SchemaSymbols . ELT_ENUMERATION ) ) { fFacetsDefined += DatatypeValidator . FACET_ENUMERATION ; continue ; } else if ( key . equals ( SchemaSymbols . ELT_MAXINCLUSIVE ) ) { fFacetsDefined += DatatypeValidator . FACET_MAXINCLUSIVE ; String value = null ; try { value = ( ( String ) facets . get ( key ) ) ; fMaxInclusive = Double . valueOf ( value ) . doubleValue ( ) ; } catch ( NumberFormatException ex ) { throw new InvalidDatatypeFacetException ( getErrorString ( DatatypeMessageProvider . IllegalFacetValue , DatatypeMessageProvider . MSG_NONE , new Object [ ] { value , key } ) ) ; } } else if ( key . equals ( SchemaSymbols . ELT_MAXEXCLUSIVE ) ) { fFacetsDefined += DatatypeValidator . FACET_MAXEXCLUSIVE ; String value = null ; try { value = ( ( String ) facets . get ( key ) ) ; fMaxExclusive = Double . valueOf ( value ) . doubleValue ( ) ; } catch ( NumberFormatException ex ) { throw new InvalidDatatypeFacetException ( getErrorString ( DatatypeMessageProvider . IllegalFacetValue , DatatypeMessageProvider . MSG_NONE , new Object [ ] { value , key } ) ) ; } } else if ( key . equals ( SchemaSymbols . ELT_MININCLUSIVE ) ) { fFacetsDefined += DatatypeValidator . FACET_MININCLUSIVE ; String value = null ; try { value = ( ( String ) facets . get ( key ) ) ; fMinInclusive = Double . valueOf ( value ) . doubleValue ( ) ; } catch ( NumberFormatException ex ) { throw new InvalidDatatypeFacetException ( getErrorString ( DatatypeMessageProvider . IllegalFacetValue , DatatypeMessageProvider . MSG_NONE , new Object [ ] { value , key } ) ) ; } } else if ( key . equals ( SchemaSymbols . ELT_MINEXCLUSIVE ) ) { fFacetsDefined += DatatypeValidator . FACET_MININCLUSIVE ; String value = null ; try { value = ( ( String ) facets . get ( key ) ) ; fMinExclusive = Double . valueOf ( value ) . doubleValue ( ) ; } catch ( NumberFormatException ex ) { throw new InvalidDatatypeFacetException ( getErrorString ( DatatypeMessageProvider . IllegalFacetValue , DatatypeMessageProvider . MSG_NONE , new Object [ ] { value , key } ) ) ; } } else { throw new InvalidDatatypeFacetException ( getErrorString ( DatatypeMessageProvider . MSG_FORMAT_FAILURE , DatatypeMessageProvider . MSG_NONE , null ) ) ; } } isMaxExclusiveDefined = ( ( fFacetsDefined & DatatypeValidator . FACET_MAXEXCLUSIVE ) != 0 ) ? true : false ; isMaxInclusiveDefined = ( ( fFacetsDefined & DatatypeValidator . FACET_MAXINCLUSIVE ) != 0 ) ? true : false ; isMinExclusiveDefined = ( ( fFacetsDefined & DatatypeValidator . FACET_MINEXCLUSIVE ) != 0 ) ? true : false ; isMinInclusiveDefined = ( ( fFacetsDefined & DatatypeValidator . FACET_MININCLUSIVE ) != 0 ) ? true : false ; if ( isMaxExclusiveDefined && isMaxInclusiveDefined ) { throw new InvalidDatatypeFacetException ( "It is an error for both maxInclusive and maxExclusive to be specified for the same datatype." ) ; } if ( isMinExclusiveDefined && isMinInclusiveDefined ) { throw new InvalidDatatypeFacetException ( "It is an error for both minInclusive and minExclusive to be specified for the same datatype." ) ; } if ( ( fFacetsDefined & DatatypeValidator . FACET_ENUMERATION ) != 0 ) { Vector v = ( Vector ) facets . get ( SchemaSymbols . ELT_ENUMERATION ) ; if ( v != null ) { fEnumDoubles = new double [ v . size ( ) ] ; for ( int i = 0 ; i < v . size ( ) ; i ++ ) try { fEnumDoubles [ i ] = Double . valueOf ( ( String ) v . elementAt ( i ) ) . doubleValue ( ) ; boundsCheck ( fEnumDoubles [ i ] ) ; } catch ( InvalidDatatypeValueException idve ) { throw new InvalidDatatypeFacetException ( getErrorString ( DatatypeMessageProvider . InvalidEnumValue , DatatypeMessageProvider . MSG_NONE , new Object [ ] { v . elementAt ( i ) } ) ) ; } catch ( NumberFormatException nfe ) { System . out . println ( "Internal Error parsing enumerated values for real type" ) ; } } } } } public Object validate ( String content , Object state ) throws InvalidDatatypeValueException { checkContentEnum ( content , state , null ) ; return null ; } protected void checkContentEnum ( String content , Object state , Vector enumeration ) throws InvalidDatatypeValueException { if ( this . fBaseValidator != null ) { ( ( DoubleDatatypeValidator ) this . fBaseValidator ) . checkContentEnum ( content , state , enumeration ) ; } if ( ( fFacetsDefined & DatatypeValidator . FACET_PATTERN ) != 0 ) { if ( fRegex == null || fRegex . matches ( content ) == false ) throw new InvalidDatatypeValueException ( "Value'" + content + "does not match regular expression facet" + fPattern ) ; } double d = 0.0 ; try { d = Double . valueOf ( content ) . doubleValue ( ) ; } catch ( NumberFormatException nfe ) { if ( content . equals ( "INF" ) ) { d = Double . POSITIVE_INFINITY ; } else if ( content . equals ( "-INF" ) ) { d = Double . NEGATIVE_INFINITY ; } else if ( content . equals ( "NaN" ) ) { d = Double . NaN ; } else { throw new InvalidDatatypeValueException ( getErrorString ( DatatypeMessageProvider . NotFloat , DatatypeMessageProvider . MSG_NONE , new Object [ ] { content } ) ) ; } } if ( enumeration != null ) { int size = enumeration . size ( ) ; double [ ] enumDoubles = new double [ size ] ; int i = 0 ; try { for ( ; i < size ; i ++ ) enumDoubles [ i ] = Double . valueOf ( ( String ) enumeration . elementAt ( i ) ) . doubleValue ( ) ; } catch ( NumberFormatException nfe ) { if ( content . equals ( "INF" ) ) { enumDoubles [ i ] = Double . POSITIVE_INFINITY ; } else if ( content . equals ( "-INF" ) ) { enumDoubles [ i ] = Double . NEGATIVE_INFINITY ; } else if ( content . equals ( "NaN" ) ) { enumDoubles [ i ] = Double . NaN ; } else { throw new InvalidDatatypeValueException ( getErrorString ( DatatypeMessageProvider . InvalidEnumValue , DatatypeMessageProvider . MSG_NONE , new Object [ ] { enumeration . elementAt ( i ) } ) ) ; } } enumCheck ( d , enumDoubles ) ; } boundsCheck ( d ) ; if ( ( ( fFacetsDefined & DatatypeValidator . FACET_ENUMERATION ) != 0 ) ) enumCheck ( d , fEnumDoubles ) ; } private void boundsCheck ( double d ) throws InvalidDatatypeValueException { boolean minOk = false ; boolean maxOk = false ; String upperBound = ( fMaxExclusive != Double . MAX_VALUE ) ? ( Double . toString ( fMaxExclusive ) ) : ( ( fMaxInclusive != Double . MAX_VALUE ) ? Double . toString ( fMaxInclusive ) : "" ) ; String lowerBound = ( fMinExclusive != Double . MIN_VALUE ) ? ( Double . toString ( fMinExclusive ) ) : ( ( fMinInclusive != Double . MIN_VALUE ) ? Double . toString ( fMinInclusive ) : "" ) ; String lowerBoundIndicator = "" ; String upperBoundIndicator = "" ; if ( isMaxInclusiveDefined ) { maxOk = ( d <= fMaxInclusive ) ; upperBound = Double . toString ( fMaxInclusive ) ; if ( upperBound != null ) { upperBoundIndicator = "<=" ; } else { upperBound = "" ; } } else if ( isMaxExclusiveDefined ) { maxOk = ( d < fMaxExclusive ) ; upperBound = Double . toString ( fMaxExclusive ) ; if ( upperBound != null ) { upperBoundIndicator = "<" ; } else { upperBound = "" ; } } else { maxOk = ( ! isMaxInclusiveDefined && ! isMaxExclusiveDefined ) ; } if ( isMinInclusiveDefined ) { minOk = ( d >= fMinInclusive ) ; lowerBound = Double . toString ( fMinInclusive ) ; if ( lowerBound != null ) { lowerBoundIndicator = "<=" ; } else { lowerBound = "" ; } } else if ( isMinExclusiveDefined ) { minOk = ( d > fMinExclusive ) ; lowerBound = Double . toString ( fMinExclusive ) ; if ( lowerBound != null ) { lowerBoundIndicator = "<" ; } else { lowerBound = "" ; } } else { minOk = ( ! isMinInclusiveDefined && ! isMinExclusiveDefined ) ; } if ( ! ( minOk && maxOk ) ) throw new InvalidDatatypeValueException ( getErrorString ( DatatypeMessageProvider . OutOfBounds , DatatypeMessageProvider . MSG_NONE , new Object [ ] { Double . toString ( d ) , lowerBound , upperBound , lowerBoundIndicator , upperBoundIndicator } ) ) ; } private void enumCheck ( double v , double [ ] enumDoubles ) throws InvalidDatatypeValueException { for ( int i = 0 ; i < enumDoubles . length ; i ++ ) { if ( v == enumDoubles [ i ] ) return ; } throw new InvalidDatatypeValueException ( getErrorString ( DatatypeMessageProvider . NotAnEnumValue , DatatypeMessageProvider . MSG_NONE , new Object [ ] { new Double ( v ) } ) ) ; } public int compare ( String content1 , String content2 ) { return 0 ; } public Hashtable getFacets ( ) { return null ; } public Object clone ( ) throws CloneNotSupportedException { throw new CloneNotSupportedException ( "clone() is not supported in " + this . getClass ( ) . getName ( ) ) ; } private String getErrorString ( int major , int minor , Object args [ ] ) { try { return fMessageProvider . createMessage ( fLocale , major , minor , args ) ; } catch ( Exception e ) { return "Illegal Errorcode " + minor ; } } private void setBasetype ( DatatypeValidator base ) { fBaseValidator = base ; } } 	0	['11', '2', '0', '9', '37', '45', '3', '6', '6', '0.666666667', '895', '1', '3', '0.307692308', '0.214876033', '0', '0', '79', '1', '0.8182', '0']
package org . apache . xerces . validators . common ; import org . apache . xerces . framework . XMLContentSpec ; import org . apache . xerces . utils . ImplementationMessages ; import org . apache . xerces . utils . QName ; import org . apache . xerces . validators . schema . SubstitutionGroupComparator ; public class SimpleContentModel implements XMLContentModel { private QName fFirstChild = new QName ( ) ; private QName fSecondChild = new QName ( ) ; private int fOp ; private boolean fDTD ; private SubstitutionGroupComparator comparator = null ; public SimpleContentModel ( QName firstChild , QName secondChild , int cmOp ) { this ( firstChild , secondChild , cmOp , false ) ; } public SimpleContentModel ( QName firstChild , QName secondChild , int cmOp , boolean dtd ) { fFirstChild . setValues ( firstChild ) ; if ( secondChild != null ) { fSecondChild . setValues ( secondChild ) ; } else { fSecondChild . clear ( ) ; } fOp = cmOp ; fDTD = dtd ; } public int validateContent ( QName children [ ] , int offset , int length ) throws Exception { switch ( fOp ) { case XMLContentSpec . CONTENTSPECNODE_LEAF : if ( length == 0 ) return 0 ; if ( fDTD ) { if ( children [ offset ] . rawname != fFirstChild . rawname ) { return 0 ; } } else { if ( children [ offset ] . uri != fFirstChild . uri || children [ offset ] . localpart != fFirstChild . localpart ) return 0 ; } if ( length > 1 ) return 1 ; break ; case XMLContentSpec . CONTENTSPECNODE_ZERO_OR_ONE : if ( length == 1 ) { if ( fDTD ) { if ( children [ offset ] . rawname != fFirstChild . rawname ) { return 0 ; } } else { if ( children [ offset ] . uri != fFirstChild . uri || children [ offset ] . localpart != fFirstChild . localpart ) return 0 ; } } if ( length > 1 ) return 1 ; break ; case XMLContentSpec . CONTENTSPECNODE_ZERO_OR_MORE : if ( length > 0 ) { if ( fDTD ) { for ( int index = 0 ; index < length ; index ++ ) { if ( children [ offset + index ] . rawname != fFirstChild . rawname ) { return index ; } } } else { for ( int index = 0 ; index < length ; index ++ ) { if ( children [ offset + index ] . uri != fFirstChild . uri || children [ offset + index ] . localpart != fFirstChild . localpart ) return index ; } } } break ; case XMLContentSpec . CONTENTSPECNODE_ONE_OR_MORE : if ( length == 0 ) return 0 ; if ( fDTD ) { for ( int index = 0 ; index < length ; index ++ ) { if ( children [ offset + index ] . rawname != fFirstChild . rawname ) { return index ; } } } else { for ( int index = 0 ; index < length ; index ++ ) { if ( children [ offset + index ] . uri != fFirstChild . uri || children [ offset + index ] . localpart != fFirstChild . localpart ) return index ; } } break ; case XMLContentSpec . CONTENTSPECNODE_CHOICE : if ( length == 0 ) return 0 ; if ( fDTD ) { if ( ( children [ offset ] . rawname != fFirstChild . rawname ) && ( children [ offset ] . rawname != fSecondChild . rawname ) ) { return 0 ; } } else { if ( ( children [ offset ] . uri != fFirstChild . uri || children [ offset ] . localpart != fFirstChild . localpart ) && ( children [ offset ] . uri != fSecondChild . uri || children [ offset ] . localpart != fSecondChild . localpart ) ) return 0 ; } if ( length > 1 ) return 1 ; break ; case XMLContentSpec . CONTENTSPECNODE_SEQ : if ( length == 2 ) { if ( fDTD ) { if ( children [ offset ] . rawname != fFirstChild . rawname ) { return 0 ; } if ( children [ offset + 1 ] . rawname != fSecondChild . rawname ) { return 1 ; } } else { if ( children [ offset ] . uri != fFirstChild . uri || children [ offset ] . localpart != fFirstChild . localpart ) return 0 ; if ( children [ offset + 1 ] . uri != fSecondChild . uri || children [ offset + 1 ] . localpart != fSecondChild . localpart ) return 1 ; } } else { if ( length > 2 ) { return 2 ; } return length ; } break ; default : throw new CMException ( ImplementationMessages . VAL_CST ) ; } return - 1 ; } public int validateContentSpecial ( QName children [ ] , int offset , int length ) throws Exception { if ( comparator == null ) { return validateContent ( children , offset , length ) ; } switch ( fOp ) { case XMLContentSpec . CONTENTSPECNODE_LEAF : if ( length == 0 ) return 0 ; if ( children [ offset ] . uri != fFirstChild . uri || children [ offset ] . localpart != fFirstChild . localpart ) if ( ! comparator . isEquivalentTo ( children [ offset ] , fFirstChild ) ) return 0 ; if ( length > 1 ) return 1 ; break ; case XMLContentSpec . CONTENTSPECNODE_ZERO_OR_ONE : if ( length == 1 && ( children [ offset ] . uri != fFirstChild . uri || children [ offset ] . localpart != fFirstChild . localpart ) ) if ( ! comparator . isEquivalentTo ( children [ offset ] , fFirstChild ) ) return 0 ; if ( length > 1 ) return 1 ; break ; case XMLContentSpec . CONTENTSPECNODE_ZERO_OR_MORE : if ( length > 0 ) { for ( int index = 0 ; index < length ; index ++ ) { if ( children [ offset + index ] . uri != fFirstChild . uri || children [ offset + index ] . localpart != fFirstChild . localpart ) if ( ! comparator . isEquivalentTo ( children [ offset + index ] , fFirstChild ) ) return index ; } } break ; case XMLContentSpec . CONTENTSPECNODE_ONE_OR_MORE : if ( length == 0 ) return 0 ; for ( int index = 0 ; index < length ; index ++ ) { if ( children [ offset + index ] . uri != fFirstChild . uri || children [ offset + index ] . localpart != fFirstChild . localpart ) if ( ! comparator . isEquivalentTo ( children [ offset + index ] , fFirstChild ) ) return index ; } break ; case XMLContentSpec . CONTENTSPECNODE_CHOICE : if ( length == 0 ) return 0 ; if ( ( children [ offset ] . uri != fFirstChild . uri || children [ offset ] . localpart != fFirstChild . localpart ) && ( children [ offset ] . uri != fSecondChild . uri || children [ offset ] . localpart != fSecondChild . localpart ) ) if ( ! comparator . isEquivalentTo ( children [ offset ] , fFirstChild ) && ! comparator . isEquivalentTo ( children [ offset ] , fSecondChild ) ) return 0 ; if ( length > 1 ) return 1 ; break ; case XMLContentSpec . CONTENTSPECNODE_SEQ : if ( length == 2 ) { if ( children [ offset ] . uri != fFirstChild . uri || children [ offset ] . localpart != fFirstChild . localpart ) if ( ! comparator . isEquivalentTo ( children [ offset ] , fFirstChild ) ) return 0 ; if ( children [ offset + 1 ] . uri != fSecondChild . uri || children [ offset + 1 ] . localpart != fSecondChild . localpart ) if ( ! comparator . isEquivalentTo ( children [ offset + 1 ] , fSecondChild ) ) return 1 ; } else { if ( length > 2 ) { return 2 ; } return length ; } break ; default : throw new CMException ( ImplementationMessages . VAL_CST ) ; } return - 1 ; } public void setSubstitutionGroupComparator ( SubstitutionGroupComparator comparator ) { this . comparator = comparator ; } public int whatCanGoHere ( boolean fullyValid , InsertableElementsInfo info ) throws Exception { for ( int index = info . insertAt ; index < info . childCount ; index ++ ) { info . curChildren [ index ] . setValues ( info . curChildren [ index + 1 ] ) ; } info . childCount -- ; final int failedIndex = validateContent ( info . curChildren , 0 , info . childCount ) ; if ( ( failedIndex != - 1 ) && ( failedIndex < info . insertAt ) ) return failedIndex ; info . canHoldPCData = false ; if ( ( fOp == XMLContentSpec . CONTENTSPECNODE_LEAF ) || ( fOp == XMLContentSpec . CONTENTSPECNODE_ZERO_OR_ONE ) || ( fOp == XMLContentSpec . CONTENTSPECNODE_ZERO_OR_MORE ) || ( fOp == XMLContentSpec . CONTENTSPECNODE_ONE_OR_MORE ) ) { info . resultsCount = 1 ; } else if ( ( fOp == XMLContentSpec . CONTENTSPECNODE_CHOICE ) || ( fOp == XMLContentSpec . CONTENTSPECNODE_SEQ ) ) { info . resultsCount = 2 ; } else { throw new CMException ( ImplementationMessages . VAL_CST ) ; } if ( ( info . results == null ) || ( info . results . length < info . resultsCount ) ) info . results = new boolean [ info . resultsCount ] ; if ( ( info . possibleChildren == null ) || ( info . possibleChildren . length < info . resultsCount ) ) { info . possibleChildren = new QName [ info . resultsCount ] ; for ( int i = 0 ; i < info . possibleChildren . length ; i ++ ) { info . possibleChildren [ i ] = new QName ( ) ; } } info . possibleChildren [ 0 ] . setValues ( fFirstChild ) ; info . results [ 0 ] = false ; if ( info . resultsCount == 2 ) { info . possibleChildren [ 1 ] . setValues ( fSecondChild ) ; info . results [ 1 ] = false ; } info . isValidEOC = false ; switch ( fOp ) { case XMLContentSpec . CONTENTSPECNODE_LEAF : case XMLContentSpec . CONTENTSPECNODE_ZERO_OR_ONE : if ( info . childCount == 0 ) { info . results [ 0 ] = true ; } else if ( info . childCount > 0 ) { if ( ! fullyValid && ( info . insertAt == 0 ) ) info . results [ 0 ] = true ; } if ( fOp == XMLContentSpec . CONTENTSPECNODE_LEAF ) { if ( info . insertAt == 0 ) info . isValidEOC = true ; } else { info . isValidEOC = true ; } break ; case XMLContentSpec . CONTENTSPECNODE_ZERO_OR_MORE : case XMLContentSpec . CONTENTSPECNODE_ONE_OR_MORE : info . results [ 0 ] = true ; if ( ( fOp == XMLContentSpec . CONTENTSPECNODE_ZERO_OR_MORE ) || ( info . insertAt > 0 ) ) { info . isValidEOC = true ; } break ; case XMLContentSpec . CONTENTSPECNODE_CHOICE : if ( info . insertAt == 0 ) { if ( ! fullyValid && ( info . childCount == 0 ) ) { info . results [ 0 ] = true ; info . results [ 1 ] = true ; } } if ( info . insertAt == 1 ) info . isValidEOC = true ; break ; case XMLContentSpec . CONTENTSPECNODE_SEQ : if ( info . insertAt == 0 ) { if ( fullyValid ) { if ( info . childCount == 1 ) info . results [ 0 ] = info . curChildren [ 0 ] . uri == fSecondChild . uri && info . curChildren [ 0 ] . localpart == fSecondChild . localpart ; } else { info . results [ 0 ] = true ; } } else if ( info . insertAt == 1 ) { if ( ! fullyValid || ( info . childCount == 1 ) ) info . results [ 1 ] = true ; } if ( info . insertAt == 2 ) info . isValidEOC = true ; break ; default : throw new CMException ( ImplementationMessages . VAL_CST ) ; } return - 1 ; } public ContentLeafNameTypeVector getContentLeafNameTypeVector ( ) { return null ; } } 	0	['7', '1', '0', '7', '13', '5', '1', '6', '7', '0.366666667', '1019', '1', '3', '0', '0.387755102', '0', '0', '143.8571429', '1', '0.7143', '0']
package org . apache . html . dom ; import org . w3c . dom . * ; import org . w3c . dom . html . * ; public class HTMLModElementImpl extends HTMLElementImpl implements HTMLModElement { public String getCite ( ) { return getAttribute ( "cite" ) ; } public void setCite ( String cite ) { setAttribute ( "cite" , cite ) ; } public String getDateTime ( ) { return getAttribute ( "datetime" ) ; } public void setDateTime ( String dateTime ) { setAttribute ( "datetime" , dateTime ) ; } public HTMLModElementImpl ( HTMLDocumentImpl owner , String name ) { super ( owner , name ) ; } } 	0	['5', '4', '0', '2', '8', '10', '0', '2', '5', '2', '28', '0', '0', '0.959183673', '0.6', '0', '0', '4.6', '1', '0.8', '0']
package org . apache . wml . dom ; import org . apache . wml . * ; public class WMLWmlElementImpl extends WMLElementImpl implements WMLWmlElement { public WMLWmlElementImpl ( WMLDocumentImpl owner , String tagName ) { super ( owner , tagName ) ; } public void setClassName ( String newValue ) { setAttribute ( "class" , newValue ) ; } public String getClassName ( ) { return getAttribute ( "class" ) ; } public void setXmlLang ( String newValue ) { setAttribute ( "xml:lang" , newValue ) ; } public String getXmlLang ( ) { return getAttribute ( "xml:lang" ) ; } public void setId ( String newValue ) { setAttribute ( "id" , newValue ) ; } public String getId ( ) { return getAttribute ( "id" ) ; } } 	0	['7', '4', '0', '3', '10', '21', '0', '3', '7', '2', '39', '0', '0', '0.931818182', '0.571428571', '1', '6', '4.571428571', '1', '0.8571', '0']
package org . w3c . dom . ranges ; import org . w3c . dom . Node ; import org . w3c . dom . DocumentFragment ; import org . w3c . dom . DOMException ; public interface Range { public Node getStartContainer ( ) throws DOMException ; public int getStartOffset ( ) throws DOMException ; public Node getEndContainer ( ) throws DOMException ; public int getEndOffset ( ) throws DOMException ; public boolean getCollapsed ( ) throws DOMException ; public Node getCommonAncestorContainer ( ) throws DOMException ; public void setStart ( Node refNode , int offset ) throws RangeException , DOMException ; public void setEnd ( Node refNode , int offset ) throws RangeException , DOMException ; public void setStartBefore ( Node refNode ) throws RangeException , DOMException ; public void setStartAfter ( Node refNode ) throws RangeException , DOMException ; public void setEndBefore ( Node refNode ) throws RangeException , DOMException ; public void setEndAfter ( Node refNode ) throws RangeException , DOMException ; public void collapse ( boolean toStart ) throws DOMException ; public void selectNode ( Node refNode ) throws RangeException , DOMException ; public void selectNodeContents ( Node refNode ) throws RangeException , DOMException ; public static final short START_TO_START = 0 ; public static final short START_TO_END = 1 ; public static final short END_TO_END = 2 ; public static final short END_TO_START = 3 ; public short compareBoundaryPoints ( short how , Range sourceRange ) throws DOMException ; public void deleteContents ( ) throws DOMException ; public DocumentFragment extractContents ( ) throws DOMException ; public DocumentFragment cloneContents ( ) throws DOMException ; public void insertNode ( Node newNode ) throws DOMException , RangeException ; public void surroundContents ( Node newParent ) throws DOMException , RangeException ; public Range cloneRange ( ) throws DOMException ; public String toString ( ) throws DOMException ; public void detach ( ) throws DOMException ; } 	0	['24', '1', '0', '0', '24', '276', '0', '0', '24', '1.043478261', '28', '0', '0', '0', '0.270833333', '0', '0', '0', '1', '1', '0']
package org . apache . xerces . utils ; public final class StringHasher { public static int hashString ( String str , int strLength ) { int hashcode = 0 ; for ( int i = 0 ; i < strLength ; i ++ ) { int top = hashcode > > 24 ; hashcode += ( ( hashcode * 37 ) + top + ( ( int ) str . charAt ( i ) ) ) ; } hashcode = ( hashcode & 0x7fffffff ) ; return ( hashcode == 0 ) ? 1 : hashcode ; } public static int hashChars ( char [ ] chars , int offset , int length ) { int hashcode = 0 ; for ( int i = 0 ; i < length ; i ++ ) { int top = hashcode > > 24 ; hashcode += ( ( hashcode * 37 ) + top + ( ( int ) ( chars [ offset ++ ] & 0xFFFF ) ) ) ; } hashcode = ( hashcode & 0x7fffffff ) ; return ( hashcode == 0 ) ? 1 : hashcode ; } public static int hashChar ( int hashcode , int ch ) { int top = hashcode > > 24 ; hashcode += ( ( hashcode * 37 ) + top + ch ) ; return hashcode ; } public static int finishHash ( int hashcode ) { hashcode = ( hashcode & 0x7fffffff ) ; return ( hashcode == 0 ) ? 1 : hashcode ; } } 	0	['5', '1', '0', '6', '7', '10', '6', '0', '5', '2', '107', '0', '0', '0', '0.35', '0', '0', '20.4', '3', '1.8', '0']
package org . w3c . dom . html ; public interface HTMLFieldSetElement extends HTMLElement { public HTMLFormElement getForm ( ) ; } 	0	['1', '1', '0', '0', '1', '0', '0', '0', '1', '2', '1', '0', '0', '0', '1', '0', '0', '0', '1', '1', '0']
package org . apache . html . dom ; import org . w3c . dom . * ; import org . w3c . dom . html . * ; public class HTMLHtmlElementImpl extends HTMLElementImpl implements HTMLHtmlElement { public String getVersion ( ) { return capitalize ( getAttribute ( "version" ) ) ; } public void setVersion ( String version ) { setAttribute ( "version" , version ) ; } public HTMLHtmlElementImpl ( HTMLDocumentImpl owner , String name ) { super ( owner , name ) ; } } 	0	['3', '4', '0', '2', '7', '3', '1', '2', '3', '2', '19', '0', '0', '0.979166667', '0.666666667', '0', '0', '5.333333333', '1', '0.6667', '0']
package org . w3c . dom . html ; public interface HTMLMapElement extends HTMLElement { public HTMLCollection getAreas ( ) ; public String getName ( ) ; public void setName ( String name ) ; } 	0	['3', '1', '0', '0', '3', '3', '0', '0', '3', '2', '3', '0', '0', '0', '0.666666667', '0', '0', '0', '1', '1', '0']
package org . xml . sax . ext ; import org . xml . sax . SAXException ; public interface LexicalHandler { public abstract void startDTD ( String name , String publicId , String systemId ) throws SAXException ; public abstract void endDTD ( ) throws SAXException ; public abstract void startEntity ( String name ) throws SAXException ; public abstract void endEntity ( String name ) throws SAXException ; public abstract void startCDATA ( ) throws SAXException ; public abstract void endCDATA ( ) throws SAXException ; public abstract void comment ( char ch [ ] , int start , int length ) throws SAXException ; } 	0	['7', '1', '0', '0', '7', '21', '0', '0', '7', '2', '7', '0', '0', '0', '0.428571429', '0', '0', '0', '1', '1', '0']
package org . w3c . dom ; public interface Attr extends Node { public String getName ( ) ; public boolean getSpecified ( ) ; public String getValue ( ) ; public void setValue ( String value ) throws DOMException ; public Element getOwnerElement ( ) ; } 	0	['5', '1', '0', '0', '5', '10', '0', '0', '5', '2', '5', '0', '0', '0', '0.6', '0', '0', '0', '1', '1', '0']
package org . apache . xml . serialize ; public final class LineSeparator { public static final String Unix = "\n" ; public static final String Windows = "\r\n" ; public static final String Macintosh = "\r" ; public static final String Web = "\n" ; } 	0	['1', '1', '0', '0', '2', '0', '0', '0', '1', '2', '8', '0', '0', '0', '1', '0', '0', '3', '0', '0', '0']
package org . xml . sax . helpers ; import org . xml . sax . AttributeList ; import java . util . Vector ; public class AttributeListImpl implements AttributeList { public AttributeListImpl ( ) { } public AttributeListImpl ( AttributeList atts ) { setAttributeList ( atts ) ; } public void setAttributeList ( AttributeList atts ) { int count = atts . getLength ( ) ; clear ( ) ; for ( int i = 0 ; i < count ; i ++ ) { addAttribute ( atts . getName ( i ) , atts . getType ( i ) , atts . getValue ( i ) ) ; } } public void addAttribute ( String name , String type , String value ) { names . addElement ( name ) ; types . addElement ( type ) ; values . addElement ( value ) ; } public void removeAttribute ( String name ) { int i = names . indexOf ( name ) ; if ( i >= 0 ) { names . removeElementAt ( i ) ; types . removeElementAt ( i ) ; values . removeElementAt ( i ) ; } } public void clear ( ) { names . removeAllElements ( ) ; types . removeAllElements ( ) ; values . removeAllElements ( ) ; } public int getLength ( ) { return names . size ( ) ; } public String getName ( int i ) { if ( i < 0 ) { return null ; } try { return ( String ) names . elementAt ( i ) ; } catch ( ArrayIndexOutOfBoundsException e ) { return null ; } } public String getType ( int i ) { if ( i < 0 ) { return null ; } try { return ( String ) types . elementAt ( i ) ; } catch ( ArrayIndexOutOfBoundsException e ) { return null ; } } public String getValue ( int i ) { if ( i < 0 ) { return null ; } try { return ( String ) values . elementAt ( i ) ; } catch ( ArrayIndexOutOfBoundsException e ) { return null ; } } public String getType ( String name ) { return getType ( names . indexOf ( name ) ) ; } public String getValue ( String name ) { return getValue ( names . indexOf ( name ) ) ; } Vector names = new Vector ( ) ; Vector types = new Vector ( ) ; Vector values = new Vector ( ) ; } 	0	['12', '1', '0', '0', '24', '0', '0', '0', '12', '0.303030303', '178', '0', '0', '0', '0.4375', '0', '0', '13.58333333', '2', '1.25', '0']
package org . w3c . dom . events ; public class EventException extends RuntimeException { public EventException ( short code , String message ) { super ( message ) ; this . code = code ; } public short code ; public static final short UNSPECIFIED_EVENT_TYPE_ERR = 0 ; } 	0	['1', '4', '0', '0', '2', '0', '0', '0', '1', '2', '10', '0', '0', '1', '1', '0', '0', '7', '0', '0', '0']
package org . apache . wml . dom ; import org . apache . wml . * ; public class WMLTdElementImpl extends WMLElementImpl implements WMLTdElement { public WMLTdElementImpl ( WMLDocumentImpl owner , String tagName ) { super ( owner , tagName ) ; } public void setClassName ( String newValue ) { setAttribute ( "class" , newValue ) ; } public String getClassName ( ) { return getAttribute ( "class" ) ; } public void setXmlLang ( String newValue ) { setAttribute ( "xml:lang" , newValue ) ; } public String getXmlLang ( ) { return getAttribute ( "xml:lang" ) ; } public void setId ( String newValue ) { setAttribute ( "id" , newValue ) ; } public String getId ( ) { return getAttribute ( "id" ) ; } } 	0	['7', '4', '0', '3', '10', '21', '0', '3', '7', '2', '39', '0', '0', '0.931818182', '0.571428571', '1', '6', '4.571428571', '1', '0.8571', '0']
package org . apache . wml ; public interface WMLSelectElement extends WMLElement { public void setTabIndex ( int newValue ) ; public int getTabIndex ( ) ; public void setMultiple ( boolean newValue ) ; public boolean getMultiple ( ) ; public void setName ( String newValue ) ; public String getName ( ) ; public void setValue ( String newValue ) ; public String getValue ( ) ; public void setTitle ( String newValue ) ; public String getTitle ( ) ; public void setIName ( String newValue ) ; public String getIName ( ) ; public void setIValue ( String newValue ) ; public String getIValue ( ) ; public void setXmlLang ( String newValue ) ; public String getXmlLang ( ) ; } 	0	['16', '1', '0', '2', '16', '120', '1', '1', '16', '2', '16', '0', '0', '0', '0.375', '0', '0', '0', '1', '1', '0']
package org . w3c . dom . html ; public interface HTMLTableColElement extends HTMLElement { public String getAlign ( ) ; public void setAlign ( String align ) ; public String getCh ( ) ; public void setCh ( String ch ) ; public String getChOff ( ) ; public void setChOff ( String chOff ) ; public int getSpan ( ) ; public void setSpan ( int span ) ; public String getVAlign ( ) ; public void setVAlign ( String vAlign ) ; public String getWidth ( ) ; public void setWidth ( String width ) ; } 	0	['12', '1', '0', '0', '12', '66', '0', '0', '12', '2', '12', '0', '0', '0', '0.5', '0', '0', '0', '1', '1', '0']
package org . xml . sax ; import java . io . IOException ; import java . util . Locale ; public interface Parser { public abstract void setLocale ( Locale locale ) throws SAXException ; public abstract void setEntityResolver ( EntityResolver resolver ) ; public abstract void setDTDHandler ( DTDHandler handler ) ; public abstract void setDocumentHandler ( DocumentHandler handler ) ; public abstract void setErrorHandler ( ErrorHandler handler ) ; public abstract void parse ( InputSource source ) throws SAXException , IOException ; public abstract void parse ( String systemId ) throws SAXException , IOException ; } 	0	['7', '1', '0', '0', '7', '21', '0', '0', '7', '2', '7', '0', '0', '0', '0.25', '0', '0', '0', '1', '1', '0']
package org . apache . wml . dom ; import org . apache . wml . * ; import org . w3c . dom . * ; import org . apache . xerces . dom . * ; public class WMLDOMImplementationImpl extends DOMImplementationImpl implements WMLDOMImplementation { static DOMImplementationImpl singleton = new WMLDOMImplementationImpl ( ) ; public static DOMImplementation getDOMImplementation ( ) { return singleton ; } public Document createDocument ( String namespaceURI , String qualifiedName , DocumentType doctype ) throws DOMException { DocumentImpl doc = new WMLDocumentImpl ( doctype ) ; Element e = doc . createElementNS ( namespaceURI , qualifiedName ) ; doc . appendChild ( e ) ; return doc ; } } 	0	['4', '2', '0', '4', '8', '4', '0', '4', '3', '0.666666667', '31', '0', '1', '0.666666667', '0.444444444', '0', '0', '6.5', '1', '0.5', '0']
package org . apache . xerces . validators . common ; import org . apache . xerces . utils . QName ; public class InsertableElementsInfo { public boolean canHoldPCData ; public int childCount ; public QName curChildren [ ] ; public boolean isValidEOC ; public int insertAt ; public QName possibleChildren [ ] ; public int resultsCount ; public boolean results [ ] ; } 	0	['1', '1', '0', '6', '2', '0', '5', '1', '1', '2', '12', '0', '2', '0', '1', '0', '0', '3', '0', '0', '0']
package org . w3c . dom . traversal ; import org . w3c . dom . Node ; import org . w3c . dom . DOMException ; public interface TreeWalker { public Node getRoot ( ) ; public int getWhatToShow ( ) ; public NodeFilter getFilter ( ) ; public boolean getExpandEntityReferences ( ) ; public Node getCurrentNode ( ) ; public void setCurrentNode ( Node currentNode ) throws DOMException ; public Node parentNode ( ) ; public Node firstChild ( ) ; public Node lastChild ( ) ; public Node previousSibling ( ) ; public Node nextSibling ( ) ; public Node previousNode ( ) ; public Node nextNode ( ) ; } 	0	['13', '1', '0', '0', '13', '78', '0', '0', '13', '2', '13', '0', '0', '0', '0.538461538', '0', '0', '0', '1', '1', '0']
package org . apache . wml . dom ; import org . apache . wml . * ; public class WMLNoopElementImpl extends WMLElementImpl implements WMLNoopElement { public WMLNoopElementImpl ( WMLDocumentImpl owner , String tagName ) { super ( owner , tagName ) ; } public void setClassName ( String newValue ) { setAttribute ( "class" , newValue ) ; } public String getClassName ( ) { return getAttribute ( "class" ) ; } public void setId ( String newValue ) { setAttribute ( "id" , newValue ) ; } public String getId ( ) { return getAttribute ( "id" ) ; } } 	0	['5', '4', '0', '3', '8', '10', '0', '3', '5', '2', '28', '0', '0', '0.953488372', '0.6', '1', '4', '4.6', '1', '0.8', '0']
package org . w3c . dom . html ; public interface HTMLDirectoryElement extends HTMLElement { public boolean getCompact ( ) ; public void setCompact ( boolean compact ) ; } 	0	['2', '1', '0', '0', '2', '1', '0', '0', '2', '2', '2', '0', '0', '0', '0.75', '0', '0', '0', '1', '1', '0']
package org . apache . xerces . validators . common ; import org . apache . xerces . framework . XMLContentSpec ; import org . apache . xerces . utils . Hash2intTable ; import org . apache . xerces . utils . QName ; import org . apache . xerces . validators . datatype . DatatypeValidator ; import org . apache . xerces . validators . common . XMLContentModel ; import org . apache . xerces . validators . common . CMException ; import org . apache . xerces . validators . schema . identity . IdentityConstraint ; import org . apache . xerces . utils . ImplementationMessages ; import org . w3c . dom . Document ; import java . util . Vector ; public class Grammar implements XMLContentSpec . Provider { private static final int CHUNK_SHIFT = 8 ; private static final int CHUNK_SIZE = ( 1 << CHUNK_SHIFT ) ; private static final int CHUNK_MASK = CHUNK_SIZE - 1 ; private static final int INITIAL_CHUNK_COUNT = ( 1 << ( 10 - CHUNK_SHIFT ) ) ; private static final int LIST_FLAG = 0x8000 ; private static final int LIST_MASK = ~ LIST_FLAG ; private int fTargetNamespace ; private Document fGrammarDocument ; private int fElementDeclCount = 0 ; private QName fElementDeclName [ ] [ ] = new QName [ INITIAL_CHUNK_COUNT ] [ ] ; private int fElementDeclType [ ] [ ] = new int [ INITIAL_CHUNK_COUNT ] [ ] ; private DatatypeValidator fElementDeclDatatypeValidator [ ] [ ] = new DatatypeValidator [ INITIAL_CHUNK_COUNT ] [ ] ; private int fElementDeclContentSpecIndex [ ] [ ] = new int [ INITIAL_CHUNK_COUNT ] [ ] ; private XMLContentModel fElementDeclContentModelValidator [ ] [ ] = new XMLContentModel [ INITIAL_CHUNK_COUNT ] [ ] ; private int fElementDeclFirstAttributeDeclIndex [ ] [ ] = new int [ INITIAL_CHUNK_COUNT ] [ ] ; private int fElementDeclLastAttributeDeclIndex [ ] [ ] = new int [ INITIAL_CHUNK_COUNT ] [ ] ; private Vector fElementDeclUnique [ ] [ ] = new Vector [ INITIAL_CHUNK_COUNT ] [ ] ; private Vector fElementDeclKey [ ] [ ] = new Vector [ INITIAL_CHUNK_COUNT ] [ ] ; private Vector fElementDeclKeyRef [ ] [ ] = new Vector [ INITIAL_CHUNK_COUNT ] [ ] ; private int fContentSpecCount = 0 ; private int fContentSpecType [ ] [ ] = new int [ INITIAL_CHUNK_COUNT ] [ ] ; private int fContentSpecValue [ ] [ ] = new int [ INITIAL_CHUNK_COUNT ] [ ] ; private int fContentSpecOtherValue [ ] [ ] = new int [ INITIAL_CHUNK_COUNT ] [ ] ; private int fAttributeDeclCount = 0 ; private QName fAttributeDeclName [ ] [ ] = new QName [ INITIAL_CHUNK_COUNT ] [ ] ; private int fAttributeDeclType [ ] [ ] = new int [ INITIAL_CHUNK_COUNT ] [ ] ; private int fAttributeDeclEnumeration [ ] [ ] = new int [ INITIAL_CHUNK_COUNT ] [ ] ; private int fAttributeDeclDefaultType [ ] [ ] = new int [ INITIAL_CHUNK_COUNT ] [ ] ; private DatatypeValidator fAttributeDeclDatatypeValidator [ ] [ ] = new DatatypeValidator [ INITIAL_CHUNK_COUNT ] [ ] ; private String fAttributeDeclDefaultValue [ ] [ ] = new String [ INITIAL_CHUNK_COUNT ] [ ] ; private int fAttributeDeclNextAttributeDeclIndex [ ] [ ] = new int [ INITIAL_CHUNK_COUNT ] [ ] ; private Hash2intTable fElementNameAndScopeToElementDeclIndexMapping = new Hash2intTable ( ) ; private QName fQName1 = new QName ( ) ; private QName fQName2 = new QName ( ) ; public Document getGrammarDocument ( ) { return fGrammarDocument ; } public int getElementDeclIndex ( int localpartIndex , int scopeIndex ) { if ( localpartIndex > - 1 && scopeIndex > - 2 ) { return fElementNameAndScopeToElementDeclIndexMapping . get ( - 1 , localpartIndex , scopeIndex ) ; } return - 1 ; } public int getElementDeclIndex ( int uriIndex , int localpartIndex , int scopeIndex ) { if ( localpartIndex > - 1 && scopeIndex > - 2 ) { return fElementNameAndScopeToElementDeclIndexMapping . get ( uriIndex , localpartIndex , scopeIndex ) ; } return - 1 ; } public int getElementDeclIndex ( QName element , int scopeIndex ) { if ( element . localpart > - 1 && scopeIndex > - 2 ) { return fElementNameAndScopeToElementDeclIndexMapping . get ( element . uri , element . localpart , scopeIndex ) ; } return - 1 ; } public boolean getElementDecl ( int elementDeclIndex , XMLElementDecl elementDecl ) { if ( elementDeclIndex < 0 || elementDeclIndex >= fElementDeclCount ) { return false ; } int chunk = elementDeclIndex > > CHUNK_SHIFT ; int index = elementDeclIndex & CHUNK_MASK ; elementDecl . name . setValues ( fElementDeclName [ chunk ] [ index ] ) ; if ( fElementDeclType [ chunk ] [ index ] == - 1 ) { elementDecl . type = - 1 ; elementDecl . list = false ; } else { elementDecl . type = fElementDeclType [ chunk ] [ index ] & LIST_MASK ; elementDecl . list = ( fElementDeclType [ chunk ] [ index ] & LIST_FLAG ) != 0 ; } elementDecl . datatypeValidator = fElementDeclDatatypeValidator [ chunk ] [ index ] ; elementDecl . contentSpecIndex = fElementDeclContentSpecIndex [ chunk ] [ index ] ; elementDecl . unique . removeAllElements ( ) ; int ucount = fElementDeclUnique [ chunk ] [ index ] != null ? fElementDeclUnique [ chunk ] [ index ] . size ( ) : 0 ; for ( int i = 0 ; i < ucount ; i ++ ) { elementDecl . unique . addElement ( fElementDeclUnique [ chunk ] [ index ] . elementAt ( i ) ) ; } elementDecl . key . removeAllElements ( ) ; int kcount = fElementDeclKey [ chunk ] [ index ] != null ? fElementDeclKey [ chunk ] [ index ] . size ( ) : 0 ; for ( int i = 0 ; i < kcount ; i ++ ) { elementDecl . key . addElement ( fElementDeclKey [ chunk ] [ index ] . elementAt ( i ) ) ; } elementDecl . keyRef . removeAllElements ( ) ; int krcount = fElementDeclKeyRef [ chunk ] [ index ] != null ? fElementDeclKeyRef [ chunk ] [ index ] . size ( ) : 0 ; for ( int i = 0 ; i < krcount ; i ++ ) { elementDecl . keyRef . addElement ( fElementDeclKeyRef [ chunk ] [ index ] . elementAt ( i ) ) ; } return true ; } public int getFirstAttributeDeclIndex ( int elementDeclIndex ) { int chunk = elementDeclIndex > > CHUNK_SHIFT ; int index = elementDeclIndex & CHUNK_MASK ; return fElementDeclFirstAttributeDeclIndex [ chunk ] [ index ] ; } public int getNextAttributeDeclIndex ( int attributeDeclIndex ) { int chunk = attributeDeclIndex > > CHUNK_SHIFT ; int index = attributeDeclIndex & CHUNK_MASK ; return fAttributeDeclNextAttributeDeclIndex [ chunk ] [ index ] ; } public boolean getContentSpec ( int contentSpecIndex , XMLContentSpec contentSpec ) { if ( contentSpecIndex < 0 || contentSpecIndex >= fContentSpecCount ) return false ; int chunk = contentSpecIndex > > CHUNK_SHIFT ; int index = contentSpecIndex & CHUNK_MASK ; contentSpec . type = fContentSpecType [ chunk ] [ index ] ; contentSpec . value = fContentSpecValue [ chunk ] [ index ] ; contentSpec . otherValue = fContentSpecOtherValue [ chunk ] [ index ] ; return true ; } public XMLContentModel getElementContentModel ( int elementDeclIndex ) throws CMException { if ( elementDeclIndex < 0 || elementDeclIndex >= fElementDeclCount ) return null ; int chunk = elementDeclIndex > > CHUNK_SHIFT ; int index = elementDeclIndex & CHUNK_MASK ; XMLContentModel contentModel = fElementDeclContentModelValidator [ chunk ] [ index ] ; if ( contentModel != null ) return contentModel ; int contentType = fElementDeclType [ chunk ] [ index ] ; if ( contentType == XMLElementDecl . TYPE_SIMPLE ) { return null ; } int contentSpecIndex = fElementDeclContentSpecIndex [ chunk ] [ index ] ; XMLContentSpec contentSpec = new XMLContentSpec ( ) ; getContentSpec ( contentSpecIndex , contentSpec ) ; if ( contentType == XMLElementDecl . TYPE_MIXED ) { Vector vQName = new Vector ( ) ; try { ChildrenList children = new ChildrenList ( ) ; contentSpecTree ( contentSpecIndex , contentSpec , children ) ; contentModel = new MixedContentModel ( children . qname , children . type , 0 , children . length , false , isDTD ( ) ) ; } catch ( CMException ex ) { ex . printStackTrace ( ) ; } } else if ( contentType == XMLElementDecl . TYPE_CHILDREN ) { try { contentModel = createChildModel ( contentSpecIndex ) ; } catch ( CMException ex ) { ex . printStackTrace ( ) ; } } else { throw new CMException ( ImplementationMessages . VAL_CST ) ; } fElementDeclContentModelValidator [ chunk ] [ index ] = contentModel ; return contentModel ; } public boolean getAttributeDecl ( int attributeDeclIndex , XMLAttributeDecl attributeDecl ) { if ( attributeDeclIndex < 0 || attributeDeclIndex >= fAttributeDeclCount ) { return false ; } int chunk = attributeDeclIndex > > CHUNK_SHIFT ; int index = attributeDeclIndex & CHUNK_MASK ; attributeDecl . name . setValues ( fAttributeDeclName [ chunk ] [ index ] ) ; if ( fAttributeDeclType [ chunk ] [ index ] == - 1 ) { attributeDecl . type = - 1 ; attributeDecl . list = false ; } else { attributeDecl . type = fAttributeDeclType [ chunk ] [ index ] & LIST_MASK ; attributeDecl . list = ( fAttributeDeclType [ chunk ] [ index ] & LIST_FLAG ) != 0 ; } attributeDecl . datatypeValidator = fAttributeDeclDatatypeValidator [ chunk ] [ index ] ; attributeDecl . enumeration = fAttributeDeclEnumeration [ chunk ] [ index ] ; attributeDecl . defaultType = fAttributeDeclDefaultType [ chunk ] [ index ] ; attributeDecl . defaultValue = fAttributeDeclDefaultValue [ chunk ] [ index ] ; return true ; } protected void setGrammarDocument ( Document grammarDocument ) { fGrammarDocument = grammarDocument ; } protected int createElementDecl ( ) { int chunk = fElementDeclCount > > CHUNK_SHIFT ; int index = fElementDeclCount & CHUNK_MASK ; ensureElementDeclCapacity ( chunk ) ; fElementDeclName [ chunk ] [ index ] = new QName ( ) ; fElementDeclType [ chunk ] [ index ] = - 1 ; fElementDeclDatatypeValidator [ chunk ] [ index ] = null ; fElementDeclContentSpecIndex [ chunk ] [ index ] = - 1 ; fElementDeclContentModelValidator [ chunk ] [ index ] = null ; fElementDeclFirstAttributeDeclIndex [ chunk ] [ index ] = - 1 ; fElementDeclLastAttributeDeclIndex [ chunk ] [ index ] = - 1 ; return fElementDeclCount ++ ; } protected void setElementDecl ( int elementDeclIndex , XMLElementDecl elementDecl ) { if ( elementDeclIndex < 0 || elementDeclIndex >= fElementDeclCount ) { return ; } int chunk = elementDeclIndex > > CHUNK_SHIFT ; int index = elementDeclIndex & CHUNK_MASK ; fElementDeclName [ chunk ] [ index ] . setValues ( elementDecl . name ) ; fElementDeclType [ chunk ] [ index ] = elementDecl . type ; if ( elementDecl . list ) { fElementDeclType [ chunk ] [ index ] |= LIST_FLAG ; } fElementDeclDatatypeValidator [ chunk ] [ index ] = elementDecl . datatypeValidator ; fElementDeclContentSpecIndex [ chunk ] [ index ] = elementDecl . contentSpecIndex ; int ucount = elementDecl . unique . size ( ) ; if ( ucount > 0 ) { if ( fElementDeclUnique [ chunk ] [ index ] == null ) { fElementDeclUnique [ chunk ] [ index ] = ( Vector ) elementDecl . unique . clone ( ) ; } else { fElementDeclUnique [ chunk ] [ index ] . removeAllElements ( ) ; for ( int i = 0 ; i < ucount ; i ++ ) { fElementDeclUnique [ chunk ] [ index ] . addElement ( elementDecl . unique . elementAt ( i ) ) ; } } } int kcount = elementDecl . key . size ( ) ; if ( kcount > 0 ) { if ( fElementDeclKey [ chunk ] [ index ] == null ) { fElementDeclKey [ chunk ] [ index ] = ( Vector ) elementDecl . key . clone ( ) ; } else { fElementDeclKey [ chunk ] [ index ] . removeAllElements ( ) ; for ( int i = 0 ; i < kcount ; i ++ ) { fElementDeclKey [ chunk ] [ index ] . addElement ( elementDecl . key . elementAt ( i ) ) ; } } } int krcount = elementDecl . keyRef . size ( ) ; if ( krcount > 0 ) { if ( fElementDeclKeyRef [ chunk ] [ index ] == null ) { fElementDeclKeyRef [ chunk ] [ index ] = ( Vector ) elementDecl . keyRef . clone ( ) ; } else { fElementDeclKeyRef [ chunk ] [ index ] . removeAllElements ( ) ; for ( int i = 0 ; i < krcount ; i ++ ) { fElementDeclKeyRef [ chunk ] [ index ] . addElement ( elementDecl . keyRef . elementAt ( i ) ) ; } } } putElementNameMapping ( elementDecl . name , elementDecl . enclosingScope , elementDeclIndex ) ; } protected void putElementNameMapping ( QName name , int scope , int elementDeclIndex ) { fElementNameAndScopeToElementDeclIndexMapping . put ( name . uri , name . localpart , scope , elementDeclIndex ) ; } protected void setFirstAttributeDeclIndex ( int elementDeclIndex , int newFirstAttrIndex ) { if ( elementDeclIndex < 0 || elementDeclIndex >= fElementDeclCount ) { return ; } int chunk = elementDeclIndex > > CHUNK_SHIFT ; int index = elementDeclIndex & CHUNK_MASK ; fElementDeclFirstAttributeDeclIndex [ chunk ] [ index ] = newFirstAttrIndex ; } protected int createContentSpec ( ) { int chunk = fContentSpecCount > > CHUNK_SHIFT ; int index = fContentSpecCount & CHUNK_MASK ; ensureContentSpecCapacity ( chunk ) ; fContentSpecType [ chunk ] [ index ] = - 1 ; fContentSpecValue [ chunk ] [ index ] = - 1 ; fContentSpecOtherValue [ chunk ] [ index ] = - 1 ; return fContentSpecCount ++ ; } protected void setContentSpec ( int contentSpecIndex , XMLContentSpec contentSpec ) { int chunk = contentSpecIndex > > CHUNK_SHIFT ; int index = contentSpecIndex & CHUNK_MASK ; fContentSpecType [ chunk ] [ index ] = contentSpec . type ; fContentSpecValue [ chunk ] [ index ] = contentSpec . value ; fContentSpecOtherValue [ chunk ] [ index ] = contentSpec . otherValue ; } protected int createAttributeDecl ( ) { int chunk = fAttributeDeclCount > > CHUNK_SHIFT ; int index = fAttributeDeclCount & CHUNK_MASK ; ensureAttributeDeclCapacity ( chunk ) ; fAttributeDeclName [ chunk ] [ index ] = new QName ( ) ; fAttributeDeclType [ chunk ] [ index ] = - 1 ; fAttributeDeclDatatypeValidator [ chunk ] [ index ] = null ; fAttributeDeclEnumeration [ chunk ] [ index ] = - 1 ; fAttributeDeclDefaultType [ chunk ] [ index ] = XMLAttributeDecl . DEFAULT_TYPE_IMPLIED ; fAttributeDeclDefaultValue [ chunk ] [ index ] = null ; fAttributeDeclNextAttributeDeclIndex [ chunk ] [ index ] = - 1 ; return fAttributeDeclCount ++ ; } protected void setAttributeDecl ( int elementDeclIndex , int attributeDeclIndex , XMLAttributeDecl attributeDecl ) { int attrChunk = attributeDeclIndex > > CHUNK_SHIFT ; int attrIndex = attributeDeclIndex & CHUNK_MASK ; fAttributeDeclName [ attrChunk ] [ attrIndex ] . setValues ( attributeDecl . name ) ; fAttributeDeclType [ attrChunk ] [ attrIndex ] = attributeDecl . type ; if ( attributeDecl . list ) { fAttributeDeclType [ attrChunk ] [ attrIndex ] |= LIST_FLAG ; } fAttributeDeclEnumeration [ attrChunk ] [ attrIndex ] = attributeDecl . enumeration ; fAttributeDeclDefaultType [ attrChunk ] [ attrIndex ] = attributeDecl . defaultType ; fAttributeDeclDatatypeValidator [ attrChunk ] [ attrIndex ] = attributeDecl . datatypeValidator ; fAttributeDeclDefaultValue [ attrChunk ] [ attrIndex ] = attributeDecl . defaultValue ; int elemChunk = elementDeclIndex > > CHUNK_SHIFT ; int elemIndex = elementDeclIndex & CHUNK_MASK ; int index = fElementDeclFirstAttributeDeclIndex [ elemChunk ] [ elemIndex ] ; while ( index != - 1 ) { if ( index == attributeDeclIndex ) { break ; } attrChunk = index > > CHUNK_SHIFT ; attrIndex = index & CHUNK_MASK ; index = fAttributeDeclNextAttributeDeclIndex [ attrChunk ] [ attrIndex ] ; } if ( index == - 1 ) { if ( fElementDeclFirstAttributeDeclIndex [ elemChunk ] [ elemIndex ] == - 1 ) { fElementDeclFirstAttributeDeclIndex [ elemChunk ] [ elemIndex ] = attributeDeclIndex ; } else { index = fElementDeclLastAttributeDeclIndex [ elemChunk ] [ elemIndex ] ; attrChunk = index > > CHUNK_SHIFT ; attrIndex = index & CHUNK_MASK ; fAttributeDeclNextAttributeDeclIndex [ attrChunk ] [ attrIndex ] = attributeDeclIndex ; } fElementDeclLastAttributeDeclIndex [ elemChunk ] [ elemIndex ] = attributeDeclIndex ; } } protected boolean isDTD ( ) { return false ; } public void printElements ( org . apache . xerces . utils . StringPool pool ) { int elementDeclIndex = 0 ; XMLElementDecl elementDecl = new XMLElementDecl ( ) ; while ( getElementDecl ( elementDeclIndex ++ , elementDecl ) ) { System . out . println ( "element decl: " + elementDecl . name + ", " + pool . toString ( elementDecl . name . rawname ) + ", " + XMLContentSpec . toString ( this , pool , elementDecl . contentSpecIndex ) ) ; } } public void printAttributes ( int elementDeclIndex ) { int attributeDeclIndex = getFirstAttributeDeclIndex ( elementDeclIndex ) ; System . out . print ( elementDeclIndex ) ; System . out . print ( " [" ) ; while ( attributeDeclIndex != - 1 ) { System . out . print ( ' ' ) ; System . out . print ( attributeDeclIndex ) ; printAttribute ( attributeDeclIndex ) ; attributeDeclIndex = getNextAttributeDeclIndex ( attributeDeclIndex ) ; if ( attributeDeclIndex != - 1 ) { System . out . print ( "," ) ; } } System . out . println ( " ]" ) ; } private void printAttribute ( int attributeDeclIndex ) { XMLAttributeDecl attributeDecl = new XMLAttributeDecl ( ) ; if ( getAttributeDecl ( attributeDeclIndex , attributeDecl ) ) { System . out . print ( " { " ) ; System . out . print ( attributeDecl . name . localpart ) ; System . out . print ( " }" ) ; } } private final XMLContentModel createChildModel ( int contentSpecIndex ) throws CMException { XMLContentSpec contentSpec = new XMLContentSpec ( ) ; getContentSpec ( contentSpecIndex , contentSpec ) ; if ( ( contentSpec . type & 0x0f ) == XMLContentSpec . CONTENTSPECNODE_ANY || ( contentSpec . type & 0x0f ) == XMLContentSpec . CONTENTSPECNODE_ANY_OTHER || ( contentSpec . type & 0x0f ) == XMLContentSpec . CONTENTSPECNODE_ANY_LOCAL ) { } else if ( contentSpec . type == XMLContentSpec . CONTENTSPECNODE_LEAF ) { if ( contentSpec . value == - 1 && contentSpec . otherValue == - 1 ) throw new CMException ( ImplementationMessages . VAL_NPCD ) ; fQName1 . setValues ( - 1 , contentSpec . value , contentSpec . value , contentSpec . otherValue ) ; return new SimpleContentModel ( fQName1 , null , contentSpec . type , isDTD ( ) ) ; } else if ( ( contentSpec . type == XMLContentSpec . CONTENTSPECNODE_CHOICE ) || ( contentSpec . type == XMLContentSpec . CONTENTSPECNODE_SEQ ) ) { XMLContentSpec contentSpecLeft = new XMLContentSpec ( ) ; XMLContentSpec contentSpecRight = new XMLContentSpec ( ) ; getContentSpec ( contentSpec . value , contentSpecLeft ) ; getContentSpec ( contentSpec . otherValue , contentSpecRight ) ; if ( ( contentSpecLeft . type == XMLContentSpec . CONTENTSPECNODE_LEAF ) && ( contentSpecRight . type == XMLContentSpec . CONTENTSPECNODE_LEAF ) ) { fQName1 . setValues ( - 1 , contentSpecLeft . value , contentSpecLeft . value , contentSpecLeft . otherValue ) ; fQName2 . setValues ( - 1 , contentSpecRight . value , contentSpecRight . value , contentSpecRight . otherValue ) ; return new SimpleContentModel ( fQName1 , fQName2 , contentSpec . type , isDTD ( ) ) ; } } else if ( ( contentSpec . type == XMLContentSpec . CONTENTSPECNODE_ZERO_OR_ONE ) || ( contentSpec . type == XMLContentSpec . CONTENTSPECNODE_ZERO_OR_MORE ) || ( contentSpec . type == XMLContentSpec . CONTENTSPECNODE_ONE_OR_MORE ) ) { XMLContentSpec contentSpecLeft = new XMLContentSpec ( ) ; getContentSpec ( contentSpec . value , contentSpecLeft ) ; if ( contentSpecLeft . type == XMLContentSpec . CONTENTSPECNODE_LEAF ) { fQName1 . setValues ( - 1 , contentSpecLeft . value , contentSpecLeft . value , contentSpecLeft . otherValue ) ; return new SimpleContentModel ( fQName1 , null , contentSpec . type , isDTD ( ) ) ; } } else { throw new CMException ( ImplementationMessages . VAL_CST ) ; } fLeafCount = 0 ; CMNode cmn = buildSyntaxTree ( contentSpecIndex , contentSpec ) ; return new DFAContentModel ( cmn , fLeafCount , isDTD ( ) ) ; } private void printSyntaxTree ( CMNode cmn ) { System . out . println ( "CMNode : " + cmn . type ( ) ) ; if ( cmn . type ( ) == XMLContentSpec . CONTENTSPECNODE_LEAF ) { System . out . println ( "     Leaf: " + ( ( CMLeaf ) cmn ) . getElement ( ) ) ; return ; } if ( cmn instanceof CMBinOp ) { printSyntaxTree ( ( ( CMBinOp ) cmn ) . getLeft ( ) ) ; printSyntaxTree ( ( ( CMBinOp ) cmn ) . getRight ( ) ) ; } if ( cmn instanceof CMUniOp ) { printSyntaxTree ( ( ( CMUniOp ) cmn ) . getChild ( ) ) ; } } private int countLeaves ( int contentSpecIndex ) { return countLeaves ( contentSpecIndex , new XMLContentSpec ( ) ) ; } private int countLeaves ( int contentSpecIndex , XMLContentSpec contentSpec ) { if ( contentSpecIndex == - 1 ) { return 0 ; } getContentSpec ( contentSpecIndex , contentSpec ) ; if ( contentSpec . type == XMLContentSpec . CONTENTSPECNODE_LEAF ) { return 1 ; } int value = contentSpec . value ; int otherValue = contentSpec . otherValue ; return countLeaves ( value , contentSpec ) + countLeaves ( otherValue , contentSpec ) ; } private int fLeafCount = 0 ; private int fEpsilonIndex = - 1 ; private final CMNode buildSyntaxTree ( int startNode , XMLContentSpec contentSpec ) throws CMException { CMNode nodeRet = null ; getContentSpec ( startNode , contentSpec ) ; if ( ( contentSpec . type & 0x0f ) == XMLContentSpec . CONTENTSPECNODE_ANY ) { nodeRet = new CMAny ( contentSpec . type , contentSpec . otherValue , fLeafCount ++ ) ; } else if ( ( contentSpec . type & 0x0f ) == XMLContentSpec . CONTENTSPECNODE_ANY_OTHER ) { nodeRet = new CMAny ( contentSpec . type , contentSpec . otherValue , fLeafCount ++ ) ; } else if ( ( contentSpec . type & 0x0f ) == XMLContentSpec . CONTENTSPECNODE_ANY_LOCAL ) { nodeRet = new CMAny ( contentSpec . type , - 1 , fLeafCount ++ ) ; } else if ( contentSpec . type == XMLContentSpec . CONTENTSPECNODE_LEAF ) { fQName1 . setValues ( - 1 , contentSpec . value , contentSpec . value , contentSpec . otherValue ) ; nodeRet = new CMLeaf ( fQName1 , fLeafCount ++ ) ; } else { final int leftNode = contentSpec . value ; final int rightNode = contentSpec . otherValue ; if ( ( contentSpec . type == XMLContentSpec . CONTENTSPECNODE_CHOICE ) || ( contentSpec . type == XMLContentSpec . CONTENTSPECNODE_SEQ ) ) { nodeRet = new CMBinOp ( contentSpec . type , buildSyntaxTree ( leftNode , contentSpec ) , buildSyntaxTree ( rightNode , contentSpec ) ) ; } else if ( contentSpec . type == XMLContentSpec . CONTENTSPECNODE_ZERO_OR_MORE || contentSpec . type == XMLContentSpec . CONTENTSPECNODE_ZERO_OR_ONE || contentSpec . type == XMLContentSpec . CONTENTSPECNODE_ONE_OR_MORE ) { nodeRet = new CMUniOp ( contentSpec . type , buildSyntaxTree ( leftNode , contentSpec ) ) ; } else { throw new CMException ( ImplementationMessages . VAL_CST ) ; } } return nodeRet ; } private void contentSpecTree ( int contentSpecIndex , XMLContentSpec contentSpec , ChildrenList children ) throws CMException { getContentSpec ( contentSpecIndex , contentSpec ) ; if ( contentSpec . type == XMLContentSpec . CONTENTSPECNODE_LEAF || ( contentSpec . type & 0x0f ) == XMLContentSpec . CONTENTSPECNODE_ANY || ( contentSpec . type & 0x0f ) == XMLContentSpec . CONTENTSPECNODE_ANY_LOCAL || ( contentSpec . type & 0x0f ) == XMLContentSpec . CONTENTSPECNODE_ANY_OTHER ) { if ( children . length == children . qname . length ) { QName [ ] newQName = new QName [ children . length * 2 ] ; System . arraycopy ( children . qname , 0 , newQName , 0 , children . length ) ; children . qname = newQName ; int [ ] newType = new int [ children . length * 2 ] ; System . arraycopy ( children . type , 0 , newType , 0 , children . length ) ; children . type = newType ; } children . qname [ children . length ] = new QName ( - 1 , contentSpec . value , contentSpec . value , contentSpec . otherValue ) ; children . type [ children . length ] = contentSpec . type ; children . length ++ ; return ; } final int leftNode = contentSpec . value ; final int rightNode = contentSpec . otherValue ; if ( contentSpec . type == XMLContentSpec . CONTENTSPECNODE_CHOICE || contentSpec . type == XMLContentSpec . CONTENTSPECNODE_SEQ ) { contentSpecTree ( leftNode , contentSpec , children ) ; contentSpecTree ( rightNode , contentSpec , children ) ; return ; } if ( contentSpec . type == XMLContentSpec . CONTENTSPECNODE_ZERO_OR_ONE || contentSpec . type == XMLContentSpec . CONTENTSPECNODE_ZERO_OR_MORE || contentSpec . type == XMLContentSpec . CONTENTSPECNODE_ONE_OR_MORE ) { contentSpecTree ( leftNode , contentSpec , children ) ; return ; } throw new CMException ( ImplementationMessages . VAL_CST ) ; } private boolean ensureElementDeclCapacity ( int chunk ) { try { return fElementDeclName [ chunk ] [ 0 ] == null ; } catch ( ArrayIndexOutOfBoundsException ex ) { fElementDeclName = resize ( fElementDeclName , fElementDeclName . length * 2 ) ; fElementDeclType = resize ( fElementDeclType , fElementDeclType . length * 2 ) ; fElementDeclDatatypeValidator = resize ( fElementDeclDatatypeValidator , fElementDeclDatatypeValidator . length * 2 ) ; fElementDeclContentSpecIndex = resize ( fElementDeclContentSpecIndex , fElementDeclContentSpecIndex . length * 2 ) ; fElementDeclContentModelValidator = resize ( fElementDeclContentModelValidator , fElementDeclContentModelValidator . length * 2 ) ; fElementDeclFirstAttributeDeclIndex = resize ( fElementDeclFirstAttributeDeclIndex , fElementDeclFirstAttributeDeclIndex . length * 2 ) ; fElementDeclLastAttributeDeclIndex = resize ( fElementDeclLastAttributeDeclIndex , fElementDeclLastAttributeDeclIndex . length * 2 ) ; fElementDeclUnique = resize ( fElementDeclUnique , fElementDeclUnique . length * 2 ) ; fElementDeclKey = resize ( fElementDeclKey , fElementDeclKey . length * 2 ) ; fElementDeclKeyRef = resize ( fElementDeclKeyRef , fElementDeclKeyRef . length * 2 ) ; } catch ( NullPointerException ex ) { } fElementDeclName [ chunk ] = new QName [ CHUNK_SIZE ] ; fElementDeclType [ chunk ] = new int [ CHUNK_SIZE ] ; fElementDeclDatatypeValidator [ chunk ] = new DatatypeValidator [ CHUNK_SIZE ] ; fElementDeclContentSpecIndex [ chunk ] = new int [ CHUNK_SIZE ] ; fElementDeclContentModelValidator [ chunk ] = new XMLContentModel [ CHUNK_SIZE ] ; fElementDeclFirstAttributeDeclIndex [ chunk ] = new int [ CHUNK_SIZE ] ; fElementDeclLastAttributeDeclIndex [ chunk ] = new int [ CHUNK_SIZE ] ; fElementDeclUnique [ chunk ] = new Vector [ CHUNK_SIZE ] ; fElementDeclKey [ chunk ] = new Vector [ CHUNK_SIZE ] ; fElementDeclKeyRef [ chunk ] = new Vector [ CHUNK_SIZE ] ; return true ; } private boolean ensureContentSpecCapacity ( int chunk ) { try { return fContentSpecType [ chunk ] [ 0 ] == 0 ; } catch ( ArrayIndexOutOfBoundsException ex ) { fContentSpecType = resize ( fContentSpecType , fContentSpecType . length * 2 ) ; fContentSpecValue = resize ( fContentSpecValue , fContentSpecValue . length * 2 ) ; fContentSpecOtherValue = resize ( fContentSpecOtherValue , fContentSpecOtherValue . length * 2 ) ; } catch ( NullPointerException ex ) { } fContentSpecType [ chunk ] = new int [ CHUNK_SIZE ] ; fContentSpecValue [ chunk ] = new int [ CHUNK_SIZE ] ; fContentSpecOtherValue [ chunk ] = new int [ CHUNK_SIZE ] ; return true ; } private boolean ensureAttributeDeclCapacity ( int chunk ) { try { return fAttributeDeclName [ chunk ] [ 0 ] == null ; } catch ( ArrayIndexOutOfBoundsException ex ) { fAttributeDeclName = resize ( fAttributeDeclName , fAttributeDeclName . length * 2 ) ; fAttributeDeclType = resize ( fAttributeDeclType , fAttributeDeclType . length * 2 ) ; fAttributeDeclEnumeration = resize ( fAttributeDeclEnumeration , fAttributeDeclEnumeration . length * 2 ) ; fAttributeDeclDefaultType = resize ( fAttributeDeclDefaultType , fAttributeDeclDefaultType . length * 2 ) ; fAttributeDeclDatatypeValidator = resize ( fAttributeDeclDatatypeValidator , fAttributeDeclDatatypeValidator . length * 2 ) ; fAttributeDeclDefaultValue = resize ( fAttributeDeclDefaultValue , fAttributeDeclDefaultValue . length * 2 ) ; fAttributeDeclNextAttributeDeclIndex = resize ( fAttributeDeclNextAttributeDeclIndex , fAttributeDeclNextAttributeDeclIndex . length * 2 ) ; } catch ( NullPointerException ex ) { } fAttributeDeclName [ chunk ] = new QName [ CHUNK_SIZE ] ; fAttributeDeclType [ chunk ] = new int [ CHUNK_SIZE ] ; fAttributeDeclEnumeration [ chunk ] = new int [ CHUNK_SIZE ] ; fAttributeDeclDefaultType [ chunk ] = new int [ CHUNK_SIZE ] ; fAttributeDeclDatatypeValidator [ chunk ] = new DatatypeValidator [ CHUNK_SIZE ] ; fAttributeDeclDefaultValue [ chunk ] = new String [ CHUNK_SIZE ] ; fAttributeDeclNextAttributeDeclIndex [ chunk ] = new int [ CHUNK_SIZE ] ; return true ; } private int [ ] [ ] resize ( int array [ ] [ ] , int newsize ) { int newarray [ ] [ ] = new int [ newsize ] [ ] ; System . arraycopy ( array , 0 , newarray , 0 , array . length ) ; return newarray ; } private DatatypeValidator [ ] [ ] resize ( DatatypeValidator array [ ] [ ] , int newsize ) { DatatypeValidator newarray [ ] [ ] = new DatatypeValidator [ newsize ] [ ] ; System . arraycopy ( array , 0 , newarray , 0 , array . length ) ; return newarray ; } private XMLContentModel [ ] [ ] resize ( XMLContentModel array [ ] [ ] , int newsize ) { XMLContentModel newarray [ ] [ ] = new XMLContentModel [ newsize ] [ ] ; System . arraycopy ( array , 0 , newarray , 0 , array . length ) ; return newarray ; } private QName [ ] [ ] resize ( QName array [ ] [ ] , int newsize ) { QName newarray [ ] [ ] = new QName [ newsize ] [ ] ; System . arraycopy ( array , 0 , newarray , 0 , array . length ) ; return newarray ; } private String [ ] [ ] resize ( String array [ ] [ ] , int newsize ) { String newarray [ ] [ ] = new String [ newsize ] [ ] ; System . arraycopy ( array , 0 , newarray , 0 , array . length ) ; return newarray ; } private Vector [ ] [ ] resize ( Vector array [ ] [ ] , int newsize ) { Vector newarray [ ] [ ] = new Vector [ newsize ] [ ] ; System . arraycopy ( array , 0 , newarray , 0 , array . length ) ; return newarray ; } static class ChildrenList { public int length = 0 ; public QName [ ] qname = new QName [ 2 ] ; public int [ ] type = new int [ 2 ] ; } } 	0	['39', '1', '2', '28', '83', '607', '9', '19', '13', '0.902046784', '2503', '1', '9', '0', '0.144230769', '0', '0', '62.25641026', '13', '2.3333', '0']
package org . apache . xerces . validators . common ; import org . apache . xerces . framework . XMLContentSpec ; import org . apache . xerces . utils . ImplementationMessages ; public class CMUniOp extends CMNode { public CMUniOp ( int type , CMNode childNode ) throws CMException { super ( type ) ; if ( ( type ( ) != XMLContentSpec . CONTENTSPECNODE_ZERO_OR_ONE ) && ( type ( ) != XMLContentSpec . CONTENTSPECNODE_ZERO_OR_MORE ) && ( type ( ) != XMLContentSpec . CONTENTSPECNODE_ONE_OR_MORE ) ) { throw new CMException ( ImplementationMessages . VAL_UST ) ; } fChild = childNode ; } final CMNode getChild ( ) { return fChild ; } boolean isNullable ( ) throws CMException { if ( type ( ) == XMLContentSpec . CONTENTSPECNODE_ONE_OR_MORE ) return fChild . isNullable ( ) ; else return true ; } protected void calcFirstPos ( CMStateSet toSet ) throws CMException { toSet . setTo ( fChild . firstPos ( ) ) ; } protected void calcLastPos ( CMStateSet toSet ) throws CMException { toSet . setTo ( fChild . lastPos ( ) ) ; } private CMNode fChild ; } ; 	0	['5', '2', '0', '5', '12', '0', '2', '3', '1', '0', '55', '1', '1', '0.666666667', '0.45', '1', '2', '9.8', '1', '0.8', '0']
package org . apache . xerces . dom ; import java . io . * ; import java . util . Vector ; import org . w3c . dom . * ; import org . apache . xerces . dom . events . EventImpl ; import org . apache . xerces . dom . events . MutationEventImpl ; import org . w3c . dom . events . * ; public abstract class NodeImpl implements Node , NodeList , EventTarget , Cloneable , Serializable { static final long serialVersionUID = - 6316591992167219696L ; public static final short ELEMENT_DEFINITION_NODE = - 1 ; protected NodeImpl ownerNode ; protected short flags ; protected final static short READONLY = 0x1 << 0 ; protected final static short SYNCDATA = 0x1 << 1 ; protected final static short SYNCCHILDREN = 0x1 << 2 ; protected final static short OWNED = 0x1 << 3 ; protected final static short FIRSTCHILD = 0x1 << 4 ; protected final static short SPECIFIED = 0x1 << 5 ; protected final static short IGNORABLEWS = 0x1 << 6 ; protected final static short SETVALUE = 0x1 << 7 ; protected final static short HASSTRING = 0x1 << 8 ; protected final static short UNNORMALIZED = 0x1 << 9 ; protected NodeImpl ( DocumentImpl ownerDocument ) { ownerNode = ownerDocument ; } public NodeImpl ( ) { } public abstract short getNodeType ( ) ; public abstract String getNodeName ( ) ; public String getNodeValue ( ) { return null ; } public void setNodeValue ( String x ) throws DOMException { } public Node appendChild ( Node newChild ) throws DOMException { return insertBefore ( newChild , null ) ; } public Node cloneNode ( boolean deep ) { if ( needsSyncData ( ) ) { synchronizeData ( ) ; } NodeImpl newnode ; try { newnode = ( NodeImpl ) clone ( ) ; } catch ( CloneNotSupportedException e ) { return null ; } newnode . ownerNode = ownerDocument ( ) ; newnode . isOwned ( false ) ; newnode . isReadOnly ( false ) ; return newnode ; } public Document getOwnerDocument ( ) { if ( isOwned ( ) ) { return ownerNode . ownerDocument ( ) ; } else { return ( Document ) ownerNode ; } } DocumentImpl ownerDocument ( ) { if ( isOwned ( ) ) { return ownerNode . ownerDocument ( ) ; } else { return ( DocumentImpl ) ownerNode ; } } void setOwnerDocument ( DocumentImpl doc ) { if ( needsSyncData ( ) ) { synchronizeData ( ) ; } if ( ! isOwned ( ) ) { ownerNode = doc ; } } public Node getParentNode ( ) { return null ; } NodeImpl parentNode ( ) { return null ; } public Node getNextSibling ( ) { return null ; } public Node getPreviousSibling ( ) { return null ; } ChildNode previousSibling ( ) { return null ; } public NamedNodeMap getAttributes ( ) { return null ; } public boolean hasAttributes ( ) { return false ; } public boolean hasChildNodes ( ) { return false ; } public NodeList getChildNodes ( ) { return this ; } public Node getFirstChild ( ) { return null ; } public Node getLastChild ( ) { return null ; } public Node insertBefore ( Node newChild , Node refChild ) throws DOMException { throw new DOMException ( DOMException . HIERARCHY_REQUEST_ERR , "DOM006 Hierarchy request error" ) ; } public Node removeChild ( Node oldChild ) throws DOMException { throw new DOMException ( DOMException . NOT_FOUND_ERR , "DOM008 Not found" ) ; } public Node replaceChild ( Node newChild , Node oldChild ) throws DOMException { throw new DOMException ( DOMException . HIERARCHY_REQUEST_ERR , "DOM006 Hierarchy request error" ) ; } public int getLength ( ) { return 0 ; } public Node item ( int index ) { return null ; } public void normalize ( ) { } public boolean isSupported ( String feature , String version ) { return ownerDocument ( ) . getImplementation ( ) . hasFeature ( feature , version ) ; } public String getNamespaceURI ( ) { return null ; } public String getPrefix ( ) { return null ; } public void setPrefix ( String prefix ) throws DOMException { throw new DOMException ( DOMException . NAMESPACE_ERR , "DOM003 Namespace error" ) ; } public String getLocalName ( ) { return null ; } protected final static boolean MUTATIONEVENTS = true ; protected final static int MUTATION_NONE = 0x00 ; protected final static int MUTATION_LOCAL = 0x01 ; protected final static int MUTATION_AGGREGATE = 0x02 ; protected final static int MUTATION_ALL = 0xffff ; class LEntry { String type ; EventListener listener ; boolean useCapture ; LEntry ( String type , EventListener listener , boolean useCapture ) { this . type = type ; this . listener = listener ; this . useCapture = useCapture ; } } ; public void addEventListener ( String type , EventListener listener , boolean useCapture ) { if ( type == null || type . equals ( "" ) || listener == null ) return ; removeEventListener ( type , listener , useCapture ) ; Vector nodeListeners = ownerDocument ( ) . getEventListeners ( this ) ; if ( nodeListeners == null ) { nodeListeners = new Vector ( ) ; ownerDocument ( ) . setEventListeners ( this , nodeListeners ) ; } nodeListeners . addElement ( new LEntry ( type , listener , useCapture ) ) ; LCount lc = LCount . lookup ( type ) ; if ( useCapture ) ++ lc . captures ; else ++ lc . bubbles ; } public void removeEventListener ( String type , EventListener listener , boolean useCapture ) { Vector nodeListeners = ownerDocument ( ) . getEventListeners ( this ) ; if ( nodeListeners == null || type == null || type . equals ( "" ) || listener == null ) return ; for ( int i = nodeListeners . size ( ) - 1 ; i >= 0 ; -- i ) { LEntry le = ( LEntry ) ( nodeListeners . elementAt ( i ) ) ; if ( le . useCapture == useCapture && le . listener == listener && le . type . equals ( type ) ) { nodeListeners . removeElementAt ( i ) ; if ( nodeListeners . size ( ) == 0 ) ownerDocument ( ) . setEventListeners ( this , null ) ; LCount lc = LCount . lookup ( type ) ; if ( useCapture ) -- lc . captures ; else -- lc . bubbles ; break ; } } } public boolean dispatchEvent ( Event event ) { if ( event == null ) return false ; EventImpl evt = ( EventImpl ) event ; if ( ! evt . initialized || evt . type == null || evt . type . equals ( "" ) ) throw new EventException ( EventException . UNSPECIFIED_EVENT_TYPE_ERR , "DOM010 Unspecified event type" ) ; LCount lc = LCount . lookup ( evt . getType ( ) ) ; if ( lc . captures + lc . bubbles + lc . defaults == 0 ) return evt . preventDefault ; evt . target = this ; evt . stopPropagation = false ; evt . preventDefault = false ; Vector pv = new Vector ( 10 , 10 ) ; Node p = this , n = p . getParentNode ( ) ; while ( n != null ) { pv . addElement ( n ) ; p = n ; n = n . getParentNode ( ) ; } if ( lc . captures > 0 ) { evt . eventPhase = Event . CAPTURING_PHASE ; for ( int j = pv . size ( ) - 1 ; j >= 0 ; -- j ) { if ( evt . stopPropagation ) break ; NodeImpl nn = ( NodeImpl ) pv . elementAt ( j ) ; evt . currentTarget = nn ; Vector nodeListeners = ownerDocument ( ) . getEventListeners ( nn ) ; if ( nodeListeners != null ) { Vector nl = ( Vector ) ( nodeListeners . clone ( ) ) ; for ( int i = nl . size ( ) - 1 ; i >= 0 ; -- i ) { LEntry le = ( LEntry ) ( nl . elementAt ( i ) ) ; if ( le . useCapture && le . type . equals ( evt . type ) ) try { le . listener . handleEvent ( evt ) ; } catch ( Exception e ) { } } } } } if ( lc . bubbles > 0 ) { evt . eventPhase = Event . AT_TARGET ; evt . currentTarget = this ; Vector nodeListeners = ownerDocument ( ) . getEventListeners ( this ) ; if ( ! evt . stopPropagation && nodeListeners != null ) { Vector nl = ( Vector ) nodeListeners . clone ( ) ; for ( int i = nl . size ( ) - 1 ; i >= 0 ; -- i ) { LEntry le = ( LEntry ) nl . elementAt ( i ) ; if ( le != null && ! le . useCapture && le . type . equals ( evt . type ) ) try { le . listener . handleEvent ( evt ) ; } catch ( Exception e ) { } } } if ( evt . bubbles ) { evt . eventPhase = Event . BUBBLING_PHASE ; for ( int j = 0 ; j < pv . size ( ) ; ++ j ) { if ( evt . stopPropagation ) break ; NodeImpl nn = ( NodeImpl ) pv . elementAt ( j ) ; evt . currentTarget = nn ; nodeListeners = ownerDocument ( ) . getEventListeners ( nn ) ; if ( nodeListeners != null ) { Vector nl = ( Vector ) ( nodeListeners . clone ( ) ) ; for ( int i = nl . size ( ) - 1 ; i >= 0 ; -- i ) { LEntry le = ( LEntry ) ( nl . elementAt ( i ) ) ; if ( ! le . useCapture && le . type . equals ( evt . type ) ) try { le . listener . handleEvent ( evt ) ; } catch ( Exception e ) { } } } } } } if ( lc . defaults > 0 && ( ! evt . cancelable || ! evt . preventDefault ) ) { } return evt . preventDefault ; } void dispatchEventToSubtree ( Node n , Event e ) { if ( MUTATIONEVENTS && ownerDocument ( ) . mutationEvents ) { Vector nodeListeners = ownerDocument ( ) . getEventListeners ( this ) ; if ( nodeListeners == null || n == null ) return ; ( ( NodeImpl ) n ) . dispatchEvent ( e ) ; if ( n . getNodeType ( ) == Node . ELEMENT_NODE ) { NamedNodeMap a = n . getAttributes ( ) ; for ( int i = a . getLength ( ) - 1 ; i >= 0 ; -- i ) dispatchEventToSubtree ( a . item ( i ) , e ) ; } dispatchEventToSubtree ( n . getFirstChild ( ) , e ) ; dispatchEventToSubtree ( n . getNextSibling ( ) , e ) ; } } class EnclosingAttr { AttrImpl node ; String oldvalue ; } EnclosingAttr getEnclosingAttr ( ) { if ( MUTATIONEVENTS && ownerDocument ( ) . mutationEvents ) { NodeImpl eventAncestor = this ; while ( true ) { if ( eventAncestor == null ) return null ; int type = eventAncestor . getNodeType ( ) ; if ( type == Node . ATTRIBUTE_NODE ) { EnclosingAttr retval = new EnclosingAttr ( ) ; retval . node = ( AttrImpl ) eventAncestor ; retval . oldvalue = retval . node . getNodeValue ( ) ; return retval ; } else if ( type == Node . ENTITY_REFERENCE_NODE ) eventAncestor = eventAncestor . parentNode ( ) ; else return null ; } } return null ; } void dispatchAggregateEvents ( EnclosingAttr ea ) { if ( ea != null ) dispatchAggregateEvents ( ea . node , ea . oldvalue , MutationEvent . MODIFICATION ) ; else dispatchAggregateEvents ( null , null , ( short ) 0 ) ; } void dispatchAggregateEvents ( AttrImpl enclosingAttr , String oldvalue , short change ) { if ( MUTATIONEVENTS && ownerDocument ( ) . mutationEvents ) { NodeImpl owner = null ; if ( enclosingAttr != null ) { LCount lc = LCount . lookup ( MutationEventImpl . DOM_ATTR_MODIFIED ) ; if ( lc . captures + lc . bubbles + lc . defaults > 0 ) { owner = ( ( NodeImpl ) ( enclosingAttr . getOwnerElement ( ) ) ) ; if ( owner != null ) { MutationEventImpl me = new MutationEventImpl ( ) ; me . initMutationEvent ( MutationEventImpl . DOM_ATTR_MODIFIED , true , false , null , oldvalue , enclosingAttr . getNodeValue ( ) , enclosingAttr . getNodeName ( ) , ( short ) 0 ) ; me . attrChange = change ; owner . dispatchEvent ( me ) ; } } } LCount lc = LCount . lookup ( MutationEventImpl . DOM_SUBTREE_MODIFIED ) ; if ( lc . captures + lc . bubbles + lc . defaults > 0 ) { MutationEvent me = new MutationEventImpl ( ) ; me . initMutationEvent ( MutationEventImpl . DOM_SUBTREE_MODIFIED , true , false , null , null , null , null , ( short ) 0 ) ; if ( enclosingAttr != null ) { enclosingAttr . dispatchEvent ( me ) ; if ( owner != null ) owner . dispatchEvent ( me ) ; } else dispatchEvent ( me ) ; } } } public void setReadOnly ( boolean readOnly , boolean deep ) { if ( needsSyncData ( ) ) { synchronizeData ( ) ; } isReadOnly ( readOnly ) ; } public boolean getReadOnly ( ) { if ( needsSyncData ( ) ) { synchronizeData ( ) ; } return isReadOnly ( ) ; } public void setUserData ( Object data ) { ownerDocument ( ) . setUserData ( this , data ) ; } public Object getUserData ( ) { return ownerDocument ( ) . getUserData ( this ) ; } protected void changed ( ) { ownerDocument ( ) . changed ( ) ; } protected int changes ( ) { return ownerDocument ( ) . changes ( ) ; } protected void synchronizeData ( ) { needsSyncData ( false ) ; } final boolean isReadOnly ( ) { return ( flags & READONLY ) != 0 ; } final void isReadOnly ( boolean value ) { flags = ( short ) ( value ? flags | READONLY : flags & ~ READONLY ) ; } final boolean needsSyncData ( ) { return ( flags & SYNCDATA ) != 0 ; } final void needsSyncData ( boolean value ) { flags = ( short ) ( value ? flags | SYNCDATA : flags & ~ SYNCDATA ) ; } final boolean needsSyncChildren ( ) { return ( flags & SYNCCHILDREN ) != 0 ; } final void needsSyncChildren ( boolean value ) { flags = ( short ) ( value ? flags | SYNCCHILDREN : flags & ~ SYNCCHILDREN ) ; } final boolean isOwned ( ) { return ( flags & OWNED ) != 0 ; } final void isOwned ( boolean value ) { flags = ( short ) ( value ? flags | OWNED : flags & ~ OWNED ) ; } final boolean isFirstChild ( ) { return ( flags & FIRSTCHILD ) != 0 ; } final void isFirstChild ( boolean value ) { flags = ( short ) ( value ? flags | FIRSTCHILD : flags & ~ FIRSTCHILD ) ; } final boolean isSpecified ( ) { return ( flags & SPECIFIED ) != 0 ; } final void isSpecified ( boolean value ) { flags = ( short ) ( value ? flags | SPECIFIED : flags & ~ SPECIFIED ) ; } final boolean internalIsIgnorableWhitespace ( ) { return ( flags & IGNORABLEWS ) != 0 ; } final void isIgnorableWhitespace ( boolean value ) { flags = ( short ) ( value ? flags | IGNORABLEWS : flags & ~ IGNORABLEWS ) ; } final boolean setValueCalled ( ) { return ( flags & SETVALUE ) != 0 ; } final void setValueCalled ( boolean value ) { flags = ( short ) ( value ? flags | SETVALUE : flags & ~ SETVALUE ) ; } final boolean hasStringValue ( ) { return ( flags & HASSTRING ) != 0 ; } final void hasStringValue ( boolean value ) { flags = ( short ) ( value ? flags | HASSTRING : flags & ~ HASSTRING ) ; } final boolean isNormalized ( ) { return ( flags & UNNORMALIZED ) == 0 ; } final void isNormalized ( boolean value ) { if ( ! value && isNormalized ( ) && ownerNode != null ) { ownerNode . isNormalized ( false ) ; } flags = ( short ) ( value ? flags & ~ UNNORMALIZED : flags | UNNORMALIZED ) ; } public String toString ( ) { return "[" + getNodeName ( ) + ": " + getNodeValue ( ) + "]" ; } private void writeObject ( ObjectOutputStream out ) throws IOException { if ( needsSyncData ( ) ) { synchronizeData ( ) ; } out . defaultWriteObject ( ) ; } } 	0	['69', '1', '3', '23', '112', '1936', '20', '8', '36', '0.971362229', '1158', '0.894736842', '1', '0', '0.118171683', '0', '0', '15.50724638', '31', '2.3043', '0']
package org . apache . xerces . dom ; import org . w3c . dom . * ; public class CDATASectionImpl extends TextImpl implements CDATASection { static final long serialVersionUID = 2372071297878177780L ; public CDATASectionImpl ( DocumentImpl ownerDoc , String data ) { super ( ownerDoc , data ) ; } public short getNodeType ( ) { return Node . CDATA_SECTION_NODE ; } public String getNodeName ( ) { return "#cdata-section" ; } } 	0	['3', '4', '1', '3', '4', '3', '2', '2', '3', '1.5', '13', '0', '0', '0.967741935', '0.555555556', '1', '4', '3', '1', '0.6667', '0']
package org . apache . html . dom ; import org . w3c . dom . * ; import org . w3c . dom . html . * ; public class HTMLHeadElementImpl extends HTMLElementImpl implements HTMLHeadElement { public String getProfile ( ) { return getAttribute ( "profile" ) ; } public void setProfile ( String profile ) { setAttribute ( "profile" , profile ) ; } public HTMLHeadElementImpl ( HTMLDocumentImpl owner , String name ) { super ( owner , name ) ; } } 	0	['3', '4', '0', '2', '6', '3', '1', '2', '3', '2', '17', '0', '0', '0.979166667', '0.666666667', '0', '0', '4.666666667', '1', '0.6667', '0']
package org . apache . xerces . validators . schema . identity ; public class XPathException extends Exception { public XPathException ( ) { super ( ) ; } public XPathException ( String message ) { super ( message ) ; } } 	0	['2', '3', '0', '6', '4', '1', '6', '0', '2', '2', '9', '0', '0', '1', '0.75', '0', '0', '3.5', '0', '0', '0']
package org . w3c . dom ; public interface EntityReference extends Node { } 	0	['0', '1', '0', '0', '0', '0', '0', '0', '0', '2', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0']
package org . apache . wml ; public interface WMLTableElement extends WMLElement { public void setTitle ( String newValue ) ; public String getTitle ( ) ; public void setAlign ( String newValue ) ; public String getAlign ( ) ; public void setColumns ( int newValue ) ; public int getColumns ( ) ; public void setXmlLang ( String newValue ) ; public String getXmlLang ( ) ; } 	0	['8', '1', '0', '2', '8', '28', '1', '1', '8', '2', '8', '0', '0', '0', '0.5', '0', '0', '0', '1', '1', '0']
package org . apache . wml . dom ; import org . apache . wml . * ; public class WMLAccessElementImpl extends WMLElementImpl implements WMLAccessElement { public WMLAccessElementImpl ( WMLDocumentImpl owner , String tagName ) { super ( owner , tagName ) ; } public void setClassName ( String newValue ) { setAttribute ( "class" , newValue ) ; } public String getClassName ( ) { return getAttribute ( "class" ) ; } public void setDomain ( String newValue ) { setAttribute ( "domain" , newValue ) ; } public String getDomain ( ) { return getAttribute ( "domain" ) ; } public void setId ( String newValue ) { setAttribute ( "id" , newValue ) ; } public String getId ( ) { return getAttribute ( "id" ) ; } public void setPath ( String newValue ) { setAttribute ( "path" , newValue ) ; } public String getPath ( ) { return getAttribute ( "path" ) ; } } 	0	['9', '4', '0', '3', '12', '36', '0', '3', '9', '2', '50', '0', '0', '0.911111111', '0.555555556', '1', '4', '4.555555556', '1', '0.8889', '0']
package org . apache . html . dom ; import org . w3c . dom . * ; import org . w3c . dom . html . * ; public class HTMLBRElementImpl extends HTMLElementImpl implements HTMLBRElement { public String getClear ( ) { return capitalize ( getAttribute ( "clear" ) ) ; } public void setClear ( String clear ) { setAttribute ( "clear" , clear ) ; } public HTMLBRElementImpl ( HTMLDocumentImpl owner , String name ) { super ( owner , name ) ; } } 	0	['3', '4', '0', '2', '7', '3', '0', '2', '3', '2', '19', '0', '0', '0.979166667', '0.666666667', '0', '0', '5.333333333', '1', '0.6667', '0']
package org . w3c . dom . html ; import org . w3c . dom . DOMException ; public interface HTMLSelectElement extends HTMLElement { public String getType ( ) ; public int getSelectedIndex ( ) ; public void setSelectedIndex ( int selectedIndex ) ; public String getValue ( ) ; public void setValue ( String value ) ; public int getLength ( ) ; public HTMLFormElement getForm ( ) ; public HTMLCollection getOptions ( ) ; public boolean getDisabled ( ) ; public void setDisabled ( boolean disabled ) ; public boolean getMultiple ( ) ; public void setMultiple ( boolean multiple ) ; public String getName ( ) ; public void setName ( String name ) ; public int getSize ( ) ; public void setSize ( int size ) ; public int getTabIndex ( ) ; public void setTabIndex ( int tabIndex ) ; public void add ( HTMLElement element , HTMLElement before ) throws DOMException ; public void remove ( int index ) ; public void blur ( ) ; public void focus ( ) ; } 	0	['22', '1', '0', '0', '22', '231', '0', '0', '22', '2', '22', '0', '0', '0', '0.281818182', '0', '0', '0', '1', '1', '0']
package org . apache . wml . dom ; import org . apache . wml . * ; public class WMLIElementImpl extends WMLElementImpl implements WMLIElement { public WMLIElementImpl ( WMLDocumentImpl owner , String tagName ) { super ( owner , tagName ) ; } public void setClassName ( String newValue ) { setAttribute ( "class" , newValue ) ; } public String getClassName ( ) { return getAttribute ( "class" ) ; } public void setXmlLang ( String newValue ) { setAttribute ( "xml:lang" , newValue ) ; } public String getXmlLang ( ) { return getAttribute ( "xml:lang" ) ; } public void setId ( String newValue ) { setAttribute ( "id" , newValue ) ; } public String getId ( ) { return getAttribute ( "id" ) ; } } 	0	['7', '4', '0', '3', '10', '21', '0', '3', '7', '2', '39', '0', '0', '0.931818182', '0.571428571', '1', '6', '4.571428571', '1', '0.8571', '0']
package org . apache . wml . dom ; import org . apache . wml . * ; public class WMLPElementImpl extends WMLElementImpl implements WMLPElement { public WMLPElementImpl ( WMLDocumentImpl owner , String tagName ) { super ( owner , tagName ) ; } public void setClassName ( String newValue ) { setAttribute ( "class" , newValue ) ; } public String getClassName ( ) { return getAttribute ( "class" ) ; } public void setMode ( String newValue ) { setAttribute ( "mode" , newValue ) ; } public String getMode ( ) { return getAttribute ( "mode" ) ; } public void setXmlLang ( String newValue ) { setAttribute ( "xml:lang" , newValue ) ; } public String getXmlLang ( ) { return getAttribute ( "xml:lang" ) ; } public void setAlign ( String newValue ) { setAttribute ( "align" , newValue ) ; } public String getAlign ( ) { return getAttribute ( "align" ) ; } public void setId ( String newValue ) { setAttribute ( "id" , newValue ) ; } public String getId ( ) { return getAttribute ( "id" ) ; } } 	0	['11', '4', '0', '3', '14', '55', '0', '3', '11', '2', '61', '0', '0', '0.891304348', '0.545454545', '1', '6', '4.545454545', '1', '0.9091', '0']
package org . apache . xml . serialize ; import java . io . OutputStream ; import java . io . Writer ; import java . io . UnsupportedEncodingException ; public final class XHTMLSerializer extends HTMLSerializer { public XHTMLSerializer ( ) { super ( true , new OutputFormat ( Method . XHTML , null , false ) ) ; } public XHTMLSerializer ( OutputFormat format ) { super ( true , format != null ? format : new OutputFormat ( Method . XHTML , null , false ) ) ; } public XHTMLSerializer ( Writer writer , OutputFormat format ) { super ( true , format != null ? format : new OutputFormat ( Method . XHTML , null , false ) ) ; setOutputCharStream ( writer ) ; } public XHTMLSerializer ( OutputStream output , OutputFormat format ) { super ( true , format != null ? format : new OutputFormat ( Method . XHTML , null , false ) ) ; setOutputByteStream ( output ) ; } public void setOutputFormat ( OutputFormat format ) { super . setOutputFormat ( format != null ? format : new OutputFormat ( Method . XHTML , null , false ) ) ; } } 	0	['5', '3', '0', '3', '10', '10', '1', '2', '5', '2', '76', '0', '0', '0.985507246', '0.55', '1', '1', '14.2', '2', '0.4', '0']
package org . apache . xerces . utils ; public final class Hash2intTable { private static final int INITIAL_BUCKET_SIZE = 4 ; private static final int HASHTABLE_SIZE = 256 ; private int [ ] [ ] fHashTable = new int [ HASHTABLE_SIZE ] [ ] ; public void put ( int key1 , int key2 , int key3 , int value ) { int hash = ( key1 + key2 + key3 + 2 ) % HASHTABLE_SIZE ; int [ ] bucket = fHashTable [ hash ] ; if ( bucket == null ) { bucket = new int [ 1 + 4 * INITIAL_BUCKET_SIZE ] ; bucket [ 0 ] = 1 ; bucket [ 1 ] = key1 ; bucket [ 2 ] = key2 ; bucket [ 3 ] = key3 ; bucket [ 4 ] = value ; fHashTable [ hash ] = bucket ; } else { int count = bucket [ 0 ] ; int offset = 1 + 4 * count ; if ( offset == bucket . length ) { int newSize = count + INITIAL_BUCKET_SIZE ; int [ ] newBucket = new int [ 1 + 4 * newSize ] ; System . arraycopy ( bucket , 0 , newBucket , 0 , offset ) ; bucket = newBucket ; fHashTable [ hash ] = bucket ; } boolean found = false ; int j = 1 ; for ( int i = 0 ; i < count ; i ++ ) { if ( bucket [ j ] == key1 && bucket [ j + 1 ] == key2 && bucket [ j + 2 ] == key3 ) { bucket [ j + 3 ] = value ; found = true ; break ; } j += 4 ; } if ( ! found ) { bucket [ offset ++ ] = key1 ; bucket [ offset ++ ] = key2 ; bucket [ offset ++ ] = key3 ; bucket [ offset ] = value ; bucket [ 0 ] = ++ count ; } } } public int get ( int key1 , int key2 , int key3 ) { int hash = ( key1 + key2 + key3 + 2 ) % HASHTABLE_SIZE ; int [ ] bucket = fHashTable [ hash ] ; if ( bucket == null ) { return - 1 ; } int count = bucket [ 0 ] ; int j = 1 ; for ( int i = 0 ; i < count ; i ++ ) { if ( bucket [ j ] == key1 && bucket [ j + 1 ] == key2 && bucket [ j + 2 ] == key3 ) { return bucket [ j + 3 ] ; } j += 4 ; } return - 1 ; } } 	0	['3', '1', '0', '1', '5', '0', '1', '0', '3', '1', '224', '1', '0', '0', '0.833333333', '0', '0', '72.66666667', '8', '4.6667', '0']
package org . w3c . dom . html ; public interface HTMLIFrameElement extends HTMLElement { public String getAlign ( ) ; public void setAlign ( String align ) ; public String getFrameBorder ( ) ; public void setFrameBorder ( String frameBorder ) ; public String getHeight ( ) ; public void setHeight ( String height ) ; public String getLongDesc ( ) ; public void setLongDesc ( String longDesc ) ; public String getMarginHeight ( ) ; public void setMarginHeight ( String marginHeight ) ; public String getMarginWidth ( ) ; public void setMarginWidth ( String marginWidth ) ; public String getName ( ) ; public void setName ( String name ) ; public String getScrolling ( ) ; public void setScrolling ( String scrolling ) ; public String getSrc ( ) ; public void setSrc ( String src ) ; public String getWidth ( ) ; public void setWidth ( String width ) ; } 	0	['20', '1', '0', '0', '20', '190', '0', '0', '20', '2', '20', '0', '0', '0', '0.75', '0', '0', '0', '1', '1', '0']
package org . apache . xml . serialize ; import java . io . OutputStream ; import java . io . OutputStreamWriter ; import java . io . UnsupportedEncodingException ; import java . io . Writer ; public class EncodingInfo { String name ; String javaName ; int lastPrintable ; public EncodingInfo ( String mimeName , String javaName , int lastPrintable ) { this . name = mimeName ; this . javaName = javaName == null ? mimeName : javaName ; this . lastPrintable = lastPrintable ; } public EncodingInfo ( String mimeName , int lastPrintable ) { this ( mimeName , mimeName , lastPrintable ) ; } public String getName ( ) { return this . name ; } public Writer getWriter ( OutputStream output ) throws UnsupportedEncodingException { if ( this . javaName == null ) return new OutputStreamWriter ( output ) ; return new OutputStreamWriter ( output , this . javaName ) ; } public boolean isPrintable ( int ch ) { return ch <= this . lastPrintable ; } } 	0	['5', '1', '1', '4', '8', '4', '4', '0', '5', '0.5', '56', '0', '0', '0', '0.55', '0', '0', '9.6', '2', '0.8', '0']
package org . xml . sax . helpers ; import java . io . IOException ; import java . util . Locale ; import org . xml . sax . Parser ; import org . xml . sax . Locator ; import org . xml . sax . InputSource ; import org . xml . sax . AttributeList ; import org . xml . sax . EntityResolver ; import org . xml . sax . DTDHandler ; import org . xml . sax . DocumentHandler ; import org . xml . sax . ErrorHandler ; import org . xml . sax . SAXException ; import org . xml . sax . XMLReader ; import org . xml . sax . Attributes ; import org . xml . sax . ContentHandler ; import org . xml . sax . SAXNotSupportedException ; public class XMLReaderAdapter implements Parser , ContentHandler { public XMLReaderAdapter ( ) throws SAXException { setup ( XMLReaderFactory . createXMLReader ( ) ) ; } public XMLReaderAdapter ( XMLReader xmlReader ) { setup ( xmlReader ) ; } private void setup ( XMLReader xmlReader ) { if ( xmlReader == null ) { throw new NullPointerException ( "XMLReader must not be null" ) ; } this . xmlReader = xmlReader ; qAtts = new AttributesAdapter ( ) ; } public void setLocale ( Locale locale ) throws SAXException { throw new SAXNotSupportedException ( "setLocale not supported" ) ; } public void setEntityResolver ( EntityResolver resolver ) { xmlReader . setEntityResolver ( resolver ) ; } public void setDTDHandler ( DTDHandler handler ) { xmlReader . setDTDHandler ( handler ) ; } public void setDocumentHandler ( DocumentHandler handler ) { documentHandler = handler ; } public void setErrorHandler ( ErrorHandler handler ) { xmlReader . setErrorHandler ( handler ) ; } public void parse ( String systemId ) throws IOException , SAXException { parse ( new InputSource ( systemId ) ) ; } public void parse ( InputSource input ) throws IOException , SAXException { setupXMLReader ( ) ; xmlReader . parse ( input ) ; } private void setupXMLReader ( ) throws SAXException { xmlReader . setFeature ( "http://xml.org/sax/features/namespace-prefixes" , true ) ; try { xmlReader . setFeature ( "http://xml.org/sax/features/namespaces" , false ) ; } catch ( SAXException e ) { } xmlReader . setContentHandler ( this ) ; } public void setDocumentLocator ( Locator locator ) { documentHandler . setDocumentLocator ( locator ) ; } public void startDocument ( ) throws SAXException { documentHandler . startDocument ( ) ; } public void endDocument ( ) throws SAXException { documentHandler . endDocument ( ) ; } public void startPrefixMapping ( String prefix , String uri ) { } public void endPrefixMapping ( String prefix ) { } public void startElement ( String uri , String localName , String qName , Attributes atts ) throws SAXException { qAtts . setAttributes ( atts ) ; documentHandler . startElement ( qName , qAtts ) ; } public void endElement ( String uri , String localName , String qName ) throws SAXException { documentHandler . endElement ( qName ) ; } public void characters ( char ch [ ] , int start , int length ) throws SAXException { documentHandler . characters ( ch , start , length ) ; } public void ignorableWhitespace ( char ch [ ] , int start , int length ) throws SAXException { documentHandler . ignorableWhitespace ( ch , start , length ) ; } public void processingInstruction ( String target , String data ) throws SAXException { documentHandler . processingInstruction ( target , data ) ; } public void skippedEntity ( String name ) throws SAXException { } XMLReader xmlReader ; DocumentHandler documentHandler ; AttributesAdapter qAtts ; final class AttributesAdapter implements AttributeList { AttributesAdapter ( ) { } void setAttributes ( Attributes attributes ) { this . attributes = attributes ; } public int getLength ( ) { return attributes . getLength ( ) ; } public String getName ( int i ) { return attributes . getQName ( i ) ; } public String getType ( int i ) { return attributes . getType ( i ) ; } public String getValue ( int i ) { return attributes . getValue ( i ) ; } public String getType ( String qName ) { return attributes . getType ( qName ) ; } public String getValue ( String qName ) { return attributes . getValue ( qName ) ; } private Attributes attributes ; } } 	0	['22', '1', '0', '0', '43', '127', '0', '0', '20', '0.698412698', '161', '0', '3', '0', '0.15034965', '0', '0', '6.181818182', '2', '0.9545', '0']
package org . apache . xml . serialize ; import java . io . Writer ; import java . io . StringWriter ; import java . io . IOException ; class IndentPrinter extends Printer { private StringBuffer _line ; private StringBuffer _text ; private int _spaces ; private int _thisIndent ; private int _nextIndent ; IndentPrinter ( Writer writer , OutputFormat format ) { super ( writer , format ) ; _line = new StringBuffer ( 80 ) ; _text = new StringBuffer ( 20 ) ; _spaces = 0 ; _thisIndent = _nextIndent = 0 ; } public void enterDTD ( ) { if ( _dtdWriter == null ) { _line . append ( _text ) ; _text = new StringBuffer ( 20 ) ; flushLine ( false ) ; _dtdWriter = new StringWriter ( ) ; _docWriter = _writer ; _writer = _dtdWriter ; } } public String leaveDTD ( ) { if ( _writer == _dtdWriter ) { _line . append ( _text ) ; _text = new StringBuffer ( 20 ) ; flushLine ( false ) ; _writer = _docWriter ; return _dtdWriter . toString ( ) ; } else return null ; } public void printText ( String text ) { _text . append ( text ) ; } public void printText ( StringBuffer text ) { _text . append ( text ) ; } public void printText ( char ch ) { _text . append ( ch ) ; } public void printText ( char [ ] chars , int start , int length ) { _text . append ( chars , start , length ) ; } public void printSpace ( ) { if ( _text . length ( ) > 0 ) { if ( _format . getLineWidth ( ) > 0 && _thisIndent + _line . length ( ) + _spaces + _text . length ( ) > _format . getLineWidth ( ) ) { flushLine ( false ) ; try { _writer . write ( _format . getLineSeparator ( ) ) ; } catch ( IOException except ) { if ( _exception == null ) _exception = except ; } } while ( _spaces > 0 ) { _line . append ( ' ' ) ; -- _spaces ; } _line . append ( _text ) ; _text = new StringBuffer ( 20 ) ; } ++ _spaces ; } public void breakLine ( ) { breakLine ( false ) ; } public void breakLine ( boolean preserveSpace ) { if ( _text . length ( ) > 0 ) { while ( _spaces > 0 ) { _line . append ( ' ' ) ; -- _spaces ; } _line . append ( _text ) ; _text = new StringBuffer ( 20 ) ; } flushLine ( preserveSpace ) ; try { _writer . write ( _format . getLineSeparator ( ) ) ; } catch ( IOException except ) { if ( _exception == null ) _exception = except ; } } public void flushLine ( boolean preserveSpace ) { int indent ; if ( _line . length ( ) > 0 ) { try { if ( _format . getIndenting ( ) && ! preserveSpace ) { indent = _thisIndent ; if ( ( 2 * indent ) > _format . getLineWidth ( ) && _format . getLineWidth ( ) > 0 ) indent = _format . getLineWidth ( ) / 2 ; while ( indent > 0 ) { _writer . write ( ' ' ) ; -- indent ; } } _thisIndent = _nextIndent ; _spaces = 0 ; _writer . write ( _line . toString ( ) ) ; _line = new StringBuffer ( 40 ) ; } catch ( IOException except ) { if ( _exception == null ) _exception = except ; } } } public void flush ( ) { if ( _line . length ( ) > 0 || _text . length ( ) > 0 ) breakLine ( ) ; try { _writer . flush ( ) ; } catch ( IOException except ) { if ( _exception == null ) _exception = except ; } } public void indent ( ) { _nextIndent += _format . getIndent ( ) ; } public void unindent ( ) { _nextIndent -= _format . getIndent ( ) ; if ( _nextIndent < 0 ) _nextIndent = 0 ; if ( ( _line . length ( ) + _spaces + _text . length ( ) ) == 0 ) _thisIndent = _nextIndent ; } public int getNextIndent ( ) { return _nextIndent ; } public void setNextIndent ( int indent ) { _nextIndent = indent ; } public void setThisIndent ( int indent ) { _thisIndent = indent ; } } 	0	['17', '2', '0', '3', '34', '0', '1', '2', '16', '0.4625', '403', '1', '0', '0.515151515', '0.183006536', '1', '15', '22.41176471', '8', '2.2353', '0']
package org . apache . xml . serialize ; import java . io . IOException ; import org . w3c . dom . Element ; import org . w3c . dom . Document ; import org . w3c . dom . DocumentFragment ; public interface DOMSerializer { public void serialize ( Element elem ) throws IOException ; public void serialize ( Document doc ) throws IOException ; public void serialize ( DocumentFragment frag ) throws IOException ; } 	0	['3', '1', '0', '2', '3', '3', '2', '0', '3', '2', '3', '0', '0', '0', '0.5', '0', '0', '0', '1', '1', '0']
package org . apache . wml . dom ; import org . apache . wml . * ; public class WMLPostfieldElementImpl extends WMLElementImpl implements WMLPostfieldElement { public WMLPostfieldElementImpl ( WMLDocumentImpl owner , String tagName ) { super ( owner , tagName ) ; } public void setValue ( String newValue ) { setAttribute ( "value" , newValue ) ; } public String getValue ( ) { return getAttribute ( "value" ) ; } public void setClassName ( String newValue ) { setAttribute ( "class" , newValue ) ; } public String getClassName ( ) { return getAttribute ( "class" ) ; } public void setId ( String newValue ) { setAttribute ( "id" , newValue ) ; } public String getId ( ) { return getAttribute ( "id" ) ; } public void setName ( String newValue ) { setAttribute ( "name" , newValue ) ; } public String getName ( ) { return getAttribute ( "name" ) ; } } 	0	['9', '4', '0', '3', '12', '36', '0', '3', '9', '2', '50', '0', '0', '0.911111111', '0.555555556', '1', '5', '4.555555556', '1', '0.8889', '0']
package org . apache . html . dom ; import org . w3c . dom . * ; import org . w3c . dom . html . * ; public class HTMLQuoteElementImpl extends HTMLElementImpl implements HTMLQuoteElement { public String getCite ( ) { return getAttribute ( "cite" ) ; } public void setCite ( String cite ) { setAttribute ( "cite" , cite ) ; } public HTMLQuoteElementImpl ( HTMLDocumentImpl owner , String name ) { super ( owner , name ) ; } } 	0	['3', '4', '0', '2', '6', '3', '0', '2', '3', '2', '17', '0', '0', '0.979166667', '0.666666667', '0', '0', '4.666666667', '1', '0.6667', '0']
package org . apache . xerces . validators . datatype ; import java . util . Hashtable ; import java . util . Vector ; import java . util . Enumeration ; import java . util . Locale ; import java . util . Calendar ; import java . util . GregorianCalendar ; import java . text . ParseException ; import org . apache . xerces . utils . regex . RegularExpression ; import org . apache . xerces . validators . schema . SchemaSymbols ; public class RecurringDurationDatatypeValidator extends AbstractDatatypeValidator { private static final boolean fDbug = false ; private Locale fLocale = null ; DatatypeValidator fBaseValidator = null ; String fPattern = null ; long fMaxInclusive = Long . MAX_VALUE ; long fMaxExclusive = Long . MAX_VALUE - 1 ; long fMinInclusive = 1L ; long fMinExclusive = 0L ; long fDuration = 0L ; long fPeriod = 0L ; long [ ] fEnumrecurringduration = null ; boolean isMaxExclusiveDefined = false ; boolean isMaxInclusiveDefined = false ; boolean isMinExclusiveDefined = false ; boolean isMinInclusiveDefined = false ; boolean isBaseTypeTimePeriod = false ; int fFacetsDefined = 0 ; Hashtable fFacets = null ; private DatatypeMessageProvider fMessageProvider = new DatatypeMessageProvider ( ) ; public RecurringDurationDatatypeValidator ( ) throws InvalidDatatypeFacetException { this ( null , null , false ) ; } public RecurringDurationDatatypeValidator ( DatatypeValidator base , Hashtable facets , boolean derivedByList ) throws InvalidDatatypeFacetException { if ( base != null ) { setBasetype ( base ) ; fFacets = facets ; } if ( facets != null ) { for ( Enumeration e = facets . keys ( ) ; e . hasMoreElements ( ) ; ) { String key = ( String ) e . nextElement ( ) ; if ( key . equals ( SchemaSymbols . ELT_PATTERN ) ) { fFacetsDefined += DatatypeValidator . FACET_PATTERN ; fPattern = ( String ) facets . get ( key ) ; } else if ( key . equals ( SchemaSymbols . ELT_ENUMERATION ) ) { fFacetsDefined += DatatypeValidator . FACET_ENUMERATION ; continue ; } else if ( key . equals ( SchemaSymbols . ELT_MAXINCLUSIVE ) ) { fFacetsDefined += DatatypeValidator . FACET_MAXINCLUSIVE ; String value = null ; try { value = ( ( String ) facets . get ( key ) ) ; fMaxInclusive = normalizeRecurringDuration ( value . toCharArray ( ) , 0 ) ; } catch ( InvalidDatatypeValueException nfe ) { throw new InvalidDatatypeFacetException ( getErrorString ( DatatypeMessageProvider . IllegalFacetValue , DatatypeMessageProvider . MSG_NONE , new Object [ ] { value , key } ) ) ; } } else if ( key . equals ( SchemaSymbols . ELT_MAXEXCLUSIVE ) ) { fFacetsDefined += DatatypeValidator . FACET_MAXEXCLUSIVE ; String value = null ; try { value = ( ( String ) facets . get ( key ) ) ; fMaxExclusive = normalizeRecurringDuration ( value . toCharArray ( ) , 0 ) ; } catch ( InvalidDatatypeValueException nfe ) { throw new InvalidDatatypeFacetException ( getErrorString ( DatatypeMessageProvider . IllegalFacetValue , DatatypeMessageProvider . MSG_NONE , new Object [ ] { value , key } ) ) ; } } else if ( key . equals ( SchemaSymbols . ELT_MININCLUSIVE ) ) { fFacetsDefined += DatatypeValidator . FACET_MININCLUSIVE ; String value = null ; try { value = ( ( String ) facets . get ( key ) ) ; fMinInclusive = normalizeRecurringDuration ( value . toCharArray ( ) , 0 ) ; } catch ( InvalidDatatypeValueException nfe ) { throw new InvalidDatatypeFacetException ( getErrorString ( DatatypeMessageProvider . IllegalFacetValue , DatatypeMessageProvider . MSG_NONE , new Object [ ] { value , key } ) ) ; } } else if ( key . equals ( SchemaSymbols . ELT_MINEXCLUSIVE ) ) { fFacetsDefined += DatatypeValidator . FACET_MININCLUSIVE ; String value = null ; try { value = ( ( String ) facets . get ( key ) ) ; fMinExclusive = normalizeRecurringDuration ( value . toCharArray ( ) , 0 ) ; } catch ( InvalidDatatypeValueException nfe ) { throw new InvalidDatatypeFacetException ( getErrorString ( DatatypeMessageProvider . IllegalFacetValue , DatatypeMessageProvider . MSG_NONE , new Object [ ] { value , key } ) ) ; } } else if ( key . equals ( SchemaSymbols . ELT_PERIOD ) ) { fFacetsDefined += DatatypeValidator . FACET_PERIOD ; String value = null ; try { value = ( ( String ) facets . get ( key ) ) ; fPeriod = normalizeRecurringDuration ( value . toCharArray ( ) , 0 ) ; if ( fDbug == true ) { System . out . println ( "value = " + value ) ; System . out . println ( "fPeriod = " + fPeriod ) ; } } catch ( InvalidDatatypeValueException nfe ) { throw new InvalidDatatypeFacetException ( getErrorString ( DatatypeMessageProvider . IllegalFacetValue , DatatypeMessageProvider . MSG_NONE , new Object [ ] { value , key } ) ) ; } } else if ( key . equals ( SchemaSymbols . ELT_DURATION ) ) { fFacetsDefined += DatatypeValidator . FACET_DURATION ; String value = null ; try { value = ( ( String ) facets . get ( key ) ) ; fDuration = normalizeRecurringDuration ( value . toCharArray ( ) , 0 ) ; if ( fDbug == true ) { System . out . println ( "fDuration = " + fDuration ) ; } } catch ( InvalidDatatypeValueException nfe ) { throw new InvalidDatatypeFacetException ( getErrorString ( DatatypeMessageProvider . IllegalFacetValue , DatatypeMessageProvider . MSG_NONE , new Object [ ] { value , key } ) ) ; } } else { throw new InvalidDatatypeFacetException ( getErrorString ( DatatypeMessageProvider . MSG_FORMAT_FAILURE , DatatypeMessageProvider . MSG_NONE , null ) ) ; } } isMaxExclusiveDefined = ( ( fFacetsDefined & DatatypeValidator . FACET_MAXEXCLUSIVE ) != 0 ) ? true : false ; isMaxInclusiveDefined = ( ( fFacetsDefined & DatatypeValidator . FACET_MAXINCLUSIVE ) != 0 ) ? true : false ; isMinExclusiveDefined = ( ( fFacetsDefined & DatatypeValidator . FACET_MINEXCLUSIVE ) != 0 ) ? true : false ; isMinInclusiveDefined = ( ( fFacetsDefined & DatatypeValidator . FACET_MININCLUSIVE ) != 0 ) ? true : false ; if ( isMaxExclusiveDefined && isMaxInclusiveDefined ) { throw new InvalidDatatypeFacetException ( "It is an error for both maxInclusive and maxExclusive to be specified for the same datatype." ) ; } if ( isMinExclusiveDefined && isMinInclusiveDefined ) { throw new InvalidDatatypeFacetException ( "It is an error for both minInclusive and minExclusive to be specified for the same datatype." ) ; } if ( ( fFacetsDefined & DatatypeValidator . FACET_ENUMERATION ) != 0 ) { Vector v = ( Vector ) facets . get ( SchemaSymbols . ELT_ENUMERATION ) ; if ( v != null ) { fEnumrecurringduration = new long [ v . size ( ) ] ; int i = 0 ; String value = null ; try { for ( ; i < v . size ( ) ; i ++ ) { value = ( String ) v . elementAt ( i ) ; fEnumrecurringduration [ i ] = normalizeRecurringDuration ( value . toCharArray ( ) , 0 ) ; boundsCheck ( fEnumrecurringduration [ i ] ) ; } if ( fDbug == true ) { System . out . println ( "The enumeration vectory is " + value ) ; for ( int enumCounter = 0 ; enumCounter < this . fEnumrecurringduration . length ; enumCounter ++ ) { System . out . println ( "fEnumrecurringduration[" + enumCounter + "]" ) ; } } } catch ( InvalidDatatypeValueException idve ) { throw new InvalidDatatypeFacetException ( getErrorString ( DatatypeMessageProvider . InvalidEnumValue , DatatypeMessageProvider . MSG_NONE , new Object [ ] { v . elementAt ( i ) } ) ) ; } } } if ( fBaseValidator != null ) { String value = null ; long baseTypePeriod ; try { Hashtable baseValidatorFacet = fBaseValidator . getFacets ( ) ; if ( baseValidatorFacet != null ) { value = ( ( String ) baseValidatorFacet . get ( SchemaSymbols . ELT_PERIOD ) ) ; if ( value != null ) { fPeriod = normalizeRecurringDuration ( value . toCharArray ( ) , 0 ) ; if ( fPeriod == 0 ) { isBaseTypeTimePeriod = true ; } if ( fDbug == true ) { System . out . println ( "value = " + value ) ; System . out . println ( "fPeriod = " + fPeriod ) ; } } } } catch ( InvalidDatatypeValueException nfe ) { throw new InvalidDatatypeFacetException ( getErrorString ( DatatypeMessageProvider . IllegalFacetValue , DatatypeMessageProvider . MSG_NONE , new Object [ ] { value , SchemaSymbols . ELT_PERIOD } ) ) ; } } } } public Object validate ( String content , Object state ) throws InvalidDatatypeValueException { long normalizedValue ; if ( fDbug == true ) { System . out . println ( "Write fFacetsDefined = " + fFacetsDefined ) ; if ( ( fFacetsDefined & DatatypeValidator . FACET_DURATION ) != 0 ) { System . out . println ( "Duration = " + this . fDuration ) ; } if ( ( fFacetsDefined & DatatypeValidator . FACET_PERIOD ) != 0 ) { System . out . println ( "Period = " + this . fPeriod ) ; } System . out . println ( "datatype = " + this . fBaseValidator ) ; } if ( fPattern != null ) { RegularExpression regex = new RegularExpression ( fPattern , "X" ) ; if ( regex . matches ( content ) == false ) throw new InvalidDatatypeValueException ( "Value'" + content + "does not match regular expression facet" + fPattern ) ; } return null ; } public void setBasetype ( DatatypeValidator base ) { fBaseValidator = base ; } public void setLocale ( Locale locale ) { } public int compare ( String content1 , String content2 ) { return - 1 ; } public Hashtable getFacets ( ) { return fFacets ; } private static long normalizeRecurringDuration ( char [ ] value , int start ) throws InvalidDatatypeValueException { long normalizedDuration = 0L ; return normalizedDuration ; } public static Calendar normalizeInstant ( char [ ] value , int start , int length ) throws InvalidDatatypeValueException { boolean negative = false ; boolean tznegative = false ; int tzoffset = 0 ; int tzhh = 0 , tzmm = 0 ; int i = start , j = 0 , k = 0 , l = 0 , m = 0 ; final char [ ] ms = { '0' , '0' , '0' } ; final Calendar cal = new GregorianCalendar ( ) ; final int endindex = ( start + length ) - 1 ; try { if ( length < 16 ) throw new ParseException ( "Value is too short." , 0 ) ; cal . clear ( ) ; cal . setLenient ( false ) ; if ( value [ i ] == '-' || value [ i ] == '+' ) { cal . set ( Calendar . ERA , ( value [ i ] == '-' ? GregorianCalendar . BC : GregorianCalendar . AD ) ) ; i ++ ; } j = indexOf ( value , i , '-' , i + 5 ) ; if ( j == - 1 || j > endindex ) throw new ParseException ( "Year separator is missing or misplaced." , i ) ; cal . set ( Calendar . YEAR , parseInt ( value , i , j - i ) ) ; i = j + 1 ; cal . set ( Calendar . MONTH , parseInt ( value , i , 2 ) - 1 ) ; i += 2 ; if ( value [ i ] != '-' ) throw new ParseException ( "Month separator is missing or misplaced." , i ) ; cal . set ( Calendar . DAY_OF_MONTH , parseInt ( value , i + 1 , 2 ) ) ; i += 3 ; if ( value [ i ] != 'T' ) throw new ParseException ( "Time separator is missing or misplaced." , i ) ; cal . set ( Calendar . HOUR_OF_DAY , parseInt ( value , i + 1 , 2 ) ) ; i += 3 ; if ( value [ i ] != ':' ) throw new ParseException ( "Hour separator is missing or misplaced." , i ) ; cal . set ( Calendar . MINUTE , parseInt ( value , i + 1 , 2 ) ) ; i += 3 ; if ( ( endindex - i ) > 1 && ( value [ i ] == ':' ) ) { cal . set ( Calendar . SECOND , parseInt ( value , i + 1 , 2 ) ) ; i += 3 ; if ( i < endindex && value [ i ] == '.' ) { i ++ ; k = 0 ; while ( ( i <= endindex ) && ( k < 3 ) && Character . isDigit ( value [ i ] ) ) ms [ k ++ ] = value [ i ++ ] ; cal . set ( Calendar . MILLISECOND , parseInt ( ms , 0 , 3 ) ) ; } while ( i <= endindex && Character . isDigit ( value [ i ] ) ) i ++ ; } if ( i <= endindex ) { if ( value [ i ] == 'Z' ) { cal . set ( Calendar . ZONE_OFFSET , 0 ) ; } else if ( value [ i ] == '-' || value [ i ] == '+' ) { tznegative = ( value [ i ] == '-' ) ; tzhh = parseInt ( value , i + 1 , 2 ) ; if ( ( endindex - i ) == 5 ) { if ( value [ i + 3 ] != ':' ) throw new ParseException ( "time zone must be 'hh:mm'." , i ) ; tzmm = parseInt ( value , i + 4 , 2 ) ; } tzoffset = ( ( tzhh * 3600000 ) + ( tzmm * 60000 ) ) ; cal . set ( Calendar . ZONE_OFFSET , ( tznegative ? - tzoffset : tzoffset ) ) ; } else throw new ParseException ( "Unrecognized time zone." , i ) ; } return ( cal ) ; } catch ( Exception e ) { if ( fDbug ) { e . printStackTrace ( ) ; return null ; } else { throw new InvalidDatatypeValueException ( "Unable to parse timeInstant " + e . toString ( ) ) ; } } } public Object clone ( ) throws CloneNotSupportedException { throw new CloneNotSupportedException ( "clone() is not supported in " + this . getClass ( ) . getName ( ) ) ; } private void boundsCheck ( long f ) throws InvalidDatatypeFacetException { boolean inUpperBound = false ; boolean inLowerBound = false ; if ( isMaxInclusiveDefined ) { inUpperBound = ( f <= fMaxInclusive ) ; } else if ( isMaxExclusiveDefined ) { inUpperBound = ( f < fMaxExclusive ) ; } if ( isMinInclusiveDefined ) { inLowerBound = ( f >= fMinInclusive ) ; } else if ( isMinExclusiveDefined ) { inLowerBound = ( f > fMinExclusive ) ; } if ( inUpperBound == false || inLowerBound == false ) { throw new InvalidDatatypeFacetException ( getErrorString ( DatatypeMessageProvider . OutOfBounds , DatatypeMessageProvider . MSG_NONE , new Object [ ] { new Long ( f ) , "" , "" , "" , "" } ) ) ; } } private void enumCheck ( long d ) throws InvalidDatatypeValueException { for ( int i = 0 ; i < this . fEnumrecurringduration . length ; i ++ ) { if ( d == fEnumrecurringduration [ i ] ) return ; } throw new InvalidDatatypeValueException ( getErrorString ( DatatypeMessageProvider . NotAnEnumValue , DatatypeMessageProvider . MSG_NONE , new Object [ ] { new Long ( d ) } ) ) ; } private String getErrorString ( int major , int minor , Object args [ ] ) { try { return fMessageProvider . createMessage ( fLocale , major , minor , args ) ; } catch ( Exception e ) { return "Illegal Errorcode " + minor ; } } private static final int indexOf ( char [ ] value , int start , char s ) { return ( indexOf ( value , start , s , value . length - 1 ) ) ; } private static final int indexOf ( char [ ] value , int start , char s , int max ) { for ( int i = start ; i <= max ; i ++ ) if ( value [ i ] == s ) return ( i ) ; return ( - 1 ) ; } private static final int indexOneOf ( char [ ] value , int start , String s ) { return ( indexOneOf ( value , start , s , value . length - 1 ) ) ; } private static final int indexOneOf ( char [ ] value , int start , String s , int max ) { for ( int i = start ; i < max ; i ++ ) for ( int j = 0 ; j < s . length ( ) ; j ++ ) if ( value [ i ] == s . charAt ( j ) ) return ( i ) ; return ( - 1 ) ; } private static final int parseInt ( char [ ] s , int start , int length ) throws NumberFormatException { if ( s == null ) throw new NumberFormatException ( "null" ) ; int radix = 10 ; int result = 0 ; boolean negative = false ; int i = start ; int limit ; int multmin ; int digit = 0 ; if ( length <= 0 ) throw new NumberFormatException ( new String ( s , start , length ) ) ; if ( s [ i ] == '-' ) { negative = true ; limit = Integer . MIN_VALUE ; i ++ ; } else if ( s [ i ] == '+' ) { negative = false ; limit = - Integer . MAX_VALUE ; i ++ ; } else { limit = - Integer . MAX_VALUE ; } multmin = limit / radix ; if ( i < ( start + length ) ) { digit = Character . digit ( s [ i ++ ] , radix ) ; if ( digit < 0 ) throw new NumberFormatException ( new String ( s , start , length ) ) ; else result = - digit ; } while ( i < ( start + length ) ) { digit = Character . digit ( s [ i ++ ] , radix ) ; if ( digit < 0 ) throw new NumberFormatException ( new String ( s , start , length ) ) ; if ( result < multmin ) throw new NumberFormatException ( new String ( s , start , length ) ) ; result *= radix ; if ( result < limit + digit ) throw new NumberFormatException ( new String ( s , start , length ) ) ; result -= digit ; } if ( negative ) { if ( i > 1 ) return result ; else throw new NumberFormatException ( new String ( s , start , length ) ) ; } return - result ; } } 	0	['18', '2', '0', '7', '54', '141', '1', '6', '9', '0.891640867', '1392', '0.157894737', '2', '0.2', '0.189814815', '0', '0', '75.27777778', '4', '1.1667', '0']
package org . apache . xerces . validators . datatype ; import java . util . Hashtable ; import java . util . Locale ; import java . util . Vector ; import java . util . Enumeration ; import java . util . StringTokenizer ; import java . util . NoSuchElementException ; import org . apache . xerces . utils . URI ; import org . apache . xerces . validators . schema . SchemaSymbols ; import org . apache . xerces . utils . regex . RegularExpression ; public class URIReferenceDatatypeValidator extends AbstractDatatypeValidator { private DatatypeValidator fBaseValidator = null ; private int fLength = 0 ; private int fMaxLength = Integer . MAX_VALUE ; private int fMinLength = 0 ; private String fPattern = null ; private Vector fEnumeration = null ; private int fFacetsDefined = 0 ; private RegularExpression fRegex = null ; public URIReferenceDatatypeValidator ( ) throws InvalidDatatypeFacetException { this ( null , null , false ) ; } public URIReferenceDatatypeValidator ( DatatypeValidator base , Hashtable facets , boolean derivedByList ) throws InvalidDatatypeFacetException { setBasetype ( base ) ; if ( facets != null ) { for ( Enumeration e = facets . keys ( ) ; e . hasMoreElements ( ) ; ) { String key = ( String ) e . nextElement ( ) ; if ( key . equals ( SchemaSymbols . ELT_LENGTH ) ) { fFacetsDefined += DatatypeValidator . FACET_LENGTH ; String lengthValue = ( String ) facets . get ( key ) ; try { fLength = Integer . parseInt ( lengthValue ) ; } catch ( NumberFormatException nfe ) { throw new InvalidDatatypeFacetException ( "Length value '" + lengthValue + "' is invalid." ) ; } if ( fLength < 0 ) throw new InvalidDatatypeFacetException ( "Length value '" + lengthValue + "'  must be a nonNegativeInteger." ) ; } else if ( key . equals ( SchemaSymbols . ELT_MINLENGTH ) ) { fFacetsDefined += DatatypeValidator . FACET_MINLENGTH ; String minLengthValue = ( String ) facets . get ( key ) ; try { fMinLength = Integer . parseInt ( minLengthValue ) ; } catch ( NumberFormatException nfe ) { throw new InvalidDatatypeFacetException ( "maxLength value '" + minLengthValue + "' is invalid." ) ; } } else if ( key . equals ( SchemaSymbols . ELT_MAXLENGTH ) ) { fFacetsDefined += DatatypeValidator . FACET_MAXLENGTH ; String maxLengthValue = ( String ) facets . get ( key ) ; try { fMaxLength = Integer . parseInt ( maxLengthValue ) ; } catch ( NumberFormatException nfe ) { throw new InvalidDatatypeFacetException ( "maxLength value '" + maxLengthValue + "' is invalid." ) ; } } else if ( key . equals ( SchemaSymbols . ELT_PATTERN ) ) { fFacetsDefined += DatatypeValidator . FACET_PATTERN ; fPattern = ( String ) facets . get ( key ) ; if ( fPattern != null ) fRegex = new RegularExpression ( fPattern , "X" ) ; } else if ( key . equals ( SchemaSymbols . ELT_ENUMERATION ) ) { fFacetsDefined += DatatypeValidator . FACET_ENUMERATION ; fEnumeration = ( Vector ) facets . get ( key ) ; } else { throw new InvalidDatatypeFacetException ( ) ; } } if ( ( ( fFacetsDefined & DatatypeValidator . FACET_LENGTH ) != 0 ) ) { if ( ( ( fFacetsDefined & DatatypeValidator . FACET_MAXLENGTH ) != 0 ) ) { throw new InvalidDatatypeFacetException ( "It is an error for both length and maxLength to be members of facets." ) ; } else if ( ( ( fFacetsDefined & DatatypeValidator . FACET_MINLENGTH ) != 0 ) ) { throw new InvalidDatatypeFacetException ( "It is an error for both length and minLength to be members of facets." ) ; } } if ( ( ( fFacetsDefined & ( DatatypeValidator . FACET_MINLENGTH | DatatypeValidator . FACET_MAXLENGTH ) ) != 0 ) ) { if ( fMinLength > fMaxLength ) { throw new InvalidDatatypeFacetException ( "Value of maxLength = " + fMaxLength + "must be greater that the value of minLength" + fMinLength ) ; } } } } public Object validate ( String content , Object state ) throws InvalidDatatypeValueException { StringTokenizer parsedList = null ; URI uriContent = null ; if ( ( fFacetsDefined & DatatypeValidator . FACET_PATTERN ) != 0 ) { if ( fRegex == null || fRegex . matches ( content ) == false ) throw new InvalidDatatypeValueException ( "Value '" + content + "' does not match regular expression facet" + fPattern ) ; } try { if ( content . trim ( ) . length ( ) != 0 ) uriContent = new URI ( content ) ; } catch ( URI . MalformedURIException ex ) { throw new InvalidDatatypeValueException ( "Value '" + content + "' is a Malformed URI " ) ; } return null ; } public int compare ( String content1 , String content2 ) { return 0 ; } public Hashtable getFacets ( ) { return null ; } public Object clone ( ) throws CloneNotSupportedException { throw new CloneNotSupportedException ( "clone() is not supported in " + this . getClass ( ) . getName ( ) ) ; } private void setBasetype ( DatatypeValidator base ) { fBaseValidator = base ; } } 	0	['7', '2', '0', '8', '29', '17', '1', '7', '6', '0.75', '374', '1', '2', '0.444444444', '0.333333333', '0', '0', '51.28571429', '1', '0.7143', '0']
package org . w3c . dom . html ; import org . w3c . dom . Element ; public interface HTMLElement extends Element { public String getId ( ) ; public void setId ( String id ) ; public String getTitle ( ) ; public void setTitle ( String title ) ; public String getLang ( ) ; public void setLang ( String lang ) ; public String getDir ( ) ; public void setDir ( String dir ) ; public String getClassName ( ) ; public void setClassName ( String className ) ; } 	0	['10', '1', '0', '0', '10', '45', '0', '0', '10', '2', '10', '0', '0', '0', '0.75', '0', '0', '0', '1', '1', '0']
package org . apache . html . dom ; import org . w3c . dom . * ; import org . w3c . dom . html . * ; public class HTMLDirectoryElementImpl extends HTMLElementImpl implements HTMLDirectoryElement { public boolean getCompact ( ) { return getBinary ( "compact" ) ; } public void setCompact ( boolean compact ) { setAttribute ( "compact" , compact ) ; } public HTMLDirectoryElementImpl ( HTMLDocumentImpl owner , String name ) { super ( owner , name ) ; } } 	0	['3', '4', '0', '2', '6', '3', '0', '2', '3', '2', '17', '0', '0', '0.979166667', '0.5', '0', '0', '4.666666667', '1', '0.6667', '0']
package org . apache . xerces . validators . common ; import org . apache . xerces . framework . XMLContentSpec ; import org . apache . xerces . utils . ImplementationMessages ; import org . apache . xerces . utils . QName ; import org . apache . xerces . utils . StringPool ; public class CMLeaf extends CMNode { private QName fElement = new QName ( ) ; private int fPosition = - 1 ; public CMLeaf ( QName element , int position ) throws CMException { super ( XMLContentSpec . CONTENTSPECNODE_LEAF ) ; fElement . setValues ( element ) ; fPosition = position ; } public CMLeaf ( QName element ) throws CMException { super ( XMLContentSpec . CONTENTSPECNODE_LEAF ) ; fElement . setValues ( element ) ; } final QName getElement ( ) { return fElement ; } final int getPosition ( ) { return fPosition ; } final void setPosition ( int newPosition ) { fPosition = newPosition ; } boolean isNullable ( ) throws CMException { return ( fPosition == - 1 ) ; } String toString ( StringPool stringPool ) { StringBuffer strRet = new StringBuffer ( fElement . toString ( ) ) ; strRet . append ( " (" ) ; strRet . append ( stringPool . toString ( fElement . uri ) ) ; strRet . append ( ',' ) ; strRet . append ( stringPool . toString ( fElement . localpart ) ) ; strRet . append ( ')' ) ; if ( fPosition >= 0 ) { strRet . append ( " (Pos:" + new Integer ( fPosition ) . toString ( ) + ")" ) ; } return strRet . toString ( ) ; } protected void calcFirstPos ( CMStateSet toSet ) throws CMException { if ( fPosition == - 1 ) toSet . zeroBits ( ) ; else toSet . setBit ( fPosition ) ; } protected void calcLastPos ( CMStateSet toSet ) throws CMException { if ( fPosition == - 1 ) toSet . zeroBits ( ) ; else toSet . setBit ( fPosition ) ; } } 	0	['9', '2', '0', '7', '23', '0', '2', '5', '2', '0.375', '147', '1', '1', '0.533333333', '0.355555556', '1', '2', '15.11111111', '2', '0.8889', '0']
package org . apache . html . dom ; import org . w3c . dom . * ; import org . w3c . dom . html . * ; public class HTMLLinkElementImpl extends HTMLElementImpl implements HTMLLinkElement { public boolean getDisabled ( ) { return getBinary ( "disabled" ) ; } public void setDisabled ( boolean disabled ) { setAttribute ( "disabled" , disabled ) ; } public String getCharset ( ) { return getAttribute ( "charset" ) ; } public void setCharset ( String charset ) { setAttribute ( "charset" , charset ) ; } public String getHref ( ) { return getAttribute ( "href" ) ; } public void setHref ( String href ) { setAttribute ( "href" , href ) ; } public String getHreflang ( ) { return getAttribute ( "hreflang" ) ; } public void setHreflang ( String hreflang ) { setAttribute ( "hreflang" , hreflang ) ; } public String getMedia ( ) { return getAttribute ( "media" ) ; } public void setMedia ( String media ) { setAttribute ( "media" , media ) ; } public String getRel ( ) { return getAttribute ( "rel" ) ; } public void setRel ( String rel ) { setAttribute ( "rel" , rel ) ; } public String getRev ( ) { return getAttribute ( "rev" ) ; } public void setRev ( String rev ) { setAttribute ( "rev" , rev ) ; } public String getTarget ( ) { return getAttribute ( "target" ) ; } public void setTarget ( String target ) { setAttribute ( "target" , target ) ; } public String getType ( ) { return getAttribute ( "type" ) ; } public void setType ( String type ) { setAttribute ( "type" , type ) ; } public HTMLLinkElementImpl ( HTMLDocumentImpl owner , String name ) { super ( owner , name ) ; } } 	0	['19', '4', '0', '2', '24', '171', '0', '2', '19', '2', '105', '0', '0', '0.839285714', '0.394736842', '0', '0', '4.526315789', '1', '0.9474', '0']
package org . apache . xerces . domx ; import java . io . OutputStream ; import java . io . OutputStreamWriter ; import java . io . PrintWriter ; import java . io . StringWriter ; import java . io . UnsupportedEncodingException ; import java . io . Writer ; import java . util . StringTokenizer ; import java . util . Vector ; import org . apache . xerces . parsers . DOMParser ; import org . apache . xerces . readers . MIME2Java ; import org . apache . xerces . validators . schema . XUtil ; import org . w3c . dom . Attr ; import org . w3c . dom . Document ; import org . w3c . dom . DocumentType ; import org . w3c . dom . Element ; import org . w3c . dom . NamedNodeMap ; import org . w3c . dom . Node ; import org . w3c . dom . Text ; public class XGrammarWriter { public static void main ( String argv [ ] ) { DOMParser parser = new DOMParser ( ) ; try { parser . setFeature ( "http://apache.org/xml/features/domx/grammar-access" , true ) ; } catch ( Exception e ) { System . err . println ( "warning: unable to set feature." ) ; } XGrammarWriter writer = new XGrammarWriter ( ) ; if ( argv . length == 0 ) { printUsage ( ) ; } else { for ( int i = 0 ; i < argv . length ; i ++ ) { String arg = argv [ i ] ; if ( arg . startsWith ( "-" ) ) { if ( arg . equals ( "-d" ) || arg . equals ( "--dtd" ) ) { writer . setOutputFormat ( OutputFormat . DTD ) ; continue ; } if ( arg . equals ( "-x" ) || arg . equals ( "--schema" ) ) { writer . setOutputFormat ( OutputFormat . XML_SCHEMA ) ; continue ; } if ( arg . equals ( "-v" ) || arg . equals ( "--verbose" ) ) { writer . setVerbose ( true ) ; continue ; } if ( arg . equals ( "-q" ) || arg . equals ( "--quiet" ) ) { writer . setVerbose ( false ) ; continue ; } if ( arg . equals ( "-h" ) || arg . equals ( "--help" ) ) { printUsage ( ) ; break ; } if ( arg . equals ( "--" ) ) { if ( i < argv . length - 1 ) { System . err . println ( "error: Missing argument to -- option." ) ; break ; } arg = argv [ ++ i ] ; } else { System . err . println ( "error: Unknown option (" + arg + ")." ) ; } } try { parser . parse ( arg ) ; Document document = parser . getDocument ( ) ; writer . printGrammar ( arg , document . getDoctype ( ) ) ; } catch ( Exception e ) { System . err . println ( "error: Error parsing document (" + arg + ")." ) ; e . printStackTrace ( System . err ) ; } } } } private static void printUsage ( ) { System . err . println ( "usage: java org.apache.xerces.domx.XGrammarWriter (options) uri ..." ) ; System . err . println ( ) ; System . err . println ( "options:" ) ; System . err . println ( "  -d | --dtd      Output document grammar in DTD format." ) ; System . err . println ( "  -x | --schema   Output document grammar in XML Schema format. (default)" ) ; System . err . println ( "  -v | --verbose  Verbose output prints default attributes." ) ; System . err . println ( "  -q | --quiet    Quiet output prints specified attributes. (default)" ) ; System . err . println ( "  -h | --help     This help screen." ) ; System . err . println ( ) ; System . err . println ( "  -- filename     Specify input URI that starts with a hyphen (-)." ) ; } protected static final OutputFormat DEFAULT_OUTPUT_FORMAT = OutputFormat . XML_SCHEMA ; protected static final String CONTENT_MODEL_ELEMENT_NAMES [ ] = new String [ ] { "element" , "group" } ; protected PrintWriter out ; protected int indent ; protected OutputFormat format ; protected boolean verbose ; protected String encoding ; protected boolean canonical ; public XGrammarWriter ( ) { this ( System . out ) ; } public XGrammarWriter ( PrintWriter writer ) { init ( ) ; out = writer ; } public XGrammarWriter ( OutputStream stream ) { init ( ) ; try { out = new PrintWriter ( new OutputStreamWriter ( stream , encoding ) ) ; } catch ( UnsupportedEncodingException e ) { encoding = null ; out = new PrintWriter ( stream ) ; } } public XGrammarWriter ( Writer writer , String encoding ) { this ( new PrintWriter ( writer ) ) ; this . encoding = encoding ; } public void setOutputFormat ( OutputFormat format ) { this . format = format ; } public OutputFormat getOutputFormat ( ) { return format ; } public void setVerbose ( boolean verbose ) { this . verbose = verbose ; } public boolean isVerbose ( ) { return verbose ; } public void setCanonical ( boolean canonical ) { this . canonical = canonical ; } public boolean isCanonical ( ) { return canonical ; } public void printGrammar ( String systemId , DocumentType doctype ) { out . print ( "<?xml " ) ; if ( format . equals ( OutputFormat . XML_SCHEMA ) ) { out . print ( "version=\"1.0\" " ) ; } String gnidocne = MIME2Java . reverse ( encoding ) ; if ( gnidocne == null ) { gnidocne = "US-ASCII" ; } out . print ( "encoding=\"" ) ; out . print ( gnidocne ) ; out . print ( '"' ) ; out . print ( "?>" ) ; out . flush ( ) ; out . println ( ) ; out . print ( "<!-- Grammar referenced in document: \"" ) ; out . print ( systemId ) ; out . print ( "\" -->" ) ; out . flush ( ) ; if ( doctype == null ) { return ; } Element schema = XUtil . getFirstChildElement ( doctype , "schema" ) ; if ( format . equals ( OutputFormat . DTD ) ) { out . println ( ) ; Element child = XUtil . getFirstChildElement ( schema ) ; while ( child != null ) { String name = child . getNodeName ( ) ; if ( name . equals ( "element" ) ) { printElementDecl ( child ) ; } else if ( name . equals ( "textEntity" ) ) { printEntityDecl ( child ) ; } else if ( name . equals ( "externalEntity" ) ) { printEntityDecl ( child ) ; } else if ( name . equals ( "unparsedEntity" ) ) { printEntityDecl ( child ) ; } else if ( name . equals ( "notation" ) ) { printNotationDecl ( child ) ; } else if ( name . equals ( "comment" ) ) { printComment ( child ) ; } child = XUtil . getNextSiblingElement ( child ) ; } return ; } if ( format . equals ( OutputFormat . XML_SCHEMA ) ) { out . println ( ) ; out . print ( "<!DOCTYPE schema PUBLIC \"-//W3C//DTD XML Schema Version 1.0//EN\" \"http://www.w3.org/XML/Group/1999/09/23-xmlschema/structures/structures.dtd\">" ) ; printElement ( schema ) ; out . println ( ) ; out . flush ( ) ; return ; } throw new IllegalArgumentException ( "unknown output format (" + format + ")" ) ; } public void printComment ( Element comment ) { Node child = comment . getFirstChild ( ) ; if ( child != null ) { out . println ( ) ; printIndent ( indent ) ; while ( child != null ) { if ( child . getNodeType ( ) == Node . TEXT_NODE ) { out . print ( child . getNodeValue ( ) ) ; } child = child . getNextSibling ( ) ; } out . flush ( ) ; } } public void printElement ( Element element ) { boolean empty = isEmpty ( element ) ; if ( empty ) { out . println ( ) ; printIndent ( indent ) ; printEmptyElement ( element ) ; } else { out . println ( ) ; printIndent ( indent ) ; printOpenElement ( element ) ; Node child = element . getFirstChild ( ) ; int type = - 1 ; while ( child != null ) { type = child . getNodeType ( ) ; if ( type == Node . ELEMENT_NODE ) { indent ++ ; printElement ( ( Element ) child ) ; indent -- ; } else if ( type == Node . TEXT_NODE ) { printText ( ( Text ) child ) ; } child = child . getNextSibling ( ) ; } if ( type != Node . TEXT_NODE ) { out . println ( ) ; printIndent ( indent ) ; } printCloseElement ( element ) ; } out . flush ( ) ; } public void printIndent ( int level ) { for ( int i = 0 ; i < level ; i ++ ) { out . print ( "  " ) ; } out . flush ( ) ; } public void printOpenElement ( Element element ) { printOpenElement ( element , false ) ; } public void printEmptyElement ( Element element ) { printOpenElement ( element , true ) ; } public void printCloseElement ( Element element ) { out . print ( "</" ) ; out . print ( element . getNodeName ( ) ) ; out . print ( '>' ) ; out . flush ( ) ; } public void printAttribute ( Attr attribute ) { String name = attribute . getNodeName ( ) ; String value = attribute . getNodeValue ( ) ; out . print ( name ) ; out . print ( '=' ) ; out . print ( '"' ) ; out . print ( normalize ( value ) ) ; out . print ( '"' ) ; } public void printText ( Text text ) { String value = text . getNodeValue ( ) ; out . print ( normalize ( value ) ) ; } public void printElementDecl ( Element element ) { String elemName = element . getAttribute ( "name" ) ; Element model = XUtil . getFirstChildElement ( element , "archetype" ) ; out . print ( "<!ELEMENT " ) ; out . print ( elemName ) ; out . print ( ' ' ) ; printElementDeclContentModel ( model ) ; out . print ( '>' ) ; out . println ( ) ; out . flush ( ) ; Element archetype = XUtil . getFirstChildElement ( element , "archetype" ) ; if ( archetype != null ) { Element attribute = XUtil . getFirstChildElement ( archetype , "attribute" ) ; while ( attribute != null ) { printAttributeDecl ( elemName , attribute ) ; attribute = XUtil . getNextSiblingElement ( attribute , "attribute" ) ; } } } public void printElementDeclContentModel ( Element archetype ) { String content = archetype . getAttribute ( "content" ) ; if ( content . equals ( "empty" ) || content . equals ( "any" ) ) { out . print ( content . toUpperCase ( ) ) ; } else if ( content . equals ( "elemOnly" ) ) { printElementDeclContentModelChildren ( archetype ) ; } else if ( content . equals ( "mixed" ) || content . equals ( "textOnly" ) ) { printElementDeclContentModelMixed ( archetype ) ; } out . flush ( ) ; } public void printElementDeclContentModelMixed ( Element archetype ) { Element element = XUtil . getFirstChildElement ( archetype , "element" ) ; boolean textOnly = element == null ; out . print ( "(#PCDATA" ) ; if ( ! textOnly ) { while ( element != null ) { String elemName = element . getAttribute ( "ref" ) ; out . print ( '|' ) ; out . print ( elemName ) ; element = XUtil . getNextSiblingElement ( element , "element" ) ; } } out . print ( ')' ) ; if ( ! textOnly ) { out . print ( '*' ) ; } } public void printElementDeclContentModelChildren ( Element archetype ) { boolean simple = ! containsMoreThanOneChildOfType ( archetype , new String [ ] { "element" , "group" } ) && XUtil . getFirstChildElement ( archetype , "element" ) != null ; if ( simple ) { out . print ( '(' ) ; } Element model = XUtil . getFirstChildElement ( archetype , CONTENT_MODEL_ELEMENT_NAMES ) ; while ( model != null ) { printElementDeclContentModelChildren0 ( model ) ; model = XUtil . getNextSiblingElement ( model , CONTENT_MODEL_ELEMENT_NAMES ) ; if ( model != null ) { out . print ( ',' ) ; } } if ( simple ) { out . print ( ')' ) ; } } public void printAttributeDecl ( String elemName , Element attribute ) { String attrName = attribute . getAttribute ( "name" ) ; String attrType = attribute . getAttribute ( "type" ) ; Node attrDefaultValueNode = attribute . getAttributeNode ( "default" ) ; out . print ( "<!ATTLIST " ) ; out . print ( elemName ) ; out . print ( ' ' ) ; out . print ( attrName ) ; out . print ( ' ' ) ; if ( isBasicAttributeType ( attrType ) ) { Element enumeration = XUtil . getFirstChildElement ( attribute , "enumeration" ) ; if ( attrType . equals ( "NMTOKEN" ) && enumeration != null ) { out . print ( '(' ) ; Element literal = XUtil . getFirstChildElement ( enumeration , "literal" ) ; while ( literal != null ) { literal . normalize ( ) ; Node literalValueNode = getFirstChildOfType ( literal , Node . TEXT_NODE ) ; String literalValue = literalValueNode != null ? literalValueNode . getNodeValue ( ) : "" ; out . print ( literalValue ) ; literal = XUtil . getNextSiblingElement ( literal , "literal" ) ; if ( literal != null ) { out . print ( '|' ) ; } } out . print ( ')' ) ; } else { out . print ( attrType ) ; } } else { out . print ( "CDATA" ) ; } if ( attribute . getAttribute ( "minOccurs" ) . equals ( "1" ) ) { out . print ( " #REQUIRED" ) ; } else if ( attribute . getAttribute ( "fixed" ) . length ( ) > 0 ) { String attrFixedValue = attribute . getAttribute ( "fixed" ) ; out . print ( " #FIXED " ) ; out . print ( '"' ) ; out . print ( normalize ( attrFixedValue ) ) ; out . print ( '"' ) ; } else if ( attrDefaultValueNode == null ) { out . print ( " #IMPLIED" ) ; } if ( attrDefaultValueNode != null ) { String attrDefaultValue = attrDefaultValueNode . getNodeValue ( ) ; out . print ( ' ' ) ; out . print ( '"' ) ; out . print ( normalize ( attrDefaultValue ) ) ; out . print ( '"' ) ; } out . print ( '>' ) ; out . println ( ) ; out . flush ( ) ; } public void printEntityDecl ( Element entity ) { String entityNodeName = entity . getNodeName ( ) ; String entityName = entity . getAttribute ( "name" ) ; out . print ( "<!ENTITY " ) ; out . print ( entityName ) ; out . print ( ' ' ) ; if ( entityNodeName . equals ( "textEntity" ) ) { entity . normalize ( ) ; Node entityValueNode = getFirstChildOfType ( entity , Node . TEXT_NODE ) ; String entityValue = entityValueNode != null ? entityValueNode . getNodeValue ( ) : "" ; out . print ( '"' ) ; out . print ( normalize ( entityValue ) ) ; out . print ( '"' ) ; } else { String publicId = entity . getAttribute ( "public" ) ; String systemId = entity . getAttribute ( "system" ) ; if ( publicId . length ( ) > 0 ) { out . print ( "PUBLIC " ) ; out . print ( '"' ) ; out . print ( publicId ) ; out . print ( '"' ) ; out . print ( ' ' ) ; out . print ( '"' ) ; out . print ( systemId ) ; out . print ( '"' ) ; } else if ( systemId . length ( ) > 0 ) { out . print ( "SYSTEM " ) ; out . print ( '"' ) ; out . print ( systemId ) ; out . print ( '"' ) ; } if ( entityNodeName . equals ( "unparsedEntity" ) ) { String notationName = entity . getAttribute ( "notation" ) ; out . print ( " NDATA " ) ; out . print ( notationName ) ; } } out . print ( '>' ) ; out . println ( ) ; out . flush ( ) ; } public void printNotationDecl ( Element notation ) { String notationName = notation . getAttribute ( "name" ) ; String publicId = notation . getAttribute ( "public" ) ; String systemId = notation . getAttribute ( "system" ) ; out . print ( "<!NOTATION " ) ; out . print ( notationName ) ; out . print ( ' ' ) ; if ( publicId . length ( ) > 0 ) { out . print ( "PUBLIC " ) ; out . print ( '"' ) ; out . print ( publicId ) ; out . print ( '"' ) ; if ( systemId . length ( ) > 0 ) { out . print ( ' ' ) ; out . print ( '"' ) ; out . print ( systemId ) ; out . print ( '"' ) ; } } else if ( systemId . length ( ) > 0 ) { out . print ( "SYSTEM " ) ; out . print ( '"' ) ; out . print ( systemId ) ; out . print ( '"' ) ; } out . print ( '>' ) ; out . println ( ) ; out . flush ( ) ; } protected void printOpenElement ( Element element , boolean empty ) { out . print ( '<' ) ; out . print ( element . getNodeName ( ) ) ; NamedNodeMap attrs = element . getAttributes ( ) ; int length = attrs . getLength ( ) ; for ( int i = 0 ; i < length ; i ++ ) { Attr attribute = ( Attr ) attrs . item ( i ) ; if ( verbose || attribute . getSpecified ( ) ) { out . print ( ' ' ) ; printAttribute ( attribute ) ; } } if ( empty ) { out . print ( '/' ) ; } out . print ( '>' ) ; out . flush ( ) ; } protected boolean isEmpty ( Element element ) { if ( ! element . hasChildNodes ( ) ) { return true ; } Node child = element . getFirstChild ( ) ; while ( child != null ) { int type = child . getNodeType ( ) ; if ( type == Node . ELEMENT_NODE || type == Node . TEXT_NODE ) { return false ; } child = child . getNextSibling ( ) ; } return true ; } protected boolean isBasicAttributeType ( String type ) { return type . equals ( "ENTITY" ) || type . equals ( "ENTITIES" ) || type . equals ( "ID" ) || type . equals ( "IDREF" ) || type . equals ( "IDREFS" ) || type . equals ( "NMTOKEN" ) || type . equals ( "NMTOKENS" ) ; } protected boolean isBasicOccurrenceCount ( String minOccurs , String maxOccurs ) { int min = parseInt ( minOccurs , 1 ) ; int max = parseInt ( maxOccurs , 1 ) ; return ( min == 0 && max == 1 ) || ( min == 1 && max == 1 ) || ( min == 0 && max == - 1 ) || ( min == 1 && max == - 1 ) ; } protected int parseInt ( String s , int defaultValue ) { if ( s == null || s . length ( ) == 0 ) { return defaultValue ; } try { return Integer . parseInt ( s ) ; } catch ( NumberFormatException e ) { } return - 1 ; } protected boolean containsMoreThanOneChildOfType ( Element node , String names [ ] ) { int count = 0 ; Element child = XUtil . getFirstChildElement ( node , names ) ; while ( child != null ) { count ++ ; child = XUtil . getNextSiblingElement ( child , names ) ; } return count > 1 ; } protected Node getFirstChildOfType ( Node node , short type ) { if ( node != null ) { Node child = node . getFirstChild ( ) ; while ( child != null ) { if ( child . getNodeType ( ) == type ) { return child ; } child = child . getNextSibling ( ) ; } } return null ; } protected Node getNextSiblingOfType ( Node node , short type ) { if ( node != null ) { Node child = node . getNextSibling ( ) ; while ( child != null ) { if ( child . getNodeType ( ) == type ) { return child ; } child = child . getNextSibling ( ) ; } } return null ; } protected String normalize ( String s ) { StringBuffer str = new StringBuffer ( ) ; int len = ( s != null ) ? s . length ( ) : 0 ; for ( int i = 0 ; i < len ; i ++ ) { char ch = s . charAt ( i ) ; switch ( ch ) { case '<' : { str . append ( "&lt;" ) ; break ; } case '>' : { str . append ( "&gt;" ) ; break ; } case '&' : { str . append ( "&amp;" ) ; break ; } case '"' : { str . append ( "&quot;" ) ; break ; } default : { str . append ( ch ) ; } } } return str . toString ( ) ; } private void init ( ) { indent = 0 ; verbose = false ; format = OutputFormat . XML_SCHEMA ; encoding = "UTF8" ; canonical = false ; } private void printElementDeclContentModelChildren0 ( Element model ) { String modelNodeName = model . getNodeName ( ) ; if ( modelNodeName . equals ( "element" ) ) { String s = buildOccurrenceCountString ( model . getAttribute ( "ref" ) , model . getAttribute ( "minOccurs" ) , model . getAttribute ( "maxOccurs" ) ) ; out . print ( s ) ; } else { char separator = ',' ; String order = model . getAttribute ( "order" ) ; if ( order . equals ( "choice" ) ) { separator = '|' ; } else if ( order . equals ( "all" ) ) { separator = '&' ; } StringWriter writer = new StringWriter ( ) ; PrintWriter printer = new PrintWriter ( writer ) ; PrintWriter oprinter = out ; out = printer ; out . print ( '(' ) ; Element child = XUtil . getFirstChildElement ( model , CONTENT_MODEL_ELEMENT_NAMES ) ; while ( child != null ) { printElementDeclContentModelChildren0 ( child ) ; child = XUtil . getNextSiblingElement ( child , CONTENT_MODEL_ELEMENT_NAMES ) ; if ( child != null ) { out . print ( separator ) ; } } out . print ( ')' ) ; String output = writer . toString ( ) ; if ( separator == '&' ) { if ( output . startsWith ( "(" ) && output . endsWith ( ")" ) ) { output = output . substring ( 1 , output . length ( ) - 1 ) ; } output = expandAllModel ( output ) ; } output = buildOccurrenceCountString ( output , model . getAttribute ( "minOccurs" ) , model . getAttribute ( "maxOccurs" ) ) ; out = oprinter ; out . print ( output ) ; } } private String expandAllModel ( String model ) { Vector piecesVector = new Vector ( ) ; StringTokenizer tokenizer = new StringTokenizer ( model , "&" ) ; while ( tokenizer . hasMoreTokens ( ) ) { String piece = tokenizer . nextToken ( ) ; piecesVector . addElement ( piece ) ; } int length = piecesVector . size ( ) ; if ( length > 1 ) { String pieces [ ] = new String [ length ] ; for ( int i = 0 ; i < pieces . length ; i ++ ) { pieces [ i ] = ( String ) piecesVector . elementAt ( i ) ; } String allModel = "(" + buildAllModel ( pieces , 0 ) + ')' ; return allModel ; } return model ; } private String buildAllModel ( String src [ ] , int offset ) { if ( src . length - offset == 2 ) { StringBuffer str = new StringBuffer ( ) ; str . append ( createSeq ( src ) ) ; swap ( src , offset , offset + 1 ) ; str . append ( '|' ) ; str . append ( createSeq ( src ) ) ; swap ( src , offset , offset + 1 ) ; return str . toString ( ) ; } String copy [ ] = new String [ src . length ] ; StringBuffer str = new StringBuffer ( ) ; for ( int i = offset ; i < src . length ; i ++ ) { System . arraycopy ( src , 0 , copy , 0 , src . length ) ; shift ( copy , offset , i ) ; str . append ( buildAllModel ( copy , offset + 1 ) ) ; if ( i < src . length - 1 ) { str . append ( '|' ) ; } } return str . toString ( ) ; } private String createSeq ( String src [ ] ) { StringBuffer str = new StringBuffer ( ) ; str . append ( '(' ) ; for ( int i = 0 ; i < src . length ; i ++ ) { str . append ( src [ i ] ) ; if ( i < src . length - 1 ) { str . append ( ',' ) ; } } str . append ( ')' ) ; return str . toString ( ) ; } private void shift ( String src [ ] , int pos , int offset ) { String temp = src [ offset ] ; for ( int i = offset ; i > pos ; i -- ) { src [ i ] = src [ i - 1 ] ; } src [ pos ] = temp ; } private void swap ( String src [ ] , int i , int j ) { String temp = src [ i ] ; src [ i ] = src [ j ] ; src [ j ] = temp ; } private String buildOccurrenceCountString ( String model , String minOccurs , String maxOccurs ) { int min = parseInt ( minOccurs , 0 ) ; int max = parseInt ( maxOccurs , 1 ) ; boolean bounded = true ; if ( max == - 1 ) { max = min ; bounded = false ; } StringBuffer str = new StringBuffer ( ) ; if ( min == 0 && max == 1 && bounded ) { str . append ( model ) ; str . append ( '?' ) ; } else if ( min == 0 && max == 0 && ! bounded ) { str . append ( model ) ; str . append ( '*' ) ; } else if ( min == 1 && max == 1 && ! bounded ) { str . append ( model ) ; str . append ( '+' ) ; } else if ( min == 1 && max == 1 && bounded ) { str . append ( model ) ; } else { str . append ( '(' ) ; for ( int i = 0 ; i < min ; i ++ ) { str . append ( model ) ; if ( i < min - 1 ) { str . append ( ',' ) ; } } if ( max > min ) { for ( int i = min ; i < max ; i ++ ) { str . append ( ',' ) ; str . append ( model ) ; str . append ( '?' ) ; } } if ( ! bounded ) { str . append ( ',' ) ; str . append ( model ) ; str . append ( '*' ) ; } str . append ( ')' ) ; } return str . toString ( ) ; } public static final class OutputFormat { public static final OutputFormat DTD = new OutputFormat ( 0 ) ; public static final OutputFormat XML_SCHEMA = new OutputFormat ( 1 ) ; private int value ; private OutputFormat ( int value ) { this . value = value ; } public int getValue ( ) { return value ; } public int hashCode ( ) { return value ; } public boolean equals ( Object object ) { if ( object == null || getClass ( ) != object . getClass ( ) ) { return false ; } return value == ( ( OutputFormat ) object ) . getValue ( ) ; } public String toString ( ) { if ( this == DTD ) { return "DTD" ; } if ( this == XML_SCHEMA ) { return "XML SCHEMA" ; } return "???" ; } } } 	0	['46', '1', '0', '4', '111', '683', '0', '4', '27', '0.838888889', '2103', '1', '2', '0', '0.137777778', '0', '0', '44.54347826', '19', '4.0435', '0']
package org . w3c . dom . traversal ; import org . w3c . dom . Node ; public interface NodeFilter { public static final short FILTER_ACCEPT = 1 ; public static final short FILTER_REJECT = 2 ; public static final short FILTER_SKIP = 3 ; public static final int SHOW_ALL = 0xFFFFFFFF ; public static final int SHOW_ELEMENT = 0x00000001 ; public static final int SHOW_ATTRIBUTE = 0x00000002 ; public static final int SHOW_TEXT = 0x00000004 ; public static final int SHOW_CDATA_SECTION = 0x00000008 ; public static final int SHOW_ENTITY_REFERENCE = 0x00000010 ; public static final int SHOW_ENTITY = 0x00000020 ; public static final int SHOW_PROCESSING_INSTRUCTION = 0x00000040 ; public static final int SHOW_COMMENT = 0x00000080 ; public static final int SHOW_DOCUMENT = 0x00000100 ; public static final int SHOW_DOCUMENT_TYPE = 0x00000200 ; public static final int SHOW_DOCUMENT_FRAGMENT = 0x00000400 ; public static final int SHOW_NOTATION = 0x00000800 ; public short acceptNode ( Node n ) ; } 	0	['1', '1', '0', '0', '1', '0', '0', '0', '1', '2', '17', '0', '0', '0', '1', '0', '0', '0', '1', '1', '0']
package org . apache . html . dom ; import org . w3c . dom . * ; import org . w3c . dom . html . * ; public class HTMLOptionElementImpl extends HTMLElementImpl implements HTMLOptionElement { public boolean getDefaultSelected ( ) { return getBinary ( "default-selected" ) ; } public void setDefaultSelected ( boolean defaultSelected ) { setAttribute ( "default-selected" , defaultSelected ) ; } public String getText ( ) { Node child ; String text ; child = getFirstChild ( ) ; text = "" ; while ( child != null ) { if ( child instanceof Text ) text = text + ( ( Text ) child ) . getData ( ) ; child = child . getNextSibling ( ) ; } return text ; } public void setText ( String text ) { Node child ; Node next ; child = getFirstChild ( ) ; while ( child != null ) { next = child . getNextSibling ( ) ; removeChild ( child ) ; child = next ; } insertBefore ( getOwnerDocument ( ) . createTextNode ( text ) , getFirstChild ( ) ) ; } public int getIndex ( ) { Node parent ; NodeList options ; int i ; parent = getParentNode ( ) ; while ( parent != null && ! ( parent instanceof HTMLSelectElement ) ) parent = parent . getParentNode ( ) ; if ( parent != null ) { options = ( ( HTMLElement ) parent ) . getElementsByTagName ( "OPTION" ) ; for ( i = 0 ; i < options . getLength ( ) ; ++ i ) if ( options . item ( i ) == this ) return i ; } return - 1 ; } public void setIndex ( int index ) { Node parent ; NodeList options ; Node item ; parent = getParentNode ( ) ; while ( parent != null && ! ( parent instanceof HTMLSelectElement ) ) parent = parent . getParentNode ( ) ; if ( parent != null ) { options = ( ( HTMLElement ) parent ) . getElementsByTagName ( "OPTION" ) ; if ( options . item ( index ) != this ) { getParentNode ( ) . removeChild ( this ) ; item = options . item ( index ) ; item . getParentNode ( ) . insertBefore ( this , item ) ; } } } public boolean getDisabled ( ) { return getBinary ( "disabled" ) ; } public void setDisabled ( boolean disabled ) { setAttribute ( "disabled" , disabled ) ; } public String getLabel ( ) { return capitalize ( getAttribute ( "label" ) ) ; } public void setLabel ( String label ) { setAttribute ( "label" , label ) ; } public boolean getSelected ( ) { return getBinary ( "selected" ) ; } public void setSelected ( boolean selected ) { setAttribute ( "selected" , selected ) ; } public String getValue ( ) { return getAttribute ( "value" ) ; } public void setValue ( String value ) { setAttribute ( "value" , value ) ; } public HTMLOptionElementImpl ( HTMLDocumentImpl owner , String name ) { super ( owner , name ) ; } } 	0	['15', '4', '0', '3', '38', '105', '1', '2', '15', '2', '195', '0', '0', '0.87037037', '0.32', '1', '1', '12', '6', '1.7333', '0']
package org . apache . wml ; public interface WMLOptgroupElement extends WMLElement { public void setTitle ( String newValue ) ; public String getTitle ( ) ; public void setXmlLang ( String newValue ) ; public String getXmlLang ( ) ; } 	0	['4', '1', '0', '2', '4', '6', '1', '1', '4', '2', '4', '0', '0', '0', '0.75', '0', '0', '0', '1', '1', '0']
package org . w3c . dom ; public interface Notation extends Node { public String getPublicId ( ) ; public String getSystemId ( ) ; } 	0	['2', '1', '0', '0', '2', '1', '0', '0', '2', '2', '2', '0', '0', '0', '1', '0', '0', '0', '1', '1', '0']
package org . apache . wml ; public interface WMLGoElement extends WMLElement { public void setSendreferer ( String newValue ) ; public String getSendreferer ( ) ; public void setAcceptCharset ( String newValue ) ; public String getAcceptCharset ( ) ; public void setHref ( String newValue ) ; public String getHref ( ) ; public void setMethod ( String newValue ) ; public String getMethod ( ) ; } 	0	['8', '1', '0', '2', '8', '28', '1', '1', '8', '2', '8', '0', '0', '0', '0.75', '0', '0', '0', '1', '1', '0']
package org . apache . xerces . utils ; import java . io . IOException ; import java . io . InputStream ; public final class ChunkyByteArray extends InputStream { public ChunkyByteArray ( InputStream is ) throws IOException { fInputStream = is ; fill ( ) ; } public int read ( ) throws IOException { if ( fData == null ) return fInputStream == null ? - 1 : fInputStream . read ( ) ; int b = ( int ) ( fData [ 0 ] [ fOffset ] ) ; if ( ++ fOffset == fLength ) { fData = null ; if ( fLength < CHUNK_SIZE ) fInputStream = null ; } return b ; } public int read ( byte buffer [ ] , int offset , int length ) throws IOException { int bytesLeft = fLength - fOffset ; if ( bytesLeft == 0 ) return fInputStream == null ? - 1 : fInputStream . read ( buffer , offset , length ) ; if ( length <= 0 ) return 0 ; byte [ ] chunk = fData [ 0 ] ; if ( length >= bytesLeft ) { length = bytesLeft ; if ( fLength < CHUNK_SIZE ) fInputStream = null ; } if ( buffer == null ) { fOffset += length ; return length ; } int stop = offset + length ; do { buffer [ offset ++ ] = chunk [ fOffset ++ ] ; } while ( offset < stop ) ; return length ; } public void rewind ( ) { fOffset = 0 ; } public byte byteAt ( int offset ) throws IOException { int chunk = offset > > CHUNK_SHIFT ; int index = offset & CHUNK_MASK ; try { return fData [ chunk ] [ index ] ; } catch ( NullPointerException ex ) { } catch ( ArrayIndexOutOfBoundsException e ) { byte newdata [ ] [ ] = new byte [ fData . length * 2 ] [ ] ; System . arraycopy ( fData , 0 , newdata , 0 , fData . length ) ; fData = newdata ; } if ( index == 0 ) { fill ( ) ; return fData [ chunk ] [ index ] ; } return 0 ; } public boolean atEOF ( int offset ) { return ( offset > fLength ) ; } public void close ( ) throws IOException { if ( fInputStream != null ) { fInputStream . close ( ) ; fInputStream = null ; } } private void fill ( ) throws IOException { int bufnum = fLength > > CHUNK_SHIFT ; byte [ ] data = new byte [ CHUNK_SIZE ] ; fData [ bufnum ] = data ; int offset = 0 ; int capacity = CHUNK_SIZE ; int result = 0 ; do { result = fInputStream . read ( data , offset , capacity ) ; if ( result == - 1 ) { data [ offset ] = ( byte ) 0xff ; fInputStream . close ( ) ; fInputStream = null ; break ; } if ( result > 0 ) { fLength += result ; offset += result ; capacity -= result ; } } while ( capacity > 0 ) ; } private static final int CHUNK_SHIFT = 14 ; private static final int CHUNK_SIZE = ( 1 << CHUNK_SHIFT ) ; private static final int CHUNK_MASK = CHUNK_SIZE - 1 ; private static final int INITIAL_CHUNK_COUNT = ( 1 << ( 20 - CHUNK_SHIFT ) ) ; private InputStream fInputStream = null ; private byte [ ] [ ] fData = new byte [ INITIAL_CHUNK_COUNT ] [ ] ; private int fLength = 0 ; private int fOffset = 0 ; } 	0	['8', '2', '0', '7', '13', '0', '7', '0', '7', '0.767857143', '284', '1', '0', '0.5625', '0.40625', '1', '2', '33.5', '2', '1', '0']
package org . w3c . dom ; public interface NodeList { public Node item ( int index ) ; public int getLength ( ) ; } 	0	['2', '1', '0', '0', '2', '1', '0', '0', '2', '2', '2', '0', '0', '0', '0.75', '0', '0', '0', '1', '1', '0']
package org . apache . xml . serialize ; import java . io . Writer ; import java . io . StringWriter ; import java . io . IOException ; public class Printer { protected final OutputFormat _format ; protected Writer _writer ; protected StringWriter _dtdWriter ; protected Writer _docWriter ; protected IOException _exception ; private static final int BufferSize = 4096 ; private final char [ ] _buffer = new char [ BufferSize ] ; private int _pos = 0 ; public Printer ( Writer writer , OutputFormat format ) { _writer = writer ; _format = format ; _exception = null ; _dtdWriter = null ; _docWriter = null ; _pos = 0 ; } public IOException getException ( ) { return _exception ; } public void enterDTD ( ) { if ( _dtdWriter == null ) { flushLine ( false ) ; _dtdWriter = new StringWriter ( ) ; _docWriter = _writer ; _writer = _dtdWriter ; } } public String leaveDTD ( ) { if ( _writer == _dtdWriter ) { flushLine ( false ) ; _writer = _docWriter ; return _dtdWriter . toString ( ) ; } else return null ; } public void printText ( String text ) { try { int length = text . length ( ) ; for ( int i = 0 ; i < length ; ++ i ) { if ( _pos == BufferSize ) { _writer . write ( _buffer ) ; _pos = 0 ; } _buffer [ _pos ] = text . charAt ( i ) ; ++ _pos ; } } catch ( IOException except ) { if ( _exception == null ) _exception = except ; } } public void printText ( StringBuffer text ) { try { int length = text . length ( ) ; for ( int i = 0 ; i < length ; ++ i ) { if ( _pos == BufferSize ) { _writer . write ( _buffer ) ; _pos = 0 ; } _buffer [ _pos ] = text . charAt ( i ) ; ++ _pos ; } } catch ( IOException except ) { if ( _exception == null ) _exception = except ; } } public void printText ( char [ ] chars , int start , int length ) { try { while ( length -- > 0 ) { if ( _pos == BufferSize ) { _writer . write ( _buffer ) ; _pos = 0 ; } _buffer [ _pos ] = chars [ start ] ; ++ start ; ++ _pos ; } } catch ( IOException except ) { if ( _exception == null ) _exception = except ; } } public void printText ( char ch ) { try { if ( _pos == BufferSize ) { _writer . write ( _buffer ) ; _pos = 0 ; } _buffer [ _pos ] = ch ; ++ _pos ; } catch ( IOException except ) { if ( _exception == null ) _exception = except ; } } public void printSpace ( ) { try { if ( _pos == BufferSize ) { _writer . write ( _buffer ) ; _pos = 0 ; } _buffer [ _pos ] = ' ' ; ++ _pos ; } catch ( IOException except ) { if ( _exception == null ) _exception = except ; } } public void breakLine ( ) { try { if ( _pos == BufferSize ) { _writer . write ( _buffer ) ; _pos = 0 ; } _buffer [ _pos ] = '\n' ; ++ _pos ; } catch ( IOException except ) { if ( _exception == null ) _exception = except ; } } public void breakLine ( boolean preserveSpace ) { breakLine ( ) ; } public void flushLine ( boolean preserveSpace ) { } public void flush ( ) { try { _writer . write ( _buffer , 0 , _pos ) ; _writer . flush ( ) ; } catch ( IOException except ) { if ( _exception == null ) _exception = except ; } _pos = 0 ; } public void indent ( ) { } public void unindent ( ) { } public int getNextIndent ( ) { return 0 ; } public void setNextIndent ( int indent ) { } public void setThisIndent ( int indent ) { } } 	0	['18', '1', '1', '6', '28', '47', '5', '1', '18', '0.720588235', '357', '1', '1', '0', '0.179012346', '0', '0', '18.38888889', '3', '1.7778', '0']
package org . apache . xerces . msg ; import java . util . ListResourceBundle ; public class DatatypeMessages extends ListResourceBundle { public static final Object CONTENTS [ ] [ ] = { { "BadMajorCode" , "The majorCode parameter to createMessage was out of bounds." } , { "FormatFailed" , "An internal error occurred while formatting the following message:\n  " } , { "NotBoolean" , "{0} is not a boolean." } , { "NotDecimal" , "{0} is not a decimal." } , { "FacetsInconsistent" , "Facets are inconsistent with base type." } , { "IllegalFacetValue" , "Illegal value {0} for facet {1}." } , { "IllegalDecimalFacet" , "Illegal Facet for decimal type." } , { "UnknownFacet" , "Unknown Facet: {0}." } , { "InvalidEnumValue" , "Invalid value for Enum constant: {0}." } , { "OutOfBounds" , "{0} is out of bounds:[ {1} {3} X  {4} {2} ]." } , { "NotAnEnumValue" , "{0} is not one of the specified enum values." } , { "NotInteger" , "{0} is not an integer." } , { "IllegalIntegerFacet" , "Illegal Facet for Integer type." } , { "NotReal" , "{0} is not a double." } , { "IllegalRealFacet" , "Illegal Facet for Real type." } , { "ScaleLargerThanPrecision" , "Scale Facet must be less than or equal to Precision Facet" } , { "PrecisionExceeded" , "{0} has exceeded the precision Facet {1}" } , { "ScaleExceeded" , "{0} has execeed the scale Facet {1}" } , { "NotFloat" , "{0} is not a float." } , } ; public Object [ ] [ ] getContents ( ) { return CONTENTS ; } } 	0	['3', '3', '0', '0', '4', '1', '0', '0', '2', '0.5', '260', '0', '0', '0.974358974', '1', '0', '0', '85.33333333', '1', '0.3333', '0']
package org . apache . xml . serialize ; import java . io . Writer ; import java . io . OutputStream ; import java . io . OutputStreamWriter ; import java . io . UnsupportedEncodingException ; class Encodings { static final int DefaultLastPrintable = 0x7F ; static EncodingInfo getEncodingInfo ( String encoding ) { if ( encoding == null ) return new EncodingInfo ( null , DefaultLastPrintable ) ; for ( int i = 0 ; i < _encodings . length ; i ++ ) { if ( _encodings [ i ] . name . equalsIgnoreCase ( encoding ) ) return _encodings [ i ] ; } return new SieveEncodingInfo ( encoding , DefaultLastPrintable ) ; } static final String JIS_DANGER_CHARS = "\\~¢£¥¬" + "—―‖…‾‾∥∯〜" + "＼～￠￡￢￣" ; private static final EncodingInfo [ ] _encodings = new EncodingInfo [ ] { new EncodingInfo ( "ASCII" , 0x7F ) , new EncodingInfo ( "US-ASCII" , 0x7F ) , new EncodingInfo ( "ISO-8859-1" , 0xFF ) , new EncodingInfo ( "ISO-8859-2" , 0xFF ) , new EncodingInfo ( "ISO-8859-3" , 0xFF ) , new EncodingInfo ( "ISO-8859-4" , 0xFF ) , new EncodingInfo ( "ISO-8859-5" , 0xFF ) , new EncodingInfo ( "ISO-8859-6" , 0xFF ) , new EncodingInfo ( "ISO-8859-7" , 0xFF ) , new EncodingInfo ( "ISO-8859-8" , 0xFF ) , new EncodingInfo ( "ISO-8859-9" , 0xFF ) , new EncodingInfo ( "UTF-8" , "UTF8" , 0x10FFFF ) , new SieveEncodingInfo ( "Shift_JIS" , "SJIS" , 0x7F , JIS_DANGER_CHARS ) , new SieveEncodingInfo ( "Windows-31J" , "MS932" , 0x7F , JIS_DANGER_CHARS ) , new SieveEncodingInfo ( "EUC-JP" , null , 0x7F , JIS_DANGER_CHARS ) , new SieveEncodingInfo ( "ISO-2022-JP" , null , 0x7F , JIS_DANGER_CHARS ) , } ; } 	0	['3', '1', '0', '3', '9', '1', '1', '2', '0', '1.166666667', '183', '0.333333333', '1', '0', '0.5', '0', '0', '59', '4', '1.3333', '0']
package org . xml . sax . helpers ; import org . xml . sax . Locator ; public class LocatorImpl implements Locator { public LocatorImpl ( ) { } public LocatorImpl ( Locator locator ) { setPublicId ( locator . getPublicId ( ) ) ; setSystemId ( locator . getSystemId ( ) ) ; setLineNumber ( locator . getLineNumber ( ) ) ; setColumnNumber ( locator . getColumnNumber ( ) ) ; } public String getPublicId ( ) { return publicId ; } public String getSystemId ( ) { return systemId ; } public int getLineNumber ( ) { return lineNumber ; } public int getColumnNumber ( ) { return columnNumber ; } public void setPublicId ( String publicId ) { this . publicId = publicId ; } public void setSystemId ( String systemId ) { this . systemId = systemId ; } public void setLineNumber ( int lineNumber ) { this . lineNumber = lineNumber ; } public void setColumnNumber ( int columnNumber ) { this . columnNumber = columnNumber ; } private String publicId ; private String systemId ; private int lineNumber ; private int columnNumber ; } 	0	['10', '1', '0', '0', '15', '37', '0', '0', '10', '0.777777778', '64', '1', '0', '0', '0.375', '0', '0', '5', '1', '0.8', '0']
package org . apache . xerces . utils ; public class NamespacesScope { public interface NamespacesHandler { public void startNamespaceDeclScope ( int prefix , int uri ) throws Exception ; public void endNamespaceDeclScope ( int prefix ) throws Exception ; } public NamespacesScope ( ) { this ( new NamespacesHandler ( ) { public void startNamespaceDeclScope ( int prefix , int uri ) throws Exception { } public void endNamespaceDeclScope ( int prefix ) throws Exception { } } ) ; } public NamespacesScope ( NamespacesHandler handler ) { fHandler = handler ; fNamespaceMappings [ 0 ] = new int [ 9 ] ; fNamespaceMappings [ 0 ] [ 0 ] = 1 ; } public void setNamespaceForPrefix ( int prefix , int namespace ) throws Exception { int offset = fNamespaceMappings [ fElementDepth ] [ 0 ] ; if ( offset == fNamespaceMappings [ fElementDepth ] . length ) { int [ ] newMappings = new int [ offset + 8 ] ; System . arraycopy ( fNamespaceMappings [ fElementDepth ] , 0 , newMappings , 0 , offset ) ; fNamespaceMappings [ fElementDepth ] = newMappings ; } fNamespaceMappings [ fElementDepth ] [ offset ++ ] = prefix ; fNamespaceMappings [ fElementDepth ] [ offset ++ ] = namespace ; fNamespaceMappings [ fElementDepth ] [ 0 ] = offset ; if ( fElementDepth > 0 ) fHandler . startNamespaceDeclScope ( prefix , namespace ) ; } public int getNamespaceForPrefix ( int prefix ) { for ( int depth = fElementDepth ; depth >= 0 ; depth -- ) { int offset = fNamespaceMappings [ depth ] [ 0 ] ; for ( int i = 1 ; i < offset ; i += 2 ) { if ( prefix == fNamespaceMappings [ depth ] [ i ] ) { return fNamespaceMappings [ depth ] [ i + 1 ] ; } } } return - 1 ; } public void increaseDepth ( ) throws Exception { fElementDepth ++ ; if ( fElementDepth == fNamespaceMappings . length ) { int [ ] [ ] newMappings = new int [ fElementDepth + 8 ] [ ] ; System . arraycopy ( fNamespaceMappings , 0 , newMappings , 0 , fElementDepth ) ; fNamespaceMappings = newMappings ; } if ( fNamespaceMappings [ fElementDepth ] == null ) fNamespaceMappings [ fElementDepth ] = new int [ 9 ] ; fNamespaceMappings [ fElementDepth ] [ 0 ] = 1 ; } public void decreaseDepth ( ) throws Exception { if ( fElementDepth > 0 ) { int offset = fNamespaceMappings [ fElementDepth ] [ 0 ] ; while ( offset > 1 ) { offset -= 2 ; fHandler . endNamespaceDeclScope ( fNamespaceMappings [ fElementDepth ] [ offset ] ) ; } } fElementDepth -- ; } private NamespacesHandler fHandler = null ; private int fElementDepth = 0 ; private int [ ] [ ] fNamespaceMappings = new int [ 8 ] [ ] ; } 	0	['6', '1', '0', '10', '11', '0', '8', '2', '6', '0.133333333', '240', '1', '1', '0', '0.5', '0', '0', '38.5', '4', '1.1667', '0']
package org . w3c . dom . html ; public interface HTMLMetaElement extends HTMLElement { public String getContent ( ) ; public void setContent ( String content ) ; public String getHttpEquiv ( ) ; public void setHttpEquiv ( String httpEquiv ) ; public String getName ( ) ; public void setName ( String name ) ; public String getScheme ( ) ; public void setScheme ( String scheme ) ; } 	0	['8', '1', '0', '0', '8', '28', '0', '0', '8', '2', '8', '0', '0', '0', '0.75', '0', '0', '0', '1', '1', '0']
package org . apache . xerces . validators . datatype ; import java . util . Hashtable ; import java . util . Vector ; import java . util . Enumeration ; import java . util . Locale ; import java . text . Collator ; import java . util . Enumeration ; import java . util . StringTokenizer ; import java . util . NoSuchElementException ; import org . apache . xerces . validators . schema . SchemaSymbols ; import org . apache . xerces . utils . regex . RegularExpression ; public class StringDatatypeValidator extends AbstractDatatypeValidator { private Locale fLocale = null ; DatatypeValidator fBaseValidator = null ; private int fLength = 0 ; private int fMaxLength = Integer . MAX_VALUE ; private int fMinLength = 0 ; private String fPattern = null ; private Vector fEnumeration = null ; private String fMaxInclusive = null ; private String fMaxExclusive = null ; private String fMinInclusive = null ; private String fMinExclusive = null ; private int fFacetsDefined = 0 ; private boolean isMaxExclusiveDefined = false ; private boolean isMaxInclusiveDefined = false ; private boolean isMinExclusiveDefined = false ; private boolean isMinInclusiveDefined = false ; private RegularExpression fRegex = null ; public StringDatatypeValidator ( ) throws InvalidDatatypeFacetException { this ( null , null , false ) ; } public StringDatatypeValidator ( DatatypeValidator base , Hashtable facets , boolean derivedByList ) throws InvalidDatatypeFacetException { setBasetype ( base ) ; if ( facets != null ) { for ( Enumeration e = facets . keys ( ) ; e . hasMoreElements ( ) ; ) { String key = ( String ) e . nextElement ( ) ; if ( key . equals ( SchemaSymbols . ELT_LENGTH ) ) { fFacetsDefined += DatatypeValidator . FACET_LENGTH ; String lengthValue = ( String ) facets . get ( key ) ; try { fLength = Integer . parseInt ( lengthValue ) ; } catch ( NumberFormatException nfe ) { throw new InvalidDatatypeFacetException ( "Length value '" + lengthValue + "' is invalid." ) ; } if ( fLength < 0 ) throw new InvalidDatatypeFacetException ( "Length value '" + lengthValue + "'  must be a nonNegativeInteger." ) ; } else if ( key . equals ( SchemaSymbols . ELT_MINLENGTH ) ) { fFacetsDefined += DatatypeValidator . FACET_MINLENGTH ; String minLengthValue = ( String ) facets . get ( key ) ; try { fMinLength = Integer . parseInt ( minLengthValue ) ; } catch ( NumberFormatException nfe ) { throw new InvalidDatatypeFacetException ( "minLength value '" + minLengthValue + "' is invalid." ) ; } } else if ( key . equals ( SchemaSymbols . ELT_MAXLENGTH ) ) { fFacetsDefined += DatatypeValidator . FACET_MAXLENGTH ; String maxLengthValue = ( String ) facets . get ( key ) ; try { fMaxLength = Integer . parseInt ( maxLengthValue ) ; } catch ( NumberFormatException nfe ) { throw new InvalidDatatypeFacetException ( "maxLength value '" + maxLengthValue + "' is invalid." ) ; } } else if ( key . equals ( SchemaSymbols . ELT_PATTERN ) ) { fFacetsDefined += DatatypeValidator . FACET_PATTERN ; fPattern = ( String ) facets . get ( key ) ; fRegex = new RegularExpression ( fPattern , "X" ) ; } else if ( key . equals ( SchemaSymbols . ELT_ENUMERATION ) ) { fFacetsDefined += DatatypeValidator . FACET_ENUMERATION ; fEnumeration = ( Vector ) facets . get ( key ) ; } else if ( key . equals ( SchemaSymbols . ELT_MAXINCLUSIVE ) ) { fFacetsDefined += DatatypeValidator . FACET_MAXINCLUSIVE ; fMaxInclusive = ( String ) facets . get ( key ) ; } else if ( key . equals ( SchemaSymbols . ELT_MAXEXCLUSIVE ) ) { fFacetsDefined += DatatypeValidator . FACET_MAXEXCLUSIVE ; fMaxExclusive = ( String ) facets . get ( key ) ; } else if ( key . equals ( SchemaSymbols . ELT_MININCLUSIVE ) ) { fFacetsDefined += DatatypeValidator . FACET_MININCLUSIVE ; fMinInclusive = ( String ) facets . get ( key ) ; } else if ( key . equals ( SchemaSymbols . ELT_MINEXCLUSIVE ) ) { fFacetsDefined += DatatypeValidator . FACET_MINEXCLUSIVE ; fMinExclusive = ( String ) facets . get ( key ) ; } else { throw new InvalidDatatypeFacetException ( "invalid facet tag : " + key ) ; } } if ( ( ( fFacetsDefined & DatatypeValidator . FACET_LENGTH ) != 0 ) ) { if ( ( ( fFacetsDefined & DatatypeValidator . FACET_MAXLENGTH ) != 0 ) ) { throw new InvalidDatatypeFacetException ( "It is an error for both length and maxLength to be members of facets." ) ; } else if ( ( ( fFacetsDefined & DatatypeValidator . FACET_MINLENGTH ) != 0 ) ) { throw new InvalidDatatypeFacetException ( "It is an error for both length and minLength to be members of facets." ) ; } } if ( ( ( fFacetsDefined & ( DatatypeValidator . FACET_MINLENGTH | DatatypeValidator . FACET_MAXLENGTH ) ) != 0 ) ) { if ( fMinLength > fMaxLength ) { throw new InvalidDatatypeFacetException ( "Value of minLength = '" + fMinLength + "'must be less than the value of maxLength = '" + fMaxLength + "'." ) ; } } isMaxExclusiveDefined = ( ( fFacetsDefined & DatatypeValidator . FACET_MAXEXCLUSIVE ) != 0 ) ? true : false ; isMaxInclusiveDefined = ( ( fFacetsDefined & DatatypeValidator . FACET_MAXINCLUSIVE ) != 0 ) ? true : false ; isMinExclusiveDefined = ( ( fFacetsDefined & DatatypeValidator . FACET_MINEXCLUSIVE ) != 0 ) ? true : false ; isMinInclusiveDefined = ( ( fFacetsDefined & DatatypeValidator . FACET_MININCLUSIVE ) != 0 ) ? true : false ; if ( isMaxExclusiveDefined && isMaxInclusiveDefined ) { throw new InvalidDatatypeFacetException ( "It is an error for both maxInclusive and maxExclusive to be specified for the same datatype." ) ; } if ( isMinExclusiveDefined && isMinInclusiveDefined ) { throw new InvalidDatatypeFacetException ( "It is an error for both minInclusive and minExclusive to be specified for the same datatype." ) ; } } } public Object validate ( String content , Object state ) throws InvalidDatatypeValueException { checkContent ( content , state ) ; return null ; } public void setLocale ( Locale locale ) { fLocale = locale ; } public Hashtable getFacets ( ) { return null ; } private void checkContent ( String content , Object state ) throws InvalidDatatypeValueException { if ( this . fBaseValidator != null ) { this . fBaseValidator . validate ( content , state ) ; } if ( ( fFacetsDefined & DatatypeValidator . FACET_MAXLENGTH ) != 0 ) { if ( content . length ( ) > fMaxLength ) { throw new InvalidDatatypeValueException ( "Value '" + content + "' with length '" + content . length ( ) + "' exceeds maximum length facet of '" + fMaxLength + "'." ) ; } } if ( ( fFacetsDefined & DatatypeValidator . FACET_MINLENGTH ) != 0 ) { if ( content . length ( ) < fMinLength ) { throw new InvalidDatatypeValueException ( "Value '" + content + "' with length '" + content . length ( ) + "' is less than minimum length facet of '" + fMinLength + "'." ) ; } } if ( ( fFacetsDefined & DatatypeValidator . FACET_LENGTH ) != 0 ) { if ( content . length ( ) != fLength ) { throw new InvalidDatatypeValueException ( "Value '" + content + "' with length '" + content . length ( ) + "' is not equal to length facet '" + fLength + "'." ) ; } } if ( ( fFacetsDefined & DatatypeValidator . FACET_ENUMERATION ) != 0 ) { if ( fEnumeration . contains ( content ) == false ) throw new InvalidDatatypeValueException ( "Value '" + content + "' must be one of " + fEnumeration ) ; } if ( isMaxExclusiveDefined == true ) { int comparisonResult ; comparisonResult = compare ( content , fMaxExclusive ) ; if ( comparisonResult >= 0 ) { throw new InvalidDatatypeValueException ( "MaxExclusive:Value '" + content + "'  must be " + "lexicographically less than" + fMaxExclusive ) ; } } if ( isMaxInclusiveDefined == true ) { int comparisonResult ; comparisonResult = compare ( content , fMaxInclusive ) ; if ( comparisonResult > 0 ) throw new InvalidDatatypeValueException ( "MaxInclusive:Value '" + content + "' must be " + "lexicographically less or equal than" + fMaxInclusive ) ; } if ( isMinExclusiveDefined == true ) { int comparisonResult ; comparisonResult = compare ( content , fMinExclusive ) ; if ( comparisonResult <= 0 ) throw new InvalidDatatypeValueException ( "MinExclusive:Value '" + content + "' must be " + "lexicographically greater than" + fMinExclusive ) ; } if ( isMinInclusiveDefined == true ) { int comparisonResult ; comparisonResult = compare ( content , fMinInclusive ) ; if ( comparisonResult < 0 ) throw new InvalidDatatypeValueException ( "MinInclusive:Value '" + content + "' must be " + "lexicographically greater or equal than '" + fMinInclusive + "'." ) ; } if ( ( fFacetsDefined & DatatypeValidator . FACET_PATTERN ) != 0 ) { if ( fRegex == null || fRegex . matches ( content ) == false ) throw new InvalidDatatypeValueException ( "Value '" + content + "' does not match regular expression facet '" + fPattern + "'." ) ; } } public int compare ( String content , String facetValue ) { Locale loc = Locale . getDefault ( ) ; Collator collator = Collator . getInstance ( loc ) ; return collator . compare ( content , facetValue ) ; } public Object clone ( ) throws CloneNotSupportedException { StringDatatypeValidator newObj = null ; try { newObj = new StringDatatypeValidator ( ) ; newObj . fLocale = this . fLocale ; newObj . fBaseValidator = this . fBaseValidator ; newObj . fLength = this . fLength ; newObj . fMaxLength = this . fMaxLength ; newObj . fMinLength = this . fMinLength ; newObj . fPattern = this . fPattern ; newObj . fEnumeration = this . fEnumeration ; newObj . fMaxInclusive = this . fMaxInclusive ; newObj . fMaxExclusive = this . fMaxExclusive ; newObj . fMinInclusive = this . fMinInclusive ; newObj . fMinExclusive = this . fMinExclusive ; newObj . fFacetsDefined = this . fFacetsDefined ; newObj . isMaxExclusiveDefined = this . isMaxExclusiveDefined ; newObj . isMaxInclusiveDefined = this . isMaxInclusiveDefined ; newObj . isMinExclusiveDefined = this . isMinExclusiveDefined ; newObj . isMinInclusiveDefined = this . isMinInclusiveDefined ; } catch ( InvalidDatatypeFacetException ex ) { ex . printStackTrace ( ) ; } return newObj ; } private void setBasetype ( DatatypeValidator base ) { fBaseValidator = base ; } } 	0	['9', '2', '0', '6', '32', '20', '1', '5', '7', '0.5', '865', '0.941176471', '2', '0.363636364', '0.301587302', '0', '0', '93.22222222', '1', '0.7778', '0']
package org . apache . wml ; public interface WMLIElement extends WMLElement { public void setXmlLang ( String newValue ) ; public String getXmlLang ( ) ; } 	0	['2', '1', '0', '2', '2', '1', '1', '1', '2', '2', '2', '0', '0', '0', '0.75', '0', '0', '0', '1', '1', '0']
package org . w3c . dom . html ; public interface HTMLFormElement extends HTMLElement { public HTMLCollection getElements ( ) ; public int getLength ( ) ; public String getName ( ) ; public void setName ( String name ) ; public String getAcceptCharset ( ) ; public void setAcceptCharset ( String acceptCharset ) ; public String getAction ( ) ; public void setAction ( String action ) ; public String getEnctype ( ) ; public void setEnctype ( String enctype ) ; public String getMethod ( ) ; public void setMethod ( String method ) ; public String getTarget ( ) ; public void setTarget ( String target ) ; public void submit ( ) ; public void reset ( ) ; } 	0	['16', '1', '0', '0', '16', '120', '0', '0', '16', '2', '16', '0', '0', '0', '0.6875', '0', '0', '0', '1', '1', '0']
package org . apache . html . dom ; import org . w3c . dom . * ; import org . w3c . dom . html . * ; public class HTMLParagraphElementImpl extends HTMLElementImpl implements HTMLParagraphElement { public String getAlign ( ) { return getAttribute ( "align" ) ; } public void setAlign ( String align ) { setAttribute ( "align" , align ) ; } public HTMLParagraphElementImpl ( HTMLDocumentImpl owner , String name ) { super ( owner , name ) ; } } 	0	['3', '4', '0', '2', '6', '3', '0', '2', '3', '2', '17', '0', '0', '0.979166667', '0.666666667', '0', '0', '4.666666667', '1', '0.6667', '0']
package org . apache . xerces . utils . regex ; import java . text . CharacterIterator ; public class BMPattern { char [ ] pattern ; int [ ] shiftTable ; boolean ignoreCase ; public BMPattern ( String pat , boolean ignoreCase ) { this ( pat , 256 , ignoreCase ) ; } public BMPattern ( String pat , int tableSize , boolean ignoreCase ) { this . pattern = pat . toCharArray ( ) ; this . shiftTable = new int [ tableSize ] ; this . ignoreCase = ignoreCase ; int length = pattern . length ; for ( int i = 0 ; i < this . shiftTable . length ; i ++ ) this . shiftTable [ i ] = length ; for ( int i = 0 ; i < length ; i ++ ) { char ch = this . pattern [ i ] ; int diff = length - i - 1 ; int index = ch % this . shiftTable . length ; if ( diff < this . shiftTable [ index ] ) this . shiftTable [ index ] = diff ; if ( this . ignoreCase ) { ch = Character . toUpperCase ( ch ) ; index = ch % this . shiftTable . length ; if ( diff < this . shiftTable [ index ] ) this . shiftTable [ index ] = diff ; ch = Character . toLowerCase ( ch ) ; index = ch % this . shiftTable . length ; if ( diff < this . shiftTable [ index ] ) this . shiftTable [ index ] = diff ; } } } public int matches ( CharacterIterator iterator , int start , int limit ) { if ( this . ignoreCase ) return this . matchesIgnoreCase ( iterator , start , limit ) ; int plength = this . pattern . length ; if ( plength == 0 ) return start ; int index = start + plength ; while ( index <= limit ) { int pindex = plength ; int nindex = index + 1 ; char ch ; do { if ( ( ch = iterator . setIndex ( -- index ) ) != this . pattern [ -- pindex ] ) break ; if ( pindex == 0 ) return index ; } while ( pindex > 0 ) ; index += this . shiftTable [ ch % this . shiftTable . length ] + 1 ; if ( index < nindex ) index = nindex ; } return - 1 ; } public int matches ( String str , int start , int limit ) { if ( this . ignoreCase ) return this . matchesIgnoreCase ( str , start , limit ) ; int plength = this . pattern . length ; if ( plength == 0 ) return start ; int index = start + plength ; while ( index <= limit ) { int pindex = plength ; int nindex = index + 1 ; char ch ; do { if ( ( ch = str . charAt ( -- index ) ) != this . pattern [ -- pindex ] ) break ; if ( pindex == 0 ) return index ; } while ( pindex > 0 ) ; index += this . shiftTable [ ch % this . shiftTable . length ] + 1 ; if ( index < nindex ) index = nindex ; } return - 1 ; } public int matches ( char [ ] chars , int start , int limit ) { if ( this . ignoreCase ) return this . matchesIgnoreCase ( chars , start , limit ) ; int plength = this . pattern . length ; if ( plength == 0 ) return start ; int index = start + plength ; while ( index <= limit ) { int pindex = plength ; int nindex = index + 1 ; char ch ; do { if ( ( ch = chars [ -- index ] ) != this . pattern [ -- pindex ] ) break ; if ( pindex == 0 ) return index ; } while ( pindex > 0 ) ; index += this . shiftTable [ ch % this . shiftTable . length ] + 1 ; if ( index < nindex ) index = nindex ; } return - 1 ; } int matchesIgnoreCase ( CharacterIterator iterator , int start , int limit ) { int plength = this . pattern . length ; if ( plength == 0 ) return start ; int index = start + plength ; while ( index <= limit ) { int pindex = plength ; int nindex = index + 1 ; char ch ; do { char ch1 = ch = iterator . setIndex ( -- index ) ; char ch2 = this . pattern [ -- pindex ] ; if ( ch1 != ch2 ) { ch1 = Character . toUpperCase ( ch1 ) ; ch2 = Character . toUpperCase ( ch2 ) ; if ( ch1 != ch2 && Character . toLowerCase ( ch1 ) != Character . toLowerCase ( ch2 ) ) break ; } if ( pindex == 0 ) return index ; } while ( pindex > 0 ) ; index += this . shiftTable [ ch % this . shiftTable . length ] + 1 ; if ( index < nindex ) index = nindex ; } return - 1 ; } int matchesIgnoreCase ( String text , int start , int limit ) { int plength = this . pattern . length ; if ( plength == 0 ) return start ; int index = start + plength ; while ( index <= limit ) { int pindex = plength ; int nindex = index + 1 ; char ch ; do { char ch1 = ch = text . charAt ( -- index ) ; char ch2 = this . pattern [ -- pindex ] ; if ( ch1 != ch2 ) { ch1 = Character . toUpperCase ( ch1 ) ; ch2 = Character . toUpperCase ( ch2 ) ; if ( ch1 != ch2 && Character . toLowerCase ( ch1 ) != Character . toLowerCase ( ch2 ) ) break ; } if ( pindex == 0 ) return index ; } while ( pindex > 0 ) ; index += this . shiftTable [ ch % this . shiftTable . length ] + 1 ; if ( index < nindex ) index = nindex ; } return - 1 ; } int matchesIgnoreCase ( char [ ] chars , int start , int limit ) { int plength = this . pattern . length ; if ( plength == 0 ) return start ; int index = start + plength ; while ( index <= limit ) { int pindex = plength ; int nindex = index + 1 ; char ch ; do { char ch1 = ch = chars [ -- index ] ; char ch2 = this . pattern [ -- pindex ] ; if ( ch1 != ch2 ) { ch1 = Character . toUpperCase ( ch1 ) ; ch2 = Character . toUpperCase ( ch2 ) ; if ( ch1 != ch2 && Character . toLowerCase ( ch1 ) != Character . toLowerCase ( ch2 ) ) break ; } if ( pindex == 0 ) return index ; } while ( pindex > 0 ) ; index += this . shiftTable [ ch % this . shiftTable . length ] + 1 ; if ( index < nindex ) index = nindex ; } return - 1 ; } } 	0	['8', '1', '0', '1', '14', '0', '1', '0', '5', '0.142857143', '574', '0', '0', '0', '0.520833333', '0', '0', '70.375', '8', '5.625', '0']
package org . apache . xml . serialize ; import java . io . InputStream ; import java . io . InputStreamReader ; import java . io . BufferedReader ; import java . util . Hashtable ; public final class HTMLdtd { private static Hashtable _byChar ; private static Hashtable _byName ; private static Hashtable _boolAttrs ; private static Hashtable _elemDefs ; private static final String ENTITIES_RESOURCE = "HTMLEntities.res" ; private static final int ONLY_OPENING = 0x0001 ; private static final int ELEM_CONTENT = 0x0002 ; private static final int PRESERVE = 0x0004 ; private static final int OPT_CLOSING = 0x0008 ; private static final int EMPTY = 0x0010 | ONLY_OPENING ; private static final int ALLOWED_HEAD = 0x0020 ; private static final int CLOSE_P = 0x0040 ; private static final int CLOSE_DD_DT = 0x0080 ; private static final int CLOSE_SELF = 0x0100 ; private static final int CLOSE_TABLE = 0x0200 ; private static final int CLOSE_TH_TD = 0x04000 ; public static boolean isEmptyTag ( String tagName ) { return isElement ( tagName , EMPTY ) ; } public static boolean isElementContent ( String tagName ) { return isElement ( tagName , ELEM_CONTENT ) ; } public static boolean isPreserveSpace ( String tagName ) { return isElement ( tagName , PRESERVE ) ; } public static boolean isOptionalClosing ( String tagName ) { return isElement ( tagName , OPT_CLOSING ) ; } public static boolean isOnlyOpening ( String tagName ) { return isElement ( tagName , ONLY_OPENING ) ; } public static boolean isClosing ( String tagName , String openTag ) { if ( openTag . equalsIgnoreCase ( "HEAD" ) ) return ! isElement ( tagName , ALLOWED_HEAD ) ; if ( openTag . equalsIgnoreCase ( "P" ) ) return isElement ( tagName , CLOSE_P ) ; if ( openTag . equalsIgnoreCase ( "DT" ) || openTag . equalsIgnoreCase ( "DD" ) ) return isElement ( tagName , CLOSE_DD_DT ) ; if ( openTag . equalsIgnoreCase ( "LI" ) || openTag . equalsIgnoreCase ( "OPTION" ) ) return isElement ( tagName , CLOSE_SELF ) ; if ( openTag . equalsIgnoreCase ( "THEAD" ) || openTag . equalsIgnoreCase ( "TFOOT" ) || openTag . equalsIgnoreCase ( "TBODY" ) || openTag . equalsIgnoreCase ( "TR" ) || openTag . equalsIgnoreCase ( "COLGROUP" ) ) return isElement ( tagName , CLOSE_TABLE ) ; if ( openTag . equalsIgnoreCase ( "TH" ) || openTag . equalsIgnoreCase ( "TD" ) ) return isElement ( tagName , CLOSE_TH_TD ) ; return false ; } public static boolean isURI ( String tagName , String attrName ) { return ( attrName . equalsIgnoreCase ( "href" ) || attrName . equalsIgnoreCase ( "src" ) ) ; } public static boolean isBoolean ( String tagName , String attrName ) { String [ ] attrNames ; attrNames = ( String [ ] ) _boolAttrs . get ( tagName . toUpperCase ( ) ) ; if ( attrNames == null ) return false ; for ( int i = 0 ; i < attrNames . length ; ++ i ) if ( attrNames [ i ] . equalsIgnoreCase ( attrName ) ) return true ; return false ; } public static int charFromName ( String name ) { Object value ; initialize ( ) ; value = _byName . get ( name ) ; if ( value != null && value instanceof Character ) return ( ( Character ) value ) . charValue ( ) ; else return - 1 ; } public static String fromChar ( int value ) { if ( value > 0xffff ) return null ; String name ; initialize ( ) ; name = ( String ) _byChar . get ( String . valueOf ( value ) ) ; if ( name == null ) return null ; else return name ; } private static void initialize ( ) { InputStream is = null ; BufferedReader reader = null ; int index ; String name ; String value ; int code ; String line ; if ( _byName != null ) return ; try { _byName = new Hashtable ( ) ; _byChar = new Hashtable ( ) ; is = HTMLdtd . class . getResourceAsStream ( ENTITIES_RESOURCE ) ; if ( is == null ) throw new RuntimeException ( "SER003 The resource [" + ENTITIES_RESOURCE + "] could not be found.\n" + ENTITIES_RESOURCE ) ; reader = new BufferedReader ( new InputStreamReader ( is ) ) ; line = reader . readLine ( ) ; while ( line != null ) { if ( line . length ( ) == 0 || line . charAt ( 0 ) == '#' ) { line = reader . readLine ( ) ; continue ; } index = line . indexOf ( ' ' ) ; if ( index > 1 ) { name = line . substring ( 0 , index ) ; ++ index ; if ( index < line . length ( ) ) { value = line . substring ( index ) ; index = value . indexOf ( ' ' ) ; if ( index > 0 ) value = value . substring ( 0 , index ) ; code = Integer . parseInt ( value ) ; defineEntity ( name , ( char ) code ) ; } } line = reader . readLine ( ) ; } is . close ( ) ; } catch ( Exception except ) { throw new RuntimeException ( "SER003 The resource [" + ENTITIES_RESOURCE + "] could not load: " + except . toString ( ) + "\n" + ENTITIES_RESOURCE + "\t" + except . toString ( ) ) ; } finally { if ( is != null ) { try { is . close ( ) ; } catch ( Exception except ) { } } } } private static void defineEntity ( String name , char value ) { if ( _byName . get ( name ) == null ) { _byName . put ( name , new Character ( value ) ) ; _byChar . put ( String . valueOf ( value ) , name ) ; } } private static void defineElement ( String name , int flags ) { _elemDefs . put ( name , new Integer ( flags ) ) ; } private static void defineBoolean ( String tagName , String attrName ) { defineBoolean ( tagName , new String [ ] { attrName } ) ; } private static void defineBoolean ( String tagName , String [ ] attrNames ) { _boolAttrs . put ( tagName , attrNames ) ; } private static boolean isElement ( String name , int flag ) { Integer flags ; flags = ( Integer ) _elemDefs . get ( name . toUpperCase ( ) ) ; if ( flags == null ) return false ; else return ( ( flags . intValue ( ) & flag ) == flag ) ; } static { _elemDefs = new Hashtable ( ) ; defineElement ( "ADDRESS" , CLOSE_P ) ; defineElement ( "AREA" , EMPTY ) ; defineElement ( "BASE" , EMPTY | ALLOWED_HEAD ) ; defineElement ( "BASEFONT" , EMPTY ) ; defineElement ( "BLOCKQUOTE" , CLOSE_P ) ; defineElement ( "BODY" , OPT_CLOSING ) ; defineElement ( "BR" , EMPTY ) ; defineElement ( "COL" , EMPTY ) ; defineElement ( "COLGROUP" , ELEM_CONTENT | OPT_CLOSING | CLOSE_TABLE ) ; defineElement ( "DD" , OPT_CLOSING | ONLY_OPENING | CLOSE_DD_DT ) ; defineElement ( "DIV" , CLOSE_P ) ; defineElement ( "DL" , ELEM_CONTENT | CLOSE_P ) ; defineElement ( "DT" , OPT_CLOSING | ONLY_OPENING | CLOSE_DD_DT ) ; defineElement ( "FIELDSET" , CLOSE_P ) ; defineElement ( "FORM" , CLOSE_P ) ; defineElement ( "FRAME" , EMPTY | OPT_CLOSING ) ; defineElement ( "H1" , CLOSE_P ) ; defineElement ( "H2" , CLOSE_P ) ; defineElement ( "H3" , CLOSE_P ) ; defineElement ( "H4" , CLOSE_P ) ; defineElement ( "H5" , CLOSE_P ) ; defineElement ( "H6" , CLOSE_P ) ; defineElement ( "HEAD" , ELEM_CONTENT | OPT_CLOSING ) ; defineElement ( "HR" , EMPTY | CLOSE_P ) ; defineElement ( "HTML" , ELEM_CONTENT | OPT_CLOSING ) ; defineElement ( "IMG" , EMPTY ) ; defineElement ( "INPUT" , EMPTY ) ; defineElement ( "ISINDEX" , EMPTY | ALLOWED_HEAD ) ; defineElement ( "LI" , OPT_CLOSING | ONLY_OPENING | CLOSE_SELF ) ; defineElement ( "LINK" , EMPTY | ALLOWED_HEAD ) ; defineElement ( "MAP" , ALLOWED_HEAD ) ; defineElement ( "META" , EMPTY | ALLOWED_HEAD ) ; defineElement ( "OL" , ELEM_CONTENT | CLOSE_P ) ; defineElement ( "OPTGROUP" , ELEM_CONTENT ) ; defineElement ( "OPTION" , OPT_CLOSING | ONLY_OPENING | CLOSE_SELF ) ; defineElement ( "P" , OPT_CLOSING | CLOSE_P | CLOSE_SELF ) ; defineElement ( "PARAM" , EMPTY ) ; defineElement ( "PRE" , PRESERVE | CLOSE_P ) ; defineElement ( "SCRIPT" , ALLOWED_HEAD | PRESERVE ) ; defineElement ( "NOSCRIPT" , ALLOWED_HEAD | PRESERVE ) ; defineElement ( "SELECT" , ELEM_CONTENT ) ; defineElement ( "STYLE" , ALLOWED_HEAD | PRESERVE ) ; defineElement ( "TABLE" , ELEM_CONTENT | CLOSE_P ) ; defineElement ( "TBODY" , ELEM_CONTENT | OPT_CLOSING | CLOSE_TABLE ) ; defineElement ( "TD" , OPT_CLOSING | CLOSE_TH_TD ) ; defineElement ( "TEXTAREA" , PRESERVE ) ; defineElement ( "TFOOT" , ELEM_CONTENT | OPT_CLOSING | CLOSE_TABLE ) ; defineElement ( "TH" , OPT_CLOSING | CLOSE_TH_TD ) ; defineElement ( "THEAD" , ELEM_CONTENT | OPT_CLOSING | CLOSE_TABLE ) ; defineElement ( "TITLE" , ALLOWED_HEAD ) ; defineElement ( "TR" , ELEM_CONTENT | OPT_CLOSING | CLOSE_TABLE ) ; defineElement ( "UL" , ELEM_CONTENT | CLOSE_P ) ; _boolAttrs = new Hashtable ( ) ; defineBoolean ( "AREA" , "href" ) ; defineBoolean ( "BUTTON" , "disabled" ) ; defineBoolean ( "DIR" , "compact" ) ; defineBoolean ( "DL" , "compact" ) ; defineBoolean ( "FRAME" , "noresize" ) ; defineBoolean ( "HR" , "noshade" ) ; defineBoolean ( "IMAGE" , "ismap" ) ; defineBoolean ( "INPUT" , new String [ ] { "defaultchecked" , "checked" , "readonly" , "disabled" } ) ; defineBoolean ( "LINK" , "link" ) ; defineBoolean ( "MENU" , "compact" ) ; defineBoolean ( "OBJECT" , "declare" ) ; defineBoolean ( "OL" , "compact" ) ; defineBoolean ( "OPTGROUP" , "disabled" ) ; defineBoolean ( "OPTION" , new String [ ] { "default-selected" , "selected" , "disabled" } ) ; defineBoolean ( "SCRIPT" , "defer" ) ; defineBoolean ( "SELECT" , new String [ ] { "multiple" , "disabled" } ) ; defineBoolean ( "STYLE" , "disabled" ) ; defineBoolean ( "TD" , "nowrap" ) ; defineBoolean ( "TH" , "nowrap" ) ; defineBoolean ( "TEXTAREA" , new String [ ] { "disabled" , "readonly" } ) ; defineBoolean ( "UL" , "compact" ) ; initialize ( ) ; } } 	0	['19', '1', '0', '1', '50', '149', '1', '0', '11', '0.967320261', '709', '0.941176471', '0', '0', '0.233333333', '0', '0', '35.42105263', '15', '2.8421', '0']
package org . apache . html . dom ; import org . w3c . dom . * ; import org . w3c . dom . html . * ; public class HTMLTableSectionElementImpl extends HTMLElementImpl implements HTMLTableSectionElement { public String getAlign ( ) { return capitalize ( getAttribute ( "align" ) ) ; } public void setAlign ( String align ) { setAttribute ( "align" , align ) ; } public String getCh ( ) { String ch ; ch = getAttribute ( "char" ) ; if ( ch != null && ch . length ( ) > 1 ) ch = ch . substring ( 0 , 1 ) ; return ch ; } public void setCh ( String ch ) { if ( ch != null && ch . length ( ) > 1 ) ch = ch . substring ( 0 , 1 ) ; setAttribute ( "char" , ch ) ; } public String getChOff ( ) { return getAttribute ( "charoff" ) ; } public void setChOff ( String chOff ) { setAttribute ( "charoff" , chOff ) ; } public String getVAlign ( ) { return capitalize ( getAttribute ( "valign" ) ) ; } public void setVAlign ( String vAlign ) { setAttribute ( "valign" , vAlign ) ; } public HTMLCollection getRows ( ) { if ( _rows == null ) _rows = new HTMLCollectionImpl ( this , HTMLCollectionImpl . ROW ) ; return _rows ; } public HTMLElement insertRow ( int index ) { HTMLTableRowElementImpl newRow ; newRow = new HTMLTableRowElementImpl ( ( HTMLDocumentImpl ) getOwnerDocument ( ) , "TR" ) ; newRow . insertCell ( 0 ) ; if ( insertRowX ( index , newRow ) >= 0 ) appendChild ( newRow ) ; return newRow ; } int insertRowX ( int index , HTMLTableRowElementImpl newRow ) { Node child ; child = getFirstChild ( ) ; while ( child != null ) { if ( child instanceof HTMLTableRowElement ) { if ( index == 0 ) { insertBefore ( newRow , child ) ; return - 1 ; } -- index ; } child = child . getNextSibling ( ) ; } return index ; } public void deleteRow ( int index ) { deleteRowX ( index ) ; } int deleteRowX ( int index ) { Node child ; child = getFirstChild ( ) ; while ( child != null ) { if ( child instanceof HTMLTableRowElement ) { if ( index == 0 ) { removeChild ( child ) ; return - 1 ; } -- index ; } child = child . getNextSibling ( ) ; } return index ; } public HTMLTableSectionElementImpl ( HTMLDocumentImpl owner , String name ) { super ( owner , name ) ; } private HTMLCollectionImpl _rows ; } 	0	['14', '4', '0', '5', '29', '91', '2', '4', '12', '1', '172', '1', '1', '0.878504673', '0.357142857', '0', '0', '11.21428571', '4', '1.7857', '0']
package org . apache . wml . dom ; import org . apache . wml . * ; public class WMLEmElementImpl extends WMLElementImpl implements WMLEmElement { public WMLEmElementImpl ( WMLDocumentImpl owner , String tagName ) { super ( owner , tagName ) ; } public void setClassName ( String newValue ) { setAttribute ( "class" , newValue ) ; } public String getClassName ( ) { return getAttribute ( "class" ) ; } public void setXmlLang ( String newValue ) { setAttribute ( "xml:lang" , newValue ) ; } public String getXmlLang ( ) { return getAttribute ( "xml:lang" ) ; } public void setId ( String newValue ) { setAttribute ( "id" , newValue ) ; } public String getId ( ) { return getAttribute ( "id" ) ; } } 	0	['7', '4', '0', '3', '10', '21', '0', '3', '7', '2', '39', '0', '0', '0.931818182', '0.571428571', '1', '6', '4.571428571', '1', '0.8571', '0']
package org . apache . wml ; public interface WMLUElement extends WMLElement { public void setXmlLang ( String newValue ) ; public String getXmlLang ( ) ; } 	0	['2', '1', '0', '2', '2', '1', '1', '1', '2', '2', '2', '0', '0', '0', '0.75', '0', '0', '0', '1', '1', '0']
package org . apache . xerces . dom ; import org . w3c . dom . * ; public class ProcessingInstructionImpl extends CharacterDataImpl implements ProcessingInstruction { static final long serialVersionUID = 7554435174099981510L ; protected String target ; public ProcessingInstructionImpl ( DocumentImpl ownerDoc , String target , String data ) { super ( ownerDoc , data ) ; this . target = target ; } public short getNodeType ( ) { return Node . PROCESSING_INSTRUCTION_NODE ; } public String getNodeName ( ) { if ( needsSyncData ( ) ) { synchronizeData ( ) ; } return target ; } public String getTarget ( ) { if ( needsSyncData ( ) ) { synchronizeData ( ) ; } return target ; } public String getData ( ) { if ( needsSyncData ( ) ) { synchronizeData ( ) ; } return data ; } public void setData ( String data ) { setNodeValue ( data ) ; } } 	0	['6', '3', '1', '4', '10', '9', '3', '2', '6', '0.9', '46', '0.5', '0', '0.915254237', '0.5', '1', '5', '6.333333333', '2', '1.3333', '0']
package org . xml . sax ; public class SAXException extends Exception { public SAXException ( String message ) { super ( message ) ; this . exception = null ; } public SAXException ( Exception e ) { super ( ) ; this . exception = e ; } public SAXException ( String message , Exception e ) { super ( message ) ; this . exception = e ; } public String getMessage ( ) { String message = super . getMessage ( ) ; if ( message == null && exception != null ) { return exception . getMessage ( ) ; } else { return message ; } } public Exception getException ( ) { return exception ; } public String toString ( ) { if ( exception != null ) { return exception . toString ( ) ; } else { return super . toString ( ) ; } } private Exception exception ; } 	0	['6', '3', '3', '0', '10', '0', '0', '0', '6', '0', '54', '1', '0', '0.85', '0.555555556', '1', '2', '7.833333333', '3', '1', '0']
package org . apache . xerces . dom ; import org . w3c . dom . ranges . * ; public class RangeExceptionImpl extends RangeException { public RangeExceptionImpl ( short code , String message ) { super ( code , message ) ; } } 	0	['1', '5', '0', '1', '2', '0', '1', '0', '1', '2', '6', '0', '0', '1', '1', '0', '0', '5', '0', '0', '0']
package org . apache . html . dom ; import org . w3c . dom . * ; import org . w3c . dom . html . * ; public class HTMLIFrameElementImpl extends HTMLElementImpl implements HTMLIFrameElement { public String getAlign ( ) { return capitalize ( getAttribute ( "align" ) ) ; } public void setAlign ( String align ) { setAttribute ( "align" , align ) ; } public String getFrameBorder ( ) { return getAttribute ( "frameborder" ) ; } public void setFrameBorder ( String frameBorder ) { setAttribute ( "frameborder" , frameBorder ) ; } public String getHeight ( ) { return getAttribute ( "height" ) ; } public void setHeight ( String height ) { setAttribute ( "height" , height ) ; } public String getLongDesc ( ) { return getAttribute ( "longdesc" ) ; } public void setLongDesc ( String longDesc ) { setAttribute ( "longdesc" , longDesc ) ; } public String getMarginHeight ( ) { return getAttribute ( "marginheight" ) ; } public void setMarginHeight ( String marginHeight ) { setAttribute ( "marginheight" , marginHeight ) ; } public String getMarginWidth ( ) { return getAttribute ( "marginwidth" ) ; } public void setMarginWidth ( String marginWidth ) { setAttribute ( "marginwidth" , marginWidth ) ; } public String getName ( ) { return getAttribute ( "name" ) ; } public void setName ( String name ) { setAttribute ( "name" , name ) ; } public String getScrolling ( ) { return capitalize ( getAttribute ( "scrolling" ) ) ; } public void setScrolling ( String scrolling ) { setAttribute ( "scrolling" , scrolling ) ; } public String getSrc ( ) { return getAttribute ( "src" ) ; } public void setSrc ( String src ) { setAttribute ( "src" , src ) ; } public String getWidth ( ) { return getAttribute ( "width" ) ; } public void setWidth ( String width ) { setAttribute ( "width" , width ) ; } public HTMLIFrameElementImpl ( HTMLDocumentImpl owner , String name ) { super ( owner , name ) ; } } 	0	['21', '4', '0', '2', '25', '210', '0', '2', '21', '2', '120', '0', '0', '0.824561404', '0.523809524', '0', '0', '4.714285714', '1', '0.9524', '0']
package org . apache . html . dom ; import org . w3c . dom . * ; import org . w3c . dom . html . * ; public class HTMLScriptElementImpl extends HTMLElementImpl implements HTMLScriptElement { public String getText ( ) { Node child ; String text ; child = getFirstChild ( ) ; text = "" ; while ( child != null ) { if ( child instanceof Text ) text = text + ( ( Text ) child ) . getData ( ) ; child = child . getNextSibling ( ) ; } return text ; } public void setText ( String text ) { Node child ; Node next ; child = getFirstChild ( ) ; while ( child != null ) { next = child . getNextSibling ( ) ; removeChild ( child ) ; child = next ; } insertBefore ( getOwnerDocument ( ) . createTextNode ( text ) , getFirstChild ( ) ) ; } public String getHtmlFor ( ) { return getAttribute ( "for" ) ; } public void setHtmlFor ( String htmlFor ) { setAttribute ( "for" , htmlFor ) ; } public String getEvent ( ) { return getAttribute ( "event" ) ; } public void setEvent ( String event ) { setAttribute ( "event" , event ) ; } public String getCharset ( ) { return getAttribute ( "charset" ) ; } public void setCharset ( String charset ) { setAttribute ( "charset" , charset ) ; } public boolean getDefer ( ) { return getBinary ( "defer" ) ; } public void setDefer ( boolean defer ) { setAttribute ( "defer" , defer ) ; } public String getSrc ( ) { return getAttribute ( "src" ) ; } public void setSrc ( String src ) { setAttribute ( "src" , src ) ; } public String getType ( ) { return getAttribute ( "type" ) ; } public void setType ( String type ) { setAttribute ( "type" , type ) ; } public HTMLScriptElementImpl ( HTMLDocumentImpl owner , String name ) { super ( owner , name ) ; } } 	0	['15', '4', '0', '2', '30', '105', '0', '2', '15', '2', '126', '0', '0', '0.87037037', '0.4', '0', '0', '7.4', '3', '1.1333', '0']
package org . w3c . dom . html ; public interface HTMLDListElement extends HTMLElement { public boolean getCompact ( ) ; public void setCompact ( boolean compact ) ; } 	0	['2', '1', '0', '0', '2', '1', '0', '0', '2', '2', '2', '0', '0', '0', '0.75', '0', '0', '0', '1', '1', '0']
package org . apache . xerces . validators . common ; import org . apache . xerces . utils . QName ; import org . apache . xerces . validators . schema . SubstitutionGroupComparator ; public interface XMLContentModel { public int validateContent ( QName children [ ] , int offset , int length ) throws Exception ; public int validateContentSpecial ( QName children [ ] , int offset , int length ) throws Exception ; public void setSubstitutionGroupComparator ( SubstitutionGroupComparator comparator ) ; public int whatCanGoHere ( boolean fullyValid , InsertableElementsInfo info ) throws Exception ; public ContentLeafNameTypeVector getContentLeafNameTypeVector ( ) ; } 	0	['5', '1', '0', '10', '5', '10', '6', '4', '5', '2', '5', '0', '0', '0', '0.4', '0', '0', '0', '1', '1', '0']
package org . apache . html . dom ; import org . w3c . dom . * ; import org . w3c . dom . html . * ; public class HTMLFontElementImpl extends HTMLElementImpl implements HTMLFontElement { public String getColor ( ) { return capitalize ( getAttribute ( "color" ) ) ; } public void setColor ( String color ) { setAttribute ( "color" , color ) ; } public String getFace ( ) { return capitalize ( getAttribute ( "face" ) ) ; } public void setFace ( String face ) { setAttribute ( "face" , face ) ; } public String getSize ( ) { return getAttribute ( "size" ) ; } public void setSize ( String size ) { setAttribute ( "size" , size ) ; } public HTMLFontElementImpl ( HTMLDocumentImpl owner , String name ) { super ( owner , name ) ; } } 	0	['7', '4', '0', '2', '11', '21', '0', '2', '7', '2', '43', '0', '0', '0.94', '0.571428571', '0', '0', '5.142857143', '1', '0.8571', '0']
package org . w3c . dom ; public interface CDATASection extends Text { } 	0	['0', '1', '0', '0', '0', '0', '0', '0', '0', '2', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0']
package org . apache . html . dom ; import org . w3c . dom . * ; import org . w3c . dom . html . * ; public class HTMLTableCaptionElementImpl extends HTMLElementImpl implements HTMLTableCaptionElement { public String getAlign ( ) { return getAttribute ( "align" ) ; } public void setAlign ( String align ) { setAttribute ( "align" , align ) ; } public HTMLTableCaptionElementImpl ( HTMLDocumentImpl owner , String name ) { super ( owner , name ) ; } } 	0	['3', '4', '0', '3', '6', '3', '1', '2', '3', '2', '17', '0', '0', '0.979166667', '0.666666667', '0', '0', '4.666666667', '1', '0.6667', '0']
package org . apache . xerces . validators . common ; import org . apache . xerces . framework . XMLContentSpec ; import org . apache . xerces . utils . ImplementationMessages ; import org . apache . xerces . utils . QName ; import org . apache . xerces . validators . schema . SubstitutionGroupComparator ; public class DFAContentModel implements XMLContentModel { private static final int EPSILON = - 2 ; private static final int EOC = - 3 ; private static final boolean DEBUG_VALIDATE_CONTENT = false ; private SubstitutionGroupComparator comparator = null ; private QName fElemMap [ ] = null ; private int fElemMapType [ ] = null ; private int fElemMapSize = 0 ; private boolean fDTD ; private int fEOCIndex = 0 ; private int fEOCPos = 0 ; private int fEpsilonIndex = 0 ; private boolean fFinalStateFlags [ ] = null ; private CMStateSet fFollowList [ ] = null ; private CMNode fHeadNode = null ; private int fLeafCount = 0 ; private CMLeaf fLeafList [ ] = null ; private int fLeafListType [ ] = null ; private ContentLeafNameTypeVector fLeafNameTypeVector = null ; private int fTransTable [ ] [ ] = null ; private int fTransTableSize = 0 ; private boolean fEmptyContentIsValid = false ; private QName fQName = new QName ( ) ; public DFAContentModel ( CMNode syntaxTree , int leafCount ) throws CMException { this ( syntaxTree , leafCount , false ) ; } public DFAContentModel ( CMNode syntaxTree , int leafCount , boolean dtd ) throws CMException { fLeafCount = leafCount ; fEpsilonIndex = EPSILON ; fEOCIndex = EOC ; fDTD = dtd ; DFAContentModel . time -= System . currentTimeMillis ( ) ; buildDFA ( syntaxTree ) ; DFAContentModel . time += System . currentTimeMillis ( ) ; if ( DEBUG_VALIDATE_CONTENT ) System . out . println ( "DFA build: " + DFAContentModel . time + "ms" ) ; } private static long time = 0 ; public int validateContent ( QName children [ ] , int offset , int length ) throws CMException { if ( DEBUG_VALIDATE_CONTENT ) System . out . println ( "DFAContentModel#validateContent" ) ; if ( length == 0 ) { if ( DEBUG_VALIDATE_CONTENT ) { System . out . println ( "!!! no children" ) ; System . out . println ( "elemMap=" + fElemMap ) ; for ( int i = 0 ; i < fElemMap . length ; i ++ ) { int uriIndex = fElemMap [ i ] . uri ; int localpartIndex = fElemMap [ i ] . localpart ; } System . out . println ( "EOCIndex=" + fEOCIndex ) ; } return fEmptyContentIsValid ? - 1 : 0 ; } int curState = 0 ; int nextState = 0 ; for ( int childIndex = 0 ; childIndex < length ; childIndex ++ ) { final QName curElem = children [ offset + childIndex ] ; int elemIndex = 0 ; for ( ; elemIndex < fElemMapSize ; elemIndex ++ ) { if ( fDTD ) { if ( fElemMap [ elemIndex ] . rawname == curElem . rawname ) { nextState = fTransTable [ curState ] [ elemIndex ] ; if ( nextState != - 1 ) break ; } } else { int type = fElemMapType [ elemIndex ] & 0x0f ; if ( type == XMLContentSpec . CONTENTSPECNODE_LEAF ) { if ( fElemMap [ elemIndex ] . uri == curElem . uri && fElemMap [ elemIndex ] . localpart == curElem . localpart ) { nextState = fTransTable [ curState ] [ elemIndex ] ; if ( nextState != - 1 ) break ; } } else if ( type == XMLContentSpec . CONTENTSPECNODE_ANY ) { int uri = fElemMap [ elemIndex ] . uri ; if ( uri == - 1 || uri == curElem . uri ) { nextState = fTransTable [ curState ] [ elemIndex ] ; if ( nextState != - 1 ) break ; } } else if ( type == XMLContentSpec . CONTENTSPECNODE_ANY_LOCAL ) { if ( curElem . uri == - 1 ) { nextState = fTransTable [ curState ] [ elemIndex ] ; if ( nextState != - 1 ) break ; } } else if ( type == XMLContentSpec . CONTENTSPECNODE_ANY_OTHER ) { if ( fElemMap [ elemIndex ] . uri != curElem . uri ) { nextState = fTransTable [ curState ] [ elemIndex ] ; if ( nextState != - 1 ) break ; } } } } if ( nextState == - 1 ) { if ( DEBUG_VALIDATE_CONTENT ) System . out . println ( "!!! not a legal transition" ) ; return childIndex ; } if ( elemIndex == fElemMapSize ) { if ( DEBUG_VALIDATE_CONTENT ) { System . out . println ( "!!! didn't find it" ) ; System . out . println ( "curElem : " + curElem ) ; for ( int i = 0 ; i < fElemMapSize ; i ++ ) { System . out . println ( "fElemMap[" + i + "] = " + fElemMap [ i ] ) ; System . out . println ( "fElemMapType[" + i + "] = " + fElemMapType [ i ] ) ; } } return childIndex ; } curState = nextState ; nextState = 0 ; } if ( DEBUG_VALIDATE_CONTENT ) System . out . println ( "curState=" + curState + ", childCount=" + length ) ; if ( ! fFinalStateFlags [ curState ] ) return length ; return - 1 ; } private boolean isEqual ( QName name1 , QName name2 ) { return name1 . localpart == name2 . localpart && name1 . uri == name2 . uri ; } public int validateContentSpecial ( QName children [ ] , int offset , int length ) throws Exception { if ( DEBUG_VALIDATE_CONTENT ) System . out . println ( "DFAContentModel#validateContentSpecial" ) ; if ( comparator == null ) { return validateContent ( children , offset , length ) ; } if ( length == 0 ) { if ( DEBUG_VALIDATE_CONTENT ) { System . out . println ( "!!! no children" ) ; System . out . println ( "elemMap=" + fElemMap ) ; for ( int i = 0 ; i < fElemMap . length ; i ++ ) { int uriIndex = fElemMap [ i ] . uri ; int localpartIndex = fElemMap [ i ] . localpart ; } System . out . println ( "EOCIndex=" + fEOCIndex ) ; } return fEmptyContentIsValid ? - 1 : 0 ; } int curState = 0 ; int nextState = 0 ; for ( int childIndex = 0 ; childIndex < length ; childIndex ++ ) { final QName curElem = children [ offset + childIndex ] ; int elemIndex = 0 ; for ( ; elemIndex < fElemMapSize ; elemIndex ++ ) { int type = fElemMapType [ elemIndex ] & 0x0f ; if ( type == XMLContentSpec . CONTENTSPECNODE_LEAF ) { if ( comparator . isEquivalentTo ( curElem , fElemMap [ elemIndex ] ) ) { nextState = fTransTable [ curState ] [ elemIndex ] ; if ( nextState != - 1 ) break ; } } else if ( type == XMLContentSpec . CONTENTSPECNODE_ANY ) { int uri = fElemMap [ elemIndex ] . uri ; if ( uri == - 1 || uri == curElem . uri ) { nextState = fTransTable [ curState ] [ elemIndex ] ; if ( nextState != - 1 ) break ; } } else if ( type == XMLContentSpec . CONTENTSPECNODE_ANY_LOCAL ) { if ( curElem . uri == - 1 ) { nextState = fTransTable [ curState ] [ elemIndex ] ; if ( nextState != - 1 ) break ; } } else if ( type == XMLContentSpec . CONTENTSPECNODE_ANY_OTHER ) { if ( fElemMap [ elemIndex ] . uri != curElem . uri ) { nextState = fTransTable [ curState ] [ elemIndex ] ; if ( nextState != - 1 ) break ; } } } if ( nextState == - 1 ) { if ( DEBUG_VALIDATE_CONTENT ) System . out . println ( "!!! not a legal transition" ) ; return childIndex ; } if ( elemIndex == fElemMapSize ) { if ( DEBUG_VALIDATE_CONTENT ) { System . out . println ( "!!! didn't find it" ) ; System . out . println ( "curElem : " + curElem ) ; for ( int i = 0 ; i < fElemMapSize ; i ++ ) { System . out . println ( "fElemMap[" + i + "] = " + fElemMap [ i ] ) ; System . out . println ( "fElemMapType[" + i + "] = " + fElemMapType [ i ] ) ; } } return childIndex ; } curState = nextState ; nextState = 0 ; } if ( DEBUG_VALIDATE_CONTENT ) System . out . println ( "curState=" + curState + ", childCount=" + length ) ; if ( ! fFinalStateFlags [ curState ] ) return length ; return - 1 ; } public void setSubstitutionGroupComparator ( SubstitutionGroupComparator comparator ) { this . comparator = comparator ; } public int whatCanGoHere ( boolean fullyValid , InsertableElementsInfo info ) throws CMException { int curState = 0 ; for ( int childIndex = 0 ; childIndex < info . insertAt ; childIndex ++ ) { final QName curElem = info . curChildren [ childIndex ] ; int elemIndex = 0 ; for ( ; elemIndex < fElemMapSize ; elemIndex ++ ) { if ( fElemMap [ elemIndex ] . uri == curElem . uri && fElemMap [ elemIndex ] . localpart == curElem . localpart ) break ; } if ( elemIndex == fElemMapSize ) return childIndex ; curState = fTransTable [ curState ] [ elemIndex ] ; if ( curState == - 1 ) return childIndex ; } final int insertState = curState ; info . canHoldPCData = false ; info . isValidEOC = fFinalStateFlags [ insertState ] ; info . resultsCount = fElemMapSize ; if ( ( info . results == null ) || ( info . results . length < info . resultsCount ) ) info . results = new boolean [ info . resultsCount ] ; if ( ( info . possibleChildren == null ) || ( info . possibleChildren . length < info . resultsCount ) ) { info . possibleChildren = new QName [ info . resultsCount ] ; for ( int i = 0 ; i < info . possibleChildren . length ; i ++ ) { info . possibleChildren [ i ] = new QName ( ) ; } } for ( int index = 0 ; index < fElemMapSize ; index ++ ) { info . possibleChildren [ index ] . setValues ( fElemMap [ index ] ) ; info . results [ index ] = ( fTransTable [ insertState ] [ index ] != - 1 ) ; } if ( fullyValid ) { for ( int index = 0 ; index < info . resultsCount ; index ++ ) { if ( ! info . results [ index ] ) continue ; info . curChildren [ info . insertAt ] = info . possibleChildren [ index ] ; if ( validateContent ( info . curChildren , 0 , info . childCount ) != - 1 ) info . results [ index ] = false ; } } return - 1 ; } public ContentLeafNameTypeVector getContentLeafNameTypeVector ( ) { return fLeafNameTypeVector ; } private void buildDFA ( CMNode syntaxTree ) throws CMException { fQName . setValues ( - 1 , fEOCIndex , fEOCIndex ) ; CMLeaf nodeEOC = new CMLeaf ( fQName ) ; fHeadNode = new CMBinOp ( XMLContentSpec . CONTENTSPECNODE_SEQ , syntaxTree , nodeEOC ) ; fEOCPos = fLeafCount ; nodeEOC . setPosition ( fLeafCount ++ ) ; fLeafList = new CMLeaf [ fLeafCount ] ; fLeafListType = new int [ fLeafCount ] ; postTreeBuildInit ( fHeadNode , 0 ) ; fFollowList = new CMStateSet [ fLeafCount ] ; for ( int index = 0 ; index < fLeafCount ; index ++ ) fFollowList [ index ] = new CMStateSet ( fLeafCount ) ; calcFollowList ( fHeadNode ) ; fElemMap = new QName [ fLeafCount ] ; fElemMapType = new int [ fLeafCount ] ; fElemMapSize = 0 ; for ( int outIndex = 0 ; outIndex < fLeafCount ; outIndex ++ ) { fElemMap [ outIndex ] = new QName ( ) ; if ( ( fLeafListType [ outIndex ] & 0x0f ) != 0 ) { if ( fLeafNameTypeVector == null ) { fLeafNameTypeVector = new ContentLeafNameTypeVector ( ) ; } } final QName element = fLeafList [ outIndex ] . getElement ( ) ; int inIndex = 0 ; for ( ; inIndex < fElemMapSize ; inIndex ++ ) { if ( fDTD ) { if ( fElemMap [ inIndex ] . rawname == element . rawname ) { break ; } } else { if ( fElemMap [ inIndex ] . uri == element . uri && fElemMap [ inIndex ] . localpart == element . localpart && fElemMapType [ inIndex ] == fLeafListType [ outIndex ] ) break ; } } if ( inIndex == fElemMapSize ) { fElemMap [ fElemMapSize ] . setValues ( element ) ; fElemMapType [ fElemMapSize ] = fLeafListType [ outIndex ] ; fElemMapSize ++ ; } } if ( fLeafNameTypeVector != null ) { fLeafNameTypeVector . setValues ( fElemMap , fElemMapType , fElemMapSize ) ; } int [ ] fLeafSorter = new int [ fLeafCount + fElemMapSize ] ; int fSortCount = 0 ; for ( int elemIndex = 0 ; elemIndex < fElemMapSize ; elemIndex ++ ) { for ( int leafIndex = 0 ; leafIndex < fLeafCount ; leafIndex ++ ) { final QName leaf = fLeafList [ leafIndex ] . getElement ( ) ; final QName element = fElemMap [ elemIndex ] ; if ( fDTD ) { if ( leaf . rawname == element . rawname ) { fLeafSorter [ fSortCount ++ ] = leafIndex ; } } else { if ( leaf . uri == element . uri && leaf . localpart == element . localpart ) fLeafSorter [ fSortCount ++ ] = leafIndex ; } } fLeafSorter [ fSortCount ++ ] = - 1 ; } int curArraySize = fLeafCount * 4 ; CMStateSet [ ] statesToDo = new CMStateSet [ curArraySize ] ; fFinalStateFlags = new boolean [ curArraySize ] ; fTransTable = new int [ curArraySize ] [ ] ; CMStateSet setT = fHeadNode . firstPos ( ) ; int unmarkedState = 0 ; int curState = 0 ; fTransTable [ curState ] = makeDefStateList ( ) ; statesToDo [ curState ] = setT ; curState ++ ; java . util . Hashtable stateTable = new java . util . Hashtable ( ) ; while ( unmarkedState < curState ) { setT = statesToDo [ unmarkedState ] ; int [ ] transEntry = fTransTable [ unmarkedState ] ; fFinalStateFlags [ unmarkedState ] = setT . getBit ( fEOCPos ) ; unmarkedState ++ ; CMStateSet newSet = null ; int sorterIndex = 0 ; for ( int elemIndex = 0 ; elemIndex < fElemMapSize ; elemIndex ++ ) { if ( newSet == null ) newSet = new CMStateSet ( fLeafCount ) ; else newSet . zeroBits ( ) ; int leafIndex = fLeafSorter [ sorterIndex ++ ] ; while ( leafIndex != - 1 ) { if ( setT . getBit ( leafIndex ) ) { newSet . union ( fFollowList [ leafIndex ] ) ; } leafIndex = fLeafSorter [ sorterIndex ++ ] ; } if ( ! newSet . isEmpty ( ) ) { Integer stateObj = ( Integer ) stateTable . get ( newSet ) ; int stateIndex = ( stateObj == null ? curState : stateObj . intValue ( ) ) ; if ( stateIndex == curState ) { statesToDo [ curState ] = newSet ; fTransTable [ curState ] = makeDefStateList ( ) ; stateTable . put ( newSet , new Integer ( curState ) ) ; curState ++ ; newSet = null ; } transEntry [ elemIndex ] = stateIndex ; if ( curState == curArraySize ) { final int newSize = ( int ) ( curArraySize * 1.5 ) ; CMStateSet [ ] newToDo = new CMStateSet [ newSize ] ; boolean [ ] newFinalFlags = new boolean [ newSize ] ; int [ ] [ ] newTransTable = new int [ newSize ] [ ] ; for ( int expIndex = 0 ; expIndex < curArraySize ; expIndex ++ ) { newToDo [ expIndex ] = statesToDo [ expIndex ] ; newFinalFlags [ expIndex ] = fFinalStateFlags [ expIndex ] ; newTransTable [ expIndex ] = fTransTable [ expIndex ] ; } curArraySize = newSize ; statesToDo = newToDo ; fFinalStateFlags = newFinalFlags ; fTransTable = newTransTable ; } } } } fEmptyContentIsValid = ( ( CMBinOp ) fHeadNode ) . getLeft ( ) . isNullable ( ) ; if ( DEBUG_VALIDATE_CONTENT ) dumpTree ( fHeadNode , 0 ) ; fHeadNode = null ; fLeafList = null ; fFollowList = null ; } private void calcFollowList ( CMNode nodeCur ) throws CMException { if ( nodeCur . type ( ) == XMLContentSpec . CONTENTSPECNODE_CHOICE ) { calcFollowList ( ( ( CMBinOp ) nodeCur ) . getLeft ( ) ) ; calcFollowList ( ( ( CMBinOp ) nodeCur ) . getRight ( ) ) ; } else if ( nodeCur . type ( ) == XMLContentSpec . CONTENTSPECNODE_SEQ ) { calcFollowList ( ( ( CMBinOp ) nodeCur ) . getLeft ( ) ) ; calcFollowList ( ( ( CMBinOp ) nodeCur ) . getRight ( ) ) ; final CMStateSet last = ( ( CMBinOp ) nodeCur ) . getLeft ( ) . lastPos ( ) ; final CMStateSet first = ( ( CMBinOp ) nodeCur ) . getRight ( ) . firstPos ( ) ; for ( int index = 0 ; index < fLeafCount ; index ++ ) { if ( last . getBit ( index ) ) fFollowList [ index ] . union ( first ) ; } } else if ( nodeCur . type ( ) == XMLContentSpec . CONTENTSPECNODE_ZERO_OR_MORE || nodeCur . type ( ) == XMLContentSpec . CONTENTSPECNODE_ONE_OR_MORE ) { calcFollowList ( ( ( CMUniOp ) nodeCur ) . getChild ( ) ) ; final CMStateSet first = nodeCur . firstPos ( ) ; final CMStateSet last = nodeCur . lastPos ( ) ; for ( int index = 0 ; index < fLeafCount ; index ++ ) { if ( last . getBit ( index ) ) fFollowList [ index ] . union ( first ) ; } } else if ( nodeCur . type ( ) == XMLContentSpec . CONTENTSPECNODE_ZERO_OR_ONE ) { calcFollowList ( ( ( CMUniOp ) nodeCur ) . getChild ( ) ) ; } } private void dumpTree ( CMNode nodeCur , int level ) throws CMException { for ( int index = 0 ; index < level ; index ++ ) System . out . print ( "   " ) ; int type = nodeCur . type ( ) ; switch ( type & 0x0f ) { case XMLContentSpec . CONTENTSPECNODE_CHOICE : case XMLContentSpec . CONTENTSPECNODE_SEQ : { if ( type == XMLContentSpec . CONTENTSPECNODE_CHOICE ) System . out . print ( "Choice Node " ) ; else System . out . print ( "Seq Node " ) ; if ( nodeCur . isNullable ( ) ) System . out . print ( "Nullable " ) ; System . out . print ( "firstPos=" ) ; System . out . print ( nodeCur . firstPos ( ) . toString ( ) ) ; System . out . print ( " lastPos=" ) ; System . out . println ( nodeCur . lastPos ( ) . toString ( ) ) ; dumpTree ( ( ( CMBinOp ) nodeCur ) . getLeft ( ) , level + 1 ) ; dumpTree ( ( ( CMBinOp ) nodeCur ) . getRight ( ) , level + 1 ) ; break ; } case XMLContentSpec . CONTENTSPECNODE_ZERO_OR_MORE : case XMLContentSpec . CONTENTSPECNODE_ONE_OR_MORE : case XMLContentSpec . CONTENTSPECNODE_ZERO_OR_ONE : { System . out . print ( "Rep Node " ) ; if ( nodeCur . isNullable ( ) ) System . out . print ( "Nullable " ) ; System . out . print ( "firstPos=" ) ; System . out . print ( nodeCur . firstPos ( ) . toString ( ) ) ; System . out . print ( " lastPos=" ) ; System . out . println ( nodeCur . lastPos ( ) . toString ( ) ) ; dumpTree ( ( ( CMUniOp ) nodeCur ) . getChild ( ) , level + 1 ) ; break ; } case XMLContentSpec . CONTENTSPECNODE_LEAF : { System . out . print ( "Leaf: (pos=" + ( ( CMLeaf ) nodeCur ) . getPosition ( ) + "), " + ( ( CMLeaf ) nodeCur ) . getElement ( ) + "(elemIndex=" + ( ( CMLeaf ) nodeCur ) . getElement ( ) + ") " ) ; if ( nodeCur . isNullable ( ) ) System . out . print ( " Nullable " ) ; System . out . print ( "firstPos=" ) ; System . out . print ( nodeCur . firstPos ( ) . toString ( ) ) ; System . out . print ( " lastPos=" ) ; System . out . println ( nodeCur . lastPos ( ) . toString ( ) ) ; break ; } case XMLContentSpec . CONTENTSPECNODE_ANY : case XMLContentSpec . CONTENTSPECNODE_ANY_OTHER : case XMLContentSpec . CONTENTSPECNODE_ANY_LOCAL : { if ( type == XMLContentSpec . CONTENTSPECNODE_ANY ) System . out . print ( "Any Node: " ) ; else if ( type == XMLContentSpec . CONTENTSPECNODE_ANY_LAX ) System . out . print ( "Any lax Node: " ) ; else if ( type == XMLContentSpec . CONTENTSPECNODE_ANY_SKIP ) System . out . print ( "Any skip Node: " ) ; else if ( type == XMLContentSpec . CONTENTSPECNODE_ANY_OTHER ) System . out . print ( "Any other Node: " ) ; else if ( type == XMLContentSpec . CONTENTSPECNODE_ANY_OTHER_LAX ) System . out . print ( "Any other lax Node: " ) ; else if ( type == XMLContentSpec . CONTENTSPECNODE_ANY_OTHER_SKIP ) System . out . print ( "Any other skip Node: " ) ; else if ( type == XMLContentSpec . CONTENTSPECNODE_ANY_LOCAL ) System . out . print ( "Any local Node: " ) ; else if ( type == XMLContentSpec . CONTENTSPECNODE_ANY_LOCAL_LAX ) System . out . print ( "Any local lax Node: " ) ; else if ( type == XMLContentSpec . CONTENTSPECNODE_ANY_LOCAL_SKIP ) System . out . print ( "Any local skip Node: " ) ; System . out . print ( "firstPos=" ) ; System . out . print ( nodeCur . firstPos ( ) . toString ( ) ) ; System . out . print ( " lastPos=" ) ; System . out . println ( nodeCur . lastPos ( ) . toString ( ) ) ; break ; } default : { throw new CMException ( ImplementationMessages . VAL_NIICM ) ; } } } private int [ ] makeDefStateList ( ) { int [ ] retArray = new int [ fElemMapSize ] ; for ( int index = 0 ; index < fElemMapSize ; index ++ ) retArray [ index ] = - 1 ; return retArray ; } private int postTreeBuildInit ( CMNode nodeCur , int curIndex ) throws CMException { nodeCur . setMaxStates ( fLeafCount ) ; if ( ( nodeCur . type ( ) & 0x0f ) == XMLContentSpec . CONTENTSPECNODE_ANY || ( nodeCur . type ( ) & 0x0f ) == XMLContentSpec . CONTENTSPECNODE_ANY_LOCAL || ( nodeCur . type ( ) & 0x0f ) == XMLContentSpec . CONTENTSPECNODE_ANY_OTHER ) { QName qname = new QName ( - 1 , - 1 , - 1 , ( ( CMAny ) nodeCur ) . getURI ( ) ) ; fLeafList [ curIndex ] = new CMLeaf ( qname , ( ( CMAny ) nodeCur ) . getPosition ( ) ) ; fLeafListType [ curIndex ] = nodeCur . type ( ) ; curIndex ++ ; } else if ( ( nodeCur . type ( ) == XMLContentSpec . CONTENTSPECNODE_CHOICE ) || ( nodeCur . type ( ) == XMLContentSpec . CONTENTSPECNODE_SEQ ) ) { curIndex = postTreeBuildInit ( ( ( CMBinOp ) nodeCur ) . getLeft ( ) , curIndex ) ; curIndex = postTreeBuildInit ( ( ( CMBinOp ) nodeCur ) . getRight ( ) , curIndex ) ; } else if ( nodeCur . type ( ) == XMLContentSpec . CONTENTSPECNODE_ZERO_OR_MORE || nodeCur . type ( ) == XMLContentSpec . CONTENTSPECNODE_ONE_OR_MORE || nodeCur . type ( ) == XMLContentSpec . CONTENTSPECNODE_ZERO_OR_ONE ) { curIndex = postTreeBuildInit ( ( ( CMUniOp ) nodeCur ) . getChild ( ) , curIndex ) ; } else if ( nodeCur . type ( ) == XMLContentSpec . CONTENTSPECNODE_LEAF ) { final QName node = ( ( CMLeaf ) nodeCur ) . getElement ( ) ; if ( node . localpart != fEpsilonIndex ) { fLeafList [ curIndex ] = ( CMLeaf ) nodeCur ; fLeafListType [ curIndex ] = XMLContentSpec . CONTENTSPECNODE_LEAF ; curIndex ++ ; } } else { throw new CMException ( ImplementationMessages . VAL_NIICM ) ; } return curIndex ; } } 	0	['14', '1', '0', '13', '58', '41', '1', '12', '7', '0.779264214', '1675', '1', '7', '0', '0.307692308', '0', '0', '117', '3', '1', '0']
package org . apache . html . dom ; import org . w3c . dom . * ; import org . w3c . dom . html . * ; public class HTMLLIElementImpl extends HTMLElementImpl implements HTMLLIElement { public String getType ( ) { return getAttribute ( "type" ) ; } public void setType ( String type ) { setAttribute ( "type" , type ) ; } public int getValue ( ) { return getInteger ( getAttribute ( "value" ) ) ; } public void setValue ( int value ) { setAttribute ( "value" , String . valueOf ( value ) ) ; } public HTMLLIElementImpl ( HTMLDocumentImpl owner , String name ) { super ( owner , name ) ; } } 	0	['5', '4', '0', '2', '10', '10', '0', '2', '5', '2', '31', '0', '0', '0.959183673', '0.45', '1', '2', '5.2', '1', '0.8', '0']
package org . apache . wml ; public interface WMLBElement extends WMLElement { public void setXmlLang ( String newValue ) ; public String getXmlLang ( ) ; } 	0	['2', '1', '0', '2', '2', '1', '1', '1', '2', '2', '2', '0', '0', '0', '0.75', '0', '0', '0', '1', '1', '0']
package org . w3c . dom . html ; public interface HTMLTextAreaElement extends HTMLElement { public String getDefaultValue ( ) ; public void setDefaultValue ( String defaultValue ) ; public HTMLFormElement getForm ( ) ; public String getAccessKey ( ) ; public void setAccessKey ( String accessKey ) ; public int getCols ( ) ; public void setCols ( int cols ) ; public boolean getDisabled ( ) ; public void setDisabled ( boolean disabled ) ; public String getName ( ) ; public void setName ( String name ) ; public boolean getReadOnly ( ) ; public void setReadOnly ( boolean readOnly ) ; public int getRows ( ) ; public void setRows ( int rows ) ; public int getTabIndex ( ) ; public void setTabIndex ( int tabIndex ) ; public String getType ( ) ; public String getValue ( ) ; public void setValue ( String value ) ; public void blur ( ) ; public void focus ( ) ; public void select ( ) ; } 	0	['23', '1', '0', '0', '23', '253', '0', '0', '23', '2', '23', '0', '0', '0', '0.347826087', '0', '0', '0', '1', '1', '0']
package org . apache . xerces . validators . common ; import org . apache . xerces . framework . XMLContentSpec ; import org . apache . xerces . utils . ImplementationMessages ; public class CMBinOp extends CMNode { public CMBinOp ( int type , CMNode leftNode , CMNode rightNode ) throws CMException { super ( type ) ; if ( ( type ( ) != XMLContentSpec . CONTENTSPECNODE_CHOICE ) && ( type ( ) != XMLContentSpec . CONTENTSPECNODE_SEQ ) ) { throw new CMException ( ImplementationMessages . VAL_BST ) ; } fLeftChild = leftNode ; fRightChild = rightNode ; } final CMNode getLeft ( ) { return fLeftChild ; } final CMNode getRight ( ) { return fRightChild ; } boolean isNullable ( ) throws CMException { if ( type ( ) == XMLContentSpec . CONTENTSPECNODE_CHOICE ) return ( fLeftChild . isNullable ( ) || fRightChild . isNullable ( ) ) ; else if ( type ( ) == XMLContentSpec . CONTENTSPECNODE_SEQ ) return ( fLeftChild . isNullable ( ) && fRightChild . isNullable ( ) ) ; else throw new CMException ( ImplementationMessages . VAL_BST ) ; } protected void calcFirstPos ( CMStateSet toSet ) throws CMException { if ( type ( ) == XMLContentSpec . CONTENTSPECNODE_CHOICE ) { toSet . setTo ( fLeftChild . firstPos ( ) ) ; toSet . union ( fRightChild . firstPos ( ) ) ; } else if ( type ( ) == XMLContentSpec . CONTENTSPECNODE_SEQ ) { toSet . setTo ( fLeftChild . firstPos ( ) ) ; if ( fLeftChild . isNullable ( ) ) toSet . union ( fRightChild . firstPos ( ) ) ; } else { throw new CMException ( ImplementationMessages . VAL_BST ) ; } } protected void calcLastPos ( CMStateSet toSet ) throws CMException { if ( type ( ) == XMLContentSpec . CONTENTSPECNODE_CHOICE ) { toSet . setTo ( fLeftChild . lastPos ( ) ) ; toSet . union ( fRightChild . lastPos ( ) ) ; } else if ( type ( ) == XMLContentSpec . CONTENTSPECNODE_SEQ ) { toSet . setTo ( fRightChild . lastPos ( ) ) ; if ( fRightChild . isNullable ( ) ) toSet . union ( fLeftChild . lastPos ( ) ) ; } else { throw new CMException ( ImplementationMessages . VAL_BST ) ; } } private CMNode fLeftChild ; private CMNode fRightChild ; } ; 	0	['6', '2', '0', '5', '14', '0', '2', '3', '1', '0.2', '154', '1', '2', '0.615384615', '0.416666667', '1', '2', '24.33333333', '1', '0.8333', '0']
package org . apache . wml ; public interface WMLPostfieldElement extends WMLElement { public void setValue ( String newValue ) ; public String getValue ( ) ; public void setName ( String newValue ) ; public String getName ( ) ; } 	0	['4', '1', '0', '2', '4', '6', '1', '1', '4', '2', '4', '0', '0', '0', '0.75', '0', '0', '0', '1', '1', '0']
package org . w3c . dom . ranges ; public class RangeException extends RuntimeException { public RangeException ( short code , String message ) { super ( message ) ; this . code = code ; } public short code ; public static final short BAD_BOUNDARYPOINTS_ERR = 1 ; public static final short INVALID_NODE_TYPE_ERR = 2 ; } 	0	['1', '4', '1', '0', '2', '0', '0', '0', '1', '2', '11', '0', '0', '1', '1', '0', '0', '7', '0', '0', '0']
package org . w3c . dom ; public interface Node { public static final short ELEMENT_NODE = 1 ; public static final short ATTRIBUTE_NODE = 2 ; public static final short TEXT_NODE = 3 ; public static final short CDATA_SECTION_NODE = 4 ; public static final short ENTITY_REFERENCE_NODE = 5 ; public static final short ENTITY_NODE = 6 ; public static final short PROCESSING_INSTRUCTION_NODE = 7 ; public static final short COMMENT_NODE = 8 ; public static final short DOCUMENT_NODE = 9 ; public static final short DOCUMENT_TYPE_NODE = 10 ; public static final short DOCUMENT_FRAGMENT_NODE = 11 ; public static final short NOTATION_NODE = 12 ; public String getNodeName ( ) ; public String getNodeValue ( ) throws DOMException ; public void setNodeValue ( String nodeValue ) throws DOMException ; public short getNodeType ( ) ; public Node getParentNode ( ) ; public NodeList getChildNodes ( ) ; public Node getFirstChild ( ) ; public Node getLastChild ( ) ; public Node getPreviousSibling ( ) ; public Node getNextSibling ( ) ; public NamedNodeMap getAttributes ( ) ; public Document getOwnerDocument ( ) ; public Node insertBefore ( Node newChild , Node refChild ) throws DOMException ; public Node replaceChild ( Node newChild , Node oldChild ) throws DOMException ; public Node removeChild ( Node oldChild ) throws DOMException ; public Node appendChild ( Node newChild ) throws DOMException ; public boolean hasChildNodes ( ) ; public Node cloneNode ( boolean deep ) ; public void normalize ( ) ; public boolean isSupported ( String feature , String version ) ; public String getNamespaceURI ( ) ; public String getPrefix ( ) ; public void setPrefix ( String prefix ) throws DOMException ; public String getLocalName ( ) ; public boolean hasAttributes ( ) ; } 	0	['25', '1', '0', '0', '25', '300', '0', '0', '25', '1.041666667', '37', '0', '0', '0', '0.33', '0', '0', '0', '1', '1', '0']
package org . w3c . dom . html ; import org . w3c . dom . Node ; public interface HTMLCollection { public int getLength ( ) ; public Node item ( int index ) ; public Node namedItem ( String name ) ; } 	0	['3', '1', '0', '0', '3', '3', '0', '0', '3', '2', '3', '0', '0', '0', '0.555555556', '0', '0', '0', '1', '1', '0']
package org . apache . html . dom ; import org . w3c . dom . * ; import org . w3c . dom . html . * ; public class HTMLInputElementImpl extends HTMLElementImpl implements HTMLInputElement , HTMLFormControl { public String getDefaultValue ( ) { return getAttribute ( "defaultValue" ) ; } public void setDefaultValue ( String defaultValue ) { setAttribute ( "defaultValue" , defaultValue ) ; } public boolean getDefaultChecked ( ) { return getBinary ( "defaultChecked" ) ; } public void setDefaultChecked ( boolean defaultChecked ) { setAttribute ( "defaultChecked" , defaultChecked ) ; } public String getAccept ( ) { return getAttribute ( "accept" ) ; } public void setAccept ( String accept ) { setAttribute ( "accept" , accept ) ; } public String getAccessKey ( ) { String accessKey ; accessKey = getAttribute ( "accesskey" ) ; if ( accessKey != null && accessKey . length ( ) > 1 ) accessKey = accessKey . substring ( 0 , 1 ) ; return accessKey ; } public void setAccessKey ( String accessKey ) { if ( accessKey != null && accessKey . length ( ) > 1 ) accessKey = accessKey . substring ( 0 , 1 ) ; setAttribute ( "accesskey" , accessKey ) ; } public String getAlign ( ) { return capitalize ( getAttribute ( "align" ) ) ; } public void setAlign ( String align ) { setAttribute ( "align" , align ) ; } public String getAlt ( ) { return getAttribute ( "alt" ) ; } public void setAlt ( String alt ) { setAttribute ( "alt" , alt ) ; } public boolean getChecked ( ) { return getBinary ( "checked" ) ; } public void setChecked ( boolean checked ) { setAttribute ( "checked" , checked ) ; } public boolean getDisabled ( ) { return getBinary ( "disabled" ) ; } public void setDisabled ( boolean disabled ) { setAttribute ( "disabled" , disabled ) ; } public int getMaxLength ( ) { return getInteger ( getAttribute ( "maxlength" ) ) ; } public void setMaxLength ( int maxLength ) { setAttribute ( "maxlength" , String . valueOf ( maxLength ) ) ; } public String getName ( ) { return getAttribute ( "name" ) ; } public void setName ( String name ) { setAttribute ( "name" , name ) ; } public boolean getReadOnly ( ) { return getBinary ( "readonly" ) ; } public void setReadOnly ( boolean readOnly ) { setAttribute ( "readonly" , readOnly ) ; } public String getSize ( ) { return getAttribute ( "size" ) ; } public void setSize ( String size ) { setAttribute ( "size" , size ) ; } public String getSrc ( ) { return getAttribute ( "src" ) ; } public void setSrc ( String src ) { setAttribute ( "src" , src ) ; } public int getTabIndex ( ) { try { return Integer . parseInt ( getAttribute ( "tabindex" ) ) ; } catch ( NumberFormatException except ) { return 0 ; } } public void setTabIndex ( int tabIndex ) { setAttribute ( "tabindex" , String . valueOf ( tabIndex ) ) ; } public String getType ( ) { return getAttribute ( "type" ) ; } public String getUseMap ( ) { return getAttribute ( "useMap" ) ; } public void setUseMap ( String useMap ) { setAttribute ( "useMap" , useMap ) ; } public String getValue ( ) { return getAttribute ( "value" ) ; } public void setValue ( String value ) { setAttribute ( "value" , value ) ; } public void blur ( ) { } public void focus ( ) { } public void select ( ) { } public void click ( ) { } public HTMLInputElementImpl ( HTMLDocumentImpl owner , String name ) { super ( owner , name ) ; } } 	0	['38', '4', '0', '3', '49', '703', '0', '3', '38', '2', '229', '0', '0', '0.717557252', '0.294736842', '1', '3', '5.026315789', '3', '1.0789', '0']
package org . apache . wml . dom ; import org . apache . wml . * ; public class WMLInputElementImpl extends WMLElementImpl implements WMLInputElement { public WMLInputElementImpl ( WMLDocumentImpl owner , String tagName ) { super ( owner , tagName ) ; } public void setSize ( int newValue ) { setAttribute ( "size" , newValue ) ; } public int getSize ( ) { return getAttribute ( "size" , 0 ) ; } public void setFormat ( String newValue ) { setAttribute ( "format" , newValue ) ; } public String getFormat ( ) { return getAttribute ( "format" ) ; } public void setValue ( String newValue ) { setAttribute ( "value" , newValue ) ; } public String getValue ( ) { return getAttribute ( "value" ) ; } public void setMaxLength ( int newValue ) { setAttribute ( "maxlength" , newValue ) ; } public int getMaxLength ( ) { return getAttribute ( "maxlength" , 0 ) ; } public void setTabIndex ( int newValue ) { setAttribute ( "tabindex" , newValue ) ; } public int getTabIndex ( ) { return getAttribute ( "tabindex" , 0 ) ; } public void setClassName ( String newValue ) { setAttribute ( "class" , newValue ) ; } public String getClassName ( ) { return getAttribute ( "class" ) ; } public void setXmlLang ( String newValue ) { setAttribute ( "xml:lang" , newValue ) ; } public String getXmlLang ( ) { return getAttribute ( "xml:lang" ) ; } public void setEmptyOk ( boolean newValue ) { setAttribute ( "emptyok" , newValue ) ; } public boolean getEmptyOk ( ) { return getAttribute ( "emptyok" , false ) ; } public void setTitle ( String newValue ) { setAttribute ( "title" , newValue ) ; } public String getTitle ( ) { return getAttribute ( "title" ) ; } public void setId ( String newValue ) { setAttribute ( "id" , newValue ) ; } public String getId ( ) { return getAttribute ( "id" ) ; } public void setType ( String newValue ) { setAttribute ( "type" , newValue ) ; } public String getType ( ) { return getAttribute ( "type" ) ; } public void setName ( String newValue ) { setAttribute ( "name" , newValue ) ; } public String getName ( ) { return getAttribute ( "name" ) ; } } 	0	['25', '4', '0', '3', '32', '300', '0', '3', '25', '2', '142', '0', '0', '0.773584906', '0.312', '1', '7', '4.68', '1', '0.96', '0']
package org . apache . wml . dom ; import org . apache . wml . * ; public class WMLHeadElementImpl extends WMLElementImpl implements WMLHeadElement { public WMLHeadElementImpl ( WMLDocumentImpl owner , String tagName ) { super ( owner , tagName ) ; } public void setClassName ( String newValue ) { setAttribute ( "class" , newValue ) ; } public String getClassName ( ) { return getAttribute ( "class" ) ; } public void setId ( String newValue ) { setAttribute ( "id" , newValue ) ; } public String getId ( ) { return getAttribute ( "id" ) ; } } 	0	['5', '4', '0', '3', '8', '10', '0', '3', '5', '2', '28', '0', '0', '0.953488372', '0.6', '1', '4', '4.6', '1', '0.8', '0']
package org . apache . html . dom ; import org . w3c . dom . * ; import org . w3c . dom . html . * ; public class HTMLSelectElementImpl extends HTMLElementImpl implements HTMLSelectElement , HTMLFormControl { public String getType ( ) { return getAttribute ( "type" ) ; } public String getValue ( ) { return getAttribute ( "value" ) ; } public void setValue ( String value ) { setAttribute ( "value" , value ) ; } public int getSelectedIndex ( ) { NodeList options ; int i ; options = getElementsByTagName ( "OPTION" ) ; for ( i = 0 ; i < options . getLength ( ) ; ++ i ) if ( ( ( HTMLOptionElement ) options . item ( i ) ) . getSelected ( ) ) return i ; return - 1 ; } public void setSelectedIndex ( int selectedIndex ) { NodeList options ; int i ; options = getElementsByTagName ( "OPTION" ) ; for ( i = 0 ; i < options . getLength ( ) ; ++ i ) ( ( HTMLOptionElementImpl ) options . item ( i ) ) . setSelected ( i == selectedIndex ) ; } public HTMLCollection getOptions ( ) { if ( _options == null ) _options = new HTMLCollectionImpl ( this , HTMLCollectionImpl . OPTION ) ; return _options ; } public int getLength ( ) { return getOptions ( ) . getLength ( ) ; } public boolean getDisabled ( ) { return getBinary ( "disabled" ) ; } public void setDisabled ( boolean disabled ) { setAttribute ( "disabled" , disabled ) ; } public boolean getMultiple ( ) { return getBinary ( "multiple" ) ; } public void setMultiple ( boolean multiple ) { setAttribute ( "multiple" , multiple ) ; } public String getName ( ) { return getAttribute ( "name" ) ; } public void setName ( String name ) { setAttribute ( "name" , name ) ; } public int getSize ( ) { return getInteger ( getAttribute ( "size" ) ) ; } public void setSize ( int size ) { setAttribute ( "size" , String . valueOf ( size ) ) ; } public int getTabIndex ( ) { return getInteger ( getAttribute ( "tabindex" ) ) ; } public void setTabIndex ( int tabIndex ) { setAttribute ( "tabindex" , String . valueOf ( tabIndex ) ) ; } public void add ( HTMLElement element , HTMLElement before ) { insertBefore ( element , before ) ; } public void remove ( int index ) { NodeList options ; Node removed ; options = getElementsByTagName ( "OPTION" ) ; removed = options . item ( index ) ; if ( removed != null ) removed . getParentNode ( ) . removeChild ( removed ) ; } public void blur ( ) { } public void focus ( ) { } public NodeList getChildNodes ( ) { return getChildNodesUnoptimized ( ) ; } public HTMLSelectElementImpl ( HTMLDocumentImpl owner , String name ) { super ( owner , name ) ; } private HTMLCollection _options ; } 	0	['23', '4', '0', '5', '41', '253', '0', '5', '23', '0.954545455', '183', '1', '1', '0.810344828', '0.246376812', '1', '1', '6.913043478', '3', '1.2174', '0']
package org . apache . wml ; public interface WMLInputElement extends WMLElement { public void setName ( String newValue ) ; public String getName ( ) ; public void setValue ( String newValue ) ; public String getValue ( ) ; public void setType ( String newValue ) ; public String getType ( ) ; public void setFormat ( String newValue ) ; public String getFormat ( ) ; public void setEmptyOk ( boolean newValue ) ; public boolean getEmptyOk ( ) ; public void setSize ( int newValue ) ; public int getSize ( ) ; public void setMaxLength ( int newValue ) ; public int getMaxLength ( ) ; public void setTitle ( String newValue ) ; public String getTitle ( ) ; public void setTabIndex ( int newValue ) ; public int getTabIndex ( ) ; public void setXmlLang ( String newValue ) ; public String getXmlLang ( ) ; } 	0	['20', '1', '0', '2', '20', '190', '1', '1', '20', '2', '20', '0', '0', '0', '0.375', '0', '0', '0', '1', '1', '0']
package org . apache . xerces . dom ; import org . w3c . dom . * ; public class ElementDefinitionImpl extends ParentNode { static final long serialVersionUID = - 8373890672670022714L ; protected String name ; protected NamedNodeMapImpl attributes ; public ElementDefinitionImpl ( DocumentImpl ownerDocument , String name ) { super ( ownerDocument ) ; this . name = name ; attributes = new NamedNodeMapImpl ( ownerDocument ) ; } public short getNodeType ( ) { return NodeImpl . ELEMENT_DEFINITION_NODE ; } public String getNodeName ( ) { if ( needsSyncData ( ) ) { synchronizeData ( ) ; } return name ; } public Node cloneNode ( boolean deep ) { ElementDefinitionImpl newnode = ( ElementDefinitionImpl ) super . cloneNode ( deep ) ; newnode . attributes = attributes . cloneMap ( newnode ) ; return newnode ; } public NamedNodeMap getAttributes ( ) { if ( needsSyncChildren ( ) ) { synchronizeChildren ( ) ; } return attributes ; } } 	0	['5', '4', '1', '7', '13', '2', '4', '4', '5', '0.833333333', '52', '0.666666667', '1', '0.951807229', '0.4', '2', '6', '8.8', '2', '1.2', '0']
package org . apache . xerces . utils ; import java . util . Locale ; import java . util . ResourceBundle ; import java . util . ListResourceBundle ; public class ImplementationMessages implements XMLMessageProvider { public static final String XERCES_IMPLEMENTATION_DOMAIN = "http://www.apache.org/xml/xerces.html" ; public void setLocale ( Locale locale ) { fLocale = locale ; } public Locale getLocale ( ) { return fLocale ; } public String createMessage ( Locale locale , int majorCode , int minorCode , Object args [ ] ) { boolean throwex = false ; if ( fResourceBundle == null || locale != fLocale ) { if ( locale != null ) fResourceBundle = ListResourceBundle . getBundle ( "org.apache.xerces.msg.ImplementationMessages" , locale ) ; if ( fResourceBundle == null ) fResourceBundle = ListResourceBundle . getBundle ( "org.apache.xerces.msg.ImplementationMessages" ) ; } if ( majorCode < 0 || majorCode >= fgMessageKeys . length - 1 ) { majorCode = BAD_MAJORCODE ; throwex = true ; } String msgKey = fgMessageKeys [ majorCode ] ; String msg = fResourceBundle . getString ( msgKey ) ; if ( args != null ) { try { msg = java . text . MessageFormat . format ( msg , args ) ; } catch ( Exception e ) { msg = fResourceBundle . getString ( fgMessageKeys [ FORMAT_FAILED ] ) ; msg += " " + fResourceBundle . getString ( msgKey ) ; } } if ( throwex ) { throw new RuntimeException ( msg ) ; } return msg ; } private Locale fLocale = null ; private ResourceBundle fResourceBundle = null ; public static final int BAD_MAJORCODE = 0 , ENC4 = 1 , ENC5 = 2 , ENC6 = 3 , ENC7 = 4 , IO0 = 5 , VAL_BST = 6 , VAL_CMSI = 7 , VAL_CST = 8 , VAL_LST = 9 , VAL_NIICM = 10 , VAL_NPCD = 11 , VAL_UST = 12 , VAL_WCGHI = 13 , INT_DCN = 14 , INT_PCN = 15 , FATAL_ERROR = 16 , FORMAT_FAILED = 17 ; private static final String [ ] fgMessageKeys = { "BadMajorCode" , "ENC4" , "ENC5" , "ENC6" , "ENC7" , "FileNotFound" , "VAL_BST" , "VAL_CMSI" , "VAL_CST" , "VAL_LST" , "VAL_NIICM" , "VAL_NPCD" , "VAL_UST" , "VAL_WCGHI" , "INT_DCN" , "INT_PCN" , "FatalError" , "FormatFailed" , null } ; } 	0	['5', '1', '0', '6', '14', '0', '5', '1', '4', '1.159090909', '205', '0.136363636', '0', '0', '0.5', '0', '0', '35.6', '9', '2.2', '0']
package org . w3c . dom . html ; public interface HTMLTableCaptionElement extends HTMLElement { public String getAlign ( ) ; public void setAlign ( String align ) ; } 	0	['2', '1', '0', '0', '2', '1', '0', '0', '2', '2', '2', '0', '0', '0', '0.75', '0', '0', '0', '1', '1', '0']
package org . apache . xerces . msg ; import java . util . ListResourceBundle ; public class ExceptionMessages extends ListResourceBundle { public static final Object CONTENTS [ ] [ ] = { { "FMT001" , "Message Formatting Error." } , { "HTM001" , "State error: startDocument fired twice on one builder." } , { "HTM002" , "State error: document never started or missing document element." } , { "HTM003" , "State error: document ended before end of document element." } , { "HTM004" , "Argument ''tagName'' is null." } , { "HTM005" , "State error: Document.getDocumentElement returns null." } , { "HTM006" , "State error: startElement called after end of document element." } , { "HTM007" , "State error: endElement called with no current node." } , { "HTM008" , "State error: mismatch in closing tag name {0}" } , { "HTM009" , "State error: character data found outside of root element." } , { "HTM010" , "State error: character data found outside of root element." } , { "HTM011" , "Argument ''topLevel'' is null." } , { "HTM012" , "Argument ''index'' is negative." } , { "HTM013" , "Argument ''name'' is null." } , { "HTM014" , "Argument ''title'' is null." } , { "HTM015" , "Tag ''{0}'' associated with an Element class that failed to construct." } , { "HTM016" , "Argument ''caption'' is not an element of type <CAPTION>." } , { "HTM017" , "Argument ''tHead'' is not an element of type <THEAD>." } , { "HTM018" , "Argument ''tFoot'' is not an element of type <TFOOT>." } , { "HTM019" , "OpenXML Error: Could not find class {0} implementing HTML element {1}" } , { "SER001" , "Argument ''output'' is null." } , { "SER002" , "No writer supplied for serializer" } , { "SER003" , "The resource [{0}] could not be found." } , { "SER004" , "The resource [{0}] could not load: {1}" } , { "SER005" , "The method ''{0}'' is not supported by this factory" } , { "DOM001" , "Modification not allowed" } , { "DOM002" , "Illegal character" } , { "DOM003" , "Namespace error" } , { "DOM004" , "Index out of bounds" } , { "DOM005" , "Wrong document" } , { "DOM006" , "Hierarchy request error" } , { "DOM007" , "Not supported" } , { "DOM008" , "Not found" } , { "DOM009" , "Attribute already in use" } , { "DOM010" , "Unspecified event type" } , { "DOM011" , "Invalid state" } , { "DOM012" , "Invalid node type" } , { "DOM013" , "Bad boundary points" } , { "FWK001" , "{0}] scannerState: {1}" } , { "FWK002" , "{0}] popElementType: fElementDepth-- == 0." } , { "FWK003" , "TrailingMiscDispatcher.endOfInput moreToFollow" } , { "FWK004" , "cannot happen: {0}" } , { "FWK005" , "parse may not be called while parsing." } , { "FWK006" , "setLocale may not be called while parsing." } , { "FWK007" , "Unknown error domain \"{0}\"." } , { "FWK008" , "Element stack underflow." } , { "PAR001" , "Fatal error constructing DOMParser." } , { "PAR002" , "Class, \"{0}\", is not of type org.w3c.dom" } , { "PAR003" , "Class, \"{0}\", not found." } , { "PAR004" , "Cannot setFeature({0}): parse is in progress." } , { "PAR005" , "Property, \"{0}\" is read-only." } , { "PAR006" , "Property value must be of type java.lang.String." } , { "PAR007" , "Current element node cannot be queried when node expansion is deferred." } , { "PAR008" , "Fatal error getting document factory." } , { "PAR009" , "Fatal error reading expansion mode." } , { "PAR010" , "Can''t copy node type, {0} ({1})." } , { "PAR011" , "Feature {0} not supported during parse." } , { "PAR012" , "For propertyId \"{0}\", the value \"" + "{1}\" cannot be cast to {2}." } , { "PAR013" , "Property \"{0}\" is read only." } , { "PAR014" , "Cannot getProperty(\"{0}\". No DOM tree exists." } , { "PAR015" , "startEntityReference(): ENTITYTYPE_UNPARSED" } , { "PAR016" , "endEntityReference(): ENTITYTYPE_UNPARSED" } , { "PAR017" , "cannot happen: {0}" } , { "RDR001" , "untested" } , { "RDR002" , "cannot happen" } , { "UTL001" , "untested" } , { "UTL002" , "cannot happen" } , { "VAL001" , "Element stack underflow" } , { "VAL002" , "getValidatorForAttType ({0})" } , { "VAL003" , "cannot happen" } } ; public Object [ ] [ ] getContents ( ) { return CONTENTS ; } } 	0	['3', '3', '0', '0', '4', '1', '0', '0', '2', '0.5', '923', '0', '0', '0.974358974', '1', '0', '0', '306.3333333', '1', '0.3333', '0']
package org . w3c . dom ; public interface Element extends Node { public String getTagName ( ) ; public String getAttribute ( String name ) ; public void setAttribute ( String name , String value ) throws DOMException ; public void removeAttribute ( String name ) throws DOMException ; public Attr getAttributeNode ( String name ) ; public Attr setAttributeNode ( Attr newAttr ) throws DOMException ; public Attr removeAttributeNode ( Attr oldAttr ) throws DOMException ; public NodeList getElementsByTagName ( String name ) ; public String getAttributeNS ( String namespaceURI , String localName ) ; public void setAttributeNS ( String namespaceURI , String qualifiedName , String value ) throws DOMException ; public void removeAttributeNS ( String namespaceURI , String localName ) throws DOMException ; public Attr getAttributeNodeNS ( String namespaceURI , String localName ) ; public Attr setAttributeNodeNS ( Attr newAttr ) throws DOMException ; public NodeList getElementsByTagNameNS ( String namespaceURI , String localName ) ; public boolean hasAttribute ( String name ) ; public boolean hasAttributeNS ( String namespaceURI , String localName ) ; } 	0	['16', '1', '0', '0', '16', '120', '0', '0', '16', '2', '16', '0', '0', '0', '0.645833333', '0', '0', '0', '1', '1', '0']
package org . apache . xerces . dom ; import org . w3c . dom . * ; public class NotationImpl extends NodeImpl implements Notation { static final long serialVersionUID = - 764632195890658402L ; protected String name ; protected String publicId ; protected String systemId ; public NotationImpl ( DocumentImpl ownerDoc , String name ) { super ( ownerDoc ) ; this . name = name ; } public short getNodeType ( ) { return Node . NOTATION_NODE ; } public String getNodeName ( ) { if ( needsSyncData ( ) ) { synchronizeData ( ) ; } return name ; } public String getPublicId ( ) { if ( needsSyncData ( ) ) { synchronizeData ( ) ; } return publicId ; } public String getSystemId ( ) { if ( needsSyncData ( ) ) { synchronizeData ( ) ; } return systemId ; } public void setPublicId ( String id ) { if ( isReadOnly ( ) ) { throw new DOMException ( DOMException . NO_MODIFICATION_ALLOWED_ERR , "DOM001 Modification not allowed" ) ; } if ( needsSyncData ( ) ) { synchronizeData ( ) ; } publicId = id ; } public void setSystemId ( String id ) { if ( isReadOnly ( ) ) { throw new DOMException ( DOMException . NO_MODIFICATION_ALLOWED_ERR , "DOM001 Modification not allowed" ) ; } if ( needsSyncData ( ) ) { synchronizeData ( ) ; } systemId = id ; } } 	0	['7', '2', '1', '4', '12', '15', '3', '2', '7', '0.916666667', '80', '0.75', '0', '0.88', '0.523809524', '1', '4', '9.857142857', '3', '1.8571', '0']
package org . apache . xml . serialize ; import java . io . IOException ; import java . io . UnsupportedEncodingException ; import java . io . OutputStream ; import java . io . Writer ; import org . w3c . dom . * ; import org . xml . sax . DocumentHandler ; import org . xml . sax . ContentHandler ; import org . xml . sax . AttributeList ; import org . xml . sax . Attributes ; public final class TextSerializer extends BaseMarkupSerializer { public TextSerializer ( ) { super ( new OutputFormat ( Method . TEXT , null , false ) ) ; } public void setOutputFormat ( OutputFormat format ) { super . setOutputFormat ( format != null ? format : new OutputFormat ( Method . TEXT , null , false ) ) ; } public void startElement ( String namespaceURI , String localName , String rawName , Attributes attrs ) { startElement ( rawName == null ? localName : rawName , null ) ; } public void endElement ( String namespaceURI , String localName , String rawName ) { endElement ( rawName == null ? localName : rawName ) ; } public void startElement ( String tagName , AttributeList attrs ) { boolean preserveSpace ; ElementState state ; state = getElementState ( ) ; if ( isDocumentState ( ) ) { if ( ! _started ) startDocument ( tagName ) ; } preserveSpace = state . preserveSpace ; state = enterElementState ( null , null , tagName , preserveSpace ) ; } public void endElement ( String tagName ) { ElementState state ; state = getElementState ( ) ; state = leaveElementState ( ) ; state . afterElement = true ; state . empty = false ; if ( isDocumentState ( ) ) _printer . flush ( ) ; } public void processingInstruction ( String target , String code ) { } public void comment ( String text ) { } public void comment ( char [ ] chars , int start , int length ) { } public void characters ( char [ ] chars , int start , int length ) { ElementState state ; state = content ( ) ; state . doCData = state . inCData = false ; printText ( chars , start , length , true , true ) ; } protected void characters ( String text , boolean unescaped ) { ElementState state ; state = content ( ) ; state . doCData = state . inCData = false ; printText ( text , true , true ) ; } protected void startDocument ( String rootTagName ) { _printer . leaveDTD ( ) ; _started = true ; serializePreRoot ( ) ; } protected void serializeElement ( Element elem ) { Node child ; ElementState state ; boolean preserveSpace ; String tagName ; tagName = elem . getTagName ( ) ; state = getElementState ( ) ; if ( isDocumentState ( ) ) { if ( ! _started ) startDocument ( tagName ) ; } preserveSpace = state . preserveSpace ; if ( elem . hasChildNodes ( ) ) { state = enterElementState ( null , null , tagName , preserveSpace ) ; child = elem . getFirstChild ( ) ; while ( child != null ) { serializeNode ( child ) ; child = child . getNextSibling ( ) ; } endElement ( tagName ) ; } else { if ( ! isDocumentState ( ) ) { state . afterElement = true ; state . empty = false ; } } } protected void serializeNode ( Node node ) { switch ( node . getNodeType ( ) ) { case Node . TEXT_NODE : { String text ; text = node . getNodeValue ( ) ; if ( text != null ) characters ( node . getNodeValue ( ) , true ) ; break ; } case Node . CDATA_SECTION_NODE : { String text ; text = node . getNodeValue ( ) ; if ( text != null ) characters ( node . getNodeValue ( ) , true ) ; break ; } case Node . COMMENT_NODE : break ; case Node . ENTITY_REFERENCE_NODE : break ; case Node . PROCESSING_INSTRUCTION_NODE : break ; case Node . ELEMENT_NODE : serializeElement ( ( Element ) node ) ; break ; case Node . DOCUMENT_NODE : case Node . DOCUMENT_FRAGMENT_NODE : { Node child ; child = node . getFirstChild ( ) ; while ( child != null ) { serializeNode ( child ) ; child = child . getNextSibling ( ) ; } break ; } default : break ; } } protected ElementState content ( ) { ElementState state ; state = getElementState ( ) ; if ( ! isDocumentState ( ) ) { if ( state . empty ) state . empty = false ; state . afterElement = false ; } return state ; } protected String getEntityRef ( int ch ) { return null ; } } 	0	['16', '2', '0', '5', '35', '112', '1', '4', '10', '2', '261', '0', '0', '0.788732394', '0.21875', '1', '10', '15.3125', '6', '1.9375', '0']
package org . apache . xerces . validators . common ; import org . apache . xerces . utils . QName ; public final class ContentLeafNameTypeVector { public QName [ ] leafNames = null ; public int [ ] leafTypes = null ; public int leafCount = 0 ; public ContentLeafNameTypeVector ( ) { } public ContentLeafNameTypeVector ( QName [ ] names , int [ ] types , int count ) { setValues ( names , types , count ) ; } public ContentLeafNameTypeVector ( ContentLeafNameTypeVector clntv ) { this ( clntv . leafNames , clntv . leafTypes , clntv . leafCount ) ; } public void setValues ( QName [ ] names , int [ ] types , int count ) { if ( count > 0 ) { leafNames = new QName [ count ] ; leafTypes = new int [ count ] ; leafCount = count ; System . arraycopy ( names , 0 , leafNames , 0 , count ) ; System . arraycopy ( types , 0 , leafTypes , 0 , count ) ; } } } 	0	['4', '1', '0', '6', '6', '0', '5', '1', '4', '0', '73', '0', '1', '0', '0.55', '0', '0', '16.5', '2', '0.5', '0']
package org . apache . wml . dom ; import org . apache . wml . * ; public class WMLBrElementImpl extends WMLElementImpl implements WMLBrElement { public WMLBrElementImpl ( WMLDocumentImpl owner , String tagName ) { super ( owner , tagName ) ; } public void setClassName ( String newValue ) { setAttribute ( "class" , newValue ) ; } public String getClassName ( ) { return getAttribute ( "class" ) ; } public void setXmlLang ( String newValue ) { setAttribute ( "xml:lang" , newValue ) ; } public String getXmlLang ( ) { return getAttribute ( "xml:lang" ) ; } public void setId ( String newValue ) { setAttribute ( "id" , newValue ) ; } public String getId ( ) { return getAttribute ( "id" ) ; } } 	0	['7', '4', '0', '3', '10', '21', '0', '3', '7', '2', '39', '0', '0', '0.931818182', '0.571428571', '1', '6', '4.571428571', '1', '0.8571', '0']
package org . w3c . dom . html ; public interface HTMLStyleElement extends HTMLElement { public boolean getDisabled ( ) ; public void setDisabled ( boolean disabled ) ; public String getMedia ( ) ; public void setMedia ( String media ) ; public String getType ( ) ; public void setType ( String type ) ; } 	0	['6', '1', '0', '0', '6', '15', '0', '0', '6', '2', '6', '0', '0', '0', '0.5', '0', '0', '0', '1', '1', '0']
package org . w3c . dom . html ; public interface HTMLBRElement extends HTMLElement { public String getClear ( ) ; public void setClear ( String clear ) ; } 	0	['2', '1', '0', '0', '2', '1', '0', '0', '2', '2', '2', '0', '0', '0', '0.75', '0', '0', '0', '1', '1', '0']
package org . apache . html . dom ; import org . w3c . dom . * ; import org . w3c . dom . html . * ; public class HTMLLabelElementImpl extends HTMLElementImpl implements HTMLLabelElement , HTMLFormControl { public String getAccessKey ( ) { String accessKey ; accessKey = getAttribute ( "accesskey" ) ; if ( accessKey != null && accessKey . length ( ) > 1 ) accessKey = accessKey . substring ( 0 , 1 ) ; return accessKey ; } public void setAccessKey ( String accessKey ) { if ( accessKey != null && accessKey . length ( ) > 1 ) accessKey = accessKey . substring ( 0 , 1 ) ; setAttribute ( "accesskey" , accessKey ) ; } public String getHtmlFor ( ) { return getAttribute ( "for" ) ; } public void setHtmlFor ( String htmlFor ) { setAttribute ( "for" , htmlFor ) ; } public HTMLLabelElementImpl ( HTMLDocumentImpl owner , String name ) { super ( owner , name ) ; } } 	0	['5', '4', '0', '3', '10', '10', '0', '3', '5', '2', '52', '0', '0', '0.959183673', '0.6', '0', '0', '9.4', '3', '1.6', '0']
package org . apache . html . dom ; import org . w3c . dom . * ; import org . w3c . dom . html . * ; public class HTMLUListElementImpl extends HTMLElementImpl implements HTMLUListElement { public boolean getCompact ( ) { return getBinary ( "compact" ) ; } public void setCompact ( boolean compact ) { setAttribute ( "compact" , compact ) ; } public String getType ( ) { return getAttribute ( "type" ) ; } public void setType ( String type ) { setAttribute ( "type" , type ) ; } public HTMLUListElementImpl ( HTMLDocumentImpl owner , String name ) { super ( owner , name ) ; } } 	0	['5', '4', '0', '2', '10', '10', '0', '2', '5', '2', '28', '0', '0', '0.959183673', '0.45', '0', '0', '4.6', '1', '0.8', '0']
package org . apache . wml ; public interface WMLOptionElement extends WMLElement { public void setValue ( String newValue ) ; public String getValue ( ) ; public void setTitle ( String newValue ) ; public String getTitle ( ) ; public void setOnPick ( String href ) ; public String getOnPick ( ) ; public void setXmlLang ( String newValue ) ; public String getXmlLang ( ) ; } 	0	['8', '1', '0', '2', '8', '28', '1', '1', '8', '2', '8', '0', '0', '0', '0.75', '0', '0', '0', '1', '1', '0']
package org . apache . xerces . utils ; import org . apache . xerces . readers . XMLEntityHandler ; public final class ChunkyCharArray implements XMLEntityHandler . CharBuffer { public ChunkyCharArray ( StringPool stringPool ) { fStringPool = stringPool ; fCurrentChunk = CharDataChunk . createChunk ( stringPool , null ) ; } public int length ( ) { return fLength ; } public void append ( char ch ) { try { fCurrentData [ fCurrentIndex ] = ch ; } catch ( ArrayIndexOutOfBoundsException ex ) { if ( fCurrentIndex == CharDataChunk . CHUNK_SIZE ) { fCurrentChunk = CharDataChunk . createChunk ( fStringPool , fCurrentChunk ) ; fCurrentData = new char [ INITIAL_CHUNK_SIZE ] ; fCurrentIndex = 0 ; } else { char [ ] newData = new char [ fCurrentIndex * 2 ] ; System . arraycopy ( fCurrentData , 0 , newData , 0 , fCurrentIndex ) ; fCurrentData = newData ; } fCurrentChunk . setCharArray ( fCurrentData ) ; fCurrentData [ fCurrentIndex ] = ch ; } catch ( NullPointerException ex ) { fCurrentData = new char [ INITIAL_CHUNK_SIZE ] ; fCurrentChunk . setCharArray ( fCurrentData ) ; fCurrentData [ fCurrentIndex ] = ch ; } fCurrentIndex ++ ; fLength ++ ; } public void append ( String s ) { int slen = s . length ( ) ; for ( int i = 0 ; i < slen ; i ++ ) append ( s . charAt ( i ) ) ; } public void append ( char [ ] ch , int offset , int length ) { while ( length -- > 0 ) append ( ch [ offset ++ ] ) ; } public void append ( ChunkyCharArray charArray , int offset , int length ) { fCurrentChunk . append ( charArray , offset , length ) ; } public int addString ( int offset , int length ) { if ( length == 0 ) return 0 ; return fCurrentChunk . addString ( offset , length ) ; } public int addSymbol ( int offset , int length ) { if ( length == 0 ) return 0 ; return fCurrentChunk . addSymbol ( offset , length , 0 ) ; } private static final int INITIAL_CHUNK_SHIFT = 7 ; private static final int INITIAL_CHUNK_SIZE = ( 1 << INITIAL_CHUNK_SHIFT ) ; private StringPool fStringPool = null ; private CharDataChunk fCurrentChunk = null ; private char [ ] fCurrentData = null ; private int fCurrentIndex = 0 ; private int fLength = 0 ; } 	0	['8', '1', '0', '6', '17', '4', '3', '3', '8', '0.653061224', '184', '1', '2', '0', '0.303571429', '0', '0', '21.125', '2', '1.5', '0']
package org . apache . html . dom ; import org . w3c . dom . * ; import org . w3c . dom . html . * ; public class HTMLHRElementImpl extends HTMLElementImpl implements HTMLHRElement { public String getAlign ( ) { return capitalize ( getAttribute ( "align" ) ) ; } public void setAlign ( String align ) { setAttribute ( "align" , align ) ; } public boolean getNoShade ( ) { return getBinary ( "noshade" ) ; } public void setNoShade ( boolean noShade ) { setAttribute ( "noshade" , noShade ) ; } public String getSize ( ) { return getAttribute ( "size" ) ; } public void setSize ( String size ) { setAttribute ( "size" , size ) ; } public String getWidth ( ) { return getAttribute ( "width" ) ; } public void setWidth ( String width ) { setAttribute ( "width" , width ) ; } public HTMLHRElementImpl ( HTMLDocumentImpl owner , String name ) { super ( owner , name ) ; } } 	0	['9', '4', '0', '2', '15', '36', '0', '2', '9', '2', '52', '0', '0', '0.921568627', '0.416666667', '0', '0', '4.777777778', '1', '0.8889', '0']
package org . apache . wml . dom ; import org . apache . wml . * ; public class WMLAnchorElementImpl extends WMLElementImpl implements WMLAnchorElement { public WMLAnchorElementImpl ( WMLDocumentImpl owner , String tagName ) { super ( owner , tagName ) ; } public void setClassName ( String newValue ) { setAttribute ( "class" , newValue ) ; } public String getClassName ( ) { return getAttribute ( "class" ) ; } public void setXmlLang ( String newValue ) { setAttribute ( "xml:lang" , newValue ) ; } public String getXmlLang ( ) { return getAttribute ( "xml:lang" ) ; } public void setTitle ( String newValue ) { setAttribute ( "title" , newValue ) ; } public String getTitle ( ) { return getAttribute ( "title" ) ; } public void setId ( String newValue ) { setAttribute ( "id" , newValue ) ; } public String getId ( ) { return getAttribute ( "id" ) ; } } 	0	['9', '4', '0', '3', '12', '36', '0', '3', '9', '2', '50', '0', '0', '0.911111111', '0.555555556', '1', '6', '4.555555556', '1', '0.8889', '0']
package org . apache . wml ; public interface WMLImgElement extends WMLElement { public void setAlt ( String newValue ) ; public String getAlt ( ) ; public void setSrc ( String newValue ) ; public String getSrc ( ) ; public void setLocalSrc ( String newValue ) ; public String getLocalSrc ( ) ; public void setVspace ( String newValue ) ; public String getVspace ( ) ; public void setHspace ( String newValue ) ; public String getHspace ( ) ; public void setAlign ( String newValue ) ; public String getAlign ( ) ; public void setWidth ( String newValue ) ; public String getWidth ( ) ; public void setHeight ( String newValue ) ; public String getHeight ( ) ; public void setXmlLang ( String newValue ) ; public String getXmlLang ( ) ; } 	0	['18', '1', '0', '2', '18', '153', '1', '1', '18', '2', '18', '0', '0', '0', '0.75', '0', '0', '0', '1', '1', '0']
package org . xml . sax ; public interface Attributes { public abstract int getLength ( ) ; public abstract String getURI ( int index ) ; public abstract String getLocalName ( int index ) ; public abstract String getQName ( int index ) ; public abstract String getType ( int index ) ; public abstract String getValue ( int index ) ; public int getIndex ( String uri , String localPart ) ; public int getIndex ( String qName ) ; public abstract String getType ( String uri , String localName ) ; public abstract String getType ( String qName ) ; public abstract String getValue ( String uri , String localName ) ; public abstract String getValue ( String qName ) ; } 	0	['12', '1', '0', '0', '12', '66', '0', '0', '12', '2', '12', '0', '0', '0', '0.638888889', '0', '0', '0', '1', '1', '0']
package org . apache . xerces . validators . datatype ; import java . util . Hashtable ; import java . util . Vector ; import java . util . Enumeration ; import java . util . Locale ; import java . text . Collator ; import java . util . Enumeration ; import java . util . StringTokenizer ; import java . util . NoSuchElementException ; import org . apache . xerces . validators . schema . SchemaSymbols ; import org . apache . xerces . utils . regex . RegularExpression ; public class UnionDatatypeValidator extends AbstractDatatypeValidator { private Locale fLocale = null ; private Vector fBaseValidators = null ; private DatatypeValidator fBaseValidator = null ; private int fValidatorsSize = 0 ; private String fPattern = null ; private Vector fEnumeration = null ; private int fFacetsDefined = 0 ; private StringBuffer errorMsg = null ; private RegularExpression fRegex = null ; public UnionDatatypeValidator ( ) throws InvalidDatatypeFacetException { this ( null , null , false ) ; } public UnionDatatypeValidator ( DatatypeValidator base , Hashtable facets , boolean derivedBy ) throws InvalidDatatypeFacetException { setBasetype ( base ) ; if ( facets != null ) { for ( Enumeration e = facets . keys ( ) ; e . hasMoreElements ( ) ; ) { String key = ( String ) e . nextElement ( ) ; if ( key . equals ( SchemaSymbols . ELT_ENUMERATION ) ) { fFacetsDefined += DatatypeValidator . FACET_ENUMERATION ; fEnumeration = ( Vector ) facets . get ( key ) ; } else if ( key . equals ( SchemaSymbols . ELT_PATTERN ) ) { fFacetsDefined += DatatypeValidator . FACET_PATTERN ; fPattern = ( String ) facets . get ( key ) ; fRegex = new RegularExpression ( fPattern , "X" ) ; } else { throw new InvalidDatatypeFacetException ( "invalid facet tag : " + key ) ; } } } } public UnionDatatypeValidator ( Vector base ) { if ( base != null ) { fValidatorsSize = base . size ( ) ; fBaseValidators = new Vector ( fValidatorsSize ) ; fBaseValidators = base ; } } public Object validate ( String content , Object state ) throws InvalidDatatypeValueException { if ( content == null && state != null ) { this . fBaseValidator . validate ( content , state ) ; } else { checkContentEnum ( content , state , false , null ) ; } return ( null ) ; } public void setLocale ( Locale locale ) { fLocale = locale ; } public Hashtable getFacets ( ) { return ( null ) ; } public int compare ( String content , String facetValue ) { return ( 0 ) ; } public Object clone ( ) throws CloneNotSupportedException { UnionDatatypeValidator newObj = null ; try { newObj = new UnionDatatypeValidator ( ) ; newObj . fLocale = this . fLocale ; newObj . fBaseValidator = this . fBaseValidator ; newObj . fBaseValidators = ( Vector ) this . fBaseValidators . clone ( ) ; newObj . fPattern = this . fPattern ; newObj . fEnumeration = this . fEnumeration ; newObj . fFacetsDefined = this . fFacetsDefined ; } catch ( InvalidDatatypeFacetException ex ) { ex . printStackTrace ( ) ; } return ( newObj ) ; } private boolean verifyEnum ( Vector enum ) { if ( ( fFacetsDefined & DatatypeValidator . FACET_ENUMERATION ) != 0 ) { for ( Enumeration e = enum . elements ( ) ; e . hasMoreElements ( ) ; ) { if ( fEnumeration . contains ( e . nextElement ( ) ) == false ) { return false ; } } } return true ; } private void checkContentEnum ( String content , Object state , boolean pattern , Vector enumeration ) throws InvalidDatatypeValueException { int index = - 1 ; boolean valid = false ; DatatypeValidator currentDV = null ; if ( fBaseValidator != null ) { if ( ( fFacetsDefined & DatatypeValidator . FACET_PATTERN ) != 0 ) { if ( fRegex == null || fRegex . matches ( content ) == false ) throw new InvalidDatatypeValueException ( "Value '" + content + "' does not match regular expression facet '" + fPattern + "'." ) ; pattern = true ; } if ( enumeration != null ) { if ( ! verifyEnum ( enumeration ) ) { throw new InvalidDatatypeValueException ( "Enumeration '" + enumeration + "' for value '" + content + "' is based on enumeration '" + fEnumeration + "'" ) ; } } else { enumeration = ( fEnumeration != null ) ? fEnumeration : null ; } ( ( UnionDatatypeValidator ) this . fBaseValidator ) . checkContentEnum ( content , state , pattern , enumeration ) ; return ; } while ( ( fValidatorsSize - 1 ) > index ++ ) { currentDV = ( DatatypeValidator ) this . fBaseValidators . elementAt ( index ) ; if ( valid ) break ; try { if ( currentDV instanceof ListDatatypeValidator ) { if ( pattern ) { throw new InvalidDatatypeValueException ( "Facet \"Pattern\" can not be applied to a list datatype" ) ; } ( ( ListDatatypeValidator ) currentDV ) . checkContentEnum ( content , state , enumeration ) ; } else if ( currentDV instanceof UnionDatatypeValidator ) { ( ( UnionDatatypeValidator ) currentDV ) . checkContentEnum ( content , state , pattern , enumeration ) ; } else { if ( enumeration != null ) { if ( currentDV instanceof DecimalDatatypeValidator ) { ( ( DecimalDatatypeValidator ) currentDV ) . checkContentEnum ( content , state , enumeration ) ; } else if ( currentDV instanceof FloatDatatypeValidator ) { ( ( FloatDatatypeValidator ) currentDV ) . checkContentEnum ( content , state , enumeration ) ; } else if ( currentDV instanceof DoubleDatatypeValidator ) { ( ( DoubleDatatypeValidator ) currentDV ) . checkContentEnum ( content , state , enumeration ) ; } else { if ( enumeration . contains ( content ) == false ) { throw new InvalidDatatypeValueException ( "Value '" + content + "' must be one of " + enumeration ) ; } ( ( DatatypeValidator ) currentDV ) . validate ( content , state ) ; } } else { ( ( DatatypeValidator ) currentDV ) . validate ( content , state ) ; } } valid = true ; } catch ( InvalidDatatypeValueException e ) { } } if ( ! valid ) { throw new InvalidDatatypeValueException ( "Content '" + content + "' does not match any union types" ) ; } } private void setBasetype ( DatatypeValidator base ) { fBaseValidator = base ; } } 	0	['11', '2', '0', '11', '37', '11', '2', '9', '8', '0.5', '480', '1', '2', '0.333333333', '0.284090909', '0', '0', '41.81818182', '4', '1', '0']
package org . apache . html . dom ; import org . w3c . dom . * ; import org . w3c . dom . html . * ; public class HTMLTableRowElementImpl extends HTMLElementImpl implements HTMLTableRowElement { public int getRowIndex ( ) { Node parent ; parent = getParentNode ( ) ; if ( parent instanceof HTMLTableSectionElement ) parent = parent . getParentNode ( ) ; if ( parent instanceof HTMLTableElement ) return getRowIndex ( parent ) ; ; return - 1 ; } public void setRowIndex ( int rowIndex ) { Node parent ; parent = getParentNode ( ) ; if ( parent instanceof HTMLTableSectionElement ) parent = parent . getParentNode ( ) ; if ( parent instanceof HTMLTableElement ) ( ( HTMLTableElementImpl ) parent ) . insertRowX ( rowIndex , this ) ; } public int getSectionRowIndex ( ) { Node parent ; parent = getParentNode ( ) ; if ( parent instanceof HTMLTableSectionElement ) return getRowIndex ( parent ) ; else return - 1 ; } public void setSectionRowIndex ( int sectionRowIndex ) { Node parent ; parent = getParentNode ( ) ; if ( parent instanceof HTMLTableSectionElement ) ( ( HTMLTableSectionElementImpl ) parent ) . insertRowX ( sectionRowIndex , this ) ; } int getRowIndex ( Node parent ) { NodeList rows ; int i ; rows = ( ( HTMLElement ) parent ) . getElementsByTagName ( "TR" ) ; for ( i = 0 ; i < rows . getLength ( ) ; ++ i ) if ( rows . item ( i ) == this ) return i ; return - 1 ; } public HTMLCollection getCells ( ) { if ( _cells == null ) _cells = new HTMLCollectionImpl ( this , HTMLCollectionImpl . CELL ) ; return _cells ; } public void setCells ( HTMLCollection cells ) { Node child ; int i ; child = getFirstChild ( ) ; while ( child != null ) { removeChild ( child ) ; child = child . getNextSibling ( ) ; } i = 0 ; child = cells . item ( i ) ; while ( child != null ) { appendChild ( child ) ; ++ i ; child = cells . item ( i ) ; } } public HTMLElement insertCell ( int index ) { Node child ; HTMLElement newCell ; newCell = new HTMLTableCellElementImpl ( ( HTMLDocumentImpl ) getOwnerDocument ( ) , "TD" ) ; child = getFirstChild ( ) ; while ( child != null ) { if ( child instanceof HTMLTableCellElement ) { if ( index == 0 ) { insertBefore ( newCell , child ) ; return newCell ; } -- index ; } child = child . getNextSibling ( ) ; } appendChild ( newCell ) ; return newCell ; } public void deleteCell ( int index ) { Node child ; child = getFirstChild ( ) ; while ( child != null ) { if ( child instanceof HTMLTableCellElement ) { if ( index == 0 ) { removeChild ( child ) ; return ; } -- index ; } child = child . getNextSibling ( ) ; } } public String getAlign ( ) { return capitalize ( getAttribute ( "align" ) ) ; } public void setAlign ( String align ) { setAttribute ( "align" , align ) ; } public String getBgColor ( ) { return getAttribute ( "bgcolor" ) ; } public void setBgColor ( String bgColor ) { setAttribute ( "bgcolor" , bgColor ) ; } public String getCh ( ) { String ch ; ch = getAttribute ( "char" ) ; if ( ch != null && ch . length ( ) > 1 ) ch = ch . substring ( 0 , 1 ) ; return ch ; } public void setCh ( String ch ) { if ( ch != null && ch . length ( ) > 1 ) ch = ch . substring ( 0 , 1 ) ; setAttribute ( "char" , ch ) ; } public String getChOff ( ) { return getAttribute ( "charoff" ) ; } public void setChOff ( String chOff ) { setAttribute ( "charoff" , chOff ) ; } public String getVAlign ( ) { return capitalize ( getAttribute ( "valign" ) ) ; } public void setVAlign ( String vAlign ) { setAttribute ( "valign" , vAlign ) ; } public HTMLTableRowElementImpl ( HTMLDocumentImpl owner , String name ) { super ( owner , name ) ; } HTMLCollection _cells ; } 	0	['20', '4', '0', '6', '42', '190', '2', '6', '19', '1', '284', '0', '1', '0.831858407', '0.275', '0', '0', '13.15', '4', '2', '0']
package org . w3c . dom . html ; public interface HTMLButtonElement extends HTMLElement { public HTMLFormElement getForm ( ) ; public String getAccessKey ( ) ; public void setAccessKey ( String accessKey ) ; public boolean getDisabled ( ) ; public void setDisabled ( boolean disabled ) ; public String getName ( ) ; public void setName ( String name ) ; public int getTabIndex ( ) ; public void setTabIndex ( int tabIndex ) ; public String getType ( ) ; public String getValue ( ) ; public void setValue ( String value ) ; } 	0	['12', '1', '0', '0', '12', '66', '0', '0', '12', '2', '12', '0', '0', '0', '0.354166667', '0', '0', '0', '1', '1', '0']
package org . apache . xerces . readers ; import org . apache . xerces . framework . XMLErrorReporter ; import org . apache . xerces . utils . StringPool ; import org . xml . sax . InputSource ; import java . io . InputStream ; import java . io . Reader ; public interface XMLEntityReaderFactory { public void addRecognizer ( XMLDeclRecognizer recognizer ) ; public void setSendCharDataAsCharArray ( boolean flag ) ; public void setAllowJavaEncodingName ( boolean flag ) ; public boolean getAllowJavaEncodingName ( ) ; public XMLEntityHandler . EntityReader createReader ( XMLEntityHandler entityHandler , XMLErrorReporter errorReporter , InputSource source , String systemId , boolean xmlDecl , StringPool stringPool ) throws Exception ; public XMLEntityHandler . EntityReader createCharReader ( XMLEntityHandler entityHandler , XMLErrorReporter errorReporter , boolean sendCharDataAsCharArray , Reader reader , StringPool stringPool ) throws Exception ; public XMLEntityHandler . EntityReader createUTF8Reader ( XMLEntityHandler entityHandler , XMLErrorReporter errorReporter , boolean sendCharDataAsCharArray , InputStream data , StringPool stringPool ) throws Exception ; public XMLEntityHandler . EntityReader createStringReader ( XMLEntityHandler entityHandler , XMLErrorReporter errorReporter , boolean sendCharDataAsCharArray , int lineNumber , int columnNumber , int stringHandle , StringPool stringPool , boolean addEnclosingSpaces ) throws Exception ; } 	0	['8', '1', '0', '11', '8', '28', '7', '5', '8', '2', '8', '0', '0', '0', '0.363636364', '0', '0', '0', '1', '1', '0']
package org . apache . html . dom ; import org . w3c . dom . * ; import org . w3c . dom . html . * ; public class HTMLTextAreaElementImpl extends HTMLElementImpl implements HTMLTextAreaElement , HTMLFormControl { public String getDefaultValue ( ) { return getAttribute ( "default-value" ) ; } public void setDefaultValue ( String defaultValue ) { setAttribute ( "default-value" , defaultValue ) ; } public String getAccessKey ( ) { String accessKey ; accessKey = getAttribute ( "accesskey" ) ; if ( accessKey != null && accessKey . length ( ) > 1 ) accessKey = accessKey . substring ( 0 , 1 ) ; return accessKey ; } public void setAccessKey ( String accessKey ) { if ( accessKey != null && accessKey . length ( ) > 1 ) accessKey = accessKey . substring ( 0 , 1 ) ; setAttribute ( "accesskey" , accessKey ) ; } public int getCols ( ) { return getInteger ( getAttribute ( "cols" ) ) ; } public void setCols ( int cols ) { setAttribute ( "cols" , String . valueOf ( cols ) ) ; } public boolean getDisabled ( ) { return getBinary ( "disabled" ) ; } public void setDisabled ( boolean disabled ) { setAttribute ( "disabled" , disabled ) ; } public String getName ( ) { return getAttribute ( "name" ) ; } public void setName ( String name ) { setAttribute ( "name" , name ) ; } public boolean getReadOnly ( ) { return getBinary ( "readonly" ) ; } public void setReadOnly ( boolean readOnly ) { setAttribute ( "readonly" , readOnly ) ; } public int getRows ( ) { return getInteger ( getAttribute ( "rows" ) ) ; } public void setRows ( int rows ) { setAttribute ( "rows" , String . valueOf ( rows ) ) ; } public int getTabIndex ( ) { return getInteger ( getAttribute ( "tabindex" ) ) ; } public void setTabIndex ( int tabIndex ) { setAttribute ( "tabindex" , String . valueOf ( tabIndex ) ) ; } public String getType ( ) { return getAttribute ( "type" ) ; } public String getValue ( ) { return getAttribute ( "value" ) ; } public void setValue ( String value ) { setAttribute ( "value" , value ) ; } public void blur ( ) { } public void focus ( ) { } public void select ( ) { } public HTMLTextAreaElementImpl ( HTMLDocumentImpl owner , String name ) { super ( owner , name ) ; } } 	0	['23', '4', '0', '3', '32', '253', '0', '3', '23', '2', '149', '0', '0', '0.810344828', '0.295652174', '1', '3', '5.47826087', '3', '1.1304', '0']
package org . apache . xerces . readers ; import org . apache . xerces . framework . XMLErrorReporter ; import org . apache . xerces . utils . ChunkyByteArray ; import org . apache . xerces . utils . StringPool ; import java . io . InputStreamReader ; import java . io . IOException ; import java . io . UnsupportedEncodingException ; final class EBCDICRecognizer extends XMLDeclRecognizer { public XMLEntityHandler . EntityReader recognize ( XMLEntityReaderFactory readerFactory , XMLEntityHandler entityHandler , XMLErrorReporter errorReporter , boolean sendCharDataAsCharArray , StringPool stringPool , ChunkyByteArray data , boolean xmlDecl , boolean allowJavaEncodingName ) throws Exception { XMLEntityHandler . EntityReader reader = null ; byte b0 = data . byteAt ( 0 ) ; byte b1 = data . byteAt ( 1 ) ; byte b2 = data . byteAt ( 2 ) ; byte b3 = data . byteAt ( 3 ) ; boolean debug = false ; if ( b0 != 0x4c || b1 != 0x6f || b2 != ( byte ) 0xa7 || b3 != ( byte ) 0x94 ) return reader ; XMLEntityHandler . EntityReader declReader = readerFactory . createCharReader ( entityHandler , errorReporter , sendCharDataAsCharArray , new InputStreamReader ( data , "CP037" ) , stringPool ) ; int encoding = prescanXMLDeclOrTextDecl ( declReader , xmlDecl ) ; if ( encoding == - 1 ) { data . rewind ( ) ; throw new UnsupportedEncodingException ( null ) ; } String enc = stringPool . orphanString ( encoding ) . toUpperCase ( ) ; if ( "ISO-10646-UCS-2" . equals ( enc ) ) throw new UnsupportedEncodingException ( enc ) ; if ( "ISO-10646-UCS-4" . equals ( enc ) ) throw new UnsupportedEncodingException ( enc ) ; if ( "UTF-16" . equals ( enc ) ) throw new UnsupportedEncodingException ( enc ) ; String javaencname = MIME2Java . convert ( enc ) ; if ( null == javaencname ) { if ( allowJavaEncodingName ) { javaencname = enc ; } else { throw new UnsupportedEncodingException ( enc ) ; } } try { data . rewind ( ) ; reader = readerFactory . createCharReader ( entityHandler , errorReporter , sendCharDataAsCharArray , new InputStreamReader ( data , javaencname ) , stringPool ) ; } catch ( UnsupportedEncodingException e ) { throw e ; } catch ( Exception e ) { if ( debug == true ) e . printStackTrace ( ) ; } return reader ; } } 	0	['2', '2', '0', '8', '14', '1', '1', '8', '1', '2', '140', '0', '0', '0.75', '0.571428571', '2', '2', '69', '1', '0.5', '0']
package org . apache . wml ; public interface WMLDoElement extends WMLElement { public void setOptional ( String newValue ) ; public String getOptional ( ) ; public void setLabel ( String newValue ) ; public String getLabel ( ) ; public void setType ( String newValue ) ; public String getType ( ) ; public void setName ( String newValue ) ; public String getName ( ) ; public void setXmlLang ( String newValue ) ; public String getXmlLang ( ) ; } 	0	['10', '1', '0', '2', '10', '45', '1', '1', '10', '2', '10', '0', '0', '0', '0.75', '0', '0', '0', '1', '1', '0']
package org . w3c . dom . html ; import org . w3c . dom . DOMException ; public interface HTMLTableElement extends HTMLElement { public HTMLTableCaptionElement getCaption ( ) ; public void setCaption ( HTMLTableCaptionElement caption ) ; public HTMLTableSectionElement getTHead ( ) ; public void setTHead ( HTMLTableSectionElement tHead ) ; public HTMLTableSectionElement getTFoot ( ) ; public void setTFoot ( HTMLTableSectionElement tFoot ) ; public HTMLCollection getRows ( ) ; public HTMLCollection getTBodies ( ) ; public String getAlign ( ) ; public void setAlign ( String align ) ; public String getBgColor ( ) ; public void setBgColor ( String bgColor ) ; public String getBorder ( ) ; public void setBorder ( String border ) ; public String getCellPadding ( ) ; public void setCellPadding ( String cellPadding ) ; public String getCellSpacing ( ) ; public void setCellSpacing ( String cellSpacing ) ; public String getFrame ( ) ; public void setFrame ( String frame ) ; public String getRules ( ) ; public void setRules ( String rules ) ; public String getSummary ( ) ; public void setSummary ( String summary ) ; public String getWidth ( ) ; public void setWidth ( String width ) ; public HTMLElement createTHead ( ) ; public void deleteTHead ( ) ; public HTMLElement createTFoot ( ) ; public void deleteTFoot ( ) ; public HTMLElement createCaption ( ) ; public void deleteCaption ( ) ; public HTMLElement insertRow ( int index ) throws DOMException ; public void deleteRow ( int index ) throws DOMException ; } 	0	['34', '1', '0', '0', '34', '561', '0', '0', '34', '2', '34', '0', '0', '0', '0.282352941', '0', '0', '0', '1', '1', '0']
package org . w3c . dom . html ; public interface HTMLTableCellElement extends HTMLElement { public int getCellIndex ( ) ; public String getAbbr ( ) ; public void setAbbr ( String abbr ) ; public String getAlign ( ) ; public void setAlign ( String align ) ; public String getAxis ( ) ; public void setAxis ( String axis ) ; public String getBgColor ( ) ; public void setBgColor ( String bgColor ) ; public String getCh ( ) ; public void setCh ( String ch ) ; public String getChOff ( ) ; public void setChOff ( String chOff ) ; public int getColSpan ( ) ; public void setColSpan ( int colSpan ) ; public String getHeaders ( ) ; public void setHeaders ( String headers ) ; public String getHeight ( ) ; public void setHeight ( String height ) ; public boolean getNoWrap ( ) ; public void setNoWrap ( boolean noWrap ) ; public int getRowSpan ( ) ; public void setRowSpan ( int rowSpan ) ; public String getScope ( ) ; public void setScope ( String scope ) ; public String getVAlign ( ) ; public void setVAlign ( String vAlign ) ; public String getWidth ( ) ; public void setWidth ( String width ) ; } 	0	['29', '1', '0', '0', '29', '406', '0', '0', '29', '2', '29', '0', '0', '0', '0.370689655', '0', '0', '0', '1', '1', '0']
package org . apache . wml ; public interface WMLRefreshElement extends WMLElement { } 	0	['0', '1', '0', '2', '0', '0', '1', '1', '0', '2', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0']
package org . apache . html . dom ; import org . w3c . dom . * ; import org . w3c . dom . html . * ; public class HTMLPreElementImpl extends HTMLElementImpl implements HTMLPreElement { public int getWidth ( ) { return getInteger ( getAttribute ( "width" ) ) ; } public void setWidth ( int width ) { setAttribute ( "width" , String . valueOf ( width ) ) ; } public HTMLPreElementImpl ( HTMLDocumentImpl owner , String name ) { super ( owner , name ) ; } } 	0	['3', '4', '0', '2', '8', '3', '0', '2', '3', '2', '20', '0', '0', '0.979166667', '0.5', '0', '0', '5.666666667', '1', '0.6667', '0']
package org . apache . xerces . validators . common ; import org . apache . xerces . framework . XMLContentSpec ; import org . apache . xerces . utils . QName ; import org . apache . xerces . validators . schema . SubstitutionGroupComparator ; public class MixedContentModel implements XMLContentModel { private int fCount ; private QName fChildren [ ] ; private int fChildrenType [ ] ; private SubstitutionGroupComparator comparator = null ; private boolean fOrdered ; private boolean fDTD ; public MixedContentModel ( QName childList [ ] , int childListType [ ] , int offset , int length ) throws CMException { this ( childList , childListType , offset , length , false , false ) ; } public MixedContentModel ( QName childList [ ] , int childListType [ ] , int offset , int length , boolean ordered ) throws CMException { this ( childList , childListType , offset , length , ordered , false ) ; } public MixedContentModel ( QName childList [ ] , int childListType [ ] , int offset , int length , boolean ordered , boolean dtd ) throws CMException { fCount = length ; fChildren = new QName [ fCount ] ; fChildrenType = new int [ fCount ] ; for ( int i = 0 ; i < fCount ; i ++ ) { fChildren [ i ] = new QName ( childList [ offset + i ] ) ; fChildrenType [ i ] = childListType [ offset + i ] ; } fOrdered = ordered ; fDTD = dtd ; } public int validateContent ( QName children [ ] , int offset , int length ) throws Exception { if ( fOrdered ) { int inIndex = 0 ; for ( int outIndex = 0 ; outIndex < length ; outIndex ++ ) { final QName curChild = children [ offset + outIndex ] ; if ( curChild . localpart == - 1 ) { continue ; } int type = fChildrenType [ inIndex ] ; if ( type == XMLContentSpec . CONTENTSPECNODE_LEAF ) { if ( fDTD ) { if ( fChildren [ inIndex ] . rawname != children [ offset + outIndex ] . rawname ) { return outIndex ; } } else { if ( fChildren [ inIndex ] . uri != children [ offset + outIndex ] . uri && fChildren [ inIndex ] . localpart != children [ offset + outIndex ] . localpart ) { return outIndex ; } } } else if ( type == XMLContentSpec . CONTENTSPECNODE_ANY ) { int uri = fChildren [ inIndex ] . uri ; if ( uri != - 1 && uri != children [ outIndex ] . uri ) { return outIndex ; } } else if ( type == XMLContentSpec . CONTENTSPECNODE_ANY_LOCAL ) { if ( children [ outIndex ] . uri != - 1 ) { return outIndex ; } } else if ( type == XMLContentSpec . CONTENTSPECNODE_ANY_OTHER ) { if ( fChildren [ inIndex ] . uri == children [ outIndex ] . uri ) { return outIndex ; } } inIndex ++ ; } } else { for ( int outIndex = 0 ; outIndex < length ; outIndex ++ ) { final QName curChild = children [ offset + outIndex ] ; if ( curChild . localpart == - 1 ) continue ; int inIndex = 0 ; for ( ; inIndex < fCount ; inIndex ++ ) { int type = fChildrenType [ inIndex ] ; if ( type == XMLContentSpec . CONTENTSPECNODE_LEAF ) { if ( fDTD ) { if ( curChild . rawname == fChildren [ inIndex ] . rawname ) { break ; } } else { if ( curChild . uri == fChildren [ inIndex ] . uri && curChild . localpart == fChildren [ inIndex ] . localpart ) break ; } } else if ( type == XMLContentSpec . CONTENTSPECNODE_ANY ) { int uri = fChildren [ inIndex ] . uri ; if ( uri == - 1 || uri == children [ outIndex ] . uri ) { break ; } } else if ( type == XMLContentSpec . CONTENTSPECNODE_ANY_LOCAL ) { if ( children [ outIndex ] . uri == - 1 ) { break ; } } else if ( type == XMLContentSpec . CONTENTSPECNODE_ANY_OTHER ) { if ( fChildren [ inIndex ] . uri != children [ outIndex ] . uri ) { break ; } } } if ( inIndex == fCount ) return outIndex ; } } return - 1 ; } public int validateContentSpecial ( QName children [ ] , int offset , int length ) throws Exception { return validateContent ( children , offset , length ) ; } public void setSubstitutionGroupComparator ( SubstitutionGroupComparator comparator ) { this . comparator = comparator ; } public int whatCanGoHere ( boolean fullyValid , InsertableElementsInfo info ) throws Exception { for ( int index = info . insertAt ; index < info . childCount ; index ++ ) info . curChildren [ index ] = info . curChildren [ index + 1 ] ; info . childCount -- ; final int failedIndex = validateContent ( info . curChildren , 0 , info . childCount ) ; if ( ( failedIndex != - 1 ) && ( failedIndex < info . insertAt ) ) return failedIndex ; info . canHoldPCData = true ; info . isValidEOC = true ; info . resultsCount = fCount ; if ( ( info . results == null ) || ( info . results . length < info . resultsCount ) ) info . results = new boolean [ info . resultsCount ] ; if ( ( info . possibleChildren == null ) || ( info . possibleChildren . length < info . resultsCount ) ) { info . possibleChildren = new QName [ info . resultsCount ] ; for ( int i = 0 ; i < info . possibleChildren . length ; i ++ ) { info . possibleChildren [ i ] = new QName ( ) ; } } boolean bStatus = true ; if ( fullyValid && ( failedIndex < info . childCount ) ) bStatus = false ; for ( int index = 0 ; index < fCount ; index ++ ) { info . possibleChildren [ index ] . setValues ( fChildren [ index ] ) ; info . results [ index ] = bStatus ; } return - 1 ; } public ContentLeafNameTypeVector getContentLeafNameTypeVector ( ) { return null ; } } 	0	['8', '1', '0', '7', '12', '20', '1', '6', '8', '0.333333333', '464', '1', '2', '0', '0.464285714', '0', '0', '56.25', '1', '0.625', '0']
package org . w3c . dom . events ; public interface Event { public static final short CAPTURING_PHASE = 1 ; public static final short AT_TARGET = 2 ; public static final short BUBBLING_PHASE = 3 ; public String getType ( ) ; public EventTarget getTarget ( ) ; public EventTarget getCurrentTarget ( ) ; public short getEventPhase ( ) ; public boolean getBubbles ( ) ; public boolean getCancelable ( ) ; public long getTimeStamp ( ) ; public void stopPropagation ( ) ; public void preventDefault ( ) ; public void initEvent ( String eventTypeArg , boolean canBubbleArg , boolean cancelableArg ) ; } 	0	['10', '1', '0', '0', '10', '45', '0', '0', '10', '1.111111111', '13', '0', '0', '0', '0.4', '0', '0', '0', '1', '1', '0']
package org . apache . xerces . dom . events ; import org . w3c . dom . events . * ; import org . w3c . dom . Node ; public class EventImpl implements Event { public String type = null ; public EventTarget target ; public EventTarget currentTarget ; public short eventPhase ; public boolean initialized = false , bubbles = true , cancelable = false ; public boolean stopPropagation = false , preventDefault = false ; protected long timeStamp = System . currentTimeMillis ( ) ; public void initEvent ( String eventTypeArg , boolean canBubbleArg , boolean cancelableArg ) { type = eventTypeArg ; bubbles = canBubbleArg ; cancelable = cancelableArg ; initialized = true ; } public boolean getBubbles ( ) { return bubbles ; } public boolean getCancelable ( ) { return cancelable ; } public EventTarget getCurrentTarget ( ) { return currentTarget ; } public short getEventPhase ( ) { return eventPhase ; } public EventTarget getTarget ( ) { return target ; } public String getType ( ) { return type ; } public long getTimeStamp ( ) { return timeStamp ; } public void stopPropagation ( ) { stopPropagation = true ; } public void preventDefault ( ) { preventDefault = true ; } } 	0	['11', '1', '1', '3', '13', '35', '3', '0', '11', '0.9', '87', '0.1', '2', '0', '0.393939394', '0', '0', '6', '1', '0.9091', '0']
package org . apache . xerces . validators . datatype ; public class XMLException extends Exception { public XMLException ( ) { } public XMLException ( String message ) { super ( message ) ; } public XMLException ( Exception exception ) { } public XMLException ( String message , Exception exception ) { } public Exception getException ( ) { return null ; } } 	0	['5', '3', '2', '2', '7', '10', '2', '0', '5', '2', '20', '0', '0', '0.944444444', '0.6', '0', '0', '3', '1', '0.2', '0']
package org . w3c . dom . html ; public interface HTMLModElement extends HTMLElement { public String getCite ( ) ; public void setCite ( String cite ) ; public String getDateTime ( ) ; public void setDateTime ( String dateTime ) ; } 	0	['4', '1', '0', '0', '4', '6', '0', '0', '4', '2', '4', '0', '0', '0', '0.75', '0', '0', '0', '1', '1', '0']
package org . apache . xml . serialize ; import java . io . OutputStream ; import java . io . Writer ; import java . io . UnsupportedEncodingException ; final class SerializerFactoryImpl extends SerializerFactory { private String _method ; SerializerFactoryImpl ( String method ) { _method = method ; if ( ! _method . equals ( Method . XML ) && ! _method . equals ( Method . HTML ) && ! _method . equals ( Method . XHTML ) && ! _method . equals ( Method . TEXT ) ) throw new IllegalArgumentException ( "SER004 The method '" + method + "' is not supported by this factory\n" + method ) ; } public Serializer makeSerializer ( OutputFormat format ) { Serializer serializer ; serializer = getSerializer ( format ) ; serializer . setOutputFormat ( format ) ; return serializer ; } public Serializer makeSerializer ( Writer writer , OutputFormat format ) { Serializer serializer ; serializer = getSerializer ( format ) ; serializer . setOutputCharStream ( writer ) ; return serializer ; } public Serializer makeSerializer ( OutputStream output , OutputFormat format ) throws UnsupportedEncodingException { Serializer serializer ; serializer = getSerializer ( format ) ; serializer . setOutputByteStream ( output ) ; return serializer ; } private Serializer getSerializer ( OutputFormat format ) { if ( _method . equals ( Method . XML ) ) { return new XMLSerializer ( format ) ; } else if ( _method . equals ( Method . HTML ) ) { return new HTMLSerializer ( format ) ; } else if ( _method . equals ( Method . XHTML ) ) { return new XHTMLSerializer ( format ) ; } else if ( _method . equals ( Method . TEXT ) ) { return new TextSerializer ( ) ; } else { throw new IllegalStateException ( "SER005 The method '" + _method + "' is not supported by this factory\n" + _method ) ; } } protected String getSupportedMethod ( ) { return _method ; } } 	0	['6', '2', '0', '7', '20', '9', '1', '7', '3', '0', '136', '1', '0', '0.545454545', '0.433333333', '1', '2', '21.5', '5', '1.5', '0']
package org . apache . wml . dom ; import org . apache . wml . * ; public class WMLOptionElementImpl extends WMLElementImpl implements WMLOptionElement { public WMLOptionElementImpl ( WMLDocumentImpl owner , String tagName ) { super ( owner , tagName ) ; } public void setValue ( String newValue ) { setAttribute ( "value" , newValue ) ; } public String getValue ( ) { return getAttribute ( "value" ) ; } public void setClassName ( String newValue ) { setAttribute ( "class" , newValue ) ; } public String getClassName ( ) { return getAttribute ( "class" ) ; } public void setXmlLang ( String newValue ) { setAttribute ( "xml:lang" , newValue ) ; } public String getXmlLang ( ) { return getAttribute ( "xml:lang" ) ; } public void setTitle ( String newValue ) { setAttribute ( "title" , newValue ) ; } public String getTitle ( ) { return getAttribute ( "title" ) ; } public void setId ( String newValue ) { setAttribute ( "id" , newValue ) ; } public String getId ( ) { return getAttribute ( "id" ) ; } public void setOnPick ( String newValue ) { setAttribute ( "onpick" , newValue ) ; } public String getOnPick ( ) { return getAttribute ( "onpick" ) ; } } 	0	['13', '4', '0', '3', '16', '78', '0', '3', '13', '2', '72', '0', '0', '0.872340426', '0.538461538', '1', '7', '4.538461538', '1', '0.9231', '0']
package org . apache . xerces . validators . datatype ; public class InvalidDatatypeValueException extends XMLException { private int majorCode = - 1 ; private int minorCode = - 1 ; public int getMinorCode ( ) { return minorCode ; } public int getMajorCode ( ) { return majorCode ; } public void setMinorCode ( int code ) { majorCode = code ; } public void setMajorCode ( int code ) { minorCode = code ; } public InvalidDatatypeValueException ( ) { super ( ) ; } public InvalidDatatypeValueException ( String msg ) { super ( msg ) ; } public InvalidDatatypeValueException ( Exception exception ) { super ( exception ) ; } public InvalidDatatypeValueException ( String message , Exception exception ) { super ( message , exception ) ; } } 	0	['8', '4', '0', '21', '12', '0', '20', '1', '8', '0.285714286', '64', '1', '0', '0.818181818', '0.4375', '0', '0', '6.75', '1', '0.5', '0']
package org . apache . xerces . utils . regex ; import java . util . Vector ; class Op { static final int DOT = 0 ; static final int CHAR = 1 ; static final int RANGE = 3 ; static final int NRANGE = 4 ; static final int ANCHOR = 5 ; static final int STRING = 6 ; static final int CLOSURE = 7 ; static final int NONGREEDYCLOSURE = 8 ; static final int QUESTION = 9 ; static final int NONGREEDYQUESTION = 10 ; static final int UNION = 11 ; static final int CAPTURE = 15 ; static final int BACKREFERENCE = 16 ; static final int LOOKAHEAD = 20 ; static final int NEGATIVELOOKAHEAD = 21 ; static final int LOOKBEHIND = 22 ; static final int NEGATIVELOOKBEHIND = 23 ; static final int INDEPENDENT = 24 ; static final int MODIFIER = 25 ; static final int CONDITION = 26 ; static int nofinstances = 0 ; static final boolean COUNT = false ; static Op createDot ( ) { if ( Op . COUNT ) Op . nofinstances ++ ; return new Op ( Op . DOT ) ; } static CharOp createChar ( int data ) { if ( Op . COUNT ) Op . nofinstances ++ ; return new CharOp ( Op . CHAR , data ) ; } static CharOp createAnchor ( int data ) { if ( Op . COUNT ) Op . nofinstances ++ ; return new CharOp ( Op . ANCHOR , data ) ; } static CharOp createCapture ( int number , Op next ) { if ( Op . COUNT ) Op . nofinstances ++ ; CharOp op = new CharOp ( Op . CAPTURE , number ) ; op . next = next ; return op ; } static UnionOp createUnion ( int size ) { if ( Op . COUNT ) Op . nofinstances ++ ; return new UnionOp ( Op . UNION , size ) ; } static ChildOp createClosure ( int id ) { if ( Op . COUNT ) Op . nofinstances ++ ; return new ModifierOp ( Op . CLOSURE , id , - 1 ) ; } static ChildOp createNonGreedyClosure ( ) { if ( Op . COUNT ) Op . nofinstances ++ ; return new ChildOp ( Op . NONGREEDYCLOSURE ) ; } static ChildOp createQuestion ( boolean nongreedy ) { if ( Op . COUNT ) Op . nofinstances ++ ; return new ChildOp ( nongreedy ? Op . NONGREEDYQUESTION : Op . QUESTION ) ; } static RangeOp createRange ( Token tok ) { if ( Op . COUNT ) Op . nofinstances ++ ; return new RangeOp ( Op . RANGE , tok ) ; } static ChildOp createLook ( int type , Op next , Op branch ) { if ( Op . COUNT ) Op . nofinstances ++ ; ChildOp op = new ChildOp ( type ) ; op . setChild ( branch ) ; op . next = next ; return op ; } static CharOp createBackReference ( int refno ) { if ( Op . COUNT ) Op . nofinstances ++ ; return new CharOp ( Op . BACKREFERENCE , refno ) ; } static StringOp createString ( String literal ) { if ( Op . COUNT ) Op . nofinstances ++ ; return new StringOp ( Op . STRING , literal ) ; } static ChildOp createIndependent ( Op next , Op branch ) { if ( Op . COUNT ) Op . nofinstances ++ ; ChildOp op = new ChildOp ( Op . INDEPENDENT ) ; op . setChild ( branch ) ; op . next = next ; return op ; } static ModifierOp createModifier ( Op next , Op branch , int add , int mask ) { if ( Op . COUNT ) Op . nofinstances ++ ; ModifierOp op = new ModifierOp ( Op . MODIFIER , add , mask ) ; op . setChild ( branch ) ; op . next = next ; return op ; } static ConditionOp createCondition ( Op next , int ref , Op conditionflow , Op yesflow , Op noflow ) { if ( Op . COUNT ) Op . nofinstances ++ ; ConditionOp op = new ConditionOp ( Op . CONDITION , ref , conditionflow , yesflow , noflow ) ; op . next = next ; return op ; } int type ; Op next = null ; protected Op ( int type ) { this . type = type ; } int size ( ) { return 0 ; } Op elementAt ( int index ) { throw new RuntimeException ( "Internal Error: type=" + this . type ) ; } Op getChild ( ) { throw new RuntimeException ( "Internal Error: type=" + this . type ) ; } int getData ( ) { throw new RuntimeException ( "Internal Error: type=" + this . type ) ; } int getData2 ( ) { throw new RuntimeException ( "Internal Error: type=" + this . type ) ; } RangeToken getToken ( ) { throw new RuntimeException ( "Internal Error: type=" + this . type ) ; } String getString ( ) { throw new RuntimeException ( "Internal Error: type=" + this . type ) ; } static class CharOp extends Op { int charData ; CharOp ( int type , int data ) { super ( type ) ; this . charData = data ; } int getData ( ) { return this . charData ; } } static class UnionOp extends Op { Vector branches ; UnionOp ( int type , int size ) { super ( type ) ; this . branches = new Vector ( size ) ; } void addElement ( Op op ) { this . branches . addElement ( op ) ; } int size ( ) { return this . branches . size ( ) ; } Op elementAt ( int index ) { return ( Op ) this . branches . elementAt ( index ) ; } } static class ChildOp extends Op { Op child ; ChildOp ( int type ) { super ( type ) ; } void setChild ( Op child ) { this . child = child ; } Op getChild ( ) { return this . child ; } } static class ModifierOp extends ChildOp { int v1 ; int v2 ; ModifierOp ( int type , int v1 , int v2 ) { super ( type ) ; this . v1 = v1 ; this . v2 = v2 ; } int getData ( ) { return this . v1 ; } int getData2 ( ) { return this . v2 ; } } static class RangeOp extends Op { Token tok ; RangeOp ( int type , Token tok ) { super ( type ) ; this . tok = tok ; } RangeToken getToken ( ) { return ( RangeToken ) this . tok ; } } static class StringOp extends Op { String string ; StringOp ( int type , String literal ) { super ( type ) ; this . string = literal ; } String getString ( ) { return this . string ; } } static class ConditionOp extends Op { int refNumber ; Op condition ; Op yes ; Op no ; ConditionOp ( int type , int refno , Op conditionflow , Op yesflow , Op noflow ) { super ( type ) ; this . refNumber = refno ; this . condition = conditionflow ; this . yes = yesflow ; this . no = noflow ; } } } 	0	['24', '1', '6', '10', '39', '234', '7', '9', '0', '1.023550725', '268', '0', '1', '0', '0.195652174', '0', '0', '9.166666667', '2', '0.9583', '0']
package org . apache . xerces . utils ; public class QName { public int prefix ; public int localpart ; public int rawname ; public int uri ; public QName ( ) { clear ( ) ; } public QName ( int prefix , int localpart , int rawname ) { setValues ( prefix , localpart , rawname , - 1 ) ; } public QName ( int prefix , int localpart , int rawname , int uri ) { setValues ( prefix , localpart , rawname , uri ) ; } public QName ( QName qname ) { setValues ( qname ) ; } public void setValues ( QName qname ) { prefix = qname . prefix ; localpart = qname . localpart ; rawname = qname . rawname ; uri = qname . uri ; } public void setValues ( int prefix , int localpart , int rawname ) { setValues ( prefix , localpart , rawname , - 1 ) ; } public void setValues ( int prefix , int localpart , int rawname , int uri ) { this . prefix = prefix ; this . localpart = localpart ; this . rawname = rawname ; this . uri = uri ; } public void clear ( ) { prefix = - 1 ; localpart = - 1 ; rawname = - 1 ; uri = - 1 ; } public boolean equals ( Object object ) { if ( object != null && object instanceof QName ) { QName qname = ( QName ) object ; return prefix == qname . prefix && localpart == qname . localpart && rawname == qname . rawname && uri == qname . uri ; } return false ; } public int hashCode ( ) { return ( localpart << 16 ) | uri ; } public String toString ( ) { StringBuffer str = new StringBuffer ( ) ; str . append ( "prefix: " ) ; str . append ( prefix ) ; str . append ( ", " ) ; str . append ( "localpart: " ) ; str . append ( localpart ) ; str . append ( ", " ) ; str . append ( "rawname: " ) ; str . append ( rawname ) ; str . append ( ", " ) ; str . append ( "uri: " ) ; str . append ( uri ) ; return str . toString ( ) ; } } 	0	['11', '1', '0', '40', '16', '25', '40', '0', '11', '0.05', '191', '0', '0', '0', '0.409090909', '1', '1', '16', '7', '1.1818', '0']
package org . w3c . dom . traversal ; import org . w3c . dom . Node ; import org . w3c . dom . DOMException ; public interface DocumentTraversal { public NodeIterator createNodeIterator ( Node root , int whatToShow , NodeFilter filter , boolean entityReferenceExpansion ) throws DOMException ; public TreeWalker createTreeWalker ( Node root , int whatToShow , NodeFilter filter , boolean entityReferenceExpansion ) throws DOMException ; } 	0	['2', '1', '0', '0', '2', '1', '0', '0', '2', '2', '2', '0', '0', '0', '1', '0', '0', '0', '1', '1', '0']
package org . apache . xerces . utils . regex ; import java . text . CharacterIterator ; public class RegularExpression implements java . io . Serializable { static final boolean DEBUG = false ; private synchronized void compile ( Token tok ) { if ( this . operations != null ) return ; this . numberOfClosures = 0 ; this . operations = this . compile ( tok , null , false ) ; } private Op compile ( Token tok , Op next , boolean reverse ) { Op ret ; switch ( tok . type ) { case Token . DOT : ret = Op . createDot ( ) ; ret . next = next ; break ; case Token . CHAR : ret = Op . createChar ( tok . getChar ( ) ) ; ret . next = next ; break ; case Token . ANCHOR : ret = Op . createAnchor ( tok . getChar ( ) ) ; ret . next = next ; break ; case Token . RANGE : case Token . NRANGE : ret = Op . createRange ( tok ) ; ret . next = next ; break ; case Token . CONCAT : ret = next ; if ( ! reverse ) { for ( int i = tok . size ( ) - 1 ; i >= 0 ; i -- ) { ret = compile ( tok . getChild ( i ) , ret , false ) ; } } else { for ( int i = 0 ; i < tok . size ( ) ; i ++ ) { ret = compile ( tok . getChild ( i ) , ret , true ) ; } } break ; case Token . UNION : Op . UnionOp uni = Op . createUnion ( tok . size ( ) ) ; for ( int i = 0 ; i < tok . size ( ) ; i ++ ) { uni . addElement ( compile ( tok . getChild ( i ) , next , reverse ) ) ; } ret = uni ; break ; case Token . CLOSURE : case Token . NONGREEDYCLOSURE : Token child = tok . getChild ( 0 ) ; int min = tok . getMin ( ) ; int max = tok . getMax ( ) ; if ( min >= 0 && min == max ) { ret = next ; for ( int i = 0 ; i < min ; i ++ ) { ret = compile ( child , ret , reverse ) ; } break ; } if ( min > 0 && max > 0 ) max -= min ; if ( max > 0 ) { ret = next ; for ( int i = 0 ; i < max ; i ++ ) { Op . ChildOp q = Op . createQuestion ( tok . type == Token . NONGREEDYCLOSURE ) ; q . next = next ; q . setChild ( compile ( child , ret , reverse ) ) ; ret = q ; } } else { Op . ChildOp op ; if ( tok . type == Token . NONGREEDYCLOSURE ) { op = Op . createNonGreedyClosure ( ) ; } else { if ( child . getMinLength ( ) == 0 ) op = Op . createClosure ( this . numberOfClosures ++ ) ; else op = Op . createClosure ( - 1 ) ; } op . next = next ; op . setChild ( compile ( child , op , reverse ) ) ; ret = op ; } if ( min > 0 ) { for ( int i = 0 ; i < min ; i ++ ) { ret = compile ( child , ret , reverse ) ; } } break ; case Token . EMPTY : ret = next ; break ; case Token . STRING : ret = Op . createString ( tok . getString ( ) ) ; ret . next = next ; break ; case Token . BACKREFERENCE : ret = Op . createBackReference ( tok . getReferenceNumber ( ) ) ; ret . next = next ; break ; case Token . PAREN : if ( tok . getParenNumber ( ) == 0 ) { ret = compile ( tok . getChild ( 0 ) , next , reverse ) ; } else if ( reverse ) { next = Op . createCapture ( tok . getParenNumber ( ) , next ) ; next = compile ( tok . getChild ( 0 ) , next , reverse ) ; ret = Op . createCapture ( - tok . getParenNumber ( ) , next ) ; } else { next = Op . createCapture ( - tok . getParenNumber ( ) , next ) ; next = compile ( tok . getChild ( 0 ) , next , reverse ) ; ret = Op . createCapture ( tok . getParenNumber ( ) , next ) ; } break ; case Token . LOOKAHEAD : ret = Op . createLook ( Op . LOOKAHEAD , next , compile ( tok . getChild ( 0 ) , null , false ) ) ; break ; case Token . NEGATIVELOOKAHEAD : ret = Op . createLook ( Op . NEGATIVELOOKAHEAD , next , compile ( tok . getChild ( 0 ) , null , false ) ) ; break ; case Token . LOOKBEHIND : ret = Op . createLook ( Op . LOOKBEHIND , next , compile ( tok . getChild ( 0 ) , null , true ) ) ; break ; case Token . NEGATIVELOOKBEHIND : ret = Op . createLook ( Op . NEGATIVELOOKBEHIND , next , compile ( tok . getChild ( 0 ) , null , true ) ) ; break ; case Token . INDEPENDENT : ret = Op . createIndependent ( next , compile ( tok . getChild ( 0 ) , null , reverse ) ) ; break ; case Token . MODIFIERGROUP : ret = Op . createModifier ( next , compile ( tok . getChild ( 0 ) , null , reverse ) , ( ( Token . ModifierToken ) tok ) . getOptions ( ) , ( ( Token . ModifierToken ) tok ) . getOptionsMask ( ) ) ; break ; case Token . CONDITION : Token . ConditionToken ctok = ( Token . ConditionToken ) tok ; int ref = ctok . refNumber ; Op condition = ctok . condition == null ? null : compile ( ctok . condition , null , reverse ) ; Op yes = compile ( ctok . yes , next , reverse ) ; Op no = ctok . no == null ? null : compile ( ctok . no , next , reverse ) ; ret = Op . createCondition ( next , ref , condition , yes , no ) ; break ; default : throw new RuntimeException ( "Unknown token type: " + tok . type ) ; } return ret ; } public boolean matches ( char [ ] target ) { return this . matches ( target , 0 , target . length , ( Match ) null ) ; } public boolean matches ( char [ ] target , int start , int end ) { return this . matches ( target , start , end , ( Match ) null ) ; } public boolean matches ( char [ ] target , Match match ) { return this . matches ( target , 0 , target . length , match ) ; } public boolean matches ( char [ ] target , int start , int end , Match match ) { synchronized ( this ) { if ( this . operations == null ) this . prepare ( ) ; if ( this . context == null ) this . context = new Context ( ) ; } Context con = null ; synchronized ( this . context ) { con = this . context . inuse ? new Context ( ) : this . context ; con . reset ( target , start , end , this . numberOfClosures ) ; } if ( match != null ) { match . setNumberOfGroups ( this . nofparen ) ; match . setSource ( target ) ; } else if ( this . hasBackReferences ) { match = new Match ( ) ; match . setNumberOfGroups ( this . nofparen ) ; } con . match = match ; if ( this . isSet ( this . options , XMLSCHEMA_MODE ) ) { int matchEnd = this . matchCharArray ( con , this . operations , con . start , 1 , this . options ) ; if ( matchEnd == con . limit ) { if ( con . match != null ) { con . match . setBeginning ( 0 , con . start ) ; con . match . setEnd ( 0 , matchEnd ) ; } con . inuse = false ; return true ; } return false ; } if ( this . fixedStringOnly ) { int o = this . fixedStringTable . matches ( target , con . start , con . limit ) ; if ( o >= 0 ) { if ( con . match != null ) { con . match . setBeginning ( 0 , o ) ; con . match . setEnd ( 0 , o + this . fixedString . length ( ) ) ; } con . inuse = false ; return true ; } con . inuse = false ; return false ; } if ( this . fixedString != null ) { int o = this . fixedStringTable . matches ( target , con . start , con . limit ) ; if ( o < 0 ) { con . inuse = false ; return false ; } } int limit = con . limit - this . minlength ; int matchStart ; int matchEnd = - 1 ; if ( this . operations != null && this . operations . type == Op . CLOSURE && this . operations . getChild ( ) . type == Op . DOT ) { if ( isSet ( this . options , SINGLE_LINE ) ) { matchStart = con . start ; matchEnd = this . matchCharArray ( con , this . operations , con . start , 1 , this . options ) ; } else { boolean previousIsEOL = true ; for ( matchStart = con . start ; matchStart <= limit ; matchStart ++ ) { int ch = target [ matchStart ] ; if ( isEOLChar ( ch ) ) { previousIsEOL = true ; } else { if ( previousIsEOL ) { if ( 0 <= ( matchEnd = this . matchCharArray ( con , this . operations , matchStart , 1 , this . options ) ) ) break ; } previousIsEOL = false ; } } } } else if ( this . firstChar != null ) { RangeToken range = this . firstChar ; if ( this . isSet ( this . options , IGNORE_CASE ) ) { range = this . firstChar . getCaseInsensitiveToken ( ) ; for ( matchStart = con . start ; matchStart <= limit ; matchStart ++ ) { int ch = target [ matchStart ] ; if ( REUtil . isHighSurrogate ( ch ) && matchStart + 1 < con . limit ) { ch = REUtil . composeFromSurrogates ( ch , target [ matchStart + 1 ] ) ; if ( ! range . match ( ch ) ) continue ; } else { if ( ! range . match ( ch ) ) { char ch1 = Character . toUpperCase ( ( char ) ch ) ; if ( ! range . match ( ch1 ) ) if ( ! range . match ( Character . toLowerCase ( ch1 ) ) ) continue ; } } if ( 0 <= ( matchEnd = this . matchCharArray ( con , this . operations , matchStart , 1 , this . options ) ) ) break ; } } else { for ( matchStart = con . start ; matchStart <= limit ; matchStart ++ ) { int ch = target [ matchStart ] ; if ( REUtil . isHighSurrogate ( ch ) && matchStart + 1 < con . limit ) ch = REUtil . composeFromSurrogates ( ch , target [ matchStart + 1 ] ) ; if ( ! range . match ( ch ) ) continue ; if ( 0 <= ( matchEnd = this . matchCharArray ( con , this . operations , matchStart , 1 , this . options ) ) ) break ; } } } else { for ( matchStart = con . start ; matchStart <= limit ; matchStart ++ ) { if ( 0 <= ( matchEnd = this . matchCharArray ( con , this . operations , matchStart , 1 , this . options ) ) ) break ; } } if ( matchEnd >= 0 ) { if ( con . match != null ) { con . match . setBeginning ( 0 , matchStart ) ; con . match . setEnd ( 0 , matchEnd ) ; } con . inuse = false ; return true ; } else { con . inuse = false ; return false ; } } private int matchCharArray ( Context con , Op op , int offset , int dx , int opts ) { char [ ] target = con . charTarget ; while ( true ) { if ( op == null ) return offset ; if ( offset > con . limit || offset < con . start ) return - 1 ; switch ( op . type ) { case Op . CHAR : if ( isSet ( opts , IGNORE_CASE ) ) { int ch = op . getData ( ) ; if ( dx > 0 ) { if ( offset >= con . limit || ! matchIgnoreCase ( ch , target [ offset ] ) ) return - 1 ; offset ++ ; } else { int o1 = offset - 1 ; if ( o1 >= con . limit || o1 < 0 || ! matchIgnoreCase ( ch , target [ o1 ] ) ) return - 1 ; offset = o1 ; } } else { int ch = op . getData ( ) ; if ( dx > 0 ) { if ( offset >= con . limit || ch != target [ offset ] ) return - 1 ; offset ++ ; } else { int o1 = offset - 1 ; if ( o1 >= con . limit || o1 < 0 || ch != target [ o1 ] ) return - 1 ; offset = o1 ; } } op = op . next ; break ; case Op . DOT : if ( dx > 0 ) { if ( offset >= con . limit ) return - 1 ; int ch = target [ offset ] ; if ( isSet ( opts , SINGLE_LINE ) ) { if ( REUtil . isHighSurrogate ( ch ) && offset + 1 < con . limit ) offset ++ ; } else { if ( REUtil . isHighSurrogate ( ch ) && offset + 1 < con . limit ) ch = REUtil . composeFromSurrogates ( ch , target [ ++ offset ] ) ; if ( isEOLChar ( ch ) ) return - 1 ; } offset ++ ; } else { int o1 = offset - 1 ; if ( o1 >= con . limit || o1 < 0 ) return - 1 ; int ch = target [ o1 ] ; if ( isSet ( opts , SINGLE_LINE ) ) { if ( REUtil . isLowSurrogate ( ch ) && o1 - 1 >= 0 ) o1 -- ; } else { if ( REUtil . isLowSurrogate ( ch ) && o1 - 1 >= 0 ) ch = REUtil . composeFromSurrogates ( target [ -- o1 ] , ch ) ; if ( ! isEOLChar ( ch ) ) return - 1 ; } offset = o1 ; } op = op . next ; break ; case Op . RANGE : case Op . NRANGE : if ( dx > 0 ) { if ( offset >= con . limit ) return - 1 ; int ch = target [ offset ] ; if ( REUtil . isHighSurrogate ( ch ) && offset + 1 < con . limit ) ch = REUtil . composeFromSurrogates ( ch , target [ ++ offset ] ) ; RangeToken tok = op . getToken ( ) ; if ( isSet ( opts , IGNORE_CASE ) ) { tok = tok . getCaseInsensitiveToken ( ) ; if ( ! tok . match ( ch ) ) { if ( ch >= 0x10000 ) return - 1 ; char uch ; if ( ! tok . match ( uch = Character . toUpperCase ( ( char ) ch ) ) && ! tok . match ( Character . toLowerCase ( uch ) ) ) return - 1 ; } } else { if ( ! tok . match ( ch ) ) return - 1 ; } offset ++ ; } else { int o1 = offset - 1 ; if ( o1 >= con . limit || o1 < 0 ) return - 1 ; int ch = target [ o1 ] ; if ( REUtil . isLowSurrogate ( ch ) && o1 - 1 >= 0 ) ch = REUtil . composeFromSurrogates ( target [ -- o1 ] , ch ) ; RangeToken tok = op . getToken ( ) ; if ( isSet ( opts , IGNORE_CASE ) ) { tok = tok . getCaseInsensitiveToken ( ) ; if ( ! tok . match ( ch ) ) { if ( ch >= 0x10000 ) return - 1 ; char uch ; if ( ! tok . match ( uch = Character . toUpperCase ( ( char ) ch ) ) && ! tok . match ( Character . toLowerCase ( uch ) ) ) return - 1 ; } } else { if ( ! tok . match ( ch ) ) return - 1 ; } offset = o1 ; } op = op . next ; break ; case Op . ANCHOR : boolean go = false ; switch ( op . getData ( ) ) { case '^' : if ( isSet ( opts , MULTIPLE_LINES ) ) { if ( ! ( offset == con . start || offset > con . start && isEOLChar ( target [ offset - 1 ] ) ) ) return - 1 ; } else { if ( offset != con . start ) return - 1 ; } break ; case '@' : if ( ! ( offset == con . start || offset > con . start && isEOLChar ( target [ offset - 1 ] ) ) ) return - 1 ; break ; case '$' : if ( isSet ( opts , MULTIPLE_LINES ) ) { if ( ! ( offset == con . limit || offset < con . limit && isEOLChar ( target [ offset ] ) ) ) return - 1 ; } else { if ( ! ( offset == con . limit || offset + 1 == con . limit && isEOLChar ( target [ offset ] ) || offset + 2 == con . limit && target [ offset ] == CARRIAGE_RETURN && target [ offset + 1 ] == LINE_FEED ) ) return - 1 ; } break ; case 'A' : if ( offset != con . start ) return - 1 ; break ; case 'Z' : if ( ! ( offset == con . limit || offset + 1 == con . limit && isEOLChar ( target [ offset ] ) || offset + 2 == con . limit && target [ offset ] == CARRIAGE_RETURN && target [ offset + 1 ] == LINE_FEED ) ) return - 1 ; break ; case 'z' : if ( offset != con . limit ) return - 1 ; break ; case 'b' : if ( con . length == 0 ) return - 1 ; { int after = getWordType ( target , con . start , con . limit , offset , opts ) ; if ( after == WT_IGNORE ) return - 1 ; int before = getPreviousWordType ( target , con . start , con . limit , offset , opts ) ; if ( after == before ) return - 1 ; } break ; case 'B' : if ( con . length == 0 ) go = true ; else { int after = getWordType ( target , con . start , con . limit , offset , opts ) ; go = after == WT_IGNORE || after == getPreviousWordType ( target , con . start , con . limit , offset , opts ) ; } if ( ! go ) return - 1 ; break ; case '<' : if ( con . length == 0 || offset == con . limit ) return - 1 ; if ( getWordType ( target , con . start , con . limit , offset , opts ) != WT_LETTER || getPreviousWordType ( target , con . start , con . limit , offset , opts ) != WT_OTHER ) return - 1 ; break ; case '>' : if ( con . length == 0 || offset == con . start ) return - 1 ; if ( getWordType ( target , con . start , con . limit , offset , opts ) != WT_OTHER || getPreviousWordType ( target , con . start , con . limit , offset , opts ) != WT_LETTER ) return - 1 ; break ; } op = op . next ; break ; case Op . BACKREFERENCE : { int refno = op . getData ( ) ; if ( refno <= 0 || refno >= this . nofparen ) throw new RuntimeException ( "Internal Error: Reference number must be more than zero: " + refno ) ; if ( con . match . getBeginning ( refno ) < 0 || con . match . getEnd ( refno ) < 0 ) return - 1 ; int o2 = con . match . getBeginning ( refno ) ; int literallen = con . match . getEnd ( refno ) - o2 ; if ( ! isSet ( opts , IGNORE_CASE ) ) { if ( dx > 0 ) { if ( ! regionMatches ( target , offset , con . limit , o2 , literallen ) ) return - 1 ; offset += literallen ; } else { if ( ! regionMatches ( target , offset - literallen , con . limit , o2 , literallen ) ) return - 1 ; offset -= literallen ; } } else { if ( dx > 0 ) { if ( ! regionMatchesIgnoreCase ( target , offset , con . limit , o2 , literallen ) ) return - 1 ; offset += literallen ; } else { if ( ! regionMatchesIgnoreCase ( target , offset - literallen , con . limit , o2 , literallen ) ) return - 1 ; offset -= literallen ; } } } op = op . next ; break ; case Op . STRING : { String literal = op . getString ( ) ; int literallen = literal . length ( ) ; if ( ! isSet ( opts , IGNORE_CASE ) ) { if ( dx > 0 ) { if ( ! regionMatches ( target , offset , con . limit , literal , literallen ) ) return - 1 ; offset += literallen ; } else { if ( ! regionMatches ( target , offset - literallen , con . limit , literal , literallen ) ) return - 1 ; offset -= literallen ; } } else { if ( dx > 0 ) { if ( ! regionMatchesIgnoreCase ( target , offset , con . limit , literal , literallen ) ) return - 1 ; offset += literallen ; } else { if ( ! regionMatchesIgnoreCase ( target , offset - literallen , con . limit , literal , literallen ) ) return - 1 ; offset -= literallen ; } } } op = op . next ; break ; case Op . CLOSURE : { int id = op . getData ( ) ; if ( id >= 0 ) { int previousOffset = con . offsets [ id ] ; if ( previousOffset < 0 || previousOffset != offset ) { con . offsets [ id ] = offset ; } else { con . offsets [ id ] = - 1 ; op = op . next ; break ; } } int ret = this . matchCharArray ( con , op . getChild ( ) , offset , dx , opts ) ; if ( id >= 0 ) con . offsets [ id ] = - 1 ; if ( ret >= 0 ) return ret ; op = op . next ; } break ; case Op . QUESTION : { int ret = this . matchCharArray ( con , op . getChild ( ) , offset , dx , opts ) ; if ( ret >= 0 ) return ret ; op = op . next ; } break ; case Op . NONGREEDYCLOSURE : case Op . NONGREEDYQUESTION : { int ret = this . matchCharArray ( con , op . next , offset , dx , opts ) ; if ( ret >= 0 ) return ret ; op = op . getChild ( ) ; } break ; case Op . UNION : for ( int i = 0 ; i < op . size ( ) ; i ++ ) { int ret = this . matchCharArray ( con , op . elementAt ( i ) , offset , dx , opts ) ; if ( ret >= 0 ) return ret ; } return - 1 ; case Op . CAPTURE : int refno = op . getData ( ) ; if ( con . match != null && refno > 0 ) { int save = con . match . getBeginning ( refno ) ; con . match . setBeginning ( refno , offset ) ; int ret = this . matchCharArray ( con , op . next , offset , dx , opts ) ; if ( ret < 0 ) con . match . setBeginning ( refno , save ) ; return ret ; } else if ( con . match != null && refno < 0 ) { int index = - refno ; int save = con . match . getEnd ( index ) ; con . match . setEnd ( index , offset ) ; int ret = this . matchCharArray ( con , op . next , offset , dx , opts ) ; if ( ret < 0 ) con . match . setEnd ( index , save ) ; return ret ; } op = op . next ; break ; case Op . LOOKAHEAD : if ( 0 > this . matchCharArray ( con , op . getChild ( ) , offset , 1 , opts ) ) return - 1 ; op = op . next ; break ; case Op . NEGATIVELOOKAHEAD : if ( 0 <= this . matchCharArray ( con , op . getChild ( ) , offset , 1 , opts ) ) return - 1 ; op = op . next ; break ; case Op . LOOKBEHIND : if ( 0 > this . matchCharArray ( con , op . getChild ( ) , offset , - 1 , opts ) ) return - 1 ; op = op . next ; break ; case Op . NEGATIVELOOKBEHIND : if ( 0 <= this . matchCharArray ( con , op . getChild ( ) , offset , - 1 , opts ) ) return - 1 ; op = op . next ; break ; case Op . INDEPENDENT : { int ret = this . matchCharArray ( con , op . getChild ( ) , offset , dx , opts ) ; if ( ret < 0 ) return ret ; offset = ret ; op = op . next ; } break ; case Op . MODIFIER : { int localopts = opts ; localopts |= op . getData ( ) ; localopts &= ~ op . getData2 ( ) ; int ret = this . matchCharArray ( con , op . getChild ( ) , offset , dx , localopts ) ; if ( ret < 0 ) return ret ; offset = ret ; op = op . next ; } break ; case Op . CONDITION : { Op . ConditionOp cop = ( Op . ConditionOp ) op ; boolean matchp = false ; if ( cop . refNumber > 0 ) { if ( cop . refNumber >= this . nofparen ) throw new RuntimeException ( "Internal Error: Reference number must be more than zero: " + cop . refNumber ) ; matchp = con . match . getBeginning ( cop . refNumber ) >= 0 && con . match . getEnd ( cop . refNumber ) >= 0 ; } else { matchp = 0 <= this . matchCharArray ( con , cop . condition , offset , dx , opts ) ; } if ( matchp ) { op = cop . yes ; } else if ( cop . no != null ) { op = cop . no ; } else { op = cop . next ; } } break ; default : throw new RuntimeException ( "Unknown operation type: " + op . type ) ; } } } private static final int getPreviousWordType ( char [ ] target , int begin , int end , int offset , int opts ) { int ret = getWordType ( target , begin , end , -- offset , opts ) ; while ( ret == WT_IGNORE ) ret = getWordType ( target , begin , end , -- offset , opts ) ; return ret ; } private static final int getWordType ( char [ ] target , int begin , int end , int offset , int opts ) { if ( offset < begin || offset >= end ) return WT_OTHER ; return getWordType0 ( target [ offset ] , opts ) ; } private static final boolean regionMatches ( char [ ] target , int offset , int limit , String part , int partlen ) { if ( offset < 0 ) return false ; if ( limit - offset < partlen ) return false ; int i = 0 ; while ( partlen -- > 0 ) { if ( target [ offset ++ ] != part . charAt ( i ++ ) ) return false ; } return true ; } private static final boolean regionMatches ( char [ ] target , int offset , int limit , int offset2 , int partlen ) { if ( offset < 0 ) return false ; if ( limit - offset < partlen ) return false ; int i = offset2 ; while ( partlen -- > 0 ) { if ( target [ offset ++ ] != target [ i ++ ] ) return false ; } return true ; } private static final boolean regionMatchesIgnoreCase ( char [ ] target , int offset , int limit , String part , int partlen ) { if ( offset < 0 ) return false ; if ( limit - offset < partlen ) return false ; int i = 0 ; while ( partlen -- > 0 ) { char ch1 = target [ offset ++ ] ; char ch2 = part . charAt ( i ++ ) ; if ( ch1 == ch2 ) continue ; char uch1 = Character . toUpperCase ( ch1 ) ; char uch2 = Character . toUpperCase ( ch2 ) ; if ( uch1 == uch2 ) continue ; if ( Character . toLowerCase ( uch1 ) != Character . toLowerCase ( uch2 ) ) return false ; } return true ; } private static final boolean regionMatchesIgnoreCase ( char [ ] target , int offset , int limit , int offset2 , int partlen ) { if ( offset < 0 ) return false ; if ( limit - offset < partlen ) return false ; int i = offset2 ; while ( partlen -- > 0 ) { char ch1 = target [ offset ++ ] ; char ch2 = target [ i ++ ] ; if ( ch1 == ch2 ) continue ; char uch1 = Character . toUpperCase ( ch1 ) ; char uch2 = Character . toUpperCase ( ch2 ) ; if ( uch1 == uch2 ) continue ; if ( Character . toLowerCase ( uch1 ) != Character . toLowerCase ( uch2 ) ) return false ; } return true ; } public boolean matches ( String target ) { return this . matches ( target , 0 , target . length ( ) , ( Match ) null ) ; } public boolean matches ( String target , int start , int end ) { return this . matches ( target , start , end , ( Match ) null ) ; } public boolean matches ( String target , Match match ) { return this . matches ( target , 0 , target . length ( ) , match ) ; } public boolean matches ( String target , int start , int end , Match match ) { synchronized ( this ) { if ( this . operations == null ) this . prepare ( ) ; if ( this . context == null ) this . context = new Context ( ) ; } Context con = null ; synchronized ( this . context ) { con = this . context . inuse ? new Context ( ) : this . context ; con . reset ( target , start , end , this . numberOfClosures ) ; } if ( match != null ) { match . setNumberOfGroups ( this . nofparen ) ; match . setSource ( target ) ; } else if ( this . hasBackReferences ) { match = new Match ( ) ; match . setNumberOfGroups ( this . nofparen ) ; } con . match = match ; if ( this . isSet ( this . options , XMLSCHEMA_MODE ) ) { int matchEnd = this . matchString ( con , this . operations , con . start , 1 , this . options ) ; if ( matchEnd == con . limit ) { if ( con . match != null ) { con . match . setBeginning ( 0 , con . start ) ; con . match . setEnd ( 0 , matchEnd ) ; } con . inuse = false ; return true ; } return false ; } if ( this . fixedStringOnly ) { int o = this . fixedStringTable . matches ( target , con . start , con . limit ) ; if ( o >= 0 ) { if ( con . match != null ) { con . match . setBeginning ( 0 , o ) ; con . match . setEnd ( 0 , o + this . fixedString . length ( ) ) ; } con . inuse = false ; return true ; } con . inuse = false ; return false ; } if ( this . fixedString != null ) { int o = this . fixedStringTable . matches ( target , con . start , con . limit ) ; if ( o < 0 ) { con . inuse = false ; return false ; } } int limit = con . limit - this . minlength ; int matchStart ; int matchEnd = - 1 ; if ( this . operations != null && this . operations . type == Op . CLOSURE && this . operations . getChild ( ) . type == Op . DOT ) { if ( isSet ( this . options , SINGLE_LINE ) ) { matchStart = con . start ; matchEnd = this . matchString ( con , this . operations , con . start , 1 , this . options ) ; } else { boolean previousIsEOL = true ; for ( matchStart = con . start ; matchStart <= limit ; matchStart ++ ) { int ch = target . charAt ( matchStart ) ; if ( isEOLChar ( ch ) ) { previousIsEOL = true ; } else { if ( previousIsEOL ) { if ( 0 <= ( matchEnd = this . matchString ( con , this . operations , matchStart , 1 , this . options ) ) ) break ; } previousIsEOL = false ; } } } } else if ( this . firstChar != null ) { RangeToken range = this . firstChar ; if ( this . isSet ( this . options , IGNORE_CASE ) ) { range = this . firstChar . getCaseInsensitiveToken ( ) ; for ( matchStart = con . start ; matchStart <= limit ; matchStart ++ ) { int ch = target . charAt ( matchStart ) ; if ( REUtil . isHighSurrogate ( ch ) && matchStart + 1 < con . limit ) { ch = REUtil . composeFromSurrogates ( ch , target . charAt ( matchStart + 1 ) ) ; if ( ! range . match ( ch ) ) continue ; } else { if ( ! range . match ( ch ) ) { char ch1 = Character . toUpperCase ( ( char ) ch ) ; if ( ! range . match ( ch1 ) ) if ( ! range . match ( Character . toLowerCase ( ch1 ) ) ) continue ; } } if ( 0 <= ( matchEnd = this . matchString ( con , this . operations , matchStart , 1 , this . options ) ) ) break ; } } else { for ( matchStart = con . start ; matchStart <= limit ; matchStart ++ ) { int ch = target . charAt ( matchStart ) ; if ( REUtil . isHighSurrogate ( ch ) && matchStart + 1 < con . limit ) ch = REUtil . composeFromSurrogates ( ch , target . charAt ( matchStart + 1 ) ) ; if ( ! range . match ( ch ) ) continue ; if ( 0 <= ( matchEnd = this . matchString ( con , this . operations , matchStart , 1 , this . options ) ) ) break ; } } } else { for ( matchStart = con . start ; matchStart <= limit ; matchStart ++ ) { if ( 0 <= ( matchEnd = this . matchString ( con , this . operations , matchStart , 1 , this . options ) ) ) break ; } } if ( matchEnd >= 0 ) { if ( con . match != null ) { con . match . setBeginning ( 0 , matchStart ) ; con . match . setEnd ( 0 , matchEnd ) ; } con . inuse = false ; return true ; } else { con . inuse = false ; return false ; } } private int matchString ( Context con , Op op , int offset , int dx , int opts ) { String target = con . strTarget ; while ( true ) { if ( op == null ) return offset ; if ( offset > con . limit || offset < con . start ) return - 1 ; switch ( op . type ) { case Op . CHAR : if ( isSet ( opts , IGNORE_CASE ) ) { int ch = op . getData ( ) ; if ( dx > 0 ) { if ( offset >= con . limit || ! matchIgnoreCase ( ch , target . charAt ( offset ) ) ) return - 1 ; offset ++ ; } else { int o1 = offset - 1 ; if ( o1 >= con . limit || o1 < 0 || ! matchIgnoreCase ( ch , target . charAt ( o1 ) ) ) return - 1 ; offset = o1 ; } } else { int ch = op . getData ( ) ; if ( dx > 0 ) { if ( offset >= con . limit || ch != target . charAt ( offset ) ) return - 1 ; offset ++ ; } else { int o1 = offset - 1 ; if ( o1 >= con . limit || o1 < 0 || ch != target . charAt ( o1 ) ) return - 1 ; offset = o1 ; } } op = op . next ; break ; case Op . DOT : if ( dx > 0 ) { if ( offset >= con . limit ) return - 1 ; int ch = target . charAt ( offset ) ; if ( isSet ( opts , SINGLE_LINE ) ) { if ( REUtil . isHighSurrogate ( ch ) && offset + 1 < con . limit ) offset ++ ; } else { if ( REUtil . isHighSurrogate ( ch ) && offset + 1 < con . limit ) ch = REUtil . composeFromSurrogates ( ch , target . charAt ( ++ offset ) ) ; if ( isEOLChar ( ch ) ) return - 1 ; } offset ++ ; } else { int o1 = offset - 1 ; if ( o1 >= con . limit || o1 < 0 ) return - 1 ; int ch = target . charAt ( o1 ) ; if ( isSet ( opts , SINGLE_LINE ) ) { if ( REUtil . isLowSurrogate ( ch ) && o1 - 1 >= 0 ) o1 -- ; } else { if ( REUtil . isLowSurrogate ( ch ) && o1 - 1 >= 0 ) ch = REUtil . composeFromSurrogates ( target . charAt ( -- o1 ) , ch ) ; if ( ! isEOLChar ( ch ) ) return - 1 ; } offset = o1 ; } op = op . next ; break ; case Op . RANGE : case Op . NRANGE : if ( dx > 0 ) { if ( offset >= con . limit ) return - 1 ; int ch = target . charAt ( offset ) ; if ( REUtil . isHighSurrogate ( ch ) && offset + 1 < con . limit ) ch = REUtil . composeFromSurrogates ( ch , target . charAt ( ++ offset ) ) ; RangeToken tok = op . getToken ( ) ; if ( isSet ( opts , IGNORE_CASE ) ) { tok = tok . getCaseInsensitiveToken ( ) ; if ( ! tok . match ( ch ) ) { if ( ch >= 0x10000 ) return - 1 ; char uch ; if ( ! tok . match ( uch = Character . toUpperCase ( ( char ) ch ) ) && ! tok . match ( Character . toLowerCase ( uch ) ) ) return - 1 ; } } else { if ( ! tok . match ( ch ) ) return - 1 ; } offset ++ ; } else { int o1 = offset - 1 ; if ( o1 >= con . limit || o1 < 0 ) return - 1 ; int ch = target . charAt ( o1 ) ; if ( REUtil . isLowSurrogate ( ch ) && o1 - 1 >= 0 ) ch = REUtil . composeFromSurrogates ( target . charAt ( -- o1 ) , ch ) ; RangeToken tok = op . getToken ( ) ; if ( isSet ( opts , IGNORE_CASE ) ) { tok = tok . getCaseInsensitiveToken ( ) ; if ( ! tok . match ( ch ) ) { if ( ch >= 0x10000 ) return - 1 ; char uch ; if ( ! tok . match ( uch = Character . toUpperCase ( ( char ) ch ) ) && ! tok . match ( Character . toLowerCase ( uch ) ) ) return - 1 ; } } else { if ( ! tok . match ( ch ) ) return - 1 ; } offset = o1 ; } op = op . next ; break ; case Op . ANCHOR : boolean go = false ; switch ( op . getData ( ) ) { case '^' : if ( isSet ( opts , MULTIPLE_LINES ) ) { if ( ! ( offset == con . start || offset > con . start && isEOLChar ( target . charAt ( offset - 1 ) ) ) ) return - 1 ; } else { if ( offset != con . start ) return - 1 ; } break ; case '@' : if ( ! ( offset == con . start || offset > con . start && isEOLChar ( target . charAt ( offset - 1 ) ) ) ) return - 1 ; break ; case '$' : if ( isSet ( opts , MULTIPLE_LINES ) ) { if ( ! ( offset == con . limit || offset < con . limit && isEOLChar ( target . charAt ( offset ) ) ) ) return - 1 ; } else { if ( ! ( offset == con . limit || offset + 1 == con . limit && isEOLChar ( target . charAt ( offset ) ) || offset + 2 == con . limit && target . charAt ( offset ) == CARRIAGE_RETURN && target . charAt ( offset + 1 ) == LINE_FEED ) ) return - 1 ; } break ; case 'A' : if ( offset != con . start ) return - 1 ; break ; case 'Z' : if ( ! ( offset == con . limit || offset + 1 == con . limit && isEOLChar ( target . charAt ( offset ) ) || offset + 2 == con . limit && target . charAt ( offset ) == CARRIAGE_RETURN && target . charAt ( offset + 1 ) == LINE_FEED ) ) return - 1 ; break ; case 'z' : if ( offset != con . limit ) return - 1 ; break ; case 'b' : if ( con . length == 0 ) return - 1 ; { int after = getWordType ( target , con . start , con . limit , offset , opts ) ; if ( after == WT_IGNORE ) return - 1 ; int before = getPreviousWordType ( target , con . start , con . limit , offset , opts ) ; if ( after == before ) return - 1 ; } break ; case 'B' : if ( con . length == 0 ) go = true ; else { int after = getWordType ( target , con . start , con . limit , offset , opts ) ; go = after == WT_IGNORE || after == getPreviousWordType ( target , con . start , con . limit , offset , opts ) ; } if ( ! go ) return - 1 ; break ; case '<' : if ( con . length == 0 || offset == con . limit ) return - 1 ; if ( getWordType ( target , con . start , con . limit , offset , opts ) != WT_LETTER || getPreviousWordType ( target , con . start , con . limit , offset , opts ) != WT_OTHER ) return - 1 ; break ; case '>' : if ( con . length == 0 || offset == con . start ) return - 1 ; if ( getWordType ( target , con . start , con . limit , offset , opts ) != WT_OTHER || getPreviousWordType ( target , con . start , con . limit , offset , opts ) != WT_LETTER ) return - 1 ; break ; } op = op . next ; break ; case Op . BACKREFERENCE : { int refno = op . getData ( ) ; if ( refno <= 0 || refno >= this . nofparen ) throw new RuntimeException ( "Internal Error: Reference number must be more than zero: " + refno ) ; if ( con . match . getBeginning ( refno ) < 0 || con . match . getEnd ( refno ) < 0 ) return - 1 ; int o2 = con . match . getBeginning ( refno ) ; int literallen = con . match . getEnd ( refno ) - o2 ; if ( ! isSet ( opts , IGNORE_CASE ) ) { if ( dx > 0 ) { if ( ! regionMatches ( target , offset , con . limit , o2 , literallen ) ) return - 1 ; offset += literallen ; } else { if ( ! regionMatches ( target , offset - literallen , con . limit , o2 , literallen ) ) return - 1 ; offset -= literallen ; } } else { if ( dx > 0 ) { if ( ! regionMatchesIgnoreCase ( target , offset , con . limit , o2 , literallen ) ) return - 1 ; offset += literallen ; } else { if ( ! regionMatchesIgnoreCase ( target , offset - literallen , con . limit , o2 , literallen ) ) return - 1 ; offset -= literallen ; } } } op = op . next ; break ; case Op . STRING : { String literal = op . getString ( ) ; int literallen = literal . length ( ) ; if ( ! isSet ( opts , IGNORE_CASE ) ) { if ( dx > 0 ) { if ( ! regionMatches ( target , offset , con . limit , literal , literallen ) ) return - 1 ; offset += literallen ; } else { if ( ! regionMatches ( target , offset - literallen , con . limit , literal , literallen ) ) return - 1 ; offset -= literallen ; } } else { if ( dx > 0 ) { if ( ! regionMatchesIgnoreCase ( target , offset , con . limit , literal , literallen ) ) return - 1 ; offset += literallen ; } else { if ( ! regionMatchesIgnoreCase ( target , offset - literallen , con . limit , literal , literallen ) ) return - 1 ; offset -= literallen ; } } } op = op . next ; break ; case Op . CLOSURE : { int id = op . getData ( ) ; if ( id >= 0 ) { int previousOffset = con . offsets [ id ] ; if ( previousOffset < 0 || previousOffset != offset ) { con . offsets [ id ] = offset ; } else { con . offsets [ id ] = - 1 ; op = op . next ; break ; } } int ret = this . matchString ( con , op . getChild ( ) , offset , dx , opts ) ; if ( id >= 0 ) con . offsets [ id ] = - 1 ; if ( ret >= 0 ) return ret ; op = op . next ; } break ; case Op . QUESTION : { int ret = this . matchString ( con , op . getChild ( ) , offset , dx , opts ) ; if ( ret >= 0 ) return ret ; op = op . next ; } break ; case Op . NONGREEDYCLOSURE : case Op . NONGREEDYQUESTION : { int ret = this . matchString ( con , op . next , offset , dx , opts ) ; if ( ret >= 0 ) return ret ; op = op . getChild ( ) ; } break ; case Op . UNION : for ( int i = 0 ; i < op . size ( ) ; i ++ ) { int ret = this . matchString ( con , op . elementAt ( i ) , offset , dx , opts ) ; if ( ret >= 0 ) return ret ; } return - 1 ; case Op . CAPTURE : int refno = op . getData ( ) ; if ( con . match != null && refno > 0 ) { int save = con . match . getBeginning ( refno ) ; con . match . setBeginning ( refno , offset ) ; int ret = this . matchString ( con , op . next , offset , dx , opts ) ; if ( ret < 0 ) con . match . setBeginning ( refno , save ) ; return ret ; } else if ( con . match != null && refno < 0 ) { int index = - refno ; int save = con . match . getEnd ( index ) ; con . match . setEnd ( index , offset ) ; int ret = this . matchString ( con , op . next , offset , dx , opts ) ; if ( ret < 0 ) con . match . setEnd ( index , save ) ; return ret ; } op = op . next ; break ; case Op . LOOKAHEAD : if ( 0 > this . matchString ( con , op . getChild ( ) , offset , 1 , opts ) ) return - 1 ; op = op . next ; break ; case Op . NEGATIVELOOKAHEAD : if ( 0 <= this . matchString ( con , op . getChild ( ) , offset , 1 , opts ) ) return - 1 ; op = op . next ; break ; case Op . LOOKBEHIND : if ( 0 > this . matchString ( con , op . getChild ( ) , offset , - 1 , opts ) ) return - 1 ; op = op . next ; break ; case Op . NEGATIVELOOKBEHIND : if ( 0 <= this . matchString ( con , op . getChild ( ) , offset , - 1 , opts ) ) return - 1 ; op = op . next ; break ; case Op . INDEPENDENT : { int ret = this . matchString ( con , op . getChild ( ) , offset , dx , opts ) ; if ( ret < 0 ) return ret ; offset = ret ; op = op . next ; } break ; case Op . MODIFIER : { int localopts = opts ; localopts |= op . getData ( ) ; localopts &= ~ op . getData2 ( ) ; int ret = this . matchString ( con , op . getChild ( ) , offset , dx , localopts ) ; if ( ret < 0 ) return ret ; offset = ret ; op = op . next ; } break ; case Op . CONDITION : { Op . ConditionOp cop = ( Op . ConditionOp ) op ; boolean matchp = false ; if ( cop . refNumber > 0 ) { if ( cop . refNumber >= this . nofparen ) throw new RuntimeException ( "Internal Error: Reference number must be more than zero: " + cop . refNumber ) ; matchp = con . match . getBeginning ( cop . refNumber ) >= 0 && con . match . getEnd ( cop . refNumber ) >= 0 ; } else { matchp = 0 <= this . matchString ( con , cop . condition , offset , dx , opts ) ; } if ( matchp ) { op = cop . yes ; } else if ( cop . no != null ) { op = cop . no ; } else { op = cop . next ; } } break ; default : throw new RuntimeException ( "Unknown operation type: " + op . type ) ; } } } private static final int getPreviousWordType ( String target , int begin , int end , int offset , int opts ) { int ret = getWordType ( target , begin , end , -- offset , opts ) ; while ( ret == WT_IGNORE ) ret = getWordType ( target , begin , end , -- offset , opts ) ; return ret ; } private static final int getWordType ( String target , int begin , int end , int offset , int opts ) { if ( offset < begin || offset >= end ) return WT_OTHER ; return getWordType0 ( target . charAt ( offset ) , opts ) ; } private static final boolean regionMatches ( String text , int offset , int limit , String part , int partlen ) { if ( limit - offset < partlen ) return false ; return text . regionMatches ( offset , part , 0 , partlen ) ; } private static final boolean regionMatches ( String text , int offset , int limit , int offset2 , int partlen ) { if ( limit - offset < partlen ) return false ; return text . regionMatches ( offset , text , offset2 , partlen ) ; } private static final boolean regionMatchesIgnoreCase ( String text , int offset , int limit , String part , int partlen ) { return text . regionMatches ( true , offset , part , 0 , partlen ) ; } private static final boolean regionMatchesIgnoreCase ( String text , int offset , int limit , int offset2 , int partlen ) { if ( limit - offset < partlen ) return false ; return text . regionMatches ( true , offset , text , offset2 , partlen ) ; } public boolean matches ( CharacterIterator target ) { return this . matches ( target , ( Match ) null ) ; } public boolean matches ( CharacterIterator target , Match match ) { int start = target . getBeginIndex ( ) ; int end = target . getEndIndex ( ) ; synchronized ( this ) { if ( this . operations == null ) this . prepare ( ) ; if ( this . context == null ) this . context = new Context ( ) ; } Context con = null ; synchronized ( this . context ) { con = this . context . inuse ? new Context ( ) : this . context ; con . reset ( target , start , end , this . numberOfClosures ) ; } if ( match != null ) { match . setNumberOfGroups ( this . nofparen ) ; match . setSource ( target ) ; } else if ( this . hasBackReferences ) { match = new Match ( ) ; match . setNumberOfGroups ( this . nofparen ) ; } con . match = match ; if ( this . isSet ( this . options , XMLSCHEMA_MODE ) ) { int matchEnd = this . matchCharacterIterator ( con , this . operations , con . start , 1 , this . options ) ; if ( matchEnd == con . limit ) { if ( con . match != null ) { con . match . setBeginning ( 0 , con . start ) ; con . match . setEnd ( 0 , matchEnd ) ; } con . inuse = false ; return true ; } return false ; } if ( this . fixedStringOnly ) { int o = this . fixedStringTable . matches ( target , con . start , con . limit ) ; if ( o >= 0 ) { if ( con . match != null ) { con . match . setBeginning ( 0 , o ) ; con . match . setEnd ( 0 , o + this . fixedString . length ( ) ) ; } con . inuse = false ; return true ; } con . inuse = false ; return false ; } if ( this . fixedString != null ) { int o = this . fixedStringTable . matches ( target , con . start , con . limit ) ; if ( o < 0 ) { con . inuse = false ; return false ; } } int limit = con . limit - this . minlength ; int matchStart ; int matchEnd = - 1 ; if ( this . operations != null && this . operations . type == Op . CLOSURE && this . operations . getChild ( ) . type == Op . DOT ) { if ( isSet ( this . options , SINGLE_LINE ) ) { matchStart = con . start ; matchEnd = this . matchCharacterIterator ( con , this . operations , con . start , 1 , this . options ) ; } else { boolean previousIsEOL = true ; for ( matchStart = con . start ; matchStart <= limit ; matchStart ++ ) { int ch = target . setIndex ( matchStart ) ; if ( isEOLChar ( ch ) ) { previousIsEOL = true ; } else { if ( previousIsEOL ) { if ( 0 <= ( matchEnd = this . matchCharacterIterator ( con , this . operations , matchStart , 1 , this . options ) ) ) break ; } previousIsEOL = false ; } } } } else if ( this . firstChar != null ) { RangeToken range = this . firstChar ; if ( this . isSet ( this . options , IGNORE_CASE ) ) { range = this . firstChar . getCaseInsensitiveToken ( ) ; for ( matchStart = con . start ; matchStart <= limit ; matchStart ++ ) { int ch = target . setIndex ( matchStart ) ; if ( REUtil . isHighSurrogate ( ch ) && matchStart + 1 < con . limit ) { ch = REUtil . composeFromSurrogates ( ch , target . setIndex ( matchStart + 1 ) ) ; if ( ! range . match ( ch ) ) continue ; } else { if ( ! range . match ( ch ) ) { char ch1 = Character . toUpperCase ( ( char ) ch ) ; if ( ! range . match ( ch1 ) ) if ( ! range . match ( Character . toLowerCase ( ch1 ) ) ) continue ; } } if ( 0 <= ( matchEnd = this . matchCharacterIterator ( con , this . operations , matchStart , 1 , this . options ) ) ) break ; } } else { for ( matchStart = con . start ; matchStart <= limit ; matchStart ++ ) { int ch = target . setIndex ( matchStart ) ; if ( REUtil . isHighSurrogate ( ch ) && matchStart + 1 < con . limit ) ch = REUtil . composeFromSurrogates ( ch , target . setIndex ( matchStart + 1 ) ) ; if ( ! range . match ( ch ) ) continue ; if ( 0 <= ( matchEnd = this . matchCharacterIterator ( con , this . operations , matchStart , 1 , this . options ) ) ) break ; } } } else { for ( matchStart = con . start ; matchStart <= limit ; matchStart ++ ) { if ( 0 <= ( matchEnd = this . matchCharacterIterator ( con , this . operations , matchStart , 1 , this . options ) ) ) break ; } } if ( matchEnd >= 0 ) { if ( con . match != null ) { con . match . setBeginning ( 0 , matchStart ) ; con . match . setEnd ( 0 , matchEnd ) ; } con . inuse = false ; return true ; } else { con . inuse = false ; return false ; } } private int matchCharacterIterator ( Context con , Op op , int offset , int dx , int opts ) { CharacterIterator target = con . ciTarget ; while ( true ) { if ( op == null ) return offset ; if ( offset > con . limit || offset < con . start ) return - 1 ; switch ( op . type ) { case Op . CHAR : if ( isSet ( opts , IGNORE_CASE ) ) { int ch = op . getData ( ) ; if ( dx > 0 ) { if ( offset >= con . limit || ! matchIgnoreCase ( ch , target . setIndex ( offset ) ) ) return - 1 ; offset ++ ; } else { int o1 = offset - 1 ; if ( o1 >= con . limit || o1 < 0 || ! matchIgnoreCase ( ch , target . setIndex ( o1 ) ) ) return - 1 ; offset = o1 ; } } else { int ch = op . getData ( ) ; if ( dx > 0 ) { if ( offset >= con . limit || ch != target . setIndex ( offset ) ) return - 1 ; offset ++ ; } else { int o1 = offset - 1 ; if ( o1 >= con . limit || o1 < 0 || ch != target . setIndex ( o1 ) ) return - 1 ; offset = o1 ; } } op = op . next ; break ; case Op . DOT : if ( dx > 0 ) { if ( offset >= con . limit ) return - 1 ; int ch = target . setIndex ( offset ) ; if ( isSet ( opts , SINGLE_LINE ) ) { if ( REUtil . isHighSurrogate ( ch ) && offset + 1 < con . limit ) offset ++ ; } else { if ( REUtil . isHighSurrogate ( ch ) && offset + 1 < con . limit ) ch = REUtil . composeFromSurrogates ( ch , target . setIndex ( ++ offset ) ) ; if ( isEOLChar ( ch ) ) return - 1 ; } offset ++ ; } else { int o1 = offset - 1 ; if ( o1 >= con . limit || o1 < 0 ) return - 1 ; int ch = target . setIndex ( o1 ) ; if ( isSet ( opts , SINGLE_LINE ) ) { if ( REUtil . isLowSurrogate ( ch ) && o1 - 1 >= 0 ) o1 -- ; } else { if ( REUtil . isLowSurrogate ( ch ) && o1 - 1 >= 0 ) ch = REUtil . composeFromSurrogates ( target . setIndex ( -- o1 ) , ch ) ; if ( ! isEOLChar ( ch ) ) return - 1 ; } offset = o1 ; } op = op . next ; break ; case Op . RANGE : case Op . NRANGE : if ( dx > 0 ) { if ( offset >= con . limit ) return - 1 ; int ch = target . setIndex ( offset ) ; if ( REUtil . isHighSurrogate ( ch ) && offset + 1 < con . limit ) ch = REUtil . composeFromSurrogates ( ch , target . setIndex ( ++ offset ) ) ; RangeToken tok = op . getToken ( ) ; if ( isSet ( opts , IGNORE_CASE ) ) { tok = tok . getCaseInsensitiveToken ( ) ; if ( ! tok . match ( ch ) ) { if ( ch >= 0x10000 ) return - 1 ; char uch ; if ( ! tok . match ( uch = Character . toUpperCase ( ( char ) ch ) ) && ! tok . match ( Character . toLowerCase ( uch ) ) ) return - 1 ; } } else { if ( ! tok . match ( ch ) ) return - 1 ; } offset ++ ; } else { int o1 = offset - 1 ; if ( o1 >= con . limit || o1 < 0 ) return - 1 ; int ch = target . setIndex ( o1 ) ; if ( REUtil . isLowSurrogate ( ch ) && o1 - 1 >= 0 ) ch = REUtil . composeFromSurrogates ( target . setIndex ( -- o1 ) , ch ) ; RangeToken tok = op . getToken ( ) ; if ( isSet ( opts , IGNORE_CASE ) ) { tok = tok . getCaseInsensitiveToken ( ) ; if ( ! tok . match ( ch ) ) { if ( ch >= 0x10000 ) return - 1 ; char uch ; if ( ! tok . match ( uch = Character . toUpperCase ( ( char ) ch ) ) && ! tok . match ( Character . toLowerCase ( uch ) ) ) return - 1 ; } } else { if ( ! tok . match ( ch ) ) return - 1 ; } offset = o1 ; } op = op . next ; break ; case Op . ANCHOR : boolean go = false ; switch ( op . getData ( ) ) { case '^' : if ( isSet ( opts , MULTIPLE_LINES ) ) { if ( ! ( offset == con . start || offset > con . start && isEOLChar ( target . setIndex ( offset - 1 ) ) ) ) return - 1 ; } else { if ( offset != con . start ) return - 1 ; } break ; case '@' : if ( ! ( offset == con . start || offset > con . start && isEOLChar ( target . setIndex ( offset - 1 ) ) ) ) return - 1 ; break ; case '$' : if ( isSet ( opts , MULTIPLE_LINES ) ) { if ( ! ( offset == con . limit || offset < con . limit && isEOLChar ( target . setIndex ( offset ) ) ) ) return - 1 ; } else { if ( ! ( offset == con . limit || offset + 1 == con . limit && isEOLChar ( target . setIndex ( offset ) ) || offset + 2 == con . limit && target . setIndex ( offset ) == CARRIAGE_RETURN && target . setIndex ( offset + 1 ) == LINE_FEED ) ) return - 1 ; } break ; case 'A' : if ( offset != con . start ) return - 1 ; break ; case 'Z' : if ( ! ( offset == con . limit || offset + 1 == con . limit && isEOLChar ( target . setIndex ( offset ) ) || offset + 2 == con . limit && target . setIndex ( offset ) == CARRIAGE_RETURN && target . setIndex ( offset + 1 ) == LINE_FEED ) ) return - 1 ; break ; case 'z' : if ( offset != con . limit ) return - 1 ; break ; case 'b' : if ( con . length == 0 ) return - 1 ; { int after = getWordType ( target , con . start , con . limit , offset , opts ) ; if ( after == WT_IGNORE ) return - 1 ; int before = getPreviousWordType ( target , con . start , con . limit , offset , opts ) ; if ( after == before ) return - 1 ; } break ; case 'B' : if ( con . length == 0 ) go = true ; else { int after = getWordType ( target , con . start , con . limit , offset , opts ) ; go = after == WT_IGNORE || after == getPreviousWordType ( target , con . start , con . limit , offset , opts ) ; } if ( ! go ) return - 1 ; break ; case '<' : if ( con . length == 0 || offset == con . limit ) return - 1 ; if ( getWordType ( target , con . start , con . limit , offset , opts ) != WT_LETTER || getPreviousWordType ( target , con . start , con . limit , offset , opts ) != WT_OTHER ) return - 1 ; break ; case '>' : if ( con . length == 0 || offset == con . start ) return - 1 ; if ( getWordType ( target , con . start , con . limit , offset , opts ) != WT_OTHER || getPreviousWordType ( target , con . start , con . limit , offset , opts ) != WT_LETTER ) return - 1 ; break ; } op = op . next ; break ; case Op . BACKREFERENCE : { int refno = op . getData ( ) ; if ( refno <= 0 || refno >= this . nofparen ) throw new RuntimeException ( "Internal Error: Reference number must be more than zero: " + refno ) ; if ( con . match . getBeginning ( refno ) < 0 || con . match . getEnd ( refno ) < 0 ) return - 1 ; int o2 = con . match . getBeginning ( refno ) ; int literallen = con . match . getEnd ( refno ) - o2 ; if ( ! isSet ( opts , IGNORE_CASE ) ) { if ( dx > 0 ) { if ( ! regionMatches ( target , offset , con . limit , o2 , literallen ) ) return - 1 ; offset += literallen ; } else { if ( ! regionMatches ( target , offset - literallen , con . limit , o2 , literallen ) ) return - 1 ; offset -= literallen ; } } else { if ( dx > 0 ) { if ( ! regionMatchesIgnoreCase ( target , offset , con . limit , o2 , literallen ) ) return - 1 ; offset += literallen ; } else { if ( ! regionMatchesIgnoreCase ( target , offset - literallen , con . limit , o2 , literallen ) ) return - 1 ; offset -= literallen ; } } } op = op . next ; break ; case Op . STRING : { String literal = op . getString ( ) ; int literallen = literal . length ( ) ; if ( ! isSet ( opts , IGNORE_CASE ) ) { if ( dx > 0 ) { if ( ! regionMatches ( target , offset , con . limit , literal , literallen ) ) return - 1 ; offset += literallen ; } else { if ( ! regionMatches ( target , offset - literallen , con . limit , literal , literallen ) ) return - 1 ; offset -= literallen ; } } else { if ( dx > 0 ) { if ( ! regionMatchesIgnoreCase ( target , offset , con . limit , literal , literallen ) ) return - 1 ; offset += literallen ; } else { if ( ! regionMatchesIgnoreCase ( target , offset - literallen , con . limit , literal , literallen ) ) return - 1 ; offset -= literallen ; } } } op = op . next ; break ; case Op . CLOSURE : { int id = op . getData ( ) ; if ( id >= 0 ) { int previousOffset = con . offsets [ id ] ; if ( previousOffset < 0 || previousOffset != offset ) { con . offsets [ id ] = offset ; } else { con . offsets [ id ] = - 1 ; op = op . next ; break ; } } int ret = this . matchCharacterIterator ( con , op . getChild ( ) , offset , dx , opts ) ; if ( id >= 0 ) con . offsets [ id ] = - 1 ; if ( ret >= 0 ) return ret ; op = op . next ; } break ; case Op . QUESTION : { int ret = this . matchCharacterIterator ( con , op . getChild ( ) , offset , dx , opts ) ; if ( ret >= 0 ) return ret ; op = op . next ; } break ; case Op . NONGREEDYCLOSURE : case Op . NONGREEDYQUESTION : { int ret = this . matchCharacterIterator ( con , op . next , offset , dx , opts ) ; if ( ret >= 0 ) return ret ; op = op . getChild ( ) ; } break ; case Op . UNION : for ( int i = 0 ; i < op . size ( ) ; i ++ ) { int ret = this . matchCharacterIterator ( con , op . elementAt ( i ) , offset , dx , opts ) ; if ( ret >= 0 ) return ret ; } return - 1 ; case Op . CAPTURE : int refno = op . getData ( ) ; if ( con . match != null && refno > 0 ) { int save = con . match . getBeginning ( refno ) ; con . match . setBeginning ( refno , offset ) ; int ret = this . matchCharacterIterator ( con , op . next , offset , dx , opts ) ; if ( ret < 0 ) con . match . setBeginning ( refno , save ) ; return ret ; } else if ( con . match != null && refno < 0 ) { int index = - refno ; int save = con . match . getEnd ( index ) ; con . match . setEnd ( index , offset ) ; int ret = this . matchCharacterIterator ( con , op . next , offset , dx , opts ) ; if ( ret < 0 ) con . match . setEnd ( index , save ) ; return ret ; } op = op . next ; break ; case Op . LOOKAHEAD : if ( 0 > this . matchCharacterIterator ( con , op . getChild ( ) , offset , 1 , opts ) ) return - 1 ; op = op . next ; break ; case Op . NEGATIVELOOKAHEAD : if ( 0 <= this . matchCharacterIterator ( con , op . getChild ( ) , offset , 1 , opts ) ) return - 1 ; op = op . next ; break ; case Op . LOOKBEHIND : if ( 0 > this . matchCharacterIterator ( con , op . getChild ( ) , offset , - 1 , opts ) ) return - 1 ; op = op . next ; break ; case Op . NEGATIVELOOKBEHIND : if ( 0 <= this . matchCharacterIterator ( con , op . getChild ( ) , offset , - 1 , opts ) ) return - 1 ; op = op . next ; break ; case Op . INDEPENDENT : { int ret = this . matchCharacterIterator ( con , op . getChild ( ) , offset , dx , opts ) ; if ( ret < 0 ) return ret ; offset = ret ; op = op . next ; } break ; case Op . MODIFIER : { int localopts = opts ; localopts |= op . getData ( ) ; localopts &= ~ op . getData2 ( ) ; int ret = this . matchCharacterIterator ( con , op . getChild ( ) , offset , dx , localopts ) ; if ( ret < 0 ) return ret ; offset = ret ; op = op . next ; } break ; case Op . CONDITION : { Op . ConditionOp cop = ( Op . ConditionOp ) op ; boolean matchp = false ; if ( cop . refNumber > 0 ) { if ( cop . refNumber >= this . nofparen ) throw new RuntimeException ( "Internal Error: Reference number must be more than zero: " + cop . refNumber ) ; matchp = con . match . getBeginning ( cop . refNumber ) >= 0 && con . match . getEnd ( cop . refNumber ) >= 0 ; } else { matchp = 0 <= this . matchCharacterIterator ( con , cop . condition , offset , dx , opts ) ; } if ( matchp ) { op = cop . yes ; } else if ( cop . no != null ) { op = cop . no ; } else { op = cop . next ; } } break ; default : throw new RuntimeException ( "Unknown operation type: " + op . type ) ; } } } private static final int getPreviousWordType ( CharacterIterator target , int begin , int end , int offset , int opts ) { int ret = getWordType ( target , begin , end , -- offset , opts ) ; while ( ret == WT_IGNORE ) ret = getWordType ( target , begin , end , -- offset , opts ) ; return ret ; } private static final int getWordType ( CharacterIterator target , int begin , int end , int offset , int opts ) { if ( offset < begin || offset >= end ) return WT_OTHER ; return getWordType0 ( target . setIndex ( offset ) , opts ) ; } private static final boolean regionMatches ( CharacterIterator target , int offset , int limit , String part , int partlen ) { if ( offset < 0 ) return false ; if ( limit - offset < partlen ) return false ; int i = 0 ; while ( partlen -- > 0 ) { if ( target . setIndex ( offset ++ ) != part . charAt ( i ++ ) ) return false ; } return true ; } private static final boolean regionMatches ( CharacterIterator target , int offset , int limit , int offset2 , int partlen ) { if ( offset < 0 ) return false ; if ( limit - offset < partlen ) return false ; int i = offset2 ; while ( partlen -- > 0 ) { if ( target . setIndex ( offset ++ ) != target . setIndex ( i ++ ) ) return false ; } return true ; } private static final boolean regionMatchesIgnoreCase ( CharacterIterator target , int offset , int limit , String part , int partlen ) { if ( offset < 0 ) return false ; if ( limit - offset < partlen ) return false ; int i = 0 ; while ( partlen -- > 0 ) { char ch1 = target . setIndex ( offset ++ ) ; char ch2 = part . charAt ( i ++ ) ; if ( ch1 == ch2 ) continue ; char uch1 = Character . toUpperCase ( ch1 ) ; char uch2 = Character . toUpperCase ( ch2 ) ; if ( uch1 == uch2 ) continue ; if ( Character . toLowerCase ( uch1 ) != Character . toLowerCase ( uch2 ) ) return false ; } return true ; } private static final boolean regionMatchesIgnoreCase ( CharacterIterator target , int offset , int limit , int offset2 , int partlen ) { if ( offset < 0 ) return false ; if ( limit - offset < partlen ) return false ; int i = offset2 ; while ( partlen -- > 0 ) { char ch1 = target . setIndex ( offset ++ ) ; char ch2 = target . setIndex ( i ++ ) ; if ( ch1 == ch2 ) continue ; char uch1 = Character . toUpperCase ( ch1 ) ; char uch2 = Character . toUpperCase ( ch2 ) ; if ( uch1 == uch2 ) continue ; if ( Character . toLowerCase ( uch1 ) != Character . toLowerCase ( uch2 ) ) return false ; } return true ; } String regex ; int options ; int nofparen ; Token tokentree ; boolean hasBackReferences = false ; transient int minlength ; transient Op operations = null ; transient int numberOfClosures ; transient Context context = null ; transient RangeToken firstChar = null ; transient String fixedString = null ; transient int fixedStringOptions ; transient BMPattern fixedStringTable = null ; transient boolean fixedStringOnly = false ; static final class Context { CharacterIterator ciTarget ; String strTarget ; char [ ] charTarget ; int start ; int limit ; int length ; Match match ; boolean inuse = false ; int [ ] offsets ; Context ( ) { } private void resetCommon ( int nofclosures ) { this . length = this . limit - this . start ; this . inuse = true ; this . match = null ; if ( this . offsets == null || this . offsets . length != nofclosures ) this . offsets = new int [ nofclosures ] ; for ( int i = 0 ; i < nofclosures ; i ++ ) this . offsets [ i ] = - 1 ; } void reset ( CharacterIterator target , int start , int limit , int nofclosures ) { this . ciTarget = target ; this . start = start ; this . limit = limit ; this . resetCommon ( nofclosures ) ; } void reset ( String target , int start , int limit , int nofclosures ) { this . strTarget = target ; this . start = start ; this . limit = limit ; this . resetCommon ( nofclosures ) ; } void reset ( char [ ] target , int start , int limit , int nofclosures ) { this . charTarget = target ; this . start = start ; this . limit = limit ; this . resetCommon ( nofclosures ) ; } } void prepare ( ) { if ( Op . COUNT ) Op . nofinstances = 0 ; this . compile ( this . tokentree ) ; if ( Op . COUNT ) System . err . println ( "DEBUG: The number of operations: " + Op . nofinstances ) ; this . minlength = this . tokentree . getMinLength ( ) ; this . firstChar = null ; if ( ! isSet ( this . options , PROHIBIT_HEAD_CHARACTER_OPTIMIZATION ) && ! isSet ( this . options , XMLSCHEMA_MODE ) ) { RangeToken firstChar = Token . createRange ( ) ; int fresult = this . tokentree . analyzeFirstCharacter ( firstChar , this . options ) ; if ( fresult == Token . FC_TERMINAL ) { firstChar . compactRanges ( ) ; this . firstChar = firstChar ; if ( DEBUG ) System . err . println ( "DEBUG: Use the first character optimization: " + firstChar ) ; } } if ( this . operations != null && ( this . operations . type == Op . STRING || this . operations . type == Op . CHAR ) && this . operations . next == null ) { if ( DEBUG ) System . err . print ( " *** Only fixed string! *** " ) ; this . fixedStringOnly = true ; if ( this . operations . type == Op . STRING ) this . fixedString = this . operations . getString ( ) ; else if ( this . operations . getData ( ) >= 0x10000 ) { this . fixedString = REUtil . decomposeToSurrogates ( this . operations . getData ( ) ) ; } else { char [ ] ac = new char [ 1 ] ; ac [ 0 ] = ( char ) this . operations . getData ( ) ; this . fixedString = new String ( ac ) ; } this . fixedStringOptions = this . options ; this . fixedStringTable = new BMPattern ( this . fixedString , 256 , isSet ( this . fixedStringOptions , IGNORE_CASE ) ) ; } else if ( ! isSet ( this . options , PROHIBIT_FIXED_STRING_OPTIMIZATION ) && ! isSet ( this . options , XMLSCHEMA_MODE ) ) { Token . FixedStringContainer container = new Token . FixedStringContainer ( ) ; this . tokentree . findFixedString ( container , this . options ) ; this . fixedString = container . token == null ? null : container . token . getString ( ) ; this . fixedStringOptions = container . options ; if ( this . fixedString != null && this . fixedString . length ( ) < 2 ) this . fixedString = null ; if ( this . fixedString != null ) { this . fixedStringTable = new BMPattern ( this . fixedString , 256 , isSet ( this . fixedStringOptions , IGNORE_CASE ) ) ; if ( DEBUG ) { System . err . println ( "DEBUG: The longest fixed string: " + this . fixedString . length ( ) + "/" + "/" + REUtil . createOptionString ( this . fixedStringOptions ) ) ; System . err . print ( "String: " ) ; REUtil . dumpString ( this . fixedString ) ; } } } } static final int IGNORE_CASE = 1 << 1 ; static final int SINGLE_LINE = 1 << 2 ; static final int MULTIPLE_LINES = 1 << 3 ; static final int EXTENDED_COMMENT = 1 << 4 ; static final int USE_UNICODE_CATEGORY = 1 << 5 ; static final int UNICODE_WORD_BOUNDARY = 1 << 6 ; static final int PROHIBIT_HEAD_CHARACTER_OPTIMIZATION = 1 << 7 ; static final int PROHIBIT_FIXED_STRING_OPTIMIZATION = 1 << 8 ; static final int XMLSCHEMA_MODE = 1 << 9 ; static final int SPECIAL_COMMA = 1 << 10 ; private static final boolean isSet ( int options , int flag ) { return ( options & flag ) == flag ; } public RegularExpression ( String regex ) throws ParseException { this . setPattern ( regex , null ) ; } public RegularExpression ( String regex , String options ) throws ParseException { this . setPattern ( regex , options ) ; } RegularExpression ( String regex , Token tok , int parens , boolean hasBackReferences , int options ) { this . regex = regex ; this . tokentree = tok ; this . nofparen = parens ; this . options = options ; this . hasBackReferences = hasBackReferences ; } public void setPattern ( String newPattern ) throws ParseException { this . setPattern ( newPattern , this . options ) ; } private void setPattern ( String newPattern , int options ) throws ParseException { this . regex = newPattern ; this . options = options ; RegexParser rp = this . isSet ( this . options , RegularExpression . XMLSCHEMA_MODE ) ? new ParserForXMLSchema ( ) : new RegexParser ( ) ; this . tokentree = rp . parse ( this . regex , this . options ) ; this . nofparen = rp . parennumber ; this . hasBackReferences = rp . hasBackReferences ; this . operations = null ; this . context = null ; } public void setPattern ( String newPattern , String options ) throws ParseException { this . setPattern ( newPattern , REUtil . parseOptions ( options ) ) ; } public String getPattern ( ) { return this . regex ; } public String toString ( ) { return this . tokentree . toString ( this . options ) ; } public String getOptions ( ) { return REUtil . createOptionString ( this . options ) ; } public boolean equals ( Object obj ) { if ( obj == null ) return false ; if ( ! ( obj instanceof RegularExpression ) ) return false ; RegularExpression r = ( RegularExpression ) obj ; return this . regex . equals ( r . regex ) && this . options == r . options ; } boolean equals ( String pattern , int options ) { return this . regex . equals ( pattern ) && this . options == options ; } public int hashCode ( ) { return ( this . regex + "/" + this . getOptions ( ) ) . hashCode ( ) ; } public int getNumberOfGroups ( ) { return this . nofparen ; } private static final int WT_IGNORE = 0 ; private static final int WT_LETTER = 1 ; private static final int WT_OTHER = 2 ; transient static Token wordchar = null ; private static final int getWordType0 ( char ch , int opts ) { if ( ! isSet ( opts , UNICODE_WORD_BOUNDARY ) ) { if ( isSet ( opts , USE_UNICODE_CATEGORY ) ) { if ( RegularExpression . wordchar == null ) RegularExpression . wordchar = Token . getRange ( "IsWord" , true ) ; return RegularExpression . wordchar . match ( ch ) ? WT_LETTER : WT_OTHER ; } return isWordChar ( ch ) ? WT_LETTER : WT_OTHER ; } switch ( Character . getType ( ch ) ) { case Character . UPPERCASE_LETTER : case Character . LOWERCASE_LETTER : case Character . TITLECASE_LETTER : case Character . MODIFIER_LETTER : case Character . OTHER_LETTER : case Character . LETTER_NUMBER : case Character . DECIMAL_DIGIT_NUMBER : case Character . OTHER_NUMBER : case Character . COMBINING_SPACING_MARK : return WT_LETTER ; case Character . FORMAT : case Character . NON_SPACING_MARK : case Character . ENCLOSING_MARK : return WT_IGNORE ; case Character . CONTROL : switch ( ch ) { case '\t' : case '\n' : case '' : case '\f' : case '\r' : return WT_OTHER ; default : return WT_IGNORE ; } default : return WT_OTHER ; } } static final int LINE_FEED = 0x000A ; static final int CARRIAGE_RETURN = 0x000D ; static final int LINE_SEPARATOR = 0x2028 ; static final int PARAGRAPH_SEPARATOR = 0x2029 ; private static final boolean isEOLChar ( int ch ) { return ch == LINE_FEED || ch == CARRIAGE_RETURN || ch == LINE_SEPARATOR || ch == PARAGRAPH_SEPARATOR ; } private static final boolean isWordChar ( int ch ) { if ( ch == '_' ) return true ; if ( ch < '0' ) return false ; if ( ch > 'z' ) return false ; if ( ch <= '9' ) return true ; if ( ch < 'A' ) return false ; if ( ch <= 'Z' ) return true ; if ( ch < 'a' ) return false ; return true ; } private static final boolean matchIgnoreCase ( int chardata , int ch ) { if ( chardata == ch ) return true ; if ( chardata > 0xffff || ch > 0xffff ) return false ; char uch1 = Character . toUpperCase ( ( char ) chardata ) ; char uch2 = Character . toUpperCase ( ( char ) ch ) ; if ( uch1 == uch2 ) return true ; return Character . toLowerCase ( uch1 ) == Character . toLowerCase ( uch2 ) ; } } 	0	['53', '1', '0', '31', '143', '1146', '12', '20', '20', '0.906177156', '6637', '0.090909091', '6', '0', '0.192307692', '1', '1', '123.6037736', '147', '13.3585', '0']
package org . xml . sax ; import java . io . Reader ; import java . io . InputStream ; public class InputSource { public InputSource ( ) { } public InputSource ( String systemId ) { setSystemId ( systemId ) ; } public InputSource ( InputStream byteStream ) { setByteStream ( byteStream ) ; } public InputSource ( Reader characterStream ) { setCharacterStream ( characterStream ) ; } public void setPublicId ( String publicId ) { this . publicId = publicId ; } public String getPublicId ( ) { return publicId ; } public void setSystemId ( String systemId ) { this . systemId = systemId ; } public String getSystemId ( ) { return systemId ; } public void setByteStream ( InputStream byteStream ) { this . byteStream = byteStream ; } public InputStream getByteStream ( ) { return byteStream ; } public void setEncoding ( String encoding ) { this . encoding = encoding ; } public String getEncoding ( ) { return encoding ; } public void setCharacterStream ( Reader characterStream ) { this . characterStream = characterStream ; } public Reader getCharacterStream ( ) { return characterStream ; } private String publicId ; private String systemId ; private InputStream byteStream ; private String encoding ; private Reader characterStream ; } 	0	['14', '1', '0', '0', '15', '81', '0', '0', '14', '0.876923077', '75', '1', '0', '0', '0.392857143', '0', '0', '4', '1', '0.7143', '0']
package org . apache . xerces . validators . datatype ; import java . util . Hashtable ; import org . apache . xerces . validators . datatype . * ; import org . apache . xerces . validators . schema . SchemaSymbols ; public interface DatatypeValidatorFactory { public DatatypeValidator createDatatypeValidator ( String typeName , DatatypeValidator base , Hashtable facets , boolean list ) throws InvalidDatatypeFacetException ; } 	0	['1', '1', '0', '7', '1', '0', '5', '2', '1', '2', '1', '0', '0', '0', '1', '0', '0', '0', '1', '1', '0']
package org . apache . xerces . readers ; import java . io . FileNotFoundException ; import java . io . UnsupportedEncodingException ; import java . net . MalformedURLException ; import java . util . Stack ; import java . util . Vector ; import org . apache . xerces . framework . XMLErrorReporter ; import org . apache . xerces . utils . ImplementationMessages ; import org . apache . xerces . utils . QName ; import org . apache . xerces . utils . StringPool ; import org . apache . xerces . utils . URI ; import org . apache . xerces . utils . XMLCharacterProperties ; import org . apache . xerces . utils . XMLMessages ; import org . xml . sax . EntityResolver ; import org . xml . sax . InputSource ; import org . xml . sax . Locator ; import org . xml . sax . helpers . LocatorImpl ; public class DefaultEntityHandler implements XMLEntityHandler , XMLEntityHandler . DTDHandler { public interface EventHandler { public void startEntityReference ( int entityName , int entityType , int entityContext ) throws Exception ; public void endEntityReference ( int entityName , int entityType , int entityContext ) throws Exception ; public void sendEndOfInputNotifications ( int entityName , boolean moreToFollow ) throws Exception ; public void sendReaderChangeNotifications ( XMLEntityHandler . EntityReader reader , int readerId ) throws Exception ; public boolean externalEntityStandaloneCheck ( ) ; public boolean getValidating ( ) ; } private class ReaderState { XMLEntityHandler . EntityReader reader ; InputSource source ; int entityName ; int entityType ; int entityContext ; String publicId ; String systemId ; int readerId ; int depth ; ReaderState nextReaderState ; } private ReaderState fReaderStateFreeList = null ; private StringPool fStringPool = null ; private EventHandler fEventHandler = null ; private XMLEntityHandler . CharDataHandler fCharDataHandler = null ; private XMLErrorReporter fErrorReporter = null ; private EntityResolver fResolver = null ; private EntityPool fEntityPool = null ; private EntityPool fParameterEntityPool = null ; private byte [ ] fEntityTypeStack = null ; private int [ ] fEntityNameStack = null ; private int fEntityStackDepth = 0 ; private Stack fReaderStack = new Stack ( ) ; private XMLEntityHandler . EntityReader fReader = null ; private InputSource fSource = null ; private int fEntityName = - 1 ; private int fEntityType = - 1 ; private int fEntityContext = - 1 ; private String fPublicId = null ; private String fSystemId = null ; private int fReaderId = - 1 ; private int fReaderDepth = - 1 ; private int fNextReaderId = 0 ; private NullReader fNullReader = null ; protected XMLEntityReaderFactory fReaderFactory = null ; private boolean fSendCharDataAsCharArray = false ; public DefaultEntityHandler ( StringPool stringPool , XMLErrorReporter errorReporter ) { fStringPool = stringPool ; fErrorReporter = errorReporter ; fReaderFactory = new DefaultReaderFactory ( ) ; fEntityPool = new EntityPool ( fStringPool , fErrorReporter , true ) ; } public void setEventHandler ( EventHandler eventHandler ) { fEventHandler = eventHandler ; } public void setCharDataHandler ( XMLEntityHandler . CharDataHandler charDataHandler ) { fCharDataHandler = charDataHandler ; } public XMLEntityHandler . CharDataHandler getCharDataHandler ( ) { return fCharDataHandler ; } public void setSendCharDataAsCharArray ( boolean flag ) { fSendCharDataAsCharArray = flag ; fReaderFactory . setSendCharDataAsCharArray ( fSendCharDataAsCharArray ) ; } public void setReaderFactory ( XMLEntityReaderFactory readerFactory ) { fReaderFactory = readerFactory ; fReaderFactory . setSendCharDataAsCharArray ( fSendCharDataAsCharArray ) ; } public void reset ( StringPool stringPool ) { fStringPool = stringPool ; fEntityPool . reset ( fStringPool ) ; fParameterEntityPool = null ; fReaderStack . removeAllElements ( ) ; fEntityStackDepth = 0 ; fReader = null ; fSource = null ; fEntityName = - 1 ; fEntityType = - 1 ; fEntityContext = - 1 ; fPublicId = null ; fSystemId = null ; fReaderId = - 1 ; fReaderDepth = - 1 ; fNextReaderId = 0 ; } public void setAllowJavaEncodings ( boolean flag ) { fReaderFactory . setAllowJavaEncodingName ( flag ) ; } public boolean getAllowJavaEncodings ( ) { return fReaderFactory . getAllowJavaEncodingName ( ) ; } public int addInternalPEDecl ( int name , int value , boolean isExternal ) throws Exception { if ( fParameterEntityPool == null ) fParameterEntityPool = new EntityPool ( fStringPool , fErrorReporter , false ) ; int entityHandle = fParameterEntityPool . addEntityDecl ( name , value , - 1 , - 1 , - 1 , - 1 , isExternal ) ; return entityHandle ; } public int addExternalPEDecl ( int name , int publicId , int systemId , boolean isExternal ) throws Exception { if ( fParameterEntityPool == null ) fParameterEntityPool = new EntityPool ( fStringPool , fErrorReporter , false ) ; int entityHandle = fParameterEntityPool . addEntityDecl ( name , - 1 , publicId , systemId , fStringPool . addSymbol ( fSystemId ) , - 1 , isExternal ) ; return entityHandle ; } public int addInternalEntityDecl ( int name , int value , boolean isExternal ) throws Exception { int entityHandle = fEntityPool . addEntityDecl ( name , value , - 1 , - 1 , - 1 , - 1 , isExternal ) ; return entityHandle ; } public int addExternalEntityDecl ( int name , int publicId , int systemId , boolean isExternal ) throws Exception { int entityHandle = fEntityPool . addEntityDecl ( name , - 1 , publicId , systemId , fStringPool . addSymbol ( fSystemId ) , - 1 , isExternal ) ; return entityHandle ; } public int addUnparsedEntityDecl ( int name , int publicId , int systemId , int notationName , boolean isExternal ) throws Exception { int entityHandle = fEntityPool . addEntityDecl ( name , - 1 , publicId , systemId , fStringPool . addSymbol ( fSystemId ) , notationName , isExternal ) ; if ( ! fEntityPool . isNotationDeclared ( notationName ) ) { Object [ ] args = { fStringPool . toString ( name ) , fStringPool . toString ( notationName ) } ; fEntityPool . addRequiredNotation ( notationName , fErrorReporter . getLocator ( ) , XMLMessages . MSG_NOTATION_NOT_DECLARED_FOR_UNPARSED_ENTITYDECL , XMLMessages . VC_NOTATION_DECLARED , args ) ; } return entityHandle ; } public int addNotationDecl ( int notationName , int publicId , int systemId , boolean isExternal ) throws Exception { int notationHandle = fEntityPool . addNotationDecl ( notationName , publicId , systemId , fStringPool . addSymbol ( fSystemId ) , isExternal ) ; return notationHandle ; } public boolean isUnparsedEntity ( int entityName ) { int entityHandle = fEntityPool . lookupEntity ( entityName ) ; return ( entityHandle != - 1 && fEntityPool . isUnparsedEntity ( entityHandle ) ) ; } public boolean isNotationDeclared ( int notationName ) { return fEntityPool . isNotationDeclared ( notationName ) ; } public void addRequiredNotation ( int notationName , Locator locator , int majorCode , int minorCode , Object [ ] args ) { fEntityPool . addRequiredNotation ( notationName , locator , majorCode , minorCode , args ) ; } public void checkRequiredNotations ( ) throws Exception { fEntityPool . checkRequiredNotations ( ) ; } protected int lookupEntity ( int entityNameIndex ) { int entityIndex = fEntityPool . lookupEntity ( entityNameIndex ) ; return entityIndex ; } private void reportRecoverableXMLError ( int majorCode , int minorCode , int stringIndex1 ) throws Exception { Object [ ] args = { fStringPool . toString ( stringIndex1 ) } ; fErrorReporter . reportError ( fErrorReporter . getLocator ( ) , XMLMessages . XML_DOMAIN , majorCode , minorCode , args , XMLErrorReporter . ERRORTYPE_RECOVERABLE_ERROR ) ; } public boolean externalReferenceInContent ( int entityHandle ) throws Exception { boolean external = fEntityPool . isExternalEntity ( entityHandle ) ; if ( fEventHandler . externalEntityStandaloneCheck ( ) ) { if ( external ) { reportRecoverableXMLError ( XMLMessages . MSG_EXTERNAL_ENTITY_NOT_PERMITTED , XMLMessages . VC_STANDALONE_DOCUMENT_DECLARATION , fEntityName ) ; } else if ( fEntityPool . getEntityDeclIsExternal ( entityHandle ) ) { reportRecoverableXMLError ( XMLMessages . MSG_REFERENCE_TO_EXTERNALLY_DECLARED_ENTITY_WHEN_STANDALONE , XMLMessages . VC_STANDALONE_DOCUMENT_DECLARATION , fEntityName ) ; } } return external ; } protected int valueOfReferenceInAttValue ( int entityHandle ) throws Exception { if ( fEventHandler . externalEntityStandaloneCheck ( ) && fEntityPool . getEntityDeclIsExternal ( entityHandle ) ) { reportRecoverableXMLError ( XMLMessages . MSG_REFERENCE_TO_EXTERNALLY_DECLARED_ENTITY_WHEN_STANDALONE , XMLMessages . VC_STANDALONE_DOCUMENT_DECLARATION , fEntityName ) ; } int entityValue = fEntityPool . getEntityValue ( entityHandle ) ; return entityValue ; } protected boolean isExternalEntity ( int entityHandle ) { boolean external = fEntityPool . isExternalEntity ( entityHandle ) ; return external ; } protected int getEntityValue ( int entityHandle ) { int value = fEntityPool . getEntityValue ( entityHandle ) ; return value ; } protected String getPublicIdOfEntity ( int entityHandle ) { int publicId = fEntityPool . getPublicId ( entityHandle ) ; return fStringPool . toString ( publicId ) ; } protected String getSystemIdOfEntity ( int entityHandle ) { int systemId = fEntityPool . getSystemId ( entityHandle ) ; return fStringPool . toString ( systemId ) ; } protected int lookupParameterEntity ( int peName ) throws Exception { int entityHandle = - 1 ; if ( fParameterEntityPool != null ) entityHandle = fParameterEntityPool . lookupEntity ( peName ) ; return entityHandle ; } protected boolean isExternalParameterEntity ( int peIndex ) { boolean external = fParameterEntityPool . isExternalEntity ( peIndex ) ; return external ; } protected int getParameterEntityValue ( int peIndex ) { int value = fParameterEntityPool . getEntityValue ( peIndex ) ; return value ; } protected String getPublicIdOfParameterEntity ( int peIndex ) { int publicId = fParameterEntityPool . getPublicId ( peIndex ) ; return fStringPool . toString ( publicId ) ; } protected String getSystemIdOfParameterEntity ( int peIndex ) { int systemId = fParameterEntityPool . getSystemId ( peIndex ) ; return fStringPool . toString ( systemId ) ; } public XMLEntityHandler . EntityReader getEntityReader ( ) { return fReader ; } public void addRecognizer ( XMLDeclRecognizer recognizer ) { fReaderFactory . addRecognizer ( recognizer ) ; } public void setEntityResolver ( EntityResolver resolver ) { fResolver = resolver ; } public EntityResolver getEntityResolver ( ) { return fResolver ; } public String expandSystemId ( String systemId ) { return expandSystemId ( systemId , fSystemId ) ; } private String expandSystemId ( String systemId , String currentSystemId ) { String id = systemId ; if ( id == null || id . length ( ) == 0 ) { return systemId ; } try { URI uri = new URI ( id ) ; if ( uri != null ) { return systemId ; } } catch ( URI . MalformedURIException e ) { } id = fixURI ( id ) ; URI base = null ; URI uri = null ; try { if ( currentSystemId == null ) { String dir ; try { dir = fixURI ( System . getProperty ( "user.dir" ) ) ; } catch ( SecurityException se ) { dir = "" ; } if ( ! dir . endsWith ( "/" ) ) { dir = dir + "/" ; } base = new URI ( "file" , "" , dir , null , null ) ; } else { base = new URI ( currentSystemId ) ; } uri = new URI ( base , id ) ; } catch ( Exception e ) { } if ( uri == null ) { return systemId ; } return uri . toString ( ) ; } private static String fixURI ( String str ) { str = str . replace ( java . io . File . separatorChar , '/' ) ; if ( str . length ( ) >= 2 ) { char ch1 = str . charAt ( 1 ) ; if ( ch1 == ':' ) { char ch0 = Character . toUpperCase ( str . charAt ( 0 ) ) ; if ( ch0 >= 'A' && ch0 <= 'Z' ) { str = "/" + str ; } } } return str ; } public boolean startReadingFromDocument ( InputSource source ) throws Exception { pushEntity ( false , - 2 ) ; fSystemId = null ; pushNullReader ( ) ; fEntityName = - 2 ; fEntityType = ENTITYTYPE_DOCUMENT ; fEntityContext = ENTITYREF_DOCUMENT ; fReaderDepth = 0 ; fReaderId = fNextReaderId ++ ; fPublicId = source . getPublicId ( ) ; fSystemId = source . getSystemId ( ) ; fEventHandler . startEntityReference ( fEntityName , fEntityType , fEntityContext ) ; fSystemId = expandSystemId ( fSystemId , null ) ; fSource = source ; boolean xmlDecl = true ; try { fReader = fReaderFactory . createReader ( this , fErrorReporter , source , fSystemId , xmlDecl , fStringPool ) ; } catch ( MalformedURLException mu ) { String errorSystemId = fSystemId ; fEventHandler . endEntityReference ( fEntityName , fEntityType , fEntityContext ) ; popReader ( ) ; popEntity ( ) ; fReader = null ; Object [ ] args = { errorSystemId } ; fErrorReporter . reportError ( fErrorReporter . getLocator ( ) , ImplementationMessages . XERCES_IMPLEMENTATION_DOMAIN , ImplementationMessages . IO0 , 0 , args , XMLErrorReporter . ERRORTYPE_FATAL_ERROR ) ; } catch ( FileNotFoundException fnf ) { String errorSystemId = fSystemId ; fEventHandler . endEntityReference ( fEntityName , fEntityType , fEntityContext ) ; popReader ( ) ; popEntity ( ) ; fReader = null ; Object [ ] args = { errorSystemId } ; fErrorReporter . reportError ( fErrorReporter . getLocator ( ) , ImplementationMessages . XERCES_IMPLEMENTATION_DOMAIN , ImplementationMessages . IO0 , 0 , args , XMLErrorReporter . ERRORTYPE_FATAL_ERROR ) ; } catch ( UnsupportedEncodingException uee ) { fEventHandler . endEntityReference ( fEntityName , fEntityType , fEntityContext ) ; popReader ( ) ; popEntity ( ) ; fReader = null ; String encoding = uee . getMessage ( ) ; if ( encoding == null ) { fErrorReporter . reportError ( fErrorReporter . getLocator ( ) , XMLMessages . XML_DOMAIN , XMLMessages . MSG_ENCODING_REQUIRED , XMLMessages . P81_REQUIRED , null , XMLErrorReporter . ERRORTYPE_FATAL_ERROR ) ; } else if ( ! XMLCharacterProperties . validEncName ( encoding ) ) { Object [ ] args = { encoding } ; fErrorReporter . reportError ( fErrorReporter . getLocator ( ) , XMLMessages . XML_DOMAIN , XMLMessages . MSG_ENCODINGDECL_INVALID , XMLMessages . P81_INVALID_VALUE , args , XMLErrorReporter . ERRORTYPE_FATAL_ERROR ) ; } else { Object [ ] args = { encoding } ; fErrorReporter . reportError ( fErrorReporter . getLocator ( ) , XMLMessages . XML_DOMAIN , XMLMessages . MSG_ENCODING_NOT_SUPPORTED , XMLMessages . P81_NOT_SUPPORTED , args , XMLErrorReporter . ERRORTYPE_FATAL_ERROR ) ; } } fEventHandler . sendReaderChangeNotifications ( fReader , fReaderId ) ; return fReader != null ; } public void startReadingFromExternalSubset ( String publicId , String systemId , int readerDepth ) throws Exception { pushEntity ( true , - 1 ) ; pushReader ( ) ; pushNullReader ( ) ; fEntityName = - 1 ; fEntityType = ENTITYTYPE_EXTERNAL_SUBSET ; fEntityContext = ENTITYREF_EXTERNAL_SUBSET ; fReaderDepth = readerDepth ; fReaderId = fNextReaderId ++ ; fPublicId = publicId ; fSystemId = systemId ; startReadingFromExternalEntity ( false , - 1 ) ; } public void stopReadingFromExternalSubset ( ) throws Exception { if ( ! ( fReader instanceof NullReader ) ) throw new RuntimeException ( "FWK004 cannot happen 18" + "\n18" ) ; popReader ( ) ; fEventHandler . sendReaderChangeNotifications ( fReader , fReaderId ) ; } public boolean startReadingFromEntity ( int entityName , int readerDepth , int context ) throws Exception { if ( context > XMLEntityHandler . ENTITYREF_IN_CONTENT ) return startReadingFromParameterEntity ( entityName , readerDepth , context ) ; int entityHandle = lookupEntity ( entityName ) ; if ( entityHandle < 0 ) { int minorCode = XMLMessages . VC_ENTITY_DECLARED ; int errorType = XMLErrorReporter . ERRORTYPE_RECOVERABLE_ERROR ; if ( fEntityContext == ENTITYREF_DOCUMENT || fEntityContext == ENTITYREF_IN_ATTVALUE ) { minorCode = XMLMessages . WFC_ENTITY_DECLARED ; errorType = XMLErrorReporter . ERRORTYPE_FATAL_ERROR ; } else if ( ! fEventHandler . getValidating ( ) ) { return false ; } Object [ ] args = { fStringPool . toString ( entityName ) } ; fErrorReporter . reportError ( fErrorReporter . getLocator ( ) , XMLMessages . XML_DOMAIN , XMLMessages . MSG_ENTITY_NOT_DECLARED , minorCode , args , errorType ) ; return false ; } if ( context == ENTITYREF_IN_CONTENT ) { if ( fEntityPool . isUnparsedEntity ( entityHandle ) ) { Object [ ] args = { fStringPool . toString ( entityName ) } ; fErrorReporter . reportError ( fErrorReporter . getLocator ( ) , XMLMessages . XML_DOMAIN , XMLMessages . MSG_REFERENCE_TO_UNPARSED_ENTITY , XMLMessages . WFC_PARSED_ENTITY , args , XMLErrorReporter . ERRORTYPE_FATAL_ERROR ) ; return false ; } } else { if ( isExternalEntity ( entityHandle ) ) { Object [ ] args = { fStringPool . toString ( entityName ) } ; fErrorReporter . reportError ( fErrorReporter . getLocator ( ) , XMLMessages . XML_DOMAIN , XMLMessages . MSG_REFERENCE_TO_EXTERNAL_ENTITY , XMLMessages . WFC_NO_EXTERNAL_ENTITY_REFERENCES , args , XMLErrorReporter . ERRORTYPE_FATAL_ERROR ) ; return false ; } } if ( ! pushEntity ( false , entityName ) ) { Object [ ] args = { fStringPool . toString ( entityName ) , entityReferencePath ( false , entityName ) } ; fErrorReporter . reportError ( fErrorReporter . getLocator ( ) , XMLMessages . XML_DOMAIN , XMLMessages . MSG_RECURSIVE_REFERENCE , XMLMessages . WFC_NO_RECURSION , args , XMLErrorReporter . ERRORTYPE_FATAL_ERROR ) ; return false ; } pushReader ( ) ; fEntityName = entityName ; fEntityContext = context ; fReaderDepth = readerDepth ; fReaderId = fNextReaderId ++ ; if ( context != ENTITYREF_IN_CONTENT || ! externalReferenceInContent ( entityHandle ) ) { fEntityType = ENTITYTYPE_INTERNAL ; fPublicId = null ; fSystemId = fSystemId ; int value = - 1 ; if ( context == ENTITYREF_IN_CONTENT || context == ENTITYREF_IN_DEFAULTATTVALUE ) value = getEntityValue ( entityHandle ) ; else value = valueOfReferenceInAttValue ( entityHandle ) ; startReadingFromInternalEntity ( value , false ) ; return false ; } fEntityType = ENTITYTYPE_EXTERNAL ; fPublicId = getPublicIdOfEntity ( entityHandle ) ; fSystemId = getSystemIdOfEntity ( entityHandle ) ; return startReadingFromExternalEntity ( true , entityHandle ) ; } private boolean startReadingFromParameterEntity ( int peName , int readerDepth , int context ) throws Exception { int entityHandle = lookupParameterEntity ( peName ) ; if ( entityHandle == - 1 ) { if ( fEventHandler . getValidating ( ) ) { reportRecoverableXMLError ( XMLMessages . MSG_ENTITY_NOT_DECLARED , XMLMessages . VC_ENTITY_DECLARED , peName ) ; } return false ; } if ( ! pushEntity ( true , peName ) ) { Object [ ] args = { fStringPool . toString ( peName ) , entityReferencePath ( true , peName ) } ; fErrorReporter . reportError ( fErrorReporter . getLocator ( ) , XMLMessages . XML_DOMAIN , XMLMessages . MSG_RECURSIVE_PEREFERENCE , XMLMessages . WFC_NO_RECURSION , args , XMLErrorReporter . ERRORTYPE_FATAL_ERROR ) ; return false ; } pushReader ( ) ; fEntityName = peName ; fEntityContext = context ; fReaderDepth = readerDepth ; fReaderId = fNextReaderId ++ ; if ( ! isExternalParameterEntity ( entityHandle ) ) { fEntityType = ENTITYTYPE_INTERNAL_PE ; fPublicId = null ; fSystemId = fSystemId ; int value = getParameterEntityValue ( entityHandle ) ; startReadingFromInternalEntity ( value , fEntityContext == ENTITYREF_IN_ENTITYVALUE ? false : true ) ; return false ; } fEntityType = ENTITYTYPE_EXTERNAL_PE ; fPublicId = getPublicIdOfParameterEntity ( entityHandle ) ; fSystemId = getSystemIdOfParameterEntity ( entityHandle ) ; return startReadingFromExternalEntity ( true , entityHandle ) ; } private void startReadingFromInternalEntity ( int value , boolean addSpaces ) throws Exception { if ( fEntityContext == ENTITYREF_IN_ENTITYVALUE ) { } fSource = null ; fEventHandler . startEntityReference ( fEntityName , fEntityType , fEntityContext ) ; fReader = fReaderFactory . createStringReader ( this , fErrorReporter , fSendCharDataAsCharArray , getLineNumber ( ) , getColumnNumber ( ) , value , fStringPool , addSpaces ) ; fEventHandler . sendReaderChangeNotifications ( fReader , fReaderId ) ; } private boolean startReadingFromExternalEntity ( boolean checkForTextDecl , int entityHandle ) throws Exception { if ( fEntityContext == ENTITYREF_IN_ENTITYVALUE ) { } if ( fEntityContext == ENTITYREF_IN_DTD_WITHIN_MARKUP ) { } fEventHandler . startEntityReference ( fEntityName , fEntityType , fEntityContext ) ; String baseSystemId = null ; if ( entityHandle != - 1 ) { if ( fEntityType == ENTITYTYPE_EXTERNAL_PE ) baseSystemId = fParameterEntityPool . getBaseSystemId ( entityHandle ) ; else baseSystemId = fEntityPool . getBaseSystemId ( entityHandle ) ; } if ( baseSystemId == null ) { ReaderState rs = ( ReaderState ) fReaderStack . peek ( ) ; baseSystemId = rs . systemId ; } fSystemId = expandSystemId ( fSystemId , baseSystemId ) ; fSource = fResolver == null ? null : fResolver . resolveEntity ( fPublicId , fSystemId ) ; if ( fSource == null ) { fSource = new InputSource ( fSystemId ) ; if ( fPublicId != null ) fSource . setPublicId ( fPublicId ) ; } else { if ( fSource . getSystemId ( ) != null ) { fSystemId = expandSystemId ( fSource . getSystemId ( ) , baseSystemId ) ; } if ( fSource . getPublicId ( ) != null ) { fPublicId = fSource . getPublicId ( ) ; } } boolean textDecl = false ; try { fReader = fReaderFactory . createReader ( this , fErrorReporter , fSource , fSystemId , textDecl , fStringPool ) ; } catch ( MalformedURLException mu ) { String errorSystemId = fSystemId ; fEventHandler . endEntityReference ( fEntityName , fEntityType , fEntityContext ) ; popReader ( ) ; popEntity ( ) ; fReader = null ; Object [ ] args = { errorSystemId } ; fErrorReporter . reportError ( fErrorReporter . getLocator ( ) , ImplementationMessages . XERCES_IMPLEMENTATION_DOMAIN , ImplementationMessages . IO0 , 0 , args , XMLErrorReporter . ERRORTYPE_FATAL_ERROR ) ; } catch ( FileNotFoundException fnf ) { String errorSystemId = fSystemId ; fEventHandler . endEntityReference ( fEntityName , fEntityType , fEntityContext ) ; popReader ( ) ; popEntity ( ) ; fReader = null ; Object [ ] args = { errorSystemId } ; fErrorReporter . reportError ( fErrorReporter . getLocator ( ) , ImplementationMessages . XERCES_IMPLEMENTATION_DOMAIN , ImplementationMessages . IO0 , 0 , args , XMLErrorReporter . ERRORTYPE_FATAL_ERROR ) ; } catch ( UnsupportedEncodingException uee ) { fEventHandler . endEntityReference ( fEntityName , fEntityType , fEntityContext ) ; popReader ( ) ; popEntity ( ) ; fReader = null ; String encoding = uee . getMessage ( ) ; if ( encoding == null ) { fErrorReporter . reportError ( fErrorReporter . getLocator ( ) , XMLMessages . XML_DOMAIN , XMLMessages . MSG_ENCODING_REQUIRED , XMLMessages . P81_REQUIRED , null , XMLErrorReporter . ERRORTYPE_FATAL_ERROR ) ; } else if ( ! XMLCharacterProperties . validEncName ( encoding ) ) { Object [ ] args = { encoding } ; fErrorReporter . reportError ( fErrorReporter . getLocator ( ) , XMLMessages . XML_DOMAIN , XMLMessages . MSG_ENCODINGDECL_INVALID , XMLMessages . P81_INVALID_VALUE , args , XMLErrorReporter . ERRORTYPE_FATAL_ERROR ) ; } else { Object [ ] args = { encoding } ; fErrorReporter . reportError ( fErrorReporter . getLocator ( ) , XMLMessages . XML_DOMAIN , XMLMessages . MSG_ENCODING_NOT_SUPPORTED , XMLMessages . P81_NOT_SUPPORTED , args , XMLErrorReporter . ERRORTYPE_FATAL_ERROR ) ; } } if ( fReader == null || ! checkForTextDecl ) { fEventHandler . sendReaderChangeNotifications ( fReader , fReaderId ) ; return false ; } int readerId = fReaderId ; fEventHandler . sendReaderChangeNotifications ( fReader , fReaderId ) ; boolean parseTextDecl = fReader . lookingAtChar ( '<' , false ) ; if ( readerId != fReaderId ) parseTextDecl = false ; return parseTextDecl ; } private void pushNullReader ( ) { ReaderState rs = fReaderStateFreeList ; if ( rs == null ) rs = new ReaderState ( ) ; else fReaderStateFreeList = rs . nextReaderState ; if ( fNullReader == null ) fNullReader = new NullReader ( ) ; rs . reader = fNullReader ; rs . source = null ; rs . entityName = - 1 ; rs . entityType = - 1 ; rs . entityContext = - 1 ; rs . publicId = "Null Entity" ; rs . systemId = fSystemId ; rs . readerId = fNextReaderId ++ ; rs . depth = - 1 ; rs . nextReaderState = null ; fReaderStack . push ( rs ) ; } private void pushReader ( ) { ReaderState rs = fReaderStateFreeList ; if ( rs == null ) rs = new ReaderState ( ) ; else fReaderStateFreeList = rs . nextReaderState ; rs . reader = fReader ; rs . source = fSource ; rs . entityName = fEntityName ; rs . entityType = fEntityType ; rs . entityContext = fEntityContext ; rs . publicId = fPublicId ; rs . systemId = fSystemId ; rs . readerId = fReaderId ; rs . depth = fReaderDepth ; rs . nextReaderState = null ; fReaderStack . push ( rs ) ; } private void popReader ( ) { if ( fReaderStack . empty ( ) ) throw new RuntimeException ( "FWK004 cannot happen 19" + "\n19" ) ; ReaderState rs = ( ReaderState ) fReaderStack . pop ( ) ; fReader = rs . reader ; fSource = rs . source ; fEntityName = rs . entityName ; fEntityType = rs . entityType ; fEntityContext = rs . entityContext ; fPublicId = rs . publicId ; fSystemId = rs . systemId ; fReaderId = rs . readerId ; fReaderDepth = rs . depth ; rs . nextReaderState = fReaderStateFreeList ; fReaderStateFreeList = rs ; } public boolean startEntityDecl ( boolean isPE , int entityName ) throws Exception { if ( ! pushEntity ( isPE , entityName ) ) { int majorCode = isPE ? XMLMessages . MSG_RECURSIVE_PEREFERENCE : XMLMessages . MSG_RECURSIVE_REFERENCE ; Object [ ] args = { fStringPool . toString ( entityName ) , entityReferencePath ( isPE , entityName ) } ; fErrorReporter . reportError ( fErrorReporter . getLocator ( ) , XMLMessages . XML_DOMAIN , majorCode , XMLMessages . WFC_NO_RECURSION , args , XMLErrorReporter . ERRORTYPE_FATAL_ERROR ) ; return false ; } return true ; } public void endEntityDecl ( ) throws Exception { popEntity ( ) ; } private boolean pushEntity ( boolean isPE , int entityName ) throws Exception { if ( entityName >= 0 ) { for ( int i = 0 ; i < fEntityStackDepth ; i ++ ) { if ( fEntityNameStack [ i ] == entityName && fEntityTypeStack [ i ] == ( isPE ? 1 : 0 ) ) { return false ; } } } if ( fEntityTypeStack == null ) { fEntityTypeStack = new byte [ 8 ] ; fEntityNameStack = new int [ 8 ] ; } else if ( fEntityStackDepth == fEntityTypeStack . length ) { byte [ ] newTypeStack = new byte [ fEntityStackDepth * 2 ] ; System . arraycopy ( fEntityTypeStack , 0 , newTypeStack , 0 , fEntityStackDepth ) ; fEntityTypeStack = newTypeStack ; int [ ] newNameStack = new int [ fEntityStackDepth * 2 ] ; System . arraycopy ( fEntityNameStack , 0 , newNameStack , 0 , fEntityStackDepth ) ; fEntityNameStack = newNameStack ; } fEntityTypeStack [ fEntityStackDepth ] = ( byte ) ( isPE ? 1 : 0 ) ; fEntityNameStack [ fEntityStackDepth ] = entityName ; fEntityStackDepth ++ ; return true ; } private String entityReferencePath ( boolean isPE , int entityName ) { StringBuffer sb = new StringBuffer ( ) ; sb . append ( "(top-level)" ) ; for ( int i = 0 ; i < fEntityStackDepth ; i ++ ) { if ( fEntityNameStack [ i ] >= 0 ) { sb . append ( '-' ) ; sb . append ( fEntityTypeStack [ i ] == 1 ? '%' : '&' ) ; sb . append ( fStringPool . toString ( fEntityNameStack [ i ] ) ) ; sb . append ( ';' ) ; } } sb . append ( '-' ) ; sb . append ( isPE ? '%' : '&' ) ; sb . append ( fStringPool . toString ( entityName ) ) ; sb . append ( ';' ) ; return sb . toString ( ) ; } private void popEntity ( ) throws Exception { fEntityStackDepth -- ; } public int getReaderId ( ) { return fReaderId ; } public void setReaderDepth ( int depth ) { fReaderDepth = depth ; } public int getReaderDepth ( ) { return fReaderDepth ; } public String getPublicId ( ) { return fPublicId ; } public String getSystemId ( ) { return fSystemId ; } public int getLineNumber ( ) { return fReader == null ? 0 : fReader . getLineNumber ( ) ; } public int getColumnNumber ( ) { return fReader == null ? 0 : fReader . getColumnNumber ( ) ; } public XMLEntityHandler . EntityReader changeReaders ( ) throws Exception { fEventHandler . sendEndOfInputNotifications ( fEntityName , fReaderStack . size ( ) > 1 ) ; fEventHandler . endEntityReference ( fEntityName , fEntityType , fEntityContext ) ; popReader ( ) ; fEventHandler . sendReaderChangeNotifications ( fReader , fReaderId ) ; popEntity ( ) ; return fReader ; } private final class NullReader implements XMLEntityHandler . EntityReader { public NullReader ( ) { } public int currentOffset ( ) { return - 1 ; } public int getLineNumber ( ) { return - 1 ; } public int getColumnNumber ( ) { return - 1 ; } public void setInCDSect ( boolean inCDSect ) { } public boolean getInCDSect ( ) { return false ; } public void append ( XMLEntityHandler . CharBuffer charBuffer , int offset , int length ) { } public int addString ( int offset , int length ) { return - 1 ; } public int addSymbol ( int offset , int length ) { return - 1 ; } public boolean lookingAtChar ( char ch , boolean skipPastChar ) { return false ; } public boolean lookingAtValidChar ( boolean skipPastChar ) { return false ; } public boolean lookingAtSpace ( boolean skipPastChar ) { return false ; } public void skipToChar ( char ch ) { } public void skipPastSpaces ( ) { } public void skipPastName ( char fastcheck ) { } public void skipPastNmtoken ( char fastcheck ) { } public boolean skippedString ( char [ ] s ) { return false ; } public int scanInvalidChar ( ) { return - 1 ; } public int scanCharRef ( boolean hex ) { return XMLEntityHandler . CHARREF_RESULT_INVALID_CHAR ; } public int scanStringLiteral ( ) { return XMLEntityHandler . STRINGLIT_RESULT_QUOTE_REQUIRED ; } public int scanAttValue ( char qchar , boolean asSymbol ) { return XMLEntityHandler . ATTVALUE_RESULT_INVALID_CHAR ; } public int scanEntityValue ( int qchar , boolean createString ) { return XMLEntityHandler . ENTITYVALUE_RESULT_INVALID_CHAR ; } public boolean scanExpectedName ( char fastcheck , StringPool . CharArrayRange expectedName ) { return false ; } public void scanQName ( char fastcheck , QName qname ) { qname . clear ( ) ; } public int scanName ( char fastcheck ) { return - 1 ; } public int scanContent ( QName element ) throws Exception { return XMLEntityHandler . CONTENT_RESULT_INVALID_CHAR ; } } static final int CHUNK_SHIFT = 5 ; static final int CHUNK_SIZE = ( 1 << CHUNK_SHIFT ) ; static final int CHUNK_MASK = CHUNK_SIZE - 1 ; static final int INITIAL_CHUNK_COUNT = ( 1 << ( 10 - CHUNK_SHIFT ) ) ; public final class EntityPool { private StringPool fStringPool = null ; private XMLErrorReporter fErrorReporter = null ; private int fEntityCount = 0 ; private int [ ] [ ] fName = new int [ INITIAL_CHUNK_COUNT ] [ ] ; private int [ ] [ ] fValue = new int [ INITIAL_CHUNK_COUNT ] [ ] ; private int [ ] [ ] fPublicId = new int [ INITIAL_CHUNK_COUNT ] [ ] ; private int [ ] [ ] fSystemId = new int [ INITIAL_CHUNK_COUNT ] [ ] ; private int [ ] [ ] fBaseSystemId = new int [ INITIAL_CHUNK_COUNT ] [ ] ; private int [ ] [ ] fNotationName = new int [ INITIAL_CHUNK_COUNT ] [ ] ; private byte [ ] [ ] fDeclIsExternal = new byte [ INITIAL_CHUNK_COUNT ] [ ] ; private int fNotationListHead = - 1 ; private boolean fCreateStandardEntities = false ; private Vector fRequiredNotations = null ; public EntityPool ( StringPool stringPool , XMLErrorReporter errorReporter , boolean createStandardEntities ) { fStringPool = stringPool ; fErrorReporter = errorReporter ; fCreateStandardEntities = createStandardEntities ; if ( fCreateStandardEntities ) { createInternalEntity ( "lt" , "&#60;" ) ; createInternalEntity ( "gt" , ">" ) ; createInternalEntity ( "amp" , "&#38;" ) ; createInternalEntity ( "apos" , "\'" ) ; createInternalEntity ( "quot" , "\"" ) ; } } public void reset ( StringPool stringPool ) { fStringPool = stringPool ; fEntityCount = 0 ; fNotationListHead = - 1 ; if ( fRequiredNotations != null ) fRequiredNotations . removeAllElements ( ) ; if ( fCreateStandardEntities ) { createInternalEntity ( "lt" , "&#60;" ) ; createInternalEntity ( "gt" , ">" ) ; createInternalEntity ( "amp" , "&#38;" ) ; createInternalEntity ( "apos" , "\'" ) ; createInternalEntity ( "quot" , "\"" ) ; } } private void createInternalEntity ( String name , String value ) { int chunk = fEntityCount > > CHUNK_SHIFT ; int index = fEntityCount & CHUNK_MASK ; ensureCapacity ( chunk ) ; fName [ chunk ] [ index ] = fStringPool . addSymbol ( name ) ; fValue [ chunk ] [ index ] = fStringPool . addString ( value ) ; fPublicId [ chunk ] [ index ] = - 1 ; fSystemId [ chunk ] [ index ] = - 1 ; fBaseSystemId [ chunk ] [ index ] = - 1 ; fNotationName [ chunk ] [ index ] = - 1 ; fEntityCount ++ ; } private boolean ensureCapacity ( int chunk ) { try { return fName [ chunk ] [ 0 ] == 0 ; } catch ( ArrayIndexOutOfBoundsException ex ) { int [ ] [ ] newIntArray = new int [ chunk * 2 ] [ ] ; System . arraycopy ( fName , 0 , newIntArray , 0 , chunk ) ; fName = newIntArray ; newIntArray = new int [ chunk * 2 ] [ ] ; System . arraycopy ( fValue , 0 , newIntArray , 0 , chunk ) ; fValue = newIntArray ; newIntArray = new int [ chunk * 2 ] [ ] ; System . arraycopy ( fPublicId , 0 , newIntArray , 0 , chunk ) ; fPublicId = newIntArray ; newIntArray = new int [ chunk * 2 ] [ ] ; System . arraycopy ( fSystemId , 0 , newIntArray , 0 , chunk ) ; fSystemId = newIntArray ; newIntArray = new int [ chunk * 2 ] [ ] ; System . arraycopy ( fBaseSystemId , 0 , newIntArray , 0 , chunk ) ; fBaseSystemId = newIntArray ; newIntArray = new int [ chunk * 2 ] [ ] ; System . arraycopy ( fNotationName , 0 , newIntArray , 0 , chunk ) ; fNotationName = newIntArray ; byte [ ] [ ] newByteArray = new byte [ chunk * 2 ] [ ] ; System . arraycopy ( fDeclIsExternal , 0 , newByteArray , 0 , chunk ) ; fDeclIsExternal = newByteArray ; } catch ( NullPointerException ex ) { } fName [ chunk ] = new int [ CHUNK_SIZE ] ; fValue [ chunk ] = new int [ CHUNK_SIZE ] ; fPublicId [ chunk ] = new int [ CHUNK_SIZE ] ; fSystemId [ chunk ] = new int [ CHUNK_SIZE ] ; fBaseSystemId [ chunk ] = new int [ CHUNK_SIZE ] ; fNotationName [ chunk ] = new int [ CHUNK_SIZE ] ; fDeclIsExternal [ chunk ] = new byte [ CHUNK_SIZE ] ; return true ; } public int addEntityDecl ( int name , int value , int publicId , int systemId , int baseSystemId , int notationName , boolean isExternal ) { int chunk = fEntityCount > > CHUNK_SHIFT ; int index = fEntityCount & CHUNK_MASK ; ensureCapacity ( chunk ) ; fName [ chunk ] [ index ] = name ; fValue [ chunk ] [ index ] = value ; fPublicId [ chunk ] [ index ] = publicId ; fSystemId [ chunk ] [ index ] = systemId ; fBaseSystemId [ chunk ] [ index ] = baseSystemId ; fNotationName [ chunk ] [ index ] = notationName ; fDeclIsExternal [ chunk ] [ index ] = isExternal ? ( byte ) 0x80 : ( byte ) 0 ; int entityIndex = fEntityCount ++ ; return entityIndex ; } public int addNotationDecl ( int notationName , int publicId , int systemId , int baseSystemId , boolean isExternal ) { int nIndex = fNotationListHead ; while ( nIndex != - 1 ) { int chunk = nIndex > > CHUNK_SHIFT ; int index = nIndex & CHUNK_MASK ; if ( fNotationName [ chunk ] [ index ] == notationName ) return - 1 ; nIndex = fValue [ chunk ] [ index ] ; } int chunk = fEntityCount > > CHUNK_SHIFT ; int index = fEntityCount & CHUNK_MASK ; ensureCapacity ( chunk ) ; fName [ chunk ] [ index ] = - 1 ; fValue [ chunk ] [ index ] = fNotationListHead ; fPublicId [ chunk ] [ index ] = publicId ; fSystemId [ chunk ] [ index ] = systemId ; fBaseSystemId [ chunk ] [ index ] = baseSystemId ; fNotationName [ chunk ] [ index ] = notationName ; fDeclIsExternal [ chunk ] [ index ] = isExternal ? ( byte ) 0x80 : ( byte ) 0 ; fNotationListHead = fEntityCount ++ ; return fNotationListHead ; } public int lookupEntity ( int nameIndex ) { if ( nameIndex == - 1 ) return - 1 ; int chunk = 0 ; int index = 0 ; for ( int entityIndex = 0 ; entityIndex < fEntityCount ; entityIndex ++ ) { if ( fName [ chunk ] [ index ] == nameIndex ) return entityIndex ; if ( ++ index == CHUNK_SIZE ) { chunk ++ ; index = 0 ; } } return - 1 ; } public boolean isExternalEntity ( int entityIndex ) { int chunk = entityIndex > > CHUNK_SHIFT ; int index = entityIndex & CHUNK_MASK ; return ( fValue [ chunk ] [ index ] == - 1 ) ; } public boolean isUnparsedEntity ( int entityIndex ) { int chunk = entityIndex > > CHUNK_SHIFT ; int index = entityIndex & CHUNK_MASK ; return ( fNotationName [ chunk ] [ index ] != - 1 ) ; } public boolean getEntityDeclIsExternal ( int entityIndex ) { int chunk = entityIndex > > CHUNK_SHIFT ; int index = entityIndex & CHUNK_MASK ; return ( fDeclIsExternal [ chunk ] [ index ] < 0 ) ; } public int getEntityName ( int entityIndex ) { int chunk = entityIndex > > CHUNK_SHIFT ; int index = entityIndex & CHUNK_MASK ; return fName [ chunk ] [ index ] ; } public int getEntityValue ( int entityIndex ) { int chunk = entityIndex > > CHUNK_SHIFT ; int index = entityIndex & CHUNK_MASK ; return fValue [ chunk ] [ index ] ; } public int getPublicId ( int entityIndex ) { int chunk = entityIndex > > CHUNK_SHIFT ; int index = entityIndex & CHUNK_MASK ; return fPublicId [ chunk ] [ index ] ; } public int getSystemId ( int entityIndex ) { int chunk = entityIndex > > CHUNK_SHIFT ; int index = entityIndex & CHUNK_MASK ; return fSystemId [ chunk ] [ index ] ; } public String getBaseSystemId ( int entityIndex ) { int chunk = entityIndex > > CHUNK_SHIFT ; int index = entityIndex & CHUNK_MASK ; int baseIndex = fBaseSystemId [ chunk ] [ index ] ; if ( baseIndex == - 1 ) { return null ; } else { return fStringPool . toString ( baseIndex ) ; } } public boolean isNotationDeclared ( int nameIndex ) { int nIndex = fNotationListHead ; while ( nIndex != - 1 ) { int chunk = nIndex > > CHUNK_SHIFT ; int index = nIndex & CHUNK_MASK ; if ( fNotationName [ chunk ] [ index ] == nameIndex ) return true ; nIndex = fValue [ chunk ] [ index ] ; } return false ; } public boolean getNotationDeclIsExternal ( int entityIndex ) { int chunk = entityIndex > > CHUNK_SHIFT ; int index = entityIndex & CHUNK_MASK ; return ( fDeclIsExternal [ chunk ] [ index ] < 0 ) ; } public int getNotationName ( int entityIndex ) { int chunk = entityIndex > > CHUNK_SHIFT ; int index = entityIndex & CHUNK_MASK ; return fNotationName [ chunk ] [ index ] ; } class RequiredNotation { RequiredNotation ( int notationName , Locator locator , int majorCode , int minorCode , Object [ ] args ) { fNotationName = notationName ; fLocator = new LocatorImpl ( locator ) ; fMajorCode = majorCode ; fMinorCode = minorCode ; fArgs = args ; } int fNotationName ; LocatorImpl fLocator ; int fMajorCode ; int fMinorCode ; Object [ ] fArgs ; } ; public void addRequiredNotation ( int notationName , Locator locator , int majorCode , int minorCode , Object [ ] args ) { if ( fRequiredNotations == null ) fRequiredNotations = new Vector ( ) ; for ( int index = 0 ; index < fRequiredNotations . size ( ) ; index ++ ) { RequiredNotation rn = ( RequiredNotation ) fRequiredNotations . elementAt ( index ) ; if ( rn . fNotationName == notationName ) return ; } fRequiredNotations . addElement ( new RequiredNotation ( notationName , locator , majorCode , minorCode , args ) ) ; } public void checkRequiredNotations ( ) throws Exception { if ( fRequiredNotations == null ) return ; for ( int index = 0 ; index < fRequiredNotations . size ( ) ; index ++ ) { RequiredNotation rn = ( RequiredNotation ) fRequiredNotations . elementAt ( index ) ; if ( ! isNotationDeclared ( rn . fNotationName ) ) { fErrorReporter . reportError ( rn . fLocator , XMLMessages . XML_DOMAIN , rn . fMajorCode , rn . fMinorCode , rn . fArgs , XMLErrorReporter . ERRORTYPE_RECOVERABLE_ERROR ) ; } } } } } 	0	['62', '1', '0', '24', '130', '753', '10', '17', '39', '0.850197852', '2272', '0.862068966', '12', '0', '0.138248848', '0', '0', '35.17741935', '6', '1.3226', '0']
package org . apache . xerces . utils ; import java . lang . * ; public final class ISO8601Format { public ISO8601Format ( String dateString ) { } } 	0	['1', '1', '0', '0', '2', '0', '0', '0', '1', '2', '4', '0', '0', '0', '1', '0', '0', '3', '0', '0', '0']
package org . w3c . dom ; public interface DOMImplementation { public boolean hasFeature ( String feature , String version ) ; public DocumentType createDocumentType ( String qualifiedName , String publicId , String systemId ) throws DOMException ; public Document createDocument ( String namespaceURI , String qualifiedName , DocumentType doctype ) throws DOMException ; } 	0	['3', '1', '0', '0', '3', '3', '0', '0', '3', '2', '3', '0', '0', '0', '0.777777778', '0', '0', '0', '1', '1', '0']
package org . apache . xerces . validators . datatype ; import java . util . Enumeration ; import java . util . Hashtable ; import java . util . Locale ; import java . util . Vector ; import org . apache . xerces . validators . schema . SchemaSymbols ; import org . apache . xerces . utils . regex . RegularExpression ; import org . apache . xerces . utils . Base64 ; import org . apache . xerces . utils . HexBin ; public class BinaryDatatypeValidator extends AbstractDatatypeValidator { private DatatypeValidator fBaseValidator = null ; private int fLength = 0 ; private int fMaxLength = Integer . MAX_VALUE ; private int fMinLength = 0 ; private String fPattern = null ; private Vector fEnumeration = null ; private int fFacetsDefined = 0 ; private String fEncoding = SchemaSymbols . ATTVAL_BASE64 ; public BinaryDatatypeValidator ( ) throws InvalidDatatypeFacetException { this ( null , null , false ) ; } public BinaryDatatypeValidator ( DatatypeValidator base , Hashtable facets , boolean derivedByList ) throws InvalidDatatypeFacetException { if ( base != null ) setBasetype ( base ) ; if ( facets != null ) { for ( Enumeration e = facets . keys ( ) ; e . hasMoreElements ( ) ; ) { String key = ( String ) e . nextElement ( ) ; if ( key . equals ( SchemaSymbols . ELT_LENGTH ) ) { fFacetsDefined += DatatypeValidator . FACET_LENGTH ; String lengthValue = ( String ) facets . get ( key ) ; try { fLength = Integer . parseInt ( lengthValue ) ; } catch ( NumberFormatException nfe ) { throw new InvalidDatatypeFacetException ( "Length value '" + lengthValue + "' is invalid." ) ; } if ( fLength < 0 ) throw new InvalidDatatypeFacetException ( "Length value '" + lengthValue + "'  must be a nonNegativeInteger." ) ; } else if ( key . equals ( SchemaSymbols . ELT_MINLENGTH ) ) { fFacetsDefined += DatatypeValidator . FACET_MINLENGTH ; String minLengthValue = ( String ) facets . get ( key ) ; try { fMinLength = Integer . parseInt ( minLengthValue ) ; } catch ( NumberFormatException nfe ) { throw new InvalidDatatypeFacetException ( "maxLength value '" + minLengthValue + "' is invalid." ) ; } } else if ( key . equals ( SchemaSymbols . ELT_MAXLENGTH ) ) { fFacetsDefined += DatatypeValidator . FACET_MAXLENGTH ; String maxLengthValue = ( String ) facets . get ( key ) ; try { fMaxLength = Integer . parseInt ( maxLengthValue ) ; } catch ( NumberFormatException nfe ) { throw new InvalidDatatypeFacetException ( "maxLength value '" + maxLengthValue + "' is invalid." ) ; } } else if ( key . equals ( SchemaSymbols . ELT_PATTERN ) ) { fFacetsDefined += DatatypeValidator . FACET_PATTERN ; fPattern = ( String ) facets . get ( key ) ; } else if ( key . equals ( SchemaSymbols . ELT_ENUMERATION ) ) { fFacetsDefined += DatatypeValidator . FACET_ENUMERATION ; fEnumeration = ( Vector ) facets . get ( key ) ; } else if ( key . equals ( SchemaSymbols . ELT_ENCODING ) ) { fFacetsDefined += DatatypeValidator . FACET_MAXINCLUSIVE ; fEncoding = ( String ) facets . get ( key ) ; } else { throw new InvalidDatatypeFacetException ( ) ; } } if ( ( ( fFacetsDefined & DatatypeValidator . FACET_LENGTH ) != 0 ) ) { if ( ( ( fFacetsDefined & DatatypeValidator . FACET_MAXLENGTH ) != 0 ) ) { throw new InvalidDatatypeFacetException ( "It is an error for both length and maxLength to be members of facets." ) ; } else if ( ( ( fFacetsDefined & DatatypeValidator . FACET_MINLENGTH ) != 0 ) ) { throw new InvalidDatatypeFacetException ( "It is an error for both length and minLength to be members of facets." ) ; } } if ( ( ( fFacetsDefined & ( DatatypeValidator . FACET_MINLENGTH | DatatypeValidator . FACET_MAXLENGTH ) ) != 0 ) ) { if ( fMinLength > fMaxLength ) { throw new InvalidDatatypeFacetException ( "Value of maxLength = " + fMaxLength + "must be greater that the value of minLength" + fMinLength ) ; } } } } public Object validate ( String content , Object state ) throws InvalidDatatypeValueException { if ( this . fBaseValidator != null ) { this . fBaseValidator . validate ( content , state ) ; } if ( ( ( fFacetsDefined & DatatypeValidator . FACET_ENCODING ) != 0 ) ) { if ( fEncoding . equals ( SchemaSymbols . ATTVAL_BASE64 ) ) { if ( Base64 . isBase64 ( content ) == false ) { throw new InvalidDatatypeValueException ( "Value '" + content + "'  must be" + "is not encoded in Base64" ) ; } } else { if ( HexBin . isHex ( content ) == false ) { throw new InvalidDatatypeValueException ( "Value '" + content + "'  must be" + "is not encoded in Hex" ) ; } } } return null ; } public int compare ( String content1 , String content2 ) { return 0 ; } public Hashtable getFacets ( ) { return null ; } public Object clone ( ) throws CloneNotSupportedException { throw new CloneNotSupportedException ( "clone() is not supported in " + this . getClass ( ) . getName ( ) ) ; } private void setBasetype ( DatatypeValidator base ) { fBaseValidator = base ; } } 	0	['7', '2', '0', '7', '27', '15', '1', '6', '6', '0.75', '380', '1', '1', '0.444444444', '0.333333333', '1', '1', '52.14285714', '1', '0.7143', '0']
package org . apache . wml . dom ; import org . apache . wml . * ; public class WMLFieldsetElementImpl extends WMLElementImpl implements WMLFieldsetElement { public WMLFieldsetElementImpl ( WMLDocumentImpl owner , String tagName ) { super ( owner , tagName ) ; } public void setClassName ( String newValue ) { setAttribute ( "class" , newValue ) ; } public String getClassName ( ) { return getAttribute ( "class" ) ; } public void setXmlLang ( String newValue ) { setAttribute ( "xml:lang" , newValue ) ; } public String getXmlLang ( ) { return getAttribute ( "xml:lang" ) ; } public void setTitle ( String newValue ) { setAttribute ( "title" , newValue ) ; } public String getTitle ( ) { return getAttribute ( "title" ) ; } public void setId ( String newValue ) { setAttribute ( "id" , newValue ) ; } public String getId ( ) { return getAttribute ( "id" ) ; } } 	0	['9', '4', '0', '3', '12', '36', '0', '3', '9', '2', '50', '0', '0', '0.911111111', '0.555555556', '1', '6', '4.555555556', '1', '0.8889', '0']
package org . apache . html . dom ; import java . util . Vector ; import org . w3c . dom . * ; import org . w3c . dom . html . * ; import org . xml . sax . * ; import org . apache . xerces . dom . TextImpl ; import org . apache . xerces . dom . ElementImpl ; import org . apache . xerces . dom . ProcessingInstructionImpl ; public class HTMLBuilder implements DocumentHandler { protected HTMLDocumentImpl _document ; protected ElementImpl _current ; private Locator _locator ; private boolean _ignoreWhitespace = true ; private boolean _done = true ; protected Vector _preRootNodes ; public void startDocument ( ) throws SAXException { if ( ! _done ) throw new SAXException ( "HTM001 State error: startDocument fired twice on one builder." ) ; _document = null ; _done = false ; } public void endDocument ( ) throws SAXException { if ( _document == null ) throw new SAXException ( "HTM002 State error: document never started or missing document element." ) ; if ( _current != null ) throw new SAXException ( "HTM003 State error: document ended before end of document element." ) ; _current = null ; _done = true ; } public synchronized void startElement ( String tagName , AttributeList attrList ) throws SAXException { ElementImpl elem ; int i ; if ( tagName == null ) throw new SAXException ( "HTM004 Argument 'tagName' is null." ) ; if ( _document == null ) { _document = new HTMLDocumentImpl ( ) ; elem = ( ElementImpl ) _document . getDocumentElement ( ) ; _current = elem ; if ( _current == null ) throw new SAXException ( "HTM005 State error: Document.getDocumentElement returns null." ) ; if ( _preRootNodes != null ) { for ( i = _preRootNodes . size ( ) ; i -- > 0 ; ) _document . insertBefore ( ( Node ) _preRootNodes . elementAt ( i ) , elem ) ; _preRootNodes = null ; } } else { if ( _current == null ) throw new SAXException ( "HTM006 State error: startElement called after end of document element." ) ; elem = ( ElementImpl ) _document . createElement ( tagName ) ; _current . appendChild ( elem ) ; _current = elem ; } if ( attrList != null ) { for ( i = 0 ; i < attrList . getLength ( ) ; ++ i ) elem . setAttribute ( attrList . getName ( i ) , attrList . getValue ( i ) ) ; } } public void endElement ( String tagName ) throws SAXException { if ( _current == null ) throw new SAXException ( "HTM007 State error: endElement called with no current node." ) ; if ( ! _current . getNodeName ( ) . equals ( tagName ) ) throw new SAXException ( "HTM008 State error: mismatch in closing tag name " + tagName + "\n" + tagName ) ; if ( _current . getParentNode ( ) == _current . getOwnerDocument ( ) ) _current = null ; else _current = ( ElementImpl ) _current . getParentNode ( ) ; } public void characters ( String text ) throws SAXException { if ( _current == null ) throw new SAXException ( "HTM009 State error: character data found outside of root element." ) ; _current . appendChild ( new TextImpl ( _document , text ) ) ; } public void characters ( char [ ] text , int start , int length ) throws SAXException { if ( _current == null ) throw new SAXException ( "HTM010 State error: character data found outside of root element." ) ; _current . appendChild ( new TextImpl ( _document , new String ( text , start , length ) ) ) ; } public void ignorableWhitespace ( char [ ] text , int start , int length ) throws SAXException { Node node ; if ( ! _ignoreWhitespace ) _current . appendChild ( new TextImpl ( _document , new String ( text , start , length ) ) ) ; } public void processingInstruction ( String target , String instruction ) throws SAXException { Node node ; if ( _current == null && _document == null ) { if ( _preRootNodes == null ) _preRootNodes = new Vector ( ) ; _preRootNodes . addElement ( new ProcessingInstructionImpl ( null , target , instruction ) ) ; } else if ( _current == null && _document != null ) _document . appendChild ( new ProcessingInstructionImpl ( _document , target , instruction ) ) ; else _current . appendChild ( new ProcessingInstructionImpl ( _document , target , instruction ) ) ; } public HTMLDocument getHTMLDocument ( ) { return ( HTMLDocument ) _document ; } public void setDocumentLocator ( Locator locator ) { _locator = locator ; } } 	0	['11', '1', '0', '5', '37', '0', '0', '5', '11', '0.716666667', '332', '1', '3', '0', '0.318181818', '0', '0', '28.63636364', '1', '0.9091', '0']
package org . apache . xerces . validators . common ; import java . util . * ; import org . apache . xerces . validators . common . Grammar ; import org . apache . xerces . validators . common . GrammarResolver ; import org . apache . xerces . validators . datatype . DatatypeValidatorFactory ; import org . apache . xerces . validators . datatype . DatatypeValidatorFactoryImpl ; public class GrammarResolverImpl implements GrammarResolver { private Hashtable fGrammarRegistry = new Hashtable ( ) ; private DatatypeValidatorFactoryImpl fDataTypeReg ; public GrammarResolverImpl ( ) { } public Grammar getGrammar ( String nameSpaceKey ) { return ( Grammar ) ( fGrammarRegistry . get ( nameSpaceKey ) ) ; } public DatatypeValidatorFactory getDatatypeRegistry ( ) { if ( fDataTypeReg == null ) { fDataTypeReg = new DatatypeValidatorFactoryImpl ( ) ; } return fDataTypeReg ; } public String [ ] getNSKeysInPool ( ) { int numberOfNSKeysInPool = fGrammarRegistry . size ( ) ; String [ ] NSArray = new String [ numberOfNSKeysInPool ] ; Enumeration enumOfKeys = nameSpaceKeys ( ) ; for ( int i = 0 ; i < numberOfNSKeysInPool ; i ++ ) { NSArray [ i ] = ( String ) ( enumOfKeys . nextElement ( ) ) ; } return NSArray ; } public void putGrammar ( String nameSpaceKey , Grammar grammar ) { fGrammarRegistry . put ( nameSpaceKey , grammar ) ; } public int size ( ) { return fGrammarRegistry . size ( ) ; } public Enumeration nameSpaceKeys ( ) { return fGrammarRegistry . keys ( ) ; } public Grammar removeGrammar ( String nameSpaceKey ) { if ( containsNameSpace ( nameSpaceKey ) == true ) fGrammarRegistry . remove ( nameSpaceKey ) ; return null ; } public boolean contains ( Grammar grammar ) { return fGrammarRegistry . contains ( grammar ) ; } public boolean containsNameSpace ( String nameSpaceKey ) { return fGrammarRegistry . containsKey ( nameSpaceKey ) ; } public void clearGrammarResolver ( ) { fGrammarRegistry . clear ( ) ; if ( fDataTypeReg != null ) { fDataTypeReg . resetRegistry ( ) ; } } } 	0	['11', '1', '0', '6', '24', '0', '2', '4', '11', '0.5', '112', '1', '1', '0', '0.515151515', '0', '0', '9', '2', '1.2727', '0']
package org . apache . wml . dom ; import org . apache . wml . * ; public class WMLSelectElementImpl extends WMLElementImpl implements WMLSelectElement { public WMLSelectElementImpl ( WMLDocumentImpl owner , String tagName ) { super ( owner , tagName ) ; } public void setMultiple ( boolean newValue ) { setAttribute ( "multiple" , newValue ) ; } public boolean getMultiple ( ) { return getAttribute ( "multiple" , false ) ; } public void setValue ( String newValue ) { setAttribute ( "value" , newValue ) ; } public String getValue ( ) { return getAttribute ( "value" ) ; } public void setTabIndex ( int newValue ) { setAttribute ( "tabindex" , newValue ) ; } public int getTabIndex ( ) { return getAttribute ( "tabindex" , 0 ) ; } public void setClassName ( String newValue ) { setAttribute ( "class" , newValue ) ; } public String getClassName ( ) { return getAttribute ( "class" ) ; } public void setXmlLang ( String newValue ) { setAttribute ( "xml:lang" , newValue ) ; } public String getXmlLang ( ) { return getAttribute ( "xml:lang" ) ; } public void setTitle ( String newValue ) { setAttribute ( "title" , newValue ) ; } public String getTitle ( ) { return getAttribute ( "title" ) ; } public void setIValue ( String newValue ) { setAttribute ( "ivalue" , newValue ) ; } public String getIValue ( ) { return getAttribute ( "ivalue" ) ; } public void setId ( String newValue ) { setAttribute ( "id" , newValue ) ; } public String getId ( ) { return getAttribute ( "id" ) ; } public void setIName ( String newValue ) { setAttribute ( "iname" , newValue ) ; } public String getIName ( ) { return getAttribute ( "iname" ) ; } public void setName ( String newValue ) { setAttribute ( "name" , newValue ) ; } public String getName ( ) { return getAttribute ( "name" ) ; } } 	0	['21', '4', '0', '3', '28', '210', '0', '3', '21', '2', '118', '0', '0', '0.803921569', '0.314285714', '1', '7', '4.619047619', '1', '0.9524', '0']
package org . xml . sax ; public class HandlerBase implements EntityResolver , DTDHandler , DocumentHandler , ErrorHandler { public InputSource resolveEntity ( String publicId , String systemId ) throws SAXException { return null ; } public void notationDecl ( String name , String publicId , String systemId ) { } public void unparsedEntityDecl ( String name , String publicId , String systemId , String notationName ) { } public void setDocumentLocator ( Locator locator ) { } public void startDocument ( ) throws SAXException { } public void endDocument ( ) throws SAXException { } public void startElement ( String name , AttributeList attributes ) throws SAXException { } public void endElement ( String name ) throws SAXException { } public void characters ( char ch [ ] , int start , int length ) throws SAXException { } public void ignorableWhitespace ( char ch [ ] , int start , int length ) throws SAXException { } public void processingInstruction ( String target , String data ) throws SAXException { } public void warning ( SAXParseException e ) throws SAXException { } public void error ( SAXParseException e ) throws SAXException { } public void fatalError ( SAXParseException e ) throws SAXException { throw e ; } } 	0	['15', '1', '0', '0', '16', '105', '0', '0', '15', '2', '34', '0', '0', '0', '0.285714286', '0', '0', '1.266666667', '1', '0.9333', '0']
package org . apache . html . dom ; import org . w3c . dom . * ; import org . w3c . dom . html . * ; public class HTMLLegendElementImpl extends HTMLElementImpl implements HTMLLegendElement { public String getAccessKey ( ) { String accessKey ; accessKey = getAttribute ( "accesskey" ) ; if ( accessKey != null && accessKey . length ( ) > 1 ) accessKey = accessKey . substring ( 0 , 1 ) ; return accessKey ; } public void setAccessKey ( String accessKey ) { if ( accessKey != null && accessKey . length ( ) > 1 ) accessKey = accessKey . substring ( 0 , 1 ) ; setAttribute ( "accesskey" , accessKey ) ; } public String getAlign ( ) { return getAttribute ( "align" ) ; } public void setAlign ( String align ) { setAttribute ( "align" , align ) ; } public HTMLLegendElementImpl ( HTMLDocumentImpl owner , String name ) { super ( owner , name ) ; } } 	0	['5', '4', '0', '2', '10', '10', '0', '2', '5', '2', '52', '0', '0', '0.959183673', '0.6', '0', '0', '9.4', '3', '1.6', '0']
package org . apache . xerces . validators . schema . identity ; import org . xml . sax . SAXException ; public interface FieldActivator { public void startValueScopeFor ( IdentityConstraint identityConstraint ) throws Exception ; public XPathMatcher activateField ( Field field ) throws Exception ; public void endValueScopeFor ( IdentityConstraint identityConstraint ) throws Exception ; } 	0	['3', '1', '0', '6', '3', '3', '3', '3', '3', '2', '3', '0', '0', '0', '0.666666667', '0', '0', '0', '1', '1', '0']
package org . apache . xerces . validators . common ; import java . util . * ; import org . apache . xerces . validators . common . Grammar ; import org . apache . xerces . validators . datatype . DatatypeValidatorFactory ; public interface GrammarResolver { public Grammar getGrammar ( String nameSpaceKey ) ; public DatatypeValidatorFactory getDatatypeRegistry ( ) ; public Enumeration nameSpaceKeys ( ) ; public void putGrammar ( String nameSpaceKey , Grammar grammar ) ; public Grammar removeGrammar ( String nameSpaceKey ) ; public boolean contains ( Grammar grammar ) ; public boolean containsNameSpace ( String nameSpaceKey ) ; public void clearGrammarResolver ( ) ; public int size ( ) ; } 	0	['9', '1', '0', '10', '9', '36', '8', '2', '9', '2', '9', '0', '0', '0', '0.555555556', '0', '0', '0', '1', '1', '0']
package org . w3c . dom . html ; public interface HTMLAppletElement extends HTMLElement { public String getAlign ( ) ; public void setAlign ( String align ) ; public String getAlt ( ) ; public void setAlt ( String alt ) ; public String getArchive ( ) ; public void setArchive ( String archive ) ; public String getCode ( ) ; public void setCode ( String code ) ; public String getCodeBase ( ) ; public void setCodeBase ( String codeBase ) ; public String getHeight ( ) ; public void setHeight ( String height ) ; public String getHspace ( ) ; public void setHspace ( String hspace ) ; public String getName ( ) ; public void setName ( String name ) ; public String getObject ( ) ; public void setObject ( String object ) ; public String getVspace ( ) ; public void setVspace ( String vspace ) ; public String getWidth ( ) ; public void setWidth ( String width ) ; } 	0	['22', '1', '0', '0', '22', '231', '0', '0', '22', '2', '22', '0', '0', '0', '0.75', '0', '0', '0', '1', '1', '0']
package org . w3c . dom . html ; public interface HTMLMenuElement extends HTMLElement { public boolean getCompact ( ) ; public void setCompact ( boolean compact ) ; } 	0	['2', '1', '0', '0', '2', '1', '0', '0', '2', '2', '2', '0', '0', '0', '0.75', '0', '0', '0', '1', '1', '0']
package org . apache . html . dom ; import org . w3c . dom . * ; import org . w3c . dom . html . * ; public class HTMLMapElementImpl extends HTMLElementImpl implements HTMLMapElement { public HTMLCollection getAreas ( ) { if ( _areas == null ) _areas = new HTMLCollectionImpl ( this , HTMLCollectionImpl . AREA ) ; return _areas ; } public String getName ( ) { return getAttribute ( "name" ) ; } public void setName ( String name ) { setAttribute ( "name" , name ) ; } public HTMLMapElementImpl ( HTMLDocumentImpl owner , String name ) { super ( owner , name ) ; } private HTMLCollection _areas ; } 	0	['4', '4', '0', '3', '8', '6', '0', '3', '4', '1', '32', '1', '1', '0.969072165', '0.583333333', '0', '0', '6.75', '2', '1', '0']
package org . apache . html . dom ; import org . w3c . dom . * ; import org . w3c . dom . html . * ; public class HTMLTableColElementImpl extends HTMLElementImpl implements HTMLTableColElement { public String getAlign ( ) { return capitalize ( getAttribute ( "align" ) ) ; } public void setAlign ( String align ) { setAttribute ( "align" , align ) ; } public String getCh ( ) { String ch ; ch = getAttribute ( "char" ) ; if ( ch != null && ch . length ( ) > 1 ) ch = ch . substring ( 0 , 1 ) ; return ch ; } public void setCh ( String ch ) { if ( ch != null && ch . length ( ) > 1 ) ch = ch . substring ( 0 , 1 ) ; setAttribute ( "char" , ch ) ; } public String getChOff ( ) { return getAttribute ( "charoff" ) ; } public void setChOff ( String chOff ) { setAttribute ( "charoff" , chOff ) ; } public int getSpan ( ) { return getInteger ( getAttribute ( "span" ) ) ; } public void setSpan ( int span ) { setAttribute ( "span" , String . valueOf ( span ) ) ; } public String getVAlign ( ) { return capitalize ( getAttribute ( "valign" ) ) ; } public void setVAlign ( String vAlign ) { setAttribute ( "valign" , vAlign ) ; } public String getWidth ( ) { return getAttribute ( "width" ) ; } public void setWidth ( String width ) { setAttribute ( "width" , width ) ; } public HTMLTableColElementImpl ( HTMLDocumentImpl owner , String name ) { super ( owner , name ) ; } } 	0	['13', '4', '0', '2', '21', '78', '0', '2', '13', '2', '103', '0', '0', '0.886792453', '0.403846154', '0', '0', '6.923076923', '3', '1.2308', '0']
package org . xml . sax ; public interface Locator { public abstract String getPublicId ( ) ; public abstract String getSystemId ( ) ; public abstract int getLineNumber ( ) ; public abstract int getColumnNumber ( ) ; } 	0	['4', '1', '0', '0', '4', '6', '0', '0', '4', '2', '4', '0', '0', '0', '1', '0', '0', '0', '1', '1', '0']
package org . apache . xerces . validators . datatype ; import java . util . Hashtable ; import java . util . Locale ; public class NOTATIONDatatypeValidator extends AbstractDatatypeValidator { private DatatypeValidator fBaseValidator = null ; public NOTATIONDatatypeValidator ( ) throws InvalidDatatypeFacetException { this ( null , null , false ) ; } public NOTATIONDatatypeValidator ( DatatypeValidator base , Hashtable facets , boolean derivedByList ) throws InvalidDatatypeFacetException { setBasetype ( base ) ; } public Object validate ( String content , Object state ) throws InvalidDatatypeValueException { return null ; } public Hashtable getFacets ( ) { return null ; } public void setLocale ( Locale locale ) { } public int compare ( String content1 , String content2 ) { return - 1 ; } public Object clone ( ) throws CloneNotSupportedException { throw new CloneNotSupportedException ( "clone() is not supported in " + this . getClass ( ) . getName ( ) ) ; } private void setBasetype ( DatatypeValidator base ) { fBaseValidator = base ; } } 	0	['8', '2', '0', '5', '15', '26', '1', '4', '7', '0.714285714', '49', '1', '1', '0.4', '0.285714286', '0', '0', '5', '1', '0.75', '0']
package org . w3c . dom ; public interface ProcessingInstruction extends Node { public String getTarget ( ) ; public String getData ( ) ; public void setData ( String data ) throws DOMException ; } 	0	['3', '1', '0', '0', '3', '3', '0', '0', '3', '2', '3', '0', '0', '0', '0.666666667', '0', '0', '0', '1', '1', '0']
package org . w3c . dom ; public interface Comment extends CharacterData { } 	0	['0', '1', '0', '0', '0', '0', '0', '0', '0', '2', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0']
package org . apache . xerces . validators . datatype ; public class InvalidDatatypeFacetException extends XMLException { private int majorCode = - 1 ; private int minorCode = - 1 ; public int getMinorCode ( ) { return minorCode ; } public int getMajorCode ( ) { return majorCode ; } public void setMinorCode ( int code ) { majorCode = code ; } public void setMajorCode ( int code ) { minorCode = code ; } public InvalidDatatypeFacetException ( ) { super ( ) ; } public InvalidDatatypeFacetException ( String message ) { super ( message ) ; } public InvalidDatatypeFacetException ( Exception exception ) { super ( exception ) ; } public InvalidDatatypeFacetException ( String message , Exception exception ) { super ( message , exception ) ; } } 	0	['8', '4', '0', '19', '12', '0', '18', '1', '8', '0.285714286', '64', '1', '0', '0.818181818', '0.4375', '0', '0', '6.75', '1', '0.5', '0']
package org . apache . html . dom ; import org . w3c . dom . * ; import org . w3c . dom . html . * ; public class HTMLMenuElementImpl extends HTMLElementImpl implements HTMLMenuElement { public boolean getCompact ( ) { return getBinary ( "compact" ) ; } public void setCompact ( boolean compact ) { setAttribute ( "compact" , compact ) ; } public HTMLMenuElementImpl ( HTMLDocumentImpl owner , String name ) { super ( owner , name ) ; } } 	0	['3', '4', '0', '2', '6', '3', '0', '2', '3', '2', '17', '0', '0', '0.979166667', '0.5', '0', '0', '4.666666667', '1', '0.6667', '0']
package org . w3c . dom . html ; public interface HTMLAreaElement extends HTMLElement { public String getAccessKey ( ) ; public void setAccessKey ( String accessKey ) ; public String getAlt ( ) ; public void setAlt ( String alt ) ; public String getCoords ( ) ; public void setCoords ( String coords ) ; public String getHref ( ) ; public void setHref ( String href ) ; public boolean getNoHref ( ) ; public void setNoHref ( boolean noHref ) ; public String getShape ( ) ; public void setShape ( String shape ) ; public int getTabIndex ( ) ; public void setTabIndex ( int tabIndex ) ; public String getTarget ( ) ; public void setTarget ( String target ) ; } 	0	['16', '1', '0', '0', '16', '120', '0', '0', '16', '2', '16', '0', '0', '0', '0.375', '0', '0', '0', '1', '1', '0']
package org . apache . xerces . validators . datatype ; public interface StateMessageDatatype { public Object getDatatypeObject ( ) ; public void setDatatypeObject ( Object data ) ; public int getDatatypeState ( ) ; } 	0	['3', '1', '0', '9', '3', '3', '9', '0', '3', '2', '3', '0', '0', '0', '0.666666667', '0', '0', '0', '1', '1', '0']
package org . apache . wml ; public interface WMLAElement extends WMLElement { public void setHref ( String newValue ) ; public String getHref ( ) ; public void setTitle ( String newValue ) ; public String getTitle ( ) ; public void setId ( String newValue ) ; public String getId ( ) ; public void setXmlLang ( String newValue ) ; public String getXmlLang ( ) ; } 	0	['8', '1', '0', '2', '8', '28', '1', '1', '8', '2', '8', '0', '0', '0', '0.75', '0', '0', '0', '1', '1', '0']
package org . apache . html . dom ; import org . w3c . dom . * ; import org . w3c . dom . html . * ; public class HTMLFormElementImpl extends HTMLElementImpl implements HTMLFormElement { public HTMLCollection getElements ( ) { if ( _elements == null ) _elements = new HTMLCollectionImpl ( this , HTMLCollectionImpl . ELEMENT ) ; return _elements ; } public int getLength ( ) { return getElements ( ) . getLength ( ) ; } public String getName ( ) { return getAttribute ( "name" ) ; } public void setName ( String name ) { setAttribute ( "name" , name ) ; } public String getAcceptCharset ( ) { return getAttribute ( "accept-charset" ) ; } public void setAcceptCharset ( String acceptCharset ) { setAttribute ( "accept-charset" , acceptCharset ) ; } public String getAction ( ) { return getAttribute ( "action" ) ; } public void setAction ( String action ) { setAttribute ( "action" , action ) ; } public String getEnctype ( ) { return getAttribute ( "enctype" ) ; } public void setEnctype ( String enctype ) { setAttribute ( "enctype" , enctype ) ; } public String getMethod ( ) { return capitalize ( getAttribute ( "method" ) ) ; } public void setMethod ( String method ) { setAttribute ( "method" , method ) ; } public String getTarget ( ) { return getAttribute ( "target" ) ; } public void setTarget ( String target ) { setAttribute ( "target" , target ) ; } public void submit ( ) { } public void reset ( ) { } public NodeList getChildNodes ( ) { return getChildNodesUnoptimized ( ) ; } public HTMLFormElementImpl ( HTMLDocumentImpl owner , String name ) { super ( owner , name ) ; } private HTMLCollectionImpl _elements ; } 	0	['18', '4', '0', '3', '25', '153', '0', '3', '18', '0.941176471', '102', '1', '1', '0.846846847', '0.481481481', '0', '0', '4.611111111', '2', '1', '0']
package org . apache . wml . dom ; import org . apache . xerces . dom . ElementImpl ; import org . apache . wml . * ; public class WMLElementImpl extends ElementImpl implements WMLElement { public WMLElementImpl ( WMLDocumentImpl owner , String tagName ) { super ( owner , tagName ) ; } public void setClassName ( String newValue ) { setAttribute ( "class" , newValue ) ; } public String getClassName ( ) { return getAttribute ( "class" ) ; } public void setXmlLang ( String newValue ) { setAttribute ( "xml:lang" , newValue ) ; } public String getXmlLang ( ) { return getAttribute ( "xml:lang" ) ; } public void setId ( String newValue ) { setAttribute ( "id" , newValue ) ; } public String getId ( ) { return getAttribute ( "id" ) ; } void setAttribute ( String attr , boolean value ) { setAttribute ( attr , value ? "true" : "false" ) ; } boolean getAttribute ( String attr , boolean defaultValue ) { boolean ret = defaultValue ; String value ; if ( ( ( value = getAttribute ( "emptyok" ) ) != null ) && value . equals ( "true" ) ) ret = true ; return ret ; } void setAttribute ( String attr , int value ) { setAttribute ( attr , value + "" ) ; } int getAttribute ( String attr , int defaultValue ) { int ret = defaultValue ; String value ; if ( ( value = getAttribute ( "emptyok" ) ) != null ) ret = Integer . parseInt ( value ) ; return ret ; } } 	0	['11', '3', '35', '39', '20', '55', '36', '4', '7', '2', '93', '0', '0', '0.87804878', '0.436363636', '2', '3', '7.454545455', '3', '1.2727', '0']
package org . apache . wml ; public interface WMLTdElement extends WMLElement { public void setXmlLang ( String newValue ) ; public String getXmlLang ( ) ; } 	0	['2', '1', '0', '2', '2', '1', '1', '1', '2', '2', '2', '0', '0', '0', '0.75', '0', '0', '0', '1', '1', '0']
package org . apache . xerces . validators . datatype ; import java . util . Enumeration ; import java . util . Hashtable ; import java . util . Locale ; import java . util . Vector ; import org . apache . xerces . validators . schema . SchemaSymbols ; import org . apache . xerces . utils . regex . RegularExpression ; import java . util . StringTokenizer ; import java . util . NoSuchElementException ; public class FloatDatatypeValidator extends AbstractDatatypeValidator { private Locale fLocale = null ; private DatatypeValidator fBaseValidator = null ; private float [ ] fEnumFloats = null ; private String fPattern = null ; private float fMaxInclusive = Float . POSITIVE_INFINITY ; private float fMaxExclusive = Float . POSITIVE_INFINITY ; private float fMinInclusive = Float . NEGATIVE_INFINITY ; private float fMinExclusive = Float . NEGATIVE_INFINITY ; private int fFacetsDefined = 0 ; private boolean isMaxExclusiveDefined = false ; private boolean isMaxInclusiveDefined = false ; private boolean isMinExclusiveDefined = false ; private boolean isMinInclusiveDefined = false ; private DatatypeMessageProvider fMessageProvider = new DatatypeMessageProvider ( ) ; private RegularExpression fRegex = null ; public FloatDatatypeValidator ( ) throws InvalidDatatypeFacetException { this ( null , null , false ) ; } public FloatDatatypeValidator ( DatatypeValidator base , Hashtable facets , boolean derivedByList ) throws InvalidDatatypeFacetException { if ( base != null ) setBasetype ( base ) ; if ( facets != null ) { for ( Enumeration e = facets . keys ( ) ; e . hasMoreElements ( ) ; ) { String key = ( String ) e . nextElement ( ) ; if ( key . equals ( SchemaSymbols . ELT_PATTERN ) ) { fFacetsDefined += DatatypeValidator . FACET_PATTERN ; fPattern = ( String ) facets . get ( key ) ; if ( fPattern != null ) fRegex = new RegularExpression ( fPattern , "X" ) ; } else if ( key . equals ( SchemaSymbols . ELT_ENUMERATION ) ) { fFacetsDefined += DatatypeValidator . FACET_ENUMERATION ; continue ; } else if ( key . equals ( SchemaSymbols . ELT_MAXINCLUSIVE ) ) { fFacetsDefined += DatatypeValidator . FACET_MAXINCLUSIVE ; String value = null ; try { value = ( ( String ) facets . get ( key ) ) ; fMaxInclusive = Float . valueOf ( value ) . floatValue ( ) ; } catch ( NumberFormatException ex ) { throw new InvalidDatatypeFacetException ( getErrorString ( DatatypeMessageProvider . IllegalFacetValue , DatatypeMessageProvider . MSG_NONE , new Object [ ] { value , key } ) ) ; } } else if ( key . equals ( SchemaSymbols . ELT_MAXEXCLUSIVE ) ) { fFacetsDefined += DatatypeValidator . FACET_MAXEXCLUSIVE ; String value = null ; try { value = ( ( String ) facets . get ( key ) ) ; fMaxExclusive = Float . valueOf ( value ) . floatValue ( ) ; } catch ( NumberFormatException ex ) { throw new InvalidDatatypeFacetException ( getErrorString ( DatatypeMessageProvider . IllegalFacetValue , DatatypeMessageProvider . MSG_NONE , new Object [ ] { value , key } ) ) ; } } else if ( key . equals ( SchemaSymbols . ELT_MININCLUSIVE ) ) { fFacetsDefined += DatatypeValidator . FACET_MININCLUSIVE ; String value = null ; try { value = ( ( String ) facets . get ( key ) ) ; fMinInclusive = Float . valueOf ( value ) . floatValue ( ) ; } catch ( NumberFormatException ex ) { throw new InvalidDatatypeFacetException ( getErrorString ( DatatypeMessageProvider . IllegalFacetValue , DatatypeMessageProvider . MSG_NONE , new Object [ ] { value , key } ) ) ; } } else if ( key . equals ( SchemaSymbols . ELT_MINEXCLUSIVE ) ) { fFacetsDefined += DatatypeValidator . FACET_MININCLUSIVE ; String value = null ; try { value = ( ( String ) facets . get ( key ) ) ; fMinExclusive = Float . valueOf ( value ) . floatValue ( ) ; } catch ( NumberFormatException ex ) { throw new InvalidDatatypeFacetException ( getErrorString ( DatatypeMessageProvider . IllegalFacetValue , DatatypeMessageProvider . MSG_NONE , new Object [ ] { value , key } ) ) ; } } else { throw new InvalidDatatypeFacetException ( getErrorString ( DatatypeMessageProvider . MSG_FORMAT_FAILURE , DatatypeMessageProvider . MSG_NONE , null ) ) ; } } isMaxExclusiveDefined = ( ( fFacetsDefined & DatatypeValidator . FACET_MAXEXCLUSIVE ) != 0 ) ? true : false ; isMaxInclusiveDefined = ( ( fFacetsDefined & DatatypeValidator . FACET_MAXINCLUSIVE ) != 0 ) ? true : false ; isMinExclusiveDefined = ( ( fFacetsDefined & DatatypeValidator . FACET_MINEXCLUSIVE ) != 0 ) ? true : false ; isMinInclusiveDefined = ( ( fFacetsDefined & DatatypeValidator . FACET_MININCLUSIVE ) != 0 ) ? true : false ; if ( isMaxExclusiveDefined && isMaxInclusiveDefined ) { throw new InvalidDatatypeFacetException ( "It is an error for both maxInclusive and maxExclusive to be specified for the same datatype." ) ; } if ( isMinExclusiveDefined && isMinInclusiveDefined ) { throw new InvalidDatatypeFacetException ( "It is an error for both minInclusive and minExclusive to be specified for the same datatype." ) ; } if ( ( fFacetsDefined & DatatypeValidator . FACET_ENUMERATION ) != 0 ) { Vector v = ( Vector ) facets . get ( SchemaSymbols . ELT_ENUMERATION ) ; if ( v != null ) { fEnumFloats = new float [ v . size ( ) ] ; for ( int i = 0 ; i < v . size ( ) ; i ++ ) try { fEnumFloats [ i ] = Float . valueOf ( ( String ) v . elementAt ( i ) ) . floatValue ( ) ; boundsCheck ( fEnumFloats [ i ] ) ; } catch ( InvalidDatatypeValueException idve ) { throw new InvalidDatatypeFacetException ( getErrorString ( DatatypeMessageProvider . InvalidEnumValue , DatatypeMessageProvider . MSG_NONE , new Object [ ] { v . elementAt ( i ) } ) ) ; } catch ( NumberFormatException nfe ) { if ( v . elementAt ( i ) . equals ( "INF" ) ) { fEnumFloats [ i ] = Float . POSITIVE_INFINITY ; } else if ( v . elementAt ( i ) . equals ( "-INF" ) ) { fEnumFloats [ i ] = Float . NEGATIVE_INFINITY ; } else if ( v . elementAt ( i ) . equals ( "NaN" ) ) { fEnumFloats [ i ] = Float . NaN ; } else { throw new InvalidDatatypeFacetException ( getErrorString ( DatatypeMessageProvider . IllegalFacetValue , DatatypeMessageProvider . MSG_NONE , new Object [ ] { v . elementAt ( i ) , "enumeration" } ) ) ; } } } } } } public Object validate ( String content , Object state ) throws InvalidDatatypeValueException { checkContentEnum ( content , state , null ) ; return null ; } protected void checkContentEnum ( String content , Object state , Vector enumeration ) throws InvalidDatatypeValueException { if ( this . fBaseValidator != null ) { ( ( FloatDatatypeValidator ) this . fBaseValidator ) . checkContentEnum ( content , state , enumeration ) ; } if ( ( fFacetsDefined & DatatypeValidator . FACET_PATTERN ) != 0 ) { if ( fRegex == null || fRegex . matches ( content ) == false ) throw new InvalidDatatypeValueException ( "Value'" + content + "does not match regular expression facet" + fPattern ) ; } float f = 0 ; try { f = Float . valueOf ( content ) . floatValue ( ) ; } catch ( NumberFormatException nfe ) { if ( content . equals ( "INF" ) ) { f = Float . POSITIVE_INFINITY ; } else if ( content . equals ( "-INF" ) ) { f = Float . NEGATIVE_INFINITY ; } else if ( content . equals ( "NaN" ) ) { f = Float . NaN ; } else { throw new InvalidDatatypeValueException ( getErrorString ( DatatypeMessageProvider . NotFloat , DatatypeMessageProvider . MSG_NONE , new Object [ ] { content } ) ) ; } } if ( enumeration != null ) { int size = enumeration . size ( ) ; float [ ] enumFloats = new float [ size ] ; int i = 0 ; try { for ( ; i < size ; i ++ ) enumFloats [ i ] = Float . valueOf ( ( String ) enumeration . elementAt ( i ) ) . floatValue ( ) ; } catch ( NumberFormatException nfe ) { if ( enumeration . elementAt ( i ) . equals ( "INF" ) ) { enumFloats [ i ] = Float . POSITIVE_INFINITY ; } else if ( enumeration . elementAt ( i ) . equals ( "-INF" ) ) { enumFloats [ i ] = Float . NEGATIVE_INFINITY ; } else if ( enumeration . elementAt ( i ) . equals ( "NaN" ) ) { enumFloats [ i ] = Float . NaN ; } else { throw new InvalidDatatypeValueException ( getErrorString ( DatatypeMessageProvider . InvalidEnumValue , DatatypeMessageProvider . MSG_NONE , new Object [ ] { enumeration . elementAt ( i ) } ) ) ; } } enumCheck ( f , enumFloats ) ; } boundsCheck ( f ) ; if ( ( ( fFacetsDefined & DatatypeValidator . FACET_ENUMERATION ) != 0 ) ) enumCheck ( f , fEnumFloats ) ; } private void boundsCheck ( float d ) throws InvalidDatatypeValueException { boolean minOk = false ; boolean maxOk = false ; String upperBound = ( fMaxExclusive != Float . MAX_VALUE ) ? ( Float . toString ( fMaxExclusive ) ) : ( ( fMaxInclusive != Float . MAX_VALUE ) ? Float . toString ( fMaxInclusive ) : "" ) ; String lowerBound = ( fMinExclusive != Float . MIN_VALUE ) ? ( Float . toString ( fMinExclusive ) ) : ( ( fMinInclusive != Float . MIN_VALUE ) ? Float . toString ( fMinInclusive ) : "" ) ; String lowerBoundIndicator = "" ; String upperBoundIndicator = "" ; if ( isMaxInclusiveDefined ) { maxOk = ( d <= fMaxInclusive ) ; upperBound = Float . toString ( fMaxInclusive ) ; if ( upperBound != null ) { upperBoundIndicator = "<=" ; } else { upperBound = "" ; } } else if ( isMaxExclusiveDefined ) { maxOk = ( d < fMaxExclusive ) ; upperBound = Float . toString ( fMaxExclusive ) ; if ( upperBound != null ) { upperBoundIndicator = "<" ; } else { upperBound = "" ; } } else { maxOk = ( ! isMaxInclusiveDefined && ! isMaxExclusiveDefined ) ; } if ( isMinInclusiveDefined ) { minOk = ( d >= fMinInclusive ) ; lowerBound = Float . toString ( fMinInclusive ) ; if ( lowerBound != null ) { lowerBoundIndicator = "<=" ; } else { lowerBound = "" ; } } else if ( isMinExclusiveDefined ) { minOk = ( d > fMinExclusive ) ; lowerBound = Float . toString ( fMinExclusive ) ; if ( lowerBound != null ) { lowerBoundIndicator = "<" ; } else { lowerBound = "" ; } } else { minOk = ( ! isMinInclusiveDefined && ! isMinExclusiveDefined ) ; } if ( ! ( minOk && maxOk ) ) throw new InvalidDatatypeValueException ( getErrorString ( DatatypeMessageProvider . OutOfBounds , DatatypeMessageProvider . MSG_NONE , new Object [ ] { Float . toString ( d ) , lowerBound , upperBound , lowerBoundIndicator , upperBoundIndicator } ) ) ; } public void setLocale ( Locale locale ) { fLocale = locale ; } public int compare ( String content1 , String content2 ) { return 0 ; } public Hashtable getFacets ( ) { return null ; } public Object clone ( ) throws CloneNotSupportedException { throw new CloneNotSupportedException ( "clone() is not supported in " + this . getClass ( ) . getName ( ) ) ; } private void enumCheck ( float v , float [ ] enumFloats ) throws InvalidDatatypeValueException { for ( int i = 0 ; i < enumFloats . length ; i ++ ) { if ( v == enumFloats [ i ] ) return ; } throw new InvalidDatatypeValueException ( getErrorString ( DatatypeMessageProvider . NotAnEnumValue , DatatypeMessageProvider . MSG_NONE , new Object [ ] { new Float ( v ) } ) ) ; } private String getErrorString ( int major , int minor , Object args [ ] ) { try { return fMessageProvider . createMessage ( fLocale , major , minor , args ) ; } catch ( Exception e ) { return "Illegal Errorcode " + minor ; } } private void setBasetype ( DatatypeValidator base ) { fBaseValidator = base ; } } 	0	['12', '2', '0', '9', '38', '52', '3', '6', '7', '0.690909091', '959', '1', '3', '0.285714286', '0.194444444', '0', '0', '77.66666667', '1', '0.8333', '0']
package org . apache . html . dom ; import org . w3c . dom . * ; import org . w3c . dom . html . * ; public class HTMLFrameSetElementImpl extends HTMLElementImpl implements HTMLFrameSetElement { public String getCols ( ) { return getAttribute ( "cols" ) ; } public void setCols ( String cols ) { setAttribute ( "cols" , cols ) ; } public String getRows ( ) { return getAttribute ( "rows" ) ; } public void setRows ( String rows ) { setAttribute ( "rows" , rows ) ; } public HTMLFrameSetElementImpl ( HTMLDocumentImpl owner , String name ) { super ( owner , name ) ; } } 	0	['5', '4', '0', '2', '8', '10', '0', '2', '5', '2', '28', '0', '0', '0.959183673', '0.6', '0', '0', '4.6', '1', '0.8', '0']
package org . apache . wml ; public interface WMLBrElement extends WMLElement { public void setXmlLang ( String newValue ) ; public String getXmlLang ( ) ; } 	0	['2', '1', '0', '2', '2', '1', '1', '1', '2', '2', '2', '0', '0', '0', '0.75', '0', '0', '0', '1', '1', '0']
package org . apache . wml . dom ; import org . apache . wml . * ; public class WMLCardElementImpl extends WMLElementImpl implements WMLCardElement { public WMLCardElementImpl ( WMLDocumentImpl owner , String tagName ) { super ( owner , tagName ) ; } public void setOnTimer ( String newValue ) { setAttribute ( "ontimer" , newValue ) ; } public String getOnTimer ( ) { return getAttribute ( "ontimer" ) ; } public void setOrdered ( boolean newValue ) { setAttribute ( "ordered" , newValue ) ; } public boolean getOrdered ( ) { return getAttribute ( "ordered" , true ) ; } public void setOnEnterBackward ( String newValue ) { setAttribute ( "onenterbackward" , newValue ) ; } public String getOnEnterBackward ( ) { return getAttribute ( "onenterbackward" ) ; } public void setClassName ( String newValue ) { setAttribute ( "class" , newValue ) ; } public String getClassName ( ) { return getAttribute ( "class" ) ; } public void setXmlLang ( String newValue ) { setAttribute ( "xml:lang" , newValue ) ; } public String getXmlLang ( ) { return getAttribute ( "xml:lang" ) ; } public void setTitle ( String newValue ) { setAttribute ( "title" , newValue ) ; } public String getTitle ( ) { return getAttribute ( "title" ) ; } public void setNewContext ( boolean newValue ) { setAttribute ( "newcontext" , newValue ) ; } public boolean getNewContext ( ) { return getAttribute ( "newcontext" , false ) ; } public void setId ( String newValue ) { setAttribute ( "id" , newValue ) ; } public String getId ( ) { return getAttribute ( "id" ) ; } public void setOnEnterForward ( String newValue ) { setAttribute ( "onenterforward" , newValue ) ; } public String getOnEnterForward ( ) { return getAttribute ( "onenterforward" ) ; } } 	0	['19', '4', '0', '3', '24', '171', '0', '3', '19', '2', '107', '0', '0', '0.82', '0.394736842', '1', '6', '4.631578947', '1', '0.9474', '0']
package org . w3c . dom ; public interface Text extends CharacterData { public Text splitText ( int offset ) throws DOMException ; } 	0	['1', '1', '0', '0', '1', '0', '0', '0', '1', '2', '1', '0', '0', '0', '1', '0', '0', '0', '1', '1', '0']
package org . apache . html . dom ; import org . w3c . dom . * ; import java . util . Vector ; import org . apache . xerces . dom . NodeImpl ; import org . apache . xerces . dom . ElementImpl ; import org . apache . xerces . dom . DeepNodeListImpl ; public class NameNodeListImpl extends DeepNodeListImpl implements NodeList { public NameNodeListImpl ( NodeImpl rootNode , String tagName ) { super ( rootNode , tagName ) ; } protected Node nextMatchingElementAfter ( Node current ) { Node next ; while ( current != null ) { if ( current . hasChildNodes ( ) ) { current = ( current . getFirstChild ( ) ) ; } else if ( current != rootNode && null != ( next = current . getNextSibling ( ) ) ) { current = next ; } else { next = null ; for ( ; current != rootNode ; current = current . getParentNode ( ) ) { next = current . getNextSibling ( ) ; if ( next != null ) break ; } current = next ; } if ( current != rootNode && current != null && current . getNodeType ( ) == Node . ELEMENT_NODE ) { String name = ( ( ElementImpl ) current ) . getAttribute ( "name" ) ; if ( name . equals ( "*" ) || name . equals ( tagName ) ) return current ; } } return null ; } } 	0	['2', '2', '0', '4', '10', '1', '1', '3', '1', '2', '76', '0', '0', '0.75', '0.625', '2', '2', '37', '11', '5.5', '0']
package org . xml . sax ; public class SAXParseException extends SAXException { public SAXParseException ( String message , Locator locator ) { super ( message ) ; if ( locator != null ) { init ( locator . getPublicId ( ) , locator . getSystemId ( ) , locator . getLineNumber ( ) , locator . getColumnNumber ( ) ) ; } else { init ( null , null , - 1 , - 1 ) ; } } public SAXParseException ( String message , Locator locator , Exception e ) { super ( message , e ) ; if ( locator != null ) { init ( locator . getPublicId ( ) , locator . getSystemId ( ) , locator . getLineNumber ( ) , locator . getColumnNumber ( ) ) ; } else { init ( null , null , - 1 , - 1 ) ; } } public SAXParseException ( String message , String publicId , String systemId , int lineNumber , int columnNumber ) { super ( message ) ; init ( publicId , systemId , lineNumber , columnNumber ) ; } public SAXParseException ( String message , String publicId , String systemId , int lineNumber , int columnNumber , Exception e ) { super ( message , e ) ; init ( publicId , systemId , lineNumber , columnNumber ) ; } private void init ( String publicId , String systemId , int lineNumber , int columnNumber ) { this . publicId = publicId ; this . systemId = systemId ; this . lineNumber = lineNumber ; this . columnNumber = columnNumber ; } public String getPublicId ( ) { return this . publicId ; } public String getSystemId ( ) { return this . systemId ; } public int getLineNumber ( ) { return this . lineNumber ; } public int getColumnNumber ( ) { return this . columnNumber ; } private String publicId ; private String systemId ; private int lineNumber ; private int columnNumber ; } 	0	['9', '4', '0', '0', '15', '28', '0', '0', '8', '0.375', '106', '1', '0', '0.8', '0.466666667', '0', '0', '10.33333333', '1', '0.5556', '0']
package org . apache . xerces . msg ; public class ImplementationMessages extends java . util . ListResourceBundle { public static final Object CONTENTS [ ] [ ] = { { "BadMajorCode" , "The majorCode parameter to createMessage was out of bounds." } , { "FormatFailed" , "An internal error occurred while formatting the following message:\n  " } , { "ENC4" , "Invalid UTF-8 code. (byte: 0x{0})" } , { "ENC5" , "Invalid UTF-8 code. (bytes: 0x{0} 0x{1})" } , { "ENC6" , "Invalid UTF-8 code. (bytes: 0x{0} 0x{1} 0x{2})" } , { "ENC7" , "Invalid UTF-8 code. (bytes: 0x{0} 0x{1} 0x{2} 0x{3})" } , { "FileNotFound" , "File \"{0}\" not found." } , { "VAL_BST" , "Invalid ContentSpecNode.NODE_XXX value for binary op CMNode" } , { "VAL_CMSI" , "Invalid CMStateSet bit index" } , { "VAL_CST" , "Unknown ContentSpecNode.NODE_XXX value" } , { "VAL_LST" , "Invalid ContentSpecNode.NODE_XXX value for leaf CMNode" } , { "VAL_NIICM" , "Only * unary ops should be in the internal content model tree" } , { "VAL_NPCD" , "PCData node found in non-mixed model content" } , { "VAL_UST" , "Invalid ContentSpecNode.NODE_XXX value for unary op CMNode" } , { "VAL_WCGHI" , "The input to whatCanGoHere() is inconsistent" } , { "INT_DCN" , "Internal Error: dataChunk == NULL" } , { "INT_PCN" , "Internal Error: fPreviousChunk == NULL" } , { "FatalError" , "Stopping after fatal error: {0}" } , } ; public Object [ ] [ ] getContents ( ) { return CONTENTS ; } } 	0	['3', '3', '0', '0', '4', '1', '0', '0', '2', '0.5', '247', '0', '0', '0.974358974', '1', '0', '0', '81', '1', '0.3333', '0']
package org . apache . wml . dom ; import org . apache . wml . * ; public class WMLUElementImpl extends WMLElementImpl implements WMLUElement { public WMLUElementImpl ( WMLDocumentImpl owner , String tagName ) { super ( owner , tagName ) ; } public void setClassName ( String newValue ) { setAttribute ( "class" , newValue ) ; } public String getClassName ( ) { return getAttribute ( "class" ) ; } public void setXmlLang ( String newValue ) { setAttribute ( "xml:lang" , newValue ) ; } public String getXmlLang ( ) { return getAttribute ( "xml:lang" ) ; } public void setId ( String newValue ) { setAttribute ( "id" , newValue ) ; } public String getId ( ) { return getAttribute ( "id" ) ; } } 	0	['7', '4', '0', '3', '10', '21', '0', '3', '7', '2', '39', '0', '0', '0.931818182', '0.571428571', '1', '6', '4.571428571', '1', '0.8571', '0']
package org . w3c . dom . html ; public interface HTMLHeadingElement extends HTMLElement { public String getAlign ( ) ; public void setAlign ( String align ) ; } 	0	['2', '1', '0', '0', '2', '1', '0', '0', '2', '2', '2', '0', '0', '0', '0.75', '0', '0', '0', '1', '1', '0']
package org . w3c . dom . html ; public interface HTMLBaseElement extends HTMLElement { public String getHref ( ) ; public void setHref ( String href ) ; public String getTarget ( ) ; public void setTarget ( String target ) ; } 	0	['4', '1', '0', '0', '4', '6', '0', '0', '4', '2', '4', '0', '0', '0', '0.75', '0', '0', '0', '1', '1', '0']
package org . w3c . dom . html ; public interface HTMLOptionElement extends HTMLElement { public HTMLFormElement getForm ( ) ; public boolean getDefaultSelected ( ) ; public void setDefaultSelected ( boolean defaultSelected ) ; public String getText ( ) ; public int getIndex ( ) ; public boolean getDisabled ( ) ; public void setDisabled ( boolean disabled ) ; public String getLabel ( ) ; public void setLabel ( String label ) ; public boolean getSelected ( ) ; public void setSelected ( boolean selected ) ; public String getValue ( ) ; public void setValue ( String value ) ; } 	0	['13', '1', '0', '0', '13', '78', '0', '0', '13', '2', '13', '0', '0', '0', '0.461538462', '0', '0', '0', '1', '1', '0']
package javax . xml . parsers ; import org . xml . sax . Parser ; import org . xml . sax . SAXException ; import org . xml . sax . SAXNotRecognizedException ; import org . xml . sax . SAXNotSupportedException ; import java . io . InputStream ; import java . io . IOException ; import java . io . File ; import java . io . FileInputStream ; import java . util . Locale ; import java . util . Properties ; import java . io . BufferedReader ; import java . io . InputStreamReader ; public abstract class SAXParserFactory { private static final String defaultPropName = "javax.xml.parsers.SAXParserFactory" ; private boolean validating = false ; private boolean namespaceAware = false ; protected SAXParserFactory ( ) { } public static SAXParserFactory newInstance ( ) { String factoryImplName = findFactory ( defaultPropName , "org.apache.xerces.jaxp.SAXParserFactoryImpl" ) ; if ( factoryImplName == null ) { throw new FactoryConfigurationError ( "No default implementation found" ) ; } SAXParserFactory factoryImpl = null ; try { Class clazz = Class . forName ( factoryImplName ) ; factoryImpl = ( SAXParserFactory ) clazz . newInstance ( ) ; } catch ( ClassNotFoundException cnfe ) { throw new FactoryConfigurationError ( cnfe ) ; } catch ( IllegalAccessException iae ) { throw new FactoryConfigurationError ( iae ) ; } catch ( InstantiationException ie ) { throw new FactoryConfigurationError ( ie ) ; } return factoryImpl ; } public abstract SAXParser newSAXParser ( ) throws ParserConfigurationException , SAXException ; public void setNamespaceAware ( boolean awareness ) { this . namespaceAware = awareness ; } public void setValidating ( boolean validating ) { this . validating = validating ; } public boolean isNamespaceAware ( ) { return namespaceAware ; } public boolean isValidating ( ) { return validating ; } public abstract void setFeature ( String name , boolean value ) throws ParserConfigurationException , SAXNotRecognizedException , SAXNotSupportedException ; public abstract boolean getFeature ( String name ) throws ParserConfigurationException , SAXNotRecognizedException , SAXNotSupportedException ; private static String foundFactory = null ; private static final boolean debug = System . getProperty ( "jaxp.debug" ) != null ; private static String findFactory ( String factoryId , String defaultFactory ) { try { String systemProp = System . getProperty ( factoryId ) ; if ( systemProp != null ) { if ( debug ) System . err . println ( "JAXP: found system property" + systemProp ) ; return systemProp ; } } catch ( SecurityException se ) { } if ( foundFactory != null ) return foundFactory ; try { String javah = System . getProperty ( "java.home" ) ; String configFile = javah + File . separator + "lib" + File . separator + "jaxp.properties" ; File f = new File ( configFile ) ; if ( f . exists ( ) ) { Properties props = new Properties ( ) ; props . load ( new FileInputStream ( f ) ) ; foundFactory = props . getProperty ( factoryId ) ; if ( debug ) System . err . println ( "JAXP: found java.home property " + foundFactory ) ; if ( foundFactory != null ) return foundFactory ; } } catch ( Exception ex ) { if ( debug ) ex . printStackTrace ( ) ; } String serviceId = "META-INF/services/" + factoryId ; try { ClassLoader cl = SAXParserFactory . class . getClassLoader ( ) ; InputStream is = null ; if ( cl == null ) { is = ClassLoader . getSystemResourceAsStream ( serviceId ) ; } else { is = cl . getResourceAsStream ( serviceId ) ; } if ( is != null ) { if ( debug ) System . err . println ( "JAXP: found  " + serviceId ) ; BufferedReader rd = new BufferedReader ( new InputStreamReader ( is ) ) ; foundFactory = rd . readLine ( ) ; rd . close ( ) ; if ( debug ) System . err . println ( "JAXP: loaded from services: " + foundFactory ) ; if ( foundFactory != null && ! "" . equals ( foundFactory ) ) { return foundFactory ; } } } catch ( Exception ex ) { if ( debug ) ex . printStackTrace ( ) ; } return defaultFactory ; } } 	0	['12', '1', '1', '0', '39', '52', '0', '0', '8', '0.878787879', '275', '0.833333333', '0', '0', '0.454545455', '0', '0', '21.41666667', '10', '1.6667', '0']
package org . apache . xerces . utils . regex ; public class ParseException extends RuntimeException { int location ; public ParseException ( String mes , int location ) { super ( mes ) ; this . location = location ; } public int getLocation ( ) { return this . location ; } } 	0	['2', '4', '0', '4', '3', '0', '4', '0', '2', '0', '13', '0', '0', '0.944444444', '0.666666667', '0', '0', '5', '1', '0.5', '0']
package org . w3c . dom . ranges ; public interface DocumentRange { public Range createRange ( ) ; } 	0	['1', '1', '0', '0', '1', '0', '0', '0', '1', '2', '1', '0', '0', '0', '1', '0', '0', '0', '1', '1', '0']
package org . apache . xerces . validators . datatype ; import java . util . Hashtable ; import java . util . Vector ; import java . util . Enumeration ; import java . util . Locale ; import java . util . Calendar ; import java . util . GregorianCalendar ; import java . text . ParseException ; import org . apache . xerces . utils . regex . RegularExpression ; import org . apache . xerces . validators . schema . SchemaSymbols ; public class TimeDurationDatatypeValidator extends AbstractDatatypeValidator { private Locale fLocale = null ; private DatatypeValidator fBaseValidator = null ; private String fPattern = null ; private long fMaxInclusive = 0L ; private long fMaxExclusive = 0L ; private long fMinInclusive = 0L ; private long fMinExclusive = 0L ; private long fDuration = 0L ; private long fPeriod = 0L ; private boolean isMaxExclusiveDefined = false ; private boolean isMaxInclusiveDefined = false ; private boolean isMinExclusiveDefined = false ; private boolean isMinInclusiveDefined = false ; private int fFacetsDefined = 0 ; private long [ ] fEnumTimeDuration = null ; private DatatypeMessageProvider fMessageProvider = new DatatypeMessageProvider ( ) ; public TimeDurationDatatypeValidator ( ) throws InvalidDatatypeFacetException { this ( null , null , false ) ; } public TimeDurationDatatypeValidator ( DatatypeValidator base , Hashtable facets , boolean derivedByList ) throws InvalidDatatypeFacetException { if ( base != null ) setBasetype ( base ) ; if ( facets != null ) { if ( fBaseValidator != null ) for ( Enumeration e = facets . keys ( ) ; e . hasMoreElements ( ) ; ) { String key = ( String ) e . nextElement ( ) ; if ( key . equals ( SchemaSymbols . ELT_PATTERN ) ) { fFacetsDefined += DatatypeValidator . FACET_PATTERN ; fPattern = ( String ) facets . get ( key ) ; } else if ( key . equals ( SchemaSymbols . ELT_ENUMERATION ) ) { fFacetsDefined += DatatypeValidator . FACET_ENUMERATION ; continue ; } else if ( key . equals ( SchemaSymbols . ELT_MAXINCLUSIVE ) ) { fFacetsDefined += DatatypeValidator . FACET_MAXINCLUSIVE ; String value = null ; try { value = ( ( String ) facets . get ( key ) ) ; fMaxInclusive = normalizeDuration ( value . toCharArray ( ) , 0 ) ; } catch ( InvalidDatatypeValueException nfe ) { throw new InvalidDatatypeFacetException ( getErrorString ( DatatypeMessageProvider . IllegalFacetValue , DatatypeMessageProvider . MSG_NONE , new Object [ ] { value , key } ) ) ; } } else if ( key . equals ( SchemaSymbols . ELT_MAXEXCLUSIVE ) ) { fFacetsDefined += DatatypeValidator . FACET_MAXEXCLUSIVE ; String value = null ; try { value = ( ( String ) facets . get ( key ) ) ; fMaxExclusive = normalizeDuration ( value . toCharArray ( ) , 0 ) ; } catch ( InvalidDatatypeValueException nfe ) { throw new InvalidDatatypeFacetException ( getErrorString ( DatatypeMessageProvider . IllegalFacetValue , DatatypeMessageProvider . MSG_NONE , new Object [ ] { value , key } ) ) ; } } else if ( key . equals ( SchemaSymbols . ELT_MININCLUSIVE ) ) { fFacetsDefined += DatatypeValidator . FACET_MININCLUSIVE ; String value = null ; try { value = ( ( String ) facets . get ( key ) ) ; fMinInclusive = normalizeDuration ( value . toCharArray ( ) , 0 ) ; } catch ( InvalidDatatypeValueException nfe ) { throw new InvalidDatatypeFacetException ( getErrorString ( DatatypeMessageProvider . IllegalFacetValue , DatatypeMessageProvider . MSG_NONE , new Object [ ] { value , key } ) ) ; } } else if ( key . equals ( SchemaSymbols . ELT_MINEXCLUSIVE ) ) { fFacetsDefined += DatatypeValidator . FACET_MININCLUSIVE ; String value = null ; try { value = ( ( String ) facets . get ( key ) ) ; fMinExclusive = normalizeDuration ( value . toCharArray ( ) , 0 ) ; } catch ( InvalidDatatypeValueException nfe ) { throw new InvalidDatatypeFacetException ( getErrorString ( DatatypeMessageProvider . IllegalFacetValue , DatatypeMessageProvider . MSG_NONE , new Object [ ] { value , key } ) ) ; } } else { throw new InvalidDatatypeFacetException ( getErrorString ( DatatypeMessageProvider . MSG_FORMAT_FAILURE , DatatypeMessageProvider . MSG_NONE , null ) ) ; } } isMaxExclusiveDefined = ( ( fFacetsDefined & DatatypeValidator . FACET_MAXEXCLUSIVE ) != 0 ) ? true : false ; isMaxInclusiveDefined = ( ( fFacetsDefined & DatatypeValidator . FACET_MAXINCLUSIVE ) != 0 ) ? true : false ; isMinExclusiveDefined = ( ( fFacetsDefined & DatatypeValidator . FACET_MINEXCLUSIVE ) != 0 ) ? true : false ; isMinInclusiveDefined = ( ( fFacetsDefined & DatatypeValidator . FACET_MININCLUSIVE ) != 0 ) ? true : false ; if ( isMaxExclusiveDefined && isMaxInclusiveDefined ) { throw new InvalidDatatypeFacetException ( "It is an error for both maxInclusive and maxExclusive to be specified for the same datatype." ) ; } if ( isMinExclusiveDefined && isMinInclusiveDefined ) { throw new InvalidDatatypeFacetException ( "It is an error for both minInclusive and minExclusive to be specified for the same datatype." ) ; } if ( ( fFacetsDefined & DatatypeValidator . FACET_ENUMERATION ) != 0 ) { Vector v = ( Vector ) facets . get ( SchemaSymbols . ELT_ENUMERATION ) ; if ( v != null ) { fEnumTimeDuration = new long [ v . size ( ) ] ; int i = 0 ; String value = null ; try { for ( ; i < v . size ( ) ; i ++ ) { value = ( String ) v . elementAt ( i ) ; fEnumTimeDuration [ i ] = normalizeDuration ( value . toCharArray ( ) , 0 ) ; boundsCheck ( fEnumTimeDuration [ i ] ) ; } } catch ( InvalidDatatypeValueException idve ) { throw new InvalidDatatypeFacetException ( getErrorString ( DatatypeMessageProvider . InvalidEnumValue , DatatypeMessageProvider . MSG_NONE , new Object [ ] { v . elementAt ( i ) } ) ) ; } } } } } public Object validate ( String content , Object state ) throws InvalidDatatypeValueException { long normalizedValue ; if ( fPattern != null ) { RegularExpression regex = new RegularExpression ( fPattern , "X" ) ; if ( regex . matches ( content ) == false ) throw new InvalidDatatypeValueException ( "Value'" + content + "does not match regular expression facet" + fPattern ) ; } normalizedValue = normalizeDuration ( content . toCharArray ( ) , 0 ) ; try { boundsCheck ( normalizedValue ) ; } catch ( InvalidDatatypeFacetException ex ) { throw new InvalidDatatypeValueException ( "Boundary Exception" ) ; } if ( fEnumTimeDuration != null ) enumCheck ( normalizedValue ) ; return null ; } public void setBasetype ( DatatypeValidator base ) { fBaseValidator = base ; } public void setLocale ( Locale locale ) { } public int compare ( String content1 , String content2 ) { return - 1 ; } public Hashtable getFacets ( ) { return null ; } public static long normalizeDuration ( char [ ] value , int start ) throws InvalidDatatypeValueException { int i = 0 , j = 0 , k = 0 , l = 0 , m = 0 ; int sepindex = 0 ; int index = start ; int lindex = 0 ; int endindex = ( start + value . length ) - 1 ; int pendindex = endindex ; final char [ ] dseps = { 'Y' , 'M' , 'D' } ; final char [ ] tseps = { 'H' , 'M' , 'S' } ; final char [ ] msc = { '0' , '0' , '0' } ; final int [ ] buckets = new int [ Calendar . FIELD_COUNT ] ; for ( i = 0 ; i < buckets . length ; i ++ ) buckets [ i ] = 0 ; boolean intime = false ; boolean fixed = false ; boolean p1negative = false ; boolean p2negative = false ; boolean p1specified = false ; boolean p2specified = false ; GregorianCalendar cstart = null ; GregorianCalendar cend = null ; try { if ( value [ index ] == '-' ) { p1negative = true ; } int ix = indexOf ( value , start , '/' ) ; if ( ix > - 1 && ix < endindex ) { if ( value [ ix + 1 ] == '-' ) { p2negative = true ; } if ( value [ ( p1negative ? index + 1 : index ) ] == 'P' ) { if ( p1negative ) index ++ ; p1specified = true ; pendindex = ix - 1 ; } else { cstart = ( GregorianCalendar ) normalizeInstant ( value , index , ix - index ) ; } if ( value [ ( p2negative ? ( ix + 2 ) : ( ix + 1 ) ) ] == 'P' ) { p2specified = true ; index = ( p2negative ? ( ix + 2 ) : ( ix + 1 ) ) ; } else { ix ++ ; cend = ( GregorianCalendar ) normalizeInstant ( value , ix , ( endindex - ix ) + 1 ) ; } } else { index = ( p1negative ? ( start + 1 ) : ( start ) ) ; } if ( cstart != null && cend != null ) { return ( ( cend . getTime ( ) . getTime ( ) - cstart . getTime ( ) . getTime ( ) ) ) ; } if ( p1specified && p2specified ) throw new ParseException ( "Period cannot be expressed as 2 durations." , 0 ) ; if ( p1specified && value [ index ] != 'P' ) { throw new ParseException ( "Invalid start character for timeDuration:" + value [ index ] , index ) ; } if ( p2specified && value [ index ] != 'P' ) { throw new ParseException ( "Invalid start character for timeDuration:" + value [ index ] , index ) ; } } catch ( Exception e ) { throw new InvalidDatatypeValueException ( e . toString ( ) ) ; } try { lindex = index + 1 ; for ( i = index + 1 ; i <= pendindex ; i ++ ) { if ( Character . isDigit ( value [ i ] ) || value [ i ] == '.' ) { if ( value [ i ] == '.' ) fixed = true ; continue ; } if ( value [ i ] == 'T' ) { intime = true ; sepindex = 0 ; lindex = i + 1 ; continue ; } sepindex = indexOf ( ( intime ? tseps : dseps ) , sepindex , value [ i ] ) ; if ( sepindex == - 1 ) throw new ParseException ( "Illegal or misplaced separator." , i ) ; sepindex ++ ; if ( fixed && value [ i ] != 'S' ) throw new ParseException ( "Fractional digits allowed only for 'seconds'." , i ) ; j = 0 ; switch ( value [ i ] ) { case ( 'Y' ) : { if ( intime ) throw new ParseException ( "Year must be specified before 'T' separator." , i ) ; buckets [ Calendar . YEAR ] = parseInt ( value , lindex , i - lindex ) ; break ; } case ( 'D' ) : { if ( intime ) throw new ParseException ( "Days must be specified before 'T' separator." , i ) ; buckets [ Calendar . DAY_OF_MONTH ] = parseInt ( value , lindex , i - lindex ) ; break ; } case ( 'H' ) : { if ( ! intime ) throw new ParseException ( "Hours must be specified after 'T' separator." , i ) ; buckets [ Calendar . HOUR_OF_DAY ] = parseInt ( value , lindex , i - lindex ) ; break ; } case ( 'M' ) : { buckets [ ( intime ? Calendar . MINUTE : Calendar . MONTH ) ] = parseInt ( value , lindex , i - lindex ) ; break ; } case ( 'S' ) : { if ( ! intime ) throw new ParseException ( "Seconds must be specified after 'T' separator." , i ) ; if ( ! fixed ) buckets [ Calendar . SECOND ] = parseInt ( value , lindex , i - lindex ) ; else { int ps = indexOf ( value , lindex , '.' ) ; buckets [ Calendar . SECOND ] = parseInt ( value , lindex , ps - lindex ) ; ps ++ ; k = 0 ; while ( ( ps <= pendindex ) && ( k < 3 ) && Character . isDigit ( value [ ps ] ) ) msc [ k ++ ] = value [ ps ++ ] ; buckets [ Calendar . MILLISECOND ] = parseInt ( msc , 0 , 3 ) ; fixed = false ; } break ; } default : { throw new ParseException ( "Illegal 'picture' character: " + value [ i ] , i ) ; } } lindex = i + 1 ; } } catch ( Exception e ) { throw new InvalidDatatypeValueException ( e . toString ( ) ) ; } try { if ( cstart != null ) { long st = cstart . getTime ( ) . getTime ( ) ; for ( k = 0 ; k < buckets . length ; k ++ ) if ( buckets [ k ] != 0 ) cstart . add ( k , ( p2negative ? - buckets [ k ] : buckets [ k ] ) ) ; long ms = cstart . getTime ( ) . getTime ( ) ; return ( ( ms - st ) ) ; } if ( cend != null ) { long st = cend . getTime ( ) . getTime ( ) ; for ( k = 0 ; k < buckets . length ; k ++ ) if ( buckets [ k ] > 0 ) cend . add ( k , ( p1negative ? buckets [ k ] : - buckets [ k ] ) ) ; long ms = cend . getTime ( ) . getTime ( ) ; return ( ( ms - st ) ) ; } long r = ( ( ( long ) ( ( ( buckets [ Calendar . YEAR ] * 31104000L ) + ( buckets [ Calendar . MONTH ] * 2592000L ) + ( buckets [ Calendar . DAY_OF_MONTH ] * 86400L ) + ( buckets [ Calendar . HOUR_OF_DAY ] * 3600L ) + ( buckets [ Calendar . MINUTE ] * 60L ) + ( buckets [ Calendar . SECOND ] ) ) * 1000L ) + ( buckets [ Calendar . MILLISECOND ] ) ) ) ; return ( ( p1negative ? - r : r ) ) ; } catch ( Exception e ) { throw new InvalidDatatypeValueException ( e . toString ( ) ) ; } } public static Calendar normalizeInstant ( char [ ] value , int start , int length ) throws InvalidDatatypeValueException { boolean negative = false ; boolean tznegative = false ; int tzoffset = 0 ; int tzhh = 0 , tzmm = 0 ; int i = start , j = 0 , k = 0 , l = 0 , m = 0 ; final char [ ] ms = { '0' , '0' , '0' } ; final Calendar cal = new GregorianCalendar ( ) ; final int endindex = ( start + length ) - 1 ; try { if ( length < 16 ) throw new ParseException ( "Value is too short." , 0 ) ; cal . clear ( ) ; cal . setLenient ( false ) ; if ( value [ i ] == '-' || value [ i ] == '+' ) { cal . set ( Calendar . ERA , ( value [ i ] == '-' ? GregorianCalendar . BC : GregorianCalendar . AD ) ) ; i ++ ; } j = indexOf ( value , i , '-' , i + 5 ) ; if ( j == - 1 || j > endindex ) throw new ParseException ( "Year separator is missing or misplaced." , i ) ; cal . set ( Calendar . YEAR , parseInt ( value , i , j - i ) ) ; i = j + 1 ; cal . set ( Calendar . MONTH , parseInt ( value , i , 2 ) - 1 ) ; i += 2 ; if ( value [ i ] != '-' ) throw new ParseException ( "Month separator is missing or misplaced." , i ) ; cal . set ( Calendar . DAY_OF_MONTH , parseInt ( value , i + 1 , 2 ) ) ; i += 3 ; if ( value [ i ] != 'T' ) throw new ParseException ( "Time separator is missing or misplaced." , i ) ; cal . set ( Calendar . HOUR_OF_DAY , parseInt ( value , i + 1 , 2 ) ) ; i += 3 ; if ( value [ i ] != ':' ) throw new ParseException ( "Hour separator is missing or misplaced." , i ) ; cal . set ( Calendar . MINUTE , parseInt ( value , i + 1 , 2 ) ) ; i += 3 ; if ( ( endindex - i ) > 1 && ( value [ i ] == ':' ) ) { cal . set ( Calendar . SECOND , parseInt ( value , i + 1 , 2 ) ) ; i += 3 ; if ( i < endindex && value [ i ] == '.' ) { i ++ ; k = 0 ; while ( ( i <= endindex ) && ( k < 3 ) && Character . isDigit ( value [ i ] ) ) ms [ k ++ ] = value [ i ++ ] ; cal . set ( Calendar . MILLISECOND , parseInt ( ms , 0 , 3 ) ) ; } while ( i <= endindex && Character . isDigit ( value [ i ] ) ) i ++ ; } if ( i <= endindex ) { if ( value [ i ] == 'Z' ) { cal . set ( Calendar . ZONE_OFFSET , 0 ) ; } else if ( value [ i ] == '-' || value [ i ] == '+' ) { tznegative = ( value [ i ] == '-' ) ; tzhh = parseInt ( value , i + 1 , 2 ) ; if ( ( endindex - i ) == 5 ) { if ( value [ i + 3 ] != ':' ) throw new ParseException ( "time zone must be 'hh:mm'." , i ) ; tzmm = parseInt ( value , i + 4 , 2 ) ; } tzoffset = ( ( tzhh * 3600000 ) + ( tzmm * 60000 ) ) ; cal . set ( Calendar . ZONE_OFFSET , ( tznegative ? - tzoffset : tzoffset ) ) ; } else throw new ParseException ( "Unrecognized time zone." , i ) ; } return ( cal ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; throw new InvalidDatatypeValueException ( "Unable to parse timeInstant " + e . toString ( ) ) ; } } public Object clone ( ) throws CloneNotSupportedException { throw new CloneNotSupportedException ( "clone() is not supported in " + this . getClass ( ) . getName ( ) ) ; } private void boundsCheck ( long f ) throws InvalidDatatypeFacetException { boolean inUpperBound = false ; boolean inLowerBound = false ; if ( isMaxInclusiveDefined ) { inUpperBound = ( f <= fMaxInclusive ) ; } else if ( isMaxExclusiveDefined ) { inUpperBound = ( f < fMaxExclusive ) ; } if ( isMinInclusiveDefined ) { inLowerBound = ( f >= fMinInclusive ) ; } else if ( isMinExclusiveDefined ) { inLowerBound = ( f > fMinExclusive ) ; } if ( inUpperBound == false || inLowerBound == false ) { throw new InvalidDatatypeFacetException ( getErrorString ( DatatypeMessageProvider . OutOfBounds , DatatypeMessageProvider . MSG_NONE , new Object [ ] { new Long ( f ) , "" , "" , "" , "" } ) ) ; } } private void enumCheck ( long d ) throws InvalidDatatypeValueException { for ( int i = 0 ; i < this . fEnumTimeDuration . length ; i ++ ) { if ( d == fEnumTimeDuration [ i ] ) return ; } throw new InvalidDatatypeValueException ( getErrorString ( DatatypeMessageProvider . NotAnEnumValue , DatatypeMessageProvider . MSG_NONE , new Object [ ] { new Long ( d ) } ) ) ; } private String getErrorString ( int major , int minor , Object args [ ] ) { try { return fMessageProvider . createMessage ( fLocale , major , minor , args ) ; } catch ( Exception e ) { return "Illegal Errorcode " + minor ; } } private static final int indexOf ( char [ ] value , int start , char s ) { return ( indexOf ( value , start , s , value . length - 1 ) ) ; } private static final int indexOf ( char [ ] value , int start , char s , int max ) { for ( int i = start ; i <= max ; i ++ ) if ( value [ i ] == s ) return ( i ) ; return ( - 1 ) ; } private static final int indexOneOf ( char [ ] value , int start , String s ) { return ( indexOneOf ( value , start , s , value . length - 1 ) ) ; } private static final int indexOneOf ( char [ ] value , int start , String s , int max ) { for ( int i = start ; i < max ; i ++ ) for ( int j = 0 ; j < s . length ( ) ; j ++ ) if ( value [ i ] == s . charAt ( j ) ) return ( i ) ; return ( - 1 ) ; } private static final int parseInt ( char [ ] s , int start , int length ) throws NumberFormatException { if ( s == null ) throw new NumberFormatException ( "null" ) ; int radix = 10 ; int result = 0 ; boolean negative = false ; int i = start ; int limit ; int multmin ; int digit = 0 ; if ( length <= 0 ) throw new NumberFormatException ( new String ( s , start , length ) ) ; if ( s [ i ] == '-' ) { negative = true ; limit = Integer . MIN_VALUE ; i ++ ; } else if ( s [ i ] == '+' ) { negative = false ; limit = - Integer . MAX_VALUE ; i ++ ; } else { limit = - Integer . MAX_VALUE ; } multmin = limit / radix ; if ( i < ( start + length ) ) { digit = Character . digit ( s [ i ++ ] , radix ) ; if ( digit < 0 ) throw new NumberFormatException ( new String ( s , start , length ) ) ; else result = - digit ; } while ( i < ( start + length ) ) { digit = Character . digit ( s [ i ++ ] , radix ) ; if ( digit < 0 ) throw new NumberFormatException ( new String ( s , start , length ) ) ; if ( result < multmin ) throw new NumberFormatException ( new String ( s , start , length ) ) ; result *= radix ; if ( result < limit + digit ) throw new NumberFormatException ( new String ( s , start , length ) ) ; result -= digit ; } if ( negative ) { if ( i > 1 ) return result ; else throw new NumberFormatException ( new String ( s , start , length ) ) ; } return - result ; } } 	0	['18', '2', '0', '7', '58', '141', '1', '6', '10', '0.845588235', '1924', '1', '2', '0.2', '0.189814815', '0', '0', '105', '4', '1.1667', '0']
package org . apache . xerces . validators . datatype ; import java . util . ListResourceBundle ; import java . util . Locale ; import java . util . ResourceBundle ; import org . apache . xerces . utils . XMLMessageProvider ; public class DatatypeMessageProvider implements XMLMessageProvider { public static final String DATATYPE_DOMAIN = "http://www.w3.org/TR/xml-schema-2" ; public void setLocale ( Locale locale ) { fLocale = locale ; } public Locale getLocale ( ) { return fLocale ; } public String createMessage ( Locale locale , int majorCode , int minorCode , Object args [ ] ) { boolean throwex = false ; if ( fResourceBundle == null || locale != fLocale ) { if ( locale != null ) fResourceBundle = ListResourceBundle . getBundle ( "org.apache.xerces.msg.DatatypeMessages" , locale ) ; if ( fResourceBundle == null ) fResourceBundle = ListResourceBundle . getBundle ( "org.apache.xerces.msg.DatatypeMessages" ) ; } if ( majorCode < 0 || majorCode >= fgMessageKeys . length ) { majorCode = MSG_BAD_MAJORCODE ; throwex = true ; } String msgKey = fgMessageKeys [ majorCode ] ; String msg = fResourceBundle . getString ( msgKey ) ; if ( args != null ) { try { msg = java . text . MessageFormat . format ( msg , args ) ; } catch ( Exception e ) { msg = fResourceBundle . getString ( fgMessageKeys [ MSG_FORMAT_FAILURE ] ) ; msg += " " + fResourceBundle . getString ( msgKey ) ; } } if ( throwex ) { throw new RuntimeException ( msg ) ; } return msg ; } private Locale fLocale = null ; private ResourceBundle fResourceBundle = null ; public static final int MSG_BAD_MAJORCODE = 0 , MSG_FORMAT_FAILURE = 1 , NotBoolean = 2 , NotDecimal = 3 , FacetsInconsistent = 4 , IllegalFacetValue = 5 , IllegalDecimalFacet = 6 , UnknownFacet = 7 , InvalidEnumValue = 8 , OutOfBounds = 9 , NotAnEnumValue = 10 , NotInteger = 11 , IllegalIntegerFacet = 12 , NotReal = 13 , IllegalRealFacet = 14 , ScaleLargerThanPrecision = 15 , PrecisionExceeded = 16 , ScaleExceeded = 17 , NotFloat = 18 , MSG_MAX_CODE = 19 ; public static final int MSG_NONE = 0 ; public static final String [ ] fgMessageKeys = { "BadMajorCode" , "FormatFailed" , "NotBoolean" , "NotDecimal" , "FacetsInconsistent" , "IllegalFacetValue" , "IllegalDecimalFacet" , "UnknownFacet" , "InvalidEnumValue" , "OutOfBounds" , "NotAnEnumValue" , "NotInteger" , "IllegalIntegerFacet" , "NotReal" , "IllegalRealFacet" , "ScaleLargerThanPrecision" , "PrecisionExceeded" , "ScaleExceeded" , "NotFloat" } ; } 	0	['5', '1', '0', '10', '14', '0', '9', '1', '4', '1.17', '206', '0.08', '0', '0', '0.5', '0', '0', '35.2', '9', '2.2', '0']
package org . w3c . dom . html ; public interface HTMLOListElement extends HTMLElement { public boolean getCompact ( ) ; public void setCompact ( boolean compact ) ; public int getStart ( ) ; public void setStart ( int start ) ; public String getType ( ) ; public void setType ( String type ) ; } 	0	['6', '1', '0', '0', '6', '15', '0', '0', '6', '2', '6', '0', '0', '0', '0.375', '0', '0', '0', '1', '1', '0']
package org . apache . html . dom ; import org . w3c . dom . * ; import org . w3c . dom . html . * ; public class HTMLOptGroupElementImpl extends HTMLElementImpl implements HTMLOptGroupElement { public boolean getDisabled ( ) { return getBinary ( "disabled" ) ; } public void setDisabled ( boolean disabled ) { setAttribute ( "disabled" , disabled ) ; } public String getLabel ( ) { return capitalize ( getAttribute ( "label" ) ) ; } public void setLabel ( String label ) { setAttribute ( "label" , label ) ; } public HTMLOptGroupElementImpl ( HTMLDocumentImpl owner , String name ) { super ( owner , name ) ; } } 	0	['5', '4', '0', '2', '11', '10', '0', '2', '5', '2', '30', '0', '0', '0.959183673', '0.45', '0', '0', '5', '1', '0.8', '0']
package org . apache . xerces . dom ; import org . w3c . dom . * ; import org . w3c . dom . traversal . * ; import org . apache . xerces . dom . DocumentImpl ; public class NodeIteratorImpl implements NodeIterator { private DocumentImpl fDocument ; private Node fRoot ; private int fWhatToShow = NodeFilter . SHOW_ALL ; private NodeFilter fNodeFilter ; private boolean fDetach = false ; private Node fCurrentNode ; private boolean fForward = true ; private boolean fEntityReferenceExpansion ; public NodeIteratorImpl ( DocumentImpl document , Node root , int whatToShow , NodeFilter nodeFilter , boolean entityReferenceExpansion ) { fDocument = document ; fRoot = root ; fCurrentNode = null ; fWhatToShow = whatToShow ; fNodeFilter = nodeFilter ; fEntityReferenceExpansion = entityReferenceExpansion ; } public Node getRoot ( ) { return fRoot ; } public int getWhatToShow ( ) { return fWhatToShow ; } public NodeFilter getFilter ( ) { return fNodeFilter ; } public boolean getExpandEntityReferences ( ) { return fEntityReferenceExpansion ; } public Node nextNode ( ) { if ( fDetach ) { throw new DOMException ( DOMException . INVALID_STATE_ERR , "DOM011 Invalid state" ) ; } if ( fRoot == null ) return null ; Node nextNode = fCurrentNode ; boolean accepted = false ; accepted_loop : while ( ! accepted ) { if ( ! fForward && nextNode != null ) { nextNode = fCurrentNode ; } else { if ( ! fEntityReferenceExpansion && nextNode != null && nextNode . getNodeType ( ) == Node . ENTITY_REFERENCE_NODE ) { nextNode = nextNode ( nextNode , false ) ; } else { nextNode = nextNode ( nextNode , true ) ; } } fForward = true ; if ( nextNode == null ) return null ; accepted = acceptNode ( nextNode ) ; if ( accepted ) { fCurrentNode = nextNode ; return fCurrentNode ; } else continue accepted_loop ; } return null ; } public Node previousNode ( ) { if ( fDetach ) { throw new DOMException ( DOMException . INVALID_STATE_ERR , "DOM011 Invalid state" ) ; } if ( fRoot == null || fCurrentNode == null ) return null ; Node previousNode = fCurrentNode ; boolean accepted = false ; accepted_loop : while ( ! accepted ) { if ( fForward && previousNode != null ) { previousNode = fCurrentNode ; } else { previousNode = previousNode ( previousNode ) ; } fForward = false ; if ( previousNode == null ) return null ; accepted = acceptNode ( previousNode ) ; if ( accepted ) { fCurrentNode = previousNode ; return fCurrentNode ; } else continue accepted_loop ; } return null ; } boolean acceptNode ( Node node ) { if ( fNodeFilter == null ) { return ( fWhatToShow & ( 1 << node . getNodeType ( ) - 1 ) ) != 0 ; } else { return ( ( fWhatToShow & ( 1 << node . getNodeType ( ) - 1 ) ) != 0 ) && fNodeFilter . acceptNode ( node ) == NodeFilter . FILTER_ACCEPT ; } } Node matchNodeOrParent ( Node node ) { for ( Node n = node ; n != fRoot ; n = n . getParentNode ( ) ) { if ( node == n ) return n ; } return null ; } Node nextNode ( Node node , boolean visitChildren ) { if ( node == null ) return fRoot ; Node result ; if ( visitChildren ) { if ( node . hasChildNodes ( ) ) { result = node . getFirstChild ( ) ; return result ; } } if ( node == fRoot ) { return null ; } result = node . getNextSibling ( ) ; if ( result != null ) return result ; Node parent = node . getParentNode ( ) ; while ( parent != null && parent != fRoot ) { result = parent . getNextSibling ( ) ; if ( result != null ) { return result ; } else { parent = parent . getParentNode ( ) ; } } return null ; } Node previousNode ( Node node ) { Node result ; if ( node == fRoot ) return null ; result = node . getPreviousSibling ( ) ; if ( result == null ) { result = node . getParentNode ( ) ; return result ; } if ( result . hasChildNodes ( ) && ! ( ! fEntityReferenceExpansion && result != null && result . getNodeType ( ) == Node . ENTITY_REFERENCE_NODE ) ) { while ( result . hasChildNodes ( ) ) { result = result . getLastChild ( ) ; } } return result ; } public void removeNode ( Node node ) { if ( node == null ) return ; Node deleted = matchNodeOrParent ( node ) ; if ( deleted == null ) return ; if ( fForward ) { fCurrentNode = previousNode ( deleted ) ; } else { Node next = nextNode ( deleted , false ) ; if ( next != null ) { fCurrentNode = next ; } else { fCurrentNode = previousNode ( deleted ) ; fForward = true ; } } } public void detach ( ) { fDetach = true ; fDocument . removeNodeIterator ( this ) ; } } 	0	['13', '1', '0', '1', '24', '8', '1', '1', '9', '0.6875', '380', '1', '4', '0', '0.307692308', '0', '0', '27.61538462', '11', '4.2308', '0']
package org . w3c . dom . html ; public interface HTMLTitleElement extends HTMLElement { public String getText ( ) ; public void setText ( String text ) ; } 	0	['2', '1', '0', '0', '2', '1', '0', '0', '2', '2', '2', '0', '0', '0', '0.75', '0', '0', '0', '1', '1', '0']
package org . apache . wml . dom ; import org . apache . wml . * ; public class WMLGoElementImpl extends WMLElementImpl implements WMLGoElement { public WMLGoElementImpl ( WMLDocumentImpl owner , String tagName ) { super ( owner , tagName ) ; } public void setSendreferer ( String newValue ) { setAttribute ( "sendreferer" , newValue ) ; } public String getSendreferer ( ) { return getAttribute ( "sendreferer" ) ; } public void setAcceptCharset ( String newValue ) { setAttribute ( "accept-charset" , newValue ) ; } public String getAcceptCharset ( ) { return getAttribute ( "accept-charset" ) ; } public void setHref ( String newValue ) { setAttribute ( "href" , newValue ) ; } public String getHref ( ) { return getAttribute ( "href" ) ; } public void setClassName ( String newValue ) { setAttribute ( "class" , newValue ) ; } public String getClassName ( ) { return getAttribute ( "class" ) ; } public void setId ( String newValue ) { setAttribute ( "id" , newValue ) ; } public String getId ( ) { return getAttribute ( "id" ) ; } public void setMethod ( String newValue ) { setAttribute ( "method" , newValue ) ; } public String getMethod ( ) { return getAttribute ( "method" ) ; } } 	0	['13', '4', '0', '3', '16', '78', '0', '3', '13', '2', '72', '0', '0', '0.872340426', '0.538461538', '1', '4', '4.538461538', '1', '0.9231', '0']
package org . w3c . dom . events ; public interface EventListener { public void handleEvent ( Event evt ) ; } 	0	['1', '1', '0', '0', '1', '0', '0', '0', '1', '2', '1', '0', '0', '0', '1', '0', '0', '0', '1', '1', '0']
package org . w3c . dom . html ; public interface HTMLIsIndexElement extends HTMLElement { public HTMLFormElement getForm ( ) ; public String getPrompt ( ) ; public void setPrompt ( String prompt ) ; } 	0	['3', '1', '0', '0', '3', '3', '0', '0', '3', '2', '3', '0', '0', '0', '0.666666667', '0', '0', '0', '1', '1', '0']
package org . apache . wml ; public interface WMLBigElement extends WMLElement { public void setXmlLang ( String newValue ) ; public String getXmlLang ( ) ; } 	0	['2', '1', '0', '2', '2', '1', '1', '1', '2', '2', '2', '0', '0', '0', '0.75', '0', '0', '0', '1', '1', '0']
package org . apache . wml . dom ; import org . apache . wml . * ; public class WMLMetaElementImpl extends WMLElementImpl implements WMLMetaElement { public WMLMetaElementImpl ( WMLDocumentImpl owner , String tagName ) { super ( owner , tagName ) ; } public void setForua ( boolean newValue ) { setAttribute ( "forua" , newValue ) ; } public boolean getForua ( ) { return getAttribute ( "forua" , false ) ; } public void setScheme ( String newValue ) { setAttribute ( "scheme" , newValue ) ; } public String getScheme ( ) { return getAttribute ( "scheme" ) ; } public void setClassName ( String newValue ) { setAttribute ( "class" , newValue ) ; } public String getClassName ( ) { return getAttribute ( "class" ) ; } public void setHttpEquiv ( String newValue ) { setAttribute ( "http-equiv" , newValue ) ; } public String getHttpEquiv ( ) { return getAttribute ( "http-equiv" ) ; } public void setId ( String newValue ) { setAttribute ( "id" , newValue ) ; } public String getId ( ) { return getAttribute ( "id" ) ; } public void setContent ( String newValue ) { setAttribute ( "content" , newValue ) ; } public String getContent ( ) { return getAttribute ( "content" ) ; } public void setName ( String newValue ) { setAttribute ( "name" , newValue ) ; } public String getName ( ) { return getAttribute ( "name" ) ; } } 	0	['15', '4', '0', '3', '20', '105', '0', '3', '15', '2', '84', '0', '0', '0.854166667', '0.4', '1', '4', '4.6', '1', '0.9333', '0']
package org . apache . wml . dom ; import org . apache . wml . * ; public class WMLTrElementImpl extends WMLElementImpl implements WMLTrElement { public WMLTrElementImpl ( WMLDocumentImpl owner , String tagName ) { super ( owner , tagName ) ; } public void setClassName ( String newValue ) { setAttribute ( "class" , newValue ) ; } public String getClassName ( ) { return getAttribute ( "class" ) ; } public void setId ( String newValue ) { setAttribute ( "id" , newValue ) ; } public String getId ( ) { return getAttribute ( "id" ) ; } } 	0	['5', '4', '0', '3', '8', '10', '0', '3', '5', '2', '28', '0', '0', '0.953488372', '0.6', '1', '4', '4.6', '1', '0.8', '0']
package org . apache . xerces . readers ; import org . apache . xerces . framework . XMLErrorReporter ; import org . apache . xerces . utils . CharDataChunk ; import org . apache . xerces . utils . QName ; import org . apache . xerces . utils . StringHasher ; import org . apache . xerces . utils . StringPool ; import org . apache . xerces . utils . XMLCharacterProperties ; import org . apache . xerces . utils . ImplementationMessages ; import org . xml . sax . SAXParseException ; import java . util . Vector ; abstract class AbstractCharReader extends XMLEntityReader { protected AbstractCharReader ( XMLEntityHandler entityHandler , XMLErrorReporter errorReporter , boolean sendCharDataAsCharArray , StringPool stringPool ) { super ( entityHandler , errorReporter , sendCharDataAsCharArray ) ; fStringPool = stringPool ; fCurrentChunk = CharDataChunk . createChunk ( fStringPool , null ) ; } protected CharDataChunk fCurrentChunk = null ; protected int fCurrentIndex = 0 ; protected char [ ] fMostRecentData = null ; protected int fMostRecentChar = 0 ; protected int fLength = 0 ; protected abstract int fillCurrentChunk ( ) throws Exception ; protected void deferException ( int errorCode , Object [ ] args , int offset ) { if ( fDeferredErrors == null ) fDeferredErrors = new Vector ( ) ; DeferredError de = new DeferredError ( errorCode , args , offset ) ; fDeferredErrors . addElement ( de ) ; } protected XMLEntityHandler . EntityReader changeReaders ( ) throws Exception { XMLEntityHandler . EntityReader nextReader = super . changeReaders ( ) ; fCurrentChunk . releaseChunk ( ) ; fCurrentChunk = null ; return nextReader ; } public void append ( XMLEntityHandler . CharBuffer charBuffer , int offset , int length ) { fCurrentChunk . append ( charBuffer , offset , length ) ; } public int addString ( int offset , int length ) { if ( length == 0 ) return 0 ; return fCurrentChunk . addString ( offset , length ) ; } public int addSymbol ( int offset , int length ) { if ( length == 0 ) return 0 ; return fCurrentChunk . addSymbol ( offset , length , 0 ) ; } public boolean lookingAtChar ( char chr , boolean skipPastChar ) throws Exception { int ch = fMostRecentChar ; if ( ch != chr ) { if ( ch == 0 ) { if ( atEOF ( fCurrentOffset + 1 ) ) { return changeReaders ( ) . lookingAtChar ( chr , skipPastChar ) ; } } return false ; } if ( skipPastChar ) { fCharacterCounter ++ ; fCurrentOffset ++ ; if ( ++ fCurrentIndex == CharDataChunk . CHUNK_SIZE ) slowLoadNextChar ( ) ; else fMostRecentChar = fMostRecentData [ fCurrentIndex ] & 0xFFFF ; } return true ; } public boolean lookingAtValidChar ( boolean skipPastChar ) throws Exception { int ch = fMostRecentChar ; if ( ch < 0xD800 ) { if ( ch >= 0x20 || ch == 0x09 ) { if ( skipPastChar ) { fCharacterCounter ++ ; loadNextChar ( ) ; } return true ; } if ( ch == 0x0A ) { if ( skipPastChar ) { fLinefeedCounter ++ ; fCharacterCounter = 1 ; loadNextChar ( ) ; } return true ; } if ( ch == 0 ) { if ( atEOF ( fCurrentOffset + 1 ) ) { return changeReaders ( ) . lookingAtValidChar ( skipPastChar ) ; } } return false ; } if ( ch > 0xFFFD ) { return false ; } if ( ch < 0xDC00 ) { CharDataChunk savedChunk = fCurrentChunk ; int savedIndex = fCurrentIndex ; int savedOffset = fCurrentOffset ; ch = loadNextChar ( ) ; boolean valid = ( ch >= 0xDC00 && ch < 0xE000 ) ; if ( ! valid || ! skipPastChar ) { fCurrentChunk = savedChunk ; fCurrentIndex = savedIndex ; fCurrentOffset = savedOffset ; fMostRecentData = savedChunk . toCharArray ( ) ; fMostRecentChar = fMostRecentData [ savedIndex ] & 0xFFFF ; return valid ; } } else if ( ch < 0xE000 ) { return false ; } if ( skipPastChar ) { fCharacterCounter ++ ; loadNextChar ( ) ; } return true ; } public boolean lookingAtSpace ( boolean skipPastChar ) throws Exception { int ch = fMostRecentChar ; if ( ch > 0x20 ) return false ; if ( ch == 0x20 || ch == 0x09 ) { if ( ! skipPastChar ) return true ; fCharacterCounter ++ ; } else if ( ch == 0x0A ) { if ( ! skipPastChar ) return true ; fLinefeedCounter ++ ; fCharacterCounter = 1 ; } else { if ( ch == 0 ) { if ( atEOF ( fCurrentOffset + 1 ) ) { return changeReaders ( ) . lookingAtSpace ( skipPastChar ) ; } } return false ; } fCurrentOffset ++ ; if ( ++ fCurrentIndex == CharDataChunk . CHUNK_SIZE ) slowLoadNextChar ( ) ; else fMostRecentChar = fMostRecentData [ fCurrentIndex ] & 0xFFFF ; return true ; } public void skipToChar ( char chr ) throws Exception { int ch = fMostRecentChar ; while ( true ) { if ( ch == chr ) return ; if ( ch == 0 ) { if ( atEOF ( fCurrentOffset + 1 ) ) { changeReaders ( ) . skipToChar ( chr ) ; return ; } fCharacterCounter ++ ; } else if ( ch == 0x0A ) { fLinefeedCounter ++ ; fCharacterCounter = 1 ; } else if ( ch >= 0xD800 && ch < 0xDC00 ) { fCharacterCounter ++ ; ch = loadNextChar ( ) ; if ( ch < 0xDC00 || ch >= 0xE000 ) continue ; } else fCharacterCounter ++ ; ch = loadNextChar ( ) ; } } public void skipPastSpaces ( ) throws Exception { int ch = fMostRecentChar ; while ( true ) { if ( ch == 0x20 || ch == 0x09 ) { fCharacterCounter ++ ; } else if ( ch == 0x0A ) { fLinefeedCounter ++ ; fCharacterCounter = 1 ; } else { if ( ch == 0 && atEOF ( fCurrentOffset + 1 ) ) changeReaders ( ) . skipPastSpaces ( ) ; return ; } ch = loadNextChar ( ) ; } } public void skipPastName ( char fastcheck ) throws Exception { int ch = fMostRecentChar ; if ( ch < 0x80 ) { if ( XMLCharacterProperties . fgAsciiInitialNameChar [ ch ] == 0 ) return ; } else { if ( ! fCalledCharPropInit ) { XMLCharacterProperties . initCharFlags ( ) ; fCalledCharPropInit = true ; } if ( ( XMLCharacterProperties . fgCharFlags [ ch ] & XMLCharacterProperties . E_InitialNameCharFlag ) == 0 ) return ; } while ( true ) { fCharacterCounter ++ ; ch = loadNextChar ( ) ; if ( fastcheck == ch ) return ; if ( ch < 0x80 ) { if ( XMLCharacterProperties . fgAsciiNameChar [ ch ] == 0 ) return ; } else { if ( ! fCalledCharPropInit ) { XMLCharacterProperties . initCharFlags ( ) ; fCalledCharPropInit = true ; } if ( ( XMLCharacterProperties . fgCharFlags [ ch ] & XMLCharacterProperties . E_NameCharFlag ) == 0 ) return ; } } } public void skipPastNmtoken ( char fastcheck ) throws Exception { int ch = fMostRecentChar ; while ( true ) { if ( fastcheck == ch ) return ; if ( ch < 0x80 ) { if ( XMLCharacterProperties . fgAsciiNameChar [ ch ] == 0 ) return ; } else { if ( ! fCalledCharPropInit ) { XMLCharacterProperties . initCharFlags ( ) ; fCalledCharPropInit = true ; } if ( ( XMLCharacterProperties . fgCharFlags [ ch ] & XMLCharacterProperties . E_NameCharFlag ) == 0 ) return ; } fCharacterCounter ++ ; ch = loadNextChar ( ) ; } } public boolean skippedString ( char [ ] s ) throws Exception { int length = s . length ; char [ ] data = fMostRecentData ; int index = fCurrentIndex ; if ( index + length <= CharDataChunk . CHUNK_SIZE ) { for ( int i = 0 ; i < length ; i ++ ) { if ( data [ index ++ ] != s [ i ] ) return false ; } fCharacterCounter += length ; fCurrentOffset += length ; fCurrentIndex = index ; if ( index == CharDataChunk . CHUNK_SIZE ) slowLoadNextChar ( ) ; else fMostRecentChar = data [ index ] & 0xFFFF ; return true ; } CharDataChunk dataChunk = fCurrentChunk ; int offset = fCurrentOffset ; int savedIndex = index ; int i = 0 ; while ( index < CharDataChunk . CHUNK_SIZE ) { if ( data [ index ++ ] != s [ i ++ ] ) return false ; } slowLoadNextChar ( ) ; data = fMostRecentData ; index = 0 ; while ( i < length ) { if ( data [ index ++ ] != s [ i ++ ] ) { fCurrentChunk = dataChunk ; fCurrentIndex = savedIndex ; fCurrentOffset = offset ; fMostRecentData = dataChunk . toCharArray ( ) ; fMostRecentChar = fMostRecentData [ savedIndex ] & 0xFFFF ; return false ; } } fCharacterCounter += length ; fCurrentOffset += length ; fCurrentIndex = index ; if ( index == CharDataChunk . CHUNK_SIZE ) slowLoadNextChar ( ) ; else fMostRecentChar = data [ index ] & 0xFFFF ; return true ; } public int scanInvalidChar ( ) throws Exception { int ch = fMostRecentChar ; if ( ch == 0x0A ) { fLinefeedCounter ++ ; fCharacterCounter = 1 ; loadNextChar ( ) ; } else if ( ch == 0 ) { if ( atEOF ( fCurrentOffset + 1 ) ) { return changeReaders ( ) . scanInvalidChar ( ) ; } if ( fDeferredErrors != null ) { for ( int i = 0 ; i < fDeferredErrors . size ( ) ; i ++ ) { DeferredError de = ( DeferredError ) fDeferredErrors . elementAt ( i ) ; if ( de . offset == fCurrentIndex ) { fErrorReporter . reportError ( fErrorReporter . getLocator ( ) , ImplementationMessages . XERCES_IMPLEMENTATION_DOMAIN , de . errorCode , 0 , de . args , XMLErrorReporter . ERRORTYPE_FATAL_ERROR ) ; fDeferredErrors . removeElementAt ( i ) ; fCharacterCounter ++ ; loadNextChar ( ) ; return - 1 ; } } } fCharacterCounter ++ ; loadNextChar ( ) ; } else { fCharacterCounter ++ ; if ( ch >= 0xD800 && ch < 0xDC00 ) { int ch2 = loadNextChar ( ) ; if ( ch2 >= 0xDC00 && ch2 < 0xE000 ) { ch = ( ( ch - 0xD800 ) << 10 ) + ( ch2 - 0xDC00 ) + 0x10000 ; loadNextChar ( ) ; } } else loadNextChar ( ) ; } return ch ; } public int scanCharRef ( boolean hex ) throws Exception { int ch = fMostRecentChar ; if ( ch == 0 ) { if ( atEOF ( fCurrentOffset + 1 ) ) { return changeReaders ( ) . scanCharRef ( hex ) ; } return XMLEntityHandler . CHARREF_RESULT_INVALID_CHAR ; } int num = 0 ; if ( hex ) { if ( ch > 'f' || XMLCharacterProperties . fgAsciiXDigitChar [ ch ] == 0 ) return XMLEntityHandler . CHARREF_RESULT_INVALID_CHAR ; num = ch - ( ch < 'A' ? '0' : ( ch < 'a' ? 'A' : 'a' ) - 10 ) ; } else { if ( ch < '0' || ch > '9' ) return XMLEntityHandler . CHARREF_RESULT_INVALID_CHAR ; num = ch - '0' ; } fCharacterCounter ++ ; loadNextChar ( ) ; boolean toobig = false ; while ( true ) { ch = fMostRecentChar ; if ( ch == 0 ) break ; if ( hex ) { if ( ch > 'f' || XMLCharacterProperties . fgAsciiXDigitChar [ ch ] == 0 ) break ; } else { if ( ch < '0' || ch > '9' ) break ; } fCharacterCounter ++ ; loadNextChar ( ) ; if ( hex ) { int dig = ch - ( ch < 'A' ? '0' : ( ch < 'a' ? 'A' : 'a' ) - 10 ) ; num = ( num << 4 ) + dig ; } else { int dig = ch - '0' ; num = ( num * 10 ) + dig ; } if ( num > 0x10FFFF ) { toobig = true ; num = 0 ; } } if ( ch != ';' ) return XMLEntityHandler . CHARREF_RESULT_SEMICOLON_REQUIRED ; fCharacterCounter ++ ; loadNextChar ( ) ; if ( toobig ) return XMLEntityHandler . CHARREF_RESULT_OUT_OF_RANGE ; return num ; } public int scanStringLiteral ( ) throws Exception { boolean single ; if ( ! ( single = lookingAtChar ( '\'' , true ) ) && ! lookingAtChar ( '\"' , true ) ) { return XMLEntityHandler . STRINGLIT_RESULT_QUOTE_REQUIRED ; } int offset = fCurrentOffset ; char qchar = single ? '\'' : '\"' ; while ( ! lookingAtChar ( qchar , false ) ) { if ( ! lookingAtValidChar ( true ) ) { return XMLEntityHandler . STRINGLIT_RESULT_INVALID_CHAR ; } } int stringIndex = addString ( offset , fCurrentOffset - offset ) ; lookingAtChar ( qchar , true ) ; return stringIndex ; } public int scanAttValue ( char qchar , boolean asSymbol ) throws Exception { int offset = fCurrentOffset ; while ( true ) { if ( lookingAtChar ( qchar , false ) ) { break ; } if ( lookingAtChar ( ' ' , true ) ) { continue ; } if ( lookingAtSpace ( false ) ) { return XMLEntityHandler . ATTVALUE_RESULT_COMPLEX ; } if ( lookingAtChar ( '&' , false ) ) { return XMLEntityHandler . ATTVALUE_RESULT_COMPLEX ; } if ( lookingAtChar ( '<' , false ) ) { return XMLEntityHandler . ATTVALUE_RESULT_LESSTHAN ; } if ( ! lookingAtValidChar ( true ) ) { return XMLEntityHandler . ATTVALUE_RESULT_INVALID_CHAR ; } } int result = asSymbol ? addSymbol ( offset , fCurrentOffset - offset ) : addString ( offset , fCurrentOffset - offset ) ; lookingAtChar ( qchar , true ) ; return result ; } public int scanEntityValue ( int qchar , boolean createString ) throws Exception { int offset = fCurrentOffset ; while ( true ) { if ( atEOF ( fCurrentOffset + 1 ) ) { changeReaders ( ) ; return XMLEntityHandler . ENTITYVALUE_RESULT_END_OF_INPUT ; } if ( qchar != - 1 && lookingAtChar ( ( char ) qchar , false ) ) { if ( ! createString ) return XMLEntityHandler . ENTITYVALUE_RESULT_FINISHED ; break ; } if ( lookingAtChar ( '&' , false ) ) { return XMLEntityHandler . ENTITYVALUE_RESULT_REFERENCE ; } if ( lookingAtChar ( '%' , false ) ) { return XMLEntityHandler . ENTITYVALUE_RESULT_PEREF ; } if ( ! lookingAtValidChar ( true ) ) { return XMLEntityHandler . ENTITYVALUE_RESULT_INVALID_CHAR ; } } int result = addString ( offset , fCurrentOffset - offset ) ; lookingAtChar ( ( char ) qchar , true ) ; return result ; } public int scanName ( char fastcheck ) throws Exception { int ch = fMostRecentChar ; if ( ch < 0x80 ) { if ( XMLCharacterProperties . fgAsciiInitialNameChar [ ch ] == 0 ) return - 1 ; } else { if ( ! fCalledCharPropInit ) { XMLCharacterProperties . initCharFlags ( ) ; fCalledCharPropInit = true ; } if ( ( XMLCharacterProperties . fgCharFlags [ ch ] & XMLCharacterProperties . E_InitialNameCharFlag ) == 0 ) return - 1 ; } int offset = fCurrentOffset ; int index = fCurrentIndex ; char [ ] data = fMostRecentData ; if ( ++ index == CharDataChunk . CHUNK_SIZE ) { slowLoadNextChar ( ) ; index = 0 ; data = fMostRecentData ; } fCharacterCounter ++ ; fCurrentOffset ++ ; int hashcode = 0 ; while ( true ) { hashcode = StringHasher . hashChar ( hashcode , ch ) ; ch = data [ index ] & 0xFFFF ; if ( fastcheck == ch ) break ; if ( ch < 0x80 ) { if ( XMLCharacterProperties . fgAsciiNameChar [ ch ] == 0 ) break ; } else { if ( ! fCalledCharPropInit ) { XMLCharacterProperties . initCharFlags ( ) ; fCalledCharPropInit = true ; } if ( ( XMLCharacterProperties . fgCharFlags [ ch ] & XMLCharacterProperties . E_NameCharFlag ) == 0 ) break ; } if ( ++ index == CharDataChunk . CHUNK_SIZE ) { slowLoadNextChar ( ) ; index = 0 ; data = fMostRecentData ; } fCharacterCounter ++ ; fCurrentOffset ++ ; } fCurrentIndex = index ; fMostRecentChar = ch ; hashcode = StringHasher . finishHash ( hashcode ) ; int length = fCurrentOffset - offset ; int nameIndex = fCurrentChunk . addSymbol ( offset , length , hashcode ) ; return nameIndex ; } public boolean scanExpectedName ( char fastcheck , StringPool . CharArrayRange expectedName ) throws Exception { char [ ] expected = expectedName . chars ; int offset = expectedName . offset ; int len = expectedName . length ; int ch = fMostRecentChar ; for ( int i = 0 ; i < len ; i ++ ) { if ( ch != expected [ offset ++ ] ) { skipPastNmtoken ( fastcheck ) ; return false ; } fCharacterCounter ++ ; fCurrentOffset ++ ; if ( ++ fCurrentIndex == CharDataChunk . CHUNK_SIZE ) ch = slowLoadNextChar ( ) ; else ch = ( fMostRecentChar = fMostRecentData [ fCurrentIndex ] & 0xFFFF ) ; } if ( ch == fastcheck ) return true ; if ( ch < 0x80 ) { if ( XMLCharacterProperties . fgAsciiNameChar [ ch ] == 0 ) return true ; } else { if ( ! fCalledCharPropInit ) { XMLCharacterProperties . initCharFlags ( ) ; fCalledCharPropInit = true ; } if ( ( XMLCharacterProperties . fgCharFlags [ ch ] & XMLCharacterProperties . E_NameCharFlag ) == 0 ) return true ; } skipPastNmtoken ( fastcheck ) ; return false ; } public void scanQName ( char fastcheck , QName qname ) throws Exception { int ch = fMostRecentChar ; if ( ch < 0x80 ) { if ( XMLCharacterProperties . fgAsciiInitialNameChar [ ch ] == 0 ) { qname . clear ( ) ; return ; } if ( ch == ':' ) { qname . clear ( ) ; return ; } } else { if ( ! fCalledCharPropInit ) { XMLCharacterProperties . initCharFlags ( ) ; fCalledCharPropInit = true ; } if ( ( XMLCharacterProperties . fgCharFlags [ ch ] & XMLCharacterProperties . E_InitialNameCharFlag ) == 0 ) { qname . clear ( ) ; return ; } } int offset = fCurrentOffset ; int index = fCurrentIndex ; char [ ] data = fMostRecentData ; if ( ++ index == CharDataChunk . CHUNK_SIZE ) { slowLoadNextChar ( ) ; index = 0 ; data = fMostRecentData ; } fCharacterCounter ++ ; fCurrentOffset ++ ; int hashcode = 0 ; int prefixend = - 1 ; while ( true ) { hashcode = StringHasher . hashChar ( hashcode , ch ) ; ch = data [ index ] & 0xFFFF ; if ( fastcheck == ch ) break ; if ( ch < 0x80 ) { if ( XMLCharacterProperties . fgAsciiNameChar [ ch ] == 0 ) break ; if ( ch == ':' ) { if ( prefixend != - 1 ) break ; prefixend = fCurrentOffset ; if ( index + 1 == CharDataChunk . CHUNK_SIZE ) { CharDataChunk savedChunk = fCurrentChunk ; int savedOffset = fCurrentOffset ; ch = slowLoadNextChar ( ) ; fCurrentChunk = savedChunk ; fCurrentOffset = savedOffset ; fMostRecentData = savedChunk . toCharArray ( ) ; } else ch = data [ index + 1 ] & 0xFFFF ; boolean lpok = true ; if ( ch < 0x80 ) { if ( XMLCharacterProperties . fgAsciiInitialNameChar [ ch ] == 0 || ch == ':' ) lpok = false ; } else { if ( ! fCalledCharPropInit ) { XMLCharacterProperties . initCharFlags ( ) ; fCalledCharPropInit = true ; } if ( ( XMLCharacterProperties . fgCharFlags [ ch ] & XMLCharacterProperties . E_InitialNameCharFlag ) == 0 ) lpok = false ; } ch = ':' ; if ( ! lpok ) { prefixend = - 1 ; break ; } } } else { if ( ! fCalledCharPropInit ) { XMLCharacterProperties . initCharFlags ( ) ; fCalledCharPropInit = true ; } if ( ( XMLCharacterProperties . fgCharFlags [ ch ] & XMLCharacterProperties . E_NameCharFlag ) == 0 ) break ; } if ( ++ index == CharDataChunk . CHUNK_SIZE ) { slowLoadNextChar ( ) ; index = 0 ; data = fMostRecentData ; } fCharacterCounter ++ ; fCurrentOffset ++ ; } fCurrentIndex = index ; fMostRecentChar = ch ; hashcode = StringHasher . finishHash ( hashcode ) ; int length = fCurrentOffset - offset ; qname . rawname = fCurrentChunk . addSymbol ( offset , length , hashcode ) ; qname . prefix = prefixend == - 1 ? - 1 : addSymbol ( offset , prefixend - offset ) ; qname . localpart = prefixend == - 1 ? qname . rawname : addSymbol ( prefixend + 1 , fCurrentOffset - ( prefixend + 1 ) ) ; qname . uri = - 1 ; } public int scanContent ( QName element ) throws Exception { if ( fCallClearPreviousChunk && fCurrentChunk . clearPreviousChunk ( ) ) fCallClearPreviousChunk = false ; int charDataOffset = fCurrentOffset ; int ch = fMostRecentChar ; if ( ch < 0x80 ) { switch ( XMLCharacterProperties . fgAsciiWSCharData [ ch ] ) { case 0 : fCharacterCounter ++ ; ch = loadNextChar ( ) ; break ; case 1 : fCharacterCounter ++ ; ch = loadNextChar ( ) ; if ( ! fInCDSect ) { return recognizeMarkup ( ch ) ; } break ; case 2 : fCharacterCounter ++ ; ch = loadNextChar ( ) ; if ( ! fInCDSect ) { return recognizeReference ( ch ) ; } break ; case 3 : fCharacterCounter ++ ; ch = loadNextChar ( ) ; if ( ch != ']' ) break ; if ( fCurrentIndex + 1 == CharDataChunk . CHUNK_SIZE ) { CharDataChunk dataChunk = fCurrentChunk ; int index = fCurrentIndex ; int offset = fCurrentOffset ; if ( loadNextChar ( ) != '>' ) { fCurrentChunk = dataChunk ; fCurrentIndex = index ; fCurrentOffset = offset ; fMostRecentData = dataChunk . toCharArray ( ) ; fMostRecentChar = ']' ; break ; } } else { if ( fMostRecentData [ fCurrentIndex + 1 ] != '>' ) break ; fCurrentIndex ++ ; fCurrentOffset ++ ; } loadNextChar ( ) ; fCharacterCounter += 2 ; return XMLEntityHandler . CONTENT_RESULT_END_OF_CDSECT ; case 4 : if ( ch == 0 && atEOF ( fCurrentOffset + 1 ) ) { changeReaders ( ) ; return XMLEntityHandler . CONTENT_RESULT_INVALID_CHAR ; } return XMLEntityHandler . CONTENT_RESULT_INVALID_CHAR ; case 5 : do { if ( ch == 0x0A ) { fLinefeedCounter ++ ; fCharacterCounter = 1 ; } else fCharacterCounter ++ ; ch = loadNextChar ( ) ; } while ( ch == 0x20 || ch == 0x09 || ch == 0x0A ) ; if ( ch < 0x80 ) { switch ( XMLCharacterProperties . fgAsciiCharData [ ch ] ) { case 0 : fCharacterCounter ++ ; ch = loadNextChar ( ) ; break ; case 1 : if ( ! fInCDSect ) { callCharDataHandler ( charDataOffset , fCurrentOffset , true ) ; fCharacterCounter ++ ; ch = loadNextChar ( ) ; return recognizeMarkup ( ch ) ; } fCharacterCounter ++ ; ch = loadNextChar ( ) ; break ; case 2 : if ( ! fInCDSect ) { callCharDataHandler ( charDataOffset , fCurrentOffset , true ) ; fCharacterCounter ++ ; ch = loadNextChar ( ) ; return recognizeReference ( ch ) ; } fCharacterCounter ++ ; ch = loadNextChar ( ) ; break ; case 3 : int endOffset = fCurrentOffset ; ch = loadNextChar ( ) ; if ( ch != ']' ) { fCharacterCounter ++ ; break ; } if ( fCurrentIndex + 1 == CharDataChunk . CHUNK_SIZE ) { CharDataChunk dataChunk = fCurrentChunk ; int index = fCurrentIndex ; int offset = fCurrentOffset ; if ( loadNextChar ( ) != '>' ) { fCurrentChunk = dataChunk ; fCurrentIndex = index ; fCurrentOffset = offset ; fMostRecentData = dataChunk . toCharArray ( ) ; fMostRecentChar = ']' ; fCharacterCounter ++ ; break ; } } else { if ( fMostRecentData [ fCurrentIndex + 1 ] != '>' ) { fCharacterCounter ++ ; break ; } fCurrentIndex ++ ; fCurrentOffset ++ ; } loadNextChar ( ) ; callCharDataHandler ( charDataOffset , endOffset , true ) ; fCharacterCounter += 3 ; return XMLEntityHandler . CONTENT_RESULT_END_OF_CDSECT ; case 4 : callCharDataHandler ( charDataOffset , fCurrentOffset , true ) ; if ( ch == 0 && atEOF ( fCurrentOffset + 1 ) ) { changeReaders ( ) ; return XMLEntityHandler . CONTENT_RESULT_INVALID_CHAR ; } return XMLEntityHandler . CONTENT_RESULT_INVALID_CHAR ; } } else if ( ! skipMultiByteCharData ( ch ) ) { callCharDataHandler ( charDataOffset , fCurrentOffset , true ) ; return XMLEntityHandler . CONTENT_RESULT_INVALID_CHAR ; } break ; } } else if ( ! skipMultiByteCharData ( ch ) ) { return XMLEntityHandler . CONTENT_RESULT_INVALID_CHAR ; } ch = skipAsciiCharData ( ) ; while ( true ) { if ( ch < 0x80 ) { switch ( XMLCharacterProperties . fgAsciiCharData [ ch ] ) { case 0 : fCharacterCounter ++ ; ch = loadNextChar ( ) ; break ; case 1 : if ( ! fInCDSect ) { callCharDataHandler ( charDataOffset , fCurrentOffset , false ) ; fCharacterCounter ++ ; ch = loadNextChar ( ) ; return recognizeMarkup ( ch ) ; } fCharacterCounter ++ ; ch = loadNextChar ( ) ; break ; case 2 : if ( ! fInCDSect ) { callCharDataHandler ( charDataOffset , fCurrentOffset , false ) ; fCharacterCounter ++ ; ch = loadNextChar ( ) ; return recognizeReference ( ch ) ; } fCharacterCounter ++ ; ch = loadNextChar ( ) ; break ; case 3 : int endOffset = fCurrentOffset ; ch = loadNextChar ( ) ; if ( ch != ']' ) { fCharacterCounter ++ ; break ; } if ( fCurrentIndex + 1 == CharDataChunk . CHUNK_SIZE ) { CharDataChunk dataChunk = fCurrentChunk ; int index = fCurrentIndex ; int offset = fCurrentOffset ; if ( loadNextChar ( ) != '>' ) { fCurrentChunk = dataChunk ; fCurrentIndex = index ; fCurrentOffset = offset ; fMostRecentData = dataChunk . toCharArray ( ) ; fMostRecentChar = ']' ; fCharacterCounter ++ ; break ; } } else { if ( fMostRecentData [ fCurrentIndex + 1 ] != '>' ) { fCharacterCounter ++ ; break ; } fCurrentIndex ++ ; fCurrentOffset ++ ; } loadNextChar ( ) ; callCharDataHandler ( charDataOffset , endOffset , false ) ; fCharacterCounter += 3 ; return XMLEntityHandler . CONTENT_RESULT_END_OF_CDSECT ; case 4 : if ( ch == 0x0A ) { fLinefeedCounter ++ ; fCharacterCounter = 1 ; ch = loadNextChar ( ) ; break ; } callCharDataHandler ( charDataOffset , fCurrentOffset , false ) ; if ( ch == 0 && atEOF ( fCurrentOffset + 1 ) ) { changeReaders ( ) ; return XMLEntityHandler . CONTENT_RESULT_INVALID_CHAR ; } return XMLEntityHandler . CONTENT_RESULT_INVALID_CHAR ; } } else { if ( ! skipMultiByteCharData ( ch ) ) { callCharDataHandler ( charDataOffset , fCurrentOffset , false ) ; return XMLEntityHandler . CONTENT_RESULT_INVALID_CHAR ; } ch = fMostRecentChar ; } } } private static final char [ ] cdata_string = { 'C' , 'D' , 'A' , 'T' , 'A' , '[' } ; private StringPool fStringPool = null ; private boolean fCalledCharPropInit = false ; private boolean fCallClearPreviousChunk = true ; private Vector fDeferredErrors = null ; private class DeferredError { int errorCode ; Object [ ] args ; int offset ; DeferredError ( int ec , Object [ ] a , int o ) { errorCode = ec ; args = a ; offset = o ; } } private int recognizeMarkup ( int ch ) throws Exception { switch ( ch ) { case 0 : return XMLEntityHandler . CONTENT_RESULT_MARKUP_END_OF_INPUT ; case '?' : fCharacterCounter ++ ; loadNextChar ( ) ; return XMLEntityHandler . CONTENT_RESULT_START_OF_PI ; case '!' : fCharacterCounter ++ ; ch = loadNextChar ( ) ; if ( ch == 0 ) { fCharacterCounter -- ; fCurrentOffset -- ; return XMLEntityHandler . CONTENT_RESULT_MARKUP_END_OF_INPUT ; } if ( ch == '-' ) { fCharacterCounter ++ ; ch = loadNextChar ( ) ; if ( ch == 0 ) { fCharacterCounter -= 2 ; fCurrentOffset -= 2 ; return XMLEntityHandler . CONTENT_RESULT_MARKUP_END_OF_INPUT ; } if ( ch == '-' ) { fCharacterCounter ++ ; loadNextChar ( ) ; return XMLEntityHandler . CONTENT_RESULT_START_OF_COMMENT ; } break ; } if ( ch == '[' ) { for ( int i = 0 ; i < 6 ; i ++ ) { fCharacterCounter ++ ; ch = loadNextChar ( ) ; if ( ch == 0 ) { fCharacterCounter -= ( 2 + i ) ; fCurrentOffset -= ( 2 + i ) ; return XMLEntityHandler . CONTENT_RESULT_MARKUP_END_OF_INPUT ; } if ( ch != cdata_string [ i ] ) { return XMLEntityHandler . CONTENT_RESULT_MARKUP_NOT_RECOGNIZED ; } } fCharacterCounter ++ ; loadNextChar ( ) ; return XMLEntityHandler . CONTENT_RESULT_START_OF_CDSECT ; } break ; case '/' : fCharacterCounter ++ ; loadNextChar ( ) ; return XMLEntityHandler . CONTENT_RESULT_START_OF_ETAG ; default : return XMLEntityHandler . CONTENT_RESULT_START_OF_ELEMENT ; } return XMLEntityHandler . CONTENT_RESULT_MARKUP_NOT_RECOGNIZED ; } private int recognizeReference ( int ch ) throws Exception { if ( ch == 0 ) { return XMLEntityHandler . CONTENT_RESULT_REFERENCE_END_OF_INPUT ; } if ( ch == '#' ) { fCharacterCounter ++ ; loadNextChar ( ) ; return XMLEntityHandler . CONTENT_RESULT_START_OF_CHARREF ; } else { return XMLEntityHandler . CONTENT_RESULT_START_OF_ENTITYREF ; } } private boolean skipMultiByteCharData ( int ch ) throws Exception { if ( ch < 0xD800 ) { loadNextChar ( ) ; return true ; } if ( ch > 0xFFFD ) return false ; if ( ch >= 0xDC00 && ch < 0xE000 ) return false ; if ( ch >= 0xD800 && ch < 0xDC00 ) { CharDataChunk savedChunk = fCurrentChunk ; int savedIndex = fCurrentIndex ; int savedOffset = fCurrentOffset ; ch = loadNextChar ( ) ; if ( ch < 0xDC00 || ch >= 0xE000 ) { fCurrentChunk = savedChunk ; fCurrentIndex = savedIndex ; fCurrentOffset = savedOffset ; fMostRecentData = savedChunk . toCharArray ( ) ; fMostRecentChar = fMostRecentData [ savedIndex ] & 0xFFFF ; return false ; } } loadNextChar ( ) ; return true ; } private int skipAsciiCharData ( ) throws Exception { int index = fCurrentIndex ; int offset = fCurrentOffset - index ; while ( true ) { char [ ] data = fMostRecentData ; while ( index < CharDataChunk . CHUNK_SIZE ) { int ch = data [ index ] & 0xFFFF ; if ( ch >= 0x80 ) { fCurrentOffset = offset + index ; fCurrentIndex = index ; fMostRecentChar = ch ; return ch ; } if ( XMLCharacterProperties . fgAsciiCharData [ ch ] == 0 ) { fCharacterCounter ++ ; } else if ( ch == 0x0A ) { fLinefeedCounter ++ ; fCharacterCounter = 1 ; } else { fCurrentOffset = offset + index ; fCurrentIndex = index ; fMostRecentChar = ch ; return ch ; } index ++ ; } offset += index ; slowLoadNextChar ( ) ; index = 0 ; } } private void callCharDataHandler ( int offset , int endOffset , boolean isWhitespace ) throws Exception { int length = endOffset - offset ; if ( ! fSendCharDataAsCharArray ) { int stringIndex = addString ( offset , length ) ; if ( isWhitespace ) fCharDataHandler . processWhitespace ( stringIndex ) ; else fCharDataHandler . processCharacters ( stringIndex ) ; return ; } CharDataChunk dataChunk = fCurrentChunk . chunkFor ( offset ) ; int index = offset & CharDataChunk . CHUNK_MASK ; if ( index + length <= CharDataChunk . CHUNK_SIZE ) { if ( length != 0 ) { if ( isWhitespace ) fCharDataHandler . processWhitespace ( dataChunk . toCharArray ( ) , index , length ) ; else fCharDataHandler . processCharacters ( dataChunk . toCharArray ( ) , index , length ) ; } return ; } int count = length ; int nbytes = CharDataChunk . CHUNK_SIZE - index ; if ( isWhitespace ) fCharDataHandler . processWhitespace ( dataChunk . toCharArray ( ) , index , nbytes ) ; else fCharDataHandler . processCharacters ( dataChunk . toCharArray ( ) , index , nbytes ) ; count -= nbytes ; do { dataChunk = dataChunk . nextChunk ( ) ; if ( dataChunk == null ) { throw new RuntimeException ( new ImplementationMessages ( ) . createMessage ( null , ImplementationMessages . INT_DCN , 0 , null ) ) ; } nbytes = count <= CharDataChunk . CHUNK_SIZE ? count : CharDataChunk . CHUNK_SIZE ; if ( isWhitespace ) fCharDataHandler . processWhitespace ( dataChunk . toCharArray ( ) , 0 , nbytes ) ; else fCharDataHandler . processCharacters ( dataChunk . toCharArray ( ) , 0 , nbytes ) ; count -= nbytes ; } while ( count > 0 ) ; } private int slowLoadNextChar ( ) throws Exception { fCallClearPreviousChunk = true ; if ( fCurrentChunk . nextChunk ( ) != null ) { fCurrentChunk = fCurrentChunk . nextChunk ( ) ; fCurrentIndex = 0 ; fMostRecentData = fCurrentChunk . toCharArray ( ) ; return ( fMostRecentChar = fMostRecentData [ fCurrentIndex ] & 0xFFFF ) ; } else { fCurrentChunk = CharDataChunk . createChunk ( fStringPool , fCurrentChunk ) ; return fillCurrentChunk ( ) ; } } private int loadNextChar ( ) throws Exception { fCurrentOffset ++ ; if ( ++ fCurrentIndex == CharDataChunk . CHUNK_SIZE ) return slowLoadNextChar ( ) ; return ( fMostRecentChar = fMostRecentData [ fCurrentIndex ] & 0xFFFF ) ; } private boolean atEOF ( int offset ) { return ( offset > fLength ) ; } } 	0	['33', '2', '2', '16', '70', '0', '3', '14', '20', '0.565625', '3041', '1', '2', '0.184210526', '0.174479167', '1', '3', '90.84848485', '2', '1.0606', '0']
package org . apache . xerces . utils ; public final class XMLCharacterProperties { public static boolean validVersionNum ( String version ) { if ( version . length ( ) == 0 ) return false ; for ( int i = 0 ; i < version . length ( ) ; i ++ ) { char ch = version . charAt ( i ) ; if ( ch > 'z' || fgAsciiNameChar [ ch ] == 0 ) return false ; } return true ; } public static boolean validEncName ( String encoding ) { if ( encoding . length ( ) == 0 ) return false ; char ch = encoding . charAt ( 0 ) ; if ( ch > 'z' || fgAsciiAlphaChar [ ch ] == 0 ) return false ; for ( int i = 1 ; i < encoding . length ( ) ; i ++ ) { ch = encoding . charAt ( i ) ; if ( ch > 'z' || fgAsciiEncNameChar [ ch ] == 0 ) return false ; } return true ; } public static int validPublicId ( String publicId ) { if ( publicId . length ( ) == 0 ) return - 1 ; for ( int i = 0 ; i < publicId . length ( ) ; i ++ ) { char ch = publicId . charAt ( i ) ; if ( ch > 'z' || fgAsciiPubidChar [ ch ] == 0 ) return i ; } return - 1 ; } public static boolean validName ( String name ) { if ( name . length ( ) == 0 ) return false ; char ch = name . charAt ( 0 ) ; if ( ch > 'z' ) { if ( ( fgCharFlags [ ch ] & E_InitialNameCharFlag ) == 0 ) return false ; } else if ( fgAsciiInitialNameChar [ ch ] == 0 ) return false ; for ( int i = 1 ; i < name . length ( ) ; i ++ ) { ch = name . charAt ( i ) ; if ( ch > 'z' ) { if ( ( fgCharFlags [ ch ] & E_NameCharFlag ) == 0 ) return false ; } else if ( fgAsciiNameChar [ ch ] == 0 ) return false ; } return true ; } public static boolean validNCName ( String name ) { if ( name . length ( ) == 0 ) return false ; char ch = name . charAt ( 0 ) ; if ( ch > 'z' ) { if ( ( fgCharFlags [ ch ] & E_InitialNameCharFlag ) == 0 ) return false ; } else if ( fgAsciiInitialNCNameChar [ ch ] == 0 ) return false ; for ( int i = 1 ; i < name . length ( ) ; i ++ ) { ch = name . charAt ( i ) ; if ( ch > 'z' ) { if ( ( fgCharFlags [ ch ] & E_NameCharFlag ) == 0 ) return false ; } else if ( fgAsciiNCNameChar [ ch ] == 0 ) return false ; } return true ; } public static boolean validNmtoken ( String nmtoken ) { if ( nmtoken . length ( ) == 0 ) return false ; for ( int i = 0 ; i < nmtoken . length ( ) ; i ++ ) { char ch = nmtoken . charAt ( i ) ; if ( ch > 'z' ) { if ( ( fgCharFlags [ ch ] & E_NameCharFlag ) == 0 ) return false ; } else if ( fgAsciiNameChar [ ch ] == 0 ) { return false ; } } return true ; } public static final byte fgAsciiXDigitChar [ ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 } ; public static final byte fgAsciiAlphaChar [ ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 0 , 0 , 0 , 0 } ; public static final byte fgAsciiEncNameChar [ ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , 1 , 0 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 0 , 0 , 0 , 1 , 0 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 0 , 0 , 0 , 0 } ; public static final byte fgAsciiPubidChar [ ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , 0 , 0 , 1 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , 1 , 0 , 1 , 1 , 1 , 0 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 1 , 0 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 0 , 0 , 0 , 1 , 0 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 0 , 0 , 0 , 0 } ; public static final byte fgAsciiInitialNameChar [ ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 0 , 0 , 0 , 1 , 0 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 0 , 0 , 0 , 0 } ; public static final byte fgAsciiNameChar [ ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , 1 , 0 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 0 , 0 , 0 , 1 , 0 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 0 , 0 , 0 , 0 } ; public static final byte fgAsciiInitialNCNameChar [ ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 0 , 0 , 0 , 1 , 0 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 0 , 0 , 0 , 0 } ; public static final byte fgAsciiNCNameChar [ ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , 1 , 0 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 0 , 0 , 0 , 1 , 0 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 0 , 0 , 0 , 0 } ; public static final byte fgAsciiCharData [ ] = { 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 0 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 0 , 0 , 0 , 0 , 0 , 0 , 2 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 3 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 } ; public static final byte fgAsciiWSCharData [ ] = { 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 5 , 5 , 4 , 4 , 5 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 5 , 0 , 0 , 0 , 0 , 0 , 2 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 3 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 } ; public static final byte E_CharDataFlag = 1 << 0 ; public static final byte E_InitialNameCharFlag = 1 << 1 ; public static final byte E_NameCharFlag = 1 << 2 ; public static byte [ ] fgCharFlags = null ; public static synchronized void initCharFlags ( ) { if ( fgCharFlags == null ) { fgCharFlags = new byte [ 0x10000 ] ; setFlagForRange ( fgCharDataRanges , E_CharDataFlag ) ; setFlagForRange ( fgInitialNameCharRanges , ( byte ) ( E_InitialNameCharFlag | E_NameCharFlag ) ) ; setFlagForRange ( fgNameCharRanges , E_NameCharFlag ) ; } } private static void setFlagForRange ( char [ ] ranges , byte flag ) { int i ; int ch ; for ( i = 0 ; ( ch = ranges [ i ] ) != 0 ; i += 2 ) { int endch = ranges [ i + 1 ] ; while ( ch <= endch ) fgCharFlags [ ch ++ ] |= flag ; } for ( i ++ ; ( ch = ranges [ i ] ) != 0 ; i ++ ) fgCharFlags [ ch ] |= flag ; } private static final char fgCharDataRanges [ ] = { 0x0020 , 0x0025 , 0x0027 , 0x003B , 0x003D , 0x005C , 0x005E , 0xD7FF , 0xE000 , 0xFFFD , 0x0000 , 0x0009 , 0x0000 } ; private static final char fgInitialNameCharRanges [ ] = { 0x0041 , 0x005A , 0x0061 , 0x007A , 0x00C0 , 0x00D6 , 0x00D8 , 0x00F6 , 0x00F8 , 0x0131 , 0x0134 , 0x013E , 0x0141 , 0x0148 , 0x014A , 0x017E , 0x0180 , 0x01C3 , 0x01CD , 0x01F0 , 0x01F4 , 0x01F5 , 0x01FA , 0x0217 , 0x0250 , 0x02A8 , 0x02BB , 0x02C1 , 0x0388 , 0x038A , 0x038E , 0x03A1 , 0x03A3 , 0x03CE , 0x03D0 , 0x03D6 , 0x03E2 , 0x03F3 , 0x0401 , 0x040C , 0x040E , 0x044F , 0x0451 , 0x045C , 0x045E , 0x0481 , 0x0490 , 0x04C4 , 0x04C7 , 0x04C8 , 0x04CB , 0x04CC , 0x04D0 , 0x04EB , 0x04EE , 0x04F5 , 0x04F8 , 0x04F9 , 0x0531 , 0x0556 , 0x0561 , 0x0586 , 0x05D0 , 0x05EA , 0x05F0 , 0x05F2 , 0x0621 , 0x063A , 0x0641 , 0x064A , 0x0671 , 0x06B7 , 0x06BA , 0x06BE , 0x06C0 , 0x06CE , 0x06D0 , 0x06D3 , 0x06E5 , 0x06E6 , 0x0905 , 0x0939 , 0x0958 , 0x0961 , 0x0985 , 0x098C , 0x098F , 0x0990 , 0x0993 , 0x09A8 , 0x09AA , 0x09B0 , 0x09B6 , 0x09B9 , 0x09DC , 0x09DD , 0x09DF , 0x09E1 , 0x09F0 , 0x09F1 , 0x0A05 , 0x0A0A , 0x0A0F , 0x0A10 , 0x0A13 , 0x0A28 , 0x0A2A , 0x0A30 , 0x0A32 , 0x0A33 , 0x0A35 , 0x0A36 , 0x0A38 , 0x0A39 , 0x0A59 , 0x0A5C , 0x0A72 , 0x0A74 , 0x0A85 , 0x0A8B , 0x0A8F , 0x0A91 , 0x0A93 , 0x0AA8 , 0x0AAA , 0x0AB0 , 0x0AB2 , 0x0AB3 , 0x0AB5 , 0x0AB9 , 0x0B05 , 0x0B0C , 0x0B0F , 0x0B10 , 0x0B13 , 0x0B28 , 0x0B2A , 0x0B30 , 0x0B32 , 0x0B33 , 0x0B36 , 0x0B39 , 0x0B5C , 0x0B5D , 0x0B5F , 0x0B61 , 0x0B85 , 0x0B8A , 0x0B8E , 0x0B90 , 0x0B92 , 0x0B95 , 0x0B99 , 0x0B9A , 0x0B9E , 0x0B9F , 0x0BA3 , 0x0BA4 , 0x0BA8 , 0x0BAA , 0x0BAE , 0x0BB5 , 0x0BB7 , 0x0BB9 , 0x0C05 , 0x0C0C , 0x0C0E , 0x0C10 , 0x0C12 , 0x0C28 , 0x0C2A , 0x0C33 , 0x0C35 , 0x0C39 , 0x0C60 , 0x0C61 , 0x0C85 , 0x0C8C , 0x0C8E , 0x0C90 , 0x0C92 , 0x0CA8 , 0x0CAA , 0x0CB3 , 0x0CB5 , 0x0CB9 , 0x0CE0 , 0x0CE1 , 0x0D05 , 0x0D0C , 0x0D0E , 0x0D10 , 0x0D12 , 0x0D28 , 0x0D2A , 0x0D39 , 0x0D60 , 0x0D61 , 0x0E01 , 0x0E2E , 0x0E32 , 0x0E33 , 0x0E40 , 0x0E45 , 0x0E81 , 0x0E82 , 0x0E87 , 0x0E88 , 0x0E94 , 0x0E97 , 0x0E99 , 0x0E9F , 0x0EA1 , 0x0EA3 , 0x0EAA , 0x0EAB , 0x0EAD , 0x0EAE , 0x0EB2 , 0x0EB3 , 0x0EC0 , 0x0EC4 , 0x0F40 , 0x0F47 , 0x0F49 , 0x0F69 , 0x10A0 , 0x10C5 , 0x10D0 , 0x10F6 , 0x1102 , 0x1103 , 0x1105 , 0x1107 , 0x110B , 0x110C , 0x110E , 0x1112 , 0x1154 , 0x1155 , 0x115F , 0x1161 , 0x116D , 0x116E , 0x1172 , 0x1173 , 0x11AE , 0x11AF , 0x11B7 , 0x11B8 , 0x11BC , 0x11C2 , 0x1E00 , 0x1E9B , 0x1EA0 , 0x1EF9 , 0x1F00 , 0x1F15 , 0x1F18 , 0x1F1D , 0x1F20 , 0x1F45 , 0x1F48 , 0x1F4D , 0x1F50 , 0x1F57 , 0x1F5F , 0x1F7D , 0x1F80 , 0x1FB4 , 0x1FB6 , 0x1FBC , 0x1FC2 , 0x1FC4 , 0x1FC6 , 0x1FCC , 0x1FD0 , 0x1FD3 , 0x1FD6 , 0x1FDB , 0x1FE0 , 0x1FEC , 0x1FF2 , 0x1FF4 , 0x1FF6 , 0x1FFC , 0x212A , 0x212B , 0x2180 , 0x2182 , 0x3041 , 0x3094 , 0x30A1 , 0x30FA , 0x3105 , 0x312C , 0xAC00 , 0xD7A3 , 0x3021 , 0x3029 , 0x4E00 , 0x9FA5 , 0x0000 , 0x003A , 0x005F , 0x0386 , 0x038C , 0x03DA , 0x03DC , 0x03DE , 0x03E0 , 0x0559 , 0x06D5 , 0x093D , 0x09B2 , 0x0A5E , 0x0A8D , 0x0ABD , 0x0AE0 , 0x0B3D , 0x0B9C , 0x0CDE , 0x0E30 , 0x0E84 , 0x0E8A , 0x0E8D , 0x0EA5 , 0x0EA7 , 0x0EB0 , 0x0EBD , 0x1100 , 0x1109 , 0x113C , 0x113E , 0x1140 , 0x114C , 0x114E , 0x1150 , 0x1159 , 0x1163 , 0x1165 , 0x1167 , 0x1169 , 0x1175 , 0x119E , 0x11A8 , 0x11AB , 0x11BA , 0x11EB , 0x11F0 , 0x11F9 , 0x1F59 , 0x1F5B , 0x1F5D , 0x1FBE , 0x2126 , 0x212E , 0x3007 , 0x0000 } ; private static final char fgNameCharRanges [ ] = { 0x002D , 0x002E , 0x0300 , 0x0345 , 0x0360 , 0x0361 , 0x0483 , 0x0486 , 0x0591 , 0x05A1 , 0x05A3 , 0x05B9 , 0x05BB , 0x05BD , 0x05C1 , 0x05C2 , 0x064B , 0x0652 , 0x06D6 , 0x06DC , 0x06DD , 0x06DF , 0x06E0 , 0x06E4 , 0x06E7 , 0x06E8 , 0x06EA , 0x06ED , 0x0901 , 0x0903 , 0x093E , 0x094C , 0x0951 , 0x0954 , 0x0962 , 0x0963 , 0x0981 , 0x0983 , 0x09C0 , 0x09C4 , 0x09C7 , 0x09C8 , 0x09CB , 0x09CD , 0x09E2 , 0x09E3 , 0x0A40 , 0x0A42 , 0x0A47 , 0x0A48 , 0x0A4B , 0x0A4D , 0x0A70 , 0x0A71 , 0x0A81 , 0x0A83 , 0x0ABE , 0x0AC5 , 0x0AC7 , 0x0AC9 , 0x0ACB , 0x0ACD , 0x0B01 , 0x0B03 , 0x0B3E , 0x0B43 , 0x0B47 , 0x0B48 , 0x0B4B , 0x0B4D , 0x0B56 , 0x0B57 , 0x0B82 , 0x0B83 , 0x0BBE , 0x0BC2 , 0x0BC6 , 0x0BC8 , 0x0BCA , 0x0BCD , 0x0C01 , 0x0C03 , 0x0C3E , 0x0C44 , 0x0C46 , 0x0C48 , 0x0C4A , 0x0C4D , 0x0C55 , 0x0C56 , 0x0C82 , 0x0C83 , 0x0CBE , 0x0CC4 , 0x0CC6 , 0x0CC8 , 0x0CCA , 0x0CCD , 0x0CD5 , 0x0CD6 , 0x0D02 , 0x0D03 , 0x0D3E , 0x0D43 , 0x0D46 , 0x0D48 , 0x0D4A , 0x0D4D , 0x0E34 , 0x0E3A , 0x0E47 , 0x0E4E , 0x0EB4 , 0x0EB9 , 0x0EBB , 0x0EBC , 0x0EC8 , 0x0ECD , 0x0F18 , 0x0F19 , 0x0F71 , 0x0F84 , 0x0F86 , 0x0F8B , 0x0F90 , 0x0F95 , 0x0F99 , 0x0FAD , 0x0FB1 , 0x0FB7 , 0x20D0 , 0x20DC , 0x302A , 0x302F , 0x0030 , 0x0039 , 0x0660 , 0x0669 , 0x06F0 , 0x06F9 , 0x0966 , 0x096F , 0x09E6 , 0x09EF , 0x0A66 , 0x0A6F , 0x0AE6 , 0x0AEF , 0x0B66 , 0x0B6F , 0x0BE7 , 0x0BEF , 0x0C66 , 0x0C6F , 0x0CE6 , 0x0CEF , 0x0D66 , 0x0D6F , 0x0E50 , 0x0E59 , 0x0ED0 , 0x0ED9 , 0x0F20 , 0x0F29 , 0x3031 , 0x3035 , 0x309D , 0x309E , 0x30FC , 0x30FE , 0x0000 , 0x05BF , 0x05C4 , 0x0670 , 0x093C , 0x094D , 0x09BC , 0x09BE , 0x09BF , 0x09D7 , 0x0A02 , 0x0A3C , 0x0A3E , 0x0A3F , 0x0ABC , 0x0B3C , 0x0BD7 , 0x0D57 , 0x0E31 , 0x0EB1 , 0x0F35 , 0x0F37 , 0x0F39 , 0x0F3E , 0x0F3F , 0x0F97 , 0x0FB9 , 0x20E1 , 0x3099 , 0x309A , 0x00B7 , 0x02D0 , 0x02D1 , 0x0387 , 0x0640 , 0x0E46 , 0x0EC6 , 0x3005 , 0x0000 } ; } 	0	['10', '1', '0', '10', '13', '5', '10', '0', '8', '0.908496732', '7825', '0.176470588', '0', '0', '0.25', '0', '0', '779.8', '9', '4.7', '0']
package org . apache . xerces . dom ; import java . io . * ; import java . util . Vector ; import org . w3c . dom . * ; import org . w3c . dom . events . * ; class LCount { static java . util . Hashtable lCounts = new java . util . Hashtable ( ) ; public int captures = 0 , bubbles = 0 , defaults = 0 ; static LCount lookup ( String evtName ) { LCount lc = ( LCount ) lCounts . get ( evtName ) ; if ( lc == null ) lCounts . put ( evtName , ( lc = new LCount ( ) ) ) ; return lc ; } } 	0	['3', '1', '0', '5', '7', '1', '5', '0', '0', '0.5', '42', '0', '0', '0', '0.5', '0', '0', '11.66666667', '2', '0.6667', '0']
package org . apache . wml . dom ; import org . apache . wml . * ; public class WMLOneventElementImpl extends WMLElementImpl implements WMLOneventElement { public WMLOneventElementImpl ( WMLDocumentImpl owner , String tagName ) { super ( owner , tagName ) ; } public void setClassName ( String newValue ) { setAttribute ( "class" , newValue ) ; } public String getClassName ( ) { return getAttribute ( "class" ) ; } public void setId ( String newValue ) { setAttribute ( "id" , newValue ) ; } public String getId ( ) { return getAttribute ( "id" ) ; } public void setType ( String newValue ) { setAttribute ( "type" , newValue ) ; } public String getType ( ) { return getAttribute ( "type" ) ; } } 	0	['7', '4', '0', '3', '10', '21', '0', '3', '7', '2', '39', '0', '0', '0.931818182', '0.571428571', '1', '4', '4.571428571', '1', '0.8571', '0']
package org . w3c . dom ; public interface DocumentFragment extends Node { } 	0	['0', '1', '0', '0', '0', '0', '0', '0', '0', '2', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0']
package org . w3c . dom . traversal ; import org . w3c . dom . Node ; import org . w3c . dom . DOMException ; public interface NodeIterator { public Node getRoot ( ) ; public int getWhatToShow ( ) ; public NodeFilter getFilter ( ) ; public boolean getExpandEntityReferences ( ) ; public Node nextNode ( ) throws DOMException ; public Node previousNode ( ) throws DOMException ; public void detach ( ) ; } 	0	['7', '1', '0', '0', '7', '21', '0', '0', '7', '2', '7', '0', '0', '0', '1', '0', '0', '0', '1', '1', '0']
package org . apache . xerces . readers ; import org . apache . xerces . framework . XMLErrorReporter ; import org . apache . xerces . utils . CharDataChunk ; import org . apache . xerces . utils . StringPool ; import org . apache . xerces . utils . ImplementationMessages ; import java . io . InputStream ; final class UTF8CharReader extends AbstractCharReader { UTF8CharReader ( XMLEntityHandler entityHandler , XMLErrorReporter errorReporter , boolean sendCharDataAsCharArray , InputStream dataStream , StringPool stringPool ) throws Exception { super ( entityHandler , errorReporter , sendCharDataAsCharArray , stringPool ) ; fInputStream = dataStream ; fillCurrentChunk ( ) ; } private InputStream fInputStream = null ; private boolean fCheckOverflow = false ; private byte [ ] fOverflow = null ; private int fOverflowOffset = 0 ; private int fOverflowEnd = 0 ; private int fOutputOffset = 0 ; private boolean fSkipLinefeed = false ; private int fPartialMultiByteIn = 0 ; private byte [ ] fPartialMultiByteChar = new byte [ 3 ] ; private int fPartialSurrogatePair = 0 ; private boolean fPartialMultiByteResult = false ; protected int fillCurrentChunk ( ) throws Exception { char [ ] recycledData = fCurrentChunk . toCharArray ( ) ; fOutputOffset = 0 ; if ( fCheckOverflow ) { fMostRecentData = recycledData ; if ( fOverflowEnd < CharDataChunk . CHUNK_SIZE ) { recycledData = null ; if ( fOverflowEnd > 0 ) { if ( fMostRecentData == null || fMostRecentData . length < 1 + fOverflowEnd - fOverflowOffset ) fMostRecentData = new char [ 1 + fOverflowEnd - fOverflowOffset ] ; copyNormalize ( fOverflow , fOverflowOffset , fMostRecentData , fOutputOffset ) ; } else { if ( fMostRecentData == null ) fMostRecentData = new char [ 1 ] ; } fMostRecentData [ fOutputOffset ] = 0 ; fOverflow = null ; fLength += fOutputOffset ; fCurrentIndex = 0 ; fCurrentChunk . setCharArray ( fMostRecentData ) ; return ( fMostRecentChar = fMostRecentData [ 0 ] ) ; } if ( fMostRecentData == null || fMostRecentData . length < CharDataChunk . CHUNK_SIZE ) fMostRecentData = new char [ CharDataChunk . CHUNK_SIZE ] ; else recycledData = null ; copyNormalize ( fOverflow , fOverflowOffset , fMostRecentData , fOutputOffset ) ; fCheckOverflow = false ; } else { if ( fOverflow == null ) fOverflow = new byte [ CharDataChunk . CHUNK_SIZE ] ; fMostRecentData = null ; } while ( true ) { fOverflowOffset = 0 ; fOverflowEnd = 0 ; int capacity = CharDataChunk . CHUNK_SIZE ; int result = 0 ; do { try { result = fInputStream . read ( fOverflow , fOverflowEnd , capacity ) ; } catch ( java . io . IOException ex ) { result = - 1 ; } if ( result == - 1 ) { fInputStream . close ( ) ; fInputStream = null ; if ( fMostRecentData == null ) { fMostRecentData = recycledData ; if ( fMostRecentData == null || fMostRecentData . length < 1 + fOverflowEnd ) fMostRecentData = new char [ 1 + fOverflowEnd ] ; else recycledData = null ; copyNormalize ( fOverflow , fOverflowOffset , fMostRecentData , fOutputOffset ) ; fOverflow = null ; fMostRecentData [ fOutputOffset ] = 0 ; } else { boolean alldone = copyNormalize ( fOverflow , fOverflowOffset , fMostRecentData , fOutputOffset ) ; if ( alldone ) { if ( fOverflowEnd == CharDataChunk . CHUNK_SIZE ) { fCheckOverflow = true ; fOverflowOffset = 0 ; fOverflowEnd = 0 ; } else { fOverflow = null ; fMostRecentData [ fOutputOffset ] = 0 ; } } else { fCheckOverflow = true ; } } break ; } if ( result > 0 ) { fOverflowEnd += result ; capacity -= result ; } } while ( capacity > 0 ) ; if ( result == - 1 ) break ; if ( fMostRecentData != null ) { boolean alldone = copyNormalize ( fOverflow , fOverflowOffset , fMostRecentData , fOutputOffset ) ; if ( fOutputOffset == CharDataChunk . CHUNK_SIZE ) { if ( ! alldone ) { fCheckOverflow = true ; } break ; } } else { fMostRecentData = recycledData ; if ( fMostRecentData == null || fMostRecentData . length < CharDataChunk . CHUNK_SIZE ) fMostRecentData = new char [ CharDataChunk . CHUNK_SIZE ] ; else recycledData = null ; copyNormalize ( fOverflow , fOverflowOffset , fMostRecentData , fOutputOffset ) ; if ( fOutputOffset == CharDataChunk . CHUNK_SIZE ) { break ; } } } fLength += fOutputOffset ; fCurrentIndex = 0 ; fCurrentChunk . setCharArray ( fMostRecentData ) ; return ( fMostRecentChar = fMostRecentData [ 0 ] ) ; } private boolean copyNormalize ( byte [ ] in , int inOffset , char [ ] out , int outOffset ) throws Exception { int inEnd = fOverflowEnd ; int outEnd = out . length ; if ( inOffset == inEnd ) return true ; byte b = in [ inOffset ] ; if ( fSkipLinefeed ) { fSkipLinefeed = false ; if ( b == 0x0A ) { if ( ++ inOffset == inEnd ) return exitNormalize ( inOffset , outOffset , true ) ; b = in [ inOffset ] ; } } else if ( fPartialMultiByteIn > 0 ) { if ( ! handlePartialMultiByteChar ( b , in , inOffset , inEnd , out , outOffset , outEnd ) ) return fPartialMultiByteResult ; inOffset = fOverflowOffset ; outOffset = fOutputOffset ; b = in [ inOffset ] ; } while ( outOffset < outEnd ) { int inCount = inEnd - inOffset ; int outCount = outEnd - outOffset ; if ( inCount > outCount ) inCount = outCount ; inOffset ++ ; while ( true ) { while ( b == 0x0D || b < 0 ) { if ( b == 0x0D ) { out [ outOffset ++ ] = 0x0A ; if ( inOffset == inEnd ) { fSkipLinefeed = true ; return exitNormalize ( inOffset , outOffset , true ) ; } b = in [ inOffset ] ; if ( b == 0x0A ) { if ( ++ inOffset == inEnd ) return exitNormalize ( inOffset , outOffset , true ) ; b = in [ inOffset ] ; } if ( outOffset == outEnd ) return exitNormalize ( inOffset , outOffset , false ) ; } else { if ( ! handleMultiByteChar ( b , in , inOffset , inEnd , out , outOffset , outEnd ) ) return fPartialMultiByteResult ; inOffset = fOverflowOffset ; outOffset = fOutputOffset ; b = in [ inOffset ] ; } inCount = inEnd - inOffset ; outCount = outEnd - outOffset ; if ( inCount > outCount ) inCount = outCount ; inOffset ++ ; } while ( true ) { out [ outOffset ++ ] = ( char ) b ; if ( -- inCount == 0 ) break ; b = in [ inOffset ++ ] ; if ( b == 0x0D || b < 0 ) break ; } if ( inCount == 0 ) break ; } if ( inOffset == inEnd ) break ; } return exitNormalize ( inOffset , outOffset , inOffset == inEnd ) ; } private boolean exitNormalize ( int inOffset , int outOffset , boolean result ) { fOverflowOffset = inOffset ; fOutputOffset = outOffset ; return result ; } private void savePartialMultiByte ( int inCount , byte bz , byte by , byte bx ) { fPartialMultiByteIn = inCount ; fPartialMultiByteChar [ -- inCount ] = bz ; fPartialMultiByteChar [ -- inCount ] = by ; fPartialMultiByteChar [ -- inCount ] = bx ; } private void savePartialMultiByte ( int inCount , byte bz , byte by ) { fPartialMultiByteIn = inCount ; fPartialMultiByteChar [ -- inCount ] = bz ; fPartialMultiByteChar [ -- inCount ] = by ; } private void savePartialMultiByte ( int inCount , byte bz ) { fPartialMultiByteIn = inCount ; fPartialMultiByteChar [ -- inCount ] = bz ; } private boolean handleMultiByteChar ( byte b , byte [ ] in , int inOffset , int inEnd , char [ ] out , int outOffset , int outEnd ) throws Exception { if ( inOffset == inEnd ) { savePartialMultiByte ( 1 , b ) ; fPartialMultiByteResult = exitNormalize ( inOffset , outOffset , true ) ; return false ; } byte b1 = in [ inOffset ++ ] ; if ( ( b1 & 0xc0 ) != 0x80 ) { Object [ ] args = { Integer . toHexString ( b & 0xff ) , Integer . toHexString ( b1 & 0xff ) } ; deferException ( ImplementationMessages . ENC5 , args , outOffset ) ; out [ outOffset ++ ] = 0 ; return exitNormalize ( inOffset , outOffset , true ) ; } if ( ( b & 0xe0 ) == 0xc0 ) { int ch = ( ( 0x1f & b ) << 6 ) + ( 0x3f & b1 ) ; out [ outOffset ++ ] = ( char ) ch ; if ( inOffset == inEnd || outOffset == outEnd ) { fPartialMultiByteResult = exitNormalize ( inOffset , outOffset , inOffset == inEnd ) ; return false ; } } else { if ( inOffset == inEnd ) { savePartialMultiByte ( 2 , b1 , b ) ; fPartialMultiByteResult = exitNormalize ( inOffset , outOffset , true ) ; return false ; } byte b2 = in [ inOffset ++ ] ; if ( ( b2 & 0xc0 ) != 0x80 ) { Object [ ] args = { Integer . toHexString ( b & 0xff ) , Integer . toHexString ( b1 & 0xff ) , Integer . toHexString ( b2 & 0xff ) } ; deferException ( ImplementationMessages . ENC6 , args , outOffset ) ; out [ outOffset ++ ] = 0 ; return exitNormalize ( inOffset , outOffset , true ) ; } if ( ( b & 0xf0 ) == 0xe0 ) { int ch = ( ( 0x0f & b ) << 12 ) + ( ( 0x3f & b1 ) << 6 ) + ( 0x3f & b2 ) ; out [ outOffset ++ ] = ( char ) ch ; if ( inOffset == inEnd || outOffset == outEnd ) { fPartialMultiByteResult = exitNormalize ( inOffset , outOffset , inOffset == inEnd ) ; return false ; } } else { if ( ( b & 0xf8 ) != 0xf0 ) { Object [ ] args = { Integer . toHexString ( b & 0xff ) } ; deferException ( ImplementationMessages . ENC4 , args , outOffset ) ; out [ outOffset ++ ] = 0 ; return exitNormalize ( inOffset , outOffset , true ) ; } if ( inOffset == inEnd ) { savePartialMultiByte ( 3 , b2 , b1 , b ) ; fPartialMultiByteResult = exitNormalize ( inOffset , outOffset , true ) ; return false ; } byte b3 = in [ inOffset ++ ] ; if ( ( b3 & 0xc0 ) != 0x80 ) { Object [ ] args = { Integer . toHexString ( b & 0xff ) , Integer . toHexString ( b1 & 0xff ) , Integer . toHexString ( b2 & 0xff ) , Integer . toHexString ( b3 & 0xff ) } ; deferException ( ImplementationMessages . ENC7 , args , outOffset ) ; out [ outOffset ++ ] = 0 ; return exitNormalize ( inOffset , outOffset , true ) ; } int ch = ( ( 0x0f & b ) << 18 ) + ( ( 0x3f & b1 ) << 12 ) + ( ( 0x3f & b2 ) << 6 ) + ( 0x3f & b3 ) ; if ( ch >= 0x10000 ) { out [ outOffset ++ ] = ( char ) ( ( ( ch - 0x00010000 ) > > 10 ) + 0xd800 ) ; ch = ( ( ( ch - 0x00010000 ) & 0x3ff ) + 0xdc00 ) ; if ( outOffset == outEnd ) { fPartialSurrogatePair = ch ; fPartialMultiByteResult = exitNormalize ( inOffset , outOffset , inOffset == inEnd ) ; return false ; } } out [ outOffset ++ ] = ( char ) ch ; if ( inOffset == inEnd || outOffset == outEnd ) { fPartialMultiByteResult = exitNormalize ( inOffset , outOffset , inOffset == inEnd ) ; return false ; } } } return exitNormalize ( inOffset , outOffset , true ) ; } private boolean handlePartialMultiByteChar ( byte b , byte [ ] in , int inOffset , int inEnd , char [ ] out , int outOffset , int outEnd ) throws Exception { if ( outOffset == outEnd ) { fPartialMultiByteResult = exitNormalize ( inOffset , outOffset , inOffset == inEnd ) ; return false ; } if ( fPartialMultiByteIn == 4 ) { out [ outOffset ++ ] = ( char ) fPartialSurrogatePair ; if ( outOffset == outEnd ) { fPartialMultiByteResult = exitNormalize ( inOffset , outOffset , false ) ; return false ; } fOutputOffset = outOffset ; return true ; } int byteIn = fPartialMultiByteIn ; fPartialMultiByteIn = 0 ; byte b1 = 0 ; byte b2 = 0 ; byte b3 = 0 ; switch ( byteIn ) { case 1 : b1 = b ; break ; case 2 : b2 = b ; break ; case 3 : b3 = b ; break ; } int i = byteIn ; switch ( byteIn ) { case 3 : b2 = fPartialMultiByteChar [ -- i ] ; case 2 : b1 = fPartialMultiByteChar [ -- i ] ; case 1 : b = fPartialMultiByteChar [ -- i ] ; } switch ( byteIn ) { case 1 : if ( ( b1 & 0xc0 ) != 0x80 ) { Object [ ] args = { Integer . toHexString ( b ) , Integer . toHexString ( b1 ) } ; deferException ( ImplementationMessages . ENC5 , args , outOffset ) ; out [ outOffset ++ ] = 0 ; break ; } case 2 : if ( ( b & 0xe0 ) == 0xc0 ) { int ch = ( ( 0x1f & b ) << 6 ) + ( 0x3f & b1 ) ; out [ outOffset ++ ] = ( char ) ch ; if ( outOffset == outEnd ) { fPartialMultiByteResult = exitNormalize ( inOffset , outOffset , false ) ; return false ; } if ( byteIn < 2 && ++ inOffset == inEnd ) { fPartialMultiByteResult = exitNormalize ( inOffset , outOffset , true ) ; return false ; } break ; } if ( byteIn < 2 ) { if ( ++ inOffset == inEnd ) { savePartialMultiByte ( 2 , b1 ) ; fPartialMultiByteResult = exitNormalize ( inOffset , outOffset , true ) ; return false ; } b2 = in [ inOffset ] ; } if ( ( b2 & 0xc0 ) != 0x80 ) { Object [ ] args = { Integer . toHexString ( b ) , Integer . toHexString ( b1 ) , Integer . toHexString ( b2 ) } ; deferException ( ImplementationMessages . ENC6 , args , outOffset ) ; out [ outOffset ++ ] = 0 ; break ; } case 3 : if ( ( b & 0xf0 ) == 0xe0 ) { int ch = ( ( 0x0f & b ) << 12 ) + ( ( 0x3f & b1 ) << 6 ) + ( 0x3f & b2 ) ; out [ outOffset ++ ] = ( char ) ch ; if ( outOffset == outEnd ) { fPartialMultiByteResult = exitNormalize ( inOffset , outOffset , false ) ; return false ; } if ( byteIn < 3 && ++ inOffset == inEnd ) { fPartialMultiByteResult = exitNormalize ( inOffset , outOffset , true ) ; return false ; } break ; } if ( byteIn < 3 ) { if ( ( b & 0xf8 ) != 0xf0 ) { Object [ ] args = { Integer . toHexString ( b ) } ; deferException ( ImplementationMessages . ENC4 , args , outOffset ) ; out [ outOffset ++ ] = 0 ; break ; } if ( ++ inOffset == inEnd ) { savePartialMultiByte ( 3 , b2 , b1 ) ; fPartialMultiByteResult = exitNormalize ( inOffset , outOffset , true ) ; return false ; } b3 = in [ inOffset ] ; } if ( ( b3 & 0xc0 ) != 0x80 ) { Object [ ] args = { Integer . toHexString ( b ) , Integer . toHexString ( b1 ) , Integer . toHexString ( b2 ) , Integer . toHexString ( b3 ) } ; deferException ( ImplementationMessages . ENC7 , args , outOffset ) ; out [ outOffset ++ ] = 0 ; break ; } int ch = ( ( 0x0f & b ) << 18 ) + ( ( 0x3f & b1 ) << 12 ) + ( ( 0x3f & b2 ) << 6 ) + ( 0x3f & b3 ) ; if ( ch >= 0x10000 ) { out [ outOffset ++ ] = ( char ) ( ( ( ch - 0x00010000 ) > > 10 ) + 0xd800 ) ; ch = ( ( ( ch - 0x00010000 ) & 0x3ff ) + 0xdc00 ) ; if ( outOffset == outEnd ) { fPartialSurrogatePair = ch ; fPartialMultiByteResult = exitNormalize ( inOffset , outOffset , false ) ; return false ; } } out [ outOffset ++ ] = ( char ) ch ; if ( outOffset == outEnd ) { fPartialMultiByteResult = exitNormalize ( inOffset , outOffset , false ) ; return false ; } if ( ++ inOffset == inEnd ) { fPartialMultiByteResult = exitNormalize ( inOffset , outOffset , true ) ; return false ; } break ; } return exitNormalize ( inOffset , outOffset , true ) ; } } 	0	['9', '3', '0', '5', '16', '0', '0', '5', '0', '0.579545455', '1583', '1', '0', '0.826086957', '0.366666667', '1', '3', '173.6666667', '1', '0.8889', '0']
package org . apache . html . dom ; import org . w3c . dom . * ; import org . w3c . dom . html . * ; public class HTMLTableCellElementImpl extends HTMLElementImpl implements HTMLTableCellElement { public int getCellIndex ( ) { Node parent ; Node child ; int index ; parent = getParentNode ( ) ; index = 0 ; if ( parent instanceof HTMLTableRowElement ) { child = parent . getFirstChild ( ) ; while ( child != null ) { if ( child instanceof HTMLTableCellElement ) { if ( child == this ) return index ; ++ index ; } child = child . getNextSibling ( ) ; } } return - 1 ; } public void setCellIndex ( int cellIndex ) { Node parent ; Node child ; int index ; parent = getParentNode ( ) ; if ( parent instanceof HTMLTableRowElement ) { child = parent . getFirstChild ( ) ; while ( child != null ) { if ( child instanceof HTMLTableCellElement ) { if ( cellIndex == 0 ) { if ( this != child ) parent . insertBefore ( this , child ) ; return ; } -- cellIndex ; } child = child . getNextSibling ( ) ; } } parent . appendChild ( this ) ; } public String getAbbr ( ) { return getAttribute ( "abbr" ) ; } public void setAbbr ( String abbr ) { setAttribute ( "abbr" , abbr ) ; } public String getAlign ( ) { return capitalize ( getAttribute ( "align" ) ) ; } public void setAlign ( String align ) { setAttribute ( "align" , align ) ; } public String getAxis ( ) { return getAttribute ( "axis" ) ; } public void setAxis ( String axis ) { setAttribute ( "axis" , axis ) ; } public String getBgColor ( ) { return getAttribute ( "bgcolor" ) ; } public void setBgColor ( String bgColor ) { setAttribute ( "bgcolor" , bgColor ) ; } public String getCh ( ) { String ch ; ch = getAttribute ( "char" ) ; if ( ch != null && ch . length ( ) > 1 ) ch = ch . substring ( 0 , 1 ) ; return ch ; } public void setCh ( String ch ) { if ( ch != null && ch . length ( ) > 1 ) ch = ch . substring ( 0 , 1 ) ; setAttribute ( "char" , ch ) ; } public String getChOff ( ) { return getAttribute ( "charoff" ) ; } public void setChOff ( String chOff ) { setAttribute ( "charoff" , chOff ) ; } public int getColSpan ( ) { return getInteger ( getAttribute ( "colspan" ) ) ; } public void setColSpan ( int colspan ) { setAttribute ( "colspan" , String . valueOf ( colspan ) ) ; } public String getHeaders ( ) { return getAttribute ( "headers" ) ; } public void setHeaders ( String headers ) { setAttribute ( "headers" , headers ) ; } public String getHeight ( ) { return getAttribute ( "height" ) ; } public void setHeight ( String height ) { setAttribute ( "height" , height ) ; } public boolean getNoWrap ( ) { return getBinary ( "nowrap" ) ; } public void setNoWrap ( boolean noWrap ) { setAttribute ( "nowrap" , noWrap ) ; } public int getRowSpan ( ) { return getInteger ( getAttribute ( "rowspan" ) ) ; } public void setRowSpan ( int rowspan ) { setAttribute ( "rowspan" , String . valueOf ( rowspan ) ) ; } public String getScope ( ) { return getAttribute ( "scope" ) ; } public void setScope ( String scope ) { setAttribute ( "scope" , scope ) ; } public String getVAlign ( ) { return capitalize ( getAttribute ( "valign" ) ) ; } public void setVAlign ( String vAlign ) { setAttribute ( "valign" , vAlign ) ; } public String getWidth ( ) { return getAttribute ( "width" ) ; } public void setWidth ( String width ) { setAttribute ( "width" , width ) ; } public HTMLTableCellElementImpl ( HTMLDocumentImpl owner , String name ) { super ( owner , name ) ; } } 	0	['31', '4', '0', '3', '46', '465', '1', '2', '31', '2', '259', '0', '0', '0.758064516', '0.309677419', '0', '0', '7.35483871', '6', '1.3871', '0']
package org . apache . wml ; public interface WMLWmlElement extends WMLElement { public void setXmlLang ( String newValue ) ; public String getXmlLang ( ) ; } 	0	['2', '1', '0', '2', '2', '1', '1', '1', '2', '2', '2', '0', '0', '0', '0.75', '0', '0', '0', '1', '1', '0']
package org . xml . sax . helpers ; import java . io . IOException ; import java . util . Enumeration ; import org . xml . sax . Parser ; import org . xml . sax . InputSource ; import org . xml . sax . Locator ; import org . xml . sax . AttributeList ; import org . xml . sax . EntityResolver ; import org . xml . sax . DTDHandler ; import org . xml . sax . DocumentHandler ; import org . xml . sax . ErrorHandler ; import org . xml . sax . SAXException ; import org . xml . sax . SAXParseException ; import org . xml . sax . XMLReader ; import org . xml . sax . Attributes ; import org . xml . sax . ContentHandler ; import org . xml . sax . SAXNotRecognizedException ; import org . xml . sax . SAXNotSupportedException ; public class ParserAdapter implements XMLReader , DocumentHandler { public ParserAdapter ( ) throws SAXException { super ( ) ; String driver = System . getProperty ( "org.xml.sax.parser" ) ; try { setup ( ParserFactory . makeParser ( ) ) ; } catch ( ClassNotFoundException e1 ) { throw new SAXException ( "Cannot find SAX1 driver class " + driver , e1 ) ; } catch ( IllegalAccessException e2 ) { throw new SAXException ( "SAX1 driver class " + driver + " found but cannot be loaded" , e2 ) ; } catch ( InstantiationException e3 ) { throw new SAXException ( "SAX1 driver class " + driver + " loaded but cannot be instantiated" , e3 ) ; } catch ( ClassCastException e4 ) { throw new SAXException ( "SAX1 driver class " + driver + " does not implement org.xml.sax.Parser" ) ; } catch ( NullPointerException e5 ) { throw new SAXException ( "System property org.xml.sax.parser not specified" ) ; } } public ParserAdapter ( Parser parser ) { super ( ) ; setup ( parser ) ; } private void setup ( Parser parser ) { if ( parser == null ) { throw new NullPointerException ( "Parser argument must not be null" ) ; } this . parser = parser ; atts = new AttributesImpl ( ) ; nsSupport = new NamespaceSupport ( ) ; attAdapter = new AttributeListAdapter ( ) ; } private final static String FEATURES = "http://xml.org/sax/features/" ; private final static String NAMESPACES = FEATURES + "namespaces" ; private final static String NAMESPACE_PREFIXES = FEATURES + "namespace-prefixes" ; private final static String VALIDATION = FEATURES + "validation" ; private final static String EXTERNAL_GENERAL = FEATURES + "external-general-entities" ; private final static String EXTERNAL_PARAMETER = FEATURES + "external-parameter-entities" ; public void setFeature ( String name , boolean state ) throws SAXNotRecognizedException , SAXNotSupportedException { if ( name . equals ( NAMESPACES ) ) { checkNotParsing ( "feature" , name ) ; namespaces = state ; if ( ! namespaces && ! prefixes ) { prefixes = true ; } } else if ( name . equals ( NAMESPACE_PREFIXES ) ) { checkNotParsing ( "feature" , name ) ; prefixes = state ; if ( ! prefixes && ! namespaces ) { namespaces = true ; } } else if ( name . equals ( VALIDATION ) || name . equals ( EXTERNAL_GENERAL ) || name . equals ( EXTERNAL_PARAMETER ) ) { throw new SAXNotSupportedException ( "Feature: " + name ) ; } else { throw new SAXNotRecognizedException ( "Feature: " + name ) ; } } public boolean getFeature ( String name ) throws SAXNotRecognizedException , SAXNotSupportedException { if ( name . equals ( NAMESPACES ) ) { return namespaces ; } else if ( name . equals ( NAMESPACE_PREFIXES ) ) { return prefixes ; } else if ( name . equals ( VALIDATION ) || name . equals ( EXTERNAL_GENERAL ) || name . equals ( EXTERNAL_PARAMETER ) ) { throw new SAXNotSupportedException ( "Feature: " + name ) ; } else { throw new SAXNotRecognizedException ( "Feature: " + name ) ; } } public void setProperty ( String name , Object value ) throws SAXNotRecognizedException , SAXNotSupportedException { throw new SAXNotRecognizedException ( "Property: " + name ) ; } public Object getProperty ( String name ) throws SAXNotRecognizedException , SAXNotSupportedException { throw new SAXNotRecognizedException ( "Property: " + name ) ; } public void setEntityResolver ( EntityResolver resolver ) { if ( resolver == null ) { throw new NullPointerException ( "Null entity resolver" ) ; } entityResolver = resolver ; } public EntityResolver getEntityResolver ( ) { return entityResolver ; } public void setDTDHandler ( DTDHandler handler ) { if ( handler == null ) { throw new NullPointerException ( "Null DTD handler" ) ; } dtdHandler = handler ; } public DTDHandler getDTDHandler ( ) { return dtdHandler ; } public void setContentHandler ( ContentHandler handler ) { if ( handler == null ) { throw new NullPointerException ( "Null content handler" ) ; } contentHandler = handler ; } public ContentHandler getContentHandler ( ) { return contentHandler ; } public void setErrorHandler ( ErrorHandler handler ) { if ( handler == null ) { throw new NullPointerException ( "Null error handler" ) ; } errorHandler = handler ; } public ErrorHandler getErrorHandler ( ) { return errorHandler ; } public void parse ( String systemId ) throws IOException , SAXException { parse ( new InputSource ( systemId ) ) ; } public void parse ( InputSource input ) throws IOException , SAXException { if ( parsing ) { throw new SAXException ( "Parser is already in use" ) ; } setupParser ( ) ; parsing = true ; try { parser . parse ( input ) ; } finally { parsing = false ; } parsing = false ; } public void setDocumentLocator ( Locator locator ) { this . locator = locator ; if ( contentHandler != null ) { contentHandler . setDocumentLocator ( locator ) ; } } public void startDocument ( ) throws SAXException { if ( contentHandler != null ) { contentHandler . startDocument ( ) ; } } public void endDocument ( ) throws SAXException { if ( contentHandler != null ) { contentHandler . endDocument ( ) ; } } public void startElement ( String qName , AttributeList qAtts ) throws SAXException { if ( ! namespaces ) { if ( contentHandler != null ) { attAdapter . setAttributeList ( qAtts ) ; contentHandler . startElement ( "" , "" , qName . intern ( ) , attAdapter ) ; } return ; } nsSupport . pushContext ( ) ; boolean seenDecl = false ; atts . clear ( ) ; int length = qAtts . getLength ( ) ; for ( int i = 0 ; i < length ; i ++ ) { String attQName = qAtts . getName ( i ) ; String type = qAtts . getType ( i ) ; String value = qAtts . getValue ( i ) ; if ( attQName . startsWith ( "xmlns" ) ) { String prefix ; int n = attQName . indexOf ( ':' ) ; if ( n == - 1 ) { prefix = "" ; } else { prefix = attQName . substring ( n + 1 ) ; } if ( ! nsSupport . declarePrefix ( prefix , value ) ) { reportError ( "Illegal Namespace prefix: " + prefix ) ; } if ( contentHandler != null ) { contentHandler . startPrefixMapping ( prefix , value ) ; } if ( prefixes ) { atts . addAttribute ( "" , "" , attQName . intern ( ) , type , value ) ; } seenDecl = true ; } else { String attName [ ] = processName ( attQName , true ) ; atts . addAttribute ( attName [ 0 ] , attName [ 1 ] , attName [ 2 ] , type , value ) ; } } if ( seenDecl ) { length = atts . getLength ( ) ; for ( int i = 0 ; i < length ; i ++ ) { String attQName = atts . getQName ( i ) ; if ( ! attQName . startsWith ( "xmlns" ) ) { String attName [ ] = processName ( attQName , true ) ; atts . setURI ( i , attName [ 0 ] ) ; atts . setLocalName ( i , attName [ 1 ] ) ; } } } if ( contentHandler != null ) { String name [ ] = processName ( qName , false ) ; contentHandler . startElement ( name [ 0 ] , name [ 1 ] , name [ 2 ] , atts ) ; } } public void endElement ( String qName ) throws SAXException { if ( ! namespaces ) { if ( contentHandler != null ) { contentHandler . endElement ( "" , "" , qName . intern ( ) ) ; } return ; } String names [ ] = processName ( qName , false ) ; if ( contentHandler != null ) { contentHandler . endElement ( names [ 0 ] , names [ 1 ] , names [ 2 ] ) ; Enumeration prefixes = nsSupport . getDeclaredPrefixes ( ) ; while ( prefixes . hasMoreElements ( ) ) { String prefix = ( String ) prefixes . nextElement ( ) ; contentHandler . endPrefixMapping ( prefix ) ; } } nsSupport . popContext ( ) ; } public void characters ( char ch [ ] , int start , int length ) throws SAXException { if ( contentHandler != null ) { contentHandler . characters ( ch , start , length ) ; } } public void ignorableWhitespace ( char ch [ ] , int start , int length ) throws SAXException { if ( contentHandler != null ) { contentHandler . ignorableWhitespace ( ch , start , length ) ; } } public void processingInstruction ( String target , String data ) throws SAXException { if ( contentHandler != null ) { contentHandler . processingInstruction ( target , data ) ; } } private void setupParser ( ) { nsSupport . reset ( ) ; if ( entityResolver != null ) { parser . setEntityResolver ( entityResolver ) ; } if ( dtdHandler != null ) { parser . setDTDHandler ( dtdHandler ) ; } if ( errorHandler != null ) { parser . setErrorHandler ( errorHandler ) ; } parser . setDocumentHandler ( this ) ; locator = null ; } private String [ ] processName ( String qName , boolean isAttribute ) throws SAXException { String parts [ ] = nsSupport . processName ( qName , nameParts , isAttribute ) ; if ( parts == null ) { parts = new String [ 3 ] ; parts [ 2 ] = qName . intern ( ) ; reportError ( "Undeclared prefix: " + qName ) ; } return parts ; } void reportError ( String message ) throws SAXException { if ( errorHandler == null ) { return ; } SAXParseException e ; if ( locator != null ) { e = new SAXParseException ( message , locator ) ; } else { e = new SAXParseException ( message , null , null , - 1 , - 1 ) ; } errorHandler . error ( e ) ; } private void checkNotParsing ( String type , String name ) throws SAXNotSupportedException { if ( parsing ) { throw new SAXNotSupportedException ( "Cannot change " + type + ' ' + name + " while parsing" ) ; } } private NamespaceSupport nsSupport ; private AttributeListAdapter attAdapter ; private boolean parsing = false ; private String nameParts [ ] = new String [ 3 ] ; private Parser parser = null ; private AttributesImpl atts = null ; private boolean namespaces = true ; private boolean prefixes = false ; Locator locator ; EntityResolver entityResolver = null ; DTDHandler dtdHandler = null ; ContentHandler contentHandler = null ; ErrorHandler errorHandler = null ; final class AttributeListAdapter implements Attributes { AttributeListAdapter ( ) { } void setAttributeList ( AttributeList qAtts ) { this . qAtts = qAtts ; } public int getLength ( ) { return qAtts . getLength ( ) ; } public String getURI ( int i ) { return "" ; } public String getLocalName ( int i ) { return "" ; } public String getQName ( int i ) { return qAtts . getName ( i ) . intern ( ) ; } public String getType ( int i ) { return qAtts . getType ( i ) . intern ( ) ; } public String getValue ( int i ) { return qAtts . getValue ( i ) ; } public int getIndex ( String uri , String localName ) { return - 1 ; } public int getIndex ( String qName ) { int max = atts . getLength ( ) ; for ( int i = 0 ; i < max ; i ++ ) { if ( qAtts . getName ( i ) . equals ( qName ) ) { return i ; } } return - 1 ; } public String getType ( String uri , String localName ) { return null ; } public String getType ( String qName ) { return qAtts . getType ( qName ) . intern ( ) ; } public String getValue ( String uri , String localName ) { return null ; } public String getValue ( String qName ) { return qAtts . getValue ( qName ) ; } private AttributeList qAtts ; } } 	0	['30', '1', '0', '0', '88', '177', '0', '0', '24', '0.882032668', '887', '0.736842105', '9', '0', '0.126666667', '0', '0', '27.93333333', '4', '1.2333', '0']
package org . w3c . dom . html ; public interface HTMLParagraphElement extends HTMLElement { public String getAlign ( ) ; public void setAlign ( String align ) ; } 	0	['2', '1', '0', '0', '2', '1', '0', '0', '2', '2', '2', '0', '0', '0', '0.75', '0', '0', '0', '1', '1', '0']
package org . apache . wml ; public interface WMLMetaElement extends WMLElement { public void setName ( String newValue ) ; public String getName ( ) ; public void setHttpEquiv ( String newValue ) ; public String getHttpEquiv ( ) ; public void setForua ( boolean newValue ) ; public boolean getForua ( ) ; public void setScheme ( String newValue ) ; public String getScheme ( ) ; public void setContent ( String newValue ) ; public String getContent ( ) ; } 	0	['10', '1', '0', '2', '10', '45', '1', '1', '10', '2', '10', '0', '0', '0', '0.5', '0', '0', '0', '1', '1', '0']
package org . w3c . dom . html ; public interface HTMLObjectElement extends HTMLElement { public HTMLFormElement getForm ( ) ; public String getCode ( ) ; public void setCode ( String code ) ; public String getAlign ( ) ; public void setAlign ( String align ) ; public String getArchive ( ) ; public void setArchive ( String archive ) ; public String getBorder ( ) ; public void setBorder ( String border ) ; public String getCodeBase ( ) ; public void setCodeBase ( String codeBase ) ; public String getCodeType ( ) ; public void setCodeType ( String codeType ) ; public String getData ( ) ; public void setData ( String data ) ; public boolean getDeclare ( ) ; public void setDeclare ( boolean declare ) ; public String getHeight ( ) ; public void setHeight ( String height ) ; public String getHspace ( ) ; public void setHspace ( String hspace ) ; public String getName ( ) ; public void setName ( String name ) ; public String getStandby ( ) ; public void setStandby ( String standby ) ; public int getTabIndex ( ) ; public void setTabIndex ( int tabIndex ) ; public String getType ( ) ; public void setType ( String type ) ; public String getUseMap ( ) ; public void setUseMap ( String useMap ) ; public String getVspace ( ) ; public void setVspace ( String vspace ) ; public String getWidth ( ) ; public void setWidth ( String width ) ; } 	0	['35', '1', '0', '0', '35', '595', '0', '0', '35', '2', '35', '0', '0', '0', '0.371428571', '0', '0', '0', '1', '1', '0']
package org . apache . xerces . dom ; import java . io . * ; import org . w3c . dom . * ; import org . w3c . dom . events . MutationEvent ; import org . apache . xerces . dom . events . MutationEventImpl ; public class AttrImpl extends NodeImpl implements Attr { static final long serialVersionUID = 7277707688218972102L ; protected Object value = null ; protected String name ; protected static TextImpl textNode = null ; protected AttrImpl ( DocumentImpl ownerDocument , String name ) { super ( ownerDocument ) ; this . name = name ; isSpecified ( true ) ; hasStringValue ( true ) ; } protected AttrImpl ( ) { } protected void makeChildNode ( ) { if ( hasStringValue ( ) ) { if ( value != null ) { TextImpl text = ( TextImpl ) ownerDocument ( ) . createTextNode ( ( String ) value ) ; value = text ; text . isFirstChild ( true ) ; text . previousSibling = text ; text . ownerNode = this ; text . isOwned ( true ) ; } hasStringValue ( false ) ; } } public Node cloneNode ( boolean deep ) { AttrImpl clone = ( AttrImpl ) super . cloneNode ( deep ) ; if ( ! clone . hasStringValue ( ) ) { clone . value = null ; if ( deep ) { for ( Node child = ( Node ) value ; child != null ; child = child . getNextSibling ( ) ) { clone . appendChild ( child . cloneNode ( true ) ) ; } } } clone . isSpecified ( true ) ; return clone ; } public short getNodeType ( ) { return Node . ATTRIBUTE_NODE ; } public String getNodeName ( ) { if ( needsSyncData ( ) ) { synchronizeData ( ) ; } return name ; } public void setNodeValue ( String value ) throws DOMException { setValue ( value ) ; } public String getNodeValue ( ) { return getValue ( ) ; } public String getName ( ) { if ( needsSyncData ( ) ) { synchronizeData ( ) ; } return name ; } public void setValue ( String newvalue ) { if ( isReadOnly ( ) ) { throw new DOMException ( DOMException . NO_MODIFICATION_ALLOWED_ERR , "DOM001 Modification not allowed" ) ; } LCount lc = null ; String oldvalue = "" ; DocumentImpl ownerDocument = ownerDocument ( ) ; if ( MUTATIONEVENTS && ownerDocument . mutationEvents ) { lc = LCount . lookup ( MutationEventImpl . DOM_ATTR_MODIFIED ) ; if ( lc . captures + lc . bubbles + lc . defaults > 0 && ownerNode != null ) { oldvalue = getValue ( ) ; } } if ( MUTATIONEVENTS && ownerDocument . mutationEvents ) { if ( needsSyncChildren ( ) ) { synchronizeChildren ( ) ; } if ( value != null ) { if ( hasStringValue ( ) ) { if ( textNode == null ) { textNode = ( TextImpl ) ownerDocument . createTextNode ( ( String ) value ) ; } else { textNode . data = ( String ) value ; } value = textNode ; textNode . isFirstChild ( true ) ; textNode . previousSibling = textNode ; textNode . ownerNode = this ; textNode . isOwned ( true ) ; hasStringValue ( false ) ; internalRemoveChild ( textNode , MUTATION_LOCAL ) ; } else { while ( value != null ) { internalRemoveChild ( ( Node ) value , MUTATION_LOCAL ) ; } } } } else { if ( ! hasStringValue ( ) && value != null ) { ChildNode firstChild = ( ChildNode ) value ; firstChild . previousSibling = null ; firstChild . isFirstChild ( false ) ; } value = null ; needsSyncChildren ( false ) ; } isSpecified ( true ) ; if ( newvalue != null ) { if ( MUTATIONEVENTS && ownerDocument . mutationEvents ) { internalInsertBefore ( ownerDocument . createTextNode ( newvalue ) , null , MUTATION_LOCAL ) ; hasStringValue ( false ) ; } else { value = newvalue ; hasStringValue ( true ) ; } } changed ( ) ; if ( MUTATIONEVENTS && ownerDocument . mutationEvents ) { dispatchAggregateEvents ( this , oldvalue , MutationEvent . MODIFICATION ) ; } } public String getValue ( ) { if ( needsSyncChildren ( ) ) { synchronizeChildren ( ) ; } if ( value == null ) { return "" ; } if ( hasStringValue ( ) ) { return ( String ) value ; } ChildNode firstChild = ( ( ChildNode ) value ) ; ChildNode node = firstChild . nextSibling ; if ( node == null ) { return firstChild . getNodeValue ( ) ; } StringBuffer value = new StringBuffer ( firstChild . getNodeValue ( ) ) ; while ( node != null ) { value . append ( node . getNodeValue ( ) ) ; node = node . nextSibling ; } return value . toString ( ) ; } public boolean getSpecified ( ) { if ( needsSyncData ( ) ) { synchronizeData ( ) ; } return isSpecified ( ) ; } public Element getElement ( ) { return ( Element ) ( isOwned ( ) ? ownerNode : null ) ; } public Element getOwnerElement ( ) { return ( Element ) ( isOwned ( ) ? ownerNode : null ) ; } public void normalize ( ) { if ( isNormalized ( ) || hasStringValue ( ) ) return ; Node kid , next ; ChildNode firstChild = ( ChildNode ) value ; for ( kid = firstChild ; kid != null ; kid = next ) { next = kid . getNextSibling ( ) ; if ( kid . getNodeType ( ) == Node . TEXT_NODE ) { if ( next != null && next . getNodeType ( ) == Node . TEXT_NODE ) { ( ( Text ) kid ) . appendData ( next . getNodeValue ( ) ) ; removeChild ( next ) ; next = kid ; } else { if ( kid . getNodeValue ( ) . length ( ) == 0 ) removeChild ( kid ) ; } } } isNormalized ( true ) ; } public void setSpecified ( boolean arg ) { if ( needsSyncData ( ) ) { synchronizeData ( ) ; } isSpecified ( arg ) ; } public String toString ( ) { return getName ( ) + "=" + "\"" + getValue ( ) + "\"" ; } public boolean hasChildNodes ( ) { if ( needsSyncChildren ( ) ) { synchronizeChildren ( ) ; } return value != null ; } public NodeList getChildNodes ( ) { if ( needsSyncChildren ( ) ) { synchronizeChildren ( ) ; } return this ; } public Node getFirstChild ( ) { if ( needsSyncChildren ( ) ) { synchronizeChildren ( ) ; } makeChildNode ( ) ; return ( Node ) value ; } public Node getLastChild ( ) { if ( needsSyncChildren ( ) ) { synchronizeChildren ( ) ; } return lastChild ( ) ; } final ChildNode lastChild ( ) { makeChildNode ( ) ; return value != null ? ( ( ChildNode ) value ) . previousSibling : null ; } final void lastChild ( ChildNode node ) { if ( value != null ) { ( ( ChildNode ) value ) . previousSibling = node ; } } public Node insertBefore ( Node newChild , Node refChild ) throws DOMException { return internalInsertBefore ( newChild , refChild , MUTATION_ALL ) ; } Node internalInsertBefore ( Node newChild , Node refChild , int mutationMask ) throws DOMException { DocumentImpl ownerDocument = ownerDocument ( ) ; boolean errorChecking = ownerDocument . errorChecking ; if ( newChild . getNodeType ( ) == Node . DOCUMENT_FRAGMENT_NODE ) { if ( errorChecking ) { for ( Node kid = newChild . getFirstChild ( ) ; kid != null ; kid = kid . getNextSibling ( ) ) { if ( ! ownerDocument . isKidOK ( this , kid ) ) { throw new DOMException ( DOMException . HIERARCHY_REQUEST_ERR , "DOM006 Hierarchy request error" ) ; } } } while ( newChild . hasChildNodes ( ) ) { insertBefore ( newChild . getFirstChild ( ) , refChild ) ; } return newChild ; } if ( newChild == refChild ) { refChild = refChild . getNextSibling ( ) ; removeChild ( newChild ) ; insertBefore ( newChild , refChild ) ; return newChild ; } if ( needsSyncChildren ( ) ) { synchronizeChildren ( ) ; } if ( errorChecking ) { if ( isReadOnly ( ) ) { throw new DOMException ( DOMException . NO_MODIFICATION_ALLOWED_ERR , "DOM001 Modification not allowed" ) ; } if ( newChild . getOwnerDocument ( ) != ownerDocument ) { throw new DOMException ( DOMException . WRONG_DOCUMENT_ERR , "DOM005 Wrong document" ) ; } if ( ! ownerDocument . isKidOK ( this , newChild ) ) { throw new DOMException ( DOMException . HIERARCHY_REQUEST_ERR , "DOM006 Hierarchy request error" ) ; } if ( refChild != null && refChild . getParentNode ( ) != this ) { throw new DOMException ( DOMException . NOT_FOUND_ERR , "DOM008 Not found" ) ; } boolean treeSafe = true ; for ( NodeImpl a = this ; treeSafe && a != null ; a = a . parentNode ( ) ) { treeSafe = newChild != a ; } if ( ! treeSafe ) { throw new DOMException ( DOMException . HIERARCHY_REQUEST_ERR , "DOM006 Hierarchy request error" ) ; } } makeChildNode ( ) ; EnclosingAttr enclosingAttr = null ; if ( MUTATIONEVENTS && ownerDocument . mutationEvents && ( mutationMask & MUTATION_AGGREGATE ) != 0 ) { LCount lc = LCount . lookup ( MutationEventImpl . DOM_ATTR_MODIFIED ) ; if ( lc . captures + lc . bubbles + lc . defaults > 0 ) { enclosingAttr = getEnclosingAttr ( ) ; } } ChildNode newInternal = ( ChildNode ) newChild ; Node oldparent = newInternal . parentNode ( ) ; if ( oldparent != null ) { oldparent . removeChild ( newInternal ) ; } ChildNode refInternal = ( ChildNode ) refChild ; newInternal . ownerNode = this ; newInternal . isOwned ( true ) ; ChildNode firstChild = ( ChildNode ) value ; if ( firstChild == null ) { value = newInternal ; newInternal . isFirstChild ( true ) ; newInternal . previousSibling = newInternal ; } else { if ( refInternal == null ) { ChildNode lastChild = firstChild . previousSibling ; lastChild . nextSibling = newInternal ; newInternal . previousSibling = lastChild ; firstChild . previousSibling = newInternal ; } else { if ( refChild == firstChild ) { firstChild . isFirstChild ( false ) ; newInternal . nextSibling = firstChild ; newInternal . previousSibling = firstChild . previousSibling ; firstChild . previousSibling = newInternal ; value = newInternal ; newInternal . isFirstChild ( true ) ; } else { ChildNode prev = refInternal . previousSibling ; newInternal . nextSibling = refInternal ; prev . nextSibling = newInternal ; refInternal . previousSibling = newInternal ; newInternal . previousSibling = prev ; } } } changed ( ) ; if ( MUTATIONEVENTS && ownerDocument . mutationEvents ) { if ( ( mutationMask & MUTATION_LOCAL ) != 0 ) { LCount lc = LCount . lookup ( MutationEventImpl . DOM_NODE_INSERTED ) ; if ( lc . captures + lc . bubbles + lc . defaults > 0 ) { MutationEvent me = new MutationEventImpl ( ) ; me . initMutationEvent ( MutationEventImpl . DOM_NODE_INSERTED , true , false , this , null , null , null , ( short ) 0 ) ; newInternal . dispatchEvent ( me ) ; } lc = LCount . lookup ( MutationEventImpl . DOM_NODE_INSERTED_INTO_DOCUMENT ) ; if ( lc . captures + lc . bubbles + lc . defaults > 0 ) { NodeImpl eventAncestor = this ; if ( enclosingAttr != null ) eventAncestor = ( NodeImpl ) ( enclosingAttr . node . getOwnerElement ( ) ) ; if ( eventAncestor != null ) { NodeImpl p = eventAncestor ; while ( p != null ) { eventAncestor = p ; if ( p . getNodeType ( ) == ATTRIBUTE_NODE ) { p = ( ElementImpl ) ( ( AttrImpl ) p ) . getOwnerElement ( ) ; } else { p = p . parentNode ( ) ; } } if ( eventAncestor . getNodeType ( ) == Node . DOCUMENT_NODE ) { MutationEvent me = new MutationEventImpl ( ) ; me . initMutationEvent ( MutationEventImpl . DOM_NODE_INSERTED_INTO_DOCUMENT , false , false , null , null , null , null , ( short ) 0 ) ; dispatchEventToSubtree ( newInternal , me ) ; } } } } if ( ( mutationMask & MUTATION_AGGREGATE ) != 0 ) { dispatchAggregateEvents ( enclosingAttr ) ; } } checkNormalizationAfterInsert ( newInternal ) ; return newChild ; } public Node removeChild ( Node oldChild ) throws DOMException { if ( hasStringValue ( ) ) { throw new DOMException ( DOMException . NOT_FOUND_ERR , "DOM008 Not found" ) ; } return internalRemoveChild ( oldChild , MUTATION_ALL ) ; } Node internalRemoveChild ( Node oldChild , int mutationMask ) throws DOMException { DocumentImpl ownerDocument = ownerDocument ( ) ; if ( ownerDocument . errorChecking ) { if ( isReadOnly ( ) ) { throw new DOMException ( DOMException . NO_MODIFICATION_ALLOWED_ERR , "DOM001 Modification not allowed" ) ; } if ( oldChild != null && oldChild . getParentNode ( ) != this ) { throw new DOMException ( DOMException . NOT_FOUND_ERR , "DOM008 Not found" ) ; } } ownerDocument . removedChildNode ( oldChild ) ; ChildNode oldInternal = ( ChildNode ) oldChild ; EnclosingAttr enclosingAttr = null ; if ( MUTATIONEVENTS && ownerDocument . mutationEvents ) { LCount lc = LCount . lookup ( MutationEventImpl . DOM_ATTR_MODIFIED ) ; if ( lc . captures + lc . bubbles + lc . defaults > 0 ) { enclosingAttr = getEnclosingAttr ( ) ; } if ( ( mutationMask & MUTATION_LOCAL ) != 0 ) { lc = LCount . lookup ( MutationEventImpl . DOM_NODE_REMOVED ) ; if ( lc . captures + lc . bubbles + lc . defaults > 0 ) { MutationEvent me = new MutationEventImpl ( ) ; me . initMutationEvent ( MutationEventImpl . DOM_NODE_REMOVED , true , false , this , null , null , null , ( short ) 0 ) ; oldInternal . dispatchEvent ( me ) ; } lc = LCount . lookup ( MutationEventImpl . DOM_NODE_REMOVED_FROM_DOCUMENT ) ; if ( lc . captures + lc . bubbles + lc . defaults > 0 ) { NodeImpl eventAncestor = this ; if ( enclosingAttr != null ) eventAncestor = ( NodeImpl ) enclosingAttr . node . getOwnerElement ( ) ; if ( eventAncestor != null ) { for ( NodeImpl p = eventAncestor . parentNode ( ) ; p != null ; p = p . parentNode ( ) ) { eventAncestor = p ; } if ( eventAncestor . getNodeType ( ) == Node . DOCUMENT_NODE ) { MutationEvent me = new MutationEventImpl ( ) ; me . initMutationEvent ( MutationEventImpl . DOM_NODE_REMOVED_FROM_DOCUMENT , false , false , null , null , null , null , ( short ) 0 ) ; dispatchEventToSubtree ( oldInternal , me ) ; } } } } } if ( oldInternal == value ) { oldInternal . isFirstChild ( false ) ; value = oldInternal . nextSibling ; ChildNode firstChild = ( ChildNode ) value ; if ( firstChild != null ) { firstChild . isFirstChild ( true ) ; firstChild . previousSibling = oldInternal . previousSibling ; } } else { ChildNode prev = oldInternal . previousSibling ; ChildNode next = oldInternal . nextSibling ; prev . nextSibling = next ; if ( next == null ) { ChildNode firstChild = ( ChildNode ) value ; firstChild . previousSibling = prev ; } else { next . previousSibling = prev ; } } ChildNode oldPreviousSibling = oldInternal . previousSibling ( ) ; oldInternal . ownerNode = ownerDocument ; oldInternal . isOwned ( false ) ; oldInternal . nextSibling = null ; oldInternal . previousSibling = null ; changed ( ) ; if ( MUTATIONEVENTS && ownerDocument . mutationEvents ) { if ( ( mutationMask & MUTATION_AGGREGATE ) != 0 ) dispatchAggregateEvents ( enclosingAttr ) ; } checkNormalizationAfterRemove ( oldPreviousSibling ) ; return oldInternal ; } public Node replaceChild ( Node newChild , Node oldChild ) throws DOMException { makeChildNode ( ) ; EnclosingAttr enclosingAttr = null ; DocumentImpl ownerDocument = ownerDocument ( ) ; if ( MUTATIONEVENTS && ownerDocument . mutationEvents ) { LCount lc = LCount . lookup ( MutationEventImpl . DOM_ATTR_MODIFIED ) ; if ( lc . captures + lc . bubbles + lc . defaults > 0 ) { enclosingAttr = getEnclosingAttr ( ) ; } } internalInsertBefore ( newChild , oldChild , MUTATION_LOCAL ) ; if ( newChild != oldChild ) { internalRemoveChild ( oldChild , MUTATION_LOCAL ) ; } if ( MUTATIONEVENTS && ownerDocument . mutationEvents ) { dispatchAggregateEvents ( enclosingAttr ) ; } return oldChild ; } public int getLength ( ) { if ( hasStringValue ( ) ) { return 1 ; } ChildNode node = ( ChildNode ) value ; int length = 0 ; for ( ; node != null ; node = node . nextSibling ) { length ++ ; } return length ; } public Node item ( int index ) { if ( hasStringValue ( ) ) { if ( index != 0 || value == null ) { return null ; } else { makeChildNode ( ) ; return ( Node ) value ; } } ChildNode node = ( ChildNode ) value ; for ( int i = 0 ; i < index && node != null ; i ++ ) { node = node . nextSibling ; } return node ; } public void setReadOnly ( boolean readOnly , boolean deep ) { super . setReadOnly ( readOnly , deep ) ; if ( deep ) { if ( needsSyncChildren ( ) ) { synchronizeChildren ( ) ; } if ( hasStringValue ( ) ) { return ; } for ( ChildNode mykid = ( ChildNode ) value ; mykid != null ; mykid = mykid . nextSibling ) { if ( mykid . getNodeType ( ) != Node . ENTITY_REFERENCE_NODE ) { mykid . setReadOnly ( readOnly , true ) ; } } } } protected void synchronizeChildren ( ) { needsSyncChildren ( false ) ; } protected final void synchronizeChildren ( int nodeIndex ) { DeferredDocumentImpl ownerDocument = ( DeferredDocumentImpl ) ownerDocument ( ) ; boolean orig = ownerDocument . mutationEvents ; ownerDocument . mutationEvents = false ; needsSyncChildren ( false ) ; int last = ownerDocument . getLastChild ( nodeIndex ) ; int prev = ownerDocument . getPrevSibling ( last ) ; if ( prev == - 1 ) { value = ownerDocument . getNodeValueString ( last ) ; hasStringValue ( true ) ; } else { ChildNode firstNode = null ; ChildNode lastNode = null ; for ( int index = last ; index != - 1 ; index = ownerDocument . getPrevSibling ( index ) ) { ChildNode node = ( ChildNode ) ownerDocument . getNodeObject ( index ) ; if ( lastNode == null ) { lastNode = node ; } else { firstNode . previousSibling = node ; } node . ownerNode = this ; node . isOwned ( true ) ; node . nextSibling = firstNode ; firstNode = node ; } if ( lastNode != null ) { value = firstNode ; firstNode . isFirstChild ( true ) ; lastChild ( lastNode ) ; } hasStringValue ( false ) ; } ownerDocument . mutationEvents = orig ; } void checkNormalizationAfterInsert ( ChildNode insertedChild ) { if ( insertedChild . getNodeType ( ) == Node . TEXT_NODE ) { ChildNode prev = insertedChild . previousSibling ( ) ; ChildNode next = insertedChild . nextSibling ; if ( ( prev != null && prev . getNodeType ( ) == Node . TEXT_NODE ) || ( next != null && next . getNodeType ( ) == Node . TEXT_NODE ) ) { isNormalized ( false ) ; } } else { if ( ! insertedChild . isNormalized ( ) ) { isNormalized ( false ) ; } } } void checkNormalizationAfterRemove ( ChildNode previousSibling ) { if ( previousSibling != null && previousSibling . getNodeType ( ) == Node . TEXT_NODE ) { ChildNode next = previousSibling . nextSibling ; if ( next != null && next . getNodeType ( ) == Node . TEXT_NODE ) { isNormalized ( false ) ; } } } private void writeObject ( ObjectOutputStream out ) throws IOException { if ( needsSyncChildren ( ) ) { synchronizeChildren ( ) ; } out . defaultWriteObject ( ) ; } private void readObject ( ObjectInputStream ois ) throws ClassNotFoundException , IOException { ois . defaultReadObject ( ) ; needsSyncChildren ( false ) ; } } 	0	['38', '2', '2', '16', '102', '417', '9', '10', '24', '0.817567568', '1440', '0.75', '1', '0.556962025', '0.174174174', '1', '16', '36.78947368', '16', '2.7368', '0']
package org . w3c . dom . html ; import org . w3c . dom . Document ; import org . w3c . dom . NodeList ; public interface HTMLDocument extends Document { public String getTitle ( ) ; public void setTitle ( String title ) ; public String getReferrer ( ) ; public String getDomain ( ) ; public String getURL ( ) ; public HTMLElement getBody ( ) ; public void setBody ( HTMLElement body ) ; public HTMLCollection getImages ( ) ; public HTMLCollection getApplets ( ) ; public HTMLCollection getLinks ( ) ; public HTMLCollection getForms ( ) ; public HTMLCollection getAnchors ( ) ; public String getCookie ( ) ; public void setCookie ( String cookie ) ; public void open ( ) ; public void close ( ) ; public void write ( String text ) ; public void writeln ( String text ) ; public NodeList getElementsByName ( String elementName ) ; } 	0	['19', '1', '0', '0', '19', '171', '0', '0', '19', '2', '19', '0', '0', '0', '0.438596491', '0', '0', '0', '1', '1', '0']
package org . w3c . dom ; public interface CharacterData extends Node { public String getData ( ) throws DOMException ; public void setData ( String data ) throws DOMException ; public int getLength ( ) ; public String substringData ( int offset , int count ) throws DOMException ; public void appendData ( String arg ) throws DOMException ; public void insertData ( int offset , String arg ) throws DOMException ; public void deleteData ( int offset , int count ) throws DOMException ; public void replaceData ( int offset , int count , String arg ) throws DOMException ; } 	0	['8', '1', '0', '0', '8', '28', '0', '0', '8', '2', '8', '0', '0', '0', '0.666666667', '0', '0', '0', '1', '1', '0']
package org . apache . wml . dom ; import org . apache . wml . * ; public class WMLDoElementImpl extends WMLElementImpl implements WMLDoElement { public WMLDoElementImpl ( WMLDocumentImpl owner , String tagName ) { super ( owner , tagName ) ; } public void setOptional ( String newValue ) { setAttribute ( "optional" , newValue ) ; } public String getOptional ( ) { return getAttribute ( "optional" ) ; } public void setClassName ( String newValue ) { setAttribute ( "class" , newValue ) ; } public String getClassName ( ) { return getAttribute ( "class" ) ; } public void setXmlLang ( String newValue ) { setAttribute ( "xml:lang" , newValue ) ; } public String getXmlLang ( ) { return getAttribute ( "xml:lang" ) ; } public void setId ( String newValue ) { setAttribute ( "id" , newValue ) ; } public String getId ( ) { return getAttribute ( "id" ) ; } public void setLabel ( String newValue ) { setAttribute ( "label" , newValue ) ; } public String getLabel ( ) { return getAttribute ( "label" ) ; } public void setType ( String newValue ) { setAttribute ( "type" , newValue ) ; } public String getType ( ) { return getAttribute ( "type" ) ; } public void setName ( String newValue ) { setAttribute ( "name" , newValue ) ; } public String getName ( ) { return getAttribute ( "name" ) ; } } 	0	['15', '4', '0', '3', '18', '105', '0', '3', '15', '2', '83', '0', '0', '0.854166667', '0.533333333', '1', '6', '4.533333333', '1', '0.9333', '0']
package org . apache . wml ; public interface WMLStrongElement extends WMLElement { public void setXmlLang ( String newValue ) ; public String getXmlLang ( ) ; } 	0	['2', '1', '0', '2', '2', '1', '1', '1', '2', '2', '2', '0', '0', '0', '0.75', '0', '0', '0', '1', '1', '0']
package org . apache . xerces . readers ; import org . apache . xerces . framework . XMLErrorReporter ; import org . apache . xerces . utils . QName ; import org . apache . xerces . utils . StringPool ; import org . apache . xerces . utils . SymbolCache ; import org . apache . xerces . utils . UTF8DataChunk ; import org . apache . xerces . utils . XMLCharacterProperties ; import org . xml . sax . SAXParseException ; import org . xml . sax . helpers . LocatorImpl ; import java . io . InputStream ; import java . util . Vector ; final class UTF8Reader extends XMLEntityReader { private final static boolean USE_OUT_OF_LINE_LOAD_NEXT_BYTE = false ; private final static boolean USE_TRY_CATCH_FOR_LOAD_NEXT_BYTE = true ; public UTF8Reader ( XMLEntityHandler entityHandler , XMLErrorReporter errorReporter , boolean sendCharDataAsCharArray , InputStream dataStream , StringPool stringPool ) throws Exception { super ( entityHandler , errorReporter , sendCharDataAsCharArray ) ; fInputStream = dataStream ; fStringPool = stringPool ; fCharArrayRange = fStringPool . createCharArrayRange ( ) ; fCurrentChunk = UTF8DataChunk . createChunk ( fStringPool , null ) ; fillCurrentChunk ( ) ; } public int addString ( int offset , int length ) { if ( length == 0 ) return 0 ; return fCurrentChunk . addString ( offset , length ) ; } public int addSymbol ( int offset , int length ) { if ( length == 0 ) return 0 ; return fCurrentChunk . addSymbol ( offset , length , 0 ) ; } private int addSymbol ( int offset , int length , int hashcode ) { if ( length == 0 ) return 0 ; return fCurrentChunk . addSymbol ( offset , length , hashcode ) ; } public void append ( XMLEntityHandler . CharBuffer charBuffer , int offset , int length ) { fCurrentChunk . append ( charBuffer , offset , length ) ; } private int slowLoadNextByte ( ) throws Exception { fCallClearPreviousChunk = true ; if ( fCurrentChunk . nextChunk ( ) != null ) { fCurrentChunk = fCurrentChunk . nextChunk ( ) ; fCurrentIndex = 0 ; fMostRecentData = fCurrentChunk . toByteArray ( ) ; return ( fMostRecentByte = fMostRecentData [ fCurrentIndex ] & 0xFF ) ; } else { fCurrentChunk = UTF8DataChunk . createChunk ( fStringPool , fCurrentChunk ) ; return fillCurrentChunk ( ) ; } } private int loadNextByte ( ) throws Exception { fCurrentOffset ++ ; if ( USE_TRY_CATCH_FOR_LOAD_NEXT_BYTE ) { fCurrentIndex ++ ; try { fMostRecentByte = fMostRecentData [ fCurrentIndex ] & 0xFF ; return fMostRecentByte ; } catch ( ArrayIndexOutOfBoundsException ex ) { return slowLoadNextByte ( ) ; } } else { if ( ++ fCurrentIndex == UTF8DataChunk . CHUNK_SIZE ) return slowLoadNextByte ( ) ; else return ( fMostRecentByte = fMostRecentData [ fCurrentIndex ] & 0xFF ) ; } } private boolean atEOF ( int offset ) { return ( offset > fLength ) ; } public XMLEntityHandler . EntityReader changeReaders ( ) throws Exception { XMLEntityHandler . EntityReader nextReader = super . changeReaders ( ) ; fCurrentChunk . releaseChunk ( ) ; fCurrentChunk = null ; fMostRecentData = null ; fMostRecentByte = 0 ; return nextReader ; } public boolean lookingAtChar ( char ch , boolean skipPastChar ) throws Exception { int b0 = fMostRecentByte ; if ( b0 != ch ) { if ( b0 == 0 ) { if ( atEOF ( fCurrentOffset + 1 ) ) { return changeReaders ( ) . lookingAtChar ( ch , skipPastChar ) ; } } if ( ch == 0x0A && b0 == 0x0D ) { if ( skipPastChar ) { fCarriageReturnCounter ++ ; fCharacterCounter = 1 ; if ( USE_OUT_OF_LINE_LOAD_NEXT_BYTE ) { b0 = loadNextByte ( ) ; } else { fCurrentOffset ++ ; if ( USE_TRY_CATCH_FOR_LOAD_NEXT_BYTE ) { fCurrentIndex ++ ; try { fMostRecentByte = fMostRecentData [ fCurrentIndex ] & 0xFF ; b0 = fMostRecentByte ; } catch ( ArrayIndexOutOfBoundsException ex ) { b0 = slowLoadNextByte ( ) ; } } else { if ( ++ fCurrentIndex == UTF8DataChunk . CHUNK_SIZE ) b0 = slowLoadNextByte ( ) ; else b0 = ( fMostRecentByte = fMostRecentData [ fCurrentIndex ] & 0xFF ) ; } } if ( b0 == 0x0A ) { fLinefeedCounter ++ ; if ( USE_OUT_OF_LINE_LOAD_NEXT_BYTE ) { loadNextByte ( ) ; } else { fCurrentOffset ++ ; if ( USE_TRY_CATCH_FOR_LOAD_NEXT_BYTE ) { fCurrentIndex ++ ; try { fMostRecentByte = fMostRecentData [ fCurrentIndex ] & 0xFF ; } catch ( ArrayIndexOutOfBoundsException ex ) { slowLoadNextByte ( ) ; } } else { if ( ++ fCurrentIndex == UTF8DataChunk . CHUNK_SIZE ) slowLoadNextByte ( ) ; else fMostRecentByte = fMostRecentData [ fCurrentIndex ] & 0xFF ; } } } } return true ; } return false ; } if ( ch == 0x0D ) return false ; if ( skipPastChar ) { fCharacterCounter ++ ; if ( USE_OUT_OF_LINE_LOAD_NEXT_BYTE ) { loadNextByte ( ) ; } else { fCurrentOffset ++ ; if ( USE_TRY_CATCH_FOR_LOAD_NEXT_BYTE ) { fCurrentIndex ++ ; try { fMostRecentByte = fMostRecentData [ fCurrentIndex ] & 0xFF ; } catch ( ArrayIndexOutOfBoundsException ex ) { slowLoadNextByte ( ) ; } } else { if ( ++ fCurrentIndex == UTF8DataChunk . CHUNK_SIZE ) slowLoadNextByte ( ) ; else fMostRecentByte = fMostRecentData [ fCurrentIndex ] & 0xFF ; } } } return true ; } public boolean lookingAtValidChar ( boolean skipPastChar ) throws Exception { int b0 = fMostRecentByte ; if ( b0 < 0x80 ) { if ( b0 >= 0x20 || b0 == 0x09 ) { if ( skipPastChar ) { fCharacterCounter ++ ; if ( USE_OUT_OF_LINE_LOAD_NEXT_BYTE ) { loadNextByte ( ) ; } else { fCurrentOffset ++ ; if ( USE_TRY_CATCH_FOR_LOAD_NEXT_BYTE ) { fCurrentIndex ++ ; try { fMostRecentByte = fMostRecentData [ fCurrentIndex ] & 0xFF ; } catch ( ArrayIndexOutOfBoundsException ex ) { slowLoadNextByte ( ) ; } } else { if ( ++ fCurrentIndex == UTF8DataChunk . CHUNK_SIZE ) slowLoadNextByte ( ) ; else fMostRecentByte = fMostRecentData [ fCurrentIndex ] & 0xFF ; } } } return true ; } if ( b0 == 0x0A ) { if ( skipPastChar ) { fLinefeedCounter ++ ; fCharacterCounter = 1 ; if ( USE_OUT_OF_LINE_LOAD_NEXT_BYTE ) { loadNextByte ( ) ; } else { fCurrentOffset ++ ; if ( USE_TRY_CATCH_FOR_LOAD_NEXT_BYTE ) { fCurrentIndex ++ ; try { fMostRecentByte = fMostRecentData [ fCurrentIndex ] & 0xFF ; } catch ( ArrayIndexOutOfBoundsException ex ) { slowLoadNextByte ( ) ; } } else { if ( ++ fCurrentIndex == UTF8DataChunk . CHUNK_SIZE ) slowLoadNextByte ( ) ; else fMostRecentByte = fMostRecentData [ fCurrentIndex ] & 0xFF ; } } } return true ; } if ( b0 == 0x0D ) { if ( skipPastChar ) { fCarriageReturnCounter ++ ; fCharacterCounter = 1 ; if ( USE_OUT_OF_LINE_LOAD_NEXT_BYTE ) { b0 = loadNextByte ( ) ; } else { fCurrentOffset ++ ; if ( USE_TRY_CATCH_FOR_LOAD_NEXT_BYTE ) { fCurrentIndex ++ ; try { fMostRecentByte = fMostRecentData [ fCurrentIndex ] & 0xFF ; b0 = fMostRecentByte ; } catch ( ArrayIndexOutOfBoundsException ex ) { b0 = slowLoadNextByte ( ) ; } } else { if ( ++ fCurrentIndex == UTF8DataChunk . CHUNK_SIZE ) b0 = slowLoadNextByte ( ) ; else b0 = ( fMostRecentByte = fMostRecentData [ fCurrentIndex ] & 0xFF ) ; } } if ( b0 == 0x0A ) { fLinefeedCounter ++ ; if ( USE_OUT_OF_LINE_LOAD_NEXT_BYTE ) { loadNextByte ( ) ; } else { fCurrentOffset ++ ; if ( USE_TRY_CATCH_FOR_LOAD_NEXT_BYTE ) { fCurrentIndex ++ ; try { fMostRecentByte = fMostRecentData [ fCurrentIndex ] & 0xFF ; } catch ( ArrayIndexOutOfBoundsException ex ) { slowLoadNextByte ( ) ; } } else { if ( ++ fCurrentIndex == UTF8DataChunk . CHUNK_SIZE ) slowLoadNextByte ( ) ; else fMostRecentByte = fMostRecentData [ fCurrentIndex ] & 0xFF ; } } } } return true ; } if ( b0 == 0 ) { if ( atEOF ( fCurrentOffset + 1 ) ) { return changeReaders ( ) . lookingAtValidChar ( skipPastChar ) ; } } return false ; } UTF8DataChunk saveChunk = fCurrentChunk ; int saveIndex = fCurrentIndex ; int saveOffset = fCurrentOffset ; int b1 = loadNextByte ( ) ; if ( ( 0xe0 & b0 ) == 0xc0 ) { if ( skipPastChar ) { fCharacterCounter ++ ; loadNextByte ( ) ; } else { fCurrentChunk = saveChunk ; fCurrentIndex = saveIndex ; fCurrentOffset = saveOffset ; fMostRecentData = saveChunk . toByteArray ( ) ; fMostRecentByte = b0 ; } return true ; } int b2 = loadNextByte ( ) ; if ( ( 0xf0 & b0 ) == 0xe0 ) { boolean result = false ; if ( ! ( ( b0 == 0xED && b1 >= 0xA0 ) || ( b0 == 0xEF && b1 == 0xBF && b2 >= 0xBE ) ) ) { if ( skipPastChar ) { fCharacterCounter ++ ; loadNextByte ( ) ; return true ; } result = true ; } fCurrentChunk = saveChunk ; fCurrentIndex = saveIndex ; fCurrentOffset = saveOffset ; fMostRecentData = saveChunk . toByteArray ( ) ; fMostRecentByte = b0 ; return result ; } int b3 = loadNextByte ( ) ; boolean result = false ; if ( ( ( b0 & 0xf8 ) == 0xf0 ) && ( ( b1 & 0xc0 ) == 0x80 ) && ( ( b2 & 0xc0 ) == 0x80 ) && ( ( b3 & 0xc0 ) == 0x80 ) ) { if ( ! ( b0 > 0xF4 || ( b0 == 0xF4 && b1 >= 0x90 ) ) ) { if ( skipPastChar ) { fCharacterCounter ++ ; loadNextByte ( ) ; return true ; } result = true ; } fCurrentChunk = saveChunk ; fCurrentIndex = saveIndex ; fCurrentOffset = saveOffset ; fMostRecentData = saveChunk . toByteArray ( ) ; fMostRecentByte = b0 ; return result ; } else { fCurrentChunk = saveChunk ; fCurrentIndex = saveIndex ; fCurrentOffset = saveOffset ; fMostRecentData = saveChunk . toByteArray ( ) ; fMostRecentByte = b0 ; return result ; } } public boolean lookingAtSpace ( boolean skipPastChar ) throws Exception { int ch = fMostRecentByte ; if ( ch > 0x20 ) return false ; if ( ch == 0x20 || ch == 0x09 ) { if ( ! skipPastChar ) return true ; fCharacterCounter ++ ; } else if ( ch == 0x0A ) { if ( ! skipPastChar ) return true ; fLinefeedCounter ++ ; fCharacterCounter = 1 ; } else if ( ch == 0x0D ) { if ( ! skipPastChar ) return true ; fCarriageReturnCounter ++ ; fCharacterCounter = 1 ; if ( USE_OUT_OF_LINE_LOAD_NEXT_BYTE ) { ch = loadNextByte ( ) ; } else { fCurrentOffset ++ ; if ( USE_TRY_CATCH_FOR_LOAD_NEXT_BYTE ) { fCurrentIndex ++ ; try { fMostRecentByte = fMostRecentData [ fCurrentIndex ] & 0xFF ; ch = fMostRecentByte ; } catch ( ArrayIndexOutOfBoundsException ex ) { ch = slowLoadNextByte ( ) ; } } else { if ( ++ fCurrentIndex == UTF8DataChunk . CHUNK_SIZE ) ch = slowLoadNextByte ( ) ; else ch = ( fMostRecentByte = fMostRecentData [ fCurrentIndex ] & 0xFF ) ; } } if ( ch != 0x0A ) return true ; fLinefeedCounter ++ ; } else { if ( ch == 0 ) { if ( atEOF ( fCurrentOffset + 1 ) ) { return changeReaders ( ) . lookingAtSpace ( skipPastChar ) ; } } return false ; } if ( USE_OUT_OF_LINE_LOAD_NEXT_BYTE ) { loadNextByte ( ) ; } else { fCurrentOffset ++ ; if ( USE_TRY_CATCH_FOR_LOAD_NEXT_BYTE ) { fCurrentIndex ++ ; try { fMostRecentByte = fMostRecentData [ fCurrentIndex ] & 0xFF ; } catch ( ArrayIndexOutOfBoundsException ex ) { slowLoadNextByte ( ) ; } } else { if ( ++ fCurrentIndex == UTF8DataChunk . CHUNK_SIZE ) slowLoadNextByte ( ) ; else fMostRecentByte = fMostRecentData [ fCurrentIndex ] & 0xFF ; } } return true ; } public void skipToChar ( char ch ) throws Exception { int b0 = fMostRecentByte ; while ( true ) { if ( b0 == ch ) return ; if ( b0 == 0 ) { if ( atEOF ( fCurrentOffset + 1 ) ) { changeReaders ( ) . skipToChar ( ch ) ; return ; } fCharacterCounter ++ ; } else if ( b0 == 0x0A ) { fLinefeedCounter ++ ; fCharacterCounter = 1 ; } else if ( b0 == 0x0D ) { fCarriageReturnCounter ++ ; fCharacterCounter = 1 ; b0 = loadNextByte ( ) ; if ( b0 != 0x0A ) continue ; fLinefeedCounter ++ ; } else if ( b0 < 0x80 ) { fCharacterCounter ++ ; } else { fCharacterCounter ++ ; if ( ( 0xe0 & b0 ) == 0xc0 ) { loadNextByte ( ) ; } else if ( ( 0xf0 & b0 ) == 0xe0 ) { loadNextByte ( ) ; loadNextByte ( ) ; } else { loadNextByte ( ) ; loadNextByte ( ) ; loadNextByte ( ) ; } } b0 = loadNextByte ( ) ; } } public void skipPastSpaces ( ) throws Exception { int ch = fMostRecentByte ; while ( true ) { if ( ch == 0x20 || ch == 0x09 ) { fCharacterCounter ++ ; } else if ( ch == 0x0A ) { fLinefeedCounter ++ ; fCharacterCounter = 1 ; } else if ( ch == 0x0D ) { fCarriageReturnCounter ++ ; fCharacterCounter = 1 ; if ( USE_OUT_OF_LINE_LOAD_NEXT_BYTE ) { ch = loadNextByte ( ) ; } else { fCurrentOffset ++ ; if ( USE_TRY_CATCH_FOR_LOAD_NEXT_BYTE ) { fCurrentIndex ++ ; try { fMostRecentByte = fMostRecentData [ fCurrentIndex ] & 0xFF ; ch = fMostRecentByte ; } catch ( ArrayIndexOutOfBoundsException ex ) { ch = slowLoadNextByte ( ) ; } } else { if ( ++ fCurrentIndex == UTF8DataChunk . CHUNK_SIZE ) ch = slowLoadNextByte ( ) ; else ch = ( fMostRecentByte = fMostRecentData [ fCurrentIndex ] & 0xFF ) ; } } if ( ch != 0x0A ) continue ; fLinefeedCounter ++ ; } else { if ( ch == 0 && atEOF ( fCurrentOffset + 1 ) ) changeReaders ( ) . skipPastSpaces ( ) ; return ; } if ( USE_OUT_OF_LINE_LOAD_NEXT_BYTE ) { ch = loadNextByte ( ) ; } else { fCurrentOffset ++ ; if ( USE_TRY_CATCH_FOR_LOAD_NEXT_BYTE ) { fCurrentIndex ++ ; try { fMostRecentByte = fMostRecentData [ fCurrentIndex ] & 0xFF ; ch = fMostRecentByte ; } catch ( ArrayIndexOutOfBoundsException ex ) { ch = slowLoadNextByte ( ) ; } } else { if ( ++ fCurrentIndex == UTF8DataChunk . CHUNK_SIZE ) ch = slowLoadNextByte ( ) ; else ch = ( fMostRecentByte = fMostRecentData [ fCurrentIndex ] & 0xFF ) ; } } } } protected boolean skippedMultiByteCharWithFlag ( int b0 , int flag ) throws Exception { UTF8DataChunk saveChunk = fCurrentChunk ; int saveOffset = fCurrentOffset ; int saveIndex = fCurrentIndex ; if ( ! fCalledCharPropInit ) { XMLCharacterProperties . initCharFlags ( ) ; fCalledCharPropInit = true ; } int b1 = loadNextByte ( ) ; if ( ( 0xe0 & b0 ) == 0xc0 ) { if ( ( XMLCharacterProperties . fgCharFlags [ ( ( 0x1f & b0 ) << 6 ) + ( 0x3f & b1 ) ] & flag ) == 0 ) { fCurrentChunk = saveChunk ; fCurrentIndex = saveIndex ; fCurrentOffset = saveOffset ; fMostRecentData = saveChunk . toByteArray ( ) ; fMostRecentByte = b0 ; return false ; } return true ; } int b2 = loadNextByte ( ) ; if ( ( 0xf0 & b0 ) == 0xe0 ) { if ( ( b0 == 0xED && b1 >= 0xA0 ) || ( b0 == 0xEF && b1 == 0xBF && b2 >= 0xBE ) ) { fCurrentChunk = saveChunk ; fCurrentIndex = saveIndex ; fCurrentOffset = saveOffset ; fMostRecentData = saveChunk . toByteArray ( ) ; fMostRecentByte = b0 ; return false ; } if ( ( XMLCharacterProperties . fgCharFlags [ ( ( 0x0f & b0 ) << 12 ) + ( ( 0x3f & b1 ) << 6 ) + ( 0x3f & b2 ) ] & flag ) == 0 ) { fCurrentChunk = saveChunk ; fCurrentIndex = saveIndex ; fCurrentOffset = saveOffset ; fMostRecentData = saveChunk . toByteArray ( ) ; fMostRecentByte = b0 ; return false ; } return true ; } else { fCurrentChunk = saveChunk ; fCurrentIndex = saveIndex ; fCurrentOffset = saveOffset ; fMostRecentData = saveChunk . toByteArray ( ) ; fMostRecentByte = b0 ; return false ; } } public void skipPastName ( char fastcheck ) throws Exception { int b0 = fMostRecentByte ; if ( b0 < 0x80 ) { if ( XMLCharacterProperties . fgAsciiInitialNameChar [ b0 ] == 0 ) return ; } else { if ( ! fCalledCharPropInit ) { XMLCharacterProperties . initCharFlags ( ) ; fCalledCharPropInit = true ; } if ( ! skippedMultiByteCharWithFlag ( b0 , XMLCharacterProperties . E_InitialNameCharFlag ) ) return ; } while ( true ) { fCharacterCounter ++ ; b0 = loadNextByte ( ) ; if ( fastcheck == b0 ) return ; if ( b0 < 0x80 ) { if ( XMLCharacterProperties . fgAsciiNameChar [ b0 ] == 0 ) return ; } else { if ( ! fCalledCharPropInit ) { XMLCharacterProperties . initCharFlags ( ) ; fCalledCharPropInit = true ; } if ( ! skippedMultiByteCharWithFlag ( b0 , XMLCharacterProperties . E_NameCharFlag ) ) return ; } } } public void skipPastNmtoken ( char fastcheck ) throws Exception { int b0 = fMostRecentByte ; while ( true ) { if ( fastcheck == b0 ) return ; if ( b0 < 0x80 ) { if ( XMLCharacterProperties . fgAsciiNameChar [ b0 ] == 0 ) return ; } else { if ( ! skippedMultiByteCharWithFlag ( b0 , XMLCharacterProperties . E_NameCharFlag ) ) return ; } fCharacterCounter ++ ; b0 = loadNextByte ( ) ; } } public boolean skippedString ( char [ ] s ) throws Exception { int length = s . length ; byte [ ] data = fMostRecentData ; int index = fCurrentIndex + length ; int sindex = length ; try { while ( sindex -- > 0 ) { if ( data [ -- index ] != s [ sindex ] ) return false ; } fCurrentIndex += length ; } catch ( ArrayIndexOutOfBoundsException ex ) { int i = 0 ; index = fCurrentIndex ; while ( index < UTF8DataChunk . CHUNK_SIZE ) { if ( data [ index ++ ] != s [ i ++ ] ) return false ; } UTF8DataChunk dataChunk = fCurrentChunk ; int savedOffset = fCurrentOffset ; int savedIndex = fCurrentIndex ; slowLoadNextByte ( ) ; data = fMostRecentData ; index = 0 ; while ( i < length ) { if ( data [ index ++ ] != s [ i ++ ] ) { fCurrentChunk = dataChunk ; fCurrentIndex = savedIndex ; fCurrentOffset = savedOffset ; fMostRecentData = fCurrentChunk . toByteArray ( ) ; fMostRecentByte = fMostRecentData [ savedIndex ] & 0xFF ; return false ; } } fCurrentIndex = index ; } fCharacterCounter += length ; fCurrentOffset += length ; try { fMostRecentByte = data [ fCurrentIndex ] & 0xFF ; } catch ( ArrayIndexOutOfBoundsException ex ) { slowLoadNextByte ( ) ; } return true ; } public int scanInvalidChar ( ) throws Exception { int b0 = fMostRecentByte ; int ch = b0 ; if ( ch == 0x0A ) { fLinefeedCounter ++ ; fCharacterCounter = 1 ; } else if ( ch == 0x0D ) { fCarriageReturnCounter ++ ; fCharacterCounter = 1 ; ch = loadNextByte ( ) ; if ( ch != 0x0A ) return 0x0A ; fLinefeedCounter ++ ; } else if ( ch == 0 ) { if ( atEOF ( fCurrentOffset + 1 ) ) { return changeReaders ( ) . scanInvalidChar ( ) ; } fCharacterCounter ++ ; } else if ( b0 >= 0x80 ) { fCharacterCounter ++ ; int b1 = loadNextByte ( ) ; int b2 = 0 ; if ( ( 0xe0 & b0 ) == 0xc0 ) { ch = ( ( 0x1f & b0 ) << 6 ) + ( 0x3f & b1 ) ; } else if ( ( 0xf0 & b0 ) == 0xe0 ) { b2 = loadNextByte ( ) ; ch = ( ( 0x0f & b0 ) << 12 ) + ( ( 0x3f & b1 ) << 6 ) + ( 0x3f & b2 ) ; } else if ( ( 0xf8 & b0 ) == 0xf0 ) { b2 = loadNextByte ( ) ; int b3 = loadNextByte ( ) ; ch = ( ( 0x0f & b0 ) << 18 ) + ( ( 0x3f & b1 ) << 12 ) + ( ( 0x3f & b2 ) << 6 ) + ( 0x3f & b3 ) ; } } loadNextByte ( ) ; return ch ; } public int scanCharRef ( boolean hex ) throws Exception { int ch = fMostRecentByte ; if ( ch == 0 ) { if ( atEOF ( fCurrentOffset + 1 ) ) { return changeReaders ( ) . scanCharRef ( hex ) ; } return XMLEntityHandler . CHARREF_RESULT_INVALID_CHAR ; } int num = 0 ; if ( hex ) { if ( ch > 'f' || XMLCharacterProperties . fgAsciiXDigitChar [ ch ] == 0 ) return XMLEntityHandler . CHARREF_RESULT_INVALID_CHAR ; num = ch - ( ch < 'A' ? '0' : ( ch < 'a' ? 'A' : 'a' ) - 10 ) ; } else { if ( ch < '0' || ch > '9' ) return XMLEntityHandler . CHARREF_RESULT_INVALID_CHAR ; num = ch - '0' ; } fCharacterCounter ++ ; loadNextByte ( ) ; boolean toobig = false ; while ( true ) { ch = fMostRecentByte ; if ( ch == 0 ) break ; if ( hex ) { if ( ch > 'f' || XMLCharacterProperties . fgAsciiXDigitChar [ ch ] == 0 ) break ; } else { if ( ch < '0' || ch > '9' ) break ; } fCharacterCounter ++ ; loadNextByte ( ) ; if ( hex ) { int dig = ch - ( ch < 'A' ? '0' : ( ch < 'a' ? 'A' : 'a' ) - 10 ) ; num = ( num << 4 ) + dig ; } else { int dig = ch - '0' ; num = ( num * 10 ) + dig ; } if ( num > 0x10FFFF ) { toobig = true ; num = 0 ; } } if ( ch != ';' ) return XMLEntityHandler . CHARREF_RESULT_SEMICOLON_REQUIRED ; fCharacterCounter ++ ; loadNextByte ( ) ; if ( toobig ) return XMLEntityHandler . CHARREF_RESULT_OUT_OF_RANGE ; return num ; } public int scanStringLiteral ( ) throws Exception { boolean single ; if ( ! ( single = lookingAtChar ( '\'' , true ) ) && ! lookingAtChar ( '\"' , true ) ) { return XMLEntityHandler . STRINGLIT_RESULT_QUOTE_REQUIRED ; } int offset = fCurrentOffset ; char qchar = single ? '\'' : '\"' ; while ( ! lookingAtChar ( qchar , false ) ) { if ( ! lookingAtValidChar ( true ) ) { return XMLEntityHandler . STRINGLIT_RESULT_INVALID_CHAR ; } } int stringIndex = fCurrentChunk . addString ( offset , fCurrentOffset - offset ) ; lookingAtChar ( qchar , true ) ; return stringIndex ; } public static final byte fgAsciiAttValueChar [ ] = { 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 2 , 2 , 4 , 4 , 2 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 0 , 0 , 1 , 0 , 0 , 0 , 2 , 1 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 3 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 } ; public int scanAttValue ( char qchar , boolean asSymbol ) throws Exception { int offset = fCurrentOffset ; int b0 = fMostRecentByte ; while ( true ) { if ( b0 < 0x80 ) { switch ( fgAsciiAttValueChar [ b0 ] ) { case 1 : if ( b0 == qchar ) { int length = fCurrentOffset - offset ; int result = length == 0 ? StringPool . EMPTY_STRING : ( asSymbol ? fCurrentChunk . addSymbol ( offset , length , 0 ) : fCurrentChunk . addString ( offset , length ) ) ; fCharacterCounter ++ ; if ( USE_OUT_OF_LINE_LOAD_NEXT_BYTE ) { loadNextByte ( ) ; } else { fCurrentOffset ++ ; if ( USE_TRY_CATCH_FOR_LOAD_NEXT_BYTE ) { fCurrentIndex ++ ; try { fMostRecentByte = fMostRecentData [ fCurrentIndex ] & 0xFF ; } catch ( ArrayIndexOutOfBoundsException ex ) { slowLoadNextByte ( ) ; } } else { if ( ++ fCurrentIndex == UTF8DataChunk . CHUNK_SIZE ) slowLoadNextByte ( ) ; else fMostRecentByte = fMostRecentData [ fCurrentIndex ] & 0xFF ; } } return result ; } case 0 : fCharacterCounter ++ ; if ( USE_OUT_OF_LINE_LOAD_NEXT_BYTE ) { b0 = loadNextByte ( ) ; } else { fCurrentOffset ++ ; if ( USE_TRY_CATCH_FOR_LOAD_NEXT_BYTE ) { fCurrentIndex ++ ; try { b0 = ( fMostRecentByte = fMostRecentData [ fCurrentIndex ] & 0xFF ) ; } catch ( ArrayIndexOutOfBoundsException ex ) { b0 = slowLoadNextByte ( ) ; } } else { if ( ++ fCurrentIndex == UTF8DataChunk . CHUNK_SIZE ) b0 = slowLoadNextByte ( ) ; else b0 = ( fMostRecentByte = fMostRecentData [ fCurrentIndex ] & 0xFF ) ; } } continue ; case 2 : return XMLEntityHandler . ATTVALUE_RESULT_COMPLEX ; case 3 : return XMLEntityHandler . ATTVALUE_RESULT_LESSTHAN ; case 4 : return XMLEntityHandler . ATTVALUE_RESULT_INVALID_CHAR ; } } else { if ( ! skipMultiByteCharData ( b0 ) ) return XMLEntityHandler . ATTVALUE_RESULT_INVALID_CHAR ; b0 = fMostRecentByte ; } } } public static final byte fgAsciiEntityValueChar [ ] = { 7 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 0 , 5 , 4 , 4 , 6 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 0 , 0 , 1 , 0 , 0 , 3 , 2 , 1 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 } ; public int scanEntityValue ( int qchar , boolean createString ) throws Exception { int offset = fCurrentOffset ; int b0 = fMostRecentByte ; while ( true ) { if ( b0 < 0x80 ) { switch ( fgAsciiEntityValueChar [ b0 ] ) { case 1 : if ( b0 == qchar ) { if ( ! createString ) return XMLEntityHandler . ENTITYVALUE_RESULT_FINISHED ; int length = fCurrentOffset - offset ; int result = length == 0 ? StringPool . EMPTY_STRING : fCurrentChunk . addString ( offset , length ) ; fCharacterCounter ++ ; if ( USE_OUT_OF_LINE_LOAD_NEXT_BYTE ) { loadNextByte ( ) ; } else { fCurrentOffset ++ ; if ( USE_TRY_CATCH_FOR_LOAD_NEXT_BYTE ) { fCurrentIndex ++ ; try { fMostRecentByte = fMostRecentData [ fCurrentIndex ] & 0xFF ; } catch ( ArrayIndexOutOfBoundsException ex ) { slowLoadNextByte ( ) ; } } else { if ( ++ fCurrentIndex == UTF8DataChunk . CHUNK_SIZE ) slowLoadNextByte ( ) ; else fMostRecentByte = fMostRecentData [ fCurrentIndex ] & 0xFF ; } } return result ; } case 0 : fCharacterCounter ++ ; if ( USE_OUT_OF_LINE_LOAD_NEXT_BYTE ) { b0 = loadNextByte ( ) ; } else { fCurrentOffset ++ ; if ( USE_TRY_CATCH_FOR_LOAD_NEXT_BYTE ) { fCurrentIndex ++ ; try { b0 = ( fMostRecentByte = fMostRecentData [ fCurrentIndex ] & 0xFF ) ; } catch ( ArrayIndexOutOfBoundsException ex ) { b0 = slowLoadNextByte ( ) ; } } else { if ( ++ fCurrentIndex == UTF8DataChunk . CHUNK_SIZE ) b0 = slowLoadNextByte ( ) ; else b0 = ( fMostRecentByte = fMostRecentData [ fCurrentIndex ] & 0xFF ) ; } } continue ; case 5 : fLinefeedCounter ++ ; fCharacterCounter = 1 ; if ( USE_OUT_OF_LINE_LOAD_NEXT_BYTE ) { b0 = loadNextByte ( ) ; } else { fCurrentOffset ++ ; if ( USE_TRY_CATCH_FOR_LOAD_NEXT_BYTE ) { fCurrentIndex ++ ; try { b0 = ( fMostRecentByte = fMostRecentData [ fCurrentIndex ] & 0xFF ) ; } catch ( ArrayIndexOutOfBoundsException ex ) { b0 = slowLoadNextByte ( ) ; } } else { if ( ++ fCurrentIndex == UTF8DataChunk . CHUNK_SIZE ) b0 = slowLoadNextByte ( ) ; else b0 = ( fMostRecentByte = fMostRecentData [ fCurrentIndex ] & 0xFF ) ; } } continue ; case 6 : fCarriageReturnCounter ++ ; fCharacterCounter = 1 ; if ( USE_OUT_OF_LINE_LOAD_NEXT_BYTE ) { b0 = loadNextByte ( ) ; } else { fCurrentOffset ++ ; if ( USE_TRY_CATCH_FOR_LOAD_NEXT_BYTE ) { fCurrentIndex ++ ; try { b0 = ( fMostRecentByte = fMostRecentData [ fCurrentIndex ] & 0xFF ) ; } catch ( ArrayIndexOutOfBoundsException ex ) { b0 = slowLoadNextByte ( ) ; } } else { if ( ++ fCurrentIndex == UTF8DataChunk . CHUNK_SIZE ) b0 = slowLoadNextByte ( ) ; else b0 = ( fMostRecentByte = fMostRecentData [ fCurrentIndex ] & 0xFF ) ; } } if ( b0 != 0x0A ) { continue ; } fLinefeedCounter ++ ; if ( USE_OUT_OF_LINE_LOAD_NEXT_BYTE ) { b0 = loadNextByte ( ) ; } else { fCurrentOffset ++ ; if ( USE_TRY_CATCH_FOR_LOAD_NEXT_BYTE ) { fCurrentIndex ++ ; try { b0 = ( fMostRecentByte = fMostRecentData [ fCurrentIndex ] & 0xFF ) ; } catch ( ArrayIndexOutOfBoundsException ex ) { b0 = slowLoadNextByte ( ) ; } } else { if ( ++ fCurrentIndex == UTF8DataChunk . CHUNK_SIZE ) b0 = slowLoadNextByte ( ) ; else b0 = ( fMostRecentByte = fMostRecentData [ fCurrentIndex ] & 0xFF ) ; } } continue ; case 2 : return XMLEntityHandler . ENTITYVALUE_RESULT_REFERENCE ; case 3 : return XMLEntityHandler . ENTITYVALUE_RESULT_PEREF ; case 7 : if ( atEOF ( fCurrentOffset + 1 ) ) { changeReaders ( ) ; return XMLEntityHandler . ENTITYVALUE_RESULT_END_OF_INPUT ; } case 4 : return XMLEntityHandler . ENTITYVALUE_RESULT_INVALID_CHAR ; } } else { if ( ! skipMultiByteCharData ( b0 ) ) return XMLEntityHandler . ENTITYVALUE_RESULT_INVALID_CHAR ; b0 = fMostRecentByte ; } } } public boolean scanExpectedName ( char fastcheck , StringPool . CharArrayRange expectedName ) throws Exception { char [ ] expected = expectedName . chars ; int offset = expectedName . offset ; int len = expectedName . length ; int b0 = fMostRecentByte ; int ch = 0 ; int i = 0 ; while ( true ) { if ( b0 < 0x80 ) { ch = b0 ; if ( i == len ) break ; if ( ch != expected [ offset ] ) { skipPastNmtoken ( fastcheck ) ; return false ; } } else { UTF8DataChunk saveChunk = fCurrentChunk ; int saveIndex = fCurrentIndex ; int saveOffset = fCurrentOffset ; int b1 ; if ( USE_OUT_OF_LINE_LOAD_NEXT_BYTE ) { b1 = loadNextByte ( ) ; } else { fCurrentOffset ++ ; if ( USE_TRY_CATCH_FOR_LOAD_NEXT_BYTE ) { fCurrentIndex ++ ; try { b1 = fMostRecentData [ fCurrentIndex ] & 0xFF ; } catch ( ArrayIndexOutOfBoundsException ex ) { b1 = slowLoadNextByte ( ) ; } } else { if ( ++ fCurrentIndex == UTF8DataChunk . CHUNK_SIZE ) b1 = slowLoadNextByte ( ) ; else b1 = ( fMostRecentByte = fMostRecentData [ fCurrentIndex ] & 0xFF ) ; } } if ( ( 0xe0 & b0 ) == 0xc0 ) { ch = ( ( 0x1f & b0 ) << 6 ) + ( 0x3f & b1 ) ; if ( i == len ) break ; if ( ch != expected [ offset ] ) { fCurrentChunk = saveChunk ; fCurrentIndex = saveIndex ; fCurrentOffset = saveOffset ; fMostRecentData = saveChunk . toByteArray ( ) ; fMostRecentByte = b0 ; skipPastNmtoken ( fastcheck ) ; return false ; } } else { int b2 ; if ( USE_OUT_OF_LINE_LOAD_NEXT_BYTE ) { b2 = loadNextByte ( ) ; } else { fCurrentOffset ++ ; if ( USE_TRY_CATCH_FOR_LOAD_NEXT_BYTE ) { fCurrentIndex ++ ; try { b2 = fMostRecentData [ fCurrentIndex ] & 0xFF ; } catch ( ArrayIndexOutOfBoundsException ex ) { b2 = slowLoadNextByte ( ) ; } } else { if ( ++ fCurrentIndex == UTF8DataChunk . CHUNK_SIZE ) b2 = slowLoadNextByte ( ) ; else b2 = ( fMostRecentByte = fMostRecentData [ fCurrentIndex ] & 0xFF ) ; } } if ( ( 0xf0 & b0 ) == 0xe0 ) { if ( ( b0 == 0xED && b1 >= 0xA0 ) || ( b0 == 0xEF && b1 == 0xBF && b2 >= 0xBE ) ) { fCurrentChunk = saveChunk ; fCurrentIndex = saveIndex ; fCurrentOffset = saveOffset ; fMostRecentData = saveChunk . toByteArray ( ) ; fMostRecentByte = b0 ; return false ; } ch = ( ( 0x0f & b0 ) << 12 ) + ( ( 0x3f & b1 ) << 6 ) + ( 0x3f & b2 ) ; if ( i == len ) break ; if ( ch != expected [ offset ] ) { fCurrentChunk = saveChunk ; fCurrentIndex = saveIndex ; fCurrentOffset = saveOffset ; fMostRecentData = saveChunk . toByteArray ( ) ; fMostRecentByte = b0 ; skipPastNmtoken ( fastcheck ) ; return false ; } } else { fCurrentChunk = saveChunk ; fCurrentIndex = saveIndex ; fCurrentOffset = saveOffset ; fMostRecentData = saveChunk . toByteArray ( ) ; fMostRecentByte = b0 ; return false ; } } } i ++ ; offset ++ ; fCharacterCounter ++ ; fCurrentOffset ++ ; if ( USE_TRY_CATCH_FOR_LOAD_NEXT_BYTE ) { fCurrentIndex ++ ; try { b0 = ( fMostRecentByte = fMostRecentData [ fCurrentIndex ] & 0xFF ) ; } catch ( ArrayIndexOutOfBoundsException ex ) { b0 = slowLoadNextByte ( ) ; } } else { if ( ++ fCurrentIndex == UTF8DataChunk . CHUNK_SIZE ) b0 = slowLoadNextByte ( ) ; else b0 = ( fMostRecentByte = fMostRecentData [ fCurrentIndex ] & 0xFF ) ; } } if ( ch == fastcheck ) return true ; if ( ch < 0x80 ) { if ( XMLCharacterProperties . fgAsciiNameChar [ ch ] == 0 ) return true ; } else { if ( ! fCalledCharPropInit ) { XMLCharacterProperties . initCharFlags ( ) ; fCalledCharPropInit = true ; } if ( ( XMLCharacterProperties . fgCharFlags [ ch ] & XMLCharacterProperties . E_NameCharFlag ) == 0 ) return true ; } skipPastNmtoken ( fastcheck ) ; return false ; } public void scanQName ( char fastcheck , QName qname ) throws Exception { int offset = fCurrentOffset ; int ch = fMostRecentByte ; if ( ch < 0x80 ) { if ( XMLCharacterProperties . fgAsciiInitialNameChar [ ch ] == 0 ) { qname . clear ( ) ; return ; } if ( ch == ':' ) { qname . clear ( ) ; return ; } } else { if ( ! fCalledCharPropInit ) { XMLCharacterProperties . initCharFlags ( ) ; fCalledCharPropInit = true ; } ch = getMultiByteSymbolChar ( ch ) ; fCurrentIndex -- ; fCurrentOffset -- ; if ( ( XMLCharacterProperties . fgCharFlags [ ch ] & XMLCharacterProperties . E_InitialNameCharFlag ) == 0 ) { qname . clear ( ) ; return ; } } int index = fCurrentIndex ; byte [ ] data = fMostRecentData ; int prefixend = - 1 ; while ( true ) { fCharacterCounter ++ ; fCurrentOffset ++ ; index ++ ; try { ch = data [ index ] & 0xFF ; } catch ( ArrayIndexOutOfBoundsException ex ) { ch = slowLoadNextByte ( ) ; index = 0 ; data = fMostRecentData ; } if ( fastcheck == ch ) break ; if ( ch < 0x80 ) { if ( XMLCharacterProperties . fgAsciiNameChar [ ch ] == 0 ) break ; if ( ch == ':' ) { if ( prefixend != - 1 ) break ; prefixend = fCurrentOffset ; try { ch = data [ index + 1 ] & 0xFF ; } catch ( ArrayIndexOutOfBoundsException ex ) { UTF8DataChunk savedChunk = fCurrentChunk ; int savedOffset = fCurrentOffset ; ch = slowLoadNextByte ( ) ; fCurrentChunk = savedChunk ; fCurrentOffset = savedOffset ; fMostRecentData = fCurrentChunk . toByteArray ( ) ; } boolean lpok = true ; if ( ch < 0x80 ) { if ( XMLCharacterProperties . fgAsciiInitialNameChar [ ch ] == 0 || ch == ':' ) lpok = false ; } else { if ( ! fCalledCharPropInit ) { XMLCharacterProperties . initCharFlags ( ) ; fCalledCharPropInit = true ; } if ( ( XMLCharacterProperties . fgCharFlags [ ch ] & XMLCharacterProperties . E_InitialNameCharFlag ) == 0 ) lpok = false ; } ch = ':' ; if ( ! lpok ) { prefixend = - 1 ; break ; } } } else { if ( ! fCalledCharPropInit ) { XMLCharacterProperties . initCharFlags ( ) ; fCalledCharPropInit = true ; } fCurrentIndex = index ; fMostRecentByte = ch ; ch = getMultiByteSymbolChar ( ch ) ; fCurrentIndex -- ; fCurrentOffset -- ; index = fCurrentIndex ; if ( ( XMLCharacterProperties . fgCharFlags [ ch ] & XMLCharacterProperties . E_NameCharFlag ) == 0 ) break ; } } fCurrentIndex = index ; fMostRecentByte = ch ; int length = fCurrentOffset - offset ; qname . rawname = addSymbol ( offset , length ) ; qname . prefix = prefixend == - 1 ? - 1 : addSymbol ( offset , prefixend - offset ) ; qname . localpart = prefixend == - 1 ? qname . rawname : addSymbol ( prefixend + 1 , fCurrentOffset - ( prefixend + 1 ) ) ; qname . uri = - 1 ; } private int getMultiByteSymbolChar ( int b0 ) throws Exception { UTF8DataChunk saveChunk = fCurrentChunk ; int saveIndex = fCurrentIndex ; int saveOffset = fCurrentOffset ; if ( ! fCalledCharPropInit ) { XMLCharacterProperties . initCharFlags ( ) ; fCalledCharPropInit = true ; } int b1 ; if ( USE_OUT_OF_LINE_LOAD_NEXT_BYTE ) { b1 = loadNextByte ( ) ; } else { fCurrentOffset ++ ; if ( USE_TRY_CATCH_FOR_LOAD_NEXT_BYTE ) { fCurrentIndex ++ ; try { b1 = fMostRecentData [ fCurrentIndex ] & 0xFF ; } catch ( ArrayIndexOutOfBoundsException ex ) { b1 = slowLoadNextByte ( ) ; } } else { if ( ++ fCurrentIndex == UTF8DataChunk . CHUNK_SIZE ) b1 = slowLoadNextByte ( ) ; else b1 = ( fMostRecentByte = fMostRecentData [ fCurrentIndex ] & 0xFF ) ; } } if ( ( 0xe0 & b0 ) == 0xc0 ) { int ch = ( ( 0x1f & b0 ) << 6 ) + ( 0x3f & b1 ) ; if ( ( XMLCharacterProperties . fgCharFlags [ ch ] & XMLCharacterProperties . E_NameCharFlag ) == 0 ) { fCurrentChunk = saveChunk ; fCurrentIndex = saveIndex ; fCurrentOffset = saveOffset ; fMostRecentData = saveChunk . toByteArray ( ) ; fMostRecentByte = b0 ; return - 1 ; } loadNextByte ( ) ; return ch ; } int b2 ; if ( USE_OUT_OF_LINE_LOAD_NEXT_BYTE ) { b2 = loadNextByte ( ) ; } else { fCurrentOffset ++ ; if ( USE_TRY_CATCH_FOR_LOAD_NEXT_BYTE ) { fCurrentIndex ++ ; try { b2 = fMostRecentData [ fCurrentIndex ] & 0xFF ; } catch ( ArrayIndexOutOfBoundsException ex ) { b2 = slowLoadNextByte ( ) ; } } else { if ( ++ fCurrentIndex == UTF8DataChunk . CHUNK_SIZE ) b2 = slowLoadNextByte ( ) ; else b2 = ( fMostRecentByte = fMostRecentData [ fCurrentIndex ] & 0xFF ) ; } } if ( ( 0xf0 & b0 ) == 0xe0 ) { if ( ( b0 == 0xED && b1 >= 0xA0 ) || ( b0 == 0xEF && b1 == 0xBF && b2 >= 0xBE ) ) { fCurrentChunk = saveChunk ; fCurrentIndex = saveIndex ; fCurrentOffset = saveOffset ; fMostRecentData = saveChunk . toByteArray ( ) ; fMostRecentByte = b0 ; return - 1 ; } int ch = ( ( 0x0f & b0 ) << 12 ) + ( ( 0x3f & b1 ) << 6 ) + ( 0x3f & b2 ) ; if ( ( XMLCharacterProperties . fgCharFlags [ ch ] & XMLCharacterProperties . E_NameCharFlag ) == 0 ) { fCurrentChunk = saveChunk ; fCurrentIndex = saveIndex ; fCurrentOffset = saveOffset ; fMostRecentData = saveChunk . toByteArray ( ) ; fMostRecentByte = b0 ; return - 1 ; } loadNextByte ( ) ; return ch ; } fCurrentChunk = saveChunk ; fCurrentIndex = saveIndex ; fCurrentOffset = saveOffset ; fMostRecentData = saveChunk . toByteArray ( ) ; fMostRecentByte = b0 ; return - 1 ; } public int scanName ( char fastcheck ) throws Exception { int b0 = fMostRecentByte ; int ch ; if ( b0 < 0x80 ) { if ( XMLCharacterProperties . fgAsciiInitialNameChar [ b0 ] == 0 ) { if ( b0 == 0 && atEOF ( fCurrentOffset + 1 ) ) { return changeReaders ( ) . scanName ( fastcheck ) ; } return - 1 ; } ch = b0 ; } else { UTF8DataChunk saveChunk = fCurrentChunk ; int saveIndex = fCurrentIndex ; int saveOffset = fCurrentOffset ; if ( ! fCalledCharPropInit ) { XMLCharacterProperties . initCharFlags ( ) ; fCalledCharPropInit = true ; } int b1 ; if ( USE_OUT_OF_LINE_LOAD_NEXT_BYTE ) { b1 = loadNextByte ( ) ; } else { fCurrentOffset ++ ; if ( USE_TRY_CATCH_FOR_LOAD_NEXT_BYTE ) { fCurrentIndex ++ ; try { b1 = fMostRecentData [ fCurrentIndex ] & 0xFF ; } catch ( ArrayIndexOutOfBoundsException ex ) { b1 = slowLoadNextByte ( ) ; } } else { if ( ++ fCurrentIndex == UTF8DataChunk . CHUNK_SIZE ) b1 = slowLoadNextByte ( ) ; else b1 = ( fMostRecentByte = fMostRecentData [ fCurrentIndex ] & 0xFF ) ; } } if ( ( 0xe0 & b0 ) == 0xc0 ) { ch = ( ( 0x1f & b0 ) << 6 ) + ( 0x3f & b1 ) ; if ( ( XMLCharacterProperties . fgCharFlags [ ch ] & XMLCharacterProperties . E_InitialNameCharFlag ) == 0 ) { fCurrentChunk = saveChunk ; fCurrentIndex = saveIndex ; fCurrentOffset = saveOffset ; fMostRecentData = saveChunk . toByteArray ( ) ; fMostRecentByte = b0 ; return - 1 ; } } else { int b2 ; if ( USE_OUT_OF_LINE_LOAD_NEXT_BYTE ) { b2 = loadNextByte ( ) ; } else { fCurrentOffset ++ ; if ( USE_TRY_CATCH_FOR_LOAD_NEXT_BYTE ) { fCurrentIndex ++ ; try { b2 = fMostRecentData [ fCurrentIndex ] & 0xFF ; } catch ( ArrayIndexOutOfBoundsException ex ) { b2 = slowLoadNextByte ( ) ; } } else { if ( ++ fCurrentIndex == UTF8DataChunk . CHUNK_SIZE ) b2 = slowLoadNextByte ( ) ; else b2 = ( fMostRecentByte = fMostRecentData [ fCurrentIndex ] & 0xFF ) ; } } if ( ( 0xf0 & b0 ) == 0xe0 ) { if ( ( b0 == 0xED && b1 >= 0xA0 ) || ( b0 == 0xEF && b1 == 0xBF && b2 >= 0xBE ) ) { fCurrentChunk = saveChunk ; fCurrentIndex = saveIndex ; fCurrentOffset = saveOffset ; fMostRecentData = saveChunk . toByteArray ( ) ; fMostRecentByte = b0 ; return - 1 ; } ch = ( ( 0x0f & b0 ) << 12 ) + ( ( 0x3f & b1 ) << 6 ) + ( 0x3f & b2 ) ; if ( ( XMLCharacterProperties . fgCharFlags [ ch ] & XMLCharacterProperties . E_InitialNameCharFlag ) == 0 ) { fCurrentChunk = saveChunk ; fCurrentIndex = saveIndex ; fCurrentOffset = saveOffset ; fMostRecentData = saveChunk . toByteArray ( ) ; fMostRecentByte = b0 ; return - 1 ; } } else { fCurrentChunk = saveChunk ; fCurrentIndex = saveIndex ; fCurrentOffset = saveOffset ; fMostRecentData = saveChunk . toByteArray ( ) ; fMostRecentByte = b0 ; return - 1 ; } } } fCharacterCounter ++ ; if ( USE_OUT_OF_LINE_LOAD_NEXT_BYTE ) { b0 = loadNextByte ( ) ; } else { fCurrentOffset ++ ; if ( USE_TRY_CATCH_FOR_LOAD_NEXT_BYTE ) { fCurrentIndex ++ ; try { b0 = fMostRecentByte = fMostRecentData [ fCurrentIndex ] & 0xFF ; } catch ( ArrayIndexOutOfBoundsException ex ) { b0 = slowLoadNextByte ( ) ; } } else { if ( ++ fCurrentIndex == UTF8DataChunk . CHUNK_SIZE ) b0 = slowLoadNextByte ( ) ; else b0 = ( fMostRecentByte = fMostRecentData [ fCurrentIndex ] & 0xFF ) ; } } return scanMatchingName ( ch , b0 , fastcheck ) ; } private int scanMatchingName ( int ch , int b0 , int fastcheck ) throws Exception { SymbolCache cache = fStringPool . getSymbolCache ( ) ; int [ ] [ ] cacheLines = cache . fCacheLines ; char [ ] symbolChars = cache . fSymbolChars ; boolean lengthOfOne = fastcheck == fMostRecentByte ; int startOffset = cache . fSymbolCharsOffset ; int entry = 0 ; int [ ] entries = cacheLines [ entry ] ; int offset = 1 + ( ( entries [ 0 ] - 1 ) * SymbolCache . CACHE_RECORD_SIZE ) ; int totalMisses = 0 ; if ( lengthOfOne ) { while ( offset > 0 ) { if ( entries [ offset + SymbolCache . CHAR_OFFSET ] == ch ) { if ( entries [ offset + SymbolCache . INDEX_OFFSET ] != - 1 ) { int symbolIndex = entries [ offset + SymbolCache . INDEX_OFFSET ] ; if ( totalMisses > 3 ) fStringPool . updateCacheLine ( symbolIndex , totalMisses , 1 ) ; return symbolIndex ; } break ; } offset -= SymbolCache . CACHE_RECORD_SIZE ; totalMisses ++ ; } try { symbolChars [ cache . fSymbolCharsOffset ] = ( char ) ch ; } catch ( ArrayIndexOutOfBoundsException ex ) { symbolChars = new char [ cache . fSymbolCharsOffset * 2 ] ; System . arraycopy ( cache . fSymbolChars , 0 , symbolChars , 0 , cache . fSymbolCharsOffset ) ; cache . fSymbolChars = symbolChars ; symbolChars [ cache . fSymbolCharsOffset ] = ( char ) ch ; } cache . fSymbolCharsOffset ++ ; if ( offset < 0 ) { offset = 1 + ( entries [ 0 ] * SymbolCache . CACHE_RECORD_SIZE ) ; entries [ 0 ] ++ ; try { entries [ offset + SymbolCache . CHAR_OFFSET ] = ch ; } catch ( ArrayIndexOutOfBoundsException ex ) { int newSize = 1 + ( ( offset - 1 ) * 2 ) ; entries = new int [ newSize ] ; System . arraycopy ( cacheLines [ entry ] , 0 , entries , 0 , offset ) ; cacheLines [ entry ] = entries ; entries [ offset + SymbolCache . CHAR_OFFSET ] = ch ; } entries [ offset + SymbolCache . NEXT_OFFSET ] = - 1 ; } int result = fStringPool . createNonMatchingSymbol ( startOffset , entry , entries , offset ) ; return result ; } try { symbolChars [ cache . fSymbolCharsOffset ] = ( char ) ch ; } catch ( ArrayIndexOutOfBoundsException ex ) { symbolChars = new char [ cache . fSymbolCharsOffset * 2 ] ; System . arraycopy ( cache . fSymbolChars , 0 , symbolChars , 0 , cache . fSymbolCharsOffset ) ; cache . fSymbolChars = symbolChars ; symbolChars [ cache . fSymbolCharsOffset ] = ( char ) ch ; } cache . fSymbolCharsOffset ++ ; int depth = 1 ; while ( true ) { if ( offset < 0 ) break ; if ( entries [ offset + SymbolCache . CHAR_OFFSET ] != ch ) { offset -= SymbolCache . CACHE_RECORD_SIZE ; totalMisses ++ ; continue ; } if ( b0 >= 0x80 ) { ch = getMultiByteSymbolChar ( b0 ) ; b0 = fMostRecentByte ; } else if ( b0 == fastcheck || XMLCharacterProperties . fgAsciiNameChar [ b0 ] == 0 ) { ch = - 1 ; } else { ch = b0 ; fCharacterCounter ++ ; if ( USE_OUT_OF_LINE_LOAD_NEXT_BYTE ) { b0 = loadNextByte ( ) ; } else { fCurrentOffset ++ ; if ( USE_TRY_CATCH_FOR_LOAD_NEXT_BYTE ) { fCurrentIndex ++ ; try { b0 = ( fMostRecentByte = fMostRecentData [ fCurrentIndex ] & 0xFF ) ; } catch ( ArrayIndexOutOfBoundsException ex ) { b0 = slowLoadNextByte ( ) ; } } else { if ( ++ fCurrentIndex == UTF8DataChunk . CHUNK_SIZE ) b0 = slowLoadNextByte ( ) ; else b0 = ( fMostRecentByte = fMostRecentData [ fCurrentIndex ] & 0xFF ) ; } } } if ( ch == - 1 ) { if ( entries [ offset + SymbolCache . INDEX_OFFSET ] == - 1 ) { return fStringPool . createNonMatchingSymbol ( startOffset , entry , entries , offset ) ; } cache . fSymbolCharsOffset = startOffset ; int symbolIndex = entries [ offset + SymbolCache . INDEX_OFFSET ] ; if ( totalMisses > ( depth * 3 ) ) fStringPool . updateCacheLine ( symbolIndex , totalMisses , depth ) ; return symbolIndex ; } try { symbolChars [ cache . fSymbolCharsOffset ] = ( char ) ch ; } catch ( ArrayIndexOutOfBoundsException ex ) { symbolChars = new char [ cache . fSymbolCharsOffset * 2 ] ; System . arraycopy ( cache . fSymbolChars , 0 , symbolChars , 0 , cache . fSymbolCharsOffset ) ; cache . fSymbolChars = symbolChars ; symbolChars [ cache . fSymbolCharsOffset ] = ( char ) ch ; } cache . fSymbolCharsOffset ++ ; entry = entries [ offset + SymbolCache . NEXT_OFFSET ] ; try { entries = cacheLines [ entry ] ; } catch ( ArrayIndexOutOfBoundsException ex ) { if ( entry == - 1 ) { entry = cache . fCacheLineCount ++ ; entries [ offset + SymbolCache . NEXT_OFFSET ] = entry ; entries = new int [ 1 + ( SymbolCache . INITIAL_CACHE_RECORD_COUNT * SymbolCache . CACHE_RECORD_SIZE ) ] ; try { cacheLines [ entry ] = entries ; } catch ( ArrayIndexOutOfBoundsException ex2 ) { cacheLines = new int [ entry * 2 ] [ ] ; System . arraycopy ( cache . fCacheLines , 0 , cacheLines , 0 , entry ) ; cache . fCacheLines = cacheLines ; cacheLines [ entry ] = entries ; } } else { entries = cacheLines [ entry ] ; throw new RuntimeException ( "RDR001 untested" ) ; } } offset = 1 + ( ( entries [ 0 ] - 1 ) * SymbolCache . CACHE_RECORD_SIZE ) ; depth ++ ; } if ( offset < 0 ) offset = 1 + ( entries [ 0 ] * SymbolCache . CACHE_RECORD_SIZE ) ; while ( true ) { entries [ 0 ] ++ ; try { entries [ offset + SymbolCache . CHAR_OFFSET ] = ch ; } catch ( ArrayIndexOutOfBoundsException ex ) { int newSize = 1 + ( ( offset - 1 ) * 2 ) ; entries = new int [ newSize ] ; System . arraycopy ( cacheLines [ entry ] , 0 , entries , 0 , offset ) ; cacheLines [ entry ] = entries ; entries [ offset + SymbolCache . CHAR_OFFSET ] = ch ; } if ( b0 >= 0x80 ) { ch = getMultiByteSymbolChar ( b0 ) ; b0 = fMostRecentByte ; } else if ( b0 == fastcheck || XMLCharacterProperties . fgAsciiNameChar [ b0 ] == 0 ) { ch = - 1 ; } else { ch = b0 ; fCharacterCounter ++ ; if ( USE_OUT_OF_LINE_LOAD_NEXT_BYTE ) { b0 = loadNextByte ( ) ; } else { fCurrentOffset ++ ; if ( USE_TRY_CATCH_FOR_LOAD_NEXT_BYTE ) { fCurrentIndex ++ ; try { b0 = ( fMostRecentByte = fMostRecentData [ fCurrentIndex ] & 0xFF ) ; } catch ( ArrayIndexOutOfBoundsException ex ) { b0 = slowLoadNextByte ( ) ; } } else { if ( ++ fCurrentIndex == UTF8DataChunk . CHUNK_SIZE ) b0 = slowLoadNextByte ( ) ; else b0 = ( fMostRecentByte = fMostRecentData [ fCurrentIndex ] & 0xFF ) ; } } } if ( ch == - 1 ) { entries [ offset + SymbolCache . NEXT_OFFSET ] = - 1 ; break ; } entry = cache . fCacheLineCount ++ ; entries [ offset + SymbolCache . INDEX_OFFSET ] = - 1 ; entries [ offset + SymbolCache . NEXT_OFFSET ] = entry ; entries = new int [ 1 + ( SymbolCache . INITIAL_CACHE_RECORD_COUNT * SymbolCache . CACHE_RECORD_SIZE ) ] ; try { cacheLines [ entry ] = entries ; } catch ( ArrayIndexOutOfBoundsException ex ) { cacheLines = new int [ entry * 2 ] [ ] ; System . arraycopy ( cache . fCacheLines , 0 , cacheLines , 0 , entry ) ; cache . fCacheLines = cacheLines ; cacheLines [ entry ] = entries ; } offset = 1 ; try { symbolChars [ cache . fSymbolCharsOffset ] = ( char ) ch ; } catch ( ArrayIndexOutOfBoundsException ex ) { symbolChars = new char [ cache . fSymbolCharsOffset * 2 ] ; System . arraycopy ( cache . fSymbolChars , 0 , symbolChars , 0 , cache . fSymbolCharsOffset ) ; cache . fSymbolChars = symbolChars ; symbolChars [ cache . fSymbolCharsOffset ] = ( char ) ch ; } cache . fSymbolCharsOffset ++ ; } int result = fStringPool . createNonMatchingSymbol ( startOffset , entry , entries , offset ) ; return result ; } private int recognizeMarkup ( int b0 , QName element ) throws Exception { switch ( b0 ) { case 0 : return XMLEntityHandler . CONTENT_RESULT_MARKUP_END_OF_INPUT ; case '?' : fCharacterCounter ++ ; loadNextByte ( ) ; return XMLEntityHandler . CONTENT_RESULT_START_OF_PI ; case '!' : fCharacterCounter ++ ; b0 = loadNextByte ( ) ; if ( b0 == 0 ) { fCharacterCounter -- ; fCurrentOffset -- ; return XMLEntityHandler . CONTENT_RESULT_MARKUP_END_OF_INPUT ; } if ( b0 == '-' ) { fCharacterCounter ++ ; b0 = loadNextByte ( ) ; if ( b0 == 0 ) { fCharacterCounter -= 2 ; fCurrentOffset -= 2 ; return XMLEntityHandler . CONTENT_RESULT_MARKUP_END_OF_INPUT ; } if ( b0 == '-' ) { fCharacterCounter ++ ; b0 = loadNextByte ( ) ; return XMLEntityHandler . CONTENT_RESULT_START_OF_COMMENT ; } break ; } if ( b0 == '[' ) { for ( int i = 0 ; i < 6 ; i ++ ) { fCharacterCounter ++ ; b0 = loadNextByte ( ) ; if ( b0 == 0 ) { fCharacterCounter -= ( 2 + i ) ; fCurrentOffset -= ( 2 + i ) ; return XMLEntityHandler . CONTENT_RESULT_MARKUP_END_OF_INPUT ; } if ( b0 != cdata_string [ i ] ) { return XMLEntityHandler . CONTENT_RESULT_MARKUP_NOT_RECOGNIZED ; } } fCharacterCounter ++ ; loadNextByte ( ) ; return XMLEntityHandler . CONTENT_RESULT_START_OF_CDSECT ; } break ; case '/' : fCharacterCounter ++ ; if ( USE_OUT_OF_LINE_LOAD_NEXT_BYTE ) { b0 = loadNextByte ( ) ; } else { fCurrentOffset ++ ; if ( USE_TRY_CATCH_FOR_LOAD_NEXT_BYTE ) { fCurrentIndex ++ ; try { b0 = ( fMostRecentByte = fMostRecentData [ fCurrentIndex ] & 0xFF ) ; } catch ( ArrayIndexOutOfBoundsException ex ) { b0 = slowLoadNextByte ( ) ; } } else { if ( ++ fCurrentIndex == UTF8DataChunk . CHUNK_SIZE ) b0 = slowLoadNextByte ( ) ; else b0 = ( fMostRecentByte = fMostRecentData [ fCurrentIndex ] & 0xFF ) ; } } int expectedName = element . rawname ; fStringPool . getCharArrayRange ( expectedName , fCharArrayRange ) ; char [ ] expected = fCharArrayRange . chars ; int offset = fCharArrayRange . offset ; int len = fCharArrayRange . length ; if ( b0 == expected [ offset ++ ] ) { UTF8DataChunk savedChunk = fCurrentChunk ; int savedIndex = fCurrentIndex ; int savedOffset = fCurrentOffset ; for ( int i = 1 ; i < len ; i ++ ) { if ( USE_OUT_OF_LINE_LOAD_NEXT_BYTE ) { b0 = loadNextByte ( ) ; } else { fCurrentOffset ++ ; if ( USE_TRY_CATCH_FOR_LOAD_NEXT_BYTE ) { fCurrentIndex ++ ; try { b0 = ( fMostRecentByte = fMostRecentData [ fCurrentIndex ] & 0xFF ) ; } catch ( ArrayIndexOutOfBoundsException ex ) { b0 = slowLoadNextByte ( ) ; } } else { if ( ++ fCurrentIndex == UTF8DataChunk . CHUNK_SIZE ) b0 = slowLoadNextByte ( ) ; else b0 = ( fMostRecentByte = fMostRecentData [ fCurrentIndex ] & 0xFF ) ; } } if ( b0 != expected [ offset ++ ] ) { fCurrentChunk = savedChunk ; fCurrentIndex = savedIndex ; fCurrentOffset = savedOffset ; fMostRecentData = fCurrentChunk . toByteArray ( ) ; fMostRecentByte = fMostRecentData [ savedIndex ] & 0xFF ; return XMLEntityHandler . CONTENT_RESULT_START_OF_ETAG ; } } fCharacterCounter += len ; fCharacterCounter ++ ; if ( USE_OUT_OF_LINE_LOAD_NEXT_BYTE ) { b0 = loadNextByte ( ) ; } else { fCurrentOffset ++ ; if ( USE_TRY_CATCH_FOR_LOAD_NEXT_BYTE ) { fCurrentIndex ++ ; try { b0 = ( fMostRecentByte = fMostRecentData [ fCurrentIndex ] & 0xFF ) ; } catch ( ArrayIndexOutOfBoundsException ex ) { b0 = slowLoadNextByte ( ) ; } } else { if ( ++ fCurrentIndex == UTF8DataChunk . CHUNK_SIZE ) b0 = slowLoadNextByte ( ) ; else b0 = ( fMostRecentByte = fMostRecentData [ fCurrentIndex ] & 0xFF ) ; } } if ( b0 == '>' ) { fCharacterCounter ++ ; if ( USE_OUT_OF_LINE_LOAD_NEXT_BYTE ) { loadNextByte ( ) ; } else { fCurrentOffset ++ ; if ( USE_TRY_CATCH_FOR_LOAD_NEXT_BYTE ) { fCurrentIndex ++ ; try { fMostRecentByte = fMostRecentData [ fCurrentIndex ] & 0xFF ; } catch ( ArrayIndexOutOfBoundsException ex ) { slowLoadNextByte ( ) ; } } else { if ( ++ fCurrentIndex == UTF8DataChunk . CHUNK_SIZE ) slowLoadNextByte ( ) ; else fMostRecentByte = fMostRecentData [ fCurrentIndex ] & 0xFF ; } } return XMLEntityHandler . CONTENT_RESULT_MATCHING_ETAG ; } while ( b0 == 0x20 || b0 == 0x09 || b0 == 0x0A || b0 == 0x0D ) { if ( b0 == 0x0A ) { fLinefeedCounter ++ ; fCharacterCounter = 1 ; b0 = loadNextByte ( ) ; } else if ( b0 == 0x0D ) { fCarriageReturnCounter ++ ; fCharacterCounter = 1 ; b0 = loadNextByte ( ) ; if ( b0 == 0x0A ) { fLinefeedCounter ++ ; b0 = loadNextByte ( ) ; } } else { fCharacterCounter ++ ; b0 = loadNextByte ( ) ; } if ( b0 == '>' ) { fCharacterCounter ++ ; if ( USE_OUT_OF_LINE_LOAD_NEXT_BYTE ) { loadNextByte ( ) ; } else { fCurrentOffset ++ ; if ( USE_TRY_CATCH_FOR_LOAD_NEXT_BYTE ) { fCurrentIndex ++ ; try { fMostRecentByte = fMostRecentData [ fCurrentIndex ] & 0xFF ; } catch ( ArrayIndexOutOfBoundsException ex ) { slowLoadNextByte ( ) ; } } else { if ( ++ fCurrentIndex == UTF8DataChunk . CHUNK_SIZE ) slowLoadNextByte ( ) ; else fMostRecentByte = fMostRecentData [ fCurrentIndex ] & 0xFF ; } } return XMLEntityHandler . CONTENT_RESULT_MATCHING_ETAG ; } } fCurrentChunk = savedChunk ; fCurrentIndex = savedIndex ; fCurrentOffset = savedOffset ; fMostRecentData = fCurrentChunk . toByteArray ( ) ; fMostRecentByte = fMostRecentData [ savedIndex ] & 0xFF ; } return XMLEntityHandler . CONTENT_RESULT_START_OF_ETAG ; default : return XMLEntityHandler . CONTENT_RESULT_START_OF_ELEMENT ; } return XMLEntityHandler . CONTENT_RESULT_MARKUP_NOT_RECOGNIZED ; } private int recognizeReference ( int ch ) throws Exception { if ( ch == 0 ) { return XMLEntityHandler . CONTENT_RESULT_REFERENCE_END_OF_INPUT ; } if ( ch == '#' ) { fCharacterCounter ++ ; loadNextByte ( ) ; return XMLEntityHandler . CONTENT_RESULT_START_OF_CHARREF ; } else { return XMLEntityHandler . CONTENT_RESULT_START_OF_ENTITYREF ; } } public int scanContent ( QName element ) throws Exception { if ( fCallClearPreviousChunk && fCurrentChunk . clearPreviousChunk ( ) ) fCallClearPreviousChunk = false ; fCharDataLength = 0 ; int charDataOffset = fCurrentOffset ; int ch = fMostRecentByte ; if ( ch < 0x80 ) { switch ( XMLCharacterProperties . fgAsciiWSCharData [ ch ] ) { case 0 : if ( fSendCharDataAsCharArray ) { try { fCharacters [ fCharDataLength ] = ( char ) ch ; fCharDataLength ++ ; } catch ( ArrayIndexOutOfBoundsException ex ) { slowAppendCharData ( ch ) ; } } fCharacterCounter ++ ; if ( USE_OUT_OF_LINE_LOAD_NEXT_BYTE ) { ch = loadNextByte ( ) ; } else { fCurrentOffset ++ ; if ( USE_TRY_CATCH_FOR_LOAD_NEXT_BYTE ) { fCurrentIndex ++ ; try { ch = ( fMostRecentByte = fMostRecentData [ fCurrentIndex ] & 0xFF ) ; } catch ( ArrayIndexOutOfBoundsException ex ) { ch = slowLoadNextByte ( ) ; } } else { if ( ++ fCurrentIndex == UTF8DataChunk . CHUNK_SIZE ) ch = slowLoadNextByte ( ) ; else ch = ( fMostRecentByte = fMostRecentData [ fCurrentIndex ] & 0xFF ) ; } } break ; case 1 : fCharacterCounter ++ ; if ( USE_OUT_OF_LINE_LOAD_NEXT_BYTE ) { ch = loadNextByte ( ) ; } else { fCurrentOffset ++ ; if ( USE_TRY_CATCH_FOR_LOAD_NEXT_BYTE ) { fCurrentIndex ++ ; try { ch = ( fMostRecentByte = fMostRecentData [ fCurrentIndex ] & 0xFF ) ; } catch ( ArrayIndexOutOfBoundsException ex ) { ch = slowLoadNextByte ( ) ; } } else { if ( ++ fCurrentIndex == UTF8DataChunk . CHUNK_SIZE ) ch = slowLoadNextByte ( ) ; else ch = ( fMostRecentByte = fMostRecentData [ fCurrentIndex ] & 0xFF ) ; } } if ( ! fInCDSect ) { return recognizeMarkup ( ch , element ) ; } if ( fSendCharDataAsCharArray ) appendCharData ( '<' ) ; break ; case 2 : fCharacterCounter ++ ; ch = loadNextByte ( ) ; if ( ! fInCDSect ) { return recognizeReference ( ch ) ; } if ( fSendCharDataAsCharArray ) appendCharData ( '&' ) ; break ; case 3 : fCharacterCounter ++ ; ch = loadNextByte ( ) ; if ( ch != ']' ) { if ( fSendCharDataAsCharArray ) appendCharData ( ']' ) ; break ; } if ( fCurrentIndex + 1 == UTF8DataChunk . CHUNK_SIZE ) { UTF8DataChunk saveChunk = fCurrentChunk ; int saveIndex = fCurrentIndex ; int saveOffset = fCurrentOffset ; if ( loadNextByte ( ) != '>' ) { fCurrentChunk = saveChunk ; fCurrentIndex = saveIndex ; fCurrentOffset = saveOffset ; fMostRecentData = fCurrentChunk . toByteArray ( ) ; fMostRecentByte = ']' ; if ( fSendCharDataAsCharArray ) appendCharData ( ']' ) ; break ; } } else { if ( fMostRecentData [ fCurrentIndex + 1 ] != '>' ) { if ( fSendCharDataAsCharArray ) appendCharData ( ']' ) ; break ; } fCurrentIndex ++ ; fCurrentOffset ++ ; } loadNextByte ( ) ; fCharacterCounter += 2 ; return XMLEntityHandler . CONTENT_RESULT_END_OF_CDSECT ; case 4 : if ( ch == 0 && atEOF ( fCurrentOffset + 1 ) ) { changeReaders ( ) ; return XMLEntityHandler . CONTENT_RESULT_INVALID_CHAR ; } return XMLEntityHandler . CONTENT_RESULT_INVALID_CHAR ; case 5 : do { if ( ch == 0x0A ) { fLinefeedCounter ++ ; fCharacterCounter = 1 ; } else if ( ch == 0x0D ) { fCarriageReturnCounter ++ ; fCharacterCounter = 1 ; if ( USE_OUT_OF_LINE_LOAD_NEXT_BYTE ) { ch = loadNextByte ( ) ; } else { fCurrentOffset ++ ; if ( USE_TRY_CATCH_FOR_LOAD_NEXT_BYTE ) { fCurrentIndex ++ ; try { ch = ( fMostRecentByte = fMostRecentData [ fCurrentIndex ] & 0xFF ) ; } catch ( ArrayIndexOutOfBoundsException ex ) { ch = slowLoadNextByte ( ) ; } } else { if ( ++ fCurrentIndex == UTF8DataChunk . CHUNK_SIZE ) ch = slowLoadNextByte ( ) ; else ch = ( fMostRecentByte = fMostRecentData [ fCurrentIndex ] & 0xFF ) ; } } if ( ch != 0x0A ) { if ( fSendCharDataAsCharArray ) appendCharData ( 0x0A ) ; if ( ch == 0x20 || ch == 0x09 || ch == 0x0D ) continue ; break ; } fLinefeedCounter ++ ; } else { fCharacterCounter ++ ; } if ( fSendCharDataAsCharArray ) { try { fCharacters [ fCharDataLength ] = ( char ) ch ; fCharDataLength ++ ; } catch ( ArrayIndexOutOfBoundsException ex ) { slowAppendCharData ( ch ) ; } } if ( USE_OUT_OF_LINE_LOAD_NEXT_BYTE ) { ch = loadNextByte ( ) ; } else { fCurrentOffset ++ ; if ( USE_TRY_CATCH_FOR_LOAD_NEXT_BYTE ) { fCurrentIndex ++ ; try { ch = ( fMostRecentByte = fMostRecentData [ fCurrentIndex ] & 0xFF ) ; } catch ( ArrayIndexOutOfBoundsException ex ) { ch = slowLoadNextByte ( ) ; } } else { if ( ++ fCurrentIndex == UTF8DataChunk . CHUNK_SIZE ) ch = slowLoadNextByte ( ) ; else ch = ( fMostRecentByte = fMostRecentData [ fCurrentIndex ] & 0xFF ) ; } } } while ( ch == 0x20 || ch == 0x09 || ch == 0x0A || ch == 0x0D ) ; if ( ch < 0x80 ) { switch ( XMLCharacterProperties . fgAsciiCharData [ ch ] ) { case 0 : if ( fSendCharDataAsCharArray ) appendCharData ( ch ) ; fCharacterCounter ++ ; ch = loadNextByte ( ) ; break ; case 1 : if ( ! fInCDSect ) { if ( fSendCharDataAsCharArray ) { fCharDataHandler . processWhitespace ( fCharacters , 0 , fCharDataLength ) ; } else { int stringIndex = addString ( charDataOffset , fCurrentOffset - charDataOffset ) ; fCharDataHandler . processWhitespace ( stringIndex ) ; } fCharacterCounter ++ ; if ( USE_OUT_OF_LINE_LOAD_NEXT_BYTE ) { ch = loadNextByte ( ) ; } else { fCurrentOffset ++ ; if ( USE_TRY_CATCH_FOR_LOAD_NEXT_BYTE ) { fCurrentIndex ++ ; try { ch = ( fMostRecentByte = fMostRecentData [ fCurrentIndex ] & 0xFF ) ; } catch ( ArrayIndexOutOfBoundsException ex ) { ch = slowLoadNextByte ( ) ; } } else { if ( ++ fCurrentIndex == UTF8DataChunk . CHUNK_SIZE ) ch = slowLoadNextByte ( ) ; else ch = ( fMostRecentByte = fMostRecentData [ fCurrentIndex ] & 0xFF ) ; } } return recognizeMarkup ( ch , element ) ; } if ( fSendCharDataAsCharArray ) appendCharData ( '<' ) ; fCharacterCounter ++ ; ch = loadNextByte ( ) ; break ; case 2 : if ( ! fInCDSect ) { whitespace ( charDataOffset , fCurrentOffset ) ; fCharacterCounter ++ ; ch = loadNextByte ( ) ; return recognizeReference ( ch ) ; } if ( fSendCharDataAsCharArray ) appendCharData ( '&' ) ; fCharacterCounter ++ ; ch = loadNextByte ( ) ; break ; case 3 : int endOffset = fCurrentOffset ; ch = loadNextByte ( ) ; if ( ch != ']' ) { fCharacterCounter ++ ; if ( fSendCharDataAsCharArray ) appendCharData ( ']' ) ; break ; } if ( fCurrentIndex + 1 == UTF8DataChunk . CHUNK_SIZE ) { UTF8DataChunk saveChunk = fCurrentChunk ; int saveIndex = fCurrentIndex ; int saveOffset = fCurrentOffset ; if ( loadNextByte ( ) != '>' ) { fCurrentChunk = saveChunk ; fCurrentIndex = saveIndex ; fCurrentOffset = saveOffset ; fMostRecentData = fCurrentChunk . toByteArray ( ) ; fMostRecentByte = ']' ; fCharacterCounter ++ ; if ( fSendCharDataAsCharArray ) appendCharData ( ']' ) ; break ; } } else { if ( fMostRecentData [ fCurrentIndex + 1 ] != '>' ) { fCharacterCounter ++ ; if ( fSendCharDataAsCharArray ) appendCharData ( ']' ) ; break ; } fCurrentIndex ++ ; fCurrentOffset ++ ; } loadNextByte ( ) ; whitespace ( charDataOffset , endOffset ) ; fCharacterCounter += 3 ; return XMLEntityHandler . CONTENT_RESULT_END_OF_CDSECT ; case 4 : whitespace ( charDataOffset , fCurrentOffset ) ; if ( ch == 0 && atEOF ( fCurrentOffset + 1 ) ) { changeReaders ( ) ; return XMLEntityHandler . CONTENT_RESULT_INVALID_CHAR ; } return XMLEntityHandler . CONTENT_RESULT_INVALID_CHAR ; } } else { if ( fSendCharDataAsCharArray ) { if ( ! copyMultiByteCharData ( ch ) ) { whitespace ( charDataOffset , fCurrentOffset ) ; return XMLEntityHandler . CONTENT_RESULT_INVALID_CHAR ; } } else if ( ! skipMultiByteCharData ( ch ) ) { whitespace ( charDataOffset , fCurrentOffset ) ; return XMLEntityHandler . CONTENT_RESULT_INVALID_CHAR ; } } break ; } } else { if ( fSendCharDataAsCharArray ) { if ( ! copyMultiByteCharData ( ch ) ) { return XMLEntityHandler . CONTENT_RESULT_INVALID_CHAR ; } } else { if ( ! skipMultiByteCharData ( ch ) ) { return XMLEntityHandler . CONTENT_RESULT_INVALID_CHAR ; } } } if ( fSendCharDataAsCharArray ) ch = copyAsciiCharData ( ) ; else ch = skipAsciiCharData ( ) ; while ( true ) { if ( ch < 0x80 ) { switch ( XMLCharacterProperties . fgAsciiCharData [ ch ] ) { case 0 : if ( fSendCharDataAsCharArray ) appendCharData ( ch ) ; fCharacterCounter ++ ; ch = loadNextByte ( ) ; break ; case 1 : if ( ! fInCDSect ) { if ( fSendCharDataAsCharArray ) { fCharDataHandler . processCharacters ( fCharacters , 0 , fCharDataLength ) ; } else { int stringIndex = addString ( charDataOffset , fCurrentOffset - charDataOffset ) ; fCharDataHandler . processCharacters ( stringIndex ) ; } fCharacterCounter ++ ; if ( USE_OUT_OF_LINE_LOAD_NEXT_BYTE ) { ch = loadNextByte ( ) ; } else { fCurrentOffset ++ ; if ( USE_TRY_CATCH_FOR_LOAD_NEXT_BYTE ) { fCurrentIndex ++ ; try { ch = ( fMostRecentByte = fMostRecentData [ fCurrentIndex ] & 0xFF ) ; } catch ( ArrayIndexOutOfBoundsException ex ) { ch = slowLoadNextByte ( ) ; } } else { if ( ++ fCurrentIndex == UTF8DataChunk . CHUNK_SIZE ) ch = slowLoadNextByte ( ) ; else ch = ( fMostRecentByte = fMostRecentData [ fCurrentIndex ] & 0xFF ) ; } } return recognizeMarkup ( ch , element ) ; } if ( fSendCharDataAsCharArray ) appendCharData ( '<' ) ; fCharacterCounter ++ ; ch = loadNextByte ( ) ; break ; case 2 : if ( ! fInCDSect ) { characters ( charDataOffset , fCurrentOffset ) ; fCharacterCounter ++ ; ch = loadNextByte ( ) ; return recognizeReference ( ch ) ; } if ( fSendCharDataAsCharArray ) appendCharData ( '&' ) ; fCharacterCounter ++ ; ch = loadNextByte ( ) ; break ; case 3 : int endOffset = fCurrentOffset ; ch = loadNextByte ( ) ; if ( ch != ']' ) { fCharacterCounter ++ ; if ( fSendCharDataAsCharArray ) appendCharData ( ']' ) ; break ; } if ( fCurrentIndex + 1 == UTF8DataChunk . CHUNK_SIZE ) { UTF8DataChunk saveChunk = fCurrentChunk ; int saveIndex = fCurrentIndex ; int saveOffset = fCurrentOffset ; if ( loadNextByte ( ) != '>' ) { fCurrentChunk = saveChunk ; fCurrentIndex = saveIndex ; fCurrentOffset = saveOffset ; fMostRecentData = fCurrentChunk . toByteArray ( ) ; fMostRecentByte = ']' ; fCharacterCounter ++ ; if ( fSendCharDataAsCharArray ) appendCharData ( ']' ) ; break ; } } else { if ( fMostRecentData [ fCurrentIndex + 1 ] != '>' ) { fCharacterCounter ++ ; if ( fSendCharDataAsCharArray ) appendCharData ( ']' ) ; break ; } fCurrentIndex ++ ; fCurrentOffset ++ ; } loadNextByte ( ) ; characters ( charDataOffset , endOffset ) ; fCharacterCounter += 3 ; return XMLEntityHandler . CONTENT_RESULT_END_OF_CDSECT ; case 4 : if ( ch == 0x0A ) { if ( fSendCharDataAsCharArray ) appendCharData ( ch ) ; fLinefeedCounter ++ ; fCharacterCounter = 1 ; ch = loadNextByte ( ) ; break ; } if ( ch == 0x0D ) { if ( fSendCharDataAsCharArray ) appendCharData ( 0x0A ) ; fCarriageReturnCounter ++ ; fCharacterCounter = 1 ; ch = loadNextByte ( ) ; if ( ch == 0x0A ) { fLinefeedCounter ++ ; ch = loadNextByte ( ) ; } break ; } characters ( charDataOffset , fCurrentOffset ) ; if ( ch == 0 && atEOF ( fCurrentOffset + 1 ) ) { changeReaders ( ) ; return XMLEntityHandler . CONTENT_RESULT_INVALID_CHAR ; } return XMLEntityHandler . CONTENT_RESULT_INVALID_CHAR ; } } else { if ( fSendCharDataAsCharArray ) { if ( ! copyMultiByteCharData ( ch ) ) { characters ( charDataOffset , fCurrentOffset ) ; return XMLEntityHandler . CONTENT_RESULT_INVALID_CHAR ; } } else if ( ! skipMultiByteCharData ( ch ) ) { characters ( charDataOffset , fCurrentOffset ) ; return XMLEntityHandler . CONTENT_RESULT_INVALID_CHAR ; } ch = fMostRecentByte ; } } } private boolean copyMultiByteCharData ( int b0 ) throws Exception { UTF8DataChunk saveChunk = fCurrentChunk ; int saveOffset = fCurrentOffset ; int saveIndex = fCurrentIndex ; int b1 = loadNextByte ( ) ; if ( ( 0xe0 & b0 ) == 0xc0 ) { int ch = ( ( 0x1f & b0 ) << 6 ) + ( 0x3f & b1 ) ; appendCharData ( ch ) ; loadNextByte ( ) ; return true ; } int b2 = loadNextByte ( ) ; if ( ( 0xf0 & b0 ) == 0xe0 ) { if ( ( b0 == 0xED && b1 >= 0xA0 ) || ( b0 == 0xEF && b1 == 0xBF && b2 >= 0xBE ) ) { fCurrentChunk = saveChunk ; fCurrentIndex = saveIndex ; fCurrentOffset = saveOffset ; fMostRecentData = saveChunk . toByteArray ( ) ; fMostRecentByte = b0 ; return false ; } int ch = ( ( 0x0f & b0 ) << 12 ) + ( ( 0x3f & b1 ) << 6 ) + ( 0x3f & b2 ) ; appendCharData ( ch ) ; loadNextByte ( ) ; return true ; } int b3 = loadNextByte ( ) ; if ( ( 0xf8 & b0 ) == 0xf0 ) { if ( b0 > 0xF4 || ( b0 == 0xF4 && b1 >= 0x90 ) ) { fCurrentChunk = saveChunk ; fCurrentIndex = saveIndex ; fCurrentOffset = saveOffset ; fMostRecentData = saveChunk . toByteArray ( ) ; fMostRecentByte = b0 ; return false ; } int ch = ( ( 0x0f & b0 ) << 18 ) + ( ( 0x3f & b1 ) << 12 ) + ( ( 0x3f & b2 ) << 6 ) + ( 0x3f & b3 ) ; if ( ch < 0x10000 ) { appendCharData ( ch ) ; } else { appendCharData ( ( ( ch - 0x00010000 ) > > 10 ) + 0xd800 ) ; appendCharData ( ( ( ch - 0x00010000 ) & 0x3ff ) + 0xdc00 ) ; } loadNextByte ( ) ; return true ; } else { fCurrentChunk = saveChunk ; fCurrentIndex = saveIndex ; fCurrentOffset = saveOffset ; fMostRecentData = saveChunk . toByteArray ( ) ; fMostRecentByte = b0 ; return false ; } } private boolean skipMultiByteCharData ( int b0 ) throws Exception { UTF8DataChunk saveChunk = fCurrentChunk ; int saveOffset = fCurrentOffset ; int saveIndex = fCurrentIndex ; int b1 = loadNextByte ( ) ; if ( ( 0xe0 & b0 ) == 0xc0 ) { loadNextByte ( ) ; return true ; } int b2 = loadNextByte ( ) ; if ( ( 0xf0 & b0 ) == 0xe0 ) { if ( ( b0 == 0xED && b1 >= 0xA0 ) || ( b0 == 0xEF && b1 == 0xBF && b2 >= 0xBE ) ) { fCurrentChunk = saveChunk ; fCurrentIndex = saveIndex ; fCurrentOffset = saveOffset ; fMostRecentData = saveChunk . toByteArray ( ) ; fMostRecentByte = b0 ; return false ; } loadNextByte ( ) ; return true ; } int b3 = loadNextByte ( ) ; if ( b0 > 0xF4 || ( b0 == 0xF4 && b1 >= 0x90 ) ) { fCurrentChunk = saveChunk ; fCurrentIndex = saveIndex ; fCurrentOffset = saveOffset ; fMostRecentData = saveChunk . toByteArray ( ) ; fMostRecentByte = b0 ; return false ; } loadNextByte ( ) ; return true ; } private int copyAsciiCharData ( ) throws Exception { int srcIndex = fCurrentIndex ; int offset = fCurrentOffset - srcIndex ; byte [ ] data = fMostRecentData ; int dstIndex = fCharDataLength ; boolean skiplf = false ; while ( true ) { int ch ; try { ch = data [ srcIndex ] & 0xFF ; } catch ( ArrayIndexOutOfBoundsException ex ) { offset += srcIndex ; slowLoadNextByte ( ) ; srcIndex = 0 ; data = fMostRecentData ; ch = data [ srcIndex ] & 0xFF ; } if ( ch >= 0x80 ) { fCurrentOffset = offset + srcIndex ; fCurrentIndex = srcIndex ; fMostRecentByte = ch ; return ch ; } if ( XMLCharacterProperties . fgAsciiCharData [ ch ] == 0 ) { fCharacterCounter ++ ; skiplf = false ; } else if ( ch == 0x0A ) { fLinefeedCounter ++ ; if ( skiplf ) { skiplf = false ; srcIndex ++ ; continue ; } fCharacterCounter = 1 ; } else if ( ch == 0x0D ) { fCarriageReturnCounter ++ ; fCharacterCounter = 1 ; skiplf = true ; ch = 0x0A ; } else { fCurrentOffset = offset + srcIndex ; fCurrentIndex = srcIndex ; fMostRecentByte = ch ; return ch ; } srcIndex ++ ; try { fCharacters [ fCharDataLength ] = ( char ) ch ; fCharDataLength ++ ; } catch ( ArrayIndexOutOfBoundsException ex ) { slowAppendCharData ( ch ) ; } } } private int skipAsciiCharData ( ) throws Exception { int srcIndex = fCurrentIndex ; int offset = fCurrentOffset - srcIndex ; byte [ ] data = fMostRecentData ; while ( true ) { int ch ; try { ch = data [ srcIndex ] & 0xFF ; } catch ( ArrayIndexOutOfBoundsException ex ) { offset += srcIndex ; slowLoadNextByte ( ) ; srcIndex = 0 ; data = fMostRecentData ; ch = data [ srcIndex ] & 0xFF ; } if ( ch >= 0x80 ) { fCurrentOffset = offset + srcIndex ; fCurrentIndex = srcIndex ; fMostRecentByte = ch ; return ch ; } if ( XMLCharacterProperties . fgAsciiCharData [ ch ] == 0 ) { fCharacterCounter ++ ; } else if ( ch == 0x0A ) { fLinefeedCounter ++ ; fCharacterCounter = 1 ; } else if ( ch == 0x0D ) { fCarriageReturnCounter ++ ; fCharacterCounter = 1 ; } else { fCurrentOffset = offset + srcIndex ; fCurrentIndex = srcIndex ; fMostRecentByte = ch ; return ch ; } srcIndex ++ ; } } private char [ ] fCharacters = new char [ UTF8DataChunk . CHUNK_SIZE ] ; private int fCharDataLength = 0 ; private void appendCharData ( int ch ) throws Exception { try { fCharacters [ fCharDataLength ] = ( char ) ch ; fCharDataLength ++ ; } catch ( ArrayIndexOutOfBoundsException ex ) { slowAppendCharData ( ch ) ; } } private void slowAppendCharData ( int ch ) throws Exception { characters ( 0 , fCharDataLength ) ; fCharDataLength = 0 ; fCharacters [ fCharDataLength ++ ] = ( char ) ch ; } private void characters ( int offset , int endOffset ) throws Exception { if ( ! fSendCharDataAsCharArray ) { int stringIndex = addString ( offset , endOffset - offset ) ; fCharDataHandler . processCharacters ( stringIndex ) ; return ; } fCharDataHandler . processCharacters ( fCharacters , 0 , fCharDataLength ) ; } private void whitespace ( int offset , int endOffset ) throws Exception { if ( ! fSendCharDataAsCharArray ) { int stringIndex = addString ( offset , endOffset - offset ) ; fCharDataHandler . processWhitespace ( stringIndex ) ; return ; } fCharDataHandler . processWhitespace ( fCharacters , 0 , fCharDataLength ) ; } private static final char [ ] cdata_string = { 'C' , 'D' , 'A' , 'T' , 'A' , '[' } ; private StringPool . CharArrayRange fCharArrayRange = null ; private InputStream fInputStream = null ; private StringPool fStringPool = null ; private UTF8DataChunk fCurrentChunk = null ; private int fCurrentIndex = 0 ; private byte [ ] fMostRecentData = null ; private int fMostRecentByte = 0 ; private int fLength = 0 ; private boolean fCalledCharPropInit = false ; private boolean fCallClearPreviousChunk = true ; private int fillCurrentChunk ( ) throws Exception { byte [ ] buf = fCurrentChunk . toByteArray ( ) ; if ( fInputStream == null ) { if ( buf == null ) buf = new byte [ 1 ] ; buf [ 0 ] = 0 ; fMostRecentData = buf ; fCurrentIndex = 0 ; fCurrentChunk . setByteArray ( fMostRecentData ) ; return ( fMostRecentByte = fMostRecentData [ 0 ] & 0xFF ) ; } if ( buf == null ) buf = new byte [ UTF8DataChunk . CHUNK_SIZE ] ; int offset = 0 ; int capacity = UTF8DataChunk . CHUNK_SIZE ; int result = 0 ; do { try { result = fInputStream . read ( buf , offset , capacity ) ; } catch ( java . io . IOException ex ) { result = - 1 ; } if ( result == - 1 ) { fInputStream . close ( ) ; fInputStream = null ; try { buf [ offset ] = 0 ; } catch ( ArrayIndexOutOfBoundsException ex ) { } break ; } if ( result > 0 ) { offset += result ; capacity -= result ; } } while ( capacity > 0 ) ; fMostRecentData = buf ; fLength += offset ; fCurrentIndex = 0 ; fCurrentChunk . setByteArray ( fMostRecentData ) ; return ( fMostRecentByte = fMostRecentData [ 0 ] & 0xFF ) ; } } 	0	['41', '2', '0', '13', '75', '0', '1', '12', '22', '0.608823529', '7463', '0.882352941', '3', '0.152173913', '0.170833333', '1', '4', '180.6097561', '2', '1.0488', '0']
package org . apache . xerces . validators . schema . identity ; public class Key extends IdentityConstraint { protected String fKeyName ; public Key ( String elementName , String keyName ) { super ( elementName ) ; fKeyName = keyName ; } public short getType ( ) { return KEY ; } public String getName ( ) { return fKeyName ; } } 	0	['3', '2', '0', '5', '4', '1', '4', '1', '3', '0.5', '16', '1', '0', '0.8', '0.666666667', '0', '0', '4', '1', '0.6667', '0']
package org . apache . html . dom ; import org . w3c . dom . * ; import org . w3c . dom . html . * ; public class HTMLAppletElementImpl extends HTMLElementImpl implements HTMLAppletElement { public String getAlign ( ) { return getAttribute ( "align" ) ; } public void setAlign ( String align ) { setAttribute ( "align" , align ) ; } public String getAlt ( ) { return getAttribute ( "alt" ) ; } public void setAlt ( String alt ) { setAttribute ( "alt" , alt ) ; } public String getArchive ( ) { return getAttribute ( "archive" ) ; } public void setArchive ( String archive ) { setAttribute ( "archive" , archive ) ; } public String getCode ( ) { return getAttribute ( "code" ) ; } public void setCode ( String code ) { setAttribute ( "code" , code ) ; } public String getCodeBase ( ) { return getAttribute ( "codebase" ) ; } public void setCodeBase ( String codeBase ) { setAttribute ( "codebase" , codeBase ) ; } public String getHeight ( ) { return getAttribute ( "height" ) ; } public void setHeight ( String height ) { setAttribute ( "height" , height ) ; } public String getHspace ( ) { return getAttribute ( "height" ) ; } public void setHspace ( String height ) { setAttribute ( "height" , height ) ; } public String getName ( ) { return getAttribute ( "name" ) ; } public void setName ( String name ) { setAttribute ( "name" , name ) ; } public String getObject ( ) { return getAttribute ( "object" ) ; } public void setObject ( String object ) { setAttribute ( "object" , object ) ; } public String getVspace ( ) { return getAttribute ( "vspace" ) ; } public void setVspace ( String vspace ) { setAttribute ( "vspace" , vspace ) ; } public String getWidth ( ) { return getAttribute ( "width" ) ; } public void setWidth ( String width ) { setAttribute ( "width" , width ) ; } public HTMLAppletElementImpl ( HTMLDocumentImpl owner , String name ) { super ( owner , name ) ; } } 	0	['23', '4', '0', '2', '26', '253', '0', '2', '23', '2', '127', '0', '0', '0.810344828', '0.52173913', '0', '0', '4.52173913', '1', '0.9565', '0']
package org . xml . sax ; public interface XMLFilter extends XMLReader { public abstract void setParent ( XMLReader parent ) ; public abstract XMLReader getParent ( ) ; } 	0	['2', '1', '0', '0', '2', '1', '0', '0', '2', '2', '2', '0', '0', '0', '0.75', '0', '0', '0', '1', '1', '0']
package org . xml . sax ; import java . io . IOException ; public interface XMLReader { public boolean getFeature ( String name ) throws SAXNotRecognizedException , SAXNotSupportedException ; public void setFeature ( String name , boolean value ) throws SAXNotRecognizedException , SAXNotSupportedException ; public Object getProperty ( String name ) throws SAXNotRecognizedException , SAXNotSupportedException ; public void setProperty ( String name , Object value ) throws SAXNotRecognizedException , SAXNotSupportedException ; public void setEntityResolver ( EntityResolver resolver ) ; public EntityResolver getEntityResolver ( ) ; public void setDTDHandler ( DTDHandler handler ) ; public DTDHandler getDTDHandler ( ) ; public void setContentHandler ( ContentHandler handler ) ; public ContentHandler getContentHandler ( ) ; public void setErrorHandler ( ErrorHandler handler ) ; public ErrorHandler getErrorHandler ( ) ; public void parse ( InputSource input ) throws IOException , SAXException ; public void parse ( String systemId ) throws IOException , SAXException ; } 	0	['14', '1', '0', '0', '14', '91', '0', '0', '14', '2', '14', '0', '0', '0', '0.206349206', '0', '0', '0', '1', '1', '0']
package org . xml . sax . helpers ; import org . xml . sax . Parser ; import org . xml . sax . XMLReader ; import org . xml . sax . SAXException ; final public class XMLReaderFactory { private XMLReaderFactory ( ) { } public static XMLReader createXMLReader ( ) throws SAXException { String className = System . getProperty ( "org.xml.sax.driver" ) ; if ( className == null ) { Parser parser ; try { parser = ParserFactory . makeParser ( ) ; } catch ( Exception e ) { parser = null ; } if ( parser == null ) { throw new SAXException ( "System property org.xml.sax.driver not specified" ) ; } else { return new ParserAdapter ( parser ) ; } } else { return createXMLReader ( className ) ; } } public static XMLReader createXMLReader ( String className ) throws SAXException { try { return ( XMLReader ) ( Class . forName ( className ) . newInstance ( ) ) ; } catch ( ClassNotFoundException e1 ) { throw new SAXException ( "SAX2 driver class " + className + " not found" , e1 ) ; } catch ( IllegalAccessException e2 ) { throw new SAXException ( "SAX2 driver class " + className + " found but cannot be loaded" , e2 ) ; } catch ( InstantiationException e3 ) { throw new SAXException ( "SAX2 driver class " + className + " loaded but cannot be instantiated (no empty public constructor?)" , e3 ) ; } catch ( ClassCastException e4 ) { throw new SAXException ( "SAX2 driver class " + className + " does not implement XMLReader" , e4 ) ; } } } 	0	['3', '1', '0', '0', '14', '3', '0', '0', '2', '2', '102', '0', '0', '0', '0.333333333', '0', '0', '33', '1', '0.6667', '0']
package org . apache . html . dom ; import org . w3c . dom . * ; import org . w3c . dom . html . * ; class HTMLCollectionImpl implements HTMLCollection { static final short ANCHOR = 1 ; static final short FORM = 2 ; static final short IMAGE = 3 ; static final short APPLET = 4 ; static final short LINK = 5 ; static final short OPTION = 6 ; static final short ROW = 7 ; static final short ELEMENT = 8 ; static final short AREA = - 1 ; static final short TBODY = - 2 ; static final short CELL = - 3 ; private short _lookingFor ; private Element _topLevel ; HTMLCollectionImpl ( HTMLElement topLevel , short lookingFor ) { if ( topLevel == null ) throw new NullPointerException ( "HTM011 Argument 'topLevel' is null." ) ; _topLevel = topLevel ; _lookingFor = lookingFor ; } public final int getLength ( ) { return getLength ( _topLevel ) ; } public final Node item ( int index ) { if ( index < 0 ) throw new IllegalArgumentException ( "HTM012 Argument 'index' is negative." ) ; return item ( _topLevel , new CollectionIndex ( index ) ) ; } public final Node namedItem ( String name ) { if ( name == null ) throw new NullPointerException ( "HTM013 Argument 'name' is null." ) ; return namedItem ( _topLevel , name ) ; } private int getLength ( Element topLevel ) { int length ; Node node ; synchronized ( topLevel ) { length = 0 ; node = topLevel . getFirstChild ( ) ; while ( node != null ) { if ( node instanceof Element ) { if ( collectionMatch ( ( Element ) node , null ) ) ++ length ; else if ( recurse ( ) ) length += getLength ( ( Element ) node ) ; } node = node . getNextSibling ( ) ; } } return length ; } private Node item ( Element topLevel , CollectionIndex index ) { Node node ; Node result ; synchronized ( topLevel ) { node = topLevel . getFirstChild ( ) ; while ( node != null ) { if ( node instanceof Element ) { if ( collectionMatch ( ( Element ) node , null ) ) { if ( index . isZero ( ) ) return node ; index . decrement ( ) ; } else if ( recurse ( ) ) { result = item ( ( Element ) node , index ) ; if ( result != null ) return result ; } } node = node . getNextSibling ( ) ; } } return null ; } private Node namedItem ( Element topLevel , String name ) { Node node ; Node result ; synchronized ( topLevel ) { node = topLevel . getFirstChild ( ) ; while ( node != null ) { if ( node instanceof Element ) { if ( collectionMatch ( ( Element ) node , name ) ) return node ; else if ( recurse ( ) ) { result = namedItem ( ( Element ) node , name ) ; if ( result != null ) return result ; } } node = node . getNextSibling ( ) ; } return node ; } } protected boolean recurse ( ) { return _lookingFor > 0 ; } protected boolean collectionMatch ( Element elem , String name ) { boolean match ; synchronized ( elem ) { match = false ; switch ( _lookingFor ) { case ANCHOR : match = ( elem instanceof HTMLAnchorElement ) && elem . getAttribute ( "name" ) . length ( ) > 0 ; break ; case FORM : match = ( elem instanceof HTMLFormElement ) ; break ; case IMAGE : match = ( elem instanceof HTMLImageElement ) ; break ; case APPLET : match = ( elem instanceof HTMLAppletElement ) || ( elem instanceof HTMLObjectElement && ( "application/java" . equals ( elem . getAttribute ( "codetype" ) ) || elem . getAttribute ( "classid" ) . startsWith ( "java:" ) ) ) ; break ; case ELEMENT : match = ( elem instanceof HTMLFormControl ) ; break ; case LINK : match = ( ( elem instanceof HTMLAnchorElement || elem instanceof HTMLAreaElement ) && elem . getAttribute ( "href" ) . length ( ) > 0 ) ; break ; case AREA : match = ( elem instanceof HTMLAreaElement ) ; break ; case OPTION : match = ( elem instanceof HTMLOptionElement ) ; break ; case ROW : match = ( elem instanceof HTMLTableRowElement ) ; break ; case TBODY : match = ( elem instanceof HTMLTableSectionElement && elem . getTagName ( ) . equals ( "tbody" ) ) ; break ; case CELL : match = ( elem instanceof HTMLTableCellElement ) ; break ; } if ( match && name != null ) { if ( elem instanceof HTMLAnchorElement && name . equals ( elem . getAttribute ( "name" ) ) ) return true ; match = name . equals ( elem . getAttribute ( "id" ) ) ; } } return match ; } } class CollectionIndex { int getIndex ( ) { return _index ; } void decrement ( ) { -- _index ; } boolean isZero ( ) { return _index <= 0 ; } CollectionIndex ( int index ) { _index = index ; } private int _index ; } 	0	['9', '1', '0', '9', '22', '18', '7', '2', '3', '1.028846154', '366', '0.153846154', '1', '0', '0.317460317', '0', '0', '38.22222222', '17', '4.6667', '0']
package org . apache . html . dom ; import org . w3c . dom . * ; import org . w3c . dom . html . * ; public class HTMLBaseElementImpl extends HTMLElementImpl implements HTMLBaseElement { public String getHref ( ) { return getAttribute ( "href" ) ; } public void setHref ( String href ) { setAttribute ( "href" , href ) ; } public String getTarget ( ) { return getAttribute ( "target" ) ; } public void setTarget ( String target ) { setAttribute ( "target" , target ) ; } public HTMLBaseElementImpl ( HTMLDocumentImpl owner , String name ) { super ( owner , name ) ; } } 	0	['5', '4', '0', '2', '8', '10', '0', '2', '5', '2', '28', '0', '0', '0.959183673', '0.6', '0', '0', '4.6', '1', '0.8', '0']
package org . xml . sax ; public interface DocumentHandler { public abstract void setDocumentLocator ( Locator locator ) ; public abstract void startDocument ( ) throws SAXException ; public abstract void endDocument ( ) throws SAXException ; public abstract void startElement ( String name , AttributeList atts ) throws SAXException ; public abstract void endElement ( String name ) throws SAXException ; public abstract void characters ( char ch [ ] , int start , int length ) throws SAXException ; public abstract void ignorableWhitespace ( char ch [ ] , int start , int length ) throws SAXException ; public abstract void processingInstruction ( String target , String data ) throws SAXException ; } 	0	['8', '1', '0', '0', '8', '28', '0', '0', '8', '2', '8', '0', '0', '0', '0.354166667', '0', '0', '0', '1', '1', '0']
package org . xml . sax ; public interface DTDHandler { public abstract void notationDecl ( String name , String publicId , String systemId ) throws SAXException ; public abstract void unparsedEntityDecl ( String name , String publicId , String systemId , String notationName ) throws SAXException ; } 	0	['2', '1', '0', '0', '2', '1', '0', '0', '2', '2', '2', '0', '0', '0', '1', '0', '0', '0', '1', '1', '0']
package org . apache . wml ; public interface WMLEmElement extends WMLElement { public void setXmlLang ( String newValue ) ; public String getXmlLang ( ) ; } 	0	['2', '1', '0', '2', '2', '1', '1', '1', '2', '2', '2', '0', '0', '0', '0.75', '0', '0', '0', '1', '1', '0']
package org . apache . xerces . validators . datatype ; import java . math . BigDecimal ; import java . math . BigInteger ; import java . util . Enumeration ; import java . util . Hashtable ; import java . util . Locale ; import java . util . Vector ; import java . io . IOException ; import org . apache . xerces . validators . schema . SchemaSymbols ; import org . apache . xerces . utils . regex . RegularExpression ; public class DecimalDatatypeValidator extends AbstractDatatypeValidator { private Locale fLocale = null ; private DatatypeValidator fBaseValidator = null ; private BigDecimal [ ] fEnumDecimal = null ; private String fPattern = null ; private BigDecimal fMaxInclusive = null ; private BigDecimal fMaxExclusive = null ; private BigDecimal fMinInclusive = null ; private BigDecimal fMinExclusive = null ; private int fFacetsDefined = 0 ; private int fScale = 0 ; private int fPrecision = 0 ; private boolean isMaxExclusiveDefined = false ; private boolean isMaxInclusiveDefined = false ; private boolean isMinExclusiveDefined = false ; private boolean isMinInclusiveDefined = false ; private boolean isScaleDefined = false ; private boolean isPrecisionDefined = false ; private DatatypeMessageProvider fMessageProvider = new DatatypeMessageProvider ( ) ; private RegularExpression fRegex = null ; private Hashtable fFacets = null ; public DecimalDatatypeValidator ( ) throws InvalidDatatypeFacetException { this ( null , null , false ) ; } public DecimalDatatypeValidator ( DatatypeValidator base , Hashtable facets , boolean derivedByList ) throws InvalidDatatypeFacetException { setBasetype ( base ) ; if ( facets != null ) { fFacets = checkForFacetConsistency ( facets , base . getFacets ( ) ) ; fFacets = facets ; Vector enumeration = null ; String value = null ; for ( Enumeration e = facets . keys ( ) ; e . hasMoreElements ( ) ; ) { String key = ( String ) e . nextElement ( ) ; try { if ( key . equals ( SchemaSymbols . ELT_PATTERN ) ) { value = ( ( String ) facets . get ( key ) ) ; fFacetsDefined += DatatypeValidator . FACET_PATTERN ; fPattern = value ; if ( fPattern != null ) fRegex = new RegularExpression ( fPattern , "X" ) ; } else if ( key . equals ( SchemaSymbols . ELT_ENUMERATION ) ) { fFacetsDefined += DatatypeValidator . FACET_ENUMERATION ; enumeration = ( Vector ) facets . get ( key ) ; } else if ( key . equals ( SchemaSymbols . ELT_MAXINCLUSIVE ) ) { value = ( ( String ) facets . get ( key ) ) ; fFacetsDefined += DatatypeValidator . FACET_MAXINCLUSIVE ; fMaxInclusive = new BigDecimal ( stripPlusIfPresent ( value ) ) ; } else if ( key . equals ( SchemaSymbols . ELT_MAXEXCLUSIVE ) ) { value = ( ( String ) facets . get ( key ) ) ; fFacetsDefined += DatatypeValidator . FACET_MAXEXCLUSIVE ; fMaxExclusive = new BigDecimal ( stripPlusIfPresent ( value ) ) ; } else if ( key . equals ( SchemaSymbols . ELT_MININCLUSIVE ) ) { value = ( ( String ) facets . get ( key ) ) ; fFacetsDefined += DatatypeValidator . FACET_MININCLUSIVE ; fMinInclusive = new BigDecimal ( stripPlusIfPresent ( value ) ) ; } else if ( key . equals ( SchemaSymbols . ELT_MINEXCLUSIVE ) ) { value = ( ( String ) facets . get ( key ) ) ; fFacetsDefined += DatatypeValidator . FACET_MINEXCLUSIVE ; fMinExclusive = new BigDecimal ( stripPlusIfPresent ( value ) ) ; } else if ( key . equals ( SchemaSymbols . ELT_PRECISION ) ) { value = ( ( String ) facets . get ( key ) ) ; fFacetsDefined += DatatypeValidator . FACET_PRECISSION ; isPrecisionDefined = true ; fPrecision = Integer . parseInt ( value ) ; } else if ( key . equals ( SchemaSymbols . ELT_SCALE ) ) { value = ( ( String ) facets . get ( key ) ) ; fFacetsDefined += DatatypeValidator . FACET_SCALE ; isScaleDefined = true ; fScale = Integer . parseInt ( value ) ; } else { throw new InvalidDatatypeFacetException ( getErrorString ( DatatypeMessageProvider . MSG_FORMAT_FAILURE , DatatypeMessageProvider . MSG_NONE , null ) ) ; } } catch ( Exception ex ) { throw new InvalidDatatypeFacetException ( getErrorString ( DatatypeMessageProvider . IllegalFacetValue , DatatypeMessageProvider . MSG_NONE , new Object [ ] { value , key } ) ) ; } } isMaxExclusiveDefined = ( ( fFacetsDefined & DatatypeValidator . FACET_MAXEXCLUSIVE ) != 0 ) ? true : false ; isMaxInclusiveDefined = ( ( fFacetsDefined & DatatypeValidator . FACET_MAXINCLUSIVE ) != 0 ) ? true : false ; isMinExclusiveDefined = ( ( fFacetsDefined & DatatypeValidator . FACET_MINEXCLUSIVE ) != 0 ) ? true : false ; isMinInclusiveDefined = ( ( fFacetsDefined & DatatypeValidator . FACET_MININCLUSIVE ) != 0 ) ? true : false ; if ( isMaxExclusiveDefined && isMaxInclusiveDefined ) { throw new InvalidDatatypeFacetException ( "It is an error for both maxInclusive and maxExclusive to be specified for the same datatype." ) ; } if ( isMinExclusiveDefined && isMinInclusiveDefined ) { throw new InvalidDatatypeFacetException ( "It is an error for both minInclusive and minExclusive to be specified for the same datatype." ) ; } if ( isMaxExclusiveDefined && isMinExclusiveDefined ) { int compareTo = this . fMaxExclusive . compareTo ( this . fMinExclusive ) ; if ( compareTo != 1 ) throw new InvalidDatatypeFacetException ( "maxExclusive value ='" + this . fMaxExclusive + "'must be > than minExclusive value ='" + this . fMinExclusive + "'. " ) ; } if ( isMaxInclusiveDefined && isMinInclusiveDefined ) { int compareTo = this . fMaxInclusive . compareTo ( this . fMinInclusive ) ; if ( compareTo == - 1 ) throw new InvalidDatatypeFacetException ( "maxInclusive value ='" + this . fMaxInclusive + "'must be >= than minInclusive value ='" + this . fMinInclusive + "'. " ) ; } if ( isMaxExclusiveDefined && isMinInclusiveDefined ) { int compareTo = this . fMaxExclusive . compareTo ( this . fMinInclusive ) ; if ( compareTo != 1 ) throw new InvalidDatatypeFacetException ( "maxExclusive value ='" + this . fMaxExclusive + "'must be > than minInclusive value ='" + this . fMinInclusive + "'. " ) ; } if ( isMaxInclusiveDefined && isMinExclusiveDefined ) { int compareTo = this . fMaxInclusive . compareTo ( this . fMinExclusive ) ; if ( compareTo != 1 ) throw new InvalidDatatypeFacetException ( "maxInclusive value ='" + this . fMaxInclusive + "'must be > than minExclusive value ='" + this . fMinExclusive + "'. " ) ; } if ( ( fFacetsDefined & DatatypeValidator . FACET_ENUMERATION ) != 0 ) { if ( enumeration != null ) { fEnumDecimal = new BigDecimal [ enumeration . size ( ) ] ; int i = 0 ; try { for ( ; i < enumeration . size ( ) ; i ++ ) { fEnumDecimal [ i ] = new BigDecimal ( stripPlusIfPresent ( ( ( String ) enumeration . elementAt ( i ) ) ) ) ; boundsCheck ( fEnumDecimal [ i ] ) ; } } catch ( Exception idve ) { throw new InvalidDatatypeFacetException ( getErrorString ( DatatypeMessageProvider . InvalidEnumValue , DatatypeMessageProvider . MSG_NONE , new Object [ ] { enumeration . elementAt ( i ) } ) ) ; } } } } } public Object validate ( String content , Object state ) throws InvalidDatatypeValueException { checkContentEnum ( content , state , null ) ; return null ; } protected void checkContentEnum ( String content , Object state , Vector enumeration ) throws InvalidDatatypeValueException { if ( this . fBaseValidator != null ) { ( ( DecimalDatatypeValidator ) this . fBaseValidator ) . checkContentEnum ( content , state , enumeration ) ; } if ( ( fFacetsDefined & DatatypeValidator . FACET_PATTERN ) != 0 ) { if ( fRegex == null || fRegex . matches ( content ) == false ) throw new InvalidDatatypeValueException ( "Value'" + content + "' does not match regular expression facet " + fRegex . getPattern ( ) ) ; } BigDecimal d = null ; try { d = new BigDecimal ( stripPlusIfPresent ( content ) ) ; } catch ( Exception nfe ) { throw new InvalidDatatypeValueException ( getErrorString ( DatatypeMessageProvider . NotDecimal , DatatypeMessageProvider . MSG_NONE , new Object [ ] { "'" + content + "'" } ) ) ; } if ( enumeration != null ) { int size = enumeration . size ( ) ; BigDecimal [ ] enumDecimal = new BigDecimal [ size ] ; int i = 0 ; try { for ( ; i < size ; i ++ ) enumDecimal [ i ] = new BigDecimal ( stripPlusIfPresent ( ( ( String ) enumeration . elementAt ( i ) ) ) ) ; } catch ( NumberFormatException nfe ) { throw new InvalidDatatypeValueException ( getErrorString ( DatatypeMessageProvider . InvalidEnumValue , DatatypeMessageProvider . MSG_NONE , new Object [ ] { enumeration . elementAt ( i ) } ) ) ; } enumCheck ( d , enumDecimal ) ; } if ( isScaleDefined == true ) { if ( d . scale ( ) > fScale ) throw new InvalidDatatypeValueException ( getErrorString ( DatatypeMessageProvider . ScaleExceeded , DatatypeMessageProvider . MSG_NONE , new Object [ ] { content } ) ) ; } if ( isPrecisionDefined == true ) { int precision = d . movePointRight ( d . scale ( ) ) . toString ( ) . length ( ) - ( ( d . signum ( ) < 0 ) ? 1 : 0 ) ; if ( precision > fPrecision ) throw new InvalidDatatypeValueException ( getErrorString ( DatatypeMessageProvider . PrecisionExceeded , DatatypeMessageProvider . MSG_NONE , new Object [ ] { "'" + content + "'" + "with precision = '" + precision + "'" , "'" + fPrecision + "'" } ) ) ; } boundsCheck ( d ) ; if ( fEnumDecimal != null ) enumCheck ( d , fEnumDecimal ) ; return ; } public void boundsCheck ( BigDecimal d ) throws InvalidDatatypeValueException { boolean minOk = false ; boolean maxOk = false ; String upperBound = ( fMaxExclusive != null ) ? ( fMaxExclusive . toString ( ) ) : ( ( fMaxInclusive != null ) ? fMaxInclusive . toString ( ) : "" ) ; String lowerBound = ( fMinExclusive != null ) ? ( fMinExclusive . toString ( ) ) : ( ( fMinInclusive != null ) ? fMinInclusive . toString ( ) : "" ) ; String lowerBoundIndicator = "" ; String upperBoundIndicator = "" ; if ( isMaxInclusiveDefined ) { maxOk = ( d . compareTo ( fMaxInclusive ) <= 0 ) ; upperBound = fMaxInclusive . toString ( ) ; if ( upperBound != null ) { upperBoundIndicator = "<=" ; } else { upperBound = "" ; } } else if ( isMaxExclusiveDefined ) { maxOk = ( d . compareTo ( fMaxExclusive ) < 0 ) ; upperBound = fMaxExclusive . toString ( ) ; if ( upperBound != null ) { upperBoundIndicator = "<" ; } else { upperBound = "" ; } } else { maxOk = ( ! isMaxInclusiveDefined && ! isMaxExclusiveDefined ) ; } if ( isMinInclusiveDefined ) { minOk = ( d . compareTo ( fMinInclusive ) >= 0 ) ; lowerBound = fMinInclusive . toString ( ) ; if ( lowerBound != null ) { lowerBoundIndicator = "<=" ; } else { lowerBound = "" ; } } else if ( isMinExclusiveDefined ) { minOk = ( d . compareTo ( fMinExclusive ) > 0 ) ; lowerBound = fMinExclusive . toString ( ) ; if ( lowerBound != null ) { lowerBoundIndicator = "<" ; } else { lowerBound = "" ; } } else { minOk = ( ! isMinInclusiveDefined && ! isMinExclusiveDefined ) ; } if ( ! ( minOk && maxOk ) ) throw new InvalidDatatypeValueException ( getErrorString ( DatatypeMessageProvider . OutOfBounds , DatatypeMessageProvider . MSG_NONE , new Object [ ] { d . toString ( ) , lowerBound , upperBound , lowerBoundIndicator , upperBoundIndicator } ) ) ; } private void enumCheck ( BigDecimal v , BigDecimal [ ] enum ) throws InvalidDatatypeValueException { for ( int i = 0 ; i < enum . length ; i ++ ) { if ( v . equals ( enum [ i ] ) ) { return ; } } throw new InvalidDatatypeValueException ( getErrorString ( DatatypeMessageProvider . NotAnEnumValue , DatatypeMessageProvider . MSG_NONE , new Object [ ] { v } ) ) ; } public void setLocale ( Locale locale ) { fLocale = locale ; } public Hashtable getFacets ( ) { return fFacets ; } private String getErrorString ( int major , int minor , Object args [ ] ) { try { return fMessageProvider . createMessage ( fLocale , major , minor , args ) ; } catch ( Exception e ) { return "Illegal Errorcode " + minor ; } } public Object clone ( ) throws CloneNotSupportedException { throw new CloneNotSupportedException ( "clone() is not supported in " + this . getClass ( ) . getName ( ) ) ; } public int compare ( String content1 , String content2 ) { return 0 ; } private void setBasetype ( DatatypeValidator base ) { fBaseValidator = base ; } static private String stripPlusIfPresent ( String value ) { String strippedPlus = value ; if ( value . length ( ) >= 2 && value . charAt ( 0 ) == '+' && value . charAt ( 1 ) != '-' ) { strippedPlus = value . substring ( 1 ) ; } return strippedPlus ; } private Hashtable checkForFacetConsistency ( Hashtable thisTypeFacets , Hashtable baseTypeFacets ) throws InvalidDatatypeFacetException { String thisTypeFacetValue ; String baseValue ; if ( baseTypeFacets != null ) { Enumeration setOfBaseKeys = baseTypeFacets . keys ( ) ; String keyInBase ; BigDecimal valueOfThisType = null ; BigDecimal valueOfBase = null ; while ( setOfBaseKeys . hasMoreElements ( ) ) { keyInBase = ( String ) setOfBaseKeys . nextElement ( ) ; baseValue = ( String ) baseTypeFacets . get ( keyInBase ) ; thisTypeFacetValue = ( String ) thisTypeFacets . get ( keyInBase ) ; if ( thisTypeFacetValue == null ) { String strThisType = null ; thisTypeFacets . put ( keyInBase , baseValue ) ; if ( keyInBase . equals ( SchemaSymbols . ELT_MAXEXCLUSIVE ) && thisTypeFacets . containsKey ( SchemaSymbols . ELT_MAXINCLUSIVE ) ) { strThisType = ( String ) thisTypeFacets . get ( SchemaSymbols . ELT_MAXINCLUSIVE ) ; valueOfThisType = new BigDecimal ( stripPlusIfPresent ( strThisType ) ) ; valueOfBase = new BigDecimal ( stripPlusIfPresent ( baseValue ) ) ; if ( valueOfThisType . compareTo ( valueOfBase ) == - 1 ) { thisTypeFacets . remove ( keyInBase ) ; } else { thisTypeFacets . remove ( SchemaSymbols . ELT_MAXINCLUSIVE ) ; } } else if ( keyInBase . equals ( SchemaSymbols . ELT_MAXINCLUSIVE ) && thisTypeFacets . containsKey ( SchemaSymbols . ELT_MAXEXCLUSIVE ) ) { strThisType = ( String ) thisTypeFacets . get ( SchemaSymbols . ELT_MAXEXCLUSIVE ) ; valueOfThisType = new BigDecimal ( stripPlusIfPresent ( strThisType ) ) ; valueOfBase = new BigDecimal ( stripPlusIfPresent ( baseValue ) ) ; if ( valueOfThisType . compareTo ( valueOfBase ) == - 1 ) { thisTypeFacets . remove ( keyInBase ) ; } else { thisTypeFacets . remove ( SchemaSymbols . ELT_MAXEXCLUSIVE ) ; } } else if ( keyInBase . equals ( SchemaSymbols . ELT_MINEXCLUSIVE ) && thisTypeFacets . containsKey ( SchemaSymbols . ELT_MININCLUSIVE ) ) { strThisType = ( String ) thisTypeFacets . get ( SchemaSymbols . ELT_MININCLUSIVE ) ; valueOfThisType = new BigDecimal ( stripPlusIfPresent ( strThisType ) ) ; valueOfBase = new BigDecimal ( stripPlusIfPresent ( baseValue ) ) ; if ( valueOfThisType . compareTo ( valueOfBase ) == 1 ) { thisTypeFacets . remove ( keyInBase ) ; } else { thisTypeFacets . remove ( SchemaSymbols . ELT_MININCLUSIVE ) ; } } else if ( keyInBase . equals ( SchemaSymbols . ELT_MININCLUSIVE ) && thisTypeFacets . containsKey ( SchemaSymbols . ELT_MINEXCLUSIVE ) ) { strThisType = ( String ) thisTypeFacets . get ( SchemaSymbols . ELT_MINEXCLUSIVE ) ; valueOfThisType = new BigDecimal ( stripPlusIfPresent ( strThisType ) ) ; valueOfBase = new BigDecimal ( stripPlusIfPresent ( baseValue ) ) ; if ( valueOfThisType . compareTo ( valueOfBase ) == 1 ) { thisTypeFacets . remove ( keyInBase ) ; } else { thisTypeFacets . remove ( SchemaSymbols . ELT_MINEXCLUSIVE ) ; } } } else { if ( keyInBase . equals ( SchemaSymbols . ELT_MAXEXCLUSIVE ) ) { valueOfThisType = new BigDecimal ( stripPlusIfPresent ( thisTypeFacetValue ) ) ; valueOfBase = new BigDecimal ( stripPlusIfPresent ( baseValue ) ) ; if ( ( valueOfThisType . compareTo ( valueOfBase ) ) == - 1 ) { ; } else { ; } } else if ( keyInBase . equals ( SchemaSymbols . ELT_MAXINCLUSIVE ) ) { valueOfThisType = new BigDecimal ( stripPlusIfPresent ( thisTypeFacetValue ) ) ; valueOfBase = new BigDecimal ( stripPlusIfPresent ( baseValue ) ) ; if ( ( valueOfThisType . compareTo ( valueOfBase ) ) == - 1 ) { ; } else { ; } } else if ( keyInBase . equals ( SchemaSymbols . ELT_MINEXCLUSIVE ) ) { valueOfThisType = new BigDecimal ( stripPlusIfPresent ( thisTypeFacetValue ) ) ; valueOfBase = new BigDecimal ( stripPlusIfPresent ( baseValue ) ) ; if ( ( valueOfThisType . compareTo ( valueOfBase ) ) == - 1 ) { ; } else { ; } } else if ( keyInBase . equals ( SchemaSymbols . ELT_MININCLUSIVE ) ) { valueOfThisType = new BigDecimal ( stripPlusIfPresent ( thisTypeFacetValue ) ) ; valueOfBase = new BigDecimal ( stripPlusIfPresent ( baseValue ) ) ; if ( ( valueOfThisType . compareTo ( valueOfBase ) ) == - 1 ) { ; } else { ; } } } } } return thisTypeFacets ; } } 	0	['14', '2', '0', '9', '52', '75', '3', '6', '8', '0.757692308', '1409', '1', '3', '0.25', '0.18452381', '0', '0', '98.21428571', '4', '1.0714', '0']
package org . w3c . dom . html ; public interface HTMLOptGroupElement extends HTMLElement { public boolean getDisabled ( ) ; public void setDisabled ( boolean disabled ) ; public String getLabel ( ) ; public void setLabel ( String label ) ; } 	0	['4', '1', '0', '0', '4', '6', '0', '0', '4', '2', '4', '0', '0', '0', '0.5', '0', '0', '0', '1', '1', '0']
package org . apache . xerces . dom ; import org . w3c . dom . * ; public class CommentImpl extends CharacterDataImpl implements CharacterData , Comment { static final long serialVersionUID = - 2685736833408134044L ; public CommentImpl ( DocumentImpl ownerDoc , String data ) { super ( ownerDoc , data ) ; } public short getNodeType ( ) { return Node . COMMENT_NODE ; } public String getNodeName ( ) { return "#comment" ; } } 	0	['3', '3', '1', '3', '4', '3', '2', '2', '3', '1.5', '13', '0', '0', '0.964285714', '0.555555556', '1', '4', '3', '1', '0.6667', '0']
package org . apache . wml . dom ; import org . apache . wml . * ; public class WMLImgElementImpl extends WMLElementImpl implements WMLImgElement { public WMLImgElementImpl ( WMLDocumentImpl owner , String tagName ) { super ( owner , tagName ) ; } public void setWidth ( String newValue ) { setAttribute ( "width" , newValue ) ; } public String getWidth ( ) { return getAttribute ( "width" ) ; } public void setClassName ( String newValue ) { setAttribute ( "class" , newValue ) ; } public String getClassName ( ) { return getAttribute ( "class" ) ; } public void setXmlLang ( String newValue ) { setAttribute ( "xml:lang" , newValue ) ; } public String getXmlLang ( ) { return getAttribute ( "xml:lang" ) ; } public void setLocalSrc ( String newValue ) { setAttribute ( "localsrc" , newValue ) ; } public String getLocalSrc ( ) { return getAttribute ( "localsrc" ) ; } public void setHeight ( String newValue ) { setAttribute ( "height" , newValue ) ; } public String getHeight ( ) { return getAttribute ( "height" ) ; } public void setAlign ( String newValue ) { setAttribute ( "align" , newValue ) ; } public String getAlign ( ) { return getAttribute ( "align" ) ; } public void setVspace ( String newValue ) { setAttribute ( "vspace" , newValue ) ; } public String getVspace ( ) { return getAttribute ( "vspace" ) ; } public void setAlt ( String newValue ) { setAttribute ( "alt" , newValue ) ; } public String getAlt ( ) { return getAttribute ( "alt" ) ; } public void setId ( String newValue ) { setAttribute ( "id" , newValue ) ; } public String getId ( ) { return getAttribute ( "id" ) ; } public void setHspace ( String newValue ) { setAttribute ( "hspace" , newValue ) ; } public String getHspace ( ) { return getAttribute ( "hspace" ) ; } public void setSrc ( String newValue ) { setAttribute ( "src" , newValue ) ; } public String getSrc ( ) { return getAttribute ( "src" ) ; } } 	0	['23', '4', '0', '3', '26', '253', '0', '3', '23', '2', '127', '0', '0', '0.788461538', '0.52173913', '1', '6', '4.52173913', '1', '0.9565', '0']
package org . apache . wml . dom ; import org . apache . wml . * ; public class WMLTableElementImpl extends WMLElementImpl implements WMLTableElement { public WMLTableElementImpl ( WMLDocumentImpl owner , String tagName ) { super ( owner , tagName ) ; } public void setColumns ( int newValue ) { setAttribute ( "columns" , newValue ) ; } public int getColumns ( ) { return getAttribute ( "columns" , 0 ) ; } public void setClassName ( String newValue ) { setAttribute ( "class" , newValue ) ; } public String getClassName ( ) { return getAttribute ( "class" ) ; } public void setXmlLang ( String newValue ) { setAttribute ( "xml:lang" , newValue ) ; } public String getXmlLang ( ) { return getAttribute ( "xml:lang" ) ; } public void setAlign ( String newValue ) { setAttribute ( "align" , newValue ) ; } public String getAlign ( ) { return getAttribute ( "align" ) ; } public void setTitle ( String newValue ) { setAttribute ( "title" , newValue ) ; } public String getTitle ( ) { return getAttribute ( "title" ) ; } public void setId ( String newValue ) { setAttribute ( "id" , newValue ) ; } public String getId ( ) { return getAttribute ( "id" ) ; } } 	0	['13', '4', '0', '3', '18', '78', '0', '3', '13', '2', '73', '0', '0', '0.872340426', '0.403846154', '1', '6', '4.615384615', '1', '0.9231', '0']
package javax . xml . parsers ; public class FactoryConfigurationError extends Error { private Exception exception ; public FactoryConfigurationError ( ) { super ( ) ; this . exception = null ; } public FactoryConfigurationError ( String msg ) { super ( msg ) ; this . exception = null ; } public FactoryConfigurationError ( Exception e ) { super ( ) ; this . exception = e ; } public FactoryConfigurationError ( Exception e , String msg ) { super ( msg ) ; this . exception = e ; } public String getMessage ( ) { String message = super . getMessage ( ) ; if ( message == null && exception != null ) { return exception . getMessage ( ) ; } return message ; } public Exception getException ( ) { return exception ; } } 	0	['6', '3', '0', '0', '10', '0', '0', '0', '6', '0', '50', '1', '0', '0.894736842', '0.555555556', '1', '1', '7.166666667', '3', '0.6667', '0']
package org . w3c . dom . html ; public interface HTMLParamElement extends HTMLElement { public String getName ( ) ; public void setName ( String name ) ; public String getType ( ) ; public void setType ( String type ) ; public String getValue ( ) ; public void setValue ( String value ) ; public String getValueType ( ) ; public void setValueType ( String valueType ) ; } 	0	['8', '1', '0', '0', '8', '28', '0', '0', '8', '2', '8', '0', '0', '0', '0.75', '0', '0', '0', '1', '1', '0']
package org . apache . html . dom ; import org . w3c . dom . * ; import org . w3c . dom . html . * ; public class HTMLImageElementImpl extends HTMLElementImpl implements HTMLImageElement { public String getLowSrc ( ) { return getAttribute ( "lowsrc" ) ; } public void setLowSrc ( String lowSrc ) { setAttribute ( "lowsrc" , lowSrc ) ; } public String getSrc ( ) { return getAttribute ( "src" ) ; } public void setSrc ( String src ) { setAttribute ( "src" , src ) ; } public String getName ( ) { return getAttribute ( "name" ) ; } public void setName ( String name ) { setAttribute ( "name" , name ) ; } public String getAlign ( ) { return capitalize ( getAttribute ( "align" ) ) ; } public void setAlign ( String align ) { setAttribute ( "align" , align ) ; } public String getAlt ( ) { return getAttribute ( "alt" ) ; } public void setAlt ( String alt ) { setAttribute ( "alt" , alt ) ; } public String getBorder ( ) { return getAttribute ( "border" ) ; } public void setBorder ( String border ) { setAttribute ( "border" , border ) ; } public String getHeight ( ) { return getAttribute ( "height" ) ; } public void setHeight ( String height ) { setAttribute ( "height" , height ) ; } public String getHspace ( ) { return getAttribute ( "hspace" ) ; } public void setHspace ( String hspace ) { setAttribute ( "hspace" , hspace ) ; } public boolean getIsMap ( ) { return getBinary ( "ismap" ) ; } public void setIsMap ( boolean isMap ) { setAttribute ( "ismap" , isMap ) ; } public String getLongDesc ( ) { return getAttribute ( "longdesc" ) ; } public void setLongDesc ( String longDesc ) { setAttribute ( "longdesc" , longDesc ) ; } public String getUseMap ( ) { return getAttribute ( "useMap" ) ; } public void setUseMap ( String useMap ) { setAttribute ( "useMap" , useMap ) ; } public String getVspace ( ) { return getAttribute ( "vspace" ) ; } public void setVspace ( String vspace ) { setAttribute ( "vspace" , vspace ) ; } public String getWidth ( ) { return getAttribute ( "width" ) ; } public void setWidth ( String width ) { setAttribute ( "width" , width ) ; } public HTMLImageElementImpl ( HTMLDocumentImpl owner , String name ) { super ( owner , name ) ; } } 	0	['27', '4', '0', '2', '33', '351', '0', '2', '27', '2', '151', '0', '0', '0.783333333', '0.388888889', '0', '0', '4.592592593', '1', '0.963', '0']
package org . apache . xerces . readers ; import org . apache . xerces . framework . XMLErrorReporter ; import org . apache . xerces . utils . ChunkyByteArray ; import org . apache . xerces . utils . StringPool ; import java . util . Stack ; public abstract class XMLDeclRecognizer { public static void registerDefaultRecognizers ( Stack recognizerStack ) { recognizerStack . push ( new EBCDICRecognizer ( ) ) ; recognizerStack . push ( new UCSRecognizer ( ) ) ; recognizerStack . push ( new UTF8Recognizer ( ) ) ; } public abstract XMLEntityHandler . EntityReader recognize ( XMLEntityReaderFactory readerFactory , XMLEntityHandler entityHandler , XMLErrorReporter errorReporter , boolean sendCharDataAsCharArray , StringPool stringPool , ChunkyByteArray data , boolean xmlDecl , boolean allowJavaEncodingName ) throws Exception ; protected int prescanXMLDeclOrTextDecl ( XMLEntityHandler . EntityReader entityReader , boolean xmlDecl ) throws Exception { if ( ! entityReader . lookingAtChar ( '<' , true ) ) { return - 1 ; } if ( ! entityReader . lookingAtChar ( '?' , true ) ) { return - 1 ; } if ( ! entityReader . skippedString ( xml_string ) ) { return - 1 ; } entityReader . skipPastSpaces ( ) ; boolean single ; char qchar ; if ( entityReader . skippedString ( version_string ) ) { entityReader . skipPastSpaces ( ) ; if ( ! entityReader . lookingAtChar ( '=' , true ) ) { return - 1 ; } entityReader . skipPastSpaces ( ) ; int versionIndex = entityReader . scanStringLiteral ( ) ; if ( versionIndex < 0 ) { return - 1 ; } if ( ! entityReader . lookingAtSpace ( true ) ) { return - 1 ; } entityReader . skipPastSpaces ( ) ; } else if ( xmlDecl ) { return - 1 ; } if ( ! entityReader . skippedString ( encoding_string ) ) { return - 1 ; } entityReader . skipPastSpaces ( ) ; if ( ! entityReader . lookingAtChar ( '=' , true ) ) { return - 1 ; } entityReader . skipPastSpaces ( ) ; int encodingIndex = entityReader . scanStringLiteral ( ) ; return encodingIndex ; } private static final char [ ] xml_string = { 'x' , 'm' , 'l' } ; private static final char [ ] version_string = { 'v' , 'e' , 'r' , 's' , 'i' , 'o' , 'n' } ; private static final char [ ] encoding_string = { 'e' , 'n' , 'c' , 'o' , 'd' , 'i' , 'n' , 'g' } ; } 	0	['5', '1', '3', '12', '15', '8', '7', '9', '3', '0.75', '191', '1', '0', '0', '0.333333333', '0', '0', '36.6', '1', '0.6', '0']
package org . apache . wml . dom ; import org . apache . wml . * ; public class WMLBigElementImpl extends WMLElementImpl implements WMLBigElement { public WMLBigElementImpl ( WMLDocumentImpl owner , String tagName ) { super ( owner , tagName ) ; } public void setClassName ( String newValue ) { setAttribute ( "class" , newValue ) ; } public String getClassName ( ) { return getAttribute ( "class" ) ; } public void setXmlLang ( String newValue ) { setAttribute ( "xml:lang" , newValue ) ; } public String getXmlLang ( ) { return getAttribute ( "xml:lang" ) ; } public void setId ( String newValue ) { setAttribute ( "id" , newValue ) ; } public String getId ( ) { return getAttribute ( "id" ) ; } } 	0	['7', '4', '0', '3', '10', '21', '0', '3', '7', '2', '39', '0', '0', '0.931818182', '0.571428571', '1', '6', '4.571428571', '1', '0.8571', '0']
package org . w3c . dom . html ; public interface HTMLQuoteElement extends HTMLElement { public String getCite ( ) ; public void setCite ( String cite ) ; } 	0	['2', '1', '0', '0', '2', '1', '0', '0', '2', '2', '2', '0', '0', '0', '0.75', '0', '0', '0', '1', '1', '0']
package org . w3c . dom . html ; public interface HTMLLinkElement extends HTMLElement { public boolean getDisabled ( ) ; public void setDisabled ( boolean disabled ) ; public String getCharset ( ) ; public void setCharset ( String charset ) ; public String getHref ( ) ; public void setHref ( String href ) ; public String getHreflang ( ) ; public void setHreflang ( String hreflang ) ; public String getMedia ( ) ; public void setMedia ( String media ) ; public String getRel ( ) ; public void setRel ( String rel ) ; public String getRev ( ) ; public void setRev ( String rev ) ; public String getTarget ( ) ; public void setTarget ( String target ) ; public String getType ( ) ; public void setType ( String type ) ; } 	0	['18', '1', '0', '0', '18', '153', '0', '0', '18', '2', '18', '0', '0', '0', '0.5', '0', '0', '0', '1', '1', '0']
package org . apache . xerces . dom . events ; import org . apache . xerces . dom . * ; import org . w3c . dom . * ; import org . w3c . dom . events . * ; public class MutationEventImpl extends org . apache . xerces . dom . events . EventImpl implements MutationEvent { Node relatedNode = null ; String prevValue = null , newValue = null , attrName = null ; public short attrChange ; public static final String DOM_SUBTREE_MODIFIED = "DOMSubtreeModified" ; public static final String DOM_NODE_INSERTED = "DOMNodeInserted" ; public static final String DOM_NODE_REMOVED = "DOMNodeRemoved" ; public static final String DOM_NODE_REMOVED_FROM_DOCUMENT = "DOMNodeRemovedFromDocument" ; public static final String DOM_NODE_INSERTED_INTO_DOCUMENT = "DOMNodeInsertedIntoDocument" ; public static final String DOM_ATTR_MODIFIED = "DOMAttrModified" ; public static final String DOM_CHARACTER_DATA_MODIFIED = "DOMCharacterDataModified" ; public String getAttrName ( ) { return attrName ; } public short getAttrChange ( ) { return attrChange ; } public String getNewValue ( ) { return newValue ; } public String getPrevValue ( ) { return prevValue ; } public Node getRelatedNode ( ) { return relatedNode ; } public void initMutationEvent ( String typeArg , boolean canBubbleArg , boolean cancelableArg , Node relatedNodeArg , String prevValueArg , String newValueArg , String attrNameArg , short attrChangeArg ) { relatedNode = relatedNodeArg ; prevValue = prevValueArg ; newValue = newValueArg ; attrName = attrNameArg ; attrChange = attrChangeArg ; super . initEvent ( typeArg , canBubbleArg , cancelableArg ) ; } } 	0	['7', '2', '0', '7', '9', '1', '6', '1', '7', '0.972222222', '70', '0', '1', '0.6', '0.314285714', '0', '0', '7.285714286', '1', '0.8571', '0']
package org . apache . wml . dom ; import org . apache . wml . * ; public class WMLBElementImpl extends WMLElementImpl implements WMLBElement { public WMLBElementImpl ( WMLDocumentImpl owner , String tagName ) { super ( owner , tagName ) ; } public void setClassName ( String newValue ) { setAttribute ( "class" , newValue ) ; } public String getClassName ( ) { return getAttribute ( "class" ) ; } public void setXmlLang ( String newValue ) { setAttribute ( "xml:lang" , newValue ) ; } public String getXmlLang ( ) { return getAttribute ( "xml:lang" ) ; } public void setId ( String newValue ) { setAttribute ( "id" , newValue ) ; } public String getId ( ) { return getAttribute ( "id" ) ; } } 	0	['7', '4', '0', '3', '10', '21', '0', '3', '7', '2', '39', '0', '0', '0.931818182', '0.571428571', '1', '6', '4.571428571', '1', '0.8571', '0']
package org . apache . xerces . validators . common ; import org . apache . xerces . utils . ImplementationMessages ; class CMStateSet { CMStateSet ( int bitCount ) throws CMException { fBitCount = bitCount ; if ( fBitCount < 0 ) throw new CMException ( ImplementationMessages . VAL_CMSI ) ; if ( fBitCount > 64 ) { fByteCount = fBitCount / 8 ; if ( fBitCount % 8 != 0 ) fByteCount ++ ; fByteArray = new byte [ fByteCount ] ; } zeroBits ( ) ; } public String toString ( ) { StringBuffer strRet = new StringBuffer ( ) ; try { strRet . append ( "{" ) ; for ( int index = 0 ; index < fBitCount ; index ++ ) { if ( getBit ( index ) ) strRet . append ( " " + index ) ; } strRet . append ( " }" ) ; } catch ( CMException exToCatch ) { } return strRet . toString ( ) ; } final void intersection ( CMStateSet setToAnd ) { if ( fBitCount < 65 ) { fBits1 &= setToAnd . fBits1 ; fBits2 &= setToAnd . fBits2 ; } else { for ( int index = fByteCount - 1 ; index >= 0 ; index -- ) fByteArray [ index ] &= setToAnd . fByteArray [ index ] ; } } final boolean getBit ( int bitToGet ) throws CMException { if ( bitToGet >= fBitCount ) throw new CMException ( ImplementationMessages . VAL_CMSI ) ; if ( fBitCount < 65 ) { final int mask = ( 0x1 << ( bitToGet % 32 ) ) ; if ( bitToGet < 32 ) return ( fBits1 & mask ) != 0 ; else return ( fBits2 & mask ) != 0 ; } else { final byte mask = ( byte ) ( 0x1 << ( bitToGet % 8 ) ) ; final int ofs = bitToGet > > 3 ; return ( ( fByteArray [ ofs ] & mask ) != 0 ) ; } } final boolean isEmpty ( ) { if ( fBitCount < 65 ) { return ( ( fBits1 == 0 ) && ( fBits2 == 0 ) ) ; } else { for ( int index = fByteCount - 1 ; index >= 0 ; index -- ) { if ( fByteArray [ index ] != 0 ) return false ; } } return true ; } final boolean isSameSet ( CMStateSet setToCompare ) { if ( fBitCount != setToCompare . fBitCount ) return false ; if ( fBitCount < 65 ) { return ( ( fBits1 == setToCompare . fBits1 ) && ( fBits2 == setToCompare . fBits2 ) ) ; } for ( int index = fByteCount - 1 ; index >= 0 ; index -- ) { if ( fByteArray [ index ] != setToCompare . fByteArray [ index ] ) return false ; } return true ; } final void union ( CMStateSet setToOr ) { if ( fBitCount < 65 ) { fBits1 |= setToOr . fBits1 ; fBits2 |= setToOr . fBits2 ; } else { for ( int index = fByteCount - 1 ; index >= 0 ; index -- ) fByteArray [ index ] |= setToOr . fByteArray [ index ] ; } } final void setBit ( int bitToSet ) throws CMException { if ( bitToSet >= fBitCount ) throw new CMException ( ImplementationMessages . VAL_CMSI ) ; if ( fBitCount < 65 ) { final int mask = ( 0x1 << ( bitToSet % 32 ) ) ; if ( bitToSet < 32 ) { fBits1 &= ~ mask ; fBits1 |= mask ; } else { fBits2 &= ~ mask ; fBits2 |= mask ; } } else { final byte mask = ( byte ) ( 0x1 << ( bitToSet % 8 ) ) ; final int ofs = bitToSet > > 3 ; fByteArray [ ofs ] &= ~ mask ; fByteArray [ ofs ] |= mask ; } } final void setTo ( CMStateSet srcSet ) throws CMException { if ( fBitCount != srcSet . fBitCount ) throw new CMException ( ImplementationMessages . VAL_CMSI ) ; if ( fBitCount < 65 ) { fBits1 = srcSet . fBits1 ; fBits2 = srcSet . fBits2 ; } else { for ( int index = fByteCount - 1 ; index >= 0 ; index -- ) fByteArray [ index ] = srcSet . fByteArray [ index ] ; } } final void zeroBits ( ) { if ( fBitCount < 65 ) { fBits1 = 0 ; fBits2 = 0 ; } else { for ( int index = fByteCount - 1 ; index >= 0 ; index -- ) fByteArray [ index ] = 0 ; } } int fBitCount ; int fByteCount ; int fBits1 ; int fBits2 ; byte [ ] fByteArray ; public boolean equals ( Object o ) { if ( ! ( o instanceof CMStateSet ) ) return false ; return isSameSet ( ( CMStateSet ) o ) ; } public int hashCode ( ) { if ( fBitCount < 65 ) { return fBits1 + fBits2 * 31 ; } else { int hash = 0 ; for ( int index = fByteCount - 1 ; index >= 0 ; index -- ) hash = fByteArray [ index ] + hash * 31 ; return hash ; } } } ; 	0	['12', '1', '0', '7', '18', '0', '6', '1', '3', '0.054545455', '517', '0', '0', '0', '0.416666667', '1', '1', '41.66666667', '7', '2.75', '0']
package org . apache . xerces . validators . common ; import org . apache . xerces . utils . QName ; import org . apache . xerces . validators . datatype . DatatypeValidator ; public class XMLAttributeDecl { public static final int TYPE_CDATA = 0 ; public static final int TYPE_ENTITY = 1 ; public static final int TYPE_ENUMERATION = 2 ; public static final int TYPE_ID = 3 ; public static final int TYPE_IDREF = 4 ; public static final int TYPE_NMTOKEN = 5 ; public static final int TYPE_NOTATION = 6 ; public static final int TYPE_SIMPLE = 7 ; public static final int TYPE_ANY_ANY = 8 ; public static final int TYPE_ANY_OTHER = 9 ; public static final int TYPE_ANY_LOCAL = 10 ; public static final int TYPE_ANY_LIST = 11 ; public static final int DEFAULT_TYPE_IMPLIED = 0 ; public static final int DEFAULT_TYPE_FIXED = 1 ; public static final int DEFAULT_TYPE_REQUIRED = 2 ; public static final int DEFAULT_TYPE_DEFAULT = 3 ; public static final int DEFAULT_TYPE_PROHIBITED = 7 ; public static final int DEFAULT_TYPE_REQUIRED_AND_FIXED = 8 ; public static final int PROCESSCONTENTS_STRICT = 4 ; public static final int PROCESSCONTENTS_LAX = 5 ; public static final int PROCESSCONTENTS_SKIP = 6 ; public QName name = new QName ( ) ; public DatatypeValidator datatypeValidator ; public int type ; public boolean list ; public int enumeration ; public int defaultType ; public String defaultValue ; public XMLAttributeDecl ( ) { clear ( ) ; } public XMLAttributeDecl ( XMLAttributeDecl attributeDecl ) { setValues ( attributeDecl ) ; } public void clear ( ) { name . clear ( ) ; datatypeValidator = null ; type = - 1 ; list = false ; enumeration = - 1 ; defaultType = DEFAULT_TYPE_IMPLIED ; defaultValue = null ; } public void setValues ( XMLAttributeDecl attributeDecl ) { name . setValues ( attributeDecl . name ) ; datatypeValidator = attributeDecl . datatypeValidator ; type = attributeDecl . type ; list = attributeDecl . list ; enumeration = attributeDecl . enumeration ; defaultType = attributeDecl . defaultType ; defaultValue = attributeDecl . defaultValue ; } public int hashCode ( ) { return super . hashCode ( ) ; } public boolean equals ( Object object ) { return super . equals ( object ) ; } } 	0	['6', '1', '0', '8', '12', '3', '6', '2', '6', '1', '114', '0', '2', '0', '0.5', '1', '1', '13.33333333', '1', '0.6667', '0']
package org . xml . sax ; public class SAXNotSupportedException extends SAXException { public SAXNotSupportedException ( String message ) { super ( message ) ; } } 	0	['1', '4', '0', '0', '2', '0', '0', '0', '1', '2', '5', '0', '0', '1', '1', '0', '0', '4', '0', '0', '0']
package org . apache . html . dom ; import org . w3c . dom . * ; import org . w3c . dom . html . * ; public class HTMLBaseFontElementImpl extends HTMLElementImpl implements HTMLBaseFontElement { public String getColor ( ) { return capitalize ( getAttribute ( "color" ) ) ; } public void setColor ( String color ) { setAttribute ( "color" , color ) ; } public String getFace ( ) { return capitalize ( getAttribute ( "face" ) ) ; } public void setFace ( String face ) { setAttribute ( "face" , face ) ; } public String getSize ( ) { return getAttribute ( "size" ) ; } public void setSize ( String size ) { setAttribute ( "size" , size ) ; } public HTMLBaseFontElementImpl ( HTMLDocumentImpl owner , String name ) { super ( owner , name ) ; } } 	0	['7', '4', '0', '2', '11', '21', '0', '2', '7', '2', '43', '0', '0', '0.94', '0.571428571', '0', '0', '5.142857143', '1', '0.8571', '0']
package org . apache . xml . serialize ; import java . io . IOException ; import java . io . UnsupportedEncodingException ; import java . io . OutputStream ; import java . io . Writer ; import java . util . Enumeration ; import org . w3c . dom . Element ; import org . w3c . dom . Attr ; import org . w3c . dom . Node ; import org . w3c . dom . NamedNodeMap ; import org . xml . sax . DocumentHandler ; import org . xml . sax . ContentHandler ; import org . xml . sax . AttributeList ; import org . xml . sax . Attributes ; public class HTMLSerializer extends BaseMarkupSerializer { private static boolean _xhtml ; public static String XHTMLNamespace = "" ; protected HTMLSerializer ( boolean xhtml , OutputFormat format ) { super ( format ) ; _xhtml = xhtml ; } public HTMLSerializer ( ) { this ( false , new OutputFormat ( Method . HTML , null , false ) ) ; } public HTMLSerializer ( OutputFormat format ) { this ( false , format != null ? format : new OutputFormat ( Method . HTML , null , false ) ) ; } public HTMLSerializer ( Writer writer , OutputFormat format ) { this ( false , format != null ? format : new OutputFormat ( Method . HTML , null , false ) ) ; setOutputCharStream ( writer ) ; } public HTMLSerializer ( OutputStream output , OutputFormat format ) { this ( false , format != null ? format : new OutputFormat ( Method . HTML , null , false ) ) ; setOutputByteStream ( output ) ; } public void setOutputFormat ( OutputFormat format ) { super . setOutputFormat ( format != null ? format : new OutputFormat ( Method . HTML , null , false ) ) ; } public void startElement ( String namespaceURI , String localName , String rawName , Attributes attrs ) { int i ; boolean preserveSpace ; ElementState state ; String name ; String value ; String htmlName ; boolean addNSAttr = false ; if ( _printer == null ) throw new IllegalStateException ( "SER002 No writer supplied for serializer" ) ; state = getElementState ( ) ; if ( isDocumentState ( ) ) { if ( ! _started ) startDocument ( localName == null ? rawName : localName ) ; } else { if ( state . empty ) _printer . printText ( '>' ) ; if ( _indenting && ! state . preserveSpace && ( state . empty || state . afterElement ) ) _printer . breakLine ( ) ; } preserveSpace = state . preserveSpace ; if ( rawName == null ) { rawName = localName ; if ( namespaceURI != null ) { String prefix ; prefix = getPrefix ( namespaceURI ) ; if ( prefix . length ( ) > 0 ) rawName = prefix + ":" + localName ; } addNSAttr = true ; } if ( namespaceURI == null ) htmlName = rawName ; else { if ( namespaceURI . equals ( XHTMLNamespace ) ) htmlName = localName ; else htmlName = null ; } _printer . printText ( '<' ) ; if ( _xhtml ) _printer . printText ( rawName . toLowerCase ( ) ) ; else _printer . printText ( rawName ) ; _printer . indent ( ) ; if ( attrs != null ) { for ( i = 0 ; i < attrs . getLength ( ) ; ++ i ) { _printer . printSpace ( ) ; name = attrs . getQName ( i ) . toLowerCase ( ) ; ; value = attrs . getValue ( i ) ; if ( _xhtml || namespaceURI != null ) { if ( value == null ) { _printer . printText ( name ) ; _printer . printText ( "=\"\"" ) ; } else { _printer . printText ( name ) ; _printer . printText ( "=\"" ) ; printEscaped ( value ) ; _printer . printText ( '"' ) ; } } else { if ( value == null || value . length ( ) == 0 ) _printer . printText ( name ) ; else if ( HTMLdtd . isURI ( rawName , name ) ) { _printer . printText ( name ) ; _printer . printText ( "=\"" ) ; _printer . printText ( escapeURI ( value ) ) ; _printer . printText ( '"' ) ; } else if ( HTMLdtd . isBoolean ( rawName , name ) ) _printer . printText ( name ) ; else { _printer . printText ( name ) ; _printer . printText ( "=\"" ) ; printEscaped ( value ) ; _printer . printText ( '"' ) ; } } } } if ( htmlName != null && HTMLdtd . isPreserveSpace ( htmlName ) ) preserveSpace = true ; if ( addNSAttr ) { Enumeration enum ; enum = _prefixes . keys ( ) ; while ( enum . hasMoreElements ( ) ) { _printer . printSpace ( ) ; value = ( String ) enum . nextElement ( ) ; name = ( String ) _prefixes . get ( value ) ; if ( name . length ( ) == 0 ) { _printer . printText ( "xmlns=\"" ) ; printEscaped ( value ) ; _printer . printText ( '"' ) ; } else { _printer . printText ( "xmlns:" ) ; _printer . printText ( name ) ; _printer . printText ( "=\"" ) ; printEscaped ( value ) ; _printer . printText ( '"' ) ; } } } state = enterElementState ( namespaceURI , localName , rawName , preserveSpace ) ; if ( htmlName != null && ( htmlName . equalsIgnoreCase ( "A" ) || htmlName . equalsIgnoreCase ( "TD" ) ) ) { state . empty = false ; _printer . printText ( '>' ) ; } if ( htmlName != null && ( rawName . equalsIgnoreCase ( "SCRIPT" ) || rawName . equalsIgnoreCase ( "STYLE" ) ) ) { if ( _xhtml ) { state . doCData = true ; } else { state . unescaped = true ; } } } public void endElement ( String namespaceURI , String localName , String rawName ) { ElementState state ; String htmlName ; _printer . unindent ( ) ; state = getElementState ( ) ; if ( state . namespaceURI == null ) htmlName = state . rawName ; else { if ( state . namespaceURI . equals ( XHTMLNamespace ) ) htmlName = state . localName ; else htmlName = null ; } if ( _xhtml ) { if ( state . empty ) { _printer . printText ( " />" ) ; } else { if ( state . inCData ) _printer . printText ( "]]>" ) ; _printer . printText ( "</" ) ; _printer . printText ( state . rawName . toLowerCase ( ) ) ; _printer . printText ( '>' ) ; } } else { if ( state . empty ) _printer . printText ( '>' ) ; if ( htmlName == null || ! HTMLdtd . isOnlyOpening ( htmlName ) ) { if ( _indenting && ! state . preserveSpace && state . afterElement ) _printer . breakLine ( ) ; if ( state . inCData ) _printer . printText ( "]]>" ) ; _printer . printText ( "</" ) ; _printer . printText ( state . rawName ) ; _printer . printText ( '>' ) ; } } state = leaveElementState ( ) ; if ( htmlName == null || ( ! htmlName . equalsIgnoreCase ( "A" ) && ! htmlName . equalsIgnoreCase ( "TD" ) ) ) state . afterElement = true ; state . empty = false ; if ( isDocumentState ( ) ) _printer . flush ( ) ; } public void characters ( char [ ] chars , int start , int length ) { ElementState state ; state = content ( ) ; state . doCData = false ; super . characters ( chars , start , length ) ; } public void startElement ( String tagName , AttributeList attrs ) { int i ; boolean preserveSpace ; ElementState state ; String name ; String value ; if ( _printer == null ) throw new IllegalStateException ( "SER002 No writer supplied for serializer" ) ; state = getElementState ( ) ; if ( isDocumentState ( ) ) { if ( ! _started ) startDocument ( tagName ) ; } else { if ( state . empty ) _printer . printText ( '>' ) ; if ( _indenting && ! state . preserveSpace && ( state . empty || state . afterElement ) ) _printer . breakLine ( ) ; } preserveSpace = state . preserveSpace ; _printer . printText ( '<' ) ; if ( _xhtml ) _printer . printText ( tagName . toLowerCase ( ) ) ; else _printer . printText ( tagName ) ; _printer . indent ( ) ; if ( attrs != null ) { for ( i = 0 ; i < attrs . getLength ( ) ; ++ i ) { _printer . printSpace ( ) ; name = attrs . getName ( i ) . toLowerCase ( ) ; ; value = attrs . getValue ( i ) ; if ( _xhtml ) { if ( value == null ) { _printer . printText ( name ) ; _printer . printText ( "=\"\"" ) ; } else { _printer . printText ( name ) ; _printer . printText ( "=\"" ) ; printEscaped ( value ) ; _printer . printText ( '"' ) ; } } else { if ( value == null || value . length ( ) == 0 ) _printer . printText ( name ) ; else if ( HTMLdtd . isURI ( tagName , name ) ) { _printer . printText ( name ) ; _printer . printText ( "=\"" ) ; _printer . printText ( escapeURI ( value ) ) ; _printer . printText ( '"' ) ; } else if ( HTMLdtd . isBoolean ( tagName , name ) ) _printer . printText ( name ) ; else { _printer . printText ( name ) ; _printer . printText ( "=\"" ) ; printEscaped ( value ) ; _printer . printText ( '"' ) ; } } } } if ( HTMLdtd . isPreserveSpace ( tagName ) ) preserveSpace = true ; state = enterElementState ( null , null , tagName , preserveSpace ) ; if ( tagName . equalsIgnoreCase ( "A" ) || tagName . equalsIgnoreCase ( "TD" ) ) { state . empty = false ; _printer . printText ( '>' ) ; } if ( tagName . equalsIgnoreCase ( "SCRIPT" ) || tagName . equalsIgnoreCase ( "STYLE" ) ) { if ( _xhtml ) { state . doCData = true ; } else { state . unescaped = true ; } } } public void endElement ( String tagName ) { endElement ( null , null , tagName ) ; } protected void startDocument ( String rootTagName ) { StringBuffer buffer ; _printer . leaveDTD ( ) ; if ( ! _started ) { if ( _docTypePublicId == null && _docTypeSystemId == null ) { if ( _xhtml ) { _docTypePublicId = OutputFormat . DTD . XHTMLPublicId ; _docTypeSystemId = OutputFormat . DTD . XHTMLSystemId ; } else { _docTypePublicId = OutputFormat . DTD . HTMLPublicId ; _docTypeSystemId = OutputFormat . DTD . HTMLSystemId ; } } if ( ! _format . getOmitDocumentType ( ) ) { if ( _docTypePublicId != null && ( ! _xhtml || _docTypeSystemId != null ) ) { _printer . printText ( "<!DOCTYPE HTML PUBLIC " ) ; printDoctypeURL ( _docTypePublicId ) ; if ( _docTypeSystemId != null ) { if ( _indenting ) { _printer . breakLine ( ) ; _printer . printText ( "                      " ) ; } else _printer . printText ( ' ' ) ; printDoctypeURL ( _docTypeSystemId ) ; } _printer . printText ( '>' ) ; _printer . breakLine ( ) ; } else if ( _docTypeSystemId != null ) { _printer . printText ( "<!DOCTYPE HTML SYSTEM " ) ; printDoctypeURL ( _docTypeSystemId ) ; _printer . printText ( '>' ) ; _printer . breakLine ( ) ; } } } _started = true ; serializePreRoot ( ) ; } protected void serializeElement ( Element elem ) { Attr attr ; NamedNodeMap attrMap ; int i ; Node child ; ElementState state ; boolean preserveSpace ; String name ; String value ; String tagName ; tagName = elem . getTagName ( ) ; state = getElementState ( ) ; if ( isDocumentState ( ) ) { if ( ! _started ) startDocument ( tagName ) ; } else { if ( state . empty ) _printer . printText ( '>' ) ; if ( _indenting && ! state . preserveSpace && ( state . empty || state . afterElement ) ) _printer . breakLine ( ) ; } preserveSpace = state . preserveSpace ; _printer . printText ( '<' ) ; if ( _xhtml ) _printer . printText ( tagName . toLowerCase ( ) ) ; else _printer . printText ( tagName ) ; _printer . indent ( ) ; attrMap = elem . getAttributes ( ) ; if ( attrMap != null ) { for ( i = 0 ; i < attrMap . getLength ( ) ; ++ i ) { attr = ( Attr ) attrMap . item ( i ) ; name = attr . getName ( ) . toLowerCase ( ) ; value = attr . getValue ( ) ; if ( attr . getSpecified ( ) ) { _printer . printSpace ( ) ; if ( _xhtml ) { if ( value == null ) { _printer . printText ( name ) ; _printer . printText ( "=\"\"" ) ; } else { _printer . printText ( name ) ; _printer . printText ( "=\"" ) ; printEscaped ( value ) ; _printer . printText ( '"' ) ; } } else { if ( value == null || value . length ( ) == 0 ) _printer . printText ( name ) ; else if ( HTMLdtd . isURI ( tagName , name ) ) { _printer . printText ( name ) ; _printer . printText ( "=\"" ) ; _printer . printText ( escapeURI ( value ) ) ; _printer . printText ( '"' ) ; } else if ( HTMLdtd . isBoolean ( tagName , name ) ) _printer . printText ( name ) ; else { _printer . printText ( name ) ; _printer . printText ( "=\"" ) ; printEscaped ( value ) ; _printer . printText ( '"' ) ; } } } } } if ( HTMLdtd . isPreserveSpace ( tagName ) ) preserveSpace = true ; if ( elem . hasChildNodes ( ) || ! HTMLdtd . isEmptyTag ( tagName ) ) { state = enterElementState ( null , null , tagName , preserveSpace ) ; if ( tagName . equalsIgnoreCase ( "A" ) || tagName . equalsIgnoreCase ( "TD" ) ) { state . empty = false ; _printer . printText ( '>' ) ; } if ( tagName . equalsIgnoreCase ( "SCRIPT" ) || tagName . equalsIgnoreCase ( "STYLE" ) ) { if ( _xhtml ) { state . doCData = true ; } else { state . unescaped = true ; } } child = elem . getFirstChild ( ) ; while ( child != null ) { serializeNode ( child ) ; child = child . getNextSibling ( ) ; } endElement ( null , null , tagName ) ; } else { _printer . unindent ( ) ; if ( _xhtml ) _printer . printText ( " />" ) ; else _printer . printText ( '>' ) ; state . afterElement = true ; state . empty = false ; if ( isDocumentState ( ) ) _printer . flush ( ) ; } } protected void characters ( String text ) { ElementState state ; state = content ( ) ; state . doCData = false ; super . characters ( text ) ; } protected String getEntityRef ( int ch ) { return HTMLdtd . fromChar ( ch ) ; } protected String escapeURI ( String uri ) { int index ; index = uri . indexOf ( "\"" ) ; if ( index >= 0 ) return uri . substring ( 0 , index ) ; else return uri ; } } 	0	['17', '2', '1', '7', '79', '102', '2', '5', '10', '0.5625', '1190', '0.5', '0', '0.835820896', '0.210227273', '1', '8', '68.88235294', '37', '7.4706', '0']
package org . w3c . dom . html ; public interface HTMLHeadElement extends HTMLElement { public String getProfile ( ) ; public void setProfile ( String profile ) ; } 	0	['2', '1', '0', '0', '2', '1', '0', '0', '2', '2', '2', '0', '0', '0', '0.75', '0', '0', '0', '1', '1', '0']
package org . w3c . dom ; public class DOMException extends RuntimeException { public DOMException ( short code , String message ) { super ( message ) ; this . code = code ; } public short code ; public static final short INDEX_SIZE_ERR = 1 ; public static final short DOMSTRING_SIZE_ERR = 2 ; public static final short HIERARCHY_REQUEST_ERR = 3 ; public static final short WRONG_DOCUMENT_ERR = 4 ; public static final short INVALID_CHARACTER_ERR = 5 ; public static final short NO_DATA_ALLOWED_ERR = 6 ; public static final short NO_MODIFICATION_ALLOWED_ERR = 7 ; public static final short NOT_FOUND_ERR = 8 ; public static final short NOT_SUPPORTED_ERR = 9 ; public static final short INUSE_ATTRIBUTE_ERR = 10 ; public static final short INVALID_STATE_ERR = 11 ; public static final short SYNTAX_ERR = 12 ; public static final short INVALID_MODIFICATION_ERR = 13 ; public static final short NAMESPACE_ERR = 14 ; public static final short INVALID_ACCESS_ERR = 15 ; } 	0	['1', '4', '0', '0', '2', '0', '0', '0', '1', '2', '24', '0', '0', '1', '1', '0', '0', '7', '0', '0', '0']
package org . apache . html . dom ; import java . io . * ; import java . util . * ; import java . lang . reflect . * ; import org . w3c . dom . * ; import org . w3c . dom . html . * ; import org . apache . xerces . dom . DocumentImpl ; import org . apache . xerces . dom . NodeImpl ; import org . apache . xerces . dom . AttrImpl ; import org . w3c . dom . DOMException ; public class HTMLDocumentImpl extends DocumentImpl implements HTMLDocument { private HTMLCollectionImpl _anchors ; private HTMLCollectionImpl _forms ; private HTMLCollectionImpl _images ; private HTMLCollectionImpl _links ; private HTMLCollectionImpl _applets ; private StringWriter _writer ; private static Hashtable _elementTypesHTML ; private static final Class [ ] _elemClassSigHTML = new Class [ ] { HTMLDocumentImpl . class , String . class } ; public HTMLDocumentImpl ( ) { super ( ) ; populateElementTypes ( ) ; } public synchronized Element getDocumentElement ( ) { Node html ; Node child ; Node next ; html = getFirstChild ( ) ; while ( html != null ) { if ( html instanceof HTMLHtmlElement ) { synchronized ( html ) { child = getFirstChild ( ) ; while ( child != null && child != html ) { next = child . getNextSibling ( ) ; html . appendChild ( child ) ; child = next ; } } return ( HTMLElement ) html ; } html = html . getNextSibling ( ) ; } html = new HTMLHtmlElementImpl ( this , "HTML" ) ; child = getFirstChild ( ) ; while ( child != null ) { next = child . getNextSibling ( ) ; html . appendChild ( child ) ; child = next ; } appendChild ( html ) ; return ( HTMLElement ) html ; } public synchronized HTMLElement getHead ( ) { Node head ; Node html ; Node child ; Node next ; html = getDocumentElement ( ) ; synchronized ( html ) { head = html . getFirstChild ( ) ; while ( head != null && ! ( head instanceof HTMLHeadElement ) ) head = head . getNextSibling ( ) ; if ( head != null ) { synchronized ( head ) { child = html . getFirstChild ( ) ; while ( child != null && child != head ) { next = child . getNextSibling ( ) ; head . insertBefore ( child , head . getFirstChild ( ) ) ; child = next ; } } return ( HTMLElement ) head ; } head = new HTMLHeadElementImpl ( this , "HEAD" ) ; html . insertBefore ( head , html . getFirstChild ( ) ) ; } return ( HTMLElement ) head ; } public synchronized String getTitle ( ) { HTMLElement head ; NodeList list ; Node title ; head = getHead ( ) ; title = head . getElementsByTagName ( "TITLE" ) . item ( 0 ) ; list = head . getElementsByTagName ( "TITLE" ) ; if ( list . getLength ( ) > 0 ) { title = list . item ( 0 ) ; return ( ( HTMLTitleElement ) title ) . getText ( ) ; } return "" ; } public synchronized void setTitle ( String newTitle ) { HTMLElement head ; NodeList list ; Node title ; head = getHead ( ) ; list = head . getElementsByTagName ( "TITLE" ) ; if ( list . getLength ( ) > 0 ) { title = list . item ( 0 ) ; if ( title . getParentNode ( ) != head ) head . appendChild ( title ) ; ( ( HTMLTitleElement ) title ) . setText ( newTitle ) ; } else { title = new HTMLTitleElementImpl ( this , "TITLE" ) ; ( ( HTMLTitleElement ) title ) . setText ( newTitle ) ; head . appendChild ( title ) ; } } public synchronized HTMLElement getBody ( ) { Node html ; Node head ; Node body ; Node child ; Node next ; html = getDocumentElement ( ) ; head = getHead ( ) ; synchronized ( html ) { body = head . getNextSibling ( ) ; while ( body != null && ! ( body instanceof HTMLBodyElement ) && ! ( body instanceof HTMLFrameSetElement ) ) body = body . getNextSibling ( ) ; if ( body != null ) { synchronized ( body ) { child = head . getNextSibling ( ) ; while ( child != null && child != body ) { next = child . getNextSibling ( ) ; body . insertBefore ( child , body . getFirstChild ( ) ) ; child = next ; } } return ( HTMLElement ) body ; } body = new HTMLBodyElementImpl ( this , "BODY" ) ; html . appendChild ( body ) ; } return ( HTMLElement ) body ; } public synchronized void setBody ( HTMLElement newBody ) { Node html ; Node body ; Node head ; Node child ; NodeList list ; synchronized ( newBody ) { html = getDocumentElement ( ) ; head = getHead ( ) ; synchronized ( html ) { list = this . getElementsByTagName ( "BODY" ) ; if ( list . getLength ( ) > 0 ) { body = list . item ( 0 ) ; synchronized ( body ) { child = head ; while ( child != null ) { if ( child instanceof Element ) { if ( child != body ) html . insertBefore ( newBody , child ) ; else html . replaceChild ( newBody , body ) ; return ; } child = child . getNextSibling ( ) ; } html . appendChild ( newBody ) ; } return ; } html . appendChild ( newBody ) ; } } } public synchronized Element getElementById ( String elementId ) { return getElementById ( elementId , this ) ; } public NodeList getElementsByName ( String elementName ) { return new NameNodeListImpl ( this , elementName ) ; } public final NodeList getElementsByTagName ( String tagName ) { return super . getElementsByTagName ( tagName . toUpperCase ( ) ) ; } public final NodeList getElementsByTagNameNS ( String namespaceURI , String localName ) { if ( namespaceURI != null && namespaceURI . length ( ) > 0 ) return super . getElementsByTagNameNS ( namespaceURI , localName . toUpperCase ( ) ) ; else return super . getElementsByTagName ( localName . toUpperCase ( ) ) ; } public Element createElementNS ( String namespaceURI , String qualifiedName ) { if ( namespaceURI == null || namespaceURI . length ( ) == 0 ) return createElement ( qualifiedName ) ; else return super . createElementNS ( namespaceURI , qualifiedName ) ; } public Element createElement ( String tagName ) throws DOMException { Class elemClass ; Constructor cnst ; tagName = tagName . toUpperCase ( ) ; elemClass = ( Class ) _elementTypesHTML . get ( tagName ) ; if ( elemClass != null ) { try { cnst = elemClass . getConstructor ( _elemClassSigHTML ) ; return ( Element ) cnst . newInstance ( new Object [ ] { this , tagName } ) ; } catch ( Exception except ) { Throwable thrw ; if ( except instanceof java . lang . reflect . InvocationTargetException ) thrw = ( ( java . lang . reflect . InvocationTargetException ) except ) . getTargetException ( ) ; else thrw = except ; throw new IllegalStateException ( "HTM15 Tag '" + tagName + "' associated with an Element class that failed to construct.\n" + tagName ) ; } } return new HTMLElementImpl ( this , tagName ) ; } public Attr createAttribute ( String name ) throws DOMException { return super . createAttribute ( name . toLowerCase ( ) ) ; } public String getReferrer ( ) { return null ; } public String getDomain ( ) { return null ; } public String getURL ( ) { return null ; } public String getCookie ( ) { return null ; } public void setCookie ( String cookie ) { } public HTMLCollection getImages ( ) { if ( _images == null ) _images = new HTMLCollectionImpl ( getBody ( ) , HTMLCollectionImpl . IMAGE ) ; return _images ; } public HTMLCollection getApplets ( ) { if ( _applets == null ) _applets = new HTMLCollectionImpl ( getBody ( ) , HTMLCollectionImpl . APPLET ) ; return _applets ; } public HTMLCollection getLinks ( ) { if ( _links == null ) _links = new HTMLCollectionImpl ( getBody ( ) , HTMLCollectionImpl . LINK ) ; return _links ; } public HTMLCollection getForms ( ) { if ( _forms == null ) _forms = new HTMLCollectionImpl ( getBody ( ) , HTMLCollectionImpl . FORM ) ; return _forms ; } public HTMLCollection getAnchors ( ) { if ( _anchors == null ) _anchors = new HTMLCollectionImpl ( getBody ( ) , HTMLCollectionImpl . ANCHOR ) ; return _anchors ; } public void open ( ) { if ( _writer == null ) _writer = new StringWriter ( ) ; } public void close ( ) { if ( _writer != null ) { _writer = null ; } } public void write ( String text ) { if ( _writer != null ) _writer . write ( text ) ; } public void writeln ( String text ) { if ( _writer != null ) _writer . write ( text + "\n" ) ; } public Node cloneNode ( boolean deep ) { HTMLDocumentImpl clone ; NodeImpl node ; clone = new HTMLDocumentImpl ( ) ; if ( deep ) { node = ( NodeImpl ) getFirstChild ( ) ; while ( node != null ) { clone . appendChild ( clone . importNode ( node , true ) ) ; node = ( NodeImpl ) node . getNextSibling ( ) ; } } return clone ; } private Element getElementById ( String elementId , Node node ) { Node child ; Element result ; child = node . getFirstChild ( ) ; while ( child != null ) { if ( child instanceof Element ) { if ( elementId . equals ( ( ( Element ) child ) . getAttribute ( "id" ) ) ) return ( Element ) child ; result = getElementById ( elementId , child ) ; if ( result != null ) return result ; } child = child . getNextSibling ( ) ; } return null ; } private static void populateElementTypes ( ) { if ( _elementTypesHTML != null ) return ; _elementTypesHTML = new Hashtable ( 63 ) ; populateElementType ( "A" , "HTMLAnchorElementImpl" ) ; populateElementType ( "APPLET" , "HTMLAppletElementImpl" ) ; populateElementType ( "AREA" , "HTMLAreaElementImpl" ) ; populateElementType ( "BASE" , "HTMLBaseElementImpl" ) ; populateElementType ( "BASEFONT" , "HTMLBaseFontElementImpl" ) ; populateElementType ( "BLOCKQUOTE" , "HTMLQuoteElementImpl" ) ; populateElementType ( "BODY" , "HTMLBodyElementImpl" ) ; populateElementType ( "BR" , "HTMLBRElementImpl" ) ; populateElementType ( "BUTTON" , "HTMLButtonElementImpl" ) ; populateElementType ( "DEL" , "HTMLModElementImpl" ) ; populateElementType ( "DIR" , "HTMLDirectoryElementImpl" ) ; populateElementType ( "DIV" , "HTMLDivElementImpl" ) ; populateElementType ( "DL" , "HTMLDListElementImpl" ) ; populateElementType ( "FIELDSET" , "HTMLFieldSetElementImpl" ) ; populateElementType ( "FONT" , "HTMLFontElementImpl" ) ; populateElementType ( "FORM" , "HTMLFormElementImpl" ) ; populateElementType ( "FRAME" , "HTMLFrameElementImpl" ) ; populateElementType ( "FRAMESET" , "HTMLFrameSetElementImpl" ) ; populateElementType ( "HEAD" , "HTMLHeadElementImpl" ) ; populateElementType ( "H1" , "HTMLHeadingElementImpl" ) ; populateElementType ( "H2" , "HTMLHeadingElementImpl" ) ; populateElementType ( "H3" , "HTMLHeadingElementImpl" ) ; populateElementType ( "H4" , "HTMLHeadingElementImpl" ) ; populateElementType ( "H5" , "HTMLHeadingElementImpl" ) ; populateElementType ( "H6" , "HTMLHeadingElementImpl" ) ; populateElementType ( "HR" , "HTMLHRElementImpl" ) ; populateElementType ( "HTML" , "HTMLHtmlElementImpl" ) ; populateElementType ( "IFRAME" , "HTMLIFrameElementImpl" ) ; populateElementType ( "IMG" , "HTMLImageElementImpl" ) ; populateElementType ( "INPUT" , "HTMLInputElementImpl" ) ; populateElementType ( "INS" , "HTMLModElementImpl" ) ; populateElementType ( "ISINDEX" , "HTMLIsIndexElementImpl" ) ; populateElementType ( "LABEL" , "HTMLLabelElementImpl" ) ; populateElementType ( "LEGEND" , "HTMLLegendElementImpl" ) ; populateElementType ( "LI" , "HTMLLIElementImpl" ) ; populateElementType ( "LINK" , "HTMLLinkElementImpl" ) ; populateElementType ( "MAP" , "HTMLMapElementImpl" ) ; populateElementType ( "MENU" , "HTMLMenuElementImpl" ) ; populateElementType ( "META" , "HTMLMetaElementImpl" ) ; populateElementType ( "OBJECT" , "HTMLObjectElementImpl" ) ; populateElementType ( "OL" , "HTMLOListElementImpl" ) ; populateElementType ( "OPTGROUP" , "HTMLOptGroupElementImpl" ) ; populateElementType ( "OPTION" , "HTMLOptionElementImpl" ) ; populateElementType ( "P" , "HTMLParagraphElementImpl" ) ; populateElementType ( "PARAM" , "HTMLParamElementImpl" ) ; populateElementType ( "PRE" , "HTMLPreElementImpl" ) ; populateElementType ( "Q" , "HTMLQuoteElementImpl" ) ; populateElementType ( "SCRIPT" , "HTMLScriptElementImpl" ) ; populateElementType ( "SELECT" , "HTMLSelectElementImpl" ) ; populateElementType ( "STYLE" , "HTMLStyleElementImpl" ) ; populateElementType ( "TABLE" , "HTMLTableElementImpl" ) ; populateElementType ( "CAPTION" , "HTMLTableCaptionElementImpl" ) ; populateElementType ( "TD" , "HTMLTableCellElementImpl" ) ; populateElementType ( "TH" , "HTMLTableCellElementImpl" ) ; populateElementType ( "COL" , "HTMLTableColElementImpl" ) ; populateElementType ( "COLGROUP" , "HTMLTableColElementImpl" ) ; populateElementType ( "TR" , "HTMLTableRowElementImpl" ) ; populateElementType ( "TBODY" , "HTMLTableSectionElementImpl" ) ; populateElementType ( "THEAD" , "HTMLTableSectionElementImpl" ) ; populateElementType ( "TFOOT" , "HTMLTableSectionElementImpl" ) ; populateElementType ( "TEXTAREA" , "HTMLTextAreaElementImpl" ) ; populateElementType ( "TITLE" , "HTMLTitleElementImpl" ) ; populateElementType ( "UL" , "HTMLUListElementImpl" ) ; } private static void populateElementType ( String tagName , String className ) { try { _elementTypesHTML . put ( tagName , Class . forName ( "org.apache.html.dom." + className ) ) ; } catch ( ClassNotFoundException except ) { new RuntimeException ( "HTM019 OpenXML Error: Could not find class " + className + " implementing HTML element " + tagName + "\n" + className + "\t" + tagName ) ; } } } 	0	['34', '3', '0', '59', '83', '541', '55', '9', '29', '0.96969697', '1017', '0.8', '5', '0.733333333', '0.284848485', '2', '4', '28.61764706', '7', '2.2059', '0']
package org . apache . xerces . framework ; import org . xml . sax . Locator ; public interface XMLErrorReporter { public static final int ERRORTYPE_WARNING = 0 ; public static final int ERRORTYPE_RECOVERABLE_ERROR = 1 ; public static final int ERRORTYPE_FATAL_ERROR = 2 ; public Locator getLocator ( ) ; public void reportError ( Locator locator , String errorDomain , int majorCode , int minorCode , Object args [ ] , int errorType ) throws Exception ; } 	0	['2', '1', '0', '22', '2', '1', '22', '0', '2', '2', '5', '0', '0', '0', '0.6', '0', '0', '0', '1', '1', '0']
package org . w3c . dom . html ; public interface HTMLFontElement extends HTMLElement { public String getColor ( ) ; public void setColor ( String color ) ; public String getFace ( ) ; public void setFace ( String face ) ; public String getSize ( ) ; public void setSize ( String size ) ; } 	0	['6', '1', '0', '0', '6', '15', '0', '0', '6', '2', '6', '0', '0', '0', '0.75', '0', '0', '0', '1', '1', '0']
package org . apache . wml ; public interface WMLTemplateElement extends WMLElement { public void setOnTimer ( String newValue ) ; public String getOnTimer ( ) ; public void setOnEnterBackward ( String newValue ) ; public String getOnEnterBackward ( ) ; public void setOnEnterForward ( String newValue ) ; public String getOnEnterForward ( ) ; } 	0	['6', '1', '0', '2', '6', '15', '1', '1', '6', '2', '6', '0', '0', '0', '0.75', '0', '0', '0', '1', '1', '0']
package org . w3c . dom . events ; public interface EventTarget { public void addEventListener ( String type , EventListener listener , boolean useCapture ) ; public void removeEventListener ( String type , EventListener listener , boolean useCapture ) ; public boolean dispatchEvent ( Event evt ) throws EventException ; } 	0	['3', '1', '0', '0', '3', '3', '0', '0', '3', '2', '3', '0', '0', '0', '0.666666667', '0', '0', '0', '1', '1', '0']
package org . w3c . dom . html ; import org . w3c . dom . DOMException ; public interface HTMLTableRowElement extends HTMLElement { public int getRowIndex ( ) ; public int getSectionRowIndex ( ) ; public HTMLCollection getCells ( ) ; public String getAlign ( ) ; public void setAlign ( String align ) ; public String getBgColor ( ) ; public void setBgColor ( String bgColor ) ; public String getCh ( ) ; public void setCh ( String ch ) ; public String getChOff ( ) ; public void setChOff ( String chOff ) ; public String getVAlign ( ) ; public void setVAlign ( String vAlign ) ; public HTMLElement insertCell ( int index ) throws DOMException ; public void deleteCell ( int index ) throws DOMException ; } 	0	['15', '1', '0', '0', '15', '105', '0', '0', '15', '2', '15', '0', '0', '0', '0.488888889', '0', '0', '0', '1', '1', '0']
package org . apache . wml . dom ; import org . apache . wml . * ; public class WMLPrevElementImpl extends WMLElementImpl implements WMLPrevElement { public WMLPrevElementImpl ( WMLDocumentImpl owner , String tagName ) { super ( owner , tagName ) ; } public void setClassName ( String newValue ) { setAttribute ( "class" , newValue ) ; } public String getClassName ( ) { return getAttribute ( "class" ) ; } public void setId ( String newValue ) { setAttribute ( "id" , newValue ) ; } public String getId ( ) { return getAttribute ( "id" ) ; } } 	0	['5', '4', '0', '3', '8', '10', '0', '3', '5', '2', '28', '0', '0', '0.953488372', '0.6', '1', '4', '4.6', '1', '0.8', '0']
package org . apache . xerces . msg ; import java . util . Locale ; import java . util . ListResourceBundle ; import java . util . ResourceBundle ; import java . util . StringTokenizer ; public class ExceptionMessagesLocalizer { static final String FMT001 = "FMT001" ; public static String localizeMessage ( String string , Locale locale ) { ResourceBundle fResourceBundle = null ; if ( locale != null ) fResourceBundle = ListResourceBundle . getBundle ( "org.apache.xerces.msg.ExceptionMessages" , locale ) ; if ( fResourceBundle == null || locale == null ) fResourceBundle = ListResourceBundle . getBundle ( "org.apache.xerces.msg.ExceptionMessages" ) ; int keyIndex = string . indexOf ( ' ' ) ; String key = string . substring ( 0 , keyIndex ) ; int nlIndex = string . indexOf ( '\n' ) ; if ( nlIndex == 0 || key == null || key . equals ( "" ) ) return null ; String msg = fResourceBundle . getString ( key ) ; if ( nlIndex < 0 ) { return msg ; } StringTokenizer st = new StringTokenizer ( string . substring ( nlIndex + 1 ) , "\t" ) ; int count = st . countTokens ( ) ; String [ ] args = new String [ count ] ; for ( int i = 0 ; i < count ; i ++ ) { args [ i ] = st . nextToken ( ) ; } if ( args != null ) { try { msg = java . text . MessageFormat . format ( msg , args ) ; } catch ( Exception e ) { msg = fResourceBundle . getString ( FMT001 ) + ": " + msg ; } } return msg ; } } 	0	['2', '1', '0', '0', '17', '1', '0', '0', '2', '2', '103', '0', '0', '0', '0.5', '0', '0', '50', '10', '5', '0']
package org . apache . html . dom ; import org . w3c . dom . * ; import org . w3c . dom . html . * ; public class HTMLParamElementImpl extends HTMLElementImpl implements HTMLParamElement { public String getName ( ) { return getAttribute ( "name" ) ; } public void setName ( String name ) { setAttribute ( "name" , name ) ; } public String getType ( ) { return getAttribute ( "type" ) ; } public void setType ( String type ) { setAttribute ( "type" , type ) ; } public String getValue ( ) { return getAttribute ( "value" ) ; } public void setValue ( String value ) { setAttribute ( "value" , value ) ; } public String getValueType ( ) { return capitalize ( getAttribute ( "valuetype" ) ) ; } public void setValueType ( String valueType ) { setAttribute ( "valuetype" , valueType ) ; } public HTMLParamElementImpl ( HTMLDocumentImpl owner , String name ) { super ( owner , name ) ; } } 	0	['9', '4', '0', '2', '13', '36', '0', '2', '9', '2', '52', '0', '0', '0.921568627', '0.555555556', '1', '1', '4.777777778', '1', '0.8889', '0']
package org . w3c . dom . html ; public interface HTMLLabelElement extends HTMLElement { public HTMLFormElement getForm ( ) ; public String getAccessKey ( ) ; public void setAccessKey ( String accessKey ) ; public String getHtmlFor ( ) ; public void setHtmlFor ( String htmlFor ) ; } 	0	['5', '1', '0', '0', '5', '10', '0', '0', '5', '2', '5', '0', '0', '0', '0.7', '0', '0', '0', '1', '1', '0']
package org . apache . xerces . dom ; import org . w3c . dom . * ; import org . apache . xerces . dom . events . MutationEventImpl ; import org . w3c . dom . events . * ; public abstract class CharacterDataImpl extends ChildNode { static final long serialVersionUID = 7931170150428474230L ; protected String data ; private static transient NodeList singletonNodeList = new NodeList ( ) { public Node item ( int index ) { return null ; } public int getLength ( ) { return 0 ; } } ; protected CharacterDataImpl ( DocumentImpl ownerDocument , String data ) { super ( ownerDocument ) ; this . data = data ; } public NodeList getChildNodes ( ) { return singletonNodeList ; } public String getNodeValue ( ) { if ( needsSyncData ( ) ) { synchronizeData ( ) ; } return data ; } void setNodeValueInternal ( String value ) { setValueCalled ( true ) ; setNodeValue ( value ) ; setValueCalled ( false ) ; } public void setNodeValue ( String value ) { if ( isReadOnly ( ) ) throw new DOMException ( DOMException . NO_MODIFICATION_ALLOWED_ERR , "DOM001 Modification not allowed" ) ; if ( needsSyncData ( ) ) { synchronizeData ( ) ; } String oldvalue = this . data ; EnclosingAttr enclosingAttr = null ; if ( MUTATIONEVENTS ) { LCount lc = LCount . lookup ( MutationEventImpl . DOM_ATTR_MODIFIED ) ; if ( lc . captures + lc . bubbles + lc . defaults > 0 ) { enclosingAttr = getEnclosingAttr ( ) ; } } this . data = value ; if ( ! setValueCalled ( ) ) { ownerDocument ( ) . replacedText ( this ) ; } if ( MUTATIONEVENTS ) { LCount lc = LCount . lookup ( MutationEventImpl . DOM_CHARACTER_DATA_MODIFIED ) ; if ( lc . captures + lc . bubbles + lc . defaults > 0 ) { MutationEvent me = new MutationEventImpl ( ) ; me . initMutationEvent ( MutationEventImpl . DOM_CHARACTER_DATA_MODIFIED , true , false , null , oldvalue , value , null , ( short ) 0 ) ; dispatchEvent ( me ) ; } dispatchAggregateEvents ( enclosingAttr ) ; } } public String getData ( ) { if ( needsSyncData ( ) ) { synchronizeData ( ) ; } return data ; } public int getLength ( ) { if ( needsSyncData ( ) ) { synchronizeData ( ) ; } return data . length ( ) ; } public void appendData ( String data ) { if ( isReadOnly ( ) ) { throw new DOMException ( DOMException . NO_MODIFICATION_ALLOWED_ERR , "DOM001 Modification not allowed" ) ; } if ( needsSyncData ( ) ) { synchronizeData ( ) ; } setNodeValue ( this . data + data ) ; } public void deleteData ( int offset , int count ) throws DOMException { if ( isReadOnly ( ) ) { throw new DOMException ( DOMException . NO_MODIFICATION_ALLOWED_ERR , "DOM001 Modification not allowed" ) ; } if ( count < 0 ) { throw new DOMException ( DOMException . INDEX_SIZE_ERR , "DOM004 Index out of bounds" ) ; } if ( needsSyncData ( ) ) { synchronizeData ( ) ; } int tailLength = Math . max ( data . length ( ) - count - offset , 0 ) ; try { setNodeValueInternal ( data . substring ( 0 , offset ) + ( tailLength > 0 ? data . substring ( offset + count , offset + count + tailLength ) : "" ) ) ; ownerDocument ( ) . deletedText ( this , offset , count ) ; } catch ( StringIndexOutOfBoundsException e ) { throw new DOMException ( DOMException . INDEX_SIZE_ERR , "DOM004 Index out of bounds" ) ; } } public void insertData ( int offset , String data ) throws DOMException { if ( isReadOnly ( ) ) { throw new DOMException ( DOMException . NO_MODIFICATION_ALLOWED_ERR , "DOM001 Modification not allowed" ) ; } if ( needsSyncData ( ) ) { synchronizeData ( ) ; } try { setNodeValueInternal ( new StringBuffer ( this . data ) . insert ( offset , data ) . toString ( ) ) ; ownerDocument ( ) . insertedText ( this , offset , data . length ( ) ) ; } catch ( StringIndexOutOfBoundsException e ) { throw new DOMException ( DOMException . INDEX_SIZE_ERR , "DOM004 Index out of bounds" ) ; } } public void replaceData ( int offset , int count , String data ) throws DOMException { deleteData ( offset , count ) ; insertData ( offset , data ) ; } public void setData ( String value ) throws DOMException { setNodeValue ( value ) ; } public String substringData ( int offset , int count ) throws DOMException { if ( needsSyncData ( ) ) { synchronizeData ( ) ; } int length = data . length ( ) ; if ( count < 0 || offset < 0 || offset > length - 1 ) { throw new DOMException ( DOMException . INDEX_SIZE_ERR , "DOM004 Index out of bounds" ) ; } int tailIndex = Math . min ( offset + count , length ) ; return data . substring ( offset , tailIndex ) ; } } 	0	['14', '3', '3', '9', '41', '17', '3', '6', '11', '0.717948718', '335', '0.666666667', '1', '0.806451613', '0.480769231', '1', '2', '22.71428571', '6', '1.5714', '0']
package org . apache . xml . serialize ; import java . io . Writer ; import java . io . OutputStream ; import java . io . IOException ; import java . io . UnsupportedEncodingException ; import org . w3c . dom . Element ; import org . w3c . dom . Document ; import org . xml . sax . DocumentHandler ; import org . xml . sax . ContentHandler ; public interface Serializer { public void setOutputByteStream ( OutputStream output ) ; public void setOutputCharStream ( Writer output ) ; public void setOutputFormat ( OutputFormat format ) ; public DocumentHandler asDocumentHandler ( ) throws IOException ; public ContentHandler asContentHandler ( ) throws IOException ; public DOMSerializer asDOMSerializer ( ) throws IOException ; } 	0	['6', '1', '0', '5', '6', '15', '3', '2', '6', '2', '6', '0', '0', '0', '0.375', '0', '0', '0', '1', '1', '0']
package org . w3c . dom . html ; public interface HTMLInputElement extends HTMLElement { public String getDefaultValue ( ) ; public void setDefaultValue ( String defaultValue ) ; public boolean getDefaultChecked ( ) ; public void setDefaultChecked ( boolean defaultChecked ) ; public HTMLFormElement getForm ( ) ; public String getAccept ( ) ; public void setAccept ( String accept ) ; public String getAccessKey ( ) ; public void setAccessKey ( String accessKey ) ; public String getAlign ( ) ; public void setAlign ( String align ) ; public String getAlt ( ) ; public void setAlt ( String alt ) ; public boolean getChecked ( ) ; public void setChecked ( boolean checked ) ; public boolean getDisabled ( ) ; public void setDisabled ( boolean disabled ) ; public int getMaxLength ( ) ; public void setMaxLength ( int maxLength ) ; public String getName ( ) ; public void setName ( String name ) ; public boolean getReadOnly ( ) ; public void setReadOnly ( boolean readOnly ) ; public String getSize ( ) ; public void setSize ( String size ) ; public String getSrc ( ) ; public void setSrc ( String src ) ; public int getTabIndex ( ) ; public void setTabIndex ( int tabIndex ) ; public String getType ( ) ; public String getUseMap ( ) ; public void setUseMap ( String useMap ) ; public String getValue ( ) ; public void setValue ( String value ) ; public void blur ( ) ; public void focus ( ) ; public void select ( ) ; public void click ( ) ; } 	0	['38', '1', '0', '0', '38', '703', '0', '0', '38', '2', '38', '0', '0', '0', '0.355263158', '0', '0', '0', '1', '1', '0']
package org . apache . xerces . utils ; import java . util . Locale ; public interface XMLMessageProvider { public void setLocale ( Locale locale ) ; public Locale getLocale ( ) ; public String createMessage ( Locale locale , int majorCode , int minorCode , Object args [ ] ) ; } ; 	0	['3', '1', '0', '5', '3', '3', '5', '0', '3', '2', '3', '0', '0', '0', '0.583333333', '0', '0', '0', '1', '1', '0']
package org . apache . xerces . utils ; public final class StringPool { private static final boolean DEBUG_ADDITIONS = false ; public static final int NULL_STRING = - 1 ; public static final int EMPTY_STRING = 0 ; public interface StringProducer { public String toString ( int offset , int length ) ; public void releaseString ( int offset , int length ) ; public boolean equalsString ( int offset , int length , char [ ] strChars , int strOffset , int strLength ) ; } ; private static final int INITIAL_CHUNK_SHIFT = 8 ; private static final int INITIAL_CHUNK_SIZE = ( 1 << INITIAL_CHUNK_SHIFT ) ; private static final int CHUNK_SHIFT = 13 ; private static final int CHUNK_SIZE = ( 1 << CHUNK_SHIFT ) ; private static final int CHUNK_MASK = CHUNK_SIZE - 1 ; private static final int INITIAL_CHUNK_COUNT = ( 1 << ( 16 - CHUNK_SHIFT ) ) ; private int fStringCount = 0 ; private int fStringFreeList = - 1 ; private String [ ] [ ] fString = new String [ INITIAL_CHUNK_COUNT ] [ ] ; private StringPool . StringProducer [ ] [ ] fStringProducer = new StringPool . StringProducer [ INITIAL_CHUNK_COUNT ] [ ] ; private int [ ] [ ] fOffset = new int [ INITIAL_CHUNK_COUNT ] [ ] ; private int [ ] [ ] fLength = new int [ INITIAL_CHUNK_COUNT ] [ ] ; private int [ ] [ ] fCharsOffset = new int [ INITIAL_CHUNK_COUNT ] [ ] ; private int fStringListCount = 0 ; private int fActiveStringList = - 1 ; private int [ ] [ ] fStringList = new int [ INITIAL_CHUNK_COUNT ] [ ] ; private static final int INITIAL_BUCKET_SIZE = 4 ; private static final int HASHTABLE_SIZE = 128 ; private int [ ] [ ] fSymbolTable = new int [ HASHTABLE_SIZE ] [ ] ; private SymbolCache fSymbolCache = null ; public StringPool ( ) { fSymbolCache = new SymbolCache ( ) ; if ( addSymbol ( "" ) != EMPTY_STRING ) throw new RuntimeException ( "UTL002 cannot happen" ) ; } public void reset ( ) { int chunk = 0 ; int index = 0 ; for ( int i = 0 ; i < fStringCount ; i ++ ) { fString [ chunk ] [ index ] = null ; if ( fStringProducer [ chunk ] [ index ] != null ) fStringProducer [ chunk ] [ index ] . releaseString ( fOffset [ chunk ] [ index ] , fLength [ chunk ] [ index ] ) ; fStringProducer [ chunk ] [ index ] = null ; if ( ++ index == CHUNK_SIZE ) { chunk ++ ; index = 0 ; } } for ( int i = 0 ; i < HASHTABLE_SIZE ; i ++ ) fSymbolTable [ i ] = null ; fStringCount = 0 ; fStringFreeList = - 1 ; fStringListCount = 0 ; fActiveStringList = - 1 ; fSymbolCache . reset ( ) ; fShuffleCount = 0 ; if ( addSymbol ( "" ) != EMPTY_STRING ) throw new RuntimeException ( "UTL002 cannot happen" ) ; } private boolean ensureCapacity ( int chunk , int index ) { try { return fOffset [ chunk ] [ index ] == 0 ; } catch ( ArrayIndexOutOfBoundsException ex ) { if ( index == 0 ) { String [ ] [ ] newString = new String [ chunk * 2 ] [ ] ; System . arraycopy ( fString , 0 , newString , 0 , chunk ) ; fString = newString ; StringPool . StringProducer [ ] [ ] newProducer = new StringPool . StringProducer [ chunk * 2 ] [ ] ; System . arraycopy ( fStringProducer , 0 , newProducer , 0 , chunk ) ; fStringProducer = newProducer ; int [ ] [ ] newInt = new int [ chunk * 2 ] [ ] ; System . arraycopy ( fOffset , 0 , newInt , 0 , chunk ) ; fOffset = newInt ; newInt = new int [ chunk * 2 ] [ ] ; System . arraycopy ( fLength , 0 , newInt , 0 , chunk ) ; fLength = newInt ; newInt = new int [ chunk * 2 ] [ ] ; System . arraycopy ( fCharsOffset , 0 , newInt , 0 , chunk ) ; fCharsOffset = newInt ; } else { String [ ] newString = new String [ index * 2 ] ; System . arraycopy ( fString [ chunk ] , 0 , newString , 0 , index ) ; fString [ chunk ] = newString ; StringPool . StringProducer [ ] newProducer = new StringPool . StringProducer [ index * 2 ] ; System . arraycopy ( fStringProducer [ chunk ] , 0 , newProducer , 0 , index ) ; fStringProducer [ chunk ] = newProducer ; int [ ] newInt = new int [ index * 2 ] ; System . arraycopy ( fOffset [ chunk ] , 0 , newInt , 0 , index ) ; fOffset [ chunk ] = newInt ; newInt = new int [ index * 2 ] ; System . arraycopy ( fLength [ chunk ] , 0 , newInt , 0 , index ) ; fLength [ chunk ] = newInt ; newInt = new int [ index * 2 ] ; System . arraycopy ( fCharsOffset [ chunk ] , 0 , newInt , 0 , index ) ; fCharsOffset [ chunk ] = newInt ; return true ; } } catch ( NullPointerException ex ) { } fString [ chunk ] = new String [ INITIAL_CHUNK_SIZE ] ; fStringProducer [ chunk ] = new StringPool . StringProducer [ INITIAL_CHUNK_SIZE ] ; fOffset [ chunk ] = new int [ INITIAL_CHUNK_SIZE ] ; fLength [ chunk ] = new int [ INITIAL_CHUNK_SIZE ] ; fCharsOffset [ chunk ] = new int [ INITIAL_CHUNK_SIZE ] ; return true ; } public int addString ( String str ) { int chunk ; int index ; int stringIndex ; if ( fStringFreeList != - 1 ) { stringIndex = fStringFreeList ; chunk = stringIndex > > CHUNK_SHIFT ; index = stringIndex & CHUNK_MASK ; fStringFreeList = fOffset [ chunk ] [ index ] ; } else { stringIndex = fStringCount ++ ; chunk = stringIndex > > CHUNK_SHIFT ; index = stringIndex & CHUNK_MASK ; ensureCapacity ( chunk , index ) ; } fString [ chunk ] [ index ] = str ; fStringProducer [ chunk ] [ index ] = null ; fOffset [ chunk ] [ index ] = 0 ; fLength [ chunk ] [ index ] = str . length ( ) ; fCharsOffset [ chunk ] [ index ] = - 1 ; if ( DEBUG_ADDITIONS ) System . err . println ( "addString(" + str + ") " + stringIndex ) ; return stringIndex ; } public int addString ( StringPool . StringProducer stringProducer , int offset , int length ) { int chunk ; int index ; int stringIndex ; if ( fStringFreeList != - 1 ) { stringIndex = fStringFreeList ; chunk = stringIndex > > CHUNK_SHIFT ; index = stringIndex & CHUNK_MASK ; fStringFreeList = fOffset [ chunk ] [ index ] ; } else { stringIndex = fStringCount ++ ; chunk = stringIndex > > CHUNK_SHIFT ; index = stringIndex & CHUNK_MASK ; ensureCapacity ( chunk , index ) ; } fString [ chunk ] [ index ] = null ; fStringProducer [ chunk ] [ index ] = stringProducer ; fOffset [ chunk ] [ index ] = offset ; fLength [ chunk ] [ index ] = length ; fCharsOffset [ chunk ] [ index ] = - 1 ; if ( DEBUG_ADDITIONS ) System . err . println ( "addString(" + stringProducer . toString ( offset , length ) + ") " + stringIndex ) ; return stringIndex ; } public SymbolCache getSymbolCache ( ) { return fSymbolCache ; } private int fShuffleCount = 0 ; public void resetShuffleCount ( ) { fShuffleCount = 0 ; } public void updateCacheLine ( int symbolIndex , int totalMisses , int length ) { if ( ++ fShuffleCount > 200 ) { return ; } int chunk = symbolIndex > > CHUNK_SHIFT ; int index = symbolIndex & CHUNK_MASK ; int charsOffset = fCharsOffset [ chunk ] [ index ] ; fSymbolCache . updateCacheLine ( charsOffset , totalMisses , length ) ; } public int createNonMatchingSymbol ( int startOffset , int entry , int [ ] entries , int offset ) throws Exception { int chunk ; int index ; int stringIndex ; if ( fStringFreeList != - 1 ) { stringIndex = fStringFreeList ; chunk = stringIndex > > CHUNK_SHIFT ; index = stringIndex & CHUNK_MASK ; fStringFreeList = fOffset [ chunk ] [ index ] ; } else { stringIndex = fStringCount ++ ; chunk = stringIndex > > CHUNK_SHIFT ; index = stringIndex & CHUNK_MASK ; ensureCapacity ( chunk , index ) ; } String str = fSymbolCache . createSymbol ( stringIndex , startOffset , entry , entries , offset ) ; int slen = str . length ( ) ; fString [ chunk ] [ index ] = str ; fStringProducer [ chunk ] [ index ] = null ; fOffset [ chunk ] [ index ] = - 1 ; fLength [ chunk ] [ index ] = slen ; fCharsOffset [ chunk ] [ index ] = startOffset ; int hashcode = StringHasher . hashString ( str , slen ) ; int hc = hashcode % HASHTABLE_SIZE ; int [ ] bucket = fSymbolTable [ hc ] ; hashSymbol ( bucket , hashcode , chunk , index ) ; if ( DEBUG_ADDITIONS ) System . err . println ( "addSymbolNew(" + str + ") " + stringIndex ) ; return stringIndex ; } private void hashSymbol ( int [ ] bucket , int hashcode , int chunk , int index ) { if ( bucket == null ) { bucket = new int [ 1 + ( INITIAL_BUCKET_SIZE * 3 ) ] ; bucket [ 0 ] = 1 ; bucket [ 1 ] = hashcode ; bucket [ 2 ] = chunk ; bucket [ 3 ] = index ; int hc = hashcode % HASHTABLE_SIZE ; fSymbolTable [ hc ] = bucket ; } else { int count = bucket [ 0 ] ; int offset = 1 + ( count * 3 ) ; if ( offset == bucket . length ) { int newSize = count + INITIAL_BUCKET_SIZE ; int [ ] newBucket = new int [ 1 + ( newSize * 3 ) ] ; System . arraycopy ( bucket , 0 , newBucket , 0 , offset ) ; bucket = newBucket ; int hc = hashcode % HASHTABLE_SIZE ; fSymbolTable [ hc ] = bucket ; } bucket [ offset ++ ] = hashcode ; bucket [ offset ++ ] = chunk ; bucket [ offset ++ ] = index ; bucket [ 0 ] = ++ count ; } } public int addSymbol ( String str ) { int slen = str . length ( ) ; int hashcode = StringHasher . hashString ( str , slen ) ; int hc = hashcode % HASHTABLE_SIZE ; int [ ] bucket = fSymbolTable [ hc ] ; if ( bucket != null ) { int j = 1 ; for ( int i = 0 ; i < bucket [ 0 ] ; i ++ ) { if ( bucket [ j ] == hashcode ) { int chunk = bucket [ j + 1 ] ; int index = bucket [ j + 2 ] ; if ( slen == fLength [ chunk ] [ index ] ) { int symoff = fCharsOffset [ chunk ] [ index ] ; boolean match = true ; char [ ] symbolChars = fSymbolCache . getSymbolChars ( ) ; for ( int k = 0 ; k < slen ; k ++ ) { if ( symbolChars [ symoff ++ ] != str . charAt ( k ) ) { match = false ; break ; } } if ( match ) { return ( chunk << CHUNK_SHIFT ) + index ; } } } j += 3 ; } } int chunk ; int index ; int stringIndex ; if ( fStringFreeList != - 1 ) { stringIndex = fStringFreeList ; chunk = stringIndex > > CHUNK_SHIFT ; index = stringIndex & CHUNK_MASK ; fStringFreeList = fOffset [ chunk ] [ index ] ; } else { stringIndex = fStringCount ++ ; chunk = stringIndex > > CHUNK_SHIFT ; index = stringIndex & CHUNK_MASK ; ensureCapacity ( chunk , index ) ; } fString [ chunk ] [ index ] = str ; fStringProducer [ chunk ] [ index ] = null ; fOffset [ chunk ] [ index ] = - 1 ; fLength [ chunk ] [ index ] = slen ; fCharsOffset [ chunk ] [ index ] = fSymbolCache . addSymbolToCache ( str , slen , stringIndex ) ; hashSymbol ( bucket , hashcode , chunk , index ) ; if ( DEBUG_ADDITIONS ) System . err . println ( "addSymbolNew(" + str + ") " + stringIndex ) ; return stringIndex ; } public int addSymbol ( StringPool . StringProducer stringProducer , int offset , int length , int hashcode ) { int hc = hashcode % HASHTABLE_SIZE ; int [ ] bucket = fSymbolTable [ hc ] ; if ( bucket != null ) { int j = 1 ; for ( int i = 0 ; i < bucket [ 0 ] ; i ++ ) { if ( bucket [ j ] == hashcode ) { int chunk = bucket [ j + 1 ] ; int index = bucket [ j + 2 ] ; char [ ] symbolChars = fSymbolCache . getSymbolChars ( ) ; if ( stringProducer . equalsString ( offset , length , symbolChars , fCharsOffset [ chunk ] [ index ] , fLength [ chunk ] [ index ] ) ) { stringProducer . releaseString ( offset , length ) ; return ( chunk << CHUNK_SHIFT ) + index ; } } j += 3 ; } } int chunk ; int index ; int stringIndex ; if ( fStringFreeList != - 1 ) { stringIndex = fStringFreeList ; chunk = stringIndex > > CHUNK_SHIFT ; index = stringIndex & CHUNK_MASK ; fStringFreeList = fOffset [ chunk ] [ index ] ; } else { stringIndex = fStringCount ++ ; chunk = stringIndex > > CHUNK_SHIFT ; index = stringIndex & CHUNK_MASK ; ensureCapacity ( chunk , index ) ; } String str = stringProducer . toString ( offset , length ) ; stringProducer . releaseString ( offset , length ) ; int slen = str . length ( ) ; fString [ chunk ] [ index ] = str ; fStringProducer [ chunk ] [ index ] = null ; fOffset [ chunk ] [ index ] = - 1 ; fLength [ chunk ] [ index ] = slen ; fCharsOffset [ chunk ] [ index ] = fSymbolCache . addSymbolToCache ( str , slen , stringIndex ) ; hashSymbol ( bucket , hashcode , chunk , index ) ; if ( DEBUG_ADDITIONS ) System . err . println ( "addSymbol(" + str + ") " + stringIndex ) ; return stringIndex ; } public int lookupSymbol ( StringPool . StringProducer stringProducer , int offset , int length , int hashcode ) { int hc = hashcode % HASHTABLE_SIZE ; int [ ] bucket = fSymbolTable [ hc ] ; if ( bucket != null ) { int j = 1 ; for ( int i = 0 ; i < bucket [ 0 ] ; i ++ ) { if ( bucket [ j ] == hashcode ) { int chunk = bucket [ j + 1 ] ; int index = bucket [ j + 2 ] ; char [ ] symbolChars = fSymbolCache . getSymbolChars ( ) ; if ( stringProducer . equalsString ( offset , length , symbolChars , fCharsOffset [ chunk ] [ index ] , fLength [ chunk ] [ index ] ) ) { return ( chunk << CHUNK_SHIFT ) + index ; } } j += 3 ; } } return - 1 ; } public int addNewSymbol ( String str , int hashcode ) { int hc = hashcode % HASHTABLE_SIZE ; int [ ] bucket = fSymbolTable [ hc ] ; int chunk ; int index ; int stringIndex ; if ( fStringFreeList != - 1 ) { stringIndex = fStringFreeList ; chunk = stringIndex > > CHUNK_SHIFT ; index = stringIndex & CHUNK_MASK ; fStringFreeList = fOffset [ chunk ] [ index ] ; } else { stringIndex = fStringCount ++ ; chunk = stringIndex > > CHUNK_SHIFT ; index = stringIndex & CHUNK_MASK ; ensureCapacity ( chunk , index ) ; } int slen = str . length ( ) ; fString [ chunk ] [ index ] = str ; fStringProducer [ chunk ] [ index ] = null ; fOffset [ chunk ] [ index ] = - 1 ; fLength [ chunk ] [ index ] = slen ; fCharsOffset [ chunk ] [ index ] = fSymbolCache . addSymbolToCache ( str , slen , stringIndex ) ; hashSymbol ( bucket , hashcode , chunk , index ) ; if ( DEBUG_ADDITIONS ) System . err . println ( "addSymbolNew(" + str + ") " + stringIndex ) ; return stringIndex ; } public int addSymbol ( int stringIndex ) { if ( stringIndex < 0 || stringIndex >= fStringCount ) return - 1 ; int chunk = stringIndex > > CHUNK_SHIFT ; int index = stringIndex & CHUNK_MASK ; if ( fOffset [ chunk ] [ index ] == - 1 ) return stringIndex ; String s = fString [ chunk ] [ index ] ; if ( s == null ) { s = fStringProducer [ chunk ] [ index ] . toString ( fOffset [ chunk ] [ index ] , fLength [ chunk ] [ index ] ) ; fStringProducer [ chunk ] [ index ] . releaseString ( fOffset [ chunk ] [ index ] , fLength [ chunk ] [ index ] ) ; fString [ chunk ] [ index ] = s ; fStringProducer [ chunk ] [ index ] = null ; } return addSymbol ( s ) ; } public class CharArrayRange { public char [ ] chars ; public int offset ; public int length ; } public CharArrayRange createCharArrayRange ( ) { return new CharArrayRange ( ) ; } public void getCharArrayRange ( int symbolIndex , CharArrayRange r ) { if ( symbolIndex < 0 || symbolIndex >= fStringCount ) { r . chars = null ; r . offset = - 1 ; r . length = - 1 ; return ; } int chunk = symbolIndex > > CHUNK_SHIFT ; int index = symbolIndex & CHUNK_MASK ; r . chars = fSymbolCache . getSymbolChars ( ) ; r . offset = fCharsOffset [ chunk ] [ index ] ; r . length = fLength [ chunk ] [ index ] ; } public boolean equalNames ( int stringIndex1 , int stringIndex2 ) { if ( stringIndex1 == stringIndex2 ) return true ; return false ; } private boolean ensureListCapacity ( int chunk , int index ) { try { return fStringList [ chunk ] [ index ] == 0 ; } catch ( ArrayIndexOutOfBoundsException ex ) { if ( index == 0 ) { int [ ] [ ] newInt = new int [ chunk * 2 ] [ ] ; System . arraycopy ( fStringList , 0 , newInt , 0 , chunk ) ; fStringList = newInt ; } else { int [ ] newInt = new int [ index * 2 ] ; System . arraycopy ( fStringList [ chunk ] , 0 , newInt , 0 , index ) ; fStringList [ chunk ] = newInt ; return true ; } } catch ( NullPointerException ex ) { } fStringList [ chunk ] = new int [ INITIAL_CHUNK_SIZE ] ; return true ; } public int startStringList ( ) { fActiveStringList = fStringListCount ; return fStringListCount ; } public boolean addStringToList ( int stringListIndex , int stringIndex ) { if ( stringIndex == - 1 || stringListIndex != fActiveStringList ) return false ; int chunk = fStringListCount > > CHUNK_SHIFT ; int index = fStringListCount & CHUNK_MASK ; ensureListCapacity ( chunk , index ) ; fStringList [ chunk ] [ index ] = stringIndex ; fStringListCount ++ ; return true ; } public void finishStringList ( int stringListIndex ) { if ( stringListIndex != fActiveStringList ) return ; int chunk = fStringListCount > > CHUNK_SHIFT ; int index = fStringListCount & CHUNK_MASK ; ensureListCapacity ( chunk , index ) ; fStringList [ chunk ] [ index ] = - 1 ; fActiveStringList = - 1 ; fStringListCount ++ ; } public int stringListLength ( int stringListIndex ) { int chunk = stringListIndex > > CHUNK_SHIFT ; int index = stringListIndex & CHUNK_MASK ; int count = 0 ; while ( true ) { if ( fStringList [ chunk ] [ index ] == - 1 ) return count ; count ++ ; if ( ++ index == CHUNK_SIZE ) { chunk ++ ; index = 0 ; } } } public boolean stringInList ( int stringListIndex , int stringIndex ) { int chunk = stringListIndex > > CHUNK_SHIFT ; int index = stringListIndex & CHUNK_MASK ; while ( true ) { if ( fStringList [ chunk ] [ index ] == stringIndex ) return true ; if ( fStringList [ chunk ] [ index ] == - 1 ) return false ; if ( ++ index == CHUNK_SIZE ) { chunk ++ ; index = 0 ; } } } public String stringListAsString ( int stringListIndex ) { int chunk = stringListIndex > > CHUNK_SHIFT ; int index = stringListIndex & CHUNK_MASK ; StringBuffer sb = new StringBuffer ( ) ; char sep = '(' ; while ( fStringList [ chunk ] [ index ] != - 1 ) { sb . append ( sep ) ; sep = '|' ; sb . append ( toString ( fStringList [ chunk ] [ index ] ) ) ; if ( ++ index == CHUNK_SIZE ) { chunk ++ ; index = 0 ; } } if ( sep == '|' ) sb . append ( ')' ) ; return sb . toString ( ) ; } public int [ ] stringListAsIntArray ( int stringListIndex ) { int chunk = stringListIndex > > CHUNK_SHIFT ; int index = stringListIndex & CHUNK_MASK ; int len = stringListLength ( stringListIndex ) ; int [ ] ia = new int [ len ] ; for ( int i = 0 ; i < len ; i ++ ) { ia [ i ] = fStringList [ chunk ] [ index ] ; if ( ++ index == CHUNK_SIZE ) { chunk ++ ; index = 0 ; } } return ia ; } private void releaseStringInternal ( int chunk , int index ) { fString [ chunk ] [ index ] = null ; fStringProducer [ chunk ] [ index ] = null ; fLength [ chunk ] [ index ] = 0 ; fOffset [ chunk ] [ index ] = fStringFreeList ; int offset = ( chunk << CHUNK_SHIFT ) + index ; fStringFreeList = offset ; } public void releaseString ( int stringIndex ) { if ( stringIndex < 0 || stringIndex >= fStringCount ) return ; int chunk = stringIndex > > CHUNK_SHIFT ; int index = stringIndex & CHUNK_MASK ; if ( fOffset [ chunk ] [ index ] != - 1 ) { if ( fStringProducer [ chunk ] [ index ] != null ) fStringProducer [ chunk ] [ index ] . releaseString ( fOffset [ chunk ] [ index ] , fLength [ chunk ] [ index ] ) ; releaseStringInternal ( chunk , index ) ; } } public String toString ( int stringIndex ) { if ( stringIndex >= 0 && stringIndex < fString [ 0 ] . length ) { String result = fString [ 0 ] [ stringIndex ] ; if ( result != null ) { return result ; } } if ( stringIndex < 0 || stringIndex >= fStringCount ) return null ; int chunk = stringIndex > > CHUNK_SHIFT ; int index = stringIndex & CHUNK_MASK ; String s = fString [ chunk ] [ index ] ; if ( s != null ) return s ; s = fStringProducer [ chunk ] [ index ] . toString ( fOffset [ chunk ] [ index ] , fLength [ chunk ] [ index ] ) ; fStringProducer [ chunk ] [ index ] . releaseString ( fOffset [ chunk ] [ index ] , fLength [ chunk ] [ index ] ) ; fString [ chunk ] [ index ] = s ; fStringProducer [ chunk ] [ index ] = null ; return s ; } public String orphanString ( int stringIndex ) { if ( stringIndex < 0 || stringIndex >= fStringCount ) return null ; int chunk = stringIndex > > CHUNK_SHIFT ; int index = stringIndex & CHUNK_MASK ; String s = fString [ chunk ] [ index ] ; if ( s == null ) { s = fStringProducer [ chunk ] [ index ] . toString ( fOffset [ chunk ] [ index ] , fLength [ chunk ] [ index ] ) ; fStringProducer [ chunk ] [ index ] . releaseString ( fOffset [ chunk ] [ index ] , fLength [ chunk ] [ index ] ) ; releaseStringInternal ( chunk , index ) ; } else if ( fOffset [ chunk ] [ index ] != - 1 ) { releaseStringInternal ( chunk , index ) ; } return s ; } } 	0	['30', '1', '0', '60', '50', '67', '57', '4', '26', '0.829022989', '2121', '0.916666667', '2', '0', '0.338888889', '0', '0', '68.9', '9', '3.1667', '0']
package org . xml . sax ; public interface ErrorHandler { public abstract void warning ( SAXParseException exception ) throws SAXException ; public abstract void error ( SAXParseException exception ) throws SAXException ; public abstract void fatalError ( SAXParseException exception ) throws SAXException ; } 	0	['3', '1', '0', '0', '3', '3', '0', '0', '3', '2', '3', '0', '0', '0', '1', '0', '0', '0', '1', '1', '0']
package org . apache . xerces . readers ; import java . io . IOException ; import java . util . Enumeration ; import java . util . Hashtable ; import org . xml . sax . EntityResolver ; import org . xml . sax . InputSource ; import org . xml . sax . SAXException ; public abstract class XMLCatalogHandler implements EntityResolver { public abstract void loadCatalog ( InputSource source ) throws Exception ; private Hashtable publicMap = new Hashtable ( ) ; private Hashtable systemMap = new Hashtable ( ) ; public void addPublicMapping ( String publicId , String systemId ) { publicMap . put ( publicId , systemId ) ; } public void removePublicMapping ( System publicId ) { publicMap . remove ( publicId ) ; } public Enumeration getPublicMappingKeys ( ) { return publicMap . keys ( ) ; } public String getPublicMapping ( String publicId ) { return ( String ) publicMap . get ( publicId ) ; } public void addSystemMapping ( String systemId1 , String systemId2 ) { systemMap . put ( systemId1 , systemId2 ) ; } public void removeSystemMapping ( String systemId ) { systemMap . remove ( systemId ) ; } public Enumeration getSystemMappingKeys ( ) { return systemMap . keys ( ) ; } public String getSystemMapping ( String systemId ) { return ( String ) systemMap . get ( systemId ) ; } public InputSource resolveEntity ( String publicId , String systemId ) throws SAXException , IOException { if ( publicId != null ) { String value = getPublicMapping ( publicId ) ; if ( value != null ) { return new InputSource ( value ) ; } } if ( systemId != null ) { String value = getSystemMapping ( systemId ) ; if ( value == null ) { value = systemId ; } return new InputSource ( value ) ; } return null ; } } 	0	['11', '1', '1', '1', '18', '15', '1', '0', '11', '0.5', '102', '1', '0', '0', '0.431818182', '0', '0', '8.090909091', '1', '0.9091', '0']
package org . apache . xerces . utils ; public final class IntStack { private int fDepth ; private int [ ] fData ; public int size ( ) { return fDepth ; } public void push ( int value ) { ensureCapacity ( fDepth + 1 ) ; fData [ fDepth ++ ] = value ; } public int peek ( ) { return fData [ fDepth - 1 ] ; } public int pop ( ) { return fData [ -- fDepth ] ; } public void clear ( ) { fDepth = 0 ; } public void print ( ) { System . out . print ( '(' ) ; System . out . print ( fDepth ) ; System . out . print ( ") {" ) ; for ( int i = 0 ; i < fDepth ; i ++ ) { if ( i == 3 ) { System . out . print ( " ..." ) ; break ; } System . out . print ( ' ' ) ; System . out . print ( fData [ i ] ) ; if ( i < fDepth - 1 ) { System . out . print ( ',' ) ; } } System . out . print ( " }" ) ; System . out . println ( ) ; } private boolean ensureCapacity ( int size ) { try { return fData [ size ] != 0 ; } catch ( NullPointerException e ) { fData = new int [ 32 ] ; } catch ( ArrayIndexOutOfBoundsException e ) { int [ ] newdata = new int [ fData . length * 2 ] ; System . arraycopy ( fData , 0 , newdata , 0 , fData . length ) ; fData = newdata ; } return true ; } } 	0	['8', '1', '0', '2', '14', '0', '2', '0', '7', '0.357142857', '144', '1', '0', '0', '0.625', '0', '0', '16.75', '4', '1.375', '0']
package javax . xml . parsers ; public class ParserConfigurationException extends Exception { public ParserConfigurationException ( ) { super ( ) ; } public ParserConfigurationException ( String msg ) { super ( msg ) ; } } 	0	['2', '3', '0', '0', '4', '1', '0', '0', '2', '2', '9', '0', '0', '1', '0.75', '0', '0', '3.5', '0', '0', '0']
