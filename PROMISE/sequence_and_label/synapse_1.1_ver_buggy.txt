package org . apache . synapse . core ; import org . apache . synapse . MessageContext ; import org . apache . synapse . mediators . base . SequenceMediator ; import org . apache . synapse . endpoints . utils . EndpointDefinition ; import org . apache . synapse . statistics . StatisticsCollector ; import java . util . concurrent . ExecutorService ; public interface SynapseEnvironment { public boolean injectMessage ( MessageContext smc ) ; public void injectAsync ( MessageContext smc , SequenceMediator seq ) ; public void send ( EndpointDefinition endpoint , MessageContext smc ) ; public MessageContext createMessageContext ( ) ; public StatisticsCollector getStatisticsCollector ( ) ; public void setStatisticsCollector ( StatisticsCollector statisticsCollector ) ; public ExecutorService getExecutorService ( ) ; public boolean isInitialized ( ) ; public void setInitialized ( boolean state ) ; } 	1	['9', '1', '0', '25', '9', '36', '22', '4', '9', '2', '9', '0', '0', '0', '0.296296296', '0', '0', '0', '1', '1', '1']
package org . apache . synapse . config . xml . endpoints ; import org . apache . axiom . om . OMElement ; import org . apache . axiom . om . OMAbstractFactory ; import org . apache . axiom . om . OMFactory ; import org . apache . synapse . endpoints . Endpoint ; import org . apache . synapse . endpoints . FailoverEndpoint ; import org . apache . synapse . SynapseException ; import org . apache . synapse . SynapseConstants ; import java . util . List ; public class FailoverEndpointSerializer implements EndpointSerializer { private OMFactory fac = null ; public OMElement serializeEndpoint ( Endpoint endpoint ) { if ( ! ( endpoint instanceof FailoverEndpoint ) ) { throw new SynapseException ( "Invalid endpoint type." ) ; } FailoverEndpoint failoverEndpoint = ( FailoverEndpoint ) endpoint ; fac = OMAbstractFactory . getOMFactory ( ) ; OMElement endpointElement = fac . createOMElement ( "endpoint" , SynapseConstants . SYNAPSE_OMNAMESPACE ) ; OMElement failoverElement = fac . createOMElement ( "failover" , SynapseConstants . SYNAPSE_OMNAMESPACE ) ; endpointElement . addChild ( failoverElement ) ; String name = failoverEndpoint . getName ( ) ; if ( name != null ) { endpointElement . addAttribute ( "name" , name , null ) ; } List endpoints = failoverEndpoint . getEndpoints ( ) ; for ( int i = 0 ; i < endpoints . size ( ) ; i ++ ) { Endpoint childEndpoint = ( Endpoint ) endpoints . get ( i ) ; EndpointSerializer serializer = EndpointAbstractSerializer . getEndpointSerializer ( childEndpoint ) ; OMElement aeElement = serializer . serializeEndpoint ( childEndpoint ) ; failoverElement . addChild ( aeElement ) ; } return endpointElement ; } } 	1	['2', '1', '0', '12', '14', '0', '1', '12', '2', '0', '77', '1', '0', '0', '0.75', '0', '0', '37', '4', '2', '1']
package org . apache . synapse . config . xml . endpoints ; import org . apache . synapse . endpoints . Endpoint ; import org . apache . synapse . endpoints . WSDLEndpoint ; import org . apache . synapse . SynapseConstants ; import org . apache . synapse . SynapseException ; import org . apache . synapse . endpoints . utils . EndpointDefinition ; import org . apache . synapse . config . xml . endpoints . utils . WSDL11EndpointBuilder ; import org . apache . axiom . om . OMElement ; import org . apache . axiom . om . OMAttribute ; import org . apache . axiom . om . OMNode ; import org . apache . axiom . om . OMNamespace ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import org . apache . axis2 . description . WSDL2Constants ; import org . apache . synapse . config . SynapseConfigUtils ; import javax . xml . namespace . QName ; import java . net . URL ; public class WSDLEndpointFactory implements EndpointFactory { private static Log log = LogFactory . getLog ( WSDLEndpointFactory . class ) ; private static WSDLEndpointFactory instance = new WSDLEndpointFactory ( ) ; private WSDLEndpointFactory ( ) { } public static WSDLEndpointFactory getInstance ( ) { return instance ; } public Object getObjectFromOMNode ( OMNode om ) { if ( om instanceof OMElement ) { return createEndpoint ( ( OMElement ) om , false ) ; } else { handleException ( "Invalid XML configuration for an Endpoint. OMElement expected" ) ; } return null ; } public Endpoint createEndpoint ( OMElement epConfig , boolean anonymousEndpoint ) { WSDLEndpoint wsdlEndpoint = new WSDLEndpoint ( ) ; if ( ! anonymousEndpoint ) { OMAttribute name = epConfig . getAttribute ( new QName ( org . apache . synapse . config . xml . XMLConfigConstants . NULL_NAMESPACE , "name" ) ) ; if ( name != null ) { wsdlEndpoint . setName ( name . getAttributeValue ( ) ) ; } } OMElement wsdlElement = epConfig . getFirstChildWithName ( new QName ( SynapseConstants . SYNAPSE_NAMESPACE , "wsdl" ) ) ; if ( wsdlElement != null ) { OMElement suspendElement = wsdlElement . getFirstChildWithName ( new QName ( SynapseConstants . SYNAPSE_NAMESPACE , org . apache . synapse . config . xml . XMLConfigConstants . SUSPEND_DURATION_ON_FAILURE ) ) ; if ( suspendElement != null ) { String suspend = suspendElement . getText ( ) ; try { if ( suspend != null ) { long suspendDuration = Long . parseLong ( suspend . trim ( ) ) ; wsdlEndpoint . setSuspendOnFailDuration ( suspendDuration * 1000 ) ; } } catch ( NumberFormatException e ) { handleException ( "suspendDurationOnFailure should be valid number." ) ; } } EndpointDefinition endpoint = null ; String serviceName = wsdlElement . getAttributeValue ( new QName ( org . apache . synapse . config . xml . XMLConfigConstants . NULL_NAMESPACE , "service" ) ) ; String portName = wsdlElement . getAttributeValue ( new QName ( org . apache . synapse . config . xml . XMLConfigConstants . NULL_NAMESPACE , "port" ) ) ; String wsdlURI = wsdlElement . getAttributeValue ( new QName ( org . apache . synapse . config . xml . XMLConfigConstants . NULL_NAMESPACE , "uri" ) ) ; wsdlEndpoint . setServiceName ( serviceName ) ; wsdlEndpoint . setPortName ( portName ) ; if ( wsdlURI != null ) { wsdlEndpoint . setWsdlURI ( wsdlURI . trim ( ) ) ; try { OMElement wsdlOM = SynapseConfigUtils . getOMElementFromURL ( new URL ( wsdlURI ) . toString ( ) ) ; if ( wsdlOM != null ) { OMNamespace ns = wsdlOM . getNamespace ( ) ; if ( ns != null ) { String nsUri = wsdlOM . getNamespace ( ) . getNamespaceURI ( ) ; if ( org . apache . axis2 . namespace . Constants . NS_URI_WSDL11 . equals ( nsUri ) ) { endpoint = new WSDL11EndpointBuilder ( ) . createEndpointDefinitionFromWSDL ( wsdlOM , serviceName , portName ) ; } else if ( WSDL2Constants . WSDL_NAMESPACE . equals ( nsUri ) ) { handleException ( "WSDL 2.0 Endpoints are currently not supported" ) ; } } } } catch ( Exception e ) { handleException ( "Couldn't create endpoint from the given WSDL URI : " + e . getMessage ( ) , e ) ; } } OMElement definitionElement = wsdlElement . getFirstChildWithName ( new QName ( org . apache . axis2 . namespace . Constants . NS_URI_WSDL11 , "definitions" ) ) ; if ( endpoint == null && definitionElement != null ) { wsdlEndpoint . setWsdlDoc ( definitionElement ) ; endpoint = new WSDL11EndpointBuilder ( ) . createEndpointDefinitionFromWSDL ( definitionElement , serviceName , portName ) ; } OMElement descriptionElement = wsdlElement . getFirstChildWithName ( new QName ( org . apache . axis2 . namespace . Constants . NS_URI_WSDL11 , "description" ) ) ; if ( endpoint == null && descriptionElement != null ) { wsdlEndpoint . setWsdlDoc ( descriptionElement ) ; handleException ( "WSDL 2.0 Endpoints are currently not supported." ) ; } if ( endpoint != null ) { extractQOSInformation ( endpoint , wsdlElement ) ; OMAttribute statistics = epConfig . getAttribute ( new QName ( org . apache . synapse . config . xml . XMLConfigConstants . NULL_NAMESPACE , org . apache . synapse . config . xml . XMLConfigConstants . STATISTICS_ATTRIB_NAME ) ) ; if ( statistics != null ) { String statisticsValue = statistics . getAttributeValue ( ) ; if ( statisticsValue != null ) { if ( org . apache . synapse . config . xml . XMLConfigConstants . STATISTICS_ENABLE . equals ( statisticsValue ) ) { endpoint . setStatisticsState ( org . apache . synapse . SynapseConstants . STATISTICS_ON ) ; } else if ( org . apache . synapse . config . xml . XMLConfigConstants . STATISTICS_DISABLE . equals ( statisticsValue ) ) { endpoint . setStatisticsState ( org . apache . synapse . SynapseConstants . STATISTICS_OFF ) ; } } } wsdlEndpoint . setEndpoint ( endpoint ) ; } else { handleException ( "WSDL is not specified for WSDL endpoint." ) ; } } return wsdlEndpoint ; } private static void handleException ( String msg ) { log . error ( msg ) ; throw new SynapseException ( msg ) ; } private static void handleException ( String msg , Exception e ) { log . error ( msg , e ) ; throw new SynapseException ( msg , e ) ; } private void extractQOSInformation ( EndpointDefinition endpointDefinition , OMElement wsdlElement ) { OMAttribute format = wsdlElement . getAttribute ( new QName ( org . apache . synapse . config . xml . XMLConfigConstants . NULL_NAMESPACE , "format" ) ) ; OMAttribute optimize = wsdlElement . getAttribute ( new QName ( org . apache . synapse . config . xml . XMLConfigConstants . NULL_NAMESPACE , "optimize" ) ) ; if ( format != null ) { String forceValue = format . getAttributeValue ( ) . trim ( ) . toLowerCase ( ) ; if ( SynapseConstants . FORMAT_POX . equals ( forceValue ) ) { endpointDefinition . setForcePOX ( true ) ; endpointDefinition . setFormat ( SynapseConstants . FORMAT_POX ) ; } else if ( SynapseConstants . FORMAT_SOAP11 . equals ( forceValue ) ) { endpointDefinition . setForceSOAP11 ( true ) ; endpointDefinition . setFormat ( SynapseConstants . FORMAT_SOAP11 ) ; } else if ( SynapseConstants . FORMAT_SOAP12 . equals ( forceValue ) ) { endpointDefinition . setForceSOAP12 ( true ) ; endpointDefinition . setFormat ( SynapseConstants . FORMAT_SOAP12 ) ; } else { handleException ( "force value -\"" + forceValue + "\" not yet implemented" ) ; } } if ( optimize != null && optimize . getAttributeValue ( ) . length ( ) > 0 ) { String method = optimize . getAttributeValue ( ) . trim ( ) ; if ( "mtom" . equalsIgnoreCase ( method ) ) { endpointDefinition . setUseMTOM ( true ) ; } else if ( "swa" . equalsIgnoreCase ( method ) ) { endpointDefinition . setUseSwa ( true ) ; } } OMElement wsAddr = wsdlElement . getFirstChildWithName ( new QName ( org . apache . synapse . config . xml . XMLConfigConstants . SYNAPSE_NAMESPACE , "enableAddressing" ) ) ; if ( wsAddr != null ) { endpointDefinition . setAddressingOn ( true ) ; String useSepList = wsAddr . getAttributeValue ( new QName ( "separateListener" ) ) ; if ( useSepList != null ) { if ( useSepList . trim ( ) . toLowerCase ( ) . startsWith ( "tr" ) || useSepList . trim ( ) . startsWith ( "1" ) ) { endpointDefinition . setUseSeparateListener ( true ) ; } } } OMElement wsSec = wsdlElement . getFirstChildWithName ( new QName ( org . apache . synapse . config . xml . XMLConfigConstants . SYNAPSE_NAMESPACE , "enableSec" ) ) ; if ( wsSec != null ) { endpointDefinition . setSecurityOn ( true ) ; OMAttribute policy = wsSec . getAttribute ( new QName ( org . apache . synapse . config . xml . XMLConfigConstants . NULL_NAMESPACE , "policy" ) ) ; if ( policy != null ) { endpointDefinition . setWsSecPolicyKey ( policy . getAttributeValue ( ) ) ; } } OMElement wsRm = wsdlElement . getFirstChildWithName ( new QName ( org . apache . synapse . config . xml . XMLConfigConstants . SYNAPSE_NAMESPACE , "enableRM" ) ) ; if ( wsRm != null ) { endpointDefinition . setReliableMessagingOn ( true ) ; OMAttribute policy = wsRm . getAttribute ( new QName ( org . apache . synapse . config . xml . XMLConfigConstants . NULL_NAMESPACE , "policy" ) ) ; if ( policy != null ) { endpointDefinition . setWsRMPolicyKey ( policy . getAttributeValue ( ) ) ; } } OMElement timeout = wsdlElement . getFirstChildWithName ( new QName ( org . apache . synapse . config . xml . XMLConfigConstants . SYNAPSE_NAMESPACE , "timeout" ) ) ; if ( timeout != null ) { OMElement duration = timeout . getFirstChildWithName ( new QName ( org . apache . synapse . config . xml . XMLConfigConstants . SYNAPSE_NAMESPACE , "duration" ) ) ; if ( duration != null ) { String d = duration . getText ( ) ; if ( d != null ) { long timeoutSeconds = new Long ( d . trim ( ) ) . longValue ( ) ; endpointDefinition . setTimeoutDuration ( timeoutSeconds * 1000 ) ; } } OMElement action = timeout . getFirstChildWithName ( new QName ( org . apache . synapse . config . xml . XMLConfigConstants . SYNAPSE_NAMESPACE , "action" ) ) ; if ( action != null ) { String a = action . getText ( ) ; if ( a != null ) { if ( ( a . trim ( ) ) . equalsIgnoreCase ( "discard" ) ) { endpointDefinition . setTimeoutAction ( SynapseConstants . DISCARD ) ; if ( endpointDefinition . getTimeoutDuration ( ) == 0 ) { endpointDefinition . setTimeoutDuration ( 30000 ) ; } } else if ( ( a . trim ( ) ) . equalsIgnoreCase ( "fault" ) ) { endpointDefinition . setTimeoutAction ( SynapseConstants . DISCARD_AND_FAULT ) ; if ( endpointDefinition . getTimeoutDuration ( ) == 0 ) { endpointDefinition . setTimeoutDuration ( 30000 ) ; } } } } } } } 	1	['8', '1', '0', '14', '65', '20', '1', '13', '3', '0.571428571', '552', '1', '1', '0', '0.244897959', '0', '0', '67.75', '26', '5.875', '2']
package org . apache . synapse . config . xml . endpoints ; import org . apache . synapse . endpoints . Endpoint ; import org . apache . synapse . endpoints . FailoverEndpoint ; import org . apache . synapse . SynapseException ; import org . apache . synapse . SynapseConstants ; import org . apache . axiom . om . OMElement ; import org . apache . axiom . om . OMNode ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import javax . xml . namespace . QName ; import java . util . ArrayList ; import java . util . Iterator ; public class FailoverEndpointFactory implements EndpointFactory { private static Log log = LogFactory . getLog ( FailoverEndpointFactory . class ) ; private static FailoverEndpointFactory instance = new FailoverEndpointFactory ( ) ; private FailoverEndpointFactory ( ) { } public static FailoverEndpointFactory getInstance ( ) { return instance ; } public Endpoint createEndpoint ( OMElement epConfig , boolean anonymousEndpoint ) { OMElement failoverElement = epConfig . getFirstChildWithName ( new QName ( SynapseConstants . SYNAPSE_NAMESPACE , "failover" ) ) ; if ( failoverElement != null ) { FailoverEndpoint failoverEndpoint = new FailoverEndpoint ( ) ; String name = epConfig . getAttributeValue ( new QName ( "name" ) ) ; if ( name != null ) { failoverEndpoint . setName ( name ) ; } ArrayList endpoints = getEndpoints ( failoverElement , failoverEndpoint ) ; failoverEndpoint . setEndpoints ( endpoints ) ; return failoverEndpoint ; } return null ; } public Object getObjectFromOMNode ( OMNode om ) { if ( om instanceof OMElement ) { return createEndpoint ( ( OMElement ) om , false ) ; } else { handleException ( "Invalid XML configuration for an Endpoint. OMElement expected" ) ; } return null ; } private ArrayList getEndpoints ( OMElement failoverElement , Endpoint parent ) { ArrayList endpoints = new ArrayList ( ) ; Iterator iter = failoverElement . getChildrenWithName ( org . apache . synapse . config . xml . XMLConfigConstants . ENDPOINT_ELT ) ; while ( iter . hasNext ( ) ) { OMElement endptElem = ( OMElement ) iter . next ( ) ; EndpointFactory epFac = EndpointAbstractFactory . getEndpointFactroy ( endptElem ) ; Endpoint endpoint = epFac . createEndpoint ( endptElem , true ) ; endpoint . setParentEndpoint ( parent ) ; endpoints . add ( endpoint ) ; } return endpoints ; } private static void handleException ( String msg ) { log . error ( msg ) ; throw new SynapseException ( msg ) ; } private static void handleException ( String msg , Exception e ) { log . error ( msg , e ) ; throw new SynapseException ( msg , e ) ; } } 	1	['8', '1', '0', '10', '29', '20', '1', '10', '3', '0.714285714', '125', '1', '1', '0', '0.244897959', '0', '0', '14.375', '3', '1.25', '1']
package org . apache . synapse . mediators . eip . aggregator ; import org . apache . synapse . MessageContext ; import org . apache . synapse . SynapseConstants ; import org . apache . synapse . mediators . eip . EIPConstants ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import java . util . List ; import java . util . ArrayList ; public class Aggregate { private static final Log log = LogFactory . getLog ( Aggregate . class ) ; private static final Log trace = LogFactory . getLog ( SynapseConstants . TRACE_LOGGER ) ; private long timeout = 0 ; private long expireTime = 0 ; private int minCount = - 1 ; private int maxCount = - 1 ; private String corelation = null ; private List messages = new ArrayList ( ) ; public Aggregate ( String corelation , long timeout , int min , int max ) { this . corelation = corelation ; if ( timeout > 0 ) { this . timeout = System . currentTimeMillis ( ) + expireTime ; } if ( min > 0 ) { this . minCount = min ; } if ( max > 0 ) { this . maxCount = max ; } } public boolean addMessage ( MessageContext synCtx ) { if ( this . maxCount > 0 && this . messages . size ( ) < this . maxCount || this . maxCount <= 0 ) { this . messages . add ( synCtx ) ; return true ; } else { return false ; } } public boolean isComplete ( ) { boolean completed = false ; if ( ! messages . isEmpty ( ) ) { Object o = messages . get ( 0 ) ; if ( o instanceof MessageContext ) { Object prop = ( ( MessageContext ) o ) . getProperty ( EIPConstants . MESSAGE_SEQUENCE ) ; if ( prop instanceof String ) { String [ ] msgSequence = prop . toString ( ) . split ( EIPConstants . MESSAGE_SEQUENCE_DELEMITER ) ; if ( messages . size ( ) >= Integer . parseInt ( msgSequence [ 1 ] ) ) { completed = true ; } } } } if ( ! completed && this . minCount > 0 ) { completed = this . messages . size ( ) >= this . minCount || this . timeout < System . currentTimeMillis ( ) ; } return completed ; } public long getTimeout ( ) { return timeout ; } public void setTimeout ( long timeout ) { this . timeout = timeout ; } public int getMinCount ( ) { return minCount ; } public void setMinCount ( int minCount ) { this . minCount = minCount ; } public int getMaxCount ( ) { return maxCount ; } public void setMaxCount ( int maxCount ) { this . maxCount = maxCount ; } public String getCorelation ( ) { return corelation ; } public void setCorelation ( String corelation ) { this . corelation = corelation ; } public List getMessages ( ) { return messages ; } public void setMessages ( List messages ) { this . messages = messages ; } public long getExpireTime ( ) { return expireTime ; } public void setExpireTime ( long expireTime ) { this . expireTime = expireTime ; } } 	1	['16', '1', '0', '4', '29', '58', '1', '3', '15', '0.858333333', '199', '1', '0', '0', '0.277777778', '0', '0', '10.9375', '9', '1.5625', '2']
package org . apache . synapse . config . xml . endpoints ; import org . apache . synapse . endpoints . Endpoint ; import org . apache . synapse . config . XMLToObjectMapper ; import org . apache . axiom . om . OMElement ; public interface EndpointFactory extends XMLToObjectMapper { public Endpoint createEndpoint ( OMElement epConfig , boolean anonymousEndpoint ) ; } 	1	['1', '1', '0', '15', '1', '0', '12', '3', '1', '2', '1', '0', '0', '0', '1', '0', '0', '0', '1', '1', '1']
package org . apache . synapse . core . axis2 ; import org . apache . axiom . om . OMNamespace ; import org . apache . axiom . om . OMElement ; import org . apache . axis2 . AxisFault ; import org . apache . axis2 . description . * ; import org . apache . axis2 . engine . AxisConfiguration ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import org . apache . neethi . Policy ; import org . apache . neethi . PolicyEngine ; import org . apache . synapse . SynapseConstants ; import org . apache . synapse . SynapseException ; import org . apache . synapse . mediators . base . SequenceMediator ; import org . apache . synapse . endpoints . Endpoint ; import org . apache . synapse . config . SynapseConfiguration ; import org . apache . synapse . config . SynapseConfigUtils ; import javax . xml . namespace . QName ; import javax . xml . stream . XMLStreamException ; import java . io . IOException ; import java . io . InputStream ; import java . io . ByteArrayOutputStream ; import java . io . ByteArrayInputStream ; import java . util . * ; import java . net . * ; public class ProxyService { private static final Log log = LogFactory . getLog ( ProxyService . class ) ; private static final Log trace = LogFactory . getLog ( SynapseConstants . TRACE_LOGGER ) ; private final Log serviceLog ; private String name ; private String description ; private ArrayList transports ; private String targetEndpoint = null ; private String targetInSequence = null ; private String targetOutSequence = null ; private String targetFaultSequence = null ; private Endpoint targetInLineEndpoint = null ; private SequenceMediator targetInLineInSequence = null ; private SequenceMediator targetInLineOutSequence = null ; private SequenceMediator targetInLineFaultSequence = null ; private Map parameters = new HashMap ( ) ; private String wsdlKey ; private URI wsdlURI ; private Object inLineWSDL ; private List serviceLevelPolicies = new ArrayList ( ) ; private boolean wsRMEnabled = false ; private boolean wsSecEnabled = false ; private boolean startOnLoad = true ; private boolean running = false ; public static final String ALL_TRANSPORTS = "all" ; private int statisticsState = SynapseConstants . STATISTICS_UNSET ; protected int traceState = SynapseConstants . TRACING_UNSET ; public ProxyService ( String name ) { this . name = name ; serviceLog = LogFactory . getLog ( SynapseConstants . SERVICE_LOGGER_PREFIX + name ) ; } public AxisService buildAxisService ( SynapseConfiguration synCfg , AxisConfiguration axisCfg ) { auditInfo ( "Building Axis service for Proxy service : " + name ) ; AxisService proxyService = null ; if ( trace ( ) ) { trace . info ( "Loading the WSDL : " + ( wsdlKey != null ? " key = " + wsdlKey : ( wsdlURI != null ? " URI = " + wsdlURI : " <Inlined>" ) ) ) ; } InputStream wsdlInputStream = null ; OMElement wsdlElement = null ; if ( wsdlKey != null ) { synCfg . getEntryDefinition ( wsdlKey ) ; Object keyObject = synCfg . getEntry ( wsdlKey ) ; if ( keyObject instanceof OMElement ) { wsdlElement = ( OMElement ) keyObject ; } } else if ( inLineWSDL != null ) { wsdlElement = ( OMElement ) inLineWSDL ; } else if ( wsdlURI != null ) { try { URL url = wsdlURI . toURL ( ) ; wsdlElement = SynapseConfigUtils . getOMElementFromURL ( url . toString ( ) ) ; } catch ( MalformedURLException e ) { handleException ( "Malformed URI for wsdl" , e ) ; } catch ( IOException e ) { handleException ( "Error reading from wsdl URI" , e ) ; } } if ( wsdlElement != null ) { OMNamespace wsdlNamespace = wsdlElement . getNamespace ( ) ; ByteArrayOutputStream baos = new ByteArrayOutputStream ( ) ; try { if ( trace ( ) ) trace . info ( "Serializing wsdlElement found to build an Axis2 service" ) ; wsdlElement . serialize ( baos ) ; wsdlInputStream = new ByteArrayInputStream ( baos . toByteArray ( ) ) ; } catch ( XMLStreamException e ) { handleException ( "Error converting to a StreamSource" , e ) ; } if ( wsdlInputStream != null ) { try { if ( trace ( ) ) trace . info ( "WSDL Namespace is : " + wsdlNamespace . getNamespaceURI ( ) ) ; if ( wsdlNamespace != null ) { boolean isWSDL11 = false ; WSDLToAxisServiceBuilder wsdlToAxisServiceBuilder = null ; if ( WSDL2Constants . WSDL_NAMESPACE . equals ( wsdlNamespace . getNamespaceURI ( ) ) ) { wsdlToAxisServiceBuilder = new WSDL20ToAxisServiceBuilder ( wsdlInputStream , null , null ) ; wsdlToAxisServiceBuilder . setBaseUri ( wsdlURI != null ? wsdlURI . toString ( ) : "" ) ; } else if ( org . apache . axis2 . namespace . Constants . NS_URI_WSDL11 . equals ( wsdlNamespace . getNamespaceURI ( ) ) ) { wsdlToAxisServiceBuilder = new WSDL11ToAxisServiceBuilder ( wsdlInputStream , null , null ) ; isWSDL11 = true ; } else { handleException ( "Unknown WSDL format.. not WSDL 1.1 or WSDL 2.0" ) ; } if ( wsdlToAxisServiceBuilder == null ) { throw new SynapseException ( "Could not get the WSDL to Axis Service Builder" ) ; } if ( trace ( ) ) { trace . info ( "Populating Axis2 service using WSDL" ) ; if ( trace . isTraceEnabled ( ) ) { trace . trace ( "WSDL : " + wsdlElement . toString ( ) ) ; } } proxyService = wsdlToAxisServiceBuilder . populateService ( ) ; List schemaList = proxyService . getSchema ( ) ; if ( schemaList != null && schemaList . size ( ) > 0 ) { proxyService . setSchemaTargetNamespace ( proxyService . getSchema ( 0 ) . getTargetNamespace ( ) ) ; } proxyService . setWsdlFound ( true ) ; if ( isWSDL11 ) { Collection endpoints = proxyService . getEndpoints ( ) . values ( ) ; Iterator iter = endpoints . iterator ( ) ; while ( iter . hasNext ( ) ) { AxisEndpoint endpoint = ( AxisEndpoint ) iter . next ( ) ; Iterator children = endpoint . getBinding ( ) . getChildren ( ) ; while ( children . hasNext ( ) ) { AxisBindingOperation axisBindingOperation = ( AxisBindingOperation ) children . next ( ) ; axisBindingOperation . setProperty ( WSDL2Constants . ATTR_WHTTP_IGNORE_UNCITED , new Boolean ( false ) ) ; } } } } else { handleException ( "Unknown WSDL format.. not WSDL 1.1 or WSDL 2.0" ) ; } } catch ( AxisFault af ) { handleException ( "Error building service from WSDL" , af ) ; } catch ( IOException ioe ) { handleException ( "Error reading WSDL" , ioe ) ; } } } else { if ( trace ( ) ) trace . info ( "Did not find a WSDL. Assuming a POX or Legacy service" ) ; proxyService = new AxisService ( ) ; AxisOperation mediateOperation = new InOutAxisOperation ( new QName ( "mediate" ) ) ; proxyService . addOperation ( mediateOperation ) ; } if ( proxyService == null ) { throw new SynapseException ( "Could not create a proxy service" ) ; } proxyService . setName ( name ) ; if ( description != null ) { proxyService . setDocumentation ( description ) ; } if ( transports == null || transports . size ( ) == 0 ) { } else { if ( trace ( ) ) trace . info ( "Exposing transports : " + transports ) ; proxyService . setExposedTransports ( transports ) ; } if ( trace ( ) ) trace . info ( "Setting service parameters : " + parameters ) ; Iterator iter = parameters . keySet ( ) . iterator ( ) ; while ( iter . hasNext ( ) ) { String name = ( String ) iter . next ( ) ; Object value = parameters . get ( name ) ; Parameter p = new Parameter ( ) ; p . setName ( name ) ; p . setValue ( value ) ; try { proxyService . addParameter ( p ) ; } catch ( AxisFault af ) { handleException ( "Error setting parameter : " + name + "" + "to proxy service as a Parameter" , af ) ; } } if ( trace ( ) ) trace . info ( "Setting service level policies : " + serviceLevelPolicies ) ; if ( ! serviceLevelPolicies . isEmpty ( ) ) { Policy svcEffectivePolicy = null ; iter = serviceLevelPolicies . iterator ( ) ; while ( iter . hasNext ( ) ) { String policyKey = ( String ) iter . next ( ) ; synCfg . getEntryDefinition ( policyKey ) ; Object policyProp = synCfg . getEntry ( policyKey ) ; if ( policyProp != null ) { if ( svcEffectivePolicy == null ) { svcEffectivePolicy = PolicyEngine . getPolicy ( SynapseConfigUtils . getStreamSource ( policyProp ) . getInputStream ( ) ) ; } else { svcEffectivePolicy = ( Policy ) svcEffectivePolicy . merge ( PolicyEngine . getPolicy ( SynapseConfigUtils . getStreamSource ( policyProp ) . getInputStream ( ) ) ) ; } } } PolicyInclude pi = proxyService . getPolicyInclude ( ) ; if ( pi != null && svcEffectivePolicy != null ) { if ( trace ( ) ) { if ( trace . isTraceEnabled ( ) ) { trace . trace ( "Effective policy applied : " + svcEffectivePolicy ) ; } } pi . addPolicyElement ( PolicyInclude . AXIS_SERVICE_POLICY , svcEffectivePolicy ) ; } } ProxyServiceMessageReceiver msgRcvr = new ProxyServiceMessageReceiver ( ) ; msgRcvr . setName ( name ) ; msgRcvr . setProxy ( this ) ; iter = proxyService . getOperations ( ) ; while ( iter . hasNext ( ) ) { AxisOperation op = ( AxisOperation ) iter . next ( ) ; op . setMessageReceiver ( msgRcvr ) ; } try { auditInfo ( "Adding service " + name + " to the Axis2 configuration" ) ; axisCfg . addService ( proxyService ) ; this . setRunning ( true ) ; } catch ( AxisFault axisFault ) { try { if ( axisCfg . getService ( proxyService . getName ( ) ) != null ) { if ( trace ( ) ) trace . info ( "Removing service " + name + " due to error : " + axisFault . getMessage ( ) ) ; axisCfg . removeService ( proxyService . getName ( ) ) ; } } catch ( AxisFault ignore ) { } handleException ( "Error adding Proxy service to the Axis2 engine" , axisFault ) ; } if ( wsRMEnabled ) { auditInfo ( "WS-Reliable messaging is enabled for service : " + name ) ; try { proxyService . engageModule ( axisCfg . getModule ( SynapseConstants . SANDESHA2_MODULE_NAME ) , axisCfg ) ; } catch ( AxisFault axisFault ) { handleException ( "Error loading WS RM module on proxy service : " + name , axisFault ) ; } } if ( wsSecEnabled ) { auditInfo ( "WS-Security is enabled for service : " + name ) ; try { proxyService . engageModule ( axisCfg . getModule ( SynapseConstants . RAMPART_MODULE_NAME ) , axisCfg ) ; } catch ( AxisFault axisFault ) { handleException ( "Error loading WS Sec module on proxy service : " + name , axisFault ) ; } } auditInfo ( "Successfully created the Axis2 service for Proxy service : " + name ) ; return proxyService ; } public void start ( SynapseConfiguration synCfg ) { AxisConfiguration axisConfig = synCfg . getAxisConfiguration ( ) ; if ( axisConfig != null ) { axisConfig . getServiceForActivation ( this . getName ( ) ) . setActive ( true ) ; this . setRunning ( true ) ; auditInfo ( "Started the proxy service : " + name ) ; } else { auditWarn ( "Unable to start proxy service : " + name + ". Couldn't access Axis configuration" ) ; } } public void stop ( SynapseConfiguration synCfg ) { AxisConfiguration axisConfig = synCfg . getAxisConfiguration ( ) ; if ( axisConfig != null ) { try { AxisService as = axisConfig . getService ( this . getName ( ) ) ; if ( as != null ) { as . setActive ( false ) ; } this . setRunning ( false ) ; auditInfo ( "Started the proxy service : " + name ) ; } catch ( AxisFault axisFault ) { handleException ( "Error stopping the proxy service : " + name , axisFault ) ; } } else { auditWarn ( "Unable to stop proxy service : " + name + ". Couldn't access Axis configuration" ) ; } } private void handleException ( String msg ) { serviceLog . error ( msg ) ; log . error ( msg ) ; if ( trace ( ) ) trace . error ( msg ) ; throw new SynapseException ( msg ) ; } private void handleException ( String msg , Exception e ) { serviceLog . error ( msg ) ; log . error ( msg , e ) ; if ( trace ( ) ) trace . error ( msg + " :: " + e . getMessage ( ) ) ; throw new SynapseException ( msg , e ) ; } private void auditInfo ( String message ) { log . info ( message ) ; serviceLog . info ( message ) ; if ( trace ( ) ) { trace . info ( message ) ; } } private void auditWarn ( String message ) { log . warn ( message ) ; serviceLog . warn ( message ) ; if ( trace ( ) ) { trace . warn ( message ) ; } } private boolean trace ( ) { return traceState == SynapseConstants . TRACING_ON ; } public String getName ( ) { return name ; } public String getDescription ( ) { return description ; } public void setDescription ( String description ) { this . description = description ; } public ArrayList getTransports ( ) { return transports ; } public void addParameter ( String name , Object value ) { parameters . put ( name , value ) ; } public Map getParameterMap ( ) { return this . parameters ; } public void setTransports ( ArrayList transports ) { this . transports = transports ; } public String getTargetEndpoint ( ) { return targetEndpoint ; } public void setTargetEndpoint ( String targetEndpoint ) { this . targetEndpoint = targetEndpoint ; } public String getTargetInSequence ( ) { return targetInSequence ; } public void setTargetInSequence ( String targetInSequence ) { this . targetInSequence = targetInSequence ; } public String getTargetOutSequence ( ) { return targetOutSequence ; } public void setTargetOutSequence ( String targetOutSequence ) { this . targetOutSequence = targetOutSequence ; } public String getWSDLKey ( ) { return wsdlKey ; } public void setWSDLKey ( String wsdlKey ) { this . wsdlKey = wsdlKey ; } public List getServiceLevelPolicies ( ) { return serviceLevelPolicies ; } public void addServiceLevelPolicy ( String serviceLevelPolicy ) { this . serviceLevelPolicies . add ( serviceLevelPolicy ) ; } public boolean isWsRMEnabled ( ) { return wsRMEnabled ; } public void setWsRMEnabled ( boolean wsRMEnabled ) { this . wsRMEnabled = wsRMEnabled ; } public boolean isWsSecEnabled ( ) { return wsSecEnabled ; } public void setWsSecEnabled ( boolean wsSecEnabled ) { this . wsSecEnabled = wsSecEnabled ; } public boolean isStartOnLoad ( ) { return startOnLoad ; } public void setStartOnLoad ( boolean startOnLoad ) { this . startOnLoad = startOnLoad ; } public boolean isRunning ( ) { return running ; } public void setRunning ( boolean running ) { this . running = running ; } public int getStatisticsState ( ) { return statisticsState ; } public void setStatisticsState ( int statisticsState ) { this . statisticsState = statisticsState ; } public int getTraceState ( ) { return traceState ; } public void setTraceState ( int traceState ) { this . traceState = traceState ; } public String getTargetFaultSequence ( ) { return targetFaultSequence ; } public void setTargetFaultSequence ( String targetFaultSequence ) { this . targetFaultSequence = targetFaultSequence ; } public Object getInLineWSDL ( ) { return inLineWSDL ; } public void setInLineWSDL ( Object inLineWSDL ) { this . inLineWSDL = inLineWSDL ; } public URI getWsdlURI ( ) { return wsdlURI ; } public void setWsdlURI ( URI wsdlURI ) { this . wsdlURI = wsdlURI ; } public Endpoint getTargetInLineEndpoint ( ) { return targetInLineEndpoint ; } public void setTargetInLineEndpoint ( Endpoint targetInLineEndpoint ) { this . targetInLineEndpoint = targetInLineEndpoint ; } public SequenceMediator getTargetInLineInSequence ( ) { return targetInLineInSequence ; } public void setTargetInLineInSequence ( SequenceMediator targetInLineInSequence ) { this . targetInLineInSequence = targetInLineInSequence ; } public SequenceMediator getTargetInLineOutSequence ( ) { return targetInLineOutSequence ; } public void setTargetInLineOutSequence ( SequenceMediator targetInLineOutSequence ) { this . targetInLineOutSequence = targetInLineOutSequence ; } public SequenceMediator getTargetInLineFaultSequence ( ) { return targetInLineFaultSequence ; } public void setTargetInLineFaultSequence ( SequenceMediator targetInLineFaultSequence ) { this . targetInLineFaultSequence = targetInLineFaultSequence ; } } 	1	['53', '1', '0', '37', '144', '1172', '9', '30', '47', '0.941568047', '1164', '0.961538462', '4', '0', '0.134615385', '0', '0', '20.47169811', '39', '1.8302', '4']
package org . apache . synapse . config . xml ; import org . apache . axiom . om . OMElement ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import org . apache . synapse . Mediator ; import org . apache . synapse . mediators . transform . FaultMediator ; public class FaultMediatorSerializer extends AbstractMediatorSerializer { private static final String SOAP11 = "soap11" ; private static final String SOAP12 = "soap12" ; public OMElement serializeMediator ( OMElement parent , Mediator m ) { if ( ! ( m instanceof FaultMediator ) ) { handleException ( "Unsupported mediator passed in for serialization : " + m . getType ( ) ) ; } FaultMediator mediator = ( FaultMediator ) m ; OMElement fault = fac . createOMElement ( "makefault" , synNS ) ; saveTracingState ( fault , mediator ) ; if ( mediator . getSoapVersion ( ) == FaultMediator . SOAP11 ) { fault . addAttribute ( fac . createOMAttribute ( "version" , nullNS , SOAP11 ) ) ; } else if ( mediator . getSoapVersion ( ) == FaultMediator . SOAP12 ) { fault . addAttribute ( fac . createOMAttribute ( "version" , nullNS , SOAP12 ) ) ; } OMElement code = fac . createOMElement ( "code" , synNS , fault ) ; if ( mediator . getFaultCodeValue ( ) != null ) { code . addAttribute ( fac . createOMAttribute ( "value" , nullNS , mediator . getFaultCodeValue ( ) . getPrefix ( ) + ":" + mediator . getFaultCodeValue ( ) . getLocalPart ( ) ) ) ; code . declareNamespace ( mediator . getFaultCodeValue ( ) . getNamespaceURI ( ) , mediator . getFaultCodeValue ( ) . getPrefix ( ) ) ; } else if ( mediator . getFaultCodeExpr ( ) != null ) { code . addAttribute ( fac . createOMAttribute ( "expression" , nullNS , mediator . getFaultCodeExpr ( ) . toString ( ) ) ) ; super . serializeNamespaces ( code , mediator . getFaultCodeExpr ( ) ) ; } else { handleException ( "Fault code is required for a fault mediator" ) ; } OMElement reason = fac . createOMElement ( "reason" , synNS , fault ) ; if ( mediator . getFaultReasonValue ( ) != null ) { reason . addAttribute ( fac . createOMAttribute ( "value" , nullNS , mediator . getFaultReasonValue ( ) ) ) ; } else if ( mediator . getFaultReasonExpr ( ) != null ) { reason . addAttribute ( fac . createOMAttribute ( "expression" , nullNS , mediator . getFaultReasonExpr ( ) . toString ( ) ) ) ; super . serializeNamespaces ( code , mediator . getFaultReasonExpr ( ) ) ; } else { handleException ( "Fault reason is required for a fault mediator" ) ; } if ( mediator . getFaultNode ( ) != null ) { OMElement node = fac . createOMElement ( "node" , synNS , fault ) ; node . setText ( mediator . getFaultNode ( ) . toString ( ) ) ; } if ( mediator . getFaultRole ( ) != null ) { OMElement role = fac . createOMElement ( "role" , synNS , fault ) ; role . setText ( mediator . getFaultRole ( ) . toString ( ) ) ; } if ( mediator . getFaultDetail ( ) != null ) { OMElement detail = fac . createOMElement ( "detail" , synNS , fault ) ; detail . setText ( mediator . getFaultDetail ( ) ) ; } if ( parent != null ) { parent . addChild ( fault ) ; } return fault ; } public String getMediatorClassName ( ) { return FaultMediator . class . getName ( ) ; } } 	1	['3', '2', '0', '10', '32', '3', '0', '10', '3', '1.5', '212', '1', '0', '0.75', '0.555555556', '0', '0', '69', '12', '4.3333', '1']
package org . apache . synapse . config . xml . endpoints ; import org . apache . synapse . endpoints . Endpoint ; import org . apache . synapse . endpoints . LoadbalanceEndpoint ; import org . apache . synapse . endpoints . algorithms . LoadbalanceAlgorithm ; import org . apache . synapse . SynapseException ; import org . apache . synapse . SynapseConstants ; import org . apache . synapse . config . xml . endpoints . utils . LoadbalanceAlgorithmFactory ; import org . apache . axiom . om . OMElement ; import org . apache . axiom . om . OMNode ; import org . apache . axiom . om . OMAttribute ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import javax . xml . namespace . QName ; import java . util . Iterator ; import java . util . ArrayList ; public class LoadbalanceEndpointFactory implements EndpointFactory { private static Log log = LogFactory . getLog ( LoadbalanceEndpointFactory . class ) ; private static LoadbalanceEndpointFactory instance = new LoadbalanceEndpointFactory ( ) ; private LoadbalanceEndpointFactory ( ) { } public static LoadbalanceEndpointFactory getInstance ( ) { return instance ; } public Endpoint createEndpoint ( OMElement epConfig , boolean anonymousEndpoint ) { OMElement loadbalanceElement = null ; loadbalanceElement = epConfig . getFirstChildWithName ( new QName ( SynapseConstants . SYNAPSE_NAMESPACE , "loadbalance" ) ) ; if ( loadbalanceElement != null ) { LoadbalanceEndpoint loadbalanceEndpoint = new LoadbalanceEndpoint ( ) ; OMAttribute name = epConfig . getAttribute ( new QName ( org . apache . synapse . config . xml . XMLConfigConstants . NULL_NAMESPACE , "name" ) ) ; if ( name != null ) { loadbalanceEndpoint . setName ( name . getAttributeValue ( ) ) ; } ArrayList endpoints = getEndpoints ( loadbalanceElement , loadbalanceEndpoint ) ; loadbalanceEndpoint . setEndpoints ( endpoints ) ; LoadbalanceAlgorithm algorithm = LoadbalanceAlgorithmFactory . createLoadbalanceAlgorithm ( loadbalanceElement , endpoints ) ; loadbalanceEndpoint . setAlgorithm ( algorithm ) ; String failover = loadbalanceElement . getAttributeValue ( new QName ( "failover" ) ) ; if ( failover != null && failover . equalsIgnoreCase ( "false" ) ) { loadbalanceEndpoint . setFailover ( false ) ; } return loadbalanceEndpoint ; } return null ; } public Object getObjectFromOMNode ( OMNode om ) { if ( om instanceof OMElement ) { return createEndpoint ( ( OMElement ) om , false ) ; } else { handleException ( "Invalid XML configuration for an Endpoint. OMElement expected" ) ; } return null ; } private ArrayList getEndpoints ( OMElement loadbalanceElement , Endpoint parent ) { ArrayList endpoints = new ArrayList ( ) ; Iterator iter = loadbalanceElement . getChildrenWithName ( org . apache . synapse . config . xml . XMLConfigConstants . ENDPOINT_ELT ) ; while ( iter . hasNext ( ) ) { OMElement endptElem = ( OMElement ) iter . next ( ) ; EndpointFactory epFac = EndpointAbstractFactory . getEndpointFactroy ( endptElem ) ; Endpoint endpoint = epFac . createEndpoint ( endptElem , true ) ; endpoint . setParentEndpoint ( parent ) ; endpoints . add ( endpoint ) ; } return endpoints ; } private static void handleException ( String msg ) { log . error ( msg ) ; throw new SynapseException ( msg ) ; } private static void handleException ( String msg , Exception e ) { log . error ( msg , e ) ; throw new SynapseException ( msg , e ) ; } } 	1	['8', '1', '0', '13', '35', '20', '1', '13', '3', '0.714285714', '152', '1', '1', '0', '0.244897959', '0', '0', '17.75', '5', '1.5', '1']
package org . apache . synapse . core . axis2 ; import org . apache . axis2 . AxisFault ; import org . apache . axis2 . wsdl . WSDLConstants ; import org . apache . axis2 . description . AxisService ; import org . apache . axis2 . description . AxisMessage ; import org . apache . axis2 . description . OutOnlyAxisOperation ; import org . apache . axis2 . engine . AxisConfiguration ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import org . apache . synapse . SynapseConstants ; import org . apache . synapse . SynapseException ; import org . apache . synapse . config . SynapseConfiguration ; import javax . xml . namespace . QName ; public class AnonymousServiceFactory { private static final Log log = LogFactory . getLog ( AnonymousServiceFactory . class ) ; private static final String NONE = "__NONE__" ; private static final String ADDR_ONLY = "__ADDR_ONLY__" ; private static final String RM_AND_ADDR = "__RM_AND_ADDR__" ; private static final String SEC_AND_ADDR = "__SEC_AND_ADDR__" ; private static final String RM_SEC_AND_ADDR = "__RM_SEC_AND_ADDR__" ; public static final String OUT_IN_OPERATION = "__OUT_IN_OPERATION__" ; public static final String OUT_ONLY_OPERATION = "__OUT_ONLY_OPERATION__" ; private static SynapseCallbackReceiver synapseCallbackReceiver = null ; public static AxisService getAnonymousService ( SynapseConfiguration synCfg , AxisConfiguration axisCfg , boolean wsAddrOn , boolean wsRMOn , boolean wsSecOn ) { String servicekey = null ; if ( ! wsAddrOn ) { servicekey = NONE ; } else { if ( ! wsSecOn && ! wsRMOn ) { servicekey = ADDR_ONLY ; } else if ( wsRMOn && ! wsSecOn ) { servicekey = RM_AND_ADDR ; } else if ( wsSecOn && ! wsRMOn ) { servicekey = SEC_AND_ADDR ; } else { servicekey = RM_SEC_AND_ADDR ; } } try { AxisService service = axisCfg . getService ( servicekey ) ; if ( service == null ) { synchronized ( AnonymousServiceFactory . class ) { service = axisCfg . getService ( servicekey ) ; if ( service != null ) { return service ; } service = createAnonymousService ( synCfg , axisCfg , servicekey ) ; if ( wsAddrOn ) { service . engageModule ( axisCfg . getModule ( SynapseConstants . ADDRESSING_MODULE_NAME ) , axisCfg ) ; if ( wsRMOn ) { service . engageModule ( axisCfg . getModule ( SynapseConstants . SANDESHA2_MODULE_NAME ) , axisCfg ) ; } if ( wsSecOn ) { service . engageModule ( axisCfg . getModule ( SynapseConstants . RAMPART_MODULE_NAME ) , axisCfg ) ; } } } } return service ; } catch ( AxisFault e ) { handleException ( "Error retrieving anonymous service for QoS : " + servicekey , e ) ; } return null ; } private static void handleException ( String msg , Exception e ) { log . error ( msg , e ) ; throw new SynapseException ( msg , e ) ; } private static AxisService createAnonymousService ( SynapseConfiguration synCfg , AxisConfiguration axisCfg , String serviceKey ) { try { DynamicAxisOperation dynamicOperation = new DynamicAxisOperation ( new QName ( OUT_IN_OPERATION ) ) ; dynamicOperation . setMessageReceiver ( getCallbackReceiver ( synCfg ) ) ; AxisMessage inMsg = new AxisMessage ( ) ; inMsg . setName ( "in-message" ) ; inMsg . setParent ( dynamicOperation ) ; AxisMessage outMsg = new AxisMessage ( ) ; outMsg . setName ( "out-message" ) ; outMsg . setParent ( dynamicOperation ) ; dynamicOperation . addMessage ( inMsg , WSDLConstants . MESSAGE_LABEL_OUT_VALUE ) ; dynamicOperation . addMessage ( outMsg , WSDLConstants . MESSAGE_LABEL_IN_VALUE ) ; OutOnlyAxisOperation asyncOperation = new OutOnlyAxisOperation ( new QName ( OUT_ONLY_OPERATION ) ) ; asyncOperation . setMessageReceiver ( getCallbackReceiver ( synCfg ) ) ; AxisMessage outOnlyMsg = new AxisMessage ( ) ; outOnlyMsg . setName ( "out-message" ) ; outOnlyMsg . setParent ( asyncOperation ) ; asyncOperation . addMessage ( outMsg , WSDLConstants . MESSAGE_LABEL_OUT_VALUE ) ; AxisService axisAnonymousService = new AxisService ( serviceKey ) ; axisAnonymousService . addOperation ( dynamicOperation ) ; axisAnonymousService . addOperation ( asyncOperation ) ; axisCfg . addService ( axisAnonymousService ) ; axisCfg . getPhasesInfo ( ) . setOperationPhases ( dynamicOperation ) ; return axisAnonymousService ; } catch ( AxisFault e ) { handleException ( "Error occured while creating an anonymous service for QoS : " + serviceKey , e ) ; } return null ; } private static synchronized SynapseCallbackReceiver getCallbackReceiver ( SynapseConfiguration synCfg ) { if ( synapseCallbackReceiver == null ) { synapseCallbackReceiver = new SynapseCallbackReceiver ( synCfg ) ; } return synapseCallbackReceiver ; } } 	1	['6', '1', '0', '17', '32', '11', '1', '16', '2', '1.044444444', '244', '0.777777778', '1', '0', '0.333333333', '0', '0', '38.16666667', '13', '2.8333', '1']
package org . apache . synapse . config . xml . endpoints ; import org . apache . synapse . endpoints . Endpoint ; import org . apache . synapse . endpoints . AddressEndpoint ; import org . apache . synapse . endpoints . utils . EndpointDefinition ; import org . apache . synapse . SynapseConstants ; import org . apache . synapse . SynapseException ; import org . apache . axiom . om . OMElement ; import org . apache . axiom . om . OMAttribute ; import org . apache . axiom . om . OMNode ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import javax . xml . namespace . QName ; public class AddressEndpointFactory implements EndpointFactory { private static Log log = LogFactory . getLog ( AddressEndpointFactory . class ) ; private static AddressEndpointFactory instance = new AddressEndpointFactory ( ) ; private int statisticsState = SynapseConstants . STATISTICS_UNSET ; protected int traceState = SynapseConstants . TRACING_UNSET ; private AddressEndpointFactory ( ) { } public static AddressEndpointFactory getInstance ( ) { return instance ; } public Endpoint createEndpoint ( OMElement epConfig , boolean anonymousEndpoint ) { AddressEndpoint addressEndpoint = new AddressEndpoint ( ) ; if ( ! anonymousEndpoint ) { OMAttribute name = epConfig . getAttribute ( new QName ( org . apache . synapse . config . xml . XMLConfigConstants . NULL_NAMESPACE , "name" ) ) ; if ( name != null ) { addressEndpoint . setName ( name . getAttributeValue ( ) ) ; } } OMElement addressElement = epConfig . getFirstChildWithName ( new QName ( SynapseConstants . SYNAPSE_NAMESPACE , "address" ) ) ; if ( addressElement != null ) { EndpointDefinition endpoint = createEndpointDefinition ( addressElement ) ; addressEndpoint . setEndpoint ( endpoint ) ; OMElement suspendElement = addressElement . getFirstChildWithName ( new QName ( SynapseConstants . SYNAPSE_NAMESPACE , org . apache . synapse . config . xml . XMLConfigConstants . SUSPEND_DURATION_ON_FAILURE ) ) ; if ( suspendElement != null ) { String suspend = suspendElement . getText ( ) ; try { if ( suspend != null ) { long suspendDuration = Long . parseLong ( suspend . trim ( ) ) ; addressEndpoint . setSuspendOnFailDuration ( suspendDuration * 1000 ) ; } } catch ( NumberFormatException e ) { handleException ( "The suspend duration should be specified as a valid number :: " + e . getMessage ( ) , e ) ; } } } return addressEndpoint ; } public Object getObjectFromOMNode ( OMNode om ) { if ( om instanceof OMElement ) { return createEndpoint ( ( OMElement ) om , false ) ; } else { handleException ( "Invalid XML configuration for an Endpoint. OMElement expected" ) ; } return null ; } public EndpointDefinition createEndpointDefinition ( OMElement elem ) { OMAttribute address = elem . getAttribute ( new QName ( org . apache . synapse . config . xml . XMLConfigConstants . NULL_NAMESPACE , "uri" ) ) ; OMAttribute format = elem . getAttribute ( new QName ( org . apache . synapse . config . xml . XMLConfigConstants . NULL_NAMESPACE , "format" ) ) ; OMAttribute optimize = elem . getAttribute ( new QName ( org . apache . synapse . config . xml . XMLConfigConstants . NULL_NAMESPACE , "optimize" ) ) ; EndpointDefinition endpoint = new EndpointDefinition ( ) ; OMAttribute statistics = elem . getAttribute ( new QName ( org . apache . synapse . config . xml . XMLConfigConstants . NULL_NAMESPACE , org . apache . synapse . config . xml . XMLConfigConstants . STATISTICS_ATTRIB_NAME ) ) ; if ( statistics != null ) { String statisticsValue = statistics . getAttributeValue ( ) ; if ( statisticsValue != null ) { if ( org . apache . synapse . config . xml . XMLConfigConstants . STATISTICS_ENABLE . equals ( statisticsValue ) ) { endpoint . setStatisticsState ( org . apache . synapse . SynapseConstants . STATISTICS_ON ) ; } else if ( org . apache . synapse . config . xml . XMLConfigConstants . STATISTICS_DISABLE . equals ( statisticsValue ) ) { endpoint . setStatisticsState ( org . apache . synapse . SynapseConstants . STATISTICS_OFF ) ; } } } if ( address != null ) { endpoint . setAddress ( address . getAttributeValue ( ) ) ; } if ( format != null ) { String forceValue = format . getAttributeValue ( ) . trim ( ) . toLowerCase ( ) ; if ( forceValue . equals ( SynapseConstants . FORMAT_POX ) ) { endpoint . setForcePOX ( true ) ; endpoint . setFormat ( SynapseConstants . FORMAT_POX ) ; } else if ( forceValue . equals ( SynapseConstants . FORMAT_SOAP11 ) ) { endpoint . setForceSOAP11 ( true ) ; endpoint . setFormat ( SynapseConstants . FORMAT_SOAP11 ) ; } else if ( forceValue . equals ( SynapseConstants . FORMAT_SOAP12 ) ) { endpoint . setForceSOAP12 ( true ) ; endpoint . setFormat ( SynapseConstants . FORMAT_SOAP12 ) ; } else { handleException ( "unknown value -\"" + forceValue + "\". Attribute 'format' accepts only 'pox','soap11','soap12'" ) ; } } if ( optimize != null && optimize . getAttributeValue ( ) . length ( ) > 0 ) { String method = optimize . getAttributeValue ( ) . trim ( ) ; if ( "mtom" . equalsIgnoreCase ( method ) ) { endpoint . setUseMTOM ( true ) ; } else if ( "swa" . equalsIgnoreCase ( method ) ) { endpoint . setUseSwa ( true ) ; } } OMElement wsAddr = elem . getFirstChildWithName ( new QName ( org . apache . synapse . config . xml . XMLConfigConstants . SYNAPSE_NAMESPACE , "enableAddressing" ) ) ; if ( wsAddr != null ) { endpoint . setAddressingOn ( true ) ; String useSepList = wsAddr . getAttributeValue ( new QName ( "separateListener" ) ) ; if ( useSepList != null ) { if ( useSepList . trim ( ) . toLowerCase ( ) . startsWith ( "tr" ) || useSepList . trim ( ) . startsWith ( "1" ) ) { endpoint . setUseSeparateListener ( true ) ; } } } OMElement wsSec = elem . getFirstChildWithName ( new QName ( org . apache . synapse . config . xml . XMLConfigConstants . SYNAPSE_NAMESPACE , "enableSec" ) ) ; if ( wsSec != null ) { endpoint . setSecurityOn ( true ) ; OMAttribute policy = wsSec . getAttribute ( new QName ( org . apache . synapse . config . xml . XMLConfigConstants . NULL_NAMESPACE , "policy" ) ) ; if ( policy != null ) { endpoint . setWsSecPolicyKey ( policy . getAttributeValue ( ) ) ; } } OMElement wsRm = elem . getFirstChildWithName ( new QName ( org . apache . synapse . config . xml . XMLConfigConstants . SYNAPSE_NAMESPACE , "enableRM" ) ) ; if ( wsRm != null ) { endpoint . setReliableMessagingOn ( true ) ; OMAttribute policy = wsRm . getAttribute ( new QName ( org . apache . synapse . config . xml . XMLConfigConstants . NULL_NAMESPACE , "policy" ) ) ; if ( policy != null ) { endpoint . setWsRMPolicyKey ( policy . getAttributeValue ( ) ) ; } } OMElement timeout = elem . getFirstChildWithName ( new QName ( org . apache . synapse . config . xml . XMLConfigConstants . SYNAPSE_NAMESPACE , "timeout" ) ) ; if ( timeout != null ) { OMElement duration = timeout . getFirstChildWithName ( new QName ( org . apache . synapse . config . xml . XMLConfigConstants . SYNAPSE_NAMESPACE , "duration" ) ) ; if ( duration != null ) { String d = duration . getText ( ) ; if ( d != null ) { try { long timeoutSeconds = new Long ( d . trim ( ) ) . longValue ( ) ; endpoint . setTimeoutDuration ( timeoutSeconds * 1000 ) ; } catch ( NumberFormatException e ) { handleException ( "The timeout seconds should be specified as a valid number :: " + e . getMessage ( ) , e ) ; } } } OMElement action = timeout . getFirstChildWithName ( new QName ( org . apache . synapse . config . xml . XMLConfigConstants . SYNAPSE_NAMESPACE , "action" ) ) ; if ( action != null ) { String a = action . getText ( ) ; if ( a != null ) { if ( ( a . trim ( ) ) . equalsIgnoreCase ( "discard" ) ) { endpoint . setTimeoutAction ( SynapseConstants . DISCARD ) ; if ( endpoint . getTimeoutDuration ( ) == 0 ) { endpoint . setTimeoutDuration ( 30000 ) ; } } else if ( ( a . trim ( ) ) . equalsIgnoreCase ( "fault" ) ) { endpoint . setTimeoutAction ( SynapseConstants . DISCARD_AND_FAULT ) ; if ( endpoint . getTimeoutDuration ( ) == 0 ) { endpoint . setTimeoutDuration ( 30000 ) ; } } } } } return endpoint ; } private static void handleException ( String msg ) { log . error ( msg ) ; throw new SynapseException ( msg ) ; } private static void handleException ( String msg , Exception e ) { log . error ( msg , e ) ; throw new SynapseException ( msg , e ) ; } } 	1	['8', '1', '0', '11', '56', '20', '1', '10', '4', '0.714285714', '468', '1', '1', '0', '0.261904762', '0', '0', '57', '31', '5.125', '3']
package org . apache . synapse . core . axis2 ; import org . apache . axis2 . context . ConfigurationContext ; import org . apache . axis2 . transport . http . AxisServlet ; import org . apache . synapse . ServerManager ; import javax . servlet . ServletConfig ; import javax . servlet . ServletContext ; import javax . servlet . ServletException ; import javax . servlet . http . HttpServletRequest ; public class SynapseAxisServlet extends AxisServlet { public void init ( ServletConfig config ) throws ServletException { ServletContext servletContext = config . getServletContext ( ) ; this . configContext = ServerManager . getInstance ( ) . getConfigurationContext ( ) ; this . axisConfiguration = this . configContext . getAxisConfiguration ( ) ; servletContext . setAttribute ( this . getClass ( ) . getName ( ) , this ) ; this . servletConfig = config ; initParams ( ) ; } public void initContextRoot ( HttpServletRequest req ) { this . configContext . setContextRoot ( "/" ) ; } } 	1	['3', '4', '0', '4', '13', '1', '0', '4', '3', '2', '35', '0', '0', '0.964285714', '0.555555556', '1', '6', '10.66666667', '1', '0.6667', '2']
package org . apache . synapse . core . axis2 ; import org . apache . axiom . om . OMAbstractFactory ; import org . apache . axis2 . context . ConfigurationContext ; import org . apache . axis2 . context . OperationContext ; import org . apache . axis2 . context . ServiceContext ; import org . apache . axis2 . description . InOutAxisOperation ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import org . apache . synapse . Mediator ; import org . apache . synapse . MessageContext ; import org . apache . synapse . SynapseConstants ; import org . apache . synapse . SynapseException ; import org . apache . synapse . config . SynapseConfiguration ; import org . apache . synapse . core . SynapseEnvironment ; import org . apache . synapse . endpoints . utils . EndpointDefinition ; import org . apache . synapse . mediators . MediatorWorker ; import org . apache . synapse . mediators . base . SequenceMediator ; import org . apache . synapse . statistics . StatisticsCollector ; import org . apache . synapse . statistics . StatisticsUtils ; import org . apache . synapse . util . UUIDGenerator ; import org . apache . synapse . util . concurrent . SynapseThreadPool ; import java . util . concurrent . ExecutorService ; public class Axis2SynapseEnvironment implements SynapseEnvironment { private static final Log log = LogFactory . getLog ( Axis2SynapseEnvironment . class ) ; private SynapseConfiguration synapseConfig ; private ConfigurationContext configContext ; private ExecutorService executorService ; private boolean initialized = false ; private StatisticsCollector statisticsCollector ; public Axis2SynapseEnvironment ( SynapseConfiguration synCfg ) { int coreThreads = SynapseThreadPool . SYNAPSE_CORE_THREADS ; int maxThreads = SynapseThreadPool . SYNAPSE_MAX_THREADS ; long keepAlive = SynapseThreadPool . SYNAPSE_KEEP_ALIVE ; int qlength = SynapseThreadPool . SYNAPSE_THREAD_QLEN ; try { qlength = Integer . parseInt ( synCfg . getProperty ( SynapseThreadPool . SYN_THREAD_QLEN ) ) ; } catch ( Exception ignore ) { } try { coreThreads = Integer . parseInt ( synCfg . getProperty ( SynapseThreadPool . SYN_THREAD_CORE ) ) ; } catch ( Exception ignore ) { } try { maxThreads = Integer . parseInt ( synCfg . getProperty ( SynapseThreadPool . SYN_THREAD_MAX ) ) ; } catch ( Exception ignore ) { } try { keepAlive = Long . parseLong ( synCfg . getProperty ( SynapseThreadPool . SYN_THREAD_ALIVE ) ) ; } catch ( Exception ignore ) { } this . executorService = new SynapseThreadPool ( coreThreads , maxThreads , keepAlive , qlength , synCfg . getProperty ( SynapseThreadPool . SYN_THREAD_GROUP , SynapseThreadPool . SYNAPSE_THREAD_GROUP ) , synCfg . getProperty ( SynapseThreadPool . SYN_THREAD_IDPREFIX , SynapseThreadPool . SYNAPSE_THREAD_ID_PREFIX ) ) ; } public Axis2SynapseEnvironment ( ConfigurationContext cfgCtx , SynapseConfiguration synapseConfig ) { this ( synapseConfig ) ; this . configContext = cfgCtx ; this . synapseConfig = synapseConfig ; } public boolean injectMessage ( final MessageContext synCtx ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Injecting MessageContext" ) ; } synCtx . setEnvironment ( this ) ; if ( synCtx . isResponse ( ) ) { StatisticsUtils . processEndPointStatistics ( synCtx ) ; StatisticsUtils . processProxyServiceStatistics ( synCtx ) ; StatisticsUtils . processSequenceStatistics ( synCtx ) ; } if ( synCtx . getProperty ( SynapseConstants . PROXY_SERVICE ) != null ) { if ( synCtx . getConfiguration ( ) . getProxyService ( ( String ) synCtx . getProperty ( SynapseConstants . PROXY_SERVICE ) ) . getTargetOutSequence ( ) != null ) { String sequenceName = synCtx . getConfiguration ( ) . getProxyService ( ( String ) synCtx . getProperty ( SynapseConstants . PROXY_SERVICE ) ) . getTargetOutSequence ( ) ; Mediator outSequence = synCtx . getSequence ( sequenceName ) ; if ( outSequence != null ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Using the sequence named " + sequenceName + " for the outgoing message mediation of the proxy service " + synCtx . getProperty ( SynapseConstants . PROXY_SERVICE ) ) ; } outSequence . mediate ( synCtx ) ; } else { log . error ( "Unable to find the out-sequence " + "specified by the name " + sequenceName ) ; throw new SynapseException ( "Unable to find the " + "out-sequence specified by the name " + sequenceName ) ; } } else if ( synCtx . getConfiguration ( ) . getProxyService ( ( String ) synCtx . getProperty ( SynapseConstants . PROXY_SERVICE ) ) . getTargetInLineOutSequence ( ) != null ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Using the anonymous out-sequence specified in the proxy service " + synCtx . getProperty ( SynapseConstants . PROXY_SERVICE ) + " for outgoing message mediation" ) ; } synCtx . getConfiguration ( ) . getProxyService ( ( String ) synCtx . getProperty ( SynapseConstants . PROXY_SERVICE ) ) . getTargetInLineOutSequence ( ) . mediate ( synCtx ) ; } else { if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy service " + synCtx . getProperty ( SynapseConstants . PROXY_SERVICE ) + " does not specifies an out-sequence - sending the response back" ) ; } Axis2Sender . sendBack ( synCtx ) ; } } else { if ( log . isDebugEnabled ( ) ) { log . debug ( "Using Main Sequence for injected message" ) ; } return synCtx . getMainSequence ( ) . mediate ( synCtx ) ; } return true ; } public void injectAsync ( final MessageContext synCtx , SequenceMediator seq ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Injecting MessageContext for asynchronous mediation using the : " + ( seq . getName ( ) == null ? "Anonymous" : seq . getName ( ) ) + " Sequence" ) ; } synCtx . setEnvironment ( this ) ; if ( synCtx . isResponse ( ) ) { StatisticsUtils . processEndPointStatistics ( synCtx ) ; StatisticsUtils . processProxyServiceStatistics ( synCtx ) ; StatisticsUtils . processSequenceStatistics ( synCtx ) ; } executorService . execute ( new MediatorWorker ( seq , synCtx ) ) ; } public void send ( EndpointDefinition endpoint , MessageContext synCtx ) { if ( synCtx . isResponse ( ) ) { if ( endpoint != null ) { StatisticsUtils . processEndPointStatistics ( synCtx ) ; StatisticsUtils . processProxyServiceStatistics ( synCtx ) ; StatisticsUtils . processAllSequenceStatistics ( synCtx ) ; Axis2Sender . sendOn ( endpoint , synCtx ) ; } else { Axis2Sender . sendBack ( synCtx ) ; } } else { Axis2Sender . sendOn ( endpoint , synCtx ) ; } } public MessageContext createMessageContext ( ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Creating Message Context" ) ; } org . apache . axis2 . context . MessageContext axis2MC = new org . apache . axis2 . context . MessageContext ( ) ; axis2MC . setConfigurationContext ( this . configContext ) ; ServiceContext svcCtx = new ServiceContext ( ) ; OperationContext opCtx = new OperationContext ( new InOutAxisOperation ( ) , svcCtx ) ; axis2MC . setServiceContext ( svcCtx ) ; axis2MC . setOperationContext ( opCtx ) ; MessageContext mc = new Axis2MessageContext ( axis2MC , synapseConfig , this ) ; mc . setMessageID ( UUIDGenerator . getUUID ( ) ) ; try { mc . setEnvelope ( OMAbstractFactory . getSOAP12Factory ( ) . createSOAPEnvelope ( ) ) ; mc . getEnvelope ( ) . addChild ( OMAbstractFactory . getSOAP12Factory ( ) . createSOAPBody ( ) ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; } return mc ; } public StatisticsCollector getStatisticsCollector ( ) { return statisticsCollector ; } public void setStatisticsCollector ( StatisticsCollector collector ) { this . statisticsCollector = collector ; } public ExecutorService getExecutorService ( ) { return executorService ; } public boolean isInitialized ( ) { return initialized ; } public void setInitialized ( boolean state ) { this . initialized = state ; } } 	1	['12', '1', '0', '29', '64', '38', '1', '28', '11', '0.818181818', '394', '1', '2', '0', '0.238636364', '0', '0', '31.33333333', '11', '2.0833', '3']
package org . apache . synapse . config . xml ; import org . apache . axiom . om . * ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import org . apache . synapse . SynapseException ; import org . apache . synapse . mediators . base . SequenceMediator ; import org . apache . synapse . endpoints . Endpoint ; import org . apache . synapse . config . xml . endpoints . EndpointAbstractSerializer ; import org . apache . synapse . config . xml . endpoints . EndpointSerializer ; import org . apache . synapse . core . axis2 . ProxyService ; import java . util . Iterator ; import java . util . ArrayList ; import java . net . URI ; public class ProxyServiceSerializer { private static final Log log = LogFactory . getLog ( PropertyMediatorSerializer . class ) ; protected static final OMFactory fac = OMAbstractFactory . getOMFactory ( ) ; protected static final OMNamespace synNS = fac . createOMNamespace ( XMLConfigConstants . SYNAPSE_NAMESPACE , "syn" ) ; protected static final OMNamespace nullNS = fac . createOMNamespace ( XMLConfigConstants . NULL_NAMESPACE , "" ) ; public static OMElement serializeProxy ( OMElement parent , ProxyService service ) { OMElement proxy = fac . createOMElement ( "proxy" , synNS ) ; if ( service . getName ( ) != null ) { proxy . addAttribute ( fac . createOMAttribute ( "name" , nullNS , service . getName ( ) ) ) ; } else { handleException ( "Invalid proxy service. Service name is required" ) ; } String descriptionStr = service . getDescription ( ) ; if ( descriptionStr != null ) { OMElement description = fac . createOMElement ( "description" , synNS ) ; description . addChild ( fac . createOMText ( descriptionStr ) ) ; proxy . addChild ( description ) ; } ArrayList transports = service . getTransports ( ) ; if ( transports != null && ! transports . isEmpty ( ) ) { String transportStr = "" + transports . get ( 0 ) ; for ( int i = 1 ; i < transports . size ( ) ; i ++ ) { transportStr = transportStr + " " + transports . get ( i ) ; } proxy . addAttribute ( fac . createOMAttribute ( "transports" , nullNS , transportStr ) ) ; } if ( service . isStartOnLoad ( ) ) { proxy . addAttribute ( fac . createOMAttribute ( "startOnLoad" , nullNS , "true" ) ) ; } else { proxy . addAttribute ( fac . createOMAttribute ( "startOnLoad" , nullNS , "false" ) ) ; } String endpoint = service . getTargetEndpoint ( ) ; OMElement target = fac . createOMElement ( "target" , synNS ) ; Endpoint inLineEndpoint = service . getTargetInLineEndpoint ( ) ; if ( endpoint != null ) { target . addAttribute ( fac . createOMAttribute ( "endpoint" , nullNS , endpoint ) ) ; proxy . addChild ( target ) ; } else if ( inLineEndpoint != null ) { EndpointSerializer serializer = EndpointAbstractSerializer . getEndpointSerializer ( inLineEndpoint ) ; OMElement epElement = serializer . serializeEndpoint ( inLineEndpoint ) ; target . addChild ( epElement ) ; proxy . addChild ( target ) ; } String inSeq = service . getTargetInSequence ( ) ; String outSeq = service . getTargetOutSequence ( ) ; String faultSeq = service . getTargetFaultSequence ( ) ; SequenceMediatorSerializer serializer = new SequenceMediatorSerializer ( ) ; if ( inSeq != null ) { target . addAttribute ( fac . createOMAttribute ( "inSequence" , nullNS , inSeq ) ) ; proxy . addChild ( target ) ; } else { SequenceMediator inLineInSeq = service . getTargetInLineInSequence ( ) ; if ( inLineInSeq != null ) { OMElement inSeqElement = serializer . serializeAnonymousSequence ( null , inLineInSeq ) ; inSeqElement . setLocalName ( "inSequence" ) ; target . addChild ( inSeqElement ) ; proxy . addChild ( target ) ; } } if ( outSeq != null ) { target . addAttribute ( fac . createOMAttribute ( "outSequence" , nullNS , outSeq ) ) ; proxy . addChild ( target ) ; } else { SequenceMediator inLineOutSeq = service . getTargetInLineOutSequence ( ) ; if ( inLineOutSeq != null ) { OMElement outSeqElement = serializer . serializeAnonymousSequence ( null , inLineOutSeq ) ; outSeqElement . setLocalName ( "outSequence" ) ; target . addChild ( outSeqElement ) ; proxy . addChild ( target ) ; } } if ( faultSeq != null ) { target . addAttribute ( fac . createOMAttribute ( "faultSequence" , nullNS , faultSeq ) ) ; proxy . addChild ( target ) ; } else { SequenceMediator inLineFaultSeq = service . getTargetInLineFaultSequence ( ) ; if ( inLineFaultSeq != null ) { OMElement faultSeqElement = serializer . serializeAnonymousSequence ( null , inLineFaultSeq ) ; faultSeqElement . setLocalName ( "faultSequence" ) ; target . addChild ( faultSeqElement ) ; proxy . addChild ( target ) ; } } String wsdlKey = service . getWSDLKey ( ) ; URI wsdlUri = service . getWsdlURI ( ) ; Object inLineWSDL = service . getInLineWSDL ( ) ; OMElement wsdl = fac . createOMElement ( "publishWSDL" , synNS ) ; if ( wsdlKey != null ) { wsdl . addAttribute ( fac . createOMAttribute ( "key" , nullNS , wsdlKey ) ) ; proxy . addChild ( wsdl ) ; } else if ( inLineWSDL != null ) { wsdl . addChild ( ( OMNode ) inLineWSDL ) ; proxy . addChild ( wsdl ) ; } else if ( wsdlUri != null ) { wsdl . addAttribute ( fac . createOMAttribute ( "uri" , nullNS , wsdlUri . toString ( ) ) ) ; proxy . addChild ( wsdl ) ; } Iterator iter = service . getServiceLevelPolicies ( ) . iterator ( ) ; while ( iter . hasNext ( ) ) { String policyKey = ( String ) iter . next ( ) ; OMElement policy = fac . createOMElement ( "policy" , synNS ) ; policy . addAttribute ( fac . createOMAttribute ( "key" , nullNS , policyKey ) ) ; proxy . addChild ( policy ) ; } iter = service . getParameterMap ( ) . keySet ( ) . iterator ( ) ; while ( iter . hasNext ( ) ) { String propertyName = ( String ) iter . next ( ) ; OMElement property = fac . createOMElement ( "parameter" , synNS ) ; property . addAttribute ( fac . createOMAttribute ( "name" , nullNS , propertyName ) ) ; Object value = service . getParameterMap ( ) . get ( propertyName ) ; if ( value != null ) { if ( value instanceof String ) { property . setText ( ( ( String ) value ) . trim ( ) ) ; proxy . addChild ( property ) ; } else if ( value instanceof OMNode ) { property . addChild ( ( OMNode ) value ) ; proxy . addChild ( property ) ; } } } if ( service . isWsRMEnabled ( ) ) { proxy . addChild ( fac . createOMElement ( "enableRM" , synNS ) ) ; } if ( service . isWsSecEnabled ( ) ) { proxy . addChild ( fac . createOMElement ( "enableSec" , synNS ) ) ; } int isEnableStatistics = service . getStatisticsState ( ) ; String statisticsValue = null ; if ( isEnableStatistics == org . apache . synapse . SynapseConstants . STATISTICS_ON ) { statisticsValue = XMLConfigConstants . STATISTICS_ENABLE ; } else if ( isEnableStatistics == org . apache . synapse . SynapseConstants . STATISTICS_OFF ) { statisticsValue = XMLConfigConstants . STATISTICS_DISABLE ; } if ( statisticsValue != null ) { proxy . addAttribute ( fac . createOMAttribute ( XMLConfigConstants . STATISTICS_ATTRIB_NAME , nullNS , statisticsValue ) ) ; } int traceState = service . getTraceState ( ) ; String traceValue = null ; if ( traceState == org . apache . synapse . SynapseConstants . TRACING_ON ) { traceValue = XMLConfigConstants . TRACE_ENABLE ; } else if ( traceState == org . apache . synapse . SynapseConstants . TRACING_OFF ) { traceValue = XMLConfigConstants . TRACE_DISABLE ; } if ( traceValue != null ) { proxy . addAttribute ( fac . createOMAttribute ( XMLConfigConstants . TRACE_ATTRIB_NAME , nullNS , traceValue ) ) ; } if ( parent != null ) { parent . addChild ( proxy ) ; } return proxy ; } private static void handleException ( String msg ) { log . error ( msg ) ; throw new SynapseException ( msg ) ; } } 	1	['4', '1', '0', '17', '57', '2', '1', '16', '2', '0.583333333', '503', '1', '0', '0', '0.333333333', '0', '0', '123.75', '30', '7.75', '2']
package org . apache . synapse . config . xml ; import org . apache . axiom . om . OMAttribute ; import org . apache . axiom . om . OMElement ; import org . apache . axiom . om . xpath . AXIOMXPath ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import org . apache . synapse . SynapseException ; import org . apache . synapse . Mediator ; import org . apache . synapse . mediators . transform . FaultMediator ; import org . jaxen . JaxenException ; import javax . xml . namespace . QName ; import java . net . URI ; import java . net . URISyntaxException ; public class FaultMediatorFactory extends AbstractMediatorFactory { private static final QName FAULT_Q = new QName ( XMLConfigConstants . SYNAPSE_NAMESPACE , "makefault" ) ; private static final QName ATT_VERSION_Q = new QName ( XMLConfigConstants . NULL_NAMESPACE , "version" ) ; private static final QName CODE_Q = new QName ( XMLConfigConstants . SYNAPSE_NAMESPACE , "code" ) ; private static final QName REASON_Q = new QName ( XMLConfigConstants . SYNAPSE_NAMESPACE , "reason" ) ; private static final QName NODE_Q = new QName ( XMLConfigConstants . SYNAPSE_NAMESPACE , "node" ) ; private static final QName ROLE_Q = new QName ( XMLConfigConstants . SYNAPSE_NAMESPACE , "role" ) ; private static final QName DETAIL_Q = new QName ( XMLConfigConstants . SYNAPSE_NAMESPACE , "detail" ) ; private static final String SOAP11 = "soap11" ; private static final String SOAP12 = "soap12" ; public Mediator createMediator ( OMElement elem ) { FaultMediator faultMediator = new FaultMediator ( ) ; OMAttribute version = elem . getAttribute ( ATT_VERSION_Q ) ; if ( version != null ) { if ( SOAP11 . equals ( version . getAttributeValue ( ) ) ) { faultMediator . setSoapVersion ( FaultMediator . SOAP11 ) ; } else if ( SOAP12 . equals ( version . getAttributeValue ( ) ) ) { faultMediator . setSoapVersion ( FaultMediator . SOAP12 ) ; } else { String msg = "Invalid SOAP version" ; log . error ( msg ) ; throw new SynapseException ( msg ) ; } } OMElement code = elem . getFirstChildWithName ( CODE_Q ) ; if ( code != null ) { OMAttribute value = code . getAttribute ( ATT_VALUE ) ; OMAttribute expression = code . getAttribute ( ATT_EXPRN ) ; if ( value != null ) { String strValue = value . getAttributeValue ( ) ; String prefix , name ; if ( strValue . indexOf ( ":" ) != - 1 ) { prefix = strValue . substring ( 0 , strValue . indexOf ( ":" ) ) ; name = strValue . substring ( strValue . indexOf ( ":" ) + 1 ) ; } else { String msg = "A QName is expected for fault code as prefix:name" ; log . error ( msg ) ; throw new SynapseException ( msg ) ; } faultMediator . setFaultCodeValue ( new QName ( OMElementUtils . getNameSpaceWithPrefix ( prefix , code ) , name , prefix ) ) ; } else if ( expression != null ) { try { AXIOMXPath xp = new AXIOMXPath ( expression . getAttributeValue ( ) ) ; OMElementUtils . addNameSpaces ( xp , code , log ) ; faultMediator . setFaultCodeExpr ( xp ) ; } catch ( JaxenException je ) { String msg = "Invalid fault code expression : " + je . getMessage ( ) ; log . error ( msg ) ; throw new SynapseException ( msg , je ) ; } } else { String msg = "A 'value' or 'expression' attribute must specify the fault code" ; log . error ( msg ) ; throw new SynapseException ( msg ) ; } } else { String msg = "The fault code is a required attribute for the makefault mediator" ; log . error ( msg ) ; throw new SynapseException ( msg ) ; } OMElement reason = elem . getFirstChildWithName ( REASON_Q ) ; if ( reason != null ) { OMAttribute value = reason . getAttribute ( ATT_VALUE ) ; OMAttribute expression = reason . getAttribute ( ATT_EXPRN ) ; if ( value != null ) { faultMediator . setFaultReasonValue ( value . getAttributeValue ( ) ) ; } else if ( expression != null ) { try { AXIOMXPath xp = new AXIOMXPath ( expression . getAttributeValue ( ) ) ; OMElementUtils . addNameSpaces ( xp , reason , log ) ; faultMediator . setFaultReasonExpr ( xp ) ; } catch ( JaxenException je ) { String msg = "Invalid fault reason expression : " + je . getMessage ( ) ; log . error ( msg ) ; throw new SynapseException ( msg , je ) ; } } else { String msg = "A 'value' or 'expression' attribute must specify the fault code" ; log . error ( msg ) ; throw new SynapseException ( msg ) ; } } else { String msg = "The fault reason is a required attribute for the makefault mediator" ; log . error ( msg ) ; throw new SynapseException ( msg ) ; } processTraceState ( faultMediator , elem ) ; OMElement node = elem . getFirstChildWithName ( NODE_Q ) ; if ( node != null && node . getText ( ) != null ) { try { faultMediator . setFaultNode ( new URI ( node . getText ( ) ) ) ; } catch ( URISyntaxException e ) { String msg = "Invalid URI specified for fault node : " + node . getText ( ) ; log . error ( msg ) ; throw new SynapseException ( msg ) ; } } OMElement role = elem . getFirstChildWithName ( ROLE_Q ) ; if ( role != null && role . getText ( ) != null ) { try { faultMediator . setFaultRole ( new URI ( role . getText ( ) ) ) ; } catch ( URISyntaxException e ) { String msg = "Invalid URI specified for fault role : " + role . getText ( ) ; log . error ( msg ) ; throw new SynapseException ( msg ) ; } } OMElement detail = elem . getFirstChildWithName ( DETAIL_Q ) ; if ( detail != null && detail . getText ( ) != null ) { faultMediator . setFaultDetail ( detail . getText ( ) ) ; } return faultMediator ; } public QName getTagQName ( ) { return FAULT_Q ; } } 	1	['4', '2', '0', '10', '36', '2', '0', '10', '3', '0.814814815', '386', '1', '0', '0.6', '0.666666667', '0', '0', '93.25', '17', '4.5', '1']
package org . apache . synapse . config ; import org . apache . axiom . om . OMElement ; import org . apache . axiom . om . OMNode ; import org . apache . axiom . om . impl . builder . StAXOMBuilder ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import org . apache . synapse . SynapseConstants ; import org . apache . synapse . SynapseException ; import javax . xml . stream . XMLInputFactory ; import javax . xml . stream . XMLStreamException ; import javax . xml . stream . XMLStreamReader ; import javax . xml . transform . stream . StreamSource ; import java . io . ByteArrayInputStream ; import java . io . ByteArrayOutputStream ; import java . io . IOException ; import java . io . InputStream ; import java . net . MalformedURLException ; import java . net . URI ; import java . net . URL ; import java . net . URLConnection ; public class SynapseConfigUtils { private static final Log log = LogFactory . getLog ( SynapseConfigUtils . class ) ; public static StreamSource getStreamSource ( Object o ) { if ( o == null ) { handleException ( "Cannot convert null to a StreamSource" ) ; } else if ( o instanceof OMNode ) { OMNode omNode = ( OMNode ) o ; ByteArrayOutputStream baos = new ByteArrayOutputStream ( ) ; try { omNode . serialize ( baos ) ; return new StreamSource ( new ByteArrayInputStream ( baos . toByteArray ( ) ) ) ; } catch ( XMLStreamException e ) { handleException ( "Error converting to a StreamSource" , e ) ; } } else { handleException ( "Cannot convert object to a StreamSource" ) ; } return null ; } public static InputStream getInputStream ( Object o ) { if ( o == null ) { handleException ( "Cannot convert null to a StreamSource" ) ; } else if ( o instanceof OMElement ) { OMElement omElement = ( OMElement ) o ; ByteArrayOutputStream baos = new ByteArrayOutputStream ( ) ; try { omElement . serialize ( baos ) ; return new ByteArrayInputStream ( baos . toByteArray ( ) ) ; } catch ( XMLStreamException e ) { handleException ( "Error converting to a StreamSource" , e ) ; } } else if ( o instanceof URI ) { try { return ( ( URI ) ( o ) ) . toURL ( ) . openStream ( ) ; } catch ( IOException e ) { handleException ( "Error opening stream form URI" , e ) ; } } else { handleException ( "Cannot convert object to a StreamSource" ) ; } return null ; } public static Object getObject ( URL url ) { try { if ( url != null && "file" . equals ( url . getProtocol ( ) ) ) { try { url . openStream ( ) ; } catch ( IOException ignored ) { String path = url . getPath ( ) ; if ( log . isDebugEnabled ( ) ) { log . debug ( "Can not open a connection to the URL with a path :" + path ) ; } String synapseHome = System . getProperty ( SynapseConstants . SYNAPSE_HOME ) ; if ( synapseHome != null ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Trying  to resolve an absolute path of the " + " URL using the synapse.home : " + synapseHome ) ; } if ( synapseHome . endsWith ( "/" ) ) { synapseHome = synapseHome . substring ( 0 , synapseHome . lastIndexOf ( "/" ) ) ; } url = new URL ( url . getProtocol ( ) + ":" + synapseHome + "/" + path ) ; try { url . openStream ( ) ; } catch ( IOException e ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Faild to resolve an absolute path of the " + " URL using the synapse.home : " + synapseHome ) ; } log . warn ( "IO Error reading from URL " + url . getPath ( ) + e ) ; } } } } if ( url == null ) { return null ; } URLConnection urlc = url . openConnection ( ) ; XMLToObjectMapper xmlToObject = getXmlToObjectMapper ( urlc . getContentType ( ) ) ; try { XMLStreamReader parser = XMLInputFactory . newInstance ( ) . createXMLStreamReader ( urlc . getInputStream ( ) ) ; StAXOMBuilder builder = new StAXOMBuilder ( parser ) ; OMElement omElem = builder . getDocumentElement ( ) ; omElem . build ( ) ; if ( xmlToObject != null ) { return xmlToObject . getObjectFromOMNode ( omElem ) ; } else { return omElem ; } } catch ( XMLStreamException e ) { log . warn ( "Content at URL : " + url + " is non XML.." ) ; return urlc . getContent ( ) ; } } catch ( IOException e ) { handleException ( "Error connecting to URL : " + url , e ) ; } return null ; } public static OMElement getOMElementFromURL ( String urlStr ) throws IOException { URL url = getURLFromPath ( urlStr ) ; if ( url == null ) { return null ; } URLConnection conn = url . openConnection ( ) ; conn . setReadTimeout ( 10000 ) ; conn . setConnectTimeout ( 2000 ) ; conn . setRequestProperty ( "Connection" , "close" ) ; InputStream urlInStream = conn . getInputStream ( ) ; if ( urlInStream != null ) { try { StAXOMBuilder builder = new StAXOMBuilder ( urlInStream ) ; OMElement doc = builder . getDocumentElement ( ) ; doc . build ( ) ; return doc ; } catch ( Exception e ) { handleException ( "Error parsing resource at URL : " + url + " as XML" , e ) ; } finally { try { urlInStream . close ( ) ; } catch ( IOException ignore ) { } } } return null ; } private static void handleException ( String msg , Exception e ) { log . warn ( msg , e ) ; throw new SynapseException ( msg , e ) ; } private static void handleException ( String msg ) { log . warn ( msg ) ; throw new SynapseException ( msg ) ; } public static XMLToObjectMapper getXmlToObjectMapper ( String contentType ) { return null ; } public static URL getURLFromPath ( String path ) { if ( path == null || "null" . equals ( path ) ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Can not create a URL from 'null' " ) ; } return null ; } URL url = null ; try { url = new URL ( path ) ; if ( "file" . equals ( url . getProtocol ( ) ) ) { try { url . openStream ( ) ; } catch ( MalformedURLException e ) { handleException ( "Invalid URL reference : " + path , e ) ; } catch ( IOException ignored ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Can not open a connection to the URL with a path :" + path ) ; } String synapseHome = System . getProperty ( SynapseConstants . SYNAPSE_HOME ) ; if ( synapseHome != null ) { if ( synapseHome . endsWith ( "/" ) ) { synapseHome = synapseHome . substring ( 0 , synapseHome . lastIndexOf ( "/" ) ) ; } if ( log . isDebugEnabled ( ) ) { log . debug ( "Trying  to resolve an absolute path of the " + " URL using the synapse.home : " + synapseHome ) ; } try { url = new URL ( url . getProtocol ( ) + ":" + synapseHome + "/" + url . getPath ( ) ) ; url . openStream ( ) ; } catch ( MalformedURLException e ) { handleException ( "Invalid URL reference " + url . getPath ( ) + e ) ; } catch ( IOException e ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Faild to resolve an absolute path of the " + " URL using the synapse.home : " + synapseHome ) ; } log . warn ( "IO Error reading from URL : " + url . getPath ( ) + e ) ; } } } } } catch ( MalformedURLException e ) { handleException ( "Invalid URL reference :  " + path , e ) ; } catch ( IOException e ) { handleException ( "IO Error reading from URL : " + path , e ) ; } return url ; } } 	1	['10', '1', '0', '15', '53', '25', '8', '7', '7', '0.222222222', '537', '1', '0', '0', '0.222222222', '0', '0', '52.6', '10', '2.9', '1']
package org . apache . synapse . config . xml . endpoints ; import org . apache . synapse . endpoints . Endpoint ; import org . apache . synapse . endpoints . IndirectEndpoint ; import org . apache . synapse . SynapseException ; import org . apache . axiom . om . OMElement ; import org . apache . axiom . om . OMNode ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import javax . xml . namespace . QName ; public class IndirectEndpointFactory implements EndpointFactory { private static Log log = LogFactory . getLog ( IndirectEndpointFactory . class ) ; private static IndirectEndpointFactory instance = new IndirectEndpointFactory ( ) ; private IndirectEndpointFactory ( ) { } public static IndirectEndpointFactory getInstance ( ) { return instance ; } public Endpoint createEndpoint ( OMElement epConfig , boolean anonymousEndpoint ) { IndirectEndpoint indirectEndpoint = new IndirectEndpoint ( ) ; String ref = epConfig . getAttributeValue ( new QName ( "key" ) ) ; indirectEndpoint . setKey ( ref ) ; return indirectEndpoint ; } public Object getObjectFromOMNode ( OMNode om ) { if ( om instanceof OMElement ) { return createEndpoint ( ( OMElement ) om , false ) ; } else { handleException ( "Invalid XML configuration for an Endpoint. OMElement expected" ) ; } return null ; } private static void handleException ( String msg ) { log . error ( msg ) ; throw new SynapseException ( msg ) ; } private static void handleException ( String msg , Exception e ) { log . error ( msg , e ) ; throw new SynapseException ( msg , e ) ; } } 	1	['7', '1', '0', '9', '17', '13', '1', '8', '3', '0.666666667', '69', '1', '1', '0', '0.25', '0', '0', '8.571428571', '2', '0.8571', '1']
package org . apache . synapse . config ; import org . apache . axis2 . AxisFault ; import org . apache . axis2 . engine . AxisConfiguration ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import org . apache . synapse . * ; import org . apache . synapse . config . xml . MediatorFactoryFinder ; import org . apache . synapse . config . xml . endpoints . XMLToEndpointMapper ; import org . apache . synapse . core . SynapseEnvironment ; import org . apache . synapse . core . axis2 . ProxyService ; import org . apache . synapse . endpoints . Endpoint ; import org . apache . synapse . mediators . base . SequenceMediator ; import org . apache . synapse . registry . Registry ; import javax . xml . namespace . QName ; import java . io . IOException ; import java . util . * ; public class SynapseConfiguration implements ManagedLifecycle { private static final Log log = LogFactory . getLog ( SynapseConfiguration . class ) ; Registry registry = null ; private QName defaultQName = null ; private Map proxyServices = new HashMap ( ) ; private Map startups = new HashMap ( ) ; private Map localRegistry = new HashMap ( ) ; private Properties properties = new Properties ( ) ; private Timer synapseTimer = new Timer ( true ) ; private AxisConfiguration axisConfiguration = null ; private String pathToConfigFile = null ; public void addSequence ( String key , Mediator mediator ) { localRegistry . put ( key , mediator ) ; } public void addSequence ( String key , Entry entry ) { localRegistry . put ( key , entry ) ; } public Map getDefinedSequences ( ) { Map definedSequences = new HashMap ( ) ; Iterator itr = localRegistry . values ( ) . iterator ( ) ; while ( itr . hasNext ( ) ) { Object o = itr . next ( ) ; if ( o instanceof SequenceMediator ) { definedSequences . put ( ( ( SequenceMediator ) o ) . getName ( ) , o ) ; } } return definedSequences ; } public Mediator getSequence ( String key ) { Object o = localRegistry . get ( key ) ; if ( o != null && o instanceof Mediator ) { return ( Mediator ) o ; } Entry entry = null ; if ( o != null && o instanceof Entry ) { entry = ( Entry ) o ; } else { entry = new Entry ( key ) ; entry . setType ( Entry . REMOTE_ENTRY ) ; entry . setMapper ( MediatorFactoryFinder . getInstance ( ) ) ; } if ( registry != null ) { o = registry . getResource ( entry ) ; if ( o != null && o instanceof Mediator ) { localRegistry . put ( key , entry ) ; return ( Mediator ) o ; } } return null ; } public void removeSequence ( String key ) { localRegistry . remove ( key ) ; } public Mediator getMainSequence ( ) { return getSequence ( SynapseConstants . MAIN_SEQUENCE_KEY ) ; } public Mediator getFaultSequence ( ) { return getSequence ( SynapseConstants . FAULT_SEQUENCE_KEY ) ; } public void addEntry ( String key , Entry entry ) { if ( entry . getType ( ) == Entry . URL_SRC ) { try { entry . setValue ( SynapseConfigUtils . getOMElementFromURL ( entry . getSrc ( ) . toString ( ) ) ) ; localRegistry . put ( key , entry ) ; } catch ( IOException e ) { handleException ( "Can not read from source URL : " + entry . getSrc ( ) ) ; } } else { localRegistry . put ( key , entry ) ; } } public Map getCachedEntries ( ) { Map cachedEntries = new HashMap ( ) ; for ( Iterator itr = localRegistry . values ( ) . iterator ( ) ; itr . hasNext ( ) ; ) { Object o = itr . next ( ) ; if ( o != null && o instanceof Entry ) { Entry entry = ( Entry ) o ; if ( entry . isDynamic ( ) && entry . isCached ( ) ) { cachedEntries . put ( entry . getKey ( ) , entry ) ; } } } return cachedEntries ; } public Map getDefinedEntries ( ) { Map definedEntries = new HashMap ( ) ; Iterator itr = localRegistry . values ( ) . iterator ( ) ; while ( itr . hasNext ( ) ) { Object o = itr . next ( ) ; if ( o instanceof Entry && ( ( Entry ) o ) . getType ( ) != Entry . REMOTE_ENTRY ) { definedEntries . put ( ( ( Entry ) o ) . getKey ( ) , o ) ; } } return definedEntries ; } public Object getEntry ( String key ) { Object o = localRegistry . get ( key ) ; if ( o != null && o instanceof Entry ) { Entry entry = ( Entry ) o ; if ( entry . isDynamic ( ) ) { if ( entry . isCached ( ) && ! entry . isExpired ( ) ) { return entry . getValue ( ) ; } else if ( registry != null ) { o = registry . getResource ( entry ) ; } else { if ( log . isDebugEnabled ( ) ) { log . debug ( "Will not  evaluate the value of the remote entry with a key " + key + ",  because the registry is not available" ) ; } return null ; } } else { return entry . getValue ( ) ; } } return o ; } public Entry getEntryDefinition ( String key ) { Object o = localRegistry . get ( key ) ; if ( o == null || o instanceof Entry ) { if ( o == null ) { Entry entry = new Entry ( key ) ; entry . setType ( Entry . REMOTE_ENTRY ) ; addEntry ( key , entry ) ; return entry ; } return ( Entry ) o ; } else { handleException ( "Invalid local registry entry : " + key ) ; return null ; } } public void removeEntry ( String key ) { localRegistry . remove ( key ) ; } public void clearCachedEntry ( String key ) { Entry entry = getEntryDefinition ( key ) ; if ( entry . isDynamic ( ) && entry . isCached ( ) ) { entry . clearCache ( ) ; } } public void clearCache ( ) { for ( Iterator itr = localRegistry . values ( ) . iterator ( ) ; itr . hasNext ( ) ; ) { Object o = itr . next ( ) ; if ( o != null && o instanceof Entry ) { Entry entry = ( Entry ) o ; if ( entry . isDynamic ( ) && entry . isCached ( ) ) { entry . clearCache ( ) ; } } } } public void addEndpoint ( String key , Endpoint endpoint ) { localRegistry . put ( key , endpoint ) ; } public void addEndpoint ( String key , Entry entry ) { localRegistry . put ( key , entry ) ; } public Map getDefinedEndpoints ( ) { Map definedEndpoints = new HashMap ( ) ; Iterator itr = localRegistry . values ( ) . iterator ( ) ; while ( itr . hasNext ( ) ) { Object o = itr . next ( ) ; if ( o instanceof Endpoint ) { definedEndpoints . put ( ( ( Endpoint ) o ) . getName ( ) , o ) ; } } return definedEndpoints ; } public Endpoint getEndpoint ( String key ) { Object o = localRegistry . get ( key ) ; if ( o != null && o instanceof Endpoint ) { return ( Endpoint ) o ; } Entry entry = null ; if ( o != null && o instanceof Entry ) { entry = ( Entry ) o ; } else { entry = new Entry ( key ) ; entry . setType ( Entry . REMOTE_ENTRY ) ; entry . setMapper ( XMLToEndpointMapper . getInstance ( ) ) ; } if ( registry != null ) { o = registry . getResource ( entry ) ; if ( o != null && o instanceof Endpoint ) { localRegistry . put ( key , entry ) ; return ( Endpoint ) o ; } } return null ; } public void removeEndpoint ( String key ) { localRegistry . remove ( key ) ; } public void addProxyService ( String name , ProxyService proxy ) { proxyServices . put ( name , proxy ) ; } public ProxyService getProxyService ( String name ) { return ( ProxyService ) proxyServices . get ( name ) ; } public void removeProxyService ( String name ) { Object o = proxyServices . get ( name ) ; if ( o == null ) { handleException ( "Unknown proxy service for name : " + name ) ; } else { try { if ( getAxisConfiguration ( ) . getServiceForActivation ( name ) != null ) { if ( getAxisConfiguration ( ) . getServiceForActivation ( name ) . isActive ( ) ) { getAxisConfiguration ( ) . getService ( name ) . setActive ( false ) ; } getAxisConfiguration ( ) . removeService ( name ) ; } proxyServices . remove ( name ) ; } catch ( AxisFault axisFault ) { handleException ( axisFault . getMessage ( ) ) ; } } } public Collection getProxyServices ( ) { return proxyServices . values ( ) ; } public Map getLocalRegistry ( ) { return Collections . unmodifiableMap ( localRegistry ) ; } public Registry getRegistry ( ) { return registry ; } public void setRegistry ( Registry registry ) { this . registry = registry ; } public void setAxisConfiguration ( AxisConfiguration axisConfig ) { this . axisConfiguration = axisConfig ; } public AxisConfiguration getAxisConfiguration ( ) { return axisConfiguration ; } public String getPathToConfigFile ( ) { return pathToConfigFile ; } public void setPathToConfigFile ( String pathToConfigFile ) { this . pathToConfigFile = pathToConfigFile ; } public void setDefaultQName ( QName defaultQName ) { this . defaultQName = defaultQName ; } public QName getDefaultQName ( ) { return defaultQName ; } public Timer getSynapseTimer ( ) { return synapseTimer ; } public Collection getStartups ( ) { return startups . values ( ) ; } public Startup getStartup ( String id ) { return ( Startup ) startups . get ( id ) ; } public void addStartup ( Startup startup ) { startups . put ( startup . getName ( ) , startup ) ; } public void removeStartup ( String name ) { startups . remove ( name ) ; } public Properties getProperties ( ) { return properties ; } public void setProperties ( Properties properties ) { this . properties = properties ; } public String getProperty ( String propKey , String def ) { String val = System . getProperty ( propKey ) ; if ( val == null ) { val = properties . getProperty ( propKey ) ; } if ( val != null ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Using synapse tuning parameter : " + propKey + " = " + val ) ; } return val ; } return def ; } public String getProperty ( String propKey ) { String val = System . getProperty ( propKey ) ; if ( val == null ) { val = properties . getProperty ( propKey ) ; } if ( val != null ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Using synapse tuning parameter : " + propKey + " = " + val ) ; } return val ; } return null ; } public void destroy ( ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Destroying the Synapse Configuration" ) ; } synapseTimer . cancel ( ) ; synapseTimer = null ; for ( Iterator it = getProxyServices ( ) . iterator ( ) ; it . hasNext ( ) ; ) { Object o = it . next ( ) ; if ( o instanceof ProxyService ) { ProxyService p = ( ProxyService ) o ; if ( p . getTargetInLineInSequence ( ) != null ) { p . getTargetInLineInSequence ( ) . destroy ( ) ; } if ( p . getTargetInLineOutSequence ( ) != null ) { p . getTargetInLineOutSequence ( ) . destroy ( ) ; } } } Map sequences = getDefinedSequences ( ) ; for ( Iterator it = sequences . entrySet ( ) . iterator ( ) ; it . hasNext ( ) ; ) { Object o = it . next ( ) ; if ( o instanceof ManagedLifecycle ) { ManagedLifecycle m = ( ManagedLifecycle ) o ; m . destroy ( ) ; } } if ( startups != null ) { for ( Iterator it = startups . values ( ) . iterator ( ) ; it . hasNext ( ) ; ) { Object o = it . next ( ) ; if ( o instanceof ManagedLifecycle ) { ManagedLifecycle m = ( ManagedLifecycle ) o ; m . destroy ( ) ; } } } } public void init ( SynapseEnvironment se ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Initializing the Synapse Configuration" ) ; } for ( Iterator it = getProxyServices ( ) . iterator ( ) ; it . hasNext ( ) ; ) { Object o = it . next ( ) ; if ( o instanceof ProxyService ) { ProxyService p = ( ProxyService ) o ; if ( p . getTargetInLineInSequence ( ) != null ) { p . getTargetInLineInSequence ( ) . init ( se ) ; } if ( p . getTargetInLineOutSequence ( ) != null ) { p . getTargetInLineOutSequence ( ) . init ( se ) ; } } } Map sequences = getDefinedSequences ( ) ; for ( Iterator it = sequences . values ( ) . iterator ( ) ; it . hasNext ( ) ; ) { Object o = it . next ( ) ; if ( o instanceof ManagedLifecycle ) { ManagedLifecycle m = ( ManagedLifecycle ) o ; m . init ( se ) ; } } } private void handleException ( String msg ) { log . error ( msg ) ; throw new SynapseException ( msg ) ; } } 	1	['47', '1', '0', '42', '105', '589', '23', '20', '45', '0.860869565', '933', '0.9', '1', '0', '0.144927536', '0', '0', '18.63829787', '8', '2.0426', '1']
package org . apache . synapse . config . xml . endpoints ; import org . apache . axiom . om . OMFactory ; import org . apache . axiom . om . OMElement ; import org . apache . axiom . om . OMAbstractFactory ; import org . apache . synapse . endpoints . Endpoint ; import org . apache . synapse . endpoints . SALoadbalanceEndpoint ; import org . apache . synapse . endpoints . dispatch . Dispatcher ; import org . apache . synapse . endpoints . dispatch . SoapSessionDispatcher ; import org . apache . synapse . endpoints . dispatch . SimpleClientSessionDispatcher ; import org . apache . synapse . endpoints . dispatch . HttpSessionDispatcher ; import org . apache . synapse . endpoints . algorithms . LoadbalanceAlgorithm ; import org . apache . synapse . endpoints . algorithms . RoundRobin ; import org . apache . synapse . SynapseException ; import org . apache . synapse . SynapseConstants ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import java . util . List ; public class SALoadbalanceEndpointSerializer implements EndpointSerializer { private static final Log log = LogFactory . getLog ( SALoadbalanceEndpointSerializer . class ) ; private OMFactory fac = null ; public OMElement serializeEndpoint ( Endpoint endpoint ) { if ( ! ( endpoint instanceof SALoadbalanceEndpoint ) ) { handleException ( "Invalid endpoint type for serializing. " + "Expected: SALoadbalanceEndpoint Found: " + endpoint . getClass ( ) . getName ( ) ) ; } SALoadbalanceEndpoint loadbalanceEndpoint = ( SALoadbalanceEndpoint ) endpoint ; fac = OMAbstractFactory . getOMFactory ( ) ; OMElement endpointElement = fac . createOMElement ( "endpoint" , SynapseConstants . SYNAPSE_OMNAMESPACE ) ; String name = loadbalanceEndpoint . getName ( ) ; if ( name != null ) { endpointElement . addAttribute ( "name" , name , null ) ; } Dispatcher dispatcher = loadbalanceEndpoint . getDispatcher ( ) ; if ( dispatcher instanceof SoapSessionDispatcher ) { OMElement sessionElement = fac . createOMElement ( "session" , SynapseConstants . SYNAPSE_OMNAMESPACE ) ; sessionElement . addAttribute ( "type" , "soap" , null ) ; endpointElement . addChild ( sessionElement ) ; } else if ( dispatcher instanceof HttpSessionDispatcher ) { OMElement sessionElement = fac . createOMElement ( "session" , SynapseConstants . SYNAPSE_OMNAMESPACE ) ; sessionElement . addAttribute ( "type" , "http" , null ) ; endpointElement . addChild ( sessionElement ) ; } else if ( dispatcher instanceof SimpleClientSessionDispatcher ) { OMElement sessionElement = fac . createOMElement ( "session" , SynapseConstants . SYNAPSE_OMNAMESPACE ) ; sessionElement . addAttribute ( "type" , "simpleClientSession" , null ) ; endpointElement . addChild ( sessionElement ) ; } OMElement loadbalanceElement = fac . createOMElement ( "loadbalance" , SynapseConstants . SYNAPSE_OMNAMESPACE ) ; endpointElement . addChild ( loadbalanceElement ) ; LoadbalanceAlgorithm algorithm = loadbalanceEndpoint . getAlgorithm ( ) ; String algorithmName = "roundRobin" ; if ( algorithm instanceof RoundRobin ) { algorithmName = "roundRobin" ; } loadbalanceElement . addAttribute ( "algorithm" , algorithmName , null ) ; List endpoints = loadbalanceEndpoint . getEndpoints ( ) ; for ( int i = 0 ; i < endpoints . size ( ) ; i ++ ) { Endpoint childEndpoint = ( Endpoint ) endpoints . get ( i ) ; EndpointSerializer serializer = EndpointAbstractSerializer . getEndpointSerializer ( childEndpoint ) ; OMElement aeElement = serializer . serializeEndpoint ( childEndpoint ) ; loadbalanceElement . addChild ( aeElement ) ; } return endpointElement ; } private void handleException ( String msg ) { log . error ( msg ) ; throw new SynapseException ( msg ) ; } } 	1	['4', '1', '0', '20', '25', '2', '1', '20', '2', '0.5', '174', '1', '0', '0', '0.555555556', '0', '0', '42', '8', '2.25', '1']
package org . apache . synapse . config . xml . endpoints ; import org . apache . axiom . om . OMElement ; import org . apache . synapse . endpoints . Endpoint ; public interface EndpointSerializer { public OMElement serializeEndpoint ( Endpoint endpoint ) ; } 	1	['1', '1', '0', '13', '1', '0', '11', '2', '1', '2', '1', '0', '0', '0', '1', '0', '0', '0', '1', '1', '1']
package org . apache . synapse . config . xml ; import org . apache . axiom . om . OMElement ; import org . apache . axiom . om . OMNode ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import org . apache . synapse . Mediator ; import org . apache . synapse . Startup ; import org . apache . synapse . SynapseConstants ; import org . apache . synapse . SynapseException ; import org . apache . synapse . config . Entry ; import org . apache . synapse . config . SynapseConfigUtils ; import org . apache . synapse . config . SynapseConfiguration ; import org . apache . synapse . config . xml . endpoints . EndpointAbstractFactory ; import org . apache . synapse . core . axis2 . ProxyService ; import org . apache . synapse . endpoints . Endpoint ; import org . apache . synapse . mediators . base . SequenceMediator ; import org . apache . synapse . mediators . builtin . DropMediator ; import org . apache . synapse . mediators . builtin . LogMediator ; import javax . xml . namespace . QName ; import javax . xml . stream . XMLStreamException ; import java . util . Iterator ; public class SynapseXMLConfigurationFactory implements ConfigurationFactory { private static Log log = LogFactory . getLog ( SynapseXMLConfigurationFactory . class ) ; public SynapseConfiguration getConfiguration ( OMElement definitions ) { if ( ! definitions . getQName ( ) . equals ( XMLConfigConstants . DEFINITIONS_ELT ) ) { throw new SynapseException ( "Wrong QName for this config factory " + definitions . getQName ( ) ) ; } SynapseConfiguration config = new SynapseConfiguration ( ) ; config . setDefaultQName ( definitions . getQName ( ) ) ; SequenceMediator rootSequence = new SequenceMediator ( ) ; rootSequence . setName ( org . apache . synapse . SynapseConstants . MAIN_SEQUENCE_KEY ) ; Iterator iter = definitions . getChildren ( ) ; while ( iter . hasNext ( ) ) { Object o = iter . next ( ) ; if ( o instanceof OMElement ) { OMElement elt = ( OMElement ) o ; if ( XMLConfigConstants . SEQUENCE_ELT . equals ( elt . getQName ( ) ) ) { String key = elt . getAttributeValue ( new QName ( XMLConfigConstants . NULL_NAMESPACE , "key" ) ) ; if ( key != null ) { Mediator m = MediatorFactoryFinder . getInstance ( ) . getMediator ( elt ) ; rootSequence . addChild ( m ) ; } else { defineSequence ( config , elt ) ; } } else if ( XMLConfigConstants . ENDPOINT_ELT . equals ( elt . getQName ( ) ) ) { defineEndpoint ( config , elt ) ; } else if ( XMLConfigConstants . ENTRY_ELT . equals ( elt . getQName ( ) ) ) { defineEntry ( config , elt ) ; } else if ( XMLConfigConstants . PROXY_ELT . equals ( elt . getQName ( ) ) ) { defineProxy ( config , elt ) ; } else if ( XMLConfigConstants . REGISTRY_ELT . equals ( elt . getQName ( ) ) ) { defineRegistry ( config , elt ) ; } else if ( XMLConfigConstants . TASK_ELT . equals ( elt . getQName ( ) ) ) { defineStartup ( config , elt ) ; } else { Mediator m = MediatorFactoryFinder . getInstance ( ) . getMediator ( elt ) ; rootSequence . addChild ( m ) ; } } } if ( config . getLocalRegistry ( ) . isEmpty ( ) && config . getProxyServices ( ) . isEmpty ( ) && rootSequence . getList ( ) . isEmpty ( ) && config . getRegistry ( ) != null ) { OMNode remoteConfigNode = config . getRegistry ( ) . lookup ( "synapse.xml" ) ; try { config = XMLConfigurationBuilder . getConfiguration ( SynapseConfigUtils . getStreamSource ( remoteConfigNode ) . getInputStream ( ) ) ; } catch ( XMLStreamException xse ) { throw new SynapseException ( "Problem loading remote synapse.xml " , xse ) ; } } if ( ! config . getLocalRegistry ( ) . containsKey ( SynapseConstants . MAIN_SEQUENCE_KEY ) ) { if ( rootSequence . getList ( ) . isEmpty ( ) && config . getMainSequence ( ) == null ) { setDefaultMainSequence ( config ) ; } else { config . addSequence ( rootSequence . getName ( ) , rootSequence ) ; } } else if ( ! rootSequence . getList ( ) . isEmpty ( ) ) { handleException ( "Invalid Synapse Configuration : Conflict in resolving the \"main\" " + "mediator\n\tSynapse Configuration cannot have sequence named \"main\" and " + "toplevel mediators simultaniously" ) ; } if ( config . getFaultSequence ( ) == null ) { setDefaultFaultSequence ( config ) ; } return config ; } private static void defineRegistry ( SynapseConfiguration config , OMElement elem ) { if ( config . getRegistry ( ) != null ) { handleException ( "Only one remote registry can be defined within a configuration" ) ; } config . setRegistry ( RegistryFactory . createRegistry ( elem ) ) ; } private static void defineStartup ( SynapseConfiguration config , OMElement elem ) { Startup startup = StartupFinder . getInstance ( ) . getStartup ( elem ) ; if ( config . getStartup ( startup . getName ( ) ) != null ) { handleException ( "Duplicate startup with name : " + startup . getName ( ) ) ; } config . addStartup ( startup ) ; } private static void defineProxy ( SynapseConfiguration config , OMElement elem ) { ProxyService proxy = ProxyServiceFactory . createProxy ( elem ) ; if ( config . getProxyService ( proxy . getName ( ) ) != null ) { handleException ( "Duplicate proxy service with name : " + proxy . getName ( ) ) ; } config . addProxyService ( proxy . getName ( ) , proxy ) ; } private static void defineEntry ( SynapseConfiguration config , OMElement elem ) { Entry entry = EntryFactory . createEntry ( elem ) ; if ( config . getLocalRegistry ( ) . get ( entry . getKey ( ) ) != null ) { handleException ( "Duplicate registry entry definition for key : " + entry . getKey ( ) ) ; } config . addEntry ( entry . getKey ( ) , entry ) ; } public static void defineSequence ( SynapseConfiguration config , OMElement ele ) { String name = ele . getAttributeValue ( new QName ( XMLConfigConstants . NULL_NAMESPACE , "name" ) ) ; if ( name != null ) { if ( config . getLocalRegistry ( ) . get ( name ) != null ) { handleException ( "Duplicate sequence definition : " + name ) ; } config . addSequence ( name , MediatorFactoryFinder . getInstance ( ) . getMediator ( ele ) ) ; } else { handleException ( "Invalid sequence definition without a name" ) ; } } public static void defineEndpoint ( SynapseConfiguration config , OMElement ele ) { String name = ele . getAttributeValue ( new QName ( XMLConfigConstants . NULL_NAMESPACE , "name" ) ) ; if ( name != null ) { if ( config . getLocalRegistry ( ) . get ( name . trim ( ) ) != null ) { handleException ( "Duplicate endpoint definition : " + name ) ; } Endpoint endpoint = EndpointAbstractFactory . getEndpointFactroy ( ele ) . createEndpoint ( ele , false ) ; config . addEndpoint ( name . trim ( ) , endpoint ) ; } else { handleException ( "Invalid endpoint definition without a name" ) ; } } private static void setDefaultMainSequence ( SynapseConfiguration config ) { SequenceMediator main = new SequenceMediator ( ) ; main . setName ( SynapseConstants . MAIN_SEQUENCE_KEY ) ; main . addChild ( new LogMediator ( ) ) ; main . addChild ( new DropMediator ( ) ) ; config . addSequence ( SynapseConstants . MAIN_SEQUENCE_KEY , main ) ; } private static void setDefaultFaultSequence ( SynapseConfiguration config ) { SequenceMediator fault = new SequenceMediator ( ) ; fault . setName ( org . apache . synapse . SynapseConstants . FAULT_SEQUENCE_KEY ) ; LogMediator log = new LogMediator ( ) ; log . setLogLevel ( LogMediator . FULL ) ; fault . addChild ( log ) ; config . addSequence ( org . apache . synapse . SynapseConstants . FAULT_SEQUENCE_KEY , fault ) ; } private static void handleException ( String msg ) { log . error ( msg ) ; throw new SynapseException ( msg ) ; } private static void handleException ( String msg , Exception e ) { log . error ( msg , e ) ; throw new SynapseException ( msg , e ) ; } public QName getTagQName ( ) { return XMLConfigConstants . DEFINITIONS_ELT ; } public Class getSerializerClass ( ) { return SynapseXMLConfigurationSerializer . class ; } } 	1	['15', '1', '0', '26', '77', '99', '0', '26', '6', '0.357142857', '445', '1', '0', '0', '0.314285714', '0', '0', '28.6', '19', '2.6', '2']
package org . apache . synapse . config . xml . endpoints ; import org . apache . synapse . endpoints . * ; import org . apache . synapse . SynapseException ; public class EndpointAbstractSerializer { public static EndpointSerializer getEndpointSerializer ( Endpoint endpoint ) { if ( endpoint instanceof AddressEndpoint ) { return new AddressEndpointSerializer ( ) ; } else if ( endpoint instanceof WSDLEndpoint ) { return new WSDLEndpointSerializer ( ) ; } else if ( endpoint instanceof IndirectEndpoint ) { return new IndirectEndpointSerializer ( ) ; } else if ( endpoint instanceof LoadbalanceEndpoint ) { return new LoadbalanceEndpointSerializer ( ) ; } else if ( endpoint instanceof SALoadbalanceEndpoint ) { return new SALoadbalanceEndpointSerializer ( ) ; } else if ( endpoint instanceof FailoverEndpoint ) { return new FailoverEndpointSerializer ( ) ; } throw new SynapseException ( "Serializer for endpoint " + endpoint . getClass ( ) . toString ( ) + " is not defined." ) ; } } 	1	['2', '1', '0', '19', '15', '1', '7', '15', '2', '2', '63', '0', '0', '0', '0.5', '0', '0', '30.5', '7', '3.5', '1']
package org . apache . synapse . config . xml . endpoints ; import org . apache . synapse . config . XMLToObjectMapper ; import org . apache . synapse . SynapseException ; import org . apache . axiom . om . OMNode ; import org . apache . axiom . om . OMElement ; public class XMLToEndpointMapper implements XMLToObjectMapper { private static XMLToEndpointMapper instance = new XMLToEndpointMapper ( ) ; private XMLToEndpointMapper ( ) { } public static XMLToEndpointMapper getInstance ( ) { return instance ; } public Object getObjectFromOMNode ( OMNode om ) { if ( om instanceof OMElement ) { OMElement epElement = ( OMElement ) om ; return EndpointAbstractFactory . getEndpointFactroy ( epElement ) . createEndpoint ( epElement , false ) ; } else { throw new SynapseException ( "Configuration is not in proper format." ) ; } } } 	1	['4', '1', '0', '8', '8', '4', '1', '7', '2', '0.666666667', '32', '1', '1', '0', '0.5', '0', '0', '6.75', '2', '0.75', '1']
package org . apache . synapse . mediators . transform ; import org . apache . axiom . om . OMAbstractFactory ; import org . apache . axiom . om . OMDocument ; import org . apache . axiom . om . OMElement ; import org . apache . axiom . om . xpath . AXIOMXPath ; import org . apache . axiom . soap . * ; import org . apache . axis2 . AxisFault ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import org . apache . synapse . SynapseConstants ; import org . apache . synapse . MessageContext ; import org . apache . synapse . SynapseException ; import org . apache . synapse . core . axis2 . Axis2MessageContext ; import org . apache . synapse . mediators . AbstractMediator ; import javax . xml . namespace . QName ; import java . net . URI ; import java . util . Iterator ; public class FaultMediator extends AbstractMediator { public static final String WSA_ACTION = "Action" ; public static final int SOAP11 = 1 ; public static final int SOAP12 = 2 ; private int soapVersion ; private QName faultCodeValue = null ; private AXIOMXPath faultCodeExpr = null ; private String faultReasonValue = null ; private AXIOMXPath faultReasonExpr = null ; private URI faultNode = null ; private URI faultRole = null ; private String faultDetail = null ; public boolean mediate ( MessageContext synCtx ) { boolean traceOn = isTraceOn ( synCtx ) ; boolean traceOrDebugOn = isTraceOrDebugOn ( traceOn ) ; if ( traceOrDebugOn ) { traceOrDebug ( traceOn , "Start : Fault mediator" ) ; if ( traceOn && trace . isTraceEnabled ( ) ) { trace . trace ( "Message : " + synCtx . getEnvelope ( ) ) ; } } switch ( soapVersion ) { case SOAP11 : return makeSOAPFault ( synCtx , SOAP11 , traceOrDebugOn , traceOn ) ; case SOAP12 : return makeSOAPFault ( synCtx , SOAP12 , traceOrDebugOn , traceOn ) ; default : { SOAPEnvelope envelop = synCtx . getEnvelope ( ) ; if ( envelop != null ) { if ( SOAP12Constants . SOAP_ENVELOPE_NAMESPACE_URI . equals ( envelop . getNamespace ( ) . getNamespaceURI ( ) ) ) { soapVersion = SOAP12 ; return makeSOAPFault ( synCtx , SOAP12 , traceOrDebugOn , traceOn ) ; } else { soapVersion = SOAP11 ; return makeSOAPFault ( synCtx , SOAP11 , traceOrDebugOn , traceOn ) ; } } else { return makeSOAPFault ( synCtx , SOAP11 , traceOrDebugOn , traceOn ) ; } } } } private boolean makeSOAPFault ( MessageContext synCtx , int soapVersion , boolean traceOrDebugOn , boolean traceOn ) { if ( traceOrDebugOn ) { traceOrDebug ( traceOn , "Creating a SOAP " + ( soapVersion == SOAP11 ? "1.1" : "1.2" ) + " fault" ) ; } SOAPFactory factory = ( soapVersion == SOAP11 ? OMAbstractFactory . getSOAP11Factory ( ) : OMAbstractFactory . getSOAP12Factory ( ) ) ; OMDocument soapFaultDocument = factory . createOMDocument ( ) ; SOAPEnvelope faultEnvelope = factory . getDefaultFaultEnvelope ( ) ; soapFaultDocument . addChild ( faultEnvelope ) ; SOAPFault fault = faultEnvelope . getBody ( ) . getFault ( ) ; if ( fault == null ) { fault = factory . createSOAPFault ( ) ; } setFaultCode ( synCtx , factory , fault ) ; setFaultResaon ( synCtx , factory , fault ) ; setFaultNode ( factory , fault ) ; setFaultRole ( factory , fault ) ; setFaultDetail ( factory , fault ) ; if ( synCtx . getEnvelope ( ) != null ) { SOAPHeader soapHeader = synCtx . getEnvelope ( ) . getHeader ( ) ; if ( soapHeader != null ) { for ( Iterator iter = soapHeader . examineAllHeaderBlocks ( ) ; iter . hasNext ( ) ; ) { Object o = iter . next ( ) ; if ( o instanceof SOAPHeaderBlock ) { SOAPHeaderBlock header = ( SOAPHeaderBlock ) o ; faultEnvelope . getHeader ( ) . addChild ( header ) ; } else if ( o instanceof OMElement ) { faultEnvelope . getHeader ( ) . addChild ( ( OMElement ) o ) ; } } } } if ( traceOrDebugOn ) { String msg = "Original SOAP Message : " + synCtx . getEnvelope ( ) . toString ( ) + "Fault Message created : " + faultEnvelope . toString ( ) ; if ( traceOn && trace . isTraceEnabled ( ) ) { trace . trace ( msg ) ; } if ( log . isTraceEnabled ( ) ) { log . trace ( msg ) ; } } try { synCtx . setEnvelope ( faultEnvelope ) ; } catch ( AxisFault af ) { handleException ( "Error replacing current SOAP envelope with the fault envelope" , af , synCtx ) ; } if ( synCtx . getFaultTo ( ) != null ) { synCtx . setTo ( synCtx . getFaultTo ( ) ) ; } else if ( synCtx . getReplyTo ( ) != null ) { synCtx . setTo ( synCtx . getReplyTo ( ) ) ; } else { synCtx . setTo ( null ) ; } if ( traceOrDebugOn ) { traceOrDebug ( traceOn , "End : Fault mediator" ) ; } return true ; } private void setFaultCode ( MessageContext synCtx , SOAPFactory factory , SOAPFault fault ) { QName fault_code = null ; if ( faultCodeValue == null && faultCodeExpr == null ) { handleException ( "A valid fault code QName value or expression is required" , synCtx ) ; } else if ( faultCodeValue != null ) { fault_code = faultCodeValue ; } else { fault_code = QName . valueOf ( Axis2MessageContext . getStringValue ( faultCodeExpr , synCtx ) ) ; } SOAPFaultCode code = factory . createSOAPFaultCode ( ) ; switch ( soapVersion ) { case SOAP11 : code . setText ( fault_code ) ; break ; case SOAP12 : SOAPFaultValue value = factory . createSOAPFaultValue ( code ) ; value . setText ( fault_code ) ; break ; } fault . setCode ( code ) ; } private void setFaultResaon ( MessageContext synCtx , SOAPFactory factory , SOAPFault fault ) { String reasonString = null ; if ( faultReasonValue == null && faultReasonExpr == null ) { handleException ( "A valid fault reason value or expression is required" , synCtx ) ; } else if ( faultReasonValue != null ) { reasonString = faultReasonValue ; } else { reasonString = Axis2MessageContext . getStringValue ( faultReasonExpr , synCtx ) ; } SOAPFaultReason reason = factory . createSOAPFaultReason ( ) ; switch ( soapVersion ) { case SOAP11 : reason . setText ( reasonString ) ; break ; case SOAP12 : SOAPFaultText text = factory . createSOAPFaultText ( ) ; text . setText ( reasonString ) ; reason . addSOAPText ( text ) ; break ; } fault . setReason ( reason ) ; } private void setFaultNode ( SOAPFactory factory , SOAPFault fault ) { if ( faultNode != null ) { SOAPFaultNode soapfaultNode = factory . createSOAPFaultNode ( ) ; soapfaultNode . setNodeValue ( faultNode . toString ( ) ) ; fault . setNode ( soapfaultNode ) ; } } private void setFaultRole ( SOAPFactory factory , SOAPFault fault ) { if ( faultRole != null ) { SOAPFaultRole soapFaultRole = factory . createSOAPFaultRole ( ) ; soapFaultRole . setRoleValue ( faultRole . toString ( ) ) ; fault . setRole ( soapFaultRole ) ; } } private void setFaultDetail ( SOAPFactory factory , SOAPFault fault ) { if ( faultDetail != null ) { SOAPFaultDetail soapFaultDetail = factory . createSOAPFaultDetail ( ) ; soapFaultDetail . setText ( faultDetail ) ; fault . setDetail ( soapFaultDetail ) ; } else if ( fault . getDetail ( ) != null ) { fault . getDetail ( ) . detach ( ) ; } } public int getSoapVersion ( ) { return soapVersion ; } public void setSoapVersion ( int soapVersion ) { this . soapVersion = soapVersion ; } public QName getFaultCodeValue ( ) { return faultCodeValue ; } public void setFaultCodeValue ( QName faultCodeValue ) { if ( soapVersion == SOAP11 ) { this . faultCodeValue = faultCodeValue ; } else { if ( SOAP12Constants . SOAP_ENVELOPE_NAMESPACE_URI . equals ( faultCodeValue . getNamespaceURI ( ) ) && ( SOAP12Constants . FAULT_CODE_DATA_ENCODING_UNKNOWN . equals ( faultCodeValue . getLocalPart ( ) ) || SOAP12Constants . FAULT_CODE_MUST_UNDERSTAND . equals ( faultCodeValue . getLocalPart ( ) ) || SOAP12Constants . FAULT_CODE_RECEIVER . equals ( faultCodeValue . getLocalPart ( ) ) || SOAP12Constants . FAULT_CODE_SENDER . equals ( faultCodeValue . getLocalPart ( ) ) || SOAP12Constants . FAULT_CODE_VERSION_MISMATCH . equals ( faultCodeValue . getLocalPart ( ) ) ) ) { this . faultCodeValue = faultCodeValue ; } else { String msg = "Invalid Fault code value for a SOAP 1.2 fault : " + faultCodeValue ; log . error ( msg ) ; throw new SynapseException ( msg ) ; } } } public AXIOMXPath getFaultCodeExpr ( ) { return faultCodeExpr ; } public void setFaultCodeExpr ( AXIOMXPath faultCodeExpr ) { this . faultCodeExpr = faultCodeExpr ; } public String getFaultReasonValue ( ) { return faultReasonValue ; } public void setFaultReasonValue ( String faultReasonValue ) { this . faultReasonValue = faultReasonValue ; } public AXIOMXPath getFaultReasonExpr ( ) { return faultReasonExpr ; } public void setFaultReasonExpr ( AXIOMXPath faultReasonExpr ) { this . faultReasonExpr = faultReasonExpr ; } public URI getFaultNode ( ) { return faultNode ; } public void setFaultNode ( URI faultNode ) { if ( soapVersion == SOAP11 ) { String msg = "A fault node does not apply to a SOAP 1.1 fault" ; log . error ( msg ) ; throw new SynapseException ( msg ) ; } this . faultNode = faultNode ; } public URI getFaultRole ( ) { return faultRole ; } public void setFaultRole ( URI faultRole ) { this . faultRole = faultRole ; } public String getFaultDetail ( ) { return faultDetail ; } public void setFaultDetail ( String faultDetail ) { this . faultDetail = faultDetail ; } } 	1	['24', '2', '0', '28', '87', '150', '2', '26', '18', '0.873517787', '595', '0.727272727', '0', '0.361111111', '0.2', '0', '0', '23.33333333', '16', '2.9167', '2']
package org . apache . synapse . core . axis2 ; import org . apache . axis2 . AxisFault ; import org . apache . axis2 . transport . TransportUtils ; import org . apache . axis2 . i18n . Messages ; import org . apache . axis2 . util . TargetResolver ; import org . apache . axis2 . addressing . EndpointReference ; import org . apache . axis2 . client . OperationClient ; import org . apache . axis2 . client . Options ; import org . apache . axis2 . client . async . Callback ; import org . apache . axis2 . context . ConfigurationContext ; import org . apache . axis2 . context . MessageContext ; import org . apache . axis2 . context . ServiceContext ; import org . apache . axis2 . description . * ; import org . apache . axis2 . engine . AxisEngine ; import org . apache . axis2 . wsdl . WSDLConstants ; import org . apache . axiom . soap . SOAPEnvelope ; import org . apache . synapse . SynapseConstants ; import javax . xml . namespace . QName ; public class DynamicAxisOperation extends OutInAxisOperation { public DynamicAxisOperation ( ) { super ( ) ; } public DynamicAxisOperation ( QName name ) { super ( name ) ; } public OperationClient createClient ( ServiceContext sc , Options options ) { return new DynamicOperationClient ( this , sc , options ) ; } class DynamicOperationClient extends OperationClient { DynamicOperationClient ( OutInAxisOperation axisOp , ServiceContext sc , Options options ) { super ( axisOp , sc , options ) ; } public void addMessageContext ( MessageContext mc ) throws AxisFault { mc . setServiceContext ( sc ) ; if ( mc . getMessageID ( ) == null ) { setMessageID ( mc ) ; } axisOp . registerOperationContext ( mc , oc ) ; } public MessageContext getMessageContext ( String messageLabel ) throws AxisFault { return oc . getMessageContext ( messageLabel ) ; } public void setCallback ( Callback callback ) { this . callback = callback ; } public void executeImpl ( boolean block ) throws AxisFault { if ( completed ) { throw new AxisFault ( Messages . getMessage ( "mepiscomplted" ) ) ; } MessageContext outMsgCtx = oc . getMessageContext ( WSDLConstants . MESSAGE_LABEL_OUT_VALUE ) ; if ( outMsgCtx == null ) { throw new AxisFault ( Messages . getMessage ( "outmsgctxnull" ) ) ; } ConfigurationContext cfgCtx = sc . getConfigurationContext ( ) ; outMsgCtx . setOptions ( options ) ; TargetResolver tr = cfgCtx . getAxisConfiguration ( ) . getTargetResolverChain ( ) ; if ( tr != null ) { tr . resolveTarget ( outMsgCtx ) ; } TransportOutDescription transportOut = options . getTransportOut ( ) ; if ( transportOut == null ) { EndpointReference toEPR = ( options . getTo ( ) != null ) ? options . getTo ( ) : outMsgCtx . getTo ( ) ; transportOut = ClientUtils . inferOutTransport ( cfgCtx . getAxisConfiguration ( ) , toEPR , outMsgCtx ) ; } outMsgCtx . setTransportOut ( transportOut ) ; if ( options . getTransportIn ( ) == null && outMsgCtx . getTransportIn ( ) == null ) { outMsgCtx . setTransportIn ( ClientUtils . inferInTransport ( cfgCtx . getAxisConfiguration ( ) , options , outMsgCtx ) ) ; } else if ( outMsgCtx . getTransportIn ( ) == null ) { outMsgCtx . setTransportIn ( options . getTransportIn ( ) ) ; } addReferenceParameters ( outMsgCtx ) ; if ( options . isUseSeparateListener ( ) ) { } else { SynapseCallbackReceiver callbackReceiver = ( SynapseCallbackReceiver ) axisOp . getMessageReceiver ( ) ; callbackReceiver . addCallback ( outMsgCtx . getMessageID ( ) , axisCallback ) ; send ( outMsgCtx ) ; } } private void send ( MessageContext msgctx ) throws AxisFault { MessageContext responseMessageContext = new MessageContext ( ) ; responseMessageContext . setMessageID ( msgctx . getMessageID ( ) ) ; responseMessageContext . setProperty ( SynapseConstants . RELATES_TO_FOR_POX , msgctx . getMessageID ( ) ) ; responseMessageContext . setOptions ( options ) ; addMessageContext ( responseMessageContext ) ; AxisEngine engine = new AxisEngine ( msgctx . getConfigurationContext ( ) ) ; engine . send ( msgctx ) ; if ( msgctx . getProperty ( MessageContext . TRANSPORT_IN ) != null ) { responseMessageContext . setOperationContext ( msgctx . getOperationContext ( ) ) ; responseMessageContext . setAxisMessage ( msgctx . getOperationContext ( ) . getAxisOperation ( ) . getMessage ( WSDLConstants . MESSAGE_LABEL_IN_VALUE ) ) ; responseMessageContext . setAxisService ( msgctx . getAxisService ( ) ) ; responseMessageContext . setServerSide ( true ) ; responseMessageContext . setProperty ( MessageContext . TRANSPORT_OUT , msgctx . getProperty ( MessageContext . TRANSPORT_OUT ) ) ; responseMessageContext . setProperty ( org . apache . axis2 . Constants . OUT_TRANSPORT_INFO , msgctx . getProperty ( org . apache . axis2 . Constants . OUT_TRANSPORT_INFO ) ) ; responseMessageContext . setProperty ( org . apache . synapse . SynapseConstants . ISRESPONSE_PROPERTY , Boolean . TRUE ) ; responseMessageContext . setTransportIn ( msgctx . getTransportIn ( ) ) ; responseMessageContext . setTransportOut ( msgctx . getTransportOut ( ) ) ; responseMessageContext . setDoingREST ( msgctx . isDoingREST ( ) ) ; responseMessageContext . setProperty ( MessageContext . TRANSPORT_IN , msgctx . getProperty ( MessageContext . TRANSPORT_IN ) ) ; responseMessageContext . setTransportIn ( msgctx . getTransportIn ( ) ) ; responseMessageContext . setTransportOut ( msgctx . getTransportOut ( ) ) ; responseMessageContext . setSoapAction ( "" ) ; if ( responseMessageContext . getEnvelope ( ) == null ) { SOAPEnvelope resenvelope = TransportUtils . createSOAPMessage ( responseMessageContext ) ; if ( resenvelope != null ) { responseMessageContext . setEnvelope ( resenvelope ) ; engine = new AxisEngine ( msgctx . getConfigurationContext ( ) ) ; engine . receive ( responseMessageContext ) ; if ( responseMessageContext . getReplyTo ( ) != null ) { sc . setTargetEPR ( responseMessageContext . getReplyTo ( ) ) ; } } else { throw new AxisFault ( Messages . getMessage ( "blockingInvocationExpectsResponse" ) ) ; } } } } } } 	1	['3', '5', '0', '6', '6', '3', '2', '5', '3', '2', '18', '0', '0', '0.99047619', '0.5', '0', '0', '5', '1', '0.3333', '2']
package org . apache . synapse . config . xml ; import org . apache . axiom . om . OMAbstractFactory ; import org . apache . axiom . om . OMElement ; import org . apache . axiom . om . OMFactory ; import org . apache . axiom . om . OMNamespace ; import org . apache . synapse . config . xml . endpoints . EndpointAbstractSerializer ; import org . apache . synapse . mediators . eip . Target ; public class TargetSerializer { private static final OMFactory fac = OMAbstractFactory . getOMFactory ( ) ; private static final OMNamespace synNS = fac . createOMNamespace ( XMLConfigConstants . SYNAPSE_NAMESPACE , "syn" ) ; private static final OMNamespace nullNS = fac . createOMNamespace ( XMLConfigConstants . NULL_NAMESPACE , "" ) ; public static OMElement serializeTarget ( Target target ) { OMElement targetElem = fac . createOMElement ( "target" , synNS ) ; if ( target . getTo ( ) != null ) { targetElem . addAttribute ( "to" , target . getTo ( ) , nullNS ) ; } if ( target . getSoapAction ( ) != null ) { targetElem . addAttribute ( "soapAction" , target . getSoapAction ( ) , nullNS ) ; } if ( target . getSequenceRef ( ) != null ) { targetElem . addAttribute ( "sequence" , target . getSequenceRef ( ) , nullNS ) ; } if ( target . getEndpointRef ( ) != null ) { targetElem . addAttribute ( "endpoint" , target . getEndpointRef ( ) , nullNS ) ; } if ( target . getSequence ( ) != null ) { SequenceMediatorSerializer serializer = new SequenceMediatorSerializer ( ) ; serializer . serializeAnonymousSequence ( targetElem , target . getSequence ( ) ) ; } if ( target . getEndpoint ( ) != null ) { targetElem . addChild ( EndpointAbstractSerializer . getEndpointSerializer ( target . getEndpoint ( ) ) . serializeEndpoint ( target . getEndpoint ( ) ) ) ; } return targetElem ; } } 	1	['3', '1', '0', '14', '19', '1', '2', '12', '2', '0.5', '93', '1', '0', '0', '0.5', '0', '0', '29', '7', '2.3333', '1']
package org . apache . synapse . config . xml ; import org . apache . synapse . mediators . eip . Target ; import org . apache . synapse . SynapseException ; import org . apache . synapse . config . xml . endpoints . EndpointAbstractFactory ; import org . apache . axiom . om . OMElement ; import org . apache . axiom . om . OMAttribute ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import javax . xml . namespace . QName ; public class TargetFactory { private static final Log log = LogFactory . getLog ( TargetFactory . class ) ; private static final QName TARGET_Q = new QName ( XMLConfigConstants . SYNAPSE_NAMESPACE , "target" ) ; public static Target createTarget ( OMElement elem ) { if ( ! TARGET_Q . equals ( elem . getQName ( ) ) ) { handleException ( "Element does not match with the target QName" ) ; } Target target = new Target ( ) ; OMAttribute toAttr = elem . getAttribute ( new QName ( XMLConfigConstants . NULL_NAMESPACE , "to" ) ) ; if ( toAttr != null && toAttr . getAttributeValue ( ) != null ) { target . setTo ( toAttr . getAttributeValue ( ) ) ; } OMAttribute soapAction = elem . getAttribute ( new QName ( XMLConfigConstants . NULL_NAMESPACE , "soapAction" ) ) ; if ( soapAction != null && soapAction . getAttributeValue ( ) != null ) { target . setSoapAction ( soapAction . getAttributeValue ( ) ) ; } OMAttribute sequenceAttr = elem . getAttribute ( new QName ( XMLConfigConstants . NULL_NAMESPACE , "sequence" ) ) ; if ( sequenceAttr != null && sequenceAttr . getAttributeValue ( ) != null ) { target . setSequenceRef ( sequenceAttr . getAttributeValue ( ) ) ; } OMAttribute endpointAttr = elem . getAttribute ( new QName ( XMLConfigConstants . NULL_NAMESPACE , "endpoint" ) ) ; if ( endpointAttr != null && endpointAttr . getAttributeValue ( ) != null ) { target . setEndpointRef ( endpointAttr . getAttributeValue ( ) ) ; } OMElement sequence = elem . getFirstChildWithName ( new QName ( XMLConfigConstants . SYNAPSE_NAMESPACE , "sequence" ) ) ; if ( sequence != null ) { SequenceMediatorFactory fac = new SequenceMediatorFactory ( ) ; target . setSequence ( fac . createAnonymousSequence ( sequence ) ) ; } OMElement endpoint = elem . getFirstChildWithName ( new QName ( XMLConfigConstants . SYNAPSE_NAMESPACE , "endpoint" ) ) ; if ( endpoint != null ) { target . setEndpoint ( EndpointAbstractFactory . getEndpointFactroy ( endpoint ) . createEndpoint ( endpoint , true ) ) ; } return target ; } private static void handleException ( String message ) { if ( log . isDebugEnabled ( ) ) { log . debug ( message ) ; } throw new SynapseException ( message ) ; } } 	1	['4', '1', '0', '13', '26', '2', '2', '11', '2', '0.5', '147', '1', '0', '0', '0.333333333', '0', '0', '35.25', '12', '3.5', '1']
package org . apache . synapse . config . xml ; import org . apache . axiom . om . OMElement ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import org . apache . synapse . Mediator ; import org . apache . synapse . config . xml . endpoints . EndpointSerializer ; import org . apache . synapse . config . xml . endpoints . EndpointAbstractSerializer ; import org . apache . synapse . mediators . builtin . SendMediator ; import org . apache . synapse . endpoints . Endpoint ; public class SendMediatorSerializer extends AbstractMediatorSerializer { public OMElement serializeMediator ( OMElement parent , Mediator m ) { if ( ! ( m instanceof SendMediator ) ) { handleException ( "Unsupported mediator passed in for serialization : " + m . getType ( ) ) ; } SendMediator mediator = ( SendMediator ) m ; OMElement send = fac . createOMElement ( "send" , synNS ) ; saveTracingState ( send , mediator ) ; Endpoint activeEndpoint = mediator . getEndpoint ( ) ; if ( activeEndpoint != null ) { EndpointSerializer serializer = EndpointAbstractSerializer . getEndpointSerializer ( activeEndpoint ) ; OMElement endpointElement = serializer . serializeEndpoint ( activeEndpoint ) ; send . addChild ( endpointElement ) ; } if ( parent != null ) { parent . addChild ( send ) ; } return send ; } public String getMediatorClassName ( ) { return SendMediator . class . getName ( ) ; } } 	1	['3', '2', '0', '10', '16', '3', '0', '10', '3', '2', '56', '0', '0', '0.75', '0.555555556', '0', '0', '17.66666667', '4', '1.6667', '1']
package org . apache . synapse . config . xml ; import org . apache . axiom . om . OMElement ; import org . apache . axiom . om . xpath . AXIOMXPath ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import org . apache . synapse . Mediator ; import org . apache . synapse . mediators . ext . POJOCommandMediator ; import javax . xml . namespace . QName ; import java . util . Iterator ; public class POJOCommandMediatorSerializer extends AbstractMediatorSerializer { public OMElement serializeMediator ( OMElement parent , Mediator m ) { if ( ! ( m instanceof POJOCommandMediator ) ) { handleException ( "Unsupported mediator passed in for serialization : " + m . getType ( ) ) ; } POJOCommandMediator mediator = ( POJOCommandMediator ) m ; OMElement pojoCommand = fac . createOMElement ( "pojoCommand" , synNS ) ; saveTracingState ( pojoCommand , mediator ) ; if ( mediator . getCommand ( ) != null && mediator . getCommand ( ) . getClass ( ) . getName ( ) != null ) { pojoCommand . addAttribute ( fac . createOMAttribute ( "name" , nullNS , mediator . getCommand ( ) . getName ( ) ) ) ; } else { handleException ( "Invalid POJO Command mediator. The command class name is required" ) ; } for ( Iterator itr = mediator . getStaticProps ( ) . keySet ( ) . iterator ( ) ; itr . hasNext ( ) ; ) { String propName = ( String ) itr . next ( ) ; String value = ( String ) mediator . getStaticProps ( ) . get ( propName ) ; OMElement prop = fac . createOMElement ( PROP_Q ) ; prop . addAttribute ( fac . createOMAttribute ( "name" , nullNS , propName ) ) ; prop . addAttribute ( fac . createOMAttribute ( "value" , nullNS , value ) ) ; pojoCommand . addChild ( prop ) ; } for ( Iterator itr = mediator . getDynamicProps ( ) . keySet ( ) . iterator ( ) ; itr . hasNext ( ) ; ) { String propName = ( String ) itr . next ( ) ; AXIOMXPath exprn = ( AXIOMXPath ) mediator . getDynamicProps ( ) . get ( propName ) ; OMElement prop = fac . createOMElement ( PROP_Q ) ; prop . addAttribute ( fac . createOMAttribute ( "name" , nullNS , propName ) ) ; prop . addAttribute ( fac . createOMAttribute ( "expression" , nullNS , exprn . toString ( ) ) ) ; serializeNamespaces ( prop , exprn ) ; pojoCommand . addChild ( prop ) ; } if ( parent != null ) { parent . addChild ( pojoCommand ) ; } return pojoCommand ; } public String getMediatorClassName ( ) { return POJOCommandMediator . class . getName ( ) ; } } 	1	['3', '2', '0', '9', '27', '3', '0', '9', '3', '2', '152', '0', '0', '0.75', '0.555555556', '0', '0', '49.66666667', '7', '2.6667', '1']
package org . apache . synapse . core . axis2 ; import org . apache . axis2 . AxisFault ; import org . apache . axis2 . Constants ; import org . apache . axis2 . context . ConfigurationContext ; import org . apache . axis2 . description . * ; import org . apache . axis2 . engine . AxisConfiguration ; import org . apache . axis2 . modules . Module ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import org . apache . log4j . MDC ; import org . apache . neethi . Assertion ; import org . apache . neethi . Policy ; import org . apache . synapse . SynapseConstants ; import org . apache . synapse . SynapseException ; import org . apache . synapse . config . SynapseConfiguration ; import org . apache . synapse . config . SynapseConfigurationBuilder ; import java . net . InetAddress ; import java . net . UnknownHostException ; import java . util . Iterator ; import java . util . List ; import java . util . ArrayList ; import java . util . Date ; public class SynapseInitializationModule implements Module { private static final Log log = LogFactory . getLog ( SynapseInitializationModule . class ) ; private SynapseConfiguration synCfg ; public void init ( ConfigurationContext configurationContext , AxisModule axisModule ) throws AxisFault { log . info ( "Initializing Synapse at : " + new Date ( ) ) ; try { InetAddress addr = InetAddress . getLocalHost ( ) ; if ( addr != null ) { String ipAddr = addr . getHostAddress ( ) ; if ( ipAddr != null ) { MDC . put ( "ip" , ipAddr ) ; } String hostname = addr . getHostName ( ) ; if ( hostname == null ) { hostname = ipAddr ; } MDC . put ( "host" , hostname ) ; } } catch ( UnknownHostException e ) { log . warn ( "Unable to determine hostname or IP address of the server for logging" , e ) ; } log . info ( "Loading mediator extensions..." ) ; configurationContext . getAxisConfiguration ( ) . getConfigurator ( ) . loadServices ( ) ; log . info ( "Initializing the Synapse configuration ..." ) ; synCfg = getConfiguration ( configurationContext ) ; log . info ( "Deploying the Synapse service.." ) ; AxisConfiguration axisCfg = configurationContext . getAxisConfiguration ( ) ; AxisService synapseService = new AxisService ( SynapseConstants . SYNAPSE_SERVICE_NAME ) ; AxisOperation mediateOperation = new InOutAxisOperation ( SynapseConstants . SYNAPSE_OPERATION_NAME ) ; mediateOperation . setMessageReceiver ( new SynapseMessageReceiver ( ) ) ; synapseService . addOperation ( mediateOperation ) ; List transports = new ArrayList ( ) ; transports . add ( Constants . TRANSPORT_HTTP ) ; transports . add ( Constants . TRANSPORT_HTTPS ) ; synapseService . setExposedTransports ( transports ) ; axisCfg . addService ( synapseService ) ; log . info ( "Initializing Sandesha 2..." ) ; AxisModule sandeshaAxisModule = configurationContext . getAxisConfiguration ( ) . getModule ( SynapseConstants . SANDESHA2_MODULE_NAME ) ; if ( sandeshaAxisModule != null ) { Module sandesha2 = sandeshaAxisModule . getModule ( ) ; sandesha2 . init ( configurationContext , sandeshaAxisModule ) ; } log . info ( "Deploying Proxy services..." ) ; Iterator iter = synCfg . getProxyServices ( ) . iterator ( ) ; while ( iter . hasNext ( ) ) { ProxyService proxy = ( ProxyService ) iter . next ( ) ; proxy . buildAxisService ( synCfg , axisCfg ) ; log . info ( "Deployed Proxy service : " + proxy . getName ( ) ) ; if ( ! proxy . isStartOnLoad ( ) ) { proxy . stop ( synCfg ) ; } } log . info ( "Synapse initialized successfully...!" ) ; } private static SynapseConfiguration getConfiguration ( ConfigurationContext cfgCtx ) { cfgCtx . setProperty ( "addressing.validateAction" , Boolean . FALSE ) ; AxisConfiguration axisConfiguration = cfgCtx . getAxisConfiguration ( ) ; SynapseConfiguration synapseConfiguration ; String config = System . getProperty ( SynapseConstants . SYNAPSE_XML ) ; if ( config != null ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "System property '" + SynapseConstants . SYNAPSE_XML + "' specifies Synapse configuration as " + config ) ; } synapseConfiguration = SynapseConfigurationBuilder . getConfiguration ( config ) ; } else { log . warn ( "System property '" + SynapseConstants . SYNAPSE_XML + "' is not specified. Using default configuration.." ) ; synapseConfiguration = SynapseConfigurationBuilder . getDefaultConfiguration ( ) ; } synapseConfiguration . setAxisConfiguration ( cfgCtx . getAxisConfiguration ( ) ) ; Parameter synapseCtxParam = new Parameter ( SynapseConstants . SYNAPSE_CONFIG , null ) ; synapseCtxParam . setValue ( synapseConfiguration ) ; MessageContextCreatorForAxis2 . setSynConfig ( synapseConfiguration ) ; Parameter synapseEnvParam = new Parameter ( SynapseConstants . SYNAPSE_ENV , null ) ; Axis2SynapseEnvironment synEnv = new Axis2SynapseEnvironment ( cfgCtx , synapseConfiguration ) ; synapseEnvParam . setValue ( synEnv ) ; MessageContextCreatorForAxis2 . setSynEnv ( synEnv ) ; try { axisConfiguration . addParameter ( synapseCtxParam ) ; axisConfiguration . addParameter ( synapseEnvParam ) ; } catch ( AxisFault e ) { String msg = "Could not set parameters '" + SynapseConstants . SYNAPSE_CONFIG + "' and/or '" + SynapseConstants . SYNAPSE_ENV + "'to the Axis2 configuration : " + e . getMessage ( ) ; log . fatal ( msg , e ) ; throw new SynapseException ( msg , e ) ; } synapseConfiguration . init ( synEnv ) ; return synapseConfiguration ; } public void engageNotify ( AxisDescription axisDescription ) throws AxisFault { } public boolean canSupportAssertion ( Assertion assertion ) { return false ; } public void applyPolicy ( Policy policy , AxisDescription axisDescription ) throws AxisFault { } public void shutdown ( ConfigurationContext configurationContext ) throws AxisFault { synCfg . destroy ( ) ; } } 	1	['8', '1', '0', '26', '63', '20', '0', '26', '6', '0.785714286', '281', '1', '1', '0', '0.333333333', '0', '0', '33.875', '3', '1', '1']
package org . apache . synapse . util ; import org . apache . axiom . om . OMDataSource ; import org . apache . axiom . om . OMOutputFormat ; import org . apache . axiom . om . OMFactory ; import org . apache . axiom . om . OMAbstractFactory ; import org . apache . axiom . om . impl . llom . OMSourcedElementImpl ; import org . apache . axiom . om . impl . serialize . StreamingOMSerializer ; import org . apache . axiom . om . util . StAXUtils ; import org . apache . synapse . SynapseException ; import org . apache . synapse . transport . base . BaseConstants ; import javax . activation . DataSource ; import javax . activation . FileDataSource ; import javax . xml . stream . XMLStreamException ; import javax . xml . stream . XMLStreamReader ; import javax . xml . stream . XMLStreamWriter ; import java . io . * ; public class TextFileDataSource implements OMDataSource { private static final byte [ ] prefix = "<text xmlns=\"http://ws.apache.org/commons/ns/payload\">" . getBytes ( ) ; private static final byte [ ] suffix = "</text>" . getBytes ( ) ; private static final byte [ ] empty = "<text xmlns=\"http://ws.apache.org/commons/ns/payload\"/>" . getBytes ( ) ; private InputStream is = null ; private int i = 0 , j = 0 ; public TextFileDataSource ( DataSource ds ) { try { this . is = ds . getInputStream ( ) ; } catch ( IOException e ) { throw new SynapseException ( "Unable to get an InputStream for DataSource : " + ds . getName ( ) , e ) ; } } public void serialize ( OutputStream out , OMOutputFormat format ) throws XMLStreamException { try { byte [ ] buf = new byte [ 4096 ] ; int len ; while ( ( len = is . read ( buf ) ) > 0 ) { out . write ( buf , 0 , len ) ; } } catch ( IOException e ) { throw new SynapseException ( "Error serializing TextFileDataSource to an OutputStream" , e ) ; } } public void serialize ( Writer writer , OMOutputFormat format ) throws XMLStreamException { try { writer . write ( new String ( empty ) ) ; } catch ( IOException e ) { throw new XMLStreamException ( e ) ; } } public void serialize ( XMLStreamWriter xmlWriter ) throws XMLStreamException { StreamingOMSerializer serializer = new StreamingOMSerializer ( ) ; serializer . serialize ( getReader ( ) , xmlWriter ) ; } public XMLStreamReader getReader ( ) throws XMLStreamException { return StAXUtils . createXMLStreamReader ( getInputStream ( ) ) ; } private InputStream getInputStream ( ) { return new InputStream ( ) { public int read ( byte b [ ] ) throws IOException { return read ( b , 0 , b . length ) ; } public int read ( byte b [ ] , int off , int len ) throws IOException { int pos = off ; if ( i < prefix . length ) { while ( i < prefix . length && pos - off < len ) { b [ pos ++ ] = prefix [ i ++ ] ; } return pos - off ; } int ret = is . read ( b , pos , len - pos ) ; if ( ret == - 1 && j < suffix . length ) { while ( j < suffix . length && pos - off < len ) { b [ pos ++ ] = suffix [ j ++ ] ; } return pos - off ; } return ret ; } public int read ( ) throws IOException { if ( i < prefix . length ) { while ( i < prefix . length ) { return prefix [ i ++ ] ; } } int ret = is . read ( ) ; if ( ret == - 1 && j < suffix . length ) { while ( j < suffix . length ) { return suffix [ j ++ ] ; } } return ret ; } } ; } public static void main ( String [ ] args ) throws Exception { TextFileDataSource textFileDataSource = new TextFileDataSource ( new FileDataSource ( "/home/asankha/code/synapse/repository/conf/sample/resources/transform/message.xml" ) ) ; OMFactory fac = OMAbstractFactory . getOMFactory ( ) ; OMSourcedElementImpl element = new OMSourcedElementImpl ( BaseConstants . DEFAULT_TEXT_WRAPPER , fac , textFileDataSource ) ; element . serializeAndConsume ( new FileOutputStream ( "/tmp/out.txt" ) ) ; element . serialize ( System . out ) ; } } 	1	['15', '1', '0', '11', '38', '81', '2', '10', '6', '0.857142857', '177', '1', '0', '0', '0.160714286', '0', '0', '10.4', '1', '0.8667', '5']
package org . apache . synapse . mediators . transform ; import org . apache . axiom . om . OMAbstractFactory ; import org . apache . axiom . om . OMElement ; import org . apache . axiom . om . OMNode ; import org . apache . axiom . om . OMFactory ; import org . apache . axiom . om . impl . builder . StAXOMBuilder ; import org . apache . axiom . om . impl . dom . DOOMAbstractFactory ; import org . apache . axiom . om . impl . dom . jaxp . DocumentBuilderFactoryImpl ; import org . apache . axiom . om . impl . llom . OMTextImpl ; import org . apache . axiom . om . impl . llom . OMSourcedElementImpl ; import org . apache . axiom . om . util . ElementHelper ; import org . apache . axiom . om . xpath . AXIOMXPath ; import org . apache . axiom . soap . SOAP11Constants ; import org . apache . axiom . soap . SOAP12Constants ; import org . apache . synapse . MessageContext ; import org . apache . synapse . SynapseException ; import org . apache . synapse . util . FixedByteArrayOutputStream ; import org . apache . synapse . util . TextFileDataSource ; import org . apache . synapse . core . axis2 . Axis2MessageContext ; import org . apache . synapse . config . Entry ; import org . apache . synapse . config . SynapseConfigUtils ; import org . apache . synapse . mediators . AbstractMediator ; import org . apache . synapse . mediators . MediatorProperty ; import org . apache . synapse . transport . base . BaseConstants ; import org . jaxen . JaxenException ; import org . w3c . dom . Element ; import org . w3c . dom . Node ; import javax . xml . parsers . ParserConfigurationException ; import javax . xml . stream . XMLOutputFactory ; import javax . xml . stream . XMLStreamException ; import javax . xml . stream . XMLStreamWriter ; import javax . xml . transform . * ; import javax . xml . transform . dom . DOMResult ; import javax . xml . transform . dom . DOMSource ; import javax . xml . transform . stream . StreamResult ; import javax . xml . transform . stream . StreamSource ; import javax . xml . namespace . QName ; import javax . activation . FileDataSource ; import javax . activation . DataHandler ; import java . io . * ; import java . util . ArrayList ; import java . util . List ; import java . util . Properties ; public class XSLTMediator extends AbstractMediator { private static final int BYTE_ARRAY_SIZE = 8192 ; public static final String USE_DOM_SOURCE_AND_RESULTS = "http://ws.apache.org/ns/synapse/transform/feature/dom" ; private String xsltKey = null ; private String sourceXPathString = null ; private AXIOMXPath source = null ; private List properties = new ArrayList ( ) ; private List explicitFeatures = new ArrayList ( ) ; private Templates cachedTemplates = null ; private final TransformerFactory transFact = TransformerFactory . newInstance ( ) ; private final Object transformerLock = new Object ( ) ; private boolean useDOMSourceAndResults = false ; public static final String DEFAULT_XPATH = "s11:Body/child::*[position()=1] | " + "s12:Body/child::*[position()=1]" ; public XSLTMediator ( ) { try { this . source = new AXIOMXPath ( DEFAULT_XPATH ) ; this . source . addNamespace ( "s11" , SOAP11Constants . SOAP_ENVELOPE_NAMESPACE_URI ) ; this . source . addNamespace ( "s12" , SOAP12Constants . SOAP_ENVELOPE_NAMESPACE_URI ) ; } catch ( JaxenException e ) { String msg = "Error creating default source XPath expression : " + DEFAULT_XPATH ; log . error ( msg , e ) ; throw new SynapseException ( msg , e ) ; } } public boolean mediate ( MessageContext synCtx ) { boolean traceOn = isTraceOn ( synCtx ) ; boolean traceOrDebugOn = isTraceOrDebugOn ( traceOn ) ; if ( traceOrDebugOn ) { traceOrDebug ( traceOn , "Start : XSLT mediator" ) ; if ( traceOn && trace . isTraceEnabled ( ) ) { trace . trace ( "Message : " + synCtx . getEnvelope ( ) ) ; } } try { performXLST ( synCtx , traceOrDebugOn , traceOn ) ; } catch ( Exception e ) { handleException ( "Unable to perform XSLT transformation using : " + xsltKey + " against source XPath : " + ( sourceXPathString == null ? DEFAULT_XPATH : " source XPath : " + sourceXPathString ) , e , synCtx ) ; } if ( traceOrDebugOn ) { traceOrDebug ( traceOn , "End : XSLT mediator" ) ; } return true ; } private void performXLST ( MessageContext synCtx , boolean traceOrDebugOn , boolean traceOn ) { boolean reCreate = false ; OMNode sourceNode = getTransformSource ( synCtx ) ; OutputStream osForTarget = null ; InputStream isForSource = null ; ByteArrayOutputStream baosForTarget = new FixedByteArrayOutputStream ( BYTE_ARRAY_SIZE ) ; File tempTargetFile = null ; File tempSourceFile = null ; if ( traceOrDebugOn ) { trace . trace ( "Transformation source : " + sourceNode . toString ( ) ) ; } Source transformSrc = null ; Result transformTgt = null ; if ( useDOMSourceAndResults ) { if ( traceOrDebugOn ) { traceOrDebug ( traceOn , "Using a DOMSource for transformation" ) ; } transformSrc = new DOMSource ( ( ( Element ) ElementHelper . importOMElement ( ( OMElement ) sourceNode , DOOMAbstractFactory . getOMFactory ( ) ) ) . getOwnerDocument ( ) ) ; DocumentBuilderFactoryImpl . setDOOMRequired ( true ) ; try { transformTgt = new DOMResult ( DocumentBuilderFactoryImpl . newInstance ( ) . newDocumentBuilder ( ) . newDocument ( ) ) ; } catch ( ParserConfigurationException e ) { handleException ( "Error creating a DOMResult for the transformation," + " Consider setting optimization feature : " + USE_DOM_SOURCE_AND_RESULTS + " off" , e , synCtx ) ; } } else { if ( traceOrDebugOn ) { traceOrDebug ( traceOn , "Using byte array serialization for transformation" ) ; } try { ByteArrayOutputStream baosForSource = new FixedByteArrayOutputStream ( BYTE_ARRAY_SIZE ) ; XMLStreamWriter xsWriterForSource = XMLOutputFactory . newInstance ( ) . createXMLStreamWriter ( baosForSource ) ; sourceNode . serialize ( xsWriterForSource ) ; isForSource = new ByteArrayInputStream ( baosForSource . toByteArray ( ) ) ; transformSrc = new StreamSource ( isForSource ) ; transformTgt = new StreamResult ( baosForTarget ) ; } catch ( XMLStreamException e ) { handleException ( "Error creating a StreamResult for the transformation" , e , synCtx ) ; } catch ( SynapseException x ) { if ( traceOrDebugOn ) { traceOrDebug ( traceOn , "Error creating a StreamResult using a byte array" + " - attempting using temporary files for serialization" ) ; } OutputStream osForSource = null ; try { tempSourceFile = File . createTempFile ( "xs_" , ".xml" ) ; tempTargetFile = File . createTempFile ( "xt_" , ".xml" ) ; osForSource = new FileOutputStream ( tempSourceFile ) ; osForTarget = new FileOutputStream ( tempTargetFile ) ; XMLStreamWriter xsWriterForSource = XMLOutputFactory . newInstance ( ) . createXMLStreamWriter ( osForSource ) ; sourceNode . serialize ( xsWriterForSource ) ; transformSrc = new StreamSource ( tempSourceFile ) ; transformTgt = new StreamResult ( osForTarget ) ; } catch ( XMLStreamException e ) { handleException ( "Error creating a StreamResult for the transformation" , e , synCtx ) ; } catch ( IOException e ) { handleException ( "Error using a temporary file/s for the transformation" , e , synCtx ) ; } finally { try { osForSource . close ( ) ; } catch ( IOException ignore ) { } } } } if ( transformTgt == null ) { if ( traceOrDebugOn ) { traceOrDebug ( traceOn , "Was unable to get a javax.xml.transform.Result created" ) ; } return ; } Entry dp = synCtx . getConfiguration ( ) . getEntryDefinition ( xsltKey ) ; if ( dp != null && dp . isDynamic ( ) ) { if ( ! dp . isCached ( ) || dp . isExpired ( ) ) { reCreate = true ; } } synchronized ( transformerLock ) { if ( reCreate || cachedTemplates == null ) { try { cachedTemplates = transFact . newTemplates ( SynapseConfigUtils . getStreamSource ( synCtx . getEntry ( xsltKey ) ) ) ; } catch ( TransformerConfigurationException e ) { handleException ( "Error creating XSLT transformer using : " + xsltKey , e , synCtx ) ; } } } try { Transformer transformer = cachedTemplates . newTransformer ( ) ; if ( ! properties . isEmpty ( ) ) { for ( int i = 0 ; i < properties . size ( ) ; i ++ ) { MediatorProperty prop = ( MediatorProperty ) properties . get ( i ) ; if ( prop != null ) { if ( prop . getValue ( ) != null ) { transformer . setParameter ( prop . getName ( ) , prop . getValue ( ) ) ; } else { transformer . setParameter ( prop . getName ( ) , Axis2MessageContext . getStringValue ( prop . getExpression ( ) , synCtx ) ) ; } } } } try { transformer . transform ( transformSrc , transformTgt ) ; } catch ( TransformerException x ) { try { tempTargetFile = File . createTempFile ( "xt_" , ".xml" ) ; osForTarget = new FileOutputStream ( tempTargetFile ) ; transformTgt = new StreamResult ( osForTarget ) ; isForSource . reset ( ) ; transformer . reset ( ) ; transformer . transform ( transformSrc , transformTgt ) ; } catch ( IOException e ) { handleException ( "Error using a temporary file/s for the transformation" , e , synCtx ) ; } } if ( traceOrDebugOn ) { traceOrDebug ( traceOn , "Transformation completed - processing result" ) ; } if ( tempSourceFile != null ) { boolean deleted = tempSourceFile . delete ( ) ; if ( ! deleted ) { tempSourceFile . deleteOnExit ( ) ; } } OMElement result = null ; if ( transformTgt instanceof DOMResult ) { Node node = ( ( DOMResult ) transformTgt ) . getNode ( ) ; if ( node == null ) { if ( traceOrDebugOn ) { traceOrDebug ( traceOn , ( "Transformation result (DOMResult) was null" ) ) ; } return ; } Node resultNode = node . getFirstChild ( ) ; if ( resultNode == null ) { if ( traceOrDebugOn ) { traceOrDebug ( traceOn , ( "Transformation result (DOMResult) was empty" ) ) ; } return ; } result = ElementHelper . importOMElement ( ( OMElement ) resultNode , OMAbstractFactory . getOMFactory ( ) ) ; } else { if ( tempTargetFile != null ) { try { StAXOMBuilder builder = new StAXOMBuilder ( new FileInputStream ( tempTargetFile ) ) ; result = builder . getDocumentElement ( ) ; } catch ( XMLStreamException e ) { handleException ( "Error building result element from XSLT transformation" , e , synCtx ) ; } catch ( Exception e ) { result = handleNonXMLResult ( tempTargetFile , traceOrDebugOn , traceOn ) ; } finally { boolean deleted = tempTargetFile . delete ( ) ; if ( ! deleted ) { tempTargetFile . deleteOnExit ( ) ; } } } else { try { StAXOMBuilder builder = new StAXOMBuilder ( new ByteArrayInputStream ( baosForTarget . toByteArray ( ) ) ) ; result = builder . getDocumentElement ( ) ; } catch ( XMLStreamException e ) { handleException ( "Error building result element from XSLT transformation" , e , synCtx ) ; } catch ( Exception e ) { result = handleNonXMLResult ( baosForTarget . toString ( ) , traceOrDebugOn , traceOn ) ; } } } if ( result == null ) { if ( traceOrDebugOn ) { traceOrDebug ( traceOn , "Transformation result was null" ) ; } return ; } else { if ( traceOn && trace . isTraceEnabled ( ) ) { trace . trace ( "Transformation result : " + result . toString ( ) ) ; } } if ( traceOrDebugOn ) { traceOrDebug ( traceOn , "Replace source node with result" ) ; } sourceNode . insertSiblingAfter ( result ) ; sourceNode . detach ( ) ; } catch ( TransformerException e ) { handleException ( "Error performing XSLT transformation using : " + xsltKey , e , synCtx ) ; } } private OMNode getTransformSource ( MessageContext synCtx ) { try { Object o = source . evaluate ( synCtx . getEnvelope ( ) ) ; if ( o instanceof OMNode ) { return ( OMNode ) o ; } else if ( o instanceof List && ! ( ( List ) o ) . isEmpty ( ) ) { return ( OMNode ) ( ( List ) o ) . get ( 0 ) ; } else { handleException ( "The evaluation of the XPath expression " + source + " did not result in an OMNode" , synCtx ) ; } } catch ( JaxenException e ) { handleException ( "Error evaluating XPath expression : " + source , e , synCtx ) ; } return null ; } public AXIOMXPath getSource ( ) { return source ; } public void setSource ( AXIOMXPath source ) { this . source = source ; } public String getXsltKey ( ) { return xsltKey ; } public void setXsltKey ( String xsltKey ) { this . xsltKey = xsltKey ; } public void addProperty ( MediatorProperty p ) { properties . add ( p ) ; } public void addFeature ( String featureName , boolean isFeatureEnable ) { try { MediatorProperty mp = new MediatorProperty ( ) ; mp . setName ( featureName ) ; if ( isFeatureEnable ) { mp . setValue ( "true" ) ; } else { mp . setValue ( "false" ) ; } explicitFeatures . add ( mp ) ; if ( USE_DOM_SOURCE_AND_RESULTS . equals ( featureName ) ) { useDOMSourceAndResults = isFeatureEnable ; } else { transFact . setFeature ( featureName , isFeatureEnable ) ; } } catch ( TransformerConfigurationException e ) { String msg = "Error occured when setting features to the TransformerFactory" ; log . error ( msg , e ) ; throw new SynapseException ( msg , e ) ; } } private OMElement handleNonXMLResult ( File file , boolean traceOrDebugOn , boolean traceOn ) { OMFactory fac = OMAbstractFactory . getOMFactory ( ) ; OMElement wrapper = null ; if ( traceOrDebugOn ) { traceOrDebug ( traceOn , "Processing non SOAP/XML (text) transformation result" ) ; } if ( traceOn && trace . isTraceEnabled ( ) ) { trace . trace ( "Wrapping text transformation result from : " + file ) ; } if ( file != null ) { TextFileDataSource txtFileDS = new TextFileDataSource ( new FileDataSource ( file ) ) ; wrapper = new OMSourcedElementImpl ( BaseConstants . DEFAULT_TEXT_WRAPPER , fac , txtFileDS ) ; } return wrapper ; } private OMElement handleNonXMLResult ( String textPayload , boolean traceOrDebugOn , boolean traceOn ) { OMFactory fac = OMAbstractFactory . getOMFactory ( ) ; OMElement wrapper = null ; if ( traceOrDebugOn ) { traceOrDebug ( traceOn , "Processing non SOAP/XML (text) transformation result" ) ; } if ( traceOn && trace . isTraceEnabled ( ) ) { trace . trace ( "Wrapping text transformation result : " + textPayload ) ; } if ( textPayload != null ) { OMTextImpl textData = ( OMTextImpl ) fac . createOMText ( textPayload ) ; wrapper = fac . createOMElement ( BaseConstants . DEFAULT_TEXT_WRAPPER , null ) ; wrapper . addChild ( textData ) ; } return wrapper ; } public List getFeatures ( ) { return explicitFeatures ; } public void addAllProperties ( List list ) { properties . addAll ( list ) ; } public List getProperties ( ) { return properties ; } public void setSourceXPathString ( String sourceXPathString ) { this . sourceXPathString = sourceXPathString ; } } 	1	['16', '2', '0', '30', '103', '48', '2', '28', '12', '0.866666667', '932', '0.833333333', '0', '0.464285714', '0.2421875', '0', '0', '56.5', '33', '4.0625', '7']
package org . apache . synapse . mediators . builtin ; import java . util . HashMap ; import java . util . Iterator ; import java . util . Map ; import java . util . Collections ; import org . apache . axiom . om . OMElement ; import org . apache . axiom . om . xpath . AXIOMXPath ; import org . apache . synapse . util . UUIDGenerator ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import org . apache . synapse . SynapseConstants ; import org . apache . synapse . MessageContext ; import org . apache . synapse . SynapseException ; import org . apache . synapse . config . Entry ; import org . apache . synapse . config . xml . XMLConfigConstants ; import org . apache . synapse . core . axis2 . Axis2MessageContext ; import org . apache . synapse . mediators . AbstractMediator ; import org . apache . sandesha2 . client . SandeshaClientConstants ; import org . jaxen . JaxenException ; public class RMSequenceMediator extends AbstractMediator { private AXIOMXPath correlation = null ; private AXIOMXPath lastMessage = null ; private Boolean single = null ; private String version = null ; private static final String WSRM_SpecVersion_1_0 = "Spec_2005_02" ; private static final String WSRM_SpecVersion_1_1 = "Spec_2007_02" ; private static final long SEQUENCE_EXPIRY_TIME = 300000 ; private static Map sequenceMap = Collections . synchronizedMap ( new HashMap ( ) ) ; public boolean mediate ( MessageContext synCtx ) { boolean traceOn = isTraceOn ( synCtx ) ; boolean traceOrDebugOn = isTraceOrDebugOn ( traceOn ) ; if ( traceOrDebugOn ) { traceOrDebug ( traceOn , "Start : RMSequence mediator" ) ; if ( traceOn && trace . isTraceEnabled ( ) ) { trace . trace ( "Message : " + synCtx . getEnvelope ( ) ) ; } } if ( ! ( synCtx instanceof Axis2MessageContext ) ) { if ( traceOrDebugOn ) { traceOrDebug ( traceOn , "Only axis2 message contexts are supported" ) ; } } else { Axis2MessageContext axis2MessageCtx = ( Axis2MessageContext ) synCtx ; org . apache . axis2 . context . MessageContext orgMessageCtx = axis2MessageCtx . getAxis2MessageContext ( ) ; cleanupSequenceMap ( ) ; String version = getVersionValue ( ) ; orgMessageCtx . getOptions ( ) . setProperty ( SynapseConstants . SANDESHA_SPEC_VERSION , version ) ; if ( isSingle ( ) ) { String sequenceID = UUIDGenerator . getUUID ( ) ; String offeredSeqID = UUIDGenerator . getUUID ( ) ; orgMessageCtx . getOptions ( ) . setProperty ( SynapseConstants . SANDESHA_SEQUENCE_KEY , sequenceID ) ; orgMessageCtx . getOptions ( ) . setProperty ( SandeshaClientConstants . OFFERED_SEQUENCE_ID , offeredSeqID ) ; orgMessageCtx . getOptions ( ) . setProperty ( SynapseConstants . SANDESHA_LAST_MESSAGE , "true" ) ; if ( traceOrDebugOn ) { traceOrDebug ( traceOn , "Using WS-RM version " + version + " and a single message sequence : " + sequenceID + " and offering sequence : " + offeredSeqID ) ; } } else { String correlationValue = getCorrelationValue ( synCtx ) ; boolean lastMessage = isLastMessage ( synCtx ) ; String offeredSeqID = null ; if ( ! sequenceMap . containsKey ( correlationValue ) ) { offeredSeqID = UUIDGenerator . getUUID ( ) ; orgMessageCtx . getOptions ( ) . setProperty ( SandeshaClientConstants . OFFERED_SEQUENCE_ID , offeredSeqID ) ; } String sequenceID = retrieveSequenceID ( correlationValue ) ; orgMessageCtx . getOptions ( ) . setProperty ( SynapseConstants . SANDESHA_SEQUENCE_KEY , sequenceID ) ; if ( lastMessage ) { orgMessageCtx . getOptions ( ) . setProperty ( SynapseConstants . SANDESHA_LAST_MESSAGE , "true" ) ; sequenceMap . remove ( correlationValue ) ; } if ( traceOrDebugOn ) { traceOrDebug ( traceOn , "Correlation value : " + correlationValue + " last message = " + lastMessage + " using sequence : " + sequenceID + ( offeredSeqID != null ? " offering sequence : " + offeredSeqID : "" ) ) ; } } } if ( traceOrDebugOn ) { traceOrDebug ( traceOn , "End : RMSequence mediator" ) ; } return true ; } private String retrieveSequenceID ( String correlationValue ) { String sequenceID = null ; if ( ! sequenceMap . containsKey ( correlationValue ) ) { sequenceID = UUIDGenerator . getUUID ( ) ; if ( log . isDebugEnabled ( ) ) { log . debug ( "setting sequenceID " + sequenceID + " for correlation " + correlationValue ) ; } Entry sequenceEntry = new Entry ( ) ; sequenceEntry . setValue ( sequenceID ) ; sequenceEntry . setExpiryTime ( System . currentTimeMillis ( ) + SEQUENCE_EXPIRY_TIME ) ; sequenceMap . put ( correlationValue , sequenceEntry ) ; } else { sequenceID = ( String ) ( ( Entry ) sequenceMap . get ( correlationValue ) ) . getValue ( ) ; if ( log . isDebugEnabled ( ) ) { log . debug ( "got sequenceID " + sequenceID + " for correlation " + correlationValue ) ; } } return sequenceID ; } private String getCorrelationValue ( MessageContext smc ) { OMElement node = null ; try { node = ( OMElement ) getCorrelation ( ) . selectSingleNode ( smc . getEnvelope ( ) ) ; if ( node != null ) { return node . getText ( ) ; } else { handleException ( "XPath expression : " + getCorrelation ( ) + " did not return any node" , smc ) ; } } catch ( JaxenException e ) { handleException ( "Error evaluating XPath expression to determine correlation : " + getCorrelation ( ) , e , smc ) ; } return null ; } private String getVersionValue ( ) { if ( XMLConfigConstants . SEQUENCE_VERSION_1_1 . equals ( getVersion ( ) ) ) { return WSRM_SpecVersion_1_1 ; } else { return WSRM_SpecVersion_1_0 ; } } private boolean isLastMessage ( MessageContext smc ) { if ( getLastMessage ( ) == null ) { return false ; } else { try { return getLastMessage ( ) . booleanValueOf ( smc . getEnvelope ( ) ) ; } catch ( JaxenException e ) { handleException ( "Error evaluating XPath expression to determine if last message : " + getLastMessage ( ) , e , smc ) ; } return false ; } } private synchronized void cleanupSequenceMap ( ) { Iterator itKey = sequenceMap . keySet ( ) . iterator ( ) ; while ( itKey . hasNext ( ) ) { Object key = itKey . next ( ) ; Entry sequenceEntry = ( Entry ) sequenceMap . get ( key ) ; if ( sequenceEntry . isExpired ( ) ) { sequenceMap . remove ( key ) ; } } } public boolean isSingle ( ) { if ( getSingle ( ) != null && getSingle ( ) . booleanValue ( ) ) { return true ; } else { return false ; } } public AXIOMXPath getCorrelation ( ) { return correlation ; } public void setCorrelation ( AXIOMXPath correlation ) { this . correlation = correlation ; } public AXIOMXPath getLastMessage ( ) { return lastMessage ; } public void setLastMessage ( AXIOMXPath lastMessage ) { this . lastMessage = lastMessage ; } public Boolean getSingle ( ) { return single ; } public void setSingle ( Boolean single ) { this . single = single ; } public String getVersion ( ) { return version ; } public void setVersion ( String version ) { this . version = version ; } } 	1	['17', '2', '0', '15', '58', '100', '2', '13', '11', '0.90625', '446', '1', '0', '0.464285714', '0.3', '0', '0', '24.76470588', '12', '2.0588', '1']
package org . apache . synapse . mediators . ext ; import org . apache . synapse . mediators . AbstractMediator ; import org . apache . synapse . * ; import org . apache . synapse . core . axis2 . Axis2MessageContext ; import org . apache . axiom . om . xpath . AXIOMXPath ; import java . util . * ; import java . lang . reflect . Method ; import java . lang . reflect . InvocationTargetException ; public class POJOCommandMediator extends AbstractMediator { private Class command = null ; private Map staticProps = new HashMap ( ) ; private Map dynamicProps = new HashMap ( ) ; public boolean mediate ( MessageContext synCtx ) { boolean traceOn = isTraceOn ( synCtx ) ; boolean traceOrDebugOn = isTraceOrDebugOn ( traceOn ) ; if ( traceOrDebugOn ) { traceOrDebug ( traceOn , "Start : POJOCommand mediator" ) ; if ( traceOn && trace . isTraceEnabled ( ) ) { trace . trace ( "Message : " + synCtx . getEnvelope ( ) ) ; } } if ( traceOrDebugOn ) { traceOrDebug ( traceOn , "Creating a new instance of POJO class : " + command . getClass ( ) ) ; } Object commandObject = null ; try { commandObject = command . newInstance ( ) ; } catch ( Exception e ) { handleException ( "Error creating an instance of the POJO command class : " + command . getClass ( ) , e , synCtx ) ; } if ( traceOrDebugOn ) { traceOrDebug ( traceOn , "Instance created, setting static and dynamic properties" ) ; } for ( Iterator iter = staticProps . keySet ( ) . iterator ( ) ; iter . hasNext ( ) ; ) { String name = ( String ) iter . next ( ) ; setInstanceProperty ( name , ( String ) staticProps . get ( name ) , commandObject , synCtx ) ; } for ( Iterator iter = dynamicProps . keySet ( ) . iterator ( ) ; iter . hasNext ( ) ; ) { String name = ( String ) iter . next ( ) ; AXIOMXPath xpath = ( AXIOMXPath ) dynamicProps . get ( name ) ; String value = Axis2MessageContext . getStringValue ( xpath , synCtx ) ; setInstanceProperty ( name , value , commandObject , synCtx ) ; } if ( traceOrDebugOn ) { traceOrDebug ( traceOn , "POJO initialized successfully, invoking the execute() method" ) ; } if ( commandObject instanceof Command ) { try { ( ( Command ) commandObject ) . execute ( ) ; } catch ( Exception e ) { handleException ( "Error invoking POJO command class : " + command . getClass ( ) , e , synCtx ) ; } } else { Method exeMethod = null ; try { exeMethod = command . getMethod ( "execute" , new Class [ ] { } ) ; exeMethod . invoke ( commandObject , new Object [ ] { } ) ; } catch ( NoSuchMethodException e ) { handleException ( "Cannot locate an execute() method on POJO class : " + command . getClass ( ) , e , synCtx ) ; } catch ( Exception e ) { handleException ( "Error invoking the execute() method on POJO class : " + command . getClass ( ) , e , synCtx ) ; } } if ( traceOrDebugOn ) { traceOrDebug ( traceOn , "End : POJOCommand mediator" ) ; } return true ; } private void setInstanceProperty ( String name , String value , Object obj , MessageContext synCtx ) { String mName = "set" + Character . toUpperCase ( name . charAt ( 0 ) ) + name . substring ( 1 ) ; Method method = null ; try { Method [ ] methods = obj . getClass ( ) . getMethods ( ) ; boolean invoked = false ; for ( int i = 0 ; i < methods . length ; i ++ ) { if ( mName . equals ( methods [ i ] . getName ( ) ) ) { Class [ ] params = methods [ i ] . getParameterTypes ( ) ; if ( params . length != 1 ) { handleException ( "Did not find a setter method named : " + mName + "() that takes a single String, int, long, float, double " + "or boolean parameter" , synCtx ) ; } else { if ( params [ 0 ] . equals ( String . class ) ) { method = obj . getClass ( ) . getMethod ( mName , new Class [ ] { String . class } ) ; method . invoke ( obj , new String [ ] { value } ) ; } else if ( params [ 0 ] . equals ( int . class ) ) { method = obj . getClass ( ) . getMethod ( mName , new Class [ ] { int . class } ) ; method . invoke ( obj , new Integer [ ] { new Integer ( value ) } ) ; } else if ( params [ 0 ] . equals ( long . class ) ) { method = obj . getClass ( ) . getMethod ( mName , new Class [ ] { long . class } ) ; method . invoke ( obj , new Long [ ] { new Long ( value ) } ) ; } else if ( params [ 0 ] . equals ( float . class ) ) { method = obj . getClass ( ) . getMethod ( mName , new Class [ ] { float . class } ) ; method . invoke ( obj , new Float [ ] { new Float ( value ) } ) ; } else if ( params [ 0 ] . equals ( double . class ) ) { method = obj . getClass ( ) . getMethod ( mName , new Class [ ] { double . class } ) ; method . invoke ( obj , new Double [ ] { new Double ( value ) } ) ; } else if ( params [ 0 ] . equals ( boolean . class ) ) { method = obj . getClass ( ) . getMethod ( mName , new Class [ ] { boolean . class } ) ; method . invoke ( obj , new Boolean [ ] { new Boolean ( value ) } ) ; } else { handleException ( "Did not find a setter method named : " + mName + "() that takes a single String, int, long, float, double " + "or boolean parameter" , synCtx ) ; } } invoked = true ; } } if ( ! invoked ) { handleException ( "Did not find a setter method named : " + mName + "() that takes a single String, int, long, float, double " + "or boolean parameter" , synCtx ) ; } } catch ( Exception e ) { handleException ( "Error invoking setter method named : " + mName + "() that takes a single String, int, long, float, double " + "or boolean parameter" , e , synCtx ) ; } } public Class getCommand ( ) { return command ; } public void setCommand ( Class command ) { this . command = command ; } public void addStaticProperty ( String name , String value ) { this . staticProps . put ( name , value ) ; } public void addDynamicProperty ( String name , Object value ) { this . dynamicProps . put ( name , value ) ; } public Map getStaticProps ( ) { return this . staticProps ; } public Map getDynamicProps ( ) { return this . dynamicProps ; } } 	1	['9', '2', '0', '9', '49', '4', '2', '7', '8', '0.625', '564', '1', '0', '0.619047619', '0.377777778', '0', '0', '61.33333333', '11', '3', '1']
package org . apache . synapse . endpoints ; import org . apache . synapse . MessageContext ; import org . apache . synapse . SynapseConstants ; import org . apache . synapse . FaultHandler ; import org . apache . synapse . endpoints . utils . EndpointDefinition ; import org . apache . synapse . statistics . impl . EndPointStatisticsStack ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import java . util . Stack ; public class AddressEndpoint extends FaultHandler implements Endpoint { private static final Log log = LogFactory . getLog ( AddressEndpoint . class ) ; private static final Log trace = LogFactory . getLog ( SynapseConstants . TRACE_LOGGER ) ; private String name = null ; private volatile boolean active = true ; private EndpointDefinition endpoint = null ; private Endpoint parentEndpoint = null ; private long suspendOnFailDuration = - 1 ; private long recoverOn = Long . MAX_VALUE ; public EndpointDefinition getEndpoint ( ) { return endpoint ; } public void setEndpoint ( EndpointDefinition endpoint ) { this . endpoint = endpoint ; } public String getName ( ) { return name ; } public void setName ( String name ) { this . name = name . trim ( ) ; } public boolean isActive ( MessageContext synMessageContext ) { if ( ! active ) { if ( System . currentTimeMillis ( ) > recoverOn ) { active = true ; recoverOn = 0 ; } } return active ; } public synchronized void setActive ( boolean active , MessageContext synMessageContext ) { if ( ! active ) { if ( suspendOnFailDuration != - 1 ) { recoverOn = System . currentTimeMillis ( ) + suspendOnFailDuration ; } else { recoverOn = Long . MAX_VALUE ; } } this . active = active ; } public void send ( MessageContext synCtx ) { boolean traceOn = isTraceOn ( synCtx ) ; boolean traceOrDebugOn = isTraceOrDebugOn ( traceOn ) ; if ( traceOrDebugOn ) { traceOrDebug ( traceOn , "Start : Address Endpoint" ) ; if ( traceOn && trace . isTraceEnabled ( ) ) { trace . trace ( "Message : " + synCtx . getEnvelope ( ) ) ; } } String endPointName = this . getName ( ) ; if ( endPointName == null ) { endPointName = SynapseConstants . ANONYMOUS_ENDPOINT ; } boolean statisticsEnable = ( SynapseConstants . STATISTICS_ON == endpoint . getStatisticsState ( ) ) ; if ( statisticsEnable ) { EndPointStatisticsStack endPointStatisticsStack = null ; Object statisticsStackObj = synCtx . getProperty ( org . apache . synapse . SynapseConstants . ENDPOINT_STATS ) ; if ( statisticsStackObj == null ) { endPointStatisticsStack = new EndPointStatisticsStack ( ) ; synCtx . setProperty ( org . apache . synapse . SynapseConstants . ENDPOINT_STATS , endPointStatisticsStack ) ; } else if ( statisticsStackObj instanceof EndPointStatisticsStack ) { endPointStatisticsStack = ( EndPointStatisticsStack ) statisticsStackObj ; } if ( endPointStatisticsStack != null ) { boolean isFault = synCtx . getEnvelope ( ) . getBody ( ) . hasFault ( ) ; endPointStatisticsStack . put ( endPointName , System . currentTimeMillis ( ) , ! synCtx . isResponse ( ) , statisticsEnable , isFault ) ; } } if ( endpoint . getAddress ( ) != null ) { if ( traceOrDebugOn ) { traceOrDebug ( traceOn , "Sending message to endpoint : " + endPointName + " resolves to address = " + endpoint . getAddress ( ) ) ; traceOrDebug ( traceOn , "SOAPAction: " + ( synCtx . getSoapAction ( ) != null ? synCtx . getSoapAction ( ) : "null" ) ) ; traceOrDebug ( traceOn , "WSA-Action: " + ( synCtx . getWSAAction ( ) != null ? synCtx . getWSAAction ( ) : "null" ) ) ; if ( traceOn && trace . isTraceEnabled ( ) ) { trace . trace ( "Envelope : \n" + synCtx . getEnvelope ( ) ) ; } } } synCtx . pushFaultHandler ( this ) ; synCtx . setProperty ( SynapseConstants . PROCESSED_ENDPOINT , this ) ; synCtx . getEnvironment ( ) . send ( endpoint , synCtx ) ; } public void onChildEndpointFail ( Endpoint endpoint , MessageContext synMessageContext ) { } public void setParentEndpoint ( Endpoint parentEndpoint ) { this . parentEndpoint = parentEndpoint ; } public long getSuspendOnFailDuration ( ) { return suspendOnFailDuration ; } public void setSuspendOnFailDuration ( long suspendOnFailDuration ) { this . suspendOnFailDuration = suspendOnFailDuration ; } public void onFault ( MessageContext synCtx ) { setActive ( false , synCtx ) ; if ( parentEndpoint != null ) { parentEndpoint . onChildEndpointFail ( this , synCtx ) ; } else { Stack faultStack = synCtx . getFaultStack ( ) ; if ( ! faultStack . isEmpty ( ) ) { ( ( FaultHandler ) faultStack . pop ( ) ) . handleFault ( synCtx ) ; } } } protected boolean isTraceOn ( MessageContext msgCtx ) { return ( endpoint . getTraceState ( ) == SynapseConstants . TRACING_ON ) || ( endpoint . getTraceState ( ) == SynapseConstants . TRACING_UNSET && msgCtx . getTracingState ( ) == SynapseConstants . TRACING_ON ) ; } protected boolean isTraceOrDebugOn ( boolean isTraceOn ) { return isTraceOn || log . isDebugEnabled ( ) ; } protected void traceOrDebug ( boolean traceOn , String msg ) { if ( traceOn ) { trace . info ( msg ) ; } if ( log . isDebugEnabled ( ) ) { log . debug ( msg ) ; } } } 	1	['17', '2', '0', '14', '53', '78', '4', '10', '13', '0.8125', '359', '1', '2', '0.25', '0.276785714', '1', '1', '19.64705882', '17', '2.5882', '1']
package org . apache . synapse . core . axis2 ; import org . apache . axis2 . AxisFault ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import org . apache . synapse . * ; import org . apache . synapse . mediators . MediatorFaultHandler ; import org . apache . synapse . endpoints . Endpoint ; import org . apache . synapse . statistics . impl . ProxyServiceStatisticsStack ; public class ProxyServiceMessageReceiver extends SynapseMessageReceiver { private static final Log log = LogFactory . getLog ( ProxyServiceMessageReceiver . class ) ; private static final Log trace = LogFactory . getLog ( SynapseConstants . TRACE_LOGGER ) ; private String name = null ; private ProxyService proxy = null ; public void receive ( org . apache . axis2 . context . MessageContext mc ) throws AxisFault { boolean traceOn = proxy . getTraceState ( ) == SynapseConstants . TRACING_ON ; boolean traceOrDebugOn = traceOn || log . isDebugEnabled ( ) ; String remoteAddr = ( String ) mc . getProperty ( org . apache . axis2 . context . MessageContext . REMOTE_ADDR ) ; if ( traceOrDebugOn ) { traceOrDebug ( traceOn , "Proxy Service " + name + " received a new message" + ( remoteAddr != null ? " from : " + remoteAddr : "..." ) ) ; traceOrDebug ( traceOn , ( "Message To: " + ( mc . getTo ( ) != null ? mc . getTo ( ) . getAddress ( ) : "null" ) ) ) ; traceOrDebug ( traceOn , ( "SOAPAction: " + ( mc . getSoapAction ( ) != null ? mc . getSoapAction ( ) : "null" ) ) ) ; traceOrDebug ( traceOn , ( "WSA-Action: " + ( mc . getWSAAction ( ) != null ? mc . getWSAAction ( ) : "null" ) ) ) ; if ( traceOn && trace . isTraceEnabled ( ) ) { String [ ] cids = mc . getAttachmentMap ( ) . getAllContentIDs ( ) ; if ( cids != null && cids . length > 0 ) { for ( int i = 0 ; i < cids . length ; i ++ ) { trace . trace ( "With attachment content ID : " + cids [ i ] ) ; } } trace . trace ( "Envelope : " + mc . getEnvelope ( ) ) ; } } MessageContext synCtx = MessageContextCreatorForAxis2 . getSynapseMessageContext ( mc ) ; Log serviceLog = LogFactory . getLog ( SynapseConstants . SERVICE_LOGGER_PREFIX + name ) ; ( ( Axis2MessageContext ) synCtx ) . setServiceLog ( serviceLog ) ; synCtx . setProperty ( SynapseConstants . PROXY_SERVICE , name ) ; synCtx . setTracingState ( proxy . getTraceState ( ) ) ; try { boolean statsOn = ( SynapseConstants . STATISTICS_ON == proxy . getStatisticsState ( ) ) ; if ( statsOn ) { ProxyServiceStatisticsStack proxyServiceStatisticsStack = new ProxyServiceStatisticsStack ( ) ; boolean isFault = synCtx . getEnvelope ( ) . getBody ( ) . hasFault ( ) ; proxyServiceStatisticsStack . put ( name , System . currentTimeMillis ( ) , ! synCtx . isResponse ( ) , statsOn , isFault ) ; synCtx . setProperty ( SynapseConstants . PROXY_STATS , proxyServiceStatisticsStack ) ; } if ( proxy . getTargetFaultSequence ( ) != null ) { Mediator faultSequence = synCtx . getSequence ( proxy . getTargetFaultSequence ( ) ) ; if ( faultSequence != null ) { if ( traceOrDebugOn ) { traceOrDebug ( traceOn , "Setting the fault-sequence to : " + faultSequence ) ; } synCtx . pushFaultHandler ( new MediatorFaultHandler ( synCtx . getSequence ( proxy . getTargetFaultSequence ( ) ) ) ) ; } else { traceOrDebug ( traceOn , "Unable to find fault-sequence : " + proxy . getTargetFaultSequence ( ) + "; using default fault sequence" ) ; synCtx . pushFaultHandler ( new MediatorFaultHandler ( synCtx . getSequence ( SynapseConstants . FAULT_SEQUENCE_KEY ) ) ) ; } } else if ( proxy . getTargetInLineFaultSequence ( ) != null ) { if ( traceOrDebugOn ) { traceOrDebug ( traceOn , "Setting specified anonymous fault-sequence for proxy" ) ; } synCtx . pushFaultHandler ( new MediatorFaultHandler ( proxy . getTargetInLineFaultSequence ( ) ) ) ; } if ( proxy . getTargetInSequence ( ) != null ) { Mediator inSequence = synCtx . getSequence ( proxy . getTargetInSequence ( ) ) ; if ( inSequence != null ) { traceOrDebug ( traceOn , "Using sequence named : " + proxy . getTargetInSequence ( ) + " for incoming message mediation" ) ; inSequence . mediate ( synCtx ) ; } else { handleException ( "Unable to find in-sequence : " + proxy . getTargetInSequence ( ) , synCtx ) ; } } else if ( proxy . getTargetInLineInSequence ( ) != null ) { traceOrDebug ( traceOn , "Using the anonymous " + "in-sequence of the proxy service for mediation" ) ; proxy . getTargetInLineInSequence ( ) . mediate ( synCtx ) ; } if ( proxy . getTargetEndpoint ( ) != null ) { Endpoint endpoint = synCtx . getEndpoint ( proxy . getTargetEndpoint ( ) ) ; if ( endpoint != null ) { traceOrDebug ( traceOn , "Forwarding message to the endpoint : " + proxy . getTargetEndpoint ( ) ) ; endpoint . send ( synCtx ) ; } else { handleException ( "Unable to find the endpoint specified : " + proxy . getTargetEndpoint ( ) , synCtx ) ; } } else if ( proxy . getTargetInLineEndpoint ( ) != null ) { traceOrDebug ( traceOn , "Forwarding the message to the anonymous " + "endpoint of the proxy service" ) ; proxy . getTargetInLineEndpoint ( ) . send ( synCtx ) ; } } catch ( SynapseException syne ) { if ( ! synCtx . getFaultStack ( ) . isEmpty ( ) ) { warn ( traceOn , "Executing fault handler due to exception encountered" , synCtx ) ; ( ( FaultHandler ) synCtx . getFaultStack ( ) . pop ( ) ) . handleFault ( synCtx , syne ) ; } else { warn ( traceOn , "Exception encountered but no fault handler found - " + "message dropped" , synCtx ) ; } } } public void setName ( String name ) { this . name = name ; } public void setProxy ( ProxyService proxy ) { this . proxy = proxy ; } private void traceOrDebug ( boolean traceOn , String msg ) { if ( traceOn ) { trace . info ( msg ) ; } if ( log . isDebugEnabled ( ) ) { log . debug ( msg ) ; } } private void warn ( boolean traceOn , String msg , MessageContext msgContext ) { if ( traceOn ) { trace . warn ( msg ) ; } if ( log . isDebugEnabled ( ) ) { log . warn ( msg ) ; } if ( msgContext . getServiceLog ( ) != null ) { msgContext . getServiceLog ( ) . warn ( msg ) ; } } private void handleException ( String msg , MessageContext msgContext ) { log . error ( msg ) ; if ( msgContext . getServiceLog ( ) != null ) { msgContext . getServiceLog ( ) . error ( msg ) ; } if ( proxy . getTraceState ( ) == SynapseConstants . TRACING_ON ) { trace . error ( msg ) ; } throw new SynapseException ( msg ) ; } } 	1	['8', '2', '0', '20', '62', '0', '1', '20', '4', '0.535714286', '523', '1', '1', '0.333333333', '0.404761905', '1', '2', '63.875', '4', '1.625', '2']
package org . apache . synapse . core . axis2 ; import org . apache . axiom . om . OMAbstractFactory ; import org . apache . axiom . om . OMElement ; import org . apache . axiom . om . OMNamespace ; import org . apache . axiom . soap . SOAPEnvelope ; import org . apache . axiom . soap . SOAPFactory ; import org . apache . axiom . soap . SOAPHeader ; import org . apache . axiom . soap . SOAPHeaderBlock ; import org . apache . axis2 . AxisFault ; import org . apache . axis2 . addressing . AddressingConstants ; import org . apache . axis2 . addressing . EndpointReference ; import org . apache . axis2 . client . OperationClient ; import org . apache . axis2 . client . Options ; import org . apache . axis2 . context . ConfigurationContext ; import org . apache . axis2 . context . MessageContext ; import org . apache . axis2 . context . ServiceContext ; import org . apache . axis2 . context . ServiceGroupContext ; import org . apache . axis2 . description . AxisOperation ; import org . apache . axis2 . description . AxisService ; import org . apache . axis2 . description . AxisServiceGroup ; import org . apache . axis2 . engine . AxisConfiguration ; import org . apache . axis2 . wsdl . WSDLConstants ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import org . apache . neethi . Policy ; import org . apache . neethi . PolicyEngine ; import org . apache . sandesha2 . client . SandeshaClientConstants ; import org . apache . synapse . SynapseConstants ; import org . apache . synapse . SynapseException ; import org . apache . synapse . endpoints . utils . EndpointDefinition ; import org . apache . synapse . util . MessageHelper ; import javax . xml . namespace . QName ; import java . util . ArrayList ; public class Axis2FlexibleMEPClient { private static final Log log = LogFactory . getLog ( Axis2FlexibleMEPClient . class ) ; public static void send ( EndpointDefinition endpoint , org . apache . synapse . MessageContext synapseOutMessageContext ) throws AxisFault { boolean separateListener = false ; boolean wsSecurityEnabled = false ; String wsSecPolicyKey = null ; boolean wsRMEnabled = false ; String wsRMPolicyKey = null ; boolean wsAddressingEnabled = false ; if ( endpoint != null ) { separateListener = endpoint . isUseSeparateListener ( ) ; wsSecurityEnabled = endpoint . isSecurityOn ( ) ; wsSecPolicyKey = endpoint . getWsSecPolicyKey ( ) ; wsRMEnabled = endpoint . isReliableMessagingOn ( ) ; wsRMPolicyKey = endpoint . getWsRMPolicyKey ( ) ; wsAddressingEnabled = endpoint . isAddressingOn ( ) || wsSecurityEnabled || wsRMEnabled ; } if ( log . isDebugEnabled ( ) ) { log . debug ( "Sending [add = " + wsAddressingEnabled + "] [sec = " + wsSecurityEnabled + "] [rm = " + wsRMEnabled + ( endpoint != null ? "] [ mtom = " + endpoint . isUseMTOM ( ) + "] [ swa = " + endpoint . isUseSwa ( ) + "] [ format = " + endpoint . getFormat ( ) + "] [ force soap11=" + endpoint . isForceSOAP11 ( ) + "] [ force soap12=" + endpoint . isForceSOAP12 ( ) + "; pox=" + endpoint . isForcePOX ( ) : "" ) + "] [ to " + synapseOutMessageContext . getTo ( ) + "]" ) ; } MessageContext originalInMsgCtx = ( ( Axis2MessageContext ) synapseOutMessageContext ) . getAxis2MessageContext ( ) ; MessageContext axisOutMsgCtx = cloneForSend ( originalInMsgCtx ) ; if ( endpoint != null ) { if ( SynapseConstants . FORMAT_POX . equals ( endpoint . getFormat ( ) ) ) { axisOutMsgCtx . setDoingREST ( true ) ; } else if ( SynapseConstants . FORMAT_SOAP11 . equals ( endpoint . getFormat ( ) ) ) { axisOutMsgCtx . setDoingREST ( false ) ; if ( axisOutMsgCtx . getSoapAction ( ) == null && axisOutMsgCtx . getWSAAction ( ) != null ) { axisOutMsgCtx . setSoapAction ( axisOutMsgCtx . getWSAAction ( ) ) ; } if ( ! axisOutMsgCtx . isSOAP11 ( ) ) { SOAPUtils . convertSOAP12toSOAP11 ( axisOutMsgCtx ) ; } } else if ( SynapseConstants . FORMAT_SOAP12 . equals ( endpoint . getFormat ( ) ) ) { axisOutMsgCtx . setDoingREST ( false ) ; if ( axisOutMsgCtx . getSoapAction ( ) == null && axisOutMsgCtx . getWSAAction ( ) != null ) { axisOutMsgCtx . setSoapAction ( axisOutMsgCtx . getWSAAction ( ) ) ; } if ( axisOutMsgCtx . isSOAP11 ( ) ) { SOAPUtils . convertSOAP11toSOAP12 ( axisOutMsgCtx ) ; } } if ( endpoint . isUseMTOM ( ) ) { axisOutMsgCtx . setDoingMTOM ( true ) ; axisOutMsgCtx . setProperty ( org . apache . axis2 . Constants . Configuration . ENABLE_MTOM , org . apache . axis2 . Constants . VALUE_TRUE ) ; axisOutMsgCtx . setDoingMTOM ( true ) ; } else if ( endpoint . isUseSwa ( ) ) { axisOutMsgCtx . setDoingSwA ( true ) ; axisOutMsgCtx . setProperty ( org . apache . axis2 . Constants . Configuration . ENABLE_SWA , org . apache . axis2 . Constants . VALUE_TRUE ) ; axisOutMsgCtx . setDoingSwA ( true ) ; } if ( endpoint . getAddress ( ) != null ) { axisOutMsgCtx . setTo ( new EndpointReference ( endpoint . getAddress ( ) ) ) ; } if ( endpoint . isUseSeparateListener ( ) ) { axisOutMsgCtx . getOptions ( ) . setUseSeparateListener ( true ) ; } } if ( wsAddressingEnabled ) { axisOutMsgCtx . setProperty ( AddressingConstants . DISABLE_ADDRESSING_FOR_OUT_MESSAGES , Boolean . FALSE ) ; } else { axisOutMsgCtx . setProperty ( AddressingConstants . DISABLE_ADDRESSING_FOR_OUT_MESSAGES , Boolean . TRUE ) ; } ConfigurationContext axisCfgCtx = axisOutMsgCtx . getConfigurationContext ( ) ; AxisConfiguration axisCfg = axisCfgCtx . getAxisConfiguration ( ) ; AxisService anoymousService = AnonymousServiceFactory . getAnonymousService ( synapseOutMessageContext . getConfiguration ( ) , axisCfg , wsAddressingEnabled , wsRMEnabled , wsSecurityEnabled ) ; ServiceGroupContext sgc = new ServiceGroupContext ( axisCfgCtx , ( AxisServiceGroup ) anoymousService . getParent ( ) ) ; ServiceContext serviceCtx = sgc . getServiceContext ( anoymousService ) ; boolean outOnlyMessage = "true" . equals ( synapseOutMessageContext . getProperty ( SynapseConstants . OUT_ONLY ) ) ; AxisOperation axisAnonymousOperation = anoymousService . getOperation ( outOnlyMessage ? new QName ( AnonymousServiceFactory . OUT_ONLY_OPERATION ) : new QName ( AnonymousServiceFactory . OUT_IN_OPERATION ) ) ; Options clientOptions = new Options ( ) ; clientOptions . setUseSeparateListener ( separateListener ) ; if ( wsRMEnabled ) { if ( wsRMPolicyKey != null ) { clientOptions . setProperty ( SynapseConstants . SANDESHA_POLICY , getPolicy ( synapseOutMessageContext , wsRMPolicyKey ) ) ; } copyRMOptions ( originalInMsgCtx , clientOptions ) ; } if ( wsSecurityEnabled ) { if ( wsSecPolicyKey != null ) { clientOptions . setProperty ( SynapseConstants . RAMPART_POLICY , getPolicy ( synapseOutMessageContext , wsSecPolicyKey ) ) ; } if ( axisOutMsgCtx . getEnvelope ( ) . getHeader ( ) == null ) { SOAPFactory fac = axisOutMsgCtx . isSOAP11 ( ) ? OMAbstractFactory . getSOAP11Factory ( ) : OMAbstractFactory . getSOAP12Factory ( ) ; fac . createSOAPHeader ( axisOutMsgCtx . getEnvelope ( ) ) ; } } OperationClient mepClient = axisAnonymousOperation . createClient ( serviceCtx , clientOptions ) ; mepClient . addMessageContext ( axisOutMsgCtx ) ; axisOutMsgCtx . setAxisMessage ( axisAnonymousOperation . getMessage ( WSDLConstants . MESSAGE_LABEL_OUT_VALUE ) ) ; if ( ! outOnlyMessage ) { AsyncCallback callback = new AsyncCallback ( synapseOutMessageContext ) ; if ( endpoint != null ) { callback . setTimeOutOn ( System . currentTimeMillis ( ) + endpoint . getTimeoutDuration ( ) ) ; callback . setTimeOutAction ( endpoint . getTimeoutAction ( ) ) ; } else { callback . setTimeOutOn ( System . currentTimeMillis ( ) ) ; } mepClient . setCallback ( callback ) ; } mepClient . execute ( true ) ; originalInMsgCtx . getOperationContext ( ) . setProperty ( org . apache . axis2 . Constants . RESPONSE_WRITTEN , "SKIP" ) ; } private static MessageContext cloneForSend ( MessageContext ori ) throws AxisFault { MessageContext newMC = MessageHelper . clonePartially ( ori ) ; newMC . setEnvelope ( ori . getEnvelope ( ) ) ; removeAddressingHeaders ( newMC ) ; newMC . setProperty ( org . apache . axis2 . context . MessageContext . TRANSPORT_HEADERS , ori . getProperty ( org . apache . axis2 . context . MessageContext . TRANSPORT_HEADERS ) ) ; return newMC ; } private static void copyRMOptions ( MessageContext oriContext , Options targetOptions ) { Options oriOptions = oriContext . getOptions ( ) ; if ( oriOptions . getProperty ( SynapseConstants . SANDESHA_LAST_MESSAGE ) != null ) { targetOptions . setProperty ( SynapseConstants . SANDESHA_LAST_MESSAGE , oriOptions . getProperty ( SynapseConstants . SANDESHA_LAST_MESSAGE ) ) ; } if ( oriOptions . getProperty ( SynapseConstants . SANDESHA_SPEC_VERSION ) != null ) { targetOptions . setProperty ( SynapseConstants . SANDESHA_SPEC_VERSION , oriOptions . getProperty ( SynapseConstants . SANDESHA_SPEC_VERSION ) ) ; } if ( oriOptions . getProperty ( SynapseConstants . SANDESHA_SEQUENCE_KEY ) != null ) { targetOptions . setProperty ( SynapseConstants . SANDESHA_SEQUENCE_KEY , oriOptions . getProperty ( SynapseConstants . SANDESHA_SEQUENCE_KEY ) ) ; } if ( oriOptions . getProperty ( SandeshaClientConstants . OFFERED_SEQUENCE_ID ) != null ) { targetOptions . setProperty ( SandeshaClientConstants . OFFERED_SEQUENCE_ID , oriOptions . getProperty ( SandeshaClientConstants . OFFERED_SEQUENCE_ID ) ) ; } } private static Policy getPolicy ( org . apache . synapse . MessageContext synCtx , String propertyKey ) { Object property = synCtx . getEntry ( propertyKey ) ; if ( property != null && property instanceof OMElement ) { return PolicyEngine . getPolicy ( ( OMElement ) property ) ; } else { handleException ( "Cannot locate policy from the property : " + propertyKey ) ; } return null ; } private static void handleException ( String msg ) { log . error ( msg ) ; throw new SynapseException ( msg ) ; } public static SOAPEnvelope removeAddressingHeaders ( MessageContext axisMsgCtx ) { SOAPEnvelope env = axisMsgCtx . getEnvelope ( ) ; SOAPHeader soapHeader = env . getHeader ( ) ; ArrayList addressingHeaders ; if ( soapHeader != null ) { addressingHeaders = soapHeader . getHeaderBlocksWithNSURI ( AddressingConstants . Submission . WSA_NAMESPACE ) ; if ( addressingHeaders != null && addressingHeaders . size ( ) != 0 ) { detachAddressingInformation ( addressingHeaders ) ; } else { addressingHeaders = soapHeader . getHeaderBlocksWithNSURI ( AddressingConstants . Final . WSA_NAMESPACE ) ; if ( addressingHeaders != null && addressingHeaders . size ( ) != 0 ) { detachAddressingInformation ( addressingHeaders ) ; } } } return env ; } private static void detachAddressingInformation ( ArrayList headerInformation ) { for ( Object o : headerInformation ) { if ( o instanceof SOAPHeaderBlock ) { SOAPHeaderBlock headerBlock = ( SOAPHeaderBlock ) o ; headerBlock . detach ( ) ; } else if ( o instanceof OMElement ) { OMElement om = ( OMElement ) o ; OMNamespace ns = om . getNamespace ( ) ; if ( ns != null && ( AddressingConstants . Submission . WSA_NAMESPACE . equals ( ns . getNamespaceURI ( ) ) || AddressingConstants . Final . WSA_NAMESPACE . equals ( ns . getNamespaceURI ( ) ) ) ) { om . detach ( ) ; } } } } } 	1	['9', '1', '0', '39', '96', '30', '1', '38', '3', '0.625', '556', '1', '0', '0', '0.196428571', '0', '0', '60.66666667', '6', '2.3333', '3']
package org . apache . synapse . config . xml ; import org . apache . axiom . om . OMAbstractFactory ; import org . apache . axiom . om . OMElement ; import org . apache . axiom . om . OMFactory ; import org . apache . axiom . om . OMNamespace ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import org . apache . synapse . SynapseException ; import org . apache . synapse . Mediator ; import org . apache . synapse . endpoints . Endpoint ; import org . apache . synapse . config . SynapseConfiguration ; import org . apache . synapse . config . Entry ; import org . apache . synapse . config . xml . endpoints . EndpointAbstractSerializer ; import org . apache . synapse . core . axis2 . ProxyService ; import javax . xml . stream . XMLStreamException ; import java . io . OutputStream ; import java . util . Iterator ; import java . util . Map ; import java . util . HashMap ; public class XMLConfigurationSerializer { private static final Log log = LogFactory . getLog ( XMLConfigurationSerializer . class ) ; public static void serializeConfiguration ( SynapseConfiguration synCfg , OutputStream outputStream ) throws XMLStreamException { log . info ( "Serializing the XML Configuration to the output stream" ) ; OMElement definitions = ConfigurationFactoryAndSerializerFinder . serializeConfiguration ( synCfg ) ; definitions . serialize ( outputStream ) ; } } 	1	['3', '1', '0', '5', '8', '1', '0', '5', '2', '0.5', '21', '1', '0', '0', '0.5', '0', '0', '5.666666667', '1', '0.3333', '1']
package org . apache . synapse . endpoints ; import org . apache . synapse . FaultHandler ; import org . apache . synapse . MessageContext ; import java . util . List ; public class FailoverEndpoint implements Endpoint { private String name = null ; private volatile boolean active = true ; private List endpoints = null ; private Endpoint currentEndpoint = null ; private Endpoint parentEndpoint = null ; public void send ( MessageContext synMessageContext ) { synMessageContext . getEnvelope ( ) . build ( ) ; if ( currentEndpoint . isActive ( synMessageContext ) ) { currentEndpoint . send ( synMessageContext ) ; } else { Endpoint liveEndpoint = null ; boolean foundEndpoint = false ; for ( int i = 0 ; i < endpoints . size ( ) ; i ++ ) { liveEndpoint = ( Endpoint ) endpoints . get ( i ) ; if ( liveEndpoint . isActive ( synMessageContext ) ) { foundEndpoint = true ; currentEndpoint = liveEndpoint ; currentEndpoint . send ( synMessageContext ) ; break ; } } if ( ! foundEndpoint ) { setActive ( false , synMessageContext ) ; if ( parentEndpoint != null ) { parentEndpoint . onChildEndpointFail ( this , synMessageContext ) ; } else { Object o = synMessageContext . getFaultStack ( ) . pop ( ) ; if ( o != null ) { ( ( FaultHandler ) o ) . handleFault ( synMessageContext ) ; } } } } } public String getName ( ) { return this . name ; } public void setName ( String name ) { this . name = name . trim ( ) ; } public boolean isActive ( MessageContext synMessageContext ) { if ( ! active ) { for ( int i = 0 ; i < endpoints . size ( ) ; i ++ ) { Endpoint endpoint = ( Endpoint ) endpoints . get ( i ) ; if ( endpoint . isActive ( synMessageContext ) ) { active = true ; } } } return active ; } public void setActive ( boolean active , MessageContext synMessageContext ) { this . active = active ; } public List getEndpoints ( ) { return endpoints ; } public void setEndpoints ( List endpoints ) { this . endpoints = endpoints ; if ( endpoints . size ( ) > 0 ) { currentEndpoint = ( Endpoint ) endpoints . get ( 0 ) ; } } public void onChildEndpointFail ( Endpoint endpoint , MessageContext synMessageContext ) { send ( synMessageContext ) ; } public void setParentEndpoint ( Endpoint parentEndpoint ) { this . parentEndpoint = parentEndpoint ; } } 	1	['10', '1', '0', '7', '22', '11', '3', '4', '10', '0.622222222', '169', '1', '2', '0', '0.316666667', '0', '0', '15.4', '7', '1.9', '1']
package org . apache . synapse . config . xml . endpoints ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import org . apache . synapse . endpoints . Endpoint ; import org . apache . synapse . endpoints . SALoadbalanceEndpoint ; import org . apache . synapse . endpoints . dispatch . Dispatcher ; import org . apache . synapse . endpoints . dispatch . SoapSessionDispatcher ; import org . apache . synapse . endpoints . dispatch . SimpleClientSessionDispatcher ; import org . apache . synapse . endpoints . dispatch . HttpSessionDispatcher ; import org . apache . synapse . endpoints . algorithms . LoadbalanceAlgorithm ; import org . apache . synapse . SynapseConstants ; import org . apache . synapse . SynapseException ; import org . apache . synapse . config . xml . endpoints . utils . LoadbalanceAlgorithmFactory ; import org . apache . axiom . om . OMElement ; import org . apache . axiom . om . OMAttribute ; import org . apache . axiom . om . OMNode ; import javax . xml . namespace . QName ; import java . util . ArrayList ; import java . util . Iterator ; public class SALoadbalanceEndpointFactory implements EndpointFactory { private static Log log = LogFactory . getLog ( LoadbalanceEndpointFactory . class ) ; private static SALoadbalanceEndpointFactory instance = new SALoadbalanceEndpointFactory ( ) ; private SALoadbalanceEndpointFactory ( ) { } public static SALoadbalanceEndpointFactory getInstance ( ) { return instance ; } public Endpoint createEndpoint ( OMElement epConfig , boolean anonymousEndpoint ) { SALoadbalanceEndpoint loadbalanceEndpoint = new SALoadbalanceEndpoint ( ) ; OMElement sessionElement = epConfig . getFirstChildWithName ( new QName ( SynapseConstants . SYNAPSE_NAMESPACE , "session" ) ) ; if ( sessionElement != null ) { String type = sessionElement . getAttributeValue ( new QName ( "type" ) ) ; if ( type . equalsIgnoreCase ( "soap" ) ) { Dispatcher soapDispatcher = new SoapSessionDispatcher ( ) ; loadbalanceEndpoint . setDispatcher ( soapDispatcher ) ; } else if ( type . equalsIgnoreCase ( "http" ) ) { Dispatcher httpDispatcher = new HttpSessionDispatcher ( ) ; loadbalanceEndpoint . setDispatcher ( httpDispatcher ) ; } else if ( type . equalsIgnoreCase ( "simpleClientSession" ) ) { Dispatcher csDispatcher = new SimpleClientSessionDispatcher ( ) ; loadbalanceEndpoint . setDispatcher ( csDispatcher ) ; } } else { handleException ( "Session affinity endpoints should have a session element in the configuration." ) ; } OMAttribute name = epConfig . getAttribute ( new QName ( org . apache . synapse . config . xml . XMLConfigConstants . NULL_NAMESPACE , "name" ) ) ; if ( name != null ) { loadbalanceEndpoint . setName ( name . getAttributeValue ( ) ) ; } OMElement loadbalanceElement = null ; loadbalanceElement = epConfig . getFirstChildWithName ( new QName ( SynapseConstants . SYNAPSE_NAMESPACE , "loadbalance" ) ) ; if ( loadbalanceElement != null ) { ArrayList endpoints = getEndpoints ( loadbalanceElement , loadbalanceEndpoint ) ; loadbalanceEndpoint . setEndpoints ( endpoints ) ; LoadbalanceAlgorithm algorithm = LoadbalanceAlgorithmFactory . createLoadbalanceAlgorithm ( loadbalanceElement , endpoints ) ; loadbalanceEndpoint . setAlgorithm ( algorithm ) ; return loadbalanceEndpoint ; } return null ; } public Object getObjectFromOMNode ( OMNode om ) { if ( om instanceof OMElement ) { return createEndpoint ( ( OMElement ) om , false ) ; } else { handleException ( "Invalid XML configuration for an Endpoint. OMElement expected" ) ; } return null ; } private ArrayList getEndpoints ( OMElement loadbalanceElement , Endpoint parent ) { ArrayList endpoints = new ArrayList ( ) ; Iterator iter = loadbalanceElement . getChildrenWithName ( org . apache . synapse . config . xml . XMLConfigConstants . ENDPOINT_ELT ) ; while ( iter . hasNext ( ) ) { OMElement endptElem = ( OMElement ) iter . next ( ) ; EndpointFactory epFac = EndpointAbstractFactory . getEndpointFactroy ( endptElem ) ; Endpoint endpoint = epFac . createEndpoint ( endptElem , true ) ; endpoint . setParentEndpoint ( parent ) ; endpoints . add ( endpoint ) ; } return endpoints ; } private static void handleException ( String msg ) { log . error ( msg ) ; throw new SynapseException ( msg ) ; } private static void handleException ( String msg , Exception e ) { log . error ( msg , e ) ; throw new SynapseException ( msg , e ) ; } } 	1	['8', '1', '0', '17', '38', '20', '1', '17', '3', '0.642857143', '191', '1', '1', '0', '0.244897959', '0', '0', '22.625', '6', '1.625', '1']
package org . apache . synapse . config . xml ; import org . apache . axiom . om . OMAttribute ; import org . apache . axiom . om . OMElement ; import org . apache . axiom . om . xpath . AXIOMXPath ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import org . apache . synapse . Mediator ; import org . apache . synapse . SynapseException ; import org . apache . synapse . mediators . ext . POJOCommandMediator ; import org . jaxen . JaxenException ; import javax . xml . namespace . QName ; import java . util . Iterator ; public class POJOCommandMediatorFactory extends AbstractMediatorFactory { private static final QName POJO_COMMAND_Q = new QName ( XMLConfigConstants . SYNAPSE_NAMESPACE , "pojoCommand" ) ; public Mediator createMediator ( OMElement elem ) { POJOCommandMediator pojoMediator = new POJOCommandMediator ( ) ; OMAttribute name = elem . getAttribute ( ATT_NAME ) ; if ( name == null ) { String msg = "The name of the actual POJO command implementation class" + " is a required attribute" ; log . error ( msg ) ; throw new SynapseException ( msg ) ; } try { pojoMediator . setCommand ( getClass ( ) . getClassLoader ( ) . loadClass ( name . getAttributeValue ( ) ) ) ; } catch ( ClassNotFoundException e ) { handleException ( "Unable to load the class specified as the command " + name . getAttributeValue ( ) , e ) ; } for ( Iterator it = elem . getChildElements ( ) ; it . hasNext ( ) ; ) { OMElement child = ( OMElement ) it . next ( ) ; if ( "property" . equals ( child . getLocalName ( ) ) ) { String propName = child . getAttribute ( ATT_NAME ) . getAttributeValue ( ) ; if ( propName == null ) { handleException ( "A POJO command mediator property must specify the name attribute" ) ; } else { if ( child . getAttribute ( ATT_EXPRN ) != null ) { AXIOMXPath xpath = null ; try { xpath = new AXIOMXPath ( child . getAttribute ( ATT_EXPRN ) . getAttributeValue ( ) ) ; OMElementUtils . addNameSpaces ( xpath , child , log ) ; pojoMediator . addDynamicProperty ( propName , xpath ) ; } catch ( JaxenException e ) { handleException ( "Error instantiating XPath expression : " + child . getAttribute ( ATT_EXPRN ) , e ) ; } } else { if ( child . getAttribute ( ATT_VALUE ) != null ) { pojoMediator . addStaticProperty ( propName , child . getAttribute ( ATT_VALUE ) . getAttributeValue ( ) ) ; } else { handleException ( "A POJO mediator property must specify either " + "name and expression attributes, or name and value attributes" ) ; } } } } } return pojoMediator ; } public QName getTagQName ( ) { return POJO_COMMAND_Q ; } } 	1	['4', '2', '0', '10', '30', '4', '0', '10', '3', '0.666666667', '141', '1', '0', '0.6', '0.666666667', '0', '0', '34', '6', '1.75', '1']
package org . apache . synapse . endpoints ; import org . apache . synapse . MessageContext ; import org . apache . synapse . SynapseConstants ; import org . apache . synapse . FaultHandler ; import org . apache . synapse . endpoints . utils . EndpointDefinition ; import org . apache . synapse . statistics . impl . EndPointStatisticsStack ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import org . apache . axiom . om . OMElement ; import java . util . Stack ; public class WSDLEndpoint extends FaultHandler implements Endpoint { private static final Log log = LogFactory . getLog ( AddressEndpoint . class ) ; private static final Log trace = LogFactory . getLog ( SynapseConstants . TRACE_LOGGER ) ; private String name = null ; private String wsdlURI ; private OMElement wsdlDoc ; private String serviceName ; private String portName ; private long suspendOnFailDuration = - 1 ; private long recoverOn = Long . MAX_VALUE ; private boolean active = true ; private Endpoint parentEndpoint = null ; private EndpointDefinition endpoint = null ; public void send ( MessageContext synCtx ) { boolean traceOn = isTraceOn ( synCtx ) ; boolean traceOrDebugOn = isTraceOrDebugOn ( traceOn ) ; if ( traceOrDebugOn ) { traceOrDebug ( traceOn , "Start : Address Endpoint" ) ; if ( traceOn && trace . isTraceEnabled ( ) ) { trace . trace ( "Message : " + synCtx . getEnvelope ( ) ) ; } } String eprAddress = null ; if ( endpoint . getAddress ( ) != null ) { eprAddress = endpoint . getAddress ( ) ; String endPointName = this . getName ( ) ; if ( endPointName == null ) { endPointName = SynapseConstants . ANONYMOUS_ENDPOINT ; } boolean statisticsEnable = ( SynapseConstants . STATISTICS_ON == endpoint . getStatisticsState ( ) ) ; if ( statisticsEnable ) { EndPointStatisticsStack endPointStatisticsStack = null ; Object statisticsStackObj = synCtx . getProperty ( org . apache . synapse . SynapseConstants . ENDPOINT_STATS ) ; if ( statisticsStackObj == null ) { endPointStatisticsStack = new EndPointStatisticsStack ( ) ; synCtx . setProperty ( org . apache . synapse . SynapseConstants . ENDPOINT_STATS , endPointStatisticsStack ) ; } else if ( statisticsStackObj instanceof EndPointStatisticsStack ) { endPointStatisticsStack = ( EndPointStatisticsStack ) statisticsStackObj ; } if ( endPointStatisticsStack != null ) { boolean isFault = synCtx . getEnvelope ( ) . getBody ( ) . hasFault ( ) ; endPointStatisticsStack . put ( endPointName , System . currentTimeMillis ( ) , ! synCtx . isResponse ( ) , statisticsEnable , isFault ) ; } } if ( traceOrDebugOn ) { traceOrDebug ( traceOn , "Sending message to WSDL endpoint : " + endPointName + " resolves to address = " + eprAddress ) ; traceOrDebug ( traceOn , "SOAPAction: " + ( synCtx . getSoapAction ( ) != null ? synCtx . getSoapAction ( ) : "null" ) ) ; traceOrDebug ( traceOn , "WSA-Action: " + ( synCtx . getWSAAction ( ) != null ? synCtx . getWSAAction ( ) : "null" ) ) ; if ( traceOn && trace . isTraceEnabled ( ) ) { trace . trace ( "Envelope : \n" + synCtx . getEnvelope ( ) ) ; } } synCtx . pushFaultHandler ( this ) ; synCtx . setProperty ( SynapseConstants . PROCESSED_ENDPOINT , this ) ; synCtx . getEnvironment ( ) . send ( endpoint , synCtx ) ; } } public void onFault ( MessageContext synCtx ) { if ( parentEndpoint != null ) { parentEndpoint . onChildEndpointFail ( this , synCtx ) ; } else { Stack faultStack = synCtx . getFaultStack ( ) ; if ( ! faultStack . isEmpty ( ) ) { ( ( FaultHandler ) faultStack . pop ( ) ) . handleFault ( synCtx ) ; } } } public void onChildEndpointFail ( Endpoint endpoint , MessageContext synMessageContext ) { } public String getName ( ) { return name ; } public void setName ( String name ) { this . name = name . trim ( ) ; } public long getSuspendOnFailDuration ( ) { return suspendOnFailDuration ; } public void setSuspendOnFailDuration ( long suspendOnFailDuration ) { this . suspendOnFailDuration = suspendOnFailDuration ; } public String getWsdlURI ( ) { return wsdlURI ; } public void setWsdlURI ( String wsdlURI ) { this . wsdlURI = wsdlURI ; } public OMElement getWsdlDoc ( ) { return wsdlDoc ; } public void setWsdlDoc ( OMElement wsdlDoc ) { this . wsdlDoc = wsdlDoc ; } public String getServiceName ( ) { return serviceName ; } public void setServiceName ( String serviceName ) { this . serviceName = serviceName ; } public String getPortName ( ) { return portName ; } public void setPortName ( String portName ) { this . portName = portName ; } public boolean isActive ( MessageContext synMessageContext ) { if ( ! active ) { if ( System . currentTimeMillis ( ) > recoverOn ) { active = true ; } } return active ; } public void setActive ( boolean active , MessageContext synMessageContext ) { if ( ! active ) { if ( suspendOnFailDuration != - 1 ) { recoverOn = System . currentTimeMillis ( ) + suspendOnFailDuration ; } else { recoverOn = Long . MAX_VALUE ; } } this . active = active ; } public void setParentEndpoint ( Endpoint parentEndpoint ) { this . parentEndpoint = parentEndpoint ; } public EndpointDefinition getEndpoint ( ) { return endpoint ; } public void setEndpoint ( EndpointDefinition endpoint ) { this . endpoint = endpoint ; } protected boolean isTraceOn ( MessageContext msgCtx ) { return ( endpoint . getTraceState ( ) == SynapseConstants . TRACING_ON ) || ( endpoint . getTraceState ( ) == SynapseConstants . TRACING_UNSET && msgCtx . getTracingState ( ) == SynapseConstants . TRACING_ON ) ; } protected boolean isTraceOrDebugOn ( boolean isTraceOn ) { return isTraceOn || log . isDebugEnabled ( ) ; } protected void traceOrDebug ( boolean traceOn , String msg ) { if ( traceOn ) { trace . info ( msg ) ; } if ( log . isDebugEnabled ( ) ) { log . debug ( msg ) ; } } } 	1	['25', '2', '0', '15', '61', '234', '4', '11', '21', '0.913194444', '396', '1', '2', '0.178571429', '0.223958333', '1', '1', '14.36', '17', '2.08', '1']
package org . apache . synapse . config . xml . endpoints ; import org . apache . axiom . om . OMElement ; import org . apache . axiom . om . OMFactory ; import org . apache . axiom . om . OMAbstractFactory ; import org . apache . synapse . endpoints . Endpoint ; import org . apache . synapse . endpoints . AddressEndpoint ; import org . apache . synapse . SynapseException ; import org . apache . synapse . SynapseConstants ; import org . apache . synapse . endpoints . utils . EndpointDefinition ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class AddressEndpointSerializer implements EndpointSerializer { private static Log log = LogFactory . getLog ( AddressEndpointSerializer . class ) ; private OMFactory fac = null ; public OMElement serializeEndpoint ( Endpoint endpoint ) { if ( ! ( endpoint instanceof AddressEndpoint ) ) { throw new SynapseException ( "Invalid endpoint type." ) ; } fac = OMAbstractFactory . getOMFactory ( ) ; OMElement endpointElement = fac . createOMElement ( "endpoint" , SynapseConstants . SYNAPSE_OMNAMESPACE ) ; AddressEndpoint addressEndpoint = ( AddressEndpoint ) endpoint ; String name = addressEndpoint . getName ( ) ; if ( name != null ) { endpointElement . addAttribute ( "name" , name , null ) ; } EndpointDefinition epAddress = addressEndpoint . getEndpoint ( ) ; OMElement addressElement = serializeEndpointDefinition ( epAddress ) ; endpointElement . addChild ( addressElement ) ; long suspendDuration = addressEndpoint . getSuspendOnFailDuration ( ) ; if ( suspendDuration != - 1 ) { OMElement suspendElement = fac . createOMElement ( org . apache . synapse . config . xml . XMLConfigConstants . SUSPEND_DURATION_ON_FAILURE , SynapseConstants . SYNAPSE_OMNAMESPACE ) ; suspendElement . setText ( Long . toString ( suspendDuration / 1000 ) ) ; addressElement . addChild ( suspendElement ) ; } return endpointElement ; } public OMElement serializeEndpointDefinition ( EndpointDefinition endpt ) { OMElement address = fac . createOMElement ( "address" , SynapseConstants . SYNAPSE_OMNAMESPACE ) ; if ( SynapseConstants . FORMAT_POX . equals ( endpt . getFormat ( ) ) ) { address . addAttribute ( fac . createOMAttribute ( "format" , null , "pox" ) ) ; } else if ( SynapseConstants . FORMAT_SOAP11 . equals ( endpt . getFormat ( ) ) ) { address . addAttribute ( fac . createOMAttribute ( "format" , null , "soap11" ) ) ; } else if ( SynapseConstants . FORMAT_SOAP12 . equals ( endpt . getFormat ( ) ) ) { address . addAttribute ( fac . createOMAttribute ( "format" , null , "soap12" ) ) ; } else if ( endpt . isForcePOX ( ) ) { address . addAttribute ( fac . createOMAttribute ( "format" , null , "pox" ) ) ; } else if ( endpt . isForceSOAP11 ( ) ) { address . addAttribute ( fac . createOMAttribute ( "format" , null , "soap11" ) ) ; } else if ( endpt . isForceSOAP12 ( ) ) { address . addAttribute ( fac . createOMAttribute ( "format" , null , "soap12" ) ) ; } if ( endpt . isUseSwa ( ) ) { address . addAttribute ( fac . createOMAttribute ( "optimize" , null , "swa" ) ) ; } else if ( endpt . isUseMTOM ( ) ) { address . addAttribute ( fac . createOMAttribute ( "optimize" , null , "mtom" ) ) ; } if ( endpt . getAddress ( ) != null ) { address . addAttribute ( fac . createOMAttribute ( "uri" , null , endpt . getAddress ( ) ) ) ; } int isEnableStatistics = endpt . getStatisticsState ( ) ; String statisticsValue = null ; if ( isEnableStatistics == org . apache . synapse . SynapseConstants . STATISTICS_ON ) { statisticsValue = org . apache . synapse . config . xml . XMLConfigConstants . STATISTICS_ENABLE ; } else if ( isEnableStatistics == org . apache . synapse . SynapseConstants . STATISTICS_OFF ) { statisticsValue = org . apache . synapse . config . xml . XMLConfigConstants . STATISTICS_DISABLE ; } if ( statisticsValue != null ) { address . addAttribute ( fac . createOMAttribute ( org . apache . synapse . config . xml . XMLConfigConstants . STATISTICS_ATTRIB_NAME , null , statisticsValue ) ) ; } if ( endpt . isAddressingOn ( ) ) { OMElement addressing = fac . createOMElement ( "enableAddressing" , SynapseConstants . SYNAPSE_OMNAMESPACE ) ; if ( endpt . isUseSeparateListener ( ) ) { addressing . addAttribute ( fac . createOMAttribute ( "separateListener" , null , "true" ) ) ; } address . addChild ( addressing ) ; } if ( endpt . isReliableMessagingOn ( ) ) { OMElement rm = fac . createOMElement ( "enableRM" , SynapseConstants . SYNAPSE_OMNAMESPACE ) ; if ( endpt . getWsRMPolicyKey ( ) != null ) { rm . addAttribute ( fac . createOMAttribute ( "policy" , null , endpt . getWsRMPolicyKey ( ) ) ) ; } address . addChild ( rm ) ; } if ( endpt . isSecurityOn ( ) ) { OMElement sec = fac . createOMElement ( "enableSec" , SynapseConstants . SYNAPSE_OMNAMESPACE ) ; if ( endpt . getWsSecPolicyKey ( ) != null ) { sec . addAttribute ( fac . createOMAttribute ( "policy" , null , endpt . getWsSecPolicyKey ( ) ) ) ; } address . addChild ( sec ) ; } if ( endpt . getTimeoutAction ( ) != SynapseConstants . NONE ) { OMElement timeout = fac . createOMElement ( "timeout" , SynapseConstants . SYNAPSE_OMNAMESPACE ) ; address . addChild ( timeout ) ; OMElement duration = fac . createOMElement ( "duration" , SynapseConstants . SYNAPSE_OMNAMESPACE ) ; duration . setText ( Long . toString ( endpt . getTimeoutDuration ( ) / 1000 ) ) ; timeout . addChild ( duration ) ; OMElement action = fac . createOMElement ( "action" , SynapseConstants . SYNAPSE_OMNAMESPACE ) ; if ( endpt . getTimeoutAction ( ) == SynapseConstants . DISCARD ) { action . setText ( "discard" ) ; } else if ( endpt . getTimeoutAction ( ) == SynapseConstants . DISCARD_AND_FAULT ) { action . setText ( "fault" ) ; } timeout . addChild ( action ) ; } return address ; } private static void handleException ( String msg ) { log . error ( msg ) ; throw new SynapseException ( msg ) ; } } 	1	['5', '1', '0', '15', '37', '2', '1', '14', '3', '0.625', '372', '1', '0', '0', '0.375', '0', '0', '73', '22', '5.4', '3']
package org . apache . synapse . config . xml . endpoints ; import org . apache . axiom . om . OMElement ; import org . apache . axiom . om . OMFactory ; import org . apache . axiom . om . OMAbstractFactory ; import org . apache . synapse . endpoints . Endpoint ; import org . apache . synapse . endpoints . WSDLEndpoint ; import org . apache . synapse . SynapseException ; import org . apache . synapse . SynapseConstants ; import org . apache . synapse . endpoints . utils . EndpointDefinition ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class WSDLEndpointSerializer implements EndpointSerializer { private static Log log = LogFactory . getLog ( WSDLEndpointSerializer . class ) ; private OMFactory fac = null ; public OMElement serializeEndpoint ( Endpoint endpoint ) { if ( ! ( endpoint instanceof WSDLEndpoint ) ) { throw new SynapseException ( "Invalid endpoint type." ) ; } fac = OMAbstractFactory . getOMFactory ( ) ; OMElement endpointElement = fac . createOMElement ( "endpoint" , SynapseConstants . SYNAPSE_OMNAMESPACE ) ; WSDLEndpoint wsdlEndpoint = ( WSDLEndpoint ) endpoint ; String name = wsdlEndpoint . getName ( ) ; if ( name != null ) { endpointElement . addAttribute ( "name" , name , null ) ; } OMElement wsdlElement = fac . createOMElement ( "wsdl" , SynapseConstants . SYNAPSE_OMNAMESPACE ) ; String serviceName = wsdlEndpoint . getServiceName ( ) ; if ( serviceName != null ) { wsdlElement . addAttribute ( "service" , serviceName , null ) ; } String portName = wsdlEndpoint . getPortName ( ) ; if ( portName != null ) { wsdlElement . addAttribute ( "port" , portName , null ) ; } String uri = wsdlEndpoint . getWsdlURI ( ) ; if ( uri != null ) { wsdlElement . addAttribute ( "uri" , uri , null ) ; } OMElement wsdlDoc = wsdlEndpoint . getWsdlDoc ( ) ; if ( wsdlDoc != null ) { wsdlElement . addChild ( wsdlDoc ) ; } long suspendDuration = wsdlEndpoint . getSuspendOnFailDuration ( ) ; if ( suspendDuration != - 1 ) { OMElement suspendElement = fac . createOMElement ( org . apache . synapse . config . xml . XMLConfigConstants . SUSPEND_DURATION_ON_FAILURE , SynapseConstants . SYNAPSE_OMNAMESPACE ) ; suspendElement . setText ( Long . toString ( suspendDuration / 1000 ) ) ; wsdlElement . addChild ( suspendElement ) ; } EndpointDefinition epAddress = wsdlEndpoint . getEndpoint ( ) ; serializeQOSInformation ( epAddress , wsdlElement ) ; endpointElement . addChild ( wsdlElement ) ; return endpointElement ; } public void serializeQOSInformation ( EndpointDefinition endpointDefinition , OMElement wsdlElement ) { if ( SynapseConstants . FORMAT_POX . equals ( endpointDefinition . getFormat ( ) ) ) { wsdlElement . addAttribute ( fac . createOMAttribute ( "format" , null , "pox" ) ) ; } else if ( SynapseConstants . FORMAT_SOAP11 . equals ( endpointDefinition . getFormat ( ) ) ) { wsdlElement . addAttribute ( fac . createOMAttribute ( "format" , null , "soap11" ) ) ; } else if ( SynapseConstants . FORMAT_SOAP12 . equals ( endpointDefinition . getFormat ( ) ) ) { wsdlElement . addAttribute ( fac . createOMAttribute ( "format" , null , "soap12" ) ) ; } else if ( endpointDefinition . isForcePOX ( ) ) { wsdlElement . addAttribute ( fac . createOMAttribute ( "format" , null , "pox" ) ) ; } else if ( endpointDefinition . isForceSOAP11 ( ) ) { wsdlElement . addAttribute ( fac . createOMAttribute ( "format" , null , "soap11" ) ) ; } else if ( endpointDefinition . isForceSOAP12 ( ) ) { wsdlElement . addAttribute ( fac . createOMAttribute ( "format" , null , "soap12" ) ) ; } int isEnableStatistics = endpointDefinition . getStatisticsState ( ) ; String statisticsValue = null ; if ( isEnableStatistics == org . apache . synapse . SynapseConstants . STATISTICS_ON ) { statisticsValue = org . apache . synapse . config . xml . XMLConfigConstants . STATISTICS_ENABLE ; } else if ( isEnableStatistics == org . apache . synapse . SynapseConstants . STATISTICS_OFF ) { statisticsValue = org . apache . synapse . config . xml . XMLConfigConstants . STATISTICS_DISABLE ; } if ( statisticsValue != null ) { wsdlElement . addAttribute ( fac . createOMAttribute ( org . apache . synapse . config . xml . XMLConfigConstants . STATISTICS_ATTRIB_NAME , null , statisticsValue ) ) ; } if ( endpointDefinition . isAddressingOn ( ) ) { OMElement addressing = fac . createOMElement ( "enableAddressing" , SynapseConstants . SYNAPSE_OMNAMESPACE ) ; if ( endpointDefinition . isUseSeparateListener ( ) ) { addressing . addAttribute ( fac . createOMAttribute ( "separateListener" , null , "true" ) ) ; } wsdlElement . addChild ( addressing ) ; } if ( endpointDefinition . isReliableMessagingOn ( ) ) { OMElement rm = fac . createOMElement ( "enableRM" , SynapseConstants . SYNAPSE_OMNAMESPACE ) ; if ( endpointDefinition . getWsRMPolicyKey ( ) != null ) { rm . addAttribute ( fac . createOMAttribute ( "policy" , null , endpointDefinition . getWsRMPolicyKey ( ) ) ) ; } wsdlElement . addChild ( rm ) ; } if ( endpointDefinition . isSecurityOn ( ) ) { OMElement sec = fac . createOMElement ( "enableSec" , SynapseConstants . SYNAPSE_OMNAMESPACE ) ; if ( endpointDefinition . getWsSecPolicyKey ( ) != null ) { sec . addAttribute ( fac . createOMAttribute ( "policy" , null , endpointDefinition . getWsSecPolicyKey ( ) ) ) ; } wsdlElement . addChild ( sec ) ; } if ( endpointDefinition . getTimeoutAction ( ) != SynapseConstants . NONE ) { OMElement timeout = fac . createOMElement ( "timeout" , SynapseConstants . SYNAPSE_OMNAMESPACE ) ; wsdlElement . addChild ( timeout ) ; OMElement duration = fac . createOMElement ( "duration" , SynapseConstants . SYNAPSE_OMNAMESPACE ) ; duration . setText ( Long . toString ( endpointDefinition . getTimeoutDuration ( ) / 1000 ) ) ; timeout . addChild ( duration ) ; OMElement action = fac . createOMElement ( "action" , SynapseConstants . SYNAPSE_OMNAMESPACE ) ; if ( endpointDefinition . getTimeoutAction ( ) == SynapseConstants . DISCARD ) { action . setText ( "discard" ) ; } else if ( endpointDefinition . getTimeoutAction ( ) == SynapseConstants . DISCARD_AND_FAULT ) { action . setText ( "fault" ) ; } timeout . addChild ( action ) ; } } private static void handleException ( String msg ) { log . error ( msg ) ; throw new SynapseException ( msg ) ; } } 	1	['5', '1', '0', '15', '38', '2', '1', '14', '3', '0.625', '374', '1', '0', '0', '0.35', '0', '0', '73.4', '19', '5.6', '2']
package org . apache . synapse . endpoints ; import org . apache . synapse . FaultHandler ; import org . apache . synapse . MessageContext ; import org . apache . synapse . endpoints . algorithms . LoadbalanceAlgorithm ; import java . util . ArrayList ; import java . util . List ; public class LoadbalanceEndpoint implements Endpoint { private String name = null ; private List endpoints = null ; private LoadbalanceAlgorithm algorithm = null ; private volatile boolean active = true ; private boolean failover = true ; private Endpoint parentEndpoint = null ; public void send ( MessageContext synMessageContext ) { Endpoint endpoint = algorithm . getNextEndpoint ( synMessageContext ) ; if ( endpoint != null ) { if ( failover ) { synMessageContext . getEnvelope ( ) . build ( ) ; } endpoint . send ( synMessageContext ) ; } else { setActive ( false , synMessageContext ) ; if ( parentEndpoint != null ) { parentEndpoint . onChildEndpointFail ( this , synMessageContext ) ; } else { Object o = synMessageContext . getFaultStack ( ) . pop ( ) ; if ( o != null ) { ( ( FaultHandler ) o ) . handleFault ( synMessageContext ) ; } } } } public String getName ( ) { return name ; } public void setName ( String name ) { this . name = name . trim ( ) ; } public LoadbalanceAlgorithm getAlgorithm ( ) { return algorithm ; } public void setAlgorithm ( LoadbalanceAlgorithm algorithm ) { this . algorithm = algorithm ; } public boolean isActive ( MessageContext synMessageContext ) { if ( ! active ) { for ( int i = 0 ; i < endpoints . size ( ) ; i ++ ) { Endpoint endpoint = ( Endpoint ) endpoints . get ( i ) ; if ( endpoint . isActive ( synMessageContext ) ) { active = true ; } } } return active ; } public void setActive ( boolean active , MessageContext synMessageContext ) { this . active = active ; } public boolean isFailover ( ) { return failover ; } public void setFailover ( boolean failover ) { this . failover = failover ; } public List getEndpoints ( ) { return endpoints ; } public void setEndpoints ( List endpoints ) { this . endpoints = endpoints ; } public void setParentEndpoint ( Endpoint parentEndpoint ) { this . parentEndpoint = parentEndpoint ; } public void onChildEndpointFail ( Endpoint endpoint , MessageContext synMessageContext ) { if ( failover ) { send ( synMessageContext ) ; } else { Object o = synMessageContext . getFaultStack ( ) . pop ( ) ; if ( o != null ) { ( ( FaultHandler ) o ) . handleFault ( synMessageContext ) ; } } } } 	1	['14', '1', '0', '8', '27', '35', '3', '5', '14', '0.743589744', '165', '1', '2', '0', '0.255102041', '0', '0', '10.35714286', '5', '1.5714', '1']
package org . apache . synapse . config . xml . endpoints ; import org . apache . axiom . om . OMElement ; import org . apache . axiom . om . OMAbstractFactory ; import org . apache . axiom . om . OMFactory ; import org . apache . synapse . endpoints . Endpoint ; import org . apache . synapse . endpoints . IndirectEndpoint ; import org . apache . synapse . SynapseException ; import org . apache . synapse . SynapseConstants ; public class IndirectEndpointSerializer implements EndpointSerializer { private OMFactory fac = null ; public OMElement serializeEndpoint ( Endpoint endpoint ) { if ( ! ( endpoint instanceof IndirectEndpoint ) ) { throw new SynapseException ( "Invalid endpoint type." ) ; } fac = OMAbstractFactory . getOMFactory ( ) ; OMElement endpointElement = fac . createOMElement ( "endpoint" , SynapseConstants . SYNAPSE_OMNAMESPACE ) ; IndirectEndpoint indirectEndpoint = ( IndirectEndpoint ) endpoint ; String ref = indirectEndpoint . getKey ( ) ; if ( ref != null ) { endpointElement . addAttribute ( "key" , ref , null ) ; } return endpointElement ; } } 	1	['2', '1', '0', '11', '8', '0', '1', '10', '2', '0', '42', '1', '0', '0', '0.75', '0', '0', '19.5', '3', '1.5', '1']
package org . apache . synapse . endpoints ; import org . apache . synapse . endpoints . algorithms . LoadbalanceAlgorithm ; import org . apache . synapse . endpoints . dispatch . Dispatcher ; import org . apache . synapse . MessageContext ; import org . apache . synapse . FaultHandler ; import org . apache . synapse . SynapseException ; import org . apache . synapse . core . axis2 . Axis2MessageContext ; import org . apache . axis2 . context . OperationContext ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import java . util . ArrayList ; import java . util . List ; public class SALoadbalanceEndpoint implements Endpoint { private static final Log log = LogFactory . getLog ( SALoadbalanceEndpoint . class ) ; private static final String FIRST_MESSAGE_IN_SESSION = "first_message_in_session" ; private String name = null ; private List endpoints = null ; private LoadbalanceAlgorithm algorithm = null ; private volatile boolean active = true ; private Endpoint parentEndpoint = null ; private Dispatcher dispatcher = null ; public void send ( MessageContext synMessageContext ) { Endpoint endpoint = null ; endpoint = dispatcher . getEndpoint ( synMessageContext ) ; if ( endpoint == null ) { endpoint = algorithm . getNextEndpoint ( synMessageContext ) ; if ( dispatcher . isServerInitiatedSession ( ) ) { Axis2MessageContext axis2MsgCtx = ( Axis2MessageContext ) synMessageContext ; OperationContext opCtx = axis2MsgCtx . getAxis2MessageContext ( ) . getOperationContext ( ) ; Object o = opCtx . getProperty ( "endpointList" ) ; if ( o != null ) { List endpointList = ( List ) o ; endpointList . add ( this ) ; if ( ! ( endpoint instanceof SALoadbalanceEndpoint ) ) { endpointList . add ( endpoint ) ; } } else { List endpointList = new ArrayList ( ) ; endpointList . add ( this ) ; if ( ! ( endpoint instanceof SALoadbalanceEndpoint ) ) { endpointList . add ( endpoint ) ; } opCtx . setProperty ( "endpointList" , endpointList ) ; } } else { dispatcher . updateSession ( synMessageContext , endpoint ) ; } synMessageContext . getEnvelope ( ) . build ( ) ; synMessageContext . setProperty ( FIRST_MESSAGE_IN_SESSION , Boolean . TRUE ) ; } if ( endpoint != null ) { if ( endpoint . isActive ( synMessageContext ) ) { endpoint . send ( synMessageContext ) ; } else { informFailure ( synMessageContext ) ; } } else { setActive ( false , synMessageContext ) ; informFailure ( synMessageContext ) ; } } public void updateSession ( MessageContext responseMsgCtx , List endpointList ) { Endpoint endpoint = ( Endpoint ) endpointList . remove ( 0 ) ; dispatcher . updateSession ( responseMsgCtx , endpoint ) ; if ( endpoint instanceof SALoadbalanceEndpoint ) { ( ( SALoadbalanceEndpoint ) endpoint ) . updateSession ( responseMsgCtx , endpointList ) ; } } public String getName ( ) { return name ; } public void setName ( String name ) { this . name = name . trim ( ) ; } public LoadbalanceAlgorithm getAlgorithm ( ) { return algorithm ; } public void setAlgorithm ( LoadbalanceAlgorithm algorithm ) { this . algorithm = algorithm ; } public boolean isActive ( MessageContext synMessageContext ) { return active ; } public void setActive ( boolean active , MessageContext synMessageContext ) { this . active = active ; } public List getEndpoints ( ) { return endpoints ; } public void setEndpoints ( List endpoints ) { this . endpoints = endpoints ; } public void setParentEndpoint ( Endpoint parentEndpoint ) { this . parentEndpoint = parentEndpoint ; } public Dispatcher getDispatcher ( ) { return dispatcher ; } public void setDispatcher ( Dispatcher dispatcher ) { this . dispatcher = dispatcher ; } public void onChildEndpointFail ( Endpoint endpoint , MessageContext synMessageContext ) { Object o = synMessageContext . getProperty ( FIRST_MESSAGE_IN_SESSION ) ; if ( o != null && Boolean . TRUE . equals ( o ) ) { dispatcher . unbind ( synMessageContext ) ; send ( synMessageContext ) ; } else { informFailure ( synMessageContext ) ; } } private void informFailure ( MessageContext synMessageContext ) { if ( parentEndpoint != null ) { parentEndpoint . onChildEndpointFail ( this , synMessageContext ) ; } else { Object o = synMessageContext . getFaultStack ( ) . pop ( ) ; if ( o != null ) { ( ( FaultHandler ) o ) . handleFault ( synMessageContext ) ; } } } private static void handleException ( String msg ) { log . error ( msg ) ; throw new SynapseException ( msg ) ; } } 	1	['18', '1', '0', '16', '46', '87', '4', '12', '15', '0.845588235', '260', '1', '3', '0', '0.227941176', '0', '0', '13', '7', '1.5', '1']
package org . apache . synapse . config . xml ; import org . apache . axiom . om . OMElement ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import org . apache . synapse . Mediator ; import org . apache . synapse . SynapseException ; import org . apache . synapse . config . xml . endpoints . EndpointFactory ; import org . apache . synapse . config . xml . endpoints . EndpointAbstractFactory ; import org . apache . synapse . mediators . builtin . SendMediator ; import org . apache . synapse . endpoints . Endpoint ; import javax . xml . namespace . QName ; public class SendMediatorFactory extends AbstractMediatorFactory { private static final QName SEND_Q = new QName ( XMLConfigConstants . SYNAPSE_NAMESPACE , "send" ) ; private static final QName ENDPOINT_Q = new QName ( XMLConfigConstants . SYNAPSE_NAMESPACE , "endpoint" ) ; public Mediator createMediator ( OMElement elem ) { SendMediator sm = new SendMediator ( ) ; processTraceState ( sm , elem ) ; OMElement epElement = elem . getFirstChildWithName ( ENDPOINT_Q ) ; if ( epElement != null ) { EndpointFactory fac = EndpointAbstractFactory . getEndpointFactroy ( epElement ) ; if ( fac != null ) { Endpoint endpoint = fac . createEndpoint ( epElement , true ) ; if ( endpoint != null ) { sm . setEndpoint ( endpoint ) ; } } else { throw new SynapseException ( "Invalid endpoint fromat." ) ; } } return sm ; } public QName getTagQName ( ) { return SEND_Q ; } } 	1	['4', '2', '0', '8', '13', '2', '0', '8', '3', '0.666666667', '61', '1', '0', '0.6', '0.666666667', '0', '0', '13.75', '3', '1', '1']
package org . apache . synapse . endpoints ; import org . apache . synapse . MessageContext ; import org . apache . synapse . SynapseException ; import org . apache . synapse . FaultHandler ; import org . apache . synapse . SynapseConstants ; import org . apache . synapse . endpoints . utils . EndpointDefinition ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class IndirectEndpoint implements Endpoint { private static final Log trace = LogFactory . getLog ( SynapseConstants . TRACE_LOGGER ) ; private static final Log log = LogFactory . getLog ( IndirectEndpoint . class ) ; private String name = null ; private String key = null ; private boolean active = true ; private Endpoint parentEndpoint = null ; private MessageContext currentMsgCtx = null ; public void send ( MessageContext synMessageContext ) { Endpoint endpoint = synMessageContext . getEndpoint ( key ) ; if ( endpoint == null ) { handleException ( "Reference to non-existent endpoint for key : " + key ) ; } if ( endpoint . isActive ( synMessageContext ) ) { endpoint . send ( synMessageContext ) ; } else { if ( parentEndpoint != null ) { auditWarn ( "Endpoint : " + endpoint . getName ( ) + " is currently inactive" + " - invoking parent endpoint" , synMessageContext ) ; parentEndpoint . onChildEndpointFail ( this , synMessageContext ) ; } else { auditWarn ( "Endpoint : " + endpoint . getName ( ) + " is currently inactive" + " - invoking fault handler / assuming failure" , synMessageContext ) ; Object o = synMessageContext . getFaultStack ( ) . pop ( ) ; if ( o != null ) { ( ( FaultHandler ) o ) . handleFault ( synMessageContext ) ; } } } } public String getName ( ) { return name ; } public void setName ( String name ) { this . name = name . trim ( ) ; } public String getKey ( ) { return key ; } public void setKey ( String key ) { this . key = key ; } public boolean isActive ( MessageContext synMessageContext ) { Endpoint endpoint = synMessageContext . getEndpoint ( key ) ; if ( endpoint == null ) { handleException ( "Reference to non-existent endpoint for key : " + key ) ; } return endpoint . isActive ( synMessageContext ) ; } public void setActive ( boolean active , MessageContext synMessageContext ) { Endpoint endpoint = synMessageContext . getEndpoint ( key ) ; if ( endpoint == null ) { handleException ( "Reference to non-existent endpoint for key : " + key ) ; } endpoint . setActive ( active , synMessageContext ) ; } public void setParentEndpoint ( Endpoint parentEndpoint ) { this . parentEndpoint = parentEndpoint ; } public void onChildEndpointFail ( Endpoint endpoint , MessageContext synMessageContext ) { if ( parentEndpoint != null ) { parentEndpoint . onChildEndpointFail ( this , synMessageContext ) ; } else { Object o = synMessageContext . getFaultStack ( ) . pop ( ) ; if ( o != null ) { ( ( FaultHandler ) o ) . handleFault ( synMessageContext ) ; } } } private void handleException ( String msg ) { log . error ( msg ) ; throw new SynapseException ( msg ) ; } protected void auditWarn ( String msg , MessageContext msgContext ) { log . warn ( msg ) ; if ( msgContext . getServiceLog ( ) != null ) { msgContext . getServiceLog ( ) . warn ( msg ) ; } if ( shouldTrace ( msgContext ) ) { trace . warn ( msg ) ; } } public boolean shouldTrace ( MessageContext synCtx ) { Endpoint endpoint = synCtx . getEndpoint ( key ) ; EndpointDefinition endptDefn = null ; if ( endpoint instanceof AddressEndpoint ) { AddressEndpoint addEndpt = ( AddressEndpoint ) endpoint ; endptDefn = addEndpt . getEndpoint ( ) ; } else if ( endpoint instanceof WSDLEndpoint ) { WSDLEndpoint wsdlEndpt = ( WSDLEndpoint ) endpoint ; endptDefn = wsdlEndpt . getEndpoint ( ) ; } if ( endptDefn != null ) { return ( endptDefn . getTraceState ( ) == SynapseConstants . TRACING_ON ) || ( endptDefn . getTraceState ( ) == SynapseConstants . TRACING_UNSET && synCtx . getTracingState ( ) == SynapseConstants . TRACING_ON ) ; } return false ; } } 	1	['14', '1', '0', '12', '38', '27', '3', '9', '11', '0.791208791', '280', '1', '2', '0', '0.4', '0', '0', '18.5', '7', '2', '1']
package org . apache . synapse ; import org . apache . axiom . om . OMAbstractFactory ; import org . apache . axiom . om . OMNamespace ; import javax . xml . namespace . QName ; public final class SynapseConstants { public static final String SYNAPSE_NAMESPACE = "http://ws.apache.org/ns/synapse" ; public static final OMNamespace SYNAPSE_OMNAMESPACE = OMAbstractFactory . getOMFactory ( ) . createOMNamespace ( SYNAPSE_NAMESPACE , "syn" ) ; public static final String MAIN_SEQUENCE_KEY = "main" ; public static final String FAULT_SEQUENCE_KEY = "fault" ; public static final String SYNAPSE_SERVICE_NAME = "__SynapseService" ; public static final QName SYNAPSE_OPERATION_NAME = new QName ( "mediate" ) ; public static final String SANDESHA2_MODULE_NAME = "sandesha2" ; public static final String ADDRESSING_MODULE_NAME = "addressing" ; public static final String RAMPART_MODULE_NAME = "rampart" ; public static final String HEADER_TO = "To" ; public static final String HEADER_FROM = "From" ; public static final String HEADER_FAULT = "FaultTo" ; public static final String HEADER_ACTION = "Action" ; public static final String HEADER_REPLY_TO = "ReplyTo" ; public static final String HEADER_MESSAGE_ID = "MessageID" ; public static final String PROPERTY_MESSAGE_FORMAT = "MESSAGE_FORMAT" ; public static final String RAMPART_POLICY = "rampartPolicy" ; public static final String SANDESHA_POLICY = "sandeshaPolicy" ; public static final String SYNAPSE_CONFIG = "synapse.config" ; public static final String SYNAPSE_ENV = "synapse.env" ; public static final String SYNAPSE_HOME = "synapse.home" ; public static final String DEFAULT_PROP_PATH = "synapse.properties" ; public static final String SYNAPSE_XML = "synapse.xml" ; public static final String SYNAPSE_PROPERTIES = "synapse.properties" ; public static final String PROXY_SERVICE = "proxy.name" ; public static final String RESPONSE = "RESPONSE" ; public static final String OUT_ONLY = "OUT_ONLY" ; public static final String ERROR_CODE = "ERROR_CODE" ; public static final String ERROR_MESSAGE = "ERROR_MESSAGE" ; public static final String ERROR_DETAIL = "ERROR_DETAIL" ; public static final String SANDESHA_LAST_MESSAGE = "Sandesha2LastMessage" ; public static final String SANDESHA_SEQUENCE_KEY = "Sandesha2SequenceKey" ; public static final String SANDESHA_SPEC_VERSION = "Sandesha2RMSpecVersion" ; public static final String RELATES_TO_FOR_POX = "synapse.RelatesToForPox" ; public static final String ISRESPONSE_PROPERTY = "synapse.isresponse" ; public static final String TRACE_LOGGER = "TRACE_LOGGER" ; public static final String SERVICE_LOGGER_PREFIX = "SERVICE_LOGGER." ; public static final int TRACING_OFF = 0 ; public static final int TRACING_ON = 1 ; public static final int TRACING_UNSET = 2 ; public static final int STATISTICS_OFF = 0 ; public static final int STATISTICS_ON = 1 ; public static final int STATISTICS_UNSET = 2 ; public static final String SEQUENCE_STATS = "synapse.sequence.stats" ; public static final String PROXY_STATS = "synapse.proxy.stats" ; public static final String SERVICE_STATS = "synapse.service.stats" ; public static final String ENDPOINT_STATS = "synapse.endpoint.stats" ; public static final int SEQUENCE_STATISTICS = 0 ; public static final int PROXYSERVICE_STATISTICS = 1 ; public static final int ENDPOINT_STATISTICS = 2 ; public static final String TIMEOUT_HANDLER_INTERVAL = "synapse.timeout_handler_interval" ; public static final long DEFAULT_TIMEOUT_HANDLER_INTERVAL = 15000 ; public static final String GLOBAL_TIMEOUT_INTERVAL = "synapse.global_timeout_interval" ; public static final long DEFAULT_GLOBAL_TIMEOUT = 24 * 60 * 60 * 1000 ; public static final int NONE = 100 ; public static final int DISCARD = 101 ; public static final int DISCARD_AND_FAULT = 102 ; public static final String TIME_OUT = "504" ; public static final String SENDING_FAULT = "503" ; public static final String PROCESSED_ENDPOINT = "processed_endpoint" ; public static final String ANONYMOUS_ENDPOINT = "AnonymousEndpoint" ; public static final String ANONYMOUS_SEQUENCE = "AnonymousSequence" ; public static final String FORMAT_POX = "pox" ; public static final String FORMAT_SOAP11 = "soap11" ; public static final String FORMAT_SOAP12 = "soap12" ; } 	1	['2', '1', '0', '11', '6', '1', '8', '3', '1', '1.969230769', '81', '0', '0', '0', '1', '0', '0', '7', '0', '0', '3']
package org . apache . synapse . config . xml ; import java . io . OutputStream ; import java . util . HashMap ; import java . util . Iterator ; import java . util . Map ; import java . util . Collection ; import javax . xml . namespace . QName ; import javax . xml . stream . XMLStreamException ; import org . apache . axiom . om . OMAbstractFactory ; import org . apache . axiom . om . OMElement ; import org . apache . axiom . om . OMFactory ; import org . apache . axiom . om . OMNamespace ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import org . apache . synapse . Mediator ; import org . apache . synapse . SynapseException ; import org . apache . synapse . config . Entry ; import org . apache . synapse . config . SynapseConfiguration ; import org . apache . synapse . config . xml . endpoints . EndpointAbstractSerializer ; import org . apache . synapse . core . axis2 . ProxyService ; import org . apache . synapse . endpoints . Endpoint ; import org . apache . synapse . Startup ; public class SynapseXMLConfigurationSerializer implements ConfigurationSerializer { private static final Log log = LogFactory . getLog ( XMLConfigurationSerializer . class ) ; private static final OMFactory fac = OMAbstractFactory . getOMFactory ( ) ; private static final OMNamespace synNS = fac . createOMNamespace ( XMLConfigConstants . SYNAPSE_NAMESPACE , "syn" ) ; private static final OMNamespace nullNS = fac . createOMNamespace ( XMLConfigConstants . NULL_NAMESPACE , "" ) ; public OMElement serializeConfiguration ( SynapseConfiguration synCfg ) { OMElement definitions = fac . createOMElement ( "definitions" , synNS ) ; if ( synCfg . getRegistry ( ) != null ) { RegistrySerializer . serializeRegistry ( definitions , synCfg . getRegistry ( ) ) ; } Iterator iter = synCfg . getProxyServices ( ) . iterator ( ) ; while ( iter . hasNext ( ) ) { ProxyService service = ( ProxyService ) iter . next ( ) ; ProxyServiceSerializer . serializeProxy ( definitions , service ) ; } Map entries = new HashMap ( ) ; Map endpoints = new HashMap ( ) ; Map sequences = new HashMap ( ) ; iter = synCfg . getLocalRegistry ( ) . keySet ( ) . iterator ( ) ; while ( iter . hasNext ( ) ) { Object key = iter . next ( ) ; Object o = synCfg . getLocalRegistry ( ) . get ( key ) ; if ( o instanceof Mediator ) { sequences . put ( key , o ) ; } else if ( o instanceof Endpoint ) { endpoints . put ( key , o ) ; } else if ( o instanceof Entry ) { entries . put ( key , o ) ; } else { handleException ( "Unknown object : " + o . getClass ( ) + " for serialization into Synapse configuration" ) ; } } serializeEntries ( definitions , entries ) ; serializeEndpoints ( definitions , endpoints ) ; serializeSequences ( definitions , sequences ) ; serializeStartups ( definitions , synCfg . getStartups ( ) ) ; return definitions ; } private static void serializeEntries ( OMElement definitions , Map entries ) { Iterator iter = entries . keySet ( ) . iterator ( ) ; while ( iter . hasNext ( ) ) { String key = ( String ) iter . next ( ) ; EntrySerializer . serializeEntry ( ( Entry ) entries . get ( key ) , definitions ) ; } } private static void serializeStartups ( OMElement definitions , Collection startups ) { Iterator it = startups . iterator ( ) ; while ( it . hasNext ( ) ) { Startup s = ( Startup ) it . next ( ) ; StartupFinder . getInstance ( ) . serializeStartup ( definitions , s ) ; } } private static void serializeEndpoints ( OMElement definitions , Map endpoints ) { Iterator iter = endpoints . keySet ( ) . iterator ( ) ; while ( iter . hasNext ( ) ) { String key = ( String ) iter . next ( ) ; Object o = endpoints . get ( key ) ; if ( o instanceof Endpoint ) { Endpoint endpoint = ( Endpoint ) o ; OMElement epElement = EndpointAbstractSerializer . getEndpointSerializer ( endpoint ) . serializeEndpoint ( endpoint ) ; definitions . addChild ( epElement ) ; } } } private static void serializeSequences ( OMElement definitions , Map sequences ) { Iterator iter = sequences . keySet ( ) . iterator ( ) ; while ( iter . hasNext ( ) ) { String key = ( String ) iter . next ( ) ; Mediator mediator = ( Mediator ) sequences . get ( key ) ; MediatorSerializerFinder . getInstance ( ) . getSerializer ( mediator ) . serializeMediator ( definitions , mediator ) ; } } private static void handleException ( String msg ) { log . error ( msg ) ; throw new SynapseException ( msg ) ; } public QName getTagQName ( ) { return XMLConfigConstants . DEFINITIONS_ELT ; } } 	1	['9', '1', '0', '25', '44', '32', '0', '25', '3', '0.875', '247', '1', '0', '0', '0.270833333', '0', '0', '26', '7', '1.8889', '1']
package org . apache . synapse . config . xml . endpoints ; import org . apache . axiom . om . OMElement ; import org . apache . axiom . om . OMFactory ; import org . apache . axiom . om . OMAbstractFactory ; import org . apache . synapse . endpoints . Endpoint ; import org . apache . synapse . endpoints . LoadbalanceEndpoint ; import org . apache . synapse . endpoints . algorithms . LoadbalanceAlgorithm ; import org . apache . synapse . endpoints . algorithms . RoundRobin ; import org . apache . synapse . SynapseException ; import org . apache . synapse . SynapseConstants ; import java . util . List ; public class LoadbalanceEndpointSerializer implements EndpointSerializer { private OMFactory fac = null ; public OMElement serializeEndpoint ( Endpoint endpoint ) { if ( ! ( endpoint instanceof LoadbalanceEndpoint ) ) { throw new SynapseException ( "Invalid endpoint type." ) ; } fac = OMAbstractFactory . getOMFactory ( ) ; OMElement endpointElement = fac . createOMElement ( "endpoint" , SynapseConstants . SYNAPSE_OMNAMESPACE ) ; LoadbalanceEndpoint loadbalanceEndpoint = ( LoadbalanceEndpoint ) endpoint ; String name = loadbalanceEndpoint . getName ( ) ; if ( name != null ) { endpointElement . addAttribute ( "name" , name , null ) ; } OMElement loadbalanceElement = fac . createOMElement ( "loadbalance" , SynapseConstants . SYNAPSE_OMNAMESPACE ) ; endpointElement . addChild ( loadbalanceElement ) ; LoadbalanceAlgorithm algorithm = loadbalanceEndpoint . getAlgorithm ( ) ; String algorithmName = "roundRobin" ; if ( algorithm instanceof RoundRobin ) { algorithmName = "roundRobin" ; } loadbalanceElement . addAttribute ( org . apache . synapse . config . xml . XMLConfigConstants . ALGORITHM_NAME , algorithmName , null ) ; if ( ! loadbalanceEndpoint . isFailover ( ) ) { loadbalanceElement . addAttribute ( "failover" , "false" , null ) ; } List endpoints = loadbalanceEndpoint . getEndpoints ( ) ; for ( int i = 0 ; i < endpoints . size ( ) ; i ++ ) { Endpoint childEndpoint = ( Endpoint ) endpoints . get ( i ) ; EndpointSerializer serializer = EndpointAbstractSerializer . getEndpointSerializer ( childEndpoint ) ; OMElement aeElement = serializer . serializeEndpoint ( childEndpoint ) ; loadbalanceElement . addChild ( aeElement ) ; } return endpointElement ; } } 	1	['2', '1', '0', '14', '16', '0', '1', '14', '2', '0', '102', '1', '0', '0', '0.75', '0', '0', '49.5', '6', '3', '1']
package org . apache . synapse . mediators . eip . aggregator ; import org . apache . axiom . om . xpath . AXIOMXPath ; import org . apache . axiom . soap . SOAP11Constants ; import org . apache . axiom . soap . SOAP12Constants ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import org . apache . synapse . MessageContext ; import org . apache . synapse . SynapseException ; import org . apache . synapse . SynapseConstants ; import org . apache . synapse . mediators . AbstractMediator ; import org . apache . synapse . mediators . eip . EIPUtils ; import org . apache . synapse . mediators . eip . EIPConstants ; import org . apache . synapse . mediators . base . SequenceMediator ; import org . jaxen . JaxenException ; import java . util . HashMap ; import java . util . Iterator ; import java . util . Map ; public class AggregateMediator extends AbstractMediator { private static final Log log = LogFactory . getLog ( AggregateMediator . class ) ; private static final Log trace = LogFactory . getLog ( SynapseConstants . TRACE_LOGGER ) ; private long timeToInvalidate = 0 ; private AXIOMXPath corelateExpression = null ; private long completeTimeout = 0 ; private int minMessagesToComplete = - 1 ; private int maxMessagesToComplete = - 1 ; private AXIOMXPath aggregationExpression = null ; private String invalidMsgSequenceRef = null ; private SequenceMediator invalidMsgSequence = null ; private long invlidateToDestroyTime = 0 ; private String onCompleteSequenceRef = null ; private SequenceMediator onCompleteSequence = null ; private Map activeAggregates = new HashMap ( ) ; private Map expiredAggregates = new HashMap ( ) ; private boolean isTimerSet = false ; public AggregateMediator ( ) { try { aggregationExpression = new AXIOMXPath ( "s11:Body/child::*[position()=1] | " + "s12:Body/child::*[position()=1]" ) ; aggregationExpression . addNamespace ( "s11" , SOAP11Constants . SOAP_ENVELOPE_NAMESPACE_URI ) ; aggregationExpression . addNamespace ( "s12" , SOAP12Constants . SOAP_ENVELOPE_NAMESPACE_URI ) ; } catch ( JaxenException e ) { if ( log . isDebugEnabled ( ) ) { handleException ( "Unable to set the default " + "aggregationExpression for the aggregation" , e , null ) ; } } } public boolean mediate ( MessageContext synCtx ) { boolean traceOn = isTraceOn ( synCtx ) ; boolean traceOrDebugOn = isTraceOrDebugOn ( traceOn ) ; if ( traceOrDebugOn ) { traceOrDebug ( traceOn , "Start : Aggregate mediator" ) ; if ( traceOn && trace . isTraceEnabled ( ) ) { trace . trace ( "Message : " + synCtx . getEnvelope ( ) ) ; } } try { Aggregate aggregate = null ; if ( this . corelateExpression != null && this . corelateExpression . evaluate ( synCtx . getEnvelope ( ) ) != null ) { if ( activeAggregates . containsKey ( this . corelateExpression . toString ( ) ) ) { Object o = activeAggregates . get ( this . corelateExpression . toString ( ) ) ; if ( o instanceof Aggregate ) { aggregate = ( Aggregate ) o ; } else { handleException ( "Undefined aggregate type." , synCtx ) ; } } else { aggregate = new Aggregate ( this . corelateExpression . toString ( ) , this . completeTimeout , this . minMessagesToComplete , this . maxMessagesToComplete ) ; activeAggregates . put ( this . corelateExpression . toString ( ) , aggregate ) ; } } else if ( synCtx . getProperty ( EIPConstants . AGGREGATE_CORELATION ) != null ) { String corelation = synCtx . getProperty ( EIPConstants . AGGREGATE_CORELATION ) instanceof String ? synCtx . getProperty ( EIPConstants . AGGREGATE_CORELATION ) . toString ( ) : null ; if ( expiredAggregates . containsKey ( corelation ) ) { if ( traceOrDebugOn ) { traceOrDebug ( traceOn , "Message with the corelation " + corelation + " expired. Invalidating the message." ) ; } invalidate ( synCtx , traceOrDebugOn , traceOn ) ; return false ; } if ( corelation != null ) { if ( activeAggregates . containsKey ( corelation ) ) { Object o = activeAggregates . get ( corelation ) ; if ( o instanceof Aggregate ) { aggregate = ( Aggregate ) o ; } else { handleException ( "Undefined aggregate type." , synCtx ) ; } } else { aggregate = new Aggregate ( corelation , this . completeTimeout , this . minMessagesToComplete , this . maxMessagesToComplete ) ; activeAggregates . put ( corelation , aggregate ) ; } } else { if ( traceOrDebugOn ) { traceOrDebug ( traceOn , "Error in getting corelation details. Skip the aggregator." ) ; } return true ; } } else { if ( traceOrDebugOn ) { traceOrDebug ( traceOn , "Unable to find the aggregation corelation. Skip the aggregation" ) ; } return true ; } if ( aggregate != null ) { if ( ! aggregate . addMessage ( synCtx ) ) { if ( traceOrDebugOn ) { traceOrDebug ( traceOn , "Can not exceed aggregate " + "max message count. Invalidating message" ) ; } invalidate ( synCtx , traceOrDebugOn , traceOn ) ; return false ; } if ( aggregate . isComplete ( ) ) { return completeAggregate ( aggregate ) ; } } else { if ( traceOrDebugOn ) { traceOrDebug ( traceOn , "Unable to find the aggregate. Skip the aggregation" ) ; } return true ; } } catch ( JaxenException e ) { handleException ( "Unable to execute the XPATH over the message" , e , synCtx ) ; } if ( traceOrDebugOn ) { traceOrDebug ( traceOn , "End : Aggregate mediator" ) ; } return false ; } private void invalidate ( MessageContext synCtx , boolean traceOrDebugOn , boolean traceOn ) { if ( this . invalidMsgSequenceRef != null && synCtx . getConfiguration ( ) . getSequence ( invalidMsgSequenceRef ) != null ) { synCtx . getConfiguration ( ) . getSequence ( invalidMsgSequenceRef ) . mediate ( synCtx ) ; } else if ( this . invalidMsgSequence != null ) { invalidMsgSequence . mediate ( synCtx ) ; } else { if ( traceOrDebugOn ) { traceOrDebug ( traceOn , "No invalid message sequence defined. Dropping the message" ) ; } } } public boolean completeAggregate ( Aggregate aggregate ) { MessageContext newSynCtx = getAggregatedMessage ( aggregate ) ; activeAggregates . remove ( aggregate . getCorelation ( ) ) ; if ( ( this . corelateExpression != null && ! this . corelateExpression . toString ( ) . equals ( aggregate . getCorelation ( ) ) ) || this . corelateExpression == null ) { expiredAggregates . put ( aggregate . getCorelation ( ) , new Long ( System . currentTimeMillis ( ) + this . invlidateToDestroyTime ) ) ; if ( this . onCompleteSequence != null ) { this . onCompleteSequence . mediate ( newSynCtx ) ; } else if ( this . onCompleteSequenceRef != null && newSynCtx . getSequence ( this . onCompleteSequenceRef ) != null ) { newSynCtx . getSequence ( this . onCompleteSequenceRef ) . mediate ( newSynCtx ) ; } else { handleException ( "Unable to find the sequence for the mediation " + "of the aggregated message" , newSynCtx ) ; } return false ; } else { return true ; } } public MessageContext getAggregatedMessage ( Aggregate aggregate ) { MessageContext newCtx = null ; Iterator itr = aggregate . getMessages ( ) . iterator ( ) ; while ( itr . hasNext ( ) ) { Object o = itr . next ( ) ; if ( o instanceof MessageContext ) { MessageContext synCtx = ( MessageContext ) o ; if ( newCtx == null ) { newCtx = synCtx ; } else { try { EIPUtils . enrichEnvelope ( newCtx . getEnvelope ( ) , synCtx . getEnvelope ( ) , this . aggregationExpression ) ; } catch ( JaxenException e ) { handleException ( "Unable to get the aggreagated message" , e , synCtx ) ; } } } } return newCtx ; } public AXIOMXPath getCorelateExpression ( ) { return corelateExpression ; } public void setCorelateExpression ( AXIOMXPath corelateExpression ) { this . corelateExpression = corelateExpression ; } public String getInvalidMsgSequenceRef ( ) { return invalidMsgSequenceRef ; } public void setInvalidMsgSequenceRef ( String invalidMsgSequenceRef ) { this . invalidMsgSequenceRef = invalidMsgSequenceRef ; } public SequenceMediator getInvalidMsgSequence ( ) { return invalidMsgSequence ; } public void setInvalidMsgSequence ( SequenceMediator invalidMsgSequence ) { this . invalidMsgSequence = invalidMsgSequence ; } public long getTimeToInvalidate ( ) { return timeToInvalidate ; } public void setTimeToInvalidate ( long timeToInvalidate ) { this . timeToInvalidate = timeToInvalidate ; } public long getCompleteTimeout ( ) { return completeTimeout ; } public void setCompleteTimeout ( long completeTimeout ) { this . completeTimeout = completeTimeout ; } public int getMinMessagesToComplete ( ) { return minMessagesToComplete ; } public void setMinMessagesToComplete ( int minMessagesToComplete ) { this . minMessagesToComplete = minMessagesToComplete ; } public int getMaxMessagesToComplete ( ) { return maxMessagesToComplete ; } public void setMaxMessagesToComplete ( int maxMessagesToComplete ) { this . maxMessagesToComplete = maxMessagesToComplete ; } public AXIOMXPath getAggregationExpression ( ) { return aggregationExpression ; } public void setAggregationExpression ( AXIOMXPath aggregationExpression ) { this . aggregationExpression = aggregationExpression ; } public long getInvlidateToDestroyTime ( ) { return invlidateToDestroyTime ; } public void setInvlidateToDestroyTime ( long invlidateToDestroyTime ) { this . invlidateToDestroyTime = invlidateToDestroyTime ; } public String getOnCompleteSequenceRef ( ) { return onCompleteSequenceRef ; } public void setOnCompleteSequenceRef ( String onCompleteSequenceRef ) { this . onCompleteSequenceRef = onCompleteSequenceRef ; } public SequenceMediator getOnCompleteSequence ( ) { return onCompleteSequence ; } public void setOnCompleteSequence ( SequenceMediator onCompleteSequence ) { this . onCompleteSequence = onCompleteSequence ; } public Map getExpiredAggregates ( ) { return expiredAggregates ; } public Map getActiveAggregates ( ) { return activeAggregates ; } } 	1	['30', '2', '0', '14', '74', '299', '2', '12', '28', '0.898706897', '594', '1', '2', '0.317073171', '0.172413793', '0', '0', '18.26666667', '22', '2.0333', '3']
package org . apache . synapse . config . xml . endpoints ; import org . apache . axiom . om . OMElement ; import org . apache . synapse . SynapseConstants ; import org . apache . synapse . SynapseException ; import javax . xml . namespace . QName ; public class EndpointAbstractFactory { public static EndpointFactory getEndpointFactroy ( OMElement configElement ) { if ( configElement . getAttribute ( new QName ( "key" ) ) != null ) { IndirectEndpointFactory endpointFactory = IndirectEndpointFactory . getInstance ( ) ; return endpointFactory ; } OMElement addressElement = configElement . getFirstChildWithName ( new QName ( SynapseConstants . SYNAPSE_NAMESPACE , "address" ) ) ; if ( addressElement != null ) { EndpointFactory endpointFactory = AddressEndpointFactory . getInstance ( ) ; return endpointFactory ; } OMElement wsdlElement = configElement . getFirstChildWithName ( new QName ( SynapseConstants . SYNAPSE_NAMESPACE , "wsdl" ) ) ; if ( wsdlElement != null ) { EndpointFactory endpointFactory = WSDLEndpointFactory . getInstance ( ) ; return endpointFactory ; } OMElement lbElement = configElement . getFirstChildWithName ( new QName ( SynapseConstants . SYNAPSE_NAMESPACE , "loadbalance" ) ) ; if ( lbElement != null ) { OMElement sessionElement = configElement . getFirstChildWithName ( new QName ( SynapseConstants . SYNAPSE_NAMESPACE , "session" ) ) ; if ( sessionElement != null ) { EndpointFactory endpointFactory = SALoadbalanceEndpointFactory . getInstance ( ) ; return endpointFactory ; } else { EndpointFactory endpointFactory = LoadbalanceEndpointFactory . getInstance ( ) ; return endpointFactory ; } } OMElement foElement = configElement . getFirstChildWithName ( new QName ( SynapseConstants . SYNAPSE_NAMESPACE , "failover" ) ) ; if ( foElement != null ) { EndpointFactory endpointFactory = FailoverEndpointFactory . getInstance ( ) ; return endpointFactory ; } throw new SynapseException ( "Invalid endpoint configuration." ) ; } } 	1	['2', '1', '0', '15', '14', '1', '8', '10', '2', '2', '91', '0', '0', '0', '0.5', '0', '0', '44.5', '7', '3.5', '1']
package org . apache . synapse . config . xml ; import org . apache . axiom . om . OMAttribute ; import org . apache . axiom . om . OMElement ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import org . apache . synapse . SynapseException ; import org . apache . synapse . config . xml . endpoints . EndpointAbstractFactory ; import org . apache . synapse . config . xml . endpoints . EndpointFactory ; import org . apache . synapse . core . axis2 . ProxyService ; import org . apache . axis2 . wsdl . WSDLConstants ; import javax . xml . namespace . QName ; import java . util . Iterator ; import java . util . StringTokenizer ; import java . util . ArrayList ; import java . net . URI ; import java . net . URISyntaxException ; public class ProxyServiceFactory { private static final Log log = LogFactory . getLog ( ProxyServiceFactory . class ) ; public static ProxyService createProxy ( OMElement elem ) { ProxyService proxy = null ; OMAttribute name = elem . getAttribute ( new QName ( XMLConfigConstants . NULL_NAMESPACE , "name" ) ) ; if ( name == null ) { handleException ( "The 'name' attribute is required for a Proxy service definition" ) ; } else { proxy = new ProxyService ( name . getAttributeValue ( ) ) ; } OMAttribute statistics = elem . getAttribute ( new QName ( XMLConfigConstants . NULL_NAMESPACE , XMLConfigConstants . STATISTICS_ATTRIB_NAME ) ) ; if ( statistics != null ) { String statisticsValue = statistics . getAttributeValue ( ) ; if ( statisticsValue != null ) { if ( XMLConfigConstants . STATISTICS_ENABLE . equals ( statisticsValue ) ) { proxy . setStatisticsState ( org . apache . synapse . SynapseConstants . STATISTICS_ON ) ; } else if ( XMLConfigConstants . STATISTICS_DISABLE . equals ( statisticsValue ) ) { proxy . setStatisticsState ( org . apache . synapse . SynapseConstants . STATISTICS_OFF ) ; } } } OMAttribute trans = elem . getAttribute ( new QName ( XMLConfigConstants . NULL_NAMESPACE , "transports" ) ) ; if ( trans != null ) { String transports = trans . getAttributeValue ( ) ; if ( transports == null || ProxyService . ALL_TRANSPORTS . equals ( transports ) ) { } else { StringTokenizer st = new StringTokenizer ( transports , " ," ) ; ArrayList transportList = new ArrayList ( ) ; while ( st . hasMoreTokens ( ) ) { String token = st . nextToken ( ) ; if ( token . length ( ) != 0 ) { transportList . add ( token ) ; } } proxy . setTransports ( transportList ) ; } } OMAttribute trace = elem . getAttribute ( new QName ( XMLConfigConstants . NULL_NAMESPACE , XMLConfigConstants . TRACE_ATTRIB_NAME ) ) ; if ( trace != null ) { String traceValue = trace . getAttributeValue ( ) ; if ( traceValue != null ) { if ( traceValue . equals ( XMLConfigConstants . TRACE_ENABLE ) ) { proxy . setTraceState ( org . apache . synapse . SynapseConstants . TRACING_ON ) ; } else if ( traceValue . equals ( XMLConfigConstants . TRACE_DISABLE ) ) { proxy . setTraceState ( org . apache . synapse . SynapseConstants . TRACING_OFF ) ; } } } OMAttribute startOnLoad = elem . getAttribute ( new QName ( XMLConfigConstants . NULL_NAMESPACE , "startOnLoad" ) ) ; if ( startOnLoad != null ) { proxy . setStartOnLoad ( Boolean . valueOf ( startOnLoad . getAttributeValue ( ) ) . booleanValue ( ) ) ; } else { proxy . setStartOnLoad ( true ) ; } OMElement descriptionElement = elem . getFirstChildWithName ( new QName ( XMLConfigConstants . SYNAPSE_NAMESPACE , "description" ) ) ; if ( descriptionElement != null ) { proxy . setDescription ( descriptionElement . getText ( ) . trim ( ) ) ; } OMElement target = elem . getFirstChildWithName ( new QName ( XMLConfigConstants . SYNAPSE_NAMESPACE , "target" ) ) ; if ( target != null ) { boolean isTargetOk = false ; SequenceMediatorFactory mediatorFactory = new SequenceMediatorFactory ( ) ; OMAttribute inSequence = target . getAttribute ( new QName ( XMLConfigConstants . NULL_NAMESPACE , "inSequence" ) ) ; if ( inSequence != null ) { proxy . setTargetInSequence ( inSequence . getAttributeValue ( ) ) ; isTargetOk = true ; } else { OMElement inSequenceElement = target . getFirstChildWithName ( new QName ( XMLConfigConstants . SYNAPSE_NAMESPACE , "inSequence" ) ) ; if ( inSequenceElement != null ) { proxy . setTargetInLineInSequence ( mediatorFactory . createAnonymousSequence ( inSequenceElement ) ) ; isTargetOk = true ; } } OMAttribute outSequence = target . getAttribute ( new QName ( XMLConfigConstants . NULL_NAMESPACE , "outSequence" ) ) ; if ( outSequence != null ) { proxy . setTargetOutSequence ( outSequence . getAttributeValue ( ) ) ; } else { OMElement outSequenceElement = target . getFirstChildWithName ( new QName ( XMLConfigConstants . SYNAPSE_NAMESPACE , "outSequence" ) ) ; if ( outSequenceElement != null ) { proxy . setTargetInLineOutSequence ( mediatorFactory . createAnonymousSequence ( outSequenceElement ) ) ; } else { handleException ( "Target for the proxy service must declare an out sequence" ) ; } } OMAttribute faultSequence = target . getAttribute ( new QName ( XMLConfigConstants . NULL_NAMESPACE , "faultSequence" ) ) ; if ( faultSequence != null ) { proxy . setTargetFaultSequence ( faultSequence . getAttributeValue ( ) ) ; } else { OMElement faultSequenceElement = target . getFirstChildWithName ( new QName ( XMLConfigConstants . SYNAPSE_NAMESPACE , "faultSequence" ) ) ; if ( faultSequenceElement != null ) { proxy . setTargetInLineFaultSequence ( mediatorFactory . createAnonymousSequence ( faultSequenceElement ) ) ; } } OMAttribute tgtEndpt = target . getAttribute ( new QName ( XMLConfigConstants . NULL_NAMESPACE , "endpoint" ) ) ; if ( tgtEndpt != null ) { proxy . setTargetEndpoint ( tgtEndpt . getAttributeValue ( ) ) ; isTargetOk = true ; } else { OMElement endpointElement = target . getFirstChildWithName ( new QName ( XMLConfigConstants . SYNAPSE_NAMESPACE , "endpoint" ) ) ; if ( endpointElement != null ) { EndpointFactory fac = EndpointAbstractFactory . getEndpointFactroy ( endpointElement ) ; proxy . setTargetInLineEndpoint ( fac . createEndpoint ( endpointElement , true ) ) ; isTargetOk = true ; } } if ( ! isTargetOk ) { handleException ( "Target of the proxy service must declare either an inSequence or endpoint or both" ) ; } } else { handleException ( "Target is required for a Proxy service definition" ) ; } OMElement wsdl = elem . getFirstChildWithName ( new QName ( XMLConfigConstants . SYNAPSE_NAMESPACE , "publishWSDL" ) ) ; if ( wsdl != null ) { OMAttribute wsdlkey = wsdl . getAttribute ( new QName ( XMLConfigConstants . NULL_NAMESPACE , "key" ) ) ; if ( wsdlkey != null ) { proxy . setWSDLKey ( wsdlkey . getAttributeValue ( ) ) ; } else { OMAttribute wsdlURI = wsdl . getAttribute ( new QName ( XMLConfigConstants . NULL_NAMESPACE , "uri" ) ) ; if ( wsdlURI != null ) { try { proxy . setWsdlURI ( new URI ( wsdlURI . getAttributeValue ( ) ) ) ; } catch ( URISyntaxException e ) { String msg = "Error creating uri for proxy service wsdl" ; log . error ( msg ) ; handleException ( msg , e ) ; } } else { OMElement wsdl11 = wsdl . getFirstChildWithName ( new QName ( WSDLConstants . WSDL1_1_NAMESPACE , "definitions" ) ) ; if ( wsdl11 != null ) { proxy . setInLineWSDL ( wsdl11 ) ; } else { OMElement wsdl20 = wsdl . getFirstChildWithName ( new QName ( WSDLConstants . WSDL2_0_NAMESPACE , "descriptions" ) ) ; if ( wsdl20 != null ) { proxy . setInLineWSDL ( wsdl20 ) ; } } } } } Iterator policies = elem . getChildrenWithName ( new QName ( XMLConfigConstants . SYNAPSE_NAMESPACE , "policy" ) ) ; while ( policies . hasNext ( ) ) { Object o = policies . next ( ) ; if ( o instanceof OMElement ) { OMElement policy = ( OMElement ) o ; OMAttribute key = policy . getAttribute ( new QName ( XMLConfigConstants . NULL_NAMESPACE , "key" ) ) ; if ( key != null ) { proxy . addServiceLevelPolicy ( key . getAttributeValue ( ) ) ; } else { handleException ( "Policy element does not specify the policy key" ) ; } } else { handleException ( "Invalid 'policy' element found under element 'policies'" ) ; } } Iterator props = elem . getChildrenWithName ( new QName ( XMLConfigConstants . SYNAPSE_NAMESPACE , "parameter" ) ) ; while ( props . hasNext ( ) ) { Object o = props . next ( ) ; if ( o instanceof OMElement ) { OMElement prop = ( OMElement ) o ; OMAttribute pname = prop . getAttribute ( new QName ( XMLConfigConstants . NULL_NAMESPACE , "name" ) ) ; OMElement propertyValue = prop . getFirstElement ( ) ; if ( pname != null ) { if ( propertyValue != null ) { proxy . addParameter ( pname . getAttributeValue ( ) , propertyValue ) ; } else { proxy . addParameter ( pname . getAttributeValue ( ) , prop . getText ( ) . trim ( ) ) ; } } else { handleException ( "Invalid property specified for proxy service : " + name ) ; } } else { handleException ( "Invalid property specified for proxy service : " + name ) ; } } if ( elem . getFirstChildWithName ( new QName ( XMLConfigConstants . SYNAPSE_NAMESPACE , "enableRM" ) ) != null ) { proxy . setWsRMEnabled ( true ) ; } if ( elem . getFirstChildWithName ( new QName ( XMLConfigConstants . SYNAPSE_NAMESPACE , "enableSec" ) ) != null ) { proxy . setWsSecEnabled ( true ) ; } return proxy ; } private static void handleException ( String msg ) { log . error ( msg ) ; throw new SynapseException ( msg ) ; } private static void handleException ( String msg , Exception e ) { log . error ( msg , e ) ; throw new SynapseException ( msg , e ) ; } } 	1	['5', '1', '0', '12', '60', '0', '1', '11', '2', '0.25', '566', '1', '0', '0', '0.3125', '0', '0', '112', '39', '8.2', '4']
package org . apache . synapse . endpoints . utils ; import org . apache . synapse . SynapseConstants ; public class EndpointDefinition { private String address = null ; private boolean reliableMessagingOn = false ; private boolean addressingOn = false ; private boolean securityOn = false ; private String wsRMPolicyKey = null ; private String wsSecPolicyKey = null ; private boolean useSeparateListener = false ; private boolean forcePOX = false ; private boolean forceSOAP11 = false ; private boolean forceSOAP12 = false ; private boolean useMTOM = false ; private boolean useSwa = false ; private String format = null ; private long timeoutDuration = 0 ; private int timeoutAction = SynapseConstants . NONE ; private int statisticsState = SynapseConstants . STATISTICS_UNSET ; private int traceState = SynapseConstants . TRACING_UNSET ; public String getAddress ( ) { return address ; } public void setAddress ( String address ) { this . address = address ; } public boolean isReliableMessagingOn ( ) { return reliableMessagingOn ; } public void setReliableMessagingOn ( boolean reliableMessagingOn ) { this . reliableMessagingOn = reliableMessagingOn ; } public boolean isAddressingOn ( ) { return addressingOn ; } public void setAddressingOn ( boolean addressingOn ) { this . addressingOn = addressingOn ; } public boolean isSecurityOn ( ) { return securityOn ; } public void setSecurityOn ( boolean securityOn ) { this . securityOn = securityOn ; } public String getWsSecPolicyKey ( ) { return wsSecPolicyKey ; } public void setWsSecPolicyKey ( String wsSecPolicyKey ) { this . wsSecPolicyKey = wsSecPolicyKey ; } public String getWsRMPolicyKey ( ) { return wsRMPolicyKey ; } public void setWsRMPolicyKey ( String wsRMPolicyKey ) { this . wsRMPolicyKey = wsRMPolicyKey ; } public void setUseSeparateListener ( boolean b ) { this . useSeparateListener = b ; } public boolean isUseSeparateListener ( ) { return useSeparateListener ; } public void setForcePOX ( boolean forcePOX ) { this . forcePOX = forcePOX ; } public boolean isForcePOX ( ) { return forcePOX ; } public void setForceSOAP11 ( boolean forceSOAP11 ) { this . forceSOAP11 = forceSOAP11 ; } public boolean isForceSOAP11 ( ) { return forceSOAP11 ; } public void setForceSOAP12 ( boolean forceSOAP12 ) { this . forceSOAP12 = forceSOAP12 ; } public boolean isForceSOAP12 ( ) { return forceSOAP12 ; } public boolean isUseMTOM ( ) { return useMTOM ; } public void setUseMTOM ( boolean useMTOM ) { this . useMTOM = useMTOM ; } public boolean isUseSwa ( ) { return useSwa ; } public void setUseSwa ( boolean useSwa ) { this . useSwa = useSwa ; } public long getTimeoutDuration ( ) { return timeoutDuration ; } public void setTimeoutDuration ( long timeoutDuration ) { this . timeoutDuration = timeoutDuration ; } public int getTimeoutAction ( ) { return timeoutAction ; } public void setTimeoutAction ( int timeoutAction ) { this . timeoutAction = timeoutAction ; } public String getFormat ( ) { return format ; } public void setFormat ( String format ) { this . format = format ; } public int getStatisticsState ( ) { return statisticsState ; } public void setStatisticsState ( int statisticsState ) { this . statisticsState = statisticsState ; } public int getTraceState ( ) { return traceState ; } public void setTraceState ( int traceState ) { this . traceState = traceState ; } } 	1	['35', '1', '0', '13', '36', '493', '13', '0', '35', '0.941176471', '225', '1', '0', '0', '0.297142857', '0', '0', '4.942857143', '1', '0.9714', '1']
package org . apache . synapse . core . axis2 ; import org . apache . axis2 . AxisFault ; import org . apache . axis2 . Constants ; import org . apache . axis2 . util . Utils ; import org . apache . synapse . transport . nhttp . NhttpConstants ; import org . apache . axis2 . context . MessageContext ; import org . apache . axis2 . engine . AxisEngine ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import org . apache . synapse . SynapseConstants ; import org . apache . synapse . SynapseException ; import org . apache . synapse . endpoints . utils . EndpointDefinition ; import org . apache . synapse . statistics . StatisticsUtils ; import org . apache . synapse . util . UUIDGenerator ; import org . apache . axiom . om . OMAbstractFactory ; import org . apache . axiom . soap . SOAPFactory ; import org . apache . rampart . handler . WSSHandlerConstants ; public class Axis2Sender { private static final Log log = LogFactory . getLog ( Axis2Sender . class ) ; public static void sendOn ( EndpointDefinition endpoint , org . apache . synapse . MessageContext synapseInMessageContext ) { try { Axis2FlexibleMEPClient . send ( endpoint , synapseInMessageContext ) ; } catch ( Exception e ) { handleException ( "Unexpected error during sending message out" , e ) ; } } public static void sendBack ( org . apache . synapse . MessageContext smc ) { MessageContext messageContext = ( ( Axis2MessageContext ) smc ) . getAxis2MessageContext ( ) ; if ( messageContext . isPropertyTrue ( NhttpConstants . SC_ACCEPTED ) && messageContext . getTransportOut ( ) != null && ! messageContext . getTransportOut ( ) . getName ( ) . startsWith ( Constants . TRANSPORT_HTTP ) ) { return ; } AxisEngine ae = new AxisEngine ( messageContext . getConfigurationContext ( ) ) ; try { messageContext . setProperty ( SynapseConstants . ISRESPONSE_PROPERTY , Boolean . TRUE ) ; if ( smc . isResponse ( ) ) { StatisticsUtils . processEndPointStatistics ( smc ) ; StatisticsUtils . processProxyServiceStatistics ( smc ) ; StatisticsUtils . processAllSequenceStatistics ( smc ) ; } Axis2FlexibleMEPClient . removeAddressingHeaders ( messageContext ) ; messageContext . setMessageID ( UUIDGenerator . getUUID ( ) ) ; if ( messageContext . isEngaged ( WSSHandlerConstants . SECURITY_MODULE_NAME ) && messageContext . getEnvelope ( ) . getHeader ( ) == null ) { SOAPFactory fac = messageContext . isSOAP11 ( ) ? OMAbstractFactory . getSOAP11Factory ( ) : OMAbstractFactory . getSOAP12Factory ( ) ; fac . createSOAPHeader ( messageContext . getEnvelope ( ) ) ; } ae . send ( messageContext ) ; } catch ( AxisFault e ) { handleException ( "Unexpected error sending message back" , e ) ; } } private static void handleException ( String msg , Exception e ) { log . error ( msg , e ) ; throw new SynapseException ( msg , e ) ; } } 	1	['5', '1', '0', '20', '33', '8', '2', '18', '3', '0.25', '105', '1', '0', '0', '0.3', '0', '0', '19.8', '8', '2', '1']
package org . apache . synapse . config . xml ; import org . apache . axiom . om . OMAbstractFactory ; import org . apache . axiom . om . OMElement ; import org . apache . axiom . om . OMFactory ; import org . apache . axiom . om . OMNamespace ; import org . apache . axiom . om . xpath . AXIOMXPath ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import org . apache . synapse . Mediator ; import org . apache . synapse . SynapseException ; import org . apache . synapse . mediators . MediatorProperty ; import javax . xml . namespace . QName ; import java . util . Collection ; import java . util . Iterator ; public abstract class AbstractMediatorSerializer implements MediatorSerializer { protected static Log log ; protected static final OMFactory fac = OMAbstractFactory . getOMFactory ( ) ; protected static final OMNamespace synNS = fac . createOMNamespace ( XMLConfigConstants . SYNAPSE_NAMESPACE , "syn" ) ; protected static final OMNamespace nullNS = fac . createOMNamespace ( XMLConfigConstants . NULL_NAMESPACE , "" ) ; protected static final QName PROP_Q = new QName ( XMLConfigConstants . SYNAPSE_NAMESPACE , "property" , "syn" ) ; protected AbstractMediatorSerializer ( ) { log = LogFactory . getLog ( this . getClass ( ) ) ; } protected static void saveTracingState ( OMElement mediatorOmElement , Mediator mediator ) { int traceState = mediator . getTraceState ( ) ; String traceValue = null ; if ( traceState == org . apache . synapse . SynapseConstants . TRACING_ON ) { traceValue = XMLConfigConstants . TRACE_ENABLE ; } else if ( traceState == org . apache . synapse . SynapseConstants . TRACING_OFF ) { traceValue = XMLConfigConstants . TRACE_DISABLE ; } if ( traceValue != null ) { mediatorOmElement . addAttribute ( fac . createOMAttribute ( XMLConfigConstants . TRACE_ATTRIB_NAME , nullNS , traceValue ) ) ; } } protected void serializeMediatorProperties ( OMElement parent , Collection props ) { Iterator iter = props . iterator ( ) ; while ( iter . hasNext ( ) ) { MediatorProperty mp = ( MediatorProperty ) iter . next ( ) ; OMElement prop = fac . createOMElement ( "property" , synNS , parent ) ; if ( mp . getName ( ) != null ) { prop . addAttribute ( fac . createOMAttribute ( "name" , nullNS , mp . getName ( ) ) ) ; } else { handleException ( "Mediator property name missing" ) ; } if ( mp . getValue ( ) != null ) { prop . addAttribute ( fac . createOMAttribute ( "value" , nullNS , mp . getValue ( ) ) ) ; } else if ( mp . getExpression ( ) != null ) { prop . addAttribute ( fac . createOMAttribute ( "expression" , nullNS , mp . getExpression ( ) . toString ( ) ) ) ; serializeNamespaces ( prop , mp . getExpression ( ) ) ; } else { handleException ( "Mediator property must have a literal value or be an expression" ) ; } } } protected void serializeProperties ( OMElement parent , Collection props ) { serializeMediatorProperties ( parent , props ) ; } protected void serializeNamespaces ( OMElement elem , AXIOMXPath xpath ) { Iterator iter = xpath . getNamespaces ( ) . keySet ( ) . iterator ( ) ; while ( iter . hasNext ( ) ) { String prefix = ( String ) iter . next ( ) ; String uri = xpath . getNamespaceContext ( ) . translateNamespacePrefixToUri ( prefix ) ; if ( ! XMLConfigConstants . SYNAPSE_NAMESPACE . equals ( uri ) ) { elem . declareNamespace ( uri , prefix ) ; } } } protected void handleException ( String msg ) { LogFactory . getLog ( this . getClass ( ) ) . error ( msg ) ; throw new SynapseException ( msg ) ; } protected void handleException ( String msg , Exception e ) { LogFactory . getLog ( this . getClass ( ) ) . error ( msg , e ) ; throw new SynapseException ( msg , e ) ; } } 	1	['8', '1', '17', '31', '36', '22', '17', '14', '0', '0.771428571', '190', '1', '0', '0', '0.346938776', '0', '0', '22.125', '5', '1.75', '1']
package org . apache . synapse . core . axis2 ; import org . apache . axiom . soap . SOAPEnvelope ; import org . apache . axiom . soap . SOAPFault ; import org . apache . axiom . soap . SOAPFaultReason ; import org . apache . axis2 . AxisFault ; import org . apache . axis2 . addressing . AddressingConstants ; import org . apache . axis2 . addressing . EndpointReference ; import org . apache . axis2 . addressing . RelatesTo ; import org . apache . axis2 . client . Options ; import org . apache . axis2 . client . async . AxisCallback ; import org . apache . axis2 . context . MessageContext ; import org . apache . axis2 . engine . MessageReceiver ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import org . apache . sandesha2 . client . SandeshaClientConstants ; import org . apache . synapse . FaultHandler ; import org . apache . synapse . SynapseConstants ; import org . apache . synapse . SynapseException ; import org . apache . synapse . config . SynapseConfiguration ; import org . apache . synapse . endpoints . Endpoint ; import org . apache . synapse . transport . nhttp . NhttpConstants ; import java . util . * ; public class SynapseCallbackReceiver implements MessageReceiver { private static final Log log = LogFactory . getLog ( SynapseCallbackReceiver . class ) ; private Map callbackStore ; public SynapseCallbackReceiver ( SynapseConfiguration synCfg ) { callbackStore = Collections . synchronizedMap ( new HashMap ( ) ) ; TimeoutHandler timeoutHandler = new TimeoutHandler ( callbackStore ) ; Timer timeOutTimer = synCfg . getSynapseTimer ( ) ; long timeoutHandlerInterval = SynapseConstants . DEFAULT_TIMEOUT_HANDLER_INTERVAL ; try { timeoutHandlerInterval = Long . parseLong ( System . getProperty ( SynapseConstants . TIMEOUT_HANDLER_INTERVAL ) ) ; } catch ( Exception ignore ) { } timeOutTimer . schedule ( timeoutHandler , 0 , timeoutHandlerInterval ) ; } public void addCallback ( String MsgID , AxisCallback callback ) { callbackStore . put ( MsgID , callback ) ; } public void receive ( MessageContext messageCtx ) throws AxisFault { String messageID = null ; if ( messageCtx . getOptions ( ) != null && messageCtx . getOptions ( ) . getRelatesTo ( ) != null ) { Options options = messageCtx . getOptions ( ) ; if ( options != null ) { RelatesTo relatesTo = options . getRelatesTo ( ) ; if ( relatesTo != null ) { messageID = relatesTo . getValue ( ) ; } } } else if ( messageCtx . getProperty ( SandeshaClientConstants . SEQUENCE_KEY ) == null ) { messageID = ( String ) messageCtx . getProperty ( SynapseConstants . RELATES_TO_FOR_POX ) ; } if ( messageID != null ) { AxisCallback callback = ( AxisCallback ) callbackStore . remove ( messageID ) ; RelatesTo [ ] relates = messageCtx . getRelationships ( ) ; if ( relates != null && relates . length > 1 ) { removeDuplicateRelatesTo ( messageCtx , relates ) ; } if ( callback != null ) { handleMessage ( messageCtx , ( ( AsyncCallback ) callback ) . getSynapseOutMsgCtx ( ) ) ; } else { log . warn ( "Synapse received a response for the request with message Id : " + messageID + " But a callback has not been registered to process this response" ) ; } } else if ( ! messageCtx . isPropertyTrue ( NhttpConstants . SC_ACCEPTED ) ) { log . warn ( "Synapse received a response message without a message Id" ) ; } } private void handleMessage ( MessageContext response , org . apache . synapse . MessageContext synapseOutMsgCtx ) throws AxisFault { Object o = response . getProperty ( NhttpConstants . SENDING_FAULT ) ; if ( o != null && Boolean . TRUE . equals ( o ) ) { Stack faultStack = synapseOutMsgCtx . getFaultStack ( ) ; if ( faultStack != null && ! faultStack . isEmpty ( ) ) { SOAPEnvelope envelope = response . getEnvelope ( ) ; if ( envelope != null ) { SOAPFault fault = envelope . getBody ( ) . getFault ( ) ; if ( fault != null ) { Exception e = fault . getException ( ) ; if ( e == null ) { e = new Exception ( fault . toString ( ) ) ; } synapseOutMsgCtx . setProperty ( SynapseConstants . ERROR_CODE , SynapseConstants . SENDING_FAULT ) ; SOAPFaultReason faultReason = fault . getReason ( ) ; if ( faultReason != null ) { synapseOutMsgCtx . setProperty ( SynapseConstants . ERROR_MESSAGE , faultReason . getText ( ) ) ; } ( ( FaultHandler ) faultStack . pop ( ) ) . handleFault ( synapseOutMsgCtx , e ) ; } } } } else { Stack faultStack = synapseOutMsgCtx . getFaultStack ( ) ; if ( faultStack != null && ! faultStack . isEmpty ( ) && faultStack . peek ( ) instanceof Endpoint ) { faultStack . pop ( ) ; } if ( log . isDebugEnabled ( ) ) { log . debug ( "Synapse received an asynchronous response message" ) ; log . debug ( "Received To: " + ( response . getTo ( ) != null ? response . getTo ( ) . getAddress ( ) : "null" ) ) ; log . debug ( "SOAPAction: " + ( response . getSoapAction ( ) != null ? response . getSoapAction ( ) : "null" ) ) ; log . debug ( "WSA-Action: " + ( response . getWSAAction ( ) != null ? response . getWSAAction ( ) : "null" ) ) ; String [ ] cids = response . getAttachmentMap ( ) . getAllContentIDs ( ) ; if ( cids != null && cids . length > 0 ) { for ( int i = 0 ; i < cids . length ; i ++ ) { log . debug ( "Attachment : " + cids [ i ] ) ; } } log . debug ( "Body : \n" + response . getEnvelope ( ) ) ; } MessageContext axisOutMsgCtx = ( ( Axis2MessageContext ) synapseOutMsgCtx ) . getAxis2MessageContext ( ) ; response . setServiceContext ( null ) ; response . setOperationContext ( axisOutMsgCtx . getOperationContext ( ) ) ; response . getAxisMessage ( ) . setParent ( axisOutMsgCtx . getOperationContext ( ) . getAxisOperation ( ) ) ; response . setAxisService ( axisOutMsgCtx . getAxisService ( ) ) ; response . setServerSide ( true ) ; response . setProperty ( SynapseConstants . ISRESPONSE_PROPERTY , Boolean . TRUE ) ; response . setProperty ( MessageContext . TRANSPORT_OUT , axisOutMsgCtx . getProperty ( MessageContext . TRANSPORT_OUT ) ) ; response . setProperty ( org . apache . axis2 . Constants . OUT_TRANSPORT_INFO , axisOutMsgCtx . getProperty ( org . apache . axis2 . Constants . OUT_TRANSPORT_INFO ) ) ; response . setTransportIn ( axisOutMsgCtx . getTransportIn ( ) ) ; response . setTransportOut ( axisOutMsgCtx . getTransportOut ( ) ) ; response . setDoingREST ( axisOutMsgCtx . isDoingREST ( ) ) ; if ( axisOutMsgCtx . isDoingMTOM ( ) ) { response . setDoingMTOM ( true ) ; response . setProperty ( org . apache . axis2 . Constants . Configuration . ENABLE_MTOM , org . apache . axis2 . Constants . VALUE_TRUE ) ; } if ( axisOutMsgCtx . isDoingSwA ( ) ) { response . setDoingSwA ( true ) ; response . setProperty ( org . apache . axis2 . Constants . Configuration . ENABLE_SWA , org . apache . axis2 . Constants . VALUE_TRUE ) ; } response . removeProperty ( org . apache . axis2 . Constants . Configuration . MESSAGE_TYPE ) ; if ( axisOutMsgCtx . isSOAP11 ( ) != response . isSOAP11 ( ) ) { if ( axisOutMsgCtx . isSOAP11 ( ) ) { SOAPUtils . convertSOAP12toSOAP11 ( response ) ; } else { SOAPUtils . convertSOAP11toSOAP12 ( response ) ; } } if ( axisOutMsgCtx . getMessageID ( ) != null ) { response . setRelationships ( new RelatesTo [ ] { new RelatesTo ( axisOutMsgCtx . getMessageID ( ) ) } ) ; } Axis2MessageContext synapseInMessageContext = new Axis2MessageContext ( response , synapseOutMsgCtx . getConfiguration ( ) , synapseOutMsgCtx . getEnvironment ( ) ) ; synapseInMessageContext . setResponse ( true ) ; synapseInMessageContext . setTo ( new EndpointReference ( AddressingConstants . Final . WSA_ANONYMOUS_URL ) ) ; synapseInMessageContext . setTracingState ( synapseOutMsgCtx . getTracingState ( ) ) ; Iterator iter = synapseOutMsgCtx . getPropertyKeySet ( ) . iterator ( ) ; while ( iter . hasNext ( ) ) { Object key = iter . next ( ) ; synapseInMessageContext . setProperty ( ( String ) key , synapseOutMsgCtx . getProperty ( ( String ) key ) ) ; } try { synapseOutMsgCtx . getEnvironment ( ) . injectMessage ( synapseInMessageContext ) ; } catch ( SynapseException syne ) { Stack stack = synapseInMessageContext . getFaultStack ( ) ; if ( stack != null && ! stack . isEmpty ( ) ) { ( ( FaultHandler ) stack . pop ( ) ) . handleFault ( synapseInMessageContext , syne ) ; } else { log . error ( "Synapse encountered an exception, " + "No error handlers found - [Message Dropped]\n" + syne . getMessage ( ) ) ; } } } } private void removeDuplicateRelatesTo ( MessageContext mc , RelatesTo [ ] relates ) { int insertPos = 0 ; RelatesTo [ ] newRelates = new RelatesTo [ relates . length ] ; for ( int i = 0 ; i < relates . length ; i ++ ) { RelatesTo current = relates [ i ] ; boolean found = false ; for ( int j = 0 ; j < newRelates . length && j < insertPos ; j ++ ) { if ( newRelates [ j ] . equals ( current ) || newRelates [ j ] . getValue ( ) . equals ( current . getValue ( ) ) ) { found = true ; break ; } } if ( ! found ) { newRelates [ insertPos ++ ] = current ; } } RelatesTo [ ] trimmedRelates = new RelatesTo [ insertPos ] ; System . arraycopy ( newRelates , 0 , trimmedRelates , 0 , insertPos ) ; mc . setRelationships ( trimmedRelates ) ; } } 	1	['6', '1', '0', '35', '101', '3', '2', '33', '3', '0.6', '550', '1', '0', '0', '0.371428571', '0', '0', '90.33333333', '7', '1.6667', '3']
package org . apache . synapse . util ; import org . apache . synapse . MessageContext ; import org . apache . synapse . mediators . eip . EIPConstants ; import org . apache . synapse . core . axis2 . Axis2MessageContext ; import org . apache . axiom . soap . SOAPEnvelope ; import org . apache . axiom . soap . SOAPHeader ; import org . apache . axiom . soap . SOAPHeaderBlock ; import org . apache . axiom . soap . SOAP11Constants ; import org . apache . axiom . attachments . Attachments ; import org . apache . axiom . om . OMElement ; import org . apache . axiom . om . OMNamespace ; import org . apache . axiom . om . OMAbstractFactory ; import org . apache . axiom . om . OMNode ; import org . apache . axis2 . addressing . AddressingConstants ; import org . apache . axis2 . AxisFault ; import java . util . Iterator ; import java . util . ArrayList ; import java . util . Map ; import java . util . HashMap ; public class MessageHelper { public static MessageContext cloneMessageContext ( MessageContext synCtx ) throws AxisFault { MessageContext newCtx = synCtx . getEnvironment ( ) . createMessageContext ( ) ; Axis2MessageContext axis2MC = ( Axis2MessageContext ) newCtx ; axis2MC . setAxis2MessageContext ( cloneAxis2MessageContext ( ( ( Axis2MessageContext ) synCtx ) . getAxis2MessageContext ( ) ) ) ; newCtx . setProperty ( EIPConstants . AGGREGATE_CORELATION , synCtx . getMessageID ( ) ) ; newCtx . setTo ( synCtx . getTo ( ) ) ; newCtx . setReplyTo ( synCtx . getReplyTo ( ) ) ; newCtx . setSoapAction ( synCtx . getSoapAction ( ) ) ; newCtx . setWSAAction ( synCtx . getWSAAction ( ) ) ; for ( Object o : synCtx . getPropertyKeySet ( ) ) { if ( o instanceof String ) { newCtx . setProperty ( ( String ) o , synCtx . getProperty ( ( String ) o ) ) ; } } return newCtx ; } public static org . apache . axis2 . context . MessageContext cloneAxis2MessageContext ( org . apache . axis2 . context . MessageContext mc ) throws AxisFault { org . apache . axis2 . context . MessageContext newMC = clonePartially ( mc ) ; newMC . setEnvelope ( cloneSOAPEnvelope ( cloneSOAPEnvelope ( mc . getEnvelope ( ) ) ) ) ; newMC . setServiceContext ( mc . getServiceContext ( ) ) ; newMC . setOperationContext ( mc . getOperationContext ( ) ) ; newMC . setAxisMessage ( mc . getAxisMessage ( ) ) ; if ( newMC . getAxisMessage ( ) != null ) { newMC . getAxisMessage ( ) . setParent ( mc . getAxisOperation ( ) ) ; } newMC . setAxisService ( mc . getAxisService ( ) ) ; newMC . setTransportIn ( mc . getTransportIn ( ) ) ; newMC . setTransportOut ( mc . getTransportOut ( ) ) ; newMC . setProperty ( org . apache . axis2 . Constants . OUT_TRANSPORT_INFO , mc . getProperty ( org . apache . axis2 . Constants . OUT_TRANSPORT_INFO ) ) ; newMC . setProperty ( org . apache . axis2 . context . MessageContext . TRANSPORT_HEADERS , getClonedTransportHeaders ( mc ) ) ; return newMC ; } public static Map getClonedTransportHeaders ( org . apache . axis2 . context . MessageContext msgCtx ) { Map headers = ( Map ) msgCtx . getProperty ( org . apache . axis2 . context . MessageContext . TRANSPORT_HEADERS ) ; Map clonedHeaders = new HashMap ( ) ; if ( headers != null && headers . isEmpty ( ) ) { for ( Object o : headers . keySet ( ) ) { String headerName = ( String ) o ; clonedHeaders . put ( headerName , headers . get ( headerName ) ) ; } } return clonedHeaders ; } public static org . apache . axis2 . context . MessageContext clonePartially ( org . apache . axis2 . context . MessageContext ori ) throws AxisFault { org . apache . axis2 . context . MessageContext newMC = new org . apache . axis2 . context . MessageContext ( ) ; newMC . setConfigurationContext ( ori . getConfigurationContext ( ) ) ; newMC . setMessageID ( UUIDGenerator . getUUID ( ) ) ; newMC . setTo ( ori . getTo ( ) ) ; newMC . setSoapAction ( ori . getSoapAction ( ) ) ; newMC . setProperty ( org . apache . axis2 . Constants . Configuration . CHARACTER_SET_ENCODING , ori . getProperty ( org . apache . axis2 . Constants . Configuration . CHARACTER_SET_ENCODING ) ) ; newMC . setProperty ( org . apache . axis2 . Constants . Configuration . ENABLE_MTOM , ori . getProperty ( org . apache . axis2 . Constants . Configuration . ENABLE_MTOM ) ) ; newMC . setProperty ( org . apache . axis2 . Constants . Configuration . ENABLE_SWA , ori . getProperty ( org . apache . axis2 . Constants . Configuration . ENABLE_SWA ) ) ; newMC . setDoingREST ( ori . isDoingREST ( ) ) ; newMC . setDoingMTOM ( ori . isDoingMTOM ( ) ) ; newMC . setDoingSwA ( ori . isDoingSwA ( ) ) ; Attachments attachments = ori . getAttachmentMap ( ) ; if ( attachments != null && attachments . getAllContentIDs ( ) . length > 0 ) { String [ ] cIDs = attachments . getAllContentIDs ( ) ; String soapPart = attachments . getSOAPPartContentID ( ) ; for ( String cID : cIDs ) { if ( ! cID . equals ( soapPart ) ) { newMC . addAttachment ( cID , attachments . getDataHandler ( cID ) ) ; } } } for ( Object o : ori . getOptions ( ) . getProperties ( ) . keySet ( ) ) { String key = ( String ) o ; newMC . getOptions ( ) . setProperty ( key , ori . getOptions ( ) . getProperty ( key ) ) ; } for ( Object o1 : ori . getProperties ( ) . keySet ( ) ) { String key = ( String ) o1 ; newMC . setProperty ( key , ori . getProperty ( key ) ) ; } newMC . setServerSide ( false ) ; return newMC ; } public static SOAPEnvelope cloneSOAPEnvelope ( SOAPEnvelope envelope ) { SOAPEnvelope newEnvelope ; if ( SOAP11Constants . SOAP_ENVELOPE_NAMESPACE_URI . equals ( envelope . getBody ( ) . getNamespace ( ) . getNamespaceURI ( ) ) ) { newEnvelope = OMAbstractFactory . getSOAP11Factory ( ) . getDefaultEnvelope ( ) ; } else { newEnvelope = OMAbstractFactory . getSOAP12Factory ( ) . getDefaultEnvelope ( ) ; } if ( envelope . getHeader ( ) != null ) { Iterator itr = envelope . getHeader ( ) . cloneOMElement ( ) . getChildren ( ) ; while ( itr . hasNext ( ) ) { newEnvelope . getHeader ( ) . addChild ( ( OMNode ) itr . next ( ) ) ; } } if ( envelope . getBody ( ) != null ) { Iterator itr = envelope . getBody ( ) . cloneOMElement ( ) . getChildren ( ) ; while ( itr . hasNext ( ) ) { newEnvelope . getBody ( ) . addChild ( ( OMNode ) itr . next ( ) ) ; } } return newEnvelope ; } public static SOAPEnvelope removeAddressingHeaders ( org . apache . axis2 . context . MessageContext axisMsgCtx ) { SOAPEnvelope env = axisMsgCtx . getEnvelope ( ) ; SOAPHeader soapHeader = env . getHeader ( ) ; ArrayList addressingHeaders ; if ( soapHeader != null ) { addressingHeaders = soapHeader . getHeaderBlocksWithNSURI ( AddressingConstants . Submission . WSA_NAMESPACE ) ; if ( addressingHeaders != null && addressingHeaders . size ( ) != 0 ) { detachAddressingInformation ( addressingHeaders ) ; } else { addressingHeaders = soapHeader . getHeaderBlocksWithNSURI ( AddressingConstants . Final . WSA_NAMESPACE ) ; if ( addressingHeaders != null && addressingHeaders . size ( ) != 0 ) { detachAddressingInformation ( addressingHeaders ) ; } } } return env ; } private static void detachAddressingInformation ( ArrayList headerInformation ) { for ( Object o : headerInformation ) { if ( o instanceof SOAPHeaderBlock ) { SOAPHeaderBlock headerBlock = ( SOAPHeaderBlock ) o ; headerBlock . detach ( ) ; } else if ( o instanceof OMElement ) { OMElement om = ( OMElement ) o ; OMNamespace ns = om . getNamespace ( ) ; if ( ns != null && ( AddressingConstants . Submission . WSA_NAMESPACE . equals ( ns . getNamespaceURI ( ) ) || AddressingConstants . Final . WSA_NAMESPACE . equals ( ns . getNamespaceURI ( ) ) ) ) { om . detach ( ) ; } } } } } 	1	['8', '1', '0', '31', '96', '28', '4', '27', '7', '2', '430', '0', '0', '0', '0.2', '0', '0', '52.75', '6', '2.875', '1']
