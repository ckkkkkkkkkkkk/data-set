package org . apache . xerces . readers ; import org . apache . xerces . framework . XMLErrorReporter ; import org . apache . xerces . utils . CharDataChunk ; import org . apache . xerces . utils . QName ; import org . apache . xerces . utils . StringHasher ; import org . apache . xerces . utils . StringPool ; import org . apache . xerces . utils . XMLCharacterProperties ; import org . apache . xerces . utils . ImplementationMessages ; import org . xml . sax . SAXParseException ; import java . io . Reader ; import java . util . Vector ; public class StreamingCharReader extends XMLEntityReader { public StreamingCharReader ( XMLEntityHandler entityHandler , XMLErrorReporter errorReporter , boolean sendCharDataAsCharArray , Reader reader , StringPool stringPool ) throws Exception { super ( entityHandler , errorReporter , sendCharDataAsCharArray ) ; fStringPool = stringPool ; fCharacterStream = reader ; fCurrentChunk = CharDataChunk . createChunk ( fStringPool , null ) ; loadFirstChar ( ) ; } protected void deferException ( int errorCode , Object [ ] args , int offset ) { if ( fDeferredErrors == null ) fDeferredErrors = new Vector ( ) ; DeferredError de = new DeferredError ( errorCode , args , offset ) ; fDeferredErrors . addElement ( de ) ; } protected XMLEntityHandler . EntityReader changeReaders ( ) throws Exception { XMLEntityHandler . EntityReader nextReader = super . changeReaders ( ) ; fCurrentChunk . releaseChunk ( ) ; fCurrentChunk = null ; return nextReader ; } public void append ( XMLEntityHandler . CharBuffer charBuffer , int offset , int length ) { fCurrentChunk . append ( charBuffer , offset , length ) ; } public int addString ( int offset , int length ) { if ( length == 0 ) return 0 ; return fCurrentChunk . addString ( offset , length ) ; } public int addSymbol ( int offset , int length ) { if ( length == 0 ) return 0 ; return fCurrentChunk . addSymbol ( offset , length , 0 ) ; } public boolean lookingAtChar ( char chr , boolean skipPastChar ) throws Exception { int ch = fMostRecentChar ; if ( ch != chr ) { if ( ch == 0 ) { if ( atEOF ( fCurrentOffset + 1 ) ) { return changeReaders ( ) . lookingAtChar ( chr , skipPastChar ) ; } } return false ; } if ( skipPastChar ) { fCharacterCounter ++ ; loadNextChar ( ) ; } return true ; } public boolean lookingAtValidChar ( boolean skipPastChar ) throws Exception { int ch = fMostRecentChar ; if ( ch < 0xD800 ) { if ( ch >= 0x20 || ch == 0x09 ) { if ( skipPastChar ) { fCharacterCounter ++ ; loadNextChar ( ) ; } return true ; } if ( ch == 0x0A ) { if ( skipPastChar ) { fLinefeedCounter ++ ; fCharacterCounter = 1 ; loadNextChar ( ) ; } return true ; } if ( ch == 0 ) { if ( atEOF ( fCurrentOffset + 1 ) ) { return changeReaders ( ) . lookingAtValidChar ( skipPastChar ) ; } } return false ; } if ( ch > 0xFFFD ) { return false ; } if ( ch < 0xDC00 ) { CharDataChunk savedChunk = fCurrentChunk ; int savedIndex = fCurrentIndex ; int savedOffset = fCurrentOffset ; ch = loadNextChar ( ) ; boolean valid = ( ch >= 0xDC00 && ch < 0xE000 ) ; if ( ! valid || ! skipPastChar ) { fCurrentChunk = savedChunk ; fCurrentIndex = savedIndex ; fCurrentOffset = savedOffset ; fMostRecentData = savedChunk . toCharArray ( ) ; fMostRecentChar = fMostRecentData [ savedIndex ] & 0xFFFF ; return valid ; } } else if ( ch < 0xE000 ) { return false ; } if ( skipPastChar ) { fCharacterCounter ++ ; loadNextChar ( ) ; } return true ; } public boolean lookingAtSpace ( boolean skipPastChar ) throws Exception { int ch = fMostRecentChar ; if ( ch > 0x20 ) return false ; if ( ch == 0x20 || ch == 0x09 ) { if ( ! skipPastChar ) return true ; fCharacterCounter ++ ; } else if ( ch == 0x0A ) { if ( ! skipPastChar ) return true ; fLinefeedCounter ++ ; fCharacterCounter = 1 ; } else { if ( ch == 0 ) { if ( atEOF ( fCurrentOffset + 1 ) ) { return changeReaders ( ) . lookingAtSpace ( skipPastChar ) ; } } return false ; } loadNextChar ( ) ; return true ; } public void skipToChar ( char chr ) throws Exception { int ch = fMostRecentChar ; while ( true ) { if ( ch == chr ) return ; if ( ch == 0 ) { if ( atEOF ( fCurrentOffset + 1 ) ) { changeReaders ( ) . skipToChar ( chr ) ; return ; } fCharacterCounter ++ ; } else if ( ch == 0x0A ) { fLinefeedCounter ++ ; fCharacterCounter = 1 ; } else if ( ch >= 0xD800 && ch < 0xDC00 ) { fCharacterCounter ++ ; ch = loadNextChar ( ) ; if ( ch < 0xDC00 || ch >= 0xE000 ) continue ; } else fCharacterCounter ++ ; ch = loadNextChar ( ) ; } } public void skipPastSpaces ( ) throws Exception { int ch = fMostRecentChar ; while ( true ) { if ( ch == 0x20 || ch == 0x09 ) { fCharacterCounter ++ ; } else if ( ch == 0x0A ) { fLinefeedCounter ++ ; fCharacterCounter = 1 ; } else { if ( ch == 0 && atEOF ( fCurrentOffset + 1 ) ) changeReaders ( ) . skipPastSpaces ( ) ; return ; } ch = loadNextChar ( ) ; } } public void skipPastName ( char fastcheck ) throws Exception { int ch = fMostRecentChar ; if ( ch < 0x80 ) { if ( XMLCharacterProperties . fgAsciiInitialNameChar [ ch ] == 0 ) return ; } else { if ( ! fCalledCharPropInit ) { XMLCharacterProperties . initCharFlags ( ) ; fCalledCharPropInit = true ; } if ( ( XMLCharacterProperties . fgCharFlags [ ch ] & XMLCharacterProperties . E_InitialNameCharFlag ) == 0 ) return ; } while ( true ) { fCharacterCounter ++ ; ch = loadNextChar ( ) ; if ( fastcheck == ch ) return ; if ( ch < 0x80 ) { if ( XMLCharacterProperties . fgAsciiNameChar [ ch ] == 0 ) return ; } else { if ( ! fCalledCharPropInit ) { XMLCharacterProperties . initCharFlags ( ) ; fCalledCharPropInit = true ; } if ( ( XMLCharacterProperties . fgCharFlags [ ch ] & XMLCharacterProperties . E_NameCharFlag ) == 0 ) return ; } } } public void skipPastNmtoken ( char fastcheck ) throws Exception { int ch = fMostRecentChar ; while ( true ) { if ( fastcheck == ch ) return ; if ( ch < 0x80 ) { if ( XMLCharacterProperties . fgAsciiNameChar [ ch ] == 0 ) return ; } else { if ( ! fCalledCharPropInit ) { XMLCharacterProperties . initCharFlags ( ) ; fCalledCharPropInit = true ; } if ( ( XMLCharacterProperties . fgCharFlags [ ch ] & XMLCharacterProperties . E_NameCharFlag ) == 0 ) return ; } fCharacterCounter ++ ; ch = loadNextChar ( ) ; } } public boolean skippedString ( char [ ] s ) throws Exception { int ch = fMostRecentChar ; if ( ch != s [ 0 ] ) return false ; int length = s . length ; CharDataChunk dataChunk = fCurrentChunk ; int offset = fCurrentOffset ; int index = fCurrentIndex ; ch = loadNextChar ( ) ; for ( int i = 1 ; i < length ; i ++ ) { if ( ch != s [ i ] ) { fCurrentChunk = dataChunk ; fCurrentIndex = index ; fCurrentOffset = offset ; fMostRecentData = dataChunk . toCharArray ( ) ; fMostRecentChar = fMostRecentData [ index ] & 0xFFFF ; return false ; } ch = loadNextChar ( ) ; } fCharacterCounter += length ; return true ; } public int scanInvalidChar ( ) throws Exception { int ch = fMostRecentChar ; if ( ch == 0x0A ) { fLinefeedCounter ++ ; fCharacterCounter = 1 ; loadNextChar ( ) ; } else if ( ch == 0 ) { if ( atEOF ( fCurrentOffset + 1 ) ) { return changeReaders ( ) . scanInvalidChar ( ) ; } if ( fDeferredErrors != null ) { for ( int i = 0 ; i < fDeferredErrors . size ( ) ; i ++ ) { DeferredError de = ( DeferredError ) fDeferredErrors . elementAt ( i ) ; if ( de . offset == fCurrentIndex ) { fErrorReporter . reportError ( fErrorReporter . getLocator ( ) , ImplementationMessages . XERCES_IMPLEMENTATION_DOMAIN , de . errorCode , 0 , de . args , XMLErrorReporter . ERRORTYPE_FATAL_ERROR ) ; fDeferredErrors . removeElementAt ( i ) ; fCharacterCounter ++ ; loadNextChar ( ) ; return - 1 ; } } } fCharacterCounter ++ ; loadNextChar ( ) ; } else { fCharacterCounter ++ ; if ( ch >= 0xD800 && ch < 0xDC00 ) { int ch2 = loadNextChar ( ) ; if ( ch2 >= 0xDC00 && ch2 < 0xE000 ) { ch = ( ( ch - 0xD800 ) << 10 ) + ( ch2 - 0xDC00 ) + 0x10000 ; loadNextChar ( ) ; } } else loadNextChar ( ) ; } return ch ; } public int scanCharRef ( boolean hex ) throws Exception { int ch = fMostRecentChar ; if ( ch == 0 ) { if ( atEOF ( fCurrentOffset + 1 ) ) { return changeReaders ( ) . scanCharRef ( hex ) ; } return XMLEntityHandler . CHARREF_RESULT_INVALID_CHAR ; } int num = 0 ; if ( hex ) { if ( ch > 'f' || XMLCharacterProperties . fgAsciiXDigitChar [ ch ] == 0 ) return XMLEntityHandler . CHARREF_RESULT_INVALID_CHAR ; num = ch - ( ch < 'A' ? '0' : ( ch < 'a' ? 'A' : 'a' ) - 10 ) ; } else { if ( ch < '0' || ch > '9' ) return XMLEntityHandler . CHARREF_RESULT_INVALID_CHAR ; num = ch - '0' ; } fCharacterCounter ++ ; loadNextChar ( ) ; boolean toobig = false ; while ( true ) { ch = fMostRecentChar ; if ( ch == 0 ) break ; if ( hex ) { if ( ch > 'f' || XMLCharacterProperties . fgAsciiXDigitChar [ ch ] == 0 ) break ; } else { if ( ch < '0' || ch > '9' ) break ; } fCharacterCounter ++ ; loadNextChar ( ) ; if ( hex ) { int dig = ch - ( ch < 'A' ? '0' : ( ch < 'a' ? 'A' : 'a' ) - 10 ) ; num = ( num << 4 ) + dig ; } else { int dig = ch - '0' ; num = ( num * 10 ) + dig ; } if ( num > 0x10FFFF ) { toobig = true ; num = 0 ; } } if ( ch != ';' ) return XMLEntityHandler . CHARREF_RESULT_SEMICOLON_REQUIRED ; fCharacterCounter ++ ; loadNextChar ( ) ; if ( toobig ) return XMLEntityHandler . CHARREF_RESULT_OUT_OF_RANGE ; return num ; } public int scanStringLiteral ( ) throws Exception { boolean single ; if ( ! ( single = lookingAtChar ( '\'' , true ) ) && ! lookingAtChar ( '\"' , true ) ) { return XMLEntityHandler . STRINGLIT_RESULT_QUOTE_REQUIRED ; } int offset = fCurrentOffset ; char qchar = single ? '\'' : '\"' ; while ( ! lookingAtChar ( qchar , false ) ) { if ( ! lookingAtValidChar ( true ) ) { return XMLEntityHandler . STRINGLIT_RESULT_INVALID_CHAR ; } } int stringIndex = addString ( offset , fCurrentOffset - offset ) ; lookingAtChar ( qchar , true ) ; return stringIndex ; } public int scanAttValue ( char qchar , boolean asSymbol ) throws Exception { int offset = fCurrentOffset ; while ( true ) { if ( lookingAtChar ( qchar , false ) ) { break ; } if ( lookingAtChar ( ' ' , true ) ) { continue ; } if ( lookingAtSpace ( false ) ) { return XMLEntityHandler . ATTVALUE_RESULT_COMPLEX ; } if ( lookingAtChar ( '&' , false ) ) { return XMLEntityHandler . ATTVALUE_RESULT_COMPLEX ; } if ( lookingAtChar ( '<' , false ) ) { return XMLEntityHandler . ATTVALUE_RESULT_LESSTHAN ; } if ( ! lookingAtValidChar ( true ) ) { return XMLEntityHandler . ATTVALUE_RESULT_INVALID_CHAR ; } } int result = asSymbol ? addSymbol ( offset , fCurrentOffset - offset ) : addString ( offset , fCurrentOffset - offset ) ; lookingAtChar ( qchar , true ) ; return result ; } public int scanEntityValue ( int qchar , boolean createString ) throws Exception { int offset = fCurrentOffset ; while ( true ) { if ( atEOF ( fCurrentOffset + 1 ) ) { changeReaders ( ) ; return XMLEntityHandler . ENTITYVALUE_RESULT_END_OF_INPUT ; } if ( qchar != - 1 && lookingAtChar ( ( char ) qchar , false ) ) { if ( ! createString ) return XMLEntityHandler . ENTITYVALUE_RESULT_FINISHED ; break ; } if ( lookingAtChar ( '&' , false ) ) { return XMLEntityHandler . ENTITYVALUE_RESULT_REFERENCE ; } if ( lookingAtChar ( '%' , false ) ) { return XMLEntityHandler . ENTITYVALUE_RESULT_PEREF ; } if ( ! lookingAtValidChar ( true ) ) { return XMLEntityHandler . ENTITYVALUE_RESULT_INVALID_CHAR ; } } int result = addString ( offset , fCurrentOffset - offset ) ; lookingAtChar ( ( char ) qchar , true ) ; return result ; } public int scanName ( char fastcheck ) throws Exception { int ch = fMostRecentChar ; if ( ch < 0x80 ) { if ( XMLCharacterProperties . fgAsciiInitialNameChar [ ch ] == 0 ) return - 1 ; } else { if ( ! fCalledCharPropInit ) { XMLCharacterProperties . initCharFlags ( ) ; fCalledCharPropInit = true ; } if ( ( XMLCharacterProperties . fgCharFlags [ ch ] & XMLCharacterProperties . E_InitialNameCharFlag ) == 0 ) return - 1 ; } int offset = fCurrentOffset ; fCharacterCounter ++ ; int hashcode = 0 ; while ( true ) { hashcode = StringHasher . hashChar ( hashcode , ch ) ; ch = loadNextChar ( ) ; if ( fastcheck == ch ) break ; if ( ch < 0x80 ) { if ( XMLCharacterProperties . fgAsciiNameChar [ ch ] == 0 ) break ; } else { if ( ! fCalledCharPropInit ) { XMLCharacterProperties . initCharFlags ( ) ; fCalledCharPropInit = true ; } if ( ( XMLCharacterProperties . fgCharFlags [ ch ] & XMLCharacterProperties . E_NameCharFlag ) == 0 ) break ; } fCharacterCounter ++ ; } hashcode = StringHasher . finishHash ( hashcode ) ; int length = fCurrentOffset - offset ; int nameIndex = fCurrentChunk . addSymbol ( offset , length , hashcode ) ; return nameIndex ; } public boolean scanExpectedName ( char fastcheck , StringPool . CharArrayRange expectedName ) throws Exception { char [ ] expected = expectedName . chars ; int offset = expectedName . offset ; int len = expectedName . length ; int ch = fMostRecentChar ; for ( int i = 0 ; i < len ; i ++ ) { if ( ch != expected [ offset ++ ] ) { skipPastNmtoken ( fastcheck ) ; return false ; } fCharacterCounter ++ ; ch = loadNextChar ( ) ; } if ( ch == fastcheck ) return true ; if ( ch < 0x80 ) { if ( XMLCharacterProperties . fgAsciiNameChar [ ch ] == 0 ) return true ; } else { if ( ! fCalledCharPropInit ) { XMLCharacterProperties . initCharFlags ( ) ; fCalledCharPropInit = true ; } if ( ( XMLCharacterProperties . fgCharFlags [ ch ] & XMLCharacterProperties . E_NameCharFlag ) == 0 ) return true ; } skipPastNmtoken ( fastcheck ) ; return false ; } public void scanQName ( char fastcheck , QName qname ) throws Exception { int ch = fMostRecentChar ; if ( ch < 0x80 ) { if ( XMLCharacterProperties . fgAsciiInitialNameChar [ ch ] == 0 ) { qname . clear ( ) ; return ; } if ( ch == ':' ) { qname . clear ( ) ; return ; } } else { if ( ! fCalledCharPropInit ) { XMLCharacterProperties . initCharFlags ( ) ; fCalledCharPropInit = true ; } if ( ( XMLCharacterProperties . fgCharFlags [ ch ] & XMLCharacterProperties . E_InitialNameCharFlag ) == 0 ) { qname . clear ( ) ; return ; } } int offset = fCurrentOffset ; fCharacterCounter ++ ; int hashcode = 0 ; int prefixend = - 1 ; while ( true ) { hashcode = StringHasher . hashChar ( hashcode , ch ) ; ch = loadNextChar ( ) ; if ( fastcheck == ch ) break ; if ( ch < 0x80 ) { if ( XMLCharacterProperties . fgAsciiNameChar [ ch ] == 0 ) break ; if ( ch == ':' ) { if ( prefixend != - 1 ) break ; prefixend = fCurrentOffset ; CharDataChunk savedChunk = fCurrentChunk ; int savedOffset = fCurrentOffset ; int savedIndex = fCurrentIndex ; ch = loadNextChar ( ) ; fCurrentChunk = savedChunk ; fCurrentOffset = savedOffset ; fCurrentIndex = savedIndex ; fMostRecentData = savedChunk . toCharArray ( ) ; boolean lpok = true ; if ( ch < 0x80 ) { if ( XMLCharacterProperties . fgAsciiInitialNameChar [ ch ] == 0 || ch == ':' ) lpok = false ; } else { if ( ! fCalledCharPropInit ) { XMLCharacterProperties . initCharFlags ( ) ; fCalledCharPropInit = true ; } if ( ( XMLCharacterProperties . fgCharFlags [ ch ] & XMLCharacterProperties . E_InitialNameCharFlag ) == 0 ) lpok = false ; } ch = ':' ; if ( ! lpok ) { prefixend = - 1 ; fMostRecentChar = ch ; break ; } } } else { if ( ! fCalledCharPropInit ) { XMLCharacterProperties . initCharFlags ( ) ; fCalledCharPropInit = true ; } if ( ( XMLCharacterProperties . fgCharFlags [ ch ] & XMLCharacterProperties . E_NameCharFlag ) == 0 ) break ; } fCharacterCounter ++ ; } hashcode = StringHasher . finishHash ( hashcode ) ; int length = fCurrentOffset - offset ; qname . rawname = fCurrentChunk . addSymbol ( offset , length , hashcode ) ; qname . prefix = prefixend == - 1 ? - 1 : addSymbol ( offset , prefixend - offset ) ; qname . localpart = prefixend == - 1 ? qname . rawname : addSymbol ( prefixend + 1 , fCurrentOffset - ( prefixend + 1 ) ) ; qname . uri = - 1 ; } public int scanContent ( QName element ) throws Exception { if ( fCallClearPreviousChunk && fCurrentChunk . clearPreviousChunk ( ) ) fCallClearPreviousChunk = false ; int charDataOffset = fCurrentOffset ; int ch = fMostRecentChar ; if ( ch < 0x80 ) { switch ( XMLCharacterProperties . fgAsciiWSCharData [ ch ] ) { case 0 : fCharacterCounter ++ ; ch = loadNextChar ( ) ; break ; case 1 : fCharacterCounter ++ ; ch = loadNextChar ( ) ; if ( ! fInCDSect ) { return recognizeMarkup ( ch ) ; } break ; case 2 : fCharacterCounter ++ ; ch = loadNextChar ( ) ; if ( ! fInCDSect ) { return recognizeReference ( ch ) ; } break ; case 3 : fCharacterCounter ++ ; ch = loadNextChar ( ) ; if ( ch != ']' ) break ; { CharDataChunk dataChunk = fCurrentChunk ; int index = fCurrentIndex ; int offset = fCurrentOffset ; if ( loadNextChar ( ) != '>' ) { fCurrentChunk = dataChunk ; fCurrentIndex = index ; fCurrentOffset = offset ; fMostRecentData = dataChunk . toCharArray ( ) ; fMostRecentChar = ']' ; break ; } } loadNextChar ( ) ; fCharacterCounter += 2 ; return XMLEntityHandler . CONTENT_RESULT_END_OF_CDSECT ; case 4 : if ( ch == 0 && atEOF ( fCurrentOffset + 1 ) ) { changeReaders ( ) ; return XMLEntityHandler . CONTENT_RESULT_INVALID_CHAR ; } return XMLEntityHandler . CONTENT_RESULT_INVALID_CHAR ; case 5 : do { if ( ch == 0x0A ) { fLinefeedCounter ++ ; fCharacterCounter = 1 ; } else fCharacterCounter ++ ; ch = loadNextChar ( ) ; } while ( ch == 0x20 || ch == 0x09 || ch == 0x0A ) ; if ( ch < 0x80 ) { switch ( XMLCharacterProperties . fgAsciiCharData [ ch ] ) { case 0 : fCharacterCounter ++ ; ch = loadNextChar ( ) ; break ; case 1 : if ( ! fInCDSect ) { callCharDataHandler ( charDataOffset , fCurrentOffset , true ) ; fCharacterCounter ++ ; ch = loadNextChar ( ) ; return recognizeMarkup ( ch ) ; } fCharacterCounter ++ ; ch = loadNextChar ( ) ; break ; case 2 : if ( ! fInCDSect ) { callCharDataHandler ( charDataOffset , fCurrentOffset , true ) ; fCharacterCounter ++ ; ch = loadNextChar ( ) ; return recognizeReference ( ch ) ; } fCharacterCounter ++ ; ch = loadNextChar ( ) ; break ; case 3 : int endOffset = fCurrentOffset ; ch = loadNextChar ( ) ; if ( ch != ']' ) { fCharacterCounter ++ ; break ; } { CharDataChunk dataChunk = fCurrentChunk ; int index = fCurrentIndex ; int offset = fCurrentOffset ; if ( loadNextChar ( ) != '>' ) { fCurrentChunk = dataChunk ; fCurrentIndex = index ; fCurrentOffset = offset ; fMostRecentData = dataChunk . toCharArray ( ) ; fMostRecentChar = ']' ; fCharacterCounter ++ ; break ; } } loadNextChar ( ) ; callCharDataHandler ( charDataOffset , endOffset , true ) ; fCharacterCounter += 3 ; return XMLEntityHandler . CONTENT_RESULT_END_OF_CDSECT ; case 4 : callCharDataHandler ( charDataOffset , fCurrentOffset , true ) ; if ( ch == 0 && atEOF ( fCurrentOffset + 1 ) ) { changeReaders ( ) ; return XMLEntityHandler . CONTENT_RESULT_INVALID_CHAR ; } return XMLEntityHandler . CONTENT_RESULT_INVALID_CHAR ; } } else if ( ! skipMultiByteCharData ( ch ) ) { callCharDataHandler ( charDataOffset , fCurrentOffset , true ) ; return XMLEntityHandler . CONTENT_RESULT_INVALID_CHAR ; } break ; } } else if ( ! skipMultiByteCharData ( ch ) ) { return XMLEntityHandler . CONTENT_RESULT_INVALID_CHAR ; } ch = skipAsciiCharData ( ) ; while ( true ) { if ( ch < 0x80 ) { switch ( XMLCharacterProperties . fgAsciiCharData [ ch ] ) { case 0 : fCharacterCounter ++ ; ch = loadNextChar ( ) ; break ; case 1 : if ( ! fInCDSect ) { callCharDataHandler ( charDataOffset , fCurrentOffset , false ) ; fCharacterCounter ++ ; ch = loadNextChar ( ) ; return recognizeMarkup ( ch ) ; } fCharacterCounter ++ ; ch = loadNextChar ( ) ; break ; case 2 : if ( ! fInCDSect ) { callCharDataHandler ( charDataOffset , fCurrentOffset , false ) ; fCharacterCounter ++ ; ch = loadNextChar ( ) ; return recognizeReference ( ch ) ; } fCharacterCounter ++ ; ch = loadNextChar ( ) ; break ; case 3 : int endOffset = fCurrentOffset ; ch = loadNextChar ( ) ; if ( ch != ']' ) { fCharacterCounter ++ ; break ; } CharDataChunk dataChunk = fCurrentChunk ; int index = fCurrentIndex ; int offset = fCurrentOffset ; if ( loadNextChar ( ) != '>' ) { fCurrentChunk = dataChunk ; fCurrentIndex = index ; fCurrentOffset = offset ; fMostRecentData = dataChunk . toCharArray ( ) ; fMostRecentChar = ']' ; fCharacterCounter ++ ; break ; } loadNextChar ( ) ; callCharDataHandler ( charDataOffset , endOffset , false ) ; fCharacterCounter += 3 ; return XMLEntityHandler . CONTENT_RESULT_END_OF_CDSECT ; case 4 : if ( ch == 0x0A ) { fLinefeedCounter ++ ; fCharacterCounter = 1 ; ch = loadNextChar ( ) ; break ; } callCharDataHandler ( charDataOffset , fCurrentOffset , false ) ; if ( ch == 0 && atEOF ( fCurrentOffset + 1 ) ) { changeReaders ( ) ; return XMLEntityHandler . CONTENT_RESULT_INVALID_CHAR ; } return XMLEntityHandler . CONTENT_RESULT_INVALID_CHAR ; } } else { if ( ! skipMultiByteCharData ( ch ) ) { callCharDataHandler ( charDataOffset , fCurrentOffset , false ) ; return XMLEntityHandler . CONTENT_RESULT_INVALID_CHAR ; } ch = fMostRecentChar ; } } } private static final char [ ] cdata_string = { 'C' , 'D' , 'A' , 'T' , 'A' , '[' } ; private StringPool fStringPool = null ; private boolean fCallClearPreviousChunk = true ; private Vector fDeferredErrors = null ; private class DeferredError { int errorCode ; Object [ ] args ; int offset ; DeferredError ( int ec , Object [ ] a , int o ) { errorCode = ec ; args = a ; offset = o ; } } private int recognizeMarkup ( int ch ) throws Exception { switch ( ch ) { case 0 : return XMLEntityHandler . CONTENT_RESULT_MARKUP_END_OF_INPUT ; case '?' : fCharacterCounter ++ ; loadNextChar ( ) ; return XMLEntityHandler . CONTENT_RESULT_START_OF_PI ; case '!' : fCharacterCounter ++ ; ch = loadNextChar ( ) ; if ( ch == 0 ) { fCharacterCounter -- ; fCurrentOffset -- ; return XMLEntityHandler . CONTENT_RESULT_MARKUP_END_OF_INPUT ; } if ( ch == '-' ) { fCharacterCounter ++ ; ch = loadNextChar ( ) ; if ( ch == 0 ) { fCharacterCounter -= 2 ; fCurrentOffset -= 2 ; return XMLEntityHandler . CONTENT_RESULT_MARKUP_END_OF_INPUT ; } if ( ch == '-' ) { fCharacterCounter ++ ; loadNextChar ( ) ; return XMLEntityHandler . CONTENT_RESULT_START_OF_COMMENT ; } break ; } if ( ch == '[' ) { for ( int i = 0 ; i < 6 ; i ++ ) { fCharacterCounter ++ ; ch = loadNextChar ( ) ; if ( ch == 0 ) { fCharacterCounter -= ( 2 + i ) ; fCurrentOffset -= ( 2 + i ) ; return XMLEntityHandler . CONTENT_RESULT_MARKUP_END_OF_INPUT ; } if ( ch != cdata_string [ i ] ) { return XMLEntityHandler . CONTENT_RESULT_MARKUP_NOT_RECOGNIZED ; } } fCharacterCounter ++ ; loadNextChar ( ) ; return XMLEntityHandler . CONTENT_RESULT_START_OF_CDSECT ; } break ; case '/' : fCharacterCounter ++ ; loadNextChar ( ) ; return XMLEntityHandler . CONTENT_RESULT_START_OF_ETAG ; default : return XMLEntityHandler . CONTENT_RESULT_START_OF_ELEMENT ; } return XMLEntityHandler . CONTENT_RESULT_MARKUP_NOT_RECOGNIZED ; } private int recognizeReference ( int ch ) throws Exception { if ( ch == 0 ) { return XMLEntityHandler . CONTENT_RESULT_REFERENCE_END_OF_INPUT ; } if ( ch == '#' ) { fCharacterCounter ++ ; loadNextChar ( ) ; return XMLEntityHandler . CONTENT_RESULT_START_OF_CHARREF ; } else { return XMLEntityHandler . CONTENT_RESULT_START_OF_ENTITYREF ; } } private boolean skipMultiByteCharData ( int ch ) throws Exception { if ( ch < 0xD800 ) { loadNextChar ( ) ; return true ; } if ( ch > 0xFFFD ) return false ; if ( ch >= 0xDC00 && ch < 0xE000 ) return false ; if ( ch >= 0xD800 && ch < 0xDC00 ) { CharDataChunk savedChunk = fCurrentChunk ; int savedIndex = fCurrentIndex ; int savedOffset = fCurrentOffset ; ch = loadNextChar ( ) ; if ( ch < 0xDC00 || ch >= 0xE000 ) { fCurrentChunk = savedChunk ; fCurrentIndex = savedIndex ; fCurrentOffset = savedOffset ; fMostRecentData = savedChunk . toCharArray ( ) ; fMostRecentChar = fMostRecentData [ savedIndex ] & 0xFFFF ; return false ; } } loadNextChar ( ) ; return true ; } private int skipAsciiCharData ( ) throws Exception { int ch = fMostRecentChar ; while ( true ) { if ( ch >= 0x80 ) { return ch ; } if ( XMLCharacterProperties . fgAsciiCharData [ ch ] == 0 ) { fCharacterCounter ++ ; } else if ( ch == 0x0A ) { fLinefeedCounter ++ ; fCharacterCounter = 1 ; } else { return ch ; } ch = loadNextChar ( ) ; } } private void callCharDataHandler ( int offset , int endOffset , boolean isWhitespace ) throws Exception { int length = endOffset - offset ; if ( ! fSendCharDataAsCharArray ) { int stringIndex = addString ( offset , length ) ; if ( isWhitespace ) fCharDataHandler . processWhitespace ( stringIndex ) ; else fCharDataHandler . processCharacters ( stringIndex ) ; return ; } CharDataChunk dataChunk = fCurrentChunk . chunkFor ( offset ) ; int index = offset & CharDataChunk . CHUNK_MASK ; if ( index + length <= CharDataChunk . CHUNK_SIZE ) { if ( length != 0 ) { if ( isWhitespace ) fCharDataHandler . processWhitespace ( dataChunk . toCharArray ( ) , index , length ) ; else fCharDataHandler . processCharacters ( dataChunk . toCharArray ( ) , index , length ) ; } return ; } int count = length ; int nbytes = CharDataChunk . CHUNK_SIZE - index ; if ( isWhitespace ) fCharDataHandler . processWhitespace ( dataChunk . toCharArray ( ) , index , nbytes ) ; else fCharDataHandler . processCharacters ( dataChunk . toCharArray ( ) , index , nbytes ) ; count -= nbytes ; do { dataChunk = dataChunk . nextChunk ( ) ; if ( dataChunk == null ) { throw new RuntimeException ( new ImplementationMessages ( ) . createMessage ( null , ImplementationMessages . INT_DCN , 0 , null ) ) ; } nbytes = count <= CharDataChunk . CHUNK_SIZE ? count : CharDataChunk . CHUNK_SIZE ; if ( isWhitespace ) fCharDataHandler . processWhitespace ( dataChunk . toCharArray ( ) , 0 , nbytes ) ; else fCharDataHandler . processCharacters ( dataChunk . toCharArray ( ) , 0 , nbytes ) ; count -= nbytes ; } while ( count > 0 ) ; } private int slowLoadNextChar ( ) throws Exception { fCallClearPreviousChunk = true ; if ( fCurrentChunk . nextChunk ( ) != null ) { fCurrentChunk = fCurrentChunk . nextChunk ( ) ; fCurrentIndex = 0 ; fMostRecentData = fCurrentChunk . toCharArray ( ) ; return ( fMostRecentChar = fMostRecentData [ fCurrentIndex ] & 0xFFFF ) ; } else { fCurrentChunk = CharDataChunk . createChunk ( fStringPool , fCurrentChunk ) ; fCurrentIndex = 0 ; fFillIndex = 0 ; loadFirstChar ( ) ; return fMostRecentChar ; } } private int loadNextChar ( ) throws Exception { fCurrentOffset ++ ; if ( ++ fCurrentIndex == CharDataChunk . CHUNK_SIZE ) return slowLoadNextChar ( ) ; if ( fCurrentIndex < fFillIndex ) return ( fMostRecentChar = fMostRecentData [ fCurrentIndex ] & 0xFFFF ) ; return loadMoreChars ( ) ; } private void loadFirstChar ( ) throws Exception { fMostRecentData = fCurrentChunk . toCharArray ( ) ; if ( fMostRecentData == null ) { fMostRecentData = new char [ CharDataChunk . CHUNK_SIZE ] ; fCurrentChunk . setCharArray ( fMostRecentData ) ; } loadMoreChars ( ) ; } private boolean seenCR = false ; private int oweChar = - 1 ; private char [ ] inBuffer = new char [ 2 ] ; private int loadMoreChars ( ) throws Exception { if ( oweChar != - 1 ) { fMostRecentData [ fFillIndex ] = ( char ) oweChar ; fFillIndex ++ ; fLength ++ ; fMostRecentChar = oweChar ; oweChar = - 1 ; return fMostRecentChar ; } int result = - 1 ; try { while ( true ) { result = fCharacterStream . read ( inBuffer , 0 , 2 ) ; switch ( result ) { case - 1 : break ; case 0 : continue ; case 1 : result = inBuffer [ 0 ] ; if ( seenCR ) { seenCR = false ; if ( result == 0x0A ) continue ; } if ( result == 0x0D ) { seenCR = true ; result = 0x0A ; } fMostRecentChar = ( fMostRecentData [ fFillIndex ] = ( char ) result ) ; fFillIndex ++ ; fLength ++ ; return fMostRecentChar ; case 2 : result = inBuffer [ 0 ] ; boolean readchar2 = false ; if ( seenCR ) { seenCR = false ; if ( result == 0x0A ) { result = inBuffer [ 1 ] ; readchar2 = true ; } } if ( result == 0x0D ) { seenCR = true ; result = 0x0A ; } fMostRecentChar = ( fMostRecentData [ fFillIndex ] = ( char ) result ) ; fFillIndex ++ ; fLength ++ ; if ( ! readchar2 ) { result = inBuffer [ 1 ] ; if ( seenCR ) { seenCR = false ; if ( result == 0x0A ) return fMostRecentChar ; } if ( result == 0x0D ) { seenCR = true ; result = 0x0A ; } oweChar = result ; } return fMostRecentChar ; } break ; } } catch ( java . io . IOException ex ) { } try { fCharacterStream . close ( ) ; } catch ( java . io . IOException ex ) { } fCharacterStream = null ; fMostRecentChar = ( fMostRecentData [ fFillIndex ] = 0 ) ; return 0 ; } private boolean atEOF ( int offset ) { return ( offset > fLength ) ; } protected Reader fCharacterStream = null ; protected CharDataChunk fCurrentChunk = null ; protected int fCurrentIndex = 0 ; protected int fFillIndex = 0 ; protected char [ ] fMostRecentData = null ; protected int fMostRecentChar = 0 ; protected int fLength = 0 ; protected boolean fCalledCharPropInit = false ; } 	0	['34', '2', '0', '14', '74', '0', '1', '14', '21', '0.672727273', '2890', '1', '2', '0.179487179', '0.160839161', '1', '3', '83.55882353', '2', '1.0588', '0']
package org . apache . xerces . framework ; public class Version { public static String fVersion = "Xerces 1.3.0" ; public static void main ( String argv [ ] ) { System . out . println ( fVersion ) ; } } 	1	['3', '1', '0', '0', '5', '1', '0', '0', '2', '0.5', '14', '0', '0', '0', '0.5', '0', '0', '3.333333333', '1', '0.3333', '5']
package org . apache . xml . serialize ; import java . util . Hashtable ; import org . w3c . dom . Document ; import org . w3c . dom . DocumentType ; import org . w3c . dom . Node ; import org . w3c . dom . html . HTMLDocument ; public class OutputFormat { public static class DTD { public static final String HTMLPublicId = "-//W3C//DTD HTML 4.0//EN" ; public static final String HTMLSystemId = "http://www.w3.org/TR/WD-html-in-xml/DTD/xhtml1-strict.dtd" ; public static final String XHTMLPublicId = "-//W3C//DTD XHTML 1.0 Strict//EN" ; public static final String XHTMLSystemId = "http://www.w3.org/TR/WD-html-in-xml/DTD/xhtml1-strict.dtd" ; } public static class Defaults { public static final int Indent = 4 ; public static final String Encoding = "UTF-8" ; public static final int LineWidth = 72 ; } private String _method ; private String _version ; private int _indent = 0 ; private String _encoding = Defaults . Encoding ; private EncodingInfo _encodingInfo = null ; private String _mediaType ; private String _doctypeSystem ; private String _doctypePublic ; private boolean _omitXmlDeclaration = false ; private boolean _omitDoctype = false ; private boolean _omitComments = false ; private boolean _stripComments = false ; private boolean _standalone = false ; private String [ ] _cdataElements ; private String [ ] _nonEscapingElements ; private String _lineSeparator = LineSeparator . Web ; private int _lineWidth = Defaults . LineWidth ; private boolean _preserve = false ; public OutputFormat ( ) { } public OutputFormat ( String method , String encoding , boolean indenting ) { setMethod ( method ) ; setEncoding ( encoding ) ; setIndenting ( indenting ) ; } public OutputFormat ( Document doc ) { setMethod ( whichMethod ( doc ) ) ; setDoctype ( whichDoctypePublic ( doc ) , whichDoctypeSystem ( doc ) ) ; setMediaType ( whichMediaType ( getMethod ( ) ) ) ; } public OutputFormat ( Document doc , String encoding , boolean indenting ) { this ( doc ) ; setEncoding ( encoding ) ; setIndenting ( indenting ) ; } public String getMethod ( ) { return _method ; } public void setMethod ( String method ) { _method = method ; } public String getVersion ( ) { return _version ; } public void setVersion ( String version ) { _version = version ; } public int getIndent ( ) { return _indent ; } public boolean getIndenting ( ) { return ( _indent > 0 ) ; } public void setIndent ( int indent ) { if ( indent < 0 ) _indent = 0 ; else _indent = indent ; } public void setIndenting ( boolean on ) { if ( on ) { _indent = Defaults . Indent ; _lineWidth = Defaults . LineWidth ; } else { _indent = 0 ; _lineWidth = 0 ; } } public String getEncoding ( ) { return _encoding ; } public void setEncoding ( String encoding ) { _encoding = encoding ; _encodingInfo = null ; } public void setEncoding ( EncodingInfo encInfo ) { _encoding = encInfo . getName ( ) ; _encodingInfo = encInfo ; } public EncodingInfo getEncodingInfo ( ) { if ( _encodingInfo == null ) _encodingInfo = Encodings . getEncodingInfo ( _encoding ) ; return _encodingInfo ; } public String getMediaType ( ) { return _mediaType ; } public void setMediaType ( String mediaType ) { _mediaType = mediaType ; } public void setDoctype ( String publicId , String systemId ) { _doctypePublic = publicId ; _doctypeSystem = systemId ; } public String getDoctypePublic ( ) { return _doctypePublic ; } public String getDoctypeSystem ( ) { return _doctypeSystem ; } public boolean getOmitComments ( ) { return _omitComments ; } public void setOmitComments ( boolean omit ) { _omitComments = omit ; } public boolean getOmitDocumentType ( ) { return _omitDoctype ; } public void setOmitDocumentType ( boolean omit ) { _omitDoctype = omit ; } public boolean getOmitXMLDeclaration ( ) { return _omitXmlDeclaration ; } public void setOmitXMLDeclaration ( boolean omit ) { _omitXmlDeclaration = omit ; } public boolean getStandalone ( ) { return _standalone ; } public void setStandalone ( boolean standalone ) { _standalone = standalone ; } public String [ ] getCDataElements ( ) { return _cdataElements ; } public boolean isCDataElement ( String tagName ) { int i ; if ( _cdataElements == null ) return false ; for ( i = 0 ; i < _cdataElements . length ; ++ i ) if ( _cdataElements [ i ] . equals ( tagName ) ) return true ; return false ; } public void setCDataElements ( String [ ] cdataElements ) { _cdataElements = cdataElements ; } public String [ ] getNonEscapingElements ( ) { return _nonEscapingElements ; } public boolean isNonEscapingElement ( String tagName ) { int i ; if ( _nonEscapingElements == null ) return false ; for ( i = 0 ; i < _nonEscapingElements . length ; ++ i ) if ( _nonEscapingElements [ i ] . equals ( tagName ) ) return true ; return false ; } public void setNonEscapingElements ( String [ ] nonEscapingElements ) { _nonEscapingElements = nonEscapingElements ; } public String getLineSeparator ( ) { return _lineSeparator ; } public void setLineSeparator ( String lineSeparator ) { if ( lineSeparator == null ) _lineSeparator = LineSeparator . Web ; else _lineSeparator = lineSeparator ; } public boolean getPreserveSpace ( ) { return _preserve ; } public void setPreserveSpace ( boolean preserve ) { _preserve = preserve ; } public int getLineWidth ( ) { return _lineWidth ; } public void setLineWidth ( int lineWidth ) { if ( lineWidth <= 0 ) _lineWidth = 0 ; else _lineWidth = lineWidth ; } public char getLastPrintable ( ) { if ( getEncoding ( ) != null && ( getEncoding ( ) . equalsIgnoreCase ( "ASCII" ) ) ) return 0xFF ; else return 0xFFFF ; } public static String whichMethod ( Document doc ) { Node node ; String value ; int i ; if ( doc instanceof HTMLDocument ) return Method . HTML ; node = doc . getFirstChild ( ) ; while ( node != null ) { if ( node . getNodeType ( ) == Node . ELEMENT_NODE ) { if ( node . getNodeName ( ) . equalsIgnoreCase ( "html" ) ) { return Method . HTML ; } else if ( node . getNodeName ( ) . equalsIgnoreCase ( "root" ) ) { return Method . FOP ; } else { return Method . XML ; } } else if ( node . getNodeType ( ) == Node . TEXT_NODE ) { value = node . getNodeValue ( ) ; for ( i = 0 ; i < value . length ( ) ; ++ i ) if ( value . charAt ( i ) != 0x20 && value . charAt ( i ) != 0x0A && value . charAt ( i ) != 0x09 && value . charAt ( i ) != 0x0D ) return Method . XML ; } node = node . getNextSibling ( ) ; } return Method . XML ; } public static String whichDoctypePublic ( Document doc ) { DocumentType doctype ; doctype = doc . getDoctype ( ) ; if ( doctype != null ) { try { return doctype . getPublicId ( ) ; } catch ( Error except ) { } } if ( doc instanceof HTMLDocument ) return DTD . XHTMLPublicId ; return null ; } public static String whichDoctypeSystem ( Document doc ) { DocumentType doctype ; doctype = doc . getDoctype ( ) ; if ( doctype != null ) { try { return doctype . getSystemId ( ) ; } catch ( Error except ) { } } if ( doc instanceof HTMLDocument ) return DTD . XHTMLSystemId ; return null ; } public static String whichMediaType ( String method ) { if ( method . equalsIgnoreCase ( Method . XML ) ) return "text/xml" ; if ( method . equalsIgnoreCase ( Method . HTML ) ) return "text/html" ; if ( method . equalsIgnoreCase ( Method . XHTML ) ) return "text/html" ; if ( method . equalsIgnoreCase ( Method . TEXT ) ) return "text/plain" ; if ( method . equalsIgnoreCase ( Method . FOP ) ) return "application/pdf" ; return null ; } } 	0	['46', '1', '0', '13', '61', '833', '11', '2', '46', '0.903703704', '579', '1', '1', '0', '0.220496894', '0', '0', '11.19565217', '12', '1.6522', '0']
package javax . xml . parsers ; import java . io . InputStream ; import java . io . IOException ; import java . io . File ; import java . io . FileInputStream ; import java . util . Properties ; import java . io . BufferedReader ; import java . io . InputStreamReader ; public abstract class DocumentBuilderFactory { private static final String defaultPropName = "javax.xml.parsers.DocumentBuilderFactory" ; private boolean validating = false ; private boolean namespaceAware = false ; private boolean whitespace = false ; private boolean expandEntityRef = false ; private boolean ignoreComments = false ; private boolean coalescing = false ; protected DocumentBuilderFactory ( ) { } public static DocumentBuilderFactory newInstance ( ) { String factoryImplName = findFactory ( defaultPropName , "org.apache.xerces.jaxp.DocumentBuilderFactoryImpl" ) ; if ( factoryImplName == null ) { throw new FactoryConfigurationError ( "No default implementation found" ) ; } DocumentBuilderFactory factoryImpl ; try { Class clazz = Class . forName ( factoryImplName ) ; factoryImpl = ( DocumentBuilderFactory ) clazz . newInstance ( ) ; } catch ( ClassNotFoundException cnfe ) { throw new FactoryConfigurationError ( cnfe ) ; } catch ( IllegalAccessException iae ) { throw new FactoryConfigurationError ( iae ) ; } catch ( InstantiationException ie ) { throw new FactoryConfigurationError ( ie ) ; } return factoryImpl ; } public abstract DocumentBuilder newDocumentBuilder ( ) throws ParserConfigurationException ; public void setNamespaceAware ( boolean awareness ) { this . namespaceAware = awareness ; } public void setValidating ( boolean validating ) { this . validating = validating ; } public void setIgnoreElementContentWhitespace ( boolean whitespace ) { this . whitespace = whitespace ; } public void setExpandEntityReferences ( boolean expandEntityRef ) { this . expandEntityRef = expandEntityRef ; } public void setIgnoringComments ( boolean ignoreComments ) { this . ignoreComments = ignoreComments ; } public void setCoalescing ( boolean coalescing ) { this . coalescing = coalescing ; } public boolean isNamespaceAware ( ) { return namespaceAware ; } public boolean isValidating ( ) { return validating ; } public boolean isIgnoreElementContentWhitespace ( ) { return whitespace ; } public boolean isExpandEntityReferences ( ) { return expandEntityRef ; } public boolean isIgnoringComments ( ) { return ignoreComments ; } public boolean isCoalescing ( ) { return coalescing ; } public abstract void setAttribute ( String name , Object value ) throws IllegalArgumentException ; public abstract Object getAttribute ( String name ) throws IllegalArgumentException ; private static String foundFactory = null ; private static final boolean debug = System . getProperty ( "jaxp.debug" ) != null ; private static String findFactory ( String factoryId , String defaultFactory ) { try { String systemProp = System . getProperty ( factoryId ) ; if ( systemProp != null ) { if ( debug ) System . err . println ( "JAXP: found system property" + systemProp ) ; return systemProp ; } } catch ( SecurityException se ) { } if ( foundFactory != null ) return foundFactory ; try { String javah = System . getProperty ( "java.home" ) ; String configFile = javah + File . separator + "lib" + File . separator + "jaxp.properties" ; File f = new File ( configFile ) ; if ( f . exists ( ) ) { Properties props = new Properties ( ) ; props . load ( new FileInputStream ( f ) ) ; foundFactory = props . getProperty ( factoryId ) ; if ( debug ) System . err . println ( "JAXP: found java.home property " + foundFactory ) ; if ( foundFactory != null ) return foundFactory ; } } catch ( Exception ex ) { if ( debug ) ex . printStackTrace ( ) ; } String serviceId = "META-INF/services/" + factoryId ; try { ClassLoader cl = DocumentBuilderFactory . class . getClassLoader ( ) ; InputStream is = null ; if ( cl == null ) { is = ClassLoader . getSystemResourceAsStream ( serviceId ) ; } else { is = cl . getResourceAsStream ( serviceId ) ; } if ( is != null ) { if ( debug ) System . err . println ( "JAXP: found  " + serviceId ) ; BufferedReader rd = new BufferedReader ( new InputStreamReader ( is ) ) ; foundFactory = rd . readLine ( ) ; rd . close ( ) ; if ( debug ) System . err . println ( "JAXP: loaded from services: " + foundFactory ) ; if ( foundFactory != null && ! "" . equals ( foundFactory ) ) { return foundFactory ; } } } catch ( Exception ex ) { if ( debug ) ex . printStackTrace ( ) ; } return defaultFactory ; } } 	1	['20', '1', '1', '0', '47', '152', '0', '0', '16', '0.915789474', '325', '0.9', '0', '0', '0.355263158', '0', '0', '14.75', '10', '1.4', '2']
package org . w3c . dom . html ; public interface HTMLFrameSetElement extends HTMLElement { public String getCols ( ) ; public void setCols ( String cols ) ; public String getRows ( ) ; public void setRows ( String rows ) ; } 	0	['4', '1', '0', '0', '4', '6', '0', '0', '4', '2', '4', '0', '0', '0', '0.75', '0', '0', '0', '1', '1', '0']
package org . apache . xerces . validators . schema ; import org . apache . xerces . utils . QName ; import org . apache . xerces . utils . StringPool ; import org . apache . xerces . validators . common . GrammarResolver ; import org . xml . sax . SAXException ; import java . lang . ClassCastException ; public class SubstitutionGroupComparator { private final int TOP_LEVEL_SCOPE = - 1 ; private StringPool fStringPool = null ; private GrammarResolver fGrammarResolver = null ; private SubstitutionGroupComparator ( ) { } public SubstitutionGroupComparator ( GrammarResolver grammarResolver , StringPool stringPool ) { fGrammarResolver = grammarResolver ; fStringPool = stringPool ; } public boolean isEquivalentTo ( QName aElement , QName exemplar ) throws Exception { if ( aElement . localpart == exemplar . localpart && aElement . uri == exemplar . uri ) { return true ; } if ( fGrammarResolver == null || fStringPool == null ) { throw new SAXException ( "Try to check substitutionGroup against a substitutionGroup, but no GrammarResolver is defined" ) ; } int count = 16 ; int uriIndex = aElement . uri ; int localpartIndex = aElement . localpart ; String uri = fStringPool . toString ( aElement . uri ) ; String localpart = fStringPool . toString ( aElement . localpart ) ; while ( count >= 0 ) { if ( uri == null ) { return false ; } SchemaGrammar sGrammar = null ; try { sGrammar = ( SchemaGrammar ) fGrammarResolver . getGrammar ( uri ) ; } catch ( ClassCastException ce ) { return false ; } if ( sGrammar == null ) return false ; int elementIndex = sGrammar . getElementDeclIndex ( uriIndex , localpartIndex , TOP_LEVEL_SCOPE ) ; if ( elementIndex == - 1 ) { return false ; } String substitutionGroupFullName = sGrammar . getElementDeclSubstitutionGroupElementFullName ( elementIndex ) ; if ( substitutionGroupFullName == null ) { return false ; } int commaAt = substitutionGroupFullName . indexOf ( "," ) ; uri = "" ; localpart = substitutionGroupFullName ; if ( commaAt >= 0 ) { if ( commaAt > 0 ) { uri = substitutionGroupFullName . substring ( 0 , commaAt ) ; } localpart = substitutionGroupFullName . substring ( commaAt + 1 ) ; } uriIndex = fStringPool . addSymbol ( uri ) ; localpartIndex = fStringPool . addSymbol ( localpart ) ; if ( uriIndex == exemplar . uri && localpartIndex == exemplar . localpart ) { return true ; } count -- ; } return false ; } } 	1	['3', '1', '0', '10', '13', '0', '5', '5', '2', '0.166666667', '167', '1', '2', '0', '0.5', '0', '0', '53.66666667', '1', '0.3333', '1']
package org . w3c . dom . html ; public interface HTMLLIElement extends HTMLElement { public String getType ( ) ; public void setType ( String type ) ; public int getValue ( ) ; public void setValue ( int value ) ; } 	0	['4', '1', '0', '0', '4', '6', '0', '0', '4', '2', '4', '0', '0', '0', '0.5', '0', '0', '0', '1', '1', '0']
package org . apache . xerces . dom ; import org . w3c . dom . * ; import org . w3c . dom . traversal . * ; public class TreeWalkerImpl implements TreeWalker { private boolean fEntityReferenceExpansion = false ; int fWhatToShow = NodeFilter . SHOW_ALL ; NodeFilter fNodeFilter ; Node fCurrentNode ; Node fRoot ; public TreeWalkerImpl ( Node root , int whatToShow , NodeFilter nodeFilter , boolean entityReferenceExpansion ) { fCurrentNode = root ; fRoot = root ; fWhatToShow = whatToShow ; fNodeFilter = nodeFilter ; fEntityReferenceExpansion = entityReferenceExpansion ; } public Node getRoot ( ) { return fRoot ; } public int getWhatToShow ( ) { return fWhatToShow ; } public NodeFilter getFilter ( ) { return fNodeFilter ; } public boolean getExpandEntityReferences ( ) { return fEntityReferenceExpansion ; } public Node getCurrentNode ( ) { return fCurrentNode ; } public void setCurrentNode ( Node node ) { fCurrentNode = node ; } public Node parentNode ( ) { if ( fCurrentNode == null ) return null ; Node node = getParentNode ( fCurrentNode ) ; if ( node != null ) { fCurrentNode = node ; } return node ; } public Node firstChild ( ) { if ( fCurrentNode == null ) return null ; Node node = getFirstChild ( fCurrentNode ) ; if ( node != null ) { fCurrentNode = node ; } return node ; } public Node lastChild ( ) { if ( fCurrentNode == null ) return null ; Node node = getLastChild ( fCurrentNode ) ; if ( node != null ) { fCurrentNode = node ; } return node ; } public Node previousSibling ( ) { if ( fCurrentNode == null ) return null ; Node node = getPreviousSibling ( fCurrentNode ) ; if ( node != null ) { fCurrentNode = node ; } return node ; } public Node nextSibling ( ) { if ( fCurrentNode == null ) return null ; Node node = getNextSibling ( fCurrentNode ) ; if ( node != null ) { fCurrentNode = node ; } return node ; } public Node previousNode ( ) { Node result ; if ( fCurrentNode == null ) return null ; result = getPreviousSibling ( fCurrentNode ) ; if ( result == null ) { result = getParentNode ( fCurrentNode ) ; if ( result != null ) { fCurrentNode = result ; return fCurrentNode ; } return null ; } Node lastChild = getLastChild ( result ) ; Node prev = lastChild ; while ( lastChild != null ) { prev = lastChild ; lastChild = getLastChild ( prev ) ; } lastChild = prev ; if ( lastChild != null ) { fCurrentNode = lastChild ; return fCurrentNode ; } if ( result != null ) { fCurrentNode = result ; return fCurrentNode ; } return null ; } public Node nextNode ( ) { if ( fCurrentNode == null ) return null ; Node result = getFirstChild ( fCurrentNode ) ; if ( result != null ) { fCurrentNode = result ; return result ; } result = getNextSibling ( fCurrentNode ) ; if ( result != null ) { fCurrentNode = result ; return result ; } Node parent = getParentNode ( fCurrentNode ) ; while ( parent != null ) { result = getNextSibling ( parent ) ; if ( result != null ) { fCurrentNode = result ; return result ; } else { parent = getParentNode ( parent ) ; } } return null ; } Node getParentNode ( Node node ) { if ( node == null || node == fRoot ) return null ; Node newNode = node . getParentNode ( ) ; if ( newNode == null ) return null ; int accept = acceptNode ( newNode ) ; if ( accept == NodeFilter . FILTER_ACCEPT ) return newNode ; else { return getParentNode ( newNode ) ; } } Node getNextSibling ( Node node ) { if ( node == null || node == fRoot ) return null ; Node newNode = node . getNextSibling ( ) ; if ( newNode == null ) { newNode = node . getParentNode ( ) ; if ( newNode == null || node == fRoot ) return null ; int parentAccept = acceptNode ( newNode ) ; if ( parentAccept == NodeFilter . FILTER_SKIP ) { return getNextSibling ( newNode ) ; } return null ; } int accept = acceptNode ( newNode ) ; if ( accept == NodeFilter . FILTER_ACCEPT ) return newNode ; else if ( accept == NodeFilter . FILTER_SKIP ) { Node fChild = getFirstChild ( newNode ) ; if ( fChild == null ) { return getNextSibling ( newNode ) ; } return fChild ; } else { return getNextSibling ( newNode ) ; } } Node getPreviousSibling ( Node node ) { if ( node == null || node == fRoot ) return null ; Node newNode = node . getPreviousSibling ( ) ; if ( newNode == null ) { newNode = node . getParentNode ( ) ; if ( newNode == null || node == fRoot ) return null ; int parentAccept = acceptNode ( newNode ) ; if ( parentAccept == NodeFilter . FILTER_SKIP ) { return getPreviousSibling ( newNode ) ; } return null ; } int accept = acceptNode ( newNode ) ; if ( accept == NodeFilter . FILTER_ACCEPT ) return newNode ; else if ( accept == NodeFilter . FILTER_SKIP ) { Node fChild = getLastChild ( newNode ) ; if ( fChild == null ) { return getPreviousSibling ( newNode ) ; } return fChild ; } else { return getPreviousSibling ( newNode ) ; } } Node getFirstChild ( Node node ) { if ( node == null ) return null ; if ( ! fEntityReferenceExpansion && node . getNodeType ( ) == Node . ENTITY_REFERENCE_NODE ) return null ; Node newNode = node . getFirstChild ( ) ; if ( newNode == null ) return null ; int accept = acceptNode ( newNode ) ; if ( accept == NodeFilter . FILTER_ACCEPT ) return newNode ; else if ( accept == NodeFilter . FILTER_SKIP && newNode . hasChildNodes ( ) ) { return getFirstChild ( newNode ) ; } else { return getNextSibling ( newNode ) ; } } Node getLastChild ( Node node ) { if ( node == null ) return null ; if ( ! fEntityReferenceExpansion && node . getNodeType ( ) == Node . ENTITY_REFERENCE_NODE ) return null ; Node newNode = node . getLastChild ( ) ; if ( newNode == null ) return null ; int accept = acceptNode ( newNode ) ; if ( accept == NodeFilter . FILTER_ACCEPT ) return newNode ; else if ( accept == NodeFilter . FILTER_SKIP && newNode . hasChildNodes ( ) ) { return getLastChild ( newNode ) ; } else { return getPreviousSibling ( newNode ) ; } } short acceptNode ( Node node ) { if ( fNodeFilter == null ) { if ( ( fWhatToShow & ( 1 << node . getNodeType ( ) - 1 ) ) != 0 ) { return NodeFilter . FILTER_ACCEPT ; } else { return NodeFilter . FILTER_SKIP ; } } else { if ( ( fWhatToShow & ( 1 << node . getNodeType ( ) - 1 ) ) != 0 ) { return fNodeFilter . acceptNode ( node ) ; } else { return NodeFilter . FILTER_SKIP ; } } } } 	1	['20', '1', '0', '1', '29', '58', '1', '0', '14', '0.547368421', '547', '0.2', '3', '0', '0.31', '0', '0', '26.1', '10', '3.95', '1']
package org . apache . xerces . validators . dtd ; import org . apache . xerces . dom . DocumentImpl ; import org . apache . xerces . framework . XMLContentSpec ; import org . apache . xerces . framework . XMLDTDScanner ; import org . apache . xerces . readers . XMLEntityHandler ; import org . apache . xerces . utils . QName ; import org . apache . xerces . utils . StringPool ; import org . apache . xerces . validators . common . Grammar ; import org . apache . xerces . validators . common . XMLAttributeDecl ; import org . apache . xerces . validators . common . XMLElementDecl ; import org . apache . xerces . validators . datatype . DatatypeValidatorFactoryImpl ; import org . apache . xerces . validators . schema . XUtil ; import org . w3c . dom . Document ; import org . w3c . dom . Element ; import org . w3c . dom . ProcessingInstruction ; import org . w3c . dom . Text ; public class DTDGrammar extends Grammar implements XMLDTDScanner . EventHandler { private static final int CHUNK_SHIFT = 8 ; private static final int CHUNK_SIZE = ( 1 << CHUNK_SHIFT ) ; private static final int CHUNK_MASK = CHUNK_SIZE - 1 ; private static final int INITIAL_CHUNK_COUNT = ( 1 << ( 10 - CHUNK_SHIFT ) ) ; private StringPool fStringPool ; private XMLElementDecl fElementDecl = new XMLElementDecl ( ) ; private XMLAttributeDecl fAttributeDecl = new XMLAttributeDecl ( ) ; private XMLContentSpec fContentSpec = new XMLContentSpec ( ) ; private Document fGrammarDocument ; private Element fRootElement ; private QName fRootElementQName = new QName ( ) ; private Element fCurrentElement ; private int fElementDeclIsExternal [ ] [ ] = new int [ INITIAL_CHUNK_COUNT ] [ ] ; private int fElementDeclMap [ ] [ ] = new int [ INITIAL_CHUNK_COUNT ] [ ] ; private int fAttributeDeclIsExternal [ ] [ ] = new int [ INITIAL_CHUNK_COUNT ] [ ] ; private int fAttributeDeclMap [ ] [ ] = new int [ INITIAL_CHUNK_COUNT ] [ ] ; private int fContentSpecMap [ ] [ ] = new int [ INITIAL_CHUNK_COUNT ] [ ] ; private QName fQName = new QName ( ) ; public DTDGrammar ( StringPool stringPool ) { reset ( stringPool ) ; } public void reset ( StringPool stringPool ) { fStringPool = stringPool ; } public void callStartDTD ( ) throws Exception { setGrammarDocument ( null ) ; fGrammarDocument = new DocumentImpl ( ) ; fRootElement = fGrammarDocument . createElement ( "dtd" ) ; fCurrentElement = fRootElement ; } public void callEndDTD ( ) throws Exception { setGrammarDocument ( fGrammarDocument ) ; } public void callTextDecl ( int version , int encoding ) throws Exception { Element textDecl = fGrammarDocument . createElement ( "textDecl" ) ; textDecl . setAttribute ( "version" , fStringPool . toString ( version ) ) ; textDecl . setAttribute ( "encoding" , fStringPool . toString ( encoding ) ) ; fCurrentElement . appendChild ( textDecl ) ; } public void doctypeDecl ( QName rootElement , int publicId , int systemId ) throws Exception { Element doctypeDecl = fGrammarDocument . createElement ( "doctypeDecl" ) ; doctypeDecl . setAttribute ( "name" , fStringPool . toString ( rootElement . rawname ) ) ; if ( rootElement . uri != - 1 ) { doctypeDecl . setAttribute ( "xmlns:" + fStringPool . toString ( rootElement . prefix ) , fStringPool . toString ( rootElement . uri ) ) ; } doctypeDecl . setAttribute ( "publicId" , fStringPool . toString ( publicId ) ) ; doctypeDecl . setAttribute ( "systemId" , fStringPool . toString ( systemId ) ) ; fCurrentElement . appendChild ( doctypeDecl ) ; fRootElementQName . setValues ( rootElement ) ; } public void startReadingFromExternalSubset ( int publicId , int systemId ) throws Exception { Element externalSubset = fGrammarDocument . createElement ( "external" ) ; externalSubset . setAttribute ( "publicId" , fStringPool . toString ( publicId ) ) ; externalSubset . setAttribute ( "systemId" , fStringPool . toString ( systemId ) ) ; fCurrentElement . appendChild ( externalSubset ) ; fCurrentElement = externalSubset ; } public void stopReadingFromExternalSubset ( ) throws Exception { fCurrentElement = ( Element ) fCurrentElement . getParentNode ( ) ; } public int addElementDecl ( QName elementDecl ) throws Exception { Element elementDeclElement = fGrammarDocument . createElement ( "elementDecl" ) ; elementDeclElement . setAttribute ( "name" , fStringPool . toString ( elementDecl . localpart ) ) ; if ( elementDecl . uri != - 1 ) { elementDeclElement . setAttribute ( "xmlns:" + fStringPool . toString ( elementDecl . prefix ) , fStringPool . toString ( elementDecl . uri ) ) ; } fCurrentElement . appendChild ( elementDeclElement ) ; int elementDeclIndex = createElementDecl ( ) ; fElementDecl . clear ( ) ; fElementDecl . name . setValues ( elementDecl ) ; setElementDecl ( elementDeclIndex , fElementDecl ) ; return elementDeclIndex ; } public int addElementDecl ( QName elementDecl , int contentSpecType , int contentSpec , boolean isExternal ) throws Exception { Element elementDeclElement = fGrammarDocument . createElement ( "elementDecl" ) ; elementDeclElement . setAttribute ( "name" , fStringPool . toString ( elementDecl . localpart ) ) ; if ( elementDecl . uri != - 1 ) { elementDeclElement . setAttribute ( "xmlns:" + fStringPool . toString ( elementDecl . prefix ) , fStringPool . toString ( elementDecl . uri ) ) ; } elementDeclElement . setAttribute ( "type" , fStringPool . toString ( contentSpecType ) ) ; fCurrentElement . appendChild ( elementDeclElement ) ; int elementDeclIndex = createElementDecl ( ) ; fElementDecl . clear ( ) ; fElementDecl . name . setValues ( elementDecl ) ; fElementDecl . type = contentSpecType ; fElementDecl . contentSpecIndex = contentSpec ; setElementDecl ( elementDeclIndex , fElementDecl ) ; int chunk = elementDeclIndex > > CHUNK_SHIFT ; int index = elementDeclIndex & CHUNK_MASK ; ensureElementDeclCapacity ( chunk ) ; fElementDeclIsExternal [ chunk ] [ index ] = isExternal ? 1 : 0 ; return elementDeclIndex ; } protected void putElementNameMapping ( QName name , int scope , int elementDeclIndex ) { fQName . uri = - 1 ; fQName . localpart = name . rawname ; super . putElementNameMapping ( fQName , scope , elementDeclIndex ) ; } public int getElementDeclIndex ( QName element , int scopeIndex ) { return super . getElementDeclIndex ( element . rawname , - 1 ) ; } public void setElementDeclDTD ( int elementDeclIndex , XMLElementDecl elementDecl ) { super . setElementDecl ( elementDeclIndex , elementDecl ) ; } private XMLContentSpec fTempContentSpec = new XMLContentSpec ( ) ; public void setElementDeclIsExternal ( int elementDeclIndex , boolean isExternal ) { int chunk = elementDeclIndex > > CHUNK_SHIFT ; int index = elementDeclIndex & CHUNK_MASK ; ensureElementDeclCapacity ( chunk ) ; fElementDeclIsExternal [ chunk ] [ index ] = isExternal ? 1 : 0 ; } public boolean getElementDeclIsExternal ( int elementDeclIndex ) { if ( elementDeclIndex < 0 ) { return false ; } int chunk = elementDeclIndex > > CHUNK_SHIFT ; int index = elementDeclIndex & CHUNK_MASK ; return ( fElementDeclIsExternal [ chunk ] [ index ] != 0 ) ; } public boolean getAttributeDeclIsExternal ( int attributeDeclIndex ) { if ( attributeDeclIndex < 0 ) { return false ; } int chunk = attributeDeclIndex > > CHUNK_SHIFT ; int index = attributeDeclIndex & CHUNK_MASK ; return ( fAttributeDeclIsExternal [ chunk ] [ index ] != 0 ) ; } public boolean getRootElementQName ( QName root ) { if ( fRootElementQName . rawname == - 1 ) { return false ; } root . setValues ( fRootElementQName ) ; return true ; } public int addAttDef ( QName elementDecl , QName attributeDecl , int attType , boolean attList , int enumeration , int attDefaultType , int attDefaultValue , boolean isExternal ) throws Exception { Element attributeDeclElement = fGrammarDocument . createElement ( "attributeDecl" ) ; attributeDeclElement . setAttribute ( "element" , fStringPool . toString ( elementDecl . localpart ) ) ; attributeDeclElement . setAttribute ( "name" , fStringPool . toString ( attributeDecl . localpart ) ) ; if ( attributeDecl . uri != - 1 ) { attributeDeclElement . setAttribute ( "xmlns:" + fStringPool . toString ( attributeDecl . prefix ) , fStringPool . toString ( attributeDecl . uri ) ) ; } attributeDeclElement . setAttribute ( "type" , fStringPool . toString ( attType ) ) ; attributeDeclElement . setAttribute ( "defaultType" , fStringPool . toString ( attDefaultType ) ) ; attributeDeclElement . setAttribute ( "defaultValue" , fStringPool . toString ( attDefaultValue ) ) ; fCurrentElement . appendChild ( attributeDeclElement ) ; int attributeDeclIndex = createAttributeDecl ( ) ; String attTypeString = "" ; switch ( attType ) { case XMLAttributeDecl . TYPE_CDATA : attTypeString = "string" ; case XMLAttributeDecl . TYPE_ENTITY : attTypeString = "ENTITY" ; ; case XMLAttributeDecl . TYPE_ENUMERATION : attTypeString = "ENUMERATION" ; ; case XMLAttributeDecl . TYPE_ID : attTypeString = "ID" ; ; case XMLAttributeDecl . TYPE_IDREF : attTypeString = "IDREF" ; ; case XMLAttributeDecl . TYPE_NMTOKEN : attTypeString = "NMTOKEN" ; ; case XMLAttributeDecl . TYPE_NOTATION : attTypeString = "NOTATION" ; ; default : ; } fAttributeDecl . clear ( ) ; fAttributeDecl . name . setValues ( attributeDecl ) ; fAttributeDecl . type = attType ; fAttributeDecl . list = attList ; fAttributeDecl . enumeration = enumeration ; fAttributeDecl . defaultType = attDefaultType ; fAttributeDecl . defaultValue = fStringPool . toString ( attDefaultValue ) ; int elementDeclIndex = getElementDeclIndex ( elementDecl , - 1 ) ; setAttributeDecl ( elementDeclIndex , attributeDeclIndex , fAttributeDecl ) ; int chunk = attributeDeclIndex > > CHUNK_SHIFT ; int index = attributeDeclIndex & CHUNK_MASK ; ensureAttributeDeclCapacity ( chunk ) ; fAttributeDeclIsExternal [ chunk ] [ index ] = isExternal ? 1 : 0 ; return attributeDeclIndex ; } public int addUniqueLeafNode ( int nameIndex ) throws Exception { int contentSpecIndex = createContentSpec ( ) ; fContentSpec . setValues ( XMLContentSpec . CONTENTSPECNODE_LEAF , nameIndex , - 1 ) ; setContentSpec ( contentSpecIndex , fContentSpec ) ; return contentSpecIndex ; } public int addContentSpecNode ( int nodeType , int nodeValue ) throws Exception { int contentSpecIndex = createContentSpec ( ) ; fContentSpec . setValues ( nodeType , nodeValue , - 1 ) ; setContentSpec ( contentSpecIndex , fContentSpec ) ; return contentSpecIndex ; } public int addContentSpecNode ( int nodeType , int leftNodeIndex , int rightNodeIndex ) throws Exception { int contentSpecIndex = createContentSpec ( ) ; fContentSpec . setValues ( nodeType , leftNodeIndex , rightNodeIndex ) ; setContentSpec ( contentSpecIndex , fContentSpec ) ; return contentSpecIndex ; } public String getContentSpecNodeAsString ( int nodeIndex ) throws Exception { return XMLContentSpec . toString ( this , fStringPool , nodeIndex ) ; } public boolean startEntityDecl ( boolean isPE , int entityName ) throws Exception { Element entityDecl = fGrammarDocument . createElement ( "entityDecl" ) ; entityDecl . setAttribute ( "name" , fStringPool . toString ( entityName ) ) ; entityDecl . setAttribute ( "parameter" , isPE ? "true" : "false" ) ; fCurrentElement . appendChild ( entityDecl ) ; fCurrentElement = entityDecl ; return true ; } public void endEntityDecl ( ) throws Exception { fCurrentElement = ( Element ) fCurrentElement . getParentNode ( ) ; } public int addInternalPEDecl ( int name , int value ) throws Exception { Element internalPEDecl = fGrammarDocument . createElement ( "internalPEDecl" ) ; internalPEDecl . setAttribute ( "name" , fStringPool . toString ( name ) ) ; internalPEDecl . setAttribute ( "value" , fStringPool . toString ( value ) ) ; fCurrentElement . appendChild ( internalPEDecl ) ; int peDeclIndex = - 1 ; return peDeclIndex ; } public int addExternalPEDecl ( int name , int publicId , int systemId ) throws Exception { Element externalPEDecl = fGrammarDocument . createElement ( "externalPEDecl" ) ; externalPEDecl . setAttribute ( "name" , fStringPool . toString ( name ) ) ; externalPEDecl . setAttribute ( "publicId" , fStringPool . toString ( publicId ) ) ; externalPEDecl . setAttribute ( "systemId" , fStringPool . toString ( systemId ) ) ; fCurrentElement . appendChild ( externalPEDecl ) ; int peDeclIndex = - 1 ; return peDeclIndex ; } public int addInternalEntityDecl ( int name , int value ) throws Exception { Element internalEntityDecl = fGrammarDocument . createElement ( "internalEntityDecl" ) ; internalEntityDecl . setAttribute ( "name" , fStringPool . toString ( name ) ) ; internalEntityDecl . setAttribute ( "value" , fStringPool . toString ( value ) ) ; fCurrentElement . appendChild ( internalEntityDecl ) ; int internalEntityDeclIndex = - 1 ; return internalEntityDeclIndex ; } public int addExternalEntityDecl ( int name , int publicId , int systemId ) throws Exception { Element externalEntityDecl = fGrammarDocument . createElement ( "externalEntityDecl" ) ; externalEntityDecl . setAttribute ( "name" , fStringPool . toString ( name ) ) ; externalEntityDecl . setAttribute ( "publicId" , fStringPool . toString ( publicId ) ) ; externalEntityDecl . setAttribute ( "systemId" , fStringPool . toString ( systemId ) ) ; fCurrentElement . appendChild ( externalEntityDecl ) ; int externalEntityDeclIndex = - 1 ; return externalEntityDeclIndex ; } public int addUnparsedEntityDecl ( int name , int publicId , int systemId , int notationName ) throws Exception { Element unparsedEntityDecl = fGrammarDocument . createElement ( "unparsedEntityDecl" ) ; unparsedEntityDecl . setAttribute ( "name" , fStringPool . toString ( name ) ) ; unparsedEntityDecl . setAttribute ( "publicId" , fStringPool . toString ( publicId ) ) ; unparsedEntityDecl . setAttribute ( "systemId" , fStringPool . toString ( systemId ) ) ; unparsedEntityDecl . setAttribute ( "notation" , fStringPool . toString ( notationName ) ) ; fCurrentElement . appendChild ( unparsedEntityDecl ) ; int unparsedEntityDeclIndex = - 1 ; return unparsedEntityDeclIndex ; } public int startEnumeration ( ) throws Exception { Element enumeration = fGrammarDocument . createElement ( "enumeration" ) ; fCurrentElement . appendChild ( enumeration ) ; fCurrentElement = enumeration ; int enumIndex = fStringPool . startStringList ( ) ; return enumIndex ; } public void addNameToEnumeration ( int enumIndex , int elementType , int attrName , int nameIndex , boolean isNotationType ) throws Exception { Element literal = fGrammarDocument . createElement ( "literal" ) ; literal . setAttribute ( "element" , fStringPool . toString ( elementType ) ) ; literal . setAttribute ( "attribute" , fStringPool . toString ( attrName ) ) ; literal . setAttribute ( "name" , fStringPool . toString ( nameIndex ) ) ; literal . setAttribute ( "notation" , isNotationType ? "true" : "false" ) ; fCurrentElement . appendChild ( literal ) ; fStringPool . addStringToList ( enumIndex , nameIndex ) ; } public void endEnumeration ( int enumIndex ) throws Exception { fCurrentElement = ( Element ) fCurrentElement . getParentNode ( ) ; fStringPool . finishStringList ( enumIndex ) ; } public int addNotationDecl ( int notationName , int publicId , int systemId ) throws Exception { Element notationDecl = fGrammarDocument . createElement ( "notationDecl" ) ; notationDecl . setAttribute ( "name" , fStringPool . toString ( notationName ) ) ; notationDecl . setAttribute ( "publicId" , fStringPool . toString ( publicId ) ) ; notationDecl . setAttribute ( "systemId" , fStringPool . toString ( systemId ) ) ; fCurrentElement . appendChild ( notationDecl ) ; int notationDeclIndex = - 1 ; return notationDeclIndex ; } public void callComment ( int data ) throws Exception { } public void callProcessingInstruction ( int piTarget , int piData ) throws Exception { ProcessingInstruction pi = fGrammarDocument . createProcessingInstruction ( fStringPool . toString ( piTarget ) , fStringPool . toString ( piData ) ) ; fCurrentElement . appendChild ( pi ) ; } public void internalSubset ( int internalSubset ) throws Exception { } protected boolean isDTD ( ) { return true ; } private boolean ensureElementDeclCapacity ( int chunk ) { try { return fElementDeclMap [ chunk ] [ 0 ] == 0 ; } catch ( ArrayIndexOutOfBoundsException ex ) { fElementDeclMap = resize ( fElementDeclMap , fElementDeclMap . length * 2 ) ; fElementDeclIsExternal = resize ( fElementDeclIsExternal , fElementDeclIsExternal . length * 2 ) ; } catch ( NullPointerException ex ) { } fElementDeclMap [ chunk ] = new int [ CHUNK_SIZE ] ; fElementDeclIsExternal [ chunk ] = new int [ CHUNK_SIZE ] ; return true ; } private boolean ensureAttributeDeclCapacity ( int chunk ) { try { return fAttributeDeclMap [ chunk ] [ 0 ] == 0 ; } catch ( ArrayIndexOutOfBoundsException ex ) { fAttributeDeclMap = resize ( fAttributeDeclMap , fAttributeDeclMap . length * 2 ) ; fAttributeDeclIsExternal = resize ( fAttributeDeclIsExternal , fAttributeDeclIsExternal . length * 2 ) ; } catch ( NullPointerException ex ) { } fAttributeDeclMap [ chunk ] = new int [ CHUNK_SIZE ] ; fAttributeDeclIsExternal [ chunk ] = new int [ CHUNK_SIZE ] ; return true ; } private boolean ensureContentSpecCapacity ( int chunk ) { try { return fContentSpecMap [ chunk ] [ 0 ] == 0 ; } catch ( ArrayIndexOutOfBoundsException ex ) { fContentSpecMap = resize ( fContentSpecMap , fContentSpecMap . length * 2 ) ; } catch ( NullPointerException ex ) { } fContentSpecMap [ chunk ] = new int [ CHUNK_SIZE ] ; return true ; } private int [ ] [ ] resize ( int array [ ] [ ] , int newsize ) { int newarray [ ] [ ] = new int [ newsize ] [ ] ; System . arraycopy ( array , 0 , newarray , 0 , array . length ) ; return newarray ; } } 	0	['41', '2', '0', '11', '75', '280', '2', '9', '35', '0.903947368', '1225', '1', '10', '0.487179487', '0.306620209', '1', '7', '28.41463415', '3', '1.1951', '0']
package org . apache . xerces . dom ; import org . w3c . dom . * ; public class EntityReferenceImpl extends ParentNode implements EntityReference { static final long serialVersionUID = - 7381452955687102062L ; protected String name ; public EntityReferenceImpl ( DocumentImpl ownerDoc , String name ) { super ( ownerDoc ) ; this . name = name ; isReadOnly ( true ) ; } public short getNodeType ( ) { return Node . ENTITY_REFERENCE_NODE ; } public String getNodeName ( ) { if ( needsSyncData ( ) ) { synchronizeData ( ) ; } return name ; } public NodeList getChildNodes ( ) { synchronize ( ) ; return super . getChildNodes ( ) ; } public Node getFirstChild ( ) { synchronize ( ) ; return super . getFirstChild ( ) ; } public Node getLastChild ( ) { synchronize ( ) ; return super . getLastChild ( ) ; } public int getLength ( ) { synchronize ( ) ; return super . getLength ( ) ; } public boolean hasChildNodes ( ) { synchronize ( ) ; return super . hasChildNodes ( ) ; } public Node item ( int index ) { synchronize ( ) ; return super . item ( index ) ; } protected void synchronize ( ) { if ( firstChild != null ) { return ; } DocumentType doctype ; NamedNodeMap entities ; EntityImpl entDef ; if ( null != ( doctype = getOwnerDocument ( ) . getDoctype ( ) ) && null != ( entities = doctype . getEntities ( ) ) ) { entDef = ( EntityImpl ) entities . getNamedItem ( getNodeName ( ) ) ; if ( entDef == null ) return ; isReadOnly ( false ) ; for ( Node defkid = entDef . getFirstChild ( ) ; defkid != null ; defkid = defkid . getNextSibling ( ) ) { Node newkid = defkid . cloneNode ( true ) ; insertBefore ( newkid , null ) ; } setReadOnly ( true , true ) ; } } } 	1	['10', '4', '1', '6', '29', '43', '3', '4', '9', '0.944444444', '115', '0.5', '0', '0.897727273', '0.325', '2', '8', '10.3', '6', '1.5', '1']
package javax . xml . parsers ; import java . io . File ; import java . io . InputStream ; import java . io . IOException ; import java . io . FileInputStream ; import java . util . Locale ; import java . util . Properties ; import java . io . BufferedReader ; import java . io . InputStreamReader ; import org . xml . sax . Parser ; import org . xml . sax . XMLReader ; import org . xml . sax . HandlerBase ; import org . xml . sax . helpers . DefaultHandler ; import org . xml . sax . InputSource ; import org . xml . sax . SAXException ; import org . xml . sax . SAXNotRecognizedException ; import org . xml . sax . SAXNotSupportedException ; public abstract class SAXParser { protected SAXParser ( ) { } public void parse ( InputStream is , HandlerBase hb ) throws SAXException , IOException { if ( is == null ) { throw new IllegalArgumentException ( "InputStream cannot be null" ) ; } InputSource input = new InputSource ( is ) ; this . parse ( input , hb ) ; } public void parse ( InputStream is , HandlerBase hb , String systemId ) throws SAXException , IOException { if ( is == null ) { throw new IllegalArgumentException ( "InputStream cannot be null" ) ; } InputSource input = new InputSource ( is ) ; input . setSystemId ( systemId ) ; this . parse ( input , hb ) ; } public void parse ( InputStream is , DefaultHandler dh ) throws SAXException , IOException { if ( is == null ) { throw new IllegalArgumentException ( "InputStream cannot be null" ) ; } InputSource input = new InputSource ( is ) ; this . parse ( input , dh ) ; } public void parse ( InputStream is , DefaultHandler dh , String systemId ) throws SAXException , IOException { if ( is == null ) { throw new IllegalArgumentException ( "InputStream cannot be null" ) ; } InputSource input = new InputSource ( is ) ; input . setSystemId ( systemId ) ; this . parse ( input , dh ) ; } public void parse ( String uri , HandlerBase hb ) throws SAXException , IOException { if ( uri == null ) { throw new IllegalArgumentException ( "uri cannot be null" ) ; } InputSource input = new InputSource ( uri ) ; this . parse ( input , hb ) ; } public void parse ( String uri , DefaultHandler dh ) throws SAXException , IOException { if ( uri == null ) { throw new IllegalArgumentException ( "uri cannot be null" ) ; } InputSource input = new InputSource ( uri ) ; this . parse ( input , dh ) ; } public void parse ( File f , HandlerBase hb ) throws SAXException , IOException { if ( f == null ) { throw new IllegalArgumentException ( "File cannot be null" ) ; } String uri = "file:" + f . getAbsolutePath ( ) ; if ( File . separatorChar == '\\' ) { uri = uri . replace ( '\\' , '/' ) ; } InputSource input = new InputSource ( uri ) ; this . parse ( input , hb ) ; } public void parse ( File f , DefaultHandler dh ) throws SAXException , IOException { if ( f == null ) { throw new IllegalArgumentException ( "File cannot be null" ) ; } String uri = "file:" + f . getAbsolutePath ( ) ; if ( File . separatorChar == '\\' ) { uri = uri . replace ( '\\' , '/' ) ; } InputSource input = new InputSource ( uri ) ; this . parse ( input , dh ) ; } public void parse ( InputSource is , HandlerBase hb ) throws SAXException , IOException { if ( is == null ) { throw new IllegalArgumentException ( "InputSource cannot be null" ) ; } Parser parser = this . getParser ( ) ; if ( hb != null ) { parser . setDocumentHandler ( hb ) ; parser . setEntityResolver ( hb ) ; parser . setErrorHandler ( hb ) ; parser . setDTDHandler ( hb ) ; } parser . parse ( is ) ; } public void parse ( InputSource is , DefaultHandler dh ) throws SAXException , IOException { if ( is == null ) { throw new IllegalArgumentException ( "InputSource cannot be null" ) ; } XMLReader reader = this . getXMLReader ( ) ; if ( dh != null ) { reader . setContentHandler ( dh ) ; reader . setEntityResolver ( dh ) ; reader . setErrorHandler ( dh ) ; reader . setDTDHandler ( dh ) ; } reader . parse ( is ) ; } public abstract org . xml . sax . Parser getParser ( ) throws SAXException ; public abstract org . xml . sax . XMLReader getXMLReader ( ) throws SAXException ; public abstract boolean isNamespaceAware ( ) ; public abstract boolean isValidating ( ) ; public abstract void setProperty ( String name , Object value ) throws SAXNotRecognizedException , SAXNotSupportedException ; public abstract Object getProperty ( String name ) throws SAXNotRecognizedException , SAXNotSupportedException ; } 	0	['17', '1', '1', '0', '37', '136', '0', '0', '16', '2', '254', '0', '0', '0', '0.308823529', '0', '0', '13.94117647', '1', '0.9412', '0']
package org . apache . xerces . dom ; import java . io . * ; import java . util . Enumeration ; import java . util . Vector ; import org . w3c . dom . * ; public class ElementImpl extends ParentNode implements Element { static final long serialVersionUID = 3717253516652722278L ; protected String name ; protected AttributeMap attributes ; public ElementImpl ( DocumentImpl ownerDoc , String name ) { super ( ownerDoc ) ; this . name = name ; needsSyncData ( true ) ; } protected ElementImpl ( ) { } public short getNodeType ( ) { return Node . ELEMENT_NODE ; } public String getNodeName ( ) { if ( needsSyncData ( ) ) { synchronizeData ( ) ; } return name ; } public NamedNodeMap getAttributes ( ) { if ( needsSyncData ( ) ) { synchronizeData ( ) ; } if ( attributes == null ) { attributes = new AttributeMap ( this , null ) ; } return attributes ; } public Node cloneNode ( boolean deep ) { if ( needsSyncData ( ) ) { synchronizeData ( ) ; } ElementImpl newnode = ( ElementImpl ) super . cloneNode ( deep ) ; if ( attributes != null ) { newnode . attributes = ( AttributeMap ) attributes . cloneMap ( newnode ) ; } return newnode ; } void setOwnerDocument ( DocumentImpl doc ) { super . setOwnerDocument ( doc ) ; if ( attributes != null ) { attributes . setOwnerDocument ( doc ) ; } } public String getAttribute ( String name ) { if ( needsSyncData ( ) ) { synchronizeData ( ) ; } if ( attributes == null ) { return "" ; } Attr attr = ( Attr ) ( attributes . getNamedItem ( name ) ) ; return ( attr == null ) ? "" : attr . getValue ( ) ; } public Attr getAttributeNode ( String name ) { if ( needsSyncData ( ) ) { synchronizeData ( ) ; } if ( attributes == null ) { return null ; } return ( Attr ) attributes . getNamedItem ( name ) ; } public NodeList getElementsByTagName ( String tagname ) { return new DeepNodeListImpl ( this , tagname ) ; } public String getTagName ( ) { if ( needsSyncData ( ) ) { synchronizeData ( ) ; } return name ; } public void normalize ( ) { if ( isNormalized ( ) ) { return ; } if ( needsSyncChildren ( ) ) { synchronizeChildren ( ) ; } ChildNode kid , next ; for ( kid = firstChild ; kid != null ; kid = next ) { next = kid . nextSibling ; if ( kid . getNodeType ( ) == Node . TEXT_NODE ) { if ( next != null && next . getNodeType ( ) == Node . TEXT_NODE ) { ( ( Text ) kid ) . appendData ( next . getNodeValue ( ) ) ; removeChild ( next ) ; next = kid ; } else { if ( kid . getNodeValue ( ) . length ( ) == 0 ) removeChild ( kid ) ; } } else if ( kid . getNodeType ( ) == Node . ELEMENT_NODE ) { kid . normalize ( ) ; } } if ( attributes != null ) { for ( int i = 0 ; i < attributes . getLength ( ) ; ++ i ) { Node attr = attributes . item ( i ) ; attr . normalize ( ) ; } } isNormalized ( true ) ; } public void removeAttribute ( String name ) { if ( ownerDocument . errorChecking && isReadOnly ( ) ) { throw new DOMException ( DOMException . NO_MODIFICATION_ALLOWED_ERR , "DOM001 Modification not allowed" ) ; } if ( needsSyncData ( ) ) { synchronizeData ( ) ; } if ( attributes == null ) { return ; } attributes . safeRemoveNamedItem ( name ) ; } public Attr removeAttributeNode ( Attr oldAttr ) throws DOMException { if ( ownerDocument . errorChecking && isReadOnly ( ) ) { throw new DOMException ( DOMException . NO_MODIFICATION_ALLOWED_ERR , "DOM001 Modification not allowed" ) ; } if ( needsSyncData ( ) ) { synchronizeData ( ) ; } if ( attributes == null ) { throw new DOMException ( DOMException . NOT_FOUND_ERR , "DOM008 Not found" ) ; } return ( Attr ) attributes . removeNamedItem ( oldAttr . getName ( ) ) ; } public void setAttribute ( String name , String value ) { if ( ownerDocument . errorChecking && isReadOnly ( ) ) { throw new DOMException ( DOMException . NO_MODIFICATION_ALLOWED_ERR , "DOM001 Modification not allowed" ) ; } if ( needsSyncData ( ) ) { synchronizeData ( ) ; } Attr newAttr = getAttributeNode ( name ) ; if ( newAttr == null ) { newAttr = getOwnerDocument ( ) . createAttribute ( name ) ; if ( attributes == null ) { attributes = new AttributeMap ( this , null ) ; } newAttr . setNodeValue ( value ) ; attributes . setNamedItem ( newAttr ) ; } else { newAttr . setNodeValue ( value ) ; } } public Attr setAttributeNode ( Attr newAttr ) throws DOMException { if ( needsSyncData ( ) ) { synchronizeData ( ) ; } if ( ownerDocument . errorChecking ) { if ( isReadOnly ( ) ) { throw new DOMException ( DOMException . NO_MODIFICATION_ALLOWED_ERR , "DOM001 Modification not allowed" ) ; } if ( newAttr . getOwnerDocument ( ) != ownerDocument ) { throw new DOMException ( DOMException . WRONG_DOCUMENT_ERR , "DOM005 Wrong document" ) ; } } if ( attributes == null ) { attributes = new AttributeMap ( this , null ) ; } return ( Attr ) attributes . setNamedItem ( newAttr ) ; } public String getAttributeNS ( String namespaceURI , String localName ) { if ( needsSyncData ( ) ) { synchronizeData ( ) ; } if ( attributes == null ) { return "" ; } Attr attr = ( Attr ) ( attributes . getNamedItemNS ( namespaceURI , localName ) ) ; return ( attr == null ) ? "" : attr . getValue ( ) ; } public void setAttributeNS ( String namespaceURI , String localName , String value ) { if ( ownerDocument . errorChecking && isReadOnly ( ) ) { throw new DOMException ( DOMException . NO_MODIFICATION_ALLOWED_ERR , "DOM001 Modification not allowed" ) ; } if ( needsSyncData ( ) ) { synchronizeData ( ) ; } Attr newAttr = getAttributeNodeNS ( namespaceURI , localName ) ; if ( newAttr == null ) { newAttr = getOwnerDocument ( ) . createAttributeNS ( namespaceURI , localName ) ; if ( attributes == null ) { attributes = new AttributeMap ( this , null ) ; } newAttr . setNodeValue ( value ) ; attributes . setNamedItemNS ( newAttr ) ; } else { newAttr . setNodeValue ( value ) ; } } public void removeAttributeNS ( String namespaceURI , String localName ) { if ( ownerDocument . errorChecking && isReadOnly ( ) ) { throw new DOMException ( DOMException . NO_MODIFICATION_ALLOWED_ERR , "DOM001 Modification not allowed" ) ; } if ( needsSyncData ( ) ) { synchronizeData ( ) ; } if ( attributes == null ) { return ; } attributes . safeRemoveNamedItemNS ( namespaceURI , localName ) ; } public Attr getAttributeNodeNS ( String namespaceURI , String localName ) { if ( needsSyncData ( ) ) { synchronizeData ( ) ; } if ( attributes == null ) { return null ; } return ( Attr ) attributes . getNamedItemNS ( namespaceURI , localName ) ; } public Attr setAttributeNodeNS ( Attr newAttr ) throws DOMException { if ( needsSyncData ( ) ) { synchronizeData ( ) ; } if ( ownerDocument . errorChecking ) { if ( isReadOnly ( ) ) { throw new DOMException ( DOMException . NO_MODIFICATION_ALLOWED_ERR , "DOM001 Modification not allowed" ) ; } if ( newAttr . getOwnerDocument ( ) != ownerDocument ) { throw new DOMException ( DOMException . WRONG_DOCUMENT_ERR , "DOM005 Wrong document" ) ; } } if ( attributes == null ) { attributes = new AttributeMap ( this , null ) ; } return ( Attr ) attributes . setNamedItemNS ( newAttr ) ; } public boolean hasAttributes ( ) { if ( needsSyncData ( ) ) { synchronizeData ( ) ; } return ( attributes != null && attributes . getLength ( ) != 0 ) ; } public boolean hasAttribute ( String name ) { return getAttributeNode ( name ) != null ; } public boolean hasAttributeNS ( String namespaceURI , String localName ) { return getAttributeNodeNS ( namespaceURI , localName ) != null ; } public NodeList getElementsByTagNameNS ( String namespaceURI , String localName ) { return new DeepNodeListImpl ( this , namespaceURI , localName ) ; } public void setReadOnly ( boolean readOnly , boolean deep ) { super . setReadOnly ( readOnly , deep ) ; if ( attributes != null ) { attributes . setReadOnly ( readOnly , true ) ; } } protected void synchronizeData ( ) { needsSyncData ( false ) ; setupDefaultAttributes ( ) ; } protected void setupDefaultAttributes ( ) { NamedNodeMapImpl defaults = getDefaultAttributes ( ) ; if ( defaults != null ) { attributes = new AttributeMap ( this , defaults ) ; } } protected NamedNodeMapImpl getDefaultAttributes ( ) { DocumentTypeImpl doctype = ( DocumentTypeImpl ) ownerDocument . getDoctype ( ) ; if ( doctype == null ) { return null ; } ElementDefinitionImpl eldef = ( ElementDefinitionImpl ) doctype . getElements ( ) . getNamedItem ( getNodeName ( ) ) ; if ( eldef == null ) { return null ; } return ( NamedNodeMapImpl ) eldef . getAttributes ( ) ; } } 	1	['29', '4', '4', '17', '75', '80', '12', '9', '24', '0.738095238', '665', '0.666666667', '1', '0.745283019', '0.337931034', '2', '13', '21.82758621', '11', '2.7931', '1']
package org . apache . wml ; public interface WMLOneventElement extends WMLElement { public void setType ( String newValue ) ; public String getType ( ) ; } 	0	['2', '1', '0', '2', '2', '1', '1', '1', '2', '2', '2', '0', '0', '0', '0.75', '0', '0', '0', '1', '1', '0']
package org . apache . xerces . validators . schema ; import org . apache . xerces . framework . XMLContentSpec ; import org . apache . xerces . utils . NamespacesScope ; import org . apache . xerces . utils . QName ; import org . apache . xerces . framework . XMLContentSpec ; import org . apache . xerces . validators . datatype . DatatypeValidator ; import org . apache . xerces . validators . datatype . DatatypeValidatorFactoryImpl ; import org . apache . xerces . validators . common . XMLAttributeDecl ; import org . apache . xerces . validators . common . XMLContentModel ; import org . apache . xerces . validators . common . XMLElementDecl ; import org . apache . xerces . validators . common . Grammar ; import org . w3c . dom . Document ; import org . w3c . dom . Element ; import java . util . Hashtable ; public class SchemaGrammar extends Grammar { private static final int CHUNK_SHIFT = 8 ; private static final int CHUNK_SIZE = ( 1 << CHUNK_SHIFT ) ; private static final int CHUNK_MASK = CHUNK_SIZE - 1 ; private static final int INITIAL_CHUNK_COUNT = ( 1 << ( 10 - CHUNK_SHIFT ) ) ; private XMLContentSpec fTempContentSpecNode = new XMLContentSpec ( ) ; private XMLElementDecl fTempElementDecl = new XMLElementDecl ( ) ; private XMLAttributeDecl fTempAttributeDecl = new XMLAttributeDecl ( ) ; private int fScopeDefinedByElement [ ] [ ] = new int [ INITIAL_CHUNK_COUNT ] [ ] ; private String fFromAnotherSchemaURI [ ] [ ] = new String [ INITIAL_CHUNK_COUNT ] [ ] ; private TraverseSchema . ComplexTypeInfo fComplexTypeInfo [ ] [ ] = new TraverseSchema . ComplexTypeInfo [ INITIAL_CHUNK_COUNT ] [ ] ; private int fElementDeclDefaultType [ ] [ ] = new int [ INITIAL_CHUNK_COUNT ] [ ] ; private String fElementDeclDefaultValue [ ] [ ] = new String [ INITIAL_CHUNK_COUNT ] [ ] ; private String fElementDeclSubstitutionGroupFullName [ ] [ ] = new String [ INITIAL_CHUNK_COUNT ] [ ] ; private int fElementDeclBlockSet [ ] [ ] = new int [ INITIAL_CHUNK_COUNT ] [ ] ; private int fElementDeclFinalSet [ ] [ ] = new int [ INITIAL_CHUNK_COUNT ] [ ] ; private int fElementDeclMiscFlags [ ] [ ] = new int [ INITIAL_CHUNK_COUNT ] [ ] ; private Hashtable fComplexTypeRegistry = null ; private Hashtable fAttributeDeclRegistry = null ; private DatatypeValidatorFactoryImpl fDatatypeRegistry = null ; Hashtable topLevelGroupDecls = new Hashtable ( ) ; Hashtable topLevelAttrDecls = new Hashtable ( ) ; Hashtable topLevelAttrGrpDecls = new Hashtable ( ) ; private NamespacesScope fNamespacesScope = null ; private String fTargetNamespaceURI = "" ; public NamespacesScope getNamespacesScope ( ) { return fNamespacesScope ; } public String getTargetNamespaceURI ( ) { return fTargetNamespaceURI ; } public Hashtable getAttirubteDeclRegistry ( ) { return fAttributeDeclRegistry ; } public Hashtable getComplexTypeRegistry ( ) { return fComplexTypeRegistry ; } public DatatypeValidatorFactoryImpl getDatatypeRegistry ( ) { return fDatatypeRegistry ; } public int getElementDefinedScope ( int elementDeclIndex ) { if ( elementDeclIndex < - 1 ) { return - 1 ; } int chunk = elementDeclIndex > > CHUNK_SHIFT ; int index = elementDeclIndex & CHUNK_MASK ; return fScopeDefinedByElement [ chunk ] [ index ] ; } public int getElementDefaultTYpe ( int elementDeclIndex ) { if ( elementDeclIndex < - 1 ) { return - 1 ; } int chunk = elementDeclIndex > > CHUNK_SHIFT ; int index = elementDeclIndex & CHUNK_MASK ; return fElementDeclDefaultType [ chunk ] [ index ] ; } public int getElementDeclBlockSet ( int elementDeclIndex ) { if ( elementDeclIndex < - 1 ) { return - 1 ; } int chunk = elementDeclIndex > > CHUNK_SHIFT ; int index = elementDeclIndex & CHUNK_MASK ; return fElementDeclBlockSet [ chunk ] [ index ] ; } public int getElementDeclFinalSet ( int elementDeclIndex ) { if ( elementDeclIndex < - 1 ) { return - 1 ; } int chunk = elementDeclIndex > > CHUNK_SHIFT ; int index = elementDeclIndex & CHUNK_MASK ; return fElementDeclFinalSet [ chunk ] [ index ] ; } public int getElementDeclMiscFlags ( int elementDeclIndex ) { if ( elementDeclIndex < - 1 ) { return - 1 ; } int chunk = elementDeclIndex > > CHUNK_SHIFT ; int index = elementDeclIndex & CHUNK_MASK ; return fElementDeclMiscFlags [ chunk ] [ index ] ; } public String getElementFromAnotherSchemaURI ( int elementDeclIndex ) { if ( elementDeclIndex < 0 ) { return null ; } int chunk = elementDeclIndex > > CHUNK_SHIFT ; int index = elementDeclIndex & CHUNK_MASK ; return fFromAnotherSchemaURI [ chunk ] [ index ] ; } public String getElementDefaultValue ( int elementDeclIndex ) { if ( elementDeclIndex < 0 ) { return null ; } int chunk = elementDeclIndex > > CHUNK_SHIFT ; int index = elementDeclIndex & CHUNK_MASK ; return fElementDeclDefaultValue [ chunk ] [ index ] ; } public String getElementDeclSubstitutionGroupElementFullName ( int elementDeclIndex ) { if ( elementDeclIndex < 0 ) { return null ; } int chunk = elementDeclIndex > > CHUNK_SHIFT ; int index = elementDeclIndex & CHUNK_MASK ; return fElementDeclSubstitutionGroupFullName [ chunk ] [ index ] ; } public TraverseSchema . ComplexTypeInfo getElementComplexTypeInfo ( int elementDeclIndex ) { if ( elementDeclIndex < - 1 ) { return null ; } int chunk = elementDeclIndex > > CHUNK_SHIFT ; int index = elementDeclIndex & CHUNK_MASK ; return fComplexTypeInfo [ chunk ] [ index ] ; } protected void setAttributeDeclRegistry ( Hashtable attrReg ) { fAttributeDeclRegistry = attrReg ; } protected void setComplexTypeRegistry ( Hashtable cTypeReg ) { fComplexTypeRegistry = cTypeReg ; } protected void setDatatypeRegistry ( DatatypeValidatorFactoryImpl dTypeReg ) { fDatatypeRegistry = dTypeReg ; } protected void setNamespacesScope ( NamespacesScope nsScope ) { fNamespacesScope = nsScope ; } protected void setTargetNamespaceURI ( String targetNSUri ) { fTargetNamespaceURI = targetNSUri ; } protected int createElementDecl ( ) { return super . createElementDecl ( ) ; } protected void setElementDecl ( int elementDeclIndex , XMLElementDecl elementDecl ) { super . setElementDecl ( elementDeclIndex , elementDecl ) ; } protected int createContentSpec ( ) { return super . createContentSpec ( ) ; } protected void setContentSpec ( int contentSpecIndex , XMLContentSpec contentSpec ) { super . setContentSpec ( contentSpecIndex , contentSpec ) ; } protected int createAttributeDecl ( ) { return super . createAttributeDecl ( ) ; } protected void setAttributeDecl ( int elementDeclIndex , int attributeDeclIndex , XMLAttributeDecl attributeDecl ) { super . setAttributeDecl ( elementDeclIndex , attributeDeclIndex , attributeDecl ) ; } protected void setElementDefinedScope ( int elementDeclIndex , int scopeDefined ) { int chunk = elementDeclIndex > > CHUNK_SHIFT ; int index = elementDeclIndex & CHUNK_MASK ; ensureElementDeclCapacity ( chunk ) ; if ( elementDeclIndex > - 1 ) { fScopeDefinedByElement [ chunk ] [ index ] = scopeDefined ; } } protected void setElementFromAnotherSchemaURI ( int elementDeclIndex , String anotherSchemaURI ) { int chunk = elementDeclIndex > > CHUNK_SHIFT ; int index = elementDeclIndex & CHUNK_MASK ; ensureElementDeclCapacity ( chunk ) ; if ( elementDeclIndex > - 1 ) { fFromAnotherSchemaURI [ chunk ] [ index ] = anotherSchemaURI ; } } protected void setElementComplexTypeInfo ( int elementDeclIndex , TraverseSchema . ComplexTypeInfo typeInfo ) { int chunk = elementDeclIndex > > CHUNK_SHIFT ; int index = elementDeclIndex & CHUNK_MASK ; ensureElementDeclCapacity ( chunk ) ; if ( elementDeclIndex > - 1 ) { fComplexTypeInfo [ chunk ] [ index ] = typeInfo ; } } protected void setElementDefault ( int elementDeclIndex , int defaultType , String defaultValue ) { int chunk = elementDeclIndex > > CHUNK_SHIFT ; int index = elementDeclIndex & CHUNK_MASK ; ensureElementDeclCapacity ( chunk ) ; if ( elementDeclIndex > - 1 ) { fElementDeclDefaultType [ chunk ] [ index ] = defaultType ; fElementDeclDefaultValue [ chunk ] [ index ] = defaultValue ; } } protected void setElementDeclBlockSet ( int elementDeclIndex , int blockSet ) { int chunk = elementDeclIndex > > CHUNK_SHIFT ; int index = elementDeclIndex & CHUNK_MASK ; ensureElementDeclCapacity ( chunk ) ; if ( elementDeclIndex > - 1 ) { fElementDeclBlockSet [ chunk ] [ index ] = blockSet ; } } protected void setElementDeclFinalSet ( int elementDeclIndex , int finalSet ) { int chunk = elementDeclIndex > > CHUNK_SHIFT ; int index = elementDeclIndex & CHUNK_MASK ; ensureElementDeclCapacity ( chunk ) ; if ( elementDeclIndex > - 1 ) { fElementDeclFinalSet [ chunk ] [ index ] = finalSet ; } } protected void setElementDeclMiscFlags ( int elementDeclIndex , int miscFlags ) { int chunk = elementDeclIndex > > CHUNK_SHIFT ; int index = elementDeclIndex & CHUNK_MASK ; ensureElementDeclCapacity ( chunk ) ; if ( elementDeclIndex > - 1 ) { fElementDeclMiscFlags [ chunk ] [ index ] = miscFlags ; } } protected void setElementDeclSubstitutionGroupElementFullName ( int elementDeclIndex , String substitutionGroupFullName ) { int chunk = elementDeclIndex > > CHUNK_SHIFT ; int index = elementDeclIndex & CHUNK_MASK ; ensureElementDeclCapacity ( chunk ) ; if ( elementDeclIndex > - 1 ) { fElementDeclSubstitutionGroupFullName [ chunk ] [ index ] = substitutionGroupFullName ; } } protected int addElementDecl ( QName eltQName , int enclosingScope , int scopeDefined , int contentSpecType , int contentSpecIndex , int attrListHead , DatatypeValidator dv ) { int elementDeclIndex = getElementDeclIndex ( eltQName , enclosingScope ) ; if ( elementDeclIndex == - 1 ) { if ( enclosingScope < - 1 || scopeDefined < - 1 ) { } fTempElementDecl . name . setValues ( eltQName ) ; fTempElementDecl . enclosingScope = enclosingScope ; fTempElementDecl . type = contentSpecType ; fTempElementDecl . contentSpecIndex = contentSpecIndex ; fTempElementDecl . datatypeValidator = dv ; elementDeclIndex = createElementDecl ( ) ; setElementDecl ( elementDeclIndex , fTempElementDecl ) ; setFirstAttributeDeclIndex ( elementDeclIndex , attrListHead ) ; setElementDefinedScope ( elementDeclIndex , scopeDefined ) ; } return elementDeclIndex ; } protected void addAttDef ( int templateElementIndex , QName attQName , int attType , int enumeration , int attDefaultType , String attDefaultValue , DatatypeValidator dv , boolean isList ) { int attrDeclIndex = createAttributeDecl ( ) ; fTempAttributeDecl . name . setValues ( attQName ) ; fTempAttributeDecl . datatypeValidator = dv ; fTempAttributeDecl . type = attType ; fTempAttributeDecl . defaultType = attDefaultType ; fTempAttributeDecl . defaultValue = attDefaultValue ; fTempAttributeDecl . list = isList ; fTempAttributeDecl . enumeration = enumeration ; super . setAttributeDecl ( templateElementIndex , attrDeclIndex , fTempAttributeDecl ) ; } public int getAttributeDeclIndex ( int elementIndex , QName attribute ) { if ( elementIndex == - 1 ) { return - 1 ; } int attDefIndex = getFirstAttributeDeclIndex ( elementIndex ) ; while ( attDefIndex != - 1 ) { getAttributeDecl ( attDefIndex , fTempAttributeDecl ) ; if ( fTempAttributeDecl . name . localpart == attribute . localpart && fTempAttributeDecl . name . uri == attribute . uri ) { return attDefIndex ; } attDefIndex = getNextAttributeDeclIndex ( attDefIndex ) ; } return - 1 ; } protected int addContentSpecNode ( int contentSpecType , int value , int otherValue , boolean mustBeUnique ) { fTempContentSpecNode . type = contentSpecType ; fTempContentSpecNode . value = value ; fTempContentSpecNode . otherValue = otherValue ; int contentSpecIndex = createContentSpec ( ) ; setContentSpec ( contentSpecIndex , fTempContentSpecNode ) ; return contentSpecIndex ; } private boolean ensureElementDeclCapacity ( int chunk ) { try { return fScopeDefinedByElement [ chunk ] [ 0 ] == - 2 ; } catch ( ArrayIndexOutOfBoundsException ex ) { fScopeDefinedByElement = resize ( fScopeDefinedByElement , fScopeDefinedByElement . length * 2 ) ; fFromAnotherSchemaURI = resize ( fFromAnotherSchemaURI , fFromAnotherSchemaURI . length * 2 ) ; fComplexTypeInfo = resize ( fComplexTypeInfo , fComplexTypeInfo . length * 2 ) ; fElementDeclDefaultType = resize ( fElementDeclDefaultType , fElementDeclDefaultType . length * 2 ) ; fElementDeclDefaultValue = resize ( fElementDeclDefaultValue , fElementDeclDefaultValue . length * 2 ) ; fElementDeclBlockSet = resize ( fElementDeclBlockSet , fElementDeclBlockSet . length * 2 ) ; fElementDeclFinalSet = resize ( fElementDeclFinalSet , fElementDeclFinalSet . length * 2 ) ; fElementDeclMiscFlags = resize ( fElementDeclMiscFlags , fElementDeclMiscFlags . length * 2 ) ; fElementDeclSubstitutionGroupFullName = resize ( fElementDeclSubstitutionGroupFullName , fElementDeclSubstitutionGroupFullName . length * 2 ) ; } catch ( NullPointerException ex ) { } fScopeDefinedByElement [ chunk ] = new int [ CHUNK_SIZE ] ; for ( int i = 0 ; i < CHUNK_SIZE ; i ++ ) { fScopeDefinedByElement [ chunk ] [ i ] = - 2 ; } fFromAnotherSchemaURI [ chunk ] = new String [ CHUNK_SIZE ] ; fComplexTypeInfo [ chunk ] = new TraverseSchema . ComplexTypeInfo [ CHUNK_SIZE ] ; fElementDeclDefaultType [ chunk ] = new int [ CHUNK_SIZE ] ; fElementDeclDefaultValue [ chunk ] = new String [ CHUNK_SIZE ] ; fElementDeclSubstitutionGroupFullName [ chunk ] = new String [ CHUNK_SIZE ] ; fElementDeclBlockSet [ chunk ] = new int [ CHUNK_SIZE ] ; fElementDeclFinalSet [ chunk ] = new int [ CHUNK_SIZE ] ; fElementDeclMiscFlags [ chunk ] = new int [ CHUNK_SIZE ] ; return true ; } private int [ ] [ ] resize ( int array [ ] [ ] , int newsize ) { int newarray [ ] [ ] = new int [ newsize ] [ ] ; System . arraycopy ( array , 0 , newarray , 0 , array . length ) ; return newarray ; } private DatatypeValidator [ ] [ ] resize ( DatatypeValidator array [ ] [ ] , int newsize ) { return array ; } private XMLContentModel [ ] [ ] resize ( XMLContentModel array [ ] [ ] , int newsize ) { return array ; } private QName [ ] [ ] resize ( QName array [ ] [ ] , int newsize ) { return array ; } private String [ ] [ ] resize ( String array [ ] [ ] , int newsize ) { String newarray [ ] [ ] = new String [ newsize ] [ ] ; System . arraycopy ( array , 0 , newarray , 0 , array . length ) ; return newarray ; } private TraverseSchema . ComplexTypeInfo [ ] [ ] resize ( TraverseSchema . ComplexTypeInfo array [ ] [ ] , int newsize ) { TraverseSchema . ComplexTypeInfo newarray [ ] [ ] = new TraverseSchema . ComplexTypeInfo [ newsize ] [ ] ; System . arraycopy ( array , 0 , newarray , 0 , array . length ) ; return newarray ; } } 	1	['45', '2', '0', '13', '63', '862', '3', '10', '16', '0.896780303', '962', '0.875', '6', '0.463414634', '0.119298246', '1', '5', '19.84444444', '5', '1.5556', '2']
package org . w3c . dom . html ; public interface HTMLHtmlElement extends HTMLElement { public String getVersion ( ) ; public void setVersion ( String version ) ; } 	0	['2', '1', '0', '0', '2', '1', '0', '0', '2', '2', '2', '0', '0', '0', '0.75', '0', '0', '0', '1', '1', '0']
package org . apache . xerces . validators . datatype ; import java . util . Hashtable ; import java . util . Locale ; import java . util . Enumeration ; import java . util . StringTokenizer ; import org . apache . xerces . utils . XMLCharacterProperties ; import org . apache . xerces . utils . XMLMessages ; public class IDREFDatatypeValidator extends AbstractDatatypeValidator { private DatatypeValidator fBaseValidator = null ; private Hashtable fTableOfId = null ; private Hashtable fTableIDRefs = null ; private Object fNullValue = null ; private Locale fLocale = null ; private DatatypeMessageProvider fMessageProvider = new DatatypeMessageProvider ( ) ; public static final int IDREF_STORE = 0 ; public static final int IDREF_CLEAR = 1 ; public static final int IDREF_VALIDATE = 2 ; public IDREFDatatypeValidator ( ) throws InvalidDatatypeFacetException { this ( null , null , false ) ; } public IDREFDatatypeValidator ( DatatypeValidator base , Hashtable facets , boolean derivedByList ) throws InvalidDatatypeFacetException { setBasetype ( base ) ; } public Object validate ( String content , Object state ) throws InvalidDatatypeValueException { StateMessageDatatype message ; if ( state != null ) { message = ( StateMessageDatatype ) state ; if ( message . getDatatypeState ( ) == IDREFDatatypeValidator . IDREF_CLEAR ) { if ( this . fTableOfId != null ) { fTableOfId . clear ( ) ; } if ( this . fTableIDRefs != null ) { fTableIDRefs . clear ( ) ; } return null ; } else if ( message . getDatatypeState ( ) == IDREFDatatypeValidator . IDREF_VALIDATE ) { this . checkIdRefs ( ) ; } else if ( message . getDatatypeState ( ) == IDREFDatatypeValidator . IDREF_STORE ) { this . fTableOfId = ( Hashtable ) message . getDatatypeObject ( ) ; if ( ! XMLCharacterProperties . validName ( content ) ) { InvalidDatatypeValueException error = new InvalidDatatypeValueException ( "IDREF is not valid" ) ; error . setMinorCode ( XMLMessages . MSG_IDREF_INVALID ) ; error . setMajorCode ( XMLMessages . VC_IDREF ) ; throw error ; } addIdRef ( content , state ) ; } } return null ; } public int compare ( String content1 , String content2 ) { return - 1 ; } public Hashtable getFacets ( ) { return null ; } public Object clone ( ) throws CloneNotSupportedException { throw new CloneNotSupportedException ( "clone() is not supported in " + this . getClass ( ) . getName ( ) ) ; } private void setBasetype ( DatatypeValidator base ) { fBaseValidator = base ; } private void addIdRef ( String content , Object state ) { if ( this . fTableOfId != null && this . fTableOfId . containsKey ( content ) ) { return ; } if ( this . fTableIDRefs == null ) { this . fTableIDRefs = new Hashtable ( ) ; } else if ( fTableIDRefs . containsKey ( content ) ) { return ; } if ( this . fNullValue == null ) { fNullValue = new Object ( ) ; } try { this . fTableIDRefs . put ( content , fNullValue ) ; } catch ( OutOfMemoryError ex ) { System . out . println ( "Out of Memory: Hashtable of ID's has " + this . fTableIDRefs . size ( ) + " Elements" ) ; ex . printStackTrace ( ) ; } } private void checkIdRefs ( ) throws InvalidDatatypeValueException { if ( this . fTableIDRefs == null ) return ; Enumeration en = this . fTableIDRefs . keys ( ) ; while ( en . hasMoreElements ( ) ) { String key = ( String ) en . nextElement ( ) ; if ( this . fTableOfId == null || ! this . fTableOfId . containsKey ( key ) ) { InvalidDatatypeValueException error = new InvalidDatatypeValueException ( key ) ; error . setMinorCode ( XMLMessages . MSG_ELEMENT_WITH_ID_REQUIRED ) ; error . setMajorCode ( XMLMessages . VC_IDREF ) ; throw error ; } } } public void setLocale ( Locale locale ) { fLocale = locale ; } private String getErrorString ( int major , int minor , Object args [ ] ) { try { return fMessageProvider . createMessage ( fLocale , major , minor , args ) ; } catch ( Exception e ) { return "Illegal Errorcode " + minor ; } } } 	1	['11', '2', '0', '8', '38', '35', '1', '7', '7', '0.833333333', '253', '0.666666667', '2', '0.307692308', '0.232323232', '0', '0', '21.18181818', '6', '1.2727', '2']
package org . apache . wml ; public interface WMLFieldsetElement extends WMLElement { public void setTitle ( String newValue ) ; public String getTitle ( ) ; public void setXmlLang ( String newValue ) ; public String getXmlLang ( ) ; } 	0	['4', '1', '0', '2', '4', '6', '1', '1', '4', '2', '4', '0', '0', '0', '0.75', '0', '0', '0', '1', '1', '0']
package org . apache . xerces . dom ; import org . w3c . dom . * ; public class ElementNSImpl extends ElementImpl { static final long serialVersionUID = - 9142310625494392642L ; static final String xmlURI = "http://www.w3.org/XML/1998/namespace" ; protected String namespaceURI ; protected String localName ; protected ElementNSImpl ( DocumentImpl ownerDocument , String namespaceURI , String qualifiedName ) throws DOMException { super ( ownerDocument , qualifiedName ) ; int index = qualifiedName . indexOf ( ':' ) ; String prefix ; if ( index < 0 ) { prefix = null ; localName = qualifiedName ; } else { prefix = qualifiedName . substring ( 0 , index ) ; localName = qualifiedName . substring ( index + 1 ) ; if ( ownerDocument . errorChecking ) { if ( namespaceURI == null || ( localName . length ( ) == 0 ) || ( localName . indexOf ( ':' ) >= 0 ) ) { throw new DOMException ( DOMException . NAMESPACE_ERR , "DOM003 Namespace error" ) ; } else if ( prefix . equals ( "xml" ) ) { if ( ! namespaceURI . equals ( xmlURI ) ) { throw new DOMException ( DOMException . NAMESPACE_ERR , "DOM003 Namespace error" ) ; } } else if ( index == 0 ) { throw new DOMException ( DOMException . NAMESPACE_ERR , "DOM003 Namespace error" ) ; } } } this . namespaceURI = namespaceURI ; } protected ElementNSImpl ( DocumentImpl ownerDocument , String value ) { super ( ownerDocument , value ) ; } public String getNamespaceURI ( ) { if ( needsSyncData ( ) ) { synchronizeData ( ) ; } return namespaceURI ; } public String getPrefix ( ) { if ( needsSyncData ( ) ) { synchronizeData ( ) ; } int index = name . indexOf ( ':' ) ; return index < 0 ? null : name . substring ( 0 , index ) ; } public void setPrefix ( String prefix ) throws DOMException { if ( needsSyncData ( ) ) { synchronizeData ( ) ; } if ( ownerDocument ( ) . errorChecking ) { if ( isReadOnly ( ) ) { throw new DOMException ( DOMException . NO_MODIFICATION_ALLOWED_ERR , "DOM001 Modification not allowed" ) ; } if ( ! DocumentImpl . isXMLName ( prefix ) ) { throw new DOMException ( DOMException . INVALID_CHARACTER_ERR , "DOM002 Illegal character" ) ; } if ( namespaceURI == null ) { throw new DOMException ( DOMException . NAMESPACE_ERR , "DOM003 Namespace error" ) ; } else if ( prefix != null ) { if ( prefix . equals ( "xml" ) ) { if ( ! namespaceURI . equals ( xmlURI ) ) { throw new DOMException ( DOMException . NAMESPACE_ERR , "DOM003 Namespace error" ) ; } } } } name = prefix + ":" + localName ; } public String getLocalName ( ) { if ( needsSyncData ( ) ) { synchronizeData ( ) ; } return localName ; } } 	1	['6', '3', '1', '3', '21', '3', '2', '2', '4', '0.9', '192', '0.5', '0', '0.947368421', '0.611111111', '3', '3', '30.33333333', '3', '1.3333', '1']
package org . apache . xerces . dom ; import org . w3c . dom . * ; public class DocumentFragmentImpl extends ParentNode implements DocumentFragment { static final long serialVersionUID = - 7596449967279236746L ; public DocumentFragmentImpl ( DocumentImpl ownerDoc ) { super ( ownerDoc ) ; } public DocumentFragmentImpl ( ) { } public short getNodeType ( ) { return Node . DOCUMENT_FRAGMENT_NODE ; } public String getNodeName ( ) { return "#document-fragment" ; } } 	0	['4', '4', '0', '2', '6', '6', '1', '2', '4', '1.333333333', '16', '0', '0', '0.975308642', '0.625', '2', '5', '2.75', '1', '0.5', '0']
package org . w3c . dom ; public interface Document extends Node { public DocumentType getDoctype ( ) ; public DOMImplementation getImplementation ( ) ; public Element getDocumentElement ( ) ; public Element createElement ( String tagName ) throws DOMException ; public DocumentFragment createDocumentFragment ( ) ; public Text createTextNode ( String data ) ; public Comment createComment ( String data ) ; public CDATASection createCDATASection ( String data ) throws DOMException ; public ProcessingInstruction createProcessingInstruction ( String target , String data ) throws DOMException ; public Attr createAttribute ( String name ) throws DOMException ; public EntityReference createEntityReference ( String name ) throws DOMException ; public NodeList getElementsByTagName ( String tagname ) ; public Node importNode ( Node importedNode , boolean deep ) throws DOMException ; public Element createElementNS ( String namespaceURI , String qualifiedName ) throws DOMException ; public Attr createAttributeNS ( String namespaceURI , String qualifiedName ) throws DOMException ; public NodeList getElementsByTagNameNS ( String namespaceURI , String localName ) ; public Element getElementById ( String elementId ) ; } 	1	['17', '1', '0', '0', '17', '136', '0', '0', '17', '2', '17', '0', '0', '0', '0.455882353', '0', '0', '0', '1', '1', '2']
package org . apache . xerces . validators . common ; public abstract class CMNode { CMNode ( int type ) throws CMException { fType = type ; } abstract boolean isNullable ( ) throws CMException ; final int type ( ) { return fType ; } final CMStateSet firstPos ( ) throws CMException { if ( fFirstPos == null ) { fFirstPos = new CMStateSet ( fMaxStates ) ; calcFirstPos ( fFirstPos ) ; } return fFirstPos ; } final CMStateSet lastPos ( ) throws CMException { if ( fLastPos == null ) { fLastPos = new CMStateSet ( fMaxStates ) ; calcLastPos ( fLastPos ) ; } return fLastPos ; } final void setFollowPos ( CMStateSet setToAdopt ) { fFollowPos = setToAdopt ; } final void setMaxStates ( int maxStates ) { fMaxStates = maxStates ; } protected abstract void calcFirstPos ( CMStateSet toSet ) throws CMException ; protected abstract void calcLastPos ( CMStateSet toSet ) throws CMException ; private int fType ; private CMStateSet fFirstPos = null ; private CMStateSet fFollowPos = null ; private CMStateSet fLastPos = null ; private int fMaxStates = - 1 ; } ; 	0	['9', '1', '4', '8', '11', '20', '6', '2', '0', '0.825', '77', '1', '3', '0', '0.518518519', '0', '0', '7', '1', '0.8889', '0']
package org . apache . xerces . readers ; import org . apache . xerces . framework . XMLErrorReporter ; import org . apache . xerces . utils . CharDataChunk ; import org . apache . xerces . utils . StringPool ; import java . io . Reader ; final class CharReader extends AbstractCharReader { CharReader ( XMLEntityHandler entityHandler , XMLErrorReporter errorReporter , boolean sendCharDataAsCharArray , Reader reader , StringPool stringPool ) throws Exception { super ( entityHandler , errorReporter , sendCharDataAsCharArray , stringPool ) ; fCharacterStream = reader ; fillCurrentChunk ( ) ; } private Reader fCharacterStream = null ; private boolean fCheckOverflow = false ; private char [ ] fOverflow = null ; private int fOverflowOffset = 0 ; private int fOverflowEnd = 0 ; private int fOutputOffset = 0 ; private boolean fSkipLinefeed = false ; protected int fillCurrentChunk ( ) throws Exception { char [ ] recycledData = fCurrentChunk . toCharArray ( ) ; fOutputOffset = 0 ; if ( fCheckOverflow ) { fMostRecentData = recycledData ; if ( fOverflowEnd < CharDataChunk . CHUNK_SIZE ) { recycledData = null ; if ( fOverflowEnd > 0 ) { if ( fMostRecentData == null || fMostRecentData . length < 1 + fOverflowEnd - fOverflowOffset ) fMostRecentData = new char [ 1 + fOverflowEnd - fOverflowOffset ] ; copyNormalize ( fOverflow , fOverflowOffset , fMostRecentData , fOutputOffset ) ; } else { if ( fMostRecentData == null ) fMostRecentData = new char [ 1 ] ; } fMostRecentData [ fOutputOffset ] = 0 ; fOverflow = null ; fLength += fOutputOffset ; fCurrentIndex = 0 ; fCurrentChunk . setCharArray ( fMostRecentData ) ; return ( fMostRecentChar = fMostRecentData [ 0 ] ) ; } if ( fMostRecentData == null || fMostRecentData . length < CharDataChunk . CHUNK_SIZE ) fMostRecentData = new char [ CharDataChunk . CHUNK_SIZE ] ; else recycledData = null ; copyNormalize ( fOverflow , fOverflowOffset , fMostRecentData , fOutputOffset ) ; fCheckOverflow = false ; } else { if ( fOverflow == null ) { fOverflow = recycledData ; if ( fOverflow == null || fOverflow . length < CharDataChunk . CHUNK_SIZE ) fOverflow = new char [ CharDataChunk . CHUNK_SIZE ] ; else recycledData = null ; } fMostRecentData = null ; } while ( true ) { fOverflowOffset = 0 ; fOverflowEnd = 0 ; int capacity = CharDataChunk . CHUNK_SIZE ; int result = 0 ; do { try { result = fCharacterStream . read ( fOverflow , fOverflowEnd , capacity ) ; } catch ( java . io . IOException ex ) { result = - 1 ; } if ( result == - 1 ) { fCharacterStream . close ( ) ; fCharacterStream = null ; if ( fMostRecentData == null ) { fMostRecentData = recycledData ; if ( fMostRecentData == null || fMostRecentData . length < 1 + fOverflowEnd ) fMostRecentData = new char [ 1 + fOverflowEnd ] ; else recycledData = null ; copyNormalize ( fOverflow , fOverflowOffset , fMostRecentData , fOutputOffset ) ; fOverflow = null ; fMostRecentData [ fOutputOffset ] = 0 ; } else { boolean alldone = copyNormalize ( fOverflow , fOverflowOffset , fMostRecentData , fOutputOffset ) ; if ( alldone ) { if ( fOverflowEnd == CharDataChunk . CHUNK_SIZE ) { fCheckOverflow = true ; fOverflowOffset = 0 ; fOverflowEnd = 0 ; } else { fOverflow = null ; fMostRecentData [ fOutputOffset ] = 0 ; } } else { fCheckOverflow = true ; } } break ; } if ( result > 0 ) { fOverflowEnd += result ; capacity -= result ; } } while ( capacity > 0 ) ; if ( result == - 1 ) break ; if ( fMostRecentData != null ) { boolean alldone = copyNormalize ( fOverflow , fOverflowOffset , fMostRecentData , fOutputOffset ) ; if ( fOutputOffset == CharDataChunk . CHUNK_SIZE ) { if ( ! alldone ) { fCheckOverflow = true ; } break ; } } else { fMostRecentData = recycledData ; if ( fMostRecentData == null || fMostRecentData . length < CharDataChunk . CHUNK_SIZE ) fMostRecentData = new char [ CharDataChunk . CHUNK_SIZE ] ; else recycledData = null ; copyNormalize ( fOverflow , fOverflowOffset , fMostRecentData , fOutputOffset ) ; if ( fOutputOffset == CharDataChunk . CHUNK_SIZE ) { break ; } } } fLength += fOutputOffset ; fCurrentIndex = 0 ; fCurrentChunk . setCharArray ( fMostRecentData ) ; return ( fMostRecentChar = fMostRecentData [ 0 ] ) ; } private boolean copyNormalize ( char [ ] in , int inOffset , char [ ] out , int outOffset ) throws Exception { int inEnd = fOverflowEnd ; int outEnd = out . length ; if ( inOffset == inEnd ) return true ; char b = in [ inOffset ] ; if ( fSkipLinefeed ) { fSkipLinefeed = false ; if ( b == 0x0A ) { if ( ++ inOffset == inEnd ) return exitNormalize ( inOffset , outOffset , true ) ; b = in [ inOffset ] ; } } while ( outOffset < outEnd ) { int inCount = inEnd - inOffset ; int outCount = outEnd - outOffset ; if ( inCount > outCount ) inCount = outCount ; inOffset ++ ; while ( true ) { while ( b == 0x0D ) { out [ outOffset ++ ] = 0x0A ; if ( inOffset == inEnd ) { fSkipLinefeed = true ; return exitNormalize ( inOffset , outOffset , true ) ; } b = in [ inOffset ] ; if ( b == 0x0A ) { if ( ++ inOffset == inEnd ) return exitNormalize ( inOffset , outOffset , true ) ; b = in [ inOffset ] ; } if ( outOffset == outEnd ) return exitNormalize ( inOffset , outOffset , false ) ; inCount = inEnd - inOffset ; outCount = outEnd - outOffset ; if ( inCount > outCount ) inCount = outCount ; inOffset ++ ; } while ( true ) { out [ outOffset ++ ] = b ; if ( -- inCount == 0 ) break ; b = in [ inOffset ++ ] ; if ( b == 0x0D ) break ; } if ( inCount == 0 ) break ; } if ( inOffset == inEnd ) break ; } return exitNormalize ( inOffset , outOffset , inOffset == inEnd ) ; } private boolean exitNormalize ( int inOffset , int outOffset , boolean result ) { fOverflowOffset = inOffset ; fOutputOffset = outOffset ; return result ; } } 	1	['4', '3', '0', '6', '9', '0', '1', '5', '0', '0.380952381', '583', '1', '0', '0.926829268', '0.40625', '1', '3', '143', '1', '0.75', '1']
package org . apache . xerces . validators . datatype ; import java . util . Hashtable ; import java . util . Locale ; public interface DatatypeValidator { public static final int FACET_LENGTH = 1 ; public static final int FACET_MINLENGTH = 1 << 1 ; public static final int FACET_MAXLENGTH = 1 << 2 ; public static final int FACET_PATTERN = 1 << 3 ; public static final int FACET_ENUMERATION = 1 << 4 ; public static final int FACET_MAXINCLUSIVE = 1 << 5 ; public static final int FACET_MAXEXCLUSIVE = 1 << 6 ; public static final int FACET_MININCLUSIVE = 1 << 7 ; public static final int FACET_MINEXCLUSIVE = 1 << 8 ; public static final int FACET_PRECISSION = 1 << 9 ; public static final int FACET_SCALE = 1 << 10 ; public static final int FACET_ENCODING = 1 << 11 ; public static final int FACET_DURATION = 1 << 12 ; public static final int FACET_PERIOD = 1 << 13 ; public Object validate ( String content , Object state ) throws InvalidDatatypeValueException ; public Hashtable getFacets ( ) ; public int compare ( String value1 , String value2 ) ; } 	0	['3', '1', '0', '28', '3', '3', '27', '1', '3', '1.5', '17', '0', '0', '0', '0.666666667', '0', '0', '0', '1', '1', '0']
package org . apache . xerces . framework ; import java . io . InputStream ; import java . io . IOException ; import java . io . Reader ; import java . util . Locale ; import org . apache . xerces . readers . DefaultEntityHandler ; import org . apache . xerces . readers . XMLDeclRecognizer ; import org . apache . xerces . readers . XMLEntityHandler ; import org . apache . xerces . readers . XMLEntityReaderFactory ; import org . apache . xerces . utils . ChunkyCharArray ; import org . apache . xerces . utils . StringPool ; import org . apache . xerces . utils . XMLMessageProvider ; import org . apache . xerces . utils . XMLMessages ; import org . apache . xerces . utils . ImplementationMessages ; import org . apache . xerces . validators . common . GrammarResolver ; import org . apache . xerces . validators . common . GrammarResolverImpl ; import org . apache . xerces . validators . common . XMLValidator ; import org . apache . xerces . validators . datatype . DatatypeMessageProvider ; import org . apache . xerces . validators . datatype . DatatypeValidatorFactoryImpl ; import org . apache . xerces . validators . schema . SchemaMessageProvider ; import org . xml . sax . EntityResolver ; import org . xml . sax . ErrorHandler ; import org . xml . sax . InputSource ; import org . xml . sax . Locator ; import org . xml . sax . SAXException ; import org . xml . sax . SAXNotRecognizedException ; import org . xml . sax . SAXNotSupportedException ; import org . xml . sax . SAXParseException ; public abstract class XMLParser implements XMLErrorReporter , XMLDocumentHandler . DTDHandler { protected static final String SAX2_FEATURES_PREFIX = "http://xml.org/sax/features/" ; protected static final String SAX2_PROPERTIES_PREFIX = "http://xml.org/sax/properties/" ; protected static final String XERCES_FEATURES_PREFIX = "http://apache.org/xml/features/" ; protected static final String XERCES_PROPERTIES_PREFIX = "http://apache.org/xml/properties/" ; private static final String RECOGNIZED_FEATURES [ ] = { "http://xml.org/sax/features/validation" , "http://xml.org/sax/features/external-general-entities" , "http://xml.org/sax/features/external-parameter-entities" , "http://xml.org/sax/features/namespaces" , "http://apache.org/xml/features/validation/schema" , "http://apache.org/xml/features/validation/dynamic" , "http://apache.org/xml/features/validation/default-attribute-values" , "http://apache.org/xml/features/validation/validate-content-models" , "http://apache.org/xml/features/validation/validate-datatypes" , "http://apache.org/xml/features/validation/warn-on-duplicate-attdef" , "http://apache.org/xml/features/validation/warn-on-undeclared-elemdef" , "http://apache.org/xml/features/allow-java-encodings" , "http://apache.org/xml/features/continue-after-fatal-error" , "http://apache.org/xml/features/nonvalidating/load-dtd-grammar" , "http://apache.org/xml/features/nonvalidating/load-external-dtd" } ; private static final String RECOGNIZED_PROPERTIES [ ] = { "http://xml.org/sax/properties/xml-string" , } ; private static final boolean PRINT_EXCEPTION_STACK_TRACE = false ; protected GrammarResolver fGrammarResolver = null ; protected boolean fParseInProgress = false ; private boolean fNeedReset = false ; private boolean fContinueAfterFatalError = false ; private ErrorHandler fErrorHandler = null ; private Locale fLocale = null ; private static XMLMessageProvider fgXMLMessages = new XMLMessages ( ) ; private static XMLMessageProvider fgImplementationMessages = new ImplementationMessages ( ) ; private static XMLMessageProvider fgSchemaMessages = new SchemaMessageProvider ( ) ; private static XMLMessageProvider fgDatatypeMessages = new DatatypeMessageProvider ( ) ; protected StringPool fStringPool = null ; protected XMLErrorReporter fErrorReporter = null ; protected DefaultEntityHandler fEntityHandler = null ; protected XMLDocumentScanner fScanner = null ; protected XMLValidator fValidator = null ; protected XMLParser ( ) { this ( new StringPool ( ) ) ; } protected XMLParser ( StringPool stringPool ) { fStringPool = stringPool ; fErrorReporter = this ; fEntityHandler = new DefaultEntityHandler ( fStringPool , fErrorReporter ) ; fScanner = new XMLDocumentScanner ( fStringPool , fErrorReporter , fEntityHandler , new ChunkyCharArray ( fStringPool ) ) ; fValidator = new XMLValidator ( fStringPool , fErrorReporter , fEntityHandler , fScanner ) ; fGrammarResolver = new GrammarResolverImpl ( ) ; fScanner . setGrammarResolver ( fGrammarResolver ) ; fValidator . setGrammarResolver ( fGrammarResolver ) ; try { setNamespaces ( true ) ; } catch ( Exception e ) { } } protected void initHandlers ( boolean sendCharDataAsCharArray , XMLDocumentHandler docHandler , XMLDocumentHandler . DTDHandler dtdHandler ) { fValidator . initHandlers ( sendCharDataAsCharArray , docHandler , dtdHandler ) ; fScanner . setDTDHandler ( this ) ; } public String [ ] getFeaturesRecognized ( ) { return RECOGNIZED_FEATURES ; } public boolean isFeatureRecognized ( String featureId ) { String [ ] recognizedFeatures = getFeaturesRecognized ( ) ; for ( int i = 0 ; i < recognizedFeatures . length ; i ++ ) { if ( featureId . equals ( recognizedFeatures [ i ] ) ) return true ; } return false ; } public String [ ] getPropertiesRecognized ( ) { return RECOGNIZED_PROPERTIES ; } public boolean isPropertyRecognized ( String propertyId ) { String [ ] recognizedProperties = getPropertiesRecognized ( ) ; for ( int i = 0 ; i < recognizedProperties . length ; i ++ ) { if ( propertyId . equals ( recognizedProperties [ i ] ) ) return true ; } return false ; } public boolean parseSomeSetup ( InputSource source ) throws Exception { if ( fNeedReset ) resetOrCopy ( ) ; fParseInProgress = true ; fNeedReset = true ; return fEntityHandler . startReadingFromDocument ( source ) ; } public boolean parseSome ( ) throws Exception { if ( ! fScanner . parseSome ( false ) ) { fParseInProgress = false ; return false ; } return true ; } public void reset ( ) throws Exception { fGrammarResolver . clearGrammarResolver ( ) ; fStringPool . reset ( ) ; fEntityHandler . reset ( fStringPool ) ; fScanner . reset ( fStringPool , new ChunkyCharArray ( fStringPool ) ) ; fValidator . reset ( fStringPool ) ; fNeedReset = false ; } public final Locator getLocator ( ) { return fEntityHandler ; } public void setReaderFactory ( XMLEntityReaderFactory readerFactory ) { fEntityHandler . setReaderFactory ( readerFactory ) ; } public void addRecognizer ( XMLDeclRecognizer recognizer ) { fEntityHandler . addRecognizer ( recognizer ) ; } protected void setValidation ( boolean validate ) throws SAXNotRecognizedException , SAXNotSupportedException { if ( fParseInProgress ) { throw new SAXNotSupportedException ( "PAR004 Cannot setFeature(http://xml.org/sax/features/validation): parse is in progress.\n" + "http://xml.org/sax/features/validation" ) ; } try { fScanner . setValidationEnabled ( validate ) ; fValidator . setValidationEnabled ( validate ) ; } catch ( Exception ex ) { throw new SAXNotSupportedException ( ex . getMessage ( ) ) ; } } protected boolean getValidation ( ) throws SAXNotRecognizedException , SAXNotSupportedException { return fValidator . getValidationEnabled ( ) ; } protected void setExternalGeneralEntities ( boolean expand ) throws SAXNotRecognizedException , SAXNotSupportedException { if ( fParseInProgress ) { throw new SAXNotSupportedException ( "PAR004 Cannot setFeature(http://xml.org/sax/features/external-general-entities): parse is in progress.\n" + "http://xml.org/sax/features/external-general-entities" ) ; } if ( ! expand ) { throw new SAXNotSupportedException ( "http://xml.org/sax/features/external-general-entities" ) ; } } protected boolean getExternalGeneralEntities ( ) throws SAXNotRecognizedException , SAXNotSupportedException { return true ; } protected void setExternalParameterEntities ( boolean expand ) throws SAXNotRecognizedException , SAXNotSupportedException { if ( fParseInProgress ) { throw new SAXNotSupportedException ( "PAR004 Cannot setFeature(http://xml.org/sax/features/external-general-entities): parse is in progress.\n" + "http://xml.org/sax/features/external-general-entities" ) ; } if ( ! expand ) { throw new SAXNotSupportedException ( "http://xml.org/sax/features/external-parameter-entities" ) ; } } protected boolean getExternalParameterEntities ( ) throws SAXNotRecognizedException , SAXNotSupportedException { return true ; } protected void setNamespaces ( boolean process ) throws SAXNotRecognizedException , SAXNotSupportedException { if ( fParseInProgress ) { throw new SAXNotSupportedException ( "PAR004 Cannot setFeature(http://xml.org/sax/features/namespaces): parse is in progress.\n" + "http://xml.org/sax/features/namespaces" ) ; } fScanner . setNamespacesEnabled ( process ) ; fValidator . setNamespacesEnabled ( process ) ; } protected boolean getNamespaces ( ) throws SAXNotRecognizedException , SAXNotSupportedException { return fValidator . getNamespacesEnabled ( ) ; } protected void setValidationSchema ( boolean schema ) throws SAXNotRecognizedException , SAXNotSupportedException { if ( fParseInProgress ) { throw new SAXNotSupportedException ( "http://apache.org/xml/features/validation/schema: parse is in progress" ) ; } fValidator . setSchemaValidationEnabled ( schema ) ; } protected boolean getValidationSchema ( ) throws SAXNotRecognizedException , SAXNotSupportedException { return fValidator . getSchemaValidationEnabled ( ) ; } protected void setValidationDynamic ( boolean dynamic ) throws SAXNotRecognizedException , SAXNotSupportedException { if ( fParseInProgress ) { throw new SAXNotSupportedException ( "http://apache.org/xml/features/validation/dynamic: parse is in progress" ) ; } try { fValidator . setDynamicValidationEnabled ( dynamic ) ; } catch ( Exception ex ) { throw new SAXNotSupportedException ( ex . getMessage ( ) ) ; } } protected boolean getValidationDynamic ( ) throws SAXNotRecognizedException , SAXNotSupportedException { return fValidator . getDynamicValidationEnabled ( ) ; } protected void setNormalizeAttributeValues ( boolean normalize ) { fValidator . setNormalizeAttributeValues ( normalize ) ; } protected void setLoadDTDGrammar ( boolean loadDTDGrammar ) throws SAXNotRecognizedException , SAXNotSupportedException { if ( fParseInProgress ) { throw new SAXNotSupportedException ( "http://apache.org/xml/features/nonvalidating/load-dtd-grammar: parse is in progress" ) ; } try { fValidator . setLoadDTDGrammar ( loadDTDGrammar ) ; } catch ( Exception ex ) { throw new SAXNotSupportedException ( ex . getMessage ( ) ) ; } } protected boolean getLoadDTDGrammar ( ) throws SAXNotRecognizedException , SAXNotSupportedException { return fValidator . getLoadDTDGrammar ( ) ; } protected void setLoadExternalDTD ( boolean loadExternalDTD ) throws SAXNotRecognizedException , SAXNotSupportedException { if ( fParseInProgress ) { throw new SAXNotSupportedException ( "http://apache.org/xml/features/nonvalidating/load-external-dtd: parse is in progress" ) ; } try { fScanner . setLoadExternalDTD ( loadExternalDTD ) ; } catch ( Exception ex ) { throw new SAXNotSupportedException ( ex . getMessage ( ) ) ; } } protected boolean getLoadExternalDTD ( ) throws SAXNotRecognizedException , SAXNotSupportedException { return fScanner . getLoadExternalDTD ( ) ; } protected void setValidationWarnOnDuplicateAttdef ( boolean warn ) throws SAXNotRecognizedException , SAXNotSupportedException { fValidator . setWarningOnDuplicateAttDef ( warn ) ; } protected boolean getValidationWarnOnDuplicateAttdef ( ) throws SAXNotRecognizedException , SAXNotSupportedException { return fValidator . getWarningOnDuplicateAttDef ( ) ; } protected void setValidationWarnOnUndeclaredElemdef ( boolean warn ) throws SAXNotRecognizedException , SAXNotSupportedException { fValidator . setWarningOnUndeclaredElements ( warn ) ; } protected boolean getValidationWarnOnUndeclaredElemdef ( ) throws SAXNotRecognizedException , SAXNotSupportedException { return fValidator . getWarningOnUndeclaredElements ( ) ; } protected void setAllowJavaEncodings ( boolean allow ) throws SAXNotRecognizedException , SAXNotSupportedException { fEntityHandler . setAllowJavaEncodings ( allow ) ; } protected boolean getAllowJavaEncodings ( ) throws SAXNotRecognizedException , SAXNotSupportedException { return fEntityHandler . getAllowJavaEncodings ( ) ; } protected void setContinueAfterFatalError ( boolean continueAfterFatalError ) throws SAXNotRecognizedException , SAXNotSupportedException { fContinueAfterFatalError = continueAfterFatalError ; } protected boolean getContinueAfterFatalError ( ) throws SAXNotRecognizedException , SAXNotSupportedException { return fContinueAfterFatalError ; } protected String getXMLString ( ) throws SAXNotRecognizedException , SAXNotSupportedException { throw new SAXNotSupportedException ( "http://xml.org/sax/properties/xml-string" ) ; } protected void resetOrCopy ( ) throws Exception { fStringPool = new StringPool ( ) ; fEntityHandler . reset ( fStringPool ) ; fScanner . reset ( fStringPool , new ChunkyCharArray ( fStringPool ) ) ; fValidator . resetOrCopy ( fStringPool ) ; fNeedReset = false ; fGrammarResolver = new GrammarResolverImpl ( ) ; fGrammarResolver . clearGrammarResolver ( ) ; fScanner . setGrammarResolver ( fGrammarResolver ) ; fValidator . setGrammarResolver ( fGrammarResolver ) ; } public void setEntityResolver ( EntityResolver resolver ) { fEntityHandler . setEntityResolver ( resolver ) ; } public EntityResolver getEntityResolver ( ) { return fEntityHandler . getEntityResolver ( ) ; } public void setErrorHandler ( ErrorHandler handler ) { fErrorHandler = handler ; } public ErrorHandler getErrorHandler ( ) { return fErrorHandler ; } public void parse ( InputSource source ) throws SAXException , IOException { if ( fParseInProgress ) { throw new org . xml . sax . SAXException ( "FWK005 parse may not be called while parsing." ) ; } try { if ( parseSomeSetup ( source ) ) { fScanner . parseSome ( true ) ; } fParseInProgress = false ; } catch ( org . xml . sax . SAXException ex ) { fParseInProgress = false ; if ( PRINT_EXCEPTION_STACK_TRACE ) ex . printStackTrace ( ) ; throw ex ; } catch ( IOException ex ) { fParseInProgress = false ; if ( PRINT_EXCEPTION_STACK_TRACE ) ex . printStackTrace ( ) ; throw ex ; } catch ( Exception ex ) { fParseInProgress = false ; if ( PRINT_EXCEPTION_STACK_TRACE ) ex . printStackTrace ( ) ; throw new org . xml . sax . SAXException ( ex ) ; } } public void parse ( String systemId ) throws SAXException , IOException { InputSource source = new InputSource ( systemId ) ; parse ( source ) ; try { Reader reader = source . getCharacterStream ( ) ; if ( reader != null ) { reader . close ( ) ; } else { InputStream is = source . getByteStream ( ) ; if ( is != null ) { is . close ( ) ; } } } catch ( IOException e ) { } } public void setLocale ( Locale locale ) throws SAXException { if ( fParseInProgress ) { throw new org . xml . sax . SAXException ( "FWK006 setLocale may not be called while parsing" ) ; } fLocale = locale ; fgXMLMessages . setLocale ( locale ) ; fgImplementationMessages . setLocale ( locale ) ; } public void reportError ( Locator locator , String errorDomain , int majorCode , int minorCode , Object args [ ] , int errorType ) throws Exception { SAXParseException spe ; if ( errorDomain . equals ( XMLMessages . XML_DOMAIN ) ) { spe = new SAXParseException ( fgXMLMessages . createMessage ( fLocale , majorCode , minorCode , args ) , locator ) ; } else if ( errorDomain . equals ( XMLMessages . XMLNS_DOMAIN ) ) { spe = new SAXParseException ( fgXMLMessages . createMessage ( fLocale , majorCode , minorCode , args ) , locator ) ; } else if ( errorDomain . equals ( ImplementationMessages . XERCES_IMPLEMENTATION_DOMAIN ) ) { spe = new SAXParseException ( fgImplementationMessages . createMessage ( fLocale , majorCode , minorCode , args ) , locator ) ; } else if ( errorDomain . equals ( SchemaMessageProvider . SCHEMA_DOMAIN ) ) { spe = new SAXParseException ( fgSchemaMessages . createMessage ( fLocale , majorCode , minorCode , args ) , locator ) ; } else if ( errorDomain . equals ( DatatypeMessageProvider . DATATYPE_DOMAIN ) ) { spe = new SAXParseException ( fgDatatypeMessages . createMessage ( fLocale , majorCode , minorCode , args ) , locator ) ; } else { throw new RuntimeException ( "FWK007 Unknown error domain \"" + errorDomain + "\"." + "\n" + errorDomain ) ; } if ( fErrorHandler == null ) { if ( errorType == XMLErrorReporter . ERRORTYPE_FATAL_ERROR && ! fContinueAfterFatalError ) { throw spe ; } return ; } if ( errorType == XMLErrorReporter . ERRORTYPE_WARNING ) { fErrorHandler . warning ( spe ) ; } else if ( errorType == XMLErrorReporter . ERRORTYPE_FATAL_ERROR ) { fErrorHandler . fatalError ( spe ) ; if ( ! fContinueAfterFatalError ) { Object [ ] fatalArgs = { spe . getMessage ( ) } ; throw new SAXException ( fgImplementationMessages . createMessage ( fLocale , ImplementationMessages . FATAL_ERROR , 0 , fatalArgs ) ) ; } } else { fErrorHandler . error ( spe ) ; } } public void setFeature ( String featureId , boolean state ) throws SAXNotRecognizedException , SAXNotSupportedException { if ( featureId . startsWith ( SAX2_FEATURES_PREFIX ) ) { String feature = featureId . substring ( SAX2_FEATURES_PREFIX . length ( ) ) ; if ( feature . equals ( "validation" ) ) { setValidation ( state ) ; return ; } if ( feature . equals ( "external-general-entities" ) ) { setExternalGeneralEntities ( state ) ; return ; } if ( feature . equals ( "external-parameter-entities" ) ) { setExternalParameterEntities ( state ) ; return ; } if ( feature . equals ( "namespaces" ) ) { setNamespaces ( state ) ; return ; } } else if ( featureId . startsWith ( XERCES_FEATURES_PREFIX ) ) { String feature = featureId . substring ( XERCES_FEATURES_PREFIX . length ( ) ) ; if ( feature . equals ( "validation/schema" ) ) { setValidationSchema ( state ) ; return ; } if ( feature . equals ( "validation/dynamic" ) ) { setValidationDynamic ( state ) ; return ; } if ( feature . equals ( "validation/default-attribute-values" ) ) { throw new SAXNotSupportedException ( featureId ) ; } if ( feature . equals ( "validation/normalize-attribute-values" ) ) { setNormalizeAttributeValues ( state ) ; } if ( feature . equals ( "validation/validate-content-models" ) ) { throw new SAXNotSupportedException ( featureId ) ; } if ( feature . equals ( "nonvalidating/load-dtd-grammar" ) ) { setLoadDTDGrammar ( state ) ; return ; } if ( feature . equals ( "nonvalidating/load-external-dtd" ) ) { setLoadExternalDTD ( state ) ; return ; } if ( feature . equals ( "validation/validate-datatypes" ) ) { throw new SAXNotSupportedException ( featureId ) ; } if ( feature . equals ( "validation/warn-on-duplicate-attdef" ) ) { setValidationWarnOnDuplicateAttdef ( state ) ; return ; } if ( feature . equals ( "validation/warn-on-undeclared-elemdef" ) ) { setValidationWarnOnUndeclaredElemdef ( state ) ; return ; } if ( feature . equals ( "allow-java-encodings" ) ) { setAllowJavaEncodings ( state ) ; return ; } if ( feature . equals ( "continue-after-fatal-error" ) ) { setContinueAfterFatalError ( state ) ; return ; } } throw new SAXNotRecognizedException ( featureId ) ; } public boolean getFeature ( String featureId ) throws SAXNotRecognizedException , SAXNotSupportedException { if ( featureId . startsWith ( SAX2_FEATURES_PREFIX ) ) { String feature = featureId . substring ( SAX2_FEATURES_PREFIX . length ( ) ) ; if ( feature . equals ( "validation" ) ) { return getValidation ( ) ; } if ( feature . equals ( "external-general-entities" ) ) { return getExternalGeneralEntities ( ) ; } if ( feature . equals ( "external-parameter-entities" ) ) { return getExternalParameterEntities ( ) ; } if ( feature . equals ( "namespaces" ) ) { return getNamespaces ( ) ; } } else if ( featureId . startsWith ( XERCES_FEATURES_PREFIX ) ) { String feature = featureId . substring ( XERCES_FEATURES_PREFIX . length ( ) ) ; if ( feature . equals ( "validation/schema" ) ) { return getValidationSchema ( ) ; } if ( feature . equals ( "validation/dynamic" ) ) { return getValidationDynamic ( ) ; } if ( feature . equals ( "validation/default-attribute-values" ) ) { throw new SAXNotRecognizedException ( featureId ) ; } if ( feature . equals ( "validation/validate-content-models" ) ) { throw new SAXNotRecognizedException ( featureId ) ; } if ( feature . equals ( "nonvalidating/load-dtd-grammar" ) ) { return getLoadDTDGrammar ( ) ; } if ( feature . equals ( "nonvalidating/load-external-dtd" ) ) { return getLoadExternalDTD ( ) ; } if ( feature . equals ( "validation/validate-datatypes" ) ) { throw new SAXNotRecognizedException ( featureId ) ; } if ( feature . equals ( "validation/warn-on-duplicate-attdef" ) ) { return getValidationWarnOnDuplicateAttdef ( ) ; } if ( feature . equals ( "validation/warn-on-undeclared-elemdef" ) ) { return getValidationWarnOnUndeclaredElemdef ( ) ; } if ( feature . equals ( "allow-java-encodings" ) ) { return getAllowJavaEncodings ( ) ; } if ( feature . equals ( "continue-after-fatal-error" ) ) { return getContinueAfterFatalError ( ) ; } } throw new SAXNotRecognizedException ( featureId ) ; } public void setProperty ( String propertyId , Object value ) throws SAXNotRecognizedException , SAXNotSupportedException { if ( propertyId . startsWith ( SAX2_PROPERTIES_PREFIX ) ) { String property = propertyId . substring ( SAX2_PROPERTIES_PREFIX . length ( ) ) ; if ( property . equals ( "xml-string" ) ) { throw new SAXNotSupportedException ( propertyId ) ; } } throw new SAXNotRecognizedException ( propertyId ) ; } public Object getProperty ( String propertyId ) throws SAXNotRecognizedException , SAXNotSupportedException { if ( propertyId . startsWith ( SAX2_PROPERTIES_PREFIX ) ) { String property = propertyId . substring ( SAX2_PROPERTIES_PREFIX . length ( ) ) ; if ( property . equals ( "xml-string" ) ) { return getXMLString ( ) ; } } throw new SAXNotRecognizedException ( propertyId ) ; } } 	1	['53', '1', '2', '21', '126', '740', '2', '19', '22', '0.908216783', '1257', '1', '11', '0', '0.106971154', '0', '0', '22.30188679', '3', '1.0189', '3']
package org . w3c . dom . events ; import org . w3c . dom . DOMException ; public interface DocumentEvent { public Event createEvent ( String eventType ) throws DOMException ; } 	0	['1', '1', '0', '0', '1', '0', '0', '0', '1', '2', '1', '0', '0', '0', '1', '0', '0', '0', '1', '1', '0']
package org . apache . xerces . validators . schema ; import org . apache . xerces . framework . XMLErrorReporter ; import org . apache . xerces . validators . common . Grammar ; import org . apache . xerces . validators . common . GrammarResolver ; import org . apache . xerces . validators . common . GrammarResolverImpl ; import org . apache . xerces . validators . common . XMLElementDecl ; import org . apache . xerces . validators . common . XMLAttributeDecl ; import org . apache . xerces . validators . schema . SchemaSymbols ; import org . apache . xerces . validators . schema . XUtil ; import org . apache . xerces . validators . schema . identity . Field ; import org . apache . xerces . validators . schema . identity . IdentityConstraint ; import org . apache . xerces . validators . schema . identity . Key ; import org . apache . xerces . validators . schema . identity . KeyRef ; import org . apache . xerces . validators . schema . identity . Selector ; import org . apache . xerces . validators . schema . identity . Unique ; import org . apache . xerces . validators . schema . identity . XPathException ; import org . apache . xerces . validators . datatype . DatatypeValidator ; import org . apache . xerces . validators . datatype . DatatypeValidatorFactoryImpl ; import org . apache . xerces . validators . datatype . UnionDatatypeValidator ; import org . apache . xerces . validators . datatype . InvalidDatatypeValueException ; import org . apache . xerces . utils . StringPool ; import org . w3c . dom . Element ; import java . io . IOException ; import java . util . * ; import java . net . URL ; import java . net . MalformedURLException ; import org . w3c . dom . * ; import org . apache . xerces . parsers . DOMParser ; import org . apache . xerces . validators . common . XMLValidator ; import org . apache . xerces . validators . datatype . DatatypeValidator . * ; import org . apache . xerces . validators . datatype . InvalidDatatypeValueException ; import org . apache . xerces . framework . XMLContentSpec ; import org . apache . xerces . utils . QName ; import org . apache . xerces . utils . NamespacesScope ; import org . apache . xerces . parsers . SAXParser ; import org . apache . xerces . framework . XMLParser ; import org . apache . xerces . framework . XMLDocumentScanner ; import org . xml . sax . InputSource ; import org . xml . sax . SAXParseException ; import org . xml . sax . EntityResolver ; import org . xml . sax . ErrorHandler ; import org . xml . sax . SAXException ; import org . w3c . dom . Document ; import org . apache . xml . serialize . OutputFormat ; import org . apache . xml . serialize . XMLSerializer ; import org . apache . xerces . validators . schema . SchemaSymbols ; public class TraverseSchema implements NamespacesScope . NamespacesHandler { private static final int TOP_LEVEL_SCOPE = - 1 ; private static final String [ ] IDENTITY_CONSTRAINTS = { SchemaSymbols . ELT_UNIQUE , SchemaSymbols . ELT_KEY , SchemaSymbols . ELT_KEYREF } ; private static boolean DEBUGGING = false ; private static boolean DEBUG_IDENTITY_CONSTRAINTS = false ; private static boolean DEBUG_UNION = false ; private static boolean CR_IMPL = true ; private XMLErrorReporter fErrorReporter = null ; private StringPool fStringPool = null ; private GrammarResolver fGrammarResolver = null ; private SchemaGrammar fSchemaGrammar = null ; private Element fSchemaRootElement ; private DatatypeValidatorFactoryImpl fDatatypeRegistry = null ; private Hashtable fComplexTypeRegistry = new Hashtable ( ) ; private Hashtable fAttributeDeclRegistry = new Hashtable ( ) ; private Vector fIncludeLocations = new Vector ( ) ; private Vector fImportLocations = new Vector ( ) ; private int fAnonTypeCount = 0 ; private int fScopeCount = 0 ; private int fCurrentScope = TOP_LEVEL_SCOPE ; private int fSimpleTypeAnonCount = 0 ; private Stack fCurrentTypeNameStack = new Stack ( ) ; private Hashtable fElementRecurseComplex = new Hashtable ( ) ; private boolean fElementDefaultQualified = false ; private boolean fAttributeDefaultQualified = false ; private int fTargetNSURI ; private String fTargetNSURIString = "" ; private NamespacesScope fNamespacesScope = null ; private String fCurrentSchemaURL = "" ; private XMLAttributeDecl fTempAttributeDecl = new XMLAttributeDecl ( ) ; private XMLElementDecl fTempElementDecl = new XMLElementDecl ( ) ; private EntityResolver fEntityResolver = null ; public class ComplexTypeInfo { public String typeName ; public DatatypeValidator baseDataTypeValidator ; public ComplexTypeInfo baseComplexTypeInfo ; public int derivedBy = 0 ; public int blockSet = 0 ; public int finalSet = 0 ; public boolean isAbstract = false ; public int scopeDefined = - 1 ; public int contentType ; public int contentSpecHandle = - 1 ; public int templateElementIndex = - 1 ; public int attlistHead = - 1 ; public DatatypeValidator datatypeValidator ; } private class ComplexTypeRecoverableError extends Exception { ComplexTypeRecoverableError ( ) { super ( ) ; } ComplexTypeRecoverableError ( String s ) { super ( s ) ; } } public final static String SchemaForSchemaURI = "http://www.w3.org/TR-1/Schema" ; private TraverseSchema ( ) { } public void setGrammarResolver ( GrammarResolver grammarResolver ) { fGrammarResolver = grammarResolver ; } public void startNamespaceDeclScope ( int prefix , int uri ) { } public void endNamespaceDeclScope ( int prefix ) { } private String resolvePrefixToURI ( String prefix ) throws Exception { String uriStr = fStringPool . toString ( fNamespacesScope . getNamespaceForPrefix ( fStringPool . addSymbol ( prefix ) ) ) ; if ( uriStr == null ) { reportGenericSchemaError ( "prefix : [" + prefix + "] can not be resolved to a URI" ) ; return "" ; } if ( prefix . length ( ) == 0 && uriStr . equals ( SchemaSymbols . URI_SCHEMAFORSCHEMA ) && fTargetNSURIString . length ( ) == 0 ) { uriStr = "" ; } return uriStr ; } public TraverseSchema ( Element root , StringPool stringPool , SchemaGrammar schemaGrammar , GrammarResolver grammarResolver , XMLErrorReporter errorReporter , String schemaURL , EntityResolver entityResolver ) throws Exception { fErrorReporter = errorReporter ; fCurrentSchemaURL = schemaURL ; fEntityResolver = entityResolver ; doTraverseSchema ( root , stringPool , schemaGrammar , grammarResolver ) ; } public TraverseSchema ( Element root , StringPool stringPool , SchemaGrammar schemaGrammar , GrammarResolver grammarResolver , XMLErrorReporter errorReporter , String schemaURL ) throws Exception { fErrorReporter = errorReporter ; fCurrentSchemaURL = schemaURL ; doTraverseSchema ( root , stringPool , schemaGrammar , grammarResolver ) ; } public TraverseSchema ( Element root , StringPool stringPool , SchemaGrammar schemaGrammar , GrammarResolver grammarResolver ) throws Exception { doTraverseSchema ( root , stringPool , schemaGrammar , grammarResolver ) ; } public void doTraverseSchema ( Element root , StringPool stringPool , SchemaGrammar schemaGrammar , GrammarResolver grammarResolver ) throws Exception { fNamespacesScope = new NamespacesScope ( this ) ; fSchemaRootElement = root ; fStringPool = stringPool ; fSchemaGrammar = schemaGrammar ; fGrammarResolver = grammarResolver ; fDatatypeRegistry = ( DatatypeValidatorFactoryImpl ) fGrammarResolver . getDatatypeRegistry ( ) ; fDatatypeRegistry . expandRegistryToFullSchemaSet ( ) ; if ( root == null ) { return ; } String rootPrefix = root . getPrefix ( ) ; if ( rootPrefix == null || rootPrefix . length ( ) == 0 ) { String xmlns = root . getAttribute ( "xmlns" ) ; if ( xmlns . length ( ) == 0 ) root . setAttribute ( "xmlns" , SchemaSymbols . URI_SCHEMAFORSCHEMA ) ; } fTargetNSURIString = root . getAttribute ( SchemaSymbols . ATT_TARGETNAMESPACE ) ; if ( fTargetNSURIString == null ) { fTargetNSURIString = "" ; } fTargetNSURI = fStringPool . addSymbol ( fTargetNSURIString ) ; if ( fGrammarResolver == null ) { reportGenericSchemaError ( "Internal error: don't have a GrammarResolver for TraverseSchema" ) ; } else { if ( fSchemaGrammar . getComplexTypeRegistry ( ) == null ) { fSchemaGrammar . setComplexTypeRegistry ( fComplexTypeRegistry ) ; } else { fComplexTypeRegistry = fSchemaGrammar . getComplexTypeRegistry ( ) ; } if ( fSchemaGrammar . getAttirubteDeclRegistry ( ) == null ) { fSchemaGrammar . setAttributeDeclRegistry ( fAttributeDeclRegistry ) ; } else { fAttributeDeclRegistry = fSchemaGrammar . getAttirubteDeclRegistry ( ) ; } if ( fSchemaGrammar . getNamespacesScope ( ) == null ) { fSchemaGrammar . setNamespacesScope ( fNamespacesScope ) ; } else { fNamespacesScope = fSchemaGrammar . getNamespacesScope ( ) ; } fSchemaGrammar . setDatatypeRegistry ( fDatatypeRegistry ) ; fSchemaGrammar . setTargetNamespaceURI ( fTargetNSURIString ) ; fGrammarResolver . putGrammar ( fTargetNSURIString , fSchemaGrammar ) ; } NamedNodeMap schemaEltAttrs = root . getAttributes ( ) ; int i = 0 ; Attr sattr = null ; boolean seenXMLNS = false ; while ( ( sattr = ( Attr ) schemaEltAttrs . item ( i ++ ) ) != null ) { String attName = sattr . getName ( ) ; if ( attName . startsWith ( "xmlns:" ) ) { String attValue = sattr . getValue ( ) ; String prefix = attName . substring ( attName . indexOf ( ":" ) + 1 ) ; fNamespacesScope . setNamespaceForPrefix ( fStringPool . addSymbol ( prefix ) , fStringPool . addSymbol ( attValue ) ) ; } if ( attName . equals ( "xmlns" ) ) { String attValue = sattr . getValue ( ) ; fNamespacesScope . setNamespaceForPrefix ( fStringPool . addSymbol ( "" ) , fStringPool . addSymbol ( attValue ) ) ; seenXMLNS = true ; } } if ( ! seenXMLNS && fTargetNSURIString . length ( ) == 0 ) { fNamespacesScope . setNamespaceForPrefix ( fStringPool . addSymbol ( "" ) , fStringPool . addSymbol ( "" ) ) ; } fElementDefaultQualified = root . getAttribute ( SchemaSymbols . ATT_ELEMENTFORMDEFAULT ) . equals ( SchemaSymbols . ATTVAL_QUALIFIED ) ; fAttributeDefaultQualified = root . getAttribute ( SchemaSymbols . ATT_ATTRIBUTEFORMDEFAULT ) . equals ( SchemaSymbols . ATTVAL_QUALIFIED ) ; if ( fTargetNSURI == StringPool . EMPTY_STRING ) { fElementDefaultQualified = true ; } fCurrentScope = - 1 ; checkTopLevelDuplicateNames ( root ) ; extractTopLevel3Components ( root ) ; for ( Element child = XUtil . getFirstChildElement ( root ) ; child != null ; child = XUtil . getNextSiblingElement ( child ) ) { String name = child . getLocalName ( ) ; if ( name . equals ( SchemaSymbols . ELT_ANNOTATION ) ) { traverseAnnotationDecl ( child ) ; } else if ( name . equals ( SchemaSymbols . ELT_SIMPLETYPE ) ) { traverseSimpleTypeDecl ( child ) ; } else if ( name . equals ( SchemaSymbols . ELT_COMPLEXTYPE ) ) { traverseComplexTypeDecl ( child ) ; } else if ( name . equals ( SchemaSymbols . ELT_ELEMENT ) ) { traverseElementDecl ( child ) ; } else if ( name . equals ( SchemaSymbols . ELT_ATTRIBUTEGROUP ) ) { } else if ( name . equals ( SchemaSymbols . ELT_ATTRIBUTE ) ) { traverseAttributeDecl ( child , null , false ) ; } else if ( name . equals ( SchemaSymbols . ELT_GROUP ) ) { traverseGroupDecl ( child ) ; } else if ( name . equals ( SchemaSymbols . ELT_NOTATION ) ) { ; } else if ( name . equals ( SchemaSymbols . ELT_INCLUDE ) ) { traverseInclude ( child ) ; } else if ( name . equals ( SchemaSymbols . ELT_IMPORT ) ) { traverseImport ( child ) ; } } } private void checkTopLevelDuplicateNames ( Element root ) { } private void extractTopLevel3Components ( Element root ) { for ( Element child = XUtil . getFirstChildElement ( root ) ; child != null ; child = XUtil . getNextSiblingElement ( child ) ) { String name = child . getLocalName ( ) ; String compName = child . getAttribute ( SchemaSymbols . ATT_NAME ) ; if ( name . equals ( SchemaSymbols . ELT_ATTRIBUTEGROUP ) ) { fSchemaGrammar . topLevelAttrGrpDecls . put ( compName , child ) ; } else if ( name . equals ( SchemaSymbols . ELT_ATTRIBUTE ) ) { fSchemaGrammar . topLevelAttrDecls . put ( compName , child ) ; } else if ( name . equals ( SchemaSymbols . ELT_GROUP ) ) { fSchemaGrammar . topLevelGroupDecls . put ( compName , child ) ; } } } private String expandSystemId ( String systemId , String currentSystemId ) throws Exception { String id = systemId ; if ( id == null || id . length ( ) == 0 ) { return systemId ; } try { URL url = new URL ( id ) ; if ( url != null ) { return systemId ; } } catch ( MalformedURLException e ) { } id = fixURI ( id ) ; URL base = null ; URL url = null ; try { if ( currentSystemId == null ) { String dir ; try { dir = fixURI ( System . getProperty ( "user.dir" ) ) ; } catch ( SecurityException se ) { dir = "" ; } if ( ! dir . endsWith ( "/" ) ) { dir = dir + "/" ; } base = new URL ( "file" , "" , dir ) ; } else { base = new URL ( currentSystemId ) ; } url = new URL ( base , id ) ; } catch ( Exception e ) { } if ( url == null ) { return systemId ; } return url . toString ( ) ; } private static String fixURI ( String str ) { str = str . replace ( java . io . File . separatorChar , '/' ) ; if ( str . length ( ) >= 2 ) { char ch1 = str . charAt ( 1 ) ; if ( ch1 == ':' ) { char ch0 = Character . toUpperCase ( str . charAt ( 0 ) ) ; if ( ch0 >= 'A' && ch0 <= 'Z' ) { str = "/" + str ; } } } return str ; } private void traverseInclude ( Element includeDecl ) throws Exception { String location = includeDecl . getAttribute ( SchemaSymbols . ATT_SCHEMALOCATION ) ; InputSource source = null ; if ( fEntityResolver != null ) { source = fEntityResolver . resolveEntity ( "" , location ) ; } if ( source == null ) { location = expandSystemId ( location , fCurrentSchemaURL ) ; source = new InputSource ( location ) ; } else { if ( source . getPublicId ( ) != null ) location = source . getPublicId ( ) ; location += ( ',' + source . getSystemId ( ) ) ; } if ( fIncludeLocations . contains ( ( Object ) location ) ) { return ; } fIncludeLocations . addElement ( ( Object ) location ) ; DOMParser parser = new IgnoreWhitespaceParser ( ) ; parser . setEntityResolver ( new Resolver ( ) ) ; parser . setErrorHandler ( new ErrorHandler ( ) ) ; try { parser . setFeature ( "http://xml.org/sax/features/validation" , false ) ; parser . setFeature ( "http://xml.org/sax/features/namespaces" , true ) ; parser . setFeature ( "http://apache.org/xml/features/dom/defer-node-expansion" , false ) ; } catch ( org . xml . sax . SAXNotRecognizedException e ) { e . printStackTrace ( ) ; } catch ( org . xml . sax . SAXNotSupportedException e ) { e . printStackTrace ( ) ; } try { parser . parse ( source ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } catch ( SAXException e ) { } Document document = parser . getDocument ( ) ; Element root = null ; if ( document != null ) { root = document . getDocumentElement ( ) ; } if ( root != null ) { String targetNSURI = root . getAttribute ( SchemaSymbols . ATT_TARGETNAMESPACE ) ; if ( targetNSURI . length ( ) > 0 && ! targetNSURI . equals ( fTargetNSURIString ) ) { reportGenericSchemaError ( "included schema '" + location + "' has a different targetNameSpace '" + targetNSURI + "'" ) ; } else { boolean saveElementDefaultQualified = fElementDefaultQualified ; boolean saveAttributeDefaultQualified = fAttributeDefaultQualified ; int saveScope = fCurrentScope ; String savedSchemaURL = fCurrentSchemaURL ; Element saveRoot = fSchemaRootElement ; fSchemaRootElement = root ; fCurrentSchemaURL = location ; traverseIncludedSchema ( root ) ; fCurrentSchemaURL = savedSchemaURL ; fCurrentScope = saveScope ; fElementDefaultQualified = saveElementDefaultQualified ; fAttributeDefaultQualified = saveAttributeDefaultQualified ; fSchemaRootElement = saveRoot ; } } } private void traverseIncludedSchema ( Element root ) throws Exception { NamedNodeMap schemaEltAttrs = root . getAttributes ( ) ; int i = 0 ; Attr sattr = null ; boolean seenXMLNS = false ; while ( ( sattr = ( Attr ) schemaEltAttrs . item ( i ++ ) ) != null ) { String attName = sattr . getName ( ) ; if ( attName . startsWith ( "xmlns:" ) ) { String attValue = sattr . getValue ( ) ; String prefix = attName . substring ( attName . indexOf ( ":" ) + 1 ) ; fNamespacesScope . setNamespaceForPrefix ( fStringPool . addSymbol ( prefix ) , fStringPool . addSymbol ( attValue ) ) ; } if ( attName . equals ( "xmlns" ) ) { String attValue = sattr . getValue ( ) ; fNamespacesScope . setNamespaceForPrefix ( fStringPool . addSymbol ( "" ) , fStringPool . addSymbol ( attValue ) ) ; seenXMLNS = true ; } } if ( ! seenXMLNS && fTargetNSURIString . length ( ) == 0 ) { fNamespacesScope . setNamespaceForPrefix ( fStringPool . addSymbol ( "" ) , fStringPool . addSymbol ( "" ) ) ; } fElementDefaultQualified = root . getAttribute ( SchemaSymbols . ATT_ELEMENTFORMDEFAULT ) . equals ( SchemaSymbols . ATTVAL_QUALIFIED ) ; fAttributeDefaultQualified = root . getAttribute ( SchemaSymbols . ATT_ATTRIBUTEFORMDEFAULT ) . equals ( SchemaSymbols . ATTVAL_QUALIFIED ) ; if ( fTargetNSURI == StringPool . EMPTY_STRING ) { fElementDefaultQualified = true ; } fCurrentScope = - 1 ; checkTopLevelDuplicateNames ( root ) ; extractTopLevel3Components ( root ) ; for ( Element child = XUtil . getFirstChildElement ( root ) ; child != null ; child = XUtil . getNextSiblingElement ( child ) ) { String name = child . getLocalName ( ) ; if ( name . equals ( SchemaSymbols . ELT_ANNOTATION ) ) { traverseAnnotationDecl ( child ) ; } else if ( name . equals ( SchemaSymbols . ELT_SIMPLETYPE ) ) { traverseSimpleTypeDecl ( child ) ; } else if ( name . equals ( SchemaSymbols . ELT_COMPLEXTYPE ) ) { traverseComplexTypeDecl ( child ) ; } else if ( name . equals ( SchemaSymbols . ELT_ELEMENT ) ) { traverseElementDecl ( child ) ; } else if ( name . equals ( SchemaSymbols . ELT_ATTRIBUTEGROUP ) ) { } else if ( name . equals ( SchemaSymbols . ELT_ATTRIBUTE ) ) { traverseAttributeDecl ( child , null , false ) ; } else if ( name . equals ( SchemaSymbols . ELT_GROUP ) && child . getAttribute ( SchemaSymbols . ATT_REF ) . equals ( "" ) ) { } else if ( name . equals ( SchemaSymbols . ELT_NOTATION ) ) { ; } else if ( name . equals ( SchemaSymbols . ELT_INCLUDE ) ) { traverseInclude ( child ) ; } else if ( name . equals ( SchemaSymbols . ELT_IMPORT ) ) { traverseImport ( child ) ; } } } private void traverseImport ( Element importDecl ) throws Exception { String location = importDecl . getAttribute ( SchemaSymbols . ATT_SCHEMALOCATION ) ; InputSource source = null ; if ( fEntityResolver != null ) { source = fEntityResolver . resolveEntity ( "" , location ) ; } if ( source == null ) { location = expandSystemId ( location , fCurrentSchemaURL ) ; source = new InputSource ( location ) ; } else { if ( source . getPublicId ( ) != null ) location = source . getPublicId ( ) ; location += ( ',' + source . getSystemId ( ) ) ; } if ( fImportLocations . contains ( ( Object ) location ) ) { return ; } fImportLocations . addElement ( ( Object ) location ) ; String namespaceString = importDecl . getAttribute ( SchemaSymbols . ATT_NAMESPACE ) ; SchemaGrammar importedGrammar = ( SchemaGrammar ) fGrammarResolver . getGrammar ( namespaceString ) ; if ( importedGrammar == null ) { importedGrammar = new SchemaGrammar ( ) ; } DOMParser parser = new IgnoreWhitespaceParser ( ) ; parser . setEntityResolver ( new Resolver ( ) ) ; parser . setErrorHandler ( new ErrorHandler ( ) ) ; try { parser . setFeature ( "http://xml.org/sax/features/validation" , false ) ; parser . setFeature ( "http://xml.org/sax/features/namespaces" , true ) ; parser . setFeature ( "http://apache.org/xml/features/dom/defer-node-expansion" , false ) ; } catch ( org . xml . sax . SAXNotRecognizedException e ) { e . printStackTrace ( ) ; } catch ( org . xml . sax . SAXNotSupportedException e ) { e . printStackTrace ( ) ; } try { parser . parse ( source ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } catch ( SAXException e ) { e . printStackTrace ( ) ; } Document document = parser . getDocument ( ) ; Element root = null ; if ( document != null ) { root = document . getDocumentElement ( ) ; } if ( root != null ) { String targetNSURI = root . getAttribute ( SchemaSymbols . ATT_TARGETNAMESPACE ) ; if ( ! targetNSURI . equals ( namespaceString ) ) { reportGenericSchemaError ( "imported schema '" + location + "' has a different targetNameSpace '" + targetNSURI + "' from what is declared '" + namespaceString + "'." ) ; } else new TraverseSchema ( root , fStringPool , importedGrammar , fGrammarResolver , fErrorReporter , location , fEntityResolver ) ; } else { reportGenericSchemaError ( "Could not get the doc root for imported Schema file: " + location ) ; } } private void traverseAnnotationDecl ( Element comment ) { return ; } private Element checkContent ( Element elm , Element content , boolean isEmpty ) throws Exception { if ( content == null ) { if ( ! isEmpty ) { reportSchemaError ( SchemaMessageProvider . ContentError , new Object [ ] { elm . getAttribute ( SchemaSymbols . ATT_NAME ) } ) ; } return null ; } if ( content . getLocalName ( ) . equals ( SchemaSymbols . ELT_ANNOTATION ) ) { traverseAnnotationDecl ( content ) ; content = XUtil . getNextSiblingElement ( content ) ; if ( content == null ) { if ( ! isEmpty ) { reportSchemaError ( SchemaMessageProvider . ContentError , new Object [ ] { elm . getAttribute ( SchemaSymbols . ATT_NAME ) } ) ; } return null ; } if ( content . getLocalName ( ) . equals ( SchemaSymbols . ELT_ANNOTATION ) ) { reportSchemaError ( SchemaMessageProvider . AnnotationError , new Object [ ] { elm . getAttribute ( SchemaSymbols . ATT_NAME ) } ) ; return null ; } } return content ; } private DatatypeValidator findDTValidator ( Element elm , String baseTypeStr ) throws Exception { int baseType = fStringPool . addSymbol ( baseTypeStr ) ; String prefix = "" ; DatatypeValidator baseValidator = null ; String localpart = baseTypeStr ; int colonptr = baseTypeStr . indexOf ( ":" ) ; if ( colonptr > 0 ) { prefix = baseTypeStr . substring ( 0 , colonptr ) ; localpart = baseTypeStr . substring ( colonptr + 1 ) ; } String uri = resolvePrefixToURI ( prefix ) ; baseValidator = getDatatypeValidator ( uri , localpart ) ; if ( baseValidator == null ) { Element baseTypeNode = getTopLevelComponentByName ( SchemaSymbols . ELT_SIMPLETYPE , localpart ) ; if ( baseTypeNode != null ) { traverseSimpleTypeDecl ( baseTypeNode ) ; baseValidator = getDatatypeValidator ( uri , localpart ) ; } } if ( baseValidator == null ) { reportSchemaError ( SchemaMessageProvider . UnknownBaseDatatype , new Object [ ] { elm . getAttribute ( SchemaSymbols . ATT_BASE ) , elm . getAttribute ( SchemaSymbols . ATT_NAME ) } ) ; } return baseValidator ; } private int traverseSimpleTypeDecl ( Element simpleTypeDecl ) throws Exception { if ( DEBUG_UNION ) { System . out . println ( "----------->CR traverseSimpleType()" ) ; } String nameProperty = simpleTypeDecl . getAttribute ( SchemaSymbols . ATT_NAME ) ; boolean list = false ; boolean union = false ; boolean restriction = false ; int newSimpleTypeName = - 1 ; if ( nameProperty . equals ( "" ) ) { newSimpleTypeName = fStringPool . addSymbol ( "#S#" + fSimpleTypeAnonCount ++ ) ; } else newSimpleTypeName = fStringPool . addSymbol ( nameProperty ) ; Element content = XUtil . getFirstChildElement ( simpleTypeDecl ) ; content = checkContent ( simpleTypeDecl , content , false ) ; if ( content == null ) { return ( - 1 ) ; } String varietyProperty = content . getLocalName ( ) ; String baseTypeQNameProperty = null ; Vector dTValidators = null ; int size = 0 ; StringTokenizer unionMembers = null ; int numOfTypes = 0 ; if ( DEBUG_UNION ) { System . out . println ( "[varietyProperty]:" + varietyProperty ) ; } if ( varietyProperty . equals ( SchemaSymbols . ELT_LIST ) ) { baseTypeQNameProperty = content . getAttribute ( SchemaSymbols . ATT_ITEMTYPE ) ; list = true ; } else if ( varietyProperty . equals ( SchemaSymbols . ELT_RESTRICTION ) ) { baseTypeQNameProperty = content . getAttribute ( SchemaSymbols . ATT_BASE ) ; restriction = true ; } else if ( varietyProperty . equals ( SchemaSymbols . ELT_UNION ) ) { union = true ; baseTypeQNameProperty = content . getAttribute ( SchemaSymbols . ATT_MEMBERTYPES ) ; if ( baseTypeQNameProperty != "" ) { unionMembers = new StringTokenizer ( baseTypeQNameProperty ) ; size = unionMembers . countTokens ( ) ; } else { size = 1 ; } dTValidators = new Vector ( size , 2 ) ; } else { reportSchemaError ( SchemaMessageProvider . FeatureUnsupported , new Object [ ] { varietyProperty } ) ; return - 1 ; } int typeNameIndex ; DatatypeValidator baseValidator = null ; if ( DEBUG_UNION ) { System . out . println ( "[nameProperty]= " + nameProperty ) ; System . out . println ( "[base]= " + baseTypeQNameProperty + ";" ) ; System . out . println ( "[size]= " + size ) ; if ( unionMembers != null ) { System . out . println ( "[unionMembers]= " + unionMembers . toString ( ) ) ; } } if ( baseTypeQNameProperty == "" ) { content = XUtil . getFirstChildElement ( content ) ; content = checkContent ( simpleTypeDecl , content , false ) ; if ( content == null ) { return ( - 1 ) ; } if ( content . getLocalName ( ) . equals ( SchemaSymbols . ELT_SIMPLETYPE ) ) { typeNameIndex = traverseSimpleTypeDecl ( content ) ; if ( DEBUG_UNION ) { System . out . println ( "[After traverseSimpleTypeDecl]: " + fStringPool . toString ( typeNameIndex ) ) ; System . out . println ( "[traverseSimpleTypeDecl]: " + nameProperty ) ; } if ( typeNameIndex != - 1 ) { baseValidator = fDatatypeRegistry . getDatatypeValidator ( fStringPool . toString ( typeNameIndex ) ) ; if ( baseValidator != null && union ) { dTValidators . addElement ( ( DatatypeValidator ) baseValidator ) ; } } if ( typeNameIndex == - 1 || baseValidator == null ) { reportSchemaError ( SchemaMessageProvider . UnknownBaseDatatype , new Object [ ] { content . getAttribute ( SchemaSymbols . ATT_BASE ) , content . getAttribute ( SchemaSymbols . ATT_NAME ) } ) ; return - 1 ; } } } else { numOfTypes = 1 ; if ( union ) { numOfTypes = size ; } for ( int i = 0 ; i < numOfTypes ; i ++ ) { if ( union ) { baseTypeQNameProperty = unionMembers . nextToken ( ) ; } baseValidator = findDTValidator ( simpleTypeDecl , baseTypeQNameProperty ) ; if ( baseValidator == null ) { return ( - 1 ) ; } if ( union ) { dTValidators . addElement ( ( DatatypeValidator ) baseValidator ) ; } if ( list && ( baseValidator instanceof UnionDatatypeValidator ) ) { reportSchemaError ( SchemaMessageProvider . UnknownBaseDatatype , new Object [ ] { simpleTypeDecl . getAttribute ( SchemaSymbols . ATT_BASE ) , simpleTypeDecl . getAttribute ( SchemaSymbols . ATT_NAME ) } ) ; return - 1 ; } } } if ( baseTypeQNameProperty == "" ) { content = XUtil . getNextSiblingElement ( content ) ; } else { content = XUtil . getFirstChildElement ( content ) ; } if ( union ) { int index = size ; while ( content != null ) { if ( DEBUG_UNION ) { System . out . println ( "[start Union types traversal] + " + content . getNodeName ( ) ) ; System . out . println ( index + "-Getting all other simpletypes" ) ; System . out . println ( "content: " + content . getNodeName ( ) ) ; } typeNameIndex = traverseSimpleTypeDecl ( content ) ; if ( typeNameIndex != - 1 ) { baseValidator = fDatatypeRegistry . getDatatypeValidator ( fStringPool . toString ( typeNameIndex ) ) ; if ( baseValidator != null ) { if ( DEBUG_UNION ) { System . out . println ( "validator to add: " + baseValidator . toString ( ) ) ; } dTValidators . addElement ( ( DatatypeValidator ) baseValidator ) ; } } if ( baseValidator == null || typeNameIndex == - 1 ) { reportSchemaError ( SchemaMessageProvider . UnknownBaseDatatype , new Object [ ] { simpleTypeDecl . getAttribute ( SchemaSymbols . ATT_BASE ) , simpleTypeDecl . getAttribute ( SchemaSymbols . ATT_NAME ) } ) ; return ( - 1 ) ; } content = XUtil . getNextSiblingElement ( content ) ; } } Hashtable facetData = null ; int numFacets = 0 ; if ( restriction && content != null ) { int numEnumerationLiterals = 0 ; facetData = new Hashtable ( ) ; Vector enumData = new Vector ( ) ; content = checkContent ( simpleTypeDecl , content , true ) ; while ( content != null ) { if ( content . getNodeType ( ) == Node . ELEMENT_NODE ) { numFacets ++ ; if ( content . getLocalName ( ) . equals ( SchemaSymbols . ELT_ENUMERATION ) ) { numEnumerationLiterals ++ ; String enumVal = content . getAttribute ( SchemaSymbols . ATT_VALUE ) ; enumData . addElement ( enumVal ) ; checkContent ( simpleTypeDecl , XUtil . getFirstChildElement ( content ) , true ) ; } else if ( content . getLocalName ( ) . equals ( SchemaSymbols . ELT_ANNOTATION ) ) { reportSchemaError ( SchemaMessageProvider . ContentError , new Object [ ] { simpleTypeDecl . getAttribute ( SchemaSymbols . ATT_NAME ) } ) ; } else { facetData . put ( content . getLocalName ( ) , content . getAttribute ( SchemaSymbols . ATT_VALUE ) ) ; checkContent ( simpleTypeDecl , XUtil . getFirstChildElement ( content ) , true ) ; } } content = XUtil . getNextSiblingElement ( content ) ; } if ( numEnumerationLiterals > 0 ) { facetData . put ( SchemaSymbols . ELT_ENUMERATION , enumData ) ; } } else if ( list && content != null ) { if ( baseTypeQNameProperty != "" ) { content = checkContent ( simpleTypeDecl , content , true ) ; } else { reportSchemaError ( SchemaMessageProvider . ListUnionRestrictionError , new Object [ ] { simpleTypeDecl . getAttribute ( SchemaSymbols . ATT_NAME ) } ) ; } } else if ( union && content != null ) { if ( baseTypeQNameProperty != "" ) { content = checkContent ( simpleTypeDecl , content , true ) ; } else { reportSchemaError ( SchemaMessageProvider . ListUnionRestrictionError , new Object [ ] { simpleTypeDecl . getAttribute ( SchemaSymbols . ATT_NAME ) } ) ; } } String nameOfType = fStringPool . toString ( newSimpleTypeName ) ; if ( fTargetNSURIString . length ( ) != 0 ) { nameOfType = fTargetNSURIString + "," + nameOfType ; } try { DatatypeValidator newValidator = fDatatypeRegistry . getDatatypeValidator ( nameOfType ) ; if ( newValidator == null ) { if ( list ) { fDatatypeRegistry . createDatatypeValidator ( nameOfType , baseValidator , facetData , true ) ; } else if ( restriction ) { fDatatypeRegistry . createDatatypeValidator ( nameOfType , baseValidator , facetData , false ) ; } else { fDatatypeRegistry . createDatatypeValidator ( nameOfType , dTValidators ) ; } } } catch ( Exception e ) { reportSchemaError ( SchemaMessageProvider . DatatypeError , new Object [ ] { e . getMessage ( ) } ) ; } return fStringPool . addSymbol ( nameOfType ) ; } private int traverseAny ( Element child ) throws Exception { int anyIndex = - 1 ; String namespace = child . getAttribute ( SchemaSymbols . ATT_NAMESPACE ) . trim ( ) ; String processContents = child . getAttribute ( "processContents" ) . trim ( ) ; int processContentsAny = XMLContentSpec . CONTENTSPECNODE_ANY ; int processContentsAnyOther = XMLContentSpec . CONTENTSPECNODE_ANY_OTHER ; int processContentsAnyLocal = XMLContentSpec . CONTENTSPECNODE_ANY_LOCAL ; if ( processContents . length ( ) > 0 && ! processContents . equals ( "strict" ) ) { if ( processContents . equals ( "lax" ) ) { processContentsAny = XMLContentSpec . CONTENTSPECNODE_ANY_LAX ; processContentsAnyOther = XMLContentSpec . CONTENTSPECNODE_ANY_OTHER_LAX ; processContentsAnyLocal = XMLContentSpec . CONTENTSPECNODE_ANY_LOCAL_LAX ; } else if ( processContents . equals ( "skip" ) ) { processContentsAny = XMLContentSpec . CONTENTSPECNODE_ANY_SKIP ; processContentsAnyOther = XMLContentSpec . CONTENTSPECNODE_ANY_OTHER_SKIP ; processContentsAnyLocal = XMLContentSpec . CONTENTSPECNODE_ANY_LOCAL_SKIP ; } } if ( namespace . length ( ) == 0 || namespace . equals ( "##any" ) ) { anyIndex = fSchemaGrammar . addContentSpecNode ( processContentsAny , - 1 , - 1 , false ) ; } else if ( namespace . equals ( "##other" ) ) { String uri = child . getOwnerDocument ( ) . getDocumentElement ( ) . getAttribute ( "targetNamespace" ) ; int uriIndex = fStringPool . addSymbol ( uri ) ; anyIndex = fSchemaGrammar . addContentSpecNode ( processContentsAnyOther , - 1 , uriIndex , false ) ; } else if ( namespace . equals ( "##local" ) ) { anyIndex = fSchemaGrammar . addContentSpecNode ( processContentsAnyLocal , - 1 , - 1 , false ) ; } else if ( namespace . length ( ) > 0 ) { StringTokenizer tokenizer = new StringTokenizer ( namespace ) ; Vector tokens = new Vector ( ) ; while ( tokenizer . hasMoreElements ( ) ) { String token = tokenizer . nextToken ( ) ; if ( token . equals ( "##targetNamespace" ) ) { token = child . getOwnerDocument ( ) . getDocumentElement ( ) . getAttribute ( "targetNamespace" ) ; } tokens . addElement ( token ) ; } String uri = ( String ) tokens . elementAt ( 0 ) ; int uriIndex = fStringPool . addSymbol ( uri ) ; int leafIndex = fSchemaGrammar . addContentSpecNode ( processContentsAny , - 1 , uriIndex , false ) ; int valueIndex = leafIndex ; int count = tokens . size ( ) ; if ( count > 1 ) { uri = ( String ) tokens . elementAt ( 1 ) ; uriIndex = fStringPool . addSymbol ( uri ) ; leafIndex = fSchemaGrammar . addContentSpecNode ( processContentsAny , - 1 , uriIndex , false ) ; int otherValueIndex = leafIndex ; int choiceIndex = fSchemaGrammar . addContentSpecNode ( XMLContentSpec . CONTENTSPECNODE_CHOICE , valueIndex , otherValueIndex , false ) ; for ( int i = 2 ; i < count ; i ++ ) { uri = ( String ) tokens . elementAt ( i ) ; uriIndex = fStringPool . addSymbol ( uri ) ; leafIndex = fSchemaGrammar . addContentSpecNode ( processContentsAny , - 1 , uriIndex , false ) ; otherValueIndex = leafIndex ; choiceIndex = fSchemaGrammar . addContentSpecNode ( XMLContentSpec . CONTENTSPECNODE_CHOICE , choiceIndex , otherValueIndex , false ) ; } anyIndex = choiceIndex ; } else { anyIndex = leafIndex ; } } else { reportGenericSchemaError ( "Empty namespace attribute for any element" ) ; } return anyIndex ; } public DatatypeValidator getDatatypeValidator ( String uri , String localpart ) { DatatypeValidator dv = null ; if ( uri . length ( ) == 0 || uri . equals ( SchemaSymbols . URI_SCHEMAFORSCHEMA ) ) { dv = fDatatypeRegistry . getDatatypeValidator ( localpart ) ; } else { dv = fDatatypeRegistry . getDatatypeValidator ( uri + "," + localpart ) ; } return dv ; } private XMLAttributeDecl traverseAnyAttribute ( Element anyAttributeDecl ) throws Exception { XMLAttributeDecl anyAttDecl = new XMLAttributeDecl ( ) ; String processContents = anyAttributeDecl . getAttribute ( SchemaSymbols . ATT_PROCESSCONTENTS ) . trim ( ) ; String namespace = anyAttributeDecl . getAttribute ( SchemaSymbols . ATT_NAMESPACE ) . trim ( ) ; String curTargetUri = anyAttributeDecl . getOwnerDocument ( ) . getDocumentElement ( ) . getAttribute ( "targetNamespace" ) ; if ( namespace . length ( ) == 0 || namespace . equals ( SchemaSymbols . ATTVAL_TWOPOUNDANY ) ) { anyAttDecl . type = XMLAttributeDecl . TYPE_ANY_ANY ; } else if ( namespace . equals ( SchemaSymbols . ATTVAL_TWOPOUNDOTHER ) ) { anyAttDecl . type = XMLAttributeDecl . TYPE_ANY_OTHER ; anyAttDecl . name . uri = fStringPool . addSymbol ( curTargetUri ) ; } else if ( namespace . equals ( SchemaSymbols . ATTVAL_TWOPOUNDLOCAL ) ) { anyAttDecl . type = XMLAttributeDecl . TYPE_ANY_LOCAL ; } else if ( namespace . length ( ) > 0 ) { anyAttDecl . type = XMLAttributeDecl . TYPE_ANY_LIST ; StringTokenizer tokenizer = new StringTokenizer ( namespace ) ; int aStringList = fStringPool . startStringList ( ) ; Vector tokens = new Vector ( ) ; while ( tokenizer . hasMoreElements ( ) ) { String token = tokenizer . nextToken ( ) ; if ( token . equals ( "##targetNamespace" ) ) { token = curTargetUri ; } if ( ! fStringPool . addStringToList ( aStringList , fStringPool . addSymbol ( token ) ) ) { reportGenericSchemaError ( "Internal StringPool error when reading the " + "namespace attribute for anyattribute declaration" ) ; } } fStringPool . finishStringList ( aStringList ) ; anyAttDecl . enumeration = aStringList ; } else { reportGenericSchemaError ( "Empty namespace attribute for anyattribute declaration" ) ; } anyAttDecl . defaultType = XMLAttributeDecl . PROCESSCONTENTS_STRICT ; if ( processContents . equals ( SchemaSymbols . ATTVAL_SKIP ) ) { anyAttDecl . defaultType = XMLAttributeDecl . PROCESSCONTENTS_SKIP ; } else if ( processContents . equals ( SchemaSymbols . ATTVAL_LAX ) ) { anyAttDecl . defaultType = XMLAttributeDecl . PROCESSCONTENTS_LAX ; } return anyAttDecl ; } private XMLAttributeDecl mergeTwoAnyAttribute ( XMLAttributeDecl oneAny , XMLAttributeDecl anotherAny ) { if ( oneAny . type == - 1 ) { return oneAny ; } if ( anotherAny . type == - 1 ) { return anotherAny ; } if ( oneAny . type == XMLAttributeDecl . TYPE_ANY_ANY ) { return anotherAny ; } if ( anotherAny . type == XMLAttributeDecl . TYPE_ANY_ANY ) { return oneAny ; } if ( oneAny . type == XMLAttributeDecl . TYPE_ANY_OTHER ) { if ( anotherAny . type == XMLAttributeDecl . TYPE_ANY_OTHER ) { if ( anotherAny . name . uri == oneAny . name . uri ) { return oneAny ; } else { oneAny . type = - 1 ; return oneAny ; } } else if ( anotherAny . type == XMLAttributeDecl . TYPE_ANY_LOCAL ) { return anotherAny ; } else if ( anotherAny . type == XMLAttributeDecl . TYPE_ANY_LIST ) { if ( ! fStringPool . stringInList ( anotherAny . enumeration , oneAny . name . uri ) ) { return anotherAny ; } else { int [ ] anotherAnyURIs = fStringPool . stringListAsIntArray ( anotherAny . enumeration ) ; int newList = fStringPool . startStringList ( ) ; for ( int i = 0 ; i < anotherAnyURIs . length ; i ++ ) { if ( anotherAnyURIs [ i ] != oneAny . name . uri ) { fStringPool . addStringToList ( newList , anotherAnyURIs [ i ] ) ; } } fStringPool . finishStringList ( newList ) ; anotherAny . enumeration = newList ; return anotherAny ; } } } if ( oneAny . type == XMLAttributeDecl . TYPE_ANY_LOCAL ) { if ( anotherAny . type == XMLAttributeDecl . TYPE_ANY_OTHER || anotherAny . type == XMLAttributeDecl . TYPE_ANY_LOCAL ) { return oneAny ; } else if ( anotherAny . type == XMLAttributeDecl . TYPE_ANY_LIST ) { oneAny . type = - 1 ; return oneAny ; } } if ( oneAny . type == XMLAttributeDecl . TYPE_ANY_LIST ) { if ( anotherAny . type == XMLAttributeDecl . TYPE_ANY_OTHER ) { if ( ! fStringPool . stringInList ( oneAny . enumeration , anotherAny . name . uri ) ) { return oneAny ; } else { int [ ] oneAnyURIs = fStringPool . stringListAsIntArray ( oneAny . enumeration ) ; int newList = fStringPool . startStringList ( ) ; for ( int i = 0 ; i < oneAnyURIs . length ; i ++ ) { if ( oneAnyURIs [ i ] != anotherAny . name . uri ) { fStringPool . addStringToList ( newList , oneAnyURIs [ i ] ) ; } } fStringPool . finishStringList ( newList ) ; oneAny . enumeration = newList ; return oneAny ; } } else if ( anotherAny . type == XMLAttributeDecl . TYPE_ANY_LOCAL ) { oneAny . type = - 1 ; return oneAny ; } else if ( anotherAny . type == XMLAttributeDecl . TYPE_ANY_LIST ) { int [ ] result = intersect2sets ( fStringPool . stringListAsIntArray ( oneAny . enumeration ) , fStringPool . stringListAsIntArray ( anotherAny . enumeration ) ) ; int newList = fStringPool . startStringList ( ) ; for ( int i = 0 ; i < result . length ; i ++ ) { fStringPool . addStringToList ( newList , result [ i ] ) ; } fStringPool . finishStringList ( newList ) ; oneAny . enumeration = newList ; return oneAny ; } } return oneAny ; } int [ ] intersect2sets ( int [ ] one , int [ ] theOther ) { int [ ] result = new int [ ( one . length > theOther . length ? one . length : theOther . length ) ] ; int count = 0 ; for ( int i = 0 ; i < one . length ; i ++ ) { for ( int j = 0 ; j < theOther . length ; j ++ ) { if ( one [ i ] == theOther [ j ] ) { result [ count ++ ] = one [ i ] ; } } } int [ ] result2 = new int [ count ] ; System . arraycopy ( result , 0 , result2 , 0 , count ) ; return result2 ; } private int traverseComplexTypeDecl ( Element complexTypeDecl ) throws Exception { String isAbstract = complexTypeDecl . getAttribute ( SchemaSymbols . ATT_ABSTRACT ) ; String blockSet = complexTypeDecl . getAttribute ( SchemaSymbols . ATT_BLOCK ) ; String finalSet = complexTypeDecl . getAttribute ( SchemaSymbols . ATT_FINAL ) ; String typeId = complexTypeDecl . getAttribute ( SchemaSymbols . ATTVAL_ID ) ; String typeName = complexTypeDecl . getAttribute ( SchemaSymbols . ATT_NAME ) ; String mixed = complexTypeDecl . getAttribute ( SchemaSymbols . ATT_MIXED ) ; boolean isNamedType = false ; if ( DEBUGGING ) System . out . println ( "traversing complex Type : " + typeName ) ; if ( typeName . equals ( "" ) ) { typeName = "#" + fAnonTypeCount ++ ; } else { fCurrentTypeNameStack . push ( typeName ) ; isNamedType = true ; } int typeNameIndex = fStringPool . addSymbol ( typeName ) ; if ( isTopLevel ( complexTypeDecl ) ) { String fullName = fTargetNSURIString + "," + typeName ; ComplexTypeInfo temp = ( ComplexTypeInfo ) fComplexTypeRegistry . get ( fullName ) ; if ( temp != null ) { return fStringPool . addSymbol ( fullName ) ; } } int scopeDefined = fScopeCount ++ ; int previousScope = fCurrentScope ; fCurrentScope = scopeDefined ; Element child = null ; ComplexTypeInfo typeInfo = new ComplexTypeInfo ( ) ; try { child = checkContent ( complexTypeDecl , XUtil . getFirstChildElement ( complexTypeDecl ) , true ) ; if ( child == null ) { processComplexContent ( typeNameIndex , child , typeInfo , null , false ) ; } else { String childName = child . getLocalName ( ) ; int index = - 2 ; if ( childName . equals ( SchemaSymbols . ELT_SIMPLECONTENT ) ) { traverseSimpleContentDecl ( typeNameIndex , child , typeInfo ) ; if ( XUtil . getNextSiblingElement ( child ) != null ) throw new ComplexTypeRecoverableError ( "Invalid child following the simpleContent child in the complexType" ) ; } else if ( childName . equals ( SchemaSymbols . ELT_COMPLEXCONTENT ) ) { traverseComplexContentDecl ( typeNameIndex , child , typeInfo , mixed . equals ( SchemaSymbols . ATTVAL_TRUE ) ? true : false ) ; if ( XUtil . getNextSiblingElement ( child ) != null ) throw new ComplexTypeRecoverableError ( "Invalid child following the complexContent child in the complexType" ) ; } else { processComplexContent ( typeNameIndex , child , typeInfo , null , mixed . equals ( SchemaSymbols . ATTVAL_TRUE ) ? true : false ) ; } } } catch ( ComplexTypeRecoverableError e ) { String message = e . getMessage ( ) ; handleComplexTypeError ( message , typeNameIndex , typeInfo ) ; } typeInfo . scopeDefined = scopeDefined ; typeInfo . blockSet = parseBlockSet ( blockSet ) ; typeInfo . finalSet = parseFinalSet ( finalSet ) ; typeInfo . isAbstract = isAbstract . equals ( SchemaSymbols . ATTVAL_TRUE ) ? true : false ; if ( ! typeName . startsWith ( "#" ) ) { typeName = fTargetNSURIString + "," + typeName ; } typeInfo . typeName = new String ( typeName ) ; if ( DEBUGGING ) System . out . println ( ">>>add complex Type to Registry: " + typeName + " baseDTValidator=" + typeInfo . baseDataTypeValidator + " baseCTInfo=" + typeInfo . baseComplexTypeInfo + " derivedBy=" + typeInfo . derivedBy + " contentType=" + typeInfo . contentType + " contentSpecHandle=" + typeInfo . contentSpecHandle + " datatypeValidator=" + typeInfo . datatypeValidator ) ; fComplexTypeRegistry . put ( typeName , typeInfo ) ; fCurrentScope = previousScope ; if ( isNamedType ) { fCurrentTypeNameStack . pop ( ) ; checkRecursingComplexType ( ) ; } fSchemaGrammar . setElementComplexTypeInfo ( typeInfo . templateElementIndex , typeInfo ) ; typeNameIndex = fStringPool . addSymbol ( typeName ) ; return typeNameIndex ; } private void traverseSimpleContentDecl ( int typeNameIndex , Element simpleContentDecl , ComplexTypeInfo typeInfo ) throws Exception { String typeName = fStringPool . toString ( typeNameIndex ) ; String simpleContentTypeId = simpleContentDecl . getAttribute ( SchemaSymbols . ATTVAL_ID ) ; typeInfo . contentType = XMLElementDecl . TYPE_SIMPLE ; typeInfo . contentSpecHandle = - 1 ; Element simpleContent = checkContent ( simpleContentDecl , XUtil . getFirstChildElement ( simpleContentDecl ) , false ) ; if ( simpleContent == null ) { throw new ComplexTypeRecoverableError ( ) ; } String simpleContentName = simpleContent . getLocalName ( ) ; if ( simpleContentName . equals ( SchemaSymbols . ELT_RESTRICTION ) ) typeInfo . derivedBy = SchemaSymbols . RESTRICTION ; else if ( simpleContentName . equals ( SchemaSymbols . ELT_EXTENSION ) ) typeInfo . derivedBy = SchemaSymbols . EXTENSION ; else { throw new ComplexTypeRecoverableError ( "The content of the simpleContent element is invalid.  The " + "content must be RESTRICTION or EXTENSION" ) ; } String base = simpleContent . getAttribute ( SchemaSymbols . ATT_BASE ) ; String typeId = simpleContent . getAttribute ( SchemaSymbols . ATTVAL_ID ) ; Element content = checkContent ( simpleContent , XUtil . getFirstChildElement ( simpleContent ) , true ) ; if ( base . length ( ) == 0 ) { throw new ComplexTypeRecoverableError ( "The BASE attribute must be specified for the " + "RESTRICTION or EXTENSION element" ) ; } QName baseQName = parseBase ( base ) ; processBaseTypeInfo ( baseQName , typeInfo ) ; if ( typeInfo . baseComplexTypeInfo != null ) { if ( typeInfo . baseComplexTypeInfo . contentSpecHandle > - 1 ) { throw new ComplexTypeRecoverableError ( "The type '" + base + "' specified as the " + "base in the simpleContent element must not have complexContent" ) ; } } Element attrNode = null ; if ( typeInfo . derivedBy == SchemaSymbols . RESTRICTION ) { if ( typeInfo . baseDataTypeValidator != null ) { throw new ComplexTypeRecoverableError ( "The type '" + base + "' is a simple type.  It cannot be used in a " + "derivation by RESTRICTION for a complexType" ) ; } else { typeInfo . baseDataTypeValidator = typeInfo . baseComplexTypeInfo . datatypeValidator ; } if ( content . getLocalName ( ) . equals ( SchemaSymbols . ELT_SIMPLETYPE ) ) { int simpleTypeNameIndex = traverseSimpleTypeDecl ( content ) ; if ( simpleTypeNameIndex != - 1 ) { typeInfo . baseDataTypeValidator = fDatatypeRegistry . getDatatypeValidator ( fStringPool . toString ( simpleTypeNameIndex ) ) ; content = XUtil . getNextSiblingElement ( content ) ; } else { throw new ComplexTypeRecoverableError ( ) ; } } int numEnumerationLiterals = 0 ; int numFacets = 0 ; Hashtable facetData = new Hashtable ( ) ; Vector enumData = new Vector ( ) ; Element child ; for ( child = content ; child != null && ( child . getLocalName ( ) . equals ( SchemaSymbols . ELT_MINEXCLUSIVE ) || child . getLocalName ( ) . equals ( SchemaSymbols . ELT_MININCLUSIVE ) || child . getLocalName ( ) . equals ( SchemaSymbols . ELT_MAXEXCLUSIVE ) || child . getLocalName ( ) . equals ( SchemaSymbols . ELT_MAXINCLUSIVE ) || child . getLocalName ( ) . equals ( SchemaSymbols . ELT_PRECISION ) || child . getLocalName ( ) . equals ( SchemaSymbols . ELT_SCALE ) || child . getLocalName ( ) . equals ( SchemaSymbols . ELT_LENGTH ) || child . getLocalName ( ) . equals ( SchemaSymbols . ELT_MINLENGTH ) || child . getLocalName ( ) . equals ( SchemaSymbols . ELT_MAXLENGTH ) || child . getLocalName ( ) . equals ( SchemaSymbols . ELT_ENCODING ) || child . getLocalName ( ) . equals ( SchemaSymbols . ELT_PERIOD ) || child . getLocalName ( ) . equals ( SchemaSymbols . ELT_DURATION ) || child . getLocalName ( ) . equals ( SchemaSymbols . ELT_ENUMERATION ) || child . getLocalName ( ) . equals ( SchemaSymbols . ELT_PATTERN ) || child . getLocalName ( ) . equals ( SchemaSymbols . ELT_ANNOTATION ) ) ; child = XUtil . getNextSiblingElement ( child ) ) { if ( child . getNodeType ( ) == Node . ELEMENT_NODE ) { Element facetElt = ( Element ) child ; numFacets ++ ; if ( facetElt . getLocalName ( ) . equals ( SchemaSymbols . ELT_ENUMERATION ) ) { numEnumerationLiterals ++ ; enumData . addElement ( facetElt . getAttribute ( SchemaSymbols . ATT_VALUE ) ) ; Element enumContent = XUtil . getFirstChildElement ( facetElt ) ; if ( enumContent != null && enumContent . getLocalName ( ) . equals ( SchemaSymbols . ELT_ANNOTATION ) ) { traverseAnnotationDecl ( child ) ; } } else { facetData . put ( facetElt . getLocalName ( ) , facetElt . getAttribute ( SchemaSymbols . ATT_VALUE ) ) ; } } } if ( numEnumerationLiterals > 0 ) { facetData . put ( SchemaSymbols . ELT_ENUMERATION , enumData ) ; } if ( numFacets > 0 ) { typeInfo . datatypeValidator = fDatatypeRegistry . createDatatypeValidator ( typeName , typeInfo . baseDataTypeValidator , facetData , false ) ; } else typeInfo . datatypeValidator = typeInfo . baseDataTypeValidator ; if ( child != null ) { if ( ! isAttrOrAttrGroup ( child ) ) { throw new ComplexTypeRecoverableError ( "Invalid child in the RESTRICTION element of simpleContent" ) ; } else attrNode = child ; } } else { if ( typeInfo . baseComplexTypeInfo != null ) typeInfo . baseDataTypeValidator = typeInfo . baseComplexTypeInfo . datatypeValidator ; typeInfo . datatypeValidator = typeInfo . baseDataTypeValidator ; if ( content != null ) { if ( ! isAttrOrAttrGroup ( content ) ) { throw new ComplexTypeRecoverableError ( "Only annotations and attributes are allowed in the " + "content of an EXTENSION element for a complexType" ) ; } else { attrNode = content ; } } } int templateElementNameIndex = fStringPool . addSymbol ( "$" + typeName ) ; typeInfo . templateElementIndex = fSchemaGrammar . addElementDecl ( new QName ( - 1 , templateElementNameIndex , typeNameIndex , fTargetNSURI ) , ( fTargetNSURI == - 1 ) ? - 1 : fCurrentScope , typeInfo . scopeDefined , typeInfo . contentType , typeInfo . contentSpecHandle , - 1 , typeInfo . datatypeValidator ) ; typeInfo . attlistHead = fSchemaGrammar . getFirstAttributeDeclIndex ( typeInfo . templateElementIndex ) ; processAttributes ( attrNode , baseQName , typeInfo ) ; if ( XUtil . getNextSiblingElement ( simpleContent ) != null ) throw new ComplexTypeRecoverableError ( "Invalid child following the RESTRICTION or EXTENSION element in the " + "complex type definition" ) ; } private void traverseComplexContentDecl ( int typeNameIndex , Element complexContentDecl , ComplexTypeInfo typeInfo , boolean mixedOnComplexTypeDecl ) throws Exception { String typeName = fStringPool . toString ( typeNameIndex ) ; String typeId = complexContentDecl . getAttribute ( SchemaSymbols . ATTVAL_ID ) ; String mixed = complexContentDecl . getAttribute ( SchemaSymbols . ATT_MIXED ) ; boolean isMixed = mixedOnComplexTypeDecl ; if ( mixed . equals ( SchemaSymbols . ATTVAL_TRUE ) ) isMixed = true ; else if ( mixed . equals ( SchemaSymbols . ATTVAL_FALSE ) ) isMixed = false ; typeInfo . datatypeValidator = null ; typeInfo . baseDataTypeValidator = null ; Element complexContent = checkContent ( complexContentDecl , XUtil . getFirstChildElement ( complexContentDecl ) , false ) ; if ( complexContent == null ) { throw new ComplexTypeRecoverableError ( ) ; } String complexContentName = complexContent . getLocalName ( ) ; if ( complexContentName . equals ( SchemaSymbols . ELT_RESTRICTION ) ) typeInfo . derivedBy = SchemaSymbols . RESTRICTION ; else if ( complexContentName . equals ( SchemaSymbols . ELT_EXTENSION ) ) typeInfo . derivedBy = SchemaSymbols . EXTENSION ; else { throw new ComplexTypeRecoverableError ( "The content of the complexContent element is invalid. " + "The content must be RESTRICTION or EXTENSION" ) ; } String base = complexContent . getAttribute ( SchemaSymbols . ATT_BASE ) ; String complexContentTypeId = complexContent . getAttribute ( SchemaSymbols . ATTVAL_ID ) ; Element content = checkContent ( complexContent , XUtil . getFirstChildElement ( complexContent ) , true ) ; if ( base . length ( ) == 0 ) { throw new ComplexTypeRecoverableError ( "The BASE attribute must be specified for the " + "RESTRICTION or EXTENSION element" ) ; } QName baseQName = parseBase ( base ) ; String baseTypeURI = fStringPool . toString ( baseQName . uri ) ; String baseLocalName = fStringPool . toString ( baseQName . localpart ) ; if ( ! ( baseTypeURI . equals ( SchemaSymbols . URI_SCHEMAFORSCHEMA ) && baseLocalName . equals ( "anyType" ) ) ) { processBaseTypeInfo ( baseQName , typeInfo ) ; if ( typeInfo . baseComplexTypeInfo == null ) { throw new ComplexTypeRecoverableError ( "The base type specified in the complexContent element must be a complexType" ) ; } } processComplexContent ( typeNameIndex , content , typeInfo , baseQName , isMixed ) ; if ( XUtil . getNextSiblingElement ( complexContent ) != null ) throw new ComplexTypeRecoverableError ( "Invalid child following the RESTRICTION or EXTENSION element in the " + "complex type definition" ) ; } private void handleComplexTypeError ( String message , int typeNameIndex , ComplexTypeInfo typeInfo ) throws Exception { String typeName = fStringPool . toString ( typeNameIndex ) ; if ( message != null ) { if ( typeName . startsWith ( "#" ) ) reportGenericSchemaError ( "Anonymous complexType: " + message ) ; else reportGenericSchemaError ( "ComplexType '" + typeName + "': " + message ) ; } typeInfo . contentType = XMLElementDecl . TYPE_ANY ; typeInfo . contentSpecHandle = - 1 ; typeInfo . derivedBy = 0 ; typeInfo . datatypeValidator = null ; typeInfo . attlistHead = - 1 ; int templateElementNameIndex = fStringPool . addSymbol ( "$" + typeName ) ; typeInfo . templateElementIndex = fSchemaGrammar . addElementDecl ( new QName ( - 1 , templateElementNameIndex , typeNameIndex , fTargetNSURI ) , ( fTargetNSURI == - 1 ) ? - 1 : fCurrentScope , typeInfo . scopeDefined , typeInfo . contentType , typeInfo . contentSpecHandle , - 1 , typeInfo . datatypeValidator ) ; return ; } private QName parseBase ( String base ) throws Exception { String prefix = "" ; String localpart = base ; int colonptr = base . indexOf ( ":" ) ; if ( colonptr > 0 ) { prefix = base . substring ( 0 , colonptr ) ; localpart = base . substring ( colonptr + 1 ) ; } int nameIndex = fStringPool . addSymbol ( base ) ; int prefixIndex = fStringPool . addSymbol ( prefix ) ; int localpartIndex = fStringPool . addSymbol ( localpart ) ; int URIindex = fStringPool . addSymbol ( resolvePrefixToURI ( prefix ) ) ; return new QName ( prefixIndex , localpartIndex , nameIndex , URIindex ) ; } private boolean baseFromAnotherSchema ( QName baseName ) throws Exception { String typeURI = fStringPool . toString ( baseName . uri ) ; if ( ! typeURI . equals ( fTargetNSURIString ) && ! typeURI . equals ( SchemaSymbols . URI_SCHEMAFORSCHEMA ) && typeURI . length ( ) != 0 ) return true ; else return false ; } private void processBaseTypeInfo ( QName baseName , ComplexTypeInfo typeInfo ) throws Exception { ComplexTypeInfo baseComplexTypeInfo = null ; DatatypeValidator baseDTValidator = null ; String typeURI = fStringPool . toString ( baseName . uri ) ; String localpart = fStringPool . toString ( baseName . localpart ) ; String base = fStringPool . toString ( baseName . rawname ) ; if ( baseFromAnotherSchema ( baseName ) ) { baseComplexTypeInfo = getTypeInfoFromNS ( typeURI , localpart ) ; if ( baseComplexTypeInfo == null ) { baseDTValidator = getTypeValidatorFromNS ( typeURI , localpart ) ; if ( baseDTValidator == null ) { throw new ComplexTypeRecoverableError ( "Could not find base type " + localpart + " in schema " + typeURI ) ; } } } else { String fullBaseName = typeURI + "," + localpart ; baseComplexTypeInfo = ( ComplexTypeInfo ) fComplexTypeRegistry . get ( fullBaseName ) ; if ( baseComplexTypeInfo == null ) { baseDTValidator = getDatatypeValidator ( typeURI , localpart ) ; if ( baseDTValidator == null ) { int baseTypeSymbol ; Element baseTypeNode = getTopLevelComponentByName ( SchemaSymbols . ELT_COMPLEXTYPE , localpart ) ; if ( baseTypeNode != null ) { baseTypeSymbol = traverseComplexTypeDecl ( baseTypeNode ) ; baseComplexTypeInfo = ( ComplexTypeInfo ) fComplexTypeRegistry . get ( fStringPool . toString ( baseTypeSymbol ) ) ; } else { baseTypeNode = getTopLevelComponentByName ( SchemaSymbols . ELT_SIMPLETYPE , localpart ) ; if ( baseTypeNode != null ) { baseTypeSymbol = traverseSimpleTypeDecl ( baseTypeNode ) ; baseDTValidator = getDatatypeValidator ( typeURI , localpart ) ; if ( baseDTValidator == null ) { } } else { throw new ComplexTypeRecoverableError ( "Base type could not be found : " + base ) ; } } } } } typeInfo . baseComplexTypeInfo = baseComplexTypeInfo ; typeInfo . baseDataTypeValidator = baseDTValidator ; } private void processComplexContent ( int typeNameIndex , Element complexContentChild , ComplexTypeInfo typeInfo , QName baseName , boolean isMixed ) throws Exception { Element attrNode = null ; int index = - 2 ; if ( complexContentChild != null ) { String childName = complexContentChild . getLocalName ( ) ; if ( childName . equals ( SchemaSymbols . ELT_GROUP ) ) { index = expandContentModel ( traverseGroupDecl ( complexContentChild ) , complexContentChild ) ; attrNode = XUtil . getNextSiblingElement ( complexContentChild ) ; } else if ( childName . equals ( SchemaSymbols . ELT_SEQUENCE ) ) { index = expandContentModel ( traverseSequence ( complexContentChild ) , complexContentChild ) ; attrNode = XUtil . getNextSiblingElement ( complexContentChild ) ; } else if ( childName . equals ( SchemaSymbols . ELT_CHOICE ) ) { index = expandContentModel ( traverseChoice ( complexContentChild ) , complexContentChild ) ; attrNode = XUtil . getNextSiblingElement ( complexContentChild ) ; } else if ( childName . equals ( SchemaSymbols . ELT_ALL ) ) { index = expandContentModel ( traverseAll ( complexContentChild ) , complexContentChild ) ; attrNode = XUtil . getNextSiblingElement ( complexContentChild ) ; } else if ( isAttrOrAttrGroup ( complexContentChild ) ) { typeInfo . contentType = XMLElementDecl . TYPE_ANY ; attrNode = complexContentChild ; } else { throw new ComplexTypeRecoverableError ( "Invalid child '" + childName + "' in the complex type" ) ; } } if ( isMixed ) { int pcdataNode = fSchemaGrammar . addContentSpecNode ( XMLContentSpec . CONTENTSPECNODE_LEAF , - 1 , - 1 , false ) ; if ( index != - 2 ) index = fSchemaGrammar . addContentSpecNode ( XMLContentSpec . CONTENTSPECNODE_CHOICE , pcdataNode , index , false ) ; else index = pcdataNode ; } typeInfo . contentSpecHandle = index ; if ( typeInfo . baseComplexTypeInfo != null ) { int baseContentSpecHandle = typeInfo . baseComplexTypeInfo . contentSpecHandle ; if ( typeInfo . derivedBy == SchemaSymbols . RESTRICTION ) { } else { if ( baseFromAnotherSchema ( baseName ) ) { String baseSchemaURI = fStringPool . toString ( baseName . uri ) ; SchemaGrammar aGrammar = ( SchemaGrammar ) fGrammarResolver . getGrammar ( baseSchemaURI ) ; baseContentSpecHandle = importContentSpec ( aGrammar , baseContentSpecHandle ) ; } if ( typeInfo . contentSpecHandle == - 2 ) { typeInfo . contentSpecHandle = baseContentSpecHandle ; } else if ( baseContentSpecHandle > - 1 ) { typeInfo . contentSpecHandle = fSchemaGrammar . addContentSpecNode ( XMLContentSpec . CONTENTSPECNODE_SEQ , baseContentSpecHandle , typeInfo . contentSpecHandle , false ) ; } } } else { typeInfo . derivedBy = 0 ; } if ( isMixed ) typeInfo . contentType = XMLElementDecl . TYPE_MIXED ; else if ( typeInfo . contentSpecHandle == - 2 ) typeInfo . contentType = XMLElementDecl . TYPE_EMPTY ; else typeInfo . contentType = XMLElementDecl . TYPE_CHILDREN ; String typeName = fStringPool . toString ( typeNameIndex ) ; int templateElementNameIndex = fStringPool . addSymbol ( "$" + typeName ) ; typeInfo . templateElementIndex = fSchemaGrammar . addElementDecl ( new QName ( - 1 , templateElementNameIndex , typeNameIndex , fTargetNSURI ) , ( fTargetNSURI == - 1 ) ? - 1 : fCurrentScope , typeInfo . scopeDefined , typeInfo . contentType , typeInfo . contentSpecHandle , - 1 , typeInfo . datatypeValidator ) ; typeInfo . attlistHead = fSchemaGrammar . getFirstAttributeDeclIndex ( typeInfo . templateElementIndex ) ; if ( attrNode != null ) { if ( ! isAttrOrAttrGroup ( attrNode ) ) { throw new ComplexTypeRecoverableError ( "Invalid child " + attrNode . getLocalName ( ) + " in the complexType or complexContent" ) ; } else processAttributes ( attrNode , baseName , typeInfo ) ; } else if ( typeInfo . baseComplexTypeInfo != null ) processAttributes ( null , baseName , typeInfo ) ; } private void processAttributes ( Element attrNode , QName baseName , ComplexTypeInfo typeInfo ) throws Exception { XMLAttributeDecl attWildcard = null ; Vector anyAttDecls = new Vector ( ) ; Element child ; for ( child = attrNode ; child != null ; child = XUtil . getNextSiblingElement ( child ) ) { String childName = child . getLocalName ( ) ; if ( childName . equals ( SchemaSymbols . ELT_ATTRIBUTE ) ) { traverseAttributeDecl ( child , typeInfo , false ) ; } else if ( childName . equals ( SchemaSymbols . ELT_ATTRIBUTEGROUP ) ) { traverseAttributeGroupDecl ( child , typeInfo , anyAttDecls ) ; } else if ( childName . equals ( SchemaSymbols . ELT_ANYATTRIBUTE ) ) { attWildcard = traverseAnyAttribute ( child ) ; } } if ( attWildcard != null ) { XMLAttributeDecl fromGroup = null ; final int count = anyAttDecls . size ( ) ; if ( count > 0 ) { fromGroup = ( XMLAttributeDecl ) anyAttDecls . elementAt ( 0 ) ; for ( int i = 1 ; i < count ; i ++ ) { fromGroup = mergeTwoAnyAttribute ( fromGroup , ( XMLAttributeDecl ) anyAttDecls . elementAt ( i ) ) ; } } if ( fromGroup != null ) { int saveProcessContents = attWildcard . defaultType ; attWildcard = mergeTwoAnyAttribute ( attWildcard , fromGroup ) ; attWildcard . defaultType = saveProcessContents ; } } else { } XMLAttributeDecl baseAttWildcard = null ; ComplexTypeInfo baseTypeInfo = typeInfo . baseComplexTypeInfo ; if ( baseTypeInfo != null && baseTypeInfo . attlistHead > - 1 ) { int attDefIndex = baseTypeInfo . attlistHead ; SchemaGrammar aGrammar = fSchemaGrammar ; String baseTypeSchemaURI = baseFromAnotherSchema ( baseName ) ? fStringPool . toString ( baseName . uri ) : null ; if ( baseTypeSchemaURI != null ) { aGrammar = ( SchemaGrammar ) fGrammarResolver . getGrammar ( baseTypeSchemaURI ) ; } if ( aGrammar == null ) { } else while ( attDefIndex > - 1 ) { fTempAttributeDecl . clear ( ) ; aGrammar . getAttributeDecl ( attDefIndex , fTempAttributeDecl ) ; if ( fTempAttributeDecl . type == XMLAttributeDecl . TYPE_ANY_ANY || fTempAttributeDecl . type == XMLAttributeDecl . TYPE_ANY_LIST || fTempAttributeDecl . type == XMLAttributeDecl . TYPE_ANY_LOCAL || fTempAttributeDecl . type == XMLAttributeDecl . TYPE_ANY_OTHER ) { if ( attWildcard == null ) { baseAttWildcard = fTempAttributeDecl ; } attDefIndex = aGrammar . getNextAttributeDeclIndex ( attDefIndex ) ; continue ; } int temp = fSchemaGrammar . getAttributeDeclIndex ( typeInfo . templateElementIndex , fTempAttributeDecl . name ) ; if ( temp > - 1 ) { if ( typeInfo . derivedBy == SchemaSymbols . RESTRICTION ) { attDefIndex = fSchemaGrammar . getNextAttributeDeclIndex ( attDefIndex ) ; continue ; } } fSchemaGrammar . addAttDef ( typeInfo . templateElementIndex , fTempAttributeDecl . name , fTempAttributeDecl . type , fTempAttributeDecl . enumeration , fTempAttributeDecl . defaultType , fTempAttributeDecl . defaultValue , fTempAttributeDecl . datatypeValidator , fTempAttributeDecl . list ) ; attDefIndex = aGrammar . getNextAttributeDeclIndex ( attDefIndex ) ; } } if ( attWildcard != null ) { if ( attWildcard . type != - 1 ) { fSchemaGrammar . addAttDef ( typeInfo . templateElementIndex , attWildcard . name , attWildcard . type , attWildcard . enumeration , attWildcard . defaultType , attWildcard . defaultValue , attWildcard . datatypeValidator , attWildcard . list ) ; } else { } } else if ( baseAttWildcard != null ) { fSchemaGrammar . addAttDef ( typeInfo . templateElementIndex , baseAttWildcard . name , baseAttWildcard . type , baseAttWildcard . enumeration , baseAttWildcard . defaultType , baseAttWildcard . defaultValue , baseAttWildcard . datatypeValidator , baseAttWildcard . list ) ; } typeInfo . attlistHead = fSchemaGrammar . getFirstAttributeDeclIndex ( typeInfo . templateElementIndex ) ; } private boolean isAttrOrAttrGroup ( Element e ) { String elementName = e . getLocalName ( ) ; if ( elementName . equals ( SchemaSymbols . ELT_ATTRIBUTE ) || elementName . equals ( SchemaSymbols . ELT_ATTRIBUTEGROUP ) || elementName . equals ( SchemaSymbols . ELT_ANYATTRIBUTE ) ) return true ; else return false ; } private void checkRecursingComplexType ( ) throws Exception { if ( fCurrentTypeNameStack . empty ( ) ) { if ( ! fElementRecurseComplex . isEmpty ( ) ) { Enumeration e = fElementRecurseComplex . keys ( ) ; while ( e . hasMoreElements ( ) ) { QName nameThenScope = ( QName ) e . nextElement ( ) ; String typeName = ( String ) fElementRecurseComplex . get ( nameThenScope ) ; int eltUriIndex = nameThenScope . uri ; int eltNameIndex = nameThenScope . localpart ; int enclosingScope = nameThenScope . prefix ; ComplexTypeInfo typeInfo = ( ComplexTypeInfo ) fComplexTypeRegistry . get ( fTargetNSURIString + "," + typeName ) ; if ( typeInfo == null ) { throw new Exception ( "Internal Error in void checkRecursingComplexType(). " ) ; } else { int elementIndex = fSchemaGrammar . addElementDecl ( new QName ( - 1 , eltNameIndex , eltNameIndex , eltUriIndex ) , enclosingScope , typeInfo . scopeDefined , typeInfo . contentType , typeInfo . contentSpecHandle , typeInfo . attlistHead , typeInfo . datatypeValidator ) ; fSchemaGrammar . setElementComplexTypeInfo ( elementIndex , typeInfo ) ; } } fElementRecurseComplex . clear ( ) ; } } } private void checkParticleDerivationOK ( Element derivedTypeNode , Element baseTypeNode ) { } private int importContentSpec ( SchemaGrammar aGrammar , int contentSpecHead ) throws Exception { XMLContentSpec ctsp = new XMLContentSpec ( ) ; aGrammar . getContentSpec ( contentSpecHead , ctsp ) ; int left = - 1 ; int right = - 1 ; if ( ctsp . type == ctsp . CONTENTSPECNODE_LEAF || ( ctsp . type & 0x0f ) == ctsp . CONTENTSPECNODE_ANY || ( ctsp . type & 0x0f ) == ctsp . CONTENTSPECNODE_ANY_LOCAL || ( ctsp . type & 0x0f ) == ctsp . CONTENTSPECNODE_ANY_OTHER ) { return fSchemaGrammar . addContentSpecNode ( ctsp . type , ctsp . value , ctsp . otherValue , false ) ; } else { if ( ctsp . value == - 1 ) { left = - 1 ; } else { left = importContentSpec ( aGrammar , ctsp . value ) ; } if ( ctsp . otherValue == - 1 ) { right = - 1 ; } else { right = importContentSpec ( aGrammar , ctsp . otherValue ) ; } return fSchemaGrammar . addContentSpecNode ( ctsp . type , left , right , false ) ; } } private int expandContentModel ( int index , Element particle ) throws Exception { String minOccurs = particle . getAttribute ( SchemaSymbols . ATT_MINOCCURS ) . trim ( ) ; String maxOccurs = particle . getAttribute ( SchemaSymbols . ATT_MAXOCCURS ) . trim ( ) ; int min = 1 , max = 1 ; if ( minOccurs . equals ( "0" ) && maxOccurs . equals ( "0" ) ) { return - 2 ; } if ( minOccurs . equals ( "" ) ) { minOccurs = "1" ; } if ( maxOccurs . equals ( "" ) ) { maxOccurs = "1" ; } int leafIndex = index ; if ( minOccurs . equals ( "1" ) && maxOccurs . equals ( "1" ) ) { } else if ( minOccurs . equals ( "0" ) && maxOccurs . equals ( "1" ) ) { index = fSchemaGrammar . addContentSpecNode ( XMLContentSpec . CONTENTSPECNODE_ZERO_OR_ONE , index , - 1 , false ) ; } else if ( minOccurs . equals ( "0" ) && maxOccurs . equals ( "unbounded" ) ) { index = fSchemaGrammar . addContentSpecNode ( XMLContentSpec . CONTENTSPECNODE_ZERO_OR_MORE , index , - 1 , false ) ; } else if ( minOccurs . equals ( "1" ) && maxOccurs . equals ( "unbounded" ) ) { index = fSchemaGrammar . addContentSpecNode ( XMLContentSpec . CONTENTSPECNODE_ONE_OR_MORE , index , - 1 , false ) ; } else if ( maxOccurs . equals ( "unbounded" ) ) { try { min = Integer . parseInt ( minOccurs ) ; } catch ( Exception e ) { reportSchemaError ( SchemaMessageProvider . GenericError , new Object [ ] { "illegal value for minOccurs : '" + e . getMessage ( ) + "' " } ) ; } if ( min < 2 ) { } index = fSchemaGrammar . addContentSpecNode ( XMLContentSpec . CONTENTSPECNODE_ONE_OR_MORE , index , - 1 , false ) ; for ( int i = 0 ; i < ( min - 1 ) ; i ++ ) { index = fSchemaGrammar . addContentSpecNode ( XMLContentSpec . CONTENTSPECNODE_SEQ , leafIndex , index , false ) ; } } else { try { min = Integer . parseInt ( minOccurs ) ; max = Integer . parseInt ( maxOccurs ) ; } catch ( Exception e ) { reportSchemaError ( SchemaMessageProvider . GenericError , new Object [ ] { "illegal value for minOccurs or maxOccurs : '" + e . getMessage ( ) + "' " } ) ; } if ( min == 0 ) { int optional = fSchemaGrammar . addContentSpecNode ( XMLContentSpec . CONTENTSPECNODE_ZERO_OR_ONE , leafIndex , - 1 , false ) ; index = optional ; for ( int i = 0 ; i < ( max - min - 1 ) ; i ++ ) { index = fSchemaGrammar . addContentSpecNode ( XMLContentSpec . CONTENTSPECNODE_SEQ , index , optional , false ) ; } } else { for ( int i = 0 ; i < ( min - 1 ) ; i ++ ) { index = fSchemaGrammar . addContentSpecNode ( XMLContentSpec . CONTENTSPECNODE_SEQ , index , leafIndex , false ) ; } int optional = fSchemaGrammar . addContentSpecNode ( XMLContentSpec . CONTENTSPECNODE_ZERO_OR_ONE , leafIndex , - 1 , false ) ; for ( int i = 0 ; i < ( max - min ) ; i ++ ) { index = fSchemaGrammar . addContentSpecNode ( XMLContentSpec . CONTENTSPECNODE_SEQ , index , optional , false ) ; } } } return index ; } private int traverseAttributeDecl ( Element attrDecl , ComplexTypeInfo typeInfo , boolean referredTo ) throws Exception { String attNameStr = attrDecl . getAttribute ( SchemaSymbols . ATT_NAME ) ; int attName = fStringPool . addSymbol ( attNameStr ) ; String isQName = attrDecl . getAttribute ( SchemaSymbols . ATT_FORM ) ; boolean isAttrTopLevel = isTopLevel ( attrDecl ) ; DatatypeValidator dv = null ; int attType = - 1 ; boolean attIsList = false ; int dataTypeSymbol = - 1 ; String ref = attrDecl . getAttribute ( SchemaSymbols . ATT_REF ) ; String datatype = attrDecl . getAttribute ( SchemaSymbols . ATT_TYPE ) ; if ( ! ref . equals ( "" ) ) { if ( isAttrTopLevel ) reportGenericSchemaError ( "An attribute with \"ref\" present must not have <schema> as its parent" ) ; if ( ! attNameStr . equals ( "" ) ) reportGenericSchemaError ( "Attribute " + attNameStr + " cannot refer to another attribute, but it refers to " + ref ) ; if ( ! datatype . equals ( "" ) ) reportGenericSchemaError ( "Attribute with reference " + ref + " cannot also contain a type" ) ; if ( ! attrDecl . getAttribute ( SchemaSymbols . ATT_FORM ) . equals ( "" ) ) reportGenericSchemaError ( "Attribute with reference " + ref + " cannot also contain a \"form\" property" ) ; if ( ! attrDecl . getAttribute ( SchemaSymbols . ATT_VALUE ) . equals ( "" ) ) reportGenericSchemaError ( "Attribute with reference " + ref + " cannot also contain a value" ) ; } Element simpleTypeChild = findAttributeSimpleType ( attrDecl ) ; String localpart = null ; String use = attrDecl . getAttribute ( SchemaSymbols . ATT_USE ) ; boolean prohibited = use . equals ( SchemaSymbols . ATTVAL_PROHIBITED ) ; boolean required = use . equals ( SchemaSymbols . ATTVAL_REQUIRED ) ; if ( ! ref . equals ( "" ) ) { String prefix = "" ; localpart = ref ; int colonptr = ref . indexOf ( ":" ) ; if ( colonptr > 0 ) { prefix = ref . substring ( 0 , colonptr ) ; localpart = ref . substring ( colonptr + 1 ) ; } String uriStr = resolvePrefixToURI ( prefix ) ; if ( ! uriStr . equals ( fTargetNSURIString ) ) { addAttributeDeclFromAnotherSchema ( localpart , uriStr , typeInfo ) ; return - 1 ; } Element referredAttribute = getTopLevelComponentByName ( SchemaSymbols . ELT_ATTRIBUTE , localpart ) ; if ( referredAttribute != null ) { traverseAttributeDecl ( referredAttribute , typeInfo , true ) ; int referredAttName = fStringPool . addSymbol ( referredAttribute . getAttribute ( SchemaSymbols . ATT_NAME ) ) ; int uriIndex = - 1 ; if ( fTargetNSURIString . length ( ) > 0 ) uriIndex = fTargetNSURI ; QName referredAttQName = new QName ( - 1 , referredAttName , referredAttName , uriIndex ) ; if ( prohibited ) { int tempIndex = fSchemaGrammar . getAttributeDeclIndex ( typeInfo . templateElementIndex , referredAttQName ) ; XMLAttributeDecl referredAttrDecl = new XMLAttributeDecl ( ) ; fSchemaGrammar . getAttributeDecl ( tempIndex , referredAttrDecl ) ; referredAttrDecl . defaultType = XMLAttributeDecl . DEFAULT_TYPE_PROHIBITED ; fSchemaGrammar . setAttributeDecl ( typeInfo . templateElementIndex , tempIndex , referredAttrDecl ) ; } else if ( required ) { int tempIndex = fSchemaGrammar . getAttributeDeclIndex ( typeInfo . templateElementIndex , referredAttQName ) ; XMLAttributeDecl referredAttrDecl = new XMLAttributeDecl ( ) ; fSchemaGrammar . getAttributeDecl ( tempIndex , referredAttrDecl ) ; if ( referredAttrDecl . defaultType == XMLAttributeDecl . DEFAULT_TYPE_FIXED ) referredAttrDecl . defaultType = XMLAttributeDecl . DEFAULT_TYPE_REQUIRED_AND_FIXED ; else referredAttrDecl . defaultType = XMLAttributeDecl . DEFAULT_TYPE_REQUIRED ; fSchemaGrammar . setAttributeDecl ( typeInfo . templateElementIndex , tempIndex , referredAttrDecl ) ; } } else { if ( fAttributeDeclRegistry . get ( localpart ) != null ) { addAttributeDeclFromAnotherSchema ( localpart , uriStr , typeInfo ) ; } else reportGenericSchemaError ( "Couldn't find top level attribute " + ref ) ; } return - 1 ; } if ( datatype . equals ( "" ) ) { if ( simpleTypeChild != null ) { attType = XMLAttributeDecl . TYPE_SIMPLE ; dataTypeSymbol = traverseSimpleTypeDecl ( simpleTypeChild ) ; localpart = fStringPool . toString ( dataTypeSymbol ) ; } else { attType = XMLAttributeDecl . TYPE_SIMPLE ; localpart = "string" ; dataTypeSymbol = fStringPool . addSymbol ( localpart ) ; } localpart = fStringPool . toString ( dataTypeSymbol ) ; dv = fDatatypeRegistry . getDatatypeValidator ( localpart ) ; } else { if ( simpleTypeChild != null && ! referredTo ) reportGenericSchemaError ( "Attribute declarations may not contain both a type and a simpleType declaration" ) ; String prefix = "" ; localpart = datatype ; dataTypeSymbol = fStringPool . addSymbol ( localpart ) ; int colonptr = datatype . indexOf ( ":" ) ; if ( colonptr > 0 ) { prefix = datatype . substring ( 0 , colonptr ) ; localpart = datatype . substring ( colonptr + 1 ) ; } String typeURI = resolvePrefixToURI ( prefix ) ; if ( typeURI . equals ( SchemaSymbols . URI_SCHEMAFORSCHEMA ) || typeURI . length ( ) == 0 ) { dv = getDatatypeValidator ( "" , localpart ) ; if ( localpart . equals ( "ID" ) ) { attType = XMLAttributeDecl . TYPE_ID ; } else if ( localpart . equals ( "IDREF" ) ) { attType = XMLAttributeDecl . TYPE_IDREF ; } else if ( localpart . equals ( "IDREFS" ) ) { attType = XMLAttributeDecl . TYPE_IDREF ; attIsList = true ; } else if ( localpart . equals ( "ENTITY" ) ) { attType = XMLAttributeDecl . TYPE_ENTITY ; } else if ( localpart . equals ( "ENTITIES" ) ) { attType = XMLAttributeDecl . TYPE_ENTITY ; attIsList = true ; } else if ( localpart . equals ( "NMTOKEN" ) ) { attType = XMLAttributeDecl . TYPE_NMTOKEN ; } else if ( localpart . equals ( "NMTOKENS" ) ) { attType = XMLAttributeDecl . TYPE_NMTOKEN ; attIsList = true ; } else if ( localpart . equals ( SchemaSymbols . ELT_NOTATION ) ) { attType = XMLAttributeDecl . TYPE_NOTATION ; } else { attType = XMLAttributeDecl . TYPE_SIMPLE ; if ( dv == null && typeURI . length ( ) == 0 ) { Element topleveltype = getTopLevelComponentByName ( SchemaSymbols . ELT_SIMPLETYPE , localpart ) ; if ( topleveltype != null ) { traverseSimpleTypeDecl ( topleveltype ) ; dv = getDatatypeValidator ( typeURI , localpart ) ; } else if ( ! referredTo ) { reportGenericSchemaError ( "simpleType not found : " + "(" + typeURI + ":" + localpart + ")" ) ; } } } } else { dv = getDatatypeValidator ( typeURI , localpart ) ; if ( dv == null && typeURI . equals ( fTargetNSURIString ) ) { Element topleveltype = getTopLevelComponentByName ( SchemaSymbols . ELT_SIMPLETYPE , localpart ) ; if ( topleveltype != null ) { traverseSimpleTypeDecl ( topleveltype ) ; dv = getDatatypeValidator ( typeURI , localpart ) ; } else if ( ! referredTo ) { reportGenericSchemaError ( "simpleType not found : " + "(" + typeURI + ":" + localpart + ")" ) ; } } attType = XMLAttributeDecl . TYPE_SIMPLE ; } } int attDefaultType = - 1 ; int attDefaultValue = - 1 ; if ( dv == null && ! referredTo ) { reportGenericSchemaError ( "could not resolve the type or get a null validator for datatype : " + fStringPool . toString ( dataTypeSymbol ) ) ; } String fixed = attrDecl . getAttribute ( SchemaSymbols . ATT_VALUE ) ; if ( isAttrTopLevel ) { if ( ! fixed . equals ( "" ) ) { if ( ( required || prohibited || use . equals ( SchemaSymbols . ATTVAL_OPTIONAL ) ) && ! referredTo ) reportGenericSchemaError ( "Globally-declared attributes containing values must have \"use\" set to \"FIXED\" or \"DEFAULT\", not " + use ) ; else if ( use . equals ( "" ) && ! referredTo ) reportGenericSchemaError ( "Globally-declared attributes containing values MUST have \"use\" present and set to \"FIXED\" or \"DEFAULT\"" ) ; else if ( use . equals ( SchemaSymbols . ATTVAL_FIXED ) ) { attDefaultType = XMLAttributeDecl . DEFAULT_TYPE_FIXED ; attDefaultValue = fStringPool . addString ( fixed ) ; } else { attDefaultType = XMLAttributeDecl . DEFAULT_TYPE_DEFAULT ; attDefaultValue = fStringPool . addString ( fixed ) ; } } else { if ( ! use . equals ( "" ) && ! referredTo ) reportGenericSchemaError ( "Globally-declared attributes containing no value may not have \"use\" present" ) ; else attDefaultType = XMLAttributeDecl . DEFAULT_TYPE_IMPLIED ; } } else { if ( ! fixed . equals ( "" ) ) { if ( required || prohibited || use . equals ( SchemaSymbols . ATTVAL_OPTIONAL ) ) reportGenericSchemaError ( "Locally-declared attributes containing values must have \"use\" set to \"FIXED\" or \"DEFAULT\", not " + use ) ; else if ( use . equals ( "" ) ) reportGenericSchemaError ( "Locally-declared attributes containing values MUST have \"use\" present and set to \"FIXED\" or \"DEFAULT\"" ) ; else if ( use . equals ( SchemaSymbols . ATTVAL_FIXED ) ) { attDefaultType = XMLAttributeDecl . DEFAULT_TYPE_FIXED ; attDefaultValue = fStringPool . addString ( fixed ) ; } else { attDefaultType = XMLAttributeDecl . DEFAULT_TYPE_DEFAULT ; attDefaultValue = fStringPool . addString ( fixed ) ; } } else { if ( required ) attDefaultType = XMLAttributeDecl . DEFAULT_TYPE_REQUIRED ; else if ( prohibited ) attDefaultType = XMLAttributeDecl . DEFAULT_TYPE_PROHIBITED ; else attDefaultType = XMLAttributeDecl . DEFAULT_TYPE_IMPLIED ; } } if ( attType == XMLAttributeDecl . TYPE_SIMPLE && attDefaultValue != - 1 ) { try { if ( dv != null ) dv . validate ( fStringPool . toString ( attDefaultValue ) , null ) ; else if ( ! referredTo ) reportSchemaError ( SchemaMessageProvider . NoValidatorFor , new Object [ ] { datatype } ) ; } catch ( InvalidDatatypeValueException idve ) { if ( ! referredTo ) reportSchemaError ( SchemaMessageProvider . IncorrectDefaultType , new Object [ ] { attrDecl . getAttribute ( SchemaSymbols . ATT_NAME ) , idve . getMessage ( ) } ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; System . out . println ( "Internal error in attribute datatype validation" ) ; } } int uriIndex = - 1 ; if ( fTargetNSURIString . length ( ) > 0 ) { if ( isAttrTopLevel ) { uriIndex = fTargetNSURI ; } else if ( ! isQName . equals ( SchemaSymbols . ATTVAL_UNQUALIFIED ) ) { if ( isQName . equals ( SchemaSymbols . ATTVAL_QUALIFIED ) || fAttributeDefaultQualified ) { uriIndex = fTargetNSURI ; } } } QName attQName = new QName ( - 1 , attName , attName , uriIndex ) ; if ( DEBUGGING ) System . out . println ( " the dataType Validator for " + fStringPool . toString ( attName ) + " is " + dv ) ; if ( isAttrTopLevel ) { fTempAttributeDecl . datatypeValidator = dv ; fTempAttributeDecl . name . setValues ( attQName ) ; fTempAttributeDecl . type = attType ; fTempAttributeDecl . defaultType = attDefaultType ; fTempAttributeDecl . list = attIsList ; if ( attDefaultValue != - 1 ) { fTempAttributeDecl . defaultValue = new String ( fStringPool . toString ( attDefaultValue ) ) ; } fAttributeDeclRegistry . put ( attNameStr , new XMLAttributeDecl ( fTempAttributeDecl ) ) ; } if ( typeInfo != null ) { fSchemaGrammar . addAttDef ( typeInfo . templateElementIndex , attQName , attType , dataTypeSymbol , attDefaultType , fStringPool . toString ( attDefaultValue ) , dv , attIsList ) ; } return - 1 ; } private int addAttributeDeclFromAnotherSchema ( String name , String uriStr , ComplexTypeInfo typeInfo ) throws Exception { SchemaGrammar aGrammar = ( SchemaGrammar ) fGrammarResolver . getGrammar ( uriStr ) ; if ( uriStr == null || ! ( aGrammar instanceof SchemaGrammar ) ) { reportGenericSchemaError ( "!!Schema not found in #addAttributeDeclFromAnotherSchema, schema uri : " + uriStr ) ; return - 1 ; } Hashtable attrRegistry = aGrammar . getAttirubteDeclRegistry ( ) ; if ( attrRegistry == null ) { reportGenericSchemaError ( "no attribute was defined in schema : " + uriStr ) ; return - 1 ; } XMLAttributeDecl tempAttrDecl = ( XMLAttributeDecl ) attrRegistry . get ( name ) ; if ( tempAttrDecl == null ) { reportGenericSchemaError ( "no attribute named \"" + name + "\" was defined in schema : " + uriStr ) ; return - 1 ; } if ( typeInfo != null ) { fSchemaGrammar . addAttDef ( typeInfo . templateElementIndex , tempAttrDecl . name , tempAttrDecl . type , - 1 , tempAttrDecl . defaultType , tempAttrDecl . defaultValue , tempAttrDecl . datatypeValidator , tempAttrDecl . list ) ; } return 0 ; } private int traverseAttributeGroupDecl ( Element attrGrpDecl , ComplexTypeInfo typeInfo , Vector anyAttDecls ) throws Exception { int attGrpName = fStringPool . addSymbol ( attrGrpDecl . getAttribute ( SchemaSymbols . ATT_NAME ) ) ; String ref = attrGrpDecl . getAttribute ( SchemaSymbols . ATT_REF ) ; int attType = - 1 ; int enumeration = - 1 ; if ( ! ref . equals ( "" ) ) { if ( XUtil . getFirstChildElement ( attrGrpDecl ) != null ) reportSchemaError ( SchemaMessageProvider . NoContentForRef , null ) ; String prefix = "" ; String localpart = ref ; int colonptr = ref . indexOf ( ":" ) ; if ( colonptr > 0 ) { prefix = ref . substring ( 0 , colonptr ) ; localpart = ref . substring ( colonptr + 1 ) ; } String uriStr = resolvePrefixToURI ( prefix ) ; if ( ! uriStr . equals ( fTargetNSURIString ) ) { traverseAttributeGroupDeclFromAnotherSchema ( localpart , uriStr , typeInfo , anyAttDecls ) ; return - 1 ; } Element referredAttrGrp = getTopLevelComponentByName ( SchemaSymbols . ELT_ATTRIBUTEGROUP , localpart ) ; if ( referredAttrGrp != null ) { traverseAttributeGroupDecl ( referredAttrGrp , typeInfo , anyAttDecls ) ; } else { reportGenericSchemaError ( "Couldn't find top level attributegroup " + ref ) ; } return - 1 ; } for ( Element child = XUtil . getFirstChildElement ( attrGrpDecl ) ; child != null ; child = XUtil . getNextSiblingElement ( child ) ) { if ( child . getLocalName ( ) . equals ( SchemaSymbols . ELT_ATTRIBUTE ) ) { traverseAttributeDecl ( child , typeInfo , false ) ; } else if ( child . getLocalName ( ) . equals ( SchemaSymbols . ELT_ATTRIBUTEGROUP ) ) { traverseAttributeGroupDecl ( child , typeInfo , anyAttDecls ) ; } else if ( child . getLocalName ( ) . equals ( SchemaSymbols . ELT_ANYATTRIBUTE ) ) { anyAttDecls . addElement ( traverseAnyAttribute ( child ) ) ; break ; } else if ( child . getLocalName ( ) . equals ( SchemaSymbols . ELT_ANNOTATION ) ) { } } return - 1 ; } private int traverseAttributeGroupDeclFromAnotherSchema ( String attGrpName , String uriStr , ComplexTypeInfo typeInfo , Vector anyAttDecls ) throws Exception { SchemaGrammar aGrammar = ( SchemaGrammar ) fGrammarResolver . getGrammar ( uriStr ) ; if ( uriStr == null || aGrammar == null || ! ( aGrammar instanceof SchemaGrammar ) ) { reportGenericSchemaError ( "!!Schema not found in #traverseAttributeGroupDeclFromAnotherSchema, schema uri : " + uriStr ) ; return - 1 ; } Element attGrpDecl = ( Element ) aGrammar . topLevelAttrGrpDecls . get ( ( Object ) attGrpName ) ; if ( attGrpDecl == null ) { reportGenericSchemaError ( "no attribute group named \"" + attGrpName + "\" was defined in schema : " + uriStr ) ; return - 1 ; } NamespacesScope saveNSMapping = fNamespacesScope ; int saveTargetNSUri = fTargetNSURI ; fTargetNSURI = fStringPool . addSymbol ( aGrammar . getTargetNamespaceURI ( ) ) ; fNamespacesScope = aGrammar . getNamespacesScope ( ) ; int attType = - 1 ; int enumeration = - 1 ; for ( Element child = XUtil . getFirstChildElement ( attGrpDecl ) ; child != null ; child = XUtil . getNextSiblingElement ( child ) ) { if ( child . getLocalName ( ) . equals ( SchemaSymbols . ELT_ATTRIBUTE ) ) { String childAttName = child . getAttribute ( SchemaSymbols . ATT_NAME ) ; if ( childAttName . length ( ) > 0 ) { Hashtable attDeclRegistry = aGrammar . getAttirubteDeclRegistry ( ) ; if ( attDeclRegistry != null ) { if ( attDeclRegistry . get ( ( Object ) childAttName ) != null ) { addAttributeDeclFromAnotherSchema ( childAttName , uriStr , typeInfo ) ; return - 1 ; } } } else traverseAttributeDecl ( child , typeInfo , false ) ; } else if ( child . getLocalName ( ) . equals ( SchemaSymbols . ELT_ATTRIBUTEGROUP ) ) { traverseAttributeGroupDecl ( child , typeInfo , anyAttDecls ) ; } else if ( child . getLocalName ( ) . equals ( SchemaSymbols . ELT_ANYATTRIBUTE ) ) { anyAttDecls . addElement ( traverseAnyAttribute ( child ) ) ; break ; } else if ( child . getLocalName ( ) . equals ( SchemaSymbols . ELT_ANNOTATION ) ) { } } fNamespacesScope = saveNSMapping ; fTargetNSURI = saveTargetNSUri ; return - 1 ; } private Element findAttributeSimpleType ( Element attrDecl ) throws Exception { Element child = XUtil . getFirstChildElement ( attrDecl ) ; if ( child == null ) return null ; if ( child . getLocalName ( ) . equals ( SchemaSymbols . ELT_SIMPLETYPE ) ) return child ; if ( child . getLocalName ( ) . equals ( SchemaSymbols . ELT_ANNOTATION ) ) { traverseAnnotationDecl ( child ) ; child = XUtil . getNextSiblingElement ( child ) ; } if ( child == null ) return null ; if ( child . getLocalName ( ) . equals ( SchemaSymbols . ELT_SIMPLETYPE ) && XUtil . getNextSiblingElement ( child ) == null ) return child ; reportGenericSchemaError ( "An attribute declaration must contain at most one annotation preceding at most one simpleType" ) ; return null ; } private QName traverseElementDecl ( Element elementDecl ) throws Exception { int contentSpecType = - 1 ; int contentSpecNodeIndex = - 1 ; int typeNameIndex = - 1 ; int scopeDefined = - 2 ; DatatypeValidator dv = null ; String name = elementDecl . getAttribute ( SchemaSymbols . ATT_NAME ) ; if ( DEBUGGING ) System . out . println ( "traversing element decl : " + name ) ; String ref = elementDecl . getAttribute ( SchemaSymbols . ATT_REF ) ; String type = elementDecl . getAttribute ( SchemaSymbols . ATT_TYPE ) ; String minOccurs = elementDecl . getAttribute ( SchemaSymbols . ATT_MINOCCURS ) ; String maxOccurs = elementDecl . getAttribute ( SchemaSymbols . ATT_MAXOCCURS ) ; String dflt = elementDecl . getAttribute ( SchemaSymbols . ATT_DEFAULT ) ; String fixed = elementDecl . getAttribute ( SchemaSymbols . ATT_FIXED ) ; if ( ! ( dflt . equals ( "" ) || fixed . equals ( "" ) ) ) reportGenericSchemaError ( "an element cannot have both \"fixed\" and \"default\" present at the same time" ) ; String substitutionGroup = elementDecl . getAttribute ( SchemaSymbols . ATT_SUBSTITUTIONGROUP ) ; String isQName = elementDecl . getAttribute ( SchemaSymbols . ATT_FORM ) ; String fromAnotherSchema = null ; if ( isTopLevel ( elementDecl ) ) { if ( name . equals ( "" ) ) reportGenericSchemaError ( "globally-declared element must have a name" ) ; else if ( ! ref . equals ( "" ) ) reportGenericSchemaError ( "globally-declared element " + name + " cannot have a ref attribute" ) ; int nameIndex = fStringPool . addSymbol ( name ) ; int eltKey = fSchemaGrammar . getElementDeclIndex ( fTargetNSURI , nameIndex , TOP_LEVEL_SCOPE ) ; if ( eltKey > - 1 ) { return new QName ( - 1 , nameIndex , nameIndex , fTargetNSURI ) ; } } int blockSet = parseBlockSet ( elementDecl . getAttribute ( SchemaSymbols . ATT_BLOCK ) ) ; int finalSet = parseFinalSet ( elementDecl . getAttribute ( SchemaSymbols . ATT_FINAL ) ) ; boolean isNullable = elementDecl . getAttribute ( SchemaSymbols . ATT_NULLABLE ) . equals ( SchemaSymbols . ATTVAL_TRUE ) ? true : false ; boolean isAbstract = elementDecl . getAttribute ( SchemaSymbols . ATT_ABSTRACT ) . equals ( SchemaSymbols . ATTVAL_TRUE ) ? true : false ; int elementMiscFlags = 0 ; if ( isNullable ) { elementMiscFlags += SchemaSymbols . NULLABLE ; } if ( isAbstract ) { elementMiscFlags += SchemaSymbols . ABSTRACT ; } if ( ! ref . equals ( "" ) ) { if ( ! type . equals ( "" ) || ( elementMiscFlags > 0 ) || ( finalSet > 0 ) || ( blockSet > 0 ) || ! dflt . equals ( "" ) || ! fixed . equals ( "" ) ) reportSchemaError ( SchemaMessageProvider . BadAttWithRef , null ) ; if ( ! name . equals ( "" ) ) reportGenericSchemaError ( "element " + name + " cannot also have a ref attribute" ) ; Element child = XUtil . getFirstChildElement ( elementDecl ) ; if ( child != null && child . getLocalName ( ) . equals ( SchemaSymbols . ELT_ANNOTATION ) ) { if ( XUtil . getNextSiblingElement ( child ) != null ) reportSchemaError ( SchemaMessageProvider . NoContentForRef , null ) ; else traverseAnnotationDecl ( child ) ; } else if ( child != null ) reportSchemaError ( SchemaMessageProvider . NoContentForRef , null ) ; String prefix = "" ; String localpart = ref ; int colonptr = ref . indexOf ( ":" ) ; if ( colonptr > 0 ) { prefix = ref . substring ( 0 , colonptr ) ; localpart = ref . substring ( colonptr + 1 ) ; } int localpartIndex = fStringPool . addSymbol ( localpart ) ; String uriString = resolvePrefixToURI ( prefix ) ; QName eltName = new QName ( prefix != null ? fStringPool . addSymbol ( prefix ) : - 1 , localpartIndex , fStringPool . addSymbol ( ref ) , uriString != null ? fStringPool . addSymbol ( uriString ) : - 1 ) ; if ( ! uriString . equals ( fTargetNSURIString ) ) { return eltName ; } int elementIndex = fSchemaGrammar . getElementDeclIndex ( eltName , TOP_LEVEL_SCOPE ) ; if ( elementIndex == - 1 ) { Element targetElement = getTopLevelComponentByName ( SchemaSymbols . ELT_ELEMENT , localpart ) ; if ( targetElement == null ) { reportGenericSchemaError ( "Element " + localpart + " not found in the Schema" ) ; return eltName ; } else { } } return eltName ; } Element substitutionGroupElementDecl = null ; int substitutionGroupElementDeclIndex = - 1 ; boolean noErrorSoFar = true ; String substitutionGroupUri = null ; String substitutionGroupLocalpart = null ; String substitutionGroupFullName = null ; ComplexTypeInfo substitutionGroupEltTypeInfo = null ; DatatypeValidator substitutionGroupEltDV = null ; if ( substitutionGroup . length ( ) > 0 ) { substitutionGroupUri = resolvePrefixToURI ( getPrefix ( substitutionGroup ) ) ; substitutionGroupLocalpart = getLocalPart ( substitutionGroup ) ; substitutionGroupFullName = substitutionGroupUri + "," + substitutionGroupLocalpart ; if ( ! substitutionGroupUri . equals ( fTargetNSURIString ) ) { substitutionGroupEltTypeInfo = getElementDeclTypeInfoFromNS ( substitutionGroupUri , substitutionGroupLocalpart ) ; if ( substitutionGroupEltTypeInfo == null ) { substitutionGroupEltDV = getElementDeclTypeValidatorFromNS ( substitutionGroupUri , substitutionGroupLocalpart ) ; if ( substitutionGroupEltDV == null ) { noErrorSoFar = false ; reportGenericSchemaError ( "Could not find type for element '" + substitutionGroupLocalpart + "' in schema '" + substitutionGroupUri + "'" ) ; } } } else { substitutionGroupElementDecl = getTopLevelComponentByName ( SchemaSymbols . ELT_ELEMENT , substitutionGroupLocalpart ) ; if ( substitutionGroupElementDecl == null ) { substitutionGroupElementDeclIndex = fSchemaGrammar . getElementDeclIndex ( fTargetNSURI , getLocalPartIndex ( substitutionGroup ) , TOP_LEVEL_SCOPE ) ; if ( substitutionGroupElementDeclIndex == - 1 ) { noErrorSoFar = false ; reportGenericSchemaError ( "substitutionGroup affiliation element " + substitutionGroup + " in element declaration " + name ) ; } } else { substitutionGroupElementDeclIndex = fSchemaGrammar . getElementDeclIndex ( fTargetNSURI , getLocalPartIndex ( substitutionGroup ) , TOP_LEVEL_SCOPE ) ; if ( substitutionGroupElementDeclIndex == - 1 ) { traverseElementDecl ( substitutionGroupElementDecl ) ; substitutionGroupElementDeclIndex = fSchemaGrammar . getElementDeclIndex ( fTargetNSURI , getLocalPartIndex ( substitutionGroup ) , TOP_LEVEL_SCOPE ) ; } } if ( substitutionGroupElementDeclIndex != - 1 ) { substitutionGroupEltTypeInfo = fSchemaGrammar . getElementComplexTypeInfo ( substitutionGroupElementDeclIndex ) ; if ( substitutionGroupEltTypeInfo == null ) { fSchemaGrammar . getElementDecl ( substitutionGroupElementDeclIndex , fTempElementDecl ) ; substitutionGroupEltDV = fTempElementDecl . datatypeValidator ; if ( substitutionGroupEltDV == null ) { noErrorSoFar = false ; reportGenericSchemaError ( "Could not find type for element '" + substitutionGroupLocalpart + "' in schema '" + substitutionGroupUri + "'" ) ; } } } } } ComplexTypeInfo typeInfo = null ; Element child = XUtil . getFirstChildElement ( elementDecl ) ; if ( child != null && child . getLocalName ( ) . equals ( SchemaSymbols . ELT_ANNOTATION ) ) { traverseAnnotationDecl ( child ) ; child = XUtil . getNextSiblingElement ( child ) ; } if ( child != null && child . getLocalName ( ) . equals ( SchemaSymbols . ELT_ANNOTATION ) ) reportGenericSchemaError ( "element declarations can contain at most one annotation Element Information Item" ) ; boolean haveAnonType = false ; if ( child != null ) { String childName = child . getLocalName ( ) ; if ( childName . equals ( SchemaSymbols . ELT_COMPLEXTYPE ) ) { if ( child . getAttribute ( SchemaSymbols . ATT_NAME ) . length ( ) > 0 ) { noErrorSoFar = false ; reportGenericSchemaError ( "anonymous complexType in element '" + name + "' has a name attribute" ) ; } else typeNameIndex = traverseComplexTypeDecl ( child ) ; if ( typeNameIndex != - 1 ) { typeInfo = ( ComplexTypeInfo ) fComplexTypeRegistry . get ( fStringPool . toString ( typeNameIndex ) ) ; } else { noErrorSoFar = false ; reportGenericSchemaError ( "traverse complexType error in element '" + name + "'" ) ; } haveAnonType = true ; child = XUtil . getNextSiblingElement ( child ) ; } else if ( childName . equals ( SchemaSymbols . ELT_SIMPLETYPE ) ) { if ( child . getAttribute ( SchemaSymbols . ATT_NAME ) . length ( ) > 0 ) { noErrorSoFar = false ; reportGenericSchemaError ( "anonymous simpleType in element '" + name + "' has a name attribute" ) ; } else typeNameIndex = traverseSimpleTypeDecl ( child ) ; if ( typeNameIndex != - 1 ) { dv = fDatatypeRegistry . getDatatypeValidator ( fStringPool . toString ( typeNameIndex ) ) ; } else { noErrorSoFar = false ; reportGenericSchemaError ( "traverse simpleType error in element '" + name + "'" ) ; } contentSpecType = XMLElementDecl . TYPE_SIMPLE ; haveAnonType = true ; child = XUtil . getNextSiblingElement ( child ) ; } else if ( type . equals ( "" ) ) { contentSpecType = XMLElementDecl . TYPE_ANY ; contentSpecNodeIndex = - 1 ; } if ( child != null ) childName = child . getLocalName ( ) ; while ( ( child != null ) && ( ( childName . equals ( SchemaSymbols . ELT_KEY ) ) || ( childName . equals ( SchemaSymbols . ELT_KEYREF ) ) || ( childName . equals ( SchemaSymbols . ELT_UNIQUE ) ) ) ) { child = XUtil . getNextSiblingElement ( child ) ; if ( child != null ) { childName = child . getLocalName ( ) ; } } if ( child != null ) { noErrorSoFar = false ; reportGenericSchemaError ( "only annotation, simpleType, complexType, key, keyref and unique Element Information Items are allowed in element declarations" ) ; } } if ( haveAnonType && ( type . length ( ) > 0 ) ) { noErrorSoFar = false ; reportGenericSchemaError ( "Element '" + name + "' have both a type attribute and a annoymous type child" ) ; } else if ( ! type . equals ( "" ) ) { if ( substitutionGroupElementDecl != null ) { checkSubstitutionGroupOK ( elementDecl , substitutionGroupElementDecl ) ; } String prefix = "" ; String localpart = type ; int colonptr = type . indexOf ( ":" ) ; if ( colonptr > 0 ) { prefix = type . substring ( 0 , colonptr ) ; localpart = type . substring ( colonptr + 1 ) ; } String typeURI = resolvePrefixToURI ( prefix ) ; if ( ! typeURI . equals ( fTargetNSURIString ) && ! typeURI . equals ( SchemaSymbols . URI_SCHEMAFORSCHEMA ) && typeURI . length ( ) != 0 ) { fromAnotherSchema = typeURI ; typeInfo = getTypeInfoFromNS ( typeURI , localpart ) ; if ( typeInfo == null ) { dv = getTypeValidatorFromNS ( typeURI , localpart ) ; if ( dv == null ) { noErrorSoFar = false ; reportGenericSchemaError ( "Could not find type " + localpart + " in schema " + typeURI ) ; } } } else { typeInfo = ( ComplexTypeInfo ) fComplexTypeRegistry . get ( typeURI + "," + localpart ) ; if ( typeInfo == null ) { dv = getDatatypeValidator ( typeURI , localpart ) ; if ( dv == null ) if ( typeURI . equals ( SchemaSymbols . URI_SCHEMAFORSCHEMA ) && ! fTargetNSURIString . equals ( SchemaSymbols . URI_SCHEMAFORSCHEMA ) ) { noErrorSoFar = false ; reportGenericSchemaError ( "type not found : " + typeURI + ":" + localpart ) ; } else { Element topleveltype = getTopLevelComponentByName ( SchemaSymbols . ELT_COMPLEXTYPE , localpart ) ; if ( topleveltype != null ) { if ( fCurrentTypeNameStack . search ( ( Object ) localpart ) > - 1 ) { int uriInd = - 1 ; if ( isQName . equals ( SchemaSymbols . ATTVAL_QUALIFIED ) || fElementDefaultQualified ) { uriInd = fTargetNSURI ; } int nameIndex = fStringPool . addSymbol ( name ) ; QName tempQName = new QName ( fCurrentScope , nameIndex , nameIndex , uriInd ) ; fElementRecurseComplex . put ( tempQName , localpart ) ; return new QName ( - 1 , nameIndex , nameIndex , uriInd ) ; } else { typeNameIndex = traverseComplexTypeDecl ( topleveltype ) ; typeInfo = ( ComplexTypeInfo ) fComplexTypeRegistry . get ( fStringPool . toString ( typeNameIndex ) ) ; } } else { topleveltype = getTopLevelComponentByName ( SchemaSymbols . ELT_SIMPLETYPE , localpart ) ; if ( topleveltype != null ) { typeNameIndex = traverseSimpleTypeDecl ( topleveltype ) ; dv = getDatatypeValidator ( typeURI , localpart ) ; } else { noErrorSoFar = false ; reportGenericSchemaError ( "type not found : " + typeURI + ":" + localpart ) ; } } } } } } else if ( haveAnonType ) { if ( substitutionGroupElementDecl != null ) { checkSubstitutionGroupOK ( elementDecl , substitutionGroupElementDecl ) ; } } else { if ( typeInfo == null && dv == null ) typeInfo = substitutionGroupEltTypeInfo ; if ( typeInfo == null && dv == null ) dv = substitutionGroupEltDV ; } if ( typeInfo == null && dv == null ) { if ( noErrorSoFar ) { contentSpecType = XMLElementDecl . TYPE_ANY ; } else { noErrorSoFar = false ; reportGenericSchemaError ( "untyped element : " + name ) ; } } if ( typeInfo != null ) { contentSpecNodeIndex = typeInfo . contentSpecHandle ; contentSpecType = typeInfo . contentType ; scopeDefined = typeInfo . scopeDefined ; dv = typeInfo . datatypeValidator ; } if ( dv != null ) { contentSpecType = XMLElementDecl . TYPE_SIMPLE ; if ( typeInfo == null ) { fromAnotherSchema = null ; } } int elementNameIndex = fStringPool . addSymbol ( name ) ; int localpartIndex = elementNameIndex ; int uriIndex = - 1 ; int enclosingScope = fCurrentScope ; if ( isTopLevel ( elementDecl ) ) { uriIndex = fTargetNSURI ; enclosingScope = TOP_LEVEL_SCOPE ; } else if ( ! isQName . equals ( SchemaSymbols . ATTVAL_UNQUALIFIED ) ) { if ( isQName . equals ( SchemaSymbols . ATTVAL_QUALIFIED ) || fElementDefaultQualified ) { uriIndex = fTargetNSURI ; } } int existSuchElementIndex = fSchemaGrammar . getElementDeclIndex ( uriIndex , localpartIndex , enclosingScope ) ; if ( existSuchElementIndex > - 1 ) { fSchemaGrammar . getElementDecl ( existSuchElementIndex , fTempElementDecl ) ; DatatypeValidator edv = fTempElementDecl . datatypeValidator ; ComplexTypeInfo eTypeInfo = fSchemaGrammar . getElementComplexTypeInfo ( existSuchElementIndex ) ; if ( ( ( eTypeInfo != null ) && ( eTypeInfo != typeInfo ) ) || ( ( edv != null ) && ( edv != dv ) ) ) { noErrorSoFar = false ; reportGenericSchemaError ( "duplicate element decl in the same scope : " + fStringPool . toString ( localpartIndex ) ) ; } } QName eltQName = new QName ( - 1 , localpartIndex , elementNameIndex , uriIndex ) ; int attrListHead = - 1 ; if ( typeInfo != null ) { attrListHead = typeInfo . attlistHead ; } int elementIndex = fSchemaGrammar . addElementDecl ( eltQName , enclosingScope , scopeDefined , contentSpecType , contentSpecNodeIndex , attrListHead , dv ) ; if ( DEBUGGING ) { System . out . println ( "########elementIndex:" + elementIndex + " (" + fStringPool . toString ( eltQName . uri ) + "," + fStringPool . toString ( eltQName . localpart ) + ")" + " eltType:" + type + " contentSpecType:" + contentSpecType + " SpecNodeIndex:" + contentSpecNodeIndex + " enclosingScope: " + enclosingScope + " scopeDefined: " + scopeDefined + "\n" ) ; } fSchemaGrammar . setElementComplexTypeInfo ( elementIndex , typeInfo ) ; fSchemaGrammar . setElementFromAnotherSchemaURI ( elementIndex , fromAnotherSchema ) ; fSchemaGrammar . setElementDeclBlockSet ( elementIndex , blockSet ) ; fSchemaGrammar . setElementDeclFinalSet ( elementIndex , finalSet ) ; fSchemaGrammar . setElementDeclMiscFlags ( elementIndex , elementMiscFlags ) ; fSchemaGrammar . setElementDeclSubstitutionGroupElementFullName ( elementIndex , substitutionGroupFullName ) ; Element ic = XUtil . getFirstChildElement ( elementDecl , IDENTITY_CONSTRAINTS ) ; Vector idConstraints = null ; if ( ic != null ) { XMLElementDecl edecl = new XMLElementDecl ( ) ; fSchemaGrammar . getElementDecl ( elementIndex , edecl ) ; while ( ic != null ) { String icName = ic . getLocalName ( ) ; if ( icName . equals ( SchemaSymbols . ELT_KEY ) ) { traverseKey ( ic , edecl ) ; } else if ( icName . equals ( SchemaSymbols . ELT_KEYREF ) ) { traverseKeyRef ( ic , edecl ) ; } else if ( icName . equals ( SchemaSymbols . ELT_UNIQUE ) ) { traverseUnique ( ic , edecl ) ; } else { throw new RuntimeException ( "identity constraint must be one of " + "\"" + SchemaSymbols . ELT_UNIQUE + "\", " + "\"" + SchemaSymbols . ELT_KEY + "\", or " + "\"" + SchemaSymbols . ELT_KEYREF + '"' ) ; } fSchemaGrammar . setElementDecl ( elementIndex , edecl ) ; ic = XUtil . getNextSiblingElement ( ic , IDENTITY_CONSTRAINTS ) ; } } return eltQName ; } private void traverseUnique ( Element uelem , XMLElementDecl edecl ) throws Exception { if ( DEBUG_IDENTITY_CONSTRAINTS ) { System . out . println ( "<IC>: traverseUnique(\"" + uelem . getNodeName ( ) + "\")" ) ; } String ename = getElementNameFor ( uelem ) ; Unique unique = new Unique ( ename ) ; traverseIdentityConstraint ( unique , uelem ) ; edecl . unique . addElement ( unique ) ; } private void traverseKey ( Element kelem , XMLElementDecl edecl ) throws Exception { String kname = kelem . getAttribute ( SchemaSymbols . ATT_NAME ) ; if ( DEBUG_IDENTITY_CONSTRAINTS ) { System . out . println ( "<IC>: traverseKey(\"" + kelem . getNodeName ( ) + "\") [" + kname + ']' ) ; } String ename = getElementNameFor ( kelem ) ; Key key = new Key ( ename , kname ) ; traverseIdentityConstraint ( key , kelem ) ; edecl . key . addElement ( key ) ; } private void traverseKeyRef ( Element krelem , XMLElementDecl edecl ) throws Exception { String krname = krelem . getAttribute ( SchemaSymbols . ATT_NAME ) ; if ( DEBUG_IDENTITY_CONSTRAINTS ) { System . out . println ( "<IC>: traverseKeyRef(\"" + krelem . getNodeName ( ) + "\") [" + krname + ']' ) ; } String ename = getElementNameFor ( krelem ) ; KeyRef keyRef = new KeyRef ( ename , krname ) ; traverseIdentityConstraint ( keyRef , krelem ) ; edecl . keyRef . addElement ( keyRef ) ; } private void traverseIdentityConstraint ( IdentityConstraint ic , Element icelem ) throws Exception { Element selem = XUtil . getFirstChildElement ( icelem , SchemaSymbols . ELT_SELECTOR ) ; String stext = CR_IMPL ? selem . getAttribute ( SchemaSymbols . ATT_XPATH ) : XUtil . getChildText ( selem ) ; stext = stext . trim ( ) ; try { Selector . XPath sxpath = new Selector . XPath ( stext , fStringPool , fNamespacesScope ) ; Selector selector = new Selector ( sxpath , ic ) ; if ( DEBUG_IDENTITY_CONSTRAINTS ) { System . out . println ( "<IC>:   selector: " + selector ) ; } ic . setSelector ( selector ) ; } catch ( XPathException e ) { throw new SAXException ( e . getMessage ( ) ) ; } Element felem = XUtil . getNextSiblingElement ( selem , SchemaSymbols . ELT_FIELD ) ; while ( felem != null ) { String ftext = CR_IMPL ? felem . getAttribute ( SchemaSymbols . ATT_XPATH ) : XUtil . getChildText ( felem ) ; ftext = ftext . trim ( ) ; try { Field . XPath fxpath = new Field . XPath ( ftext , fStringPool , fNamespacesScope ) ; Field field = new Field ( fxpath , null , ic ) ; if ( DEBUG_IDENTITY_CONSTRAINTS ) { System . out . println ( "<IC>:   field:    " + field ) ; } ic . addField ( field ) ; } catch ( XPathException e ) { throw new SAXException ( e . getMessage ( ) ) ; } felem = XUtil . getNextSiblingElement ( felem , SchemaSymbols . ELT_FIELD ) ; } } private String getElementNameFor ( Element icnode ) { Element enode = ( Element ) icnode . getParentNode ( ) ; String ename = enode . getAttribute ( "name" ) ; if ( ename . length ( ) == 0 ) { ename = enode . getAttribute ( "ref" ) ; } return ename ; } int getLocalPartIndex ( String fullName ) { int colonAt = fullName . indexOf ( ":" ) ; String localpart = fullName ; if ( colonAt > - 1 ) { localpart = fullName . substring ( colonAt + 1 ) ; } return fStringPool . addSymbol ( localpart ) ; } String getLocalPart ( String fullName ) { int colonAt = fullName . indexOf ( ":" ) ; String localpart = fullName ; if ( colonAt > - 1 ) { localpart = fullName . substring ( colonAt + 1 ) ; } return localpart ; } int getPrefixIndex ( String fullName ) { int colonAt = fullName . indexOf ( ":" ) ; String prefix = "" ; if ( colonAt > - 1 ) { prefix = fullName . substring ( 0 , colonAt ) ; } return fStringPool . addSymbol ( prefix ) ; } String getPrefix ( String fullName ) { int colonAt = fullName . indexOf ( ":" ) ; String prefix = "" ; if ( colonAt > - 1 ) { prefix = fullName . substring ( 0 , colonAt ) ; } return prefix ; } private void checkSubstitutionGroupOK ( Element elementDecl , Element substitutionGroupElementDecl ) { } private Element getTopLevelComponentByName ( String componentCategory , String name ) throws Exception { Element child = null ; if ( componentCategory . equals ( SchemaSymbols . ELT_GROUP ) ) { child = ( Element ) fSchemaGrammar . topLevelGroupDecls . get ( name ) ; } else if ( componentCategory . equals ( SchemaSymbols . ELT_ATTRIBUTEGROUP ) ) { child = ( Element ) fSchemaGrammar . topLevelAttrGrpDecls . get ( name ) ; } else if ( componentCategory . equals ( SchemaSymbols . ELT_ATTRIBUTE ) ) { child = ( Element ) fSchemaGrammar . topLevelAttrDecls . get ( name ) ; } if ( child != null ) { return child ; } child = XUtil . getFirstChildElement ( fSchemaRootElement ) ; if ( child == null ) { return null ; } while ( child != null ) { if ( child . getLocalName ( ) . equals ( componentCategory ) ) { if ( child . getAttribute ( SchemaSymbols . ATT_NAME ) . equals ( name ) ) { return child ; } } child = XUtil . getNextSiblingElement ( child ) ; } return null ; } private boolean isTopLevel ( Element component ) { return ( component . getParentNode ( ) . getLocalName ( ) . endsWith ( SchemaSymbols . ELT_SCHEMA ) ) ; } DatatypeValidator getTypeValidatorFromNS ( String newSchemaURI , String localpart ) throws Exception { return getDatatypeValidator ( newSchemaURI , localpart ) ; } ComplexTypeInfo getTypeInfoFromNS ( String newSchemaURI , String localpart ) throws Exception { Grammar grammar = fGrammarResolver . getGrammar ( newSchemaURI ) ; if ( grammar != null && grammar instanceof SchemaGrammar ) { SchemaGrammar sGrammar = ( SchemaGrammar ) grammar ; ComplexTypeInfo typeInfo = ( ComplexTypeInfo ) sGrammar . getComplexTypeRegistry ( ) . get ( newSchemaURI + "," + localpart ) ; return typeInfo ; } else { reportGenericSchemaError ( "could not resolve URI : " + newSchemaURI + " to a SchemaGrammar in getTypeInfoFromNS" ) ; } return null ; } DatatypeValidator getElementDeclTypeValidatorFromNS ( String newSchemaURI , String localpart ) throws Exception { Grammar grammar = fGrammarResolver . getGrammar ( newSchemaURI ) ; if ( grammar != null && grammar instanceof SchemaGrammar ) { SchemaGrammar sGrammar = ( SchemaGrammar ) grammar ; int eltIndex = sGrammar . getElementDeclIndex ( fStringPool . addSymbol ( newSchemaURI ) , fStringPool . addSymbol ( localpart ) , TOP_LEVEL_SCOPE ) ; DatatypeValidator dv = null ; if ( eltIndex > - 1 ) { sGrammar . getElementDecl ( eltIndex , fTempElementDecl ) ; dv = fTempElementDecl . datatypeValidator ; } else { reportGenericSchemaError ( "could not find global element : '" + localpart + " in the SchemaGrammar " + newSchemaURI ) ; } return dv ; } else { reportGenericSchemaError ( "could not resolve URI : " + newSchemaURI + " to a SchemaGrammar in getELementDeclTypeValidatorFromNS" ) ; } return null ; } ComplexTypeInfo getElementDeclTypeInfoFromNS ( String newSchemaURI , String localpart ) throws Exception { Grammar grammar = fGrammarResolver . getGrammar ( newSchemaURI ) ; if ( grammar != null && grammar instanceof SchemaGrammar ) { SchemaGrammar sGrammar = ( SchemaGrammar ) grammar ; int eltIndex = sGrammar . getElementDeclIndex ( fStringPool . addSymbol ( newSchemaURI ) , fStringPool . addSymbol ( localpart ) , TOP_LEVEL_SCOPE ) ; ComplexTypeInfo typeInfo = null ; if ( eltIndex > - 1 ) { typeInfo = sGrammar . getElementComplexTypeInfo ( eltIndex ) ; } else { reportGenericSchemaError ( "could not find global element : '" + localpart + " in the SchemaGrammar " + newSchemaURI ) ; } return typeInfo ; } else { reportGenericSchemaError ( "could not resolve URI : " + newSchemaURI + " to a SchemaGrammar in getElementDeclTypeInfoFromNS" ) ; } return null ; } private int traverseGroupDecl ( Element groupDecl ) throws Exception { String groupName = groupDecl . getAttribute ( SchemaSymbols . ATT_NAME ) ; String ref = groupDecl . getAttribute ( SchemaSymbols . ATT_REF ) ; if ( ! ref . equals ( "" ) ) { if ( XUtil . getFirstChildElement ( groupDecl ) != null ) reportSchemaError ( SchemaMessageProvider . NoContentForRef , null ) ; String prefix = "" ; String localpart = ref ; int colonptr = ref . indexOf ( ":" ) ; if ( colonptr > 0 ) { prefix = ref . substring ( 0 , colonptr ) ; localpart = ref . substring ( colonptr + 1 ) ; } int localpartIndex = fStringPool . addSymbol ( localpart ) ; String uriStr = resolvePrefixToURI ( prefix ) ; if ( ! uriStr . equals ( fTargetNSURIString ) ) { return traverseGroupDeclFromAnotherSchema ( localpart , uriStr ) ; } int contentSpecIndex = - 1 ; Element referredGroup = getTopLevelComponentByName ( SchemaSymbols . ELT_GROUP , localpart ) ; if ( referredGroup == null ) { reportGenericSchemaError ( "Group " + localpart + " not found in the Schema" ) ; } else { contentSpecIndex = traverseGroupDecl ( referredGroup ) ; } return contentSpecIndex ; } boolean traverseElt = true ; if ( fCurrentScope == TOP_LEVEL_SCOPE ) { traverseElt = false ; } Element child = XUtil . getFirstChildElement ( groupDecl ) ; while ( child != null && child . getLocalName ( ) . equals ( SchemaSymbols . ELT_ANNOTATION ) ) child = XUtil . getNextSiblingElement ( child ) ; int contentSpecType = 0 ; int csnType = 0 ; int allChildren [ ] = null ; int allChildCount = 0 ; csnType = XMLContentSpec . CONTENTSPECNODE_SEQ ; contentSpecType = XMLElementDecl . TYPE_CHILDREN ; int left = - 2 ; int right = - 2 ; boolean hadContent = false ; boolean seeAll = false ; boolean seeParticle = false ; for ( ; child != null ; child = XUtil . getNextSiblingElement ( child ) ) { int index = - 2 ; hadContent = true ; boolean illegalChild = false ; String childName = child . getLocalName ( ) ; if ( childName . equals ( SchemaSymbols . ELT_ELEMENT ) ) { QName eltQName = traverseElementDecl ( child ) ; index = fSchemaGrammar . addContentSpecNode ( XMLContentSpec . CONTENTSPECNODE_LEAF , eltQName . localpart , eltQName . uri , false ) ; seeParticle = true ; } else if ( childName . equals ( SchemaSymbols . ELT_GROUP ) ) { index = traverseGroupDecl ( child ) ; if ( index == - 1 ) continue ; seeParticle = true ; } else if ( childName . equals ( SchemaSymbols . ELT_ALL ) ) { index = traverseAll ( child ) ; seeAll = true ; } else if ( childName . equals ( SchemaSymbols . ELT_CHOICE ) ) { index = traverseChoice ( child ) ; seeParticle = true ; } else if ( childName . equals ( SchemaSymbols . ELT_SEQUENCE ) ) { index = traverseSequence ( child ) ; seeParticle = true ; } else if ( childName . equals ( SchemaSymbols . ELT_ANY ) ) { index = traverseAny ( child ) ; seeParticle = true ; } else { illegalChild = true ; reportSchemaError ( SchemaMessageProvider . GroupContentRestricted , new Object [ ] { "group" , childName } ) ; } if ( ! illegalChild ) { index = expandContentModel ( index , child ) ; } if ( seeParticle && seeAll ) { reportSchemaError ( SchemaMessageProvider . GroupContentRestricted , new Object [ ] { "'all' needs to be 'the' only Child" , childName } ) ; } if ( left == - 2 ) { left = index ; } else if ( right == - 2 ) { right = index ; } else { left = fSchemaGrammar . addContentSpecNode ( csnType , left , right , false ) ; right = index ; } } if ( hadContent && right != - 2 ) left = fSchemaGrammar . addContentSpecNode ( csnType , left , right , false ) ; return left ; } private int traverseGroupDeclFromAnotherSchema ( String groupName , String uriStr ) throws Exception { SchemaGrammar aGrammar = ( SchemaGrammar ) fGrammarResolver . getGrammar ( uriStr ) ; if ( uriStr == null || aGrammar == null || ! ( aGrammar instanceof SchemaGrammar ) ) { reportGenericSchemaError ( "!!Schema not found in #traverseGroupDeclFromAnotherSchema, " + "schema uri: " + uriStr + ", groupName: " + groupName ) ; return - 1 ; } Element groupDecl = ( Element ) aGrammar . topLevelGroupDecls . get ( ( Object ) groupName ) ; if ( groupDecl == null ) { reportGenericSchemaError ( "no group named \"" + groupName + "\" was defined in schema : " + uriStr ) ; return - 1 ; } NamespacesScope saveNSMapping = fNamespacesScope ; int saveTargetNSUri = fTargetNSURI ; fTargetNSURI = fStringPool . addSymbol ( aGrammar . getTargetNamespaceURI ( ) ) ; fNamespacesScope = aGrammar . getNamespacesScope ( ) ; boolean traverseElt = true ; if ( fCurrentScope == TOP_LEVEL_SCOPE ) { traverseElt = false ; } Element child = XUtil . getFirstChildElement ( groupDecl ) ; while ( child != null && child . getLocalName ( ) . equals ( SchemaSymbols . ELT_ANNOTATION ) ) child = XUtil . getNextSiblingElement ( child ) ; int contentSpecType = 0 ; int csnType = 0 ; int allChildren [ ] = null ; int allChildCount = 0 ; csnType = XMLContentSpec . CONTENTSPECNODE_SEQ ; contentSpecType = XMLElementDecl . TYPE_CHILDREN ; int left = - 2 ; int right = - 2 ; boolean hadContent = false ; for ( ; child != null ; child = XUtil . getNextSiblingElement ( child ) ) { int index = - 2 ; hadContent = true ; boolean seeParticle = false ; String childName = child . getLocalName ( ) ; int childNameIndex = fStringPool . addSymbol ( childName ) ; String formAttrVal = child . getAttribute ( SchemaSymbols . ATT_FORM ) ; if ( childName . equals ( SchemaSymbols . ELT_ELEMENT ) ) { QName eltQName = traverseElementDecl ( child ) ; index = fSchemaGrammar . addContentSpecNode ( XMLContentSpec . CONTENTSPECNODE_LEAF , eltQName . localpart , eltQName . uri , false ) ; seeParticle = true ; } else if ( childName . equals ( SchemaSymbols . ELT_GROUP ) ) { index = traverseGroupDecl ( child ) ; if ( index == - 1 ) continue ; seeParticle = true ; } else if ( childName . equals ( SchemaSymbols . ELT_ALL ) ) { index = traverseAll ( child ) ; seeParticle = true ; } else if ( childName . equals ( SchemaSymbols . ELT_CHOICE ) ) { index = traverseChoice ( child ) ; seeParticle = true ; } else if ( childName . equals ( SchemaSymbols . ELT_SEQUENCE ) ) { index = traverseSequence ( child ) ; seeParticle = true ; } else if ( childName . equals ( SchemaSymbols . ELT_ANY ) ) { index = traverseAny ( child ) ; seeParticle = true ; } else { reportSchemaError ( SchemaMessageProvider . GroupContentRestricted , new Object [ ] { "group" , childName } ) ; } if ( seeParticle ) { index = expandContentModel ( index , child ) ; } if ( left == - 2 ) { left = index ; } else if ( right == - 2 ) { right = index ; } else { left = fSchemaGrammar . addContentSpecNode ( csnType , left , right , false ) ; right = index ; } } if ( hadContent && right != - 2 ) left = fSchemaGrammar . addContentSpecNode ( csnType , left , right , false ) ; fNamespacesScope = saveNSMapping ; fTargetNSURI = saveTargetNSUri ; return left ; } int traverseSequence ( Element sequenceDecl ) throws Exception { Element child = XUtil . getFirstChildElement ( sequenceDecl ) ; while ( child != null && child . getLocalName ( ) . equals ( SchemaSymbols . ELT_ANNOTATION ) ) child = XUtil . getNextSiblingElement ( child ) ; int contentSpecType = 0 ; int csnType = 0 ; csnType = XMLContentSpec . CONTENTSPECNODE_SEQ ; contentSpecType = XMLElementDecl . TYPE_CHILDREN ; int left = - 2 ; int right = - 2 ; boolean hadContent = false ; for ( ; child != null ; child = XUtil . getNextSiblingElement ( child ) ) { int index = - 2 ; hadContent = true ; boolean seeParticle = false ; String childName = child . getLocalName ( ) ; if ( childName . equals ( SchemaSymbols . ELT_ELEMENT ) ) { QName eltQName = traverseElementDecl ( child ) ; index = fSchemaGrammar . addContentSpecNode ( XMLContentSpec . CONTENTSPECNODE_LEAF , eltQName . localpart , eltQName . uri , false ) ; seeParticle = true ; } else if ( childName . equals ( SchemaSymbols . ELT_GROUP ) ) { index = traverseGroupDecl ( child ) ; if ( index == - 1 ) continue ; seeParticle = true ; } else if ( childName . equals ( SchemaSymbols . ELT_CHOICE ) ) { index = traverseChoice ( child ) ; seeParticle = true ; } else if ( childName . equals ( SchemaSymbols . ELT_SEQUENCE ) ) { index = traverseSequence ( child ) ; seeParticle = true ; } else if ( childName . equals ( SchemaSymbols . ELT_ANY ) ) { index = traverseAny ( child ) ; seeParticle = true ; } else { reportSchemaError ( SchemaMessageProvider . GroupContentRestricted , new Object [ ] { "group" , childName } ) ; } if ( seeParticle ) { index = expandContentModel ( index , child ) ; } if ( left == - 2 ) { left = index ; } else if ( right == - 2 ) { right = index ; } else { left = fSchemaGrammar . addContentSpecNode ( csnType , left , right , false ) ; right = index ; } } if ( hadContent && right != - 2 ) left = fSchemaGrammar . addContentSpecNode ( csnType , left , right , false ) ; return left ; } int traverseChoice ( Element choiceDecl ) throws Exception { Element child = XUtil . getFirstChildElement ( choiceDecl ) ; while ( child != null && child . getLocalName ( ) . equals ( SchemaSymbols . ELT_ANNOTATION ) ) child = XUtil . getNextSiblingElement ( child ) ; int contentSpecType = 0 ; int csnType = 0 ; csnType = XMLContentSpec . CONTENTSPECNODE_CHOICE ; contentSpecType = XMLElementDecl . TYPE_CHILDREN ; int left = - 2 ; int right = - 2 ; boolean hadContent = false ; for ( ; child != null ; child = XUtil . getNextSiblingElement ( child ) ) { int index = - 2 ; hadContent = true ; boolean seeParticle = false ; String childName = child . getLocalName ( ) ; if ( childName . equals ( SchemaSymbols . ELT_ELEMENT ) ) { QName eltQName = traverseElementDecl ( child ) ; index = fSchemaGrammar . addContentSpecNode ( XMLContentSpec . CONTENTSPECNODE_LEAF , eltQName . localpart , eltQName . uri , false ) ; seeParticle = true ; } else if ( childName . equals ( SchemaSymbols . ELT_GROUP ) ) { index = traverseGroupDecl ( child ) ; if ( index == - 1 ) continue ; seeParticle = true ; } else if ( childName . equals ( SchemaSymbols . ELT_CHOICE ) ) { index = traverseChoice ( child ) ; seeParticle = true ; } else if ( childName . equals ( SchemaSymbols . ELT_SEQUENCE ) ) { index = traverseSequence ( child ) ; seeParticle = true ; } else if ( childName . equals ( SchemaSymbols . ELT_ANY ) ) { index = traverseAny ( child ) ; seeParticle = true ; } else { reportSchemaError ( SchemaMessageProvider . GroupContentRestricted , new Object [ ] { "group" , childName } ) ; } if ( seeParticle ) { index = expandContentModel ( index , child ) ; } if ( left == - 2 ) { left = index ; } else if ( right == - 2 ) { right = index ; } else { left = fSchemaGrammar . addContentSpecNode ( csnType , left , right , false ) ; right = index ; } } if ( hadContent && right != - 2 ) left = fSchemaGrammar . addContentSpecNode ( csnType , left , right , false ) ; return left ; } int traverseAll ( Element allDecl ) throws Exception { Element child = XUtil . getFirstChildElement ( allDecl ) ; while ( child != null && child . getLocalName ( ) . equals ( SchemaSymbols . ELT_ANNOTATION ) ) child = XUtil . getNextSiblingElement ( child ) ; int allChildren [ ] = null ; int allChildCount = 0 ; int left = - 2 ; for ( ; child != null ; child = XUtil . getNextSiblingElement ( child ) ) { int index = - 2 ; boolean seeParticle = false ; String childName = child . getLocalName ( ) ; if ( childName . equals ( SchemaSymbols . ELT_ELEMENT ) ) { QName eltQName = traverseElementDecl ( child ) ; index = fSchemaGrammar . addContentSpecNode ( XMLContentSpec . CONTENTSPECNODE_LEAF , eltQName . localpart , eltQName . uri , false ) ; seeParticle = true ; } else if ( CR_IMPL ) { reportGenericSchemaError ( "Content of all group is restricted to elements only.  '" + childName + "' was seen and is being ignored" ) ; break ; } else { if ( childName . equals ( SchemaSymbols . ELT_GROUP ) ) { index = traverseGroupDecl ( child ) ; if ( index == - 1 ) continue ; seeParticle = true ; } else if ( childName . equals ( SchemaSymbols . ELT_CHOICE ) ) { index = traverseChoice ( child ) ; seeParticle = true ; } else if ( childName . equals ( SchemaSymbols . ELT_SEQUENCE ) ) { index = traverseSequence ( child ) ; seeParticle = true ; } else if ( childName . equals ( SchemaSymbols . ELT_ANY ) ) { index = traverseAny ( child ) ; seeParticle = true ; } else { reportSchemaError ( SchemaMessageProvider . GroupContentRestricted , new Object [ ] { "group" , childName } ) ; } } if ( seeParticle ) { index = expandContentModel ( index , child ) ; } try { allChildren [ allChildCount ] = index ; } catch ( NullPointerException ne ) { allChildren = new int [ 32 ] ; allChildren [ allChildCount ] = index ; } catch ( ArrayIndexOutOfBoundsException ae ) { int [ ] newArray = new int [ allChildren . length * 2 ] ; System . arraycopy ( allChildren , 0 , newArray , 0 , allChildren . length ) ; allChildren [ allChildCount ] = index ; } allChildCount ++ ; } if ( allChildCount == 0 ) return left ; try { left = allCalcWrapper ( allChildren , allChildCount ) ; } catch ( java . lang . OutOfMemoryError e ) { reportGenericSchemaError ( "The size of the <all>" + " declaration in your schema is too large for this parser" + " and elements using it will not validate correctly." ) ; } return left ; } private int allCalcWrapper ( int [ ] initialArray , int size ) throws Exception { int permSize = size / 2 ; int [ ] targetArray = new int [ size ] ; System . arraycopy ( initialArray , 0 , targetArray , 0 , size ) ; if ( targetArray . length == 1 ) { return targetArray [ 0 ] ; } else if ( targetArray . length < 1 ) { return - 2 ; } else if ( permSize > targetArray . length ) { reportGenericSchemaError ( "The size of the permutations " + permSize + " cannot be greater than the length of the array to be permuted; error in processing of <all>!" ) ; return - 2 ; } else if ( targetArray . length <= 3 ) { return allCombo ( targetArray ) ; } else { return allCalc ( targetArray , 0 , permSize , 0 , new int [ targetArray . length - permSize ] , - 2 ) ; } } private int allCombo ( int [ ] targetArray ) throws Exception { if ( targetArray . length == 2 ) { int left , right ; int [ ] lA = { targetArray [ 0 ] , targetArray [ 1 ] } ; int [ ] rA = { targetArray [ 1 ] , targetArray [ 0 ] } ; left = createSeq ( lA ) ; right = createSeq ( rA ) ; return fSchemaGrammar . addContentSpecNode ( XMLContentSpec . CONTENTSPECNODE_CHOICE , left , right , false ) ; } else if ( targetArray . length == 3 ) { int tempChoice ; int [ ] a1 = { targetArray [ 0 ] , targetArray [ 1 ] , targetArray [ 2 ] } ; int [ ] a2 = { targetArray [ 0 ] , targetArray [ 2 ] , targetArray [ 1 ] } ; int [ ] a3 = { targetArray [ 1 ] , targetArray [ 0 ] , targetArray [ 2 ] } ; int [ ] a4 = { targetArray [ 1 ] , targetArray [ 2 ] , targetArray [ 0 ] } ; int [ ] a5 = { targetArray [ 2 ] , targetArray [ 1 ] , targetArray [ 0 ] } ; int [ ] a6 = { targetArray [ 2 ] , targetArray [ 0 ] , targetArray [ 1 ] } ; int s1 = createSeq ( a1 ) ; int s2 = createSeq ( a2 ) ; int s3 = createSeq ( a3 ) ; int s4 = createSeq ( a4 ) ; int s5 = createSeq ( a5 ) ; int s6 = createSeq ( a6 ) ; tempChoice = fSchemaGrammar . addContentSpecNode ( XMLContentSpec . CONTENTSPECNODE_CHOICE , s1 , s2 , false ) ; tempChoice = fSchemaGrammar . addContentSpecNode ( XMLContentSpec . CONTENTSPECNODE_CHOICE , tempChoice , s3 , false ) ; tempChoice = fSchemaGrammar . addContentSpecNode ( XMLContentSpec . CONTENTSPECNODE_CHOICE , tempChoice , s4 , false ) ; tempChoice = fSchemaGrammar . addContentSpecNode ( XMLContentSpec . CONTENTSPECNODE_CHOICE , tempChoice , s5 , false ) ; return fSchemaGrammar . addContentSpecNode ( XMLContentSpec . CONTENTSPECNODE_CHOICE , tempChoice , s6 , false ) ; } else { return - 2 ; } } private int allCalc ( int [ ] targetArray , int targetPosition , int permSize , int progressIndicator , int [ ] complementArray , int choiceHead ) throws Exception { if ( targetArray . length - permSize - targetPosition == 1 ) { int [ ] newTargetArray = new int [ permSize + targetPosition ] ; int allSeq ; for ( int i = targetPosition ; i < targetArray . length ; i ++ ) { arrayProducer ( targetArray , i , newTargetArray , complementArray , progressIndicator ) ; int c1 = allCalcWrapper ( newTargetArray , newTargetArray . length ) ; int c2 = allCalcWrapper ( complementArray , complementArray . length ) ; allSeq = fSchemaGrammar . addContentSpecNode ( XMLContentSpec . CONTENTSPECNODE_SEQ , c1 , c2 , false ) ; if ( choiceHead != - 2 ) { choiceHead = fSchemaGrammar . addContentSpecNode ( XMLContentSpec . CONTENTSPECNODE_CHOICE , choiceHead , allSeq , false ) ; } else { choiceHead = allSeq ; } } return choiceHead ; } else { for ( int i = targetPosition ; i < targetArray . length ; i ++ ) { int [ ] newTargetArray = new int [ targetArray . length - 1 ] ; arrayProducer ( targetArray , i , newTargetArray , complementArray , progressIndicator ) ; choiceHead = allCalc ( newTargetArray , targetPosition , permSize , progressIndicator + 1 , complementArray , choiceHead ) ; targetPosition ++ ; permSize -- ; } return choiceHead ; } } private void arrayProducer ( int [ ] targetArray , int tPos , int [ ] newTargetArray , int [ ] complementArray , int cPos ) { complementArray [ cPos ] = targetArray [ tPos ] ; if ( tPos > 0 ) System . arraycopy ( targetArray , 0 , newTargetArray , 0 , tPos ) ; if ( tPos < targetArray . length - 1 ) System . arraycopy ( targetArray , tPos + 1 , newTargetArray , tPos , targetArray . length - tPos - 1 ) ; } private int createSeq ( int src [ ] ) throws Exception { int left = src [ 0 ] ; int right = src [ 1 ] ; for ( int i = 2 ; i < src . length ; i ++ ) { left = fSchemaGrammar . addContentSpecNode ( XMLContentSpec . CONTENTSPECNODE_SEQ , left , right , false ) ; right = src [ i ] ; } return fSchemaGrammar . addContentSpecNode ( XMLContentSpec . CONTENTSPECNODE_SEQ , left , right , false ) ; } private int parseInt ( String intString ) throws Exception { if ( intString . equals ( "*" ) ) { return SchemaSymbols . INFINITY ; } else { return Integer . parseInt ( intString ) ; } } private int parseSimpleFinal ( String finalString ) throws Exception { if ( finalString . equals ( SchemaSymbols . ATTVAL_POUNDALL ) ) { return SchemaSymbols . ENUMERATION + SchemaSymbols . RESTRICTION + SchemaSymbols . LIST + SchemaSymbols . REPRODUCTION ; } else { int enumerate = 0 ; int restrict = 0 ; int list = 0 ; int reproduce = 0 ; StringTokenizer t = new StringTokenizer ( finalString , " " ) ; while ( t . hasMoreTokens ( ) ) { String token = t . nextToken ( ) ; if ( token . equals ( SchemaSymbols . ATTVAL_RESTRICTION ) ) { if ( restrict == 0 ) { restrict = SchemaSymbols . RESTRICTION ; } else { reportGenericSchemaError ( "restriction in set twice" ) ; } } else if ( token . equals ( SchemaSymbols . ELT_LIST ) ) { if ( list == 0 ) { list = SchemaSymbols . LIST ; } else { reportGenericSchemaError ( "list in set twice" ) ; } } else { reportGenericSchemaError ( "Invalid value (" + finalString + ")" ) ; } } return enumerate + restrict + list + reproduce ; } } private int parseComplexContent ( String contentString ) throws Exception { if ( contentString . equals ( SchemaSymbols . ATTVAL_EMPTY ) ) { return XMLElementDecl . TYPE_EMPTY ; } else if ( contentString . equals ( SchemaSymbols . ATTVAL_ELEMENTONLY ) ) { return XMLElementDecl . TYPE_CHILDREN ; } else if ( contentString . equals ( SchemaSymbols . ATTVAL_TEXTONLY ) ) { return XMLElementDecl . TYPE_SIMPLE ; } else if ( contentString . equals ( SchemaSymbols . ATTVAL_MIXED ) ) { return XMLElementDecl . TYPE_MIXED ; } else { reportGenericSchemaError ( "Invalid value for content" ) ; return - 1 ; } } private int parseDerivationSet ( String finalString ) throws Exception { if ( finalString . equals ( "#all" ) ) { return SchemaSymbols . EXTENSION + SchemaSymbols . RESTRICTION + SchemaSymbols . REPRODUCTION ; } else { int extend = 0 ; int restrict = 0 ; int reproduce = 0 ; StringTokenizer t = new StringTokenizer ( finalString , " " ) ; while ( t . hasMoreTokens ( ) ) { String token = t . nextToken ( ) ; if ( token . equals ( SchemaSymbols . ATTVAL_EXTENSION ) ) { if ( extend == 0 ) { extend = SchemaSymbols . EXTENSION ; } else { reportGenericSchemaError ( "extension already in set" ) ; } } else if ( token . equals ( SchemaSymbols . ATTVAL_RESTRICTION ) ) { if ( restrict == 0 ) { restrict = SchemaSymbols . RESTRICTION ; } else { reportGenericSchemaError ( "restriction already in set" ) ; } } else { reportGenericSchemaError ( "Invalid final value (" + finalString + ")" ) ; } } return extend + restrict + reproduce ; } } private int parseBlockSet ( String finalString ) throws Exception { if ( finalString . equals ( "#all" ) ) { return SchemaSymbols . SUBSTITUTIONGROUP + SchemaSymbols . EXTENSION + SchemaSymbols . LIST + SchemaSymbols . RESTRICTION + SchemaSymbols . REPRODUCTION ; } else { int extend = 0 ; int restrict = 0 ; int reproduce = 0 ; StringTokenizer t = new StringTokenizer ( finalString , " " ) ; while ( t . hasMoreTokens ( ) ) { String token = t . nextToken ( ) ; if ( token . equals ( SchemaSymbols . ATTVAL_SUBSTITUTIONGROUP ) ) { if ( extend == 0 ) { extend = SchemaSymbols . SUBSTITUTIONGROUP ; } else { reportGenericSchemaError ( "'substitutionGroup' already in set" ) ; } } else if ( token . equals ( SchemaSymbols . ATTVAL_EXTENSION ) ) { if ( extend == 0 ) { extend = SchemaSymbols . EXTENSION ; } else { reportGenericSchemaError ( "extension already in set" ) ; } } else if ( token . equals ( SchemaSymbols . ELT_LIST ) ) { if ( extend == 0 ) { extend = SchemaSymbols . LIST ; } else { reportGenericSchemaError ( "'list' already in set" ) ; } } else if ( token . equals ( SchemaSymbols . ATTVAL_RESTRICTION ) ) { if ( restrict == 0 ) { restrict = SchemaSymbols . RESTRICTION ; } else { reportGenericSchemaError ( "restriction already in set" ) ; } } else { reportGenericSchemaError ( "Invalid final value (" + finalString + ")" ) ; } } return extend + restrict + reproduce ; } } private int parseFinalSet ( String finalString ) throws Exception { if ( finalString . equals ( "#all" ) ) { return SchemaSymbols . SUBSTITUTIONGROUP + SchemaSymbols . EXTENSION + SchemaSymbols . LIST + SchemaSymbols . RESTRICTION + SchemaSymbols . REPRODUCTION ; } else { int extend = 0 ; int restrict = 0 ; int reproduce = 0 ; StringTokenizer t = new StringTokenizer ( finalString , " " ) ; while ( t . hasMoreTokens ( ) ) { String token = t . nextToken ( ) ; if ( token . equals ( SchemaSymbols . ATTVAL_SUBSTITUTIONGROUP ) ) { if ( extend == 0 ) { extend = SchemaSymbols . SUBSTITUTIONGROUP ; } else { reportGenericSchemaError ( "'substitutionGroup' already in set" ) ; } } else if ( token . equals ( SchemaSymbols . ATTVAL_EXTENSION ) ) { if ( extend == 0 ) { extend = SchemaSymbols . EXTENSION ; } else { reportGenericSchemaError ( "extension already in set" ) ; } } else if ( token . equals ( SchemaSymbols . ELT_LIST ) ) { if ( extend == 0 ) { extend = SchemaSymbols . LIST ; } else { reportGenericSchemaError ( "'list' already in set" ) ; } } else if ( token . equals ( SchemaSymbols . ATTVAL_RESTRICTION ) ) { if ( restrict == 0 ) { restrict = SchemaSymbols . RESTRICTION ; } else { reportGenericSchemaError ( "restriction already in set" ) ; } } else { reportGenericSchemaError ( "Invalid final value (" + finalString + ")" ) ; } } return extend + restrict + reproduce ; } } private void reportGenericSchemaError ( String error ) throws Exception { if ( fErrorReporter == null ) { System . err . println ( "__TraverseSchemaError__ : " + error ) ; } else { reportSchemaError ( SchemaMessageProvider . GenericError , new Object [ ] { error } ) ; } } private void reportSchemaError ( int major , Object args [ ] ) throws Exception { if ( fErrorReporter == null ) { System . out . println ( "__TraverseSchemaError__ : " + SchemaMessageProvider . fgMessageKeys [ major ] ) ; for ( int i = 0 ; i < args . length ; i ++ ) { System . out . println ( ( String ) args [ i ] ) ; } } else { fErrorReporter . reportError ( fErrorReporter . getLocator ( ) , SchemaMessageProvider . SCHEMA_DOMAIN , major , SchemaMessageProvider . MSG_NONE , args , XMLErrorReporter . ERRORTYPE_RECOVERABLE_ERROR ) ; } } public static void main ( String args [ ] ) { if ( args . length != 1 ) { System . out . println ( "Error: Usage java TraverseSchema yourFile.xsd" ) ; System . exit ( 0 ) ; } DOMParser parser = new IgnoreWhitespaceParser ( ) ; parser . setEntityResolver ( new Resolver ( ) ) ; parser . setErrorHandler ( new ErrorHandler ( ) ) ; try { parser . setFeature ( "http://xml.org/sax/features/validation" , false ) ; parser . setFeature ( "http://apache.org/xml/features/dom/defer-node-expansion" , false ) ; } catch ( org . xml . sax . SAXNotRecognizedException e ) { e . printStackTrace ( ) ; } catch ( org . xml . sax . SAXNotSupportedException e ) { e . printStackTrace ( ) ; } try { parser . parse ( args [ 0 ] ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } catch ( SAXException e ) { e . printStackTrace ( ) ; } Document document = parser . getDocument ( ) ; OutputFormat format = new OutputFormat ( document ) ; java . io . StringWriter outWriter = new java . io . StringWriter ( ) ; XMLSerializer serial = new XMLSerializer ( outWriter , format ) ; TraverseSchema tst = null ; try { Element root = document . getDocumentElement ( ) ; tst = new TraverseSchema ( root , new StringPool ( ) , new SchemaGrammar ( ) , ( GrammarResolver ) new GrammarResolverImpl ( ) ) ; } catch ( Exception e ) { e . printStackTrace ( System . err ) ; } parser . getDocument ( ) ; } static class Resolver implements EntityResolver { private static final String SYSTEM [ ] = { "http://www.w3.org/TR/2000/WD-xmlschema-1-20000407/structures.dtd" , "http://www.w3.org/TR/2000/WD-xmlschema-1-20000407/datatypes.dtd" , "http://www.w3.org/TR/2000/WD-xmlschema-1-20000407/versionInfo.ent" , } ; private static final String PATH [ ] = { "structures.dtd" , "datatypes.dtd" , "versionInfo.ent" , } ; public InputSource resolveEntity ( String publicId , String systemId ) throws IOException { for ( int i = 0 ; i < SYSTEM . length ; i ++ ) { if ( systemId . equals ( SYSTEM [ i ] ) ) { InputSource source = new InputSource ( getClass ( ) . getResourceAsStream ( PATH [ i ] ) ) ; source . setPublicId ( publicId ) ; source . setSystemId ( systemId ) ; return source ; } } return null ; } } static class ErrorHandler implements org . xml . sax . ErrorHandler { public void warning ( SAXParseException ex ) { System . err . println ( "[Warning] " + getLocationString ( ex ) + ": " + ex . getMessage ( ) ) ; } public void error ( SAXParseException ex ) { System . err . println ( "[Error] " + getLocationString ( ex ) + ": " + ex . getMessage ( ) ) ; } public void fatalError ( SAXParseException ex ) throws SAXException { System . err . println ( "[Fatal Error] " + getLocationString ( ex ) + ": " + ex . getMessage ( ) ) ; throw ex ; } private String getLocationString ( SAXParseException ex ) { StringBuffer str = new StringBuffer ( ) ; String systemId_ = ex . getSystemId ( ) ; if ( systemId_ != null ) { int index = systemId_ . lastIndexOf ( '/' ) ; if ( index != - 1 ) systemId_ = systemId_ . substring ( index + 1 ) ; str . append ( systemId_ ) ; } str . append ( ':' ) ; str . append ( ex . getLineNumber ( ) ) ; str . append ( ':' ) ; str . append ( ex . getColumnNumber ( ) ) ; return str . toString ( ) ; } } static class IgnoreWhitespaceParser extends DOMParser { public void ignorableWhitespace ( char ch [ ] , int start , int length ) { } public void ignorableWhitespace ( int dataIdx ) { } } } 	1	['81', '1', '0', '37', '257', '1504', '3', '36', '9', '0.788671875', '10701', '0.96875', '10', '0', '0.135526316', '0', '0', '130.7160494', '25', '1.5432', '30']
package org . apache . html . dom ; import org . w3c . dom . * ; import org . w3c . dom . html . * ; public class HTMLTitleElementImpl extends HTMLElementImpl implements HTMLTitleElement { public String getText ( ) { Node child ; String text ; child = getFirstChild ( ) ; text = "" ; while ( child != null ) { if ( child instanceof Text ) text = text + ( ( Text ) child ) . getData ( ) ; child = child . getNextSibling ( ) ; } return text ; } public void setText ( String text ) { Node child ; Node next ; child = getFirstChild ( ) ; while ( child != null ) { next = child . getNextSibling ( ) ; removeChild ( child ) ; child = next ; } insertBefore ( getOwnerDocument ( ) . createTextNode ( text ) , getFirstChild ( ) ) ; } public HTMLTitleElementImpl ( HTMLDocumentImpl owner , String name ) { super ( owner , name ) ; } } 	0	['3', '4', '0', '2', '14', '3', '1', '2', '3', '2', '60', '0', '0', '0.979166667', '0.666666667', '0', '0', '19', '3', '1.6667', '0']
package org . apache . xerces . dom ; import java . util . Enumeration ; import java . util . Hashtable ; import java . util . Vector ; import org . w3c . dom . * ; import org . w3c . dom . traversal . * ; import org . w3c . dom . ranges . * ; import org . w3c . dom . events . * ; import org . apache . xerces . dom . events . * ; public class DocumentImpl extends ParentNode implements Document , DocumentTraversal , DocumentEvent , DocumentRange { static final long serialVersionUID = 515687835542616694L ; protected DocumentTypeImpl docType ; protected ElementImpl docElement ; protected Hashtable identifiers ; protected Vector iterators ; protected Vector ranges ; protected static int [ ] kidOK ; protected Hashtable userData ; protected Hashtable eventListeners ; protected int changes = 0 ; protected boolean allowGrammarAccess ; protected boolean errorChecking = true ; protected boolean mutationEvents = false ; static { kidOK = new int [ 13 ] ; kidOK [ DOCUMENT_NODE ] = 1 << ELEMENT_NODE | 1 << PROCESSING_INSTRUCTION_NODE | 1 << COMMENT_NODE | 1 << DOCUMENT_TYPE_NODE ; kidOK [ DOCUMENT_FRAGMENT_NODE ] = kidOK [ ENTITY_NODE ] = kidOK [ ENTITY_REFERENCE_NODE ] = kidOK [ ELEMENT_NODE ] = 1 << ELEMENT_NODE | 1 << PROCESSING_INSTRUCTION_NODE | 1 << COMMENT_NODE | 1 << TEXT_NODE | 1 << CDATA_SECTION_NODE | 1 << ENTITY_REFERENCE_NODE ; kidOK [ ATTRIBUTE_NODE ] = 1 << TEXT_NODE | 1 << ENTITY_REFERENCE_NODE ; kidOK [ DOCUMENT_TYPE_NODE ] = kidOK [ PROCESSING_INSTRUCTION_NODE ] = kidOK [ COMMENT_NODE ] = kidOK [ TEXT_NODE ] = kidOK [ CDATA_SECTION_NODE ] = kidOK [ NOTATION_NODE ] = 0 ; } public DocumentImpl ( ) { this ( false ) ; } public DocumentImpl ( boolean grammarAccess ) { super ( null ) ; ownerDocument = this ; allowGrammarAccess = grammarAccess ; } public DocumentImpl ( DocumentType doctype ) { this ( doctype , false ) ; } public DocumentImpl ( DocumentType doctype , boolean grammarAccess ) { this ( grammarAccess ) ; this . docType = ( DocumentTypeImpl ) doctype ; if ( this . docType != null ) { docType . ownerDocument = this ; } } final public Document getOwnerDocument ( ) { return null ; } public short getNodeType ( ) { return Node . DOCUMENT_NODE ; } public String getNodeName ( ) { return "#document" ; } public Node cloneNode ( boolean deep ) { DocumentImpl newdoc = new DocumentImpl ( ) ; if ( needsSyncChildren ( ) ) { synchronizeChildren ( ) ; } if ( deep ) { Hashtable reversedIdentifiers = null ; if ( identifiers != null ) { reversedIdentifiers = new Hashtable ( ) ; Enumeration elementIds = identifiers . keys ( ) ; while ( elementIds . hasMoreElements ( ) ) { Object elementId = elementIds . nextElement ( ) ; reversedIdentifiers . put ( identifiers . get ( elementId ) , elementId ) ; } } for ( ChildNode kid = firstChild ; kid != null ; kid = kid . nextSibling ) { newdoc . appendChild ( newdoc . importNode ( kid , true , reversedIdentifiers ) ) ; } } newdoc . allowGrammarAccess = allowGrammarAccess ; newdoc . errorChecking = errorChecking ; newdoc . mutationEvents = mutationEvents ; return newdoc ; } public Node insertBefore ( Node newChild , Node refChild ) throws DOMException { int type = newChild . getNodeType ( ) ; if ( errorChecking ) { if ( ( type == Node . ELEMENT_NODE && docElement != null ) || ( type == Node . DOCUMENT_TYPE_NODE && docType != null ) ) { throw new DOMException ( DOMException . HIERARCHY_REQUEST_ERR , "DOM006 Hierarchy request error" ) ; } } super . insertBefore ( newChild , refChild ) ; if ( type == Node . ELEMENT_NODE ) { docElement = ( ElementImpl ) newChild ; } else if ( type == Node . DOCUMENT_TYPE_NODE ) { docType = ( DocumentTypeImpl ) newChild ; } return newChild ; } public Node removeChild ( Node oldChild ) throws DOMException { super . removeChild ( oldChild ) ; int type = oldChild . getNodeType ( ) ; if ( type == Node . ELEMENT_NODE ) { docElement = null ; } else if ( type == Node . DOCUMENT_TYPE_NODE ) { docType = null ; } return oldChild ; } public Node replaceChild ( Node newChild , Node oldChild ) throws DOMException { super . replaceChild ( newChild , oldChild ) ; int type = oldChild . getNodeType ( ) ; if ( type == Node . ELEMENT_NODE ) { docElement = ( ElementImpl ) newChild ; } else if ( type == Node . DOCUMENT_TYPE_NODE ) { docType = ( DocumentTypeImpl ) newChild ; } return oldChild ; } public Attr createAttribute ( String name ) throws DOMException { if ( errorChecking && ! isXMLName ( name ) ) { throw new DOMException ( DOMException . INVALID_CHARACTER_ERR , "DOM002 Illegal character" ) ; } return new AttrImpl ( this , name ) ; } public CDATASection createCDATASection ( String data ) throws DOMException { return new CDATASectionImpl ( this , data ) ; } public Comment createComment ( String data ) { return new CommentImpl ( this , data ) ; } public DocumentFragment createDocumentFragment ( ) { return new DocumentFragmentImpl ( this ) ; } public Element createElement ( String tagName ) throws DOMException { if ( errorChecking && ! isXMLName ( tagName ) ) { throw new DOMException ( DOMException . INVALID_CHARACTER_ERR , "DOM002 Illegal character" ) ; } return new ElementImpl ( this , tagName ) ; } public EntityReference createEntityReference ( String name ) throws DOMException { if ( errorChecking && ! isXMLName ( name ) ) { throw new DOMException ( DOMException . INVALID_CHARACTER_ERR , "DOM002 Illegal character" ) ; } return new EntityReferenceImpl ( this , name ) ; } public ProcessingInstruction createProcessingInstruction ( String target , String data ) throws DOMException { if ( errorChecking && ! isXMLName ( target ) ) { throw new DOMException ( DOMException . INVALID_CHARACTER_ERR , "DOM002 Illegal character" ) ; } return new ProcessingInstructionImpl ( this , target , data ) ; } public Text createTextNode ( String data ) { return new TextImpl ( this , data ) ; } public DocumentType getDoctype ( ) { if ( needsSyncChildren ( ) ) { synchronizeChildren ( ) ; } return docType ; } public Element getDocumentElement ( ) { if ( needsSyncChildren ( ) ) { synchronizeChildren ( ) ; } return docElement ; } public NodeList getElementsByTagName ( String tagname ) { return new DeepNodeListImpl ( this , tagname ) ; } public DOMImplementation getImplementation ( ) { return DOMImplementationImpl . getDOMImplementation ( ) ; } public void setErrorChecking ( boolean check ) { errorChecking = check ; } public boolean getErrorChecking ( ) { return errorChecking ; } public void setMutationEvents ( boolean set ) { mutationEvents = set ; } public boolean getMutationEvents ( ) { return mutationEvents ; } public DocumentType createDocumentType ( String qualifiedName , String publicID , String systemID ) throws DOMException { if ( errorChecking && ! isXMLName ( qualifiedName ) ) { throw new DOMException ( DOMException . INVALID_CHARACTER_ERR , "DOM002 Illegal character" ) ; } return new DocumentTypeImpl ( this , qualifiedName , publicID , systemID ) ; } public Entity createEntity ( String name ) throws DOMException { return new EntityImpl ( this , name ) ; } public Notation createNotation ( String name ) throws DOMException { return new NotationImpl ( this , name ) ; } public ElementDefinitionImpl createElementDefinition ( String name ) throws DOMException { return new ElementDefinitionImpl ( this , name ) ; } public Node importNode ( Node source , boolean deep ) throws DOMException { return importNode ( source , deep , null ) ; } private Node importNode ( Node source , boolean deep , Hashtable reversedIdentifiers ) throws DOMException { Node newnode = null ; DOMImplementation domImplementation = source . getOwnerDocument ( ) . getImplementation ( ) ; boolean domLevel20 = domImplementation . hasFeature ( "XML" , "2.0" ) ; int type = source . getNodeType ( ) ; switch ( type ) { case ELEMENT_NODE : { Element newElement ; if ( domLevel20 == false || source . getLocalName ( ) == null ) newElement = createElement ( source . getNodeName ( ) ) ; else newElement = createElementNS ( source . getNamespaceURI ( ) , source . getNodeName ( ) ) ; NamedNodeMap sourceAttrs = source . getAttributes ( ) ; if ( sourceAttrs != null ) { int length = sourceAttrs . getLength ( ) ; for ( int index = 0 ; index < length ; index ++ ) { Attr attr = ( Attr ) sourceAttrs . item ( index ) ; if ( attr . getSpecified ( ) ) { Attr newAttr = ( Attr ) importNode ( attr , true , reversedIdentifiers ) ; if ( domLevel20 == false || attr . getLocalName ( ) == null ) newElement . setAttributeNode ( newAttr ) ; else newElement . setAttributeNodeNS ( newAttr ) ; } } } if ( reversedIdentifiers != null ) { Object elementId = reversedIdentifiers . get ( source ) ; if ( elementId != null ) { if ( identifiers == null ) identifiers = new Hashtable ( ) ; identifiers . put ( elementId , newElement ) ; } } newnode = newElement ; break ; } case ATTRIBUTE_NODE : { if ( domLevel20 == true ) { if ( source . getLocalName ( ) == null ) { newnode = createAttribute ( source . getNodeName ( ) ) ; } else { newnode = createAttributeNS ( source . getNamespaceURI ( ) , source . getNodeName ( ) ) ; } } else { newnode = createAttribute ( source . getNodeName ( ) ) ; } if ( source instanceof AttrImpl ) { AttrImpl attr = ( AttrImpl ) source ; if ( attr . hasStringValue ( ) ) { AttrImpl newattr = ( AttrImpl ) newnode ; newattr . setValue ( ( String ) attr . value ) ; deep = false ; } else { deep = true ; } } else { deep = true ; } break ; } case TEXT_NODE : { newnode = createTextNode ( source . getNodeValue ( ) ) ; break ; } case CDATA_SECTION_NODE : { newnode = createCDATASection ( source . getNodeValue ( ) ) ; break ; } case ENTITY_REFERENCE_NODE : { newnode = createEntityReference ( source . getNodeName ( ) ) ; ( ( EntityReferenceImpl ) newnode ) . isReadOnly ( false ) ; break ; } case ENTITY_NODE : { Entity srcentity = ( Entity ) source ; EntityImpl newentity = ( EntityImpl ) createEntity ( source . getNodeName ( ) ) ; newentity . setPublicId ( srcentity . getPublicId ( ) ) ; newentity . setSystemId ( srcentity . getSystemId ( ) ) ; newentity . setNotationName ( srcentity . getNotationName ( ) ) ; newentity . isReadOnly ( false ) ; newnode = newentity ; break ; } case PROCESSING_INSTRUCTION_NODE : { newnode = createProcessingInstruction ( source . getNodeName ( ) , source . getNodeValue ( ) ) ; break ; } case COMMENT_NODE : { newnode = createComment ( source . getNodeValue ( ) ) ; break ; } case DOCUMENT_TYPE_NODE : { DocumentType srcdoctype = ( DocumentType ) source ; DocumentTypeImpl newdoctype = ( DocumentTypeImpl ) createDocumentType ( srcdoctype . getNodeName ( ) , srcdoctype . getPublicId ( ) , srcdoctype . getSystemId ( ) ) ; NamedNodeMap smap = srcdoctype . getEntities ( ) ; NamedNodeMap tmap = newdoctype . getEntities ( ) ; if ( smap != null ) { for ( int i = 0 ; i < smap . getLength ( ) ; i ++ ) { tmap . setNamedItem ( importNode ( smap . item ( i ) , true , reversedIdentifiers ) ) ; } } smap = srcdoctype . getNotations ( ) ; tmap = newdoctype . getNotations ( ) ; if ( smap != null ) { for ( int i = 0 ; i < smap . getLength ( ) ; i ++ ) { tmap . setNamedItem ( importNode ( smap . item ( i ) , true , reversedIdentifiers ) ) ; } } newnode = newdoctype ; break ; } case DOCUMENT_FRAGMENT_NODE : { newnode = createDocumentFragment ( ) ; break ; } case NOTATION_NODE : { Notation srcnotation = ( Notation ) source ; NotationImpl newnotation = ( NotationImpl ) createNotation ( source . getNodeName ( ) ) ; newnotation . setPublicId ( srcnotation . getPublicId ( ) ) ; newnotation . setSystemId ( srcnotation . getSystemId ( ) ) ; newnode = newnotation ; break ; } case DOCUMENT_NODE : default : { throw new DOMException ( DOMException . NOT_SUPPORTED_ERR , "Node type being imported is not supported" ) ; } } if ( deep ) { for ( Node srckid = source . getFirstChild ( ) ; srckid != null ; srckid = srckid . getNextSibling ( ) ) { newnode . appendChild ( importNode ( srckid , true , reversedIdentifiers ) ) ; } } if ( newnode . getNodeType ( ) == Node . ENTITY_REFERENCE_NODE || newnode . getNodeType ( ) == Node . ENTITY_NODE ) { ( ( NodeImpl ) newnode ) . setReadOnly ( true , true ) ; } return newnode ; } public void adoptNode ( Node source ) { if ( ! ( source instanceof NodeImpl ) ) { throw new DOMException ( DOMException . NOT_SUPPORTED_ERR , "cannot move a node in from another DOM implementation" ) ; } Node parent = source . getParentNode ( ) ; if ( parent != null ) { parent . removeChild ( source ) ; } ( ( NodeImpl ) source ) . setOwnerDocument ( this ) ; } public Element getElementById ( String elementId ) { return getIdentifier ( elementId ) ; } public void putIdentifier ( String idName , Element element ) { if ( element == null ) { removeIdentifier ( idName ) ; return ; } if ( needsSyncData ( ) ) { synchronizeData ( ) ; } if ( identifiers == null ) { identifiers = new Hashtable ( ) ; } identifiers . put ( idName , element ) ; } public Element getIdentifier ( String idName ) { if ( needsSyncData ( ) ) { synchronizeData ( ) ; } if ( identifiers == null ) { return null ; } return ( Element ) identifiers . get ( idName ) ; } public void removeIdentifier ( String idName ) { if ( needsSyncData ( ) ) { synchronizeData ( ) ; } if ( identifiers == null ) { return ; } identifiers . remove ( idName ) ; } public Enumeration getIdentifiers ( ) { if ( needsSyncData ( ) ) { synchronizeData ( ) ; } if ( identifiers == null ) { identifiers = new Hashtable ( ) ; } return identifiers . keys ( ) ; } public Element createElementNS ( String namespaceURI , String qualifiedName ) throws DOMException { if ( errorChecking && ! isXMLName ( qualifiedName ) ) { throw new DOMException ( DOMException . INVALID_CHARACTER_ERR , "DOM002 Illegal character" ) ; } return new ElementNSImpl ( this , namespaceURI , qualifiedName ) ; } public Attr createAttributeNS ( String namespaceURI , String qualifiedName ) throws DOMException { if ( errorChecking && ! isXMLName ( qualifiedName ) ) { throw new DOMException ( DOMException . INVALID_CHARACTER_ERR , "DOM002 Illegal character" ) ; } return new AttrNSImpl ( this , namespaceURI , qualifiedName ) ; } public NodeList getElementsByTagNameNS ( String namespaceURI , String localName ) { return new DeepNodeListImpl ( this , namespaceURI , localName ) ; } public NodeIterator createNodeIterator ( Node root , short whatToShow , NodeFilter filter ) { return createNodeIterator ( root , whatToShow , filter , true ) ; } public NodeIterator createNodeIterator ( Node root , int whatToShow , NodeFilter filter , boolean entityReferenceExpansion ) { NodeIterator iterator = new NodeIteratorImpl ( this , root , whatToShow , filter , entityReferenceExpansion ) ; if ( iterators == null ) { iterators = new Vector ( ) ; } iterators . addElement ( iterator ) ; return iterator ; } public TreeWalker createTreeWalker ( Node root , short whatToShow , NodeFilter filter ) { return createTreeWalker ( root , whatToShow , filter , true ) ; } public TreeWalker createTreeWalker ( Node root , int whatToShow , NodeFilter filter , boolean entityReferenceExpansion ) { if ( root == null ) { throw new DOMException ( DOMException . NOT_SUPPORTED_ERR , "DOM007 Not supported" ) ; } return new TreeWalkerImpl ( root , whatToShow , filter , entityReferenceExpansion ) ; } void removeNodeIterator ( NodeIterator nodeIterator ) { if ( nodeIterator == null ) return ; if ( iterators == null ) return ; iterators . removeElement ( nodeIterator ) ; } public Range createRange ( ) { if ( ranges == null ) { ranges = new Vector ( ) ; } Range range = new RangeImpl ( this ) ; ranges . addElement ( range ) ; return range ; } void removeRange ( Range range ) { if ( range == null ) return ; if ( ranges == null ) return ; ranges . removeElement ( range ) ; } void replacedText ( Node node ) { if ( ranges != null ) { Enumeration enum = ranges . elements ( ) ; while ( enum . hasMoreElements ( ) ) { ( ( RangeImpl ) enum . nextElement ( ) ) . receiveReplacedText ( node ) ; } } } void deletedText ( Node node , int offset , int count ) { if ( ranges != null ) { Enumeration enum = ranges . elements ( ) ; while ( enum . hasMoreElements ( ) ) { ( ( RangeImpl ) enum . nextElement ( ) ) . receiveDeletedText ( node , offset , count ) ; } } } void insertedText ( Node node , int offset , int count ) { if ( ranges != null ) { Enumeration enum = ranges . elements ( ) ; while ( enum . hasMoreElements ( ) ) { ( ( RangeImpl ) enum . nextElement ( ) ) . receiveInsertedText ( node , offset , count ) ; } } } void splitData ( Node node , Node newNode , int offset ) { if ( ranges != null ) { Enumeration enum = ranges . elements ( ) ; while ( enum . hasMoreElements ( ) ) { ( ( RangeImpl ) enum . nextElement ( ) ) . receiveSplitData ( node , newNode , offset ) ; } } } void removedChildNode ( Node oldChild ) { if ( iterators != null ) { Enumeration enum = iterators . elements ( ) ; while ( enum . hasMoreElements ( ) ) { ( ( NodeIteratorImpl ) enum . nextElement ( ) ) . removeNode ( oldChild ) ; } } if ( ranges != null ) { Enumeration enum = ranges . elements ( ) ; while ( enum . hasMoreElements ( ) ) { ( ( RangeImpl ) enum . nextElement ( ) ) . removeNode ( oldChild ) ; } } } public Event createEvent ( String type ) throws DOMException { if ( "Event" . equals ( type ) ) return new EventImpl ( ) ; if ( "MutationEvent" . equals ( type ) ) return new MutationEventImpl ( ) ; else throw new DOMException ( DOMException . NOT_SUPPORTED_ERR , "DOM007 Not supported" ) ; } public Object clone ( ) throws CloneNotSupportedException { DocumentImpl newdoc = ( DocumentImpl ) super . clone ( ) ; newdoc . docType = null ; newdoc . docElement = null ; return newdoc ; } public static boolean isXMLName ( String s ) { if ( s == null ) { return false ; } char [ ] ca = new char [ s . length ( ) ] ; s . getChars ( 0 , s . length ( ) , ca , 0 ) ; if ( ! Character . isLetter ( ca [ 0 ] ) && "_:" . indexOf ( ( int ) ca [ 0 ] ) == - 1 ) { return false ; } for ( int i = 1 ; i < s . length ( ) ; ++ i ) { char c = ca [ i ] ; int ctype = Character . getType ( c ) ; if ( ! Character . isLetterOrDigit ( c ) && ( ".-_:" . indexOf ( c ) == - 1 ) && ( ! ( ctype >= 6 && ctype <= 8 && ! ( ( c >= 0x06dd && c <= 0x06de ) || ( c >= 0x20dd && c <= 0x20e0 ) || c >= 0x309b ) ) ) && ( ! ( ctype == 4 && ! ( ( c >= 0x02d0 && c <= 0x0559 ) || ( c >= 0x06e5 && c <= 0x06e6 ) || ( c >= 0x309b && c <= 0x309c ) ) || c == 0x00b7 || c == 0x0387 ) ) ) { return false ; } } return true ; } protected void setUserData ( NodeImpl n , Object data ) { if ( userData == null ) { userData = new Hashtable ( ) ; } if ( data == null ) { userData . remove ( n ) ; } else { userData . put ( n , data ) ; } } protected Object getUserData ( NodeImpl n ) { if ( userData == null ) { return null ; } return userData . get ( n ) ; } protected void setEventListeners ( NodeImpl n , Vector listeners ) { if ( eventListeners == null ) { eventListeners = new Hashtable ( ) ; } if ( listeners == null ) { eventListeners . remove ( n ) ; if ( eventListeners . isEmpty ( ) ) { mutationEvents = false ; } } else { eventListeners . put ( n , listeners ) ; mutationEvents = true ; } } protected Vector getEventListeners ( NodeImpl n ) { if ( eventListeners == null ) { return null ; } return ( Vector ) eventListeners . get ( n ) ; } protected boolean isKidOK ( Node parent , Node child ) { if ( allowGrammarAccess && parent . getNodeType ( ) == Node . DOCUMENT_TYPE_NODE ) { return child . getNodeType ( ) == Node . ELEMENT_NODE ; } return 0 != ( kidOK [ parent . getNodeType ( ) ] & 1 << child . getNodeType ( ) ) ; } protected void changed ( ) { changes ++ ; } protected int changes ( ) { return changes ; } } 	1	['65', '4', '3', '51', '167', '1798', '47', '24', '49', '0.931490385', '1475', '0.923076923', '2', '0.568345324', '0.1375', '2', '19', '21.49230769', '23', '2', '6']
package org . apache . wml . dom ; import org . apache . wml . * ; public class WMLSmallElementImpl extends WMLElementImpl implements WMLSmallElement { public WMLSmallElementImpl ( WMLDocumentImpl owner , String tagName ) { super ( owner , tagName ) ; } public void setClassName ( String newValue ) { setAttribute ( "class" , newValue ) ; } public String getClassName ( ) { return getAttribute ( "class" ) ; } public void setXmlLang ( String newValue ) { setAttribute ( "xml:lang" , newValue ) ; } public String getXmlLang ( ) { return getAttribute ( "xml:lang" ) ; } public void setId ( String newValue ) { setAttribute ( "id" , newValue ) ; } public String getId ( ) { return getAttribute ( "id" ) ; } } 	0	['7', '4', '0', '3', '10', '21', '0', '3', '7', '2', '39', '0', '0', '0.931818182', '0.571428571', '1', '6', '4.571428571', '1', '0.8571', '0']
package org . apache . xerces . dom ; import org . w3c . dom . * ; import org . apache . xerces . dom . events . MutationEventImpl ; public class AttrNSImpl extends AttrImpl { static final long serialVersionUID = - 781906615369795414L ; static final String xmlnsURI = "http://www.w3.org/2000/xmlns/" ; static final String xmlURI = "http://www.w3.org/XML/1998/namespace" ; protected String namespaceURI ; protected String localName ; protected AttrNSImpl ( DocumentImpl ownerDocument , String namespaceURI , String qualifiedName ) { super ( ownerDocument , qualifiedName ) ; int index = qualifiedName . indexOf ( ':' ) ; String prefix ; if ( index < 0 ) { prefix = null ; localName = qualifiedName ; if ( ownerDocument . errorChecking && qualifiedName . equals ( "xmlns" ) && ( namespaceURI == null || ! namespaceURI . equals ( xmlnsURI ) ) ) { throw new DOMException ( DOMException . NAMESPACE_ERR , "DOM003 Namespace error" ) ; } } else { prefix = qualifiedName . substring ( 0 , index ) ; localName = qualifiedName . substring ( index + 1 ) ; if ( ownerDocument . errorChecking ) { if ( namespaceURI == null || ( localName . length ( ) == 0 ) || ( localName . indexOf ( ':' ) >= 0 ) ) { throw new DOMException ( DOMException . NAMESPACE_ERR , "DOM003 Namespace error" ) ; } else if ( prefix . equals ( "xml" ) ) { if ( ! namespaceURI . equals ( xmlURI ) ) { throw new DOMException ( DOMException . NAMESPACE_ERR , "DOM003 Namespace error" ) ; } } else if ( prefix . equals ( "xmlns" ) ) { if ( ! namespaceURI . equals ( xmlnsURI ) ) { throw new DOMException ( DOMException . NAMESPACE_ERR , "DOM003 Namespace error" ) ; } } else if ( index == 0 ) { throw new DOMException ( DOMException . NAMESPACE_ERR , "DOM003 Namespace error" ) ; } } } this . namespaceURI = namespaceURI ; } protected AttrNSImpl ( DocumentImpl ownerDocument , String value ) { super ( ownerDocument , value ) ; } public String getNamespaceURI ( ) { if ( needsSyncData ( ) ) { synchronizeData ( ) ; } return namespaceURI ; } public String getPrefix ( ) { if ( needsSyncData ( ) ) { synchronizeData ( ) ; } int index = name . indexOf ( ':' ) ; return index < 0 ? null : name . substring ( 0 , index ) ; } public void setPrefix ( String prefix ) throws DOMException { if ( needsSyncData ( ) ) { synchronizeData ( ) ; } if ( ownerDocument ( ) . errorChecking ) { if ( isReadOnly ( ) ) { throw new DOMException ( DOMException . NO_MODIFICATION_ALLOWED_ERR , "DOM001 Modification not allowed" ) ; } if ( ! DocumentImpl . isXMLName ( prefix ) ) { throw new DOMException ( DOMException . INVALID_CHARACTER_ERR , "DOM002 Illegal character" ) ; } if ( namespaceURI == null ) { throw new DOMException ( DOMException . NAMESPACE_ERR , "DOM003 Namespace error" ) ; } else if ( prefix != null ) { if ( prefix . equals ( "xmlns" ) ) { if ( ! namespaceURI . equals ( xmlnsURI ) ) { throw new DOMException ( DOMException . NAMESPACE_ERR , "DOM003 Namespace error" ) ; } } else if ( prefix . equals ( "xml" ) ) { if ( ! namespaceURI . equals ( xmlURI ) ) { throw new DOMException ( DOMException . NAMESPACE_ERR , "DOM003 Namespace error" ) ; } } } } name = prefix + ":" + localName ; } public String getLocalName ( ) { if ( needsSyncData ( ) ) { synchronizeData ( ) ; } return localName ; } } 	1	['6', '3', '1', '3', '21', '3', '2', '2', '4', '0.96', '240', '0.4', '0', '0.9375', '0.611111111', '3', '3', '38.16666667', '3', '1.3333', '1']
package org . apache . html . dom ; import org . w3c . dom . * ; import org . w3c . dom . html . * ; public class HTMLButtonElementImpl extends HTMLElementImpl implements HTMLButtonElement , HTMLFormControl { public String getAccessKey ( ) { String accessKey ; accessKey = getAttribute ( "accesskey" ) ; if ( accessKey != null && accessKey . length ( ) > 1 ) accessKey = accessKey . substring ( 0 , 1 ) ; return accessKey ; } public void setAccessKey ( String accessKey ) { if ( accessKey != null && accessKey . length ( ) > 1 ) accessKey = accessKey . substring ( 0 , 1 ) ; setAttribute ( "accesskey" , accessKey ) ; } public boolean getDisabled ( ) { return getBinary ( "disabled" ) ; } public void setDisabled ( boolean disabled ) { setAttribute ( "disabled" , disabled ) ; } public String getName ( ) { return getAttribute ( "name" ) ; } public void setName ( String name ) { setAttribute ( "name" , name ) ; } public int getTabIndex ( ) { try { return Integer . parseInt ( getAttribute ( "tabindex" ) ) ; } catch ( NumberFormatException except ) { return 0 ; } } public void setTabIndex ( int tabIndex ) { setAttribute ( "tabindex" , String . valueOf ( tabIndex ) ) ; } public String getType ( ) { return capitalize ( getAttribute ( "type" ) ) ; } public String getValue ( ) { return getAttribute ( "value" ) ; } public void setValue ( String value ) { setAttribute ( "value" , value ) ; } public HTMLButtonElementImpl ( HTMLDocumentImpl owner , String name ) { super ( owner , name ) ; } } 	0	['12', '4', '0', '3', '22', '66', '0', '3', '12', '2', '97', '0', '0', '0.895238095', '0.316666667', '1', '1', '7.083333333', '3', '1.25', '0']
package org . apache . xerces . dom ; import org . w3c . dom . * ; import org . apache . xerces . utils . StringPool ; public final class DeferredAttrImpl extends AttrImpl implements DeferredNode { static final long serialVersionUID = 6903232312469148636L ; protected transient int fNodeIndex ; DeferredAttrImpl ( DeferredDocumentImpl ownerDocument , int nodeIndex ) { super ( ownerDocument , null ) ; fNodeIndex = nodeIndex ; needsSyncData ( true ) ; needsSyncChildren ( true ) ; } public int getNodeIndex ( ) { return fNodeIndex ; } protected void synchronizeData ( ) { needsSyncData ( false ) ; DeferredDocumentImpl ownerDocument = ( DeferredDocumentImpl ) ownerDocument ( ) ; int elementTypeName = ownerDocument . getNodeName ( fNodeIndex ) ; StringPool pool = ownerDocument . getStringPool ( ) ; name = pool . toString ( elementTypeName ) ; isSpecified ( ownerDocument . getNodeValue ( fNodeIndex ) == 1 ) ; } protected void synchronizeChildren ( ) { synchronizeChildren ( fNodeIndex ) ; } } 	1	['4', '3', '0', '5', '14', '0', '1', '5', '1', '0.666666667', '60', '0.5', '0', '0.952380952', '0.5', '2', '7', '13.5', '2', '1', '2']
package org . apache . xerces . utils . regex ; import java . text . CharacterIterator ; public final class REUtil { private REUtil ( ) { } static final int composeFromSurrogates ( int high , int low ) { return 0x10000 + ( ( high - 0xd800 ) << 10 ) + low - 0xdc00 ; } static final boolean isLowSurrogate ( int ch ) { return ( ch & 0xfc00 ) == 0xdc00 ; } static final boolean isHighSurrogate ( int ch ) { return ( ch & 0xfc00 ) == 0xd800 ; } static final String decomposeToSurrogates ( int ch ) { char [ ] chs = new char [ 2 ] ; ch -= 0x10000 ; chs [ 0 ] = ( char ) ( ( ch > > 10 ) + 0xd800 ) ; chs [ 1 ] = ( char ) ( ( ch & 0x3ff ) + 0xdc00 ) ; return new String ( chs ) ; } static final String substring ( CharacterIterator iterator , int begin , int end ) { char [ ] src = new char [ end - begin ] ; for ( int i = 0 ; i < src . length ; i ++ ) src [ i ] = iterator . setIndex ( i + begin ) ; return new String ( src ) ; } static final int getOptionValue ( int ch ) { int ret = 0 ; switch ( ch ) { case 'i' : ret = RegularExpression . IGNORE_CASE ; break ; case 'm' : ret = RegularExpression . MULTIPLE_LINES ; break ; case 's' : ret = RegularExpression . SINGLE_LINE ; break ; case 'x' : ret = RegularExpression . EXTENDED_COMMENT ; break ; case 'u' : ret = RegularExpression . USE_UNICODE_CATEGORY ; break ; case 'w' : ret = RegularExpression . UNICODE_WORD_BOUNDARY ; break ; case 'F' : ret = RegularExpression . PROHIBIT_FIXED_STRING_OPTIMIZATION ; break ; case 'H' : ret = RegularExpression . PROHIBIT_HEAD_CHARACTER_OPTIMIZATION ; break ; case 'X' : ret = RegularExpression . XMLSCHEMA_MODE ; break ; case ',' : ret = RegularExpression . SPECIAL_COMMA ; break ; default : } return ret ; } static final int parseOptions ( String opts ) throws ParseException { if ( opts == null ) return 0 ; int options = 0 ; for ( int i = 0 ; i < opts . length ( ) ; i ++ ) { int v = getOptionValue ( opts . charAt ( i ) ) ; if ( v == 0 ) throw new ParseException ( "Unknown Option: " + opts . substring ( i ) , - 1 ) ; options |= v ; } return options ; } static final String createOptionString ( int options ) { StringBuffer sb = new StringBuffer ( 9 ) ; if ( ( options & RegularExpression . PROHIBIT_FIXED_STRING_OPTIMIZATION ) != 0 ) sb . append ( ( char ) 'F' ) ; if ( ( options & RegularExpression . PROHIBIT_HEAD_CHARACTER_OPTIMIZATION ) != 0 ) sb . append ( ( char ) 'H' ) ; if ( ( options & RegularExpression . XMLSCHEMA_MODE ) != 0 ) sb . append ( ( char ) 'X' ) ; if ( ( options & RegularExpression . IGNORE_CASE ) != 0 ) sb . append ( ( char ) 'i' ) ; if ( ( options & RegularExpression . MULTIPLE_LINES ) != 0 ) sb . append ( ( char ) 'm' ) ; if ( ( options & RegularExpression . SINGLE_LINE ) != 0 ) sb . append ( ( char ) 's' ) ; if ( ( options & RegularExpression . USE_UNICODE_CATEGORY ) != 0 ) sb . append ( ( char ) 'u' ) ; if ( ( options & RegularExpression . UNICODE_WORD_BOUNDARY ) != 0 ) sb . append ( ( char ) 'w' ) ; if ( ( options & RegularExpression . EXTENDED_COMMENT ) != 0 ) sb . append ( ( char ) 'x' ) ; if ( ( options & RegularExpression . SPECIAL_COMMA ) != 0 ) sb . append ( ( char ) ',' ) ; return sb . toString ( ) . intern ( ) ; } static String stripExtendedComment ( String regex ) { int len = regex . length ( ) ; StringBuffer buffer = new StringBuffer ( len ) ; int offset = 0 ; while ( offset < len ) { int ch = regex . charAt ( offset ++ ) ; if ( ch == '\t' || ch == '\n' || ch == '\f' || ch == '\r' || ch == ' ' ) continue ; if ( ch == '#' ) { while ( offset < len ) { ch = regex . charAt ( offset ++ ) ; if ( ch == '\r' || ch == '\n' ) break ; } continue ; } int next ; if ( ch == '\\' && offset < len ) { if ( ( next = regex . charAt ( offset ) ) == '#' || next == '\t' || next == '\n' || next == '\f' || next == '\r' || next == ' ' ) { buffer . append ( ( char ) next ) ; offset ++ ; } else { buffer . append ( ( char ) '\\' ) ; buffer . append ( ( char ) next ) ; offset ++ ; } } else buffer . append ( ( char ) ch ) ; } return buffer . toString ( ) ; } public static void main ( String [ ] argv ) { String pattern = null ; try { String options = "" ; String target = null ; if ( argv . length == 0 ) { System . out . println ( "Error:Usage: java REUtil -i|-m|-s|-u|-w|-X regularExpression String" ) ; System . exit ( 0 ) ; } for ( int i = 0 ; i < argv . length ; i ++ ) { if ( argv [ i ] . length ( ) == 0 || argv [ i ] . charAt ( 0 ) != '-' ) { if ( pattern == null ) pattern = argv [ i ] ; else if ( target == null ) target = argv [ i ] ; else System . err . println ( "Unnecessary: " + argv [ i ] ) ; } else if ( argv [ i ] . equals ( "-i" ) ) { options += "i" ; } else if ( argv [ i ] . equals ( "-m" ) ) { options += "m" ; } else if ( argv [ i ] . equals ( "-s" ) ) { options += "s" ; } else if ( argv [ i ] . equals ( "-u" ) ) { options += "u" ; } else if ( argv [ i ] . equals ( "-w" ) ) { options += "w" ; } else if ( argv [ i ] . equals ( "-X" ) ) { options += "X" ; } else { System . err . println ( "Unknown option: " + argv [ i ] ) ; } } RegularExpression reg = new RegularExpression ( pattern , options ) ; System . out . println ( "RegularExpression: " + reg ) ; Match match = new Match ( ) ; reg . matches ( target , match ) ; for ( int i = 0 ; i < match . getNumberOfGroups ( ) ; i ++ ) { if ( i == 0 ) System . out . print ( "Matched range for the whole pattern: " ) ; else System . out . print ( "[" + i + "]: " ) ; if ( match . getBeginning ( i ) < 0 ) System . out . println ( "-1" ) ; else { System . out . print ( match . getBeginning ( i ) + ", " + match . getEnd ( i ) + ", " ) ; System . out . println ( "\"" + match . getCapturedText ( i ) + "\"" ) ; } } } catch ( ParseException pe ) { if ( pattern == null ) { pe . printStackTrace ( ) ; } else { System . err . println ( "org.apache.xerces.utils.regex.ParseException: " + pe . getMessage ( ) ) ; String indent = "        " ; System . err . println ( indent + pattern ) ; int loc = pe . getLocation ( ) ; if ( loc >= 0 ) { System . err . print ( indent ) ; for ( int i = 0 ; i < loc ; i ++ ) System . err . print ( "-" ) ; System . err . println ( "^" ) ; } } } catch ( Exception e ) { e . printStackTrace ( ) ; } } static final int CACHESIZE = 20 ; static RegularExpression [ ] regexCache = new RegularExpression [ CACHESIZE ] ; public static RegularExpression createRegex ( String pattern , String options ) throws ParseException { RegularExpression re = null ; int intOptions = REUtil . parseOptions ( options ) ; synchronized ( REUtil . regexCache ) { int i ; for ( i = 0 ; i < REUtil . CACHESIZE ; i ++ ) { re = REUtil . regexCache [ i ] ; if ( re == null ) { i = - 1 ; break ; } if ( re . equals ( pattern , intOptions ) ) break ; } if ( re != null ) { if ( i != 0 ) { System . arraycopy ( REUtil . regexCache , 0 , REUtil . regexCache , 1 , i ) ; REUtil . regexCache [ 0 ] = re ; } } else { re = new RegularExpression ( pattern , options ) ; System . arraycopy ( REUtil . regexCache , 0 , REUtil . regexCache , 1 , REUtil . CACHESIZE - 1 ) ; REUtil . regexCache [ 0 ] = re ; } } return re ; } public static boolean matches ( String regex , String target ) throws ParseException { return REUtil . createRegex ( regex , null ) . matches ( target ) ; } public static boolean matches ( String regex , String options , String target ) throws ParseException { return REUtil . createRegex ( regex , options ) . matches ( target ) ; } public static String quoteMeta ( String literal ) { int len = literal . length ( ) ; StringBuffer buffer = null ; for ( int i = 0 ; i < len ; i ++ ) { int ch = literal . charAt ( i ) ; if ( ".*+?{[()|\\^$" . indexOf ( ch ) >= 0 ) { if ( buffer == null ) { buffer = new StringBuffer ( i + ( len - i ) * 2 ) ; if ( i > 0 ) buffer . append ( literal . substring ( 0 , i ) ) ; } buffer . append ( ( char ) '\\' ) ; } else if ( buffer != null ) buffer . append ( ( char ) ch ) ; } return buffer != null ? buffer . toString ( ) : literal ; } static void dumpString ( String v ) { for ( int i = 0 ; i < v . length ( ) ; i ++ ) { System . out . print ( Integer . toHexString ( v . charAt ( i ) ) ) ; System . out . print ( " " ) ; } System . out . println ( ) ; } } 	0	['17', '1', '0', '8', '54', '134', '7', '3', '5', '0.9375', '867', '0', '1', '0', '0.2125', '0', '0', '49.88235294', '19', '4.7059', '0']
package org . apache . xerces . framework ; import org . apache . xerces . utils . QName ; import org . apache . xerces . utils . StringPool ; import org . xml . sax . AttributeList ; import org . xml . sax . Locator ; import org . xml . sax . SAXParseException ; public final class XMLAttrList implements AttributeList { private static final int CHUNK_SHIFT = 5 ; private static final int CHUNK_SIZE = ( 1 << CHUNK_SHIFT ) ; private static final int CHUNK_MASK = CHUNK_SIZE - 1 ; private static final int INITIAL_CHUNK_COUNT = ( 1 << ( 10 - CHUNK_SHIFT ) ) ; private static final int ATTFLAG_SPECIFIED = 1 ; private static final int ATTFLAG_LASTATTR = 2 ; private StringPool fStringPool = null ; private int fCurrentHandle = - 1 ; private int fAttributeListHandle = - 1 ; private int fAttributeListLength = 0 ; private int fAttrCount = 0 ; private int [ ] [ ] fAttPrefix = new int [ INITIAL_CHUNK_COUNT ] [ ] ; private int [ ] [ ] fAttLocalpart = new int [ INITIAL_CHUNK_COUNT ] [ ] ; private int [ ] [ ] fAttName = new int [ INITIAL_CHUNK_COUNT ] [ ] ; private int [ ] [ ] fAttURI = new int [ INITIAL_CHUNK_COUNT ] [ ] ; private int [ ] [ ] fAttValue = new int [ INITIAL_CHUNK_COUNT ] [ ] ; private int [ ] [ ] fAttType = new int [ INITIAL_CHUNK_COUNT ] [ ] ; private byte [ ] [ ] fAttFlags = new byte [ INITIAL_CHUNK_COUNT ] [ ] ; private QName fAttributeQName = new QName ( ) ; public XMLAttrList ( StringPool stringPool ) { fStringPool = stringPool ; } public void reset ( StringPool stringPool ) { fStringPool = stringPool ; fCurrentHandle = - 1 ; fAttributeListHandle = - 1 ; fAttributeListLength = 0 ; fAttrCount = 0 ; } public int addAttr ( int attrName , int attValue , int attType , boolean specified , boolean search ) throws Exception { fAttributeQName . setValues ( - 1 , attrName , attrName ) ; return addAttr ( fAttributeQName , attValue , attType , specified , search ) ; } public int addAttr ( QName attribute , int attValue , int attType , boolean specified , boolean search ) throws Exception { int chunk ; int index ; if ( search ) { chunk = fCurrentHandle > > CHUNK_SHIFT ; index = fCurrentHandle & CHUNK_MASK ; for ( int attrIndex = fCurrentHandle ; attrIndex < fAttrCount ; attrIndex ++ ) { if ( fStringPool . equalNames ( fAttName [ chunk ] [ index ] , attribute . rawname ) ) { return - 1 ; } if ( ++ index == CHUNK_SIZE ) { chunk ++ ; index = 0 ; } } } else { chunk = fAttrCount > > CHUNK_SHIFT ; index = fAttrCount & CHUNK_MASK ; } ensureCapacity ( chunk , index ) ; fAttPrefix [ chunk ] [ index ] = attribute . prefix ; fAttLocalpart [ chunk ] [ index ] = attribute . localpart ; fAttName [ chunk ] [ index ] = attribute . rawname ; fAttURI [ chunk ] [ index ] = attribute . uri ; fAttValue [ chunk ] [ index ] = attValue ; fAttType [ chunk ] [ index ] = attType ; fAttFlags [ chunk ] [ index ] = ( byte ) ( specified ? ATTFLAG_SPECIFIED : 0 ) ; return fAttrCount ++ ; } public int startAttrList ( ) { fCurrentHandle = fAttrCount ; return fCurrentHandle ; } public void endAttrList ( ) { int attrIndex = fAttrCount - 1 ; int chunk = attrIndex > > CHUNK_SHIFT ; int index = attrIndex & CHUNK_MASK ; fAttFlags [ chunk ] [ index ] |= ATTFLAG_LASTATTR ; fCurrentHandle = - 1 ; } public int getAttrPrefix ( int attrIndex ) { if ( attrIndex < 0 || attrIndex >= fAttrCount ) return - 1 ; int chunk = attrIndex > > CHUNK_SHIFT ; int index = attrIndex & CHUNK_MASK ; return fAttPrefix [ chunk ] [ index ] ; } public int getAttrLocalpart ( int attrIndex ) { if ( attrIndex < 0 || attrIndex >= fAttrCount ) return - 1 ; int chunk = attrIndex > > CHUNK_SHIFT ; int index = attrIndex & CHUNK_MASK ; return fAttLocalpart [ chunk ] [ index ] ; } public int getAttrName ( int attrIndex ) { if ( attrIndex < 0 || attrIndex >= fAttrCount ) return - 1 ; int chunk = attrIndex > > CHUNK_SHIFT ; int index = attrIndex & CHUNK_MASK ; return fAttName [ chunk ] [ index ] ; } public void setAttrURI ( int attrIndex , int uri ) { if ( attrIndex < 0 || attrIndex >= fAttrCount ) return ; int chunk = attrIndex > > CHUNK_SHIFT ; int index = attrIndex & CHUNK_MASK ; fAttURI [ chunk ] [ index ] = uri ; } public int getAttrURI ( int attrIndex ) { if ( attrIndex < 0 || attrIndex >= fAttrCount ) return - 1 ; int chunk = attrIndex > > CHUNK_SHIFT ; int index = attrIndex & CHUNK_MASK ; return fAttURI [ chunk ] [ index ] ; } public int getAttValue ( int attrIndex ) { if ( attrIndex < 0 || attrIndex >= fAttrCount ) return - 1 ; int chunk = attrIndex > > CHUNK_SHIFT ; int index = attrIndex & CHUNK_MASK ; return fAttValue [ chunk ] [ index ] ; } public void setAttValue ( int attrIndex , int attrValue ) { if ( attrIndex < 0 || attrIndex >= fAttrCount ) return ; int chunk = attrIndex > > CHUNK_SHIFT ; int index = attrIndex & CHUNK_MASK ; fAttValue [ chunk ] [ index ] = attrValue ; } public void setAttType ( int attrIndex , int attTypeIndex ) { if ( attrIndex < 0 || attrIndex >= fAttrCount ) return ; int chunk = attrIndex > > CHUNK_SHIFT ; int index = attrIndex & CHUNK_MASK ; fAttType [ chunk ] [ index ] = attTypeIndex ; } public int getAttType ( int attrIndex ) { if ( attrIndex < 0 || attrIndex >= fAttrCount ) return - 1 ; int chunk = attrIndex > > CHUNK_SHIFT ; int index = attrIndex & CHUNK_MASK ; return fAttType [ chunk ] [ index ] ; } public boolean isSpecified ( int attrIndex ) { if ( attrIndex < 0 || attrIndex >= fAttrCount ) return true ; int chunk = attrIndex > > CHUNK_SHIFT ; int index = attrIndex & CHUNK_MASK ; return ( fAttFlags [ chunk ] [ index ] & ATTFLAG_SPECIFIED ) != 0 ; } public void releaseAttrList ( int attrListHandle ) { if ( attrListHandle == - 1 ) return ; int chunk = attrListHandle > > CHUNK_SHIFT ; int index = attrListHandle & CHUNK_MASK ; while ( true ) { boolean last = ( fAttFlags [ chunk ] [ index ] & ATTFLAG_LASTATTR ) != 0 ; fAttPrefix [ chunk ] [ index ] = - 1 ; fAttLocalpart [ chunk ] [ index ] = - 1 ; fAttName [ chunk ] [ index ] = - 1 ; fAttURI [ chunk ] [ index ] = - 1 ; if ( ( fAttFlags [ chunk ] [ index ] & ATTFLAG_SPECIFIED ) != 0 ) fStringPool . releaseString ( fAttValue [ chunk ] [ index ] ) ; fAttValue [ chunk ] [ index ] = - 1 ; if ( ++ index == CHUNK_SIZE ) { chunk ++ ; index = 0 ; } if ( last ) break ; } int lastIndex = ( chunk << CHUNK_SHIFT ) + index ; if ( fAttrCount == lastIndex ) fAttrCount = attrListHandle ; } public int getFirstAttr ( int attrListHandle ) { if ( attrListHandle < 0 || attrListHandle >= fAttrCount ) { return - 1 ; } return attrListHandle ; } public int getNextAttr ( int attrIndex ) { if ( attrIndex < 0 || attrIndex + 1 >= fAttrCount ) { return - 1 ; } int chunk = attrIndex > > CHUNK_SHIFT ; int index = attrIndex & CHUNK_MASK ; if ( ( fAttFlags [ chunk ] [ index ] & ATTFLAG_LASTATTR ) != 0 ) { return - 1 ; } return attrIndex + 1 ; } public AttributeList getAttributeList ( int attrListHandle ) { fAttributeListHandle = attrListHandle ; if ( fAttributeListHandle == - 1 ) fAttributeListLength = 0 ; else { int chunk = fAttributeListHandle > > CHUNK_SHIFT ; int index = fAttributeListHandle & CHUNK_MASK ; fAttributeListLength = 1 ; while ( ( fAttFlags [ chunk ] [ index ] & ATTFLAG_LASTATTR ) == 0 ) { if ( ++ index == CHUNK_SIZE ) { chunk ++ ; index = 0 ; } fAttributeListLength ++ ; } } return this ; } public int getLength ( ) { return fAttributeListLength ; } public String getPrefix ( int i ) { if ( i < 0 || i >= fAttributeListLength ) { return null ; } int chunk = ( fAttributeListHandle + i ) > > CHUNK_SHIFT ; int index = ( fAttributeListHandle + i ) & CHUNK_MASK ; return fStringPool . toString ( fAttPrefix [ chunk ] [ index ] ) ; } public String getLocalpart ( int i ) { if ( i < 0 || i >= fAttributeListLength ) { return null ; } int chunk = ( fAttributeListHandle + i ) > > CHUNK_SHIFT ; int index = ( fAttributeListHandle + i ) & CHUNK_MASK ; return fStringPool . toString ( fAttLocalpart [ chunk ] [ index ] ) ; } public String getName ( int i ) { if ( i < 0 || i >= fAttributeListLength ) return null ; int chunk = ( fAttributeListHandle + i ) > > CHUNK_SHIFT ; int index = ( fAttributeListHandle + i ) & CHUNK_MASK ; return fStringPool . toString ( fAttName [ chunk ] [ index ] ) ; } public String getURI ( int i ) { if ( i < 0 || i >= fAttributeListLength ) return null ; int chunk = ( fAttributeListHandle + i ) > > CHUNK_SHIFT ; int index = ( fAttributeListHandle + i ) & CHUNK_MASK ; return fStringPool . toString ( fAttURI [ chunk ] [ index ] ) ; } public String getType ( int i ) { if ( i < 0 || i >= fAttributeListLength ) return null ; int chunk = ( fAttributeListHandle + i ) > > CHUNK_SHIFT ; int index = ( fAttributeListHandle + i ) & CHUNK_MASK ; int attType = fAttType [ chunk ] [ index ] ; if ( attType == fStringPool . addSymbol ( "ENUMERATION" ) ) attType = fStringPool . addSymbol ( "NMTOKEN" ) ; return fStringPool . toString ( attType ) ; } public String getValue ( int i ) { if ( i < 0 || i >= fAttributeListLength ) return null ; int chunk = ( fAttributeListHandle + i ) > > CHUNK_SHIFT ; int index = ( fAttributeListHandle + i ) & CHUNK_MASK ; return fStringPool . toString ( fAttValue [ chunk ] [ index ] ) ; } public String getType ( String name ) { int nameIndex = fStringPool . addSymbol ( name ) ; if ( nameIndex == - 1 ) return null ; int chunk = fAttributeListHandle > > CHUNK_SHIFT ; int index = fAttributeListHandle & CHUNK_MASK ; for ( int i = 0 ; i < fAttributeListLength ; i ++ ) { if ( fStringPool . equalNames ( fAttName [ chunk ] [ index ] , nameIndex ) ) { int attType = fAttType [ chunk ] [ index ] ; if ( attType == fStringPool . addSymbol ( "ENUMERATION" ) ) attType = fStringPool . addSymbol ( "NMTOKEN" ) ; return fStringPool . toString ( attType ) ; } if ( ++ index == CHUNK_SIZE ) { chunk ++ ; index = 0 ; } } return null ; } public String getValue ( String name ) { int nameIndex = fStringPool . addSymbol ( name ) ; if ( nameIndex == - 1 ) return null ; int chunk = fAttributeListHandle > > CHUNK_SHIFT ; int index = fAttributeListHandle & CHUNK_MASK ; for ( int i = 0 ; i < fAttributeListLength ; i ++ ) { if ( fStringPool . equalNames ( fAttName [ chunk ] [ index ] , nameIndex ) ) return fStringPool . toString ( fAttValue [ chunk ] [ index ] ) ; if ( ++ index == CHUNK_SIZE ) { chunk ++ ; index = 0 ; } } return null ; } private boolean ensureCapacity ( int chunk , int index ) { try { return fAttName [ chunk ] [ index ] != 0 ; } catch ( ArrayIndexOutOfBoundsException ex ) { int [ ] [ ] newIntArray = new int [ chunk * 2 ] [ ] ; System . arraycopy ( fAttPrefix , 0 , newIntArray , 0 , chunk ) ; fAttPrefix = newIntArray ; newIntArray = new int [ chunk * 2 ] [ ] ; System . arraycopy ( fAttLocalpart , 0 , newIntArray , 0 , chunk ) ; fAttLocalpart = newIntArray ; newIntArray = new int [ chunk * 2 ] [ ] ; System . arraycopy ( fAttName , 0 , newIntArray , 0 , chunk ) ; fAttName = newIntArray ; newIntArray = new int [ chunk * 2 ] [ ] ; System . arraycopy ( fAttURI , 0 , newIntArray , 0 , chunk ) ; fAttURI = newIntArray ; newIntArray = new int [ chunk * 2 ] [ ] ; System . arraycopy ( fAttValue , 0 , newIntArray , 0 , chunk ) ; fAttValue = newIntArray ; newIntArray = new int [ chunk * 2 ] [ ] ; System . arraycopy ( fAttType , 0 , newIntArray , 0 , chunk ) ; fAttType = newIntArray ; byte [ ] [ ] newByteArray = new byte [ chunk * 2 ] [ ] ; System . arraycopy ( fAttFlags , 0 , newByteArray , 0 , chunk ) ; fAttFlags = newByteArray ; } catch ( NullPointerException ex ) { } fAttPrefix [ chunk ] = new int [ CHUNK_SIZE ] ; fAttLocalpart [ chunk ] = new int [ CHUNK_SIZE ] ; fAttName [ chunk ] = new int [ CHUNK_SIZE ] ; fAttURI [ chunk ] = new int [ CHUNK_SIZE ] ; fAttValue [ chunk ] = new int [ CHUNK_SIZE ] ; fAttType [ chunk ] = new int [ CHUNK_SIZE ] ; fAttFlags [ chunk ] = new byte [ CHUNK_SIZE ] ; return true ; } } 	1	['30', '1', '0', '10', '38', '0', '8', '2', '29', '0.816696915', '1224', '1', '2', '0', '0.333333333', '0', '0', '39.16666667', '6', '2.8667', '2']
package org . apache . xerces . dom ; import java . io . * ; import org . w3c . dom . * ; import org . w3c . dom . events . * ; import org . apache . xerces . dom . * ; import org . apache . xerces . dom . events . * ; public abstract class ParentNode extends ChildNode { static final long serialVersionUID = 2815829867152120872L ; protected DocumentImpl ownerDocument ; protected ChildNode firstChild = null ; protected transient int fCachedLength = - 1 ; protected transient ChildNode fCachedChild ; protected transient int fCachedChildIndex = - 1 ; protected ParentNode ( DocumentImpl ownerDocument ) { super ( ownerDocument ) ; this . ownerDocument = ownerDocument ; } public ParentNode ( ) { } public Node cloneNode ( boolean deep ) { ParentNode newnode = ( ParentNode ) super . cloneNode ( deep ) ; newnode . ownerDocument = ownerDocument ; if ( needsSyncChildren ( ) ) { synchronizeChildren ( ) ; } newnode . firstChild = null ; newnode . fCachedChildIndex = - 1 ; newnode . fCachedLength = - 1 ; if ( deep ) { for ( ChildNode child = firstChild ; child != null ; child = child . nextSibling ) { newnode . appendChild ( child . cloneNode ( true ) ) ; } } return newnode ; } public Document getOwnerDocument ( ) { return ownerDocument ; } DocumentImpl ownerDocument ( ) { return ownerDocument ; } void setOwnerDocument ( DocumentImpl doc ) { if ( needsSyncChildren ( ) ) { synchronizeChildren ( ) ; } for ( ChildNode child = firstChild ; child != null ; child = child . nextSibling ) { child . setOwnerDocument ( doc ) ; } ownerDocument = doc ; } public boolean hasChildNodes ( ) { if ( needsSyncChildren ( ) ) { synchronizeChildren ( ) ; } return firstChild != null ; } public NodeList getChildNodes ( ) { if ( needsSyncChildren ( ) ) { synchronizeChildren ( ) ; } return this ; } public Node getFirstChild ( ) { if ( needsSyncChildren ( ) ) { synchronizeChildren ( ) ; } return firstChild ; } public Node getLastChild ( ) { if ( needsSyncChildren ( ) ) { synchronizeChildren ( ) ; } return lastChild ( ) ; } final ChildNode lastChild ( ) { return firstChild != null ? firstChild . previousSibling : null ; } final void lastChild ( ChildNode node ) { if ( firstChild != null ) { firstChild . previousSibling = node ; } } public Node insertBefore ( Node newChild , Node refChild ) throws DOMException { return internalInsertBefore ( newChild , refChild , MUTATION_ALL ) ; } Node internalInsertBefore ( Node newChild , Node refChild , int mutationMask ) throws DOMException { boolean errorChecking = ownerDocument . errorChecking ; if ( newChild . getNodeType ( ) == Node . DOCUMENT_FRAGMENT_NODE ) { if ( errorChecking ) { for ( Node kid = newChild . getFirstChild ( ) ; kid != null ; kid = kid . getNextSibling ( ) ) { if ( ! ownerDocument . isKidOK ( this , kid ) ) { throw new DOMException ( DOMException . HIERARCHY_REQUEST_ERR , "DOM006 Hierarchy request error" ) ; } } } while ( newChild . hasChildNodes ( ) ) { insertBefore ( newChild . getFirstChild ( ) , refChild ) ; } return newChild ; } if ( newChild == refChild ) { refChild = refChild . getNextSibling ( ) ; removeChild ( newChild ) ; insertBefore ( newChild , refChild ) ; return newChild ; } if ( needsSyncChildren ( ) ) { synchronizeChildren ( ) ; } if ( errorChecking ) { if ( isReadOnly ( ) ) { throw new DOMException ( DOMException . NO_MODIFICATION_ALLOWED_ERR , "DOM001 Modification not allowed" ) ; } if ( newChild . getOwnerDocument ( ) != ownerDocument ) { throw new DOMException ( DOMException . WRONG_DOCUMENT_ERR , "DOM005 Wrong document" ) ; } if ( ! ownerDocument . isKidOK ( this , newChild ) ) { throw new DOMException ( DOMException . HIERARCHY_REQUEST_ERR , "DOM006 Hierarchy request error" ) ; } if ( refChild != null && refChild . getParentNode ( ) != this ) { throw new DOMException ( DOMException . NOT_FOUND_ERR , "DOM008 Not found" ) ; } boolean treeSafe = true ; for ( NodeImpl a = this ; treeSafe && a != null ; a = a . parentNode ( ) ) { treeSafe = newChild != a ; } if ( ! treeSafe ) { throw new DOMException ( DOMException . HIERARCHY_REQUEST_ERR , "DOM006 Hierarchy request error" ) ; } } EnclosingAttr enclosingAttr = null ; if ( MUTATIONEVENTS && ownerDocument . mutationEvents && ( mutationMask & MUTATION_AGGREGATE ) != 0 ) { LCount lc = LCount . lookup ( MutationEventImpl . DOM_ATTR_MODIFIED ) ; if ( lc . captures + lc . bubbles + lc . defaults > 0 ) { enclosingAttr = getEnclosingAttr ( ) ; } } ChildNode newInternal = ( ChildNode ) newChild ; Node oldparent = newInternal . parentNode ( ) ; if ( oldparent != null ) { oldparent . removeChild ( newInternal ) ; } ChildNode refInternal = ( ChildNode ) refChild ; newInternal . ownerNode = this ; newInternal . isOwned ( true ) ; if ( firstChild == null ) { firstChild = newInternal ; newInternal . isFirstChild ( true ) ; newInternal . previousSibling = newInternal ; } else { if ( refInternal == null ) { ChildNode lastChild = firstChild . previousSibling ; lastChild . nextSibling = newInternal ; newInternal . previousSibling = lastChild ; firstChild . previousSibling = newInternal ; } else { if ( refChild == firstChild ) { firstChild . isFirstChild ( false ) ; newInternal . nextSibling = firstChild ; newInternal . previousSibling = firstChild . previousSibling ; firstChild . previousSibling = newInternal ; firstChild = newInternal ; newInternal . isFirstChild ( true ) ; } else { ChildNode prev = refInternal . previousSibling ; newInternal . nextSibling = refInternal ; prev . nextSibling = newInternal ; refInternal . previousSibling = newInternal ; newInternal . previousSibling = prev ; } } } changed ( ) ; if ( fCachedLength != - 1 ) { fCachedLength ++ ; } if ( fCachedChildIndex != - 1 ) { if ( fCachedChild == refInternal ) { fCachedChild = newInternal ; } else { fCachedChildIndex = - 1 ; } } if ( MUTATIONEVENTS && ownerDocument . mutationEvents ) { if ( ( mutationMask & MUTATION_LOCAL ) != 0 ) { LCount lc = LCount . lookup ( MutationEventImpl . DOM_NODE_INSERTED ) ; if ( lc . captures + lc . bubbles + lc . defaults > 0 ) { MutationEvent me = new MutationEventImpl ( ) ; me . initMutationEvent ( MutationEventImpl . DOM_NODE_INSERTED , true , false , this , null , null , null , ( short ) 0 ) ; newInternal . dispatchEvent ( me ) ; } lc = LCount . lookup ( MutationEventImpl . DOM_NODE_INSERTED_INTO_DOCUMENT ) ; if ( lc . captures + lc . bubbles + lc . defaults > 0 ) { NodeImpl eventAncestor = this ; if ( enclosingAttr != null ) eventAncestor = ( NodeImpl ) ( enclosingAttr . node . getOwnerElement ( ) ) ; if ( eventAncestor != null ) { NodeImpl p = eventAncestor ; while ( p != null ) { eventAncestor = p ; if ( p . getNodeType ( ) == ATTRIBUTE_NODE ) { p = ( ElementImpl ) ( ( AttrImpl ) p ) . getOwnerElement ( ) ; } else { p = p . parentNode ( ) ; } } if ( eventAncestor . getNodeType ( ) == Node . DOCUMENT_NODE ) { MutationEvent me = new MutationEventImpl ( ) ; me . initMutationEvent ( MutationEventImpl . DOM_NODE_INSERTED_INTO_DOCUMENT , false , false , null , null , null , null , ( short ) 0 ) ; dispatchEventToSubtree ( newInternal , me ) ; } } } } if ( ( mutationMask & MUTATION_AGGREGATE ) != 0 ) { dispatchAggregateEvents ( enclosingAttr ) ; } } checkNormalizationAfterInsert ( newInternal ) ; return newChild ; } public Node removeChild ( Node oldChild ) throws DOMException { return internalRemoveChild ( oldChild , MUTATION_ALL ) ; } Node internalRemoveChild ( Node oldChild , int mutationMask ) throws DOMException { DocumentImpl ownerDocument = ownerDocument ( ) ; if ( ownerDocument . errorChecking ) { if ( isReadOnly ( ) ) { throw new DOMException ( DOMException . NO_MODIFICATION_ALLOWED_ERR , "DOM001 Modification not allowed" ) ; } if ( oldChild != null && oldChild . getParentNode ( ) != this ) { throw new DOMException ( DOMException . NOT_FOUND_ERR , "DOM008 Not found" ) ; } } ownerDocument . removedChildNode ( oldChild ) ; ChildNode oldInternal = ( ChildNode ) oldChild ; EnclosingAttr enclosingAttr = null ; if ( MUTATIONEVENTS && ownerDocument . mutationEvents ) { LCount lc = LCount . lookup ( MutationEventImpl . DOM_ATTR_MODIFIED ) ; if ( lc . captures + lc . bubbles + lc . defaults > 0 ) { enclosingAttr = getEnclosingAttr ( ) ; } if ( ( mutationMask & MUTATION_LOCAL ) != 0 ) { lc = LCount . lookup ( MutationEventImpl . DOM_NODE_REMOVED ) ; if ( lc . captures + lc . bubbles + lc . defaults > 0 ) { MutationEvent me = new MutationEventImpl ( ) ; me . initMutationEvent ( MutationEventImpl . DOM_NODE_REMOVED , true , false , this , null , null , null , ( short ) 0 ) ; oldInternal . dispatchEvent ( me ) ; } lc = LCount . lookup ( MutationEventImpl . DOM_NODE_REMOVED_FROM_DOCUMENT ) ; if ( lc . captures + lc . bubbles + lc . defaults > 0 ) { NodeImpl eventAncestor = this ; if ( enclosingAttr != null ) eventAncestor = ( NodeImpl ) enclosingAttr . node . getOwnerElement ( ) ; if ( eventAncestor != null ) { for ( NodeImpl p = eventAncestor . parentNode ( ) ; p != null ; p = p . parentNode ( ) ) { eventAncestor = p ; } if ( eventAncestor . getNodeType ( ) == Node . DOCUMENT_NODE ) { MutationEvent me = new MutationEventImpl ( ) ; me . initMutationEvent ( MutationEventImpl . DOM_NODE_REMOVED_FROM_DOCUMENT , false , false , null , null , null , null , ( short ) 0 ) ; dispatchEventToSubtree ( oldInternal , me ) ; } } } } } if ( fCachedLength != - 1 ) { fCachedLength -- ; } if ( fCachedChildIndex != - 1 ) { if ( fCachedChild == oldInternal ) { fCachedChildIndex -- ; fCachedChild = oldInternal . previousSibling ( ) ; } else { fCachedChildIndex = - 1 ; } } if ( oldInternal == firstChild ) { oldInternal . isFirstChild ( false ) ; firstChild = oldInternal . nextSibling ; if ( firstChild != null ) { firstChild . isFirstChild ( true ) ; firstChild . previousSibling = oldInternal . previousSibling ; } } else { ChildNode prev = oldInternal . previousSibling ; ChildNode next = oldInternal . nextSibling ; prev . nextSibling = next ; if ( next == null ) { firstChild . previousSibling = prev ; } else { next . previousSibling = prev ; } } ChildNode oldPreviousSibling = oldInternal . previousSibling ( ) ; oldInternal . ownerNode = ownerDocument ; oldInternal . isOwned ( false ) ; oldInternal . nextSibling = null ; oldInternal . previousSibling = null ; changed ( ) ; if ( MUTATIONEVENTS && ownerDocument . mutationEvents ) { if ( ( mutationMask & MUTATION_AGGREGATE ) != 0 ) dispatchAggregateEvents ( enclosingAttr ) ; } checkNormalizationAfterRemove ( oldPreviousSibling ) ; return oldInternal ; } public Node replaceChild ( Node newChild , Node oldChild ) throws DOMException { EnclosingAttr enclosingAttr = null ; if ( MUTATIONEVENTS && ownerDocument . mutationEvents ) { LCount lc = LCount . lookup ( MutationEventImpl . DOM_ATTR_MODIFIED ) ; if ( lc . captures + lc . bubbles + lc . defaults > 0 ) { enclosingAttr = getEnclosingAttr ( ) ; } } internalInsertBefore ( newChild , oldChild , MUTATION_LOCAL ) ; if ( newChild != oldChild ) { internalRemoveChild ( oldChild , MUTATION_LOCAL ) ; } if ( MUTATIONEVENTS && ownerDocument . mutationEvents ) { dispatchAggregateEvents ( enclosingAttr ) ; } return oldChild ; } private int nodeListGetLength ( ) { if ( fCachedLength == - 1 ) { ChildNode node ; if ( fCachedChildIndex != - 1 && fCachedChild != null ) { fCachedLength = fCachedChildIndex ; node = fCachedChild ; } else { node = firstChild ; fCachedLength = 0 ; } for ( ; node != null ; node = node . nextSibling ) { fCachedLength ++ ; } } return fCachedLength ; } public int getLength ( ) { return nodeListGetLength ( ) ; } private Node nodeListItem ( int index ) { if ( fCachedChildIndex != - 1 && fCachedChild != null ) { if ( fCachedChildIndex < index ) { while ( fCachedChildIndex < index && fCachedChild != null ) { fCachedChildIndex ++ ; fCachedChild = fCachedChild . nextSibling ; } } else if ( fCachedChildIndex > index ) { while ( fCachedChildIndex > index && fCachedChild != null ) { fCachedChildIndex -- ; fCachedChild = fCachedChild . previousSibling ( ) ; } } return fCachedChild ; } fCachedChild = firstChild ; for ( fCachedChildIndex = 0 ; fCachedChildIndex < index && fCachedChild != null ; fCachedChildIndex ++ ) { fCachedChild = fCachedChild . nextSibling ; } return fCachedChild ; } public Node item ( int index ) { return nodeListItem ( index ) ; } protected final NodeList getChildNodesUnoptimized ( ) { if ( needsSyncChildren ( ) ) { synchronizeChildren ( ) ; } return new NodeList ( ) { public int getLength ( ) { return nodeListGetLength ( ) ; } public Node item ( int index ) { return nodeListItem ( index ) ; } } ; } public void normalize ( ) { if ( isNormalized ( ) ) { return ; } if ( needsSyncChildren ( ) ) { synchronizeChildren ( ) ; } ChildNode kid ; for ( kid = firstChild ; kid != null ; kid = kid . nextSibling ) { kid . normalize ( ) ; } isNormalized ( true ) ; } public void setReadOnly ( boolean readOnly , boolean deep ) { super . setReadOnly ( readOnly , deep ) ; if ( deep ) { if ( needsSyncChildren ( ) ) { synchronizeChildren ( ) ; } for ( ChildNode mykid = firstChild ; mykid != null ; mykid = mykid . nextSibling ) { if ( mykid . getNodeType ( ) != Node . ENTITY_REFERENCE_NODE ) { mykid . setReadOnly ( readOnly , true ) ; } } } } protected void synchronizeChildren ( ) { needsSyncChildren ( false ) ; } protected final void synchronizeChildren ( int nodeIndex ) { boolean orig = ownerDocument . mutationEvents ; ownerDocument . mutationEvents = false ; needsSyncChildren ( false ) ; DeferredDocumentImpl ownerDocument = ( DeferredDocumentImpl ) this . ownerDocument ; ChildNode first = null ; ChildNode last = null ; for ( int index = ownerDocument . getLastChild ( nodeIndex ) ; index != - 1 ; index = ownerDocument . getPrevSibling ( index ) ) { ChildNode node = ( ChildNode ) ownerDocument . getNodeObject ( index ) ; if ( last == null ) { last = node ; } else { first . previousSibling = node ; } node . ownerNode = this ; node . isOwned ( true ) ; node . nextSibling = first ; first = node ; } if ( last != null ) { firstChild = first ; first . isFirstChild ( true ) ; lastChild ( last ) ; } ownerDocument . mutationEvents = orig ; } void checkNormalizationAfterInsert ( ChildNode insertedChild ) { if ( insertedChild . getNodeType ( ) == Node . TEXT_NODE ) { ChildNode prev = insertedChild . previousSibling ( ) ; ChildNode next = insertedChild . nextSibling ; if ( ( prev != null && prev . getNodeType ( ) == Node . TEXT_NODE ) || ( next != null && next . getNodeType ( ) == Node . TEXT_NODE ) ) { isNormalized ( false ) ; } } else { if ( ! insertedChild . isNormalized ( ) ) { isNormalized ( false ) ; } } } void checkNormalizationAfterRemove ( ChildNode previousSibling ) { if ( previousSibling != null && previousSibling . getNodeType ( ) == Node . TEXT_NODE ) { ChildNode next = previousSibling . nextSibling ; if ( next != null && next . getNodeType ( ) == Node . TEXT_NODE ) { isNormalized ( false ) ; } } } private void writeObject ( ObjectOutputStream out ) throws IOException { if ( needsSyncChildren ( ) ) { synchronizeChildren ( ) ; } out . defaultWriteObject ( ) ; } private void readObject ( ObjectInputStream ois ) throws ClassNotFoundException , IOException { ois . defaultReadObject ( ) ; needsSyncChildren ( false ) ; fCachedLength = - 1 ; fCachedChildIndex = - 1 ; } } 	0	['32', '3', '7', '16', '77', '236', '8', '11', '14', '0.650537634', '1240', '0.833333333', '3', '0.625', '0.180555556', '2', '25', '37.5625', '11', '2.3438', '0']
package org . apache . xerces . dom ; import java . util . Enumeration ; import java . util . Vector ; import org . apache . xerces . utils . StringPool ; import org . w3c . dom . * ; public class DeferredElementNSImpl extends ElementNSImpl implements DeferredNode { static final long serialVersionUID = - 5001885145370927385L ; protected transient int fNodeIndex ; DeferredElementNSImpl ( DeferredDocumentImpl ownerDoc , int nodeIndex ) { super ( ownerDoc , null ) ; fNodeIndex = nodeIndex ; needsSyncChildren ( true ) ; } public final int getNodeIndex ( ) { return fNodeIndex ; } protected final void synchronizeData ( ) { needsSyncData ( false ) ; DeferredDocumentImpl ownerDocument = ( DeferredDocumentImpl ) this . ownerDocument ; int elementQName = ownerDocument . getNodeName ( fNodeIndex ) ; StringPool pool = ownerDocument . getStringPool ( ) ; name = pool . toString ( elementQName ) ; int index = name . indexOf ( ':' ) ; if ( index < 0 ) { localName = name ; } else { localName = name . substring ( index + 1 ) ; } namespaceURI = pool . toString ( ownerDocument . getNodeURI ( fNodeIndex ) ) ; setupDefaultAttributes ( ) ; int attrIndex = ownerDocument . getNodeValue ( fNodeIndex ) ; if ( attrIndex != - 1 ) { NamedNodeMap attrs = getAttributes ( ) ; do { NodeImpl attr = ( NodeImpl ) ownerDocument . getNodeObject ( attrIndex ) ; attrs . setNamedItem ( attr ) ; attrIndex = ownerDocument . getPrevSibling ( attrIndex ) ; } while ( attrIndex != - 1 ) ; } } protected final void synchronizeChildren ( ) { synchronizeChildren ( fNodeIndex ) ; } } 	1	['4', '4', '0', '6', '20', '0', '1', '6', '1', '0.666666667', '103', '0.5', '0', '0.962025316', '0.5', '3', '11', '24.25', '4', '1.5', '3']
package org . apache . xerces . utils . regex ; final class RangeToken extends Token implements java . io . Serializable { int [ ] ranges ; boolean sorted ; boolean compacted ; RangeToken icaseCache = null ; int [ ] map = null ; int nonMapIndex ; RangeToken ( int type ) { super ( type ) ; this . setSorted ( false ) ; } protected void addRange ( int start , int end ) { this . icaseCache = null ; int r1 , r2 ; if ( start <= end ) { r1 = start ; r2 = end ; } else { r1 = end ; r2 = start ; } int pos = 0 ; if ( this . ranges == null ) { this . ranges = new int [ 2 ] ; this . ranges [ 0 ] = r1 ; this . ranges [ 1 ] = r2 ; this . setSorted ( true ) ; } else { pos = this . ranges . length ; if ( this . ranges [ pos - 1 ] + 1 == r1 ) { this . ranges [ pos - 1 ] = r2 ; return ; } int [ ] temp = new int [ pos + 2 ] ; System . arraycopy ( this . ranges , 0 , temp , 0 , pos ) ; this . ranges = temp ; if ( this . ranges [ pos - 1 ] >= r1 ) this . setSorted ( false ) ; this . ranges [ pos ++ ] = r1 ; this . ranges [ pos ] = r2 ; if ( ! this . sorted ) this . sortRanges ( ) ; } } private final boolean isSorted ( ) { return this . sorted ; } private final void setSorted ( boolean sort ) { this . sorted = sort ; if ( ! sort ) this . compacted = false ; } private final boolean isCompacted ( ) { return this . compacted ; } private final void setCompacted ( ) { this . compacted = true ; } protected void sortRanges ( ) { if ( this . isSorted ( ) ) return ; if ( this . ranges == null ) return ; for ( int i = this . ranges . length - 4 ; i >= 0 ; i -= 2 ) { for ( int j = 0 ; j <= i ; j += 2 ) { if ( this . ranges [ j ] > this . ranges [ j + 2 ] || this . ranges [ j ] == this . ranges [ j + 2 ] && this . ranges [ j + 1 ] > this . ranges [ j + 3 ] ) { int tmp ; tmp = this . ranges [ j + 2 ] ; this . ranges [ j + 2 ] = this . ranges [ j ] ; this . ranges [ j ] = tmp ; tmp = this . ranges [ j + 3 ] ; this . ranges [ j + 3 ] = this . ranges [ j + 1 ] ; this . ranges [ j + 1 ] = tmp ; } } } this . setSorted ( true ) ; } protected void compactRanges ( ) { boolean DEBUG = false ; if ( this . ranges == null || this . ranges . length <= 2 ) return ; if ( this . isCompacted ( ) ) return ; int base = 0 ; int target = 0 ; while ( target < this . ranges . length ) { if ( base != target ) { this . ranges [ base ] = this . ranges [ target ++ ] ; this . ranges [ base + 1 ] = this . ranges [ target ++ ] ; } else target += 2 ; int baseend = this . ranges [ base + 1 ] ; while ( target < this . ranges . length ) { if ( baseend + 1 < this . ranges [ target ] ) break ; if ( baseend + 1 == this . ranges [ target ] ) { if ( DEBUG ) System . err . println ( "Token#compactRanges(): Compaction: [" + this . ranges [ base ] + ", " + this . ranges [ base + 1 ] + "], [" + this . ranges [ target ] + ", " + this . ranges [ target + 1 ] + "] -> [" + this . ranges [ base ] + ", " + this . ranges [ target + 1 ] + "]" ) ; this . ranges [ base + 1 ] = this . ranges [ target + 1 ] ; baseend = this . ranges [ base + 1 ] ; target += 2 ; } else if ( baseend >= this . ranges [ target + 1 ] ) { if ( DEBUG ) System . err . println ( "Token#compactRanges(): Compaction: [" + this . ranges [ base ] + ", " + this . ranges [ base + 1 ] + "], [" + this . ranges [ target ] + ", " + this . ranges [ target + 1 ] + "] -> [" + this . ranges [ base ] + ", " + this . ranges [ base + 1 ] + "]" ) ; target += 2 ; } else if ( baseend < this . ranges [ target + 1 ] ) { if ( DEBUG ) System . err . println ( "Token#compactRanges(): Compaction: [" + this . ranges [ base ] + ", " + this . ranges [ base + 1 ] + "], [" + this . ranges [ target ] + ", " + this . ranges [ target + 1 ] + "] -> [" + this . ranges [ base ] + ", " + this . ranges [ target + 1 ] + "]" ) ; this . ranges [ base + 1 ] = this . ranges [ target + 1 ] ; baseend = this . ranges [ base + 1 ] ; target += 2 ; } else { throw new RuntimeException ( "Token#compactRanges(): Internel Error: [" + this . ranges [ base ] + "," + this . ranges [ base + 1 ] + "] [" + this . ranges [ target ] + "," + this . ranges [ target + 1 ] + "]" ) ; } } base += 2 ; } if ( base != this . ranges . length ) { int [ ] result = new int [ base ] ; System . arraycopy ( this . ranges , 0 , result , 0 , base ) ; this . ranges = result ; } this . setCompacted ( ) ; } protected void mergeRanges ( Token token ) { if ( token . type != this . type ) throw new IllegalArgumentException ( "Token#mergeRanges(): Mismatched Type: " + token . type ) ; RangeToken tok = ( RangeToken ) token ; this . sortRanges ( ) ; tok . sortRanges ( ) ; if ( tok . ranges == null ) return ; this . icaseCache = null ; this . setSorted ( true ) ; if ( this . ranges == null ) { this . ranges = new int [ tok . ranges . length ] ; System . arraycopy ( tok . ranges , 0 , this . ranges , 0 , tok . ranges . length ) ; return ; } int [ ] result = new int [ this . ranges . length + tok . ranges . length ] ; for ( int i = 0 , j = 0 , k = 0 ; i < this . ranges . length || j < tok . ranges . length ; ) { if ( i >= this . ranges . length ) { result [ k ++ ] = tok . ranges [ j ++ ] ; result [ k ++ ] = tok . ranges [ j ++ ] ; } else if ( j >= tok . ranges . length ) { result [ k ++ ] = this . ranges [ i ++ ] ; result [ k ++ ] = this . ranges [ i ++ ] ; } else if ( tok . ranges [ j ] < this . ranges [ i ] || tok . ranges [ j ] == this . ranges [ i ] && tok . ranges [ j + 1 ] < this . ranges [ i + 1 ] ) { result [ k ++ ] = tok . ranges [ j ++ ] ; result [ k ++ ] = tok . ranges [ j ++ ] ; } else { result [ k ++ ] = this . ranges [ i ++ ] ; result [ k ++ ] = this . ranges [ i ++ ] ; } } this . ranges = result ; } protected void subtractRanges ( Token token ) { if ( token . type == NRANGE ) { this . intersectRanges ( token ) ; return ; } RangeToken tok = ( RangeToken ) token ; if ( tok . ranges == null || this . ranges == null ) return ; this . icaseCache = null ; this . sortRanges ( ) ; this . compactRanges ( ) ; tok . sortRanges ( ) ; tok . compactRanges ( ) ; int [ ] result = new int [ this . ranges . length + tok . ranges . length ] ; int wp = 0 , src = 0 , sub = 0 ; while ( src < this . ranges . length && sub < tok . ranges . length ) { int srcbegin = this . ranges [ src ] ; int srcend = this . ranges [ src + 1 ] ; int subbegin = tok . ranges [ sub ] ; int subend = tok . ranges [ sub + 1 ] ; if ( srcend < subbegin ) { result [ wp ++ ] = this . ranges [ src ++ ] ; result [ wp ++ ] = this . ranges [ src ++ ] ; } else if ( srcend >= subbegin && srcbegin <= subend ) { if ( subbegin <= srcbegin && srcend <= subend ) { src += 2 ; } else if ( subbegin <= srcbegin ) { this . ranges [ src ] = subend + 1 ; sub += 2 ; } else if ( srcend <= subend ) { result [ wp ++ ] = srcbegin ; result [ wp ++ ] = subbegin - 1 ; src += 2 ; } else { result [ wp ++ ] = srcbegin ; result [ wp ++ ] = subbegin - 1 ; this . ranges [ src ] = subend + 1 ; sub += 2 ; } } else if ( subend < srcbegin ) { sub += 2 ; } else { throw new RuntimeException ( "Token#subtractRanges(): Internal Error: [" + this . ranges [ src ] + "," + this . ranges [ src + 1 ] + "] - [" + tok . ranges [ sub ] + "," + tok . ranges [ sub + 1 ] + "]" ) ; } } while ( src < this . ranges . length ) { result [ wp ++ ] = this . ranges [ src ++ ] ; result [ wp ++ ] = this . ranges [ src ++ ] ; } this . ranges = new int [ wp ] ; System . arraycopy ( result , 0 , this . ranges , 0 , wp ) ; } protected void intersectRanges ( Token token ) { RangeToken tok = ( RangeToken ) token ; if ( tok . ranges == null || this . ranges == null ) return ; this . icaseCache = null ; this . sortRanges ( ) ; this . compactRanges ( ) ; tok . sortRanges ( ) ; tok . compactRanges ( ) ; int [ ] result = new int [ this . ranges . length + tok . ranges . length ] ; int wp = 0 , src1 = 0 , src2 = 0 ; while ( src1 < this . ranges . length && src2 < tok . ranges . length ) { int src1begin = this . ranges [ src1 ] ; int src1end = this . ranges [ src1 + 1 ] ; int src2begin = tok . ranges [ src2 ] ; int src2end = tok . ranges [ src2 + 1 ] ; if ( src1end < src2begin ) { src1 += 2 ; } else if ( src1end >= src2begin && src1begin <= src2end ) { if ( src2begin <= src2begin && src1end <= src2end ) { result [ wp ++ ] = src1begin ; result [ wp ++ ] = src1end ; src1 += 2 ; } else if ( src2begin <= src1begin ) { result [ wp ++ ] = src1begin ; result [ wp ++ ] = src2end ; this . ranges [ src1 ] = src2end + 1 ; src2 += 2 ; } else if ( src1end <= src2end ) { result [ wp ++ ] = src2begin ; result [ wp ++ ] = src1end ; src1 += 2 ; } else { result [ wp ++ ] = src2begin ; result [ wp ++ ] = src2end ; this . ranges [ src1 ] = src2end + 1 ; } } else if ( src2end < src1begin ) { src2 += 2 ; } else { throw new RuntimeException ( "Token#intersectRanges(): Internal Error: [" + this . ranges [ src1 ] + "," + this . ranges [ src1 + 1 ] + "] & [" + tok . ranges [ src2 ] + "," + tok . ranges [ src2 + 1 ] + "]" ) ; } } while ( src1 < this . ranges . length ) { result [ wp ++ ] = this . ranges [ src1 ++ ] ; result [ wp ++ ] = this . ranges [ src1 ++ ] ; } this . ranges = new int [ wp ] ; System . arraycopy ( result , 0 , this . ranges , 0 , wp ) ; } static Token complementRanges ( Token token ) { if ( token . type != RANGE && token . type != NRANGE ) throw new IllegalArgumentException ( "Token#complementRanges(): must be RANGE: " + token . type ) ; RangeToken tok = ( RangeToken ) token ; tok . sortRanges ( ) ; tok . compactRanges ( ) ; int len = tok . ranges . length + 2 ; if ( tok . ranges [ 0 ] == 0 ) len -= 2 ; int last = tok . ranges [ tok . ranges . length - 1 ] ; if ( last == UTF16_MAX ) len -= 2 ; RangeToken ret = Token . createRange ( ) ; ret . ranges = new int [ len ] ; int wp = 0 ; if ( tok . ranges [ 0 ] > 0 ) { ret . ranges [ wp ++ ] = 0 ; ret . ranges [ wp ++ ] = tok . ranges [ 0 ] - 1 ; } for ( int i = 1 ; i < tok . ranges . length - 2 ; i += 2 ) { ret . ranges [ wp ++ ] = tok . ranges [ i ] + 1 ; ret . ranges [ wp ++ ] = tok . ranges [ i + 1 ] - 1 ; } if ( last != UTF16_MAX ) { ret . ranges [ wp ++ ] = last + 1 ; ret . ranges [ wp ] = UTF16_MAX ; } ret . setCompacted ( ) ; return ret ; } synchronized RangeToken getCaseInsensitiveToken ( ) { if ( this . icaseCache != null ) return this . icaseCache ; RangeToken uppers = this . type == Token . RANGE ? Token . createRange ( ) : Token . createNRange ( ) ; for ( int i = 0 ; i < this . ranges . length ; i += 2 ) { for ( int ch = this . ranges [ i ] ; ch <= this . ranges [ i + 1 ] ; ch ++ ) { if ( ch > 0xffff ) uppers . addRange ( ch , ch ) ; else { char uch = Character . toUpperCase ( ( char ) ch ) ; uppers . addRange ( uch , uch ) ; } } } RangeToken lowers = this . type == Token . RANGE ? Token . createRange ( ) : Token . createNRange ( ) ; for ( int i = 0 ; i < uppers . ranges . length ; i += 2 ) { for ( int ch = uppers . ranges [ i ] ; ch <= uppers . ranges [ i + 1 ] ; ch ++ ) { if ( ch > 0xffff ) lowers . addRange ( ch , ch ) ; else { char uch = Character . toUpperCase ( ( char ) ch ) ; lowers . addRange ( uch , uch ) ; } } } lowers . mergeRanges ( uppers ) ; lowers . mergeRanges ( this ) ; lowers . compactRanges ( ) ; this . icaseCache = lowers ; return lowers ; } void dumpRanges ( ) { System . err . print ( "RANGE: " ) ; if ( this . ranges == null ) System . err . println ( " NULL" ) ; for ( int i = 0 ; i < this . ranges . length ; i += 2 ) { System . err . print ( "[" + this . ranges [ i ] + "," + this . ranges [ i + 1 ] + "] " ) ; } System . err . println ( "" ) ; } boolean match ( int ch ) { if ( this . map == null ) this . createMap ( ) ; boolean ret ; if ( this . type == RANGE ) { if ( ch < MAPSIZE ) return ( this . map [ ch / 32 ] & ( 1 << ( ch & 0x1f ) ) ) != 0 ; ret = false ; for ( int i = this . nonMapIndex ; i < this . ranges . length ; i += 2 ) { if ( this . ranges [ i ] <= ch && ch <= this . ranges [ i + 1 ] ) return true ; } } else { if ( ch < MAPSIZE ) return ( this . map [ ch / 32 ] & ( 1 << ( ch & 0x1f ) ) ) == 0 ; ret = true ; for ( int i = this . nonMapIndex ; i < this . ranges . length ; i += 2 ) { if ( this . ranges [ i ] <= ch && ch <= this . ranges [ i + 1 ] ) return false ; } } return ret ; } private static final int MAPSIZE = 256 ; private void createMap ( ) { int asize = MAPSIZE / 32 ; this . map = new int [ asize ] ; this . nonMapIndex = this . ranges . length ; for ( int i = 0 ; i < asize ; i ++ ) this . map [ i ] = 0 ; for ( int i = 0 ; i < this . ranges . length ; i += 2 ) { int s = this . ranges [ i ] ; int e = this . ranges [ i + 1 ] ; if ( s < MAPSIZE ) { for ( int j = s ; j <= e && j < MAPSIZE ; j ++ ) this . map [ j / 32 ] |= 1 << ( j & 0x1f ) ; } else { this . nonMapIndex = i ; break ; } if ( e >= MAPSIZE ) { this . nonMapIndex = i ; break ; } } } public String toString ( int options ) { String ret ; if ( this . type == RANGE ) { if ( this == Token . token_dot ) ret = "." ; else if ( this == Token . token_0to9 ) ret = "\\d" ; else if ( this == Token . token_wordchars ) ret = "\\w" ; else if ( this == Token . token_spaces ) ret = "\\s" ; else { StringBuffer sb = new StringBuffer ( ) ; sb . append ( "[" ) ; for ( int i = 0 ; i < this . ranges . length ; i += 2 ) { if ( ( options & RegularExpression . SPECIAL_COMMA ) != 0 && i > 0 ) sb . append ( "," ) ; if ( this . ranges [ i ] == this . ranges [ i + 1 ] ) { sb . append ( escapeCharInCharClass ( this . ranges [ i ] ) ) ; } else { sb . append ( escapeCharInCharClass ( this . ranges [ i ] ) ) ; sb . append ( ( char ) '-' ) ; sb . append ( escapeCharInCharClass ( this . ranges [ i + 1 ] ) ) ; } } sb . append ( "]" ) ; ret = sb . toString ( ) ; } } else { if ( this == Token . token_not_0to9 ) ret = "\\D" ; else if ( this == Token . token_not_wordchars ) ret = "\\W" ; else if ( this == Token . token_not_spaces ) ret = "\\S" ; else { StringBuffer sb = new StringBuffer ( ) ; sb . append ( "[^" ) ; for ( int i = 0 ; i < this . ranges . length ; i += 2 ) { if ( ( options & RegularExpression . SPECIAL_COMMA ) != 0 && i > 0 ) sb . append ( "," ) ; if ( this . ranges [ i ] == this . ranges [ i + 1 ] ) { sb . append ( escapeCharInCharClass ( this . ranges [ i ] ) ) ; } else { sb . append ( escapeCharInCharClass ( this . ranges [ i ] ) ) ; sb . append ( '-' ) ; sb . append ( escapeCharInCharClass ( this . ranges [ i + 1 ] ) ) ; } } sb . append ( "]" ) ; ret = sb . toString ( ) ; } } return ret ; } private static String escapeCharInCharClass ( int ch ) { String ret ; switch ( ch ) { case '[' : case ']' : case '-' : case '^' : case ',' : case '\\' : ret = "\\" + ( char ) ch ; break ; case '\f' : ret = "\\f" ; break ; case '\n' : ret = "\\n" ; break ; case '\r' : ret = "\\r" ; break ; case '\t' : ret = "\\t" ; break ; case 0x1b : ret = "\\e" ; break ; default : if ( ch < 0x20 ) { String pre = "0" + Integer . toHexString ( ch ) ; ret = "\\x" + pre . substring ( pre . length ( ) - 2 , pre . length ( ) ) ; } else if ( ch >= 0x10000 ) { String pre = "0" + Integer . toHexString ( ch ) ; ret = "\\v" + pre . substring ( pre . length ( ) - 6 , pre . length ( ) ) ; } else ret = "" + ( char ) ch ; } return ret ; } } 	0	['18', '2', '0', '6', '35', '0', '6', '1', '1', '0.680672269', '2128', '0.142857143', '1', '0.734375', '0.361111111', '1', '7', '116.8333333', '17', '8', '0']
package org . apache . xerces . jaxp ; import javax . xml . parsers . ParserConfigurationException ; import javax . xml . parsers . SAXParser ; import javax . xml . parsers . SAXParserFactory ; import org . xml . sax . SAXException ; import org . xml . sax . SAXNotRecognizedException ; import org . xml . sax . SAXNotSupportedException ; public class SAXParserFactoryImpl extends SAXParserFactory { public SAXParserFactoryImpl ( ) { super ( ) ; } public SAXParser newSAXParser ( ) throws ParserConfigurationException { return ( new SAXParserImpl ( this . isNamespaceAware ( ) , this . isValidating ( ) ) ) ; } public void setFeature ( String name , boolean value ) throws ParserConfigurationException , SAXNotRecognizedException , SAXNotSupportedException { throw new SAXNotRecognizedException ( "Feature: " + name ) ; } public boolean getFeature ( String name ) throws ParserConfigurationException , SAXNotRecognizedException , SAXNotSupportedException { throw new SAXNotRecognizedException ( "Feature: " + name ) ; } } 	1	['4', '2', '0', '1', '12', '6', '0', '1', '4', '2', '39', '0', '0', '0.8125', '0.583333333', '0', '0', '8.75', '1', '0.75', '2']
package org . apache . xerces . validators . common ; public class CMException extends Exception { public CMException ( int errCode ) { fErrorCode = errCode ; } public int getErrorCode ( ) { return fErrorCode ; } static final int fUnused = - 1000 ; private int fErrorCode ; } ; 	0	['2', '3', '0', '11', '3', '0', '11', '0', '2', '1', '13', '0.5', '0', '0.944444444', '0.75', '0', '0', '4.5', '1', '0.5', '0']
package org . apache . xerces . dom ; import java . io . * ; import java . util . Vector ; import java . util . Enumeration ; import org . w3c . dom . * ; import org . apache . xerces . dom . events . MutationEventImpl ; import org . w3c . dom . events . * ; public class AttributeMap extends NamedNodeMapImpl { protected AttributeMap ( ElementImpl ownerNode , NamedNodeMapImpl defaults ) { super ( ownerNode ) ; if ( defaults != null ) { cloneContent ( defaults ) ; if ( nodes != null ) { hasDefaults ( true ) ; } } } public Node setNamedItem ( Node arg ) throws DOMException { if ( isReadOnly ( ) ) { throw new DOMException ( DOMException . NO_MODIFICATION_ALLOWED_ERR , "DOM001 Modification not allowed" ) ; } if ( arg . getOwnerDocument ( ) != ownerNode . ownerDocument ( ) ) { throw new DOMException ( DOMException . WRONG_DOCUMENT_ERR , "DOM005 Wrong document" ) ; } if ( arg . getNodeType ( ) != arg . ATTRIBUTE_NODE ) { throw new DOMException ( DOMException . HIERARCHY_REQUEST_ERR , "DOM006 Hierarchy request error" ) ; } NodeImpl argn = ( NodeImpl ) arg ; if ( argn . isOwned ( ) ) { throw new DOMException ( DOMException . INUSE_ATTRIBUTE_ERR , "DOM009 Attribute already in use" ) ; } argn . ownerNode = ownerNode ; argn . isOwned ( true ) ; int i = findNamePoint ( arg . getNodeName ( ) , 0 ) ; NodeImpl previous = null ; if ( i >= 0 ) { previous = ( NodeImpl ) nodes . elementAt ( i ) ; nodes . setElementAt ( arg , i ) ; previous . ownerNode = ownerNode . ownerDocument ( ) ; previous . isOwned ( false ) ; previous . isSpecified ( true ) ; } else { i = - 1 - i ; if ( null == nodes ) { nodes = new Vector ( 5 , 10 ) ; } nodes . insertElementAt ( arg , i ) ; } if ( NodeImpl . MUTATIONEVENTS && ownerNode . ownerDocument ( ) . mutationEvents ) { ownerNode . dispatchAggregateEvents ( ( AttrImpl ) arg , previous == null ? null : previous . getNodeValue ( ) , previous == null ? MutationEvent . ADDITION : MutationEvent . MODIFICATION ) ; } if ( ! argn . isNormalized ( ) ) { ownerNode . isNormalized ( false ) ; } return previous ; } public Node setNamedItemNS ( Node arg ) throws DOMException { if ( isReadOnly ( ) ) { throw new DOMException ( DOMException . NO_MODIFICATION_ALLOWED_ERR , "DOM001 Modification not allowed" ) ; } if ( arg . getOwnerDocument ( ) != ownerNode . ownerDocument ( ) ) { throw new DOMException ( DOMException . WRONG_DOCUMENT_ERR , "DOM005 Wrong document" ) ; } if ( arg . getNodeType ( ) != arg . ATTRIBUTE_NODE ) { throw new DOMException ( DOMException . HIERARCHY_REQUEST_ERR , "DOM006 Hierarchy request error" ) ; } NodeImpl argn = ( NodeImpl ) arg ; if ( argn . isOwned ( ) ) { throw new DOMException ( DOMException . INUSE_ATTRIBUTE_ERR , "DOM009 Attribute already in use" ) ; } argn . ownerNode = ownerNode ; argn . isOwned ( true ) ; int i = findNamePoint ( argn . getNamespaceURI ( ) , argn . getLocalName ( ) ) ; NodeImpl previous = null ; if ( i >= 0 ) { previous = ( NodeImpl ) nodes . elementAt ( i ) ; nodes . setElementAt ( arg , i ) ; previous . ownerNode = ownerNode . ownerDocument ( ) ; previous . isOwned ( false ) ; previous . isSpecified ( true ) ; } else { i = findNamePoint ( arg . getNodeName ( ) , 0 ) ; if ( i >= 0 ) { previous = ( NodeImpl ) nodes . elementAt ( i ) ; nodes . insertElementAt ( arg , i ) ; } else { i = - 1 - i ; if ( null == nodes ) { nodes = new Vector ( 5 , 10 ) ; } nodes . insertElementAt ( arg , i ) ; } } if ( NodeImpl . MUTATIONEVENTS && ownerNode . ownerDocument ( ) . mutationEvents ) { ownerNode . dispatchAggregateEvents ( ( AttrImpl ) arg , previous == null ? null : previous . getNodeValue ( ) , previous == null ? MutationEvent . ADDITION : MutationEvent . MODIFICATION ) ; } if ( ! argn . isNormalized ( ) ) { ownerNode . isNormalized ( false ) ; } return previous ; } public Node removeNamedItem ( String name ) throws DOMException { return internalRemoveNamedItem ( name , true ) ; } Node safeRemoveNamedItem ( String name ) { return internalRemoveNamedItem ( name , false ) ; } final protected Node internalRemoveNamedItem ( String name , boolean raiseEx ) { if ( isReadOnly ( ) ) { throw new DOMException ( DOMException . NO_MODIFICATION_ALLOWED_ERR , "DOM001 Modification not allowed" ) ; } int i = findNamePoint ( name , 0 ) ; if ( i < 0 ) { if ( raiseEx ) { throw new DOMException ( DOMException . NOT_FOUND_ERR , "DOM008 Not found" ) ; } else { return null ; } } LCount lc = null ; String oldvalue = "" ; AttrImpl enclosingAttribute = null ; if ( NodeImpl . MUTATIONEVENTS && ownerNode . ownerDocument ( ) . mutationEvents ) { lc = LCount . lookup ( MutationEventImpl . DOM_ATTR_MODIFIED ) ; if ( lc . captures + lc . bubbles + lc . defaults > 0 ) { enclosingAttribute = ( AttrImpl ) ( nodes . elementAt ( i ) ) ; oldvalue = enclosingAttribute . getNodeValue ( ) ; } } NodeImpl n = ( NodeImpl ) nodes . elementAt ( i ) ; if ( hasDefaults ( ) ) { NamedNodeMapImpl defaults = ( ( ElementImpl ) ownerNode ) . getDefaultAttributes ( ) ; Node d ; if ( defaults != null && ( d = defaults . getNamedItem ( name ) ) != null && findNamePoint ( name , i + 1 ) < 0 ) { NodeImpl clone = ( NodeImpl ) d . cloneNode ( true ) ; clone . ownerNode = ownerNode ; clone . isOwned ( true ) ; clone . isSpecified ( false ) ; nodes . setElementAt ( clone , i ) ; } else { nodes . removeElementAt ( i ) ; } } else { nodes . removeElementAt ( i ) ; } n . ownerNode = ownerNode . ownerDocument ( ) ; n . isOwned ( false ) ; n . isSpecified ( true ) ; if ( NodeImpl . MUTATIONEVENTS && ownerNode . ownerDocument ( ) . mutationEvents ) { if ( lc . captures + lc . bubbles + lc . defaults > 0 ) { MutationEventImpl me = new MutationEventImpl ( ) ; me . initMutationEvent ( MutationEventImpl . DOM_ATTR_MODIFIED , true , false , null , n . getNodeValue ( ) , null , name , MutationEvent . REMOVAL ) ; ownerNode . dispatchEvent ( me ) ; } ownerNode . dispatchAggregateEvents ( null , null , ( short ) 0 ) ; } return n ; } public Node removeNamedItemNS ( String namespaceURI , String name ) throws DOMException { return internalRemoveNamedItemNS ( namespaceURI , name , true ) ; } Node safeRemoveNamedItemNS ( String namespaceURI , String name ) { return internalRemoveNamedItemNS ( namespaceURI , name , false ) ; } final protected Node internalRemoveNamedItemNS ( String namespaceURI , String name , boolean raiseEx ) { if ( isReadOnly ( ) ) { throw new DOMException ( DOMException . NO_MODIFICATION_ALLOWED_ERR , "DOM001 Modification not allowed" ) ; } int i = findNamePoint ( namespaceURI , name ) ; if ( i < 0 ) { if ( raiseEx ) { throw new DOMException ( DOMException . NOT_FOUND_ERR , "DOM008 Not found" ) ; } else { return null ; } } LCount lc = null ; String oldvalue = "" ; AttrImpl enclosingAttribute = null ; if ( NodeImpl . MUTATIONEVENTS && ownerNode . ownerDocument ( ) . mutationEvents ) { lc = LCount . lookup ( MutationEventImpl . DOM_ATTR_MODIFIED ) ; if ( lc . captures + lc . bubbles + lc . defaults > 0 ) { enclosingAttribute = ( AttrImpl ) ( nodes . elementAt ( i ) ) ; oldvalue = enclosingAttribute . getNodeValue ( ) ; } } NodeImpl n = ( NodeImpl ) nodes . elementAt ( i ) ; String nodeName = n . getNodeName ( ) ; if ( hasDefaults ( ) ) { NamedNodeMapImpl defaults = ( ( ElementImpl ) ownerNode ) . getDefaultAttributes ( ) ; Node d ; if ( defaults != null && ( d = defaults . getNamedItem ( nodeName ) ) != null ) { int j = findNamePoint ( nodeName , 0 ) ; if ( j >= 0 && findNamePoint ( nodeName , j + 1 ) < 0 ) { NodeImpl clone = ( NodeImpl ) d . cloneNode ( true ) ; clone . ownerNode = ownerNode ; clone . isOwned ( true ) ; clone . isSpecified ( false ) ; nodes . setElementAt ( clone , i ) ; } else { nodes . removeElementAt ( i ) ; } } else { nodes . removeElementAt ( i ) ; } } else { nodes . removeElementAt ( i ) ; } n . ownerNode = ownerNode . ownerDocument ( ) ; n . isOwned ( false ) ; n . isSpecified ( true ) ; if ( NodeImpl . MUTATIONEVENTS && ownerNode . ownerDocument ( ) . mutationEvents ) { if ( lc . captures + lc . bubbles + lc . defaults > 0 ) { MutationEventImpl me = new MutationEventImpl ( ) ; me . initMutationEvent ( MutationEventImpl . DOM_ATTR_MODIFIED , true , false , null , n . getNodeValue ( ) , null , name , MutationEvent . REMOVAL ) ; ownerNode . dispatchEvent ( me ) ; } ownerNode . dispatchAggregateEvents ( null , null , ( short ) 0 ) ; } return n ; } public NamedNodeMapImpl cloneMap ( NodeImpl ownerNode ) { AttributeMap newmap = new AttributeMap ( ( ElementImpl ) ownerNode , null ) ; newmap . hasDefaults ( hasDefaults ( ) ) ; newmap . cloneContent ( this ) ; return newmap ; } protected void cloneContent ( NamedNodeMapImpl srcmap ) { if ( srcmap . nodes != null ) { nodes = new Vector ( srcmap . nodes . size ( ) ) ; for ( int i = 0 ; i < srcmap . nodes . size ( ) ; ++ i ) { NodeImpl n = ( NodeImpl ) srcmap . nodes . elementAt ( i ) ; NodeImpl clone = ( NodeImpl ) n . cloneNode ( true ) ; clone . isSpecified ( n . isSpecified ( ) ) ; nodes . insertElementAt ( clone , i ) ; clone . ownerNode = ownerNode ; clone . isOwned ( true ) ; } } } } 	1	['11', '2', '0', '7', '49', '25', '1', '7', '5', '2', '760', '0', '0', '0.545454545', '0.324675325', '1', '9', '68.09090909', '13', '3.1818', '2']
package org . apache . html . dom ; public interface HTMLFormControl { } 	0	['0', '1', '0', '8', '0', '0', '8', '0', '0', '2', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0']
package javax . xml . parsers ; import java . io . File ; import java . io . InputStream ; import java . io . IOException ; import org . xml . sax . EntityResolver ; import org . xml . sax . ErrorHandler ; import org . xml . sax . InputSource ; import org . xml . sax . SAXException ; import org . w3c . dom . Document ; public abstract class DocumentBuilder { protected DocumentBuilder ( ) { } public Document parse ( InputStream is ) throws SAXException , IOException { if ( is == null ) { throw new IllegalArgumentException ( "InputStream cannot be null" ) ; } InputSource in = new InputSource ( is ) ; return parse ( in ) ; } public Document parse ( InputStream is , String systemId ) throws SAXException , IOException { if ( is == null ) { throw new IllegalArgumentException ( "InputStream cannot be null" ) ; } InputSource in = new InputSource ( is ) ; in . setSystemId ( systemId ) ; return parse ( in ) ; } public Document parse ( String uri ) throws SAXException , IOException { if ( uri == null ) { throw new IllegalArgumentException ( "URI cannot be null" ) ; } InputSource in = new InputSource ( uri ) ; return parse ( in ) ; } public Document parse ( File f ) throws SAXException , IOException { if ( f == null ) { throw new IllegalArgumentException ( "File cannot be null" ) ; } String uri = "file:" + f . getAbsolutePath ( ) ; if ( File . separatorChar == '\\' ) { uri = uri . replace ( '\\' , '/' ) ; } InputSource in = new InputSource ( uri ) ; return parse ( in ) ; } public abstract Document parse ( InputSource is ) throws SAXException , IOException ; public abstract boolean isNamespaceAware ( ) ; public abstract boolean isValidating ( ) ; public abstract void setEntityResolver ( org . xml . sax . EntityResolver er ) ; public abstract void setErrorHandler ( org . xml . sax . ErrorHandler eh ) ; public abstract Document newDocument ( ) ; } 	1	['11', '1', '1', '0', '21', '55', '0', '0', '10', '2', '99', '0', '0', '0', '0.246753247', '0', '0', '8', '1', '0.9091', '2']
package org . apache . xerces . validators . datatype ; import java . util . Hashtable ; import java . util . Locale ; import java . util . Enumeration ; import org . apache . xerces . validators . schema . SchemaSymbols ; import org . apache . xerces . utils . regex . RegularExpression ; import org . apache . xerces . validators . schema . SchemaSymbols ; import org . apache . xerces . validators . datatype . InvalidDatatypeFacetException ; public class BooleanDatatypeValidator extends AbstractDatatypeValidator { private Locale fLocale = null ; private DatatypeValidator fBaseValidator = null ; private String fPattern = null ; private int fFacetsDefined = 0 ; private DatatypeMessageProvider fMessageProvider = new DatatypeMessageProvider ( ) ; private static final String fValueSpace [ ] = { "false" , "true" , "0" , "1" } ; private RegularExpression fRegex = null ; public BooleanDatatypeValidator ( ) throws InvalidDatatypeFacetException { this ( null , null , false ) ; } public BooleanDatatypeValidator ( DatatypeValidator base , Hashtable facets , boolean derivedByList ) throws InvalidDatatypeFacetException { setBasetype ( base ) ; if ( facets != null ) { if ( derivedByList == false ) { for ( Enumeration e = facets . keys ( ) ; e . hasMoreElements ( ) ; ) { String key = ( String ) e . nextElement ( ) ; if ( key . equals ( SchemaSymbols . ELT_PATTERN ) ) { fFacetsDefined += DatatypeValidator . FACET_PATTERN ; fPattern = ( String ) facets . get ( key ) ; if ( fPattern != null ) fRegex = new RegularExpression ( fPattern , "X" ) ; } else { throw new InvalidDatatypeFacetException ( "Only constraining facet in boolean datatype is PATTERN" ) ; } } } else { } } } public Object validate ( String content , Object state ) throws InvalidDatatypeValueException { checkContent ( content ) ; return null ; } public int compare ( String content1 , String content2 ) { return 0 ; } public Hashtable getFacets ( ) { return null ; } private void setBasetype ( DatatypeValidator base ) { fBaseValidator = base ; } private String getErrorString ( int major , int minor , Object args [ ] ) { try { return fMessageProvider . createMessage ( fLocale , major , minor , args ) ; } catch ( Exception e ) { return "Illegal Errorcode " + minor ; } } public Object clone ( ) throws CloneNotSupportedException { throw new CloneNotSupportedException ( "clone() is not supported in " + this . getClass ( ) . getName ( ) ) ; } private void checkContent ( String content ) throws InvalidDatatypeValueException { boolean isContentInDomain = false ; for ( int i = 0 ; i < fValueSpace . length ; i ++ ) { if ( content . equals ( fValueSpace [ i ] ) ) isContentInDomain = true ; } if ( isContentInDomain == false ) throw new InvalidDatatypeValueException ( getErrorString ( DatatypeMessageProvider . NotBoolean , DatatypeMessageProvider . MSG_NONE , new Object [ ] { content } ) ) ; if ( ( fFacetsDefined & DatatypeValidator . FACET_PATTERN ) != 0 ) { if ( fRegex == null || fRegex . matches ( content ) == false ) throw new InvalidDatatypeValueException ( "Value'" + content + "does not match regular expression facet" + fPattern ) ; } } } 	0	['10', '2', '0', '7', '29', '37', '1', '6', '6', '0.698412698', '228', '1', '3', '0.363636364', '0.263888889', '0', '0', '21.1', '1', '0.7', '0']
package org . apache . xerces . utils ; import java . util . Locale ; import java . util . ResourceBundle ; import java . util . ListResourceBundle ; public class XMLMessages implements XMLMessageProvider { public static final String XML_DOMAIN = "http://www.w3.org/TR/1998/REC-xml-19980210" ; public static final String XMLNS_DOMAIN = "http://www.w3.org/TR/1999/REC-xml-names-19990114" ; public void setLocale ( Locale locale ) { fLocale = locale ; } public Locale getLocale ( ) { return fLocale ; } public String createMessage ( Locale locale , int majorCode , int minorCode , Object args [ ] ) { boolean throwex = false ; if ( fResourceBundle == null || locale != fLocale ) { if ( locale != null ) fResourceBundle = ListResourceBundle . getBundle ( "org.apache.xerces.msg.XMLMessages" , locale ) ; if ( fResourceBundle == null ) fResourceBundle = ListResourceBundle . getBundle ( "org.apache.xerces.msg.XMLMessages" ) ; } if ( majorCode < 0 || majorCode >= fgMessageKeys . length - 1 ) { majorCode = MSG_BAD_MAJORCODE ; throwex = true ; } String msgKey = fgMessageKeys [ majorCode ] ; String msg = fResourceBundle . getString ( msgKey ) ; if ( args != null ) { try { msg = java . text . MessageFormat . format ( msg , args ) ; } catch ( Exception e ) { msg = fResourceBundle . getString ( fgMessageKeys [ MSG_FORMAT_FAILURE ] ) ; msg += " " + fResourceBundle . getString ( msgKey ) ; } } if ( throwex ) { throw new RuntimeException ( msg ) ; } return msg ; } private Locale fLocale = null ; private ResourceBundle fResourceBundle = null ; public static final int MSG_BAD_MAJORCODE = 0 , MSG_FORMAT_FAILURE = 1 , MSG_LESSTHAN_IN_ATTVALUE = 2 , MSG_ROOT_ELEMENT_TYPE = 3 , MSG_IDREFS_INVALID = 4 , MSG_NMTOKENS_INVALID = 5 , MSG_RESERVED_PITARGET = 6 , MSG_SPACE_REQUIRED_IN_PI = 7 , MSG_INVALID_CHAR_IN_PI = 8 , MSG_DASH_DASH_IN_COMMENT = 9 , MSG_INVALID_CHAR_IN_COMMENT = 10 , MSG_INVALID_CHARREF = 11 , MSG_INVALID_CHAR_IN_ATTVALUE = 12 , MSG_QUOTE_REQUIRED_IN_ATTVALUE = 13 , MSG_NAME_REQUIRED_IN_REFERENCE = 14 , MSG_SEMICOLON_REQUIRED_IN_REFERENCE = 15 , MSG_DIGIT_REQUIRED_IN_CHARREF = 16 , MSG_HEXDIGIT_REQUIRED_IN_CHARREF = 17 , MSG_SEMICOLON_REQUIRED_IN_CHARREF = 18 , MSG_QUOTE_REQUIRED_IN_SYSTEMID = 19 , MSG_INVALID_CHAR_IN_SYSTEMID = 20 , MSG_QUOTE_REQUIRED_IN_PUBLICID = 21 , MSG_INVALID_CHAR_IN_PUBLICID = 22 , MSG_INCLUDESECT_UNTERMINATED = 23 , MSG_IGNORESECT_UNTERMINATED = 24 , MSG_INVALID_CHAR_IN_IGNORESECT = 25 , MSG_ELEMENT_UNTERMINATED = 26 , MSG_EQ_REQUIRED_IN_ATTRIBUTE = 27 , MSG_ATTRIBUTE_NOT_UNIQUE = 28 , MSG_ENCODINGDECL_REQUIRED = 29 , MSG_VERSIONINFO_REQUIRED = 30 , MSG_EQ_REQUIRED_IN_XMLDECL = 31 , MSG_EQ_REQUIRED_IN_TEXTDECL = 32 , MSG_QUOTE_REQUIRED_IN_XMLDECL = 33 , MSG_QUOTE_REQUIRED_IN_TEXTDECL = 34 , MSG_INVALID_CHAR_IN_XMLDECL = 35 , MSG_INVALID_CHAR_IN_TEXTDECL = 36 , MSG_VERSIONINFO_INVALID = 37 , MSG_VERSION_NOT_SUPPORTED = 38 , MSG_SPACE_REQUIRED_IN_TEXTDECL = 39 , MSG_ENCODINGDECL_INVALID = 40 , MSG_SDDECL_INVALID = 41 , MSG_XMLDECL_UNTERMINATED = 42 , MSG_TEXTDECL_UNTERMINATED = 43 , MSG_INVALID_CHAR_IN_INTERNAL_SUBSET = 44 , MSG_INVALID_CHAR_IN_EXTERNAL_SUBSET = 45 , MSG_INVALID_CHAR_IN_ENTITYVALUE = 46 , MSG_MIXED_CONTENT_UNTERMINATED = 47 , MSG_NAME_REQUIRED_IN_PEREFERENCE = 48 , MSG_SEMICOLON_REQUIRED_IN_PEREFERENCE = 49 , MSG_EXTERNALID_REQUIRED = 50 , MSG_PEREFERENCE_WITHIN_MARKUP = 51 , MSG_INVALID_CHAR_IN_PROLOG = 52 , MSG_INVALID_CHAR_IN_MISC = 53 , MSG_INVALID_CHAR_IN_CDSECT = 54 , MSG_INVALID_CHAR_IN_CONTENT = 55 , MSG_ETAG_REQUIRED = 56 , MSG_ETAG_UNTERMINATED = 57 , MSG_ATTRIBUTE_NAME_REQUIRED_IN_ATTDEF = 58 , MSG_ATTTYPE_REQUIRED_IN_ATTDEF = 59 , MSG_PUBIDCHAR_ILLEGAL = 60 , MSG_ENCODING_NOT_SUPPORTED = 61 , MSG_ENTITY_NOT_DECLARED = 62 , MSG_REFERENCE_TO_UNPARSED_ENTITY = 63 , MSG_REFERENCE_TO_EXTERNAL_ENTITY = 64 , MSG_XML_LANG_INVALID = 65 , MSG_CDSECT_UNTERMINATED = 66 , MSG_DUPLICATE_TYPE_IN_MIXED_CONTENT = 67 , MSG_ELEMENT_ENTITY_MISMATCH = 68 , MSG_ID_DEFAULT_TYPE_INVALID = 69 , MSG_ENCODING_REQUIRED = 70 , MSG_RECURSIVE_REFERENCE = 71 , MSG_RECURSIVE_PEREFERENCE = 72 , MSG_IMPROPER_DECLARATION_NESTING = 73 , MSG_IMPROPER_GROUP_NESTING = 74 , MSG_ID_INVALID = 75 , MSG_ID_NOT_UNIQUE = 76 , MSG_IDREF_INVALID = 77 , MSG_NMTOKEN_INVALID = 78 , MSG_ENTITY_INVALID = 79 , MSG_ENTITIES_INVALID = 80 , MSG_ELEMENT_WITH_ID_REQUIRED = 81 , MSG_ATTRIBUTE_NOT_DECLARED = 82 , MSG_ELEMENT_NOT_DECLARED = 83 , MSG_AVAILABLE1 = 84 , MSG_DUPLICATE_ATTDEF = 85 , MSG_MORE_THAN_ONE_ID_ATTRIBUTE = 86 , MSG_CONTENT_INVALID = 87 , MSG_CONTENT_INCOMPLETE = 88 , MSG_ELEMENT_ALREADY_DECLARED = 89 , MSG_ATTRIBUTE_VALUE_NOT_IN_LIST = 90 , MSG_AVAILABLE2 = 91 , MSG_UNDECLARED_ELEMENT_IN_CONTENTSPEC = 92 , MSG_FIXED_ATTVALUE_INVALID = 93 , MSG_REQUIRED_ATTRIBUTE_NOT_SPECIFIED = 94 , MSG_DEFAULTED_ATTRIBUTE_NOT_SPECIFIED = 95 , MSG_AVAILABLE3 = 96 , MSG_AVAILABLE4 = 97 , MSG_CLOSE_PAREN_REQUIRED_IN_CHILDREN = 98 , MSG_AVAILABLE5 = 99 , MSG_SYSTEMID_UNTERMINATED = 100 , MSG_PUBLICID_UNTERMINATED = 101 , MSG_EXTERNAL_ENTITY_NOT_PERMITTED = 102 , MSG_AVAILABLE6 = 103 , MSG_XMLDECL_MUST_BE_FIRST = 104 , MSG_TEXTDECL_MUST_BE_FIRST = 105 , MSG_ELEMENTDECL_UNTERMINATED = 106 , MSG_SPACE_REQUIRED_BEFORE_ENTITY_NAME_IN_PEDECL = 107 , MSG_SPACE_REQUIRED_BEFORE_ENTITY_NAME_IN_ENTITYDECL = 108 , MSG_SPACE_REQUIRED_BEFORE_PERCENT_IN_PEDECL = 109 , MSG_ENTITY_NAME_REQUIRED_IN_ENTITYDECL = 110 , MSG_SPACE_REQUIRED_AFTER_ENTITY_NAME_IN_ENTITYDECL = 111 , MSG_ENTITYDECL_UNTERMINATED = 112 , MSG_NOTATION_NAME_REQUIRED_FOR_UNPARSED_ENTITYDECL = 113 , MSG_NOTATION_NOT_DECLARED_FOR_UNPARSED_ENTITYDECL = 114 , MSG_NAME_REQUIRED_IN_NOTATIONTYPE = 115 , MSG_NMTOKEN_REQUIRED_IN_ENUMERATION = 116 , MSG_NOTATION_NOT_DECLARED_FOR_NOTATIONTYPE_ATTRIBUTE = 117 , MSG_NOTATIONTYPE_UNTERMINATED = 118 , MSG_ENUMERATION_UNTERMINATED = 119 , MSG_NOTATION_NAME_REQUIRED_IN_NOTATIONDECL = 120 , MSG_MORE_THAN_ONE_NOTATION_ATTRIBUTE = 121 , MSG_NOTATIONDECL_UNTERMINATED = 122 , MSG_ATTVALUE_CHANGED_DURING_NORMALIZATION_WHEN_STANDALONE = 123 , MSG_CDEND_IN_CONTENT = 124 , MSG_ELEMENT_TYPE_REQUIRED_IN_ATTLISTDECL = 125 , MSG_TWO_COLONS_IN_QNAME = 126 , MSG_MARKUP_NOT_RECOGNIZED_IN_CONTENT = 127 , MSG_MARKUP_NOT_RECOGNIZED_IN_MISC = 128 , MSG_MARKUP_NOT_RECOGNIZED_IN_PROLOG = 129 , MSG_OPEN_PAREN_REQUIRED_IN_NOTATIONTYPE = 130 , MSG_PITARGET_REQUIRED = 131 , MSG_REFERENCE_TO_EXTERNALLY_DECLARED_ENTITY_WHEN_STANDALONE = 132 , MSG_URI_FRAGMENT_IN_SYSTEMID = 133 , MSG_ROOT_ELEMENT_REQUIRED = 134 , MSG_SPACE_REQUIRED_AFTER_FIXED_IN_DEFAULTDECL = 135 , MSG_SPACE_REQUIRED_AFTER_NOTATION_IN_NOTATIONTYPE = 136 , MSG_SPACE_REQUIRED_AFTER_NOTATION_NAME_IN_NOTATIONDECL = 137 , MSG_SPACE_REQUIRED_BEFORE_ATTRIBUTE_NAME_IN_ATTDEF = 138 , MSG_SPACE_REQUIRED_BEFORE_ATTTYPE_IN_ATTDEF = 139 , MSG_SPACE_REQUIRED_BEFORE_DEFAULTDECL_IN_ATTDEF = 140 , MSG_SPACE_REQUIRED_BEFORE_ELEMENT_TYPE_IN_ATTLISTDECL = 141 , MSG_SPACE_REQUIRED_BEFORE_NOTATION_NAME_IN_NOTATIONDECL = 142 , MSG_WHITE_SPACE_IN_ELEMENT_CONTENT_WHEN_STANDALONE = 143 , MSG_XML_SPACE_DECLARATION_ILLEGAL = 144 , MSG_CLOSE_PAREN_REQUIRED_IN_MIXED = 145 , MSG_CONTENTSPEC_REQUIRED_IN_ELEMENTDECL = 146 , MSG_DOCTYPEDECL_UNTERMINATED = 147 , MSG_ELEMENT_TYPE_REQUIRED_IN_ELEMENTDECL = 148 , MSG_ELEMENT_TYPE_REQUIRED_IN_MIXED_CONTENT = 149 , MSG_MARKUP_NOT_RECOGNIZED_IN_DTD = 150 , MSG_ATTRIBUTE_VALUE_UNTERMINATED = 151 , MSG_OPEN_PAREN_OR_ELEMENT_TYPE_REQUIRED_IN_CHILDREN = 152 , MSG_ROOT_ELEMENT_TYPE_REQUIRED = 153 , MSG_SPACE_REQUIRED_AFTER_PUBIDLITERAL_IN_EXTERNALID = 154 , MSG_SPACE_REQUIRED_BEFORE_CONTENTSPEC_IN_ELEMENTDECL = 155 , MSG_SPACE_REQUIRED_BEFORE_ELEMENT_TYPE_IN_ELEMENTDECL = 156 , MSG_SPACE_REQUIRED_BEFORE_NOTATION_NAME_IN_UNPARSED_ENTITYDECL = 157 , MSG_SPACE_REQUIRED_BEFORE_PUBIDLITERAL_IN_EXTERNALID = 158 , MSG_SPACE_REQUIRED_BEFORE_ROOT_ELEMENT_TYPE_IN_DOCTYPEDECL = 159 , MSG_SPACE_REQUIRED_BEFORE_SYSTEMLITERAL_IN_EXTERNALID = 160 , MSG_REFERENCE_NOT_IN_ONE_ENTITY = 161 , MSG_COMMENT_NOT_IN_ONE_ENTITY = 162 , MSG_COMMENT_UNTERMINATED = 163 , MSG_PI_UNTERMINATED = 164 , MSG_PI_NOT_IN_ONE_ENTITY = 165 , MSG_REFERENCE_UNTERMINATED = 166 , MSG_PREFIX_DECLARED = 167 , MSG_ATT_DEFAULT_INVALID = 168 , MSG_GENERIC_SCHEMA_ERROR = 169 , MSG_MAX_CODE = 200 ; private static final String [ ] fgMessageKeys = { "BadMajorCode" , "FormatFailed" , "LessthanInAttValue" , "RootElementTypeMustMatchDoctypedecl" , "IDREFSInvalid" , "NMTOKENSInvalid" , "ReservedPITarget" , "SpaceRequiredInPI" , "InvalidCharInPI" , "DashDashInComment" , "InvalidCharInComment" , "InvalidCharRef" , "InvalidCharInAttValue" , "QuoteRequiredInAttValue" , "NameRequiredInReference" , "SemicolonRequiredInReference" , "DigitRequiredInCharRef" , "HexdigitRequiredInCharRef" , "SemicolonRequiredInCharRef" , "QuoteRequiredInSystemID" , "InvalidCharInSystemID" , "QuoteRequiredInPublicID" , "InvalidCharInPublicID" , "IncludeSectUnterminated" , "IgnoreSectUnterminated" , "InvalidCharInIgnoreSect" , "ElementUnterminated" , "EqRequiredInAttribute" , "AttributeNotUnique" , "EncodingDeclRequired" , "VersionInfoRequired" , "EqRequiredInXMLDecl" , "EqRequiredInTextDecl" , "QuoteRequiredInXMLDecl" , "QuoteRequiredInTextDecl" , "InvalidCharInXMLDecl" , "InvalidCharInTextDecl" , "VersionInfoInvalid" , "VersionNotSupported" , "SpaceRequiredInTextDecl" , "EncodingDeclInvalid" , "SDDeclInvalid" , "XMLDeclUnterminated" , "TextDeclUnterminated" , "InvalidCharInInternalSubset" , "InvalidCharInExternalSubset" , "InvalidCharInEntityValue" , "MixedContentUnterminated" , "NameRequiredInPEReference" , "SemicolonRequiredInPEReference" , "ExternalIDRequired" , "PEReferenceWithinMarkup" , "InvalidCharInProlog" , "InvalidCharInMisc" , "InvalidCharInCDSect" , "InvalidCharInContent" , "ETagRequired" , "ETagUnterminated" , "AttNameRequiredInAttDef" , "AttTypeRequiredInAttDef" , "PubidCharIllegal" , "EncodingNotSupported" , "EntityNotDeclared" , "ReferenceToUnparsedEntity" , "ReferenceToExternalEntity" , "XMLLangInvalid" , "CDSectUnterminated" , "DuplicateTypeInMixedContent" , "ElementEntityMismatch" , "IDDefaultTypeInvalid" , "EncodingRequired" , "RecursiveReference" , "RecursivePEReference" , "ImproperDeclarationNesting" , "ImproperGroupNesting" , "IDInvalid" , "IDNotUnique" , "IDREFInvalid" , "NMTOKENInvalid" , "ENTITYInvalid" , "ENTITIESInvalid" , "MSG_ELEMENT_WITH_ID_REQUIRED" , "MSG_ATTRIBUTE_NOT_DECLARED" , "MSG_ELEMENT_NOT_DECLARED" , "MSG_AVAILABLE1" , "MSG_DUPLICATE_ATTDEF" , "MSG_MORE_THAN_ONE_ID_ATTRIBUTE" , "MSG_CONTENT_INVALID" , "MSG_CONTENT_INCOMPLETE" , "MSG_ELEMENT_ALREADY_DECLARED" , "MSG_ATTRIBUTE_VALUE_NOT_IN_LIST" , "MSG_AVAILABLE2" , "UndeclaredElementInContentSpec" , "MSG_FIXED_ATTVALUE_INVALID" , "MSG_REQUIRED_ATTRIBUTE_NOT_SPECIFIED" , "MSG_DEFAULTED_ATTRIBUTE_NOT_SPECIFIED" , "MSG_AVAILABLE3" , "MSG_AVAILABLE4" , "MSG_CLOSE_PAREN_REQUIRED_IN_CHILDREN" , "MSG_AVAILABLE5" , "SystemIDUnterminated" , "PublicIDUnterminated" , "MSG_EXTERNAL_ENTITY_NOT_PERMITTED" , "MSG_AVAILABLE6" , "XMLDeclMustBeFirst" , "TextDeclMustBeFirst" , "ElementDeclUnterminated" , "MSG_SPACE_REQUIRED_BEFORE_ENTITY_NAME_IN_PEDECL" , "MSG_SPACE_REQUIRED_BEFORE_ENTITY_NAME_IN_ENTITYDECL" , "MSG_SPACE_REQUIRED_BEFORE_PERCENT_IN_PEDECL" , "MSG_ENTITY_NAME_REQUIRED_IN_ENTITYDECL" , "MSG_SPACE_REQUIRED_AFTER_ENTITY_NAME_IN_ENTITYDECL" , "EntityDeclUnterminated" , "MSG_NOTATION_NAME_REQUIRED_FOR_UNPARSED_ENTITYDECL" , "MSG_NOTATION_NOT_DECLARED_FOR_UNPARSED_ENTITYDECL" , "MSG_NAME_REQUIRED_IN_NOTATIONTYPE" , "MSG_NMTOKEN_REQUIRED_IN_ENUMERATION" , "MSG_NOTATION_NOT_DECLARED_FOR_NOTATIONTYPE_ATTRIBUTE" , "NotationTypeUnterminated" , "EnumerationUnterminated" , "MSG_NOTATION_NAME_REQUIRED_IN_NOTATIONDECL" , "MSG_MORE_THAN_ONE_NOTATION_ATTRIBUTE" , "NotationDeclUnterminated" , "MSG_ATTVALUE_CHANGED_DURING_NORMALIZATION_WHEN_STANDALONE" , "CDEndInContent" , "MSG_ELEMENT_TYPE_REQUIRED_IN_ATTLISTDECL" , "TwoColonsInQName" , "MarkupNotRecognizedInContent" , "MarkupNotRecognizedInMisc" , "MarkupNotRecognizedInProlog" , "MSG_OPEN_PAREN_REQUIRED_IN_NOTATIONTYPE" , "PITargetRequired" , "MSG_REFERENCE_TO_EXTERNALLY_DECLARED_ENTITY_WHEN_STANDALONE" , "MSG_URI_FRAGMENT_IN_SYSTEMID" , "RootElementRequired" , "MSG_SPACE_REQUIRED_AFTER_FIXED_IN_DEFAULTDECL" , "MSG_SPACE_REQUIRED_AFTER_NOTATION_IN_NOTATIONTYPE" , "MSG_SPACE_REQUIRED_AFTER_NOTATION_NAME_IN_NOTATIONDECL" , "MSG_SPACE_REQUIRED_BEFORE_ATTRIBUTE_NAME_IN_ATTDEF" , "MSG_SPACE_REQUIRED_BEFORE_ATTTYPE_IN_ATTDEF" , "MSG_SPACE_REQUIRED_BEFORE_DEFAULTDECL_IN_ATTDEF" , "MSG_SPACE_REQUIRED_BEFORE_ELEMENT_TYPE_IN_ATTLISTDECL" , "MSG_SPACE_REQUIRED_BEFORE_NOTATION_NAME_IN_NOTATIONDECL" , "MSG_WHITE_SPACE_IN_ELEMENT_CONTENT_WHEN_STANDALONE" , "MSG_XML_SPACE_DECLARATION_ILLEGAL" , "MSG_CLOSE_PAREN_REQUIRED_IN_MIXED" , "MSG_CONTENTSPEC_REQUIRED_IN_ELEMENTDECL" , "DoctypedeclUnterminated" , "MSG_ELEMENT_TYPE_REQUIRED_IN_ELEMENTDECL" , "MSG_ELEMENT_TYPE_REQUIRED_IN_MIXED_CONTENT" , "MSG_MARKUP_NOT_RECOGNIZED_IN_DTD" , "AttributeValueUnterminated" , "MSG_OPEN_PAREN_OR_ELEMENT_TYPE_REQUIRED_IN_CHILDREN" , "MSG_ROOT_ELEMENT_TYPE_REQUIRED" , "MSG_SPACE_REQUIRED_AFTER_PUBIDLITERAL_IN_EXTERNALID" , "MSG_SPACE_REQUIRED_BEFORE_CONTENTSPEC_IN_ELEMENTDECL" , "MSG_SPACE_REQUIRED_BEFORE_ELEMENT_TYPE_IN_ELEMENTDECL" , "MSG_SPACE_REQUIRED_BEFORE_NOTATION_NAME_IN_UNPARSED_ENTITYDECL" , "MSG_SPACE_REQUIRED_BEFORE_PUBIDLITERAL_IN_EXTERNALID" , "MSG_SPACE_REQUIRED_BEFORE_ROOT_ELEMENT_TYPE_IN_DOCTYPEDECL" , "MSG_SPACE_REQUIRED_BEFORE_SYSTEMLITERAL_IN_EXTERNALID" , "ReferenceNotInOneEntity" , "CommentNotInOneEntity" , "CommentUnterminated" , "PIUnterminated" , "PINotInOneEntity" , "ReferenceUnterminated" , "PrefixDeclared" , "MSG_ATT_DEFAULT_INVALID" , "MSG_GENERIC_SCHEMA_ERROR" , "" } ; public static final int VC_ROOT_ELEMENT_TYPE = 1 , VC_IDREF = 2 , VC_NAME_TOKEN = 3 , P17_RESERVED_PITARGET = 4 , P16_WHITESPACE_REQUIRED = 5 , P16_INVALID_CHARACTER = 6 , P15_DASH_DASH = 7 , P15_INVALID_CHARACTER = 8 , WFC_LEGAL_CHARACTER = 9 , P10_INVALID_CHARACTER = 10 , WFC_NO_LESSTHAN_IN_ATTVALUE = 11 , P10_QUOTE_REQUIRED = 12 , P68_NAME_REQUIRED = 13 , P68_SEMICOLON_REQUIRED = 14 , P66_DIGIT_REQUIRED = 15 , P66_HEXDIGIT_REQUIRED = 16 , P66_SEMICOLON_REQUIRED = 17 , P11_QUOTE_REQUIRED = 18 , P11_INVALID_CHARACTER = 19 , P12_QUOTE_REQUIRED = 20 , P12_INVALID_CHARACTER = 21 , P62_UNTERMINATED = 22 , P63_UNTERMINATED = 23 , P65_INVALID_CHARACTER = 24 , P40_UNTERMINATED = 25 , P41_EQ_REQUIRED = 26 , WFC_UNIQUE_ATT_SPEC = 27 , P77_ENCODINGDECL_REQUIRED = 28 , P23_VERSIONINFO_REQUIRED = 29 , P24_EQ_REQUIRED = 30 , P32_EQ_REQUIRED = 31 , P80_EQ_REQUIRED = 32 , P24_QUOTE_REQUIRED = 33 , P32_QUOTE_REQUIRED = 34 , P80_QUOTE_REQUIRED = 35 , P26_INVALID_CHARACTER = 36 , P32_INVALID_CHARACTER = 37 , P81_INVALID_CHARACTER = 38 , P26_INVALID_VALUE = 39 , P26_NOT_SUPPORTED = 40 , P80_WHITESPACE_REQUIRED = 41 , P81_INVALID_VALUE = 42 , P32_INVALID_VALUE = 43 , P23_UNTERMINATED = 44 , P77_UNTERMINATED = 45 , P28_INVALID_CHARACTER = 46 , P30_INVALID_CHARACTER = 47 , P9_INVALID_CHARACTER = 48 , P51_UNTERMINATED = 49 , P69_NAME_REQUIRED = 50 , P69_SEMICOLON_REQUIRED = 51 , P75_INVALID = 52 , WFC_PES_IN_INTERNAL_SUBSET = 53 , P22_INVALID_CHARACTER = 54 , P27_INVALID_CHARACTER = 55 , P20_INVALID_CHARACTER = 56 , P43_INVALID_CHARACTER = 57 , P39_UNTERMINATED = 58 , P42_UNTERMINATED = 59 , P81_NOT_SUPPORTED = 60 , WFC_ENTITY_DECLARED = 61 , VC_ENTITY_DECLARED = 62 , WFC_PARSED_ENTITY = 63 , WFC_NO_EXTERNAL_ENTITY_REFERENCES = 64 , P33_INVALID = 65 , P18_UNTERMINATED = 66 , VC_NO_DUPLICATE_TYPES = 67 , P78_NOT_WELLFORMED = 68 , VC_ID_ATTRIBUTE_DEFAULT = 69 , P53_NAME_REQUIRED = 70 , P53_ATTTYPE_REQUIRED = 71 , P81_REQUIRED = 72 , WFC_NO_RECURSION = 73 , VC_PROPER_DECLARATION_PE_NESTING = 74 , VC_PROPER_GROUP_PE_NESTING = 75 , VC_ID = 76 , VC_ENTITY_NAME = 77 , VC_ATTRIBUTE_VALUE_TYPE = 78 , VC_ELEMENT_VALID = 79 , VC_STANDALONE_DOCUMENT_DECLARATION = 80 , VC_ONE_ID_PER_ELEMENT_TYPE = 81 , VC_UNIQUE_ELEMENT_TYPE_DECLARATION = 82 , P45_UNDECLARED_ELEMENT_IN_CONTENTSPEC = 83 , VC_NOTATION_ATTRIBUTES = 84 , P53_DUPLICATE = 85 , VC_ENUMERATION = 86 , VC_FIXED_ATTRIBUTE_DEFAULT = 87 , VC_REQUIRED_ATTRIBUTE = 88 , VC_NOTATION_DECLARED = 89 , P58_NAME_REQUIRED = 90 , P58_UNTERMINATED = 91 , P59_NMTOKEN_REQUIRED = 92 , P59_UNTERMINATED = 93 , P70_SPACE = 94 , P70_REQUIRED_NAME = 95 , P70_REQUIRED_SPACE = 96 , P71_UNTERMINATED = 97 , P72_SPACE = 98 , P72_UNTERMINATED = 99 , P76_REQUIRED = 100 , P82_NAME_REQUIRED = 101 , P82_SPACE_REQUIRED = 102 , P82_UNTERMINATED = 103 , P14_INVALID = 104 , P16_PITARGET_REQUIRED = 105 , P16_REQUIRED = 106 , P1_ELEMENT_REQUIRED = 107 , P22_NOT_RECOGNIZED = 108 , P27_NOT_RECOGNIZED = 109 , P43_NOT_RECOGNIZED = 110 , P52_ELEMENT_TYPE_REQUIRED = 111 , P52_SPACE_REQUIRED = 112 , P53_SPACE_REQUIRED = 113 , P58_OPEN_PAREN_REQUIRED = 114 , P58_SPACE_REQUIRED = 115 , P60_SPACE_REQUIRED = 116 , S2_10_DECLARATION_ILLEGAL = 117 , P39_ELEMENT_TYPE_REQUIRED = 118 , P28_ROOT_ELEMENT_TYPE_REQUIRED = 119 , P28_SPACE_REQUIRED = 120 , P28_UNTERMINATED = 121 , P29_NOT_RECOGNIZED = 122 , P45_CONTENTSPEC_REQUIRED = 123 , P45_ELEMENT_TYPE_REQUIRED = 124 , P45_SPACE_REQUIRED = 125 , P45_UNTERMINATED = 126 , P47_CLOSE_PAREN_REQUIRED = 127 , P47_OPEN_PAREN_OR_ELEMENT_TYPE_REQUIRED = 128 , P51_CLOSE_PAREN_REQUIRED = 129 , P51_ELEMENT_TYPE_REQUIRED = 130 , P75_SPACE_REQUIRED = 131 , P76_SPACE_REQUIRED = 132 , P15_UNTERMINATED = 133 , P16_UNTERMINATED = 134 , P67_UNTERMINATED = 135 , P10_UNTERMINATED = 136 , P22_XMLDECL_MUST_BE_FIRST = 137 , P30_TEXTDECL_MUST_BE_FIRST = 138 , P5_INVALID_CHARACTER = 139 , P11_UNTERMINATED = 140 , P12_UNTERMINATED = 141 , P11_URI_FRAGMENT = 142 , VC_ONE_NOTATION_PER_ELEMENT_TYPE = 143 , NC_PREFIX_DECLARED = 144 , VC_ATTRIBUTE_DEFAULT_LEGAL = 145 , SCHEMA_GENERIC_ERROR = 146 , CONSTRAINT_MAX_CODE = 200 ; } 	1	['5', '1', '0', '2', '14', '0', '1', '1', '4', '1.24380805', '1114', '0.009287926', '0', '0', '0.5', '0', '0', '157.2', '9', '2.2', '1']
package org . apache . wml ; public interface WMLPrevElement extends WMLElement { } 	0	['0', '1', '0', '2', '0', '0', '1', '1', '0', '2', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0']
package org . apache . xerces . dom ; import org . w3c . dom . * ; import org . apache . xerces . utils . StringPool ; public final class DeferredAttrNSImpl extends AttrNSImpl implements DeferredNode { static final long serialVersionUID = 6074924934945957154L ; protected transient int fNodeIndex ; DeferredAttrNSImpl ( DeferredDocumentImpl ownerDocument , int nodeIndex ) { super ( ownerDocument , null ) ; fNodeIndex = nodeIndex ; needsSyncData ( true ) ; needsSyncChildren ( true ) ; } public int getNodeIndex ( ) { return fNodeIndex ; } protected void synchronizeData ( ) { needsSyncData ( false ) ; DeferredDocumentImpl ownerDocument = ( DeferredDocumentImpl ) ownerDocument ( ) ; int attrQName = ownerDocument . getNodeName ( fNodeIndex ) ; StringPool pool = ownerDocument . getStringPool ( ) ; name = pool . toString ( attrQName ) ; int index = name . indexOf ( ':' ) ; String prefix ; if ( index < 0 ) { prefix = null ; localName = name ; } else { prefix = name . substring ( 0 , index ) ; localName = name . substring ( index + 1 ) ; } isSpecified ( ownerDocument . getNodeValue ( fNodeIndex ) == 1 ) ; namespaceURI = pool . toString ( ownerDocument . getNodeURI ( fNodeIndex ) ) ; if ( namespaceURI == null ) { if ( prefix != null ) { if ( prefix . equals ( "xmlns" ) ) { namespaceURI = "http://www.w3.org/2000/xmlns/" ; } } else if ( name . equals ( "xmlns" ) ) { namespaceURI = "http://www.w3.org/2000/xmlns/" ; } } } protected void synchronizeChildren ( ) { synchronizeChildren ( fNodeIndex ) ; } } 	1	['4', '4', '0', '5', '19', '0', '1', '5', '1', '0.666666667', '117', '0.5', '0', '0.955223881', '0.5', '4', '9', '27.75', '7', '2.25', '3']
package org . w3c . dom . html ; public interface HTMLUListElement extends HTMLElement { public boolean getCompact ( ) ; public void setCompact ( boolean compact ) ; public String getType ( ) ; public void setType ( String type ) ; } 	0	['4', '1', '0', '0', '4', '6', '0', '0', '4', '2', '4', '0', '0', '0', '0.5', '0', '0', '0', '1', '1', '0']
package org . apache . xerces . validators . datatype ; import java . util . Hashtable ; import java . util . Locale ; import java . util . StringTokenizer ; import org . apache . xerces . readers . DefaultEntityHandler ; import org . apache . xerces . utils . XMLMessages ; import org . apache . xerces . utils . StringPool ; import org . apache . xerces . validators . datatype . StateMessageDatatype ; public class ENTITYDatatypeValidator extends AbstractDatatypeValidator { private DatatypeValidator fBaseValidator = null ; private DefaultEntityHandler fEntityHandler = null ; private StringPool fStringPool = null ; public static final int ENTITY_INITIALIZE = 0 ; public ENTITYDatatypeValidator ( ) throws InvalidDatatypeFacetException { this ( null , null , false ) ; } public ENTITYDatatypeValidator ( DatatypeValidator base , Hashtable facets , boolean derivedByList ) throws InvalidDatatypeFacetException { setBasetype ( base ) ; } public Object validate ( String content , Object state ) throws InvalidDatatypeValueException { StateMessageDatatype message = ( StateMessageDatatype ) state ; int attValueHandle ; if ( message != null && message . getDatatypeState ( ) == ENTITYDatatypeValidator . ENTITY_INITIALIZE ) { Object [ ] unpackMessage = ( Object [ ] ) message . getDatatypeObject ( ) ; this . fEntityHandler = ( DefaultEntityHandler ) unpackMessage [ 0 ] ; this . fStringPool = ( StringPool ) unpackMessage [ 1 ] ; } else { if ( this . fEntityHandler == null ) { InvalidDatatypeValueException error = new InvalidDatatypeValueException ( "ERROR: ENTITYDatatype Validator: Failed Initialization DefaultEntityHandler is null" ) ; throw error ; } if ( this . fStringPool == null ) { InvalidDatatypeValueException error = new InvalidDatatypeValueException ( "ERROR: ENTITYDatatype Validator: Failed Initialization StrinPool is null" ) ; throw error ; } attValueHandle = this . fStringPool . addSymbol ( content ) ; if ( ! this . fEntityHandler . isUnparsedEntity ( attValueHandle ) ) { InvalidDatatypeValueException error = new InvalidDatatypeValueException ( "ENTITY '" + content + "' is not valid" ) ; error . setMinorCode ( XMLMessages . MSG_ENTITY_INVALID ) ; error . setMajorCode ( XMLMessages . VC_ENTITY_NAME ) ; throw error ; } } return null ; } public int compare ( String content1 , String content2 ) { return - 1 ; } public Hashtable getFacets ( ) { return null ; } public Object clone ( ) throws CloneNotSupportedException { throw new CloneNotSupportedException ( "clone() is not supported in " + this . getClass ( ) . getName ( ) ) ; } private void setBasetype ( DatatypeValidator base ) { fBaseValidator = base ; } } 	1	['7', '2', '0', '8', '21', '17', '1', '7', '6', '0.791666667', '134', '0.75', '3', '0.444444444', '0.333333333', '0', '0', '17.57142857', '1', '0.7143', '1']
package org . apache . html . dom ; import org . w3c . dom . * ; import org . w3c . dom . html . * ; public class HTMLDListElementImpl extends HTMLElementImpl implements HTMLDListElement { public boolean getCompact ( ) { return getBinary ( "compact" ) ; } public void setCompact ( boolean compact ) { setAttribute ( "compact" , compact ) ; } public HTMLDListElementImpl ( HTMLDocumentImpl owner , String name ) { super ( owner , name ) ; } } 	0	['3', '4', '0', '2', '6', '3', '0', '2', '3', '2', '17', '0', '0', '0.979166667', '0.5', '0', '0', '4.666666667', '1', '0.6667', '0']
package org . apache . xerces . validators . schema . identity ; public abstract class IdentityConstraint { public static final short UNIQUE = 0 ; public static final short KEY = 1 ; public static final short KEYREF = 2 ; protected String fElementName ; protected Selector fSelector ; protected int fFieldCount ; protected Field [ ] fFields ; protected IdentityConstraint ( String elementName ) { fElementName = elementName ; } public abstract short getType ( ) ; public String getElementName ( ) { return fElementName ; } public void setSelector ( Selector selector ) { fSelector = selector ; } public Selector getSelector ( ) { return fSelector ; } public void addField ( Field field ) { try { fFields [ fFieldCount ] = null ; } catch ( NullPointerException e ) { fFields = new Field [ 4 ] ; } catch ( ArrayIndexOutOfBoundsException e ) { Field [ ] newfields = new Field [ fFields . length * 2 ] ; System . arraycopy ( fFields , 0 , newfields , 0 , fFields . length ) ; fFields = newfields ; } fFields [ fFieldCount ++ ] = field ; } public int getFieldCount ( ) { return fFieldCount ; } public Field getFieldAt ( int index ) { return fFields [ index ] ; } public String toString ( ) { String s = super . toString ( ) ; int index1 = s . lastIndexOf ( '$' ) ; if ( index1 != - 1 ) { return s . substring ( index1 + 1 ) ; } int index2 = s . lastIndexOf ( '.' ) ; if ( index2 != - 1 ) { return s . substring ( index2 + 1 ) ; } return s ; } } 	1	['9', '1', '3', '14', '14', '28', '14', '2', '8', '0.982142857', '116', '0.571428571', '2', '0', '0.288888889', '0', '0', '11.11111111', '3', '1.1111', '1']
package org . apache . xerces . dom ; import org . w3c . dom . * ; public class DocumentTypeImpl extends ParentNode implements DocumentType { static final long serialVersionUID = 7751299192316526485L ; protected String name ; protected NamedNodeMapImpl entities ; protected NamedNodeMapImpl notations ; protected NamedNodeMapImpl elements ; protected String publicID ; protected String systemID ; protected String internalSubset ; public DocumentTypeImpl ( DocumentImpl ownerDocument , String name ) { super ( ownerDocument ) ; this . name = name ; entities = new NamedNodeMapImpl ( this ) ; notations = new NamedNodeMapImpl ( this ) ; elements = new NamedNodeMapImpl ( this ) ; } public DocumentTypeImpl ( DocumentImpl ownerDocument , String qualifiedName , String publicID , String systemID ) { this ( ownerDocument , qualifiedName ) ; this . publicID = publicID ; this . systemID = systemID ; } public String getPublicId ( ) { if ( needsSyncData ( ) ) { synchronizeData ( ) ; } return publicID ; } public String getSystemId ( ) { if ( needsSyncData ( ) ) { synchronizeData ( ) ; } return systemID ; } public void setInternalSubset ( String internalSubset ) { if ( needsSyncData ( ) ) { synchronizeData ( ) ; } this . internalSubset = internalSubset ; } public String getInternalSubset ( ) { if ( needsSyncData ( ) ) { synchronizeData ( ) ; } return internalSubset ; } public short getNodeType ( ) { return Node . DOCUMENT_TYPE_NODE ; } public String getNodeName ( ) { if ( needsSyncData ( ) ) { synchronizeData ( ) ; } return name ; } public Node cloneNode ( boolean deep ) { DocumentTypeImpl newnode = ( DocumentTypeImpl ) super . cloneNode ( deep ) ; newnode . entities = entities . cloneMap ( newnode ) ; newnode . notations = notations . cloneMap ( newnode ) ; newnode . elements = elements . cloneMap ( newnode ) ; return newnode ; } void setOwnerDocument ( DocumentImpl doc ) { super . setOwnerDocument ( doc ) ; entities . setOwnerDocument ( doc ) ; notations . setOwnerDocument ( doc ) ; elements . setOwnerDocument ( doc ) ; } public String getName ( ) { if ( needsSyncData ( ) ) { synchronizeData ( ) ; } return name ; } public NamedNodeMap getEntities ( ) { if ( needsSyncChildren ( ) ) { synchronizeChildren ( ) ; } return entities ; } public NamedNodeMap getNotations ( ) { if ( needsSyncChildren ( ) ) { synchronizeChildren ( ) ; } return notations ; } public void setReadOnly ( boolean readOnly , boolean deep ) { if ( needsSyncChildren ( ) ) { synchronizeChildren ( ) ; } super . setReadOnly ( readOnly , deep ) ; elements . setReadOnly ( readOnly , true ) ; entities . setReadOnly ( readOnly , true ) ; notations . setReadOnly ( readOnly , true ) ; } public NamedNodeMap getElements ( ) { if ( needsSyncChildren ( ) ) { synchronizeChildren ( ) ; } return elements ; } } 	0	['15', '4', '1', '9', '27', '57', '6', '4', '14', '0.821428571', '200', '0.875', '3', '0.858695652', '0.383333333', '2', '8', '11.8', '2', '1.5333', '0']
package org . apache . xerces . dom ; import org . apache . xerces . utils . StringPool ; import org . w3c . dom . * ; public class DeferredEntityImpl extends EntityImpl implements DeferredNode { static final long serialVersionUID = 4760180431078941638L ; protected transient int fNodeIndex ; DeferredEntityImpl ( DeferredDocumentImpl ownerDocument , int nodeIndex ) { super ( ownerDocument , null ) ; fNodeIndex = nodeIndex ; needsSyncData ( true ) ; needsSyncChildren ( true ) ; } public int getNodeIndex ( ) { return fNodeIndex ; } protected void synchronizeData ( ) { needsSyncData ( false ) ; DeferredDocumentImpl ownerDocument = ( DeferredDocumentImpl ) this . ownerDocument ; name = ownerDocument . getNodeNameString ( fNodeIndex ) ; StringPool pool = ownerDocument . getStringPool ( ) ; int extraDataIndex = ownerDocument . getNodeValue ( fNodeIndex ) ; ownerDocument . getNodeType ( extraDataIndex ) ; publicId = pool . toString ( ownerDocument . getNodeName ( extraDataIndex ) ) ; systemId = pool . toString ( ownerDocument . getNodeValue ( extraDataIndex ) ) ; notationName = pool . toString ( ownerDocument . getLastChild ( extraDataIndex ) ) ; } protected void synchronizeChildren ( ) { needsSyncChildren ( false ) ; isReadOnly ( false ) ; synchronizeChildren ( fNodeIndex ) ; setReadOnly ( true , true ) ; } } 	1	['4', '3', '0', '5', '17', '0', '1', '5', '1', '0.666666667', '85', '0.5', '0', '0.946428571', '0.5', '2', '7', '19.75', '1', '0.75', '4']
package org . apache . xerces . validators . schema . identity ; public class Unique extends IdentityConstraint { public Unique ( String elementName ) { super ( elementName ) ; } public short getType ( ) { return UNIQUE ; } } 	0	['2', '2', '0', '4', '3', '1', '3', '1', '2', '2', '8', '0', '0', '0.888888889', '0.75', '0', '0', '3', '1', '0.5', '0']
package org . xml . sax . helpers ; import org . xml . sax . Attributes ; public class AttributesImpl implements Attributes { public AttributesImpl ( ) { length = 0 ; data = null ; } public AttributesImpl ( Attributes atts ) { setAttributes ( atts ) ; } public int getLength ( ) { return length ; } public String getURI ( int index ) { if ( index >= 0 && index < length ) { return data [ index * 5 ] ; } else { return null ; } } public String getLocalName ( int index ) { if ( index >= 0 && index < length ) { return data [ index * 5 + 1 ] ; } else { return null ; } } public String getQName ( int index ) { if ( index >= 0 && index < length ) { return data [ index * 5 + 2 ] ; } else { return null ; } } public String getType ( int index ) { if ( index >= 0 && index < length ) { return data [ index * 5 + 3 ] ; } else { return null ; } } public String getValue ( int index ) { if ( index >= 0 && index < length ) { return data [ index * 5 + 4 ] ; } else { return null ; } } public int getIndex ( String uri , String localName ) { int max = length * 5 ; for ( int i = 0 ; i < max ; i += 5 ) { if ( data [ i ] . equals ( uri ) && data [ i + 1 ] . equals ( localName ) ) { return i / 5 ; } } return - 1 ; } public int getIndex ( String qName ) { int max = length * 5 ; for ( int i = 0 ; i < max ; i += 5 ) { if ( data [ i + 2 ] . equals ( qName ) ) { return i / 5 ; } } return - 1 ; } public String getType ( String uri , String localName ) { int max = length * 5 ; for ( int i = 0 ; i < max ; i += 5 ) { if ( data [ i ] . equals ( uri ) && data [ i + 1 ] . equals ( localName ) ) { return data [ i + 3 ] ; } } return null ; } public String getType ( String qName ) { int max = length * 5 ; for ( int i = 0 ; i < max ; i += 5 ) { if ( data [ i + 2 ] . equals ( qName ) ) { return data [ i + 3 ] ; } } return null ; } public String getValue ( String uri , String localName ) { int max = length * 5 ; for ( int i = 0 ; i < max ; i += 5 ) { if ( data [ i ] . equals ( uri ) && data [ i + 1 ] . equals ( localName ) ) { return data [ i + 4 ] ; } } return null ; } public String getValue ( String qName ) { int max = length * 5 ; for ( int i = 0 ; i < max ; i += 5 ) { if ( data [ i + 2 ] . equals ( qName ) ) { return data [ i + 4 ] ; } } return null ; } public void clear ( ) { length = 0 ; } public void setAttributes ( Attributes atts ) { clear ( ) ; length = atts . getLength ( ) ; data = new String [ length * 5 ] ; for ( int i = 0 ; i < length ; i ++ ) { data [ i * 5 ] = atts . getURI ( i ) ; data [ i * 5 + 1 ] = atts . getLocalName ( i ) ; data [ i * 5 + 2 ] = atts . getQName ( i ) ; data [ i * 5 + 3 ] = atts . getType ( i ) ; data [ i * 5 + 4 ] = atts . getValue ( i ) ; } } public void addAttribute ( String uri , String localName , String qName , String type , String value ) { ensureCapacity ( length + 1 ) ; data [ length * 5 ] = uri ; data [ length * 5 + 1 ] = localName ; data [ length * 5 + 2 ] = qName ; data [ length * 5 + 3 ] = type ; data [ length * 5 + 4 ] = value ; length ++ ; } public void setAttribute ( int index , String uri , String localName , String qName , String type , String value ) { if ( index >= 0 && index < length ) { data [ index * 5 ] = uri ; data [ index * 5 + 1 ] = localName ; data [ index * 5 + 2 ] = qName ; data [ index * 5 + 3 ] = type ; data [ index * 5 + 4 ] = value ; } else { badIndex ( index ) ; } } public void removeAttribute ( int index ) { if ( index >= 0 && index < length ) { data [ index ] = null ; if ( index < length - 1 ) { System . arraycopy ( data , ( index + 1 ) * 5 , data , index * 5 , ( length - index ) * 5 ) ; } length -- ; } else { badIndex ( index ) ; } } public void setURI ( int index , String uri ) { if ( index >= 0 && index < length ) { data [ index * 5 ] = uri ; } else { badIndex ( index ) ; } } public void setLocalName ( int index , String localName ) { if ( index >= 0 && index < length ) { data [ index * 5 + 1 ] = localName ; } else { badIndex ( index ) ; } } public void setQName ( int index , String qName ) { if ( index >= 0 && index < length ) { data [ index * 5 + 2 ] = qName ; } else { badIndex ( index ) ; } } public void setType ( int index , String type ) { if ( index >= 0 && index < length ) { data [ index * 5 + 3 ] = type ; } else { badIndex ( index ) ; } } public void setValue ( int index , String value ) { if ( index >= 0 && index < length ) { data [ index * 5 + 4 ] = value ; } else { badIndex ( index ) ; } } private void ensureCapacity ( int n ) { if ( n > 0 && data == null ) { data = new String [ 25 ] ; } int max = data . length ; if ( max >= n * 5 ) { return ; } while ( max < n * 5 ) { max *= 2 ; } String newData [ ] = new String [ max ] ; System . arraycopy ( data , 0 , newData , 0 , length * 5 ) ; data = newData ; } private void badIndex ( int index ) throws ArrayIndexOutOfBoundsException { String msg = "Attempt to modify attribute at illegal index: " + index ; throw new ArrayIndexOutOfBoundsException ( msg ) ; } int length ; String data [ ] ; } 	1	['26', '1', '0', '0', '40', '0', '0', '0', '24', '0.08', '723', '0', '0', '0', '0.528846154', '0', '0', '26.73076923', '5', '2.6538', '1']
package org . apache . html . dom ; import org . w3c . dom . * ; import org . w3c . dom . html . * ; public class HTMLMetaElementImpl extends HTMLElementImpl implements HTMLMetaElement { public String getContent ( ) { return getAttribute ( "content" ) ; } public void setContent ( String content ) { setAttribute ( "content" , content ) ; } public String getHttpEquiv ( ) { return getAttribute ( "http-equiv" ) ; } public void setHttpEquiv ( String httpEquiv ) { setAttribute ( "http-equiv" , httpEquiv ) ; } public String getName ( ) { return getAttribute ( "name" ) ; } public void setName ( String name ) { setAttribute ( "name" , name ) ; } public String getScheme ( ) { return getAttribute ( "scheme" ) ; } public void setScheme ( String scheme ) { setAttribute ( "scheme" , scheme ) ; } public HTMLMetaElementImpl ( HTMLDocumentImpl owner , String name ) { super ( owner , name ) ; } } 	0	['9', '4', '0', '2', '12', '36', '0', '2', '9', '2', '50', '0', '0', '0.921568627', '0.555555556', '0', '0', '4.555555556', '1', '0.8889', '0']
package org . apache . xerces . dom ; import org . w3c . dom . * ; public class DeferredElementDefinitionImpl extends ElementDefinitionImpl implements DeferredNode { static final long serialVersionUID = 6703238199538041591L ; protected transient int fNodeIndex ; DeferredElementDefinitionImpl ( DeferredDocumentImpl ownerDocument , int nodeIndex ) { super ( ownerDocument , null ) ; fNodeIndex = nodeIndex ; needsSyncData ( true ) ; needsSyncChildren ( true ) ; } public int getNodeIndex ( ) { return fNodeIndex ; } protected void synchronizeData ( ) { needsSyncData ( false ) ; DeferredDocumentImpl ownerDocument = ( DeferredDocumentImpl ) this . ownerDocument ; name = ownerDocument . getNodeNameString ( fNodeIndex ) ; } protected void synchronizeChildren ( ) { boolean orig = ownerDocument . mutationEvents ; ownerDocument . mutationEvents = false ; needsSyncChildren ( false ) ; DeferredDocumentImpl ownerDocument = ( DeferredDocumentImpl ) this . ownerDocument ; attributes = new NamedNodeMapImpl ( ownerDocument ) ; for ( int nodeIndex = ownerDocument . getLastChild ( fNodeIndex ) ; nodeIndex != - 1 ; nodeIndex = ownerDocument . getPrevSibling ( nodeIndex ) ) { Node attr = ownerDocument . getNodeObject ( nodeIndex ) ; attributes . setNamedItem ( attr ) ; } ownerDocument . mutationEvents = orig ; } } 	1	['4', '3', '0', '6', '13', '0', '1', '6', '1', '0.666666667', '84', '0.5', '0', '0.94', '0.5', '2', '7', '19.5', '2', '1', '2']
package org . apache . wml . dom ; import org . apache . wml . * ; public class WMLOptgroupElementImpl extends WMLElementImpl implements WMLOptgroupElement { public WMLOptgroupElementImpl ( WMLDocumentImpl owner , String tagName ) { super ( owner , tagName ) ; } public void setClassName ( String newValue ) { setAttribute ( "class" , newValue ) ; } public String getClassName ( ) { return getAttribute ( "class" ) ; } public void setXmlLang ( String newValue ) { setAttribute ( "xml:lang" , newValue ) ; } public String getXmlLang ( ) { return getAttribute ( "xml:lang" ) ; } public void setTitle ( String newValue ) { setAttribute ( "title" , newValue ) ; } public String getTitle ( ) { return getAttribute ( "title" ) ; } public void setId ( String newValue ) { setAttribute ( "id" , newValue ) ; } public String getId ( ) { return getAttribute ( "id" ) ; } } 	0	['9', '4', '0', '3', '12', '36', '0', '3', '9', '2', '50', '0', '0', '0.911111111', '0.555555556', '1', '6', '4.555555556', '1', '0.8889', '0']
package org . apache . xerces . dom ; import org . w3c . dom . * ; public class DeferredEntityReferenceImpl extends EntityReferenceImpl implements DeferredNode { static final long serialVersionUID = 390319091370032223L ; protected transient int fNodeIndex ; DeferredEntityReferenceImpl ( DeferredDocumentImpl ownerDocument , int nodeIndex ) { super ( ownerDocument , null ) ; fNodeIndex = nodeIndex ; needsSyncData ( true ) ; needsSyncChildren ( true ) ; } public int getNodeIndex ( ) { return fNodeIndex ; } protected void synchronizeData ( ) { needsSyncData ( false ) ; DeferredDocumentImpl ownerDocument = ( DeferredDocumentImpl ) this . ownerDocument ; name = ownerDocument . getNodeNameString ( fNodeIndex ) ; } protected void synchronizeChildren ( ) { needsSyncChildren ( false ) ; DocumentType doctype = ownerDocument . getDoctype ( ) ; boolean found = false ; if ( doctype != null ) { boolean orig = ownerDocument . mutationEvents ; ownerDocument . mutationEvents = false ; NamedNodeMap entities = doctype . getEntities ( ) ; if ( entities != null ) { Entity entity = ( Entity ) entities . getNamedItem ( getNodeName ( ) ) ; if ( entity != null ) { found = true ; boolean ro = isReadOnly ( ) ; isReadOnly ( false ) ; Node child = entity . getFirstChild ( ) ; while ( child != null ) { appendChild ( child . cloneNode ( true ) ) ; child = child . getNextSibling ( ) ; } if ( ro ) { setReadOnly ( true , true ) ; } } } ownerDocument ( ) . mutationEvents = orig ; } if ( ! found ) { isReadOnly ( false ) ; synchronizeChildren ( fNodeIndex ) ; setReadOnly ( true , true ) ; } } protected void synchronize ( ) { } } 	1	['5', '3', '0', '4', '22', '0', '1', '4', '1', '0.75', '118', '0.5', '0', '0.921568627', '0.466666667', '2', '8', '22.2', '7', '2', '2']
package org . apache . xml . serialize ; public final class Method { public static final String XML = "xml" ; public static final String HTML = "html" ; public static final String XHTML = "xhtml" ; public static final String TEXT = "text" ; public static final String FOP = "fop" ; } 	0	['1', '1', '0', '0', '2', '0', '0', '0', '1', '2', '9', '0', '0', '0', '1', '0', '0', '3', '0', '0', '0']
package org . apache . xerces . msg ; import java . util . ListResourceBundle ; public class XMLMessages extends ListResourceBundle { public static final Object CONTENTS [ ] [ ] = { { "BadMajorCode" , "The majorCode parameter to createMessage was out of bounds." } , { "FormatFailed" , "An internal error occurred while formatting the following message:\n  " } , { "RootElementRequired" , "The root element is required in a well-formed document." } , { "InvalidCharInCDSect" , "An invalid XML character (Unicode: 0x{0}) was found in the CDATA section." } , { "InvalidCharInContent" , "An invalid XML character (Unicode: 0x{0}) was found in the element content of the document." } , { "TwoColonsInQName" , "An invalid second ':' was found in the element type or attribute name." } , { "InvalidCharInMisc" , "An invalid XML character (Unicode: 0x{0}) was found in markup after the end of the element content." } , { "InvalidCharInProlog" , "An invalid XML character (Unicode: 0x{0}) was found in the prolog of the document." } , { "InvalidCharInXMLDecl" , "An invalid XML character (Unicode: 0x{0}) was found in the XML declaration." } , { "CDEndInContent" , "The character sequence \"]]>\" must not appear in content unless used to mark the end of a CDATA section." } , { "CDSectUnterminated" , "The CDATA section must end with \"]]>\"." } , { "XMLDeclMustBeFirst" , "The XML declaration may only appear at the very beginning of the document." } , { "EqRequiredInXMLDecl" , "The ''='' character must follow \"{0}\" in the XML declaration." } , { "QuoteRequiredInXMLDecl" , "The value following \"{0}\" in the XML declaration must be a quoted string." } , { "XMLDeclUnterminated" , "The XML declaration must end with \"?>\"." } , { "VersionInfoRequired" , "The version is required in the XML declaration." } , { "MarkupNotRecognizedInProlog" , "The markup in the document preceding the root element must be well-formed." } , { "MarkupNotRecognizedInMisc" , "The markup in the document following the root element must be well-formed." } , { "SDDeclInvalid" , "The standalone document declaration value must be \"yes\" or \"no\", not \"{0}\"." } , { "XMLLangInvalid" , "The xml:lang attribute value \"{0}\" is an invalid language identifier." } , { "ETagRequired" , "The element type \"{0}\" must be terminated by the matching end-tag \"</{0}>\"." } , { "ElementUnterminated" , "Element type \"{0}\" must be followed by either attribute specifications, \">\" or \"/>\"." } , { "EqRequiredInAttribute" , "Attribute name \"{0}\" must be followed by the ''='' character." } , { "AttributeNotUnique" , "Attribute \"{1}\" was already specified for element \"{0}\"." } , { "ETagUnterminated" , "The end-tag for element type \"{0}\" must end with a ''>'' delimiter." } , { "MarkupNotRecognizedInContent" , "The content of elements must consist of well-formed character data or markup." } , { "ReferenceUnterminated" , "The reference must be terminated by a ';' delimiter." } , { "ReferenceNotInOneEntity" , "The reference must be entirely contained within the same parsed entity." } , { "ElementEntityMismatch" , "The element \"{0}\" must start and end within the same entity." } , { "InvalidCharInAttValue" , "An invalid XML character (Unicode: 0x{2}) was found in the value of attribute \"{1}\"." } , { "InvalidCharInComment" , "An invalid XML character (Unicode: 0x{0}) was found in the comment." } , { "InvalidCharInPI" , "An invalid XML character (Unicode: 0x{0}) was found in the processing instruction." } , { "InvalidCharInInternalSubset" , "An invalid XML character (Unicode: 0x{0}) was found in the internal subset of the DTD." } , { "InvalidCharInTextDecl" , "An invalid XML character (Unicode: 0x{0}) was found in the text declaration." } , { "QuoteRequiredInAttValue" , "The value of attribute \"{1}\" must begin with either a single or double quote character." } , { "LessthanInAttValue" , "The value of attribute \"{1}\" must not contain the ''<'' character." } , { "AttributeValueUnterminated" , "The value for attribute \"{1}\" must end with the matching quote character." } , { "DashDashInComment" , "The string \"--\" is not permitted within comments." } , { "CommentUnterminated" , "The comment must end with \"-->\"." } , { "PITargetRequired" , "The processing instruction must begin with the name of the target." } , { "SpaceRequiredInPI" , "White space is required between the processing instruction target and data." } , { "PIUnterminated" , "The processing instruction must end with \"?>\"." } , { "ReservedPITarget" , "The processing instruction target matching \"[xX][mM][lL]\" is not allowed." } , { "VersionInfoInvalid" , "Invalid version \"{0}\"." } , { "VersionNotSupported" , "XML version \"{0}\" is not supported." } , { "DigitRequiredInCharRef" , "A decimal representation must immediately follow the \"&#\" in a character reference." } , { "HexdigitRequiredInCharRef" , "A hexadecimal representation must immediately follow the \"&#x\" in a character reference." } , { "SemicolonRequiredInCharRef" , "The character reference must end with the ';' delimiter." } , { "InvalidCharRef" , "Character reference \"&#{0}\" is an invalid XML character." } , { "NameRequiredInReference" , "The entity name must immediately follow the '&' in the entity reference." } , { "SemicolonRequiredInReference" , "The reference to entity \"{0}\" must end with the '';'' delimiter." } , { "TextDeclMustBeFirst" , "The text declaration may only appear at the very beginning of the external parsed entity." } , { "EqRequiredInTextDecl" , "The ''='' character must follow \"{0}\" in the text declaration." } , { "QuoteRequiredInTextDecl" , "The value following \"{0}\" in the text declaration must be a quoted string." } , { "SpaceRequiredInTextDecl" , "White space is required between the version and the encoding declaration." } , { "TextDeclUnterminated" , "The text declaration must end with \"?>\"." } , { "EncodingDeclRequired" , "The encoding declaration is required in the text declaration." } , { "CommentNotInOneEntity" , "The comment must be entirely contained within the same parsed entity." } , { "PINotInOneEntity" , "The processing instruction must be entirely contained within the same parsed entity." } , { "EncodingDeclInvalid" , "Invalid encoding name \"{0}\"." } , { "InvalidCharInEntityValue" , "An invalid XML character (Unicode: 0x{0}) was found in the literal entity value." } , { "InvalidCharInExternalSubset" , "An invalid XML character (Unicode: 0x{0}) was found in the external subset of the DTD." } , { "InvalidCharInIgnoreSect" , "An invalid XML character (Unicode: 0x{0}) was found in the excluded conditional section." } , { "InvalidCharInPublicID" , "An invalid XML character (Unicode: 0x{0}) was found in the public identifier." } , { "InvalidCharInSystemID" , "An invalid XML character (Unicode: 0x{0}) was found in the system identifier." } , { "QuoteRequiredInSystemID" , "The system identifier must begin with either a single or double quote character." } , { "SystemIDUnterminated" , "The system identifier must end with the matching quote character." } , { "QuoteRequiredInPublicID" , "The public identifier must begin with either a single or double quote character." } , { "PublicIDUnterminated" , "The public identifier must end with the matching quote character." } , { "PubidCharIllegal" , "The character (Unicode: 0x{0}) is not permitted in the public identifier." } , { "MSG_SPACE_REQUIRED_BEFORE_ROOT_ELEMENT_TYPE_IN_DOCTYPEDECL" , "White space is required after \"<!DOCTYPE\" in the document type declaration." } , { "MSG_ROOT_ELEMENT_TYPE_REQUIRED" , "The root element type must appear after \"<!DOCTYPE\" in the document type declaration." } , { "DoctypedeclUnterminated" , "The document type declaration for root element type \"{0}\" must end with ''>''." } , { "PEReferenceWithinMarkup" , "The parameter entity reference \"%{0};\" cannot occur within markup in the internal subset of the DTD." } , { "MSG_MARKUP_NOT_RECOGNIZED_IN_DTD" , "The markup declarations contained or pointed to by the document type declaration must be well-formed." } , { "MSG_XML_SPACE_DECLARATION_ILLEGAL" , "The attribute declaration for \"xml:space\" must be given as an enumerated type whose only possible values are \"default\" and \"preserve\"." } , { "MSG_SPACE_REQUIRED_BEFORE_ELEMENT_TYPE_IN_ELEMENTDECL" , "White space is required after \"<!ELEMENT\" in the element type declaration." } , { "MSG_ELEMENT_TYPE_REQUIRED_IN_ELEMENTDECL" , "The element type is required in the element type declaration." } , { "MSG_SPACE_REQUIRED_BEFORE_CONTENTSPEC_IN_ELEMENTDECL" , "White space is required after the element type \"{0}\" in the element type declaration." } , { "MSG_CONTENTSPEC_REQUIRED_IN_ELEMENTDECL" , "The constraint is required after the element type \"{0}\" in the element type declaration." } , { "ElementDeclUnterminated" , "The declaration for element type \"{0}\" must end with ''>''." } , { "MSG_OPEN_PAREN_OR_ELEMENT_TYPE_REQUIRED_IN_CHILDREN" , "A ''('' character or an element type is required in the declaration of element type \"{0}\"." } , { "MSG_CLOSE_PAREN_REQUIRED_IN_CHILDREN" , "A '')'' is required in the declaration of element type \"{0}\"." } , { "MSG_ELEMENT_TYPE_REQUIRED_IN_MIXED_CONTENT" , "An element type is required in the declaration of element type \"{0}\"." } , { "MSG_CLOSE_PAREN_REQUIRED_IN_MIXED" , "A '')'' is required in the declaration of element type \"{0}\"." } , { "MixedContentUnterminated" , "The mixed content model \"{0}\" must end with \")*\" when the types of child elements are constrained." } , { "MSG_SPACE_REQUIRED_BEFORE_ELEMENT_TYPE_IN_ATTLISTDECL" , "White space is required after \"<!ATTLIST\" in the attribute-list declaration." } , { "MSG_ELEMENT_TYPE_REQUIRED_IN_ATTLISTDECL" , "The element type is required in the attribute-list declaration." } , { "MSG_SPACE_REQUIRED_BEFORE_ATTRIBUTE_NAME_IN_ATTDEF" , "White space is required before the attribute name in the attribute-list declaration for element \"{0}\"." } , { "AttNameRequiredInAttDef" , "The attribute name must be specified in the attribute-list declaration for element \"{0}\"." } , { "MSG_SPACE_REQUIRED_BEFORE_ATTTYPE_IN_ATTDEF" , "White space is required before the attribute type in the declaration of attribute \"{1}\" for element \"{0}\"." } , { "AttTypeRequiredInAttDef" , "The attribute type is required in the declaration of attribute \"{1}\" for element \"{0}\"." } , { "MSG_SPACE_REQUIRED_BEFORE_DEFAULTDECL_IN_ATTDEF" , "White space is required before the attribute default in the declaration of attribute \"{1}\" for element \"{0}\"." } , { "MSG_SPACE_REQUIRED_AFTER_NOTATION_IN_NOTATIONTYPE" , "White space must appear after \"NOTATION\" in the \"{1}\" attribute declaration." } , { "MSG_OPEN_PAREN_REQUIRED_IN_NOTATIONTYPE" , "The ''('' character must follow \"NOTATION\" in the \"{1}\" attribute declaration." } , { "MSG_NAME_REQUIRED_IN_NOTATIONTYPE" , "The notation name is required in the notation type list for the \"{1}\" attribute declaration." } , { "NotationTypeUnterminated" , "The notation type list must end with '')'' in the \"{1}\" attribute declaration." } , { "MSG_NMTOKEN_REQUIRED_IN_ENUMERATION" , "The name token is required in the enumerated type list for the \"{1}\" attribute declaration." } , { "EnumerationUnterminated" , "The enumerated type list must end with '')'' in the \"{1}\" attribute declaration." } , { "MSG_SPACE_REQUIRED_AFTER_FIXED_IN_DEFAULTDECL" , "White space must appear after \"FIXED\" in the \"{1}\" attribute declaration." } , { "IncludeSectUnterminated" , "The included conditional section must end with \"]]>\"." } , { "IgnoreSectUnterminated" , "The excluded conditional section must end with \"]]>\"." } , { "NameRequiredInPEReference" , "The entity name must immediately follow the '%' in the parameter entity reference." } , { "SemicolonRequiredInPEReference" , "The parameter entity reference \"%{0};\" must end with the '';'' delimiter." } , { "MSG_SPACE_REQUIRED_BEFORE_ENTITY_NAME_IN_ENTITYDECL" , "White space is required after \"<!ENTITY\" in the entity declaration." } , { "MSG_SPACE_REQUIRED_BEFORE_PERCENT_IN_PEDECL" , "White space is required between \"<!ENTITY\" and the '%' character in the parameter entity declaration." } , { "MSG_SPACE_REQUIRED_BEFORE_ENTITY_NAME_IN_PEDECL" , "White space is required between the '%' and the entity name in the parameter entity declaration." } , { "MSG_ENTITY_NAME_REQUIRED_IN_ENTITYDECL" , "The name of the entity is required in the entity declaration." } , { "MSG_SPACE_REQUIRED_AFTER_ENTITY_NAME_IN_ENTITYDECL" , "White space is required between the entity name \"{0}\" and the definition in the entity declaration." } , { "MSG_SPACE_REQUIRED_BEFORE_NOTATION_NAME_IN_UNPARSED_ENTITYDECL" , "White space is required between \"NDATA\" and the notation name in the declaration for the entity \"{0}\"." } , { "MSG_NOTATION_NAME_REQUIRED_FOR_UNPARSED_ENTITYDECL" , "The notation name is required after \"NDATA\" in the declaration for the entity \"{0}\"." } , { "EntityDeclUnterminated" , "The declaration for the entity \"{0}\" must end with ''>''." } , { "ExternalIDRequired" , "The external entity declaration must begin with either \"SYSTEM\" or \"PUBLIC\"." } , { "MSG_SPACE_REQUIRED_BEFORE_PUBIDLITERAL_IN_EXTERNALID" , "White space is required between \"PUBLIC\" and the public identifier." } , { "MSG_SPACE_REQUIRED_AFTER_PUBIDLITERAL_IN_EXTERNALID" , "White space is required between the public identifier and the system identifier." } , { "MSG_SPACE_REQUIRED_BEFORE_SYSTEMLITERAL_IN_EXTERNALID" , "White space is required between \"SYSTEM\" and the system identifier." } , { "MSG_URI_FRAGMENT_IN_SYSTEMID" , "The fragment identifier should not be specified as part of the system identifier \"{0}\"." } , { "MSG_SPACE_REQUIRED_BEFORE_NOTATION_NAME_IN_NOTATIONDECL" , "White space is required after \"<!NOTATION\" in the notation declaration." } , { "MSG_NOTATION_NAME_REQUIRED_IN_NOTATIONDECL" , "The name of the notation is required in the notation declaration." } , { "MSG_SPACE_REQUIRED_AFTER_NOTATION_NAME_IN_NOTATIONDECL" , "White space is required after the notation name \"{0}\" in the notation declaration." } , { "NotationDeclUnterminated" , "The declaration for the notation \"{0}\" must end with ''>''." } , { "DuplicateTypeInMixedContent" , "The element type \"{0}\" was already specified in this content model." } , { "ENTITIESInvalid" , "Attribute value \"{1}\" of type ENTITIES must be the names of one or more unparsed entities." } , { "ENTITYInvalid" , "Attribute value \"{1}\" of type ENTITY must be the name of an unparsed entity." } , { "IDDefaultTypeInvalid" , "The ID attribute \"{0}\" must have a declared default of \"#IMPLIED\" or \"#REQUIRED\"." } , { "IDInvalid" , "Attribute value \"{1}\" of type ID must be a name." } , { "IDNotUnique" , "Attribute value \"{1}\" of type ID must be unique within the document." } , { "IDREFInvalid" , "Attribute value \"{1}\" of type IDREF must be a name." } , { "IDREFSInvalid" , "Attribute value \"{0}\" of type IDREFS must be one or more names." } , { "ImproperDeclarationNesting" , "The replacement text of parameter entity \"{0}\" must include properly nested declarations." } , { "ImproperGroupNesting" , "The replacement text of parameter entity \"{0}\" must include properly nested pairs of parentheses." } , { "MSG_ATTRIBUTE_NOT_DECLARED" , "Attribute \"{1}\" must be declared for element type \"{0}\"." } , { "MSG_ATTRIBUTE_VALUE_NOT_IN_LIST" , "Attribute \"{0}\" with value \"{1}\" must have a value from the list \"{2}\"." } , { "MSG_ATTVALUE_CHANGED_DURING_NORMALIZATION_WHEN_STANDALONE" , "The value \"{1}\" of attribute \"{0}\" must not be changed by normalization (to \"{2}\") in a standalone document." } , { "MSG_CONTENT_INCOMPLETE" , "The content of element type \"{0}\" is incomplete, it must match \"{1}\"." } , { "MSG_CONTENT_INVALID" , "The content of element type \"{0}\" must match \"{1}\"." } , { "MSG_DEFAULTED_ATTRIBUTE_NOT_SPECIFIED" , "Attribute \"{1}\" for element type \"{0}\" has a default value and must be specified in a standalone document." } , { "MSG_DUPLICATE_ATTDEF" , "Attribute \"{1}\" is already declared for element type \"{0}\"." } , { "MSG_ELEMENT_ALREADY_DECLARED" , "Element type \"{0}\" must not be declared more than once." } , { "MSG_ELEMENT_NOT_DECLARED" , "Element type \"{0}\" must be declared." } , { "MSG_ELEMENT_WITH_ID_REQUIRED" , "An element with the identifier \"{0}\" must appear in the document." } , { "MSG_EXTERNAL_ENTITY_NOT_PERMITTED" , "The reference to external entity \"{0}\" is not permitted in a standalone document." } , { "MSG_FIXED_ATTVALUE_INVALID" , "Attribute \"{1}\" with value \"{2}\" must have a value of \"{3}\"." } , { "MSG_MORE_THAN_ONE_ID_ATTRIBUTE" , "Element type \"{0}\" already has attribute \"{1}\" of type ID, a second attribute \"{2}\" of type ID is not permitted." } , { "MSG_MORE_THAN_ONE_NOTATION_ATTRIBUTE" , "Element type \"{0}\" already has attribute \"{1}\" of type NOTATION, a second attribute \"{2}\" of type NOTATION is not permitted." } , { "MSG_NOTATION_NOT_DECLARED_FOR_NOTATIONTYPE_ATTRIBUTE" , "The notation \"{2}\" must be declared when referenced in the notation type list for attribute \"{1}\"." } , { "MSG_NOTATION_NOT_DECLARED_FOR_UNPARSED_ENTITYDECL" , "The notation \"{1}\" must be declared when referenced in the unparsed entity declaration for \"{0}\"." } , { "MSG_REFERENCE_TO_EXTERNALLY_DECLARED_ENTITY_WHEN_STANDALONE" , "The reference to entity \"{0}\" declared in an external parsed entity is not permitted in a standalone document." } , { "MSG_REQUIRED_ATTRIBUTE_NOT_SPECIFIED" , "Attribute \"{1}\" is required and must be specified for element type \"{0}\"." } , { "MSG_WHITE_SPACE_IN_ELEMENT_CONTENT_WHEN_STANDALONE" , "White space must not occur between elements declared in an external parsed entity with element content in a standalone document." } , { "NMTOKENInvalid" , "Attribute value \"{1}\" of type NMTOKEN must be a name token." } , { "NMTOKENSInvalid" , "Attribute value \"{0}\" of type NMTOKENS must be one or more name tokens." } , { "RootElementTypeMustMatchDoctypedecl" , "Document root element \"{1}\", must match DOCTYPE root \"{0}\"." } , { "UndeclaredElementInContentSpec" , "The content model of element \"{0}\" refers to the undeclared element \"{1}\"." } , { "ReferenceToExternalEntity" , "The external entity reference \"&{0};\" is not permitted in an attribute value." } , { "EntityNotDeclared" , "The entity \"{0}\" was referenced, but not declared." } , { "ReferenceToUnparsedEntity" , "The unparsed entity reference \"&{0};\" is not permitted." } , { "RecursiveReference" , "Recursive reference \"&{0};\". (Reference path: {1})" } , { "RecursivePEReference" , "Recursive reference \"%{0};\". (Reference path: {1})" } , { "EncodingNotSupported" , "The encoding \"{0}\" is not supported." } , { "EncodingRequired" , "A parsed entity not encoded in either UTF-8 or UTF-16 must contain an encoding declaration." } , { "PrefixDeclared" , "The namespace prefix \"{0}\" was not declared." } , { "MSG_ATT_DEFAULT_INVALID" , "The defaultValue \"{1}\" of attribute \"{0}\" is not legal as for the lexical constraints of this attribute type." } , { "MSG_GENERIC_SCHEMA_ERROR" , "General Schema Error: {0}." } , } ; public Object [ ] [ ] getContents ( ) { return CONTENTS ; } } 	1	['3', '3', '0', '0', '4', '1', '0', '0', '2', '0.5', '2145', '0', '0', '0.974358974', '1', '0', '0', '713.6666667', '1', '0.3333', '1']
package org . apache . wml ; public interface WMLSetvarElement extends WMLElement { public void setValue ( String newValue ) ; public String getValue ( ) ; public void setName ( String newValue ) ; public String getName ( ) ; } 	0	['4', '1', '0', '2', '4', '6', '1', '1', '4', '2', '4', '0', '0', '0', '0.75', '0', '0', '0', '1', '1', '0']
package org . apache . xerces . utils . regex ; import java . util . Locale ; import java . util . MissingResourceException ; import java . util . ResourceBundle ; import java . util . Vector ; class RegexParser { static final int T_CHAR = 0 ; static final int T_EOF = 1 ; static final int T_OR = 2 ; static final int T_STAR = 3 ; static final int T_PLUS = 4 ; static final int T_QUESTION = 5 ; static final int T_LPAREN = 6 ; static final int T_RPAREN = 7 ; static final int T_DOT = 8 ; static final int T_LBRACKET = 9 ; static final int T_BACKSOLIDUS = 10 ; static final int T_CARET = 11 ; static final int T_DOLLAR = 12 ; static final int T_LPAREN2 = 13 ; static final int T_LOOKAHEAD = 14 ; static final int T_NEGATIVELOOKAHEAD = 15 ; static final int T_LOOKBEHIND = 16 ; static final int T_NEGATIVELOOKBEHIND = 17 ; static final int T_INDEPENDENT = 18 ; static final int T_SET_OPERATIONS = 19 ; static final int T_POSIX_CHARCLASS_START = 20 ; static final int T_COMMENT = 21 ; static final int T_MODIFIERS = 22 ; static final int T_CONDITION = 23 ; static final int T_XMLSCHEMA_CC_SUBTRACTION = 24 ; static class ReferencePosition { int refNumber ; int position ; ReferencePosition ( int n , int pos ) { this . refNumber = n ; this . position = pos ; } } int offset ; String regex ; int regexlen ; int options ; ResourceBundle resources ; int chardata ; int nexttoken ; static protected final int S_NORMAL = 0 ; static protected final int S_INBRACKETS = 1 ; static protected final int S_INXBRACKETS = 2 ; int context = S_NORMAL ; int parennumber = 1 ; boolean hasBackReferences ; Vector references = null ; public RegexParser ( ) { } public RegexParser ( Locale locale ) { } public void setLocale ( Locale locale ) { try { this . resources = ResourceBundle . getBundle ( "org.apache.xerces.utils.regex.message" , locale ) ; } catch ( MissingResourceException mre ) { throw new RuntimeException ( "Installation Problem???  Couldn't load messages: " + mre . getMessage ( ) ) ; } } final ParseException ex ( String key , int loc ) { return new ParseException ( this . resources . getString ( key ) , loc ) ; } private final boolean isSet ( int flag ) { return ( this . options & flag ) == flag ; } synchronized Token parse ( String regex , int options ) throws ParseException { this . options = options ; this . offset = 0 ; this . setContext ( S_NORMAL ) ; this . parennumber = 1 ; this . hasBackReferences = false ; this . regex = regex ; if ( this . isSet ( RegularExpression . EXTENDED_COMMENT ) ) this . regex = REUtil . stripExtendedComment ( this . regex ) ; this . regexlen = this . regex . length ( ) ; this . next ( ) ; Token ret = this . parseRegex ( ) ; if ( this . offset != this . regexlen ) throw ex ( "parser.parse.1" , this . offset ) ; if ( this . references != null ) { for ( int i = 0 ; i < this . references . size ( ) ; i ++ ) { ReferencePosition position = ( ReferencePosition ) this . references . elementAt ( i ) ; if ( this . parennumber <= position . refNumber ) throw ex ( "parser.parse.2" , position . position ) ; } this . references . removeAllElements ( ) ; } return ret ; } protected final void setContext ( int con ) { this . context = con ; } final int read ( ) { return this . nexttoken ; } final void next ( ) { if ( this . offset >= this . regexlen ) { this . chardata = - 1 ; this . nexttoken = T_EOF ; return ; } int ret ; int ch = this . regex . charAt ( this . offset ++ ) ; this . chardata = ch ; if ( this . context == S_INBRACKETS ) { switch ( ch ) { case '\\' : ret = T_BACKSOLIDUS ; if ( this . offset >= this . regexlen ) throw ex ( "parser.next.1" , this . offset - 1 ) ; this . chardata = this . regex . charAt ( this . offset ++ ) ; break ; case '-' : if ( this . isSet ( RegularExpression . XMLSCHEMA_MODE ) && this . offset < this . regexlen && this . regex . charAt ( this . offset ) == '[' ) { this . offset ++ ; ret = T_XMLSCHEMA_CC_SUBTRACTION ; } else ret = T_CHAR ; break ; case '[' : if ( ! this . isSet ( RegularExpression . XMLSCHEMA_MODE ) && this . offset < this . regexlen && this . regex . charAt ( this . offset ) == ':' ) { this . offset ++ ; ret = T_POSIX_CHARCLASS_START ; break ; } default : if ( REUtil . isHighSurrogate ( ch ) && this . offset < this . regexlen ) { int low = this . regex . charAt ( this . offset ) ; if ( REUtil . isLowSurrogate ( low ) ) { this . chardata = REUtil . composeFromSurrogates ( ch , low ) ; this . offset ++ ; } } ret = T_CHAR ; } this . nexttoken = ret ; return ; } switch ( ch ) { case '|' : ret = T_OR ; break ; case '*' : ret = T_STAR ; break ; case '+' : ret = T_PLUS ; break ; case '?' : ret = T_QUESTION ; break ; case ')' : ret = T_RPAREN ; break ; case '.' : ret = T_DOT ; break ; case '[' : ret = T_LBRACKET ; break ; case '^' : ret = T_CARET ; break ; case '$' : ret = T_DOLLAR ; break ; case '(' : ret = T_LPAREN ; if ( this . offset >= this . regexlen ) break ; if ( this . regex . charAt ( this . offset ) != '?' ) break ; if ( ++ this . offset >= this . regexlen ) throw ex ( "parser.next.2" , this . offset - 1 ) ; ch = this . regex . charAt ( this . offset ++ ) ; switch ( ch ) { case ':' : ret = T_LPAREN2 ; break ; case '=' : ret = T_LOOKAHEAD ; break ; case '!' : ret = T_NEGATIVELOOKAHEAD ; break ; case '[' : ret = T_SET_OPERATIONS ; break ; case '>' : ret = T_INDEPENDENT ; break ; case '<' : if ( this . offset >= this . regexlen ) throw ex ( "parser.next.2" , this . offset - 3 ) ; ch = this . regex . charAt ( this . offset ++ ) ; if ( ch == '=' ) { ret = T_LOOKBEHIND ; } else if ( ch == '!' ) { ret = T_NEGATIVELOOKBEHIND ; } else throw ex ( "parser.next.3" , this . offset - 3 ) ; break ; case '#' : while ( this . offset < this . regexlen ) { ch = this . regex . charAt ( this . offset ++ ) ; if ( ch == ')' ) break ; } if ( ch != ')' ) throw ex ( "parser.next.4" , this . offset - 1 ) ; ret = T_COMMENT ; break ; default : if ( ch == '-' || 'a' <= ch && ch <= 'z' || 'A' <= ch && ch <= 'Z' ) { this . offset -- ; ret = T_MODIFIERS ; break ; } else if ( ch == '(' ) { ret = T_CONDITION ; break ; } throw ex ( "parser.next.2" , this . offset - 2 ) ; } break ; case '\\' : ret = T_BACKSOLIDUS ; if ( this . offset >= this . regexlen ) throw ex ( "parser.next.1" , this . offset - 1 ) ; this . chardata = this . regex . charAt ( this . offset ++ ) ; break ; default : ret = T_CHAR ; if ( REUtil . isHighSurrogate ( this . chardata ) && this . offset < this . regexlen ) this . chardata = REUtil . composeFromSurrogates ( this . chardata , this . regex . charAt ( this . offset ++ ) ) ; } this . nexttoken = ret ; } Token parseRegex ( ) throws ParseException { Token tok = this . parseTerm ( ) ; Token parent = null ; while ( this . read ( ) == T_OR ) { this . next ( ) ; if ( parent == null ) { parent = Token . createUnion ( ) ; parent . addChild ( tok ) ; tok = parent ; } tok . addChild ( this . parseTerm ( ) ) ; } return tok ; } Token parseTerm ( ) throws ParseException { int ch = this . read ( ) ; if ( ch == T_OR || ch == T_RPAREN || ch == T_EOF ) { return Token . createEmpty ( ) ; } else { Token tok = this . parseFactor ( ) ; Token concat = null ; while ( ( ch = this . read ( ) ) != T_OR && ch != T_RPAREN && ch != T_EOF ) { if ( concat == null ) { concat = Token . createConcat ( ) ; concat . addChild ( tok ) ; tok = concat ; } concat . addChild ( this . parseFactor ( ) ) ; } return tok ; } } Token processCaret ( ) throws ParseException { this . next ( ) ; return Token . token_linebeginning ; } Token processDollar ( ) throws ParseException { this . next ( ) ; return Token . token_lineend ; } Token processLookahead ( ) throws ParseException { this . next ( ) ; Token tok = Token . createLook ( Token . LOOKAHEAD , this . parseRegex ( ) ) ; if ( this . read ( ) != T_RPAREN ) throw ex ( "parser.factor.1" , this . offset - 1 ) ; this . next ( ) ; return tok ; } Token processNegativelookahead ( ) throws ParseException { this . next ( ) ; Token tok = Token . createLook ( Token . NEGATIVELOOKAHEAD , this . parseRegex ( ) ) ; if ( this . read ( ) != T_RPAREN ) throw ex ( "parser.factor.1" , this . offset - 1 ) ; this . next ( ) ; return tok ; } Token processLookbehind ( ) throws ParseException { this . next ( ) ; Token tok = Token . createLook ( Token . LOOKBEHIND , this . parseRegex ( ) ) ; if ( this . read ( ) != T_RPAREN ) throw ex ( "parser.factor.1" , this . offset - 1 ) ; this . next ( ) ; return tok ; } Token processNegativelookbehind ( ) throws ParseException { this . next ( ) ; Token tok = Token . createLook ( Token . NEGATIVELOOKBEHIND , this . parseRegex ( ) ) ; if ( this . read ( ) != T_RPAREN ) throw ex ( "parser.factor.1" , this . offset - 1 ) ; this . next ( ) ; return tok ; } Token processBacksolidus_A ( ) throws ParseException { this . next ( ) ; return Token . token_stringbeginning ; } Token processBacksolidus_Z ( ) throws ParseException { this . next ( ) ; return Token . token_stringend2 ; } Token processBacksolidus_z ( ) throws ParseException { this . next ( ) ; return Token . token_stringend ; } Token processBacksolidus_b ( ) throws ParseException { this . next ( ) ; return Token . token_wordedge ; } Token processBacksolidus_B ( ) throws ParseException { this . next ( ) ; return Token . token_not_wordedge ; } Token processBacksolidus_lt ( ) throws ParseException { this . next ( ) ; return Token . token_wordbeginning ; } Token processBacksolidus_gt ( ) throws ParseException { this . next ( ) ; return Token . token_wordend ; } Token processStar ( Token tok ) throws ParseException { this . next ( ) ; if ( this . read ( ) == T_QUESTION ) { this . next ( ) ; return Token . createNGClosure ( tok ) ; } else return Token . createClosure ( tok ) ; } Token processPlus ( Token tok ) throws ParseException { this . next ( ) ; if ( this . read ( ) == T_QUESTION ) { this . next ( ) ; return Token . createConcat ( tok , Token . createNGClosure ( tok ) ) ; } else return Token . createConcat ( tok , Token . createClosure ( tok ) ) ; } Token processQuestion ( Token tok ) throws ParseException { this . next ( ) ; Token par = Token . createUnion ( ) ; if ( this . read ( ) == T_QUESTION ) { this . next ( ) ; par . addChild ( Token . createEmpty ( ) ) ; par . addChild ( tok ) ; } else { par . addChild ( tok ) ; par . addChild ( Token . createEmpty ( ) ) ; } return par ; } boolean checkQuestion ( int off ) { return off < this . regexlen && this . regex . charAt ( off ) == '?' ; } Token processParen ( ) throws ParseException { this . next ( ) ; int p = this . parennumber ++ ; Token tok = Token . createParen ( this . parseRegex ( ) , p ) ; if ( this . read ( ) != T_RPAREN ) throw ex ( "parser.factor.1" , this . offset - 1 ) ; this . next ( ) ; return tok ; } Token processParen2 ( ) throws ParseException { this . next ( ) ; Token tok = Token . createParen ( this . parseRegex ( ) , 0 ) ; if ( this . read ( ) != T_RPAREN ) throw ex ( "parser.factor.1" , this . offset - 1 ) ; this . next ( ) ; return tok ; } Token processCondition ( ) throws ParseException { if ( this . offset + 1 >= this . regexlen ) throw ex ( "parser.factor.4" , this . offset ) ; int refno = - 1 ; Token condition = null ; int ch = this . regex . charAt ( this . offset ) ; if ( '1' <= ch && ch <= '9' ) { refno = ch - '0' ; this . hasBackReferences = true ; if ( this . references == null ) this . references = new Vector ( ) ; this . references . addElement ( new ReferencePosition ( refno , this . offset ) ) ; this . offset ++ ; if ( this . regex . charAt ( this . offset ) != ')' ) throw ex ( "parser.factor.1" , this . offset ) ; this . offset ++ ; } else { if ( ch == '?' ) this . offset -- ; this . next ( ) ; condition = this . parseFactor ( ) ; switch ( condition . type ) { case Token . LOOKAHEAD : case Token . NEGATIVELOOKAHEAD : case Token . LOOKBEHIND : case Token . NEGATIVELOOKBEHIND : break ; case Token . ANCHOR : if ( this . read ( ) != T_RPAREN ) throw ex ( "parser.factor.1" , this . offset - 1 ) ; break ; default : throw ex ( "parser.factor.5" , this . offset ) ; } } this . next ( ) ; Token yesPattern = this . parseRegex ( ) ; Token noPattern = null ; if ( yesPattern . type == Token . UNION ) { if ( yesPattern . size ( ) != 2 ) throw ex ( "parser.factor.6" , this . offset ) ; noPattern = yesPattern . getChild ( 1 ) ; yesPattern = yesPattern . getChild ( 0 ) ; } if ( this . read ( ) != T_RPAREN ) throw ex ( "parser.factor.1" , this . offset - 1 ) ; this . next ( ) ; return Token . createCondition ( refno , condition , yesPattern , noPattern ) ; } Token processModifiers ( ) throws ParseException { int add = 0 , mask = 0 , ch = - 1 ; while ( this . offset < this . regexlen ) { ch = this . regex . charAt ( this . offset ) ; int v = REUtil . getOptionValue ( ch ) ; if ( v == 0 ) break ; add |= v ; this . offset ++ ; } if ( this . offset >= this . regexlen ) throw ex ( "parser.factor.2" , this . offset - 1 ) ; if ( ch == '-' ) { this . offset ++ ; while ( this . offset < this . regexlen ) { ch = this . regex . charAt ( this . offset ) ; int v = REUtil . getOptionValue ( ch ) ; if ( v == 0 ) break ; mask |= v ; this . offset ++ ; } if ( this . offset >= this . regexlen ) throw ex ( "parser.factor.2" , this . offset - 1 ) ; } Token tok ; if ( ch == ':' ) { this . offset ++ ; this . next ( ) ; tok = Token . createModifierGroup ( this . parseRegex ( ) , add , mask ) ; if ( this . read ( ) != T_RPAREN ) throw ex ( "parser.factor.1" , this . offset - 1 ) ; this . next ( ) ; } else if ( ch == ')' ) { this . offset ++ ; this . next ( ) ; tok = Token . createModifierGroup ( this . parseRegex ( ) , add , mask ) ; } else throw ex ( "parser.factor.3" , this . offset ) ; return tok ; } Token processIndependent ( ) throws ParseException { this . next ( ) ; Token tok = Token . createLook ( Token . INDEPENDENT , this . parseRegex ( ) ) ; if ( this . read ( ) != T_RPAREN ) throw ex ( "parser.factor.1" , this . offset - 1 ) ; this . next ( ) ; return tok ; } Token processBacksolidus_c ( ) throws ParseException { int ch2 ; if ( this . offset >= this . regexlen || ( ( ch2 = this . regex . charAt ( this . offset ++ ) ) & 0xffe0 ) != 0x0040 ) throw ex ( "parser.atom.1" , this . offset - 1 ) ; this . next ( ) ; return Token . createChar ( ch2 - 0x40 ) ; } Token processBacksolidus_C ( ) throws ParseException { throw ex ( "parser.process.1" , this . offset ) ; } Token processBacksolidus_i ( ) throws ParseException { Token tok = Token . createChar ( 'i' ) ; this . next ( ) ; return tok ; } Token processBacksolidus_I ( ) throws ParseException { throw ex ( "parser.process.1" , this . offset ) ; } Token processBacksolidus_g ( ) throws ParseException { this . next ( ) ; return Token . getGraphemePattern ( ) ; } Token processBacksolidus_X ( ) throws ParseException { this . next ( ) ; return Token . getCombiningCharacterSequence ( ) ; } Token processBackreference ( ) throws ParseException { int refnum = this . chardata - '0' ; Token tok = Token . createBackReference ( refnum ) ; this . hasBackReferences = true ; if ( this . references == null ) this . references = new Vector ( ) ; this . references . addElement ( new ReferencePosition ( refnum , this . offset - 2 ) ) ; this . next ( ) ; return tok ; } Token parseFactor ( ) throws ParseException { int ch = this . read ( ) ; Token tok ; switch ( ch ) { case T_CARET : return this . processCaret ( ) ; case T_DOLLAR : return this . processDollar ( ) ; case T_LOOKAHEAD : return this . processLookahead ( ) ; case T_NEGATIVELOOKAHEAD : return this . processNegativelookahead ( ) ; case T_LOOKBEHIND : return this . processLookbehind ( ) ; case T_NEGATIVELOOKBEHIND : return this . processNegativelookbehind ( ) ; case T_COMMENT : this . next ( ) ; return Token . createEmpty ( ) ; case T_BACKSOLIDUS : switch ( this . chardata ) { case 'A' : return this . processBacksolidus_A ( ) ; case 'Z' : return this . processBacksolidus_Z ( ) ; case 'z' : return this . processBacksolidus_z ( ) ; case 'b' : return this . processBacksolidus_b ( ) ; case 'B' : return this . processBacksolidus_B ( ) ; case '<' : return this . processBacksolidus_lt ( ) ; case '>' : return this . processBacksolidus_gt ( ) ; } } tok = this . parseAtom ( ) ; ch = this . read ( ) ; switch ( ch ) { case T_STAR : return this . processStar ( tok ) ; case T_PLUS : return this . processPlus ( tok ) ; case T_QUESTION : return this . processQuestion ( tok ) ; case T_CHAR : if ( this . chardata == '{' ) { int off = this . offset ; int min = 0 , max = - 1 ; if ( off >= this . regexlen ) break ; ch = this . regex . charAt ( off ++ ) ; if ( ch != ',' && ( ch < '0' || ch > '9' ) ) break ; if ( ch != ',' ) { min = ch - '0' ; while ( off < this . regexlen && ( ch = this . regex . charAt ( off ++ ) ) >= '0' && ch <= '9' ) { min = min * 10 + ch - '0' ; ch = - 1 ; } if ( ch < 0 ) break ; } max = min ; if ( ch == ',' ) { if ( off >= this . regexlen || ( ( ch = this . regex . charAt ( off ++ ) ) < '0' || ch > '9' ) && ch != '}' ) break ; if ( ch == '}' ) { max = - 1 ; } else { max = ch - '0' ; while ( off < this . regexlen && ( ch = this . regex . charAt ( off ++ ) ) >= '0' && ch <= '9' ) { max = max * 10 + ch - '0' ; ch = - 1 ; } if ( ch < 0 ) break ; } } if ( ch != '}' ) break ; if ( this . checkQuestion ( off ) ) { tok = Token . createNGClosure ( tok ) ; this . offset = off + 1 ; } else { tok = Token . createClosure ( tok ) ; this . offset = off ; } tok . setMin ( min ) ; tok . setMax ( max ) ; this . next ( ) ; } } return tok ; } Token parseAtom ( ) throws ParseException { int ch = this . read ( ) ; Token tok = null ; switch ( ch ) { case T_LPAREN : return this . processParen ( ) ; case T_LPAREN2 : return this . processParen2 ( ) ; case T_CONDITION : return this . processCondition ( ) ; case T_MODIFIERS : return this . processModifiers ( ) ; case T_INDEPENDENT : return this . processIndependent ( ) ; case T_DOT : this . next ( ) ; tok = Token . token_dot ; break ; case T_LBRACKET : return this . parseCharacterClass ( true ) ; case T_SET_OPERATIONS : return this . parseSetOperations ( ) ; case T_BACKSOLIDUS : switch ( this . chardata ) { case 'd' : case 'D' : case 'w' : case 'W' : case 's' : case 'S' : tok = this . getTokenForShorthand ( this . chardata ) ; this . next ( ) ; return tok ; case 'e' : case 'f' : case 'n' : case 'r' : case 't' : case 'u' : case 'v' : case 'x' : { int ch2 = this . decodeEscaped ( ) ; if ( ch2 < 0x10000 ) { tok = Token . createChar ( ch2 ) ; } else { tok = Token . createString ( REUtil . decomposeToSurrogates ( ch2 ) ) ; } } break ; case 'c' : return this . processBacksolidus_c ( ) ; case 'C' : return this . processBacksolidus_C ( ) ; case 'i' : return this . processBacksolidus_i ( ) ; case 'I' : return this . processBacksolidus_I ( ) ; case 'g' : return this . processBacksolidus_g ( ) ; case 'X' : return this . processBacksolidus_X ( ) ; case '1' : case '2' : case '3' : case '4' : case '5' : case '6' : case '7' : case '8' : case '9' : return this . processBackreference ( ) ; case 'P' : case 'p' : int pstart = this . offset ; tok = processBacksolidus_pP ( this . chardata ) ; if ( tok == null ) throw this . ex ( "parser.atom.5" , pstart ) ; break ; default : tok = Token . createChar ( this . chardata ) ; } this . next ( ) ; break ; case T_CHAR : tok = Token . createChar ( this . chardata ) ; this . next ( ) ; break ; default : throw this . ex ( "parser.atom.4" , this . offset - 1 ) ; } return tok ; } protected RangeToken processBacksolidus_pP ( int c ) throws ParseException { boolean positive = c == 'p' ; this . next ( ) ; if ( this . read ( ) != T_CHAR ) throw this . ex ( "parser.atom.2" , this . offset - 1 ) ; RangeToken tok ; switch ( this . chardata ) { case 'L' : tok = Token . getRange ( "L" , positive ) ; break ; case 'M' : tok = Token . getRange ( "M" , positive ) ; break ; case 'N' : tok = Token . getRange ( "N" , positive ) ; break ; case 'Z' : tok = Token . getRange ( "Z" , positive ) ; break ; case 'C' : tok = Token . getRange ( "C" , positive ) ; break ; case 'P' : tok = Token . getRange ( "P" , positive ) ; break ; case 'S' : tok = Token . getRange ( "S" , positive ) ; break ; case '{' : int namestart = this . offset ; int nameend = this . regex . indexOf ( '}' , namestart ) ; if ( nameend < 0 ) throw this . ex ( "parser.atom.3" , this . offset ) ; this . offset = nameend + 1 ; tok = Token . getRange ( this . regex . substring ( namestart , nameend ) , positive ) ; break ; default : throw this . ex ( "parser.atom.2" , this . offset - 1 ) ; } return tok ; } int processCIinCharacterClass ( RangeToken tok , int c ) { return this . decodeEscaped ( ) ; } protected RangeToken parseCharacterClass ( boolean useNrange ) throws ParseException { this . setContext ( S_INBRACKETS ) ; this . next ( ) ; boolean nrange = false ; RangeToken base = null ; RangeToken tok ; if ( this . read ( ) == T_CHAR && this . chardata == '^' ) { nrange = true ; this . next ( ) ; if ( useNrange ) { tok = Token . createNRange ( ) ; } else { base = Token . createRange ( ) ; base . addRange ( 0 , Token . UTF16_MAX ) ; tok = Token . createRange ( ) ; } } else { tok = Token . createRange ( ) ; } int type ; boolean firstloop = true ; while ( ( type = this . read ( ) ) != T_EOF ) { if ( type == T_CHAR && this . chardata == ']' && ! firstloop ) break ; firstloop = false ; int c = this . chardata ; boolean end = false ; if ( type == T_BACKSOLIDUS ) { switch ( c ) { case 'd' : case 'D' : case 'w' : case 'W' : case 's' : case 'S' : tok . mergeRanges ( this . getTokenForShorthand ( c ) ) ; end = true ; break ; case 'i' : case 'I' : case 'c' : case 'C' : c = this . processCIinCharacterClass ( tok , c ) ; if ( c < 0 ) end = true ; break ; case 'p' : case 'P' : int pstart = this . offset ; RangeToken tok2 = this . processBacksolidus_pP ( c ) ; if ( tok2 == null ) throw this . ex ( "parser.atom.5" , pstart ) ; tok . mergeRanges ( tok2 ) ; end = true ; break ; default : c = this . decodeEscaped ( ) ; } } else if ( type == T_POSIX_CHARCLASS_START ) { int nameend = this . regex . indexOf ( ':' , this . offset ) ; if ( nameend < 0 ) throw this . ex ( "parser.cc.1" , this . offset ) ; boolean positive = true ; if ( this . regex . charAt ( this . offset ) == '^' ) { this . offset ++ ; positive = false ; } String name = this . regex . substring ( this . offset , nameend ) ; RangeToken range = Token . getRange ( name , positive ) ; if ( range == null ) throw this . ex ( "parser.cc.3" , this . offset ) ; tok . mergeRanges ( range ) ; end = true ; if ( nameend + 1 >= this . regexlen || this . regex . charAt ( nameend + 1 ) != ']' ) throw this . ex ( "parser.cc.1" , nameend ) ; this . offset = nameend + 2 ; } this . next ( ) ; if ( ! end ) { if ( this . read ( ) != T_CHAR || this . chardata != '-' ) { tok . addRange ( c , c ) ; } else { this . next ( ) ; if ( ( type = this . read ( ) ) == T_EOF ) throw this . ex ( "parser.cc.2" , this . offset ) ; if ( type == T_CHAR && this . chardata == ']' ) { tok . addRange ( c , c ) ; tok . addRange ( '-' , '-' ) ; } else { int rangeend = this . chardata ; if ( type == T_BACKSOLIDUS ) rangeend = this . decodeEscaped ( ) ; this . next ( ) ; tok . addRange ( c , rangeend ) ; } } } if ( this . isSet ( RegularExpression . SPECIAL_COMMA ) && this . read ( ) == T_CHAR && this . chardata == ',' ) this . next ( ) ; } if ( this . read ( ) == T_EOF ) throw this . ex ( "parser.cc.2" , this . offset ) ; if ( ! useNrange && nrange ) { base . subtractRanges ( tok ) ; tok = base ; } tok . sortRanges ( ) ; tok . compactRanges ( ) ; this . setContext ( S_NORMAL ) ; this . next ( ) ; return tok ; } private RangeToken parseCharacterClass_old ( boolean useNrange ) throws ParseException { this . setContext ( S_INBRACKETS ) ; this . next ( ) ; boolean nrange = false ; RangeToken base = null ; RangeToken tok ; if ( this . read ( ) == T_CHAR && this . chardata == '^' ) { nrange = true ; this . next ( ) ; if ( useNrange ) { tok = Token . createNRange ( ) ; } else { base = Token . createRange ( ) ; base . addRange ( 0 , Token . UTF16_MAX ) ; tok = Token . createRange ( ) ; } } else { tok = Token . createRange ( ) ; } int type ; while ( ( type = this . read ( ) ) != T_EOF && ! ( type == T_CHAR && this . chardata == ']' ) ) { int c = this . chardata ; boolean end = false ; if ( type == T_BACKSOLIDUS ) { switch ( c ) { case 'd' : case 'D' : case 'w' : case 'W' : case 's' : case 'S' : tok . mergeRanges ( this . getTokenForShorthand ( c ) ) ; end = true ; break ; case 'i' : case 'I' : case 'c' : case 'C' : c = this . processCIinCharacterClass ( tok , c ) ; if ( c < 0 ) end = true ; break ; case 'p' : case 'P' : boolean positive = c == 'p' ; int pstart = this . offset ; this . next ( ) ; if ( this . read ( ) != T_CHAR ) throw ex ( "parser.atom.2" , this . offset - 1 ) ; RangeToken tok2 = null ; switch ( this . chardata ) { case 'L' : tok2 = Token . getRange ( "L" , positive ) ; break ; case 'M' : tok2 = Token . getRange ( "M" , positive ) ; break ; case 'N' : tok2 = Token . getRange ( "N" , positive ) ; break ; case 'Z' : tok2 = Token . getRange ( "Z" , positive ) ; break ; case 'C' : tok2 = Token . getRange ( "C" , positive ) ; break ; case 'P' : tok2 = Token . getRange ( "P" , positive ) ; break ; case 'S' : tok2 = Token . getRange ( "S" , positive ) ; break ; case '{' : pstart = this . offset ; int namestart = this . offset ; int nameend = this . regex . indexOf ( '}' , namestart ) ; if ( nameend < 0 ) throw ex ( "parser.atom.3" , this . offset ) ; this . offset = nameend + 1 ; tok2 = Token . getRange ( this . regex . substring ( namestart , nameend ) , positive ) ; break ; default : throw ex ( "parser.atom.2" , this . offset - 1 ) ; } if ( tok2 == null ) throw ex ( "parser.atom.5" , pstart ) ; tok . mergeRanges ( tok2 ) ; end = true ; break ; default : c = this . decodeEscaped ( ) ; } } else if ( type == T_POSIX_CHARCLASS_START ) { int nameend = this . regex . indexOf ( ':' , this . offset ) ; if ( nameend < 0 ) throw ex ( "parser.cc.1" , this . offset ) ; String name = this . regex . substring ( this . offset , nameend ) ; RangeToken range = Token . getRange ( name , true ) ; if ( range == null ) throw ex ( "parser.cc.3" , this . offset ) ; tok . mergeRanges ( range ) ; end = true ; if ( nameend + 1 >= this . regexlen || this . regex . charAt ( nameend + 1 ) != ']' ) throw ex ( "parser.cc.1" , nameend ) ; this . offset = nameend + 2 ; } this . next ( ) ; if ( ! end ) { if ( this . read ( ) != T_CHAR || this . chardata != '-' ) { tok . addRange ( c , c ) ; } else { this . next ( ) ; if ( ( type = this . read ( ) ) == T_EOF ) throw ex ( "parser.cc.2" , this . offset ) ; int rangeend = this . chardata ; if ( type == T_BACKSOLIDUS ) rangeend = this . decodeEscaped ( ) ; this . next ( ) ; tok . addRange ( c , rangeend ) ; } } if ( this . read ( ) == T_CHAR && this . chardata == ',' ) this . next ( ) ; } if ( this . read ( ) == T_EOF ) throw ex ( "parser.cc.2" , this . offset ) ; if ( ! useNrange && nrange ) { base . subtractRanges ( tok ) ; tok = base ; } tok . sortRanges ( ) ; tok . compactRanges ( ) ; this . setContext ( S_NORMAL ) ; this . next ( ) ; return tok ; } protected RangeToken parseSetOperations ( ) throws ParseException { RangeToken tok = this . parseCharacterClass ( false ) ; int type ; while ( ( type = this . read ( ) ) != T_RPAREN ) { int ch = this . chardata ; if ( type == T_CHAR && ( ch == '-' || ch == '&' ) || type == T_PLUS ) { this . next ( ) ; if ( this . read ( ) != T_LBRACKET ) throw ex ( "parser.ope.1" , this . offset - 1 ) ; RangeToken t2 = this . parseCharacterClass ( false ) ; if ( type == T_PLUS ) tok . mergeRanges ( t2 ) ; else if ( ch == '-' ) tok . subtractRanges ( t2 ) ; else if ( ch == '&' ) tok . intersectRanges ( t2 ) ; else throw new RuntimeException ( "ASSERT" ) ; } else { throw ex ( "parser.ope.2" , this . offset - 1 ) ; } } this . next ( ) ; return tok ; } Token getTokenForShorthand ( int ch ) { Token tok ; switch ( ch ) { case 'd' : tok = this . isSet ( RegularExpression . USE_UNICODE_CATEGORY ) ? Token . getRange ( "Nd" , true ) : Token . token_0to9 ; break ; case 'D' : tok = this . isSet ( RegularExpression . USE_UNICODE_CATEGORY ) ? Token . getRange ( "Nd" , false ) : Token . token_not_0to9 ; break ; case 'w' : tok = this . isSet ( RegularExpression . USE_UNICODE_CATEGORY ) ? Token . getRange ( "IsWord" , true ) : Token . token_wordchars ; break ; case 'W' : tok = this . isSet ( RegularExpression . USE_UNICODE_CATEGORY ) ? Token . getRange ( "IsWord" , false ) : Token . token_not_wordchars ; break ; case 's' : tok = this . isSet ( RegularExpression . USE_UNICODE_CATEGORY ) ? Token . getRange ( "IsSpace" , true ) : Token . token_spaces ; break ; case 'S' : tok = this . isSet ( RegularExpression . USE_UNICODE_CATEGORY ) ? Token . getRange ( "IsSpace" , false ) : Token . token_not_spaces ; break ; default : throw new RuntimeException ( "Internal Error: shorthands: \\u" + Integer . toString ( ch , 16 ) ) ; } return tok ; } int decodeEscaped ( ) throws ParseException { if ( this . read ( ) != T_BACKSOLIDUS ) throw ex ( "parser.next.1" , this . offset - 1 ) ; int c = this . chardata ; switch ( c ) { case 'e' : c = 0x1b ; break ; case 'f' : c = '\f' ; break ; case 'n' : c = '\n' ; break ; case 'r' : c = '\r' ; break ; case 't' : c = '\t' ; break ; case 'x' : this . next ( ) ; if ( this . read ( ) != T_CHAR ) throw ex ( "parser.descape.1" , this . offset - 1 ) ; if ( this . chardata == '{' ) { int v1 = 0 ; int uv = 0 ; do { this . next ( ) ; if ( this . read ( ) != T_CHAR ) throw ex ( "parser.descape.1" , this . offset - 1 ) ; if ( ( v1 = hexChar ( this . chardata ) ) < 0 ) break ; if ( uv > uv * 16 ) throw ex ( "parser.descape.2" , this . offset - 1 ) ; uv = uv * 16 + v1 ; } while ( true ) ; if ( this . chardata != '}' ) throw ex ( "parser.descape.3" , this . offset - 1 ) ; if ( uv > Token . UTF16_MAX ) throw ex ( "parser.descape.4" , this . offset - 1 ) ; c = uv ; } else { int v1 = 0 ; if ( this . read ( ) != T_CHAR || ( v1 = hexChar ( this . chardata ) ) < 0 ) throw ex ( "parser.descape.1" , this . offset - 1 ) ; int uv = v1 ; this . next ( ) ; if ( this . read ( ) != T_CHAR || ( v1 = hexChar ( this . chardata ) ) < 0 ) throw ex ( "parser.descape.1" , this . offset - 1 ) ; uv = uv * 16 + v1 ; c = uv ; } break ; case 'u' : int v1 = 0 ; this . next ( ) ; if ( this . read ( ) != T_CHAR || ( v1 = hexChar ( this . chardata ) ) < 0 ) throw ex ( "parser.descape.1" , this . offset - 1 ) ; int uv = v1 ; this . next ( ) ; if ( this . read ( ) != T_CHAR || ( v1 = hexChar ( this . chardata ) ) < 0 ) throw ex ( "parser.descape.1" , this . offset - 1 ) ; uv = uv * 16 + v1 ; this . next ( ) ; if ( this . read ( ) != T_CHAR || ( v1 = hexChar ( this . chardata ) ) < 0 ) throw ex ( "parser.descape.1" , this . offset - 1 ) ; uv = uv * 16 + v1 ; this . next ( ) ; if ( this . read ( ) != T_CHAR || ( v1 = hexChar ( this . chardata ) ) < 0 ) throw ex ( "parser.descape.1" , this . offset - 1 ) ; uv = uv * 16 + v1 ; c = uv ; break ; case 'v' : this . next ( ) ; if ( this . read ( ) != T_CHAR || ( v1 = hexChar ( this . chardata ) ) < 0 ) throw ex ( "parser.descape.1" , this . offset - 1 ) ; uv = v1 ; this . next ( ) ; if ( this . read ( ) != T_CHAR || ( v1 = hexChar ( this . chardata ) ) < 0 ) throw ex ( "parser.descape.1" , this . offset - 1 ) ; uv = uv * 16 + v1 ; this . next ( ) ; if ( this . read ( ) != T_CHAR || ( v1 = hexChar ( this . chardata ) ) < 0 ) throw ex ( "parser.descape.1" , this . offset - 1 ) ; uv = uv * 16 + v1 ; this . next ( ) ; if ( this . read ( ) != T_CHAR || ( v1 = hexChar ( this . chardata ) ) < 0 ) throw ex ( "parser.descape.1" , this . offset - 1 ) ; uv = uv * 16 + v1 ; this . next ( ) ; if ( this . read ( ) != T_CHAR || ( v1 = hexChar ( this . chardata ) ) < 0 ) throw ex ( "parser.descape.1" , this . offset - 1 ) ; uv = uv * 16 + v1 ; this . next ( ) ; if ( this . read ( ) != T_CHAR || ( v1 = hexChar ( this . chardata ) ) < 0 ) throw ex ( "parser.descape.1" , this . offset - 1 ) ; uv = uv * 16 + v1 ; if ( uv > Token . UTF16_MAX ) throw ex ( "parser.descappe.4" , this . offset - 1 ) ; c = uv ; break ; case 'A' : case 'Z' : case 'z' : throw ex ( "parser.descape.5" , this . offset - 2 ) ; default : } return c ; } static private final int hexChar ( int ch ) { if ( ch < '0' ) return - 1 ; if ( ch > 'f' ) return - 1 ; if ( ch <= '9' ) return ch - '0' ; if ( ch < 'A' ) return - 1 ; if ( ch <= 'F' ) return ch - 'A' + 10 ; if ( ch < 'a' ) return - 1 ; return ch - 'a' + 10 ; } } 	1	['50', '1', '1', '15', '105', '711', '2', '13', '3', '0.850863422', '3171', '0.076923077', '0', '0', '0.194285714', '0', '0', '61.64', '55', '2.48', '2']
package org . apache . html . dom ; import org . w3c . dom . * ; import org . w3c . dom . html . * ; public class HTMLFieldSetElementImpl extends HTMLElementImpl implements HTMLFieldSetElement , HTMLFormControl { public HTMLFieldSetElementImpl ( HTMLDocumentImpl owner , String name ) { super ( owner , name ) ; } } 	0	['1', '4', '0', '3', '2', '0', '0', '3', '1', '2', '6', '0', '0', '1', '1', '0', '0', '5', '0', '0', '0']
package org . apache . xerces . parsers ; import org . apache . xerces . framework . XMLAttrList ; import org . apache . xerces . framework . XMLContentSpec ; import org . apache . xerces . framework . XMLDocumentHandler ; import org . apache . xerces . framework . XMLParser ; import org . apache . xerces . readers . XMLEntityHandler ; import org . apache . xerces . utils . QName ; import org . apache . xerces . utils . StringPool ; import org . apache . xerces . validators . common . XMLAttributeDecl ; import org . apache . xerces . validators . common . XMLElementDecl ; import org . xml . sax . Attributes ; import org . xml . sax . AttributeList ; import org . xml . sax . ContentHandler ; import org . xml . sax . DocumentHandler ; import org . xml . sax . DTDHandler ; import org . xml . sax . EntityResolver ; import org . xml . sax . Parser ; import org . xml . sax . XMLReader ; import org . xml . sax . SAXException ; import org . xml . sax . SAXNotRecognizedException ; import org . xml . sax . SAXNotSupportedException ; import org . xml . sax . ext . DeclHandler ; import org . xml . sax . ext . LexicalHandler ; import org . xml . sax . helpers . AttributesImpl ; public class SAXParser extends XMLParser implements XMLDocumentHandler , XMLDocumentHandler . DTDHandler , Parser , XMLReader { private static final String RECOGNIZED_FEATURES [ ] = { "http://xml.org/sax/features/namespace-prefixes" , "http://xml.org/sax/features/string-interning" , } ; private static final String RECOGNIZED_PROPERTIES [ ] = { "http://xml.org/sax/properties/lexical-handler" , "http://xml.org/sax/properties/declaration-handler" , "http://xml.org/sax/properties/dom-node" , } ; private static final boolean DEBUG_CALLBACKS = false ; private DocumentHandler fDocumentHandler ; private org . xml . sax . DTDHandler fDTDHandler ; private ContentHandler fContentHandler ; private DeclHandler fDeclHandler ; private LexicalHandler fLexicalHandler ; private boolean fNamespacePrefixes = false ; private transient AttributesImpl fAttributes = new AttributesImpl ( ) ; public SAXParser ( ) { initHandlers ( true , this , this ) ; } protected SAXParser ( StringPool stringPool ) { super ( stringPool ) ; initHandlers ( true , this , this ) ; } public String [ ] getFeaturesRecognized ( ) { String superRecognized [ ] = super . getFeaturesRecognized ( ) ; String thisRecognized [ ] = RECOGNIZED_FEATURES ; int thisLength = thisRecognized . length ; if ( thisLength == 0 ) { return superRecognized ; } int superLength = superRecognized . length ; if ( superLength == 0 ) { return thisRecognized ; } String recognized [ ] = new String [ superLength + thisLength ] ; System . arraycopy ( superRecognized , 0 , recognized , 0 , superLength ) ; System . arraycopy ( thisRecognized , 0 , recognized , superLength , thisLength ) ; return recognized ; } public String [ ] getPropertiesRecognized ( ) { String superRecognized [ ] = super . getPropertiesRecognized ( ) ; String thisRecognized [ ] = RECOGNIZED_PROPERTIES ; int thisLength = thisRecognized . length ; if ( thisLength == 0 ) { return superRecognized ; } int superLength = superRecognized . length ; if ( superLength == 0 ) { return thisRecognized ; } String recognized [ ] = new String [ superLength + thisLength ] ; System . arraycopy ( superRecognized , 0 , recognized , 0 , superLength ) ; System . arraycopy ( thisRecognized , 0 , recognized , superLength , thisLength ) ; return recognized ; } protected void setDeclHandler ( DeclHandler handler ) throws SAXNotRecognizedException , SAXNotSupportedException { if ( fParseInProgress ) { throw new SAXNotSupportedException ( "PAR011 Feature: http://xml.org/sax/properties/declaration-handler" + " is not supported during parse." + "\nhttp://xml.org/sax/properties/declaration-handler" ) ; } fDeclHandler = handler ; } protected DeclHandler getDeclHandler ( ) throws SAXNotRecognizedException , SAXNotSupportedException { return fDeclHandler ; } protected void setLexicalHandler ( LexicalHandler handler ) throws SAXNotRecognizedException , SAXNotSupportedException { if ( fParseInProgress ) { throw new SAXNotSupportedException ( "PAR011 Feature: http://xml.org/sax/properties/lexical-handler" + " is not supported during parse." + "\nhttp://xml.org/sax/properties/lexical-handler" ) ; } fLexicalHandler = handler ; } protected LexicalHandler getLexicalHandler ( ) throws SAXNotRecognizedException , SAXNotSupportedException { return fLexicalHandler ; } public void setDocumentHandler ( DocumentHandler handler ) { fDocumentHandler = handler ; } public void setDTDHandler ( org . xml . sax . DTDHandler handler ) { fDTDHandler = handler ; } public org . xml . sax . DTDHandler getDTDHandler ( ) { return fDTDHandler ; } protected void setNamespacePrefixes ( boolean process ) throws SAXNotRecognizedException , SAXNotSupportedException { if ( fParseInProgress ) { throw new SAXNotSupportedException ( "PAR004 Cannot setFeature(http://xml.org/sax/features/namespace-prefixes): parse is in progress.\n" + "http://xml.org/sax/features/namespace-prefixes" ) ; } fNamespacePrefixes = process ; } protected boolean getNamespacePrefixes ( ) throws SAXNotRecognizedException , SAXNotSupportedException { return fNamespacePrefixes ; } public void setFeature ( String featureId , boolean state ) throws SAXNotRecognizedException , SAXNotSupportedException { if ( featureId . startsWith ( SAX2_FEATURES_PREFIX ) ) { String feature = featureId . substring ( SAX2_FEATURES_PREFIX . length ( ) ) ; if ( feature . equals ( "namespace-prefixes" ) ) { setNamespacePrefixes ( state ) ; return ; } if ( feature . equals ( "string-interning" ) ) { if ( state ) { throw new SAXNotSupportedException ( "PAR018 " + state + " state for feature \"" + featureId + "\" is not supported.\n" + state + '\t' + featureId ) ; } return ; } } super . setFeature ( featureId , state ) ; } public boolean getFeature ( String featureId ) throws SAXNotRecognizedException , SAXNotSupportedException { if ( featureId . startsWith ( SAX2_FEATURES_PREFIX ) ) { String feature = featureId . substring ( SAX2_FEATURES_PREFIX . length ( ) ) ; if ( feature . equals ( "namespace-prefixes" ) ) { return getNamespacePrefixes ( ) ; } if ( feature . equals ( "string-interning" ) ) { return false ; } } return super . getFeature ( featureId ) ; } public void setProperty ( String propertyId , Object value ) throws SAXNotRecognizedException , SAXNotSupportedException { if ( propertyId . startsWith ( SAX2_PROPERTIES_PREFIX ) ) { String property = propertyId . substring ( SAX2_PROPERTIES_PREFIX . length ( ) ) ; if ( property . equals ( "lexical-handler" ) ) { try { setLexicalHandler ( ( LexicalHandler ) value ) ; } catch ( ClassCastException e ) { throw new SAXNotSupportedException ( "PAR012 For propertyID \"" + propertyId + "\", the value \"" + value + "\" cannot be cast to LexicalHandler." + '\n' + propertyId + '\t' + value + "\tLexicalHandler" ) ; } return ; } if ( property . equals ( "declaration-handler" ) ) { try { setDeclHandler ( ( DeclHandler ) value ) ; } catch ( ClassCastException e ) { throw new SAXNotSupportedException ( "PAR012 For propertyID \"" + propertyId + "\", the value \"" + value + "\" cannot be cast to DeclHandler." + '\n' + propertyId + '\t' + value + "\tDeclHandler" ) ; } return ; } if ( property . equals ( "dom-node" ) ) { throw new SAXNotSupportedException ( "PAR013 Property \"" + propertyId + "\" is read only." + '\n' + propertyId ) ; } } super . setProperty ( propertyId , value ) ; } public Object getProperty ( String propertyId ) throws SAXNotRecognizedException , SAXNotSupportedException { if ( propertyId . startsWith ( SAX2_PROPERTIES_PREFIX ) ) { String property = propertyId . substring ( SAX2_PROPERTIES_PREFIX . length ( ) ) ; if ( property . equals ( "lexical-handler" ) ) { return getLexicalHandler ( ) ; } if ( property . equals ( "declaration-handler" ) ) { return getDeclHandler ( ) ; } if ( property . equals ( "dom-node" ) ) { throw new SAXNotSupportedException ( "PAR014 Cannot getProperty(\"" + propertyId + "\". No DOM Tree exists.\n" + propertyId ) ; } } return super . getProperty ( propertyId ) ; } public void setContentHandler ( ContentHandler handler ) { if ( handler == null ) { throw new NullPointerException ( ) ; } fContentHandler = handler ; } public ContentHandler getContentHandler ( ) { return fContentHandler ; } public void startDTD ( QName rootElement , int publicId , int systemId ) throws Exception { if ( fLexicalHandler != null || DEBUG_CALLBACKS ) { String name = fStringPool . toString ( rootElement . rawname ) ; String pubid = fStringPool . toString ( publicId ) ; String sysid = fStringPool . toString ( systemId ) ; if ( DEBUG_CALLBACKS ) { System . err . println ( "startDTD(" + name + ", " + pubid + ", " + sysid + ")" ) ; } if ( fLexicalHandler != null ) { fLexicalHandler . startDTD ( name , pubid , sysid ) ; } } } public void endDTD ( ) throws Exception { if ( DEBUG_CALLBACKS ) { System . err . println ( "endDTD()" ) ; } if ( fLexicalHandler != null ) { fLexicalHandler . endDTD ( ) ; } } public void elementDecl ( QName elementDecl , int contentSpecType , int contentSpecIndex , XMLContentSpec . Provider contentSpecProvider ) throws Exception { if ( fDeclHandler != null || DEBUG_CALLBACKS ) { String name = fStringPool . toString ( elementDecl . rawname ) ; String contentModel ; if ( contentSpecType == XMLElementDecl . TYPE_ANY ) { contentModel = "ANY" ; } else if ( contentSpecType == XMLElementDecl . TYPE_EMPTY ) { contentModel = "EMPTY" ; } else { contentModel = XMLContentSpec . toString ( contentSpecProvider , fStringPool , contentSpecIndex ) ; } if ( DEBUG_CALLBACKS ) { System . err . println ( "elementDecl(" + name + ", " + contentModel + ")" ) ; } if ( fDeclHandler != null ) { fDeclHandler . elementDecl ( name , contentModel ) ; } } } public void attlistDecl ( QName elementDecl , QName attributeDecl , int attType , boolean attList , String enumString , int attDefaultType , int attDefaultValue ) throws Exception { if ( fDeclHandler != null || DEBUG_CALLBACKS ) { String eName = fStringPool . toString ( elementDecl . rawname ) ; String aName = fStringPool . toString ( attributeDecl . rawname ) ; String aType = enumString ; if ( attType != XMLAttributeDecl . TYPE_ENUMERATION ) { switch ( attType ) { case XMLAttributeDecl . TYPE_CDATA : { aType = "CDATA" ; break ; } case XMLAttributeDecl . TYPE_ENTITY : { aType = attList ? "ENTITIES" : "ENTITY" ; break ; } case XMLAttributeDecl . TYPE_ID : { aType = "ID" ; break ; } case XMLAttributeDecl . TYPE_IDREF : { aType = attList ? "IDREFS" : "IDREF" ; break ; } case XMLAttributeDecl . TYPE_NMTOKEN : { aType = attList ? "NMTOKENS" : "NMTOKEN" ; break ; } case XMLAttributeDecl . TYPE_NOTATION : { aType = "NOTATION " + enumString ; break ; } } } String aDefaultType = null ; switch ( attDefaultType ) { case XMLAttributeDecl . DEFAULT_TYPE_FIXED : { aDefaultType = "#FIXED" ; break ; } case XMLAttributeDecl . DEFAULT_TYPE_IMPLIED : { aDefaultType = "#IMPLIED" ; break ; } case XMLAttributeDecl . DEFAULT_TYPE_REQUIRED : { aDefaultType = "#REQUIRED" ; break ; } } String aDefaultValue = fStringPool . toString ( attDefaultValue ) ; if ( DEBUG_CALLBACKS ) { System . err . println ( "attributeDecl(" + eName + ", " + aName + ", " + aType + ", " + aDefaultType + ", " + aDefaultValue + ")" ) ; } if ( fDeclHandler != null ) { fDeclHandler . attributeDecl ( eName , aName , aType , aDefaultType , aDefaultValue ) ; } } } public void internalPEDecl ( int entityName , int entityValue ) throws Exception { if ( fDeclHandler != null || DEBUG_CALLBACKS ) { String name = "%" + fStringPool . toString ( entityName ) ; String value = fStringPool . toString ( entityValue ) ; if ( DEBUG_CALLBACKS ) { System . err . println ( "internalEntityDecl(" + name + ", " + value + ")" ) ; } if ( fDeclHandler != null ) { fDeclHandler . internalEntityDecl ( name , value ) ; } } } public void externalPEDecl ( int entityName , int publicId , int systemId ) throws Exception { if ( fDeclHandler != null || DEBUG_CALLBACKS ) { String name = "%" + fStringPool . toString ( entityName ) ; String pubid = fStringPool . toString ( publicId ) ; String sysid = fStringPool . toString ( systemId ) ; if ( DEBUG_CALLBACKS ) { System . err . println ( "externalEntityDecl(" + name + ", " + pubid + ", " + sysid + ")" ) ; } if ( fDeclHandler != null ) { fDeclHandler . externalEntityDecl ( name , pubid , sysid ) ; } } } public void internalEntityDecl ( int entityName , int entityValue ) throws Exception { if ( fDeclHandler != null || DEBUG_CALLBACKS ) { String name = fStringPool . toString ( entityName ) ; String value = fStringPool . toString ( entityValue ) ; if ( DEBUG_CALLBACKS ) { System . err . println ( "internalEntityDecl(" + name + ", " + value + ")" ) ; } if ( fDeclHandler != null ) { fDeclHandler . internalEntityDecl ( name , value ) ; } } } public void externalEntityDecl ( int entityName , int publicId , int systemId ) throws Exception { if ( fDeclHandler != null || DEBUG_CALLBACKS ) { String name = fStringPool . toString ( entityName ) ; String pubid = fStringPool . toString ( publicId ) ; String sysid = fStringPool . toString ( systemId ) ; if ( DEBUG_CALLBACKS ) { System . err . println ( "externalEntityDecl(" + name + ", " + pubid + ", " + sysid + ")" ) ; } if ( fDeclHandler != null ) { fDeclHandler . externalEntityDecl ( name , pubid , sysid ) ; } } } public void unparsedEntityDecl ( int entityName , int publicId , int systemId , int notationName ) throws Exception { if ( fDTDHandler != null || DEBUG_CALLBACKS ) { String name = fStringPool . toString ( entityName ) ; String pubid = fStringPool . toString ( publicId ) ; String sysid = fStringPool . toString ( systemId ) ; String notation = fStringPool . toString ( notationName ) ; if ( DEBUG_CALLBACKS ) { System . err . println ( "unparsedEntityDecl(" + name + ", " + pubid + ", " + sysid + ", " + notation + ")" ) ; } if ( fDTDHandler != null ) { fDTDHandler . unparsedEntityDecl ( name , pubid , sysid , notation ) ; } } } public void notationDecl ( int notationName , int publicId , int systemId ) throws Exception { if ( fDTDHandler != null || DEBUG_CALLBACKS ) { String name = fStringPool . toString ( notationName ) ; String pubid = fStringPool . toString ( publicId ) ; String sysid = fStringPool . toString ( systemId ) ; if ( DEBUG_CALLBACKS ) { System . err . println ( "notationDecl(" + name + ", " + pubid + ", " + sysid + ")" ) ; } if ( fDTDHandler != null ) { fDTDHandler . notationDecl ( name , pubid , sysid ) ; } } } public void startDocument ( ) throws Exception { if ( DEBUG_CALLBACKS ) { System . err . println ( "setDocumentLocator(<locator>)" ) ; System . err . println ( "startDocument()" ) ; } if ( fDocumentHandler != null ) { fDocumentHandler . setDocumentLocator ( getLocator ( ) ) ; fDocumentHandler . startDocument ( ) ; } if ( fContentHandler != null ) { fContentHandler . setDocumentLocator ( getLocator ( ) ) ; fContentHandler . startDocument ( ) ; } } public void endDocument ( ) throws Exception { if ( DEBUG_CALLBACKS ) { System . err . println ( "endDocument()" ) ; } if ( fDocumentHandler != null ) { fDocumentHandler . endDocument ( ) ; } if ( fContentHandler != null ) { fContentHandler . endDocument ( ) ; } } public void xmlDecl ( int versionIndex , int encodingIndex , int standaloneIndex ) throws Exception { if ( DEBUG_CALLBACKS ) { String notes = "" ; if ( versionIndex != - 1 ) notes += " version='" + fStringPool . toString ( versionIndex ) + "'" ; if ( encodingIndex != - 1 ) notes += " encoding='" + fStringPool . toString ( encodingIndex ) + "'" ; if ( standaloneIndex != - 1 ) notes += " standalone='" + fStringPool . toString ( standaloneIndex ) + "'" ; System . err . println ( "xmlDecl(<?xml" + notes + "?>)" ) ; } fStringPool . releaseString ( versionIndex ) ; fStringPool . releaseString ( encodingIndex ) ; fStringPool . releaseString ( standaloneIndex ) ; } public void textDecl ( int versionIndex , int encodingIndex ) throws Exception { if ( DEBUG_CALLBACKS ) { String notes = "" ; if ( versionIndex != - 1 ) notes += " version='" + fStringPool . toString ( versionIndex ) + "'" ; if ( encodingIndex != - 1 ) notes += " encoding='" + fStringPool . toString ( encodingIndex ) + "'" ; System . err . println ( "textDecl(<?xml" + notes + "?>)" ) ; } fStringPool . releaseString ( versionIndex ) ; fStringPool . releaseString ( encodingIndex ) ; } public void startNamespaceDeclScope ( int prefix , int uri ) throws Exception { if ( fContentHandler != null || DEBUG_CALLBACKS ) { String p = fStringPool . toString ( prefix ) ; String ns = fStringPool . toString ( uri ) ; if ( DEBUG_CALLBACKS ) { System . err . println ( "startNamespaceDeclScope(" + p + ", " + ns + ")" ) ; } if ( fContentHandler != null ) { fContentHandler . startPrefixMapping ( p , ns ) ; } } } public void endNamespaceDeclScope ( int prefix ) throws Exception { if ( fContentHandler != null || DEBUG_CALLBACKS ) { String p = fStringPool . toString ( prefix ) ; if ( DEBUG_CALLBACKS ) { System . err . println ( "endNamespaceDeclScope(" + p + ")" ) ; } if ( fContentHandler != null ) { fContentHandler . endPrefixMapping ( p ) ; } } } public void internalSubset ( int internalSubset ) { } public void startElement ( QName element , XMLAttrList attrList , int attrListIndex ) throws Exception { String name = fStringPool . toString ( element . rawname ) ; AttributeList attrs = attrList . getAttributeList ( attrListIndex ) ; if ( DEBUG_CALLBACKS ) { String atts = attrs . getLength ( ) > 0 ? "" : " " ; for ( int i = 0 ; i < attrs . getLength ( ) ; i ++ ) { atts += " " + attrs . getName ( i ) + "='" + attrs . getValue ( i ) + "'" ; } System . err . println ( "startElement(" + name + "," + atts + ")" ) ; } if ( fDocumentHandler != null ) { fDocumentHandler . startElement ( name , attrs ) ; } if ( fContentHandler != null ) { boolean namespaces = getNamespaces ( ) ; int uriIndex = element . uri ; String uri = uriIndex != - 1 && namespaces ? fStringPool . toString ( uriIndex ) : "" ; int localIndex = element . localpart ; String local = localIndex != - 1 && namespaces ? fStringPool . toString ( localIndex ) : "" ; String raw = name ; fAttributes . clear ( ) ; for ( int attrIndex = attrList . getFirstAttr ( attrListIndex ) ; attrIndex != - 1 ; attrIndex = attrList . getNextAttr ( attrIndex ) ) { int attrNameIndex = attrList . getAttrName ( attrIndex ) ; int attrUriIndex = attrList . getAttrURI ( attrIndex ) ; String attrUri = attrUriIndex != - 1 && namespaces ? fStringPool . toString ( attrUriIndex ) : "" ; int attrLocalIndex = attrList . getAttrLocalpart ( attrIndex ) ; String attrLocal = attrLocalIndex != - 1 && namespaces ? fStringPool . toString ( attrLocalIndex ) : "" ; String attrRaw = fStringPool . toString ( attrNameIndex ) ; String attrType = fStringPool . toString ( attrList . getAttType ( attrIndex ) ) ; String attrValue = fStringPool . toString ( attrList . getAttValue ( attrIndex ) ) ; int attrPrefix = attrList . getAttrPrefix ( attrIndex ) ; boolean namespacePrefixes = getNamespacePrefixes ( ) ; if ( ! namespaces || namespacePrefixes || ( attrPrefix != fStringPool . addSymbol ( "xmlns" ) && attrLocalIndex != fStringPool . addSymbol ( "xmlns" ) ) ) fAttributes . addAttribute ( attrUri , attrLocal , attrRaw , attrType , attrValue ) ; } fContentHandler . startElement ( uri , local , raw , fAttributes ) ; } attrList . releaseAttrList ( attrListIndex ) ; } public void endElement ( QName element ) throws Exception { if ( DEBUG_CALLBACKS ) { System . err . println ( "endElement(" + fStringPool . toString ( element . rawname ) + ")" ) ; } if ( fDocumentHandler != null ) { fDocumentHandler . endElement ( fStringPool . toString ( element . rawname ) ) ; } if ( fContentHandler != null ) { boolean namespaces = getNamespaces ( ) ; int uriIndex = element . uri ; String uri = uriIndex != - 1 && namespaces ? fStringPool . toString ( uriIndex ) : "" ; int localIndex = element . localpart ; String local = localIndex != - 1 && namespaces ? fStringPool . toString ( localIndex ) : "" ; String raw = fStringPool . toString ( element . rawname ) ; fContentHandler . endElement ( uri , local , raw ) ; } } public void startEntityReference ( int entityName , int entityType , int entityContext ) throws Exception { if ( fLexicalHandler != null || DEBUG_CALLBACKS ) { switch ( entityType ) { case XMLEntityHandler . ENTITYTYPE_INTERNAL_PE : case XMLEntityHandler . ENTITYTYPE_EXTERNAL_PE : if ( DEBUG_CALLBACKS ) { System . err . println ( "startEntity(%" + fStringPool . toString ( entityName ) + ")" ) ; } if ( fLexicalHandler != null ) { fLexicalHandler . startEntity ( "%" + fStringPool . toString ( entityName ) ) ; } break ; case XMLEntityHandler . ENTITYTYPE_INTERNAL : case XMLEntityHandler . ENTITYTYPE_EXTERNAL : if ( DEBUG_CALLBACKS ) { System . err . println ( "startEntity(" + fStringPool . toString ( entityName ) + ")" ) ; } if ( fLexicalHandler != null ) { fLexicalHandler . startEntity ( fStringPool . toString ( entityName ) ) ; } break ; case XMLEntityHandler . ENTITYTYPE_UNPARSED : throw new RuntimeException ( "PAR015 startEntityReference(): ENTITYTYPE_UNPARSED" ) ; case XMLEntityHandler . ENTITYTYPE_DOCUMENT : break ; case XMLEntityHandler . ENTITYTYPE_EXTERNAL_SUBSET : if ( DEBUG_CALLBACKS ) { System . err . println ( "startEntity(\"[dtd]\")" ) ; } if ( fLexicalHandler != null ) { fLexicalHandler . startEntity ( "[dtd]" ) ; } break ; } } } public void endEntityReference ( int entityName , int entityType , int entityContext ) throws Exception { if ( fLexicalHandler != null || DEBUG_CALLBACKS ) { switch ( entityType ) { case XMLEntityHandler . ENTITYTYPE_INTERNAL_PE : case XMLEntityHandler . ENTITYTYPE_EXTERNAL_PE : if ( DEBUG_CALLBACKS ) { System . err . println ( "endEntity(%" + fStringPool . toString ( entityName ) + ")" ) ; } if ( fLexicalHandler != null ) { fLexicalHandler . endEntity ( "%" + fStringPool . toString ( entityName ) ) ; } break ; case XMLEntityHandler . ENTITYTYPE_INTERNAL : case XMLEntityHandler . ENTITYTYPE_EXTERNAL : if ( DEBUG_CALLBACKS ) { System . err . println ( "endEntity(" + fStringPool . toString ( entityName ) + ")" ) ; } if ( fLexicalHandler != null ) { fLexicalHandler . endEntity ( fStringPool . toString ( entityName ) ) ; } break ; case XMLEntityHandler . ENTITYTYPE_UNPARSED : throw new RuntimeException ( "PAR016 endEntityReference(): ENTITYTYPE_UNPARSED" ) ; case XMLEntityHandler . ENTITYTYPE_DOCUMENT : break ; case XMLEntityHandler . ENTITYTYPE_EXTERNAL_SUBSET : if ( DEBUG_CALLBACKS ) { System . err . println ( "endEntity(\"[dtd]\")" ) ; } if ( fLexicalHandler != null ) { fLexicalHandler . endEntity ( "[dtd]" ) ; } break ; } } } public void startCDATA ( ) throws Exception { if ( DEBUG_CALLBACKS ) { System . err . println ( "startCDATA()" ) ; } if ( fLexicalHandler != null ) { fLexicalHandler . startCDATA ( ) ; } } public void endCDATA ( ) throws Exception { if ( DEBUG_CALLBACKS ) { System . err . println ( "endCDATA()" ) ; } if ( fLexicalHandler != null ) { fLexicalHandler . endCDATA ( ) ; } } public void characters ( int dataIndex ) throws Exception { throw new RuntimeException ( "PAR017 cannot happen 5\n5" ) ; } public void ignorableWhitespace ( int dataIndex ) throws Exception { throw new RuntimeException ( "PAR017 cannot happen 6\n6" ) ; } public void processingInstruction ( int piTarget , int piData ) throws Exception { if ( fDocumentHandler != null || fContentHandler != null || DEBUG_CALLBACKS ) { String target = fStringPool . orphanString ( piTarget ) ; String data = piData == - 1 ? "" : fStringPool . orphanString ( piData ) ; if ( DEBUG_CALLBACKS ) { System . err . println ( "processingInstruction(" + target + ", " + data + ")" ) ; } if ( fDocumentHandler != null ) { fDocumentHandler . processingInstruction ( target , data ) ; } if ( fContentHandler != null ) { fContentHandler . processingInstruction ( target , data ) ; } } else { fStringPool . releaseString ( piTarget ) ; fStringPool . releaseString ( piData ) ; } } public void comment ( int dataIndex ) throws Exception { if ( fLexicalHandler != null || DEBUG_CALLBACKS ) { String data = fStringPool . orphanString ( dataIndex ) ; if ( DEBUG_CALLBACKS ) { System . err . println ( "comment(" + data + ")" ) ; } if ( fLexicalHandler != null ) { fLexicalHandler . comment ( data . toCharArray ( ) , 0 , data . length ( ) ) ; } } else { fStringPool . releaseString ( dataIndex ) ; } } public void characters ( char ch [ ] , int start , int length ) throws Exception { if ( DEBUG_CALLBACKS ) { System . err . println ( "characters(<char-data>) length " + length ) ; } if ( fDocumentHandler != null ) { fDocumentHandler . characters ( ch , start , length ) ; } if ( fContentHandler != null ) { fContentHandler . characters ( ch , start , length ) ; } } public void ignorableWhitespace ( char ch [ ] , int start , int length ) throws Exception { if ( DEBUG_CALLBACKS ) { System . err . println ( "ignorableWhitespace(<white-space>)" ) ; } if ( fDocumentHandler != null ) { fDocumentHandler . ignorableWhitespace ( ch , start , length ) ; } if ( fContentHandler != null ) { fContentHandler . ignorableWhitespace ( ch , start , length ) ; } } } 	1	['49', '2', '1', '10', '124', '608', '2', '8', '41', '0.9', '1409', '1', '6', '0.737142857', '0.131944444', '2', '9', '27.55102041', '3', '1.0408', '1']
package org . w3c . dom . html ; public interface HTMLAnchorElement extends HTMLElement { public String getAccessKey ( ) ; public void setAccessKey ( String accessKey ) ; public String getCharset ( ) ; public void setCharset ( String charset ) ; public String getCoords ( ) ; public void setCoords ( String coords ) ; public String getHref ( ) ; public void setHref ( String href ) ; public String getHreflang ( ) ; public void setHreflang ( String hreflang ) ; public String getName ( ) ; public void setName ( String name ) ; public String getRel ( ) ; public void setRel ( String rel ) ; public String getRev ( ) ; public void setRev ( String rev ) ; public String getShape ( ) ; public void setShape ( String shape ) ; public int getTabIndex ( ) ; public void setTabIndex ( int tabIndex ) ; public String getTarget ( ) ; public void setTarget ( String target ) ; public String getType ( ) ; public void setType ( String type ) ; public void blur ( ) ; public void focus ( ) ; } 	0	['26', '1', '0', '0', '26', '325', '0', '0', '26', '2', '26', '0', '0', '0', '0.487179487', '0', '0', '0', '1', '1', '0']
package org . apache . xerces . dom ; import java . util . Enumeration ; import java . util . Vector ; import org . apache . xerces . utils . StringPool ; import org . w3c . dom . * ; public class DeferredElementImpl extends ElementImpl implements DeferredNode { static final long serialVersionUID = - 7670981133940934842L ; protected transient int fNodeIndex ; DeferredElementImpl ( DeferredDocumentImpl ownerDoc , int nodeIndex ) { super ( ownerDoc , null ) ; fNodeIndex = nodeIndex ; needsSyncChildren ( true ) ; } public final int getNodeIndex ( ) { return fNodeIndex ; } protected final void synchronizeData ( ) { needsSyncData ( false ) ; DeferredDocumentImpl ownerDocument = ( DeferredDocumentImpl ) this . ownerDocument ; int elementTypeName = ownerDocument . getNodeName ( fNodeIndex ) ; StringPool pool = ownerDocument . getStringPool ( ) ; name = pool . toString ( elementTypeName ) ; setupDefaultAttributes ( ) ; int index = ownerDocument . getNodeValue ( fNodeIndex ) ; if ( index != - 1 ) { NamedNodeMap attrs = getAttributes ( ) ; do { NodeImpl attr = ( NodeImpl ) ownerDocument . getNodeObject ( index ) ; attrs . setNamedItem ( attr ) ; index = ownerDocument . getPrevSibling ( index ) ; } while ( index != - 1 ) ; } } protected final void synchronizeChildren ( ) { synchronizeChildren ( fNodeIndex ) ; } } 	1	['4', '3', '0', '6', '17', '0', '1', '6', '1', '0.666666667', '75', '0.5', '0', '0.96', '0.5', '2', '8', '17.25', '3', '1.25', '2']
package org . apache . xerces . dom ; import org . w3c . dom . * ; public class TextImpl extends CharacterDataImpl implements CharacterData , Text { static final long serialVersionUID = - 5294980852957403469L ; public TextImpl ( DocumentImpl ownerDoc , String data ) { super ( ownerDoc , data ) ; } public short getNodeType ( ) { return Node . TEXT_NODE ; } public String getNodeName ( ) { return "#text" ; } public void setIgnorableWhitespace ( boolean ignore ) { if ( needsSyncData ( ) ) { synchronizeData ( ) ; } isIgnorableWhitespace ( ignore ) ; } public boolean isIgnorableWhitespace ( ) { if ( needsSyncData ( ) ) { synchronizeData ( ) ; } return internalIsIgnorableWhitespace ( ) ; } public Text splitText ( int offset ) throws DOMException { if ( isReadOnly ( ) ) { throw new DOMException ( DOMException . NO_MODIFICATION_ALLOWED_ERR , "DOM001 Modification not allowed" ) ; } if ( needsSyncData ( ) ) { synchronizeData ( ) ; } if ( offset < 0 || offset > data . length ( ) ) { throw new DOMException ( DOMException . INDEX_SIZE_ERR , "DOM004 Index out of bounds" ) ; } Text newText = getOwnerDocument ( ) . createTextNode ( data . substring ( offset ) ) ; setNodeValue ( data . substring ( 0 , offset ) ) ; Node parentNode = getParentNode ( ) ; if ( parentNode != null ) { parentNode . insertBefore ( newText , nextSibling ) ; } return newText ; } } 	0	['6', '3', '2', '9', '21', '15', '7', '3', '6', '1.2', '88', '0', '0', '0.915254237', '0.333333333', '1', '4', '13.5', '2', '1.1667', '0']
package org . apache . xerces . dom ; import java . util . Vector ; import org . apache . xerces . framework . XMLAttrList ; import org . apache . xerces . utils . StringPool ; import org . w3c . dom . * ; public class DeferredDocumentImpl extends DocumentImpl implements DeferredNode { static final long serialVersionUID = 5186323580749626857L ; private static final boolean DEBUG_PRINT_REF_COUNTS = false ; private static final boolean DEBUG_PRINT_TABLES = false ; private static final boolean DEBUG_IDS = false ; protected static final int CHUNK_SHIFT = 11 ; protected static final int CHUNK_SIZE = ( 1 << CHUNK_SHIFT ) ; protected static final int CHUNK_MASK = CHUNK_SIZE - 1 ; protected static final int INITIAL_CHUNK_COUNT = ( 1 << ( 16 - CHUNK_SHIFT ) ) ; protected transient int fNodeCount = 0 ; protected transient int fNodeType [ ] [ ] ; protected transient int fNodeName [ ] [ ] ; protected transient int fNodeValue [ ] [ ] ; protected transient int fNodeParent [ ] [ ] ; protected transient int fNodeLastChild [ ] [ ] ; protected transient int fNodePrevSib [ ] [ ] ; protected transient int fNodeURI [ ] [ ] ; protected transient int fIdCount ; protected transient int fIdName [ ] ; protected transient int fIdElement [ ] ; protected transient StringPool fStringPool ; protected boolean fNamespacesEnabled = false ; public DeferredDocumentImpl ( StringPool stringPool ) { this ( stringPool , false ) ; } public DeferredDocumentImpl ( StringPool stringPool , boolean namespacesEnabled ) { this ( stringPool , namespacesEnabled , false ) ; } public DeferredDocumentImpl ( StringPool stringPool , boolean namespaces , boolean grammarAccess ) { super ( grammarAccess ) ; fStringPool = stringPool ; needsSyncData ( true ) ; needsSyncChildren ( true ) ; fNamespacesEnabled = namespaces ; } boolean getNamespacesEnabled ( ) { return fNamespacesEnabled ; } public int createDocument ( ) { int nodeIndex = createNode ( Node . DOCUMENT_NODE ) ; return nodeIndex ; } public int createDocumentType ( int rootElementNameIndex , int publicId , int systemId ) { int nodeIndex = createNode ( Node . DOCUMENT_TYPE_NODE ) ; int chunk = nodeIndex > > CHUNK_SHIFT ; int index = nodeIndex & CHUNK_MASK ; int extraDataIndex = createNode ( ( short ) 0 ) ; int echunk = extraDataIndex > > CHUNK_SHIFT ; int eindex = extraDataIndex & CHUNK_MASK ; setChunkIndex ( fNodeName , rootElementNameIndex , chunk , index ) ; setChunkIndex ( fNodeValue , extraDataIndex , chunk , index ) ; setChunkIndex ( fNodeName , publicId , echunk , eindex ) ; setChunkIndex ( fNodeValue , systemId , echunk , eindex ) ; return nodeIndex ; } public void setInternalSubset ( int doctypeIndex , int subsetIndex ) { int chunk = doctypeIndex > > CHUNK_SHIFT ; int index = doctypeIndex & CHUNK_MASK ; int extraDataIndex = fNodeValue [ chunk ] [ index ] ; int echunk = extraDataIndex > > CHUNK_SHIFT ; int eindex = extraDataIndex & CHUNK_MASK ; fNodeLastChild [ echunk ] [ eindex ] = subsetIndex ; } public int createNotation ( int notationName , int publicId , int systemId ) throws Exception { int nodeIndex = createNode ( Node . NOTATION_NODE ) ; int chunk = nodeIndex > > CHUNK_SHIFT ; int index = nodeIndex & CHUNK_MASK ; int extraDataIndex = createNode ( ( short ) 0 ) ; int echunk = extraDataIndex > > CHUNK_SHIFT ; int eindex = extraDataIndex & CHUNK_MASK ; setChunkIndex ( fNodeName , notationName , chunk , index ) ; setChunkIndex ( fNodeValue , extraDataIndex , chunk , index ) ; setChunkIndex ( fNodeName , publicId , echunk , eindex ) ; setChunkIndex ( fNodeValue , systemId , echunk , eindex ) ; return nodeIndex ; } public int createEntity ( int entityName , int publicId , int systemId , int notationName ) throws Exception { int nodeIndex = createNode ( Node . ENTITY_NODE ) ; int chunk = nodeIndex > > CHUNK_SHIFT ; int index = nodeIndex & CHUNK_MASK ; int extraDataIndex = createNode ( ( short ) 0 ) ; int echunk = extraDataIndex > > CHUNK_SHIFT ; int eindex = extraDataIndex & CHUNK_MASK ; setChunkIndex ( fNodeName , entityName , chunk , index ) ; setChunkIndex ( fNodeValue , extraDataIndex , chunk , index ) ; setChunkIndex ( fNodeName , publicId , echunk , eindex ) ; setChunkIndex ( fNodeValue , systemId , echunk , eindex ) ; setChunkIndex ( fNodeLastChild , notationName , echunk , eindex ) ; return nodeIndex ; } public int createEntityReference ( int nameIndex ) throws Exception { int nodeIndex = createNode ( Node . ENTITY_REFERENCE_NODE ) ; int chunk = nodeIndex > > CHUNK_SHIFT ; int index = nodeIndex & CHUNK_MASK ; setChunkIndex ( fNodeName , nameIndex , chunk , index ) ; return nodeIndex ; } public int createElement ( int elementNameIndex , XMLAttrList attrList , int attrListIndex ) { return createElement ( elementNameIndex , - 1 , attrList , attrListIndex ) ; } public int createElement ( int elementNameIndex , int elementURIIndex , XMLAttrList attrList , int attrListIndex ) { int elementNodeIndex = createNode ( Node . ELEMENT_NODE ) ; int elementChunk = elementNodeIndex > > CHUNK_SHIFT ; int elementIndex = elementNodeIndex & CHUNK_MASK ; setChunkIndex ( fNodeName , elementNameIndex , elementChunk , elementIndex ) ; setChunkIndex ( fNodeURI , elementURIIndex , elementChunk , elementIndex ) ; if ( attrListIndex != - 1 ) { int first = attrList . getFirstAttr ( attrListIndex ) ; int lastAttrNodeIndex = - 1 ; int lastAttrChunk = - 1 ; int lastAttrIndex = - 1 ; for ( int index = first ; index != - 1 ; index = attrList . getNextAttr ( index ) ) { int attrNodeIndex = createAttribute ( attrList . getAttrName ( index ) , attrList . getAttrURI ( index ) , attrList . getAttValue ( index ) , attrList . isSpecified ( index ) ) ; int attrChunk = attrNodeIndex > > CHUNK_SHIFT ; int attrIndex = attrNodeIndex & CHUNK_MASK ; setChunkIndex ( fNodeParent , elementNodeIndex , attrChunk , attrIndex ) ; if ( index == first ) { setChunkIndex ( fNodeValue , attrNodeIndex , elementChunk , elementIndex ) ; } else { setChunkIndex ( fNodePrevSib , attrNodeIndex , lastAttrChunk , lastAttrIndex ) ; } lastAttrNodeIndex = attrNodeIndex ; lastAttrChunk = attrChunk ; lastAttrIndex = attrIndex ; } } return elementNodeIndex ; } public int createAttribute ( int attrNameIndex , int attrValueIndex , boolean specified ) { return createAttribute ( attrNameIndex , - 1 , attrValueIndex , specified ) ; } public int createAttribute ( int attrNameIndex , int attrURIIndex , int attrValueIndex , boolean specified ) { int nodeIndex = createNode ( NodeImpl . ATTRIBUTE_NODE ) ; int chunk = nodeIndex > > CHUNK_SHIFT ; int index = nodeIndex & CHUNK_MASK ; setChunkIndex ( fNodeName , attrNameIndex , chunk , index ) ; setChunkIndex ( fNodeURI , attrURIIndex , chunk , index ) ; setChunkIndex ( fNodeValue , specified ? 1 : 0 , chunk , index ) ; int textNodeIndex = createTextNode ( attrValueIndex , false ) ; appendChild ( nodeIndex , textNodeIndex ) ; return nodeIndex ; } public int createElementDefinition ( int elementNameIndex ) { int nodeIndex = createNode ( NodeImpl . ELEMENT_DEFINITION_NODE ) ; int chunk = nodeIndex > > CHUNK_SHIFT ; int index = nodeIndex & CHUNK_MASK ; setChunkIndex ( fNodeName , elementNameIndex , chunk , index ) ; return nodeIndex ; } public int createTextNode ( int dataIndex , boolean ignorableWhitespace ) { int nodeIndex = createNode ( Node . TEXT_NODE ) ; int chunk = nodeIndex > > CHUNK_SHIFT ; int index = nodeIndex & CHUNK_MASK ; setChunkIndex ( fNodeValue , dataIndex , chunk , index ) ; setChunkIndex ( fNodeLastChild , ignorableWhitespace ? 1 : 0 , chunk , index ) ; return nodeIndex ; } public int createCDATASection ( int dataIndex , boolean ignorableWhitespace ) { int nodeIndex = createNode ( Node . CDATA_SECTION_NODE ) ; int chunk = nodeIndex > > CHUNK_SHIFT ; int index = nodeIndex & CHUNK_MASK ; setChunkIndex ( fNodeValue , dataIndex , chunk , index ) ; setChunkIndex ( fNodeLastChild , ignorableWhitespace ? 1 : 0 , chunk , index ) ; return nodeIndex ; } public int createProcessingInstruction ( int targetIndex , int dataIndex ) { int nodeIndex = createNode ( Node . PROCESSING_INSTRUCTION_NODE ) ; int chunk = nodeIndex > > CHUNK_SHIFT ; int index = nodeIndex & CHUNK_MASK ; setChunkIndex ( fNodeName , targetIndex , chunk , index ) ; setChunkIndex ( fNodeValue , dataIndex , chunk , index ) ; return nodeIndex ; } public int createComment ( int dataIndex ) { int nodeIndex = createNode ( Node . COMMENT_NODE ) ; int chunk = nodeIndex > > CHUNK_SHIFT ; int index = nodeIndex & CHUNK_MASK ; setChunkIndex ( fNodeValue , dataIndex , chunk , index ) ; return nodeIndex ; } public void appendChild ( int parentIndex , int childIndex ) { int pchunk = parentIndex > > CHUNK_SHIFT ; int pindex = parentIndex & CHUNK_MASK ; int cchunk = childIndex > > CHUNK_SHIFT ; int cindex = childIndex & CHUNK_MASK ; setChunkIndex ( fNodeParent , parentIndex , cchunk , cindex ) ; int olast = getChunkIndex ( fNodeLastChild , pchunk , pindex ) ; setChunkIndex ( fNodePrevSib , olast , cchunk , cindex ) ; setChunkIndex ( fNodeLastChild , childIndex , pchunk , pindex ) ; } public int setAttributeNode ( int elemIndex , int attrIndex ) { int echunk = elemIndex > > CHUNK_SHIFT ; int eindex = elemIndex & CHUNK_MASK ; int achunk = attrIndex > > CHUNK_SHIFT ; int aindex = attrIndex & CHUNK_MASK ; String attrName = fStringPool . toString ( getChunkIndex ( fNodeName , achunk , aindex ) ) ; int oldAttrIndex = getChunkIndex ( fNodeValue , echunk , eindex ) ; int nextIndex = - 1 ; int oachunk = - 1 ; int oaindex = - 1 ; while ( oldAttrIndex != - 1 ) { oachunk = oldAttrIndex > > CHUNK_SHIFT ; oaindex = oldAttrIndex & CHUNK_MASK ; String oldAttrName = fStringPool . toString ( getChunkIndex ( fNodeName , oachunk , oaindex ) ) ; if ( oldAttrName . equals ( attrName ) ) { break ; } nextIndex = oldAttrIndex ; oldAttrIndex = getChunkIndex ( fNodePrevSib , oachunk , oaindex ) ; } if ( oldAttrIndex != - 1 ) { int prevIndex = getChunkIndex ( fNodePrevSib , oachunk , oaindex ) ; if ( nextIndex == - 1 ) { setChunkIndex ( fNodeValue , prevIndex , echunk , eindex ) ; } else { int pchunk = nextIndex > > CHUNK_SHIFT ; int pindex = nextIndex & CHUNK_MASK ; setChunkIndex ( fNodePrevSib , prevIndex , pchunk , pindex ) ; } clearChunkIndex ( fNodeType , oachunk , oaindex ) ; clearChunkIndex ( fNodeName , oachunk , oaindex ) ; clearChunkIndex ( fNodeValue , oachunk , oaindex ) ; clearChunkIndex ( fNodeParent , oachunk , oaindex ) ; clearChunkIndex ( fNodePrevSib , oachunk , oaindex ) ; int attrTextIndex = clearChunkIndex ( fNodeLastChild , oachunk , oaindex ) ; int atchunk = attrTextIndex > > CHUNK_SHIFT ; int atindex = attrTextIndex & CHUNK_MASK ; clearChunkIndex ( fNodeType , atchunk , atindex ) ; clearChunkIndex ( fNodeValue , atchunk , atindex ) ; clearChunkIndex ( fNodeParent , atchunk , atindex ) ; clearChunkIndex ( fNodeLastChild , atchunk , atindex ) ; } int prevIndex = getChunkIndex ( fNodeValue , echunk , eindex ) ; setChunkIndex ( fNodeValue , attrIndex , echunk , eindex ) ; setChunkIndex ( fNodePrevSib , prevIndex , achunk , aindex ) ; return oldAttrIndex ; } public int insertBefore ( int parentIndex , int newChildIndex , int refChildIndex ) { if ( refChildIndex == - 1 ) { appendChild ( parentIndex , newChildIndex ) ; return newChildIndex ; } int nchunk = newChildIndex > > CHUNK_SHIFT ; int nindex = newChildIndex & CHUNK_MASK ; int rchunk = refChildIndex > > CHUNK_SHIFT ; int rindex = refChildIndex & CHUNK_MASK ; int previousIndex = getChunkIndex ( fNodePrevSib , rchunk , rindex ) ; setChunkIndex ( fNodePrevSib , newChildIndex , rchunk , rindex ) ; setChunkIndex ( fNodePrevSib , previousIndex , nchunk , nindex ) ; return newChildIndex ; } public void setAsLastChild ( int parentIndex , int childIndex ) { int pchunk = parentIndex > > CHUNK_SHIFT ; int pindex = parentIndex & CHUNK_MASK ; int chunk = childIndex > > CHUNK_SHIFT ; int index = childIndex & CHUNK_MASK ; setChunkIndex ( fNodeLastChild , childIndex , pchunk , pindex ) ; } public int getParentNode ( int nodeIndex ) { return getParentNode ( nodeIndex , false ) ; } public int getParentNode ( int nodeIndex , boolean free ) { if ( nodeIndex == - 1 ) { return - 1 ; } int chunk = nodeIndex > > CHUNK_SHIFT ; int index = nodeIndex & CHUNK_MASK ; return free ? clearChunkIndex ( fNodeParent , chunk , index ) : getChunkIndex ( fNodeParent , chunk , index ) ; } public int getLastChild ( int nodeIndex ) { return getLastChild ( nodeIndex , true ) ; } public int getLastChild ( int nodeIndex , boolean free ) { if ( nodeIndex == - 1 ) { return - 1 ; } int chunk = nodeIndex > > CHUNK_SHIFT ; int index = nodeIndex & CHUNK_MASK ; return free ? clearChunkIndex ( fNodeLastChild , chunk , index ) : getChunkIndex ( fNodeLastChild , chunk , index ) ; } public int getPrevSibling ( int nodeIndex ) { return getPrevSibling ( nodeIndex , true ) ; } public int getPrevSibling ( int nodeIndex , boolean free ) { if ( nodeIndex == - 1 ) { return - 1 ; } int chunk = nodeIndex > > CHUNK_SHIFT ; int index = nodeIndex & CHUNK_MASK ; int type = getChunkIndex ( fNodeType , chunk , index ) ; if ( type == Node . TEXT_NODE ) { do { nodeIndex = getChunkIndex ( fNodePrevSib , chunk , index ) ; if ( nodeIndex == - 1 ) { break ; } chunk = nodeIndex > > CHUNK_SHIFT ; index = nodeIndex & CHUNK_MASK ; type = getChunkIndex ( fNodeType , chunk , index ) ; } while ( type == Node . TEXT_NODE ) ; } else { nodeIndex = getChunkIndex ( fNodePrevSib , chunk , index ) ; } return nodeIndex ; } public int getRealPrevSibling ( int nodeIndex ) { return getRealPrevSibling ( nodeIndex , true ) ; } public int getRealPrevSibling ( int nodeIndex , boolean free ) { if ( nodeIndex == - 1 ) { return - 1 ; } int chunk = nodeIndex > > CHUNK_SHIFT ; int index = nodeIndex & CHUNK_MASK ; return free ? clearChunkIndex ( fNodePrevSib , chunk , index ) : getChunkIndex ( fNodePrevSib , chunk , index ) ; } public int lookupElementDefinition ( int elementNameIndex ) { if ( fNodeCount > 1 ) { int docTypeIndex = - 1 ; int nchunk = 0 ; int nindex = 0 ; for ( int index = getChunkIndex ( fNodeLastChild , nchunk , nindex ) ; index != - 1 ; index = getChunkIndex ( fNodePrevSib , nchunk , nindex ) ) { nchunk = index > > CHUNK_SHIFT ; nindex = index & CHUNK_MASK ; if ( getChunkIndex ( fNodeType , nchunk , nindex ) == Node . DOCUMENT_TYPE_NODE ) { docTypeIndex = index ; break ; } } if ( docTypeIndex == - 1 ) { return - 1 ; } nchunk = docTypeIndex > > CHUNK_SHIFT ; nindex = docTypeIndex & CHUNK_MASK ; for ( int index = getChunkIndex ( fNodeLastChild , nchunk , nindex ) ; index != - 1 ; index = getChunkIndex ( fNodePrevSib , nchunk , nindex ) ) { nchunk = index > > CHUNK_SHIFT ; nindex = index & CHUNK_MASK ; if ( getChunkIndex ( fNodeName , nchunk , nindex ) == elementNameIndex ) { return index ; } } } return - 1 ; } public DeferredNode getNodeObject ( int nodeIndex ) { if ( nodeIndex == - 1 ) { return null ; } int chunk = nodeIndex > > CHUNK_SHIFT ; int index = nodeIndex & CHUNK_MASK ; int type = getChunkIndex ( fNodeType , chunk , index ) ; if ( type != Node . TEXT_NODE ) { clearChunkIndex ( fNodeType , chunk , index ) ; } DeferredNode node = null ; switch ( type ) { case Node . ATTRIBUTE_NODE : { if ( fNamespacesEnabled ) { node = new DeferredAttrNSImpl ( this , nodeIndex ) ; } else { node = new DeferredAttrImpl ( this , nodeIndex ) ; } break ; } case Node . CDATA_SECTION_NODE : { node = new DeferredCDATASectionImpl ( this , nodeIndex ) ; break ; } case Node . COMMENT_NODE : { node = new DeferredCommentImpl ( this , nodeIndex ) ; break ; } case Node . DOCUMENT_NODE : { node = this ; break ; } case Node . DOCUMENT_TYPE_NODE : { node = new DeferredDocumentTypeImpl ( this , nodeIndex ) ; docType = ( DocumentTypeImpl ) node ; break ; } case Node . ELEMENT_NODE : { if ( DEBUG_IDS ) { System . out . println ( "getNodeObject(ELEMENT_NODE): " + nodeIndex ) ; } if ( fNamespacesEnabled ) { node = new DeferredElementNSImpl ( this , nodeIndex ) ; } else { node = new DeferredElementImpl ( this , nodeIndex ) ; } if ( docElement == null ) { docElement = ( ElementImpl ) node ; } if ( fIdElement != null ) { int idIndex = DeferredDocumentImpl . binarySearch ( fIdElement , 0 , fIdCount - 1 , nodeIndex ) ; while ( idIndex != - 1 ) { if ( DEBUG_IDS ) { System . out . println ( "  id index: " + idIndex ) ; System . out . println ( "  fIdName[" + idIndex + "]: " + fIdName [ idIndex ] ) ; } int nameIndex = fIdName [ idIndex ] ; if ( nameIndex != - 1 ) { String name = fStringPool . toString ( nameIndex ) ; if ( DEBUG_IDS ) { System . out . println ( "  name: " + name ) ; System . out . print ( "getNodeObject()#" ) ; } putIdentifier0 ( name , ( Element ) node ) ; fIdName [ idIndex ] = - 1 ; } if ( idIndex + 1 < fIdCount && fIdElement [ idIndex + 1 ] == nodeIndex ) { idIndex ++ ; } else { idIndex = - 1 ; } } } break ; } case Node . ENTITY_NODE : { node = new DeferredEntityImpl ( this , nodeIndex ) ; break ; } case Node . ENTITY_REFERENCE_NODE : { node = new DeferredEntityReferenceImpl ( this , nodeIndex ) ; break ; } case Node . NOTATION_NODE : { node = new DeferredNotationImpl ( this , nodeIndex ) ; break ; } case Node . PROCESSING_INSTRUCTION_NODE : { node = new DeferredProcessingInstructionImpl ( this , nodeIndex ) ; break ; } case Node . TEXT_NODE : { node = new DeferredTextImpl ( this , nodeIndex ) ; break ; } case NodeImpl . ELEMENT_DEFINITION_NODE : { node = new DeferredElementDefinitionImpl ( this , nodeIndex ) ; break ; } default : { throw new IllegalArgumentException ( "type: " + type ) ; } } if ( node != null ) { return node ; } throw new IllegalArgumentException ( ) ; } public String getNodeNameString ( int nodeIndex ) { return getNodeNameString ( nodeIndex , true ) ; } public String getNodeNameString ( int nodeIndex , boolean free ) { if ( nodeIndex == - 1 ) { return null ; } int chunk = nodeIndex > > CHUNK_SHIFT ; int index = nodeIndex & CHUNK_MASK ; int nameIndex = free ? clearChunkIndex ( fNodeName , chunk , index ) : getChunkIndex ( fNodeName , chunk , index ) ; if ( nameIndex == - 1 ) { return null ; } return fStringPool . toString ( nameIndex ) ; } public String getNodeValueString ( int nodeIndex ) { return getNodeValueString ( nodeIndex , true ) ; } public String getNodeValueString ( int nodeIndex , boolean free ) { if ( nodeIndex == - 1 ) { return null ; } int chunk = nodeIndex > > CHUNK_SHIFT ; int index = nodeIndex & CHUNK_MASK ; int valueIndex = free ? clearChunkIndex ( fNodeValue , chunk , index ) : getChunkIndex ( fNodeValue , chunk , index ) ; if ( valueIndex == - 1 ) { return null ; } int type = getChunkIndex ( fNodeType , chunk , index ) ; if ( type == Node . TEXT_NODE ) { int prevSib = getRealPrevSibling ( nodeIndex ) ; if ( prevSib != - 1 && getNodeType ( prevSib , false ) == Node . TEXT_NODE ) { StringBuffer str = new StringBuffer ( ) ; str . append ( fStringPool . toString ( valueIndex ) ) ; do { chunk = prevSib > > CHUNK_SHIFT ; index = prevSib & CHUNK_MASK ; valueIndex = getChunkIndex ( fNodeValue , chunk , index ) ; str . insert ( 0 , fStringPool . toString ( valueIndex ) ) ; prevSib = getChunkIndex ( fNodePrevSib , chunk , index ) ; if ( prevSib == - 1 ) { break ; } } while ( getNodeType ( prevSib , false ) == Node . TEXT_NODE ) ; return str . toString ( ) ; } } return fStringPool . toString ( valueIndex ) ; } public int getNodeName ( int nodeIndex ) { return getNodeName ( nodeIndex , true ) ; } public int getNodeName ( int nodeIndex , boolean free ) { if ( nodeIndex == - 1 ) { return - 1 ; } int chunk = nodeIndex > > CHUNK_SHIFT ; int index = nodeIndex & CHUNK_MASK ; return free ? clearChunkIndex ( fNodeName , chunk , index ) : getChunkIndex ( fNodeName , chunk , index ) ; } public int getNodeValue ( int nodeIndex ) { return getNodeValue ( nodeIndex , true ) ; } public int getNodeValue ( int nodeIndex , boolean free ) { if ( nodeIndex == - 1 ) { return - 1 ; } int chunk = nodeIndex > > CHUNK_SHIFT ; int index = nodeIndex & CHUNK_MASK ; return free ? clearChunkIndex ( fNodeValue , chunk , index ) : getChunkIndex ( fNodeValue , chunk , index ) ; } public short getNodeType ( int nodeIndex ) { return getNodeType ( nodeIndex , true ) ; } public short getNodeType ( int nodeIndex , boolean free ) { if ( nodeIndex == - 1 ) { return - 1 ; } int chunk = nodeIndex > > CHUNK_SHIFT ; int index = nodeIndex & CHUNK_MASK ; if ( free ) { return ( short ) clearChunkIndex ( fNodeType , chunk , index ) ; } return ( short ) getChunkIndex ( fNodeType , chunk , index ) ; } public int getAttribute ( int elemIndex , int nameIndex ) { if ( elemIndex == - 1 || nameIndex == - 1 ) { return - 1 ; } int echunk = elemIndex > > CHUNK_SHIFT ; int eindex = elemIndex & CHUNK_MASK ; int attrIndex = getChunkIndex ( fNodeValue , echunk , eindex ) ; while ( attrIndex != - 1 ) { int achunk = attrIndex > > CHUNK_SHIFT ; int aindex = attrIndex & CHUNK_MASK ; if ( getChunkIndex ( fNodeName , achunk , aindex ) == nameIndex ) { return getChunkIndex ( fNodeValue , achunk , aindex ) ; } attrIndex = getChunkIndex ( fNodePrevSib , achunk , aindex ) ; } return - 1 ; } public short getNodeURI ( int nodeIndex ) { return getNodeURI ( nodeIndex , true ) ; } public short getNodeURI ( int nodeIndex , boolean free ) { if ( nodeIndex == - 1 ) { return - 1 ; } int chunk = nodeIndex > > CHUNK_SHIFT ; int index = nodeIndex & CHUNK_MASK ; if ( free ) { return ( short ) clearChunkIndex ( fNodeURI , chunk , index ) ; } return ( short ) getChunkIndex ( fNodeURI , chunk , index ) ; } public void putIdentifier ( int nameIndex , int elementNodeIndex ) { if ( DEBUG_IDS ) { System . out . println ( "putIdentifier(" + nameIndex + ", " + elementNodeIndex + ')' + " // " + fStringPool . toString ( nameIndex ) + ", " + fStringPool . toString ( getChunkIndex ( fNodeName , elementNodeIndex > > CHUNK_SHIFT , elementNodeIndex & CHUNK_MASK ) ) ) ; } if ( fIdName == null ) { fIdName = new int [ 64 ] ; fIdElement = new int [ 64 ] ; } if ( fIdCount == fIdName . length ) { int idName [ ] = new int [ fIdCount * 2 ] ; System . arraycopy ( fIdName , 0 , idName , 0 , fIdCount ) ; fIdName = idName ; int idElement [ ] = new int [ idName . length ] ; System . arraycopy ( fIdElement , 0 , idElement , 0 , fIdCount ) ; fIdElement = idElement ; } fIdName [ fIdCount ] = nameIndex ; fIdElement [ fIdCount ] = elementNodeIndex ; fIdCount ++ ; } public void print ( ) { if ( DEBUG_PRINT_REF_COUNTS ) { System . out . print ( "num\t" ) ; System . out . print ( "type\t" ) ; System . out . print ( "name\t" ) ; System . out . print ( "val\t" ) ; System . out . print ( "par\t" ) ; System . out . print ( "fch\t" ) ; System . out . print ( "nsib" ) ; System . out . println ( ) ; for ( int i = 0 ; i < fNodeType . length ; i ++ ) { if ( fNodeType [ i ] != null ) { System . out . print ( "--------" ) ; System . out . print ( "--------" ) ; System . out . print ( "--------" ) ; System . out . print ( "--------" ) ; System . out . print ( "--------" ) ; System . out . print ( "--------" ) ; System . out . print ( "--------" ) ; System . out . println ( ) ; System . out . print ( i ) ; System . out . print ( '\t' ) ; System . out . print ( fNodeType [ i ] [ CHUNK_SIZE ] ) ; System . out . print ( '\t' ) ; System . out . print ( fNodeName [ i ] [ CHUNK_SIZE ] ) ; System . out . print ( '\t' ) ; System . out . print ( fNodeValue [ i ] [ CHUNK_SIZE ] ) ; System . out . print ( '\t' ) ; System . out . print ( fNodeParent [ i ] [ CHUNK_SIZE ] ) ; System . out . print ( '\t' ) ; System . out . print ( fNodeLastChild [ i ] [ CHUNK_SIZE ] ) ; System . out . print ( '\t' ) ; System . out . print ( fNodePrevSib [ i ] [ CHUNK_SIZE ] ) ; System . out . println ( ) ; System . out . print ( i ) ; System . out . print ( '\t' ) ; System . out . print ( fNodeType [ i ] [ CHUNK_SIZE + 1 ] ) ; System . out . print ( '\t' ) ; System . out . print ( fNodeName [ i ] [ CHUNK_SIZE + 1 ] ) ; System . out . print ( '\t' ) ; System . out . print ( fNodeValue [ i ] [ CHUNK_SIZE + 1 ] ) ; System . out . print ( '\t' ) ; System . out . print ( fNodeParent [ i ] [ CHUNK_SIZE + 1 ] ) ; System . out . print ( '\t' ) ; System . out . print ( fNodeLastChild [ i ] [ CHUNK_SIZE + 1 ] ) ; System . out . print ( '\t' ) ; System . out . print ( fNodePrevSib [ i ] [ CHUNK_SIZE + 1 ] ) ; System . out . println ( ) ; } } } if ( DEBUG_PRINT_TABLES ) { System . out . println ( "# start table" ) ; for ( int i = 0 ; i < fNodeCount ; i ++ ) { int chunk = i > > CHUNK_SHIFT ; int index = i & CHUNK_MASK ; if ( i % 10 == 0 ) { System . out . print ( "num\t" ) ; System . out . print ( "type\t" ) ; System . out . print ( "name\t" ) ; System . out . print ( "val\t" ) ; System . out . print ( "par\t" ) ; System . out . print ( "fch\t" ) ; System . out . print ( "nsib" ) ; System . out . println ( ) ; } System . out . print ( i ) ; System . out . print ( '\t' ) ; System . out . print ( getChunkIndex ( fNodeType , chunk , index ) ) ; System . out . print ( '\t' ) ; System . out . print ( getChunkIndex ( fNodeName , chunk , index ) ) ; System . out . print ( '\t' ) ; System . out . print ( getChunkIndex ( fNodeValue , chunk , index ) ) ; System . out . print ( '\t' ) ; System . out . print ( getChunkIndex ( fNodeParent , chunk , index ) ) ; System . out . print ( '\t' ) ; System . out . print ( getChunkIndex ( fNodeLastChild , chunk , index ) ) ; System . out . print ( '\t' ) ; System . out . print ( getChunkIndex ( fNodePrevSib , chunk , index ) ) ; System . out . println ( ) ; } System . out . println ( "# end table" ) ; } } public int getNodeIndex ( ) { return 0 ; } protected StringPool getStringPool ( ) { return fStringPool ; } protected void synchronizeData ( ) { needsSyncData ( false ) ; if ( fIdElement != null ) { IntVector path = new IntVector ( ) ; for ( int i = 0 ; i < fIdCount ; i ++ ) { int elementNodeIndex = fIdElement [ i ] ; int idNameIndex = fIdName [ i ] ; if ( idNameIndex == - 1 ) { continue ; } path . removeAllElements ( ) ; int index = elementNodeIndex ; do { path . addElement ( index ) ; int pchunk = index > > CHUNK_SHIFT ; int pindex = index & CHUNK_MASK ; index = getChunkIndex ( fNodeParent , pchunk , pindex ) ; } while ( index != - 1 ) ; Node place = this ; for ( int j = path . size ( ) - 2 ; j >= 0 ; j -- ) { index = path . elementAt ( j ) ; Node child = place . getLastChild ( ) ; while ( child != null ) { if ( child instanceof DeferredNode ) { int nodeIndex = ( ( DeferredNode ) child ) . getNodeIndex ( ) ; if ( nodeIndex == index ) { place = child ; break ; } } child = child . getPreviousSibling ( ) ; } } Element element = ( Element ) place ; String name = fStringPool . toString ( idNameIndex ) ; putIdentifier0 ( name , element ) ; fIdName [ i ] = - 1 ; while ( i + 1 < fIdCount && fIdElement [ i + 1 ] == elementNodeIndex ) { idNameIndex = fIdName [ ++ i ] ; if ( idNameIndex == - 1 ) { continue ; } name = fStringPool . toString ( idNameIndex ) ; putIdentifier0 ( name , element ) ; } } } } protected void synchronizeChildren ( ) { if ( needsSyncData ( ) ) { synchronizeData ( ) ; if ( ! needsSyncChildren ( ) ) { return ; } } boolean orig = mutationEvents ; mutationEvents = false ; needsSyncChildren ( false ) ; getNodeType ( 0 ) ; ChildNode first = null ; ChildNode last = null ; for ( int index = getLastChild ( 0 ) ; index != - 1 ; index = getPrevSibling ( index ) ) { ChildNode node = ( ChildNode ) getNodeObject ( index ) ; if ( last == null ) { last = node ; } else { first . previousSibling = node ; } node . ownerNode = this ; node . isOwned ( true ) ; node . nextSibling = first ; first = node ; int type = node . getNodeType ( ) ; if ( type == Node . ELEMENT_NODE ) { docElement = ( ElementImpl ) node ; } else if ( type == Node . DOCUMENT_TYPE_NODE ) { docType = ( DocumentTypeImpl ) node ; } } if ( first != null ) { firstChild = first ; first . isFirstChild ( true ) ; lastChild ( last ) ; } mutationEvents = orig ; } protected boolean ensureCapacity ( int chunk , int index ) { if ( fNodeType == null ) { fNodeType = new int [ INITIAL_CHUNK_COUNT ] [ ] ; fNodeName = new int [ INITIAL_CHUNK_COUNT ] [ ] ; fNodeValue = new int [ INITIAL_CHUNK_COUNT ] [ ] ; fNodeParent = new int [ INITIAL_CHUNK_COUNT ] [ ] ; fNodeLastChild = new int [ INITIAL_CHUNK_COUNT ] [ ] ; fNodePrevSib = new int [ INITIAL_CHUNK_COUNT ] [ ] ; fNodeURI = new int [ INITIAL_CHUNK_COUNT ] [ ] ; } try { return fNodeType [ chunk ] [ index ] != 0 ; } catch ( ArrayIndexOutOfBoundsException ex ) { int newsize = chunk * 2 ; int [ ] [ ] newArray = new int [ newsize ] [ ] ; System . arraycopy ( fNodeType , 0 , newArray , 0 , chunk ) ; fNodeType = newArray ; newArray = new int [ newsize ] [ ] ; System . arraycopy ( fNodeName , 0 , newArray , 0 , chunk ) ; fNodeName = newArray ; newArray = new int [ newsize ] [ ] ; System . arraycopy ( fNodeValue , 0 , newArray , 0 , chunk ) ; fNodeValue = newArray ; newArray = new int [ newsize ] [ ] ; System . arraycopy ( fNodeParent , 0 , newArray , 0 , chunk ) ; fNodeParent = newArray ; newArray = new int [ newsize ] [ ] ; System . arraycopy ( fNodeLastChild , 0 , newArray , 0 , chunk ) ; fNodeLastChild = newArray ; newArray = new int [ newsize ] [ ] ; System . arraycopy ( fNodePrevSib , 0 , newArray , 0 , chunk ) ; fNodePrevSib = newArray ; newArray = new int [ newsize ] [ ] ; System . arraycopy ( fNodeURI , 0 , newArray , 0 , chunk ) ; fNodeURI = newArray ; } catch ( NullPointerException ex ) { } createChunk ( fNodeType , chunk ) ; createChunk ( fNodeName , chunk ) ; createChunk ( fNodeValue , chunk ) ; createChunk ( fNodeParent , chunk ) ; createChunk ( fNodeLastChild , chunk ) ; createChunk ( fNodePrevSib , chunk ) ; createChunk ( fNodeURI , chunk ) ; return true ; } protected int createNode ( short nodeType ) { int chunk = fNodeCount > > CHUNK_SHIFT ; int index = fNodeCount & CHUNK_MASK ; ensureCapacity ( chunk , index ) ; setChunkIndex ( fNodeType , nodeType , chunk , index ) ; return fNodeCount ++ ; } protected static int binarySearch ( final int values [ ] , int start , int end , int target ) { if ( DEBUG_IDS ) { System . out . println ( "binarySearch(), target: " + target ) ; } while ( start <= end ) { int middle = ( start + end ) / 2 ; int value = values [ middle ] ; if ( DEBUG_IDS ) { System . out . print ( "  value: " + value + ", target: " + target + " // " ) ; print ( values , start , end , middle , target ) ; } if ( value == target ) { while ( middle > 0 && values [ middle - 1 ] == target ) { middle -- ; } if ( DEBUG_IDS ) { System . out . println ( "FOUND AT " + middle ) ; } return middle ; } if ( value > target ) { end = middle - 1 ; } else { start = middle + 1 ; } } if ( DEBUG_IDS ) { System . out . println ( "NOT FOUND!" ) ; } return - 1 ; } private final void createChunk ( int data [ ] [ ] , int chunk ) { data [ chunk ] = new int [ CHUNK_SIZE + 2 ] ; for ( int i = 0 ; i < CHUNK_SIZE ; i ++ ) { data [ chunk ] [ i ] = - 1 ; } } private final int setChunkIndex ( int data [ ] [ ] , int value , int chunk , int index ) { if ( value == - 1 ) { return clearChunkIndex ( data , chunk , index ) ; } int ovalue = data [ chunk ] [ index ] ; if ( ovalue == - 1 ) { data [ chunk ] [ CHUNK_SIZE ] ++ ; } data [ chunk ] [ index ] = value ; return ovalue ; } private final int getChunkIndex ( int data [ ] [ ] , int chunk , int index ) { return data [ chunk ] != null ? data [ chunk ] [ index ] : - 1 ; } private final int clearChunkIndex ( int data [ ] [ ] , int chunk , int index ) { int value = data [ chunk ] != null ? data [ chunk ] [ index ] : - 1 ; if ( value != - 1 ) { data [ chunk ] [ CHUNK_SIZE + 1 ] ++ ; data [ chunk ] [ index ] = - 1 ; if ( data [ chunk ] [ CHUNK_SIZE ] == data [ chunk ] [ CHUNK_SIZE + 1 ] ) { data [ chunk ] = null ; } } return value ; } private final void putIdentifier0 ( String idName , Element element ) { if ( DEBUG_IDS ) { System . out . println ( "putIdentifier0(" + idName + ", " + element + ')' ) ; } if ( identifiers == null ) { identifiers = new java . util . Hashtable ( ) ; } identifiers . put ( idName , element ) ; } private static void print ( int values [ ] , int start , int end , int middle , int target ) { if ( DEBUG_IDS ) { System . out . print ( start ) ; System . out . print ( " [" ) ; for ( int i = start ; i < end ; i ++ ) { if ( middle == i ) { System . out . print ( "!" ) ; } System . out . print ( values [ i ] ) ; if ( values [ i ] == target ) { System . out . print ( "*" ) ; } if ( i < end - 1 ) { System . out . print ( " " ) ; } } System . out . println ( "] " + end ) ; } } static class IntVector { private int data [ ] ; private int size ; public int size ( ) { return size ; } public int elementAt ( int index ) { return data [ index ] ; } public void addElement ( int element ) { ensureCapacity ( size + 1 ) ; data [ size ++ ] = element ; } public void removeAllElements ( ) { size = 0 ; } private void ensureCapacity ( int newsize ) { if ( data == null ) { data = new int [ newsize + 15 ] ; } else if ( newsize > data . length ) { int newdata [ ] = new int [ newsize + 15 ] ; System . arraycopy ( data , 0 , newdata , 0 , data . length ) ; data = newdata ; } } } } 	1	['61', '3', '0', '25', '109', '1294', '16', '22', '48', '0.89047619', '2565', '0.952380952', '1', '0.602739726', '0.226229508', '2', '10', '40.70491803', '12', '2.5246', '8']
package org . xml . sax . helpers ; import java . io . IOException ; import org . xml . sax . XMLReader ; import org . xml . sax . XMLFilter ; import org . xml . sax . InputSource ; import org . xml . sax . Locator ; import org . xml . sax . Attributes ; import org . xml . sax . EntityResolver ; import org . xml . sax . DTDHandler ; import org . xml . sax . ContentHandler ; import org . xml . sax . ErrorHandler ; import org . xml . sax . SAXException ; import org . xml . sax . SAXParseException ; import org . xml . sax . SAXNotSupportedException ; import org . xml . sax . SAXNotRecognizedException ; public class XMLFilterImpl implements XMLFilter , EntityResolver , DTDHandler , ContentHandler , ErrorHandler { public XMLFilterImpl ( ) { super ( ) ; } public XMLFilterImpl ( XMLReader parent ) { super ( ) ; setParent ( parent ) ; } public void setParent ( XMLReader parent ) { if ( parent == null ) { throw new NullPointerException ( "Null parent" ) ; } this . parent = parent ; } public XMLReader getParent ( ) { return parent ; } public void setFeature ( String name , boolean state ) throws SAXNotRecognizedException , SAXNotSupportedException { if ( parent != null ) { parent . setFeature ( name , state ) ; } else { throw new SAXNotRecognizedException ( "Feature: " + name ) ; } } public boolean getFeature ( String name ) throws SAXNotRecognizedException , SAXNotSupportedException { if ( parent != null ) { return parent . getFeature ( name ) ; } else { throw new SAXNotRecognizedException ( "Feature: " + name ) ; } } public void setProperty ( String name , Object value ) throws SAXNotRecognizedException , SAXNotSupportedException { if ( parent != null ) { parent . setProperty ( name , value ) ; } else { throw new SAXNotRecognizedException ( "Property: " + name ) ; } } public Object getProperty ( String name ) throws SAXNotRecognizedException , SAXNotSupportedException { if ( parent != null ) { return parent . getProperty ( name ) ; } else { throw new SAXNotRecognizedException ( "Property: " + name ) ; } } public void setEntityResolver ( EntityResolver resolver ) { if ( resolver == null ) { throw new NullPointerException ( "Null entity resolver" ) ; } else { entityResolver = resolver ; } } public EntityResolver getEntityResolver ( ) { return entityResolver ; } public void setDTDHandler ( DTDHandler handler ) { if ( handler == null ) { throw new NullPointerException ( "Null DTD handler" ) ; } else { dtdHandler = handler ; } } public DTDHandler getDTDHandler ( ) { return dtdHandler ; } public void setContentHandler ( ContentHandler handler ) { if ( handler == null ) { throw new NullPointerException ( "Null content handler" ) ; } else { contentHandler = handler ; } } public ContentHandler getContentHandler ( ) { return contentHandler ; } public void setErrorHandler ( ErrorHandler handler ) { if ( handler == null ) { throw new NullPointerException ( "Null error handler" ) ; } else { errorHandler = handler ; } } public ErrorHandler getErrorHandler ( ) { return errorHandler ; } public void parse ( InputSource input ) throws SAXException , IOException { setupParse ( ) ; parent . parse ( input ) ; } public void parse ( String systemId ) throws SAXException , IOException { parse ( new InputSource ( systemId ) ) ; } public InputSource resolveEntity ( String publicId , String systemId ) throws SAXException , IOException { if ( entityResolver != null ) { return entityResolver . resolveEntity ( publicId , systemId ) ; } else { return null ; } } public void notationDecl ( String name , String publicId , String systemId ) throws SAXException { if ( dtdHandler != null ) { dtdHandler . notationDecl ( name , publicId , systemId ) ; } } public void unparsedEntityDecl ( String name , String publicId , String systemId , String notationName ) throws SAXException { if ( dtdHandler != null ) { dtdHandler . unparsedEntityDecl ( name , publicId , systemId , notationName ) ; } } public void setDocumentLocator ( Locator locator ) { this . locator = locator ; if ( contentHandler != null ) { contentHandler . setDocumentLocator ( locator ) ; } } public void startDocument ( ) throws SAXException { if ( contentHandler != null ) { contentHandler . startDocument ( ) ; } } public void endDocument ( ) throws SAXException { if ( contentHandler != null ) { contentHandler . endDocument ( ) ; } } public void startPrefixMapping ( String prefix , String uri ) throws SAXException { if ( contentHandler != null ) { contentHandler . startPrefixMapping ( prefix , uri ) ; } } public void endPrefixMapping ( String prefix ) throws SAXException { if ( contentHandler != null ) { contentHandler . endPrefixMapping ( prefix ) ; } } public void startElement ( String uri , String localName , String qName , Attributes atts ) throws SAXException { if ( contentHandler != null ) { contentHandler . startElement ( uri , localName , qName , atts ) ; } } public void endElement ( String uri , String localName , String qName ) throws SAXException { if ( contentHandler != null ) { contentHandler . endElement ( uri , localName , qName ) ; } } public void characters ( char ch [ ] , int start , int length ) throws SAXException { if ( contentHandler != null ) { contentHandler . characters ( ch , start , length ) ; } } public void ignorableWhitespace ( char ch [ ] , int start , int length ) throws SAXException { if ( contentHandler != null ) { contentHandler . ignorableWhitespace ( ch , start , length ) ; } } public void processingInstruction ( String target , String data ) throws SAXException { if ( contentHandler != null ) { contentHandler . processingInstruction ( target , data ) ; } } public void skippedEntity ( String name ) throws SAXException { if ( contentHandler != null ) { contentHandler . skippedEntity ( name ) ; } } public void warning ( SAXParseException e ) throws SAXException { if ( errorHandler != null ) { errorHandler . warning ( e ) ; } } public void error ( SAXParseException e ) throws SAXException { if ( errorHandler != null ) { errorHandler . error ( e ) ; } } public void fatalError ( SAXParseException e ) throws SAXException { if ( errorHandler != null ) { errorHandler . fatalError ( e ) ; } } private void setupParse ( ) { if ( parent == null ) { throw new NullPointerException ( "No parent for filter" ) ; } parent . setEntityResolver ( this ) ; parent . setDTDHandler ( this ) ; parent . setContentHandler ( this ) ; parent . setErrorHandler ( this ) ; } private XMLReader parent = null ; private Locator locator = null ; private EntityResolver entityResolver = null ; private DTDHandler dtdHandler = null ; private ContentHandler contentHandler = null ; private ErrorHandler errorHandler = null ; } 	0	['36', '1', '0', '0', '69', '246', '0', '0', '35', '0.804761905', '436', '1', '6', '0', '0.125925926', '0', '0', '10.94444444', '2', '1.1389', '0']
package org . apache . xerces . framework ; import org . apache . xerces . readers . XMLEntityHandler ; import org . apache . xerces . readers . DefaultEntityHandler ; import org . apache . xerces . utils . QName ; import org . apache . xerces . utils . StringPool ; import org . apache . xerces . utils . XMLCharacterProperties ; import org . apache . xerces . utils . XMLMessages ; import org . apache . xerces . validators . common . Grammar ; import org . apache . xerces . validators . common . GrammarResolver ; import org . apache . xerces . validators . common . XMLAttributeDecl ; import org . apache . xerces . validators . common . XMLElementDecl ; import org . apache . xerces . validators . dtd . DTDGrammar ; import org . xml . sax . Locator ; import org . xml . sax . SAXParseException ; import java . util . StringTokenizer ; public final class XMLDTDScanner { private static final char [ ] version_string = { 'v' , 'e' , 'r' , 's' , 'i' , 'o' , 'n' } ; private static final char [ ] element_string = { 'E' , 'L' , 'E' , 'M' , 'E' , 'N' , 'T' } ; private static final char [ ] empty_string = { 'E' , 'M' , 'P' , 'T' , 'Y' } ; private static final char [ ] any_string = { 'A' , 'N' , 'Y' } ; private static final char [ ] pcdata_string = { '#' , 'P' , 'C' , 'D' , 'A' , 'T' , 'A' } ; private static final char [ ] attlist_string = { 'A' , 'T' , 'T' , 'L' , 'I' , 'S' , 'T' } ; private static final char [ ] cdata_string = { 'C' , 'D' , 'A' , 'T' , 'A' } ; private static final char [ ] id_string = { 'I' , 'D' } ; private static final char [ ] ref_string = { 'R' , 'E' , 'F' } ; private static final char [ ] entit_string = { 'E' , 'N' , 'T' , 'I' , 'T' } ; private static final char [ ] ies_string = { 'I' , 'E' , 'S' } ; private static final char [ ] nmtoken_string = { 'N' , 'M' , 'T' , 'O' , 'K' , 'E' , 'N' } ; private static final char [ ] notation_string = { 'N' , 'O' , 'T' , 'A' , 'T' , 'I' , 'O' , 'N' } ; private static final char [ ] required_string = { '#' , 'R' , 'E' , 'Q' , 'U' , 'I' , 'R' , 'E' , 'D' } ; private static final char [ ] implied_string = { '#' , 'I' , 'M' , 'P' , 'L' , 'I' , 'E' , 'D' } ; private static final char [ ] fixed_string = { '#' , 'F' , 'I' , 'X' , 'E' , 'D' } ; private static final char [ ] include_string = { 'I' , 'N' , 'C' , 'L' , 'U' , 'D' , 'E' } ; private static final char [ ] ignore_string = { 'I' , 'G' , 'N' , 'O' , 'R' , 'E' } ; private static final char [ ] entity_string = { 'E' , 'N' , 'T' , 'I' , 'T' , 'Y' } ; private static final char [ ] system_string = { 'S' , 'Y' , 'S' , 'T' , 'E' , 'M' } ; private static final char [ ] public_string = { 'P' , 'U' , 'B' , 'L' , 'I' , 'C' } ; private static final char [ ] ndata_string = { 'N' , 'D' , 'A' , 'T' , 'A' } ; private static final char [ ] encoding_string = { 'e' , 'n' , 'c' , 'o' , 'd' , 'i' , 'n' , 'g' } ; private DTDGrammar fDTDGrammar = null ; private GrammarResolver fGrammarResolver = null ; private boolean fNamespacesEnabled = false ; private boolean fValidationEnabled = false ; private boolean fLoadExternalDTD = true ; private XMLElementDecl fTempElementDecl = new XMLElementDecl ( ) ; private XMLAttributeDecl fTempAttributeDecl = new XMLAttributeDecl ( ) ; private QName fElementQName = new QName ( ) ; private QName fAttributeQName = new QName ( ) ; private QName fElementRefQName = new QName ( ) ; private EventHandler fEventHandler = null ; private XMLDocumentHandler . DTDHandler fDTDHandler = null ; private StringPool fStringPool = null ; private XMLErrorReporter fErrorReporter = null ; private XMLEntityHandler fEntityHandler = null ; private XMLEntityHandler . EntityReader fEntityReader = null ; private XMLEntityHandler . CharBuffer fLiteralData = null ; private int fReaderId = - 1 ; private int fSystemLiteral = - 1 ; private int fPubidLiteral = - 1 ; private int [ ] fOpStack = null ; private int [ ] fNodeIndexStack = null ; private int [ ] fPrevNodeIndexStack = null ; private int fScannerState = SCANNER_STATE_INVALID ; private int fIncludeSectDepth = 0 ; private int fDoctypeReader = - 1 ; private int fExternalSubsetReader = - 1 ; private int fDefaultAttValueReader = - 1 ; private int fDefaultAttValueElementType = - 1 ; private int fDefaultAttValueAttrName = - 1 ; private int fDefaultAttValueOffset = - 1 ; private int fDefaultAttValueMark = - 1 ; private int fEntityValueReader = - 1 ; private int fEntityValueMark = - 1 ; private int fXMLSymbol = - 1 ; private int fXMLNamespace = - 1 ; private int fXMLSpace = - 1 ; private int fDefault = - 1 ; private int fPreserve = - 1 ; private int fScannerMarkupDepth = 0 ; private int fScannerParenDepth = 0 ; public XMLDTDScanner ( StringPool stringPool , XMLErrorReporter errorReporter , XMLEntityHandler entityHandler , XMLEntityHandler . CharBuffer literalData ) { fStringPool = stringPool ; fErrorReporter = errorReporter ; fEntityHandler = entityHandler ; fLiteralData = literalData ; init ( ) ; } public void setEventHandler ( XMLDTDScanner . EventHandler eventHandler ) { fEventHandler = eventHandler ; } public void setDTDHandler ( XMLDocumentHandler . DTDHandler dtdHandler ) { fDTDHandler = dtdHandler ; } public void setGrammarResolver ( GrammarResolver resolver ) { fGrammarResolver = resolver ; } public void setNamespacesEnabled ( boolean enabled ) { fNamespacesEnabled = enabled ; } public void setValidationEnabled ( boolean enabled ) { fValidationEnabled = enabled ; } public void setLoadExternalDTD ( boolean enabled ) { fLoadExternalDTD = enabled ; } public boolean getReadingExternalEntity ( ) { return fReaderId != fDoctypeReader ; } public boolean getReadingContentSpec ( ) { return getScannerState ( ) == SCANNER_STATE_CONTENTSPEC ; } public int markupDepth ( ) { return fScannerMarkupDepth ; } private int increaseMarkupDepth ( ) { return fScannerMarkupDepth ++ ; } private int decreaseMarkupDepth ( ) { return fScannerMarkupDepth -- ; } public int parenDepth ( ) { return fScannerParenDepth ; } private void setParenDepth ( int parenDepth ) { fScannerParenDepth = parenDepth ; } private void increaseParenDepth ( ) { fScannerParenDepth ++ ; } private void decreaseParenDepth ( ) { fScannerParenDepth -- ; } public void reset ( StringPool stringPool , XMLEntityHandler . CharBuffer literalData ) throws Exception { fStringPool = stringPool ; fLiteralData = literalData ; fEntityReader = null ; fReaderId = - 1 ; fSystemLiteral = - 1 ; fPubidLiteral = - 1 ; fOpStack = null ; fNodeIndexStack = null ; fPrevNodeIndexStack = null ; fScannerState = SCANNER_STATE_INVALID ; fIncludeSectDepth = 0 ; fDoctypeReader = - 1 ; fExternalSubsetReader = - 1 ; fDefaultAttValueReader = - 1 ; fDefaultAttValueElementType = - 1 ; fDefaultAttValueAttrName = - 1 ; fDefaultAttValueOffset = - 1 ; fDefaultAttValueMark = - 1 ; fEntityValueReader = - 1 ; fEntityValueMark = - 1 ; fScannerMarkupDepth = 0 ; fScannerParenDepth = 0 ; init ( ) ; } private void init ( ) { fXMLSymbol = fStringPool . addSymbol ( "xml" ) ; fXMLNamespace = fStringPool . addSymbol ( "http://www.w3.org/XML/1998/namespace" ) ; fXMLSpace = fStringPool . addSymbol ( "xml:space" ) ; fDefault = fStringPool . addSymbol ( "default" ) ; fPreserve = fStringPool . addSymbol ( "preserve" ) ; } public interface EventHandler { public void callStartDTD ( ) throws Exception ; public void callEndDTD ( ) throws Exception ; public void callTextDecl ( int version , int encoding ) throws Exception ; public void doctypeDecl ( QName rootElement , int publicId , int systemId ) throws Exception ; public void startReadingFromExternalSubset ( int publicId , int systemId ) throws Exception ; public void stopReadingFromExternalSubset ( ) throws Exception ; public int addElementDecl ( QName elementDecl ) throws Exception ; public int addElementDecl ( QName elementDecl , int contentSpecType , int contentSpec , boolean isExternal ) throws Exception ; public int addAttDef ( QName elementDecl , QName attributeDecl , int attType , boolean attList , int enumeration , int attDefaultType , int attDefaultValue , boolean isExternal ) throws Exception ; public int addUniqueLeafNode ( int nameIndex ) throws Exception ; public int addContentSpecNode ( int nodeType , int nodeValue ) throws Exception ; public int addContentSpecNode ( int nodeType , int leftNodeIndex , int rightNodeIndex ) throws Exception ; public String getContentSpecNodeAsString ( int nodeIndex ) throws Exception ; public boolean startEntityDecl ( boolean isPE , int entityName ) throws Exception ; public void endEntityDecl ( ) throws Exception ; public int addInternalPEDecl ( int name , int value ) throws Exception ; public int addExternalPEDecl ( int name , int publicId , int systemId ) throws Exception ; public int addInternalEntityDecl ( int name , int value ) throws Exception ; public int addExternalEntityDecl ( int name , int publicId , int systemId ) throws Exception ; public int addUnparsedEntityDecl ( int name , int publicId , int systemId , int notationName ) throws Exception ; public int startEnumeration ( ) throws Exception ; public void addNameToEnumeration ( int enumIndex , int elementType , int attrName , int nameIndex , boolean isNotationType ) throws Exception ; public void endEnumeration ( int enumIndex ) throws Exception ; public int addNotationDecl ( int notationName , int publicId , int systemId ) throws Exception ; public void callComment ( int data ) throws Exception ; public void callProcessingInstruction ( int piTarget , int piData ) throws Exception ; public void internalSubset ( int internalSubset ) throws Exception ; } protected void reportRecoverableXMLError ( int majorCode , int minorCode , int stringIndex1 ) throws Exception { Object [ ] args = { fStringPool . toString ( stringIndex1 ) } ; fErrorReporter . reportError ( fErrorReporter . getLocator ( ) , XMLMessages . XML_DOMAIN , majorCode , minorCode , args , XMLErrorReporter . ERRORTYPE_RECOVERABLE_ERROR ) ; } protected void reportRecoverableXMLError ( int majorCode , int minorCode , String string1 ) throws Exception { Object [ ] args = { string1 } ; fErrorReporter . reportError ( fErrorReporter . getLocator ( ) , XMLMessages . XML_DOMAIN , majorCode , minorCode , args , XMLErrorReporter . ERRORTYPE_RECOVERABLE_ERROR ) ; } protected void reportRecoverableXMLError ( int majorCode , int minorCode , String string1 , String string2 ) throws Exception { Object [ ] args = { string1 , string2 } ; fErrorReporter . reportError ( fErrorReporter . getLocator ( ) , XMLMessages . XML_DOMAIN , majorCode , minorCode , args , XMLErrorReporter . ERRORTYPE_RECOVERABLE_ERROR ) ; } private void reportFatalXMLError ( int majorCode , int minorCode ) throws Exception { fErrorReporter . reportError ( fErrorReporter . getLocator ( ) , XMLMessages . XML_DOMAIN , majorCode , minorCode , null , XMLErrorReporter . ERRORTYPE_FATAL_ERROR ) ; } private void reportFatalXMLError ( int majorCode , int minorCode , int stringIndex1 ) throws Exception { Object [ ] args = { fStringPool . toString ( stringIndex1 ) } ; fErrorReporter . reportError ( fErrorReporter . getLocator ( ) , XMLMessages . XML_DOMAIN , majorCode , minorCode , args , XMLErrorReporter . ERRORTYPE_FATAL_ERROR ) ; } private void reportFatalXMLError ( int majorCode , int minorCode , String string1 ) throws Exception { Object [ ] args = { string1 } ; fErrorReporter . reportError ( fErrorReporter . getLocator ( ) , XMLMessages . XML_DOMAIN , majorCode , minorCode , args , XMLErrorReporter . ERRORTYPE_FATAL_ERROR ) ; } private void reportFatalXMLError ( int majorCode , int minorCode , int stringIndex1 , int stringIndex2 ) throws Exception { Object [ ] args = { fStringPool . toString ( stringIndex1 ) , fStringPool . toString ( stringIndex2 ) } ; fErrorReporter . reportError ( fErrorReporter . getLocator ( ) , XMLMessages . XML_DOMAIN , majorCode , minorCode , args , XMLErrorReporter . ERRORTYPE_FATAL_ERROR ) ; } private void reportFatalXMLError ( int majorCode , int minorCode , String string1 , String string2 ) throws Exception { Object [ ] args = { string1 , string2 } ; fErrorReporter . reportError ( fErrorReporter . getLocator ( ) , XMLMessages . XML_DOMAIN , majorCode , minorCode , args , XMLErrorReporter . ERRORTYPE_FATAL_ERROR ) ; } private void reportFatalXMLError ( int majorCode , int minorCode , String string1 , String string2 , String string3 ) throws Exception { Object [ ] args = { string1 , string2 , string3 } ; fErrorReporter . reportError ( fErrorReporter . getLocator ( ) , XMLMessages . XML_DOMAIN , majorCode , minorCode , args , XMLErrorReporter . ERRORTYPE_FATAL_ERROR ) ; } private void abortMarkup ( int majorCode , int minorCode ) throws Exception { reportFatalXMLError ( majorCode , minorCode ) ; skipPastEndOfCurrentMarkup ( ) ; } private void abortMarkup ( int majorCode , int minorCode , int stringIndex1 ) throws Exception { reportFatalXMLError ( majorCode , minorCode , stringIndex1 ) ; skipPastEndOfCurrentMarkup ( ) ; } private void abortMarkup ( int majorCode , int minorCode , String string1 ) throws Exception { reportFatalXMLError ( majorCode , minorCode , string1 ) ; skipPastEndOfCurrentMarkup ( ) ; } private void abortMarkup ( int majorCode , int minorCode , int stringIndex1 , int stringIndex2 ) throws Exception { reportFatalXMLError ( majorCode , minorCode , stringIndex1 , stringIndex2 ) ; skipPastEndOfCurrentMarkup ( ) ; } private void skipPastEndOfCurrentMarkup ( ) throws Exception { fEntityReader . skipToChar ( '>' ) ; if ( fEntityReader . lookingAtChar ( '>' , true ) ) decreaseMarkupDepth ( ) ; } static private final int SCANNER_STATE_INVALID = - 1 ; static private final int SCANNER_STATE_END_OF_INPUT = 0 ; static private final int SCANNER_STATE_DOCTYPEDECL = 50 ; static private final int SCANNER_STATE_MARKUP_DECL = 51 ; static private final int SCANNER_STATE_TEXTDECL = 53 ; static private final int SCANNER_STATE_COMMENT = 54 ; static private final int SCANNER_STATE_PI = 55 ; static private final int SCANNER_STATE_DEFAULT_ATTRIBUTE_VALUE = 56 ; static private final int SCANNER_STATE_CONTENTSPEC = 57 ; static private final int SCANNER_STATE_ENTITY_VALUE = 58 ; static private final int SCANNER_STATE_SYSTEMLITERAL = 59 ; static private final int SCANNER_STATE_PUBIDLITERAL = 60 ; private int setScannerState ( int scannerState ) { int prevState = fScannerState ; fScannerState = scannerState ; return prevState ; } private int getScannerState ( ) { return fScannerState ; } private void restoreScannerState ( int scannerState ) { if ( fScannerState != SCANNER_STATE_END_OF_INPUT ) fScannerState = scannerState ; } public void readerChange ( XMLEntityHandler . EntityReader nextReader , int nextReaderId ) throws Exception { fEntityReader = nextReader ; fReaderId = nextReaderId ; if ( fScannerState == SCANNER_STATE_DEFAULT_ATTRIBUTE_VALUE ) { fDefaultAttValueOffset = fEntityReader . currentOffset ( ) ; fDefaultAttValueMark = fDefaultAttValueOffset ; } else if ( fScannerState == SCANNER_STATE_ENTITY_VALUE ) { fEntityValueMark = fEntityReader . currentOffset ( ) ; } } public void endOfInput ( int entityNameIndex , boolean moreToFollow ) throws Exception { if ( fValidationEnabled ) { int readerDepth = fEntityHandler . getReaderDepth ( ) ; if ( getReadingContentSpec ( ) ) { int parenDepth = parenDepth ( ) ; if ( readerDepth != parenDepth ) { reportRecoverableXMLError ( XMLMessages . MSG_IMPROPER_GROUP_NESTING , XMLMessages . VC_PROPER_GROUP_PE_NESTING , entityNameIndex ) ; } } else { int markupDepth = markupDepth ( ) ; if ( readerDepth != markupDepth ) { reportRecoverableXMLError ( XMLMessages . MSG_IMPROPER_DECLARATION_NESTING , XMLMessages . VC_PROPER_DECLARATION_PE_NESTING , entityNameIndex ) ; } } } moreToFollow = fReaderId != fExternalSubsetReader ; switch ( fScannerState ) { case SCANNER_STATE_INVALID : throw new RuntimeException ( "FWK004 XMLDTDScanner.endOfInput: cannot happen: 2" + "\n2" ) ; case SCANNER_STATE_END_OF_INPUT : break ; case SCANNER_STATE_MARKUP_DECL : if ( ! moreToFollow && fIncludeSectDepth > 0 ) { reportFatalXMLError ( XMLMessages . MSG_INCLUDESECT_UNTERMINATED , XMLMessages . P62_UNTERMINATED ) ; } break ; case SCANNER_STATE_DOCTYPEDECL : throw new RuntimeException ( "FWK004 XMLDTDScanner.endOfInput: cannot happen: 2.5" + "\n2.5" ) ; case SCANNER_STATE_TEXTDECL : break ; case SCANNER_STATE_SYSTEMLITERAL : if ( ! moreToFollow ) { reportFatalXMLError ( XMLMessages . MSG_SYSTEMID_UNTERMINATED , XMLMessages . P11_UNTERMINATED ) ; } else { } break ; case SCANNER_STATE_PUBIDLITERAL : if ( ! moreToFollow ) { reportFatalXMLError ( XMLMessages . MSG_PUBLICID_UNTERMINATED , XMLMessages . P12_UNTERMINATED ) ; } else { } break ; case SCANNER_STATE_COMMENT : if ( ! moreToFollow && ! getReadingExternalEntity ( ) ) { reportFatalXMLError ( XMLMessages . MSG_COMMENT_UNTERMINATED , XMLMessages . P15_UNTERMINATED ) ; } else { } break ; case SCANNER_STATE_PI : if ( ! moreToFollow ) { reportFatalXMLError ( XMLMessages . MSG_PI_UNTERMINATED , XMLMessages . P16_UNTERMINATED ) ; } else { reportFatalXMLError ( XMLMessages . MSG_PI_NOT_IN_ONE_ENTITY , XMLMessages . P78_NOT_WELLFORMED ) ; } break ; case SCANNER_STATE_DEFAULT_ATTRIBUTE_VALUE : if ( ! moreToFollow ) { reportFatalXMLError ( XMLMessages . MSG_ATTRIBUTE_VALUE_UNTERMINATED , XMLMessages . P10_UNTERMINATED , fDefaultAttValueElementType , fDefaultAttValueAttrName ) ; } else if ( fReaderId == fDefaultAttValueReader ) { } else { fEntityReader . append ( fLiteralData , fDefaultAttValueMark , fDefaultAttValueOffset - fDefaultAttValueMark ) ; } break ; case SCANNER_STATE_CONTENTSPEC : break ; case SCANNER_STATE_ENTITY_VALUE : if ( fReaderId == fEntityValueReader ) { } else { fEntityReader . append ( fLiteralData , fEntityValueMark , fEntityReader . currentOffset ( ) - fEntityValueMark ) ; } break ; default : throw new RuntimeException ( "FWK004 XMLDTDScanner.endOfInput: cannot happen: 3" + "\n3" ) ; } if ( ! moreToFollow ) { setScannerState ( SCANNER_STATE_END_OF_INPUT ) ; } } private int scanCharRef ( ) throws Exception { int valueOffset = fEntityReader . currentOffset ( ) ; boolean hex = fEntityReader . lookingAtChar ( 'x' , true ) ; int num = fEntityReader . scanCharRef ( hex ) ; if ( num < 0 ) { switch ( num ) { case XMLEntityHandler . CHARREF_RESULT_SEMICOLON_REQUIRED : reportFatalXMLError ( XMLMessages . MSG_SEMICOLON_REQUIRED_IN_CHARREF , XMLMessages . P66_SEMICOLON_REQUIRED ) ; return - 1 ; case XMLEntityHandler . CHARREF_RESULT_INVALID_CHAR : int majorCode = hex ? XMLMessages . MSG_HEXDIGIT_REQUIRED_IN_CHARREF : XMLMessages . MSG_DIGIT_REQUIRED_IN_CHARREF ; int minorCode = hex ? XMLMessages . P66_HEXDIGIT_REQUIRED : XMLMessages . P66_DIGIT_REQUIRED ; reportFatalXMLError ( majorCode , minorCode ) ; return - 1 ; case XMLEntityHandler . CHARREF_RESULT_OUT_OF_RANGE : num = 0x110000 ; break ; } } if ( num < 0x20 ) { if ( num == 0x09 || num == 0x0A || num == 0x0D ) { return num ; } } else if ( num <= 0xD7FF || ( num >= 0xE000 && ( num <= 0xFFFD || ( num >= 0x10000 && num <= 0x10FFFF ) ) ) ) { return num ; } int valueLength = fEntityReader . currentOffset ( ) - valueOffset ; reportFatalXMLError ( XMLMessages . MSG_INVALID_CHARREF , XMLMessages . WFC_LEGAL_CHARACTER , fEntityReader . addString ( valueOffset , valueLength ) ) ; return - 1 ; } private void scanComment ( ) throws Exception { int commentOffset = fEntityReader . currentOffset ( ) ; boolean sawDashDash = false ; int previousState = setScannerState ( SCANNER_STATE_COMMENT ) ; while ( fScannerState == SCANNER_STATE_COMMENT ) { if ( fEntityReader . lookingAtChar ( '-' , false ) ) { int nextEndOffset = fEntityReader . currentOffset ( ) ; int endOffset = 0 ; fEntityReader . lookingAtChar ( '-' , true ) ; int offset = fEntityReader . currentOffset ( ) ; int count = 1 ; while ( fEntityReader . lookingAtChar ( '-' , true ) ) { count ++ ; endOffset = nextEndOffset ; nextEndOffset = offset ; offset = fEntityReader . currentOffset ( ) ; } if ( count > 1 ) { if ( fEntityReader . lookingAtChar ( '>' , true ) ) { if ( ! sawDashDash && count > 2 ) { reportFatalXMLError ( XMLMessages . MSG_DASH_DASH_IN_COMMENT , XMLMessages . P15_DASH_DASH ) ; sawDashDash = true ; } decreaseMarkupDepth ( ) ; int comment = fEntityReader . addString ( commentOffset , endOffset - commentOffset ) ; fDTDGrammar . callComment ( comment ) ; if ( fDTDHandler != null ) { fDTDHandler . comment ( comment ) ; } restoreScannerState ( previousState ) ; return ; } else if ( ! sawDashDash ) { reportFatalXMLError ( XMLMessages . MSG_DASH_DASH_IN_COMMENT , XMLMessages . P15_DASH_DASH ) ; sawDashDash = true ; } } } else { if ( ! fEntityReader . lookingAtValidChar ( true ) ) { int invChar = fEntityReader . scanInvalidChar ( ) ; if ( fScannerState != SCANNER_STATE_END_OF_INPUT ) { if ( invChar >= 0 ) { reportFatalXMLError ( XMLMessages . MSG_INVALID_CHAR_IN_COMMENT , XMLMessages . P15_INVALID_CHARACTER , Integer . toHexString ( invChar ) ) ; } } } } } restoreScannerState ( previousState ) ; } private void scanPI ( int piTarget ) throws Exception { String piTargetString = fStringPool . toString ( piTarget ) ; if ( piTargetString . length ( ) == 3 && ( piTargetString . charAt ( 0 ) == 'X' || piTargetString . charAt ( 0 ) == 'x' ) && ( piTargetString . charAt ( 1 ) == 'M' || piTargetString . charAt ( 1 ) == 'm' ) && ( piTargetString . charAt ( 2 ) == 'L' || piTargetString . charAt ( 2 ) == 'l' ) ) { abortMarkup ( XMLMessages . MSG_RESERVED_PITARGET , XMLMessages . P17_RESERVED_PITARGET ) ; return ; } int prevState = setScannerState ( SCANNER_STATE_PI ) ; int piDataOffset = - 1 ; int piDataLength = 0 ; if ( ! fEntityReader . lookingAtSpace ( true ) ) { if ( ! fEntityReader . lookingAtChar ( '?' , true ) || ! fEntityReader . lookingAtChar ( '>' , true ) ) { if ( fScannerState != SCANNER_STATE_END_OF_INPUT ) { abortMarkup ( XMLMessages . MSG_SPACE_REQUIRED_IN_PI , XMLMessages . P16_WHITESPACE_REQUIRED ) ; restoreScannerState ( prevState ) ; } return ; } decreaseMarkupDepth ( ) ; restoreScannerState ( prevState ) ; } else { fEntityReader . skipPastSpaces ( ) ; piDataOffset = fEntityReader . currentOffset ( ) ; while ( fScannerState == SCANNER_STATE_PI ) { while ( fEntityReader . lookingAtChar ( '?' , false ) ) { int offset = fEntityReader . currentOffset ( ) ; fEntityReader . lookingAtChar ( '?' , true ) ; if ( fEntityReader . lookingAtChar ( '>' , true ) ) { piDataLength = offset - piDataOffset ; decreaseMarkupDepth ( ) ; restoreScannerState ( prevState ) ; break ; } } if ( fScannerState != SCANNER_STATE_PI ) break ; if ( ! fEntityReader . lookingAtValidChar ( true ) ) { int invChar = fEntityReader . scanInvalidChar ( ) ; if ( fScannerState != SCANNER_STATE_END_OF_INPUT ) { if ( invChar >= 0 ) { reportFatalXMLError ( XMLMessages . MSG_INVALID_CHAR_IN_PI , XMLMessages . P16_INVALID_CHARACTER , Integer . toHexString ( invChar ) ) ; } skipPastEndOfCurrentMarkup ( ) ; restoreScannerState ( prevState ) ; } return ; } } } int piData = piDataLength == 0 ? StringPool . EMPTY_STRING : fEntityReader . addString ( piDataOffset , piDataLength ) ; fDTDGrammar . callProcessingInstruction ( piTarget , piData ) ; if ( fDTDHandler != null ) { fDTDHandler . processingInstruction ( piTarget , piData ) ; } } public boolean scanDoctypeDecl ( ) throws Exception { fDTDGrammar = new DTDGrammar ( fStringPool ) ; fDTDGrammar . callStartDTD ( ) ; increaseMarkupDepth ( ) ; fEntityReader = fEntityHandler . getEntityReader ( ) ; fReaderId = fEntityHandler . getReaderId ( ) ; fDoctypeReader = fReaderId ; setScannerState ( SCANNER_STATE_DOCTYPEDECL ) ; if ( ! fEntityReader . lookingAtSpace ( true ) ) { abortMarkup ( XMLMessages . MSG_SPACE_REQUIRED_BEFORE_ROOT_ELEMENT_TYPE_IN_DOCTYPEDECL , XMLMessages . P28_SPACE_REQUIRED ) ; return false ; } fEntityReader . skipPastSpaces ( ) ; scanElementType ( fEntityReader , ' ' , fElementQName ) ; if ( fElementQName . rawname == - 1 ) { abortMarkup ( XMLMessages . MSG_ROOT_ELEMENT_TYPE_REQUIRED , XMLMessages . P28_ROOT_ELEMENT_TYPE_REQUIRED ) ; return false ; } boolean lbrkt ; boolean scanExternalSubset = false ; int publicId = - 1 ; int systemId = - 1 ; if ( fEntityReader . lookingAtSpace ( true ) ) { fEntityReader . skipPastSpaces ( ) ; if ( ! ( lbrkt = fEntityReader . lookingAtChar ( '[' , true ) ) && ! fEntityReader . lookingAtChar ( '>' , false ) ) { if ( ! scanExternalID ( false ) ) { skipPastEndOfCurrentMarkup ( ) ; return false ; } if ( fValidationEnabled || fLoadExternalDTD ) { scanExternalSubset = true ; } publicId = fPubidLiteral ; systemId = fSystemLiteral ; fEntityReader . skipPastSpaces ( ) ; lbrkt = fEntityReader . lookingAtChar ( '[' , true ) ; } } else lbrkt = fEntityReader . lookingAtChar ( '[' , true ) ; fDTDGrammar . doctypeDecl ( fElementQName , publicId , systemId ) ; if ( fDTDHandler != null ) { fDTDHandler . startDTD ( fElementQName , publicId , systemId ) ; } if ( lbrkt ) { scanDecls ( false ) ; fEntityReader . skipPastSpaces ( ) ; } if ( ! fEntityReader . lookingAtChar ( '>' , true ) ) { if ( fScannerState != SCANNER_STATE_END_OF_INPUT ) { abortMarkup ( XMLMessages . MSG_DOCTYPEDECL_UNTERMINATED , XMLMessages . P28_UNTERMINATED , fElementQName . rawname ) ; } return false ; } decreaseMarkupDepth ( ) ; if ( scanExternalSubset ) { ( ( DefaultEntityHandler ) fEntityHandler ) . startReadingFromExternalSubset ( fStringPool . toString ( publicId ) , fStringPool . toString ( systemId ) , markupDepth ( ) ) ; fDTDGrammar . startReadingFromExternalSubset ( publicId , systemId ) ; } else { fDTDGrammar . callEndDTD ( ) ; if ( fDTDHandler != null ) { fDTDHandler . endDTD ( ) ; } } fGrammarResolver . putGrammar ( "" , fDTDGrammar ) ; return true ; } private boolean scanExternalID ( boolean scanPublicID ) throws Exception { fSystemLiteral = - 1 ; fPubidLiteral = - 1 ; int offset = fEntityReader . currentOffset ( ) ; if ( fEntityReader . skippedString ( system_string ) ) { if ( ! fEntityReader . lookingAtSpace ( true ) ) { reportFatalXMLError ( XMLMessages . MSG_SPACE_REQUIRED_BEFORE_SYSTEMLITERAL_IN_EXTERNALID , XMLMessages . P75_SPACE_REQUIRED ) ; return false ; } fEntityReader . skipPastSpaces ( ) ; if ( getReadingExternalEntity ( ) == true ) { checkForPEReference ( false ) ; } return scanSystemLiteral ( ) ; } if ( fEntityReader . skippedString ( public_string ) ) { if ( ! fEntityReader . lookingAtSpace ( true ) ) { reportFatalXMLError ( XMLMessages . MSG_SPACE_REQUIRED_BEFORE_PUBIDLITERAL_IN_EXTERNALID , XMLMessages . P75_SPACE_REQUIRED ) ; return false ; } fEntityReader . skipPastSpaces ( ) ; if ( ! scanPubidLiteral ( ) ) return false ; if ( scanPublicID ) { if ( ! fEntityReader . lookingAtSpace ( true ) ) return true ; fEntityReader . skipPastSpaces ( ) ; if ( fEntityReader . lookingAtChar ( '>' , false ) ) return true ; } else { if ( ! fEntityReader . lookingAtSpace ( true ) ) { reportFatalXMLError ( XMLMessages . MSG_SPACE_REQUIRED_AFTER_PUBIDLITERAL_IN_EXTERNALID , XMLMessages . P75_SPACE_REQUIRED ) ; return false ; } fEntityReader . skipPastSpaces ( ) ; } return scanSystemLiteral ( ) ; } reportFatalXMLError ( XMLMessages . MSG_EXTERNALID_REQUIRED , XMLMessages . P75_INVALID ) ; return false ; } private boolean scanSystemLiteral ( ) throws Exception { boolean single ; if ( ! ( single = fEntityReader . lookingAtChar ( '\'' , true ) ) && ! fEntityReader . lookingAtChar ( '\"' , true ) ) { reportFatalXMLError ( XMLMessages . MSG_QUOTE_REQUIRED_IN_SYSTEMID , XMLMessages . P11_QUOTE_REQUIRED ) ; return false ; } int prevState = setScannerState ( SCANNER_STATE_SYSTEMLITERAL ) ; int offset = fEntityReader . currentOffset ( ) ; char qchar = single ? '\'' : '\"' ; boolean dataok = true ; boolean fragment = false ; while ( ! fEntityReader . lookingAtChar ( qchar , false ) ) { if ( fEntityReader . lookingAtChar ( '#' , true ) ) { fragment = true ; } else if ( ! fEntityReader . lookingAtValidChar ( true ) ) { dataok = false ; int invChar = fEntityReader . scanInvalidChar ( ) ; if ( fScannerState == SCANNER_STATE_END_OF_INPUT ) return false ; if ( invChar >= 0 ) { reportFatalXMLError ( XMLMessages . MSG_INVALID_CHAR_IN_SYSTEMID , XMLMessages . P11_INVALID_CHARACTER , Integer . toHexString ( invChar ) ) ; } } } if ( dataok ) { fSystemLiteral = fEntityReader . addString ( offset , fEntityReader . currentOffset ( ) - offset ) ; if ( fragment ) { Object [ ] args = { fStringPool . toString ( fSystemLiteral ) } ; fErrorReporter . reportError ( fErrorReporter . getLocator ( ) , XMLMessages . XML_DOMAIN , XMLMessages . MSG_URI_FRAGMENT_IN_SYSTEMID , XMLMessages . P11_URI_FRAGMENT , args , XMLErrorReporter . ERRORTYPE_RECOVERABLE_ERROR ) ; } } fEntityReader . lookingAtChar ( qchar , true ) ; restoreScannerState ( prevState ) ; return dataok ; } private boolean scanPubidLiteral ( ) throws Exception { boolean single ; if ( ! ( single = fEntityReader . lookingAtChar ( '\'' , true ) ) && ! fEntityReader . lookingAtChar ( '\"' , true ) ) { reportFatalXMLError ( XMLMessages . MSG_QUOTE_REQUIRED_IN_PUBLICID , XMLMessages . P12_QUOTE_REQUIRED ) ; return false ; } char qchar = single ? '\'' : '\"' ; int prevState = setScannerState ( SCANNER_STATE_PUBIDLITERAL ) ; boolean dataok = true ; while ( true ) { if ( fEntityReader . lookingAtChar ( ( char ) 0x09 , true ) ) { dataok = false ; reportFatalXMLError ( XMLMessages . MSG_PUBIDCHAR_ILLEGAL , XMLMessages . P12_INVALID_CHARACTER , "9" ) ; } if ( ! fEntityReader . lookingAtSpace ( true ) ) break ; } int offset = fEntityReader . currentOffset ( ) ; int dataOffset = fLiteralData . length ( ) ; int toCopy = offset ; while ( true ) { if ( fEntityReader . lookingAtChar ( qchar , true ) ) { if ( dataok && offset - toCopy > 0 ) fEntityReader . append ( fLiteralData , toCopy , offset - toCopy ) ; break ; } if ( fEntityReader . lookingAtChar ( ( char ) 0x09 , true ) ) { dataok = false ; reportFatalXMLError ( XMLMessages . MSG_PUBIDCHAR_ILLEGAL , XMLMessages . P12_INVALID_CHARACTER , "9" ) ; continue ; } if ( fEntityReader . lookingAtSpace ( true ) ) { if ( dataok && offset - toCopy > 0 ) fEntityReader . append ( fLiteralData , toCopy , offset - toCopy ) ; while ( true ) { if ( fEntityReader . lookingAtChar ( ( char ) 0x09 , true ) ) { dataok = false ; reportFatalXMLError ( XMLMessages . MSG_PUBIDCHAR_ILLEGAL , XMLMessages . P12_INVALID_CHARACTER , "9" ) ; break ; } else if ( ! fEntityReader . lookingAtSpace ( true ) ) { break ; } } if ( fEntityReader . lookingAtChar ( qchar , true ) ) break ; if ( dataok ) { fLiteralData . append ( ' ' ) ; offset = fEntityReader . currentOffset ( ) ; toCopy = offset ; } continue ; } if ( ! fEntityReader . lookingAtValidChar ( true ) ) { int invChar = fEntityReader . scanInvalidChar ( ) ; if ( fScannerState == SCANNER_STATE_END_OF_INPUT ) return false ; dataok = false ; if ( invChar >= 0 ) { reportFatalXMLError ( XMLMessages . MSG_INVALID_CHAR_IN_PUBLICID , XMLMessages . P12_INVALID_CHARACTER , Integer . toHexString ( invChar ) ) ; } } if ( dataok ) offset = fEntityReader . currentOffset ( ) ; } if ( dataok ) { int dataLength = fLiteralData . length ( ) - dataOffset ; fPubidLiteral = fLiteralData . addString ( dataOffset , dataLength ) ; String publicId = fStringPool . toString ( fPubidLiteral ) ; int invCharIndex = validPublicId ( publicId ) ; if ( invCharIndex >= 0 ) { reportFatalXMLError ( XMLMessages . MSG_PUBIDCHAR_ILLEGAL , XMLMessages . P12_INVALID_CHARACTER , Integer . toHexString ( publicId . charAt ( invCharIndex ) ) ) ; return false ; } } restoreScannerState ( prevState ) ; return dataok ; } public void scanDecls ( boolean extSubset ) throws Exception { int subsetOffset = fEntityReader . currentOffset ( ) ; if ( extSubset ) fExternalSubsetReader = fReaderId ; fIncludeSectDepth = 0 ; boolean parseTextDecl = extSubset ; int prevState = setScannerState ( SCANNER_STATE_MARKUP_DECL ) ; while ( fScannerState == SCANNER_STATE_MARKUP_DECL ) { boolean newParseTextDecl = false ; if ( ! extSubset && fEntityReader . lookingAtChar ( ']' , false ) ) { int subsetLength = fEntityReader . currentOffset ( ) - subsetOffset ; int internalSubset = fEntityReader . addString ( subsetOffset , subsetLength ) ; fDTDGrammar . internalSubset ( internalSubset ) ; if ( fDTDHandler != null ) { fDTDHandler . internalSubset ( internalSubset ) ; } fEntityReader . lookingAtChar ( ']' , true ) ; restoreScannerState ( prevState ) ; return ; } if ( fEntityReader . lookingAtChar ( '<' , true ) ) { int olddepth = markupDepth ( ) ; increaseMarkupDepth ( ) ; if ( fEntityReader . lookingAtChar ( '!' , true ) ) { if ( fEntityReader . lookingAtChar ( '-' , true ) ) { if ( fEntityReader . lookingAtChar ( '-' , true ) ) { scanComment ( ) ; } else { abortMarkup ( XMLMessages . MSG_MARKUP_NOT_RECOGNIZED_IN_DTD , XMLMessages . P29_NOT_RECOGNIZED ) ; } } else if ( fEntityReader . lookingAtChar ( '[' , true ) && getReadingExternalEntity ( ) ) { checkForPEReference ( false ) ; if ( fEntityReader . skippedString ( include_string ) ) { checkForPEReference ( false ) ; if ( ! fEntityReader . lookingAtChar ( '[' , true ) ) { abortMarkup ( XMLMessages . MSG_MARKUP_NOT_RECOGNIZED_IN_DTD , XMLMessages . P29_NOT_RECOGNIZED ) ; } else { fIncludeSectDepth ++ ; } } else if ( fEntityReader . skippedString ( ignore_string ) ) { checkForPEReference ( false ) ; if ( ! fEntityReader . lookingAtChar ( '[' , true ) ) { abortMarkup ( XMLMessages . MSG_MARKUP_NOT_RECOGNIZED_IN_DTD , XMLMessages . P29_NOT_RECOGNIZED ) ; } else scanIgnoreSectContents ( ) ; } else { abortMarkup ( XMLMessages . MSG_MARKUP_NOT_RECOGNIZED_IN_DTD , XMLMessages . P29_NOT_RECOGNIZED ) ; } } else if ( fEntityReader . skippedString ( element_string ) ) { scanElementDecl ( ) ; } else if ( fEntityReader . skippedString ( attlist_string ) ) scanAttlistDecl ( ) ; else if ( fEntityReader . skippedString ( entity_string ) ) scanEntityDecl ( ) ; else if ( fEntityReader . skippedString ( notation_string ) ) scanNotationDecl ( ) ; else { abortMarkup ( XMLMessages . MSG_MARKUP_NOT_RECOGNIZED_IN_DTD , XMLMessages . P29_NOT_RECOGNIZED ) ; } } else if ( fEntityReader . lookingAtChar ( '?' , true ) ) { int piTarget = fEntityReader . scanName ( ' ' ) ; if ( piTarget == - 1 ) { abortMarkup ( XMLMessages . MSG_PITARGET_REQUIRED , XMLMessages . P16_REQUIRED ) ; } else if ( "xml" . equals ( fStringPool . toString ( piTarget ) ) ) { if ( fEntityReader . lookingAtSpace ( true ) ) { if ( parseTextDecl ) { scanTextDecl ( ) ; } else { abortMarkup ( XMLMessages . MSG_TEXTDECL_MUST_BE_FIRST , XMLMessages . P30_TEXTDECL_MUST_BE_FIRST ) ; } } else { abortMarkup ( XMLMessages . MSG_RESERVED_PITARGET , XMLMessages . P17_RESERVED_PITARGET ) ; } } else scanPI ( piTarget ) ; } else { abortMarkup ( XMLMessages . MSG_MARKUP_NOT_RECOGNIZED_IN_DTD , XMLMessages . P29_NOT_RECOGNIZED ) ; } } else if ( fEntityReader . lookingAtSpace ( true ) ) { fEntityReader . skipPastSpaces ( ) ; } else if ( fEntityReader . lookingAtChar ( '%' , true ) ) { int nameOffset = fEntityReader . currentOffset ( ) ; fEntityReader . skipPastName ( ';' ) ; int nameLength = fEntityReader . currentOffset ( ) - nameOffset ; if ( nameLength == 0 ) { reportFatalXMLError ( XMLMessages . MSG_NAME_REQUIRED_IN_PEREFERENCE , XMLMessages . P69_NAME_REQUIRED ) ; } else if ( ! fEntityReader . lookingAtChar ( ';' , true ) ) { reportFatalXMLError ( XMLMessages . MSG_SEMICOLON_REQUIRED_IN_PEREFERENCE , XMLMessages . P69_SEMICOLON_REQUIRED , fEntityReader . addString ( nameOffset , nameLength ) ) ; } else { int peNameIndex = fEntityReader . addSymbol ( nameOffset , nameLength ) ; newParseTextDecl = fEntityHandler . startReadingFromEntity ( peNameIndex , markupDepth ( ) , XMLEntityHandler . ENTITYREF_IN_DTD_AS_MARKUP ) ; } } else if ( fIncludeSectDepth > 0 && fEntityReader . lookingAtChar ( ']' , true ) ) { if ( ! fEntityReader . lookingAtChar ( ']' , true ) || ! fEntityReader . lookingAtChar ( '>' , true ) ) { abortMarkup ( XMLMessages . MSG_INCLUDESECT_UNTERMINATED , XMLMessages . P62_UNTERMINATED ) ; } else decreaseMarkupDepth ( ) ; fIncludeSectDepth -- ; } else { if ( ! fEntityReader . lookingAtValidChar ( false ) ) { int invChar = fEntityReader . scanInvalidChar ( ) ; if ( fScannerState == SCANNER_STATE_END_OF_INPUT ) break ; if ( invChar >= 0 ) { if ( ! extSubset ) { reportFatalXMLError ( XMLMessages . MSG_INVALID_CHAR_IN_INTERNAL_SUBSET , XMLMessages . P28_INVALID_CHARACTER , Integer . toHexString ( invChar ) ) ; } else { reportFatalXMLError ( XMLMessages . MSG_INVALID_CHAR_IN_EXTERNAL_SUBSET , XMLMessages . P30_INVALID_CHARACTER , Integer . toHexString ( invChar ) ) ; } } } else { reportFatalXMLError ( XMLMessages . MSG_MARKUP_NOT_RECOGNIZED_IN_DTD , XMLMessages . P29_NOT_RECOGNIZED ) ; fEntityReader . lookingAtValidChar ( true ) ; } } parseTextDecl = newParseTextDecl ; } if ( extSubset ) { ( ( DefaultEntityHandler ) fEntityHandler ) . stopReadingFromExternalSubset ( ) ; fDTDGrammar . stopReadingFromExternalSubset ( ) ; fDTDGrammar . callEndDTD ( ) ; if ( fDTDHandler != null ) { fDTDHandler . endDTD ( ) ; } fGrammarResolver . putGrammar ( "" , fDTDGrammar ) ; } } private void scanIgnoreSectContents ( ) throws Exception { int initialDepth = ++ fIncludeSectDepth ; while ( true ) { if ( fEntityReader . lookingAtChar ( '<' , true ) ) { if ( fEntityReader . lookingAtChar ( '!' , true ) && fEntityReader . lookingAtChar ( '[' , true ) ) fIncludeSectDepth ++ ; } else if ( fEntityReader . lookingAtChar ( ']' , true ) ) { if ( fEntityReader . lookingAtChar ( ']' , true ) ) { while ( fEntityReader . lookingAtChar ( ']' , true ) ) { } if ( fEntityReader . lookingAtChar ( '>' , true ) ) { if ( fIncludeSectDepth -- == initialDepth ) { decreaseMarkupDepth ( ) ; return ; } } } } else if ( ! fEntityReader . lookingAtValidChar ( true ) ) { int invChar = fEntityReader . scanInvalidChar ( ) ; if ( fScannerState == SCANNER_STATE_END_OF_INPUT ) return ; if ( invChar >= 0 ) { reportFatalXMLError ( XMLMessages . MSG_INVALID_CHAR_IN_IGNORESECT , XMLMessages . P65_INVALID_CHARACTER , Integer . toHexString ( invChar ) ) ; } } } } private void scanTextDecl ( ) throws Exception { int version = - 1 ; int encoding = - 1 ; final int TEXTDECL_START = 0 ; final int TEXTDECL_VERSION = 1 ; final int TEXTDECL_ENCODING = 2 ; final int TEXTDECL_FINISHED = 3 ; int prevState = setScannerState ( SCANNER_STATE_TEXTDECL ) ; int state = TEXTDECL_START ; do { fEntityReader . skipPastSpaces ( ) ; int offset = fEntityReader . currentOffset ( ) ; if ( state == TEXTDECL_START && fEntityReader . skippedString ( version_string ) ) { state = TEXTDECL_VERSION ; } else if ( fEntityReader . skippedString ( encoding_string ) ) { state = TEXTDECL_ENCODING ; } else { abortMarkup ( XMLMessages . MSG_ENCODINGDECL_REQUIRED , XMLMessages . P77_ENCODINGDECL_REQUIRED ) ; restoreScannerState ( prevState ) ; return ; } int length = fEntityReader . currentOffset ( ) - offset ; fEntityReader . skipPastSpaces ( ) ; if ( ! fEntityReader . lookingAtChar ( '=' , true ) ) { int minorCode = state == TEXTDECL_VERSION ? XMLMessages . P24_EQ_REQUIRED : XMLMessages . P80_EQ_REQUIRED ; abortMarkup ( XMLMessages . MSG_EQ_REQUIRED_IN_TEXTDECL , minorCode , fEntityReader . addString ( offset , length ) ) ; restoreScannerState ( prevState ) ; return ; } fEntityReader . skipPastSpaces ( ) ; int result = fEntityReader . scanStringLiteral ( ) ; switch ( result ) { case XMLEntityHandler . STRINGLIT_RESULT_QUOTE_REQUIRED : { int minorCode = state == TEXTDECL_VERSION ? XMLMessages . P24_QUOTE_REQUIRED : XMLMessages . P80_QUOTE_REQUIRED ; abortMarkup ( XMLMessages . MSG_QUOTE_REQUIRED_IN_TEXTDECL , minorCode , fEntityReader . addString ( offset , length ) ) ; restoreScannerState ( prevState ) ; return ; } case XMLEntityHandler . STRINGLIT_RESULT_INVALID_CHAR : int invChar = fEntityReader . scanInvalidChar ( ) ; if ( fScannerState != SCANNER_STATE_END_OF_INPUT ) { if ( invChar >= 0 ) { int minorCode = state == TEXTDECL_VERSION ? XMLMessages . P26_INVALID_CHARACTER : XMLMessages . P81_INVALID_CHARACTER ; reportFatalXMLError ( XMLMessages . MSG_INVALID_CHAR_IN_TEXTDECL , minorCode , Integer . toHexString ( invChar ) ) ; } skipPastEndOfCurrentMarkup ( ) ; restoreScannerState ( prevState ) ; } return ; default : break ; } switch ( state ) { case TEXTDECL_VERSION : version = result ; String versionString = fStringPool . toString ( version ) ; if ( ! "1.0" . equals ( versionString ) ) { if ( ! validVersionNum ( versionString ) ) { abortMarkup ( XMLMessages . MSG_VERSIONINFO_INVALID , XMLMessages . P26_INVALID_VALUE , versionString ) ; restoreScannerState ( prevState ) ; return ; } Object [ ] args = { versionString } ; fErrorReporter . reportError ( fErrorReporter . getLocator ( ) , XMLMessages . XML_DOMAIN , XMLMessages . MSG_VERSION_NOT_SUPPORTED , XMLMessages . P26_NOT_SUPPORTED , args , XMLErrorReporter . ERRORTYPE_RECOVERABLE_ERROR ) ; } if ( ! fEntityReader . lookingAtSpace ( true ) ) { abortMarkup ( XMLMessages . MSG_SPACE_REQUIRED_IN_TEXTDECL , XMLMessages . P80_WHITESPACE_REQUIRED ) ; restoreScannerState ( prevState ) ; return ; } break ; case TEXTDECL_ENCODING : encoding = result ; String encodingString = fStringPool . toString ( encoding ) ; if ( ! validEncName ( encodingString ) ) { abortMarkup ( XMLMessages . MSG_ENCODINGDECL_INVALID , XMLMessages . P81_INVALID_VALUE , encodingString ) ; restoreScannerState ( prevState ) ; return ; } fEntityReader . skipPastSpaces ( ) ; state = TEXTDECL_FINISHED ; break ; } } while ( state != TEXTDECL_FINISHED ) ; if ( ! fEntityReader . lookingAtChar ( '?' , true ) || ! fEntityReader . lookingAtChar ( '>' , true ) ) { abortMarkup ( XMLMessages . MSG_TEXTDECL_UNTERMINATED , XMLMessages . P77_UNTERMINATED ) ; restoreScannerState ( prevState ) ; return ; } decreaseMarkupDepth ( ) ; fDTDGrammar . callTextDecl ( version , encoding ) ; if ( fDTDHandler != null ) { fDTDHandler . textDecl ( version , encoding ) ; } restoreScannerState ( prevState ) ; } private QName fElementDeclQName = new QName ( ) ; private void scanElementDecl ( ) throws Exception { if ( ! checkForPEReference ( true ) ) { abortMarkup ( XMLMessages . MSG_SPACE_REQUIRED_BEFORE_ELEMENT_TYPE_IN_ELEMENTDECL , XMLMessages . P45_SPACE_REQUIRED ) ; return ; } checkForElementTypeWithPEReference ( fEntityReader , ' ' , fElementQName ) ; if ( fElementQName . rawname == - 1 ) { abortMarkup ( XMLMessages . MSG_ELEMENT_TYPE_REQUIRED_IN_ELEMENTDECL , XMLMessages . P45_ELEMENT_TYPE_REQUIRED ) ; return ; } if ( fDTDHandler != null ) { fElementDeclQName . setValues ( fElementQName ) ; } if ( ! checkForPEReference ( true ) ) { abortMarkup ( XMLMessages . MSG_SPACE_REQUIRED_BEFORE_CONTENTSPEC_IN_ELEMENTDECL , XMLMessages . P45_SPACE_REQUIRED , fElementQName . rawname ) ; return ; } int contentSpecType = - 1 ; int contentSpec = - 1 ; if ( fEntityReader . skippedString ( empty_string ) ) { contentSpecType = XMLElementDecl . TYPE_EMPTY ; } else if ( fEntityReader . skippedString ( any_string ) ) { contentSpecType = XMLElementDecl . TYPE_ANY ; } else if ( ! fEntityReader . lookingAtChar ( '(' , true ) ) { abortMarkup ( XMLMessages . MSG_CONTENTSPEC_REQUIRED_IN_ELEMENTDECL , XMLMessages . P45_CONTENTSPEC_REQUIRED , fElementQName . rawname ) ; return ; } else { int contentSpecReader = fReaderId ; int contentSpecReaderDepth = fEntityHandler . getReaderDepth ( ) ; int prevState = setScannerState ( SCANNER_STATE_CONTENTSPEC ) ; int oldDepth = parenDepth ( ) ; fEntityHandler . setReaderDepth ( oldDepth ) ; increaseParenDepth ( ) ; checkForPEReference ( false ) ; boolean skippedPCDATA = fEntityReader . skippedString ( pcdata_string ) ; if ( skippedPCDATA ) { contentSpecType = XMLElementDecl . TYPE_MIXED ; contentSpec = scanMixed ( fElementQName ) ; } else { contentSpecType = XMLElementDecl . TYPE_CHILDREN ; contentSpec = scanChildren ( fElementQName ) ; } boolean success = contentSpec != - 1 ; restoreScannerState ( prevState ) ; fEntityHandler . setReaderDepth ( contentSpecReaderDepth ) ; if ( ! success ) { setParenDepth ( oldDepth ) ; skipPastEndOfCurrentMarkup ( ) ; return ; } else { if ( parenDepth ( ) != oldDepth ) ; } } checkForPEReference ( false ) ; if ( ! fEntityReader . lookingAtChar ( '>' , true ) ) { abortMarkup ( XMLMessages . MSG_ELEMENTDECL_UNTERMINATED , XMLMessages . P45_UNTERMINATED , fElementQName . rawname ) ; return ; } decreaseMarkupDepth ( ) ; int elementIndex = fDTDGrammar . getElementDeclIndex ( fElementQName , - 1 ) ; boolean elementDeclIsExternal = getReadingExternalEntity ( ) ; if ( elementIndex == - 1 ) { elementIndex = fDTDGrammar . addElementDecl ( fElementQName , contentSpecType , contentSpec , elementDeclIsExternal ) ; } else { fDTDGrammar . getElementDecl ( elementIndex , fTempElementDecl ) ; if ( fTempElementDecl . type == - 1 ) { fTempElementDecl . type = contentSpecType ; fTempElementDecl . contentSpecIndex = contentSpec ; fDTDGrammar . setElementDeclDTD ( elementIndex , fTempElementDecl ) ; fDTDGrammar . setElementDeclIsExternal ( elementIndex , elementDeclIsExternal ) ; } else { if ( fValidationEnabled ) { reportRecoverableXMLError ( XMLMessages . MSG_ELEMENT_ALREADY_DECLARED , XMLMessages . VC_UNIQUE_ELEMENT_TYPE_DECLARATION , fStringPool . toString ( fElementQName . rawname ) ) ; } } } if ( fDTDHandler != null ) { fDTDGrammar . getElementDecl ( elementIndex , fTempElementDecl ) ; fDTDHandler . elementDecl ( fElementDeclQName , contentSpecType , contentSpec , fDTDGrammar ) ; } } private int scanMixed ( QName element ) throws Exception { int valueIndex = - 1 ; int prevNodeIndex = - 1 ; boolean starRequired = false ; int [ ] valueSeen = new int [ 32 ] ; int valueCount = 0 ; boolean dupAttrType = false ; int nodeIndex = - 1 ; while ( true ) { if ( fValidationEnabled ) { for ( int i = 0 ; i < valueCount ; i ++ ) { if ( valueSeen [ i ] == valueIndex ) { dupAttrType = true ; break ; } } } if ( dupAttrType && fValidationEnabled ) { reportRecoverableXMLError ( XMLMessages . MSG_DUPLICATE_TYPE_IN_MIXED_CONTENT , XMLMessages . VC_NO_DUPLICATE_TYPES , valueIndex ) ; dupAttrType = false ; } else { try { valueSeen [ valueCount ] = valueIndex ; } catch ( ArrayIndexOutOfBoundsException ae ) { int [ ] newArray = new int [ valueSeen . length * 2 ] ; System . arraycopy ( valueSeen , 0 , newArray , 0 , valueSeen . length ) ; valueSeen = newArray ; valueSeen [ valueCount ] = valueIndex ; } valueCount ++ ; nodeIndex = fDTDGrammar . addUniqueLeafNode ( valueIndex ) ; } checkForPEReference ( false ) ; if ( ! fEntityReader . lookingAtChar ( '|' , true ) ) { if ( ! fEntityReader . lookingAtChar ( ')' , true ) ) { reportFatalXMLError ( XMLMessages . MSG_CLOSE_PAREN_REQUIRED_IN_MIXED , XMLMessages . P51_CLOSE_PAREN_REQUIRED , element . rawname ) ; return - 1 ; } decreaseParenDepth ( ) ; if ( nodeIndex == - 1 ) { nodeIndex = prevNodeIndex ; } else if ( prevNodeIndex != - 1 ) { nodeIndex = fDTDGrammar . addContentSpecNode ( XMLContentSpec . CONTENTSPECNODE_CHOICE , prevNodeIndex , nodeIndex ) ; } if ( fEntityReader . lookingAtChar ( '*' , true ) ) { nodeIndex = fDTDGrammar . addContentSpecNode ( XMLContentSpec . CONTENTSPECNODE_ZERO_OR_MORE , nodeIndex ) ; } else if ( starRequired ) { reportFatalXMLError ( XMLMessages . MSG_MIXED_CONTENT_UNTERMINATED , XMLMessages . P51_UNTERMINATED , fStringPool . toString ( element . rawname ) , fDTDGrammar . getContentSpecNodeAsString ( nodeIndex ) ) ; return - 1 ; } return nodeIndex ; } if ( nodeIndex != - 1 ) { if ( prevNodeIndex != - 1 ) { nodeIndex = fDTDGrammar . addContentSpecNode ( XMLContentSpec . CONTENTSPECNODE_CHOICE , prevNodeIndex , nodeIndex ) ; } prevNodeIndex = nodeIndex ; } starRequired = true ; checkForPEReference ( false ) ; checkForElementTypeWithPEReference ( fEntityReader , ')' , fElementRefQName ) ; valueIndex = fElementRefQName . rawname ; if ( valueIndex == - 1 ) { reportFatalXMLError ( XMLMessages . MSG_ELEMENT_TYPE_REQUIRED_IN_MIXED_CONTENT , XMLMessages . P51_ELEMENT_TYPE_REQUIRED , element . rawname ) ; return - 1 ; } } } private int scanChildren ( QName element ) throws Exception { int depth = 1 ; initializeContentModelStack ( depth ) ; while ( true ) { if ( fEntityReader . lookingAtChar ( '(' , true ) ) { increaseParenDepth ( ) ; checkForPEReference ( false ) ; depth ++ ; initializeContentModelStack ( depth ) ; continue ; } checkForElementTypeWithPEReference ( fEntityReader , ')' , fElementRefQName ) ; int valueIndex = fElementRefQName . rawname ; if ( valueIndex == - 1 ) { reportFatalXMLError ( XMLMessages . MSG_OPEN_PAREN_OR_ELEMENT_TYPE_REQUIRED_IN_CHILDREN , XMLMessages . P47_OPEN_PAREN_OR_ELEMENT_TYPE_REQUIRED , element . rawname ) ; return - 1 ; } fNodeIndexStack [ depth ] = fDTDGrammar . addContentSpecNode ( XMLContentSpec . CONTENTSPECNODE_LEAF , valueIndex ) ; if ( fEntityReader . lookingAtChar ( '?' , true ) ) { fNodeIndexStack [ depth ] = fDTDGrammar . addContentSpecNode ( XMLContentSpec . CONTENTSPECNODE_ZERO_OR_ONE , fNodeIndexStack [ depth ] ) ; } else if ( fEntityReader . lookingAtChar ( '*' , true ) ) { fNodeIndexStack [ depth ] = fDTDGrammar . addContentSpecNode ( XMLContentSpec . CONTENTSPECNODE_ZERO_OR_MORE , fNodeIndexStack [ depth ] ) ; } else if ( fEntityReader . lookingAtChar ( '+' , true ) ) { fNodeIndexStack [ depth ] = fDTDGrammar . addContentSpecNode ( XMLContentSpec . CONTENTSPECNODE_ONE_OR_MORE , fNodeIndexStack [ depth ] ) ; } while ( true ) { checkForPEReference ( false ) ; if ( fOpStack [ depth ] != XMLContentSpec . CONTENTSPECNODE_SEQ && fEntityReader . lookingAtChar ( '|' , true ) ) { if ( fPrevNodeIndexStack [ depth ] != - 1 ) { fNodeIndexStack [ depth ] = fDTDGrammar . addContentSpecNode ( fOpStack [ depth ] , fPrevNodeIndexStack [ depth ] , fNodeIndexStack [ depth ] ) ; } fPrevNodeIndexStack [ depth ] = fNodeIndexStack [ depth ] ; fOpStack [ depth ] = XMLContentSpec . CONTENTSPECNODE_CHOICE ; break ; } else if ( fOpStack [ depth ] != XMLContentSpec . CONTENTSPECNODE_CHOICE && fEntityReader . lookingAtChar ( ',' , true ) ) { if ( fPrevNodeIndexStack [ depth ] != - 1 ) { fNodeIndexStack [ depth ] = fDTDGrammar . addContentSpecNode ( fOpStack [ depth ] , fPrevNodeIndexStack [ depth ] , fNodeIndexStack [ depth ] ) ; } fPrevNodeIndexStack [ depth ] = fNodeIndexStack [ depth ] ; fOpStack [ depth ] = XMLContentSpec . CONTENTSPECNODE_SEQ ; break ; } else { if ( ! fEntityReader . lookingAtChar ( ')' , true ) ) { reportFatalXMLError ( XMLMessages . MSG_CLOSE_PAREN_REQUIRED_IN_CHILDREN , XMLMessages . P47_CLOSE_PAREN_REQUIRED , element . rawname ) ; } decreaseParenDepth ( ) ; if ( fPrevNodeIndexStack [ depth ] != - 1 ) { fNodeIndexStack [ depth ] = fDTDGrammar . addContentSpecNode ( fOpStack [ depth ] , fPrevNodeIndexStack [ depth ] , fNodeIndexStack [ depth ] ) ; } int nodeIndex = fNodeIndexStack [ depth -- ] ; fNodeIndexStack [ depth ] = nodeIndex ; if ( fEntityReader . lookingAtChar ( '?' , true ) ) { fNodeIndexStack [ depth ] = fDTDGrammar . addContentSpecNode ( XMLContentSpec . CONTENTSPECNODE_ZERO_OR_ONE , fNodeIndexStack [ depth ] ) ; } else if ( fEntityReader . lookingAtChar ( '*' , true ) ) { fNodeIndexStack [ depth ] = fDTDGrammar . addContentSpecNode ( XMLContentSpec . CONTENTSPECNODE_ZERO_OR_MORE , fNodeIndexStack [ depth ] ) ; } else if ( fEntityReader . lookingAtChar ( '+' , true ) ) { fNodeIndexStack [ depth ] = fDTDGrammar . addContentSpecNode ( XMLContentSpec . CONTENTSPECNODE_ONE_OR_MORE , fNodeIndexStack [ depth ] ) ; } if ( depth == 0 ) { return fNodeIndexStack [ 0 ] ; } } } checkForPEReference ( false ) ; } } private void scanAttlistDecl ( ) throws Exception { if ( ! checkForPEReference ( true ) ) { abortMarkup ( XMLMessages . MSG_SPACE_REQUIRED_BEFORE_ELEMENT_TYPE_IN_ATTLISTDECL , XMLMessages . P52_SPACE_REQUIRED ) ; return ; } checkForElementTypeWithPEReference ( fEntityReader , ' ' , fElementQName ) ; int elementTypeIndex = fElementQName . rawname ; if ( elementTypeIndex == - 1 ) { abortMarkup ( XMLMessages . MSG_ELEMENT_TYPE_REQUIRED_IN_ATTLISTDECL , XMLMessages . P52_ELEMENT_TYPE_REQUIRED ) ; return ; } int elementIndex = fDTDGrammar . getElementDeclIndex ( fElementQName , - 1 ) ; if ( elementIndex == - 1 ) { elementIndex = fDTDGrammar . addElementDecl ( fElementQName ) ; } boolean sawSpace = checkForPEReference ( true ) ; if ( fEntityReader . lookingAtChar ( '>' , true ) ) { decreaseMarkupDepth ( ) ; return ; } if ( ! sawSpace ) { if ( fEntityReader . lookingAtSpace ( true ) ) { fEntityReader . skipPastSpaces ( ) ; } else reportFatalXMLError ( XMLMessages . MSG_SPACE_REQUIRED_BEFORE_ATTRIBUTE_NAME_IN_ATTDEF , XMLMessages . P53_SPACE_REQUIRED ) ; } else { if ( fEntityReader . lookingAtSpace ( true ) ) { fEntityReader . skipPastSpaces ( ) ; } } if ( fEntityReader . lookingAtChar ( '>' , true ) ) { decreaseMarkupDepth ( ) ; return ; } while ( true ) { checkForAttributeNameWithPEReference ( fEntityReader , ' ' , fAttributeQName ) ; int attDefName = fAttributeQName . rawname ; if ( attDefName == - 1 ) { abortMarkup ( XMLMessages . MSG_ATTRIBUTE_NAME_REQUIRED_IN_ATTDEF , XMLMessages . P53_NAME_REQUIRED , fElementQName . rawname ) ; return ; } if ( ! checkForPEReference ( true ) ) { abortMarkup ( XMLMessages . MSG_SPACE_REQUIRED_BEFORE_ATTTYPE_IN_ATTDEF , XMLMessages . P53_SPACE_REQUIRED ) ; return ; } int attDefType = - 1 ; boolean attDefList = false ; int attDefEnumeration = - 1 ; if ( fEntityReader . skippedString ( cdata_string ) ) { attDefType = XMLAttributeDecl . TYPE_CDATA ; } else if ( fEntityReader . skippedString ( id_string ) ) { if ( ! fEntityReader . skippedString ( ref_string ) ) { attDefType = XMLAttributeDecl . TYPE_ID ; } else if ( ! fEntityReader . lookingAtChar ( 'S' , true ) ) { attDefType = XMLAttributeDecl . TYPE_IDREF ; } else { attDefType = XMLAttributeDecl . TYPE_IDREF ; attDefList = true ; } } else if ( fEntityReader . skippedString ( entit_string ) ) { if ( fEntityReader . lookingAtChar ( 'Y' , true ) ) { attDefType = XMLAttributeDecl . TYPE_ENTITY ; } else if ( fEntityReader . skippedString ( ies_string ) ) { attDefType = XMLAttributeDecl . TYPE_ENTITY ; attDefList = true ; } else { abortMarkup ( XMLMessages . MSG_ATTTYPE_REQUIRED_IN_ATTDEF , XMLMessages . P53_ATTTYPE_REQUIRED , elementTypeIndex , attDefName ) ; return ; } } else if ( fEntityReader . skippedString ( nmtoken_string ) ) { if ( fEntityReader . lookingAtChar ( 'S' , true ) ) { attDefType = XMLAttributeDecl . TYPE_NMTOKEN ; attDefList = true ; } else { attDefType = XMLAttributeDecl . TYPE_NMTOKEN ; } } else if ( fEntityReader . skippedString ( notation_string ) ) { if ( ! checkForPEReference ( true ) ) { abortMarkup ( XMLMessages . MSG_SPACE_REQUIRED_AFTER_NOTATION_IN_NOTATIONTYPE , XMLMessages . P58_SPACE_REQUIRED , elementTypeIndex , attDefName ) ; return ; } if ( ! fEntityReader . lookingAtChar ( '(' , true ) ) { abortMarkup ( XMLMessages . MSG_OPEN_PAREN_REQUIRED_IN_NOTATIONTYPE , XMLMessages . P58_OPEN_PAREN_REQUIRED , elementTypeIndex , attDefName ) ; return ; } increaseParenDepth ( ) ; attDefType = XMLAttributeDecl . TYPE_NOTATION ; attDefEnumeration = scanEnumeration ( elementTypeIndex , attDefName , true ) ; if ( attDefEnumeration == - 1 ) { skipPastEndOfCurrentMarkup ( ) ; return ; } } else if ( fEntityReader . lookingAtChar ( '(' , true ) ) { increaseParenDepth ( ) ; attDefType = XMLAttributeDecl . TYPE_ENUMERATION ; attDefEnumeration = scanEnumeration ( elementTypeIndex , attDefName , false ) ; if ( attDefEnumeration == - 1 ) { skipPastEndOfCurrentMarkup ( ) ; return ; } } else { abortMarkup ( XMLMessages . MSG_ATTTYPE_REQUIRED_IN_ATTDEF , XMLMessages . P53_ATTTYPE_REQUIRED , elementTypeIndex , attDefName ) ; return ; } if ( ! checkForPEReference ( true ) ) { abortMarkup ( XMLMessages . MSG_SPACE_REQUIRED_BEFORE_DEFAULTDECL_IN_ATTDEF , XMLMessages . P53_SPACE_REQUIRED , elementTypeIndex , attDefName ) ; return ; } int attDefDefaultType = - 1 ; int attDefDefaultValue = - 1 ; if ( fEntityReader . skippedString ( required_string ) ) { attDefDefaultType = XMLAttributeDecl . DEFAULT_TYPE_REQUIRED ; } else if ( fEntityReader . skippedString ( implied_string ) ) { attDefDefaultType = XMLAttributeDecl . DEFAULT_TYPE_IMPLIED ; } else { if ( fEntityReader . skippedString ( fixed_string ) ) { if ( ! checkForPEReference ( true ) ) { abortMarkup ( XMLMessages . MSG_SPACE_REQUIRED_AFTER_FIXED_IN_DEFAULTDECL , XMLMessages . P60_SPACE_REQUIRED , elementTypeIndex , attDefName ) ; return ; } attDefDefaultType = XMLAttributeDecl . DEFAULT_TYPE_FIXED ; } else attDefDefaultType = XMLAttributeDecl . DEFAULT_TYPE_DEFAULT ; attDefDefaultValue = scanDefaultAttValue ( fElementQName , fAttributeQName , attDefType , attDefEnumeration ) ; if ( attDefDefaultValue != - 1 && attDefType != XMLAttributeDecl . TYPE_CDATA ) { attDefDefaultValue = normalizeDefaultAttValue ( fAttributeQName , attDefDefaultValue , attDefType , attDefEnumeration , attDefList ) ; } if ( attDefDefaultValue == - 1 ) { skipPastEndOfCurrentMarkup ( ) ; return ; } } if ( attDefName == fXMLSpace ) { boolean ok = false ; if ( attDefType == XMLAttributeDecl . TYPE_ENUMERATION ) { int index = attDefEnumeration ; if ( index != - 1 ) { ok = ( fStringPool . stringListLength ( index ) == 1 && ( fStringPool . stringInList ( index , fDefault ) || fStringPool . stringInList ( index , fPreserve ) ) ) || ( fStringPool . stringListLength ( index ) == 2 && fStringPool . stringInList ( index , fDefault ) && fStringPool . stringInList ( index , fPreserve ) ) ; } } if ( ! ok ) { reportFatalXMLError ( XMLMessages . MSG_XML_SPACE_DECLARATION_ILLEGAL , XMLMessages . S2_10_DECLARATION_ILLEGAL , elementTypeIndex ) ; } } sawSpace = checkForPEReference ( true ) ; if ( fAttributeQName . prefix == fXMLSymbol ) { fAttributeQName . uri = fXMLNamespace ; } if ( fEntityReader . lookingAtChar ( '>' , true ) ) { int attDefIndex = addAttDef ( fElementQName , fAttributeQName , attDefType , attDefList , attDefEnumeration , attDefDefaultType , attDefDefaultValue , getReadingExternalEntity ( ) ) ; decreaseMarkupDepth ( ) ; return ; } if ( ! sawSpace ) { if ( fEntityReader . lookingAtSpace ( true ) ) { fEntityReader . skipPastSpaces ( ) ; } else reportFatalXMLError ( XMLMessages . MSG_SPACE_REQUIRED_BEFORE_ATTRIBUTE_NAME_IN_ATTDEF , XMLMessages . P53_SPACE_REQUIRED ) ; } else { if ( fEntityReader . lookingAtSpace ( true ) ) { fEntityReader . skipPastSpaces ( ) ; } } if ( fEntityReader . lookingAtChar ( '>' , true ) ) { int attDefIndex = addAttDef ( fElementQName , fAttributeQName , attDefType , attDefList , attDefEnumeration , attDefDefaultType , attDefDefaultValue , getReadingExternalEntity ( ) ) ; decreaseMarkupDepth ( ) ; return ; } int attDefIndex = addAttDef ( fElementQName , fAttributeQName , attDefType , attDefList , attDefEnumeration , attDefDefaultType , attDefDefaultValue , getReadingExternalEntity ( ) ) ; } } private int addAttDef ( QName element , QName attribute , int attDefType , boolean attDefList , int attDefEnumeration , int attDefDefaultType , int attDefDefaultValue , boolean isExternal ) throws Exception { if ( fDTDHandler != null ) { String enumString = attDefEnumeration != - 1 ? fStringPool . stringListAsString ( attDefEnumeration ) : null ; fDTDHandler . attlistDecl ( element , attribute , attDefType , attDefList , enumString , attDefDefaultType , attDefDefaultValue ) ; } int elementIndex = fDTDGrammar . getElementDeclIndex ( element , - 1 ) ; if ( elementIndex == - 1 ) { } else { int attlistIndex = fDTDGrammar . getFirstAttributeDeclIndex ( elementIndex ) ; int dupID = - 1 ; int dupNotation = - 1 ; while ( attlistIndex != - 1 ) { fDTDGrammar . getAttributeDecl ( attlistIndex , fTempAttributeDecl ) ; if ( fStringPool . equalNames ( fTempAttributeDecl . name . rawname , attribute . rawname ) ) { return - 1 ; } if ( fValidationEnabled ) { if ( attDefType == XMLAttributeDecl . TYPE_ID && fTempAttributeDecl . type == XMLAttributeDecl . TYPE_ID ) { dupID = fTempAttributeDecl . name . rawname ; } if ( attDefType == XMLAttributeDecl . TYPE_NOTATION && fTempAttributeDecl . type == XMLAttributeDecl . TYPE_NOTATION ) { dupNotation = fTempAttributeDecl . name . rawname ; } } attlistIndex = fDTDGrammar . getNextAttributeDeclIndex ( attlistIndex ) ; } if ( fValidationEnabled ) { if ( dupID != - 1 ) { Object [ ] args = { fStringPool . toString ( element . rawname ) , fStringPool . toString ( dupID ) , fStringPool . toString ( attribute . rawname ) } ; fErrorReporter . reportError ( fErrorReporter . getLocator ( ) , XMLMessages . XML_DOMAIN , XMLMessages . MSG_MORE_THAN_ONE_ID_ATTRIBUTE , XMLMessages . VC_ONE_ID_PER_ELEMENT_TYPE , args , XMLErrorReporter . ERRORTYPE_RECOVERABLE_ERROR ) ; return - 1 ; } if ( dupNotation != - 1 ) { Object [ ] args = { fStringPool . toString ( element . rawname ) , fStringPool . toString ( dupNotation ) , fStringPool . toString ( attribute . rawname ) } ; fErrorReporter . reportError ( fErrorReporter . getLocator ( ) , XMLMessages . XML_DOMAIN , XMLMessages . MSG_MORE_THAN_ONE_NOTATION_ATTRIBUTE , XMLMessages . VC_ONE_NOTATION_PER_ELEMENT_TYPE , args , XMLErrorReporter . ERRORTYPE_RECOVERABLE_ERROR ) ; return - 1 ; } } } return fDTDGrammar . addAttDef ( element , attribute , attDefType , attDefList , attDefEnumeration , attDefDefaultType , attDefDefaultValue , isExternal ) ; } private int scanEnumeration ( int elementType , int attrName , boolean isNotationType ) throws Exception { int enumIndex = fDTDGrammar . startEnumeration ( ) ; while ( true ) { checkForPEReference ( false ) ; int nameIndex = isNotationType ? checkForNameWithPEReference ( fEntityReader , ')' ) : checkForNmtokenWithPEReference ( fEntityReader , ')' ) ; if ( nameIndex == - 1 ) { if ( isNotationType ) { reportFatalXMLError ( XMLMessages . MSG_NAME_REQUIRED_IN_NOTATIONTYPE , XMLMessages . P58_NAME_REQUIRED , elementType , attrName ) ; } else { reportFatalXMLError ( XMLMessages . MSG_NMTOKEN_REQUIRED_IN_ENUMERATION , XMLMessages . P59_NMTOKEN_REQUIRED , elementType , attrName ) ; } fDTDGrammar . endEnumeration ( enumIndex ) ; return - 1 ; } fDTDGrammar . addNameToEnumeration ( enumIndex , elementType , attrName , nameIndex , isNotationType ) ; if ( isNotationType && ! ( ( DefaultEntityHandler ) fEntityHandler ) . isNotationDeclared ( nameIndex ) ) { Object [ ] args = { fStringPool . toString ( elementType ) , fStringPool . toString ( attrName ) , fStringPool . toString ( nameIndex ) } ; ( ( DefaultEntityHandler ) fEntityHandler ) . addRequiredNotation ( nameIndex , fErrorReporter . getLocator ( ) , XMLMessages . MSG_NOTATION_NOT_DECLARED_FOR_NOTATIONTYPE_ATTRIBUTE , XMLMessages . VC_NOTATION_DECLARED , args ) ; } checkForPEReference ( false ) ; if ( ! fEntityReader . lookingAtChar ( '|' , true ) ) { fDTDGrammar . endEnumeration ( enumIndex ) ; if ( ! fEntityReader . lookingAtChar ( ')' , true ) ) { if ( isNotationType ) { reportFatalXMLError ( XMLMessages . MSG_NOTATIONTYPE_UNTERMINATED , XMLMessages . P58_UNTERMINATED , elementType , attrName ) ; } else { reportFatalXMLError ( XMLMessages . MSG_ENUMERATION_UNTERMINATED , XMLMessages . P59_UNTERMINATED , elementType , attrName ) ; } return - 1 ; } decreaseParenDepth ( ) ; return enumIndex ; } } } public int scanDefaultAttValue ( QName element , QName attribute ) throws Exception { boolean single ; if ( ! ( single = fEntityReader . lookingAtChar ( '\'' , true ) ) && ! fEntityReader . lookingAtChar ( '\"' , true ) ) { reportFatalXMLError ( XMLMessages . MSG_QUOTE_REQUIRED_IN_ATTVALUE , XMLMessages . P10_QUOTE_REQUIRED , element . rawname , attribute . rawname ) ; return - 1 ; } int previousState = setScannerState ( SCANNER_STATE_DEFAULT_ATTRIBUTE_VALUE ) ; char qchar = single ? '\'' : '\"' ; fDefaultAttValueReader = fReaderId ; fDefaultAttValueElementType = element . rawname ; fDefaultAttValueAttrName = attribute . rawname ; boolean setMark = true ; int dataOffset = fLiteralData . length ( ) ; while ( true ) { fDefaultAttValueOffset = fEntityReader . currentOffset ( ) ; if ( setMark ) { fDefaultAttValueMark = fDefaultAttValueOffset ; setMark = false ; } if ( fEntityReader . lookingAtChar ( qchar , true ) ) { if ( fReaderId == fDefaultAttValueReader ) break ; continue ; } if ( fEntityReader . lookingAtChar ( ' ' , true ) ) { continue ; } boolean skippedCR ; if ( ( skippedCR = fEntityReader . lookingAtChar ( ( char ) 0x0D , true ) ) || fEntityReader . lookingAtSpace ( true ) ) { if ( fDefaultAttValueOffset - fDefaultAttValueMark > 0 ) fEntityReader . append ( fLiteralData , fDefaultAttValueMark , fDefaultAttValueOffset - fDefaultAttValueMark ) ; setMark = true ; fLiteralData . append ( ' ' ) ; if ( skippedCR ) fEntityReader . lookingAtChar ( ( char ) 0x0A , true ) ; continue ; } if ( fEntityReader . lookingAtChar ( '&' , true ) ) { if ( fDefaultAttValueOffset - fDefaultAttValueMark > 0 ) fEntityReader . append ( fLiteralData , fDefaultAttValueMark , fDefaultAttValueOffset - fDefaultAttValueMark ) ; setMark = true ; if ( fEntityReader . lookingAtChar ( '#' , true ) ) { int ch = scanCharRef ( ) ; if ( ch != - 1 ) { if ( ch < 0x10000 ) fLiteralData . append ( ( char ) ch ) ; else { fLiteralData . append ( ( char ) ( ( ( ch - 0x00010000 ) > > 10 ) + 0xd800 ) ) ; fLiteralData . append ( ( char ) ( ( ( ch - 0x00010000 ) & 0x3ff ) + 0xdc00 ) ) ; } } } else { int nameOffset = fEntityReader . currentOffset ( ) ; fEntityReader . skipPastName ( ';' ) ; int nameLength = fEntityReader . currentOffset ( ) - nameOffset ; if ( nameLength == 0 ) { reportFatalXMLError ( XMLMessages . MSG_NAME_REQUIRED_IN_REFERENCE , XMLMessages . P68_NAME_REQUIRED ) ; } else if ( ! fEntityReader . lookingAtChar ( ';' , true ) ) { reportFatalXMLError ( XMLMessages . MSG_SEMICOLON_REQUIRED_IN_REFERENCE , XMLMessages . P68_SEMICOLON_REQUIRED , fEntityReader . addString ( nameOffset , nameLength ) ) ; } else { int entityNameIndex = fEntityReader . addSymbol ( nameOffset , nameLength ) ; fEntityHandler . startReadingFromEntity ( entityNameIndex , markupDepth ( ) , XMLEntityHandler . ENTITYREF_IN_DEFAULTATTVALUE ) ; } } continue ; } if ( fEntityReader . lookingAtChar ( '<' , true ) ) { if ( fDefaultAttValueOffset - fDefaultAttValueMark > 0 ) fEntityReader . append ( fLiteralData , fDefaultAttValueMark , fDefaultAttValueOffset - fDefaultAttValueMark ) ; setMark = true ; reportFatalXMLError ( XMLMessages . MSG_LESSTHAN_IN_ATTVALUE , XMLMessages . WFC_NO_LESSTHAN_IN_ATTVALUE , element . rawname , attribute . rawname ) ; continue ; } if ( ! fEntityReader . lookingAtValidChar ( true ) ) { if ( fDefaultAttValueOffset - fDefaultAttValueMark > 0 ) fEntityReader . append ( fLiteralData , fDefaultAttValueMark , fDefaultAttValueOffset - fDefaultAttValueMark ) ; setMark = true ; int invChar = fEntityReader . scanInvalidChar ( ) ; if ( fScannerState == SCANNER_STATE_END_OF_INPUT ) return - 1 ; if ( invChar >= 0 ) { reportFatalXMLError ( XMLMessages . MSG_INVALID_CHAR_IN_ATTVALUE , XMLMessages . P10_INVALID_CHARACTER , fStringPool . toString ( element . rawname ) , fStringPool . toString ( attribute . rawname ) , Integer . toHexString ( invChar ) ) ; } continue ; } } restoreScannerState ( previousState ) ; int dataLength = fLiteralData . length ( ) - dataOffset ; if ( dataLength == 0 ) { return fEntityReader . addString ( fDefaultAttValueMark , fDefaultAttValueOffset - fDefaultAttValueMark ) ; } if ( fDefaultAttValueOffset - fDefaultAttValueMark > 0 ) { fEntityReader . append ( fLiteralData , fDefaultAttValueMark , fDefaultAttValueOffset - fDefaultAttValueMark ) ; dataLength = fLiteralData . length ( ) - dataOffset ; } return fLiteralData . addString ( dataOffset , dataLength ) ; } private void scanNotationDecl ( ) throws Exception { if ( ! checkForPEReference ( true ) ) { abortMarkup ( XMLMessages . MSG_SPACE_REQUIRED_BEFORE_NOTATION_NAME_IN_NOTATIONDECL , XMLMessages . P82_SPACE_REQUIRED ) ; return ; } int notationName = checkForNameWithPEReference ( fEntityReader , ' ' ) ; if ( notationName == - 1 ) { abortMarkup ( XMLMessages . MSG_NOTATION_NAME_REQUIRED_IN_NOTATIONDECL , XMLMessages . P82_NAME_REQUIRED ) ; return ; } if ( ! checkForPEReference ( true ) ) { abortMarkup ( XMLMessages . MSG_SPACE_REQUIRED_AFTER_NOTATION_NAME_IN_NOTATIONDECL , XMLMessages . P82_SPACE_REQUIRED , notationName ) ; return ; } if ( ! scanExternalID ( true ) ) { skipPastEndOfCurrentMarkup ( ) ; return ; } checkForPEReference ( false ) ; if ( ! fEntityReader . lookingAtChar ( '>' , true ) ) { abortMarkup ( XMLMessages . MSG_NOTATIONDECL_UNTERMINATED , XMLMessages . P82_UNTERMINATED , notationName ) ; return ; } decreaseMarkupDepth ( ) ; int notationIndex = ( ( DefaultEntityHandler ) fEntityHandler ) . addNotationDecl ( notationName , fPubidLiteral , fSystemLiteral , getReadingExternalEntity ( ) ) ; fDTDGrammar . addNotationDecl ( notationName , fPubidLiteral , fSystemLiteral ) ; if ( fDTDHandler != null ) { fDTDHandler . notationDecl ( notationName , fPubidLiteral , fSystemLiteral ) ; } } private void scanEntityDecl ( ) throws Exception { boolean isPEDecl = false ; boolean sawPERef = false ; if ( fEntityReader . lookingAtSpace ( true ) ) { fEntityReader . skipPastSpaces ( ) ; if ( ! fEntityReader . lookingAtChar ( '%' , true ) ) { isPEDecl = false ; } else if ( fEntityReader . lookingAtSpace ( true ) ) { checkForPEReference ( false ) ; isPEDecl = true ; } else if ( ! getReadingExternalEntity ( ) ) { reportFatalXMLError ( XMLMessages . MSG_SPACE_REQUIRED_BEFORE_ENTITY_NAME_IN_PEDECL , XMLMessages . P72_SPACE ) ; isPEDecl = true ; } else if ( fEntityReader . lookingAtChar ( '%' , false ) ) { checkForPEReference ( false ) ; isPEDecl = true ; } else { sawPERef = true ; } } else if ( ! getReadingExternalEntity ( ) || ! fEntityReader . lookingAtChar ( '%' , true ) ) { reportFatalXMLError ( XMLMessages . MSG_SPACE_REQUIRED_BEFORE_ENTITY_NAME_IN_ENTITYDECL , XMLMessages . P70_SPACE ) ; isPEDecl = false ; } else if ( fEntityReader . lookingAtSpace ( false ) ) { reportFatalXMLError ( XMLMessages . MSG_SPACE_REQUIRED_BEFORE_PERCENT_IN_PEDECL , XMLMessages . P72_SPACE ) ; isPEDecl = false ; } else { sawPERef = true ; } if ( sawPERef ) { while ( true ) { int nameOffset = fEntityReader . currentOffset ( ) ; fEntityReader . skipPastName ( ';' ) ; int nameLength = fEntityReader . currentOffset ( ) - nameOffset ; if ( nameLength == 0 ) { reportFatalXMLError ( XMLMessages . MSG_NAME_REQUIRED_IN_PEREFERENCE , XMLMessages . P69_NAME_REQUIRED ) ; } else if ( ! fEntityReader . lookingAtChar ( ';' , true ) ) { reportFatalXMLError ( XMLMessages . MSG_SEMICOLON_REQUIRED_IN_PEREFERENCE , XMLMessages . P69_SEMICOLON_REQUIRED , fEntityReader . addString ( nameOffset , nameLength ) ) ; } else { int peNameIndex = fEntityReader . addSymbol ( nameOffset , nameLength ) ; int readerDepth = ( fScannerState == SCANNER_STATE_CONTENTSPEC ) ? parenDepth ( ) : markupDepth ( ) ; fEntityHandler . startReadingFromEntity ( peNameIndex , readerDepth , XMLEntityHandler . ENTITYREF_IN_DTD_WITHIN_MARKUP ) ; } fEntityReader . skipPastSpaces ( ) ; if ( ! fEntityReader . lookingAtChar ( '%' , true ) ) break ; if ( ! isPEDecl ) { if ( fEntityReader . lookingAtSpace ( true ) ) { checkForPEReference ( false ) ; isPEDecl = true ; break ; } isPEDecl = fEntityReader . lookingAtChar ( '%' , true ) ; } } } int entityName = checkForNameWithPEReference ( fEntityReader , ' ' ) ; if ( entityName == - 1 ) { abortMarkup ( XMLMessages . MSG_ENTITY_NAME_REQUIRED_IN_ENTITYDECL , XMLMessages . P70_REQUIRED_NAME ) ; return ; } if ( ! fDTDGrammar . startEntityDecl ( isPEDecl , entityName ) ) { skipPastEndOfCurrentMarkup ( ) ; return ; } if ( ! checkForPEReference ( true ) ) { abortMarkup ( XMLMessages . MSG_SPACE_REQUIRED_AFTER_ENTITY_NAME_IN_ENTITYDECL , XMLMessages . P70_REQUIRED_SPACE , entityName ) ; fDTDGrammar . endEntityDecl ( ) ; return ; } if ( isPEDecl ) { boolean single ; if ( ( single = fEntityReader . lookingAtChar ( '\'' , true ) ) || fEntityReader . lookingAtChar ( '\"' , true ) ) { int value = scanEntityValue ( single ) ; if ( value == - 1 ) { skipPastEndOfCurrentMarkup ( ) ; fDTDGrammar . endEntityDecl ( ) ; return ; } checkForPEReference ( false ) ; if ( ! fEntityReader . lookingAtChar ( '>' , true ) ) { abortMarkup ( XMLMessages . MSG_ENTITYDECL_UNTERMINATED , XMLMessages . P72_UNTERMINATED , entityName ) ; fDTDGrammar . endEntityDecl ( ) ; return ; } decreaseMarkupDepth ( ) ; fDTDGrammar . endEntityDecl ( ) ; fDTDGrammar . addInternalPEDecl ( entityName , value ) ; if ( fDTDHandler != null ) { fDTDHandler . internalPEDecl ( entityName , value ) ; } int entityIndex = ( ( DefaultEntityHandler ) fEntityHandler ) . addInternalPEDecl ( entityName , value , getReadingExternalEntity ( ) ) ; } else { if ( ! scanExternalID ( false ) ) { skipPastEndOfCurrentMarkup ( ) ; fDTDGrammar . endEntityDecl ( ) ; return ; } checkForPEReference ( false ) ; if ( ! fEntityReader . lookingAtChar ( '>' , true ) ) { abortMarkup ( XMLMessages . MSG_ENTITYDECL_UNTERMINATED , XMLMessages . P72_UNTERMINATED , entityName ) ; fDTDGrammar . endEntityDecl ( ) ; return ; } decreaseMarkupDepth ( ) ; fDTDGrammar . endEntityDecl ( ) ; fDTDGrammar . addExternalPEDecl ( entityName , fPubidLiteral , fSystemLiteral ) ; if ( fDTDHandler != null ) { fDTDHandler . externalPEDecl ( entityName , fPubidLiteral , fSystemLiteral ) ; } int entityIndex = ( ( DefaultEntityHandler ) fEntityHandler ) . addExternalPEDecl ( entityName , fPubidLiteral , fSystemLiteral , getReadingExternalEntity ( ) ) ; } } else { boolean single ; if ( ( single = fEntityReader . lookingAtChar ( '\'' , true ) ) || fEntityReader . lookingAtChar ( '\"' , true ) ) { int value = scanEntityValue ( single ) ; if ( value == - 1 ) { skipPastEndOfCurrentMarkup ( ) ; fDTDGrammar . endEntityDecl ( ) ; return ; } checkForPEReference ( false ) ; if ( ! fEntityReader . lookingAtChar ( '>' , true ) ) { abortMarkup ( XMLMessages . MSG_ENTITYDECL_UNTERMINATED , XMLMessages . P71_UNTERMINATED , entityName ) ; fDTDGrammar . endEntityDecl ( ) ; return ; } decreaseMarkupDepth ( ) ; fDTDGrammar . endEntityDecl ( ) ; fDTDGrammar . addInternalEntityDecl ( entityName , value ) ; if ( fDTDHandler != null ) { fDTDHandler . internalEntityDecl ( entityName , value ) ; } int entityIndex = ( ( DefaultEntityHandler ) fEntityHandler ) . addInternalEntityDecl ( entityName , value , getReadingExternalEntity ( ) ) ; } else { if ( ! scanExternalID ( false ) ) { skipPastEndOfCurrentMarkup ( ) ; fDTDGrammar . endEntityDecl ( ) ; return ; } boolean unparsed = false ; if ( fEntityReader . lookingAtSpace ( true ) ) { fEntityReader . skipPastSpaces ( ) ; unparsed = fEntityReader . skippedString ( ndata_string ) ; } if ( ! unparsed ) { checkForPEReference ( false ) ; if ( ! fEntityReader . lookingAtChar ( '>' , true ) ) { abortMarkup ( XMLMessages . MSG_ENTITYDECL_UNTERMINATED , XMLMessages . P72_UNTERMINATED , entityName ) ; fDTDGrammar . endEntityDecl ( ) ; return ; } decreaseMarkupDepth ( ) ; fDTDGrammar . endEntityDecl ( ) ; fDTDGrammar . addExternalEntityDecl ( entityName , fPubidLiteral , fSystemLiteral ) ; if ( fDTDHandler != null ) { fDTDHandler . externalEntityDecl ( entityName , fPubidLiteral , fSystemLiteral ) ; } int entityIndex = ( ( DefaultEntityHandler ) fEntityHandler ) . addExternalEntityDecl ( entityName , fPubidLiteral , fSystemLiteral , getReadingExternalEntity ( ) ) ; } else { if ( ! fEntityReader . lookingAtSpace ( true ) ) { abortMarkup ( XMLMessages . MSG_SPACE_REQUIRED_BEFORE_NOTATION_NAME_IN_UNPARSED_ENTITYDECL , XMLMessages . P76_SPACE_REQUIRED , entityName ) ; fDTDGrammar . endEntityDecl ( ) ; return ; } fEntityReader . skipPastSpaces ( ) ; int ndataOffset = fEntityReader . currentOffset ( ) ; fEntityReader . skipPastName ( '>' ) ; int ndataLength = fEntityReader . currentOffset ( ) - ndataOffset ; if ( ndataLength == 0 ) { abortMarkup ( XMLMessages . MSG_NOTATION_NAME_REQUIRED_FOR_UNPARSED_ENTITYDECL , XMLMessages . P76_REQUIRED , entityName ) ; fDTDGrammar . endEntityDecl ( ) ; return ; } int notationName = fEntityReader . addSymbol ( ndataOffset , ndataLength ) ; checkForPEReference ( false ) ; if ( ! fEntityReader . lookingAtChar ( '>' , true ) ) { abortMarkup ( XMLMessages . MSG_ENTITYDECL_UNTERMINATED , XMLMessages . P72_UNTERMINATED , entityName ) ; fDTDGrammar . endEntityDecl ( ) ; return ; } decreaseMarkupDepth ( ) ; fDTDGrammar . endEntityDecl ( ) ; fDTDGrammar . addUnparsedEntityDecl ( entityName , fPubidLiteral , fSystemLiteral , notationName ) ; if ( fDTDHandler != null ) { fDTDHandler . unparsedEntityDecl ( entityName , fPubidLiteral , fSystemLiteral , notationName ) ; } int entityIndex = ( ( DefaultEntityHandler ) fEntityHandler ) . addUnparsedEntityDecl ( entityName , fPubidLiteral , fSystemLiteral , notationName , getReadingExternalEntity ( ) ) ; } } } } private int scanEntityValue ( boolean single ) throws Exception { char qchar = single ? '\'' : '\"' ; fEntityValueMark = fEntityReader . currentOffset ( ) ; int entityValue = fEntityReader . scanEntityValue ( qchar , true ) ; if ( entityValue < 0 ) entityValue = scanComplexEntityValue ( qchar , entityValue ) ; return entityValue ; } private int scanComplexEntityValue ( char qchar , int result ) throws Exception { int previousState = setScannerState ( SCANNER_STATE_ENTITY_VALUE ) ; fEntityValueReader = fReaderId ; int dataOffset = fLiteralData . length ( ) ; while ( true ) { switch ( result ) { case XMLEntityHandler . ENTITYVALUE_RESULT_FINISHED : { int offset = fEntityReader . currentOffset ( ) ; fEntityReader . lookingAtChar ( qchar , true ) ; restoreScannerState ( previousState ) ; int dataLength = fLiteralData . length ( ) - dataOffset ; if ( dataLength == 0 ) { return fEntityReader . addString ( fEntityValueMark , offset - fEntityValueMark ) ; } if ( offset - fEntityValueMark > 0 ) { fEntityReader . append ( fLiteralData , fEntityValueMark , offset - fEntityValueMark ) ; dataLength = fLiteralData . length ( ) - dataOffset ; } return fLiteralData . addString ( dataOffset , dataLength ) ; } case XMLEntityHandler . ENTITYVALUE_RESULT_REFERENCE : { int offset = fEntityReader . currentOffset ( ) ; if ( offset - fEntityValueMark > 0 ) fEntityReader . append ( fLiteralData , fEntityValueMark , offset - fEntityValueMark ) ; fEntityReader . lookingAtChar ( '&' , true ) ; if ( fEntityReader . lookingAtChar ( '#' , true ) ) { int ch = scanCharRef ( ) ; if ( ch != - 1 ) { if ( ch < 0x10000 ) fLiteralData . append ( ( char ) ch ) ; else { fLiteralData . append ( ( char ) ( ( ( ch - 0x00010000 ) > > 10 ) + 0xd800 ) ) ; fLiteralData . append ( ( char ) ( ( ( ch - 0x00010000 ) & 0x3ff ) + 0xdc00 ) ) ; } } fEntityValueMark = fEntityReader . currentOffset ( ) ; } else { int nameOffset = fEntityReader . currentOffset ( ) ; fEntityReader . skipPastName ( ';' ) ; int nameLength = fEntityReader . currentOffset ( ) - nameOffset ; if ( nameLength == 0 ) { reportFatalXMLError ( XMLMessages . MSG_NAME_REQUIRED_IN_REFERENCE , XMLMessages . P68_NAME_REQUIRED ) ; fEntityValueMark = fEntityReader . currentOffset ( ) ; } else if ( ! fEntityReader . lookingAtChar ( ';' , true ) ) { reportFatalXMLError ( XMLMessages . MSG_SEMICOLON_REQUIRED_IN_REFERENCE , XMLMessages . P68_SEMICOLON_REQUIRED , fEntityReader . addString ( nameOffset , nameLength ) ) ; fEntityValueMark = fEntityReader . currentOffset ( ) ; } else { fEntityValueMark = offset ; } } break ; } case XMLEntityHandler . ENTITYVALUE_RESULT_PEREF : { int offset = fEntityReader . currentOffset ( ) ; if ( offset - fEntityValueMark > 0 ) fEntityReader . append ( fLiteralData , fEntityValueMark , offset - fEntityValueMark ) ; fEntityReader . lookingAtChar ( '%' , true ) ; int nameOffset = fEntityReader . currentOffset ( ) ; fEntityReader . skipPastName ( ';' ) ; int nameLength = fEntityReader . currentOffset ( ) - nameOffset ; if ( nameLength == 0 ) { reportFatalXMLError ( XMLMessages . MSG_NAME_REQUIRED_IN_PEREFERENCE , XMLMessages . P69_NAME_REQUIRED ) ; } else if ( ! fEntityReader . lookingAtChar ( ';' , true ) ) { reportFatalXMLError ( XMLMessages . MSG_SEMICOLON_REQUIRED_IN_PEREFERENCE , XMLMessages . P69_SEMICOLON_REQUIRED , fEntityReader . addString ( nameOffset , nameLength ) ) ; } else if ( ! getReadingExternalEntity ( ) ) { reportFatalXMLError ( XMLMessages . MSG_PEREFERENCE_WITHIN_MARKUP , XMLMessages . WFC_PES_IN_INTERNAL_SUBSET , fEntityReader . addString ( nameOffset , nameLength ) ) ; } else { int peNameIndex = fEntityReader . addSymbol ( nameOffset , nameLength ) ; fEntityHandler . startReadingFromEntity ( peNameIndex , markupDepth ( ) , XMLEntityHandler . ENTITYREF_IN_ENTITYVALUE ) ; } fEntityValueMark = fEntityReader . currentOffset ( ) ; break ; } case XMLEntityHandler . ENTITYVALUE_RESULT_INVALID_CHAR : { int offset = fEntityReader . currentOffset ( ) ; if ( offset - fEntityValueMark > 0 ) fEntityReader . append ( fLiteralData , fEntityValueMark , offset - fEntityValueMark ) ; int invChar = fEntityReader . scanInvalidChar ( ) ; if ( fScannerState == SCANNER_STATE_END_OF_INPUT ) return - 1 ; if ( invChar >= 0 ) { reportFatalXMLError ( XMLMessages . MSG_INVALID_CHAR_IN_ENTITYVALUE , XMLMessages . P9_INVALID_CHARACTER , Integer . toHexString ( invChar ) ) ; } fEntityValueMark = fEntityReader . currentOffset ( ) ; break ; } case XMLEntityHandler . ENTITYVALUE_RESULT_END_OF_INPUT : break ; default : break ; } result = fEntityReader . scanEntityValue ( fReaderId == fEntityValueReader ? qchar : - 1 , false ) ; } } private boolean checkForPEReference ( boolean spaceRequired ) throws Exception { boolean sawSpace = true ; if ( spaceRequired ) sawSpace = fEntityReader . lookingAtSpace ( true ) ; fEntityReader . skipPastSpaces ( ) ; if ( ! getReadingExternalEntity ( ) ) return sawSpace ; if ( ! fEntityReader . lookingAtChar ( '%' , true ) ) return sawSpace ; while ( true ) { int nameOffset = fEntityReader . currentOffset ( ) ; fEntityReader . skipPastName ( ';' ) ; int nameLength = fEntityReader . currentOffset ( ) - nameOffset ; if ( nameLength == 0 ) { reportFatalXMLError ( XMLMessages . MSG_NAME_REQUIRED_IN_PEREFERENCE , XMLMessages . P69_NAME_REQUIRED ) ; } else if ( ! fEntityReader . lookingAtChar ( ';' , true ) ) { reportFatalXMLError ( XMLMessages . MSG_SEMICOLON_REQUIRED_IN_PEREFERENCE , XMLMessages . P69_SEMICOLON_REQUIRED , fEntityReader . addString ( nameOffset , nameLength ) ) ; } else { int peNameIndex = fEntityReader . addSymbol ( nameOffset , nameLength ) ; int readerDepth = ( fScannerState == SCANNER_STATE_CONTENTSPEC ) ? parenDepth ( ) : markupDepth ( ) ; fEntityHandler . startReadingFromEntity ( peNameIndex , readerDepth , XMLEntityHandler . ENTITYREF_IN_DTD_WITHIN_MARKUP ) ; } fEntityReader . skipPastSpaces ( ) ; if ( ! fEntityReader . lookingAtChar ( '%' , true ) ) return true ; } } private void initializeContentModelStack ( int depth ) { if ( fOpStack == null ) { fOpStack = new int [ 8 ] ; fNodeIndexStack = new int [ 8 ] ; fPrevNodeIndexStack = new int [ 8 ] ; } else if ( depth == fOpStack . length ) { int [ ] newStack = new int [ depth * 2 ] ; System . arraycopy ( fOpStack , 0 , newStack , 0 , depth ) ; fOpStack = newStack ; newStack = new int [ depth * 2 ] ; System . arraycopy ( fNodeIndexStack , 0 , newStack , 0 , depth ) ; fNodeIndexStack = newStack ; newStack = new int [ depth * 2 ] ; System . arraycopy ( fPrevNodeIndexStack , 0 , newStack , 0 , depth ) ; fPrevNodeIndexStack = newStack ; } fOpStack [ depth ] = - 1 ; fNodeIndexStack [ depth ] = - 1 ; fPrevNodeIndexStack [ depth ] = - 1 ; } private boolean validVersionNum ( String version ) { return XMLCharacterProperties . validVersionNum ( version ) ; } private boolean validEncName ( String encoding ) { return XMLCharacterProperties . validEncName ( encoding ) ; } private int validPublicId ( String publicId ) { return XMLCharacterProperties . validPublicId ( publicId ) ; } private void scanElementType ( XMLEntityHandler . EntityReader entityReader , char fastchar , QName element ) throws Exception { if ( ! fNamespacesEnabled ) { element . clear ( ) ; element . localpart = entityReader . scanName ( fastchar ) ; element . rawname = element . localpart ; return ; } entityReader . scanQName ( fastchar , element ) ; if ( entityReader . lookingAtChar ( ':' , false ) ) { fErrorReporter . reportError ( fErrorReporter . getLocator ( ) , XMLMessages . XML_DOMAIN , XMLMessages . MSG_TWO_COLONS_IN_QNAME , XMLMessages . P5_INVALID_CHARACTER , null , XMLErrorReporter . ERRORTYPE_FATAL_ERROR ) ; entityReader . skipPastNmtoken ( ' ' ) ; } } public void checkForElementTypeWithPEReference ( XMLEntityHandler . EntityReader entityReader , char fastchar , QName element ) throws Exception { if ( ! fNamespacesEnabled ) { element . clear ( ) ; element . localpart = entityReader . scanName ( fastchar ) ; element . rawname = element . localpart ; return ; } entityReader . scanQName ( fastchar , element ) ; if ( entityReader . lookingAtChar ( ':' , false ) ) { fErrorReporter . reportError ( fErrorReporter . getLocator ( ) , XMLMessages . XML_DOMAIN , XMLMessages . MSG_TWO_COLONS_IN_QNAME , XMLMessages . P5_INVALID_CHARACTER , null , XMLErrorReporter . ERRORTYPE_FATAL_ERROR ) ; entityReader . skipPastNmtoken ( ' ' ) ; } } public void checkForAttributeNameWithPEReference ( XMLEntityHandler . EntityReader entityReader , char fastchar , QName attribute ) throws Exception { if ( ! fNamespacesEnabled ) { attribute . clear ( ) ; attribute . localpart = entityReader . scanName ( fastchar ) ; attribute . rawname = attribute . localpart ; return ; } entityReader . scanQName ( fastchar , attribute ) ; if ( entityReader . lookingAtChar ( ':' , false ) ) { fErrorReporter . reportError ( fErrorReporter . getLocator ( ) , XMLMessages . XML_DOMAIN , XMLMessages . MSG_TWO_COLONS_IN_QNAME , XMLMessages . P5_INVALID_CHARACTER , null , XMLErrorReporter . ERRORTYPE_FATAL_ERROR ) ; entityReader . skipPastNmtoken ( ' ' ) ; } } public int checkForNameWithPEReference ( XMLEntityHandler . EntityReader entityReader , char fastcheck ) throws Exception { int valueIndex = entityReader . scanName ( fastcheck ) ; return valueIndex ; } public int checkForNmtokenWithPEReference ( XMLEntityHandler . EntityReader entityReader , char fastcheck ) throws Exception { int nameOffset = entityReader . currentOffset ( ) ; entityReader . skipPastNmtoken ( fastcheck ) ; int nameLength = entityReader . currentOffset ( ) - nameOffset ; if ( nameLength == 0 ) return - 1 ; int valueIndex = entityReader . addSymbol ( nameOffset , nameLength ) ; return valueIndex ; } public int scanDefaultAttValue ( QName element , QName attribute , int attType , int enumeration ) throws Exception { if ( fValidationEnabled && attType == XMLAttributeDecl . TYPE_ID ) { reportRecoverableXMLError ( XMLMessages . MSG_ID_DEFAULT_TYPE_INVALID , XMLMessages . VC_ID_ATTRIBUTE_DEFAULT , fStringPool . toString ( attribute . rawname ) ) ; } int defaultAttValue = scanDefaultAttValue ( element , attribute ) ; if ( defaultAttValue == - 1 ) return - 1 ; return defaultAttValue ; } public int normalizeDefaultAttValue ( QName attribute , int defaultAttValue , int attType , int enumeration , boolean list ) throws Exception { String attValue = fStringPool . toString ( defaultAttValue ) ; if ( list ) { StringTokenizer tokenizer = new StringTokenizer ( attValue ) ; StringBuffer sb = new StringBuffer ( attValue . length ( ) ) ; boolean ok = true ; if ( tokenizer . hasMoreTokens ( ) ) { while ( true ) { String nmtoken = tokenizer . nextToken ( ) ; if ( attType == XMLAttributeDecl . TYPE_NMTOKEN ) { if ( fValidationEnabled && ! XMLCharacterProperties . validNmtoken ( nmtoken ) ) { ok = false ; } } else if ( attType == XMLAttributeDecl . TYPE_IDREF || attType == XMLAttributeDecl . TYPE_ENTITY ) { if ( fValidationEnabled && ! XMLCharacterProperties . validName ( nmtoken ) ) { ok = false ; } if ( fValidationEnabled && attType == XMLAttributeDecl . TYPE_ENTITY ) if ( ! ( ( DefaultEntityHandler ) fEntityHandler ) . isUnparsedEntity ( defaultAttValue ) ) { reportRecoverableXMLError ( XMLMessages . MSG_ENTITY_INVALID , XMLMessages . VC_ENTITY_NAME , fStringPool . toString ( attribute . rawname ) , nmtoken ) ; } } sb . append ( nmtoken ) ; if ( ! tokenizer . hasMoreTokens ( ) ) { break ; } sb . append ( ' ' ) ; } } String newAttValue = sb . toString ( ) ; if ( fValidationEnabled && ( ! ok || newAttValue . length ( ) == 0 ) ) { reportRecoverableXMLError ( XMLMessages . MSG_ATT_DEFAULT_INVALID , XMLMessages . VC_ATTRIBUTE_DEFAULT_LEGAL , fStringPool . toString ( attribute . rawname ) , newAttValue ) ; } if ( ! newAttValue . equals ( attValue ) ) { defaultAttValue = fStringPool . addString ( newAttValue ) ; } return defaultAttValue ; } else { String newAttValue = attValue . trim ( ) ; if ( fValidationEnabled ) { if ( newAttValue != attValue ) { defaultAttValue = fStringPool . addSymbol ( newAttValue ) ; } else { defaultAttValue = fStringPool . addSymbol ( defaultAttValue ) ; } if ( attType == XMLAttributeDecl . TYPE_ENTITY || attType == XMLAttributeDecl . TYPE_ID || attType == XMLAttributeDecl . TYPE_IDREF || attType == XMLAttributeDecl . TYPE_NOTATION ) { if ( attType == XMLAttributeDecl . TYPE_ENTITY ) if ( ! ( ( DefaultEntityHandler ) fEntityHandler ) . isUnparsedEntity ( defaultAttValue ) ) { reportRecoverableXMLError ( XMLMessages . MSG_ENTITY_INVALID , XMLMessages . VC_ENTITY_NAME , fStringPool . toString ( attribute . rawname ) , newAttValue ) ; } if ( ! XMLCharacterProperties . validName ( newAttValue ) ) { reportRecoverableXMLError ( XMLMessages . MSG_ATT_DEFAULT_INVALID , XMLMessages . VC_ATTRIBUTE_DEFAULT_LEGAL , fStringPool . toString ( attribute . rawname ) , newAttValue ) ; } } else if ( attType == XMLAttributeDecl . TYPE_NMTOKEN || attType == XMLAttributeDecl . TYPE_ENUMERATION ) { if ( ! XMLCharacterProperties . validNmtoken ( newAttValue ) ) { reportRecoverableXMLError ( XMLMessages . MSG_ATT_DEFAULT_INVALID , XMLMessages . VC_ATTRIBUTE_DEFAULT_LEGAL , fStringPool . toString ( attribute . rawname ) , newAttValue ) ; } } if ( attType == XMLAttributeDecl . TYPE_NOTATION || attType == XMLAttributeDecl . TYPE_ENUMERATION ) { if ( ! fStringPool . stringInList ( enumeration , defaultAttValue ) ) { reportRecoverableXMLError ( XMLMessages . MSG_ATT_DEFAULT_INVALID , XMLMessages . VC_ATTRIBUTE_DEFAULT_LEGAL , fStringPool . toString ( attribute . rawname ) , newAttValue ) ; } } } else if ( newAttValue != attValue ) { defaultAttValue = fStringPool . addSymbol ( newAttValue ) ; } } return defaultAttValue ; } } 	1	['71', '1', '0', '17', '193', '1133', '1', '16', '23', '0.924860853', '7189', '1', '15', '0', '0.147959184', '0', '0', '99.16901408', '3', '1.0423', '1']
package org . w3c . dom . html ; public interface HTMLScriptElement extends HTMLElement { public String getText ( ) ; public void setText ( String text ) ; public String getHtmlFor ( ) ; public void setHtmlFor ( String htmlFor ) ; public String getEvent ( ) ; public void setEvent ( String event ) ; public String getCharset ( ) ; public void setCharset ( String charset ) ; public boolean getDefer ( ) ; public void setDefer ( boolean defer ) ; public String getSrc ( ) ; public void setSrc ( String src ) ; public String getType ( ) ; public void setType ( String type ) ; } 	0	['14', '1', '0', '0', '14', '91', '0', '0', '14', '2', '14', '0', '0', '0', '0.5', '0', '0', '0', '1', '1', '0']
package org . apache . xerces . dom ; import org . w3c . dom . * ; public class DeferredCDATASectionImpl extends CDATASectionImpl implements DeferredNode { static final long serialVersionUID = 1983580632355645726L ; protected transient int fNodeIndex ; DeferredCDATASectionImpl ( DeferredDocumentImpl ownerDocument , int nodeIndex ) { super ( ownerDocument , null ) ; fNodeIndex = nodeIndex ; needsSyncData ( true ) ; } public int getNodeIndex ( ) { return fNodeIndex ; } protected void synchronizeData ( ) { needsSyncData ( false ) ; DeferredDocumentImpl ownerDocument = ( DeferredDocumentImpl ) this . ownerDocument ( ) ; data = ownerDocument . getNodeValueString ( fNodeIndex ) ; isIgnorableWhitespace ( ownerDocument . getLastChild ( fNodeIndex ) == 1 ) ; } } 	1	['3', '5', '0', '4', '9', '0', '1', '4', '1', '0.75', '44', '0.5', '0', '0.969230769', '0.555555556', '3', '11', '13', '2', '1', '2']
package org . apache . xerces . readers ; import org . apache . xerces . framework . XMLErrorReporter ; abstract class XMLEntityReader implements XMLEntityHandler . EntityReader { protected XMLEntityHandler fEntityHandler = null ; protected XMLErrorReporter fErrorReporter = null ; protected boolean fSendCharDataAsCharArray ; protected XMLEntityHandler . CharDataHandler fCharDataHandler = null ; protected boolean fInCDSect = false ; private boolean fStillActive = true ; protected int fCarriageReturnCounter = 1 ; protected int fLinefeedCounter = 1 ; protected int fCharacterCounter = 1 ; protected int fCurrentOffset = 0 ; protected XMLEntityReader ( XMLEntityHandler entityHandler , XMLErrorReporter errorReporter , boolean sendCharDataAsCharArray ) { fEntityHandler = entityHandler ; fErrorReporter = errorReporter ; fSendCharDataAsCharArray = sendCharDataAsCharArray ; fCharDataHandler = fEntityHandler . getCharDataHandler ( ) ; } protected XMLEntityReader ( XMLEntityHandler entityHandler , XMLErrorReporter errorReporter , boolean sendCharDataAsCharArray , int lineNumber , int columnNumber ) { fEntityHandler = entityHandler ; fErrorReporter = errorReporter ; fSendCharDataAsCharArray = sendCharDataAsCharArray ; fCharDataHandler = fEntityHandler . getCharDataHandler ( ) ; fLinefeedCounter = lineNumber ; fCharacterCounter = columnNumber ; } protected void init ( XMLEntityHandler entityHandler , XMLErrorReporter errorReporter , boolean sendCharDataAsCharArray , int lineNumber , int columnNumber ) { fEntityHandler = entityHandler ; fErrorReporter = errorReporter ; fSendCharDataAsCharArray = sendCharDataAsCharArray ; fCharDataHandler = fEntityHandler . getCharDataHandler ( ) ; fLinefeedCounter = lineNumber ; fCharacterCounter = columnNumber ; fStillActive = true ; fInCDSect = false ; fCarriageReturnCounter = 1 ; fCurrentOffset = 0 ; } public int currentOffset ( ) { return fCurrentOffset ; } public int getLineNumber ( ) { if ( fLinefeedCounter > 1 ) return fLinefeedCounter ; else return fCarriageReturnCounter ; } public int getColumnNumber ( ) { return fCharacterCounter ; } public void setInCDSect ( boolean inCDSect ) { fInCDSect = inCDSect ; } public boolean getInCDSect ( ) { return fInCDSect ; } protected XMLEntityHandler . EntityReader changeReaders ( ) throws Exception { XMLEntityHandler . EntityReader nextReader = null ; if ( fStillActive ) { nextReader = fEntityHandler . changeReaders ( ) ; fStillActive = false ; } return nextReader ; } } 	0	['9', '1', '6', '10', '12', '0', '6', '4', '5', '0.65', '183', '1', '3', '0', '0.466666667', '0', '0', '18.22222222', '2', '0.8889', '0']
package org . apache . xerces . validators . schema . identity ; import org . apache . xerces . framework . XMLAttrList ; import org . apache . xerces . utils . NamespacesScope ; import org . apache . xerces . utils . QName ; import org . apache . xerces . utils . StringPool ; import org . xml . sax . SAXException ; public class Selector { protected Selector . XPath fXPath ; protected IdentityConstraint fIdentityConstraint ; public Selector ( Selector . XPath xpath , IdentityConstraint identityConstraint ) { fXPath = xpath ; fIdentityConstraint = identityConstraint ; } public org . apache . xerces . validators . schema . identity . XPath getXPath ( ) { return fXPath ; } public IdentityConstraint getIdentityConstraint ( ) { return fIdentityConstraint ; } public XPathMatcher createMatcher ( FieldActivator activator ) { return new Selector . Matcher ( fXPath , activator ) ; } public String toString ( ) { return fXPath . toString ( ) ; } public static class XPath extends org . apache . xerces . validators . schema . identity . XPath { public XPath ( String xpath , StringPool stringPool , NamespacesScope context ) throws XPathException { super ( "./" + xpath , stringPool , context ) ; XPath . Axis axis = fLocationPath . steps [ fLocationPath . steps . length - 1 ] . axis ; if ( axis . type == axis . ATTRIBUTE ) { throw new XPathException ( "selectors cannot select attributes" ) ; } } } protected class Matcher extends XPathMatcher { protected FieldActivator fFieldActivator ; protected int fElementDepth ; protected int fMatchedDepth ; public Matcher ( Selector . XPath xpath , FieldActivator activator ) { super ( xpath ) ; fFieldActivator = activator ; } public void startDocumentFragment ( StringPool stringPool , NamespacesScope namespacesScope ) throws Exception { super . startDocumentFragment ( stringPool , namespacesScope ) ; fElementDepth = 0 ; fMatchedDepth = - 1 ; } public void startElement ( QName element , XMLAttrList attributes , int handle ) throws Exception { super . startElement ( element , attributes , handle ) ; fElementDepth ++ ; if ( isMatched ( ) ) { fMatchedDepth = fElementDepth ; fFieldActivator . startValueScopeFor ( fIdentityConstraint ) ; int count = fIdentityConstraint . getFieldCount ( ) ; for ( int i = 0 ; i < count ; i ++ ) { Field field = fIdentityConstraint . getFieldAt ( i ) ; XPathMatcher matcher = fFieldActivator . activateField ( field ) ; matcher . startElement ( element , attributes , handle ) ; } } } public void endElement ( QName element ) throws Exception { super . endElement ( element ) ; if ( fElementDepth -- == fMatchedDepth ) { fMatchedDepth = - 1 ; fFieldActivator . endValueScopeFor ( fIdentityConstraint ) ; } } } } 	1	['5', '1', '0', '8', '8', '0', '4', '6', '5', '0.5', '34', '1', '2', '0', '0.4', '0', '0', '5.4', '1', '0.8', '1']
package org . apache . wml . dom ; import org . apache . wml . * ; public class WMLTemplateElementImpl extends WMLElementImpl implements WMLTemplateElement { public WMLTemplateElementImpl ( WMLDocumentImpl owner , String tagName ) { super ( owner , tagName ) ; } public void setOnTimer ( String newValue ) { setAttribute ( "ontimer" , newValue ) ; } public String getOnTimer ( ) { return getAttribute ( "ontimer" ) ; } public void setOnEnterBackward ( String newValue ) { setAttribute ( "onenterbackward" , newValue ) ; } public String getOnEnterBackward ( ) { return getAttribute ( "onenterbackward" ) ; } public void setClassName ( String newValue ) { setAttribute ( "class" , newValue ) ; } public String getClassName ( ) { return getAttribute ( "class" ) ; } public void setId ( String newValue ) { setAttribute ( "id" , newValue ) ; } public String getId ( ) { return getAttribute ( "id" ) ; } public void setOnEnterForward ( String newValue ) { setAttribute ( "onenterforward" , newValue ) ; } public String getOnEnterForward ( ) { return getAttribute ( "onenterforward" ) ; } } 	0	['11', '4', '0', '3', '14', '55', '0', '3', '11', '2', '61', '0', '0', '0.891304348', '0.545454545', '1', '4', '4.545454545', '1', '0.9091', '0']
package org . apache . xerces . validators . schema ; import org . apache . xerces . utils . XMLMessageProvider ; import java . util . ResourceBundle ; import java . util . ListResourceBundle ; import java . util . Locale ; public class SchemaMessageProvider implements XMLMessageProvider { public static final String SCHEMA_DOMAIN = "http://www.w3.org/TR/xml-schema-1" ; public void setLocale ( Locale locale ) { fLocale = locale ; } public Locale getLocale ( ) { return fLocale ; } public String createMessage ( Locale locale , int majorCode , int minorCode , Object args [ ] ) { boolean throwex = false ; if ( fResourceBundle == null || locale != fLocale ) { if ( locale != null ) fResourceBundle = ListResourceBundle . getBundle ( "org.apache.xerces.msg.SchemaMessages" , locale ) ; if ( fResourceBundle == null ) fResourceBundle = ListResourceBundle . getBundle ( "org.apache.xerces.msg.SchemaMessages" ) ; } if ( majorCode < 0 || majorCode >= fgMessageKeys . length ) { majorCode = MSG_BAD_MAJORCODE ; throwex = true ; } String msgKey = fgMessageKeys [ majorCode ] ; String msg = fResourceBundle . getString ( msgKey ) ; if ( args != null ) { try { msg = java . text . MessageFormat . format ( msg , args ) ; } catch ( Exception e ) { msg = fResourceBundle . getString ( fgMessageKeys [ MSG_FORMAT_FAILURE ] ) ; msg += " " + fResourceBundle . getString ( msgKey ) ; } } if ( throwex ) { throw new RuntimeException ( msg ) ; } return msg ; } private Locale fLocale = null ; private ResourceBundle fResourceBundle = null ; public static final int MSG_BAD_MAJORCODE = 0 , MSG_FORMAT_FAILURE = 1 , NoValidatorFor = 2 , IncorrectDatatype = 3 , AttMissingType = 4 , NotADatatype = 5 , TextOnlyContentWithType = 6 , FeatureUnsupported = 7 , NestedOnlyInElemOnly = 8 , EltRefOnlyInMixedElemOnly = 9 , OnlyInEltContent = 10 , OrderIsAll = 11 , DatatypeWithType = 12 , DatatypeQualUnsupported = 13 , GroupContentRestricted = 14 , UnknownBaseDatatype = 15 , BadAttWithRef = 16 , NoContentForRef = 17 , IncorrectDefaultType = 18 , IllegalAttContent = 19 , ValueNotInteger = 20 , DatatypeError = 21 , TypeAlreadySet = 22 , GenericError = 23 , UnclassifiedError = 24 , ContentError = 25 , AnnotationError = 26 , ListUnionRestrictionError = 27 , ProhibitedAttributePresent = 28 , UniqueNotEnoughValues = 29 , KeyNotEnoughValues = 30 , KeyRefNotEnoughValues = 31 , DuplicateField = 32 , DuplicateUnique = 33 , DuplicateKey = 34 , KeyNotFound = 35 , UnknownField = 36 , MSG_MAX_CODE = 37 ; public static final int MSG_NONE = 0 ; public static final String [ ] fgMessageKeys = { "BadMajorCode" , "FormatFailed" , "NoValidatorFor" , "IncorrectDatatype" , "AttMissingType" , "NotADatatype" , "TextOnlyContentWithType" , "FeatureUnsupported" , "NestedOnlyInElemOnly" , "EltRefOnlyInMixedElemOnly" , "OnlyInEltContent" , "OrderIsAll" , "DatatypeWithType" , "DatatypeQualUnsupported" , "GroupContentRestricted" , "UnknownBaseDatatype" , "BadAttWithRef" , "NoContentForRef" , "IncorrectDefaultType" , "IllegalAttContent" , "ValueNotInteger" , "DatatypeError" , "TypeAlreadySet" , "GenericError" , "UnclassifiedError" , "ContentError" , "AnnotationError" , "ListUnionRestrictionError" , "ProhibitedAttributePresent" , "UniqueNotEnoughValues" , "KeyNotEnoughValues" , "KeyRefNotEnoughValues" , "DuplicateField" , "DuplicateUnique" , "DuplicateKey" , "KeyNotFound" , "UnknownField" , } ; } 	1	['5', '1', '0', '3', '14', '0', '2', '1', '4', '1.203488372', '296', '0.046511628', '0', '0', '0.5', '0', '0', '49.6', '9', '2.2', '3']
package org . apache . html . dom ; import org . w3c . dom . * ; import org . w3c . dom . html . * ; import org . apache . xerces . dom . ElementImpl ; public class HTMLElementImpl extends ElementImpl implements HTMLElement { HTMLElementImpl ( HTMLDocumentImpl owner , String tagName ) { super ( owner , tagName . toUpperCase ( ) ) ; } public String getId ( ) { return getAttribute ( "id" ) ; } public void setId ( String id ) { setAttribute ( "id" , id ) ; } public String getTitle ( ) { return getAttribute ( "title" ) ; } public void setTitle ( String title ) { setAttribute ( "title" , title ) ; } public String getLang ( ) { return getAttribute ( "lang" ) ; } public void setLang ( String lang ) { setAttribute ( "lang" , lang ) ; } public String getDir ( ) { return getAttribute ( "dir" ) ; } public void setDir ( String dir ) { setAttribute ( "dir" , dir ) ; } public String getClassName ( ) { return getAttribute ( "class" ) ; } public void setClassName ( String className ) { setAttribute ( "class" , className ) ; } int getInteger ( String value ) { try { return Integer . parseInt ( value ) ; } catch ( NumberFormatException except ) { return 0 ; } } boolean getBinary ( String name ) { return ( getAttributeNode ( name ) != null ) ; } void setAttribute ( String name , boolean value ) { if ( value ) setAttribute ( name , name ) ; else removeAttribute ( name ) ; } public Attr getAttributeNode ( String attrName ) { return super . getAttributeNode ( attrName . toLowerCase ( ) ) ; } public Attr getAttributeNodeNS ( String namespaceURI , String localName ) { if ( namespaceURI != null && namespaceURI . length ( ) > 0 ) return super . getAttributeNodeNS ( namespaceURI , localName ) ; else return super . getAttributeNode ( localName . toLowerCase ( ) ) ; } public String getAttribute ( String attrName ) { return super . getAttribute ( attrName . toLowerCase ( ) ) ; } public String getAttributeNS ( String namespaceURI , String localName ) { if ( namespaceURI != null && namespaceURI . length ( ) > 0 ) return super . getAttributeNS ( namespaceURI , localName ) ; else return super . getAttribute ( localName . toLowerCase ( ) ) ; } public final NodeList getElementsByTagName ( String tagName ) { return super . getElementsByTagName ( tagName . toUpperCase ( ) ) ; } public final NodeList getElementsByTagNameNS ( String namespaceURI , String localName ) { if ( namespaceURI != null && namespaceURI . length ( ) > 0 ) return super . getElementsByTagNameNS ( namespaceURI , localName . toUpperCase ( ) ) ; else return super . getElementsByTagName ( localName . toUpperCase ( ) ) ; } String capitalize ( String value ) { char [ ] chars ; int i ; chars = value . toCharArray ( ) ; if ( chars . length > 0 ) { chars [ 0 ] = Character . toUpperCase ( chars [ 0 ] ) ; for ( i = 1 ; i < chars . length ; ++ i ) chars [ i ] = Character . toLowerCase ( chars [ i ] ) ; return String . valueOf ( chars ) ; } return value ; } String getCapitalized ( String name ) { String value ; char [ ] chars ; int i ; value = getAttribute ( name ) ; if ( value != null ) { chars = value . toCharArray ( ) ; if ( chars . length > 0 ) { chars [ 0 ] = Character . toUpperCase ( chars [ 0 ] ) ; for ( i = 1 ; i < chars . length ; ++ i ) chars [ i ] = Character . toLowerCase ( chars [ i ] ) ; return String . valueOf ( chars ) ; } } return value ; } public HTMLFormElement getForm ( ) { Node parent ; parent = getParentNode ( ) ; while ( parent != null ) { if ( parent instanceof HTMLFormElement ) return ( HTMLFormElement ) parent ; parent = parent . getParentNode ( ) ; } return null ; } } 	0	['23', '3', '52', '55', '42', '253', '53', '3', '17', '2', '249', '0', '0', '0.765957447', '0.456521739', '1', '2', '9.826086957', '4', '1.6087', '0']
package org . apache . xerces . readers ; import java . util . * ; public class MIME2Java { static private Hashtable s_enchash ; static private Hashtable s_revhash ; static { s_enchash = new Hashtable ( ) ; s_enchash . put ( "UTF-8" , "UTF8" ) ; s_enchash . put ( "US-ASCII" , "ASCII" ) ; s_enchash . put ( "ISO-8859-1" , "8859_1" ) ; s_enchash . put ( "ISO-8859-2" , "8859_2" ) ; s_enchash . put ( "ISO-8859-3" , "8859_3" ) ; s_enchash . put ( "ISO-8859-4" , "8859_4" ) ; s_enchash . put ( "ISO-8859-5" , "8859_5" ) ; s_enchash . put ( "ISO-8859-6" , "8859_6" ) ; s_enchash . put ( "ISO-8859-7" , "8859_7" ) ; s_enchash . put ( "ISO-8859-8" , "8859_8" ) ; s_enchash . put ( "ISO-8859-9" , "8859_9" ) ; s_enchash . put ( "ISO-2022-JP" , "JIS" ) ; s_enchash . put ( "SHIFT_JIS" , "SJIS" ) ; String version = System . getProperty ( "java.version" ) ; if ( version . equals ( "1.1" ) || version . startsWith ( "1.1." ) ) { s_enchash . put ( "WINDOWS-31J" , "SJIS" ) ; } else { s_enchash . put ( "WINDOWS-31J" , "MS932" ) ; } s_enchash . put ( "EUC-JP" , "EUCJIS" ) ; s_enchash . put ( "GB2312" , "GB2312" ) ; s_enchash . put ( "BIG5" , "Big5" ) ; s_enchash . put ( "EUC-KR" , "KSC5601" ) ; s_enchash . put ( "ISO-2022-KR" , "ISO2022KR" ) ; s_enchash . put ( "KOI8-R" , "KOI8_R" ) ; s_enchash . put ( "EBCDIC-CP-US" , "CP037" ) ; s_enchash . put ( "EBCDIC-CP-CA" , "CP037" ) ; s_enchash . put ( "EBCDIC-CP-NL" , "CP037" ) ; s_enchash . put ( "EBCDIC-CP-DK" , "CP277" ) ; s_enchash . put ( "EBCDIC-CP-NO" , "CP277" ) ; s_enchash . put ( "EBCDIC-CP-FI" , "CP278" ) ; s_enchash . put ( "EBCDIC-CP-SE" , "CP278" ) ; s_enchash . put ( "EBCDIC-CP-IT" , "CP280" ) ; s_enchash . put ( "EBCDIC-CP-ES" , "CP284" ) ; s_enchash . put ( "EBCDIC-CP-GB" , "CP285" ) ; s_enchash . put ( "EBCDIC-CP-FR" , "CP297" ) ; s_enchash . put ( "EBCDIC-CP-AR1" , "CP420" ) ; s_enchash . put ( "EBCDIC-CP-HE" , "CP424" ) ; s_enchash . put ( "EBCDIC-CP-CH" , "CP500" ) ; s_enchash . put ( "EBCDIC-CP-ROECE" , "CP870" ) ; s_enchash . put ( "EBCDIC-CP-YU" , "CP870" ) ; s_enchash . put ( "EBCDIC-CP-IS" , "CP871" ) ; s_enchash . put ( "EBCDIC-CP-AR2" , "CP918" ) ; s_revhash = new Hashtable ( ) ; s_revhash . put ( "UTF8" , "UTF-8" ) ; s_revhash . put ( "ASCII" , "US-ASCII" ) ; s_revhash . put ( "8859_1" , "ISO-8859-1" ) ; s_revhash . put ( "8859_2" , "ISO-8859-2" ) ; s_revhash . put ( "8859_3" , "ISO-8859-3" ) ; s_revhash . put ( "8859_4" , "ISO-8859-4" ) ; s_revhash . put ( "8859_5" , "ISO-8859-5" ) ; s_revhash . put ( "8859_6" , "ISO-8859-6" ) ; s_revhash . put ( "8859_7" , "ISO-8859-7" ) ; s_revhash . put ( "8859_8" , "ISO-8859-8" ) ; s_revhash . put ( "8859_9" , "ISO-8859-9" ) ; s_revhash . put ( "JIS" , "ISO-2022-JP" ) ; s_revhash . put ( "SJIS" , "Shift_JIS" ) ; s_revhash . put ( "MS932" , "WINDOWS-31J" ) ; s_revhash . put ( "EUCJIS" , "EUC-JP" ) ; s_revhash . put ( "GB2312" , "GB2312" ) ; s_revhash . put ( "BIG5" , "Big5" ) ; s_revhash . put ( "KSC5601" , "EUC-KR" ) ; s_revhash . put ( "ISO2022KR" , "ISO-2022-KR" ) ; s_revhash . put ( "KOI8_R" , "KOI8-R" ) ; s_revhash . put ( "CP037" , "EBCDIC-CP-US" ) ; s_revhash . put ( "CP037" , "EBCDIC-CP-CA" ) ; s_revhash . put ( "CP037" , "EBCDIC-CP-NL" ) ; s_revhash . put ( "CP277" , "EBCDIC-CP-DK" ) ; s_revhash . put ( "CP277" , "EBCDIC-CP-NO" ) ; s_revhash . put ( "CP278" , "EBCDIC-CP-FI" ) ; s_revhash . put ( "CP278" , "EBCDIC-CP-SE" ) ; s_revhash . put ( "CP280" , "EBCDIC-CP-IT" ) ; s_revhash . put ( "CP284" , "EBCDIC-CP-ES" ) ; s_revhash . put ( "CP285" , "EBCDIC-CP-GB" ) ; s_revhash . put ( "CP297" , "EBCDIC-CP-FR" ) ; s_revhash . put ( "CP420" , "EBCDIC-CP-AR1" ) ; s_revhash . put ( "CP424" , "EBCDIC-CP-HE" ) ; s_revhash . put ( "CP500" , "EBCDIC-CP-CH" ) ; s_revhash . put ( "CP870" , "EBCDIC-CP-ROECE" ) ; s_revhash . put ( "CP870" , "EBCDIC-CP-YU" ) ; s_revhash . put ( "CP871" , "EBCDIC-CP-IS" ) ; s_revhash . put ( "CP918" , "EBCDIC-CP-AR2" ) ; } private MIME2Java ( ) { } public static String convert ( String mimeCharsetName ) { return ( String ) s_enchash . get ( mimeCharsetName . toUpperCase ( ) ) ; } public static String reverse ( String encoding ) { return ( String ) s_revhash . get ( encoding . toUpperCase ( ) ) ; } } 	1	['4', '1', '0', '3', '12', '2', '3', '0', '2', '0.666666667', '427', '1', '0', '0', '0.5', '0', '0', '105.25', '1', '0.5', '3']
package org . w3c . dom . html ; public interface HTMLPreElement extends HTMLElement { public int getWidth ( ) ; public void setWidth ( int width ) ; } 	0	['2', '1', '0', '0', '2', '1', '0', '0', '2', '2', '2', '0', '0', '0', '0.75', '0', '0', '0', '1', '1', '0']
package org . apache . html . dom ; import org . w3c . dom . * ; import org . w3c . dom . html . * ; public class HTMLBodyElementImpl extends HTMLElementImpl implements HTMLBodyElement { public String getALink ( ) { return getAttribute ( "alink" ) ; } public void setALink ( String aLink ) { setAttribute ( "alink" , aLink ) ; } public String getBackground ( ) { return getAttribute ( "background" ) ; } public void setBackground ( String background ) { setAttribute ( "background" , background ) ; } public String getBgColor ( ) { return getAttribute ( "bgcolor" ) ; } public void setBgColor ( String bgColor ) { setAttribute ( "bgcolor" , bgColor ) ; } public String getLink ( ) { return getAttribute ( "link" ) ; } public void setLink ( String link ) { setAttribute ( "link" , link ) ; } public String getText ( ) { return getAttribute ( "text" ) ; } public void setText ( String text ) { setAttribute ( "text" , text ) ; } public String getVLink ( ) { return getAttribute ( "vlink" ) ; } public void setVLink ( String vLink ) { setAttribute ( "vlink" , vLink ) ; } public HTMLBodyElementImpl ( HTMLDocumentImpl owner , String name ) { super ( owner , name ) ; } } 	0	['13', '4', '0', '2', '16', '78', '1', '2', '13', '2', '72', '0', '0', '0.886792453', '0.538461538', '0', '0', '4.538461538', '1', '0.9231', '0']
package org . apache . xml . serialize ; import java . io . Writer ; import java . io . OutputStream ; import java . io . OutputStreamWriter ; import java . io . IOException ; import java . io . UnsupportedEncodingException ; import java . util . Vector ; import java . util . Hashtable ; import java . util . StringTokenizer ; import org . w3c . dom . * ; import org . xml . sax . DocumentHandler ; import org . xml . sax . DTDHandler ; import org . xml . sax . Locator ; import org . xml . sax . SAXException ; import org . xml . sax . ContentHandler ; import org . xml . sax . Attributes ; import org . xml . sax . ext . LexicalHandler ; import org . xml . sax . ext . DeclHandler ; public abstract class BaseMarkupSerializer implements ContentHandler , DocumentHandler , LexicalHandler , DTDHandler , DeclHandler , DOMSerializer , Serializer { private EncodingInfo _encodingInfo ; private ElementState [ ] _elementStates ; private int _elementStateCount ; private Vector _preRoot ; protected boolean _started ; private boolean _prepared ; protected Hashtable _prefixes ; protected String _docTypePublicId ; protected String _docTypeSystemId ; protected OutputFormat _format ; protected Printer _printer ; protected boolean _indenting ; private Writer _writer ; private OutputStream _output ; protected BaseMarkupSerializer ( OutputFormat format ) { int i ; _elementStates = new ElementState [ 10 ] ; for ( i = 0 ; i < _elementStates . length ; ++ i ) _elementStates [ i ] = new ElementState ( ) ; _format = format ; } public DocumentHandler asDocumentHandler ( ) throws IOException { prepare ( ) ; return this ; } public ContentHandler asContentHandler ( ) throws IOException { prepare ( ) ; return this ; } public DOMSerializer asDOMSerializer ( ) throws IOException { prepare ( ) ; return this ; } public void setOutputByteStream ( OutputStream output ) { if ( output == null ) throw new NullPointerException ( "SER001 Argument 'output' is null." ) ; _output = output ; _writer = null ; reset ( ) ; } public void setOutputCharStream ( Writer writer ) { if ( writer == null ) throw new NullPointerException ( "SER001 Argument 'writer' is null." ) ; _writer = writer ; _output = null ; reset ( ) ; } public void setOutputFormat ( OutputFormat format ) { if ( format == null ) throw new NullPointerException ( "SER001 Argument 'format' is null." ) ; _format = format ; reset ( ) ; } public boolean reset ( ) { if ( _elementStateCount > 1 ) throw new IllegalStateException ( "Serializer reset in the middle of serialization" ) ; _prepared = false ; return true ; } protected void prepare ( ) throws IOException { if ( _prepared ) return ; if ( _writer == null && _output == null ) throw new IOException ( "SER002 No writer supplied for serializer" ) ; _encodingInfo = _format . getEncodingInfo ( ) ; if ( _output != null ) { _writer = _encodingInfo . getWriter ( _output ) ; } if ( _format . getIndenting ( ) ) { _indenting = true ; _printer = new IndentPrinter ( _writer , _format ) ; } else { _indenting = false ; _printer = new Printer ( _writer , _format ) ; } ElementState state ; _elementStateCount = 0 ; state = _elementStates [ 0 ] ; state . namespaceURI = null ; state . localName = null ; state . rawName = null ; state . preserveSpace = _format . getPreserveSpace ( ) ; state . empty = true ; state . afterElement = false ; state . doCData = state . inCData = false ; state . prefixes = null ; _docTypePublicId = _format . getDoctypePublic ( ) ; _docTypeSystemId = _format . getDoctypeSystem ( ) ; _started = false ; _prepared = true ; } public void serialize ( Element elem ) throws IOException { prepare ( ) ; serializeNode ( elem ) ; _printer . flush ( ) ; if ( _printer . getException ( ) != null ) throw _printer . getException ( ) ; } public void serialize ( DocumentFragment frag ) throws IOException { prepare ( ) ; serializeNode ( frag ) ; _printer . flush ( ) ; if ( _printer . getException ( ) != null ) throw _printer . getException ( ) ; } public void serialize ( Document doc ) throws IOException { prepare ( ) ; serializeNode ( doc ) ; serializePreRoot ( ) ; _printer . flush ( ) ; if ( _printer . getException ( ) != null ) throw _printer . getException ( ) ; } public void startDocument ( ) throws SAXException { try { prepare ( ) ; } catch ( IOException except ) { throw new SAXException ( except . toString ( ) ) ; } } public void characters ( char [ ] chars , int start , int length ) { ElementState state ; state = content ( ) ; if ( state . inCData || state . doCData ) { int saveIndent ; if ( ! state . inCData ) { _printer . printText ( "<![CDATA[" ) ; state . inCData = true ; } saveIndent = _printer . getNextIndent ( ) ; _printer . setNextIndent ( 0 ) ; for ( int index = 0 ; index < length ; ++ index ) { if ( index + 2 < length && chars [ index ] == ']' && chars [ index + 1 ] == ']' && chars [ index + 2 ] == '>' ) { printText ( chars , start , index + 2 , true , true ) ; _printer . printText ( "]]><![CDATA[" ) ; start += index + 2 ; length -= index + 2 ; index = 0 ; } } if ( length > 0 ) printText ( chars , start , length , true , true ) ; _printer . setNextIndent ( saveIndent ) ; } else { int saveIndent ; if ( state . preserveSpace ) { saveIndent = _printer . getNextIndent ( ) ; _printer . setNextIndent ( 0 ) ; printText ( chars , start , length , true , state . unescaped ) ; _printer . setNextIndent ( saveIndent ) ; } else { printText ( chars , start , length , false , state . unescaped ) ; } } } public void ignorableWhitespace ( char [ ] chars , int start , int length ) { int i ; content ( ) ; if ( _indenting ) { _printer . setThisIndent ( 0 ) ; for ( i = start ; length -- > 0 ; ++ i ) _printer . printText ( chars [ i ] ) ; } } public void processingInstruction ( String target , String code ) { int index ; StringBuffer buffer ; ElementState state ; state = content ( ) ; buffer = new StringBuffer ( 40 ) ; index = target . indexOf ( "?>" ) ; if ( index >= 0 ) buffer . append ( "<?" ) . append ( target . substring ( 0 , index ) ) ; else buffer . append ( "<?" ) . append ( target ) ; if ( code != null ) { buffer . append ( ' ' ) ; index = code . indexOf ( "?>" ) ; if ( index >= 0 ) buffer . append ( code . substring ( 0 , index ) ) ; else buffer . append ( code ) ; } buffer . append ( "?>" ) ; if ( isDocumentState ( ) ) { if ( _preRoot == null ) _preRoot = new Vector ( ) ; _preRoot . addElement ( buffer . toString ( ) ) ; } else { _printer . indent ( ) ; printText ( buffer . toString ( ) , true , true ) ; _printer . unindent ( ) ; } } public void comment ( char [ ] chars , int start , int length ) { comment ( new String ( chars , start , length ) ) ; } public void comment ( String text ) { StringBuffer buffer ; int index ; ElementState state ; if ( _format . getOmitComments ( ) ) return ; state = content ( ) ; buffer = new StringBuffer ( 40 ) ; index = text . indexOf ( "-->" ) ; if ( index >= 0 ) buffer . append ( "<!--" ) . append ( text . substring ( 0 , index ) ) . append ( "-->" ) ; else buffer . append ( "<!--" ) . append ( text ) . append ( "-->" ) ; if ( isDocumentState ( ) ) { if ( _preRoot == null ) _preRoot = new Vector ( ) ; _preRoot . addElement ( buffer . toString ( ) ) ; } else { _printer . indent ( ) ; printText ( buffer . toString ( ) , false , true ) ; _printer . unindent ( ) ; } } public void startCDATA ( ) { ElementState state ; state = getElementState ( ) ; state . doCData = true ; } public void endCDATA ( ) { ElementState state ; state = getElementState ( ) ; state . doCData = false ; } public void startNonEscaping ( ) { ElementState state ; state = getElementState ( ) ; state . unescaped = true ; } public void endNonEscaping ( ) { ElementState state ; state = getElementState ( ) ; state . unescaped = false ; } public void startPreserving ( ) { ElementState state ; state = getElementState ( ) ; state . preserveSpace = true ; } public void endPreserving ( ) { ElementState state ; state = getElementState ( ) ; state . preserveSpace = false ; } public void endDocument ( ) throws SAXException { serializePreRoot ( ) ; _printer . flush ( ) ; if ( _printer . getException ( ) != null ) throw new SAXException ( _printer . getException ( ) ) ; } public void startEntity ( String name ) { } public void endEntity ( String name ) { } public void setDocumentLocator ( Locator locator ) { } public void skippedEntity ( String name ) throws SAXException { endCDATA ( ) ; content ( ) ; _printer . printText ( '&' ) ; _printer . printText ( name ) ; _printer . printText ( ';' ) ; } public void startPrefixMapping ( String prefix , String uri ) throws SAXException { if ( _prefixes == null ) _prefixes = new Hashtable ( ) ; _prefixes . put ( uri , prefix == null ? "" : prefix ) ; } public void endPrefixMapping ( String prefix ) throws SAXException { } public void startDTD ( String name , String publicId , String systemId ) { _printer . enterDTD ( ) ; _docTypePublicId = publicId ; _docTypeSystemId = systemId ; } public void endDTD ( ) { } public void elementDecl ( String name , String model ) { _printer . enterDTD ( ) ; _printer . printText ( "<!ELEMENT " ) ; _printer . printText ( name ) ; _printer . printText ( ' ' ) ; _printer . printText ( model ) ; _printer . printText ( '>' ) ; if ( _indenting ) _printer . breakLine ( ) ; } public void attributeDecl ( String eName , String aName , String type , String valueDefault , String value ) { _printer . enterDTD ( ) ; _printer . printText ( "<!ATTLIST " ) ; _printer . printText ( eName ) ; _printer . printText ( ' ' ) ; _printer . printText ( aName ) ; _printer . printText ( ' ' ) ; _printer . printText ( type ) ; if ( valueDefault != null ) { _printer . printText ( ' ' ) ; _printer . printText ( valueDefault ) ; } if ( value != null ) { _printer . printText ( " \"" ) ; printEscaped ( value ) ; _printer . printText ( '"' ) ; } _printer . printText ( '>' ) ; if ( _indenting ) _printer . breakLine ( ) ; } public void internalEntityDecl ( String name , String value ) { _printer . enterDTD ( ) ; _printer . printText ( "<!ENTITY " ) ; _printer . printText ( name ) ; _printer . printText ( " \"" ) ; printEscaped ( value ) ; _printer . printText ( "\">" ) ; if ( _indenting ) _printer . breakLine ( ) ; } public void externalEntityDecl ( String name , String publicId , String systemId ) { _printer . enterDTD ( ) ; unparsedEntityDecl ( name , publicId , systemId , null ) ; } public void unparsedEntityDecl ( String name , String publicId , String systemId , String notationName ) { _printer . enterDTD ( ) ; if ( publicId == null ) { _printer . printText ( "<!ENTITY " ) ; _printer . printText ( name ) ; _printer . printText ( " SYSTEM " ) ; printDoctypeURL ( systemId ) ; } else { _printer . printText ( "<!ENTITY " ) ; _printer . printText ( name ) ; _printer . printText ( " PUBLIC " ) ; printDoctypeURL ( publicId ) ; _printer . printText ( ' ' ) ; printDoctypeURL ( systemId ) ; } if ( notationName != null ) { _printer . printText ( " NDATA " ) ; _printer . printText ( notationName ) ; } _printer . printText ( '>' ) ; if ( _indenting ) _printer . breakLine ( ) ; } public void notationDecl ( String name , String publicId , String systemId ) { _printer . enterDTD ( ) ; if ( publicId != null ) { _printer . printText ( "<!NOTATION " ) ; _printer . printText ( name ) ; _printer . printText ( " PUBLIC " ) ; printDoctypeURL ( publicId ) ; if ( systemId != null ) { _printer . printText ( ' ' ) ; printDoctypeURL ( systemId ) ; } } else { _printer . printText ( "<!NOTATION " ) ; _printer . printText ( name ) ; _printer . printText ( " SYSTEM " ) ; printDoctypeURL ( systemId ) ; } _printer . printText ( '>' ) ; if ( _indenting ) _printer . breakLine ( ) ; } protected void serializeNode ( Node node ) { switch ( node . getNodeType ( ) ) { case Node . TEXT_NODE : { String text ; text = node . getNodeValue ( ) ; if ( text != null ) characters ( node . getNodeValue ( ) ) ; break ; } case Node . CDATA_SECTION_NODE : { String text ; text = node . getNodeValue ( ) ; if ( text != null ) { startCDATA ( ) ; characters ( node . getNodeValue ( ) ) ; endCDATA ( ) ; } break ; } case Node . COMMENT_NODE : { String text ; if ( ! _format . getOmitComments ( ) ) { text = node . getNodeValue ( ) ; if ( text != null ) comment ( node . getNodeValue ( ) ) ; } break ; } case Node . ENTITY_REFERENCE_NODE : { Node child ; endCDATA ( ) ; content ( ) ; child = node . getFirstChild ( ) ; while ( child != null ) { serializeNode ( child ) ; child = child . getNextSibling ( ) ; } break ; } case Node . PROCESSING_INSTRUCTION_NODE : processingInstruction ( node . getNodeName ( ) , node . getNodeValue ( ) ) ; break ; case Node . ELEMENT_NODE : serializeElement ( ( Element ) node ) ; break ; case Node . DOCUMENT_NODE : { DocumentType docType ; DOMImplementation domImpl ; NamedNodeMap map ; Entity entity ; Notation notation ; int i ; docType = ( ( Document ) node ) . getDoctype ( ) ; if ( docType != null ) { domImpl = ( ( Document ) node ) . getImplementation ( ) ; try { String internal ; startDTD ( docType . getName ( ) , docType . getPublicId ( ) , docType . getSystemId ( ) ) ; internal = docType . getInternalSubset ( ) ; if ( internal != null && internal . length ( ) > 0 ) _printer . printText ( internal ) ; endDTD ( ) ; } catch ( NoSuchMethodError nsme ) { Class docTypeClass = docType . getClass ( ) ; String docTypePublicId = null ; String docTypeSystemId = null ; try { java . lang . reflect . Method getPublicId = docTypeClass . getMethod ( "getPublicId" , null ) ; if ( getPublicId . getReturnType ( ) . equals ( String . class ) ) { docTypePublicId = ( String ) getPublicId . invoke ( docType , null ) ; } } catch ( Exception e ) { } try { java . lang . reflect . Method getSystemId = docTypeClass . getMethod ( "getSystemId" , null ) ; if ( getSystemId . getReturnType ( ) . equals ( String . class ) ) { docTypeSystemId = ( String ) getSystemId . invoke ( docType , null ) ; } } catch ( Exception e ) { } startDTD ( docType . getName ( ) , docTypePublicId , docTypeSystemId ) ; endDTD ( ) ; } } } case Node . DOCUMENT_FRAGMENT_NODE : { Node child ; child = node . getFirstChild ( ) ; while ( child != null ) { serializeNode ( child ) ; child = child . getNextSibling ( ) ; } break ; } default : break ; } } protected ElementState content ( ) { ElementState state ; state = getElementState ( ) ; if ( ! isDocumentState ( ) ) { if ( state . inCData && ! state . doCData ) { _printer . printText ( "]]>" ) ; state . inCData = false ; } if ( state . empty ) { _printer . printText ( '>' ) ; state . empty = false ; } state . afterElement = false ; } return state ; } protected void characters ( String text ) { ElementState state ; state = content ( ) ; if ( state . inCData || state . doCData ) { StringBuffer buffer ; int index ; int saveIndent ; buffer = new StringBuffer ( text . length ( ) ) ; if ( ! state . inCData ) { buffer . append ( "<![CDATA[" ) ; state . inCData = true ; } index = text . indexOf ( "]]>" ) ; while ( index >= 0 ) { buffer . append ( text . substring ( 0 , index + 2 ) ) . append ( "]]><![CDATA[" ) ; text = text . substring ( index + 2 ) ; index = text . indexOf ( "]]>" ) ; } buffer . append ( text ) ; saveIndent = _printer . getNextIndent ( ) ; _printer . setNextIndent ( 0 ) ; printText ( buffer . toString ( ) , true , true ) ; _printer . setNextIndent ( saveIndent ) ; } else { int saveIndent ; if ( state . preserveSpace ) { saveIndent = _printer . getNextIndent ( ) ; _printer . setNextIndent ( 0 ) ; printText ( text , true , state . unescaped ) ; _printer . setNextIndent ( saveIndent ) ; } else { printText ( text , false , state . unescaped ) ; } } } protected abstract String getEntityRef ( int ch ) ; protected abstract void serializeElement ( Element elem ) ; protected void serializePreRoot ( ) { int i ; if ( _preRoot != null ) { for ( i = 0 ; i < _preRoot . size ( ) ; ++ i ) { printText ( ( String ) _preRoot . elementAt ( i ) , true , true ) ; _printer . breakLine ( ) ; } _preRoot . removeAllElements ( ) ; } } protected final void printText ( char [ ] chars , int start , int length , boolean preserveSpace , boolean unescaped ) { int index ; char ch ; if ( preserveSpace ) { while ( length -- > 0 ) { ch = chars [ start ] ; ++ start ; if ( ch == '\n' || ch == '\r' || unescaped ) _printer . printText ( ch ) ; else printEscaped ( ch ) ; } } else { while ( length -- > 0 ) { ch = chars [ start ] ; ++ start ; if ( ch == ' ' || ch == '\f' || ch == '\t' || ch == '\n' || ch == '\r' ) _printer . printSpace ( ) ; else if ( unescaped ) _printer . printText ( ch ) ; else printEscaped ( ch ) ; } } } protected final void printText ( String text , boolean preserveSpace , boolean unescaped ) { int index ; char ch ; if ( preserveSpace ) { for ( index = 0 ; index < text . length ( ) ; ++ index ) { ch = text . charAt ( index ) ; if ( ch == '\n' || ch == '\r' || unescaped ) _printer . printText ( ch ) ; else printEscaped ( ch ) ; } } else { for ( index = 0 ; index < text . length ( ) ; ++ index ) { ch = text . charAt ( index ) ; if ( ch == ' ' || ch == '\f' || ch == '\t' || ch == '\n' || ch == '\r' ) _printer . printSpace ( ) ; else if ( unescaped ) _printer . printText ( ch ) ; else printEscaped ( ch ) ; } } } protected void printDoctypeURL ( String url ) { int i ; _printer . printText ( '"' ) ; for ( i = 0 ; i < url . length ( ) ; ++ i ) { if ( url . charAt ( i ) == '"' || url . charAt ( i ) < 0x20 || url . charAt ( i ) > 0x7F ) { _printer . printText ( '%' ) ; _printer . printText ( Integer . toHexString ( url . charAt ( i ) ) ) ; } else _printer . printText ( url . charAt ( i ) ) ; } _printer . printText ( '"' ) ; } protected void printEscaped ( int ch ) { String charRef ; charRef = getEntityRef ( ch ) ; if ( charRef != null ) { _printer . printText ( '&' ) ; _printer . printText ( charRef ) ; _printer . printText ( ';' ) ; } else if ( ( ch >= ' ' && _encodingInfo . isPrintable ( ch ) && ch != 0xF7 ) || ch == '\n' || ch == '\r' || ch == '\t' ) { if ( ch < 0x10000 ) { _printer . printText ( ( char ) ch ) ; } else { _printer . printText ( ( char ) ( ( ( ch - 0x10000 ) > > 10 ) + 0xd800 ) ) ; _printer . printText ( ( char ) ( ( ( ch - 0x10000 ) & 0x3ff ) + 0xdc00 ) ) ; } } else { _printer . printText ( "&#x" ) ; _printer . printText ( Integer . toHexString ( ch ) ) ; _printer . printText ( ';' ) ; } } protected void printEscaped ( String source ) { for ( int i = 0 ; i < source . length ( ) ; ++ i ) { int ch = source . charAt ( i ) ; if ( ( ch & 0xfc00 ) == 0xd800 && i + 1 < source . length ( ) ) { int lowch = source . charAt ( i + 1 ) ; if ( ( lowch & 0xfc00 ) == 0xdc00 ) { ch = 0x10000 + ( ( ch - 0xd800 ) << 10 ) + lowch - 0xdc00 ; i ++ ; } } printEscaped ( ch ) ; } } protected ElementState getElementState ( ) { return _elementStates [ _elementStateCount ] ; } protected ElementState enterElementState ( String namespaceURI , String localName , String rawName , boolean preserveSpace ) { ElementState state ; if ( _elementStateCount + 1 == _elementStates . length ) { ElementState [ ] newStates ; newStates = new ElementState [ _elementStates . length + 10 ] ; for ( int i = 0 ; i < _elementStates . length ; ++ i ) newStates [ i ] = _elementStates [ i ] ; for ( int i = _elementStates . length ; i < newStates . length ; ++ i ) newStates [ i ] = new ElementState ( ) ; _elementStates = newStates ; } ++ _elementStateCount ; state = _elementStates [ _elementStateCount ] ; state . namespaceURI = namespaceURI ; state . localName = localName ; state . rawName = rawName ; state . preserveSpace = preserveSpace ; state . empty = true ; state . afterElement = false ; state . doCData = state . inCData = false ; state . unescaped = false ; state . prefixes = _prefixes ; _prefixes = null ; return state ; } protected ElementState leaveElementState ( ) { if ( _elementStateCount > 0 ) { _prefixes = _elementStates [ _elementStateCount ] . prefixes ; -- _elementStateCount ; return _elementStates [ _elementStateCount ] ; } else throw new IllegalStateException ( "Internal error: element state is zero" ) ; } protected boolean isDocumentState ( ) { return _elementStateCount == 0 ; } protected String getPrefix ( String namespaceURI ) { String prefix ; if ( _prefixes != null ) { prefix = ( String ) _prefixes . get ( namespaceURI ) ; if ( prefix != null ) return prefix ; } if ( _elementStateCount == 0 ) return null ; else { for ( int i = _elementStateCount ; i > 0 ; -- i ) { if ( _elementStates [ i ] . prefixes != null ) { prefix = ( String ) _elementStates [ i ] . prefixes . get ( namespaceURI ) ; if ( prefix != null ) return prefix ; } } } return null ; } } 	1	['56', '1', '3', '10', '124', '864', '3', '7', '37', '0.778181818', '1899', '0.933333333', '4', '0', '0.135989011', '0', '0', '32.64285714', '13', '2.9464', '1']
package org . apache . xerces . utils ; import org . apache . xerces . readers . XMLEntityHandler ; public final class CharDataChunk implements StringPool . StringProducer { public static final int CHUNK_SHIFT = 14 ; public static final int CHUNK_SIZE = ( 1 << CHUNK_SHIFT ) ; public static final int CHUNK_MASK = CHUNK_SIZE - 1 ; public static CharDataChunk createChunk ( StringPool stringPool , CharDataChunk prev ) { CharDataChunk newChunk = null ; synchronized ( CharDataChunk . class ) { newChunk = fgFreeChunks ; if ( newChunk != null ) { fgFreeChunks = newChunk . fNextChunk ; } else { newChunk = new CharDataChunk ( ) ; } } newChunk . fStringPool = stringPool ; newChunk . fRefCount = 1 ; newChunk . fChunk = prev == null ? 0 : prev . fChunk + 1 ; newChunk . fNextChunk = null ; newChunk . fPreviousChunk = prev ; if ( prev != null ) { prev . setNextChunk ( newChunk ) ; } return newChunk ; } public CharDataChunk chunkFor ( int offset ) { int firstChunk = offset > > CHUNK_SHIFT ; if ( firstChunk == fChunk ) return this ; CharDataChunk dataChunk = fPreviousChunk ; while ( firstChunk != dataChunk . fChunk ) dataChunk = dataChunk . fPreviousChunk ; return dataChunk ; } public char [ ] toCharArray ( ) { return fData ; } public void setCharArray ( char [ ] data ) { fData = data ; } public CharDataChunk nextChunk ( ) { return fNextChunk ; } public boolean clearPreviousChunk ( ) { if ( fPreviousChunk != null ) { fPreviousChunk . clearNextChunk ( ) ; fPreviousChunk . removeRef ( ) ; fPreviousChunk = null ; return true ; } return false ; } public void releaseChunk ( ) { removeRef ( ) ; } public int addString ( int offset , int length ) { int chunk = offset > > CHUNK_SHIFT ; if ( chunk != fChunk ) { if ( fPreviousChunk == null ) throw new RuntimeException ( new ImplementationMessages ( ) . createMessage ( null , ImplementationMessages . INT_PCN , 0 , null ) ) ; return fPreviousChunk . addString ( offset , length ) ; } int lastChunk = ( offset + length - 1 ) > > CHUNK_SHIFT ; if ( chunk == lastChunk ) { addRef ( ) ; return fStringPool . addString ( this , offset & CHUNK_MASK , length ) ; } String str = toString ( offset & CHUNK_MASK , length ) ; return fStringPool . addString ( str ) ; } public int addSymbol ( int offset , int length , int hashcode ) { int chunk = offset > > CHUNK_SHIFT ; if ( chunk != fChunk ) { if ( fPreviousChunk == null ) throw new RuntimeException ( new ImplementationMessages ( ) . createMessage ( null , ImplementationMessages . INT_PCN , 0 , null ) ) ; return fPreviousChunk . addSymbol ( offset , length , hashcode ) ; } int lastChunk = ( offset + length - 1 ) > > CHUNK_SHIFT ; int index = offset & CHUNK_MASK ; if ( chunk == lastChunk ) { if ( hashcode == 0 ) hashcode = StringHasher . hashChars ( fData , index , length ) ; int symbol = fStringPool . lookupSymbol ( this , offset & CHUNK_MASK , length , hashcode ) ; if ( symbol == - 1 ) { String str = toString ( offset & CHUNK_MASK , length ) ; symbol = fStringPool . addNewSymbol ( str , hashcode ) ; } return symbol ; } String str = toString ( offset & CHUNK_MASK , length ) ; return fStringPool . addSymbol ( str ) ; } public void append ( XMLEntityHandler . CharBuffer charBuffer , int offset , int length ) { CharDataChunk dataChunk = chunkFor ( offset ) ; int index = offset & CHUNK_MASK ; int nbytes = ( index + length <= CHUNK_SIZE ) ? length : CHUNK_SIZE - index ; while ( true ) { charBuffer . append ( dataChunk . fData , index , nbytes ) ; length -= nbytes ; if ( length == 0 ) break ; dataChunk = dataChunk . fNextChunk ; index = 0 ; nbytes = length <= CHUNK_SIZE ? length : CHUNK_SIZE ; } } public String toString ( int offset , int length ) { if ( offset + length <= CHUNK_SIZE ) { return new String ( fData , offset , length ) ; } StringBuffer sb = new StringBuffer ( length ) ; int nbytes = CHUNK_SIZE - offset ; sb . append ( fData , offset , nbytes ) ; length -= nbytes ; CharDataChunk aChunk = fNextChunk ; do { nbytes = length <= CHUNK_SIZE ? length : CHUNK_SIZE ; sb . append ( aChunk . fData , 0 , nbytes ) ; length -= nbytes ; aChunk = aChunk . fNextChunk ; } while ( length > 0 ) ; String retval = sb . toString ( ) ; sb = null ; return retval ; } public void releaseString ( int offset , int length ) { removeRef ( ) ; } public boolean equalsString ( int offset , int length , char [ ] strChars , int strOffset , int strLength ) { if ( length != strLength ) return false ; if ( offset + length <= CHUNK_SIZE ) { for ( int i = 0 ; i < length ; i ++ ) { if ( fData [ offset ++ ] != strChars [ strOffset ++ ] ) return false ; } return true ; } int nbytes = CHUNK_SIZE - offset ; length -= nbytes ; while ( nbytes -- > 0 ) { if ( fData [ offset ++ ] != strChars [ strOffset ++ ] ) return false ; } CharDataChunk aChunk = fNextChunk ; do { offset = 0 ; nbytes = length <= CHUNK_SIZE ? length : CHUNK_SIZE ; length -= nbytes ; while ( nbytes -- > 0 ) { if ( aChunk . fData [ offset ++ ] != strChars [ strOffset ++ ] ) return false ; } aChunk = aChunk . fNextChunk ; } while ( length > 0 ) ; return true ; } private CharDataChunk ( ) { } private void addRef ( ) { fRefCount ++ ; } private void removeRef ( ) { fRefCount -- ; if ( fRefCount == 0 ) { fStringPool = null ; fChunk = - 1 ; fPreviousChunk = null ; synchronized ( CharDataChunk . class ) { fNextChunk = null ; fgFreeChunks = this ; } } } private void clearNextChunk ( ) { if ( fNextChunk != null ) fNextChunk . removeRef ( ) ; fNextChunk = null ; } private void setNextChunk ( CharDataChunk nextChunk ) { if ( fNextChunk != null ) { throw new RuntimeException ( "CharDataChunk::setNextChunk" ) ; } nextChunk . addRef ( ) ; fNextChunk = nextChunk ; } private StringPool fStringPool ; private int fRefCount ; private int fChunk ; private char [ ] fData = null ; private CharDataChunk fNextChunk ; private CharDataChunk fPreviousChunk ; private static CharDataChunk fgFreeChunks = null ; } 	0	['20', '1', '0', '10', '38', '62', '5', '5', '13', '0.708133971', '601', '0.636363636', '4', '0', '0.233082707', '0', '0', '28.5', '11', '2.65', '0']
package org . apache . xerces . validators . schema . identity ; import org . apache . xerces . utils . NamespacesScope ; import org . apache . xerces . utils . StringPool ; import org . apache . xerces . validators . datatype . DatatypeValidator ; import org . xml . sax . SAXException ; public class Field { protected Field . XPath fXPath ; protected DatatypeValidator fDatatypeValidator ; protected IdentityConstraint fIdentityConstraint ; public Field ( Field . XPath xpath , DatatypeValidator datatypeValidator , IdentityConstraint identityConstraint ) { fXPath = xpath ; fDatatypeValidator = datatypeValidator ; fIdentityConstraint = identityConstraint ; } public org . apache . xerces . validators . schema . identity . XPath getXPath ( ) { return fXPath ; } public DatatypeValidator getDatatypeValidator ( ) { return fDatatypeValidator ; } public IdentityConstraint getIdentityConstraint ( ) { return fIdentityConstraint ; } public XPathMatcher createMatcher ( ValueStore store ) { return new Field . Matcher ( fXPath , store ) ; } public String toString ( ) { return fXPath . toString ( ) ; } public static class XPath extends org . apache . xerces . validators . schema . identity . XPath { public XPath ( String xpath , StringPool stringPool , NamespacesScope context ) throws XPathException { super ( "./" + xpath , stringPool , context ) ; } } protected class Matcher extends XPathMatcher { protected ValueStore fStore ; public Matcher ( Field . XPath xpath , ValueStore store ) { super ( xpath ) ; fStore = store ; } protected void matched ( String content ) throws Exception { super . matched ( content ) ; fStore . addValue ( Field . this , content ) ; } } } 	1	['6', '1', '0', '13', '9', '0', '9', '7', '6', '0.666666667', '42', '1', '3', '0', '0.333333333', '0', '0', '5.5', '1', '0.8333', '1']
package org . apache . xerces . utils ; public final class SymbolCache { public static final int CHAR_OFFSET = 0 ; public static final int INDEX_OFFSET = 1 ; public static final int NEXT_OFFSET = 2 ; public static final int CACHE_RECORD_SIZE = 3 ; public static final int INITIAL_CACHE_RECORD_COUNT = 4 ; public char [ ] fSymbolChars = new char [ 8192 ] ; public int fSymbolCharsOffset = 0 ; public int [ ] [ ] fCacheLines = new int [ 8 ] [ ] ; public int fCacheLineCount = 0 ; public SymbolCache ( ) { fCacheLines [ fCacheLineCount ++ ] = new int [ 1 + ( INITIAL_CACHE_RECORD_COUNT * CACHE_RECORD_SIZE ) ] ; } public void reset ( ) { fSymbolCharsOffset = 0 ; fCacheLineCount = 0 ; fCacheLines [ fCacheLineCount ++ ] = new int [ 1 + ( INITIAL_CACHE_RECORD_COUNT * CACHE_RECORD_SIZE ) ] ; } public char [ ] getSymbolChars ( ) { return fSymbolChars ; } public String createSymbol ( int symbolHandle , int startOffset , int entry , int [ ] entries , int offset ) { int slen = fSymbolCharsOffset - startOffset ; String str = new String ( fSymbolChars , startOffset , slen ) ; try { entries [ offset + SymbolCache . INDEX_OFFSET ] = symbolHandle ; } catch ( ArrayIndexOutOfBoundsException ex ) { throw new RuntimeException ( "UTL001 untested" ) ; } return str ; } public int addSymbolToCache ( String str , int slen , int symbolHandle ) { int charsOffset = fSymbolCharsOffset ; if ( slen == 0 ) return charsOffset ; int strIndex = 0 ; char ch = str . charAt ( strIndex ++ ) ; try { fSymbolChars [ fSymbolCharsOffset ] = ch ; } catch ( ArrayIndexOutOfBoundsException ex ) { char [ ] newChars = new char [ fSymbolChars . length * 2 ] ; System . arraycopy ( fSymbolChars , 0 , newChars , 0 , fSymbolChars . length ) ; fSymbolChars = newChars ; fSymbolChars [ fSymbolCharsOffset ] = ch ; } fSymbolCharsOffset ++ ; int entry = 0 ; int [ ] entries = fCacheLines [ entry ] ; int count = entries [ 0 ] ; int i = 0 ; int offset = 1 ; while ( true ) { if ( i == count ) break ; if ( entries [ offset + CHAR_OFFSET ] != ch ) { i ++ ; offset += CACHE_RECORD_SIZE ; continue ; } if ( strIndex == slen ) { if ( entries [ offset + INDEX_OFFSET ] != - 1 ) { throw new RuntimeException ( "addSymbolToCache" ) ; } entries [ offset + INDEX_OFFSET ] = symbolHandle ; return charsOffset ; } ch = str . charAt ( strIndex ++ ) ; try { fSymbolChars [ fSymbolCharsOffset ] = ch ; } catch ( ArrayIndexOutOfBoundsException ex ) { char [ ] newChars = new char [ fSymbolChars . length * 2 ] ; System . arraycopy ( fSymbolChars , 0 , newChars , 0 , fSymbolChars . length ) ; fSymbolChars = newChars ; fSymbolChars [ fSymbolCharsOffset ] = ch ; } fSymbolCharsOffset ++ ; entry = entries [ offset + NEXT_OFFSET ] ; try { entries = fCacheLines [ entry ] ; } catch ( ArrayIndexOutOfBoundsException ex ) { if ( entry == - 1 ) { entry = fCacheLineCount ++ ; entries [ offset + NEXT_OFFSET ] = entry ; entries = new int [ 1 + ( INITIAL_CACHE_RECORD_COUNT * CACHE_RECORD_SIZE ) ] ; try { fCacheLines [ entry ] = entries ; } catch ( ArrayIndexOutOfBoundsException ex2 ) { int [ ] [ ] newCache = new int [ entry * 2 ] [ ] ; System . arraycopy ( fCacheLines , 0 , newCache , 0 , entry ) ; fCacheLines = newCache ; fCacheLines [ entry ] = entries ; } } else { entries = fCacheLines [ entry ] ; throw new RuntimeException ( "UTL001 untested" ) ; } } count = entries [ 0 ] ; i = 0 ; offset = 1 ; } while ( true ) { entries [ 0 ] ++ ; try { entries [ offset + CHAR_OFFSET ] = ch ; } catch ( ArrayIndexOutOfBoundsException ex ) { int newSize = 1 + ( ( offset - 1 ) * 2 ) ; int [ ] newEntries = new int [ newSize ] ; System . arraycopy ( entries , 0 , newEntries , 0 , offset ) ; fCacheLines [ entry ] = entries = newEntries ; entries [ offset + CHAR_OFFSET ] = ch ; } if ( strIndex == slen ) { entries [ offset + INDEX_OFFSET ] = symbolHandle ; entries [ offset + NEXT_OFFSET ] = - 1 ; break ; } entry = fCacheLineCount ++ ; entries [ offset + INDEX_OFFSET ] = - 1 ; entries [ offset + NEXT_OFFSET ] = entry ; entries = new int [ 1 + ( INITIAL_CACHE_RECORD_COUNT * CACHE_RECORD_SIZE ) ] ; try { fCacheLines [ entry ] = entries ; } catch ( ArrayIndexOutOfBoundsException ex ) { int [ ] [ ] newCache = new int [ entry * 2 ] [ ] ; System . arraycopy ( fCacheLines , 0 , newCache , 0 , entry ) ; fCacheLines = newCache ; fCacheLines [ entry ] = entries ; } offset = 1 ; ch = str . charAt ( strIndex ++ ) ; try { fSymbolChars [ fSymbolCharsOffset ] = ch ; } catch ( ArrayIndexOutOfBoundsException ex ) { char [ ] newChars = new char [ fSymbolChars . length * 2 ] ; System . arraycopy ( fSymbolChars , 0 , newChars , 0 , fSymbolChars . length ) ; fSymbolChars = newChars ; fSymbolChars [ fSymbolCharsOffset ] = ch ; } fSymbolCharsOffset ++ ; } return charsOffset ; } public void updateCacheLine ( int charsOffset , int totalMisses , int length ) { int entry = 0 ; int [ ] entries = fCacheLines [ 0 ] ; int ch = fSymbolChars [ charsOffset ++ ] ; int count = entries [ 0 ] ; int offset = 1 + ( ( count - 1 ) * CACHE_RECORD_SIZE ) ; int misses = 0 ; while ( true ) { if ( ch != entries [ offset + CHAR_OFFSET ] ) { offset -= CACHE_RECORD_SIZE ; misses ++ ; continue ; } if ( misses > 4 ) { int symIndex = entries [ offset + INDEX_OFFSET ] ; int nextIndex = entries [ offset + NEXT_OFFSET ] ; System . arraycopy ( entries , offset + CACHE_RECORD_SIZE , entries , offset , misses * CACHE_RECORD_SIZE ) ; offset = 1 + ( ( count - 1 ) * CACHE_RECORD_SIZE ) ; entries [ offset + CHAR_OFFSET ] = ch ; entries [ offset + INDEX_OFFSET ] = symIndex ; entries [ offset + NEXT_OFFSET ] = nextIndex ; } if ( -- length == 0 ) break ; entry = entries [ offset + NEXT_OFFSET ] ; entries = fCacheLines [ entry ] ; ch = fSymbolChars [ charsOffset ++ ] ; count = entries [ 0 ] ; offset = 1 + ( ( count - 1 ) * CACHE_RECORD_SIZE ) ; misses = 0 ; } } } 	0	['6', '1', '0', '2', '11', '0', '2', '0', '6', '0.844444444', '608', '0', '0', '0', '0.458333333', '0', '0', '98.83333333', '8', '2.5', '0']
package org . apache . xerces . parsers ; import java . io . IOException ; import java . util . Enumeration ; import java . util . Hashtable ; import java . util . StringTokenizer ; import org . apache . xerces . dom . TextImpl ; import org . apache . xerces . framework . XMLAttrList ; import org . apache . xerces . framework . XMLContentSpec ; import org . apache . xerces . framework . XMLDocumentHandler ; import org . apache . xerces . framework . XMLParser ; import org . apache . xerces . readers . XMLEntityHandler ; import org . apache . xerces . utils . QName ; import org . apache . xerces . utils . StringPool ; import org . apache . xerces . validators . common . XMLAttributeDecl ; import org . apache . xerces . validators . common . XMLElementDecl ; import org . apache . xerces . validators . schema . XUtil ; import org . apache . xerces . validators . schema . SchemaSymbols ; import org . apache . xerces . dom . DeferredDocumentImpl ; import org . apache . xerces . dom . DocumentImpl ; import org . apache . xerces . dom . DocumentTypeImpl ; import org . apache . xerces . dom . NodeImpl ; import org . apache . xerces . dom . EntityImpl ; import org . apache . xerces . dom . NotationImpl ; import org . apache . xerces . dom . ElementDefinitionImpl ; import org . apache . xerces . dom . AttrImpl ; import org . apache . xerces . dom . TextImpl ; import org . apache . xerces . dom . ElementImpl ; import org . apache . xerces . dom . EntityImpl ; import org . apache . xerces . dom . EntityReferenceImpl ; import org . w3c . dom . Attr ; import org . w3c . dom . Comment ; import org . w3c . dom . Document ; import org . w3c . dom . DocumentType ; import org . w3c . dom . Element ; import org . w3c . dom . Entity ; import org . w3c . dom . EntityReference ; import org . w3c . dom . Node ; import org . w3c . dom . NodeList ; import org . w3c . dom . NamedNodeMap ; import org . w3c . dom . ProcessingInstruction ; import org . w3c . dom . Text ; import org . xml . sax . SAXException ; import org . xml . sax . SAXNotRecognizedException ; import org . xml . sax . SAXNotSupportedException ; public class DOMParser extends XMLParser implements XMLDocumentHandler { public static final String DEFAULT_DOCUMENT_CLASS_NAME = "org.apache.xerces.dom.DocumentImpl" ; public static final String DEFAULT_DEFERRED_DOCUMENT_CLASS_NAME = "org.apache.xerces.dom.DeferredDocumentImpl" ; private static final boolean DEBUG_ATTLIST_DECL = false ; private static final String RECOGNIZED_FEATURES [ ] = { "http://apache.org/xml/features/dom/defer-node-expansion" , "http://apache.org/xml/features/dom/create-entity-ref-nodes" , "http://apache.org/xml/features/dom/include-ignorable-whitespace" , "http://apache.org/xml/features/domx/grammar-access" , } ; private static final String RECOGNIZED_PROPERTIES [ ] = { "http://apache.org/xml/properties/dom/document-class-name" , "http://apache.org/xml/properties/dom/current-element-node" , } ; protected Document fDocument ; protected DeferredDocumentImpl fDeferredDocumentImpl ; protected int fDocumentIndex ; protected int fDocumentTypeIndex ; protected int fCurrentNodeIndex ; protected DocumentImpl fDocumentImpl ; protected DocumentType fDocumentType ; protected Node fCurrentElementNode ; protected boolean fInDTD ; protected boolean fWithinElement ; protected boolean fInCDATA ; private boolean fGrammarAccess ; private String fDocumentClassName ; private boolean fDeferNodeExpansion ; private boolean fCreateEntityReferenceNodes ; private boolean fIncludeIgnorableWhitespace ; protected int fAmpIndex ; protected int fLtIndex ; protected int fGtIndex ; protected int fAposIndex ; protected int fQuotIndex ; private boolean fSeenRootElement ; private boolean fStringPoolInUse ; private XMLAttrList fAttrList ; public DOMParser ( ) { initHandlers ( false , this , this ) ; init ( ) ; try { setDocumentClassName ( DEFAULT_DOCUMENT_CLASS_NAME ) ; setCreateEntityReferenceNodes ( true ) ; setDeferNodeExpansion ( true ) ; setIncludeIgnorableWhitespace ( true ) ; } catch ( SAXException e ) { throw new RuntimeException ( "PAR001 Fatal error constructing DOMParser." ) ; } } public Document getDocument ( ) { return fDocument ; } public String [ ] getFeaturesRecognized ( ) { String superRecognized [ ] = super . getFeaturesRecognized ( ) ; String thisRecognized [ ] = RECOGNIZED_FEATURES ; int thisLength = thisRecognized . length ; if ( thisLength == 0 ) { return superRecognized ; } int superLength = superRecognized . length ; if ( superLength == 0 ) { return thisRecognized ; } String recognized [ ] = new String [ superLength + thisLength ] ; System . arraycopy ( superRecognized , 0 , recognized , 0 , superLength ) ; System . arraycopy ( thisRecognized , 0 , recognized , superLength , thisLength ) ; return recognized ; } public String [ ] getPropertiesRecognized ( ) { String superRecognized [ ] = super . getPropertiesRecognized ( ) ; String thisRecognized [ ] = RECOGNIZED_PROPERTIES ; int thisLength = thisRecognized . length ; if ( thisLength == 0 ) { return superRecognized ; } int superLength = superRecognized . length ; if ( superLength == 0 ) { return thisRecognized ; } String recognized [ ] = new String [ superLength + thisLength ] ; System . arraycopy ( superRecognized , 0 , recognized , 0 , superLength ) ; System . arraycopy ( thisRecognized , 0 , recognized , superLength , thisLength ) ; return recognized ; } public void reset ( ) throws Exception { if ( fStringPoolInUse ) { fStringPool = new StringPool ( ) ; fStringPoolInUse = false ; } super . reset ( ) ; init ( ) ; } public void resetOrCopy ( ) throws Exception { super . resetOrCopy ( ) ; init ( ) ; } protected void init ( ) { fDocument = null ; fDeferredDocumentImpl = null ; fDocumentIndex = - 1 ; fDocumentTypeIndex = - 1 ; fCurrentNodeIndex = - 1 ; fDocumentImpl = null ; fDocumentType = null ; fCurrentElementNode = null ; fInDTD = false ; fWithinElement = false ; fInCDATA = false ; fAmpIndex = fStringPool . addSymbol ( "amp" ) ; fLtIndex = fStringPool . addSymbol ( "lt" ) ; fGtIndex = fStringPool . addSymbol ( "gt" ) ; fAposIndex = fStringPool . addSymbol ( "apos" ) ; fQuotIndex = fStringPool . addSymbol ( "quot" ) ; fSeenRootElement = false ; fStringPoolInUse = false ; fAttrList = new XMLAttrList ( fStringPool ) ; } protected void setDeferNodeExpansion ( boolean deferNodeExpansion ) throws SAXNotRecognizedException , SAXNotSupportedException { fDeferNodeExpansion = deferNodeExpansion ; } protected boolean getDeferNodeExpansion ( ) throws SAXNotRecognizedException , SAXNotSupportedException { return fDeferNodeExpansion ; } protected void setCreateEntityReferenceNodes ( boolean create ) throws SAXNotRecognizedException , SAXNotSupportedException { fCreateEntityReferenceNodes = create ; } public boolean getCreateEntityReferenceNodes ( ) throws SAXNotRecognizedException , SAXNotSupportedException { return fCreateEntityReferenceNodes ; } public void setIncludeIgnorableWhitespace ( boolean include ) throws SAXNotRecognizedException , SAXNotSupportedException { fIncludeIgnorableWhitespace = include ; } public boolean getIncludeIgnorableWhitespace ( ) throws SAXNotRecognizedException , SAXNotSupportedException { return fIncludeIgnorableWhitespace ; } protected void setDocumentClassName ( String documentClassName ) throws SAXNotRecognizedException , SAXNotSupportedException { if ( documentClassName == null ) { documentClassName = DEFAULT_DOCUMENT_CLASS_NAME ; } try { Class _class = Class . forName ( documentClassName ) ; if ( ! Document . class . isAssignableFrom ( _class ) ) { throw new IllegalArgumentException ( "PAR002 Class, \"" + documentClassName + "\", is not of type org.w3c.dom.Document." + "\n" + documentClassName ) ; } } catch ( ClassNotFoundException e ) { throw new IllegalArgumentException ( "PAR003 Class, \"" + documentClassName + "\", not found." + "\n" + documentClassName ) ; } fDocumentClassName = documentClassName ; if ( ! documentClassName . equals ( DEFAULT_DOCUMENT_CLASS_NAME ) ) { setDeferNodeExpansion ( false ) ; } } protected String getDocumentClassName ( ) throws SAXNotRecognizedException , SAXNotSupportedException { return fDocumentClassName ; } protected Element getCurrentElementNode ( ) throws SAXNotRecognizedException , SAXNotSupportedException { if ( fCurrentElementNode != null && fCurrentElementNode . getNodeType ( ) == Node . ELEMENT_NODE ) { return ( Element ) fCurrentElementNode ; } return null ; } public void setFeature ( String featureId , boolean state ) throws SAXNotRecognizedException , SAXNotSupportedException { if ( featureId . startsWith ( SAX2_FEATURES_PREFIX ) ) { } else if ( featureId . startsWith ( XERCES_FEATURES_PREFIX ) ) { String feature = featureId . substring ( XERCES_FEATURES_PREFIX . length ( ) ) ; if ( feature . equals ( "dom/defer-node-expansion" ) ) { if ( fParseInProgress ) { throw new SAXNotSupportedException ( "PAR004 Cannot setFeature(" + featureId + "): parse is in progress." + "\n" + featureId ) ; } setDeferNodeExpansion ( state ) ; return ; } if ( feature . equals ( "dom/create-entity-ref-nodes" ) ) { setCreateEntityReferenceNodes ( state ) ; return ; } if ( feature . equals ( "dom/include-ignorable-whitespace" ) ) { setIncludeIgnorableWhitespace ( state ) ; return ; } if ( feature . equals ( "domx/grammar-access" ) ) { fGrammarAccess = state ; return ; } } super . setFeature ( featureId , state ) ; } public boolean getFeature ( String featureId ) throws SAXNotRecognizedException , SAXNotSupportedException { if ( featureId . startsWith ( SAX2_FEATURES_PREFIX ) ) { } else if ( featureId . startsWith ( XERCES_FEATURES_PREFIX ) ) { String feature = featureId . substring ( XERCES_FEATURES_PREFIX . length ( ) ) ; if ( feature . equals ( "dom/defer-node-expansion" ) ) { return getDeferNodeExpansion ( ) ; } else if ( feature . equals ( "dom/create-entity-ref-nodes" ) ) { return getCreateEntityReferenceNodes ( ) ; } if ( feature . equals ( "dom/include-ignorable-whitespace" ) ) { return getIncludeIgnorableWhitespace ( ) ; } if ( feature . equals ( "domx/grammar-access" ) ) { return fGrammarAccess ; } } return super . getFeature ( featureId ) ; } public void setProperty ( String propertyId , Object value ) throws SAXNotRecognizedException , SAXNotSupportedException { if ( propertyId . startsWith ( XERCES_PROPERTIES_PREFIX ) ) { String property = propertyId . substring ( XERCES_PROPERTIES_PREFIX . length ( ) ) ; if ( property . equals ( "dom/current-element-node" ) ) { throw new SAXNotSupportedException ( "PAR005 Property, \"" + propertyId + "\" is read-only.\n" + propertyId ) ; } else if ( property . equals ( "dom/document-class-name" ) ) { if ( value != null && ! ( value instanceof String ) ) { throw new SAXNotSupportedException ( "PAR006 Property value must be of type java.lang.String." ) ; } setDocumentClassName ( ( String ) value ) ; return ; } } super . setProperty ( propertyId , value ) ; } public Object getProperty ( String propertyId ) throws SAXNotRecognizedException , SAXNotSupportedException { if ( propertyId . startsWith ( XERCES_PROPERTIES_PREFIX ) ) { String property = propertyId . substring ( XERCES_PROPERTIES_PREFIX . length ( ) ) ; if ( property . equals ( "dom/current-element-node" ) ) { boolean throwException = false ; try { throwException = getFeature ( XERCES_FEATURES_PREFIX + "dom/defer-node-expansion" ) ; } catch ( SAXNotSupportedException e ) { } catch ( SAXNotRecognizedException e ) { } if ( throwException ) { throw new SAXNotSupportedException ( "PAR007 Current element node cannot be queried when node expansion is deferred." ) ; } return getCurrentElementNode ( ) ; } else if ( property . equals ( "dom/document-class-name" ) ) { return getDocumentClassName ( ) ; } } return super . getProperty ( propertyId ) ; } public void startDocument ( ) { String documentClassName = null ; try { documentClassName = getDocumentClassName ( ) ; } catch ( SAXException e ) { throw new RuntimeException ( "PAR008 Fatal error getting document factory." ) ; } boolean deferNodeExpansion = true ; try { deferNodeExpansion = getDeferNodeExpansion ( ) ; } catch ( SAXException e ) { throw new RuntimeException ( "PAR009 Fatal error reading expansion mode." ) ; } try { boolean isDocumentImpl = fDocumentClassName . equals ( DEFAULT_DOCUMENT_CLASS_NAME ) ; boolean isDeferredImpl = fDocumentClassName . equals ( DEFAULT_DEFERRED_DOCUMENT_CLASS_NAME ) ; if ( deferNodeExpansion && ( isDocumentImpl || isDeferredImpl ) ) { boolean nsEnabled = false ; try { nsEnabled = getNamespaces ( ) ; } catch ( SAXException s ) { } fDeferredDocumentImpl = new DeferredDocumentImpl ( fStringPool , nsEnabled , fGrammarAccess ) ; fStringPoolInUse = true ; fDocument = fDeferredDocumentImpl ; fDocumentIndex = fDeferredDocumentImpl . createDocument ( ) ; fCurrentNodeIndex = fDocumentIndex ; } else { Class docClass = Class . forName ( documentClassName ) ; Class defaultDocClass = Class . forName ( DEFAULT_DOCUMENT_CLASS_NAME ) ; if ( isDocumentImpl ) { fDocument = new DocumentImpl ( fGrammarAccess ) ; } else { try { Class documentClass = Class . forName ( documentClassName ) ; fDocument = ( Document ) documentClass . newInstance ( ) ; } catch ( Exception e ) { } } if ( docClass . isAssignableFrom ( defaultDocClass ) ) { fDocumentImpl = ( DocumentImpl ) fDocument ; fDocumentImpl . setErrorChecking ( false ) ; } fCurrentElementNode = fDocument ; } } catch ( ClassNotFoundException e ) { throw new RuntimeException ( documentClassName ) ; } } public void endDocument ( ) throws Exception { if ( fDocumentImpl != null ) { fDocumentImpl . setErrorChecking ( true ) ; } } public void xmlDecl ( int versionIndex , int encodingIndex , int standaloneIndex ) throws Exception { fStringPool . releaseString ( versionIndex ) ; fStringPool . releaseString ( encodingIndex ) ; fStringPool . releaseString ( standaloneIndex ) ; } public void textDecl ( int versionIndex , int encodingIndex ) throws Exception { fStringPool . releaseString ( versionIndex ) ; fStringPool . releaseString ( encodingIndex ) ; } public void startNamespaceDeclScope ( int prefix , int uri ) throws Exception { } public void endNamespaceDeclScope ( int prefix ) throws Exception { } public void startElement ( QName elementQName , XMLAttrList xmlAttrList , int attrListIndex ) throws Exception { if ( fDeferredDocumentImpl != null ) { int element = fDeferredDocumentImpl . createElement ( elementQName . rawname , elementQName . uri , xmlAttrList , attrListIndex ) ; fDeferredDocumentImpl . appendChild ( fCurrentNodeIndex , element ) ; fCurrentNodeIndex = element ; fWithinElement = true ; int index = xmlAttrList . getFirstAttr ( attrListIndex ) ; while ( index != - 1 ) { if ( xmlAttrList . getAttType ( index ) == fStringPool . addSymbol ( "ID" ) ) { int nameIndex = xmlAttrList . getAttValue ( index ) ; fDeferredDocumentImpl . putIdentifier ( nameIndex , element ) ; } index = xmlAttrList . getNextAttr ( index ) ; } if ( ! fSeenRootElement ) { fSeenRootElement = true ; if ( fDocumentTypeIndex == - 1 ) { fDocumentTypeIndex = fDeferredDocumentImpl . createDocumentType ( elementQName . rawname , - 1 , - 1 ) ; fDeferredDocumentImpl . appendChild ( 0 , fDocumentTypeIndex ) ; } if ( fGrammarAccess ) { int size = fGrammarResolver . size ( ) ; if ( size > 0 ) { Enumeration schemas = fGrammarResolver . nameSpaceKeys ( ) ; Document schemaDocument = fGrammarResolver . getGrammar ( ( String ) schemas . nextElement ( ) ) . getGrammarDocument ( ) ; if ( schemaDocument != null ) { Element schema = schemaDocument . getDocumentElement ( ) ; copyInto ( schema , fDocumentTypeIndex ) ; } } } } } else { boolean nsEnabled = false ; try { nsEnabled = getNamespaces ( ) ; } catch ( SAXException s ) { } String elementName = fStringPool . toString ( elementQName . rawname ) ; Element e ; if ( nsEnabled ) { e = fDocument . createElementNS ( fStringPool . toString ( elementQName . uri ) , elementName ) ; } else { e = fDocument . createElement ( elementName ) ; } int attrHandle = xmlAttrList . getFirstAttr ( attrListIndex ) ; while ( attrHandle != - 1 ) { int attName = xmlAttrList . getAttrName ( attrHandle ) ; String attrName = fStringPool . toString ( attName ) ; String attrValue = fStringPool . toString ( xmlAttrList . getAttValue ( attrHandle ) ) ; if ( nsEnabled ) { int nsURIIndex = xmlAttrList . getAttrURI ( attrHandle ) ; String namespaceURI = fStringPool . toString ( nsURIIndex ) ; int prefixIndex = xmlAttrList . getAttrPrefix ( attrHandle ) ; String prefix = fStringPool . toString ( prefixIndex ) ; if ( namespaceURI == null ) { if ( prefix != null ) { if ( prefix . equals ( "xmlns" ) ) { namespaceURI = "http://www.w3.org/2000/xmlns/" ; } } else if ( attrName . equals ( "xmlns" ) ) { namespaceURI = "http://www.w3.org/2000/xmlns/" ; } } e . setAttributeNS ( namespaceURI , attrName , attrValue ) ; } else { e . setAttribute ( attrName , attrValue ) ; } if ( ! xmlAttrList . isSpecified ( attrHandle ) ) { ( ( AttrImpl ) e . getAttributeNode ( attrName ) ) . setSpecified ( false ) ; } attrHandle = xmlAttrList . getNextAttr ( attrHandle ) ; } fCurrentElementNode . appendChild ( e ) ; fCurrentElementNode = e ; fWithinElement = true ; if ( fDocumentImpl != null ) { int index = xmlAttrList . getFirstAttr ( attrListIndex ) ; while ( index != - 1 ) { if ( xmlAttrList . getAttType ( index ) == fStringPool . addSymbol ( "ID" ) ) { String name = fStringPool . toString ( xmlAttrList . getAttValue ( index ) ) ; fDocumentImpl . putIdentifier ( name , e ) ; } index = xmlAttrList . getNextAttr ( index ) ; } } xmlAttrList . releaseAttrList ( attrListIndex ) ; if ( ! fSeenRootElement ) { fSeenRootElement = true ; if ( fDocumentImpl != null && fGrammarAccess && fGrammarResolver . size ( ) > 0 ) { if ( fDocumentType == null ) { String rootName = elementName ; String systemId = "" ; String publicId = "" ; fDocumentType = fDocumentImpl . createDocumentType ( rootName , publicId , systemId ) ; fDocument . appendChild ( fDocumentType ) ; } Enumeration schemas = fGrammarResolver . nameSpaceKeys ( ) ; Document schemaDocument = fGrammarResolver . getGrammar ( ( String ) schemas . nextElement ( ) ) . getGrammarDocument ( ) ; if ( schemaDocument != null ) { Element schema = schemaDocument . getDocumentElement ( ) ; XUtil . copyInto ( schema , fDocumentType ) ; } } } } } public void endElement ( QName elementQName ) throws Exception { if ( fDeferredDocumentImpl != null ) { fCurrentNodeIndex = fDeferredDocumentImpl . getParentNode ( fCurrentNodeIndex , false ) ; fWithinElement = false ; } else { fCurrentElementNode = fCurrentElementNode . getParentNode ( ) ; fWithinElement = false ; } } public void characters ( int dataIndex ) throws Exception { if ( fDeferredDocumentImpl != null ) { int text ; if ( fInCDATA ) { text = fDeferredDocumentImpl . createCDATASection ( dataIndex , false ) ; } else { text = fDeferredDocumentImpl . createTextNode ( dataIndex , false ) ; } fDeferredDocumentImpl . appendChild ( fCurrentNodeIndex , text ) ; } else { Text text ; if ( fInCDATA ) { text = fDocument . createCDATASection ( fStringPool . orphanString ( dataIndex ) ) ; } else { if ( fWithinElement && fCurrentElementNode . getNodeType ( ) == Node . ELEMENT_NODE ) { Node lastChild = fCurrentElementNode . getLastChild ( ) ; if ( lastChild != null && lastChild . getNodeType ( ) == Node . TEXT_NODE ) { ( ( Text ) lastChild ) . appendData ( fStringPool . orphanString ( dataIndex ) ) ; return ; } } text = fDocument . createTextNode ( fStringPool . orphanString ( dataIndex ) ) ; } fCurrentElementNode . appendChild ( text ) ; } } public void ignorableWhitespace ( int dataIndex ) throws Exception { if ( ! fIncludeIgnorableWhitespace ) { fStringPool . orphanString ( dataIndex ) ; return ; } if ( fDeferredDocumentImpl != null ) { int text ; if ( fInCDATA ) { text = fDeferredDocumentImpl . createCDATASection ( dataIndex , true ) ; } else { text = fDeferredDocumentImpl . createTextNode ( dataIndex , true ) ; } fDeferredDocumentImpl . appendChild ( fCurrentNodeIndex , text ) ; } else { Text text ; if ( fInCDATA ) { text = fDocument . createCDATASection ( fStringPool . orphanString ( dataIndex ) ) ; } else { if ( fWithinElement && fCurrentElementNode . getNodeType ( ) == Node . ELEMENT_NODE ) { Node lastChild = fCurrentElementNode . getLastChild ( ) ; if ( lastChild != null && lastChild . getNodeType ( ) == Node . TEXT_NODE ) { ( ( Text ) lastChild ) . appendData ( fStringPool . orphanString ( dataIndex ) ) ; return ; } } text = fDocument . createTextNode ( fStringPool . orphanString ( dataIndex ) ) ; } if ( fDocumentImpl != null ) { ( ( TextImpl ) text ) . setIgnorableWhitespace ( true ) ; } fCurrentElementNode . appendChild ( text ) ; } } public void processingInstruction ( int targetIndex , int dataIndex ) throws Exception { if ( fDeferredDocumentImpl != null ) { int pi = fDeferredDocumentImpl . createProcessingInstruction ( targetIndex , dataIndex ) ; fDeferredDocumentImpl . appendChild ( fCurrentNodeIndex , pi ) ; } else { String target = fStringPool . orphanString ( targetIndex ) ; String data = fStringPool . orphanString ( dataIndex ) ; ProcessingInstruction pi = fDocument . createProcessingInstruction ( target , data ) ; fCurrentElementNode . appendChild ( pi ) ; } } public void comment ( int dataIndex ) throws Exception { if ( fInDTD && ! fGrammarAccess ) { fStringPool . orphanString ( dataIndex ) ; } else { if ( fDeferredDocumentImpl != null ) { int comment = fDeferredDocumentImpl . createComment ( dataIndex ) ; fDeferredDocumentImpl . appendChild ( fCurrentNodeIndex , comment ) ; } else { Comment comment = fDocument . createComment ( fStringPool . orphanString ( dataIndex ) ) ; fCurrentElementNode . appendChild ( comment ) ; } } } public void characters ( char ch [ ] , int start , int length ) throws Exception { } public void ignorableWhitespace ( char ch [ ] , int start , int length ) throws Exception { } public void startCDATA ( ) throws Exception { fInCDATA = true ; } public void endCDATA ( ) throws Exception { fInCDATA = false ; } public void startEntityReference ( int entityName , int entityType , int entityContext ) throws Exception { if ( ! fCreateEntityReferenceNodes ) { return ; } if ( entityName == fAmpIndex || entityName == fGtIndex || entityName == fLtIndex || entityName == fAposIndex || entityName == fQuotIndex ) { return ; } if ( entityContext != XMLEntityHandler . ENTITYREF_IN_CONTENT ) { return ; } if ( fDeferredDocumentImpl != null ) { int entityRefIndex = fDeferredDocumentImpl . createEntityReference ( entityName ) ; fDeferredDocumentImpl . appendChild ( fCurrentNodeIndex , entityRefIndex ) ; fCurrentNodeIndex = entityRefIndex ; } else { EntityReference er = fDocument . createEntityReference ( fStringPool . toString ( entityName ) ) ; fCurrentElementNode . appendChild ( er ) ; fCurrentElementNode = er ; try { EntityReferenceImpl xer = ( EntityReferenceImpl ) er ; xer . setReadOnly ( false , false ) ; } catch ( Exception e ) { } } } public void endEntityReference ( int entityName , int entityType , int entityContext ) throws Exception { if ( ! fCreateEntityReferenceNodes ) { return ; } if ( entityName == fAmpIndex || entityName == fGtIndex || entityName == fLtIndex || entityName == fAposIndex || entityName == fQuotIndex ) { return ; } if ( entityContext != XMLEntityHandler . ENTITYREF_IN_CONTENT ) { return ; } if ( fDeferredDocumentImpl != null ) { String name = fStringPool . toString ( entityName ) ; int erChild = fCurrentNodeIndex ; fCurrentNodeIndex = fDeferredDocumentImpl . getParentNode ( erChild , false ) ; if ( fDeferredDocumentImpl . getNodeType ( erChild , false ) != Node . ENTITY_REFERENCE_NODE ) return ; erChild = fDeferredDocumentImpl . getLastChild ( erChild , false ) ; if ( fDocumentTypeIndex != - 1 ) { int entityDecl = fDeferredDocumentImpl . getLastChild ( fDocumentTypeIndex , false ) ; while ( entityDecl != - 1 ) { if ( fDeferredDocumentImpl . getNodeType ( entityDecl , false ) == Node . ENTITY_NODE && fDeferredDocumentImpl . getNodeNameString ( entityDecl , false ) . equals ( name ) ) { break ; } entityDecl = fDeferredDocumentImpl . getPrevSibling ( entityDecl , false ) ; } if ( entityDecl != - 1 && fDeferredDocumentImpl . getLastChild ( entityDecl , false ) == - 1 ) { fDeferredDocumentImpl . setAsLastChild ( entityDecl , erChild ) ; } } } else { Node erNode = fCurrentElementNode ; fCurrentElementNode = erNode . getParentNode ( ) ; try { EntityReferenceImpl xer = ( EntityReferenceImpl ) erNode ; xer . setReadOnly ( false , false ) ; if ( fDocumentImpl != null ) { NamedNodeMap entities = fDocumentType . getEntities ( ) ; String name = fStringPool . toString ( entityName ) ; Node entityNode = entities . getNamedItem ( name ) ; if ( entityNode == null || entityNode . hasChildNodes ( ) ) { return ; } EntityImpl entity = ( EntityImpl ) entityNode ; entity . setReadOnly ( false , false ) ; for ( Node child = erNode . getFirstChild ( ) ; child != null ; child = child . getNextSibling ( ) ) { Node childClone = child . cloneNode ( true ) ; entity . appendChild ( childClone ) ; } entity . setReadOnly ( true , true ) ; } } catch ( Exception e ) { } } } public void startDTD ( QName rootElement , int publicId , int systemId ) throws Exception { fInDTD = true ; if ( fDocumentImpl != null ) { String rootElementName = fStringPool . toString ( rootElement . rawname ) ; String publicString = fStringPool . toString ( publicId ) ; String systemString = fStringPool . toString ( systemId ) ; fDocumentType = fDocumentImpl . createDocumentType ( rootElementName , publicString , systemString ) ; fDocumentImpl . appendChild ( fDocumentType ) ; if ( fGrammarAccess ) { Element schema = fDocument . createElement ( "schema" ) ; schema . setAttribute ( "xmlns" , SchemaSymbols . URI_SCHEMAFORSCHEMA ) ; ( ( AttrImpl ) schema . getAttributeNode ( "xmlns" ) ) . setSpecified ( false ) ; schema . setAttribute ( "finalDefault" , "" ) ; ( ( AttrImpl ) schema . getAttributeNode ( "finalDefault" ) ) . setSpecified ( false ) ; schema . setAttribute ( "exactDefault" , "" ) ; ( ( AttrImpl ) schema . getAttributeNode ( "exactDefault" ) ) . setSpecified ( false ) ; fDocumentType . appendChild ( schema ) ; fCurrentElementNode = schema ; } } else if ( fDeferredDocumentImpl != null ) { fDocumentTypeIndex = fDeferredDocumentImpl . createDocumentType ( rootElement . rawname , publicId , systemId ) ; fDeferredDocumentImpl . appendChild ( fDocumentIndex , fDocumentTypeIndex ) ; if ( fGrammarAccess ) { int handle = fAttrList . startAttrList ( ) ; fAttrList . addAttr ( fStringPool . addSymbol ( "xmlns" ) , fStringPool . addString ( SchemaSymbols . URI_SCHEMAFORSCHEMA ) , fStringPool . addSymbol ( "CDATA" ) , false , false ) ; fAttrList . addAttr ( fStringPool . addSymbol ( "finalDefault" ) , fStringPool . addString ( "" ) , fStringPool . addSymbol ( "CDATA" ) , false , false ) ; fAttrList . addAttr ( fStringPool . addSymbol ( "exactDefault" ) , fStringPool . addString ( "" ) , fStringPool . addSymbol ( "CDATA" ) , false , false ) ; fAttrList . endAttrList ( ) ; int schemaIndex = fDeferredDocumentImpl . createElement ( fStringPool . addSymbol ( "schema" ) , fAttrList , handle ) ; fDeferredDocumentImpl . appendChild ( fDocumentTypeIndex , schemaIndex ) ; fCurrentNodeIndex = schemaIndex ; } } } public void internalSubset ( int internalSubset ) { if ( fDocumentImpl != null && fDocumentType != null ) { ( ( DocumentTypeImpl ) fDocumentType ) . setInternalSubset ( fStringPool . toString ( internalSubset ) ) ; } else if ( fDeferredDocumentImpl != null ) { fDeferredDocumentImpl . setInternalSubset ( fDocumentTypeIndex , internalSubset ) ; } } public void endDTD ( ) throws Exception { fInDTD = false ; if ( fGrammarAccess ) { if ( fDocumentImpl != null ) { fCurrentElementNode = fDocumentImpl ; } else if ( fDeferredDocumentImpl != null ) { fCurrentNodeIndex = 0 ; } } } public void elementDecl ( QName elementDecl , int contentSpecType , int contentSpecIndex , XMLContentSpec . Provider contentSpecProvider ) throws Exception { if ( DEBUG_ATTLIST_DECL ) { String contentModel = XMLContentSpec . toString ( contentSpecProvider , fStringPool , contentSpecIndex ) ; System . out . println ( "elementDecl(" + fStringPool . toString ( elementDecl . rawname ) + ", " + contentModel + ")" ) ; } if ( fGrammarAccess ) { if ( fDeferredDocumentImpl != null ) { int schemaIndex = getLastChildElement ( fDocumentTypeIndex , "schema" ) ; String elementName = fStringPool . toString ( elementDecl . rawname ) ; int elementIndex = getLastChildElement ( schemaIndex , "element" , "name" , elementName ) ; if ( elementIndex == - 1 ) { int handle = fAttrList . startAttrList ( ) ; fAttrList . addAttr ( fStringPool . addSymbol ( "name" ) , fStringPool . addString ( elementName ) , fStringPool . addSymbol ( "NMTOKEN" ) , true , false ) ; fAttrList . addAttr ( fStringPool . addSymbol ( "minOccurs" ) , fStringPool . addString ( "1" ) , fStringPool . addSymbol ( "NMTOKEN" ) , false , false ) ; fAttrList . addAttr ( fStringPool . addSymbol ( "nullable" ) , fStringPool . addString ( "false" ) , fStringPool . addSymbol ( "ENUMERATION" ) , false , false ) ; fAttrList . addAttr ( fStringPool . addSymbol ( "abstract" ) , fStringPool . addString ( "false" ) , fStringPool . addSymbol ( "ENUMERATION" ) , false , false ) ; fAttrList . addAttr ( fStringPool . addSymbol ( "final" ) , fStringPool . addString ( "false" ) , fStringPool . addSymbol ( "ENUMERATION" ) , false , false ) ; fAttrList . endAttrList ( ) ; elementIndex = fDeferredDocumentImpl . createElement ( fStringPool . addSymbol ( "element" ) , fAttrList , handle ) ; fDeferredDocumentImpl . appendChild ( schemaIndex , elementIndex ) ; } int typeIndex = getLastChildElement ( elementIndex , "complexType" ) ; if ( typeIndex == - 1 && contentSpecType != XMLElementDecl . TYPE_MIXED ) { typeIndex = fDeferredDocumentImpl . createElement ( fStringPool . addSymbol ( "complexType" ) , null , - 1 ) ; fDeferredDocumentImpl . insertBefore ( elementIndex , typeIndex , getFirstChildElement ( elementIndex ) ) ; } switch ( contentSpecType ) { case XMLElementDecl . TYPE_EMPTY : { int attributeIndex = fDeferredDocumentImpl . createAttribute ( fStringPool . addSymbol ( "content" ) , fStringPool . addString ( "empty" ) , true ) ; fDeferredDocumentImpl . setAttributeNode ( typeIndex , attributeIndex ) ; break ; } case XMLElementDecl . TYPE_ANY : { int anyIndex = fDeferredDocumentImpl . createElement ( fStringPool . addSymbol ( "any" ) , null , - 1 ) ; fDeferredDocumentImpl . insertBefore ( typeIndex , anyIndex , getFirstChildElement ( typeIndex ) ) ; break ; } case XMLElementDecl . TYPE_MIXED : { XMLContentSpec contentSpec = new XMLContentSpec ( ) ; contentSpecProvider . getContentSpec ( contentSpecIndex , contentSpec ) ; contentSpecIndex = contentSpec . value ; if ( contentSpecIndex == - 1 ) { int attributeIndex = fDeferredDocumentImpl . createAttribute ( fStringPool . addSymbol ( "type" ) , fStringPool . addString ( "string" ) , true ) ; fDeferredDocumentImpl . setAttributeNode ( elementIndex , attributeIndex ) ; } else { if ( typeIndex == - 1 ) { typeIndex = fDeferredDocumentImpl . createElement ( fStringPool . addSymbol ( "complexType" ) , null , - 1 ) ; fDeferredDocumentImpl . insertBefore ( elementIndex , typeIndex , getFirstChildElement ( elementIndex ) ) ; } int attributeIndex = fDeferredDocumentImpl . createAttribute ( fStringPool . addSymbol ( "content" ) , fStringPool . addString ( "mixed" ) , true ) ; fDeferredDocumentImpl . setAttributeNode ( typeIndex , attributeIndex ) ; int handle = fAttrList . startAttrList ( ) ; fAttrList . addAttr ( fStringPool . addSymbol ( "minOccurs" ) , fStringPool . addString ( "0" ) , fStringPool . addSymbol ( "NMTOKEN" ) , true , false ) ; fAttrList . addAttr ( fStringPool . addSymbol ( "maxOccurs" ) , fStringPool . addString ( "unbounded" ) , fStringPool . addSymbol ( "CDATA" ) , true , false ) ; fAttrList . endAttrList ( ) ; int choiceIndex = fDeferredDocumentImpl . createElement ( fStringPool . addSymbol ( "choice" ) , fAttrList , handle ) ; fDeferredDocumentImpl . appendChild ( typeIndex , choiceIndex ) ; while ( contentSpecIndex != - 1 ) { contentSpecProvider . getContentSpec ( contentSpecIndex , contentSpec ) ; int type = contentSpec . type ; int left = contentSpec . value ; int right = contentSpec . otherValue ; if ( type == XMLContentSpec . CONTENTSPECNODE_LEAF ) { break ; } contentSpecProvider . getContentSpec ( right , contentSpec ) ; handle = fAttrList . startAttrList ( ) ; fAttrList . addAttr ( fStringPool . addSymbol ( "ref" ) , fStringPool . addString ( fStringPool . toString ( contentSpec . value ) ) , fStringPool . addSymbol ( "NMTOKEN" ) , true , false ) ; fAttrList . endAttrList ( ) ; int rightIndex = fDeferredDocumentImpl . createElement ( fStringPool . addSymbol ( "element" ) , fAttrList , handle ) ; int refIndex = getFirstChildElement ( choiceIndex ) ; fDeferredDocumentImpl . insertBefore ( choiceIndex , rightIndex , refIndex ) ; contentSpecIndex = left ; } } break ; } case XMLElementDecl . TYPE_CHILDREN : { int attributeIndex = fDeferredDocumentImpl . createAttribute ( fStringPool . addSymbol ( "content" ) , fStringPool . addString ( "elementOnly" ) , true ) ; fDeferredDocumentImpl . setAttributeNode ( typeIndex , attributeIndex ) ; int children = createChildren ( contentSpecProvider , contentSpecIndex , new XMLContentSpec ( ) , fDeferredDocumentImpl , - 1 ) ; fDeferredDocumentImpl . insertBefore ( typeIndex , children , getFirstChildElement ( typeIndex ) ) ; break ; } } } else if ( fDocumentImpl != null ) { Element schema = XUtil . getLastChildElement ( fDocumentType , "schema" ) ; String elementName = fStringPool . toString ( elementDecl . rawname ) ; Element element = XUtil . getLastChildElement ( schema , "element" , "name" , elementName ) ; if ( element == null ) { element = fDocumentImpl . createElement ( "element" ) ; element . setAttribute ( "name" , elementName ) ; element . setAttribute ( "minOccurs" , "1" ) ; ( ( AttrImpl ) element . getAttributeNode ( "minOccurs" ) ) . setSpecified ( false ) ; element . setAttribute ( "nullable" , "false" ) ; ( ( AttrImpl ) element . getAttributeNode ( "nullable" ) ) . setSpecified ( false ) ; element . setAttribute ( "abstract" , "false" ) ; ( ( AttrImpl ) element . getAttributeNode ( "abstract" ) ) . setSpecified ( false ) ; element . setAttribute ( "final" , "false" ) ; ( ( AttrImpl ) element . getAttributeNode ( "final" ) ) . setSpecified ( false ) ; schema . appendChild ( element ) ; } Element type = XUtil . getLastChildElement ( element , "complexType" ) ; if ( type == null && contentSpecType != XMLElementDecl . TYPE_MIXED ) { type = fDocumentImpl . createElement ( "complexType" ) ; element . insertBefore ( type , XUtil . getFirstChildElement ( element ) ) ; } switch ( contentSpecType ) { case XMLElementDecl . TYPE_EMPTY : { type . setAttribute ( "content" , "empty" ) ; break ; } case XMLElementDecl . TYPE_ANY : { Element any = fDocumentImpl . createElement ( "any" ) ; type . insertBefore ( any , XUtil . getFirstChildElement ( type ) ) ; break ; } case XMLElementDecl . TYPE_MIXED : { XMLContentSpec contentSpec = new XMLContentSpec ( ) ; contentSpecProvider . getContentSpec ( contentSpecIndex , contentSpec ) ; contentSpecIndex = contentSpec . value ; if ( contentSpecIndex == - 1 ) { element . setAttribute ( "type" , "string" ) ; } else { if ( type == null ) { type = fDocumentImpl . createElement ( "complexType" ) ; element . insertBefore ( type , XUtil . getFirstChildElement ( element ) ) ; } type . setAttribute ( "content" , "mixed" ) ; Element choice = fDocumentImpl . createElement ( "choice" ) ; choice . setAttribute ( "minOccurs" , "0" ) ; choice . setAttribute ( "maxOccurs" , "unbounded" ) ; type . appendChild ( choice ) ; while ( contentSpecIndex != - 1 ) { contentSpecProvider . getContentSpec ( contentSpecIndex , contentSpec ) ; int cstype = contentSpec . type ; int csleft = contentSpec . value ; int csright = contentSpec . otherValue ; if ( cstype == XMLContentSpec . CONTENTSPECNODE_LEAF ) { break ; } contentSpecProvider . getContentSpec ( csright , contentSpec ) ; Element right = fDocumentImpl . createElement ( "element" ) ; right . setAttribute ( "ref" , fStringPool . toString ( contentSpec . value ) ) ; Element ref = XUtil . getFirstChildElement ( choice ) ; choice . insertBefore ( right , ref ) ; contentSpecIndex = csleft ; } } break ; } case XMLElementDecl . TYPE_CHILDREN : { type . setAttribute ( "content" , "elementOnly" ) ; Element children = createChildren ( contentSpecProvider , contentSpecIndex , new XMLContentSpec ( ) , fDocumentImpl , null ) ; type . insertBefore ( children , XUtil . getFirstChildElement ( type ) ) ; break ; } } } } } public void attlistDecl ( QName elementDecl , QName attributeDecl , int attType , boolean attList , String enumString , int attDefaultType , int attDefaultValue ) throws Exception { if ( DEBUG_ATTLIST_DECL ) { System . out . println ( "attlistDecl(" + fStringPool . toString ( elementDecl . rawname ) + ", " + fStringPool . toString ( attributeDecl . rawname ) + ", " + fStringPool . toString ( attType ) + ", " + enumString + ", " + fStringPool . toString ( attDefaultType ) + ", " + fStringPool . toString ( attDefaultValue ) + ")" ) ; } if ( fDeferredDocumentImpl != null ) { if ( attDefaultValue != - 1 ) { if ( DEBUG_ATTLIST_DECL ) { System . out . println ( "  adding default attribute value: " + fStringPool . toString ( attDefaultValue ) ) ; } int elementDefIndex = fDeferredDocumentImpl . lookupElementDefinition ( elementDecl . rawname ) ; if ( elementDefIndex == - 1 ) { elementDefIndex = fDeferredDocumentImpl . createElementDefinition ( elementDecl . rawname ) ; fDeferredDocumentImpl . appendChild ( fDocumentTypeIndex , elementDefIndex ) ; } int attrIndex = fDeferredDocumentImpl . createAttribute ( attributeDecl . rawname , attributeDecl . uri , attDefaultValue , false ) ; fDeferredDocumentImpl . appendChild ( elementDefIndex , attrIndex ) ; } if ( fGrammarAccess ) { int schemaIndex = getLastChildElement ( fDocumentTypeIndex , "schema" ) ; String elementName = fStringPool . toString ( elementDecl . rawname ) ; int elementIndex = getLastChildElement ( schemaIndex , "element" , "name" , elementName ) ; if ( elementIndex == - 1 ) { int handle = fAttrList . startAttrList ( ) ; fAttrList . addAttr ( fStringPool . addSymbol ( "name" ) , fStringPool . addString ( elementName ) , fStringPool . addSymbol ( "NMTOKEN" ) , true , false ) ; fAttrList . endAttrList ( ) ; elementIndex = fDeferredDocumentImpl . createElement ( fStringPool . addSymbol ( "element" ) , fAttrList , handle ) ; fDeferredDocumentImpl . appendChild ( schemaIndex , elementIndex ) ; } int typeIndex = getLastChildElement ( elementIndex , "complexType" ) ; if ( typeIndex == - 1 ) { typeIndex = fDeferredDocumentImpl . createElement ( fStringPool . addSymbol ( "complexType" ) , null , - 1 ) ; fDeferredDocumentImpl . insertBefore ( elementIndex , typeIndex , getLastChildElement ( elementIndex ) ) ; } String attributeName = fStringPool . toString ( attributeDecl . rawname ) ; int attributeIndex = getLastChildElement ( elementIndex , "attribute" , "name" , attributeName ) ; if ( attributeIndex == - 1 ) { int handle = fAttrList . startAttrList ( ) ; fAttrList . addAttr ( fStringPool . addSymbol ( "name" ) , fStringPool . addString ( attributeName ) , fStringPool . addSymbol ( "NMTOKEN" ) , true , false ) ; fAttrList . addAttr ( fStringPool . addSymbol ( "maxOccurs" ) , fStringPool . addString ( "1" ) , fStringPool . addSymbol ( "CDATA" ) , false , false ) ; fAttrList . endAttrList ( ) ; attributeIndex = fDeferredDocumentImpl . createElement ( fStringPool . addSymbol ( "attribute" ) , fAttrList , handle ) ; fDeferredDocumentImpl . appendChild ( typeIndex , attributeIndex ) ; if ( attType == XMLAttributeDecl . TYPE_ENUMERATION ) { handle = fAttrList . startAttrList ( ) ; fAttrList . addAttr ( fStringPool . addSymbol ( "base" ) , fStringPool . addString ( "NMTOKEN" ) , fStringPool . addSymbol ( "NMTOKEN" ) , true , false ) ; fAttrList . endAttrList ( ) ; int simpleTypeIndex = fDeferredDocumentImpl . createElement ( fStringPool . addSymbol ( "simpleType" ) , fAttrList , handle ) ; fDeferredDocumentImpl . appendChild ( attributeIndex , simpleTypeIndex ) ; String tokenizerString = enumString . substring ( 1 , enumString . length ( ) - 1 ) ; StringTokenizer tokenizer = new StringTokenizer ( tokenizerString , "|" ) ; while ( tokenizer . hasMoreTokens ( ) ) { handle = fAttrList . startAttrList ( ) ; fAttrList . addAttr ( fStringPool . addSymbol ( "value" ) , fStringPool . addString ( tokenizer . nextToken ( ) ) , fStringPool . addSymbol ( "CDATA" ) , true , false ) ; fAttrList . endAttrList ( ) ; int enumerationIndex = fDeferredDocumentImpl . createElement ( fStringPool . addSymbol ( "enumeration" ) , fAttrList , handle ) ; fDeferredDocumentImpl . appendChild ( simpleTypeIndex , enumerationIndex ) ; } } else { int typeNameIndex = - 1 ; switch ( attType ) { case XMLAttributeDecl . TYPE_ENTITY : { typeNameIndex = fStringPool . addString ( attList ? "ENTITIES" : "ENTITY" ) ; break ; } case XMLAttributeDecl . TYPE_ID : { typeNameIndex = fStringPool . addString ( "ID" ) ; break ; } case XMLAttributeDecl . TYPE_IDREF : { typeNameIndex = fStringPool . addString ( attList ? "IDREFS" : "IDREF" ) ; break ; } case XMLAttributeDecl . TYPE_NMTOKEN : { typeNameIndex = fStringPool . addString ( attList ? "NMTOKENS" : "NMTOKEN" ) ; break ; } case XMLAttributeDecl . TYPE_NOTATION : { typeNameIndex = fStringPool . addString ( "NOTATION" ) ; break ; } case XMLAttributeDecl . TYPE_CDATA : default : { typeNameIndex = fStringPool . addString ( "string" ) ; break ; } } int attrIndex = fDeferredDocumentImpl . createAttribute ( fStringPool . addSymbol ( "type" ) , typeNameIndex , true ) ; fDeferredDocumentImpl . setAttributeNode ( attributeIndex , attrIndex ) ; } boolean fixed = false ; switch ( attDefaultType ) { case XMLAttributeDecl . DEFAULT_TYPE_REQUIRED : { int useAttrIndex = fDeferredDocumentImpl . createAttribute ( fStringPool . addSymbol ( "use" ) , fStringPool . addString ( "required" ) , true ) ; fDeferredDocumentImpl . setAttributeNode ( attributeIndex , useAttrIndex ) ; break ; } case XMLAttributeDecl . DEFAULT_TYPE_FIXED : { fixed = true ; int useAttrIndex = fDeferredDocumentImpl . createAttribute ( fStringPool . addSymbol ( "use" ) , fStringPool . addString ( "fixed" ) , true ) ; fDeferredDocumentImpl . setAttributeNode ( attributeIndex , useAttrIndex ) ; break ; } } if ( attDefaultValue != - 1 ) { if ( ! fixed ) { int useAttrIndex = fDeferredDocumentImpl . createAttribute ( fStringPool . addSymbol ( "use" ) , fStringPool . addString ( "default" ) , true ) ; fDeferredDocumentImpl . setAttributeNode ( attributeIndex , useAttrIndex ) ; } int valueAttrIndex = fDeferredDocumentImpl . createAttribute ( fStringPool . addSymbol ( "value" ) , attDefaultValue , true ) ; fDeferredDocumentImpl . setAttributeNode ( attributeIndex , valueAttrIndex ) ; } } } } else if ( fDocumentImpl != null ) { if ( attDefaultValue != - 1 ) { if ( DEBUG_ATTLIST_DECL ) { System . out . println ( "  adding default attribute value: " + fStringPool . toString ( attDefaultValue ) ) ; } String elementName = fStringPool . toString ( elementDecl . rawname ) ; NamedNodeMap elements = ( ( DocumentTypeImpl ) fDocumentType ) . getElements ( ) ; ElementDefinitionImpl elementDef = ( ElementDefinitionImpl ) elements . getNamedItem ( elementName ) ; if ( elementDef == null ) { elementDef = fDocumentImpl . createElementDefinition ( elementName ) ; ( ( DocumentTypeImpl ) fDocumentType ) . getElements ( ) . setNamedItem ( elementDef ) ; } String attrName = fStringPool . toString ( attributeDecl . rawname ) ; String attrValue = fStringPool . toString ( attDefaultValue ) ; boolean nsEnabled = false ; try { nsEnabled = getNamespaces ( ) ; } catch ( SAXException s ) { } AttrImpl attr ; if ( nsEnabled ) { String namespaceURI = fStringPool . toString ( attributeDecl . uri ) ; String prefix = fStringPool . toString ( attributeDecl . prefix ) ; if ( namespaceURI == null ) { if ( prefix != null ) { if ( prefix . equals ( "xmlns" ) ) { namespaceURI = "http://www.w3.org/2000/xmlns/" ; } } else if ( attrName . equals ( "xmlns" ) ) { namespaceURI = "http://www.w3.org/2000/xmlns/" ; } } attr = ( AttrImpl ) fDocumentImpl . createAttributeNS ( namespaceURI , attrName ) ; } else { attr = ( AttrImpl ) fDocumentImpl . createAttribute ( attrName ) ; } attr . setValue ( attrValue ) ; attr . setSpecified ( false ) ; if ( nsEnabled ) { elementDef . getAttributes ( ) . setNamedItemNS ( attr ) ; } else { elementDef . getAttributes ( ) . setNamedItem ( attr ) ; } } try { if ( fGrammarAccess ) { Element schema = XUtil . getLastChildElement ( fDocumentType , "schema" ) ; String elementName = fStringPool . toString ( elementDecl . rawname ) ; Element element = XUtil . getLastChildElement ( schema , "element" , "name" , elementName ) ; if ( element == null ) { element = fDocumentImpl . createElement ( "element" ) ; element . setAttribute ( "name" , elementName ) ; schema . appendChild ( element ) ; } Element type = XUtil . getLastChildElement ( element , "complexType" ) ; if ( type == null ) { type = fDocumentImpl . createElement ( "complexType" ) ; element . insertBefore ( type , XUtil . getLastChildElement ( element ) ) ; } String attributeName = fStringPool . toString ( attributeDecl . rawname ) ; Element attribute = XUtil . getLastChildElement ( element , "attribute" , "name" , attributeName ) ; if ( attribute == null ) { attribute = fDocumentImpl . createElement ( "attribute" ) ; attribute . setAttribute ( "name" , attributeName ) ; attribute . setAttribute ( "maxOccurs" , "1" ) ; ( ( AttrImpl ) attribute . getAttributeNode ( "maxOccurs" ) ) . setSpecified ( false ) ; type . appendChild ( attribute ) ; if ( attType == XMLAttributeDecl . TYPE_ENUMERATION ) { Element simpleType = fDocumentImpl . createElement ( "simpleType" ) ; simpleType . setAttribute ( "base" , "NMTOKEN" ) ; attribute . appendChild ( simpleType ) ; String tokenizerString = enumString . substring ( 1 , enumString . length ( ) - 1 ) ; StringTokenizer tokenizer = new StringTokenizer ( tokenizerString , "|" ) ; while ( tokenizer . hasMoreTokens ( ) ) { Element enumeration = fDocumentImpl . createElement ( "enumeration" ) ; enumeration . setAttribute ( "value" , tokenizer . nextToken ( ) ) ; simpleType . appendChild ( enumeration ) ; } } else { String typeName = null ; switch ( attType ) { case XMLAttributeDecl . TYPE_ENTITY : { typeName = attList ? "ENTITIES" : "ENTITY" ; break ; } case XMLAttributeDecl . TYPE_ID : { typeName = "ID" ; break ; } case XMLAttributeDecl . TYPE_IDREF : { typeName = attList ? "IDREFS" : "IDREF" ; break ; } case XMLAttributeDecl . TYPE_NMTOKEN : { typeName = attList ? "NMTOKENS" : "NMTOKEN" ; break ; } case XMLAttributeDecl . TYPE_NOTATION : { typeName = "NOTATION" ; break ; } case XMLAttributeDecl . TYPE_CDATA : default : { typeName = "string" ; break ; } } attribute . setAttribute ( "type" , typeName ) ; } boolean fixed = false ; switch ( attDefaultType ) { case XMLAttributeDecl . DEFAULT_TYPE_REQUIRED : { attribute . setAttribute ( "use" , "required" ) ; break ; } case XMLAttributeDecl . DEFAULT_TYPE_FIXED : { attribute . setAttribute ( "use" , "fixed" ) ; fixed = true ; break ; } } if ( attDefaultValue != - 1 ) { if ( ! fixed ) { attribute . setAttribute ( "use" , "default" ) ; } attribute . setAttribute ( "value" , fStringPool . toString ( attDefaultValue ) ) ; } } } } catch ( Exception e ) { e . printStackTrace ( System . err ) ; } } } public void internalPEDecl ( int entityNameIndex , int entityValueIndex ) throws Exception { if ( fDeferredDocumentImpl != null ) { if ( fGrammarAccess ) { StringBuffer str = new StringBuffer ( ) ; str . append ( "<!ENTITY % " ) ; str . append ( fStringPool . toString ( entityNameIndex ) ) ; str . append ( " \"" ) ; str . append ( fStringPool . toString ( entityValueIndex ) ) ; str . append ( "\">" ) ; int commentIndex = fStringPool . addString ( str . toString ( ) ) ; int internalPEEntityIndex = fDeferredDocumentImpl . createComment ( commentIndex ) ; int schemaIndex = getFirstChildElement ( fDocumentTypeIndex , "schema" ) ; fDeferredDocumentImpl . appendChild ( schemaIndex , internalPEEntityIndex ) ; } } else if ( fDocumentImpl != null ) { if ( fGrammarAccess ) { StringBuffer str = new StringBuffer ( ) ; str . append ( "<!ENTITY % " ) ; str . append ( fStringPool . toString ( entityNameIndex ) ) ; str . append ( " \"" ) ; str . append ( fStringPool . orphanString ( entityValueIndex ) ) ; str . append ( "\">" ) ; Node internalPEEntity = fDocumentImpl . createComment ( str . toString ( ) ) ; Node schema = XUtil . getFirstChildElement ( fDocumentType , "schema" ) ; schema . appendChild ( internalPEEntity ) ; } } else { fStringPool . orphanString ( entityValueIndex ) ; } } public void externalPEDecl ( int entityNameIndex , int publicIdIndex , int systemIdIndex ) throws Exception { if ( fDeferredDocumentImpl != null ) { if ( fGrammarAccess ) { StringBuffer str = new StringBuffer ( ) ; str . append ( "<!ENTITY " ) ; str . append ( fStringPool . toString ( entityNameIndex ) ) ; str . append ( ' ' ) ; if ( publicIdIndex != - 1 ) { str . append ( "PUBLIC \"" ) ; str . append ( fStringPool . toString ( publicIdIndex ) ) ; str . append ( '"' ) ; if ( systemIdIndex != - 1 ) { str . append ( " \"" ) ; str . append ( fStringPool . toString ( systemIdIndex ) ) ; str . append ( '"' ) ; } } else if ( systemIdIndex != - 1 ) { str . append ( "SYSTEM \"" ) ; str . append ( fStringPool . toString ( systemIdIndex ) ) ; str . append ( '"' ) ; } str . append ( '>' ) ; int commentIndex = fStringPool . addString ( str . toString ( ) ) ; int externalPEEntityIndex = fDeferredDocumentImpl . createComment ( commentIndex ) ; int schemaIndex = getFirstChildElement ( fDocumentTypeIndex , "schema" ) ; fDeferredDocumentImpl . appendChild ( schemaIndex , externalPEEntityIndex ) ; } } else if ( fDocumentImpl != null ) { if ( fGrammarAccess ) { StringBuffer str = new StringBuffer ( ) ; str . append ( "<!ENTITY " ) ; str . append ( fStringPool . toString ( entityNameIndex ) ) ; str . append ( ' ' ) ; if ( publicIdIndex != - 1 ) { str . append ( "PUBLIC \"" ) ; str . append ( fStringPool . toString ( publicIdIndex ) ) ; str . append ( '"' ) ; if ( systemIdIndex != - 1 ) { str . append ( " \"" ) ; str . append ( fStringPool . toString ( systemIdIndex ) ) ; str . append ( '"' ) ; } } else if ( systemIdIndex != - 1 ) { str . append ( "SYSTEM \"" ) ; str . append ( fStringPool . toString ( systemIdIndex ) ) ; str . append ( '"' ) ; } str . append ( '>' ) ; Node externalPEEntity = fDocumentImpl . createComment ( str . toString ( ) ) ; Node schema = XUtil . getFirstChildElement ( fDocumentType , "schema" ) ; schema . appendChild ( externalPEEntity ) ; } } } public void internalEntityDecl ( int entityNameIndex , int entityValueIndex ) throws Exception { if ( fDeferredDocumentImpl != null ) { if ( fDocumentTypeIndex == - 1 ) return ; int newEntityIndex = fDeferredDocumentImpl . createEntity ( entityNameIndex , - 1 , - 1 , - 1 ) ; fDeferredDocumentImpl . appendChild ( fDocumentTypeIndex , newEntityIndex ) ; if ( fGrammarAccess ) { StringBuffer str = new StringBuffer ( ) ; str . append ( "<!ENTITY " ) ; str . append ( fStringPool . toString ( entityNameIndex ) ) ; str . append ( " \"" ) ; str . append ( fStringPool . toString ( entityValueIndex ) ) ; str . append ( "\">" ) ; int commentIndex = fStringPool . addString ( str . toString ( ) ) ; int textEntityIndex = fDeferredDocumentImpl . createComment ( commentIndex ) ; int schemaIndex = getFirstChildElement ( fDocumentTypeIndex , "schema" ) ; fDeferredDocumentImpl . appendChild ( schemaIndex , textEntityIndex ) ; } } else if ( fDocumentImpl != null ) { if ( fDocumentType == null ) return ; String entityName = fStringPool . toString ( entityNameIndex ) ; Entity entity = fDocumentImpl . createEntity ( entityName ) ; fDocumentType . getEntities ( ) . setNamedItem ( entity ) ; if ( fGrammarAccess ) { StringBuffer str = new StringBuffer ( ) ; str . append ( "<!ENTITY " ) ; str . append ( fStringPool . toString ( entityNameIndex ) ) ; str . append ( " \"" ) ; str . append ( fStringPool . toString ( entityValueIndex ) ) ; str . append ( "\">" ) ; Node textEntity = fDocumentImpl . createComment ( str . toString ( ) ) ; Node schema = XUtil . getFirstChildElement ( fDocumentType , "schema" ) ; schema . appendChild ( textEntity ) ; } } } public void externalEntityDecl ( int entityNameIndex , int publicIdIndex , int systemIdIndex ) throws Exception { if ( fDeferredDocumentImpl != null ) { int newEntityIndex = fDeferredDocumentImpl . createEntity ( entityNameIndex , publicIdIndex , systemIdIndex , - 1 ) ; fDeferredDocumentImpl . appendChild ( fDocumentTypeIndex , newEntityIndex ) ; if ( fGrammarAccess ) { StringBuffer str = new StringBuffer ( ) ; str . append ( "<!ENTITY " ) ; str . append ( fStringPool . toString ( entityNameIndex ) ) ; str . append ( ' ' ) ; if ( publicIdIndex != - 1 ) { str . append ( "PUBLIC \"" ) ; str . append ( fStringPool . toString ( publicIdIndex ) ) ; str . append ( '"' ) ; if ( systemIdIndex != - 1 ) { str . append ( " \"" ) ; str . append ( fStringPool . toString ( systemIdIndex ) ) ; str . append ( '"' ) ; } } else if ( systemIdIndex != - 1 ) { str . append ( "SYSTEM \"" ) ; str . append ( fStringPool . toString ( systemIdIndex ) ) ; str . append ( '"' ) ; } str . append ( '>' ) ; int commentIndex = fStringPool . addString ( str . toString ( ) ) ; int externalEntityIndex = fDeferredDocumentImpl . createComment ( commentIndex ) ; int schemaIndex = getFirstChildElement ( fDocumentTypeIndex , "schema" ) ; fDeferredDocumentImpl . appendChild ( schemaIndex , externalEntityIndex ) ; } } else if ( fDocumentImpl != null ) { String entityName = fStringPool . toString ( entityNameIndex ) ; String publicId = fStringPool . toString ( publicIdIndex ) ; String systemId = fStringPool . toString ( systemIdIndex ) ; EntityImpl entity = ( EntityImpl ) fDocumentImpl . createEntity ( entityName ) ; if ( publicIdIndex != - 1 ) { entity . setPublicId ( publicId ) ; } entity . setSystemId ( systemId ) ; fDocumentType . getEntities ( ) . setNamedItem ( entity ) ; if ( fGrammarAccess ) { StringBuffer str = new StringBuffer ( ) ; str . append ( "<!ENTITY " ) ; str . append ( fStringPool . toString ( entityNameIndex ) ) ; str . append ( ' ' ) ; if ( publicIdIndex != - 1 ) { str . append ( "PUBLIC \"" ) ; str . append ( fStringPool . toString ( publicIdIndex ) ) ; str . append ( '"' ) ; if ( systemIdIndex != - 1 ) { str . append ( " \"" ) ; str . append ( fStringPool . toString ( systemIdIndex ) ) ; str . append ( '"' ) ; } } else if ( systemIdIndex != - 1 ) { str . append ( "SYSTEM \"" ) ; str . append ( fStringPool . toString ( systemIdIndex ) ) ; str . append ( '"' ) ; } str . append ( '>' ) ; Node externalEntity = fDocumentImpl . createComment ( str . toString ( ) ) ; Node schema = XUtil . getFirstChildElement ( fDocumentType , "schema" ) ; schema . appendChild ( externalEntity ) ; } } } public void unparsedEntityDecl ( int entityNameIndex , int publicIdIndex , int systemIdIndex , int notationNameIndex ) throws Exception { if ( fDeferredDocumentImpl != null ) { int newEntityIndex = fDeferredDocumentImpl . createEntity ( entityNameIndex , publicIdIndex , systemIdIndex , notationNameIndex ) ; fDeferredDocumentImpl . appendChild ( fDocumentTypeIndex , newEntityIndex ) ; if ( fGrammarAccess ) { StringBuffer str = new StringBuffer ( ) ; str . append ( "<!ENTITY " ) ; str . append ( fStringPool . toString ( entityNameIndex ) ) ; str . append ( ' ' ) ; if ( publicIdIndex != - 1 ) { str . append ( "PUBLIC \"" ) ; str . append ( fStringPool . toString ( publicIdIndex ) ) ; str . append ( '"' ) ; if ( systemIdIndex != - 1 ) { str . append ( " \"" ) ; str . append ( fStringPool . toString ( systemIdIndex ) ) ; str . append ( '"' ) ; } } else if ( systemIdIndex != - 1 ) { str . append ( "SYSTEM \"" ) ; str . append ( fStringPool . toString ( systemIdIndex ) ) ; str . append ( '"' ) ; } str . append ( " NDATA " ) ; str . append ( fStringPool . toString ( notationNameIndex ) ) ; str . append ( '>' ) ; int commentIndex = fStringPool . addString ( str . toString ( ) ) ; int unparsedEntityIndex = fDeferredDocumentImpl . createComment ( commentIndex ) ; int schemaIndex = getFirstChildElement ( fDocumentTypeIndex , "schema" ) ; fDeferredDocumentImpl . appendChild ( schemaIndex , unparsedEntityIndex ) ; } } else if ( fDocumentImpl != null ) { String entityName = fStringPool . toString ( entityNameIndex ) ; String publicId = fStringPool . toString ( publicIdIndex ) ; String systemId = fStringPool . toString ( systemIdIndex ) ; String notationName = fStringPool . toString ( notationNameIndex ) ; EntityImpl entity = ( EntityImpl ) fDocumentImpl . createEntity ( entityName ) ; if ( publicIdIndex != - 1 ) { entity . setPublicId ( publicId ) ; } entity . setSystemId ( systemId ) ; entity . setNotationName ( notationName ) ; fDocumentType . getEntities ( ) . setNamedItem ( entity ) ; if ( fGrammarAccess ) { StringBuffer str = new StringBuffer ( ) ; str . append ( "<!ENTITY " ) ; str . append ( fStringPool . toString ( entityNameIndex ) ) ; str . append ( ' ' ) ; if ( publicIdIndex != - 1 ) { str . append ( "PUBLIC \"" ) ; str . append ( fStringPool . toString ( publicIdIndex ) ) ; str . append ( '"' ) ; if ( systemIdIndex != - 1 ) { str . append ( " \"" ) ; str . append ( fStringPool . toString ( systemIdIndex ) ) ; str . append ( '"' ) ; } } else if ( systemIdIndex != - 1 ) { str . append ( "SYSTEM \"" ) ; str . append ( fStringPool . toString ( systemIdIndex ) ) ; str . append ( '"' ) ; } str . append ( " NDATA " ) ; str . append ( fStringPool . toString ( notationNameIndex ) ) ; str . append ( '>' ) ; Node unparsedEntity = fDocumentImpl . createComment ( str . toString ( ) ) ; Node schema = XUtil . getFirstChildElement ( fDocumentType , "schema" ) ; schema . appendChild ( unparsedEntity ) ; } } } public void notationDecl ( int notationNameIndex , int publicIdIndex , int systemIdIndex ) throws Exception { if ( fDeferredDocumentImpl != null ) { int newNotationIndex = fDeferredDocumentImpl . createNotation ( notationNameIndex , publicIdIndex , systemIdIndex ) ; fDeferredDocumentImpl . appendChild ( fDocumentTypeIndex , newNotationIndex ) ; if ( fGrammarAccess ) { int schemaIndex = getLastChildElement ( fDocumentTypeIndex , "schema" ) ; String notationName = fStringPool . toString ( notationNameIndex ) ; int notationIndex = getLastChildElement ( schemaIndex , "notation" , "name" , notationName ) ; if ( notationIndex == - 1 ) { int handle = fAttrList . startAttrList ( ) ; fAttrList . addAttr ( fStringPool . addSymbol ( "name" ) , fStringPool . addString ( notationName ) , fStringPool . addSymbol ( "NMTOKEN" ) , true , false ) ; if ( publicIdIndex != - 1 ) { fAttrList . addAttr ( fStringPool . addSymbol ( "public" ) , publicIdIndex , fStringPool . addSymbol ( "CDATA" ) , true , false ) ; } if ( systemIdIndex != - 1 ) { fAttrList . addAttr ( fStringPool . addSymbol ( "system" ) , systemIdIndex , fStringPool . addSymbol ( "CDATA" ) , true , false ) ; } fAttrList . endAttrList ( ) ; notationIndex = fDeferredDocumentImpl . createElement ( fStringPool . addSymbol ( "notation" ) , fAttrList , handle ) ; fDeferredDocumentImpl . appendChild ( schemaIndex , notationIndex ) ; } } } else if ( fDocumentImpl != null ) { String notationName = fStringPool . toString ( notationNameIndex ) ; String publicId = fStringPool . toString ( publicIdIndex ) ; String systemId = fStringPool . toString ( systemIdIndex ) ; NotationImpl notationImpl = ( NotationImpl ) fDocumentImpl . createNotation ( notationName ) ; notationImpl . setPublicId ( publicId ) ; if ( systemIdIndex != - 1 ) { notationImpl . setSystemId ( systemId ) ; } fDocumentType . getNotations ( ) . setNamedItem ( notationImpl ) ; if ( fGrammarAccess ) { Element schema = XUtil . getFirstChildElement ( fDocumentType , "schema" ) ; Element notation = XUtil . getFirstChildElement ( schema , "notation" , "name" , notationName ) ; if ( notation == null ) { notation = fDocument . createElement ( "notation" ) ; notation . setAttribute ( "name" , notationName ) ; if ( publicId != null ) { notation . setAttribute ( "public" , publicId ) ; } if ( systemIdIndex != - 1 ) { notation . setAttribute ( "system" , systemId ) ; } schema . appendChild ( notation ) ; } } } } private int getFirstChildElement ( int nodeIndex ) { int childIndex = getLastChildElement ( nodeIndex ) ; while ( childIndex != - 1 ) { int prevIndex = getPrevSiblingElement ( childIndex ) ; if ( prevIndex == - 1 ) { break ; } childIndex = prevIndex ; } return childIndex ; } private int getFirstChildElement ( int nodeIndex , String name ) { int childIndex = getLastChildElement ( nodeIndex ) ; if ( childIndex != - 1 ) { int nameIndex = fStringPool . addSymbol ( name ) ; while ( childIndex != - 1 ) { if ( fDeferredDocumentImpl . getNodeName ( childIndex , false ) == nameIndex ) { break ; } int prevIndex = getPrevSiblingElement ( childIndex ) ; childIndex = prevIndex ; } } return childIndex ; } private int getLastChildElement ( int nodeIndex ) { int childIndex = fDeferredDocumentImpl . getLastChild ( nodeIndex , false ) ; while ( childIndex != - 1 ) { if ( fDeferredDocumentImpl . getNodeType ( childIndex , false ) == Node . ELEMENT_NODE ) { return childIndex ; } childIndex = fDeferredDocumentImpl . getPrevSibling ( childIndex , false ) ; } return - 1 ; } private int getPrevSiblingElement ( int nodeIndex ) { int siblingIndex = fDeferredDocumentImpl . getPrevSibling ( nodeIndex , false ) ; while ( siblingIndex != - 1 ) { if ( fDeferredDocumentImpl . getNodeType ( siblingIndex , false ) == Node . ELEMENT_NODE ) { return siblingIndex ; } siblingIndex = fDeferredDocumentImpl . getPrevSibling ( siblingIndex , false ) ; } return - 1 ; } private int getLastChildElement ( int nodeIndex , String elementName ) { int childIndex = getLastChildElement ( nodeIndex ) ; if ( childIndex != - 1 ) { while ( childIndex != - 1 ) { String nodeName = fDeferredDocumentImpl . getNodeNameString ( childIndex , false ) ; if ( nodeName . equals ( elementName ) ) { return childIndex ; } childIndex = getPrevSiblingElement ( childIndex ) ; } } return - 1 ; } private int getPrevSiblingElement ( int nodeIndex , String elementName ) { int siblingIndex = getPrevSiblingElement ( nodeIndex ) ; if ( siblingIndex != - 1 ) { while ( siblingIndex != - 1 ) { String nodeName = fDeferredDocumentImpl . getNodeNameString ( siblingIndex , false ) ; if ( nodeName . equals ( elementName ) ) { return siblingIndex ; } siblingIndex = getPrevSiblingElement ( siblingIndex ) ; } } return - 1 ; } private int getLastChildElement ( int nodeIndex , String elemName , String attrName , String attrValue ) { int childIndex = getLastChildElement ( nodeIndex , elemName ) ; if ( childIndex != - 1 ) { while ( childIndex != - 1 ) { int attrIndex = fDeferredDocumentImpl . getNodeValue ( childIndex , false ) ; while ( attrIndex != - 1 ) { String nodeName = fDeferredDocumentImpl . getNodeNameString ( attrIndex , false ) ; if ( nodeName . equals ( attrName ) ) { int textIndex = fDeferredDocumentImpl . getLastChild ( attrIndex , false ) ; String nodeValue = fDeferredDocumentImpl . getNodeValueString ( textIndex , false ) ; if ( nodeValue . equals ( attrValue ) ) { return childIndex ; } } attrIndex = fDeferredDocumentImpl . getPrevSibling ( attrIndex , false ) ; } childIndex = getPrevSiblingElement ( childIndex , elemName ) ; } } return - 1 ; } private int getPrevSiblingElement ( int nodeIndex , String elemName , String attrName , String attrValue ) { int siblingIndex = getPrevSiblingElement ( nodeIndex , elemName ) ; if ( siblingIndex != - 1 ) { int attributeNameIndex = fStringPool . addSymbol ( attrName ) ; while ( siblingIndex != - 1 ) { int attrIndex = fDeferredDocumentImpl . getNodeValue ( siblingIndex , false ) ; while ( attrIndex != - 1 ) { int attrValueIndex = fDeferredDocumentImpl . getNodeValue ( attrIndex , false ) ; if ( attrValue . equals ( fStringPool . toString ( attrValueIndex ) ) ) { return siblingIndex ; } attrIndex = fDeferredDocumentImpl . getPrevSibling ( attrIndex , false ) ; } siblingIndex = getPrevSiblingElement ( siblingIndex , elemName ) ; } } return - 1 ; } private void copyInto ( Node src , int destIndex ) throws Exception { boolean domimpl = src != null && src instanceof DocumentImpl ; Node start = src ; Node parent = src ; Node place = src ; while ( place != null ) { int nodeIndex = - 1 ; short type = place . getNodeType ( ) ; switch ( type ) { case Node . CDATA_SECTION_NODE : { boolean ignorable = domimpl && ( ( TextImpl ) place ) . isIgnorableWhitespace ( ) ; nodeIndex = fDeferredDocumentImpl . createCDATASection ( fStringPool . addString ( place . getNodeValue ( ) ) , ignorable ) ; break ; } case Node . COMMENT_NODE : { nodeIndex = fDeferredDocumentImpl . createComment ( fStringPool . addString ( place . getNodeValue ( ) ) ) ; break ; } case Node . ELEMENT_NODE : { XMLAttrList attrList = null ; int handle = - 1 ; NamedNodeMap attrs = place . getAttributes ( ) ; if ( attrs != null ) { int length = attrs . getLength ( ) ; if ( length > 0 ) { handle = fAttrList . startAttrList ( ) ; for ( int i = 0 ; i < length ; i ++ ) { Attr attr = ( Attr ) attrs . item ( i ) ; String attrName = attr . getNodeName ( ) ; String attrValue = attr . getNodeValue ( ) ; fAttrList . addAttr ( fStringPool . addSymbol ( attrName ) , fStringPool . addString ( attrValue ) , fStringPool . addSymbol ( "CDATA" ) , attr . getSpecified ( ) , false ) ; } fAttrList . endAttrList ( ) ; attrList = fAttrList ; } } nodeIndex = fDeferredDocumentImpl . createElement ( fStringPool . addSymbol ( place . getNodeName ( ) ) , attrList , handle ) ; break ; } case Node . ENTITY_REFERENCE_NODE : { nodeIndex = fDeferredDocumentImpl . createEntityReference ( fStringPool . addSymbol ( place . getNodeName ( ) ) ) ; break ; } case Node . PROCESSING_INSTRUCTION_NODE : { nodeIndex = fDeferredDocumentImpl . createProcessingInstruction ( fStringPool . addSymbol ( place . getNodeName ( ) ) , fStringPool . addString ( place . getNodeValue ( ) ) ) ; break ; } case Node . TEXT_NODE : { boolean ignorable = domimpl && ( ( TextImpl ) place ) . isIgnorableWhitespace ( ) ; nodeIndex = fDeferredDocumentImpl . createTextNode ( fStringPool . addString ( place . getNodeValue ( ) ) , ignorable ) ; break ; } default : { throw new IllegalArgumentException ( "PAR010 Can't copy node type, " + type + " (" + place . getNodeName ( ) + ')' + "\n" + type + "\t" + place . getNodeName ( ) ) ; } } fDeferredDocumentImpl . appendChild ( destIndex , nodeIndex ) ; if ( place . hasChildNodes ( ) ) { parent = place ; place = place . getFirstChild ( ) ; destIndex = nodeIndex ; } else { place = place . getNextSibling ( ) ; while ( place == null && parent != start ) { place = parent . getNextSibling ( ) ; parent = parent . getParentNode ( ) ; destIndex = fDeferredDocumentImpl . getParentNode ( destIndex , false ) ; } } } } private void setOccurrenceCount ( Element model , int minOccur , int maxOccur ) { model . setAttribute ( "minOccurs" , Integer . toString ( minOccur ) ) ; if ( minOccur == 1 ) { ( ( AttrImpl ) model . getAttributeNode ( "minOccurs" ) ) . setSpecified ( false ) ; } if ( maxOccur == - 1 ) { model . setAttribute ( "maxOccurs" , "*" ) ; } else if ( maxOccur != 1 ) { model . setAttribute ( "maxOccurs" , Integer . toString ( maxOccur ) ) ; } } private Element createChildren ( XMLContentSpec . Provider provider , int index , XMLContentSpec node , DocumentImpl factory , Element parent ) throws Exception { provider . getContentSpec ( index , node ) ; int occurs = - 1 ; switch ( node . type ) { case XMLContentSpec . CONTENTSPECNODE_ONE_OR_MORE : { occurs = '+' ; provider . getContentSpec ( node . value , node ) ; break ; } case XMLContentSpec . CONTENTSPECNODE_ZERO_OR_MORE : { occurs = '*' ; provider . getContentSpec ( node . value , node ) ; break ; } case XMLContentSpec . CONTENTSPECNODE_ZERO_OR_ONE : { occurs = '?' ; provider . getContentSpec ( node . value , node ) ; break ; } } int nodeType = node . type ; switch ( nodeType ) { case XMLContentSpec . CONTENTSPECNODE_CHOICE : case XMLContentSpec . CONTENTSPECNODE_SEQ : { int leftIndex = node . value ; int rightIndex = node . otherValue ; Element left = createChildren ( provider , leftIndex , node , factory , parent ) ; Element right = createChildren ( provider , rightIndex , node , factory , null ) ; boolean choice = nodeType == XMLContentSpec . CONTENTSPECNODE_CHOICE ; String type = choice ? "choice" : "sequence" ; Element model = left ; if ( ! left . getNodeName ( ) . equals ( type ) ) { String minOccurs = left . getAttribute ( "minOccurs" ) ; String maxOccurs = left . getAttribute ( "maxOccurs" ) ; boolean min1 = minOccurs . length ( ) == 0 || minOccurs . equals ( "1" ) ; boolean max1 = maxOccurs . length ( ) == 0 || maxOccurs . equals ( "1" ) ; if ( parent == null || ( min1 && max1 ) ) { model = factory . createElement ( type ) ; model . appendChild ( left ) ; } else { model = parent ; } } switch ( occurs ) { case '+' : { model . setAttribute ( "maxOccurs" , "unbounded" ) ; break ; } case '*' : { model . setAttribute ( "minOccurs" , "0" ) ; model . setAttribute ( "maxOccurs" , "unbounded" ) ; break ; } case '?' : { model . setAttribute ( "minOccurs" , "0" ) ; break ; } } model . appendChild ( right ) ; return model ; } case XMLContentSpec . CONTENTSPECNODE_LEAF : { Element leaf = factory . createElement ( "element" ) ; leaf . setAttribute ( "ref" , fStringPool . toString ( node . value ) ) ; switch ( occurs ) { case '+' : { leaf . setAttribute ( "maxOccurs" , "unbounded" ) ; break ; } case '*' : { leaf . setAttribute ( "minOccurs" , "0" ) ; leaf . setAttribute ( "maxOccurs" , "unbounded" ) ; break ; } case '?' : { leaf . setAttribute ( "minOccurs" , "0" ) ; break ; } } return leaf ; } } return null ; } private int createChildren ( XMLContentSpec . Provider provider , int index , XMLContentSpec node , DeferredDocumentImpl factory , int parent ) throws Exception { provider . getContentSpec ( index , node ) ; int occurs = - 1 ; switch ( node . type ) { case XMLContentSpec . CONTENTSPECNODE_ONE_OR_MORE : { occurs = '+' ; provider . getContentSpec ( node . value , node ) ; break ; } case XMLContentSpec . CONTENTSPECNODE_ZERO_OR_MORE : { occurs = '*' ; provider . getContentSpec ( node . value , node ) ; break ; } case XMLContentSpec . CONTENTSPECNODE_ZERO_OR_ONE : { occurs = '?' ; provider . getContentSpec ( node . value , node ) ; break ; } } int nodeType = node . type ; switch ( nodeType ) { case XMLContentSpec . CONTENTSPECNODE_CHOICE : case XMLContentSpec . CONTENTSPECNODE_SEQ : { int leftIndex = node . value ; int rightIndex = node . otherValue ; int left = createChildren ( provider , leftIndex , node , factory , parent ) ; int right = createChildren ( provider , rightIndex , node , factory , - 1 ) ; boolean choice = nodeType == XMLContentSpec . CONTENTSPECNODE_CHOICE ; int type = fStringPool . addSymbol ( choice ? "choice" : "sequence" ) ; int model = left ; if ( factory . getNodeName ( left , false ) != type ) { int minOccurs = factory . getAttribute ( left , fStringPool . addSymbol ( "minOccurs" ) ) ; int maxOccurs = factory . getAttribute ( left , fStringPool . addSymbol ( "maxOccurs" ) ) ; boolean min1 = minOccurs == - 1 || fStringPool . toString ( minOccurs ) . equals ( "1" ) ; boolean max1 = maxOccurs == - 1 || fStringPool . toString ( maxOccurs ) . equals ( "1" ) ; if ( parent == - 1 || ( min1 && max1 ) ) { model = factory . createElement ( type , null , - 1 ) ; factory . appendChild ( model , left ) ; } else { model = parent ; } } switch ( occurs ) { case '+' : { int maxOccurs = factory . createAttribute ( fStringPool . addSymbol ( "maxOccurs" ) , fStringPool . addString ( "unbounded" ) , true ) ; factory . setAttributeNode ( model , maxOccurs ) ; break ; } case '*' : { int minOccurs = factory . createAttribute ( fStringPool . addSymbol ( "minOccurs" ) , fStringPool . addString ( "0" ) , true ) ; factory . setAttributeNode ( model , minOccurs ) ; int maxOccurs = factory . createAttribute ( fStringPool . addSymbol ( "maxOccurs" ) , fStringPool . addString ( "unbounded" ) , true ) ; factory . setAttributeNode ( model , maxOccurs ) ; break ; } case '?' : { int minOccurs = factory . createAttribute ( fStringPool . addSymbol ( "minOccurs" ) , fStringPool . addString ( "0" ) , true ) ; factory . setAttributeNode ( model , minOccurs ) ; break ; } } factory . appendChild ( model , right ) ; return model ; } case XMLContentSpec . CONTENTSPECNODE_LEAF : { int handle = fAttrList . startAttrList ( ) ; fAttrList . addAttr ( fStringPool . addSymbol ( "ref" ) , fStringPool . addString ( fStringPool . toString ( node . value ) ) , fStringPool . addSymbol ( "NMTOKEN" ) , true , false ) ; switch ( occurs ) { case '+' : { fAttrList . addAttr ( fStringPool . addSymbol ( "maxOccurs" ) , fStringPool . addString ( "unbounded" ) , fStringPool . addSymbol ( "CDATA" ) , true , false ) ; break ; } case '*' : { fAttrList . addAttr ( fStringPool . addSymbol ( "minOccurs" ) , fStringPool . addString ( "0" ) , fStringPool . addSymbol ( "NMTOKEN" ) , true , false ) ; fAttrList . addAttr ( fStringPool . addSymbol ( "maxOccurs" ) , fStringPool . addString ( "unbounded" ) , fStringPool . addSymbol ( "CDATA" ) , true , false ) ; break ; } case '?' : { fAttrList . addAttr ( fStringPool . addSymbol ( "minOccurs" ) , fStringPool . addString ( "0" ) , fStringPool . addSymbol ( "NMTOKEN" ) , true , false ) ; break ; } } fAttrList . endAttrList ( ) ; int leaf = factory . createElement ( fStringPool . addSymbol ( "element" ) , fAttrList , handle ) ; return leaf ; } } return - 1 ; } } 	1	['63', '2', '1', '25', '228', '729', '5', '20', '42', '0.874193548', '5748', '0.9', '6', '0.678947368', '0.152073733', '2', '18', '89.76190476', '6', '1.6825', '7']
package org . apache . xerces . readers ; import org . apache . xerces . framework . XMLErrorReporter ; import org . apache . xerces . utils . QName ; import org . apache . xerces . utils . StringPool ; import org . xml . sax . EntityResolver ; import org . xml . sax . InputSource ; import org . xml . sax . Locator ; import java . io . InputStream ; public interface XMLEntityHandler extends Locator { public static final int CHARREF_RESULT_SEMICOLON_REQUIRED = - 1 , CHARREF_RESULT_INVALID_CHAR = - 2 , CHARREF_RESULT_OUT_OF_RANGE = - 3 ; public static final int STRINGLIT_RESULT_QUOTE_REQUIRED = - 1 , STRINGLIT_RESULT_INVALID_CHAR = - 2 ; public static final int ATTVALUE_RESULT_COMPLEX = - 1 , ATTVALUE_RESULT_LESSTHAN = - 2 , ATTVALUE_RESULT_INVALID_CHAR = - 3 ; public static final int ENTITYVALUE_RESULT_FINISHED = - 1 , ENTITYVALUE_RESULT_REFERENCE = - 2 , ENTITYVALUE_RESULT_PEREF = - 3 , ENTITYVALUE_RESULT_INVALID_CHAR = - 4 , ENTITYVALUE_RESULT_END_OF_INPUT = - 5 ; public static final int CONTENT_RESULT_START_OF_PI = 0 , CONTENT_RESULT_START_OF_COMMENT = 1 , CONTENT_RESULT_START_OF_CDSECT = 2 , CONTENT_RESULT_END_OF_CDSECT = 3 , CONTENT_RESULT_START_OF_ETAG = 4 , CONTENT_RESULT_MATCHING_ETAG = 5 , CONTENT_RESULT_START_OF_ELEMENT = 6 , CONTENT_RESULT_START_OF_CHARREF = 7 , CONTENT_RESULT_START_OF_ENTITYREF = 8 , CONTENT_RESULT_INVALID_CHAR = 9 , CONTENT_RESULT_MARKUP_NOT_RECOGNIZED = 10 , CONTENT_RESULT_MARKUP_END_OF_INPUT = 11 , CONTENT_RESULT_REFERENCE_END_OF_INPUT = 12 ; public static final int ENTITYTYPE_INTERNAL_PE = 0 , ENTITYTYPE_EXTERNAL_PE = 1 , ENTITYTYPE_INTERNAL = 2 , ENTITYTYPE_EXTERNAL = 3 , ENTITYTYPE_UNPARSED = 4 , ENTITYTYPE_DOCUMENT = 5 , ENTITYTYPE_EXTERNAL_SUBSET = 6 ; public static final int ENTITYREF_IN_ATTVALUE = 0 , ENTITYREF_IN_DEFAULTATTVALUE = 1 , ENTITYREF_IN_CONTENT = 2 , ENTITYREF_IN_DTD_AS_MARKUP = 3 , ENTITYREF_IN_ENTITYVALUE = 4 , ENTITYREF_IN_DTD_WITHIN_MARKUP = 5 , ENTITYREF_DOCUMENT = 6 , ENTITYREF_EXTERNAL_SUBSET = 7 ; public boolean startReadingFromDocument ( InputSource source ) throws Exception ; public boolean startReadingFromEntity ( int entityName , int readerDepth , int entityContext ) throws Exception ; public String expandSystemId ( String systemId ) ; public interface DTDHandler { public void startReadingFromExternalSubset ( String publicId , String systemId , int readerDepth ) throws Exception ; public void stopReadingFromExternalSubset ( ) throws Exception ; public boolean startEntityDecl ( boolean isPE , int entityName ) throws Exception ; public void endEntityDecl ( ) throws Exception ; public int addInternalPEDecl ( int entityName , int value , boolean isExternal ) throws Exception ; public int addExternalPEDecl ( int entityName , int publicId , int systemId , boolean isExternal ) throws Exception ; public int addInternalEntityDecl ( int entityName , int value , boolean isExternal ) throws Exception ; public int addExternalEntityDecl ( int entityName , int publicId , int systemId , boolean isExternal ) throws Exception ; public int addUnparsedEntityDecl ( int entityName , int publicId , int systemId , int notationName , boolean isExternal ) throws Exception ; public int addNotationDecl ( int notationName , int publicId , int systemId , boolean isExternal ) throws Exception ; public boolean isUnparsedEntity ( int entityName ) ; public boolean isNotationDeclared ( int entityName ) ; public void addRequiredNotation ( int notationName , Locator locator , int majorCode , int minorCode , Object [ ] args ) ; public void checkRequiredNotations ( ) throws Exception ; } public int getReaderId ( ) ; public void setReaderDepth ( int depth ) ; public int getReaderDepth ( ) ; public EntityReader getEntityReader ( ) ; public EntityReader changeReaders ( ) throws Exception ; public interface CharBuffer { public void append ( char ch ) ; public void append ( char [ ] chars , int offset , int length ) ; public int length ( ) ; public int addString ( int offset , int length ) ; } public void setCharDataHandler ( XMLEntityHandler . CharDataHandler charDataHandler ) ; public XMLEntityHandler . CharDataHandler getCharDataHandler ( ) ; public interface CharDataHandler { public void processCharacters ( char [ ] chars , int offset , int length ) throws Exception ; public void processCharacters ( int stringHandle ) throws Exception ; public void processWhitespace ( char [ ] chars , int offset , int length ) throws Exception ; public void processWhitespace ( int stringHandle ) throws Exception ; } public interface EntityReader { public int currentOffset ( ) ; public int getLineNumber ( ) ; public int getColumnNumber ( ) ; public void setInCDSect ( boolean inCDSect ) ; public boolean getInCDSect ( ) ; public void append ( XMLEntityHandler . CharBuffer charBuffer , int offset , int length ) ; public int addString ( int offset , int length ) ; public int addSymbol ( int offset , int length ) ; public boolean lookingAtChar ( char ch , boolean skipPastChar ) throws Exception ; public boolean lookingAtValidChar ( boolean skipPastChar ) throws Exception ; public boolean lookingAtSpace ( boolean skipPastChar ) throws Exception ; public void skipToChar ( char ch ) throws Exception ; public void skipPastSpaces ( ) throws Exception ; public void skipPastName ( char fastcheck ) throws Exception ; public void skipPastNmtoken ( char fastcheck ) throws Exception ; public boolean skippedString ( char [ ] s ) throws Exception ; public int scanInvalidChar ( ) throws Exception ; public int scanCharRef ( boolean isHexadecimal ) throws Exception ; public int scanStringLiteral ( ) throws Exception ; public int scanAttValue ( char qchar , boolean asSymbol ) throws Exception ; public int scanEntityValue ( int qchar , boolean createString ) throws Exception ; public int scanName ( char fastcheck ) throws Exception ; public boolean scanExpectedName ( char fastcheck , StringPool . CharArrayRange expectedName ) throws Exception ; public void scanQName ( char fastcheck , QName qname ) throws Exception ; public int scanContent ( QName element ) throws Exception ; } } 	0	['10', '1', '0', '22', '10', '45', '20', '2', '10', '1.111111111', '51', '0', '0', '0', '0.3', '0', '0', '0', '1', '1', '0']
package org . apache . xml . serialize ; import java . io . IOException ; import java . io . UnsupportedEncodingException ; import java . io . OutputStream ; import java . io . Writer ; import java . util . Enumeration ; import org . w3c . dom . * ; import org . xml . sax . DocumentHandler ; import org . xml . sax . ContentHandler ; import org . xml . sax . AttributeList ; import org . xml . sax . Attributes ; public final class XMLSerializer extends BaseMarkupSerializer { public XMLSerializer ( ) { super ( new OutputFormat ( Method . XML , null , false ) ) ; } public XMLSerializer ( OutputFormat format ) { super ( format != null ? format : new OutputFormat ( Method . XML , null , false ) ) ; _format . setMethod ( Method . XML ) ; } public XMLSerializer ( Writer writer , OutputFormat format ) { super ( format != null ? format : new OutputFormat ( Method . XML , null , false ) ) ; _format . setMethod ( Method . XML ) ; setOutputCharStream ( writer ) ; } public XMLSerializer ( OutputStream output , OutputFormat format ) { super ( format != null ? format : new OutputFormat ( Method . XML , null , false ) ) ; _format . setMethod ( Method . XML ) ; setOutputByteStream ( output ) ; } public void setOutputFormat ( OutputFormat format ) { super . setOutputFormat ( format != null ? format : new OutputFormat ( Method . XML , null , false ) ) ; } public void startElement ( String namespaceURI , String localName , String rawName , Attributes attrs ) { int i ; boolean preserveSpace ; ElementState state ; String name ; String value ; boolean addNSAttr = false ; if ( _printer == null ) throw new IllegalStateException ( "SER002 No writer supplied for serializer" ) ; state = getElementState ( ) ; if ( isDocumentState ( ) ) { if ( ! _started ) startDocument ( localName == null ? rawName : localName ) ; } else { if ( state . empty ) _printer . printText ( '>' ) ; if ( state . inCData ) { _printer . printText ( "]]>" ) ; state . inCData = false ; } if ( _indenting && ! state . preserveSpace && ( state . empty || state . afterElement ) ) _printer . breakLine ( ) ; } preserveSpace = state . preserveSpace ; if ( rawName == null ) { rawName = localName ; if ( namespaceURI != null ) { String prefix ; prefix = getPrefix ( namespaceURI ) ; if ( prefix . length ( ) > 0 ) rawName = prefix + ":" + localName ; } addNSAttr = true ; } _printer . printText ( '<' ) ; _printer . printText ( rawName ) ; _printer . indent ( ) ; if ( attrs != null ) { for ( i = 0 ; i < attrs . getLength ( ) ; ++ i ) { _printer . printSpace ( ) ; name = attrs . getQName ( i ) ; if ( name == null ) { String prefix ; String attrURI ; name = attrs . getLocalName ( i ) ; attrURI = attrs . getURI ( i ) ; if ( attrURI != null && ( namespaceURI == null || ! attrURI . equals ( namespaceURI ) ) ) { prefix = getPrefix ( attrURI ) ; if ( prefix != null && prefix . length ( ) > 0 ) name = prefix + ":" + name ; } } value = attrs . getValue ( i ) ; if ( value == null ) value = "" ; _printer . printText ( name ) ; _printer . printText ( "=\"" ) ; printEscaped ( value ) ; _printer . printText ( '"' ) ; if ( name . equals ( "xml:space" ) ) { if ( value . equals ( "preserve" ) ) preserveSpace = true ; else preserveSpace = _format . getPreserveSpace ( ) ; } } } if ( addNSAttr ) { Enumeration enum ; enum = _prefixes . keys ( ) ; while ( enum . hasMoreElements ( ) ) { _printer . printSpace ( ) ; value = ( String ) enum . nextElement ( ) ; name = ( String ) _prefixes . get ( value ) ; if ( name . length ( ) == 0 ) { _printer . printText ( "xmlns=\"" ) ; printEscaped ( value ) ; _printer . printText ( '"' ) ; } else { _printer . printText ( "xmlns:" ) ; _printer . printText ( name ) ; _printer . printText ( "=\"" ) ; printEscaped ( value ) ; _printer . printText ( '"' ) ; } } } state = enterElementState ( namespaceURI , localName , rawName , preserveSpace ) ; state . doCData = _format . isCDataElement ( namespaceURI == null ? rawName : namespaceURI + "^" + localName ) ; state . unescaped = _format . isNonEscapingElement ( namespaceURI == null ? rawName : namespaceURI + "^" + localName ) ; } public void endElement ( String namespaceURI , String localName , String rawName ) { ElementState state ; _printer . unindent ( ) ; state = getElementState ( ) ; if ( state . empty ) { _printer . printText ( "/>" ) ; } else { if ( state . inCData ) _printer . printText ( "]]>" ) ; if ( _indenting && ! state . preserveSpace && state . afterElement ) _printer . breakLine ( ) ; _printer . printText ( "</" ) ; _printer . printText ( state . rawName ) ; _printer . printText ( '>' ) ; } state = leaveElementState ( ) ; state . afterElement = true ; state . empty = false ; if ( isDocumentState ( ) ) _printer . flush ( ) ; } public void startElement ( String tagName , AttributeList attrs ) { int i ; boolean preserveSpace ; ElementState state ; String name ; String value ; if ( _printer == null ) throw new IllegalStateException ( "SER002 No writer supplied for serializer" ) ; state = getElementState ( ) ; if ( isDocumentState ( ) ) { if ( ! _started ) startDocument ( tagName ) ; } else { if ( state . empty ) _printer . printText ( '>' ) ; if ( state . inCData ) { _printer . printText ( "]]>" ) ; state . inCData = false ; } if ( _indenting && ! state . preserveSpace && ( state . empty || state . afterElement ) ) _printer . breakLine ( ) ; } preserveSpace = state . preserveSpace ; _printer . printText ( '<' ) ; _printer . printText ( tagName ) ; _printer . indent ( ) ; if ( attrs != null ) { for ( i = 0 ; i < attrs . getLength ( ) ; ++ i ) { _printer . printSpace ( ) ; name = attrs . getName ( i ) ; value = attrs . getValue ( i ) ; if ( value != null ) { _printer . printText ( name ) ; _printer . printText ( "=\"" ) ; printEscaped ( value ) ; _printer . printText ( '"' ) ; } if ( name . equals ( "xml:space" ) ) { if ( value . equals ( "preserve" ) ) preserveSpace = true ; else preserveSpace = _format . getPreserveSpace ( ) ; } } } state = enterElementState ( null , null , tagName , preserveSpace ) ; state . doCData = _format . isCDataElement ( tagName ) ; state . unescaped = _format . isNonEscapingElement ( tagName ) ; } public void endElement ( String tagName ) { endElement ( null , null , tagName ) ; } protected void startDocument ( String rootTagName ) { int i ; String dtd ; dtd = _printer . leaveDTD ( ) ; if ( ! _started ) { if ( ! _format . getOmitXMLDeclaration ( ) ) { StringBuffer buffer ; buffer = new StringBuffer ( "<?xml version=\"" ) ; if ( _format . getVersion ( ) != null ) buffer . append ( _format . getVersion ( ) ) ; else buffer . append ( "1.0" ) ; buffer . append ( '"' ) ; if ( _format . getEncoding ( ) != null ) { buffer . append ( " encoding=\"" ) ; buffer . append ( _format . getEncoding ( ) ) ; buffer . append ( '"' ) ; } if ( _format . getStandalone ( ) && _docTypeSystemId == null && _docTypePublicId == null ) buffer . append ( " standalone=\"yes\"" ) ; buffer . append ( "?>" ) ; _printer . printText ( buffer ) ; _printer . breakLine ( ) ; } if ( ! _format . getOmitDocumentType ( ) ) { if ( _docTypeSystemId != null ) { _printer . printText ( "<!DOCTYPE " ) ; _printer . printText ( rootTagName ) ; if ( _docTypePublicId != null ) { _printer . printText ( " PUBLIC " ) ; printDoctypeURL ( _docTypePublicId ) ; if ( _indenting ) { _printer . breakLine ( ) ; for ( i = 0 ; i < 18 + rootTagName . length ( ) ; ++ i ) _printer . printText ( " " ) ; } else _printer . printText ( " " ) ; printDoctypeURL ( _docTypeSystemId ) ; } else { _printer . printText ( " SYSTEM " ) ; printDoctypeURL ( _docTypeSystemId ) ; } if ( dtd != null && dtd . length ( ) > 0 ) { _printer . printText ( " [" ) ; printText ( dtd , true , true ) ; _printer . printText ( ']' ) ; } _printer . printText ( ">" ) ; _printer . breakLine ( ) ; } else if ( dtd != null && dtd . length ( ) > 0 ) { _printer . printText ( "<!DOCTYPE " ) ; _printer . printText ( rootTagName ) ; _printer . printText ( " [" ) ; printText ( dtd , true , true ) ; _printer . printText ( "]>" ) ; _printer . breakLine ( ) ; } } } _started = true ; serializePreRoot ( ) ; } protected void serializeElement ( Element elem ) { Attr attr ; NamedNodeMap attrMap ; int i ; Node child ; ElementState state ; boolean preserveSpace ; String name ; String value ; String tagName ; tagName = elem . getTagName ( ) ; state = getElementState ( ) ; if ( isDocumentState ( ) ) { if ( ! _started ) startDocument ( tagName ) ; } else { if ( state . empty ) _printer . printText ( '>' ) ; if ( state . inCData ) { _printer . printText ( "]]>" ) ; state . inCData = false ; } if ( _indenting && ! state . preserveSpace && ( state . empty || state . afterElement ) ) _printer . breakLine ( ) ; } preserveSpace = state . preserveSpace ; _printer . printText ( '<' ) ; _printer . printText ( tagName ) ; _printer . indent ( ) ; attrMap = elem . getAttributes ( ) ; if ( attrMap != null ) { for ( i = 0 ; i < attrMap . getLength ( ) ; ++ i ) { attr = ( Attr ) attrMap . item ( i ) ; name = attr . getName ( ) ; value = attr . getValue ( ) ; if ( value == null ) value = "" ; if ( attr . getSpecified ( ) ) { _printer . printSpace ( ) ; _printer . printText ( name ) ; _printer . printText ( "=\"" ) ; printEscaped ( value ) ; _printer . printText ( '"' ) ; } if ( name . equals ( "xml:space" ) ) { if ( value . equals ( "preserve" ) ) preserveSpace = true ; else preserveSpace = _format . getPreserveSpace ( ) ; } } } if ( elem . hasChildNodes ( ) ) { state = enterElementState ( null , null , tagName , preserveSpace ) ; state . doCData = _format . isCDataElement ( tagName ) ; state . unescaped = _format . isNonEscapingElement ( tagName ) ; child = elem . getFirstChild ( ) ; while ( child != null ) { serializeNode ( child ) ; child = child . getNextSibling ( ) ; } endElement ( tagName ) ; } else { _printer . unindent ( ) ; _printer . printText ( "/>" ) ; state . afterElement = true ; state . empty = false ; if ( isDocumentState ( ) ) _printer . flush ( ) ; } } protected String getEntityRef ( int ch ) { switch ( ch ) { case '<' : return "lt" ; case '>' : return "gt" ; case '"' : return "quot" ; case '\'' : return "apos" ; case '&' : return "amp" ; } return null ; } } 	1	['12', '2', '0', '6', '75', '16', '2', '4', '9', '2', '994', '0', '0', '0.875', '0.25', '2', '7', '81.83333333', '30', '8.0833', '2']
package org . apache . xerces . dom ; import java . io . * ; import java . util . Vector ; import java . util . Enumeration ; import org . w3c . dom . * ; public class NamedNodeMapImpl implements NamedNodeMap , Serializable { static final long serialVersionUID = - 7039242451046758020L ; protected short flags ; protected final static short READONLY = 0x1 << 0 ; protected final static short CHANGED = 0x1 << 1 ; protected final static short HASDEFAULTS = 0x1 << 2 ; protected Vector nodes ; protected NodeImpl ownerNode ; protected NamedNodeMapImpl ( NodeImpl ownerNode ) { this . ownerNode = ownerNode ; } public int getLength ( ) { return ( nodes != null ) ? nodes . size ( ) : 0 ; } public Node item ( int index ) { return ( nodes != null && index < nodes . size ( ) ) ? ( Node ) ( nodes . elementAt ( index ) ) : null ; } public Node getNamedItem ( String name ) { int i = findNamePoint ( name , 0 ) ; return ( i < 0 ) ? null : ( Node ) ( nodes . elementAt ( i ) ) ; } public Node getNamedItemNS ( String namespaceURI , String localName ) { int i = findNamePoint ( namespaceURI , localName ) ; return ( i < 0 ) ? null : ( Node ) ( nodes . elementAt ( i ) ) ; } public Node setNamedItem ( Node arg ) throws DOMException { if ( isReadOnly ( ) ) { throw new DOMException ( DOMException . NO_MODIFICATION_ALLOWED_ERR , "DOM001 Modification not allowed" ) ; } if ( arg . getOwnerDocument ( ) != ownerNode . ownerDocument ( ) ) { throw new DOMException ( DOMException . WRONG_DOCUMENT_ERR , "DOM005 Wrong document" ) ; } int i = findNamePoint ( arg . getNodeName ( ) , 0 ) ; NodeImpl previous = null ; if ( i >= 0 ) { previous = ( NodeImpl ) nodes . elementAt ( i ) ; nodes . setElementAt ( arg , i ) ; } else { i = - 1 - i ; if ( null == nodes ) { nodes = new Vector ( 5 , 10 ) ; } nodes . insertElementAt ( arg , i ) ; } return previous ; } public Node setNamedItemNS ( Node arg ) throws DOMException { if ( isReadOnly ( ) ) { throw new DOMException ( DOMException . NO_MODIFICATION_ALLOWED_ERR , "DOM001 Modification not allowed" ) ; } if ( arg . getOwnerDocument ( ) != ownerNode . ownerDocument ( ) ) { throw new DOMException ( DOMException . WRONG_DOCUMENT_ERR , "DOM005 Wrong document" ) ; } int i = findNamePoint ( arg . getNamespaceURI ( ) , arg . getLocalName ( ) ) ; NodeImpl previous = null ; if ( i >= 0 ) { previous = ( NodeImpl ) nodes . elementAt ( i ) ; nodes . setElementAt ( arg , i ) ; } else { i = findNamePoint ( arg . getNodeName ( ) , 0 ) ; if ( i >= 0 ) { previous = ( NodeImpl ) nodes . elementAt ( i ) ; nodes . insertElementAt ( arg , i ) ; } else { i = - 1 - i ; if ( null == nodes ) { nodes = new Vector ( 5 , 10 ) ; } nodes . insertElementAt ( arg , i ) ; } } return previous ; } public Node removeNamedItem ( String name ) throws DOMException { if ( isReadOnly ( ) ) { throw new DOMException ( DOMException . NO_MODIFICATION_ALLOWED_ERR , "DOM001 Modification not allowed" ) ; } int i = findNamePoint ( name , 0 ) ; if ( i < 0 ) { throw new DOMException ( DOMException . NOT_FOUND_ERR , "DOM008 Not found" ) ; } NodeImpl n = ( NodeImpl ) nodes . elementAt ( i ) ; nodes . removeElementAt ( i ) ; return n ; } public Node removeNamedItemNS ( String namespaceURI , String name ) throws DOMException { if ( isReadOnly ( ) ) { throw new DOMException ( DOMException . NO_MODIFICATION_ALLOWED_ERR , "DOM001 Modification not allowed" ) ; } int i = findNamePoint ( namespaceURI , name ) ; if ( i < 0 ) { throw new DOMException ( DOMException . NOT_FOUND_ERR , "DOM008 Not found" ) ; } NodeImpl n = ( NodeImpl ) nodes . elementAt ( i ) ; nodes . removeElementAt ( i ) ; return n ; } public NamedNodeMapImpl cloneMap ( NodeImpl ownerNode ) { NamedNodeMapImpl newmap = new NamedNodeMapImpl ( ownerNode ) ; newmap . cloneContent ( this ) ; return newmap ; } protected void cloneContent ( NamedNodeMapImpl srcmap ) { if ( srcmap . nodes != null ) { nodes = new Vector ( srcmap . nodes . size ( ) ) ; for ( int i = 0 ; i < srcmap . nodes . size ( ) ; ++ i ) { NodeImpl n = ( NodeImpl ) srcmap . nodes . elementAt ( i ) ; NodeImpl clone = ( NodeImpl ) n . cloneNode ( true ) ; clone . isSpecified ( n . isSpecified ( ) ) ; nodes . insertElementAt ( clone , i ) ; } } } void setReadOnly ( boolean readOnly , boolean deep ) { isReadOnly ( readOnly ) ; if ( deep && nodes != null ) { Enumeration e = nodes . elements ( ) ; while ( e . hasMoreElements ( ) ) { ( ( NodeImpl ) e . nextElement ( ) ) . setReadOnly ( readOnly , deep ) ; } } } boolean getReadOnly ( ) { return isReadOnly ( ) ; } void setOwnerDocument ( DocumentImpl doc ) { if ( nodes != null ) { for ( int i = 0 ; i < nodes . size ( ) ; i ++ ) { ( ( NodeImpl ) item ( i ) ) . setOwnerDocument ( doc ) ; } } } final boolean isReadOnly ( ) { return ( flags & READONLY ) != 0 ; } final void isReadOnly ( boolean value ) { flags = ( short ) ( value ? flags | READONLY : flags & ~ READONLY ) ; } final boolean changed ( ) { return ( flags & CHANGED ) != 0 ; } final void changed ( boolean value ) { flags = ( short ) ( value ? flags | CHANGED : flags & ~ CHANGED ) ; } final boolean hasDefaults ( ) { return ( flags & HASDEFAULTS ) != 0 ; } final void hasDefaults ( boolean value ) { flags = ( short ) ( value ? flags | HASDEFAULTS : flags & ~ HASDEFAULTS ) ; } protected int findNamePoint ( String name , int start ) { int i = 0 ; if ( nodes != null ) { int first = start ; int last = nodes . size ( ) - 1 ; while ( first <= last ) { i = ( first + last ) / 2 ; int test = name . compareTo ( ( ( Node ) ( nodes . elementAt ( i ) ) ) . getNodeName ( ) ) ; if ( test == 0 ) { return i ; } else if ( test < 0 ) { last = i - 1 ; } else { first = i + 1 ; } } if ( first > i ) { i = first ; } } return - 1 - i ; } protected int findNamePoint ( String namespaceURI , String name ) { if ( nodes == null ) return - 1 ; if ( name == null ) return - 1 ; for ( int i = 0 ; i < nodes . size ( ) ; i ++ ) { NodeImpl a = ( NodeImpl ) nodes . elementAt ( i ) ; String aNamespaceURI = a . getNamespaceURI ( ) ; String aLocalName = a . getLocalName ( ) ; if ( namespaceURI == null ) { if ( aNamespaceURI == null && ( name . equals ( aLocalName ) || ( aLocalName == null && name . equals ( a . getNodeName ( ) ) ) ) ) return i ; } else { if ( namespaceURI . equals ( aNamespaceURI ) && name . equals ( aLocalName ) ) return i ; } } return - 1 ; } } 	0	['22', '1', '1', '8', '49', '41', '6', '2', '9', '0.843537415', '596', '0.857142857', '1', '0', '0.227272727', '0', '0', '25.77272727', '11', '2.4545', '0']
package org . apache . xerces . validators . datatype ; import java . util . Hashtable ; import java . util . Locale ; import org . apache . xerces . utils . XMLCharacterProperties ; import org . apache . xerces . utils . XMLMessages ; public class IDDatatypeValidator extends AbstractDatatypeValidator { private DatatypeValidator fBaseValidator = null ; private Object fNullValue = null ; private DatatypeMessageProvider fMessageProvider = new DatatypeMessageProvider ( ) ; private Hashtable fTableOfId ; private Locale fLocale = null ; public static final int IDREF_STORE = 0 ; public static final int ID_CLEAR = 1 ; public IDDatatypeValidator ( ) throws InvalidDatatypeFacetException { this ( null , null , false ) ; } public IDDatatypeValidator ( DatatypeValidator base , Hashtable facets , boolean derivedByList ) throws InvalidDatatypeFacetException { } public Object validate ( String content , Object IDStorage ) throws InvalidDatatypeValueException { StateMessageDatatype message ; if ( IDStorage != null ) { message = ( StateMessageDatatype ) IDStorage ; if ( message . getDatatypeState ( ) == IDDatatypeValidator . ID_CLEAR ) { if ( this . fTableOfId != null ) { this . fTableOfId . clear ( ) ; this . fTableOfId = null ; } return null ; } } if ( ! XMLCharacterProperties . validName ( content ) ) { InvalidDatatypeValueException error = new InvalidDatatypeValueException ( "ID is not valid: " + content ) ; error . setMinorCode ( XMLMessages . MSG_ID_INVALID ) ; error . setMajorCode ( XMLMessages . VC_ID ) ; throw error ; } if ( ! addId ( content , IDStorage ) ) { InvalidDatatypeValueException error = new InvalidDatatypeValueException ( "ID '" + content + "'  has to be unique" ) ; error . setMinorCode ( XMLMessages . MSG_ID_NOT_UNIQUE ) ; error . setMajorCode ( XMLMessages . VC_ID ) ; throw error ; } return fTableOfId ; } public int compare ( String content1 , String content2 ) { return - 1 ; } public Hashtable getFacets ( ) { return null ; } public Object clone ( ) throws CloneNotSupportedException { throw new CloneNotSupportedException ( "clone() is not supported in " + this . getClass ( ) . getName ( ) ) ; } private void setBasetype ( DatatypeValidator base ) { fBaseValidator = base ; } private boolean addId ( String content , Object idTable ) { if ( this . fTableOfId == null ) { this . fTableOfId = new Hashtable ( ) ; } else if ( this . fTableOfId . containsKey ( content ) ) { return false ; } if ( this . fNullValue == null ) { fNullValue = new Object ( ) ; } try { this . fTableOfId . put ( content , fNullValue ) ; } catch ( Exception ex ) { ex . printStackTrace ( ) ; } return true ; } public void setLocale ( Locale locale ) { fLocale = locale ; } private String getErrorString ( int major , int minor , Object args [ ] ) { try { return fMessageProvider . createMessage ( fLocale , major , minor , args ) ; } catch ( Exception e ) { return "Illegal Errorcode " + minor ; } } } 	1	['10', '2', '0', '8', '31', '33', '1', '7', '7', '0.857142857', '195', '0.714285714', '2', '0.333333333', '0.244444444', '0', '0', '17.8', '4', '1.1', '3']
package org . apache . wml . dom ; import org . apache . wml . * ; public class WMLStrongElementImpl extends WMLElementImpl implements WMLStrongElement { public WMLStrongElementImpl ( WMLDocumentImpl owner , String tagName ) { super ( owner , tagName ) ; } public void setClassName ( String newValue ) { setAttribute ( "class" , newValue ) ; } public String getClassName ( ) { return getAttribute ( "class" ) ; } public void setXmlLang ( String newValue ) { setAttribute ( "xml:lang" , newValue ) ; } public String getXmlLang ( ) { return getAttribute ( "xml:lang" ) ; } public void setId ( String newValue ) { setAttribute ( "id" , newValue ) ; } public String getId ( ) { return getAttribute ( "id" ) ; } } 	0	['7', '4', '0', '3', '10', '21', '0', '3', '7', '2', '39', '0', '0', '0.931818182', '0.571428571', '1', '6', '4.571428571', '1', '0.8571', '0']
package org . apache . xerces . dom ; import org . w3c . dom . * ; public class DeferredCommentImpl extends CommentImpl implements DeferredNode { static final long serialVersionUID = 6498796371083589338L ; protected transient int fNodeIndex ; DeferredCommentImpl ( DeferredDocumentImpl ownerDocument , int nodeIndex ) { super ( ownerDocument , null ) ; fNodeIndex = nodeIndex ; needsSyncData ( true ) ; } public int getNodeIndex ( ) { return fNodeIndex ; } protected void synchronizeData ( ) { needsSyncData ( false ) ; DeferredDocumentImpl ownerDocument = ( DeferredDocumentImpl ) this . ownerDocument ( ) ; data = ownerDocument . getNodeValueString ( fNodeIndex ) ; } } 	1	['3', '4', '0', '4', '7', '0', '1', '4', '1', '0.75', '33', '0.5', '0', '0.966101695', '0.555555556', '2', '7', '9.333333333', '1', '0.6667', '2']
package org . apache . xerces . utils ; import java . lang . * ; public final class Base64 { static private final int BASELENGTH = 255 ; static private final int LOOKUPLENGTH = 64 ; static private final int TWENTYFOURBITGROUP = 24 ; static private final int EIGHTBIT = 8 ; static private final int SIXTEENBIT = 16 ; static private final int SIXBIT = 6 ; static private final int FOURBYTE = 4 ; static private final int SIGN = - 128 ; static private final byte PAD = ( byte ) '=' ; static private final boolean fDebug = false ; static private byte [ ] base64Alphabet = new byte [ BASELENGTH ] ; static private byte [ ] lookUpBase64Alphabet = new byte [ LOOKUPLENGTH ] ; static { for ( int i = 0 ; i < BASELENGTH ; i ++ ) { base64Alphabet [ i ] = - 1 ; } for ( int i = 'Z' ; i >= 'A' ; i -- ) { base64Alphabet [ i ] = ( byte ) ( i - 'A' ) ; } for ( int i = 'z' ; i >= 'a' ; i -- ) { base64Alphabet [ i ] = ( byte ) ( i - 'a' + 26 ) ; } for ( int i = '9' ; i >= '0' ; i -- ) { base64Alphabet [ i ] = ( byte ) ( i - '0' + 52 ) ; } base64Alphabet [ '+' ] = 62 ; base64Alphabet [ '/' ] = 63 ; for ( int i = 0 ; i <= 25 ; i ++ ) lookUpBase64Alphabet [ i ] = ( byte ) ( 'A' + i ) ; for ( int i = 26 , j = 0 ; i <= 51 ; i ++ , j ++ ) lookUpBase64Alphabet [ i ] = ( byte ) ( 'a' + j ) ; for ( int i = 52 , j = 0 ; i <= 61 ; i ++ , j ++ ) lookUpBase64Alphabet [ i ] = ( byte ) ( '0' + j ) ; lookUpBase64Alphabet [ 62 ] = ( byte ) '+' ; lookUpBase64Alphabet [ 63 ] = ( byte ) '/' ; } public static boolean isBase64 ( String isValidString ) { return ( isArrayByteBase64 ( isValidString . getBytes ( ) ) ) ; } public static boolean isBase64 ( byte octect ) { return ( octect == PAD || base64Alphabet [ octect ] != - 1 ) ; } public static boolean isArrayByteBase64 ( byte [ ] arrayOctect ) { int length = arrayOctect . length ; if ( length == 0 ) return false ; for ( int i = 0 ; i < length ; i ++ ) { if ( Base64 . isBase64 ( arrayOctect [ i ] ) == false ) return false ; } return true ; } public static byte [ ] encode ( byte [ ] binaryData ) { int lengthDataBits = binaryData . length * EIGHTBIT ; int fewerThan24bits = lengthDataBits % TWENTYFOURBITGROUP ; int numberTriplets = lengthDataBits / TWENTYFOURBITGROUP ; byte encodedData [ ] = null ; if ( fewerThan24bits != 0 ) encodedData = new byte [ ( numberTriplets + 1 ) * 4 ] ; else encodedData = new byte [ numberTriplets * 4 ] ; byte k = 0 , l = 0 , b1 = 0 , b2 = 0 , b3 = 0 ; int encodedIndex = 0 ; int dataIndex = 0 ; int i = 0 ; if ( fDebug ) { System . out . println ( "number of triplets = " + numberTriplets ) ; } for ( i = 0 ; i < numberTriplets ; i ++ ) { dataIndex = i * 3 ; b1 = binaryData [ dataIndex ] ; b2 = binaryData [ dataIndex + 1 ] ; b3 = binaryData [ dataIndex + 2 ] ; if ( fDebug ) { System . out . println ( "b1= " + b1 + ", b2= " + b2 + ", b3= " + b3 ) ; } l = ( byte ) ( b2 & 0x0f ) ; k = ( byte ) ( b1 & 0x03 ) ; encodedIndex = i * 4 ; byte val1 = ( ( b1 & SIGN ) == 0 ) ? ( byte ) ( b1 > > 2 ) : ( byte ) ( ( b1 ) > > 2 ^ 0xc0 ) ; byte val2 = ( ( b2 & SIGN ) == 0 ) ? ( byte ) ( b2 > > 4 ) : ( byte ) ( ( b2 ) > > 4 ^ 0xf0 ) ; byte val3 = ( ( b3 & SIGN ) == 0 ) ? ( byte ) ( b3 > > 6 ) : ( byte ) ( ( b3 ) > > 6 ^ 0xfc ) ; encodedData [ encodedIndex ] = lookUpBase64Alphabet [ val1 ] ; if ( fDebug ) { System . out . println ( "val2 = " + val2 ) ; System . out . println ( "k4   = " + ( k << 4 ) ) ; System . out . println ( "vak  = " + ( val2 | ( k << 4 ) ) ) ; } encodedData [ encodedIndex + 1 ] = lookUpBase64Alphabet [ val2 | ( k << 4 ) ] ; encodedData [ encodedIndex + 2 ] = lookUpBase64Alphabet [ ( l << 2 ) | val3 ] ; encodedData [ encodedIndex + 3 ] = lookUpBase64Alphabet [ b3 & 0x3f ] ; } dataIndex = i * 3 ; encodedIndex = i * 4 ; if ( fewerThan24bits == EIGHTBIT ) { b1 = binaryData [ dataIndex ] ; k = ( byte ) ( b1 & 0x03 ) ; if ( fDebug ) { System . out . println ( "b1=" + b1 ) ; System . out . println ( "b1<<2 = " + ( b1 > > 2 ) ) ; } byte val1 = ( ( b1 & SIGN ) == 0 ) ? ( byte ) ( b1 > > 2 ) : ( byte ) ( ( b1 ) > > 2 ^ 0xc0 ) ; encodedData [ encodedIndex ] = lookUpBase64Alphabet [ val1 ] ; encodedData [ encodedIndex + 1 ] = lookUpBase64Alphabet [ k << 4 ] ; encodedData [ encodedIndex + 2 ] = PAD ; encodedData [ encodedIndex + 3 ] = PAD ; } else if ( fewerThan24bits == SIXTEENBIT ) { b1 = binaryData [ dataIndex ] ; b2 = binaryData [ dataIndex + 1 ] ; l = ( byte ) ( b2 & 0x0f ) ; k = ( byte ) ( b1 & 0x03 ) ; byte val1 = ( ( b1 & SIGN ) == 0 ) ? ( byte ) ( b1 > > 2 ) : ( byte ) ( ( b1 ) > > 2 ^ 0xc0 ) ; byte val2 = ( ( b2 & SIGN ) == 0 ) ? ( byte ) ( b2 > > 4 ) : ( byte ) ( ( b2 ) > > 4 ^ 0xf0 ) ; encodedData [ encodedIndex ] = lookUpBase64Alphabet [ val1 ] ; encodedData [ encodedIndex + 1 ] = lookUpBase64Alphabet [ val2 | ( k << 4 ) ] ; encodedData [ encodedIndex + 2 ] = lookUpBase64Alphabet [ l << 2 ] ; encodedData [ encodedIndex + 3 ] = PAD ; } return encodedData ; } public static byte [ ] decode ( byte [ ] base64Data ) { int numberQuadruple = base64Data . length / FOURBYTE ; byte decodedData [ ] = null ; byte b1 = 0 , b2 = 0 , b3 = 0 , b4 = 0 , marker0 = 0 , marker1 = 0 ; int encodedIndex = 0 ; int dataIndex = 0 ; decodedData = new byte [ numberQuadruple * 3 + 1 ] ; for ( int i = 0 ; i < numberQuadruple ; i ++ ) { dataIndex = i * 4 ; marker0 = base64Data [ dataIndex + 2 ] ; marker1 = base64Data [ dataIndex + 3 ] ; b1 = base64Alphabet [ base64Data [ dataIndex ] ] ; b2 = base64Alphabet [ base64Data [ dataIndex + 1 ] ] ; if ( marker0 != PAD && marker1 != PAD ) { b3 = base64Alphabet [ marker0 ] ; b4 = base64Alphabet [ marker1 ] ; decodedData [ encodedIndex ] = ( byte ) ( b1 << 2 | b2 > > 4 ) ; decodedData [ encodedIndex + 1 ] = ( byte ) ( ( ( b2 & 0xf ) << 4 ) | ( ( b3 > > 2 ) & 0xf ) ) ; decodedData [ encodedIndex + 2 ] = ( byte ) ( b3 << 6 | b4 ) ; } else if ( marker0 == PAD ) { decodedData [ encodedIndex ] = ( byte ) ( b1 << 2 | b2 > > 4 ) ; decodedData [ encodedIndex + 1 ] = ( byte ) ( ( b2 & 0xf ) << 4 ) ; decodedData [ encodedIndex + 2 ] = ( byte ) 0 ; } else if ( marker1 == PAD ) { b3 = base64Alphabet [ marker0 ] ; decodedData [ encodedIndex ] = ( byte ) ( b1 << 2 | b2 > > 4 ) ; decodedData [ encodedIndex + 1 ] = ( byte ) ( ( ( b2 & 0xf ) << 4 ) | ( ( b3 > > 2 ) & 0xf ) ) ; decodedData [ encodedIndex + 2 ] = ( byte ) ( b3 << 6 ) ; } encodedIndex += 3 ; } return decodedData ; } } 	0	['7', '1', '0', '1', '9', '13', '1', '0', '6', '1.083333333', '720', '1', '0', '0', '0.25', '0', '0', '100.1428571', '11', '3.5714', '0']
package org . apache . xerces . validators . schema . identity ; import org . apache . xerces . framework . XMLAttrList ; import org . apache . xerces . utils . IntStack ; import org . apache . xerces . utils . QName ; import org . apache . xerces . utils . NamespacesScope ; import org . apache . xerces . utils . StringPool ; public class XPathMatcher { protected static final boolean DEBUG_ALL = false ; protected static final boolean DEBUG_METHODS = false || DEBUG_ALL ; protected static final boolean DEBUG_METHODS2 = false || DEBUG_METHODS || DEBUG_ALL ; protected static final boolean DEBUG_METHODS3 = false || DEBUG_METHODS || DEBUG_ALL ; protected static final boolean DEBUG_MATCH = false || DEBUG_ALL ; protected static final boolean DEBUG_STACK = false || DEBUG_ALL ; protected static final boolean DEBUG_ANY = DEBUG_METHODS || DEBUG_METHODS2 || DEBUG_METHODS3 || DEBUG_MATCH || DEBUG_STACK ; private XPath . LocationPath fLocationPath ; private boolean fShouldBufferContent ; private boolean fBufferContent ; private StringBuffer fMatchedBuffer = new StringBuffer ( ) ; private boolean fMatched ; private String fMatchedString ; private IntStack fStepIndexes = new IntStack ( ) ; private int fCurrentStep ; private int fNoMatchDepth ; protected StringPool fStringPool ; protected NamespacesScope fNamespacesScope ; public XPathMatcher ( XPath xpath ) { this ( xpath , false ) ; } public XPathMatcher ( XPath xpath , boolean shouldBufferContent ) { fLocationPath = xpath . getLocationPath ( ) ; fShouldBufferContent = shouldBufferContent ; if ( DEBUG_METHODS ) { System . out . println ( toString ( ) + "#<init>()" ) ; } } public boolean isMatched ( ) { return fMatched ; } public String getMatchedString ( ) { return fMatchedString ; } protected void matched ( String content ) throws Exception { if ( DEBUG_METHODS3 ) { System . out . println ( toString ( ) + "#matched(\"" + normalize ( content ) + "\")" ) ; } } public void startDocumentFragment ( StringPool stringPool , NamespacesScope namespacesScope ) throws Exception { if ( DEBUG_METHODS ) { System . out . println ( toString ( ) + "#startDocumentFragment(" + "stringPool=" + stringPool + ',' + "namespacesScope=" + namespacesScope + ")" ) ; } clear ( ) ; fMatchedBuffer . setLength ( 0 ) ; fStepIndexes . clear ( ) ; fCurrentStep = 0 ; fNoMatchDepth = 0 ; fStringPool = stringPool ; fNamespacesScope = namespacesScope ; if ( namespacesScope == null ) { fNamespacesScope = new NamespacesScope ( ) ; } } public void startElement ( QName element , XMLAttrList attributes , int handle ) throws Exception { if ( DEBUG_METHODS2 ) { System . out . println ( toString ( ) + "#startElement(" + "element={" + "prefix=" + fStringPool . toString ( element . prefix ) + ',' + "localpart=" + fStringPool . toString ( element . localpart ) + ',' + "rawname=" + fStringPool . toString ( element . rawname ) + ',' + "uri=" + fStringPool . toString ( element . uri ) + "}," + "attributes=..." + ")" ) ; } int startStep = fCurrentStep ; fStepIndexes . push ( startStep ) ; if ( DEBUG_STACK ) { System . out . println ( toString ( ) + ": " + fStepIndexes ) ; } if ( fMatched || fNoMatchDepth > 0 ) { fNoMatchDepth ++ ; return ; } XPath . Step [ ] steps = fLocationPath . steps ; while ( fCurrentStep < steps . length && steps [ fCurrentStep ] . axis . type == XPath . Axis . SELF ) { if ( DEBUG_MATCH ) { XPath . Step step = steps [ fCurrentStep ] ; System . out . println ( toString ( ) + " [SELF] MATCHED!" ) ; } fCurrentStep ++ ; } if ( fCurrentStep == steps . length ) { if ( DEBUG_MATCH ) { System . out . println ( toString ( ) + " XPath MATCHED!" ) ; } fMatched = true ; fBufferContent = true && fShouldBufferContent ; } if ( fCurrentStep == startStep && steps [ fCurrentStep ] . axis . type == XPath . Axis . CHILD ) { XPath . Step step = steps [ fCurrentStep ] ; XPath . NodeTest nodeTest = step . nodeTest ; if ( DEBUG_MATCH ) { System . out . println ( toString ( ) + " [CHILD] before" ) ; } if ( nodeTest . type == XPath . NodeTest . QNAME ) { if ( element . uri == StringPool . EMPTY_STRING ) { element . uri = - 1 ; } if ( ! nodeTest . name . equals ( element ) ) { fNoMatchDepth ++ ; if ( DEBUG_MATCH ) { System . out . println ( toString ( ) + " [CHILD] after NO MATCH" ) ; } return ; } } fCurrentStep ++ ; if ( DEBUG_MATCH ) { System . out . println ( toString ( ) + " [CHILD] after MATCHED!" ) ; } } if ( fCurrentStep == steps . length ) { fMatched = true ; fBufferContent = true && fShouldBufferContent ; } if ( fCurrentStep < steps . length && steps [ fCurrentStep ] . axis . type == XPath . Axis . ATTRIBUTE ) { if ( DEBUG_MATCH ) { System . out . println ( toString ( ) + " [ATTRIBUTE] before" ) ; } int aindex = attributes . getFirstAttr ( handle ) ; if ( aindex != - 1 ) { XPath . NodeTest nodeTest = steps [ fCurrentStep ] . nodeTest ; QName aname = new QName ( ) ; while ( aindex != - 1 ) { int aprefix = attributes . getAttrPrefix ( aindex ) ; int alocalpart = attributes . getAttrLocalpart ( aindex ) ; int arawname = attributes . getAttrName ( aindex ) ; int auri = attributes . getAttrURI ( aindex ) ; if ( auri == StringPool . EMPTY_STRING ) { auri = - 1 ; } aname . setValues ( aprefix , alocalpart , arawname , auri ) ; if ( nodeTest . type != XPath . NodeTest . QNAME || nodeTest . name . equals ( aname ) ) { fCurrentStep ++ ; if ( fCurrentStep == steps . length ) { fMatched = true ; int avalue = attributes . getAttValue ( aindex ) ; fMatchedString = fStringPool . toString ( avalue ) ; matched ( fMatchedString ) ; } break ; } aindex = attributes . getNextAttr ( aindex ) ; } } if ( ! fMatched ) { fNoMatchDepth ++ ; if ( DEBUG_MATCH ) { System . out . println ( toString ( ) + " [ATTRIBUTE] after" ) ; } return ; } if ( DEBUG_MATCH ) { System . out . println ( toString ( ) + " [ATTRIBUTE] after MATCHED!" ) ; } } } public void characters ( char [ ] ch , int offset , int length ) throws Exception { if ( DEBUG_METHODS ) { System . out . println ( toString ( ) + "#characters(" + "text=" + normalize ( new String ( ch , offset , length ) ) + ")" ) ; } if ( fBufferContent && fNoMatchDepth == 0 ) { if ( ! DEBUG_METHODS && DEBUG_METHODS2 ) { System . out . println ( toString ( ) + "#characters(" + "text=" + normalize ( new String ( ch , offset , length ) ) + ")" ) ; } fMatchedBuffer . append ( ch , offset , length ) ; } } public void endElement ( QName element ) throws Exception { if ( DEBUG_METHODS2 ) { System . out . println ( toString ( ) + "#endElement(" + "element={" + "prefix=" + fStringPool . toString ( element . prefix ) + ',' + "localpart=" + fStringPool . toString ( element . localpart ) + ',' + "rawname=" + fStringPool . toString ( element . rawname ) + ',' + "uri=" + fStringPool . toString ( element . uri ) + "})" ) ; } fCurrentStep = fStepIndexes . pop ( ) ; if ( fNoMatchDepth > 0 ) { fNoMatchDepth -- ; return ; } if ( fBufferContent ) { fBufferContent = false ; fMatchedString = fMatchedBuffer . toString ( ) ; matched ( fMatchedString ) ; } clear ( ) ; if ( DEBUG_STACK ) { System . out . println ( toString ( ) + ": " + fStepIndexes ) ; } } public void endDocumentFragment ( ) throws Exception { if ( DEBUG_METHODS ) { System . out . println ( toString ( ) + "#endDocumentFragment()" ) ; } clear ( ) ; } public String toString ( ) { StringBuffer str = new StringBuffer ( ) ; String s = super . toString ( ) ; int index2 = s . lastIndexOf ( '.' ) ; if ( index2 != - 1 ) { s = s . substring ( index2 + 1 ) ; } str . append ( s ) ; str . append ( '[' ) ; XPath . Step [ ] steps = fLocationPath . steps ; for ( int i = 0 ; i < steps . length ; i ++ ) { if ( i == fCurrentStep ) { str . append ( '^' ) ; } str . append ( steps [ i ] . toString ( ) ) ; if ( i < steps . length - 1 ) { str . append ( '/' ) ; } } if ( fCurrentStep == steps . length ) { str . append ( '^' ) ; } str . append ( ']' ) ; return str . toString ( ) ; } private void clear ( ) { fBufferContent = false ; fMatchedBuffer . setLength ( 0 ) ; fMatched = false ; fMatchedString = null ; } private String normalize ( String s ) { StringBuffer str = new StringBuffer ( ) ; int length = s . length ( ) ; for ( int i = 0 ; i < length ; i ++ ) { char c = s . charAt ( i ) ; switch ( c ) { case '\n' : { str . append ( "\\n" ) ; break ; } default : { str . append ( c ) ; } } } return str . toString ( ) ; } } 	1	['13', '1', '2', '17', '43', '30', '7', '10', '10', '0.861111111', '498', '1', '4', '0', '0.2', '0', '0', '35.92307692', '6', '1.4615', '1']
package org . apache . xml . serialize ; import java . io . ByteArrayOutputStream ; import java . io . IOException ; import java . io . OutputStreamWriter ; import java . io . Writer ; public class SieveEncodingInfo extends EncodingInfo { BAOutputStream checkerStream = null ; Writer checkerWriter = null ; String dangerChars = null ; public SieveEncodingInfo ( String mimeName , String javaName , int lastPrintable , String dangers ) { super ( mimeName , javaName , lastPrintable ) ; this . dangerChars = dangers ; } public SieveEncodingInfo ( String mimeName , int lastPrintable ) { this ( mimeName , mimeName , lastPrintable , null ) ; } public boolean isPrintable ( int ch ) { if ( this . dangerChars != null && ch <= 0xffff ) { if ( this . dangerChars . indexOf ( ch ) >= 0 ) return false ; } if ( ch <= this . lastPrintable ) return true ; boolean printable = true ; synchronized ( this ) { try { if ( this . checkerWriter == null ) { this . checkerStream = new BAOutputStream ( 10 ) ; this . checkerWriter = new OutputStreamWriter ( this . checkerStream , this . javaName ) ; } if ( ch > 0xffff ) { this . checkerWriter . write ( ( ( ch - 0x10000 ) > > 10 ) + 0xd800 ) ; this . checkerWriter . write ( ( ( ch - 0x10000 ) & 0x3ff ) + 0xdc00 ) ; byte [ ] result = this . checkerStream . getBuffer ( ) ; if ( this . checkerStream . size ( ) == 2 && result [ 0 ] == '?' && result [ 1 ] == '?' ) printable = false ; } else { this . checkerWriter . write ( ch ) ; this . checkerWriter . flush ( ) ; byte [ ] result = this . checkerStream . getBuffer ( ) ; if ( this . checkerStream . size ( ) == 1 && result [ 0 ] == '?' ) printable = false ; } this . checkerStream . reset ( ) ; } catch ( IOException ioe ) { printable = false ; } } return printable ; } static class BAOutputStream extends ByteArrayOutputStream { BAOutputStream ( ) { super ( ) ; } BAOutputStream ( int size ) { super ( size ) ; } byte [ ] getBuffer ( ) { return this . buf ; } } } 	0	['3', '2', '0', '3', '12', '1', '1', '2', '3', '0', '159', '0', '1', '0.75', '0.888888889', '0', '0', '51', '9', '3', '0']
package org . w3c . dom ; public interface Entity extends Node { public String getPublicId ( ) ; public String getSystemId ( ) ; public String getNotationName ( ) ; } 	1	['3', '1', '0', '0', '3', '3', '0', '0', '3', '2', '3', '0', '0', '0', '1', '0', '0', '0', '1', '1', '2']
package org . w3c . dom . html ; public interface HTMLHRElement extends HTMLElement { public String getAlign ( ) ; public void setAlign ( String align ) ; public boolean getNoShade ( ) ; public void setNoShade ( boolean noShade ) ; public String getSize ( ) ; public void setSize ( String size ) ; public String getWidth ( ) ; public void setWidth ( String width ) ; } 	0	['8', '1', '0', '0', '8', '28', '0', '0', '8', '2', '8', '0', '0', '0', '0.5', '0', '0', '0', '1', '1', '0']
package org . apache . xerces . jaxp ; import java . io . IOException ; import javax . xml . parsers . DocumentBuilder ; import javax . xml . parsers . ParserConfigurationException ; import org . apache . xerces . parsers . DOMParser ; import org . xml . sax . EntityResolver ; import org . xml . sax . ErrorHandler ; import org . xml . sax . InputSource ; import org . xml . sax . SAXException ; import org . w3c . dom . Document ; public class DocumentBuilderImpl extends DocumentBuilder { private boolean namespaces = false ; private boolean validation = false ; private DOMParser parser = null ; private DocumentBuilderImpl ( ) { super ( ) ; } protected DocumentBuilderImpl ( boolean namespaces , boolean validation ) throws ParserConfigurationException { this ( ) ; DOMParser p = new DOMParser ( ) ; try { p . setFeature ( "http://xml.org/sax/features/namespaces" , namespaces ) ; } catch ( SAXException e ) { throw new ParserConfigurationException ( "Cannot set namespace " + "awareness to " + namespaces ) ; } try { p . setFeature ( "http://xml.org/sax/features/validation" , validation ) ; } catch ( SAXException e ) { throw new ParserConfigurationException ( "Cannot set validation to " + validation ) ; } this . namespaces = namespaces ; this . validation = validation ; this . parser = p ; } public Document parse ( InputSource source ) throws SAXException , IOException , IllegalArgumentException { if ( source == null ) throw new IllegalArgumentException ( ) ; this . parser . parse ( source ) ; return ( this . parser . getDocument ( ) ) ; } public Document newDocument ( ) { return ( new org . apache . xerces . dom . DocumentImpl ( ) ) ; } public boolean isNamespaceAware ( ) { return ( this . namespaces ) ; } public boolean isValidating ( ) { return ( this . validation ) ; } public void setEntityResolver ( EntityResolver er ) { this . parser . setEntityResolver ( er ) ; } public void setErrorHandler ( ErrorHandler eh ) { this . parser . setErrorHandler ( eh ) ; } } 	1	['8', '2', '0', '3', '22', '0', '1', '2', '6', '0.619047619', '109', '1', '1', '0.7', '0.3', '1', '1', '12.25', '1', '0.75', '2']
package org . apache . xerces . framework ; import org . apache . xerces . utils . QName ; public interface XMLDocumentHandler { public void startDocument ( ) throws Exception ; public void endDocument ( ) throws Exception ; public void xmlDecl ( int version , int encoding , int standalone ) throws Exception ; public void textDecl ( int version , int encoding ) throws Exception ; public void startNamespaceDeclScope ( int prefix , int uri ) throws Exception ; public void endNamespaceDeclScope ( int prefix ) throws Exception ; public void startElement ( QName element , XMLAttrList attrList , int attrListHandle ) throws Exception ; public void endElement ( QName element ) throws Exception ; public void startEntityReference ( int entityName , int entityType , int entityContext ) throws Exception ; public void endEntityReference ( int entityName , int entityType , int entityContext ) throws Exception ; public void processingInstruction ( int target , int data ) throws Exception ; public void comment ( int comment ) throws Exception ; public void characters ( int data ) throws Exception ; public void characters ( char ch [ ] , int start , int length ) throws Exception ; public void ignorableWhitespace ( int data ) throws Exception ; public void ignorableWhitespace ( char ch [ ] , int start , int length ) throws Exception ; public void startCDATA ( ) throws Exception ; public void endCDATA ( ) throws Exception ; public interface DTDHandler { public void startDTD ( QName rootElement , int publicId , int systemId ) throws Exception ; public void internalSubset ( int internalSubset ) throws Exception ; public void textDecl ( int version , int encoding ) throws Exception ; public void endDTD ( ) throws Exception ; public void elementDecl ( QName elementDecl , int contentSpecType , int contentSpecIndex , XMLContentSpec . Provider contentSpecProvider ) throws Exception ; public void attlistDecl ( QName elementDecl , QName attributeDecl , int attType , boolean attList , String enumString , int attDefaultType , int attDefaultValue ) throws Exception ; public void internalPEDecl ( int entityName , int entityValue ) throws Exception ; public void externalPEDecl ( int entityName , int publicId , int systemId ) throws Exception ; public void internalEntityDecl ( int entityName , int entityValue ) throws Exception ; public void externalEntityDecl ( int entityName , int publicId , int systemId ) throws Exception ; public void unparsedEntityDecl ( int entityName , int publicId , int systemId , int notationName ) throws Exception ; public void notationDecl ( int notationName , int publicId , int systemId ) throws Exception ; public void processingInstruction ( int targetIndex , int dataIndex ) throws Exception ; public void comment ( int dataIndex ) throws Exception ; } } 	0	['18', '1', '0', '6', '18', '153', '4', '2', '18', '2', '18', '0', '0', '0', '0.4', '0', '0', '0', '1', '1', '0']
package org . apache . xerces . validators . schema . identity ; import org . apache . xerces . utils . NamespacesScope ; import org . apache . xerces . utils . QName ; import org . apache . xerces . utils . StringPool ; public class XPath { private static final boolean DEBUG_ALL = false ; private static final boolean DEBUG_XPATH_PARSE = DEBUG_ALL || false ; private static final boolean DEBUG_ANY = DEBUG_XPATH_PARSE ; protected String fExpression ; protected LocationPath fLocationPath ; protected StringPool fStringPool ; public XPath ( String xpath , StringPool stringPool , NamespacesScope context ) throws XPathException { fExpression = xpath ; fStringPool = stringPool ; parseExpression ( context ) ; } public LocationPath getLocationPath ( ) { return ( LocationPath ) fLocationPath . clone ( ) ; } public String toString ( ) { return fLocationPath . toString ( ) ; } private void parseExpression ( final NamespacesScope context ) throws XPathException { final XPath . Tokens xtokens = new XPath . Tokens ( fStringPool ) ; XPath . Scanner scanner = new XPath . Scanner ( fStringPool ) { protected void addToken ( XPath . Tokens tokens , int token ) throws XPathException { if ( token == XPath . Tokens . EXPRTOKEN_ATSIGN || token == XPath . Tokens . EXPRTOKEN_AXISNAME_ATTRIBUTE || token == XPath . Tokens . EXPRTOKEN_AXISNAME_CHILD || token == XPath . Tokens . EXPRTOKEN_DOUBLE_COLON || token == XPath . Tokens . EXPRTOKEN_NAMETEST_QNAME || token == XPath . Tokens . EXPRTOKEN_OPERATOR_SLASH || token == XPath . Tokens . EXPRTOKEN_PERIOD ) { super . addToken ( tokens , token ) ; return ; } StringBuffer str = new StringBuffer ( ) ; str . append ( "token not supported: " ) ; String tokenName = tokens . getTokenName ( token ) ; if ( tokenName != null ) { str . append ( '"' ) ; str . append ( tokenName ) ; str . append ( '"' ) ; } else { str . append ( '(' ) ; str . append ( token ) ; str . append ( ')' ) ; } String message = str . toString ( ) ; throw new XPathException ( message ) ; } } ; int length = fExpression . length ( ) ; boolean success = scanner . scanExpr ( fStringPool , xtokens , fExpression , 0 , length ) ; java . util . Vector stepsVector = new java . util . Vector ( ) ; int tokenCount = xtokens . getTokenCount ( ) ; for ( int i = 0 ; i < tokenCount ; i ++ ) { int token = xtokens . getToken ( i ) ; switch ( token ) { case XPath . Tokens . EXPRTOKEN_AXISNAME_ATTRIBUTE : { i ++ ; } case XPath . Tokens . EXPRTOKEN_ATSIGN : { if ( i == tokenCount - 1 ) { throw new XPathException ( "missing attribute name" ) ; } token = xtokens . getToken ( ++ i ) ; if ( token != XPath . Tokens . EXPRTOKEN_NAMETEST_QNAME ) { throw new XPathException ( "expected " + xtokens . getTokenName ( XPath . Tokens . EXPRTOKEN_NAMETEST_QNAME ) + ", found " + xtokens . getTokenName ( token ) ) ; } token = xtokens . getToken ( ++ i ) ; int prefix = xtokens . getTokenString ( token ) ; int uri = context != null ? context . getNamespaceForPrefix ( prefix ) : - 1 ; if ( prefix != - 1 && context != null && uri == - 1 ) { throw new XPathException ( "prefix " + fStringPool . toString ( prefix ) + " not bound to namespace URI" ) ; } token = xtokens . getToken ( ++ i ) ; int localpart = xtokens . getTokenString ( token ) ; int rawname = prefix != - 1 ? fStringPool . addSymbol ( fStringPool . toString ( prefix ) + ':' + fStringPool . toString ( localpart ) ) : localpart ; Axis axis = new Axis ( Axis . ATTRIBUTE ) ; NodeTest nodeTest = new NodeTest ( fStringPool , new QName ( prefix , localpart , rawname , uri ) ) ; Step step = new Step ( axis , nodeTest ) ; stepsVector . addElement ( step ) ; break ; } case XPath . Tokens . EXPRTOKEN_DOUBLE_COLON : { throw new XPathException ( "Not allowed to have double colon here" ) ; } case XPath . Tokens . EXPRTOKEN_AXISNAME_CHILD : { i ++ ; } case XPath . Tokens . EXPRTOKEN_NAMETEST_QNAME : { token = xtokens . getToken ( ++ i ) ; int prefix = xtokens . getTokenString ( token ) ; int uri = context != null ? context . getNamespaceForPrefix ( prefix ) : - 1 ; if ( prefix != - 1 && context != null && uri == - 1 ) { throw new XPathException ( "prefix " + fStringPool . toString ( prefix ) + " not bound to namespace URI" ) ; } token = xtokens . getToken ( ++ i ) ; int localpart = xtokens . getTokenString ( token ) ; int rawname = prefix != - 1 ? fStringPool . addSymbol ( fStringPool . toString ( prefix ) + ':' + fStringPool . toString ( localpart ) ) : localpart ; Axis axis = new Axis ( Axis . CHILD ) ; NodeTest nodeTest = new NodeTest ( fStringPool , new QName ( prefix , localpart , rawname , uri ) ) ; Step step = new Step ( axis , nodeTest ) ; stepsVector . addElement ( step ) ; break ; } case XPath . Tokens . EXPRTOKEN_PERIOD : { Axis axis = new Axis ( Axis . SELF ) ; NodeTest nodeTest = new NodeTest ( NodeTest . NODE ) ; Step step = new Step ( axis , nodeTest ) ; stepsVector . addElement ( step ) ; break ; } case XPath . Tokens . EXPRTOKEN_OPERATOR_SLASH : { if ( i == 0 ) { throw new XPathException ( "not allowed to select the root" ) ; } if ( i == tokenCount - 1 ) { throw new XPathException ( "expected step following '/'" ) ; } break ; } } } int size = stepsVector . size ( ) ; if ( size == 0 ) { throw new XPathException ( "empty xpath expression" ) ; } Step [ ] steps = new Step [ size ] ; stepsVector . copyInto ( steps ) ; fLocationPath = new LocationPath ( steps ) ; if ( DEBUG_XPATH_PARSE ) { System . out . println ( ">>> " + fLocationPath ) ; } } public static class LocationPath implements Cloneable { public Step [ ] steps ; public LocationPath ( Step [ ] steps ) { this . steps = steps ; } protected LocationPath ( LocationPath path ) { steps = new Step [ path . steps . length ] ; for ( int i = 0 ; i < steps . length ; i ++ ) { steps [ i ] = ( Step ) path . steps [ i ] . clone ( ) ; } } public String toString ( ) { StringBuffer str = new StringBuffer ( ) ; for ( int i = 0 ; i < steps . length ; i ++ ) { if ( i > 0 ) { str . append ( '/' ) ; } str . append ( steps [ i ] . toString ( ) ) ; } if ( false ) { str . append ( '[' ) ; String s = super . toString ( ) ; str . append ( s . substring ( s . indexOf ( '@' ) ) ) ; str . append ( ']' ) ; } return str . toString ( ) ; } public Object clone ( ) { return new LocationPath ( this ) ; } } public static class Step implements Cloneable { public Axis axis ; public NodeTest nodeTest ; public Step ( Axis axis , NodeTest nodeTest ) { this . axis = axis ; this . nodeTest = nodeTest ; } protected Step ( Step step ) { axis = ( Axis ) step . axis . clone ( ) ; nodeTest = ( NodeTest ) step . nodeTest . clone ( ) ; } public String toString ( ) { if ( axis . type == Axis . SELF ) { return "." ; } if ( axis . type == Axis . ATTRIBUTE ) { return "@" + nodeTest . toString ( ) ; } if ( axis . type == Axis . CHILD ) { return nodeTest . toString ( ) ; } return "??? (" + axis . type + ')' ; } public Object clone ( ) { return new Step ( this ) ; } } public static class Axis implements Cloneable { public static final short CHILD = 1 ; public static final short ATTRIBUTE = 2 ; public static final short SELF = 3 ; public short type ; public Axis ( short type ) { this . type = type ; } protected Axis ( Axis axis ) { type = axis . type ; } public String toString ( ) { switch ( type ) { case CHILD : return "child" ; case ATTRIBUTE : return "attribute" ; case SELF : return "self" ; } return "???" ; } public Object clone ( ) { return new Axis ( this ) ; } } public static class NodeTest implements Cloneable { public static final short QNAME = 1 ; public static final short WILDCARD = 2 ; public static final short NODE = 3 ; protected StringPool fStringPool ; public short type ; public final QName name = new QName ( ) ; public NodeTest ( short type ) { this . type = type ; } public NodeTest ( StringPool stringPool , QName name ) { fStringPool = stringPool ; this . type = QNAME ; this . name . setValues ( name ) ; } public NodeTest ( NodeTest nodeTest ) { fStringPool = nodeTest . fStringPool ; type = nodeTest . type ; name . setValues ( nodeTest . name ) ; } public String toString ( ) { switch ( type ) { case QNAME : { if ( name . prefix != - 1 ) { if ( name . uri == - 1 ) { return fStringPool . toString ( name . prefix ) + ':' + fStringPool . toString ( name . localpart ) ; } return "{" + fStringPool . toString ( name . uri ) + '}' + fStringPool . toString ( name . prefix ) + ':' + fStringPool . toString ( name . localpart ) ; } return fStringPool . toString ( name . localpart ) ; } case WILDCARD : { return "*" ; } case NODE : { return "node()" ; } } return "???" ; } public Object clone ( ) { return new NodeTest ( this ) ; } } private static final class Tokens { static final boolean DUMP_TOKENS = false ; public static final int EXPRTOKEN_OPEN_PAREN = - 1000 , EXPRTOKEN_CLOSE_PAREN = - 1001 , EXPRTOKEN_OPEN_BRACKET = - 1002 , EXPRTOKEN_CLOSE_BRACKET = - 1003 , EXPRTOKEN_PERIOD = - 1004 , EXPRTOKEN_DOUBLE_PERIOD = - 1005 , EXPRTOKEN_ATSIGN = - 1006 , EXPRTOKEN_COMMA = - 1007 , EXPRTOKEN_DOUBLE_COLON = - 1008 , EXPRTOKEN_NAMETEST_ANY = - 1009 , EXPRTOKEN_NAMETEST_NAMESPACE = - 1010 , EXPRTOKEN_NAMETEST_QNAME = - 1011 , EXPRTOKEN_NODETYPE_COMMENT = - 1012 , EXPRTOKEN_NODETYPE_TEXT = - 1013 , EXPRTOKEN_NODETYPE_PI = - 1014 , EXPRTOKEN_NODETYPE_NODE = - 1015 , EXPRTOKEN_OPERATOR_AND = - 1016 , EXPRTOKEN_OPERATOR_OR = - 1017 , EXPRTOKEN_OPERATOR_MOD = - 1018 , EXPRTOKEN_OPERATOR_DIV = - 1019 , EXPRTOKEN_OPERATOR_MULT = - 1020 , EXPRTOKEN_OPERATOR_SLASH = - 1021 , EXPRTOKEN_OPERATOR_DOUBLE_SLASH = - 1022 , EXPRTOKEN_OPERATOR_UNION = - 1023 , EXPRTOKEN_OPERATOR_PLUS = - 1024 , EXPRTOKEN_OPERATOR_MINUS = - 1025 , EXPRTOKEN_OPERATOR_EQUAL = - 1026 , EXPRTOKEN_OPERATOR_NOT_EQUAL = - 1027 , EXPRTOKEN_OPERATOR_LESS = - 1028 , EXPRTOKEN_OPERATOR_LESS_EQUAL = - 1029 , EXPRTOKEN_OPERATOR_GREATER = - 1030 , EXPRTOKEN_OPERATOR_GREATER_EQUAL = - 1031 , EXPRTOKEN_FIRST_OPERATOR = EXPRTOKEN_OPERATOR_AND , EXPRTOKEN_LAST_OPERATOR = EXPRTOKEN_OPERATOR_GREATER_EQUAL , EXPRTOKEN_FUNCTION_NAME = - 1032 , EXPRTOKEN_AXISNAME_ANCESTOR = - 1033 , EXPRTOKEN_AXISNAME_ANCESTOR_OR_SELF = - 1034 , EXPRTOKEN_AXISNAME_ATTRIBUTE = - 1035 , EXPRTOKEN_AXISNAME_CHILD = - 1036 , EXPRTOKEN_AXISNAME_DESCENDANT = - 1037 , EXPRTOKEN_AXISNAME_DESCENDANT_OR_SELF = - 1038 , EXPRTOKEN_AXISNAME_FOLLOWING = - 1039 , EXPRTOKEN_AXISNAME_FOLLOWING_SIBLING = - 1040 , EXPRTOKEN_AXISNAME_NAMESPACE = - 1041 , EXPRTOKEN_AXISNAME_PARENT = - 1042 , EXPRTOKEN_AXISNAME_PRECEDING = - 1043 , EXPRTOKEN_AXISNAME_PRECEDING_SIBLING = - 1044 , EXPRTOKEN_AXISNAME_SELF = - 1045 , EXPRTOKEN_LITERAL = - 1046 , EXPRTOKEN_NUMBER = - 1047 , EXPRTOKEN_VARIABLE_REFERENCE = - 1048 ; private static final int INITIAL_TOKEN_COUNT = 1 << 8 ; private int [ ] fTokens = new int [ INITIAL_TOKEN_COUNT ] ; private int fTokenCount = 0 ; private StringPool fStringPool ; private java . util . Hashtable fSymbolMapping = new java . util . Hashtable ( ) ; private java . util . Hashtable fTokenNames = new java . util . Hashtable ( ) ; public Tokens ( StringPool stringPool ) { fStringPool = stringPool ; fTokenNames . put ( new Integer ( EXPRTOKEN_OPEN_PAREN ) , "EXPRTOKEN_OPEN_PAREN" ) ; fTokenNames . put ( new Integer ( EXPRTOKEN_CLOSE_PAREN ) , "EXPRTOKEN_CLOSE_PAREN" ) ; fTokenNames . put ( new Integer ( EXPRTOKEN_OPEN_BRACKET ) , "EXPRTOKEN_OPEN_BRACKET" ) ; fTokenNames . put ( new Integer ( EXPRTOKEN_CLOSE_BRACKET ) , "EXPRTOKEN_CLOSE_BRACKET" ) ; fTokenNames . put ( new Integer ( EXPRTOKEN_PERIOD ) , "EXPRTOKEN_PERIOD" ) ; fTokenNames . put ( new Integer ( EXPRTOKEN_DOUBLE_PERIOD ) , "EXPRTOKEN_DOUBLE_PERIOD" ) ; fTokenNames . put ( new Integer ( EXPRTOKEN_ATSIGN ) , "EXPRTOKEN_ATSIGN" ) ; fTokenNames . put ( new Integer ( EXPRTOKEN_COMMA ) , "EXPRTOKEN_COMMA" ) ; fTokenNames . put ( new Integer ( EXPRTOKEN_DOUBLE_COLON ) , "EXPRTOKEN_DOUBLE_COLON" ) ; fTokenNames . put ( new Integer ( EXPRTOKEN_NAMETEST_ANY ) , "EXPRTOKEN_NAMETEST_ANY" ) ; fTokenNames . put ( new Integer ( EXPRTOKEN_NAMETEST_NAMESPACE ) , "EXPRTOKEN_NAMETEST_NAMESPACE" ) ; fTokenNames . put ( new Integer ( EXPRTOKEN_NAMETEST_QNAME ) , "EXPRTOKEN_NAMETEST_QNAME" ) ; fTokenNames . put ( new Integer ( EXPRTOKEN_NODETYPE_COMMENT ) , "EXPRTOKEN_NODETYPE_COMMENT" ) ; fTokenNames . put ( new Integer ( EXPRTOKEN_NODETYPE_TEXT ) , "EXPRTOKEN_NODETYPE_TEXT" ) ; fTokenNames . put ( new Integer ( EXPRTOKEN_NODETYPE_PI ) , "EXPRTOKEN_NODETYPE_PI" ) ; fTokenNames . put ( new Integer ( EXPRTOKEN_NODETYPE_NODE ) , "EXPRTOKEN_NODETYPE_NODE" ) ; fTokenNames . put ( new Integer ( EXPRTOKEN_OPERATOR_AND ) , "EXPRTOKEN_OPERATOR_AND" ) ; fTokenNames . put ( new Integer ( EXPRTOKEN_OPERATOR_OR ) , "EXPRTOKEN_OPERATOR_OR" ) ; fTokenNames . put ( new Integer ( EXPRTOKEN_OPERATOR_MOD ) , "EXPRTOKEN_OPERATOR_MOD" ) ; fTokenNames . put ( new Integer ( EXPRTOKEN_OPERATOR_DIV ) , "EXPRTOKEN_OPERATOR_DIV" ) ; fTokenNames . put ( new Integer ( EXPRTOKEN_OPERATOR_MULT ) , "EXPRTOKEN_OPERATOR_MULT" ) ; fTokenNames . put ( new Integer ( EXPRTOKEN_OPERATOR_SLASH ) , "EXPRTOKEN_OPERATOR_SLASH" ) ; fTokenNames . put ( new Integer ( EXPRTOKEN_OPERATOR_DOUBLE_SLASH ) , "EXPRTOKEN_OPERATOR_DOUBLE_SLASH" ) ; fTokenNames . put ( new Integer ( EXPRTOKEN_OPERATOR_UNION ) , "EXPRTOKEN_OPERATOR_UNION" ) ; fTokenNames . put ( new Integer ( EXPRTOKEN_OPERATOR_PLUS ) , "EXPRTOKEN_OPERATOR_PLUS" ) ; fTokenNames . put ( new Integer ( EXPRTOKEN_OPERATOR_MINUS ) , "EXPRTOKEN_OPERATOR_MINUS" ) ; fTokenNames . put ( new Integer ( EXPRTOKEN_OPERATOR_EQUAL ) , "EXPRTOKEN_OPERATOR_EQUAL" ) ; fTokenNames . put ( new Integer ( EXPRTOKEN_OPERATOR_NOT_EQUAL ) , "EXPRTOKEN_OPERATOR_NOT_EQUAL" ) ; fTokenNames . put ( new Integer ( EXPRTOKEN_OPERATOR_LESS ) , "EXPRTOKEN_OPERATOR_LESS" ) ; fTokenNames . put ( new Integer ( EXPRTOKEN_OPERATOR_LESS_EQUAL ) , "EXPRTOKEN_OPERATOR_LESS_EQUAL" ) ; fTokenNames . put ( new Integer ( EXPRTOKEN_OPERATOR_GREATER ) , "EXPRTOKEN_OPERATOR_GREATER" ) ; fTokenNames . put ( new Integer ( EXPRTOKEN_OPERATOR_GREATER_EQUAL ) , "EXPRTOKEN_OPERATOR_GREATER_EQUAL" ) ; fTokenNames . put ( new Integer ( EXPRTOKEN_FUNCTION_NAME ) , "EXPRTOKEN_FUNCTION_NAME" ) ; fTokenNames . put ( new Integer ( EXPRTOKEN_AXISNAME_ANCESTOR ) , "EXPRTOKEN_AXISNAME_ANCESTOR" ) ; fTokenNames . put ( new Integer ( EXPRTOKEN_AXISNAME_ANCESTOR_OR_SELF ) , "EXPRTOKEN_AXISNAME_ANCESTOR_OR_SELF" ) ; fTokenNames . put ( new Integer ( EXPRTOKEN_AXISNAME_ATTRIBUTE ) , "EXPRTOKEN_AXISNAME_ATTRIBUTE" ) ; fTokenNames . put ( new Integer ( EXPRTOKEN_AXISNAME_CHILD ) , "EXPRTOKEN_AXISNAME_CHILD" ) ; fTokenNames . put ( new Integer ( EXPRTOKEN_AXISNAME_DESCENDANT ) , "EXPRTOKEN_AXISNAME_DESCENDANT" ) ; fTokenNames . put ( new Integer ( EXPRTOKEN_AXISNAME_DESCENDANT_OR_SELF ) , "EXPRTOKEN_AXISNAME_DESCENDANT_OR_SELF" ) ; fTokenNames . put ( new Integer ( EXPRTOKEN_AXISNAME_FOLLOWING ) , "EXPRTOKEN_AXISNAME_FOLLOWING" ) ; fTokenNames . put ( new Integer ( EXPRTOKEN_AXISNAME_FOLLOWING_SIBLING ) , "EXPRTOKEN_AXISNAME_FOLLOWING_SIBLING" ) ; fTokenNames . put ( new Integer ( EXPRTOKEN_AXISNAME_NAMESPACE ) , "EXPRTOKEN_AXISNAME_NAMESPACE" ) ; fTokenNames . put ( new Integer ( EXPRTOKEN_AXISNAME_PARENT ) , "EXPRTOKEN_AXISNAME_PARENT" ) ; fTokenNames . put ( new Integer ( EXPRTOKEN_AXISNAME_PRECEDING ) , "EXPRTOKEN_AXISNAME_PRECEDING" ) ; fTokenNames . put ( new Integer ( EXPRTOKEN_AXISNAME_PRECEDING_SIBLING ) , "EXPRTOKEN_AXISNAME_PRECEDING_SIBLING" ) ; fTokenNames . put ( new Integer ( EXPRTOKEN_AXISNAME_SELF ) , "EXPRTOKEN_AXISNAME_SELF" ) ; fTokenNames . put ( new Integer ( EXPRTOKEN_LITERAL ) , "EXPRTOKEN_LITERAL" ) ; fTokenNames . put ( new Integer ( EXPRTOKEN_NUMBER ) , "EXPRTOKEN_NUMBER" ) ; fTokenNames . put ( new Integer ( EXPRTOKEN_VARIABLE_REFERENCE ) , "EXPRTOKEN_VARIABLE_REFERENCE" ) ; } public String getTokenName ( int token ) { return ( String ) fTokenNames . get ( new Integer ( token ) ) ; } public int getTokenString ( int token ) { return token ; } public void addToken ( int token ) { try { fTokens [ fTokenCount ] = token ; } catch ( ArrayIndexOutOfBoundsException ex ) { int [ ] oldList = fTokens ; fTokens = new int [ fTokenCount << 1 ] ; System . arraycopy ( oldList , 0 , fTokens , 0 , fTokenCount ) ; fTokens [ fTokenCount ] = token ; } fTokenCount ++ ; } public int getTokenCount ( ) { return fTokenCount ; } public int getToken ( int tokenIndex ) { return fTokens [ tokenIndex ] ; } public void dumpTokens ( ) { for ( int i = 0 ; i < fTokenCount ; i ++ ) { switch ( fTokens [ i ] ) { case EXPRTOKEN_OPEN_PAREN : System . out . print ( "<OPEN_PAREN/>" ) ; break ; case EXPRTOKEN_CLOSE_PAREN : System . out . print ( "<CLOSE_PAREN/>" ) ; break ; case EXPRTOKEN_OPEN_BRACKET : System . out . print ( "<OPEN_BRACKET/>" ) ; break ; case EXPRTOKEN_CLOSE_BRACKET : System . out . print ( "<CLOSE_BRACKET/>" ) ; break ; case EXPRTOKEN_PERIOD : System . out . print ( "<PERIOD/>" ) ; break ; case EXPRTOKEN_DOUBLE_PERIOD : System . out . print ( "<DOUBLE_PERIOD/>" ) ; break ; case EXPRTOKEN_ATSIGN : System . out . print ( "<ATSIGN/>" ) ; break ; case EXPRTOKEN_COMMA : System . out . print ( "<COMMA/>" ) ; break ; case EXPRTOKEN_DOUBLE_COLON : System . out . print ( "<DOUBLE_COLON/>" ) ; break ; case EXPRTOKEN_NAMETEST_ANY : System . out . print ( "<NAMETEST_ANY/>" ) ; break ; case EXPRTOKEN_NAMETEST_NAMESPACE : System . out . print ( "<NAMETEST_NAMESPACE" ) ; System . out . print ( " prefix=\"" + getTokenString ( fTokens [ ++ i ] ) + "\"" ) ; System . out . print ( "/>" ) ; break ; case EXPRTOKEN_NAMETEST_QNAME : System . out . print ( "<NAMETEST_QNAME" ) ; if ( fTokens [ ++ i ] != - 1 ) System . out . print ( " prefix=\"" + getTokenString ( fTokens [ i ] ) + "\"" ) ; System . out . print ( " localpart=\"" + getTokenString ( fTokens [ ++ i ] ) + "\"" ) ; System . out . print ( "/>" ) ; break ; case EXPRTOKEN_NODETYPE_COMMENT : System . out . print ( "<NODETYPE_COMMENT/>" ) ; break ; case EXPRTOKEN_NODETYPE_TEXT : System . out . print ( "<NODETYPE_TEXT/>" ) ; break ; case EXPRTOKEN_NODETYPE_PI : System . out . print ( "<NODETYPE_PI/>" ) ; break ; case EXPRTOKEN_NODETYPE_NODE : System . out . print ( "<NODETYPE_NODE/>" ) ; break ; case EXPRTOKEN_OPERATOR_AND : System . out . print ( "<OPERATOR_AND/>" ) ; break ; case EXPRTOKEN_OPERATOR_OR : System . out . print ( "<OPERATOR_OR/>" ) ; break ; case EXPRTOKEN_OPERATOR_MOD : System . out . print ( "<OPERATOR_MOD/>" ) ; break ; case EXPRTOKEN_OPERATOR_DIV : System . out . print ( "<OPERATOR_DIV/>" ) ; break ; case EXPRTOKEN_OPERATOR_MULT : System . out . print ( "<OPERATOR_MULT/>" ) ; break ; case EXPRTOKEN_OPERATOR_SLASH : System . out . print ( "<OPERATOR_SLASH/>" ) ; if ( i + 1 < fTokenCount ) { System . out . println ( ) ; System . out . print ( "  " ) ; } break ; case EXPRTOKEN_OPERATOR_DOUBLE_SLASH : System . out . print ( "<OPERATOR_DOUBLE_SLASH/>" ) ; break ; case EXPRTOKEN_OPERATOR_UNION : System . out . print ( "<OPERATOR_UNION/>" ) ; break ; case EXPRTOKEN_OPERATOR_PLUS : System . out . print ( "<OPERATOR_PLUS/>" ) ; break ; case EXPRTOKEN_OPERATOR_MINUS : System . out . print ( "<OPERATOR_MINUS/>" ) ; break ; case EXPRTOKEN_OPERATOR_EQUAL : System . out . print ( "<OPERATOR_EQUAL/>" ) ; break ; case EXPRTOKEN_OPERATOR_NOT_EQUAL : System . out . print ( "<OPERATOR_NOT_EQUAL/>" ) ; break ; case EXPRTOKEN_OPERATOR_LESS : System . out . print ( "<OPERATOR_LESS/>" ) ; break ; case EXPRTOKEN_OPERATOR_LESS_EQUAL : System . out . print ( "<OPERATOR_LESS_EQUAL/>" ) ; break ; case EXPRTOKEN_OPERATOR_GREATER : System . out . print ( "<OPERATOR_GREATER/>" ) ; break ; case EXPRTOKEN_OPERATOR_GREATER_EQUAL : System . out . print ( "<OPERATOR_GREATER_EQUAL/>" ) ; break ; case EXPRTOKEN_FUNCTION_NAME : System . out . print ( "<FUNCTION_NAME" ) ; if ( fTokens [ ++ i ] != - 1 ) System . out . print ( " prefix=\"" + getTokenString ( fTokens [ i ] ) + "\"" ) ; System . out . print ( " localpart=\"" + getTokenString ( fTokens [ ++ i ] ) + "\"" ) ; System . out . print ( "/>" ) ; break ; case EXPRTOKEN_AXISNAME_ANCESTOR : System . out . print ( "<AXISNAME_ANCESTOR/>" ) ; break ; case EXPRTOKEN_AXISNAME_ANCESTOR_OR_SELF : System . out . print ( "<AXISNAME_ANCESTOR_OR_SELF/>" ) ; break ; case EXPRTOKEN_AXISNAME_ATTRIBUTE : System . out . print ( "<AXISNAME_ATTRIBUTE/>" ) ; break ; case EXPRTOKEN_AXISNAME_CHILD : System . out . print ( "<AXISNAME_CHILD/>" ) ; break ; case EXPRTOKEN_AXISNAME_DESCENDANT : System . out . print ( "<AXISNAME_DESCENDANT/>" ) ; break ; case EXPRTOKEN_AXISNAME_DESCENDANT_OR_SELF : System . out . print ( "<AXISNAME_DESCENDANT_OR_SELF/>" ) ; break ; case EXPRTOKEN_AXISNAME_FOLLOWING : System . out . print ( "<AXISNAME_FOLLOWING/>" ) ; break ; case EXPRTOKEN_AXISNAME_FOLLOWING_SIBLING : System . out . print ( "<AXISNAME_FOLLOWING_SIBLING/>" ) ; break ; case EXPRTOKEN_AXISNAME_NAMESPACE : System . out . print ( "<AXISNAME_NAMESPACE/>" ) ; break ; case EXPRTOKEN_AXISNAME_PARENT : System . out . print ( "<AXISNAME_PARENT/>" ) ; break ; case EXPRTOKEN_AXISNAME_PRECEDING : System . out . print ( "<AXISNAME_PRECEDING/>" ) ; break ; case EXPRTOKEN_AXISNAME_PRECEDING_SIBLING : System . out . print ( "<AXISNAME_PRECEDING_SIBLING/>" ) ; break ; case EXPRTOKEN_AXISNAME_SELF : System . out . print ( "<AXISNAME_SELF/>" ) ; break ; case EXPRTOKEN_LITERAL : System . out . print ( "<LITERAL" ) ; System . out . print ( " value=\"" + getTokenString ( fTokens [ ++ i ] ) + "\"" ) ; System . out . print ( "/>" ) ; break ; case EXPRTOKEN_NUMBER : System . out . print ( "<NUMBER" ) ; System . out . print ( " whole=\"" + getTokenString ( fTokens [ ++ i ] ) + "\"" ) ; System . out . print ( " part=\"" + getTokenString ( fTokens [ ++ i ] ) + "\"" ) ; System . out . print ( "/>" ) ; break ; case EXPRTOKEN_VARIABLE_REFERENCE : System . out . print ( "<VARIABLE_REFERENCE" ) ; if ( fTokens [ ++ i ] != - 1 ) System . out . print ( " prefix=\"" + getTokenString ( fTokens [ i ] ) + "\"" ) ; System . out . print ( " localpart=\"" + getTokenString ( fTokens [ ++ i ] ) + "\"" ) ; System . out . print ( "/>" ) ; break ; default : System . out . println ( "<???/>" ) ; } } System . out . println ( ) ; } } private static class Scanner { private static final byte CHARTYPE_INVALID = 0 , CHARTYPE_OTHER = 1 , CHARTYPE_WHITESPACE = 2 , CHARTYPE_EXCLAMATION = 3 , CHARTYPE_QUOTE = 4 , CHARTYPE_DOLLAR = 5 , CHARTYPE_OPEN_PAREN = 6 , CHARTYPE_CLOSE_PAREN = 7 , CHARTYPE_STAR = 8 , CHARTYPE_PLUS = 9 , CHARTYPE_COMMA = 10 , CHARTYPE_MINUS = 11 , CHARTYPE_PERIOD = 12 , CHARTYPE_SLASH = 13 , CHARTYPE_DIGIT = 14 , CHARTYPE_COLON = 15 , CHARTYPE_LESS = 16 , CHARTYPE_EQUAL = 17 , CHARTYPE_GREATER = 18 , CHARTYPE_ATSIGN = 19 , CHARTYPE_LETTER = 20 , CHARTYPE_OPEN_BRACKET = 21 , CHARTYPE_CLOSE_BRACKET = 22 , CHARTYPE_UNDERSCORE = 23 , CHARTYPE_UNION = 24 , CHARTYPE_NONASCII = 25 ; private static byte [ ] fASCIICharMap = { 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 2 , 2 , 0 , 0 , 2 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 2 , 3 , 4 , 1 , 5 , 1 , 1 , 4 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 14 , 14 , 14 , 14 , 14 , 14 , 14 , 14 , 14 , 15 , 1 , 16 , 17 , 18 , 1 , 19 , 20 , 20 , 20 , 20 , 20 , 20 , 20 , 20 , 20 , 20 , 20 , 20 , 20 , 20 , 20 , 20 , 20 , 20 , 20 , 20 , 20 , 20 , 20 , 20 , 20 , 20 , 21 , 1 , 22 , 1 , 23 , 1 , 20 , 20 , 20 , 20 , 20 , 20 , 20 , 20 , 20 , 20 , 20 , 20 , 20 , 20 , 20 , 20 , 20 , 20 , 20 , 20 , 20 , 20 , 20 , 20 , 20 , 20 , 1 , 24 , 1 , 1 , 1 } ; private StringPool fStringPool ; private int fAndSymbol ; private int fOrSymbol ; private int fModSymbol ; private int fDivSymbol ; private int fCommentSymbol ; private int fTextSymbol ; private int fPISymbol ; private int fNodeSymbol ; private int fAncestorSymbol ; private int fAncestorOrSelfSymbol ; private int fAttributeSymbol ; private int fChildSymbol ; private int fDescendantSymbol ; private int fDescendantOrSelfSymbol ; private int fFollowingSymbol ; private int fFollowingSiblingSymbol ; private int fNamespaceSymbol ; private int fParentSymbol ; private int fPrecedingSymbol ; private int fPrecedingSiblingSymbol ; private int fSelfSymbol ; public Scanner ( StringPool stringPool ) { fStringPool = stringPool ; fAndSymbol = fStringPool . addSymbol ( "and" ) ; fOrSymbol = fStringPool . addSymbol ( "or" ) ; fModSymbol = fStringPool . addSymbol ( "mod" ) ; fDivSymbol = fStringPool . addSymbol ( "div" ) ; fCommentSymbol = fStringPool . addSymbol ( "comment" ) ; fTextSymbol = fStringPool . addSymbol ( "text" ) ; fPISymbol = fStringPool . addSymbol ( "processing-instruction" ) ; fNodeSymbol = fStringPool . addSymbol ( "node" ) ; fAncestorSymbol = fStringPool . addSymbol ( "ancestor" ) ; fAncestorOrSelfSymbol = fStringPool . addSymbol ( "ancestor-or-self" ) ; fAttributeSymbol = fStringPool . addSymbol ( "attribute" ) ; fChildSymbol = fStringPool . addSymbol ( "child" ) ; fDescendantSymbol = fStringPool . addSymbol ( "descendant" ) ; fDescendantOrSelfSymbol = fStringPool . addSymbol ( "descendant-or-self" ) ; fFollowingSymbol = fStringPool . addSymbol ( "following" ) ; fFollowingSiblingSymbol = fStringPool . addSymbol ( "following-sibling" ) ; fNamespaceSymbol = fStringPool . addSymbol ( "namespace" ) ; fParentSymbol = fStringPool . addSymbol ( "parent" ) ; fPrecedingSymbol = fStringPool . addSymbol ( "preceding" ) ; fPrecedingSiblingSymbol = fStringPool . addSymbol ( "preceding-sibling" ) ; fSelfSymbol = fStringPool . addSymbol ( "self" ) ; } public boolean scanExpr ( StringPool stringPool , XPath . Tokens tokens , String data , int currentOffset , int endOffset ) throws XPathException { int nameOffset ; int nameHandle , prefixHandle ; boolean starIsMultiplyOperator = false ; int ch ; while ( true ) { if ( currentOffset == endOffset ) { break ; } ch = data . charAt ( currentOffset ) ; while ( ch == ' ' || ch == 0x0A || ch == 0x09 || ch == 0x0D ) { if ( ++ currentOffset == endOffset ) { break ; } ch = data . charAt ( currentOffset ) ; } if ( currentOffset == endOffset ) { break ; } byte chartype = ( ch >= 0x80 ) ? CHARTYPE_NONASCII : fASCIICharMap [ ch ] ; switch ( chartype ) { case CHARTYPE_OPEN_PAREN : addToken ( tokens , XPath . Tokens . EXPRTOKEN_OPEN_PAREN ) ; starIsMultiplyOperator = false ; if ( ++ currentOffset == endOffset ) { break ; } break ; case CHARTYPE_CLOSE_PAREN : addToken ( tokens , XPath . Tokens . EXPRTOKEN_CLOSE_PAREN ) ; starIsMultiplyOperator = true ; if ( ++ currentOffset == endOffset ) { break ; } break ; case CHARTYPE_OPEN_BRACKET : addToken ( tokens , XPath . Tokens . EXPRTOKEN_OPEN_BRACKET ) ; starIsMultiplyOperator = false ; if ( ++ currentOffset == endOffset ) { break ; } break ; case CHARTYPE_CLOSE_BRACKET : addToken ( tokens , XPath . Tokens . EXPRTOKEN_CLOSE_BRACKET ) ; starIsMultiplyOperator = true ; if ( ++ currentOffset == endOffset ) { break ; } break ; case CHARTYPE_PERIOD : if ( currentOffset + 1 == endOffset ) { addToken ( tokens , XPath . Tokens . EXPRTOKEN_PERIOD ) ; starIsMultiplyOperator = true ; currentOffset ++ ; break ; } ch = data . charAt ( currentOffset + 1 ) ; if ( ch == '.' ) { addToken ( tokens , XPath . Tokens . EXPRTOKEN_DOUBLE_PERIOD ) ; starIsMultiplyOperator = true ; currentOffset += 2 ; } else if ( ch >= '0' && ch <= '9' ) { addToken ( tokens , XPath . Tokens . EXPRTOKEN_NUMBER ) ; starIsMultiplyOperator = true ; currentOffset = scanNumber ( tokens , data , endOffset , currentOffset ) ; } else { addToken ( tokens , XPath . Tokens . EXPRTOKEN_PERIOD ) ; starIsMultiplyOperator = true ; currentOffset ++ ; } if ( currentOffset == endOffset ) { break ; } break ; case CHARTYPE_ATSIGN : addToken ( tokens , XPath . Tokens . EXPRTOKEN_ATSIGN ) ; starIsMultiplyOperator = false ; if ( ++ currentOffset == endOffset ) { break ; } break ; case CHARTYPE_COMMA : addToken ( tokens , XPath . Tokens . EXPRTOKEN_COMMA ) ; starIsMultiplyOperator = false ; if ( ++ currentOffset == endOffset ) { break ; } break ; case CHARTYPE_COLON : if ( ++ currentOffset == endOffset ) { System . out . println ( "abort 1a" ) ; return false ; } ch = data . charAt ( currentOffset ) ; if ( ch != ':' ) { System . out . println ( "abort 1b" ) ; return false ; } addToken ( tokens , XPath . Tokens . EXPRTOKEN_DOUBLE_COLON ) ; starIsMultiplyOperator = false ; if ( ++ currentOffset == endOffset ) { break ; } break ; case CHARTYPE_SLASH : if ( ++ currentOffset == endOffset ) { addToken ( tokens , XPath . Tokens . EXPRTOKEN_OPERATOR_SLASH ) ; starIsMultiplyOperator = false ; break ; } ch = data . charAt ( currentOffset ) ; if ( ch == '/' ) { addToken ( tokens , XPath . Tokens . EXPRTOKEN_OPERATOR_DOUBLE_SLASH ) ; starIsMultiplyOperator = false ; if ( ++ currentOffset == endOffset ) { break ; } } else { addToken ( tokens , XPath . Tokens . EXPRTOKEN_OPERATOR_SLASH ) ; starIsMultiplyOperator = false ; } break ; case CHARTYPE_UNION : addToken ( tokens , XPath . Tokens . EXPRTOKEN_OPERATOR_UNION ) ; starIsMultiplyOperator = false ; if ( ++ currentOffset == endOffset ) { break ; } break ; case CHARTYPE_PLUS : addToken ( tokens , XPath . Tokens . EXPRTOKEN_OPERATOR_PLUS ) ; starIsMultiplyOperator = false ; if ( ++ currentOffset == endOffset ) { break ; } break ; case CHARTYPE_MINUS : addToken ( tokens , XPath . Tokens . EXPRTOKEN_OPERATOR_MINUS ) ; starIsMultiplyOperator = false ; if ( ++ currentOffset == endOffset ) { break ; } break ; case CHARTYPE_EQUAL : addToken ( tokens , XPath . Tokens . EXPRTOKEN_OPERATOR_EQUAL ) ; starIsMultiplyOperator = false ; if ( ++ currentOffset == endOffset ) { break ; } break ; case CHARTYPE_EXCLAMATION : if ( ++ currentOffset == endOffset ) { System . out . println ( "abort 2a" ) ; return false ; } ch = data . charAt ( currentOffset ) ; if ( ch != '=' ) { System . out . println ( "abort 2b" ) ; return false ; } addToken ( tokens , XPath . Tokens . EXPRTOKEN_OPERATOR_NOT_EQUAL ) ; starIsMultiplyOperator = false ; if ( ++ currentOffset == endOffset ) { break ; } break ; case CHARTYPE_LESS : if ( ++ currentOffset == endOffset ) { addToken ( tokens , XPath . Tokens . EXPRTOKEN_OPERATOR_LESS ) ; starIsMultiplyOperator = false ; break ; } ch = data . charAt ( currentOffset ) ; if ( ch == '=' ) { addToken ( tokens , XPath . Tokens . EXPRTOKEN_OPERATOR_LESS_EQUAL ) ; starIsMultiplyOperator = false ; if ( ++ currentOffset == endOffset ) { break ; } } else { addToken ( tokens , XPath . Tokens . EXPRTOKEN_OPERATOR_LESS ) ; starIsMultiplyOperator = false ; } break ; case CHARTYPE_GREATER : if ( ++ currentOffset == endOffset ) { addToken ( tokens , XPath . Tokens . EXPRTOKEN_OPERATOR_GREATER ) ; starIsMultiplyOperator = false ; break ; } ch = data . charAt ( currentOffset ) ; if ( ch == '=' ) { addToken ( tokens , XPath . Tokens . EXPRTOKEN_OPERATOR_GREATER_EQUAL ) ; starIsMultiplyOperator = false ; if ( ++ currentOffset == endOffset ) { break ; } } else { addToken ( tokens , XPath . Tokens . EXPRTOKEN_OPERATOR_GREATER ) ; starIsMultiplyOperator = false ; } break ; case CHARTYPE_QUOTE : int qchar = ch ; if ( ++ currentOffset == endOffset ) { System . out . println ( "abort 2c" ) ; return false ; } ch = data . charAt ( currentOffset ) ; int litOffset = currentOffset ; while ( ch != qchar ) { if ( ++ currentOffset == endOffset ) { System . out . println ( "abort 2d" ) ; return false ; } ch = data . charAt ( currentOffset ) ; } int litLength = currentOffset - litOffset ; addToken ( tokens , XPath . Tokens . EXPRTOKEN_LITERAL ) ; starIsMultiplyOperator = true ; tokens . addToken ( stringPool . addSymbol ( data . substring ( litOffset , litOffset + litLength ) ) ) ; if ( ++ currentOffset == endOffset ) { break ; } break ; case CHARTYPE_DIGIT : addToken ( tokens , XPath . Tokens . EXPRTOKEN_NUMBER ) ; starIsMultiplyOperator = true ; currentOffset = scanNumber ( tokens , data , endOffset , currentOffset ) ; break ; case CHARTYPE_DOLLAR : if ( ++ currentOffset == endOffset ) { System . out . println ( "abort 3a" ) ; return false ; } ch = data . charAt ( currentOffset ) ; nameOffset = currentOffset ; if ( ch >= 0x80 ) { throw new RuntimeException ( "need encoding support" ) ; } chartype = fASCIICharMap [ ch ] ; if ( chartype != CHARTYPE_LETTER && chartype != CHARTYPE_UNDERSCORE ) { System . out . println ( "abort 3b" ) ; return false ; } while ( ++ currentOffset < endOffset ) { ch = data . charAt ( currentOffset ) ; if ( ch >= 0x80 ) { throw new RuntimeException ( "need encoding support" ) ; } chartype = fASCIICharMap [ ch ] ; if ( chartype != CHARTYPE_LETTER && chartype != CHARTYPE_DIGIT && chartype != CHARTYPE_PERIOD && chartype != CHARTYPE_MINUS && chartype != CHARTYPE_UNDERSCORE ) { break ; } } nameHandle = stringPool . addSymbol ( data . substring ( nameOffset , currentOffset ) ) ; if ( ch != ':' ) { prefixHandle = - 1 ; } else { prefixHandle = nameHandle ; if ( ++ currentOffset == endOffset ) { System . out . println ( "abort 4a" ) ; return false ; } ch = data . charAt ( currentOffset ) ; nameOffset = currentOffset ; if ( ch >= 0x80 ) { throw new RuntimeException ( "need encoding support" ) ; } chartype = fASCIICharMap [ ch ] ; if ( chartype != CHARTYPE_LETTER && chartype != CHARTYPE_UNDERSCORE ) { System . out . println ( "abort 4b" ) ; return false ; } while ( ++ currentOffset < endOffset ) { ch = data . charAt ( currentOffset ) ; if ( ch >= 0x80 ) { throw new RuntimeException ( "need encoding support" ) ; } chartype = fASCIICharMap [ ch ] ; if ( chartype != CHARTYPE_LETTER && chartype != CHARTYPE_DIGIT && chartype != CHARTYPE_PERIOD && chartype != CHARTYPE_MINUS && chartype != CHARTYPE_UNDERSCORE ) { break ; } } nameHandle = stringPool . addSymbol ( data . substring ( nameOffset , currentOffset ) ) ; } addToken ( tokens , XPath . Tokens . EXPRTOKEN_VARIABLE_REFERENCE ) ; starIsMultiplyOperator = true ; tokens . addToken ( prefixHandle ) ; tokens . addToken ( nameHandle ) ; break ; case CHARTYPE_STAR : if ( starIsMultiplyOperator ) { addToken ( tokens , XPath . Tokens . EXPRTOKEN_OPERATOR_MULT ) ; starIsMultiplyOperator = false ; } else { addToken ( tokens , XPath . Tokens . EXPRTOKEN_NAMETEST_ANY ) ; starIsMultiplyOperator = true ; } if ( ++ currentOffset == endOffset ) { break ; } break ; case CHARTYPE_NONASCII : throw new RuntimeException ( "need encoding support" ) ; case CHARTYPE_LETTER : case CHARTYPE_UNDERSCORE : nameOffset = currentOffset ; while ( true ) { if ( ++ currentOffset == endOffset ) { break ; } ch = data . charAt ( currentOffset ) ; if ( ch >= 0x80 ) { throw new RuntimeException ( "need encoding support" ) ; } chartype = fASCIICharMap [ ch ] ; if ( chartype != CHARTYPE_LETTER && chartype != CHARTYPE_DIGIT && chartype != CHARTYPE_PERIOD && chartype != CHARTYPE_MINUS && chartype != CHARTYPE_UNDERSCORE ) { break ; } } nameHandle = stringPool . addSymbol ( data . substring ( nameOffset , currentOffset ) ) ; boolean isNameTestNCName = false ; boolean isAxisName = false ; prefixHandle = - 1 ; if ( ch == ':' ) { if ( ++ currentOffset == endOffset ) { System . out . println ( "abort 5" ) ; return false ; } ch = data . charAt ( currentOffset ) ; if ( ch == '*' ) { if ( ++ currentOffset < endOffset ) { ch = data . charAt ( currentOffset ) ; } isNameTestNCName = true ; } else if ( ch == ':' ) { if ( ++ currentOffset < endOffset ) { ch = data . charAt ( currentOffset ) ; } isAxisName = true ; } else { prefixHandle = nameHandle ; nameOffset = currentOffset ; if ( ch >= 0x80 ) { throw new RuntimeException ( "need encoding support" ) ; } chartype = fASCIICharMap [ ch ] ; if ( chartype != CHARTYPE_LETTER && chartype != CHARTYPE_UNDERSCORE ) { System . out . println ( "abort 5b" ) ; return false ; } while ( ++ currentOffset < endOffset ) { ch = data . charAt ( currentOffset ) ; if ( ch >= 0x80 ) { throw new RuntimeException ( "need encoding support" ) ; } chartype = fASCIICharMap [ ch ] ; if ( chartype != CHARTYPE_LETTER && chartype != CHARTYPE_DIGIT && chartype != CHARTYPE_PERIOD && chartype != CHARTYPE_MINUS && chartype != CHARTYPE_UNDERSCORE ) { break ; } } nameHandle = stringPool . addSymbol ( data . substring ( nameOffset , currentOffset ) ) ; } } while ( ch == ' ' || ch == 0x0A || ch == 0x09 || ch == 0x0D ) { if ( ++ currentOffset == endOffset ) { break ; } ch = data . charAt ( currentOffset ) ; } if ( starIsMultiplyOperator ) { if ( nameHandle == fAndSymbol ) { addToken ( tokens , XPath . Tokens . EXPRTOKEN_OPERATOR_AND ) ; starIsMultiplyOperator = false ; } else if ( nameHandle == fOrSymbol ) { addToken ( tokens , XPath . Tokens . EXPRTOKEN_OPERATOR_OR ) ; starIsMultiplyOperator = false ; } else if ( nameHandle == fModSymbol ) { addToken ( tokens , XPath . Tokens . EXPRTOKEN_OPERATOR_MOD ) ; starIsMultiplyOperator = false ; } else if ( nameHandle == fDivSymbol ) { addToken ( tokens , XPath . Tokens . EXPRTOKEN_OPERATOR_DIV ) ; starIsMultiplyOperator = false ; } else { System . out . println ( "abort 6" ) ; return false ; } if ( isNameTestNCName ) { System . out . println ( "abort 7" ) ; return false ; } else if ( isAxisName ) { System . out . println ( "abort 8" ) ; return false ; } break ; } if ( ch == '(' && ! isNameTestNCName && ! isAxisName ) { if ( nameHandle == fCommentSymbol ) { addToken ( tokens , XPath . Tokens . EXPRTOKEN_NODETYPE_COMMENT ) ; } else if ( nameHandle == fTextSymbol ) { addToken ( tokens , XPath . Tokens . EXPRTOKEN_NODETYPE_TEXT ) ; } else if ( nameHandle == fPISymbol ) { addToken ( tokens , XPath . Tokens . EXPRTOKEN_NODETYPE_PI ) ; } else if ( nameHandle == fNodeSymbol ) { addToken ( tokens , XPath . Tokens . EXPRTOKEN_NODETYPE_NODE ) ; } else { addToken ( tokens , XPath . Tokens . EXPRTOKEN_FUNCTION_NAME ) ; tokens . addToken ( prefixHandle ) ; tokens . addToken ( nameHandle ) ; } addToken ( tokens , XPath . Tokens . EXPRTOKEN_OPEN_PAREN ) ; starIsMultiplyOperator = false ; if ( ++ currentOffset == endOffset ) { break ; } break ; } if ( isAxisName || ( ch == ':' && currentOffset + 1 < endOffset && data . charAt ( currentOffset + 1 ) == ':' ) ) { if ( nameHandle == fAncestorSymbol ) { addToken ( tokens , XPath . Tokens . EXPRTOKEN_AXISNAME_ANCESTOR ) ; } else if ( nameHandle == fAncestorOrSelfSymbol ) { addToken ( tokens , XPath . Tokens . EXPRTOKEN_AXISNAME_ANCESTOR_OR_SELF ) ; } else if ( nameHandle == fAttributeSymbol ) { addToken ( tokens , XPath . Tokens . EXPRTOKEN_AXISNAME_ATTRIBUTE ) ; } else if ( nameHandle == fChildSymbol ) { addToken ( tokens , XPath . Tokens . EXPRTOKEN_AXISNAME_CHILD ) ; } else if ( nameHandle == fDescendantSymbol ) { addToken ( tokens , XPath . Tokens . EXPRTOKEN_AXISNAME_DESCENDANT ) ; } else if ( nameHandle == fDescendantOrSelfSymbol ) { addToken ( tokens , XPath . Tokens . EXPRTOKEN_AXISNAME_DESCENDANT_OR_SELF ) ; } else if ( nameHandle == fFollowingSymbol ) { addToken ( tokens , XPath . Tokens . EXPRTOKEN_AXISNAME_FOLLOWING ) ; } else if ( nameHandle == fFollowingSiblingSymbol ) { addToken ( tokens , XPath . Tokens . EXPRTOKEN_AXISNAME_FOLLOWING_SIBLING ) ; } else if ( nameHandle == fNamespaceSymbol ) { addToken ( tokens , XPath . Tokens . EXPRTOKEN_AXISNAME_NAMESPACE ) ; } else if ( nameHandle == fParentSymbol ) { addToken ( tokens , XPath . Tokens . EXPRTOKEN_AXISNAME_PARENT ) ; } else if ( nameHandle == fPrecedingSymbol ) { addToken ( tokens , XPath . Tokens . EXPRTOKEN_AXISNAME_PRECEDING ) ; } else if ( nameHandle == fPrecedingSiblingSymbol ) { addToken ( tokens , XPath . Tokens . EXPRTOKEN_AXISNAME_PRECEDING_SIBLING ) ; } else if ( nameHandle == fSelfSymbol ) { addToken ( tokens , XPath . Tokens . EXPRTOKEN_AXISNAME_SELF ) ; } else { System . out . println ( "abort 9" ) ; return false ; } if ( isNameTestNCName ) { System . out . println ( "abort 10" ) ; return false ; } addToken ( tokens , XPath . Tokens . EXPRTOKEN_DOUBLE_COLON ) ; starIsMultiplyOperator = false ; if ( ! isAxisName ) { currentOffset ++ ; if ( ++ currentOffset == endOffset ) { break ; } } break ; } if ( isNameTestNCName ) { addToken ( tokens , XPath . Tokens . EXPRTOKEN_NAMETEST_NAMESPACE ) ; starIsMultiplyOperator = true ; tokens . addToken ( nameHandle ) ; } else { addToken ( tokens , XPath . Tokens . EXPRTOKEN_NAMETEST_QNAME ) ; starIsMultiplyOperator = true ; tokens . addToken ( prefixHandle ) ; tokens . addToken ( nameHandle ) ; } break ; } } if ( XPath . Tokens . DUMP_TOKENS ) { tokens . dumpTokens ( ) ; } return true ; } private int scanNumber ( XPath . Tokens tokens , String data , int endOffset , int currentOffset ) { int ch = data . charAt ( currentOffset ) ; int whole = 0 ; int part = 0 ; while ( ch >= '0' && ch <= '9' ) { whole = ( whole * 10 ) + ( ch - '0' ) ; if ( ++ currentOffset == endOffset ) { break ; } ch = data . charAt ( currentOffset ) ; } if ( ch == '.' ) { if ( ++ currentOffset < endOffset ) { int start = currentOffset ; ch = data . charAt ( currentOffset ) ; while ( ch >= '0' && ch <= '9' ) { part = ( part * 10 ) + ( ch - '0' ) ; if ( ++ currentOffset == endOffset ) { break ; } ch = data . charAt ( currentOffset ) ; } if ( part != 0 ) { throw new RuntimeException ( "find a solution!" ) ; } } } tokens . addToken ( whole ) ; tokens . addToken ( part ) ; return currentOffset ; } protected void addToken ( XPath . Tokens tokens , int token ) throws XPathException { tokens . addToken ( token ) ; } } public static void main ( String [ ] argv ) throws Exception { for ( int i = 0 ; i < argv . length ; i ++ ) { final String expression = argv [ i ] ; System . out . println ( "# XPath expression: \"" + expression + '"' ) ; try { StringPool stringPool = new StringPool ( ) ; XPath xpath = new XPath ( expression , stringPool , null ) ; System . out . println ( "expanded xpath: \"" + xpath . toString ( ) + '"' ) ; } catch ( XPathException e ) { System . out . println ( "error: " + e . getMessage ( ) ) ; } } } } 	1	['5', '1', '2', '18', '37', '2', '8', '11', '4', '0.791666667', '454', '1', '2', '0', '0.36', '0', '0', '88.6', '1', '0.8', '1']
package org . apache . html . dom ; import org . w3c . dom . * ; import org . w3c . dom . html . * ; public class HTMLObjectElementImpl extends HTMLElementImpl implements HTMLObjectElement , HTMLFormControl { public String getCode ( ) { return getAttribute ( "code" ) ; } public void setCode ( String code ) { setAttribute ( "code" , code ) ; } public String getAlign ( ) { return capitalize ( getAttribute ( "align" ) ) ; } public void setAlign ( String align ) { setAttribute ( "align" , align ) ; } public String getArchive ( ) { return getAttribute ( "archive" ) ; } public void setArchive ( String archive ) { setAttribute ( "archive" , archive ) ; } public String getBorder ( ) { return getAttribute ( "border" ) ; } public void setBorder ( String border ) { setAttribute ( "border" , border ) ; } public String getCodeBase ( ) { return getAttribute ( "codebase" ) ; } public void setCodeBase ( String codeBase ) { setAttribute ( "codebase" , codeBase ) ; } public String getCodeType ( ) { return getAttribute ( "codetype" ) ; } public void setCodeType ( String codeType ) { setAttribute ( "codetype" , codeType ) ; } public String getData ( ) { return getAttribute ( "data" ) ; } public void setData ( String data ) { setAttribute ( "data" , data ) ; } public boolean getDeclare ( ) { return getBinary ( "declare" ) ; } public void setDeclare ( boolean declare ) { setAttribute ( "declare" , declare ) ; } public String getHeight ( ) { return getAttribute ( "height" ) ; } public void setHeight ( String height ) { setAttribute ( "height" , height ) ; } public String getHspace ( ) { return getAttribute ( "hspace" ) ; } public void setHspace ( String hspace ) { setAttribute ( "hspace" , hspace ) ; } public String getName ( ) { return getAttribute ( "name" ) ; } public void setName ( String name ) { setAttribute ( "name" , name ) ; } public String getStandby ( ) { return getAttribute ( "standby" ) ; } public void setStandby ( String standby ) { setAttribute ( "standby" , standby ) ; } public int getTabIndex ( ) { try { return Integer . parseInt ( getAttribute ( "tabindex" ) ) ; } catch ( NumberFormatException except ) { return 0 ; } } public void setTabIndex ( int tabIndex ) { setAttribute ( "tabindex" , String . valueOf ( tabIndex ) ) ; } public String getType ( ) { return getAttribute ( "type" ) ; } public void setType ( String type ) { setAttribute ( "type" , type ) ; } public String getUseMap ( ) { return getAttribute ( "useMap" ) ; } public void setUseMap ( String useMap ) { setAttribute ( "useMap" , useMap ) ; } public String getVspace ( ) { return getAttribute ( "vspace" ) ; } public void setVspace ( String vspace ) { setAttribute ( "vspace" , vspace ) ; } public String getWidth ( ) { return getAttribute ( "width" ) ; } public void setWidth ( String width ) { setAttribute ( "width" , width ) ; } public HTMLObjectElementImpl ( HTMLDocumentImpl owner , String name ) { super ( owner , name ) ; } } 	0	['35', '4', '0', '3', '43', '595', '0', '3', '35', '2', '200', '0', '0', '0.734375', '0.308571429', '0', '0', '4.714285714', '1', '0.9714', '0']
package org . apache . xerces . dom ; import org . w3c . dom . * ; import org . apache . xerces . utils . StringPool ; public class DeferredDocumentTypeImpl extends DocumentTypeImpl implements DeferredNode { static final long serialVersionUID = - 2172579663227313509L ; protected transient int fNodeIndex ; DeferredDocumentTypeImpl ( DeferredDocumentImpl ownerDocument , int nodeIndex ) { super ( ownerDocument , null ) ; fNodeIndex = nodeIndex ; needsSyncData ( true ) ; needsSyncChildren ( true ) ; } public int getNodeIndex ( ) { return fNodeIndex ; } protected void synchronizeData ( ) { needsSyncData ( false ) ; DeferredDocumentImpl ownerDocument = ( DeferredDocumentImpl ) this . ownerDocument ; name = ownerDocument . getNodeNameString ( fNodeIndex ) ; StringPool pool = ownerDocument . getStringPool ( ) ; int extraDataIndex = ownerDocument . getNodeValue ( fNodeIndex ) ; publicID = pool . toString ( ownerDocument . getNodeName ( extraDataIndex ) ) ; systemID = pool . toString ( ownerDocument . getNodeValue ( extraDataIndex ) ) ; internalSubset = pool . toString ( ownerDocument . getLastChild ( extraDataIndex ) ) ; } protected void synchronizeChildren ( ) { boolean orig = ownerDocument ( ) . mutationEvents ; ownerDocument ( ) . mutationEvents = false ; needsSyncChildren ( false ) ; DeferredDocumentImpl ownerDocument = ( DeferredDocumentImpl ) this . ownerDocument ; entities = new NamedNodeMapImpl ( this ) ; notations = new NamedNodeMapImpl ( this ) ; elements = new NamedNodeMapImpl ( this ) ; DeferredNode last = null ; for ( int index = ownerDocument . getLastChild ( fNodeIndex ) ; index != - 1 ; index = ownerDocument . getPrevSibling ( index ) ) { DeferredNode node = ownerDocument . getNodeObject ( index ) ; int type = node . getNodeType ( ) ; switch ( type ) { case Node . ENTITY_NODE : { entities . setNamedItem ( node ) ; break ; } case Node . NOTATION_NODE : { notations . setNamedItem ( node ) ; break ; } case NodeImpl . ELEMENT_DEFINITION_NODE : { elements . setNamedItem ( node ) ; break ; } case Node . ELEMENT_NODE : { if ( ( ( DocumentImpl ) getOwnerDocument ( ) ) . allowGrammarAccess ) { insertBefore ( node , last ) ; last = node ; break ; } } default : { System . out . println ( "DeferredDocumentTypeImpl#synchronizeInfo: node.getNodeType() = " + node . getNodeType ( ) + ", class = " + node . getClass ( ) . getName ( ) ) ; } } } ownerDocument ( ) . mutationEvents = orig ; } } 	1	['4', '3', '0', '7', '28', '0', '1', '7', '1', '0.666666667', '176', '0.5', '0', '0.947368421', '0.5', '2', '5', '42.5', '8', '2.5', '3']
package org . apache . wml ; public interface WMLCardElement extends WMLElement { public void setOnEnterBackward ( String href ) ; public String getOnEnterBackward ( ) ; public void setOnEnterForward ( String href ) ; public String getOnEnterForward ( ) ; public void setOnTimer ( String href ) ; public String getOnTimer ( ) ; public void setTitle ( String newValue ) ; public String getTitle ( ) ; public void setNewContext ( boolean newValue ) ; public boolean getNewContext ( ) ; public void setOrdered ( boolean newValue ) ; public boolean getOrdered ( ) ; public void setXmlLang ( String newValue ) ; public String getXmlLang ( ) ; } 	0	['14', '1', '0', '2', '14', '91', '1', '1', '14', '2', '14', '0', '0', '0', '0.5', '0', '0', '0', '1', '1', '0']
package org . apache . xerces . validators . common ; import org . apache . xerces . framework . XMLAttrList ; import org . apache . xerces . framework . XMLContentSpec ; import org . apache . xerces . framework . XMLDocumentHandler ; import org . apache . xerces . framework . XMLDocumentScanner ; import org . apache . xerces . framework . XMLErrorReporter ; import org . apache . xerces . readers . DefaultEntityHandler ; import org . apache . xerces . readers . XMLEntityHandler ; import org . apache . xerces . utils . ChunkyCharArray ; import org . apache . xerces . utils . Hash2intTable ; import org . apache . xerces . utils . IntStack ; import org . apache . xerces . utils . NamespacesScope ; import org . apache . xerces . utils . QName ; import org . apache . xerces . utils . StringPool ; import org . apache . xerces . utils . XMLCharacterProperties ; import org . apache . xerces . utils . XMLMessages ; import org . apache . xerces . utils . ImplementationMessages ; import org . apache . xerces . parsers . DOMParser ; import org . w3c . dom . Document ; import org . w3c . dom . Element ; import org . xml . sax . InputSource ; import org . xml . sax . EntityResolver ; import org . xml . sax . Locator ; import org . xml . sax . helpers . LocatorImpl ; import org . xml . sax . SAXException ; import org . xml . sax . SAXParseException ; import java . io . IOException ; import java . util . Enumeration ; import java . util . Hashtable ; import java . util . StringTokenizer ; import java . util . Vector ; import org . apache . xerces . validators . dtd . DTDGrammar ; import org . apache . xerces . validators . schema . SubstitutionGroupComparator ; import org . apache . xerces . validators . schema . SchemaGrammar ; import org . apache . xerces . validators . schema . SchemaMessageProvider ; import org . apache . xerces . validators . schema . SchemaSymbols ; import org . apache . xerces . validators . schema . TraverseSchema ; import org . apache . xerces . validators . schema . identity . Field ; import org . apache . xerces . validators . schema . identity . FieldActivator ; import org . apache . xerces . validators . schema . identity . IdentityConstraint ; import org . apache . xerces . validators . schema . identity . Key ; import org . apache . xerces . validators . schema . identity . KeyRef ; import org . apache . xerces . validators . schema . identity . Selector ; import org . apache . xerces . validators . schema . identity . Unique ; import org . apache . xerces . validators . schema . identity . ValueStore ; import org . apache . xerces . validators . schema . identity . XPathMatcher ; import org . apache . xerces . validators . datatype . DatatypeValidatorFactoryImpl ; import org . apache . xerces . validators . datatype . DatatypeValidator ; import org . apache . xerces . validators . datatype . InvalidDatatypeValueException ; import org . apache . xerces . validators . datatype . StateMessageDatatype ; import org . apache . xerces . validators . datatype . IDREFDatatypeValidator ; import org . apache . xerces . validators . datatype . IDDatatypeValidator ; import org . apache . xerces . validators . datatype . ENTITYDatatypeValidator ; public final class XMLValidator implements DefaultEntityHandler . EventHandler , XMLEntityHandler . CharDataHandler , XMLDocumentScanner . EventHandler , NamespacesScope . NamespacesHandler , FieldActivator { private static final boolean PRINT_EXCEPTION_STACK_TRACE = false ; private static final boolean DEBUG_PRINT_ATTRIBUTES = false ; private static final boolean DEBUG_PRINT_CONTENT = false ; private static final boolean DEBUG_SCHEMA_VALIDATION = false ; private static final boolean DEBUG_ELEMENT_CHILDREN = false ; protected static final boolean DEBUG_IDENTITY_CONSTRAINTS = false ; protected static final boolean DEBUG_VALUE_STORES = false ; private static final int CHUNK_SHIFT = 8 ; private static final int CHUNK_SIZE = ( 1 << CHUNK_SHIFT ) ; private static final int CHUNK_MASK = CHUNK_SIZE - 1 ; private static final int INITIAL_CHUNK_COUNT = ( 1 << ( 10 - CHUNK_SHIFT ) ) ; private Hashtable fIdDefs = null ; private StateMessageDatatype fStoreIDRef = new StateMessageDatatype ( ) { private Hashtable fIdDefs ; public Object getDatatypeObject ( ) { return ( Object ) fIdDefs ; } public int getDatatypeState ( ) { return IDREFDatatypeValidator . IDREF_STORE ; } public void setDatatypeObject ( Object data ) { fIdDefs = ( Hashtable ) data ; } } ; private StateMessageDatatype fResetID = new StateMessageDatatype ( ) { public Object getDatatypeObject ( ) { return ( Object ) null ; } public int getDatatypeState ( ) { return IDDatatypeValidator . ID_CLEAR ; } public void setDatatypeObject ( Object data ) { } } ; private StateMessageDatatype fResetIDRef = new StateMessageDatatype ( ) { public Object getDatatypeObject ( ) { return ( Object ) null ; } public int getDatatypeState ( ) { return IDREFDatatypeValidator . IDREF_CLEAR ; } public void setDatatypeObject ( Object data ) { } } ; private StateMessageDatatype fValidateIDRef = new StateMessageDatatype ( ) { public Object getDatatypeObject ( ) { return ( Object ) null ; } public int getDatatypeState ( ) { return IDREFDatatypeValidator . IDREF_VALIDATE ; } public void setDatatypeObject ( Object data ) { } } ; private StateMessageDatatype fValidateENTITYMsg = new StateMessageDatatype ( ) { private Object packagedMessage = null ; public Object getDatatypeObject ( ) { return packagedMessage ; } public int getDatatypeState ( ) { return ENTITYDatatypeValidator . ENTITY_INITIALIZE ; } public void setDatatypeObject ( Object data ) { packagedMessage = data ; } } ; private AttributeValidator fAttValidatorNOTATION = new AttValidatorNOTATION ( ) ; private AttributeValidator fAttValidatorENUMERATION = new AttValidatorENUMERATION ( ) ; private AttributeValidator fAttValidatorDATATYPE = null ; StringPool fStringPool = null ; boolean fValidating = false ; boolean fInElementContent = false ; int fStandaloneReader = - 1 ; private boolean fValidationEnabled = false ; private boolean fDynamicValidation = false ; private boolean fSchemaValidation = true ; private boolean fValidationEnabledByDynamic = false ; private boolean fDynamicDisabledByValidation = false ; private boolean fWarningOnDuplicateAttDef = false ; private boolean fWarningOnUndeclaredElements = false ; private boolean fNormalizeAttributeValues = true ; private boolean fLoadDTDGrammar = true ; private int fDeclaration [ ] ; private XMLErrorReporter fErrorReporter = null ; private DefaultEntityHandler fEntityHandler = null ; private QName fCurrentElement = new QName ( ) ; private ContentLeafNameTypeVector [ ] fContentLeafStack = new ContentLeafNameTypeVector [ 8 ] ; private int [ ] fValidationFlagStack = new int [ 8 ] ; private int [ ] fScopeStack = new int [ 8 ] ; private int [ ] fGrammarNameSpaceIndexStack = new int [ 8 ] ; private int [ ] fElementEntityStack = new int [ 8 ] ; private int [ ] fElementIndexStack = new int [ 8 ] ; private int [ ] fContentSpecTypeStack = new int [ 8 ] ; private static final int sizeQNameParts = 8 ; private QName [ ] fElementQNamePartsStack = new QName [ sizeQNameParts ] ; private QName [ ] fElementChildren = new QName [ 32 ] ; private int fElementChildrenLength = 0 ; private int [ ] fElementChildrenOffsetStack = new int [ 32 ] ; private int fElementDepth = - 1 ; private boolean fNamespacesEnabled = false ; private NamespacesScope fNamespacesScope = null ; private int fNamespacesPrefix = - 1 ; private QName fRootElement = new QName ( ) ; private int fAttrListHandle = - 1 ; private int fCurrentElementEntity = - 1 ; private int fCurrentElementIndex = - 1 ; private int fCurrentContentSpecType = - 1 ; private boolean fSeenDoctypeDecl = false ; private final int TOP_LEVEL_SCOPE = - 1 ; private int fCurrentScope = TOP_LEVEL_SCOPE ; private int fCurrentSchemaURI = - 1 ; private int fEmptyURI = - 1 ; private int fXsiPrefix = - 1 ; private int fXsiURI = - 2 ; private int fXsiTypeAttValue = - 1 ; private DatatypeValidator fXsiTypeValidator = null ; private Grammar fGrammar = null ; private int fGrammarNameSpaceIndex = - 1 ; private GrammarResolver fGrammarResolver = null ; private boolean fScanningDTD = false ; private XMLDocumentScanner fDocumentScanner = null ; private boolean fCalledStartDocument = false ; private XMLDocumentHandler fDocumentHandler = null ; private XMLDocumentHandler . DTDHandler fDTDHandler = null ; private boolean fSeenRootElement = false ; private XMLAttrList fAttrList = null ; private int fXMLLang = - 1 ; private LocatorImpl fAttrNameLocator = null ; private boolean fCheckedForSchema = false ; private boolean fDeclsAreExternal = false ; private StringPool . CharArrayRange fCurrentElementCharArrayRange = null ; private char [ ] fCharRefData = null ; private boolean fSendCharDataAsCharArray = false ; private boolean fBufferDatatype = false ; private StringBuffer fDatatypeBuffer = new StringBuffer ( ) ; private QName fTempQName = new QName ( ) ; private XMLAttributeDecl fTempAttDecl = new XMLAttributeDecl ( ) ; private XMLAttributeDecl fTempAttributeDecl = new XMLAttributeDecl ( ) ; private XMLElementDecl fTempElementDecl = new XMLElementDecl ( ) ; private boolean fGrammarIsDTDGrammar = false ; private boolean fGrammarIsSchemaGrammar = false ; private boolean fNeedValidationOff = false ; private int fEMPTYSymbol = - 1 ; private int fANYSymbol = - 1 ; private int fMIXEDSymbol = - 1 ; private int fCHILDRENSymbol = - 1 ; private int fCDATASymbol = - 1 ; private int fIDSymbol = - 1 ; private int fIDREFSymbol = - 1 ; private int fIDREFSSymbol = - 1 ; private int fENTITYSymbol = - 1 ; private int fENTITIESSymbol = - 1 ; private int fNMTOKENSymbol = - 1 ; private int fNMTOKENSSymbol = - 1 ; private int fNOTATIONSymbol = - 1 ; private int fENUMERATIONSymbol = - 1 ; private int fREQUIREDSymbol = - 1 ; private int fFIXEDSymbol = - 1 ; private int fDATATYPESymbol = - 1 ; private int fEpsilonIndex = - 1 ; private DatatypeValidatorFactoryImpl fDataTypeReg = null ; private DatatypeValidator fValID = null ; private DatatypeValidator fValIDRef = null ; private DatatypeValidator fValIDRefs = null ; private DatatypeValidator fValENTITY = null ; private DatatypeValidator fValENTITIES = null ; private DatatypeValidator fValNMTOKEN = null ; private DatatypeValidator fValNMTOKENS = null ; private DatatypeValidator fValNOTATION = null ; protected XPathMatcherStack fMatcherStack = new XPathMatcherStack ( ) ; protected ValueStoreCache fValueStoreCache = new ValueStoreCache ( ) ; public XMLValidator ( StringPool stringPool , XMLErrorReporter errorReporter , DefaultEntityHandler entityHandler , XMLDocumentScanner documentScanner ) { fStringPool = stringPool ; fErrorReporter = errorReporter ; fEntityHandler = entityHandler ; fDocumentScanner = documentScanner ; fEmptyURI = fStringPool . addSymbol ( "" ) ; fXsiURI = fStringPool . addSymbol ( SchemaSymbols . URI_XSI ) ; fAttrList = new XMLAttrList ( fStringPool ) ; entityHandler . setEventHandler ( this ) ; entityHandler . setCharDataHandler ( this ) ; fDocumentScanner . setEventHandler ( this ) ; for ( int i = 0 ; i < sizeQNameParts ; i ++ ) { fElementQNamePartsStack [ i ] = new QName ( ) ; } init ( ) ; } public void setGrammarResolver ( GrammarResolver grammarResolver ) { fGrammarResolver = grammarResolver ; if ( fValidating ) { initDataTypeValidators ( ) ; } } public void initHandlers ( boolean sendCharDataAsCharArray , XMLDocumentHandler docHandler , XMLDocumentHandler . DTDHandler dtdHandler ) { fSendCharDataAsCharArray = sendCharDataAsCharArray ; fEntityHandler . setSendCharDataAsCharArray ( fSendCharDataAsCharArray ) ; fDocumentHandler = docHandler ; fDTDHandler = dtdHandler ; } public void resetOrCopy ( StringPool stringPool ) throws Exception { fAttrList = new XMLAttrList ( stringPool ) ; resetCommon ( stringPool ) ; } public void reset ( StringPool stringPool ) throws Exception { fAttrList . reset ( stringPool ) ; resetCommon ( stringPool ) ; } public void setValidationEnabled ( boolean flag ) throws Exception { fValidationEnabled = flag ; fValidationEnabledByDynamic = false ; if ( fValidationEnabled ) { if ( fDynamicDisabledByValidation ) { fDynamicValidation = true ; fDynamicDisabledByValidation = false ; } } else if ( fDynamicValidation ) { fDynamicValidation = false ; fDynamicDisabledByValidation = true ; } fValidating = fValidationEnabled ; if ( fValidating ) { initDataTypeValidators ( ) ; } } public boolean getValidationEnabled ( ) { return fValidationEnabled ; } public void setSchemaValidationEnabled ( boolean flag ) { fSchemaValidation = flag ; } public boolean getSchemaValidationEnabled ( ) { return fSchemaValidation ; } public void setDynamicValidationEnabled ( boolean flag ) throws Exception { fDynamicValidation = flag ; fDynamicDisabledByValidation = false ; if ( ! fDynamicValidation ) { if ( fValidationEnabledByDynamic ) { fValidationEnabled = false ; fValidationEnabledByDynamic = false ; } } else if ( ! fValidationEnabled ) { fValidationEnabled = true ; fValidationEnabledByDynamic = true ; } fValidating = fValidationEnabled ; if ( fValidating ) { initDataTypeValidators ( ) ; } } public boolean getDynamicValidationEnabled ( ) { return fDynamicValidation ; } public void setNormalizeAttributeValues ( boolean normalize ) { fNormalizeAttributeValues = normalize ; } public void setLoadDTDGrammar ( boolean loadDG ) { if ( fValidating ) { fLoadDTDGrammar = true ; } else { fLoadDTDGrammar = loadDG ; } } public boolean getLoadDTDGrammar ( ) { return fLoadDTDGrammar ; } public void setNamespacesEnabled ( boolean flag ) { fNamespacesEnabled = flag ; } public boolean getNamespacesEnabled ( ) { return fNamespacesEnabled ; } public void setWarningOnDuplicateAttDef ( boolean flag ) { fWarningOnDuplicateAttDef = flag ; } public boolean getWarningOnDuplicateAttDef ( ) { return fWarningOnDuplicateAttDef ; } public void setWarningOnUndeclaredElements ( boolean flag ) { fWarningOnUndeclaredElements = flag ; } public boolean getWarningOnUndeclaredElements ( ) { return fWarningOnUndeclaredElements ; } public void startValueScopeFor ( IdentityConstraint identityConstraint ) throws Exception { Field field = identityConstraint . getFieldAt ( 0 ) ; ValueStoreBase valueStore = fValueStoreCache . getValueStoreFor ( field ) ; valueStore . startValueScope ( ) ; } public XPathMatcher activateField ( Field field ) throws Exception { if ( DEBUG_IDENTITY_CONSTRAINTS ) { System . out . println ( "<IC>: activateField(\"" + field + "\")" ) ; } ValueStore valueStore = fValueStoreCache . getValueStoreFor ( field ) ; XPathMatcher matcher = field . createMatcher ( valueStore ) ; fMatcherStack . addMatcher ( matcher ) ; matcher . startDocumentFragment ( fStringPool , fNamespacesScope ) ; return matcher ; } public void endValueScopeFor ( IdentityConstraint identityConstraint ) throws Exception { Field field = identityConstraint . getFieldAt ( 0 ) ; ValueStoreBase valueStore = fValueStoreCache . getValueStoreFor ( field ) ; valueStore . endValueScope ( ) ; } public void startEntityReference ( int entityName , int entityType , int entityContext ) throws Exception { fDocumentHandler . startEntityReference ( entityName , entityType , entityContext ) ; } public void endEntityReference ( int entityName , int entityType , int entityContext ) throws Exception { fDocumentHandler . endEntityReference ( entityName , entityType , entityContext ) ; } public void sendEndOfInputNotifications ( int entityName , boolean moreToFollow ) throws Exception { fDocumentScanner . endOfInput ( entityName , moreToFollow ) ; } public void sendReaderChangeNotifications ( XMLEntityHandler . EntityReader reader , int readerId ) throws Exception { fDocumentScanner . readerChange ( reader , readerId ) ; } public boolean externalEntityStandaloneCheck ( ) { return ( fStandaloneReader != - 1 && fValidating ) ; } public boolean getValidating ( ) { return fValidating ; } public void processCharacters ( char [ ] chars , int offset , int length ) throws Exception { if ( fValidating ) { if ( fInElementContent || fCurrentContentSpecType == XMLElementDecl . TYPE_EMPTY ) { charDataInContent ( ) ; } if ( fBufferDatatype ) { fDatatypeBuffer . append ( chars , offset , length ) ; } } fDocumentHandler . characters ( chars , offset , length ) ; } public void processCharacters ( int data ) throws Exception { if ( fValidating ) { if ( fInElementContent || fCurrentContentSpecType == XMLElementDecl . TYPE_EMPTY ) { charDataInContent ( ) ; } if ( fBufferDatatype ) { fDatatypeBuffer . append ( fStringPool . toString ( data ) ) ; } } fDocumentHandler . characters ( data ) ; } public void processWhitespace ( char [ ] chars , int offset , int length ) throws Exception { if ( fInElementContent ) { if ( fStandaloneReader != - 1 && fValidating && getElementDeclIsExternal ( fCurrentElementIndex ) ) { reportRecoverableXMLError ( XMLMessages . MSG_WHITE_SPACE_IN_ELEMENT_CONTENT_WHEN_STANDALONE , XMLMessages . VC_STANDALONE_DOCUMENT_DECLARATION ) ; } fDocumentHandler . ignorableWhitespace ( chars , offset , length ) ; } else { if ( fCurrentContentSpecType == XMLElementDecl . TYPE_EMPTY ) { charDataInContent ( ) ; } fDocumentHandler . characters ( chars , offset , length ) ; } } public void processWhitespace ( int data ) throws Exception { if ( fInElementContent ) { if ( fStandaloneReader != - 1 && fValidating && getElementDeclIsExternal ( fCurrentElementIndex ) ) { reportRecoverableXMLError ( XMLMessages . MSG_WHITE_SPACE_IN_ELEMENT_CONTENT_WHEN_STANDALONE , XMLMessages . VC_STANDALONE_DOCUMENT_DECLARATION ) ; } fDocumentHandler . ignorableWhitespace ( data ) ; } else { if ( fCurrentContentSpecType == XMLElementDecl . TYPE_EMPTY ) { charDataInContent ( ) ; } fDocumentHandler . characters ( data ) ; } } public void scanElementType ( XMLEntityHandler . EntityReader entityReader , char fastchar , QName element ) throws Exception { if ( ! fNamespacesEnabled ) { element . clear ( ) ; element . localpart = entityReader . scanName ( fastchar ) ; element . rawname = element . localpart ; } else { entityReader . scanQName ( fastchar , element ) ; if ( entityReader . lookingAtChar ( ':' , false ) ) { fErrorReporter . reportError ( fErrorReporter . getLocator ( ) , XMLMessages . XML_DOMAIN , XMLMessages . MSG_TWO_COLONS_IN_QNAME , XMLMessages . P5_INVALID_CHARACTER , null , XMLErrorReporter . ERRORTYPE_FATAL_ERROR ) ; entityReader . skipPastNmtoken ( ' ' ) ; } } } public boolean scanExpectedElementType ( XMLEntityHandler . EntityReader entityReader , char fastchar , QName element ) throws Exception { if ( fCurrentElementCharArrayRange == null ) { fCurrentElementCharArrayRange = fStringPool . createCharArrayRange ( ) ; } fStringPool . getCharArrayRange ( fCurrentElement . rawname , fCurrentElementCharArrayRange ) ; return entityReader . scanExpectedName ( fastchar , fCurrentElementCharArrayRange ) ; } public void scanAttributeName ( XMLEntityHandler . EntityReader entityReader , QName element , QName attribute ) throws Exception { if ( ! fSeenRootElement ) { fSeenRootElement = true ; rootElementSpecified ( element ) ; fStringPool . resetShuffleCount ( ) ; } if ( ! fNamespacesEnabled ) { attribute . clear ( ) ; attribute . localpart = entityReader . scanName ( '=' ) ; attribute . rawname = attribute . localpart ; } else { entityReader . scanQName ( '=' , attribute ) ; if ( entityReader . lookingAtChar ( ':' , false ) ) { fErrorReporter . reportError ( fErrorReporter . getLocator ( ) , XMLMessages . XML_DOMAIN , XMLMessages . MSG_TWO_COLONS_IN_QNAME , XMLMessages . P5_INVALID_CHARACTER , null , XMLErrorReporter . ERRORTYPE_FATAL_ERROR ) ; entityReader . skipPastNmtoken ( ' ' ) ; } } } public void callStartDocument ( ) throws Exception { if ( ! fCalledStartDocument ) { fDocumentHandler . startDocument ( ) ; fCalledStartDocument = true ; if ( fValidating ) { fValueStoreCache . startDocument ( ) ; } } } public void callEndDocument ( ) throws Exception { if ( fCalledStartDocument ) { if ( fValidating ) { if ( DEBUG_IDENTITY_CONSTRAINTS ) { System . out . println ( "<IC>: ValueStoreCache#endDocument()" ) ; } fValueStoreCache . endDocument ( ) ; } fDocumentHandler . endDocument ( ) ; } } public void callXMLDecl ( int version , int encoding , int standalone ) throws Exception { fDocumentHandler . xmlDecl ( version , encoding , standalone ) ; } public void callStandaloneIsYes ( ) throws Exception { fStandaloneReader = fEntityHandler . getReaderId ( ) ; } public void callTextDecl ( int version , int encoding ) throws Exception { fDocumentHandler . textDecl ( version , encoding ) ; } public void element ( QName element ) throws Exception { fAttrListHandle = - 1 ; } public boolean attribute ( QName element , QName attrName , int attrValue ) throws Exception { if ( fAttrListHandle == - 1 ) { fAttrListHandle = fAttrList . startAttrList ( ) ; } return fAttrList . addAttr ( attrName , attrValue , fCDATASymbol , true , true ) == - 1 ; } public void callStartElement ( QName element ) throws Exception { if ( DEBUG_SCHEMA_VALIDATION ) System . out . println ( "\n=======StartElement : " + fStringPool . toString ( element . localpart ) ) ; if ( ! fSeenRootElement ) { fSeenRootElement = true ; rootElementSpecified ( element ) ; fStringPool . resetShuffleCount ( ) ; } if ( fGrammar != null && fGrammarIsDTDGrammar ) { fAttrListHandle = addDTDDefaultAttributes ( element , fAttrList , fAttrListHandle , fValidating , fStandaloneReader != - 1 ) ; } fCheckedForSchema = true ; if ( fNamespacesEnabled ) { bindNamespacesToElementAndAttributes ( element , fAttrList ) ; } validateElementAndAttributes ( element , fAttrList ) ; if ( fAttrListHandle != - 1 ) { fAttrList . endAttrList ( ) ; } if ( fValidating && fGrammar != null ) { if ( DEBUG_IDENTITY_CONSTRAINTS ) { System . out . println ( "<IC>: pushing context - element: " + fStringPool . toString ( element . rawname ) ) ; } fMatcherStack . pushContext ( ) ; int eindex = fGrammar . getElementDeclIndex ( element , - 1 ) ; if ( eindex != - 1 ) { fGrammar . getElementDecl ( eindex , fTempElementDecl ) ; fValueStoreCache . initValueStoresFor ( fTempElementDecl ) ; int ucount = fTempElementDecl . unique . size ( ) ; for ( int i = 0 ; i < ucount ; i ++ ) { activateSelectorFor ( ( IdentityConstraint ) fTempElementDecl . unique . elementAt ( i ) ) ; } int kcount = fTempElementDecl . key . size ( ) ; for ( int i = 0 ; i < kcount ; i ++ ) { activateSelectorFor ( ( IdentityConstraint ) fTempElementDecl . key . elementAt ( i ) ) ; } int krcount = fTempElementDecl . keyRef . size ( ) ; for ( int i = 0 ; i < krcount ; i ++ ) { activateSelectorFor ( ( IdentityConstraint ) fTempElementDecl . keyRef . elementAt ( i ) ) ; } } int count = fMatcherStack . getMatcherCount ( ) ; for ( int i = 0 ; i < count ; i ++ ) { XPathMatcher matcher = fMatcherStack . getMatcherAt ( i ) ; if ( DEBUG_IDENTITY_CONSTRAINTS ) { System . out . println ( "<IC>: " + matcher . toString ( ) + "#startElement(" + fStringPool . toString ( element . rawname ) + ")" ) ; } matcher . startElement ( element , fAttrList , fAttrListHandle ) ; } } fDocumentHandler . startElement ( element , fAttrList , fAttrListHandle ) ; fElementDepth ++ ; fAttrListHandle = - 1 ; if ( fValidating ) { if ( fElementChildrenOffsetStack . length <= fElementDepth ) { int newarray [ ] = new int [ fElementChildrenOffsetStack . length * 2 ] ; System . arraycopy ( fElementChildrenOffsetStack , 0 , newarray , 0 , fElementChildrenOffsetStack . length ) ; fElementChildrenOffsetStack = newarray ; } fElementChildrenOffsetStack [ fElementDepth ] = fElementChildrenLength ; if ( fElementChildren . length <= fElementChildrenLength ) { QName [ ] newarray = new QName [ fElementChildrenLength * 2 ] ; System . arraycopy ( fElementChildren , 0 , newarray , 0 , fElementChildren . length ) ; fElementChildren = newarray ; } QName qname = fElementChildren [ fElementChildrenLength ] ; if ( qname == null ) { for ( int i = fElementChildrenLength ; i < fElementChildren . length ; i ++ ) { fElementChildren [ i ] = new QName ( ) ; } qname = fElementChildren [ fElementChildrenLength ] ; } qname . setValues ( element ) ; fElementChildrenLength ++ ; if ( DEBUG_ELEMENT_CHILDREN ) { printChildren ( ) ; printStack ( ) ; } } ensureStackCapacity ( fElementDepth ) ; fCurrentElement . setValues ( element ) ; fCurrentElementEntity = fEntityHandler . getReaderId ( ) ; fElementQNamePartsStack [ fElementDepth ] . setValues ( fCurrentElement ) ; fElementEntityStack [ fElementDepth ] = fCurrentElementEntity ; fElementIndexStack [ fElementDepth ] = fCurrentElementIndex ; fContentSpecTypeStack [ fElementDepth ] = fCurrentContentSpecType ; if ( fNeedValidationOff ) { fValidating = false ; fNeedValidationOff = false ; } if ( fValidating && fGrammarIsSchemaGrammar ) { pushContentLeafStack ( ) ; } fValidationFlagStack [ fElementDepth ] = fValidating ? 0 : - 1 ; fScopeStack [ fElementDepth ] = fCurrentScope ; fGrammarNameSpaceIndexStack [ fElementDepth ] = fGrammarNameSpaceIndex ; } private void activateSelectorFor ( IdentityConstraint ic ) throws Exception { Selector selector = ic . getSelector ( ) ; if ( DEBUG_IDENTITY_CONSTRAINTS ) { System . out . println ( "<IC>: XMLValidator#activateSelectorFor(" + selector + ')' ) ; } FieldActivator activator = this ; XPathMatcher matcher = selector . createMatcher ( activator ) ; fMatcherStack . addMatcher ( matcher ) ; if ( DEBUG_IDENTITY_CONSTRAINTS ) { System . out . println ( "<IC>: " + matcher + "#startDocumentFragment()" ) ; } matcher . startDocumentFragment ( fStringPool , null ) ; } private void pushContentLeafStack ( ) throws Exception { int contentType = getContentSpecType ( fCurrentElementIndex ) ; if ( contentType == XMLElementDecl . TYPE_CHILDREN ) { XMLContentModel cm = getElementContentModel ( fCurrentElementIndex ) ; ContentLeafNameTypeVector cv = cm . getContentLeafNameTypeVector ( ) ; if ( cm != null ) { fContentLeafStack [ fElementDepth ] = cv ; } } } private void ensureStackCapacity ( int newElementDepth ) { if ( newElementDepth == fElementQNamePartsStack . length ) { int [ ] newStack = new int [ newElementDepth * 2 ] ; System . arraycopy ( fScopeStack , 0 , newStack , 0 , newElementDepth ) ; fScopeStack = newStack ; newStack = new int [ newElementDepth * 2 ] ; System . arraycopy ( fGrammarNameSpaceIndexStack , 0 , newStack , 0 , newElementDepth ) ; fGrammarNameSpaceIndexStack = newStack ; QName [ ] newStackOfQueue = new QName [ newElementDepth * 2 ] ; System . arraycopy ( this . fElementQNamePartsStack , 0 , newStackOfQueue , 0 , newElementDepth ) ; fElementQNamePartsStack = newStackOfQueue ; QName qname = fElementQNamePartsStack [ newElementDepth ] ; if ( qname == null ) { for ( int i = newElementDepth ; i < fElementQNamePartsStack . length ; i ++ ) { fElementQNamePartsStack [ i ] = new QName ( ) ; } } newStack = new int [ newElementDepth * 2 ] ; System . arraycopy ( fElementEntityStack , 0 , newStack , 0 , newElementDepth ) ; fElementEntityStack = newStack ; newStack = new int [ newElementDepth * 2 ] ; System . arraycopy ( fElementIndexStack , 0 , newStack , 0 , newElementDepth ) ; fElementIndexStack = newStack ; newStack = new int [ newElementDepth * 2 ] ; System . arraycopy ( fContentSpecTypeStack , 0 , newStack , 0 , newElementDepth ) ; fContentSpecTypeStack = newStack ; newStack = new int [ newElementDepth * 2 ] ; System . arraycopy ( fValidationFlagStack , 0 , newStack , 0 , newElementDepth ) ; fValidationFlagStack = newStack ; ContentLeafNameTypeVector [ ] newStackV = new ContentLeafNameTypeVector [ newElementDepth * 2 ] ; System . arraycopy ( fContentLeafStack , 0 , newStackV , 0 , newElementDepth ) ; fContentLeafStack = newStackV ; } } public void callEndElement ( int readerId ) throws Exception { if ( DEBUG_SCHEMA_VALIDATION ) System . out . println ( "=======EndElement : " + fStringPool . toString ( fCurrentElement . localpart ) + "\n" ) ; int prefixIndex = fCurrentElement . prefix ; int elementType = fCurrentElement . rawname ; if ( fCurrentElementEntity != readerId ) { fErrorReporter . reportError ( fErrorReporter . getLocator ( ) , XMLMessages . XML_DOMAIN , XMLMessages . MSG_ELEMENT_ENTITY_MISMATCH , XMLMessages . P78_NOT_WELLFORMED , new Object [ ] { fStringPool . toString ( elementType ) } , XMLErrorReporter . ERRORTYPE_FATAL_ERROR ) ; } fElementDepth -- ; if ( fValidating ) { int elementIndex = fCurrentElementIndex ; if ( elementIndex != - 1 && fCurrentContentSpecType != - 1 ) { QName children [ ] = fElementChildren ; int childrenOffset = fElementChildrenOffsetStack [ fElementDepth + 1 ] + 1 ; int childrenLength = fElementChildrenLength - childrenOffset ; if ( DEBUG_ELEMENT_CHILDREN ) { System . out . println ( "endElement(" + fStringPool . toString ( fCurrentElement . rawname ) + ')' ) ; System . out . println ( "fCurrentContentSpecType : " + fCurrentContentSpecType ) ; System . out . print ( "offset: " ) ; System . out . print ( childrenOffset ) ; System . out . print ( ", length: " ) ; System . out . print ( childrenLength ) ; System . out . println ( ) ; printChildren ( ) ; printStack ( ) ; } int result = checkContent ( elementIndex , children , childrenOffset , childrenLength ) ; if ( DEBUG_SCHEMA_VALIDATION ) System . out . println ( "!!!!!!!!In XMLValidator, the return value from checkContent : " + result ) ; if ( result != - 1 ) { int majorCode = result != childrenLength ? XMLMessages . MSG_CONTENT_INVALID : XMLMessages . MSG_CONTENT_INCOMPLETE ; fGrammar . getElementDecl ( elementIndex , fTempElementDecl ) ; if ( fTempElementDecl . type == XMLElementDecl . TYPE_EMPTY ) { reportRecoverableXMLError ( majorCode , 0 , fStringPool . toString ( elementType ) , "EMPTY" ) ; } else reportRecoverableXMLError ( majorCode , 0 , fStringPool . toString ( elementType ) , XMLContentSpec . toString ( fGrammar , fStringPool , fTempElementDecl . contentSpecIndex ) ) ; } } fElementChildrenLength = fElementChildrenOffsetStack [ fElementDepth + 1 ] + 1 ; int oldCount = fMatcherStack . getMatcherCount ( ) ; for ( int i = oldCount - 1 ; i >= 0 ; i -- ) { XPathMatcher matcher = fMatcherStack . getMatcherAt ( i ) ; if ( DEBUG_IDENTITY_CONSTRAINTS ) { System . out . println ( "<IC>: " + matcher + "#endElement(" + fStringPool . toString ( fCurrentElement . rawname ) + ")" ) ; } matcher . endElement ( fCurrentElement ) ; } if ( DEBUG_IDENTITY_CONSTRAINTS ) { System . out . println ( "<IC>: popping context - element: " + fStringPool . toString ( fCurrentElement . rawname ) ) ; } if ( fMatcherStack . size ( ) > 0 ) { fMatcherStack . popContext ( ) ; } int newCount = fMatcherStack . getMatcherCount ( ) ; for ( int i = oldCount - 1 ; i >= newCount ; i -- ) { XPathMatcher matcher = fMatcherStack . getMatcherAt ( i ) ; if ( DEBUG_IDENTITY_CONSTRAINTS ) { System . out . println ( "<IC>: " + matcher + "#endDocumentFragment()" ) ; } matcher . endDocumentFragment ( ) ; } } fDocumentHandler . endElement ( fCurrentElement ) ; if ( fNamespacesEnabled ) { fNamespacesScope . decreaseDepth ( ) ; } if ( fElementDepth < - 1 ) { throw new RuntimeException ( "FWK008 Element stack underflow" ) ; } if ( fElementDepth < 0 ) { fCurrentElement . clear ( ) ; fCurrentElementEntity = - 1 ; fCurrentElementIndex = - 1 ; fCurrentContentSpecType = - 1 ; fInElementContent = false ; if ( fValidating ) { try { this . fValIDRef . validate ( null , this . fValidateIDRef ) ; this . fValIDRefs . validate ( null , this . fValidateIDRef ) ; this . fValID . validate ( null , this . fResetID ) ; this . fValIDRef . validate ( null , this . fResetIDRef ) ; this . fValIDRefs . validate ( null , this . fResetID ) ; } catch ( InvalidDatatypeValueException ex ) { reportRecoverableXMLError ( ex . getMajorCode ( ) , ex . getMinorCode ( ) , ex . getMessage ( ) ) ; } } return ; } fCurrentElement . prefix = - 1 ; if ( fNamespacesEnabled ) { fCurrentElement . localpart = fElementQNamePartsStack [ fElementDepth ] . localpart ; } else { fCurrentElement . localpart = fElementQNamePartsStack [ fElementDepth ] . rawname ; } fCurrentElement . rawname = fElementQNamePartsStack [ fElementDepth ] . rawname ; fCurrentElement . uri = fElementQNamePartsStack [ fElementDepth ] . uri ; fCurrentElement . prefix = fElementQNamePartsStack [ fElementDepth ] . prefix ; fCurrentElementEntity = fElementEntityStack [ fElementDepth ] ; fCurrentElementIndex = fElementIndexStack [ fElementDepth ] ; fCurrentContentSpecType = fContentSpecTypeStack [ fElementDepth ] ; fValidating = fValidationFlagStack [ fElementDepth ] == 0 ? true : false ; fCurrentScope = fScopeStack [ fElementDepth ] ; if ( fGrammarNameSpaceIndex != fGrammarNameSpaceIndexStack [ fElementDepth ] ) { fGrammarNameSpaceIndex = fGrammarNameSpaceIndexStack [ fElementDepth ] ; if ( fValidating && fGrammarIsSchemaGrammar ) if ( fGrammarNameSpaceIndex == - 1 ) { fGrammar = null ; fGrammarIsSchemaGrammar = false ; fGrammarIsDTDGrammar = false ; } else if ( ! switchGrammar ( fGrammarNameSpaceIndex ) ) { reportRecoverableXMLError ( XMLMessages . MSG_GENERIC_SCHEMA_ERROR , XMLMessages . SCHEMA_GENERIC_ERROR , "Grammar with uri 1: " + fStringPool . toString ( fGrammarNameSpaceIndex ) + " , can not found" ) ; } } if ( fValidating ) { fBufferDatatype = false ; } fInElementContent = ( fCurrentContentSpecType == XMLElementDecl . TYPE_CHILDREN ) ; } public void callStartCDATA ( ) throws Exception { if ( fValidating && fInElementContent ) { charDataInContent ( ) ; } fDocumentHandler . startCDATA ( ) ; } public void callEndCDATA ( ) throws Exception { fDocumentHandler . endCDATA ( ) ; } public void callCharacters ( int ch ) throws Exception { if ( fCharRefData == null ) { fCharRefData = new char [ 2 ] ; } int count = ( ch < 0x10000 ) ? 1 : 2 ; if ( count == 1 ) { fCharRefData [ 0 ] = ( char ) ch ; } else { fCharRefData [ 0 ] = ( char ) ( ( ( ch - 0x00010000 ) > > 10 ) + 0xd800 ) ; fCharRefData [ 1 ] = ( char ) ( ( ( ch - 0x00010000 ) & 0x3ff ) + 0xdc00 ) ; } if ( fValidating && ( fInElementContent || fCurrentContentSpecType == XMLElementDecl . TYPE_EMPTY ) ) { charDataInContent ( ) ; } if ( fValidating ) { if ( fBufferDatatype ) { fDatatypeBuffer . append ( fCharRefData , 0 , 1 ) ; } } if ( fSendCharDataAsCharArray ) { fDocumentHandler . characters ( fCharRefData , 0 , count ) ; } else { int index = fStringPool . addString ( new String ( fCharRefData , 0 , count ) ) ; fDocumentHandler . characters ( index ) ; } } public void callProcessingInstruction ( int target , int data ) throws Exception { fDocumentHandler . processingInstruction ( target , data ) ; } public void callComment ( int comment ) throws Exception { fDocumentHandler . comment ( comment ) ; } public void startNamespaceDeclScope ( int prefix , int uri ) throws Exception { fDocumentHandler . startNamespaceDeclScope ( prefix , uri ) ; } public void endNamespaceDeclScope ( int prefix ) throws Exception { fDocumentHandler . endNamespaceDeclScope ( prefix ) ; } public void setRootElementType ( QName rootElement ) { fRootElement . setValues ( rootElement ) ; } private boolean getElementDeclIsExternal ( int elementIndex ) { if ( fGrammarIsDTDGrammar ) { return ( ( DTDGrammar ) fGrammar ) . getElementDeclIsExternal ( elementIndex ) ; } return false ; } public int getContentSpecType ( int elementIndex ) { int contentSpecType = - 1 ; if ( elementIndex > - 1 ) { if ( fGrammar . getElementDecl ( elementIndex , fTempElementDecl ) ) { contentSpecType = fTempElementDecl . type ; } } return contentSpecType ; } public int getContentSpecHandle ( int elementIndex ) { int contentSpecHandle = - 1 ; if ( elementIndex > - 1 ) { if ( fGrammar . getElementDecl ( elementIndex , fTempElementDecl ) ) { contentSpecHandle = fTempElementDecl . contentSpecIndex ; } } return contentSpecHandle ; } private void reportSchemaError ( int code , Object [ ] args ) throws Exception { fErrorReporter . reportError ( fErrorReporter . getLocator ( ) , SchemaMessageProvider . SCHEMA_DOMAIN , code , SchemaMessageProvider . MSG_NONE , args , XMLErrorReporter . ERRORTYPE_RECOVERABLE_ERROR ) ; } protected void reportRecoverableXMLError ( int majorCode , int minorCode ) throws Exception { fErrorReporter . reportError ( fErrorReporter . getLocator ( ) , XMLMessages . XML_DOMAIN , majorCode , minorCode , null , XMLErrorReporter . ERRORTYPE_RECOVERABLE_ERROR ) ; } protected void reportRecoverableXMLError ( int majorCode , int minorCode , int stringIndex1 ) throws Exception { Object [ ] args = { fStringPool . toString ( stringIndex1 ) } ; fErrorReporter . reportError ( fErrorReporter . getLocator ( ) , XMLMessages . XML_DOMAIN , majorCode , minorCode , args , XMLErrorReporter . ERRORTYPE_RECOVERABLE_ERROR ) ; } protected void reportRecoverableXMLError ( int majorCode , int minorCode , String string1 ) throws Exception { Object [ ] args = { string1 } ; fErrorReporter . reportError ( fErrorReporter . getLocator ( ) , XMLMessages . XML_DOMAIN , majorCode , minorCode , args , XMLErrorReporter . ERRORTYPE_RECOVERABLE_ERROR ) ; } protected void reportRecoverableXMLError ( int majorCode , int minorCode , int stringIndex1 , int stringIndex2 ) throws Exception { Object [ ] args = { fStringPool . toString ( stringIndex1 ) , fStringPool . toString ( stringIndex2 ) } ; fErrorReporter . reportError ( fErrorReporter . getLocator ( ) , XMLMessages . XML_DOMAIN , majorCode , minorCode , args , XMLErrorReporter . ERRORTYPE_RECOVERABLE_ERROR ) ; } protected void reportRecoverableXMLError ( int majorCode , int minorCode , String string1 , String string2 ) throws Exception { Object [ ] args = { string1 , string2 } ; fErrorReporter . reportError ( fErrorReporter . getLocator ( ) , XMLMessages . XML_DOMAIN , majorCode , minorCode , args , XMLErrorReporter . ERRORTYPE_RECOVERABLE_ERROR ) ; } protected void reportRecoverableXMLError ( int majorCode , int minorCode , String string1 , String string2 , String string3 ) throws Exception { Object [ ] args = { string1 , string2 , string3 } ; fErrorReporter . reportError ( fErrorReporter . getLocator ( ) , XMLMessages . XML_DOMAIN , majorCode , minorCode , args , XMLErrorReporter . ERRORTYPE_RECOVERABLE_ERROR ) ; } protected int whatCanGoHere ( int elementIndex , boolean fullyValid , InsertableElementsInfo info ) throws Exception { if ( info . insertAt > info . childCount || info . curChildren == null || info . childCount < 1 || info . childCount > info . curChildren . length ) { fErrorReporter . reportError ( fErrorReporter . getLocator ( ) , ImplementationMessages . XERCES_IMPLEMENTATION_DOMAIN , ImplementationMessages . VAL_WCGHI , 0 , null , XMLErrorReporter . ERRORTYPE_FATAL_ERROR ) ; } int retVal = 0 ; try { final XMLContentModel cmElem = getElementContentModel ( elementIndex ) ; retVal = cmElem . whatCanGoHere ( fullyValid , info ) ; } catch ( CMException excToCatch ) { int majorCode = excToCatch . getErrorCode ( ) ; fErrorReporter . reportError ( fErrorReporter . getLocator ( ) , ImplementationMessages . XERCES_IMPLEMENTATION_DOMAIN , majorCode , 0 , null , XMLErrorReporter . ERRORTYPE_FATAL_ERROR ) ; throw excToCatch ; } return retVal ; } protected boolean getAttDefIsExternal ( QName element , QName attribute ) { int attDefIndex = getAttDef ( element , attribute ) ; if ( fGrammarIsDTDGrammar ) { return ( ( DTDGrammar ) fGrammar ) . getAttributeDeclIsExternal ( attDefIndex ) ; } return false ; } private boolean usingStandaloneReader ( ) { return fStandaloneReader == - 1 || fEntityHandler . getReaderId ( ) == fStandaloneReader ; } private LocatorImpl getLocatorImpl ( LocatorImpl fillin ) { Locator here = fErrorReporter . getLocator ( ) ; if ( fillin == null ) return new LocatorImpl ( here ) ; fillin . setPublicId ( here . getPublicId ( ) ) ; fillin . setSystemId ( here . getSystemId ( ) ) ; fillin . setLineNumber ( here . getLineNumber ( ) ) ; fillin . setColumnNumber ( here . getColumnNumber ( ) ) ; return fillin ; } private void poolReset ( ) { if ( fValidating ) { try { this . fValID . validate ( null , this . fResetID ) ; this . fValIDRef . validate ( null , this . fResetIDRef ) ; this . fValIDRefs . validate ( null , this . fResetIDRef ) ; } catch ( InvalidDatatypeValueException ex ) { System . err . println ( "Error re-Initializing: ID,IDRef,IDRefs pools" ) ; } } } private void resetCommon ( StringPool stringPool ) throws Exception { fStringPool = stringPool ; fValidating = fValidationEnabled ; fValidationEnabledByDynamic = false ; fDynamicDisabledByValidation = false ; poolReset ( ) ; fCalledStartDocument = false ; fStandaloneReader = - 1 ; fElementChildrenLength = 0 ; fElementDepth = - 1 ; fSeenRootElement = false ; fSeenDoctypeDecl = false ; fNamespacesScope = null ; fNamespacesPrefix = - 1 ; fRootElement . clear ( ) ; fAttrListHandle = - 1 ; fCheckedForSchema = false ; fCurrentScope = TOP_LEVEL_SCOPE ; fCurrentSchemaURI = - 1 ; fEmptyURI = - 1 ; fXsiPrefix = - 1 ; fXsiTypeValidator = null ; fGrammar = null ; fGrammarNameSpaceIndex = - 1 ; if ( fGrammarResolver != null ) { fGrammarResolver . clearGrammarResolver ( ) ; } fGrammarIsDTDGrammar = false ; fGrammarIsSchemaGrammar = false ; fMatcherStack . clear ( ) ; init ( ) ; } private void init ( ) { fEmptyURI = fStringPool . addSymbol ( "" ) ; fXsiURI = fStringPool . addSymbol ( SchemaSymbols . URI_XSI ) ; fEMPTYSymbol = fStringPool . addSymbol ( "EMPTY" ) ; fANYSymbol = fStringPool . addSymbol ( "ANY" ) ; fMIXEDSymbol = fStringPool . addSymbol ( "MIXED" ) ; fCHILDRENSymbol = fStringPool . addSymbol ( "CHILDREN" ) ; fCDATASymbol = fStringPool . addSymbol ( "CDATA" ) ; fIDSymbol = fStringPool . addSymbol ( "ID" ) ; fIDREFSymbol = fStringPool . addSymbol ( "IDREF" ) ; fIDREFSSymbol = fStringPool . addSymbol ( "IDREFS" ) ; fENTITYSymbol = fStringPool . addSymbol ( "ENTITY" ) ; fENTITIESSymbol = fStringPool . addSymbol ( "ENTITIES" ) ; fNMTOKENSymbol = fStringPool . addSymbol ( "NMTOKEN" ) ; fNMTOKENSSymbol = fStringPool . addSymbol ( "NMTOKENS" ) ; fNOTATIONSymbol = fStringPool . addSymbol ( "NOTATION" ) ; fENUMERATIONSymbol = fStringPool . addSymbol ( "ENUMERATION" ) ; fREQUIREDSymbol = fStringPool . addSymbol ( "#REQUIRED" ) ; fFIXEDSymbol = fStringPool . addSymbol ( "#FIXED" ) ; fDATATYPESymbol = fStringPool . addSymbol ( "<<datatype>>" ) ; fEpsilonIndex = fStringPool . addSymbol ( "<<CMNODE_EPSILON>>" ) ; fXMLLang = fStringPool . addSymbol ( "xml:lang" ) ; } private void initDataTypeValidators ( ) { try { if ( fGrammarResolver != null ) { fDataTypeReg = ( DatatypeValidatorFactoryImpl ) fGrammarResolver . getDatatypeRegistry ( ) ; fDataTypeReg . initializeDTDRegistry ( ) ; } if ( fDataTypeReg != null ) { fValID = fDataTypeReg . getDatatypeValidator ( "ID" ) ; fValIDRef = fDataTypeReg . getDatatypeValidator ( "IDREF" ) ; fValIDRefs = fDataTypeReg . getDatatypeValidator ( "IDREFS" ) ; fValENTITY = fDataTypeReg . getDatatypeValidator ( "ENTITY" ) ; fValENTITIES = fDataTypeReg . getDatatypeValidator ( "ENTITIES" ) ; fValNMTOKEN = fDataTypeReg . getDatatypeValidator ( "NMTOKEN" ) ; fValNMTOKENS = fDataTypeReg . getDatatypeValidator ( "NMTOKENS" ) ; fValNOTATION = fDataTypeReg . getDatatypeValidator ( "NOTATION" ) ; Object [ ] packageArgsEntityVal = { ( Object ) this . fEntityHandler , ( Object ) this . fStringPool } ; fValidateENTITYMsg . setDatatypeObject ( ( Object ) packageArgsEntityVal ) ; fValENTITY . validate ( null , fValidateENTITYMsg ) ; fValENTITIES . validate ( null , fValidateENTITYMsg ) ; } } catch ( InvalidDatatypeValueException ex ) { System . err . println ( "Error: " + ex . getLocalizedMessage ( ) ) ; } } private int addDefaultAttributes ( int elementIndex , XMLAttrList attrList , int attrIndex , boolean validationEnabled , boolean standalone ) throws Exception { fGrammar . getElementDecl ( elementIndex , fTempElementDecl ) ; int elementNameIndex = fTempElementDecl . name . localpart ; int attlistIndex = fGrammar . getFirstAttributeDeclIndex ( elementIndex ) ; int firstCheck = attrIndex ; int lastCheck = - 1 ; while ( attlistIndex != - 1 ) { fGrammar . getAttributeDecl ( attlistIndex , fTempAttDecl ) ; int attPrefix = fTempAttDecl . name . prefix ; int attName = fTempAttDecl . name . localpart ; int attType = attributeTypeName ( fTempAttDecl ) ; int attDefType = fTempAttDecl . defaultType ; int attValue = - 1 ; if ( fTempAttDecl . defaultValue != null ) { attValue = fStringPool . addSymbol ( fTempAttDecl . defaultValue ) ; } boolean specified = false ; boolean required = attDefType == XMLAttributeDecl . DEFAULT_TYPE_REQUIRED ; boolean prohibited = attDefType == XMLAttributeDecl . DEFAULT_TYPE_PROHIBITED ; boolean requiredAndFixed = attDefType == XMLAttributeDecl . DEFAULT_TYPE_REQUIRED_AND_FIXED ; if ( firstCheck != - 1 ) { boolean cdata = attType == fCDATASymbol ; if ( ! cdata || required || prohibited || attValue != - 1 || requiredAndFixed ) { int i = attrList . getFirstAttr ( firstCheck ) ; while ( i != - 1 && ( lastCheck == - 1 || i <= lastCheck ) ) { if ( ( fGrammarIsDTDGrammar && ( attrList . getAttrName ( i ) == fTempAttDecl . name . rawname ) ) || ( fStringPool . equalNames ( attrList . getAttrLocalpart ( i ) , attName ) && fStringPool . equalNames ( attrList . getAttrURI ( i ) , fTempAttDecl . name . uri ) ) ) { if ( prohibited && validationEnabled ) { Object [ ] args = { fStringPool . toString ( elementNameIndex ) , fStringPool . toString ( attName ) } ; fErrorReporter . reportError ( fErrorReporter . getLocator ( ) , SchemaMessageProvider . SCHEMA_DOMAIN , SchemaMessageProvider . ProhibitedAttributePresent , SchemaMessageProvider . MSG_NONE , args , XMLErrorReporter . ERRORTYPE_RECOVERABLE_ERROR ) ; } if ( validationEnabled && ( attDefType == XMLAttributeDecl . DEFAULT_TYPE_FIXED || requiredAndFixed ) ) { int alistValue = attrList . getAttValue ( i ) ; if ( alistValue != attValue && ! fStringPool . toString ( alistValue ) . equals ( fStringPool . toString ( attValue ) ) ) { Object [ ] args = { fStringPool . toString ( elementNameIndex ) , fStringPool . toString ( attName ) , fStringPool . toString ( alistValue ) , fStringPool . toString ( attValue ) } ; fErrorReporter . reportError ( fErrorReporter . getLocator ( ) , XMLMessages . XML_DOMAIN , XMLMessages . MSG_FIXED_ATTVALUE_INVALID , XMLMessages . VC_FIXED_ATTRIBUTE_DEFAULT , args , XMLErrorReporter . ERRORTYPE_RECOVERABLE_ERROR ) ; } } specified = true ; break ; } i = attrList . getNextAttr ( i ) ; } } } if ( ! specified ) { if ( required || requiredAndFixed ) { if ( validationEnabled ) { Object [ ] args = { fStringPool . toString ( elementNameIndex ) , fStringPool . toString ( attName ) } ; fErrorReporter . reportError ( fErrorReporter . getLocator ( ) , XMLMessages . XML_DOMAIN , XMLMessages . MSG_REQUIRED_ATTRIBUTE_NOT_SPECIFIED , XMLMessages . VC_REQUIRED_ATTRIBUTE , args , XMLErrorReporter . ERRORTYPE_RECOVERABLE_ERROR ) ; } } else if ( attValue != - 1 ) { if ( validationEnabled && standalone ) if ( fGrammarIsDTDGrammar && ( ( DTDGrammar ) fGrammar ) . getAttributeDeclIsExternal ( attlistIndex ) ) { Object [ ] args = { fStringPool . toString ( elementNameIndex ) , fStringPool . toString ( attName ) } ; fErrorReporter . reportError ( fErrorReporter . getLocator ( ) , XMLMessages . XML_DOMAIN , XMLMessages . MSG_DEFAULTED_ATTRIBUTE_NOT_SPECIFIED , XMLMessages . VC_STANDALONE_DOCUMENT_DECLARATION , args , XMLErrorReporter . ERRORTYPE_RECOVERABLE_ERROR ) ; } if ( attType == fIDREFSymbol ) { this . fValIDRef . validate ( fStringPool . toString ( attValue ) , this . fStoreIDRef ) ; } else if ( attType == fIDREFSSymbol ) { this . fValIDRefs . validate ( fStringPool . toString ( attValue ) , this . fStoreIDRef ) ; } if ( attrIndex == - 1 ) { attrIndex = attrList . startAttrList ( ) ; } fTempQName . setValues ( attPrefix , attName , attName , fTempAttDecl . name . uri ) ; int newAttr = attrList . addAttr ( fTempQName , attValue , attType , false , false ) ; if ( lastCheck == - 1 ) { lastCheck = newAttr ; } } } attlistIndex = fGrammar . getNextAttributeDeclIndex ( attlistIndex ) ; } return attrIndex ; } private int addDTDDefaultAttributes ( QName element , XMLAttrList attrList , int attrIndex , boolean validationEnabled , boolean standalone ) throws Exception { int elementIndex = fGrammar . getElementDeclIndex ( element , - 1 ) ; if ( elementIndex == - 1 ) { return attrIndex ; } fGrammar . getElementDecl ( elementIndex , fTempElementDecl ) ; int elementNameIndex = fTempElementDecl . name . rawname ; int attlistIndex = fGrammar . getFirstAttributeDeclIndex ( elementIndex ) ; int firstCheck = attrIndex ; int lastCheck = - 1 ; while ( attlistIndex != - 1 ) { fGrammar . getAttributeDecl ( attlistIndex , fTempAttDecl ) ; int attPrefix = fTempAttDecl . name . prefix ; int attName = fTempAttDecl . name . rawname ; int attLocalpart = fTempAttDecl . name . localpart ; int attType = attributeTypeName ( fTempAttDecl ) ; int attDefType = fTempAttDecl . defaultType ; int attValue = - 1 ; if ( fTempAttDecl . defaultValue != null ) { attValue = fStringPool . addSymbol ( fTempAttDecl . defaultValue ) ; } boolean specified = false ; boolean required = attDefType == XMLAttributeDecl . DEFAULT_TYPE_REQUIRED ; if ( firstCheck != - 1 ) { boolean cdata = attType == fCDATASymbol ; if ( ! cdata || required || attValue != - 1 ) { int i = attrList . getFirstAttr ( firstCheck ) ; while ( i != - 1 && ( lastCheck == - 1 || i <= lastCheck ) ) { if ( attrList . getAttrName ( i ) == fTempAttDecl . name . rawname ) { if ( validationEnabled && attDefType == XMLAttributeDecl . DEFAULT_TYPE_FIXED ) { int alistValue = attrList . getAttValue ( i ) ; if ( alistValue != attValue && ! fStringPool . toString ( alistValue ) . equals ( fStringPool . toString ( attValue ) ) ) { Object [ ] args = { fStringPool . toString ( elementNameIndex ) , fStringPool . toString ( attName ) , fStringPool . toString ( alistValue ) , fStringPool . toString ( attValue ) } ; fErrorReporter . reportError ( fErrorReporter . getLocator ( ) , XMLMessages . XML_DOMAIN , XMLMessages . MSG_FIXED_ATTVALUE_INVALID , XMLMessages . VC_FIXED_ATTRIBUTE_DEFAULT , args , XMLErrorReporter . ERRORTYPE_RECOVERABLE_ERROR ) ; } } specified = true ; break ; } i = attrList . getNextAttr ( i ) ; } } } if ( ! specified ) { if ( required ) { if ( validationEnabled ) { Object [ ] args = { fStringPool . toString ( elementNameIndex ) , fStringPool . toString ( attName ) } ; fErrorReporter . reportError ( fErrorReporter . getLocator ( ) , XMLMessages . XML_DOMAIN , XMLMessages . MSG_REQUIRED_ATTRIBUTE_NOT_SPECIFIED , XMLMessages . VC_REQUIRED_ATTRIBUTE , args , XMLErrorReporter . ERRORTYPE_RECOVERABLE_ERROR ) ; } } else if ( attValue != - 1 ) { if ( validationEnabled && standalone ) if ( fGrammarIsDTDGrammar && ( ( DTDGrammar ) fGrammar ) . getAttributeDeclIsExternal ( attlistIndex ) ) { Object [ ] args = { fStringPool . toString ( elementNameIndex ) , fStringPool . toString ( attName ) } ; fErrorReporter . reportError ( fErrorReporter . getLocator ( ) , XMLMessages . XML_DOMAIN , XMLMessages . MSG_DEFAULTED_ATTRIBUTE_NOT_SPECIFIED , XMLMessages . VC_STANDALONE_DOCUMENT_DECLARATION , args , XMLErrorReporter . ERRORTYPE_RECOVERABLE_ERROR ) ; } if ( attType == fIDREFSymbol ) { this . fValIDRef . validate ( fStringPool . toString ( attValue ) , this . fStoreIDRef ) ; } else if ( attType == fIDREFSSymbol ) { this . fValIDRefs . validate ( fStringPool . toString ( attValue ) , this . fStoreIDRef ) ; } if ( attrIndex == - 1 ) { attrIndex = attrList . startAttrList ( ) ; } fTempQName . setValues ( attPrefix , attLocalpart , attName , fTempAttDecl . name . uri ) ; int newAttr = attrList . addAttr ( fTempQName , attValue , attType , false , false ) ; if ( lastCheck == - 1 ) { lastCheck = newAttr ; } } } attlistIndex = fGrammar . getNextAttributeDeclIndex ( attlistIndex ) ; } return attrIndex ; } private XMLContentModel getElementContentModel ( int elementIndex ) throws CMException { XMLContentModel contentModel = null ; if ( elementIndex > - 1 ) { if ( fGrammar . getElementDecl ( elementIndex , fTempElementDecl ) ) { contentModel = fGrammar . getElementContentModel ( elementIndex ) ; } } return contentModel ; } private int getAttDef ( QName element , QName attribute ) { if ( fGrammar != null ) { int scope = fCurrentScope ; if ( element . uri > - 1 ) { scope = TOP_LEVEL_SCOPE ; } int elementIndex = fGrammar . getElementDeclIndex ( element , scope ) ; if ( elementIndex == - 1 ) { return - 1 ; } int attDefIndex = fGrammar . getFirstAttributeDeclIndex ( elementIndex ) ; while ( attDefIndex != - 1 ) { fGrammar . getAttributeDecl ( attDefIndex , fTempAttributeDecl ) ; if ( fTempAttributeDecl . name . localpart == attribute . localpart && fTempAttributeDecl . name . uri == attribute . uri ) { return attDefIndex ; } attDefIndex = fGrammar . getNextAttributeDeclIndex ( attDefIndex ) ; } } return - 1 ; } private int getAttDefByElementIndex ( int elementIndex , QName attribute ) { if ( fGrammar != null && elementIndex > - 1 ) { if ( elementIndex == - 1 ) { return - 1 ; } int attDefIndex = fGrammar . getFirstAttributeDeclIndex ( elementIndex ) ; while ( attDefIndex != - 1 ) { fGrammar . getAttributeDecl ( attDefIndex , fTempAttDecl ) ; if ( fGrammarIsDTDGrammar ) { if ( fTempAttDecl . name . rawname == attribute . rawname ) return attDefIndex ; } else if ( fTempAttDecl . name . localpart == attribute . localpart && fTempAttDecl . name . uri == attribute . uri ) { return attDefIndex ; } if ( fGrammarIsSchemaGrammar ) { if ( fTempAttDecl . type == XMLAttributeDecl . TYPE_ANY_ANY ) { return attDefIndex ; } else if ( fTempAttDecl . type == XMLAttributeDecl . TYPE_ANY_LOCAL ) { if ( attribute . uri == - 1 ) { return attDefIndex ; } } else if ( fTempAttDecl . type == XMLAttributeDecl . TYPE_ANY_OTHER ) { if ( attribute . uri != fTempAttDecl . name . uri ) { return attDefIndex ; } } else if ( fTempAttDecl . type == XMLAttributeDecl . TYPE_ANY_LIST ) { if ( fStringPool . stringInList ( fTempAttDecl . enumeration , attribute . uri ) ) { return attDefIndex ; } } } attDefIndex = fGrammar . getNextAttributeDeclIndex ( attDefIndex ) ; } } return - 1 ; } private void rootElementSpecified ( QName rootElement ) throws Exception { if ( fLoadDTDGrammar ) if ( fGrammar == null ) { fGrammar = fGrammarResolver . getGrammar ( "" ) ; if ( fDynamicValidation && fGrammar == null ) { fValidating = false ; } if ( fGrammar != null ) { if ( fGrammar instanceof DTDGrammar ) { fGrammarIsDTDGrammar = true ; fGrammarIsSchemaGrammar = false ; } else if ( fGrammar instanceof SchemaGrammar ) { fGrammarIsSchemaGrammar = true ; fGrammarIsDTDGrammar = false ; } fGrammarNameSpaceIndex = fEmptyURI ; } } if ( fValidating ) { if ( fGrammarIsDTDGrammar && ( ( DTDGrammar ) fGrammar ) . getRootElementQName ( fRootElement ) ) { String root1 = fStringPool . toString ( fRootElement . rawname ) ; String root2 = fStringPool . toString ( rootElement . rawname ) ; if ( ! root1 . equals ( root2 ) ) { reportRecoverableXMLError ( XMLMessages . MSG_ROOT_ELEMENT_TYPE , XMLMessages . VC_ROOT_ELEMENT_TYPE , fRootElement . rawname , rootElement . rawname ) ; } } } if ( fNamespacesEnabled ) { if ( fNamespacesScope == null ) { fNamespacesScope = new NamespacesScope ( this ) ; fNamespacesPrefix = fStringPool . addSymbol ( "xmlns" ) ; fNamespacesScope . setNamespaceForPrefix ( fNamespacesPrefix , - 1 ) ; int xmlSymbol = fStringPool . addSymbol ( "xml" ) ; int xmlNamespace = fStringPool . addSymbol ( "http://www.w3.org/XML/1998/namespace" ) ; fNamespacesScope . setNamespaceForPrefix ( xmlSymbol , xmlNamespace ) ; } } } private boolean switchGrammar ( int newGrammarNameSpaceIndex ) throws Exception { Grammar tempGrammar = fGrammarResolver . getGrammar ( fStringPool . toString ( newGrammarNameSpaceIndex ) ) ; if ( tempGrammar == null ) { tempGrammar = fGrammarResolver . getGrammar ( "" ) ; } if ( tempGrammar == null ) { return false ; } else { fGrammar = tempGrammar ; if ( fGrammar instanceof DTDGrammar ) { fGrammarIsDTDGrammar = true ; fGrammarIsSchemaGrammar = false ; } else if ( fGrammar instanceof SchemaGrammar ) { fGrammarIsSchemaGrammar = true ; fGrammarIsDTDGrammar = false ; } return true ; } } private void bindNamespacesToElementAndAttributes ( QName element , XMLAttrList attrList ) throws Exception { fNamespacesScope . increaseDepth ( ) ; Hashtable locationUriPairs = null ; if ( fAttrListHandle != - 1 ) { int index = attrList . getFirstAttr ( fAttrListHandle ) ; while ( index != - 1 ) { int attName = attrList . getAttrName ( index ) ; int attPrefix = attrList . getAttrPrefix ( index ) ; if ( fStringPool . equalNames ( attName , fXMLLang ) ) { } else if ( fStringPool . equalNames ( attName , fNamespacesPrefix ) ) { int uri = fStringPool . addSymbol ( attrList . getAttValue ( index ) ) ; fNamespacesScope . setNamespaceForPrefix ( StringPool . EMPTY_STRING , uri ) ; } else { if ( attPrefix == fNamespacesPrefix ) { int nsPrefix = attrList . getAttrLocalpart ( index ) ; int uri = fStringPool . addSymbol ( attrList . getAttValue ( index ) ) ; fNamespacesScope . setNamespaceForPrefix ( nsPrefix , uri ) ; if ( fValidating && fSchemaValidation ) { boolean seeXsi = false ; String attrValue = fStringPool . toString ( attrList . getAttValue ( index ) ) ; if ( attrValue . equals ( SchemaSymbols . URI_XSI ) ) { fXsiPrefix = nsPrefix ; seeXsi = true ; } if ( ! seeXsi ) { } } } } index = attrList . getNextAttr ( index ) ; } if ( fValidating && fSchemaValidation ) { fXsiTypeAttValue = - 1 ; index = attrList . getFirstAttr ( fAttrListHandle ) ; while ( index != - 1 ) { int attName = attrList . getAttrName ( index ) ; int attPrefix = attrList . getAttrPrefix ( index ) ; if ( fStringPool . equalNames ( attName , fNamespacesPrefix ) ) { } else { if ( DEBUG_SCHEMA_VALIDATION ) { System . out . println ( "deal with XSI" ) ; System . out . println ( "before find XSI: " + fStringPool . toString ( attPrefix ) + "," + fStringPool . toString ( fXsiPrefix ) ) ; } if ( fXsiPrefix != - 1 && attPrefix == fXsiPrefix ) { if ( DEBUG_SCHEMA_VALIDATION ) { System . out . println ( "find XSI: " + fStringPool . toString ( attPrefix ) + "," + fStringPool . toString ( attName ) ) ; } int localpart = attrList . getAttrLocalpart ( index ) ; if ( localpart == fStringPool . addSymbol ( SchemaSymbols . XSI_SCHEMALOCACTION ) ) { if ( locationUriPairs == null ) { locationUriPairs = new Hashtable ( ) ; } parseSchemaLocation ( fStringPool . toString ( attrList . getAttValue ( index ) ) , locationUriPairs ) ; } else if ( localpart == fStringPool . addSymbol ( SchemaSymbols . XSI_NONAMESPACESCHEMALOCACTION ) ) { if ( locationUriPairs == null ) { locationUriPairs = new Hashtable ( ) ; } locationUriPairs . put ( fStringPool . toString ( attrList . getAttValue ( index ) ) , "" ) ; if ( fNamespacesScope != null ) { fNamespacesScope . setNamespaceForPrefix ( fStringPool . addSymbol ( "" ) , fStringPool . addSymbol ( "" ) ) ; } } else if ( localpart == fStringPool . addSymbol ( SchemaSymbols . XSI_TYPE ) ) { fXsiTypeAttValue = attrList . getAttValue ( index ) ; } } } index = attrList . getNextAttr ( index ) ; } if ( locationUriPairs != null ) { Enumeration locations = locationUriPairs . keys ( ) ; while ( locations . hasMoreElements ( ) ) { String loc = ( String ) locations . nextElement ( ) ; String uri = ( String ) locationUriPairs . get ( loc ) ; resolveSchemaGrammar ( loc , uri ) ; } } } } int prefix = element . prefix != - 1 ? element . prefix : 0 ; int uri = fNamespacesScope . getNamespaceForPrefix ( prefix ) ; if ( element . prefix != - 1 || uri != - 1 ) { element . uri = uri ; if ( element . uri == - 1 ) { Object [ ] args = { fStringPool . toString ( element . prefix ) } ; fErrorReporter . reportError ( fErrorReporter . getLocator ( ) , XMLMessages . XMLNS_DOMAIN , XMLMessages . MSG_PREFIX_DECLARED , XMLMessages . NC_PREFIX_DECLARED , args , XMLErrorReporter . ERRORTYPE_RECOVERABLE_ERROR ) ; } } if ( fAttrListHandle != - 1 ) { int index = attrList . getFirstAttr ( fAttrListHandle ) ; while ( index != - 1 ) { int attName = attrList . getAttrName ( index ) ; if ( ! fStringPool . equalNames ( attName , fNamespacesPrefix ) ) { int attPrefix = attrList . getAttrPrefix ( index ) ; if ( attPrefix != fNamespacesPrefix ) { if ( attPrefix != - 1 ) { int attrUri = fNamespacesScope . getNamespaceForPrefix ( attPrefix ) ; if ( attrUri == - 1 ) { Object [ ] args = { fStringPool . toString ( attPrefix ) } ; fErrorReporter . reportError ( fErrorReporter . getLocator ( ) , XMLMessages . XMLNS_DOMAIN , XMLMessages . MSG_PREFIX_DECLARED , XMLMessages . NC_PREFIX_DECLARED , args , XMLErrorReporter . ERRORTYPE_RECOVERABLE_ERROR ) ; } attrList . setAttrURI ( index , attrUri ) ; } } } index = attrList . getNextAttr ( index ) ; } } } void parseSchemaLocation ( String schemaLocationStr , Hashtable locationUriPairs ) { if ( locationUriPairs != null ) { StringTokenizer tokenizer = new StringTokenizer ( schemaLocationStr , " \n\t\r" , false ) ; int tokenTotal = tokenizer . countTokens ( ) ; if ( tokenTotal % 2 != 0 ) { } else { while ( tokenizer . hasMoreTokens ( ) ) { String uri = tokenizer . nextToken ( ) ; String location = tokenizer . nextToken ( ) ; locationUriPairs . put ( location , uri ) ; } } } else { } } private void resolveSchemaGrammar ( String loc , String uri ) throws Exception { SchemaGrammar grammar = ( SchemaGrammar ) fGrammarResolver . getGrammar ( uri ) ; if ( grammar == null ) { DOMParser parser = new DOMParser ( ) ; parser . setEntityResolver ( new Resolver ( fEntityHandler ) ) ; parser . setErrorHandler ( new ErrorHandler ( ) ) ; try { parser . setFeature ( "http://xml.org/sax/features/validation" , false ) ; parser . setFeature ( "http://xml.org/sax/features/namespaces" , true ) ; parser . setFeature ( "http://apache.org/xml/features/dom/defer-node-expansion" , false ) ; } catch ( org . xml . sax . SAXNotRecognizedException e ) { e . printStackTrace ( ) ; } catch ( org . xml . sax . SAXNotSupportedException e ) { e . printStackTrace ( ) ; } InputSource source = null ; EntityResolver currentER = parser . getEntityResolver ( ) ; if ( currentER != null ) { source = currentER . resolveEntity ( "" , loc ) ; } if ( source == null ) { loc = fEntityHandler . expandSystemId ( loc ) ; source = new InputSource ( loc ) ; } try { parser . parse ( source ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } catch ( SAXException e ) { reportRecoverableXMLError ( XMLMessages . MSG_GENERIC_SCHEMA_ERROR , XMLMessages . SCHEMA_GENERIC_ERROR , e . getMessage ( ) ) ; } Document document = parser . getDocument ( ) ; TraverseSchema tst = null ; try { if ( DEBUG_SCHEMA_VALIDATION ) { System . out . println ( "I am geting the Schema Document" ) ; } Element root = null ; if ( document != null ) { root = document . getDocumentElement ( ) ; } if ( root == null ) { reportRecoverableXMLError ( XMLMessages . MSG_GENERIC_SCHEMA_ERROR , XMLMessages . SCHEMA_GENERIC_ERROR , "Can't get back Schema document's root element :" + loc ) ; } else { if ( uri == null || ! uri . equals ( root . getAttribute ( SchemaSymbols . ATT_TARGETNAMESPACE ) ) ) { reportRecoverableXMLError ( XMLMessages . MSG_GENERIC_SCHEMA_ERROR , XMLMessages . SCHEMA_GENERIC_ERROR , "Schema in " + loc + " has a different target namespace " + "from the one specified in the instance document :" + uri ) ; } grammar = new SchemaGrammar ( ) ; grammar . setGrammarDocument ( document ) ; tst = new TraverseSchema ( root , fStringPool , ( SchemaGrammar ) grammar , fGrammarResolver , fErrorReporter , source . getSystemId ( ) , currentER ) ; fGrammarResolver . putGrammar ( root . getAttribute ( "targetNamespace" ) , grammar ) ; } } catch ( Exception e ) { e . printStackTrace ( System . err ) ; } } } private void resolveSchemaGrammar ( String uri ) throws Exception { resolveSchemaGrammar ( uri , uri ) ; } static class Resolver implements EntityResolver { private static final String SYSTEM [ ] = { "http://www.w3.org/2000/10/XMLSchema.dtd" , "http://www.w3.org/XMLSchema/datatypes.dtd" , "http://www.w3.org/XMLSchema/versionInfo.ent" , } ; private static final String PATH [ ] = { "structures.dtd" , "datatypes.dtd" , "versionInfo.ent" , } ; private DefaultEntityHandler fEntityHandler ; public Resolver ( DefaultEntityHandler handler ) { fEntityHandler = handler ; } public InputSource resolveEntity ( String publicId , String systemId ) throws IOException , SAXException { for ( int i = 0 ; i < SYSTEM . length ; i ++ ) { if ( systemId . equals ( SYSTEM [ i ] ) ) { InputSource source = new InputSource ( getClass ( ) . getResourceAsStream ( PATH [ i ] ) ) ; source . setPublicId ( publicId ) ; source . setSystemId ( systemId ) ; return source ; } } EntityResolver resolver = fEntityHandler . getEntityResolver ( ) ; if ( resolver != null ) { InputSource source = resolver . resolveEntity ( publicId , systemId ) ; if ( source != null ) { return source ; } } return new InputSource ( fEntityHandler . expandSystemId ( systemId ) ) ; } } static class ErrorHandler implements org . xml . sax . ErrorHandler { public void warning ( SAXParseException ex ) { System . err . println ( "[Warning] " + getLocationString ( ex ) + ": " + ex . getMessage ( ) ) ; } public void error ( SAXParseException ex ) { System . err . println ( "[Error] " + getLocationString ( ex ) + ": " + ex . getMessage ( ) ) ; } public void fatalError ( SAXParseException ex ) { System . err . println ( "[Fatal Error] " + getLocationString ( ex ) + ": " + ex . getMessage ( ) ) ; } private String getLocationString ( SAXParseException ex ) { StringBuffer str = new StringBuffer ( ) ; String systemId_ = ex . getSystemId ( ) ; if ( systemId_ != null ) { int index = systemId_ . lastIndexOf ( '/' ) ; if ( index != - 1 ) systemId_ = systemId_ . substring ( index + 1 ) ; str . append ( systemId_ ) ; } str . append ( ':' ) ; str . append ( ex . getLineNumber ( ) ) ; str . append ( ':' ) ; str . append ( ex . getColumnNumber ( ) ) ; return str . toString ( ) ; } } private int attributeTypeName ( XMLAttributeDecl attrDecl ) { switch ( attrDecl . type ) { case XMLAttributeDecl . TYPE_ENTITY : { return attrDecl . list ? fENTITIESSymbol : fENTITYSymbol ; } case XMLAttributeDecl . TYPE_ENUMERATION : { String enumeration = fStringPool . stringListAsString ( attrDecl . enumeration ) ; return fStringPool . addSymbol ( enumeration ) ; } case XMLAttributeDecl . TYPE_ID : { return fIDSymbol ; } case XMLAttributeDecl . TYPE_IDREF : { return attrDecl . list ? fIDREFSSymbol : fIDREFSymbol ; } case XMLAttributeDecl . TYPE_NMTOKEN : { return attrDecl . list ? fNMTOKENSSymbol : fNMTOKENSSymbol ; } case XMLAttributeDecl . TYPE_NOTATION : { return fNOTATIONSymbol ; } } return fCDATASymbol ; } private void validateElementAndAttributes ( QName element , XMLAttrList attrList ) throws Exception { if ( ( fGrammarIsSchemaGrammar && fElementDepth >= 0 && fValidationFlagStack [ fElementDepth ] != 0 ) || ( fGrammar == null && ! fValidating && ! fNamespacesEnabled ) ) { fCurrentElementIndex = - 1 ; fCurrentContentSpecType = - 1 ; fInElementContent = false ; if ( fAttrListHandle != - 1 ) { fAttrList . endAttrList ( ) ; int index = fAttrList . getFirstAttr ( fAttrListHandle ) ; while ( index != - 1 ) { if ( fStringPool . equalNames ( fAttrList . getAttrName ( index ) , fXMLLang ) ) { fDocumentScanner . checkXMLLangAttributeValue ( fAttrList . getAttValue ( index ) ) ; break ; } index = fAttrList . getNextAttr ( index ) ; } } return ; } int elementIndex = - 1 ; int contentSpecType = - 1 ; boolean skipThisOne = false ; boolean laxThisOne = false ; if ( fGrammarIsSchemaGrammar && fContentLeafStack [ fElementDepth ] != null ) { ContentLeafNameTypeVector cv = fContentLeafStack [ fElementDepth ] ; QName [ ] fElemMap = cv . leafNames ; for ( int i = 0 ; i < cv . leafCount ; i ++ ) { int type = cv . leafTypes [ i ] ; if ( type == XMLContentSpec . CONTENTSPECNODE_LEAF ) { if ( fElemMap [ i ] . uri == element . uri && fElemMap [ i ] . localpart == element . localpart ) break ; } else if ( type == XMLContentSpec . CONTENTSPECNODE_ANY ) { int uri = fElemMap [ i ] . uri ; if ( uri == - 1 || uri == element . uri ) { break ; } } else if ( type == XMLContentSpec . CONTENTSPECNODE_ANY_LOCAL ) { if ( element . uri == - 1 ) { break ; } } else if ( type == XMLContentSpec . CONTENTSPECNODE_ANY_OTHER ) { if ( fElemMap [ i ] . uri != element . uri ) { break ; } } else if ( type == XMLContentSpec . CONTENTSPECNODE_ANY_SKIP ) { int uri = fElemMap [ i ] . uri ; if ( uri == - 1 || uri == element . uri ) { skipThisOne = true ; break ; } } else if ( type == XMLContentSpec . CONTENTSPECNODE_ANY_LOCAL_SKIP ) { if ( element . uri == - 1 ) { skipThisOne = true ; break ; } } else if ( type == XMLContentSpec . CONTENTSPECNODE_ANY_OTHER_SKIP ) { if ( fElemMap [ i ] . uri != element . uri ) { skipThisOne = true ; break ; } } else if ( type == XMLContentSpec . CONTENTSPECNODE_ANY_LAX ) { int uri = fElemMap [ i ] . uri ; if ( uri == - 1 || uri == element . uri ) { laxThisOne = true ; break ; } } else if ( type == XMLContentSpec . CONTENTSPECNODE_ANY_LOCAL_LAX ) { if ( element . uri == - 1 ) { laxThisOne = true ; break ; } } else if ( type == XMLContentSpec . CONTENTSPECNODE_ANY_OTHER_LAX ) { if ( fElemMap [ i ] . uri != element . uri ) { laxThisOne = true ; break ; } } } } if ( skipThisOne ) { fNeedValidationOff = true ; } else { if ( fNamespacesEnabled && fValidating && element . uri != fGrammarNameSpaceIndex && element . uri != - 1 ) { fGrammarNameSpaceIndex = element . uri ; boolean success = switchGrammar ( fGrammarNameSpaceIndex ) ; if ( ! success && ! laxThisOne ) { reportRecoverableXMLError ( XMLMessages . MSG_GENERIC_SCHEMA_ERROR , XMLMessages . SCHEMA_GENERIC_ERROR , "Grammar with uri 2: " + fStringPool . toString ( fGrammarNameSpaceIndex ) + " , can not found" ) ; } } if ( fGrammar != null ) { if ( DEBUG_SCHEMA_VALIDATION ) { System . out . println ( "*******Lookup element: uri: " + fStringPool . toString ( element . uri ) + " localpart: '" + fStringPool . toString ( element . localpart ) + "' and scope : " + fCurrentScope + "\n" ) ; } elementIndex = fGrammar . getElementDeclIndex ( element , fCurrentScope ) ; if ( elementIndex == - 1 ) { elementIndex = fGrammar . getElementDeclIndex ( element , TOP_LEVEL_SCOPE ) ; } if ( elementIndex == - 1 ) { if ( fGrammarIsSchemaGrammar && fCurrentElementIndex != - 1 ) { TraverseSchema . ComplexTypeInfo baseTypeInfo = null ; baseTypeInfo = ( ( SchemaGrammar ) fGrammar ) . getElementComplexTypeInfo ( fCurrentElementIndex ) ; int aGrammarNSIndex = fGrammarNameSpaceIndex ; while ( baseTypeInfo != null ) { elementIndex = fGrammar . getElementDeclIndex ( element , baseTypeInfo . scopeDefined ) ; if ( elementIndex > - 1 ) { fGrammarNameSpaceIndex = aGrammarNSIndex ; break ; } baseTypeInfo = baseTypeInfo . baseComplexTypeInfo ; if ( baseTypeInfo != null ) { String baseTName = baseTypeInfo . typeName ; if ( ! baseTName . startsWith ( "#" ) ) { int comma = baseTName . indexOf ( ',' ) ; aGrammarNSIndex = fStringPool . addSymbol ( baseTName . substring ( 0 , comma ) . trim ( ) ) ; if ( aGrammarNSIndex != fGrammarNameSpaceIndex ) { if ( ! switchGrammar ( aGrammarNSIndex ) ) { break ; } } } } } if ( elementIndex == - 1 ) { switchGrammar ( fGrammarNameSpaceIndex ) ; } } if ( elementIndex == - 1 ) { if ( laxThisOne ) { fNeedValidationOff = true ; } else if ( DEBUG_SCHEMA_VALIDATION ) System . out . println ( "!!! can not find elementDecl in the grammar, " + " the element localpart: " + element . localpart + "[" + fStringPool . toString ( element . localpart ) + "]" + " the element uri: " + element . uri + "[" + fStringPool . toString ( element . uri ) + "]" + " and the current enclosing scope: " + fCurrentScope ) ; } } if ( DEBUG_SCHEMA_VALIDATION ) { fGrammar . getElementDecl ( elementIndex , fTempElementDecl ) ; System . out . println ( "elementIndex: " + elementIndex + " \n and itsName : '" + fStringPool . toString ( fTempElementDecl . name . localpart ) + "' \n its ContentType:" + fTempElementDecl . type + "\n its ContentSpecIndex : " + fTempElementDecl . contentSpecIndex + "\n" + " and the current enclosing scope: " + fCurrentScope ) ; } } contentSpecType = getContentSpecType ( elementIndex ) ; if ( fGrammarIsSchemaGrammar && elementIndex != - 1 ) { if ( fXsiTypeAttValue > - 1 ) { String xsiType = fStringPool . toString ( fXsiTypeAttValue ) ; int colonP = xsiType . indexOf ( ":" ) ; String prefix = "" ; String localpart = xsiType ; if ( colonP > - 1 ) { prefix = xsiType . substring ( 0 , colonP ) ; localpart = xsiType . substring ( colonP + 1 ) ; } String uri = "" ; int uriIndex = - 1 ; if ( fNamespacesScope != null ) { uriIndex = fNamespacesScope . getNamespaceForPrefix ( fStringPool . addSymbol ( prefix ) ) ; if ( uriIndex > - 1 ) { uri = fStringPool . toString ( uriIndex ) ; if ( uriIndex != fGrammarNameSpaceIndex ) { fGrammarNameSpaceIndex = fCurrentSchemaURI = uriIndex ; boolean success = switchGrammar ( fCurrentSchemaURI ) ; if ( ! success && ! fNeedValidationOff ) { reportRecoverableXMLError ( XMLMessages . MSG_GENERIC_SCHEMA_ERROR , XMLMessages . SCHEMA_GENERIC_ERROR , "Grammar with uri 3: " + fStringPool . toString ( fCurrentSchemaURI ) + " , can not found" ) ; } } } } Hashtable complexRegistry = ( ( SchemaGrammar ) fGrammar ) . getComplexTypeRegistry ( ) ; DatatypeValidatorFactoryImpl dataTypeReg = ( ( SchemaGrammar ) fGrammar ) . getDatatypeRegistry ( ) ; if ( complexRegistry == null || dataTypeReg == null ) { reportRecoverableXMLError ( XMLMessages . MSG_GENERIC_SCHEMA_ERROR , XMLMessages . SCHEMA_GENERIC_ERROR , fErrorReporter . getLocator ( ) . getSystemId ( ) + " line" + fErrorReporter . getLocator ( ) . getLineNumber ( ) + ", canot resolve xsi:type = " + xsiType + "  ---2" ) ; } else { TraverseSchema . ComplexTypeInfo typeInfo = ( TraverseSchema . ComplexTypeInfo ) complexRegistry . get ( uri + "," + localpart ) ; if ( typeInfo == null ) { if ( uri . length ( ) == 0 || uri . equals ( SchemaSymbols . URI_SCHEMAFORSCHEMA ) ) { fXsiTypeValidator = dataTypeReg . getDatatypeValidator ( localpart ) ; } else fXsiTypeValidator = dataTypeReg . getDatatypeValidator ( uri + "," + localpart ) ; if ( fXsiTypeValidator == null ) reportRecoverableXMLError ( XMLMessages . MSG_GENERIC_SCHEMA_ERROR , XMLMessages . SCHEMA_GENERIC_ERROR , "unresolved type : " + uri + "," + localpart + " found  in xsi:type handling" ) ; } else elementIndex = typeInfo . templateElementIndex ; } fXsiTypeAttValue = - 1 ; } fCurrentScope = ( ( SchemaGrammar ) fGrammar ) . getElementDefinedScope ( elementIndex ) ; String anotherSchemaURI = ( ( SchemaGrammar ) fGrammar ) . getElementFromAnotherSchemaURI ( elementIndex ) ; if ( anotherSchemaURI != null ) { if ( contentSpecType != - 1 && contentSpecType != XMLElementDecl . TYPE_EMPTY ) { TraverseSchema . ComplexTypeInfo typeInfo = ( ( SchemaGrammar ) fGrammar ) . getElementComplexTypeInfo ( elementIndex ) ; if ( typeInfo != null ) { elementIndex = typeInfo . templateElementIndex ; } } fGrammarNameSpaceIndex = fCurrentSchemaURI = fStringPool . addSymbol ( anotherSchemaURI ) ; boolean success = switchGrammar ( fCurrentSchemaURI ) ; if ( ! success && ! fNeedValidationOff ) { reportRecoverableXMLError ( XMLMessages . MSG_GENERIC_SCHEMA_ERROR , XMLMessages . SCHEMA_GENERIC_ERROR , "Grammar with uri 4: " + fStringPool . toString ( fCurrentSchemaURI ) + " , can not found" ) ; } } } contentSpecType = getContentSpecType ( elementIndex ) ; if ( contentSpecType == - 1 && fValidating && ! fNeedValidationOff ) { reportRecoverableXMLError ( XMLMessages . MSG_ELEMENT_NOT_DECLARED , XMLMessages . VC_ELEMENT_VALID , element . rawname ) ; } if ( fGrammar != null && fGrammarIsSchemaGrammar && elementIndex != - 1 ) { fAttrListHandle = addDefaultAttributes ( elementIndex , attrList , fAttrListHandle , fValidating , fStandaloneReader != - 1 ) ; } if ( fAttrListHandle != - 1 ) { fAttrList . endAttrList ( ) ; } if ( DEBUG_PRINT_ATTRIBUTES ) { String elementStr = fStringPool . toString ( element . rawname ) ; System . out . print ( "startElement: <" + elementStr ) ; if ( fAttrListHandle != - 1 ) { int index = attrList . getFirstAttr ( fAttrListHandle ) ; while ( index != - 1 ) { System . out . print ( " " + fStringPool . toString ( attrList . getAttrName ( index ) ) + "=\"" + fStringPool . toString ( attrList . getAttValue ( index ) ) + "\"" ) ; index = attrList . getNextAttr ( index ) ; } } System . out . println ( ">" ) ; } if ( fAttrListHandle != - 1 && ! fNeedValidationOff ) { int index = fAttrList . getFirstAttr ( fAttrListHandle ) ; while ( index != - 1 ) { int attrNameIndex = attrList . getAttrName ( index ) ; if ( fStringPool . equalNames ( attrNameIndex , fXMLLang ) ) { fDocumentScanner . checkXMLLangAttributeValue ( attrList . getAttValue ( index ) ) ; } int _xmlns = fStringPool . addSymbol ( "xmlns" ) ; if ( attrNameIndex != _xmlns && attrList . getAttrPrefix ( index ) != _xmlns ) if ( fGrammar != null ) { fTempQName . setValues ( attrList . getAttrPrefix ( index ) , attrList . getAttrLocalpart ( index ) , attrList . getAttrName ( index ) , attrList . getAttrURI ( index ) ) ; int attDefIndex = getAttDefByElementIndex ( elementIndex , fTempQName ) ; if ( fTempQName . uri != fXsiURI ) if ( attDefIndex == - 1 ) { if ( fValidating ) { Object [ ] args = { fStringPool . toString ( element . rawname ) , fStringPool . toString ( attrList . getAttrName ( index ) ) } ; fAttrNameLocator = getLocatorImpl ( fAttrNameLocator ) ; fErrorReporter . reportError ( fAttrNameLocator , XMLMessages . XML_DOMAIN , XMLMessages . MSG_ATTRIBUTE_NOT_DECLARED , XMLMessages . VC_ATTRIBUTE_VALUE_TYPE , args , XMLErrorReporter . ERRORTYPE_RECOVERABLE_ERROR ) ; } } else { fGrammar . getAttributeDecl ( attDefIndex , fTempAttDecl ) ; int attributeType = attributeTypeName ( fTempAttDecl ) ; attrList . setAttType ( index , attributeType ) ; if ( fValidating ) { if ( fGrammarIsDTDGrammar ) { int normalizedValue = validateDTDattribute ( element , attrList . getAttValue ( index ) , fTempAttDecl ) ; attrList . setAttValue ( index , normalizedValue ) ; } else if ( fGrammarIsSchemaGrammar && ( fTempAttDecl . type == XMLAttributeDecl . TYPE_ANY_ANY || fTempAttDecl . type == XMLAttributeDecl . TYPE_ANY_LIST || fTempAttDecl . type == XMLAttributeDecl . TYPE_ANY_LOCAL || fTempAttDecl . type == XMLAttributeDecl . TYPE_ANY_OTHER ) ) { if ( fTempAttDecl . defaultType == XMLAttributeDecl . PROCESSCONTENTS_SKIP ) { } else if ( fTempAttDecl . defaultType == XMLAttributeDecl . PROCESSCONTENTS_STRICT || fTempAttDecl . defaultType == XMLAttributeDecl . PROCESSCONTENTS_LAX ) { boolean reportError = false ; boolean processContentStrict = fTempAttDecl . defaultType == XMLAttributeDecl . PROCESSCONTENTS_STRICT ; if ( fTempQName . uri == - 1 ) { if ( processContentStrict ) { reportError = true ; } } else { Grammar aGrammar = fGrammarResolver . getGrammar ( fStringPool . toString ( fTempQName . uri ) ) ; if ( aGrammar == null || ! ( aGrammar instanceof SchemaGrammar ) ) { if ( processContentStrict ) { reportError = true ; } } else { SchemaGrammar sGrammar = ( SchemaGrammar ) aGrammar ; Hashtable attRegistry = sGrammar . getAttirubteDeclRegistry ( ) ; if ( attRegistry == null ) { if ( processContentStrict ) { reportError = true ; } } else { XMLAttributeDecl attDecl = ( XMLAttributeDecl ) attRegistry . get ( fStringPool . toString ( fTempQName . localpart ) ) ; if ( attDecl == null ) { if ( processContentStrict ) { reportError = true ; } } else { DatatypeValidator attDV = attDecl . datatypeValidator ; if ( attDV == null ) { if ( processContentStrict ) { reportError = true ; } } else { try { String unTrimValue = fStringPool . toString ( attrList . getAttValue ( index ) ) ; String value = unTrimValue . trim ( ) ; if ( attDecl . type == XMLAttributeDecl . TYPE_ID ) { this . fStoreIDRef . setDatatypeObject ( fValID . validate ( value , null ) ) ; } if ( attDecl . type == XMLAttributeDecl . TYPE_IDREF ) { attDV . validate ( value , this . fStoreIDRef ) ; } else attDV . validate ( unTrimValue , null ) ; } catch ( InvalidDatatypeValueException idve ) { fErrorReporter . reportError ( fErrorReporter . getLocator ( ) , SchemaMessageProvider . SCHEMA_DOMAIN , SchemaMessageProvider . DatatypeError , SchemaMessageProvider . MSG_NONE , new Object [ ] { idve . getMessage ( ) } , XMLErrorReporter . ERRORTYPE_RECOVERABLE_ERROR ) ; } } } } } } if ( reportError ) { Object [ ] args = { fStringPool . toString ( element . rawname ) , "ANY---" + fStringPool . toString ( attrList . getAttrName ( index ) ) } ; fAttrNameLocator = getLocatorImpl ( fAttrNameLocator ) ; fErrorReporter . reportError ( fAttrNameLocator , XMLMessages . XML_DOMAIN , XMLMessages . MSG_ATTRIBUTE_NOT_DECLARED , XMLMessages . VC_ATTRIBUTE_VALUE_TYPE , args , XMLErrorReporter . ERRORTYPE_RECOVERABLE_ERROR ) ; } } } else if ( fTempAttDecl . datatypeValidator == null ) { Object [ ] args = { fStringPool . toString ( element . rawname ) , fStringPool . toString ( attrList . getAttrName ( index ) ) } ; System . out . println ( "[Error] Datatypevalidator for attribute " + fStringPool . toString ( attrList . getAttrName ( index ) ) + " not found in element type " + fStringPool . toString ( element . rawname ) ) ; fAttrNameLocator = getLocatorImpl ( fAttrNameLocator ) ; fErrorReporter . reportError ( fAttrNameLocator , XMLMessages . XML_DOMAIN , XMLMessages . MSG_ATTRIBUTE_NOT_DECLARED , XMLMessages . VC_ATTRIBUTE_VALUE_TYPE , args , XMLErrorReporter . ERRORTYPE_RECOVERABLE_ERROR ) ; } else { try { String unTrimValue = fStringPool . toString ( attrList . getAttValue ( index ) ) ; String value = unTrimValue . trim ( ) ; if ( fTempAttDecl . type == XMLAttributeDecl . TYPE_ID ) { this . fStoreIDRef . setDatatypeObject ( fValID . validate ( value , null ) ) ; } else if ( fTempAttDecl . type == XMLAttributeDecl . TYPE_IDREF ) { fTempAttDecl . datatypeValidator . validate ( value , this . fStoreIDRef ) ; } else { fTempAttDecl . datatypeValidator . validate ( unTrimValue , null ) ; } } catch ( InvalidDatatypeValueException idve ) { fErrorReporter . reportError ( fErrorReporter . getLocator ( ) , SchemaMessageProvider . SCHEMA_DOMAIN , SchemaMessageProvider . DatatypeError , SchemaMessageProvider . MSG_NONE , new Object [ ] { idve . getMessage ( ) } , XMLErrorReporter . ERRORTYPE_RECOVERABLE_ERROR ) ; } } } } } index = fAttrList . getNextAttr ( index ) ; } } } if ( fAttrListHandle != - 1 ) { int index = attrList . getFirstAttr ( fAttrListHandle ) ; while ( index != - 1 ) { int attName = attrList . getAttrName ( index ) ; if ( ! fStringPool . equalNames ( attName , fNamespacesPrefix ) ) { int attPrefix = attrList . getAttrPrefix ( index ) ; if ( attPrefix != fNamespacesPrefix ) { if ( attPrefix != - 1 ) { int uri = fNamespacesScope . getNamespaceForPrefix ( attPrefix ) ; if ( uri == - 1 ) { Object [ ] args = { fStringPool . toString ( attPrefix ) } ; fErrorReporter . reportError ( fErrorReporter . getLocator ( ) , XMLMessages . XMLNS_DOMAIN , XMLMessages . MSG_PREFIX_DECLARED , XMLMessages . NC_PREFIX_DECLARED , args , XMLErrorReporter . ERRORTYPE_RECOVERABLE_ERROR ) ; } attrList . setAttrURI ( index , uri ) ; } } } index = attrList . getNextAttr ( index ) ; } } fCurrentElementIndex = elementIndex ; fCurrentContentSpecType = contentSpecType ; if ( fValidating && contentSpecType == XMLElementDecl . TYPE_SIMPLE ) { fBufferDatatype = true ; fDatatypeBuffer . setLength ( 0 ) ; } fInElementContent = ( contentSpecType == XMLElementDecl . TYPE_CHILDREN ) ; } private int validateDTDattribute ( QName element , int attValue , XMLAttributeDecl attributeDecl ) throws Exception { AttributeValidator av = null ; switch ( attributeDecl . type ) { case XMLAttributeDecl . TYPE_ENTITY : { boolean isAlistAttribute = attributeDecl . list ; String unTrimValue = fStringPool . toString ( attValue ) ; String value = unTrimValue . trim ( ) ; if ( fValidationEnabled ) { if ( value != unTrimValue ) { if ( invalidStandaloneAttDef ( element , attributeDecl . name ) ) { reportRecoverableXMLError ( XMLMessages . MSG_ATTVALUE_CHANGED_DURING_NORMALIZATION_WHEN_STANDALONE , XMLMessages . VC_STANDALONE_DOCUMENT_DECLARATION , fStringPool . toString ( attributeDecl . name . rawname ) , unTrimValue , value ) ; } } } try { if ( isAlistAttribute ) { fValENTITIES . validate ( value , null ) ; } else { fValENTITY . validate ( value , null ) ; } } catch ( InvalidDatatypeValueException ex ) { if ( ex . getMajorCode ( ) != 1 && ex . getMinorCode ( ) != - 1 ) { reportRecoverableXMLError ( ex . getMajorCode ( ) , ex . getMinorCode ( ) , fStringPool . toString ( attributeDecl . name . rawname ) , value ) ; } else { System . err . println ( "Error: " + ex . getLocalizedMessage ( ) ) ; } } if ( fNormalizeAttributeValues ) { if ( attributeDecl . list ) { attValue = normalizeListAttribute ( value , attValue , unTrimValue ) ; } else { if ( value != unTrimValue ) { attValue = fStringPool . addSymbol ( value ) ; } } } } break ; case XMLAttributeDecl . TYPE_ENUMERATION : av = fAttValidatorENUMERATION ; break ; case XMLAttributeDecl . TYPE_ID : { String unTrimValue = fStringPool . toString ( attValue ) ; String value = unTrimValue . trim ( ) ; if ( fValidationEnabled ) { if ( value != unTrimValue ) { if ( invalidStandaloneAttDef ( element , attributeDecl . name ) ) { reportRecoverableXMLError ( XMLMessages . MSG_ATTVALUE_CHANGED_DURING_NORMALIZATION_WHEN_STANDALONE , XMLMessages . VC_STANDALONE_DOCUMENT_DECLARATION , fStringPool . toString ( attributeDecl . name . rawname ) , unTrimValue , value ) ; } } } try { this . fStoreIDRef . setDatatypeObject ( fValID . validate ( value , null ) ) ; fValIDRef . validate ( value , this . fStoreIDRef ) ; } catch ( InvalidDatatypeValueException ex ) { reportRecoverableXMLError ( ex . getMajorCode ( ) , ex . getMinorCode ( ) , fStringPool . toString ( attributeDecl . name . rawname ) , value ) ; } if ( fNormalizeAttributeValues && value != unTrimValue ) { attValue = fStringPool . addSymbol ( value ) ; } } break ; case XMLAttributeDecl . TYPE_IDREF : { String unTrimValue = fStringPool . toString ( attValue ) ; String value = unTrimValue . trim ( ) ; boolean isAlistAttribute = attributeDecl . list ; if ( fValidationEnabled ) { if ( value != unTrimValue ) { if ( invalidStandaloneAttDef ( element , attributeDecl . name ) ) { reportRecoverableXMLError ( XMLMessages . MSG_ATTVALUE_CHANGED_DURING_NORMALIZATION_WHEN_STANDALONE , XMLMessages . VC_STANDALONE_DOCUMENT_DECLARATION , fStringPool . toString ( attributeDecl . name . rawname ) , unTrimValue , value ) ; } } if ( attributeDecl . list && value . length ( ) == 0 ) { reportRecoverableXMLError ( XMLMessages . MSG_IDREFS_INVALID , XMLMessages . VC_IDREF , fStringPool . toString ( attributeDecl . name . rawname ) ) ; } } try { if ( isAlistAttribute ) { fValIDRefs . validate ( value , this . fStoreIDRef ) ; } else { fValIDRef . validate ( value , this . fStoreIDRef ) ; } } catch ( InvalidDatatypeValueException ex ) { if ( ex . getMajorCode ( ) != 1 && ex . getMinorCode ( ) != - 1 ) { reportRecoverableXMLError ( ex . getMajorCode ( ) , ex . getMinorCode ( ) , fStringPool . toString ( attributeDecl . name . rawname ) , value ) ; } else { System . err . println ( "Error: " + ex . getLocalizedMessage ( ) ) ; } } if ( fNormalizeAttributeValues ) { if ( attributeDecl . list ) { attValue = normalizeListAttribute ( value , attValue , unTrimValue ) ; } else { if ( value != unTrimValue ) { attValue = fStringPool . addSymbol ( value ) ; } } } } break ; case XMLAttributeDecl . TYPE_NOTATION : { av = fAttValidatorNOTATION ; } break ; case XMLAttributeDecl . TYPE_NMTOKEN : { String unTrimValue = fStringPool . toString ( attValue ) ; String value = unTrimValue . trim ( ) ; boolean isAlistAttribute = attributeDecl . list ; if ( fValidationEnabled ) { if ( value != unTrimValue ) { if ( invalidStandaloneAttDef ( element , attributeDecl . name ) ) { reportRecoverableXMLError ( XMLMessages . MSG_ATTVALUE_CHANGED_DURING_NORMALIZATION_WHEN_STANDALONE , XMLMessages . VC_STANDALONE_DOCUMENT_DECLARATION , fStringPool . toString ( attributeDecl . name . rawname ) , unTrimValue , value ) ; } } if ( attributeDecl . list && value . length ( ) == 0 ) { reportRecoverableXMLError ( XMLMessages . MSG_NMTOKENS_INVALID , XMLMessages . VC_NAME_TOKEN , fStringPool . toString ( attributeDecl . name . rawname ) ) ; } } try { if ( isAlistAttribute ) { fValNMTOKENS . validate ( value , null ) ; } else { fValNMTOKEN . validate ( value , null ) ; } } catch ( InvalidDatatypeValueException ex ) { reportRecoverableXMLError ( XMLMessages . MSG_NMTOKEN_INVALID , XMLMessages . VC_NAME_TOKEN , fStringPool . toString ( attributeDecl . name . rawname ) , value ) ; } if ( fNormalizeAttributeValues ) { if ( attributeDecl . list ) { attValue = normalizeListAttribute ( value , attValue , unTrimValue ) ; } else { if ( value != unTrimValue ) { attValue = fStringPool . addSymbol ( value ) ; } } } } break ; } if ( av != null ) { int newValue = av . normalize ( element , attributeDecl . name , attValue , attributeDecl . type , attributeDecl . enumeration ) ; if ( fNormalizeAttributeValues ) attValue = newValue ; } return attValue ; } private int normalizeListAttribute ( String value , int origIndex , String origValue ) { int length = value . length ( ) ; StringBuffer buffer = null ; int state = 0 ; int copyStart = 0 ; for ( int i = 0 ; i < length ; i ++ ) { int ch = value . charAt ( i ) ; if ( ch == ' ' ) { if ( state == 0 ) { state = 1 ; } else if ( state == 1 ) { state = 2 ; if ( buffer == null ) buffer = new StringBuffer ( length ) ; buffer . append ( value . substring ( copyStart , i ) ) ; } } else { if ( state == 2 ) copyStart = i ; state = 0 ; } } if ( buffer == null ) return value == origValue ? origIndex : fStringPool . addSymbol ( value ) ; buffer . append ( value . substring ( copyStart ) ) ; return fStringPool . addSymbol ( new String ( buffer ) ) ; } private void charDataInContent ( ) { if ( DEBUG_ELEMENT_CHILDREN ) { System . out . println ( "charDataInContent()" ) ; } if ( fElementChildren . length <= fElementChildrenLength ) { QName [ ] newarray = new QName [ fElementChildren . length * 2 ] ; System . arraycopy ( fElementChildren , 0 , newarray , 0 , fElementChildren . length ) ; fElementChildren = newarray ; } QName qname = fElementChildren [ fElementChildrenLength ] ; if ( qname == null ) { for ( int i = fElementChildrenLength ; i < fElementChildren . length ; i ++ ) { fElementChildren [ i ] = new QName ( ) ; } qname = fElementChildren [ fElementChildrenLength ] ; } qname . clear ( ) ; fElementChildrenLength ++ ; } private int checkContent ( int elementIndex , QName [ ] children , int childOffset , int childCount ) throws Exception { final int elementType = fCurrentElement . rawname ; if ( DEBUG_PRINT_CONTENT ) { String strTmp = fStringPool . toString ( elementType ) ; System . out . println ( "Name: " + strTmp + ", " + "Count: " + childCount + ", " + "ContentSpecType: " + fCurrentContentSpecType ) ; for ( int index = childOffset ; index < ( childOffset + childCount ) && index < 10 ; index ++ ) { if ( index == 0 ) { System . out . print ( "  (" ) ; } String childName = ( children [ index ] . localpart == - 1 ) ? "#PCDATA" : fStringPool . toString ( children [ index ] . localpart ) ; if ( index + 1 == childCount ) { System . out . println ( childName + ")" ) ; } else if ( index + 1 == 10 ) { System . out . println ( childName + ",...)" ) ; } else { System . out . print ( childName + "," ) ; } } } final int contentType = fCurrentContentSpecType ; if ( contentType == XMLElementDecl . TYPE_EMPTY ) { if ( childCount != 0 ) { return 0 ; } } else if ( contentType == XMLElementDecl . TYPE_ANY ) { } else if ( contentType == XMLElementDecl . TYPE_MIXED || contentType == XMLElementDecl . TYPE_CHILDREN ) { XMLContentModel cmElem = null ; try { cmElem = getElementContentModel ( elementIndex ) ; int result = cmElem . validateContent ( children , childOffset , childCount ) ; if ( result != - 1 && fGrammarIsSchemaGrammar ) { SubstitutionGroupComparator comparator = new SubstitutionGroupComparator ( fGrammarResolver , fStringPool ) ; cmElem . setSubstitutionGroupComparator ( comparator ) ; result = cmElem . validateContentSpecial ( children , childOffset , childCount ) ; } return result ; } catch ( CMException excToCatch ) { int majorCode = excToCatch . getErrorCode ( ) ; fErrorReporter . reportError ( fErrorReporter . getLocator ( ) , ImplementationMessages . XERCES_IMPLEMENTATION_DOMAIN , majorCode , 0 , null , XMLErrorReporter . ERRORTYPE_FATAL_ERROR ) ; } } else if ( contentType == - 1 ) { reportRecoverableXMLError ( XMLMessages . MSG_ELEMENT_NOT_DECLARED , XMLMessages . VC_ELEMENT_VALID , elementType ) ; } else if ( contentType == XMLElementDecl . TYPE_SIMPLE ) { XMLContentModel cmElem = null ; if ( childCount > 0 ) { fErrorReporter . reportError ( fErrorReporter . getLocator ( ) , SchemaMessageProvider . SCHEMA_DOMAIN , SchemaMessageProvider . DatatypeError , SchemaMessageProvider . MSG_NONE , new Object [ ] { "In element '" + fStringPool . toString ( elementType ) + "' : " + "Can not have element children within a simple type content" } , XMLErrorReporter . ERRORTYPE_RECOVERABLE_ERROR ) ; } else { try { fGrammar . getElementDecl ( elementIndex , fTempElementDecl ) ; DatatypeValidator dv = fTempElementDecl . datatypeValidator ; if ( fXsiTypeValidator != null ) { dv = fXsiTypeValidator ; fXsiTypeValidator = null ; } if ( dv == null ) { System . out . println ( "Internal Error: this element have a simpletype " + "but no datatypevalidator was found, element " + fTempElementDecl . name + ",locapart: " + fStringPool . toString ( fTempElementDecl . name . localpart ) ) ; } else { dv . validate ( fDatatypeBuffer . toString ( ) , null ) ; } } catch ( InvalidDatatypeValueException idve ) { fErrorReporter . reportError ( fErrorReporter . getLocator ( ) , SchemaMessageProvider . SCHEMA_DOMAIN , SchemaMessageProvider . DatatypeError , SchemaMessageProvider . MSG_NONE , new Object [ ] { "In element '" + fStringPool . toString ( elementType ) + "' : " + idve . getMessage ( ) } , XMLErrorReporter . ERRORTYPE_RECOVERABLE_ERROR ) ; } } } else { fErrorReporter . reportError ( fErrorReporter . getLocator ( ) , ImplementationMessages . XERCES_IMPLEMENTATION_DOMAIN , ImplementationMessages . VAL_CST , 0 , null , XMLErrorReporter . ERRORTYPE_FATAL_ERROR ) ; } return - 1 ; } private void printChildren ( ) { if ( DEBUG_ELEMENT_CHILDREN ) { System . out . print ( '[' ) ; for ( int i = 0 ; i < fElementChildrenLength ; i ++ ) { System . out . print ( ' ' ) ; QName qname = fElementChildren [ i ] ; if ( qname != null ) { System . out . print ( fStringPool . toString ( qname . rawname ) ) ; } else { System . out . print ( "null" ) ; } if ( i < fElementChildrenLength - 1 ) { System . out . print ( ", " ) ; } System . out . flush ( ) ; } System . out . print ( " ]" ) ; System . out . println ( ) ; } } private void printStack ( ) { if ( DEBUG_ELEMENT_CHILDREN ) { System . out . print ( '{' ) ; for ( int i = 0 ; i <= fElementDepth ; i ++ ) { System . out . print ( ' ' ) ; System . out . print ( fElementChildrenOffsetStack [ i ] ) ; if ( i < fElementDepth ) { System . out . print ( ", " ) ; } System . out . flush ( ) ; } System . out . print ( " }" ) ; System . out . println ( ) ; } } public interface AttributeValidator { public int normalize ( QName element , QName attribute , int attValue , int attType , int enumHandle ) throws Exception ; } boolean invalidStandaloneAttDef ( QName element , QName attribute ) { if ( fStandaloneReader == - 1 ) { return false ; } if ( element . rawname == - 1 ) { return false ; } return getAttDefIsExternal ( element , attribute ) ; } final class AttValidatorNOTATION implements AttributeValidator { public int normalize ( QName element , QName attribute , int attValueHandle , int attType , int enumHandle ) throws Exception { String attValue = fStringPool . toString ( attValueHandle ) ; String newAttValue = attValue . trim ( ) ; if ( fValidating ) { if ( newAttValue != attValue ) { if ( invalidStandaloneAttDef ( element , attribute ) ) { reportRecoverableXMLError ( XMLMessages . MSG_ATTVALUE_CHANGED_DURING_NORMALIZATION_WHEN_STANDALONE , XMLMessages . VC_STANDALONE_DOCUMENT_DECLARATION , fStringPool . toString ( attribute . rawname ) , attValue , newAttValue ) ; } attValueHandle = fStringPool . addSymbol ( newAttValue ) ; } else { attValueHandle = fStringPool . addSymbol ( attValueHandle ) ; } if ( ! fStringPool . stringInList ( enumHandle , attValueHandle ) ) { reportRecoverableXMLError ( XMLMessages . MSG_ATTRIBUTE_VALUE_NOT_IN_LIST , XMLMessages . VC_NOTATION_ATTRIBUTES , fStringPool . toString ( attribute . rawname ) , newAttValue , fStringPool . stringListAsString ( enumHandle ) ) ; } } else if ( newAttValue != attValue ) { attValueHandle = fStringPool . addSymbol ( newAttValue ) ; } return attValueHandle ; } boolean invalidStandaloneAttDef ( QName element , QName attribute ) { if ( fStandaloneReader == - 1 ) { return false ; } if ( element . rawname == - 1 ) { return false ; } return getAttDefIsExternal ( element , attribute ) ; } } final class AttValidatorENUMERATION implements AttributeValidator { public int normalize ( QName element , QName attribute , int attValueHandle , int attType , int enumHandle ) throws Exception { String attValue = fStringPool . toString ( attValueHandle ) ; String newAttValue = attValue . trim ( ) ; if ( fValidating ) { if ( newAttValue != attValue ) { if ( invalidStandaloneAttDef ( element , attribute ) ) { reportRecoverableXMLError ( XMLMessages . MSG_ATTVALUE_CHANGED_DURING_NORMALIZATION_WHEN_STANDALONE , XMLMessages . VC_STANDALONE_DOCUMENT_DECLARATION , fStringPool . toString ( attribute . rawname ) , attValue , newAttValue ) ; } attValueHandle = fStringPool . addSymbol ( newAttValue ) ; } else { attValueHandle = fStringPool . addSymbol ( attValueHandle ) ; } if ( ! fStringPool . stringInList ( enumHandle , attValueHandle ) ) { reportRecoverableXMLError ( XMLMessages . MSG_ATTRIBUTE_VALUE_NOT_IN_LIST , XMLMessages . VC_ENUMERATION , fStringPool . toString ( attribute . rawname ) , newAttValue , fStringPool . stringListAsString ( enumHandle ) ) ; } } else if ( newAttValue != attValue ) { attValueHandle = fStringPool . addSymbol ( newAttValue ) ; } return attValueHandle ; } boolean invalidStandaloneAttDef ( QName element , QName attribute ) { if ( fStandaloneReader == - 1 ) { return false ; } if ( element . rawname == - 1 ) { return false ; } return getAttDefIsExternal ( element , attribute ) ; } } protected static class XPathMatcherStack { protected XPathMatcher [ ] fMatchers = new XPathMatcher [ 4 ] ; protected int fMatchersCount ; protected IntStack fContextStack = new IntStack ( ) ; public XPathMatcherStack ( ) { } public void clear ( ) { for ( int i = 0 ; i < fMatchersCount ; i ++ ) { fMatchers [ i ] = null ; } fMatchersCount = 0 ; fContextStack . clear ( ) ; } public int size ( ) { return fContextStack . size ( ) ; } public int getMatcherCount ( ) { return fMatchersCount ; } public void addMatcher ( XPathMatcher matcher ) { ensureMatcherCapacity ( ) ; fMatchers [ fMatchersCount ++ ] = matcher ; } public XPathMatcher getMatcherAt ( int index ) { return fMatchers [ index ] ; } public void pushContext ( ) { fContextStack . push ( fMatchersCount ) ; } public void popContext ( ) { fMatchersCount = fContextStack . pop ( ) ; } private void ensureMatcherCapacity ( ) { if ( fMatchersCount == fMatchers . length ) { XPathMatcher [ ] array = new XPathMatcher [ fMatchers . length * 2 ] ; System . arraycopy ( fMatchers , 0 , array , 0 , fMatchers . length ) ; fMatchers = array ; } } } protected abstract class ValueStoreBase implements ValueStore { protected final String NOT_A_VALUE = "￿" ; protected IdentityConstraint fIdentityConstraint ; protected final Hashtable fValues = new Hashtable ( ) ; protected int fValuesCount ; protected final Vector fValueTuples = new Vector ( ) ; protected ValueStoreBase ( IdentityConstraint identityConstraint ) { fIdentityConstraint = identityConstraint ; } public void startValueScope ( ) throws Exception { if ( DEBUG_VALUE_STORES ) { System . out . println ( "<VS>: " + toString ( ) + "#startValueScope()" ) ; } fValuesCount = 0 ; int count = fIdentityConstraint . getFieldCount ( ) ; for ( int i = 0 ; i < count ; i ++ ) { fValues . put ( fIdentityConstraint . getFieldAt ( i ) , NOT_A_VALUE ) ; } } public void endValueScope ( ) throws Exception { if ( DEBUG_VALUE_STORES ) { System . out . println ( "<VS>: " + toString ( ) + "#endValueScope()" ) ; } if ( fValuesCount != fIdentityConstraint . getFieldCount ( ) ) { switch ( fIdentityConstraint . getType ( ) ) { case IdentityConstraint . UNIQUE : { int code = SchemaMessageProvider . UniqueNotEnoughValues ; String ename = fIdentityConstraint . getElementName ( ) ; reportSchemaError ( code , new Object [ ] { ename } ) ; break ; } case IdentityConstraint . KEY : { int code = SchemaMessageProvider . KeyNotEnoughValues ; Key key = ( Key ) fIdentityConstraint ; String ename = fIdentityConstraint . getElementName ( ) ; String kname = key . getName ( ) ; reportSchemaError ( code , new Object [ ] { ename , kname } ) ; break ; } case IdentityConstraint . KEYREF : { int code = SchemaMessageProvider . KeyRefNotEnoughValues ; KeyRef keyref = ( KeyRef ) fIdentityConstraint ; String ename = fIdentityConstraint . getElementName ( ) ; String kname = keyref . getName ( ) ; reportSchemaError ( code , new Object [ ] { ename , kname } ) ; break ; } } return ; } if ( contains ( fValues ) ) { duplicateValue ( fValues ) ; } Hashtable values = ( Hashtable ) fValues . clone ( ) ; fValueTuples . addElement ( values ) ; } public void endDocument ( ) throws Exception { if ( DEBUG_VALUE_STORES ) { System . out . println ( "<VS>: " + toString ( ) + "#endDocument()" ) ; } } public void addValue ( Field field , String value ) throws Exception { if ( DEBUG_VALUE_STORES ) { System . out . println ( "<VS>: " + toString ( ) + "#addValue(" + "field=" + field + ',' + "value=" + value + ")" ) ; } if ( ! fValues . containsKey ( field ) ) { int code = SchemaMessageProvider . UnknownField ; reportSchemaError ( code , new Object [ ] { field . toString ( ) } ) ; return ; } Object storedValue = fValues . get ( field ) ; if ( ! storedValue . equals ( NOT_A_VALUE ) ) { int code = SchemaMessageProvider . DuplicateField ; reportSchemaError ( code , new Object [ ] { field . toString ( ) } ) ; return ; } fValuesCount ++ ; fValues . put ( field , value ) ; } public boolean contains ( Hashtable tuple ) { if ( DEBUG_VALUE_STORES ) { System . out . println ( "<VS>: " + this . toString ( ) + "#contains(" + toString ( tuple ) + ")" ) ; } int vcount = fValues . size ( ) ; int tcount = tuple . size ( ) ; if ( vcount != tcount ) { return false ; } int count = fValueTuples . size ( ) ; LOOP : for ( int i = 0 ; i < count ; i ++ ) { Hashtable valueTuple = ( Hashtable ) fValueTuples . elementAt ( i ) ; Enumeration values = tuple . elements ( ) ; while ( values . hasMoreElements ( ) ) { String value = ( String ) values . nextElement ( ) ; if ( ! valueTuple . contains ( value ) ) { continue LOOP ; } } return true ; } return false ; } protected void duplicateValue ( Hashtable tuple ) throws Exception { } protected String toString ( Hashtable tuple ) { StringBuffer str = new StringBuffer ( ) ; Enumeration fields = tuple . keys ( ) ; while ( fields . hasMoreElements ( ) ) { Field field = ( Field ) fields . nextElement ( ) ; String value = ( String ) tuple . get ( field ) ; str . append ( value ) ; if ( fields . hasMoreElements ( ) ) { str . append ( ',' ) ; } } return str . toString ( ) ; } public String toString ( ) { String s = super . toString ( ) ; int index1 = s . lastIndexOf ( '$' ) ; if ( index1 != - 1 ) { s = s . substring ( index1 + 1 ) ; } int index2 = s . lastIndexOf ( '.' ) ; if ( index2 != - 1 ) { s = s . substring ( index2 + 1 ) ; } return s + '[' + fIdentityConstraint + ']' ; } } protected class UniqueValueStore extends ValueStoreBase { public UniqueValueStore ( Unique unique ) { super ( unique ) ; } protected void duplicateValue ( Hashtable tuple ) throws Exception { int code = SchemaMessageProvider . DuplicateUnique ; String value = toString ( tuple ) ; String ename = fIdentityConstraint . getElementName ( ) ; reportSchemaError ( code , new Object [ ] { value , ename } ) ; } } protected class KeyValueStore extends ValueStoreBase { public KeyValueStore ( Key key ) { super ( key ) ; } protected void duplicateValue ( Hashtable tuple ) throws Exception { int code = SchemaMessageProvider . DuplicateKey ; String value = toString ( tuple ) ; String ename = fIdentityConstraint . getElementName ( ) ; reportSchemaError ( code , new Object [ ] { value , ename } ) ; } } protected class KeyRefValueStore extends ValueStoreBase { protected KeyValueStore fKeyValueStore ; public KeyRefValueStore ( KeyRef keyRef , KeyValueStore keyValueStore ) { super ( keyRef ) ; fKeyValueStore = keyValueStore ; } public void endDocument ( ) throws Exception { super . endDocument ( ) ; int count = fValueTuples . size ( ) ; for ( int i = 0 ; i < count ; i ++ ) { Hashtable values = ( Hashtable ) fValueTuples . elementAt ( i ) ; if ( ! fKeyValueStore . contains ( values ) ) { int code = SchemaMessageProvider . KeyNotFound ; String value = toString ( values ) ; String element = fIdentityConstraint . getElementName ( ) ; reportSchemaError ( code , new Object [ ] { value , element } ) ; } } } } protected class ValueStoreCache { protected final Vector fValueStores = new Vector ( ) ; protected final Hashtable fIdentityConstraint2ValueStoreMap = new Hashtable ( ) ; public ValueStoreCache ( ) { } public void startDocument ( ) throws Exception { if ( DEBUG_VALUE_STORES ) { System . out . println ( "<VS>: " + toString ( ) + "#startDocument()" ) ; } fValueStores . removeAllElements ( ) ; fIdentityConstraint2ValueStoreMap . clear ( ) ; } public void initValueStoresFor ( XMLElementDecl edecl ) throws Exception { if ( DEBUG_VALUE_STORES ) { System . out . println ( "<VS>: " + toString ( ) + "#initValueStoresFor(" + fStringPool . toString ( edecl . name . rawname ) + ")" ) ; } Vector uvector = edecl . unique ; int ucount = uvector . size ( ) ; for ( int i = 0 ; i < ucount ; i ++ ) { Unique unique = ( Unique ) uvector . elementAt ( i ) ; UniqueValueStore valueStore = null ; int fcount = unique . getFieldCount ( ) ; for ( int j = 0 ; j < fcount ; j ++ ) { Field field = unique . getFieldAt ( j ) ; if ( valueStore == null ) { valueStore = ( UniqueValueStore ) fIdentityConstraint2ValueStoreMap . get ( unique ) ; if ( valueStore != null ) { return ; } valueStore = new UniqueValueStore ( unique ) ; fValueStores . addElement ( valueStore ) ; } if ( DEBUG_VALUE_STORES ) { System . out . println ( "<VS>: " + unique + " -> " + valueStore ) ; } fIdentityConstraint2ValueStoreMap . put ( unique , valueStore ) ; } } Vector kvector = edecl . key ; int kcount = kvector . size ( ) ; Hashtable keyHash = null ; if ( kcount > 0 ) { keyHash = new Hashtable ( kcount ) ; for ( int i = 0 ; i < kcount ; i ++ ) { Key key = ( Key ) kvector . elementAt ( i ) ; KeyValueStore valueStore = null ; int fcount = key . getFieldCount ( ) ; for ( int j = 0 ; j < fcount ; j ++ ) { Field field = key . getFieldAt ( j ) ; if ( valueStore == null ) { valueStore = new KeyValueStore ( key ) ; fValueStores . addElement ( valueStore ) ; keyHash . put ( key . getName ( ) , valueStore ) ; } if ( DEBUG_VALUE_STORES ) { System . out . println ( "<VS>: " + key + " -> " + valueStore ) ; } fIdentityConstraint2ValueStoreMap . put ( key , valueStore ) ; } } } Vector krvector = edecl . keyRef ; int krcount = krvector . size ( ) ; for ( int i = 0 ; i < krcount ; i ++ ) { KeyRef keyRef = ( KeyRef ) krvector . elementAt ( i ) ; KeyValueStore keyValueStore = ( KeyValueStore ) keyHash . get ( keyRef . getName ( ) ) ; KeyRefValueStore keyRefValueStore = null ; int fcount = keyRef . getFieldCount ( ) ; for ( int j = 0 ; j < fcount ; j ++ ) { Field field = keyRef . getFieldAt ( i ) ; if ( keyRefValueStore == null ) { keyRefValueStore = new KeyRefValueStore ( keyRef , keyValueStore ) ; fValueStores . addElement ( keyRefValueStore ) ; } if ( DEBUG_VALUE_STORES ) { System . out . println ( "<VS>: " + keyRef + " -> " + keyRefValueStore ) ; } fIdentityConstraint2ValueStoreMap . put ( keyRef , keyRefValueStore ) ; } } } public ValueStoreBase getValueStoreFor ( Field field ) { if ( DEBUG_VALUE_STORES ) { System . out . println ( "<VS>: " + toString ( ) + "#getValueStoreFor(" + field + ")" ) ; } IdentityConstraint identityConstraint = field . getIdentityConstraint ( ) ; return ( ValueStoreBase ) fIdentityConstraint2ValueStoreMap . get ( identityConstraint ) ; } public void endDocument ( ) throws Exception { if ( DEBUG_VALUE_STORES ) { System . out . println ( "<VS>: " + toString ( ) + "#endDocument()" ) ; } int count = fValueStores . size ( ) ; for ( int i = 0 ; i < count ; i ++ ) { ValueStoreBase valueStore = ( ValueStoreBase ) fValueStores . elementAt ( i ) ; valueStore . endDocument ( ) ; } } public String toString ( ) { String s = super . toString ( ) ; int index1 = s . lastIndexOf ( '$' ) ; if ( index1 != - 1 ) { return s . substring ( index1 + 1 ) ; } int index2 = s . lastIndexOf ( '.' ) ; if ( index2 != - 1 ) { return s . substring ( index2 + 1 ) ; } return s ; } } } 	1	['95', '1', '0', '59', '297', '2425', '13', '55', '55', '0.944105337', '6959', '0.967213115', '41', '0', '0.085473684', '0', '0', '70.96842105', '17', '1.6211', '19']
package org . apache . xerces . readers ; import org . apache . xerces . framework . XMLErrorReporter ; import org . apache . xerces . utils . ChunkyByteArray ; import org . apache . xerces . utils . StringPool ; import org . xml . sax . InputSource ; import java . io . InputStream ; import java . io . InputStreamReader ; import java . io . Reader ; import java . net . URL ; import java . util . Stack ; public class DefaultReaderFactory implements XMLEntityReaderFactory { private static final boolean USE_CHAR_READER_FOR_UTF8 = false ; private static final boolean USE_BYTE_READER_FOR_UTF8 = true ; private boolean fSendCharDataAsCharArray = false ; private boolean fAllowJavaEncodingName = false ; private Stack fRecognizers = null ; public DefaultReaderFactory ( ) { } public void addRecognizer ( XMLDeclRecognizer recognizer ) { if ( fRecognizers == null ) { fRecognizers = new Stack ( ) ; XMLDeclRecognizer . registerDefaultRecognizers ( fRecognizers ) ; } fRecognizers . push ( recognizer ) ; } public void setSendCharDataAsCharArray ( boolean flag ) { fSendCharDataAsCharArray = flag ; } public void setAllowJavaEncodingName ( boolean flag ) { fAllowJavaEncodingName = flag ; } public boolean getAllowJavaEncodingName ( ) { return fAllowJavaEncodingName ; } public XMLEntityHandler . EntityReader createReader ( XMLEntityHandler entityHandler , XMLErrorReporter errorReporter , InputSource source , String systemId , boolean xmlDecl , StringPool stringPool ) throws Exception { if ( source . getCharacterStream ( ) != null ) { return createCharReader ( entityHandler , errorReporter , fSendCharDataAsCharArray , source . getCharacterStream ( ) , stringPool ) ; } if ( source . getEncoding ( ) != null && source . getByteStream ( ) != null ) { java . io . Reader reader = new InputStreamReader ( source . getByteStream ( ) , source . getEncoding ( ) ) ; return createCharReader ( entityHandler , errorReporter , fSendCharDataAsCharArray , reader , stringPool ) ; } InputStream is = source . getByteStream ( ) ; if ( is == null ) { URL url = new URL ( systemId ) ; is = url . openStream ( ) ; } ChunkyByteArray data = new ChunkyByteArray ( is ) ; if ( fRecognizers == null ) { fRecognizers = new Stack ( ) ; XMLDeclRecognizer . registerDefaultRecognizers ( fRecognizers ) ; } for ( int i = fRecognizers . size ( ) - 1 ; i >= 0 ; i -- ) { XMLDeclRecognizer recognizer = ( XMLDeclRecognizer ) fRecognizers . elementAt ( i ) ; XMLEntityHandler . EntityReader reader = recognizer . recognize ( this , entityHandler , errorReporter , fSendCharDataAsCharArray , stringPool , data , xmlDecl , fAllowJavaEncodingName ) ; if ( reader != null ) { return reader ; } } return createUTF8Reader ( entityHandler , errorReporter , fSendCharDataAsCharArray , data , stringPool ) ; } public XMLEntityHandler . EntityReader createCharReader ( XMLEntityHandler entityHandler , XMLErrorReporter errorReporter , boolean sendCharDataAsCharArray , Reader reader , StringPool stringPool ) throws Exception { return new CharReader ( entityHandler , errorReporter , sendCharDataAsCharArray , reader , stringPool ) ; } public XMLEntityHandler . EntityReader createUTF8Reader ( XMLEntityHandler entityHandler , XMLErrorReporter errorReporter , boolean sendCharDataAsCharArray , InputStream data , StringPool stringPool ) throws Exception { XMLEntityHandler . EntityReader reader ; if ( USE_CHAR_READER_FOR_UTF8 ) { reader = new CharReader ( entityHandler , errorReporter , sendCharDataAsCharArray , new InputStreamReader ( data , "UTF8" ) , stringPool ) ; } else if ( USE_BYTE_READER_FOR_UTF8 ) { reader = new UTF8Reader ( entityHandler , errorReporter , sendCharDataAsCharArray , data , stringPool ) ; } else { reader = new UTF8CharReader ( entityHandler , errorReporter , sendCharDataAsCharArray , data , stringPool ) ; } return reader ; } public XMLEntityHandler . EntityReader createStringReader ( XMLEntityHandler entityHandler , XMLErrorReporter errorReporter , boolean sendCharDataAsCharArray , int lineNumber , int columnNumber , int stringHandle , StringPool stringPool , boolean addEnclosingSpaces ) throws Exception { return StringReader . createStringReader ( entityHandler , errorReporter , sendCharDataAsCharArray , lineNumber , columnNumber , stringHandle , stringPool , addEnclosingSpaces ) ; } } 	0	['9', '1', '0', '11', '26', '16', '1', '10', '9', '0.875', '191', '1', '0', '0', '0.333333333', '0', '0', '19.66666667', '2', '1', '0']
package org . apache . xerces . dom ; import org . w3c . dom . * ; public class DOMImplementationImpl implements DOMImplementation { static DOMImplementationImpl singleton = new DOMImplementationImpl ( ) ; public boolean hasFeature ( String feature , String version ) { boolean anyVersion = version == null || version . length ( ) == 0 ; return ( feature . equalsIgnoreCase ( "Core" ) && ( anyVersion || version . equals ( "1.0" ) || version . equals ( "2.0" ) ) ) || ( feature . equalsIgnoreCase ( "XML" ) && ( anyVersion || version . equals ( "1.0" ) || version . equals ( "2.0" ) ) ) || ( feature . equalsIgnoreCase ( "Events" ) && ( anyVersion || version . equals ( "2.0" ) ) ) || ( feature . equalsIgnoreCase ( "MutationEvents" ) && ( anyVersion || version . equals ( "2.0" ) ) ) || ( feature . equalsIgnoreCase ( "Traversal" ) && ( anyVersion || version . equals ( "2.0" ) ) ) ; } public static DOMImplementation getDOMImplementation ( ) { return singleton ; } public DocumentType createDocumentType ( String qualifiedName , String publicID , String systemID ) { if ( ! DocumentImpl . isXMLName ( qualifiedName ) ) { throw new DOMException ( DOMException . INVALID_CHARACTER_ERR , "DOM002 Illegal character" ) ; } int index = qualifiedName . indexOf ( ':' ) ; if ( index == 0 || index == qualifiedName . length ( ) - 1 ) { throw new DOMException ( DOMException . NAMESPACE_ERR , "DOM003 Namespace error" ) ; } return new DocumentTypeImpl ( null , qualifiedName , publicID , systemID ) ; } public Document createDocument ( String namespaceURI , String qualifiedName , DocumentType doctype ) throws DOMException { if ( doctype != null && doctype . getOwnerDocument ( ) != null ) { throw new DOMException ( DOMException . WRONG_DOCUMENT_ERR , "DOM005 Wrong document" ) ; } DocumentImpl doc = new DocumentImpl ( doctype ) ; Element e = doc . createElementNS ( namespaceURI , qualifiedName ) ; doc . appendChild ( e ) ; return doc ; } } 	1	['6', '1', '2', '4', '18', '13', '3', '2', '5', '0.8', '150', '0', '1', '0', '0.533333333', '0', '0', '23.83333333', '20', '4.3333', '3']
package org . w3c . dom ; public interface NamedNodeMap { public Node getNamedItem ( String name ) ; public Node setNamedItem ( Node arg ) throws DOMException ; public Node removeNamedItem ( String name ) throws DOMException ; public Node item ( int index ) ; public int getLength ( ) ; public Node getNamedItemNS ( String namespaceURI , String localName ) ; public Node setNamedItemNS ( Node arg ) throws DOMException ; public Node removeNamedItemNS ( String namespaceURI , String localName ) throws DOMException ; } 	0	['8', '1', '0', '0', '8', '28', '0', '0', '8', '2', '8', '0', '0', '0', '0.46875', '0', '0', '0', '1', '1', '0']
package org . apache . xerces . validators . datatype ; import java . util . Hashtable ; import org . apache . xerces . validators . datatype . DatatypeValidator ; public abstract class AbstractDatatypeValidator implements DatatypeValidator , Cloneable { private Hashtable fFacets ; abstract public Object validate ( String content , Object state ) throws InvalidDatatypeValueException ; abstract public Object clone ( ) throws CloneNotSupportedException ; public Hashtable getFacets ( ) { return null ; } public int compare ( String value1 , String valu2 ) { return 0 ; } } 	1	['5', '1', '16', '19', '6', '10', '17', '2', '5', '1.25', '13', '1', '0', '0', '0.533333333', '0', '0', '1.4', '1', '0.8', '1']
package org . apache . xerces . validators . common ; import java . util . Vector ; import org . apache . xerces . utils . QName ; import org . apache . xerces . validators . datatype . DatatypeValidator ; public class XMLElementDecl { public static final int TYPE_EMPTY = 0 ; public static final int TYPE_ANY = 1 ; public static final int TYPE_MIXED = 2 ; public static final int TYPE_CHILDREN = 3 ; public static final int TYPE_SIMPLE = 4 ; public final QName name = new QName ( ) ; public int type ; public boolean list ; public DatatypeValidator datatypeValidator ; public int contentSpecIndex ; public int enclosingScope ; public final Vector unique = new Vector ( ) ; public final Vector key = new Vector ( ) ; public final Vector keyRef = new Vector ( ) ; public XMLElementDecl ( ) { clear ( ) ; } public XMLElementDecl ( XMLElementDecl elementDecl ) { setValues ( elementDecl ) ; } public void clear ( ) { name . clear ( ) ; type = - 1 ; list = false ; datatypeValidator = null ; contentSpecIndex = - 1 ; enclosingScope = - 1 ; unique . removeAllElements ( ) ; key . removeAllElements ( ) ; keyRef . removeAllElements ( ) ; } public void setValues ( XMLElementDecl elementDecl ) { name . setValues ( elementDecl . name ) ; type = elementDecl . type ; list = elementDecl . list ; datatypeValidator = elementDecl . datatypeValidator ; contentSpecIndex = elementDecl . contentSpecIndex ; enclosingScope = elementDecl . enclosingScope ; } public int hashCode ( ) { return super . hashCode ( ) ; } public boolean equals ( Object object ) { return super . equals ( object ) ; } } 	0	['6', '1', '0', '9', '14', '3', '7', '2', '6', '0.728571429', '132', '0', '2', '0', '0.5', '1', '1', '18.66666667', '1', '0.6667', '0']
package org . apache . xerces . jaxp ; import java . io . File ; import java . io . InputStream ; import java . io . IOException ; import javax . xml . parsers . ParserConfigurationException ; import org . apache . xerces . parsers . SAXParser ; import org . xml . sax . HandlerBase ; import org . xml . sax . InputSource ; import org . xml . sax . Parser ; import org . xml . sax . XMLReader ; import org . xml . sax . SAXException ; import org . xml . sax . SAXNotRecognizedException ; import org . xml . sax . SAXNotSupportedException ; public class SAXParserImpl extends javax . xml . parsers . SAXParser { private boolean namespaces = false ; private boolean validation = false ; private Parser parser = null ; private SAXParserImpl ( ) { super ( ) ; } protected SAXParserImpl ( boolean namespaces , boolean validation ) throws ParserConfigurationException { this ( ) ; SAXParser p = new SAXParser ( ) ; try { p . setFeature ( "http://xml.org/sax/features/namespaces" , namespaces ) ; } catch ( SAXException e ) { throw new ParserConfigurationException ( "Cannot set namespace " + "awareness to " + namespaces ) ; } try { p . setFeature ( "http://xml.org/sax/features/validation" , validation ) ; } catch ( SAXException e ) { throw new ParserConfigurationException ( "Cannot set validation to " + validation ) ; } this . namespaces = namespaces ; this . validation = validation ; this . parser = p ; } public Parser getParser ( ) { return ( this . parser ) ; } public XMLReader getXMLReader ( ) throws SAXException { return ( XMLReader ) parser ; } public boolean isNamespaceAware ( ) { return ( this . namespaces ) ; } public boolean isValidating ( ) { return ( this . validation ) ; } public void setProperty ( String name , Object value ) throws SAXNotRecognizedException , SAXNotSupportedException { throw new SAXNotRecognizedException ( "Feature: " + name ) ; } public Object getProperty ( String name ) throws SAXNotRecognizedException , SAXNotSupportedException { throw new SAXNotRecognizedException ( "Feature: " + name ) ; } } 	1	['8', '2', '0', '2', '17', '8', '1', '1', '6', '0.666666667', '112', '1', '1', '0.76', '0.375', '1', '1', '12.625', '1', '0.75', '3']
package org . apache . html . dom ; import org . w3c . dom . * ; import org . w3c . dom . html . * ; public class HTMLOListElementImpl extends HTMLElementImpl implements HTMLOListElement { public boolean getCompact ( ) { return getBinary ( "compact" ) ; } public void setCompact ( boolean compact ) { setAttribute ( "compact" , compact ) ; } public int getStart ( ) { return getInteger ( getAttribute ( "start" ) ) ; } public void setStart ( int start ) { setAttribute ( "start" , String . valueOf ( start ) ) ; } public String getType ( ) { return getAttribute ( "type" ) ; } public void setType ( String type ) { setAttribute ( "type" , type ) ; } public HTMLOListElementImpl ( HTMLDocumentImpl owner , String name ) { super ( owner , name ) ; } } 	0	['7', '4', '0', '2', '14', '21', '0', '2', '7', '2', '42', '0', '0', '0.94', '0.342857143', '0', '0', '5', '1', '0.8571', '0']
package org . apache . xerces . utils ; import java . io . IOException ; import java . io . Serializable ; public class URI implements Serializable { public static class MalformedURIException extends IOException { public MalformedURIException ( ) { super ( ) ; } public MalformedURIException ( String p_msg ) { super ( p_msg ) ; } } private static final String RESERVED_CHARACTERS = ";/?:@&=+$," ; private static final String MARK_CHARACTERS = "-_.!~*'() " ; private static final String SCHEME_CHARACTERS = "+-." ; private static final String USERINFO_CHARACTERS = ";:&=+$," ; private String m_scheme = null ; private String m_userinfo = null ; private String m_host = null ; private int m_port = - 1 ; private String m_path = null ; private String m_queryString = null ; private String m_fragment = null ; private static boolean DEBUG = false ; public URI ( ) { } public URI ( URI p_other ) { initialize ( p_other ) ; } public URI ( String p_uriSpec ) throws MalformedURIException { this ( ( URI ) null , p_uriSpec ) ; } public URI ( URI p_base , String p_uriSpec ) throws MalformedURIException { initialize ( p_base , p_uriSpec ) ; } public URI ( String p_scheme , String p_schemeSpecificPart ) throws MalformedURIException { if ( p_scheme == null || p_scheme . trim ( ) . length ( ) == 0 ) { throw new MalformedURIException ( "Cannot construct URI with null/empty scheme!" ) ; } if ( p_schemeSpecificPart == null || p_schemeSpecificPart . trim ( ) . length ( ) == 0 ) { throw new MalformedURIException ( "Cannot construct URI with null/empty scheme-specific part!" ) ; } setScheme ( p_scheme ) ; setPath ( p_schemeSpecificPart ) ; } public URI ( String p_scheme , String p_host , String p_path , String p_queryString , String p_fragment ) throws MalformedURIException { this ( p_scheme , null , p_host , - 1 , p_path , p_queryString , p_fragment ) ; } public URI ( String p_scheme , String p_userinfo , String p_host , int p_port , String p_path , String p_queryString , String p_fragment ) throws MalformedURIException { if ( p_scheme == null || p_scheme . trim ( ) . length ( ) == 0 ) { throw new MalformedURIException ( "Scheme is required!" ) ; } if ( p_host == null ) { if ( p_userinfo != null ) { throw new MalformedURIException ( "Userinfo may not be specified if host is not specified!" ) ; } if ( p_port != - 1 ) { throw new MalformedURIException ( "Port may not be specified if host is not specified!" ) ; } } if ( p_path != null ) { if ( p_path . indexOf ( '?' ) != - 1 && p_queryString != null ) { throw new MalformedURIException ( "Query string cannot be specified in path and query string!" ) ; } if ( p_path . indexOf ( '#' ) != - 1 && p_fragment != null ) { throw new MalformedURIException ( "Fragment cannot be specified in both the path and fragment!" ) ; } } setScheme ( p_scheme ) ; setHost ( p_host ) ; setPort ( p_port ) ; setUserinfo ( p_userinfo ) ; setPath ( p_path ) ; setQueryString ( p_queryString ) ; setFragment ( p_fragment ) ; } private void initialize ( URI p_other ) { m_scheme = p_other . getScheme ( ) ; m_userinfo = p_other . getUserinfo ( ) ; m_host = p_other . getHost ( ) ; m_port = p_other . getPort ( ) ; m_path = p_other . getPath ( ) ; m_queryString = p_other . getQueryString ( ) ; m_fragment = p_other . getFragment ( ) ; } private void initialize ( URI p_base , String p_uriSpec ) throws MalformedURIException { if ( p_base == null && ( p_uriSpec == null || p_uriSpec . trim ( ) . length ( ) == 0 ) ) { throw new MalformedURIException ( "Cannot initialize URI with empty parameters." ) ; } if ( p_uriSpec == null || p_uriSpec . trim ( ) . length ( ) == 0 ) { initialize ( p_base ) ; return ; } String uriSpec = p_uriSpec . trim ( ) ; int uriSpecLen = uriSpec . length ( ) ; int index = 0 ; int colonIdx = uriSpec . indexOf ( ':' ) ; if ( ( colonIdx < 2 ) || ( colonIdx > uriSpec . indexOf ( '/' ) ) ) { int fragmentIdx = uriSpec . indexOf ( '#' ) ; if ( p_base == null && fragmentIdx != 0 ) { throw new MalformedURIException ( "No scheme found in URI." ) ; } } else { initializeScheme ( uriSpec ) ; index = m_scheme . length ( ) + 1 ; } if ( ( ( index + 1 ) < uriSpecLen ) && ( uriSpec . substring ( index ) . startsWith ( "//" ) ) ) { index += 2 ; int startPos = index ; char testChar = '\0' ; while ( index < uriSpecLen ) { testChar = uriSpec . charAt ( index ) ; if ( testChar == '/' || testChar == '?' || testChar == '#' ) { break ; } index ++ ; } if ( index > startPos ) { initializeAuthority ( uriSpec . substring ( startPos , index ) ) ; } else { m_host = "" ; } } initializePath ( uriSpec . substring ( index ) ) ; if ( p_base != null ) { if ( m_path . length ( ) == 0 && m_scheme == null && m_host == null ) { m_scheme = p_base . getScheme ( ) ; m_userinfo = p_base . getUserinfo ( ) ; m_host = p_base . getHost ( ) ; m_port = p_base . getPort ( ) ; m_path = p_base . getPath ( ) ; if ( m_queryString == null ) { m_queryString = p_base . getQueryString ( ) ; } return ; } if ( m_scheme == null ) { m_scheme = p_base . getScheme ( ) ; } else { return ; } if ( m_host == null ) { m_userinfo = p_base . getUserinfo ( ) ; m_host = p_base . getHost ( ) ; m_port = p_base . getPort ( ) ; } else { return ; } if ( m_path . length ( ) > 0 && m_path . startsWith ( "/" ) ) { return ; } String path = new String ( ) ; String basePath = p_base . getPath ( ) ; if ( basePath != null ) { int lastSlash = basePath . lastIndexOf ( '/' ) ; if ( lastSlash != - 1 ) { path = basePath . substring ( 0 , lastSlash + 1 ) ; } } path = path . concat ( m_path ) ; index = - 1 ; while ( ( index = path . indexOf ( "/./" ) ) != - 1 ) { path = path . substring ( 0 , index + 1 ) . concat ( path . substring ( index + 3 ) ) ; } if ( path . endsWith ( "/." ) ) { path = path . substring ( 0 , path . length ( ) - 1 ) ; } index = - 1 ; int segIndex = - 1 ; String tempString = null ; while ( ( index = path . indexOf ( "/../" ) ) > 0 ) { tempString = path . substring ( 0 , path . indexOf ( "/../" ) ) ; segIndex = tempString . lastIndexOf ( '/' ) ; if ( segIndex != - 1 ) { if ( ! tempString . substring ( segIndex ++ ) . equals ( ".." ) ) { path = path . substring ( 0 , segIndex ) . concat ( path . substring ( index + 4 ) ) ; } } } if ( path . endsWith ( "/.." ) ) { tempString = path . substring ( 0 , path . length ( ) - 3 ) ; segIndex = tempString . lastIndexOf ( '/' ) ; if ( segIndex != - 1 ) { path = path . substring ( 0 , segIndex + 1 ) ; } } m_path = path ; } } private void initializeScheme ( String p_uriSpec ) throws MalformedURIException { int uriSpecLen = p_uriSpec . length ( ) ; int index = 0 ; String scheme = null ; char testChar = '\0' ; while ( index < uriSpecLen ) { testChar = p_uriSpec . charAt ( index ) ; if ( testChar == ':' || testChar == '/' || testChar == '?' || testChar == '#' ) { break ; } index ++ ; } scheme = p_uriSpec . substring ( 0 , index ) ; if ( scheme . length ( ) == 0 ) { throw new MalformedURIException ( "No scheme found in URI." ) ; } else { setScheme ( scheme ) ; } } private void initializeAuthority ( String p_uriSpec ) throws MalformedURIException { int index = 0 ; int start = 0 ; int end = p_uriSpec . length ( ) ; char testChar = '\0' ; String userinfo = null ; if ( p_uriSpec . indexOf ( '@' , start ) != - 1 ) { while ( index < end ) { testChar = p_uriSpec . charAt ( index ) ; if ( testChar == '@' ) { break ; } index ++ ; } userinfo = p_uriSpec . substring ( start , index ) ; index ++ ; } String host = null ; start = index ; while ( index < end ) { testChar = p_uriSpec . charAt ( index ) ; if ( testChar == ':' ) { break ; } index ++ ; } host = p_uriSpec . substring ( start , index ) ; int port = - 1 ; if ( host . length ( ) > 0 ) { if ( testChar == ':' ) { index ++ ; start = index ; while ( index < end ) { index ++ ; } String portStr = p_uriSpec . substring ( start , index ) ; if ( portStr . length ( ) > 0 ) { for ( int i = 0 ; i < portStr . length ( ) ; i ++ ) { if ( ! isDigit ( portStr . charAt ( i ) ) ) { throw new MalformedURIException ( portStr + " is invalid. Port should only contain digits!" ) ; } } try { port = Integer . parseInt ( portStr ) ; } catch ( NumberFormatException nfe ) { } } } } setHost ( host ) ; setPort ( port ) ; setUserinfo ( userinfo ) ; } private void initializePath ( String p_uriSpec ) throws MalformedURIException { if ( p_uriSpec == null ) { throw new MalformedURIException ( "Cannot initialize path from null string!" ) ; } int index = 0 ; int start = 0 ; int end = p_uriSpec . length ( ) ; char testChar = '\0' ; while ( index < end ) { testChar = p_uriSpec . charAt ( index ) ; if ( testChar == '?' || testChar == '#' ) { break ; } if ( testChar == '%' ) { if ( index + 2 >= end || ! isHex ( p_uriSpec . charAt ( index + 1 ) ) || ! isHex ( p_uriSpec . charAt ( index + 2 ) ) ) { throw new MalformedURIException ( "Path contains invalid escape sequence!" ) ; } } else if ( ! isReservedCharacter ( testChar ) && ! isUnreservedCharacter ( testChar ) ) { throw new MalformedURIException ( "Path contains invalid character: " + testChar ) ; } index ++ ; } m_path = p_uriSpec . substring ( start , index ) ; if ( testChar == '?' ) { index ++ ; start = index ; while ( index < end ) { testChar = p_uriSpec . charAt ( index ) ; if ( testChar == '#' ) { break ; } if ( testChar == '%' ) { if ( index + 2 >= end || ! isHex ( p_uriSpec . charAt ( index + 1 ) ) || ! isHex ( p_uriSpec . charAt ( index + 2 ) ) ) { throw new MalformedURIException ( "Query string contains invalid escape sequence!" ) ; } } else if ( ! isReservedCharacter ( testChar ) && ! isUnreservedCharacter ( testChar ) ) { throw new MalformedURIException ( "Query string contains invalid character:" + testChar ) ; } index ++ ; } m_queryString = p_uriSpec . substring ( start , index ) ; } if ( testChar == '#' ) { index ++ ; start = index ; while ( index < end ) { testChar = p_uriSpec . charAt ( index ) ; if ( testChar == '%' ) { if ( index + 2 >= end || ! isHex ( p_uriSpec . charAt ( index + 1 ) ) || ! isHex ( p_uriSpec . charAt ( index + 2 ) ) ) { throw new MalformedURIException ( "Fragment contains invalid escape sequence!" ) ; } } else if ( ! isReservedCharacter ( testChar ) && ! isUnreservedCharacter ( testChar ) ) { throw new MalformedURIException ( "Fragment contains invalid character:" + testChar ) ; } index ++ ; } m_fragment = p_uriSpec . substring ( start , index ) ; } } public String getScheme ( ) { return m_scheme ; } public String getSchemeSpecificPart ( ) { StringBuffer schemespec = new StringBuffer ( ) ; if ( m_userinfo != null || m_host != null || m_port != - 1 ) { schemespec . append ( "//" ) ; } if ( m_userinfo != null ) { schemespec . append ( m_userinfo ) ; schemespec . append ( '@' ) ; } if ( m_host != null ) { schemespec . append ( m_host ) ; } if ( m_port != - 1 ) { schemespec . append ( ':' ) ; schemespec . append ( m_port ) ; } if ( m_path != null ) { schemespec . append ( ( m_path ) ) ; } if ( m_queryString != null ) { schemespec . append ( '?' ) ; schemespec . append ( m_queryString ) ; } if ( m_fragment != null ) { schemespec . append ( '#' ) ; schemespec . append ( m_fragment ) ; } return schemespec . toString ( ) ; } public String getUserinfo ( ) { return m_userinfo ; } public String getHost ( ) { return m_host ; } public int getPort ( ) { return m_port ; } public String getPath ( boolean p_includeQueryString , boolean p_includeFragment ) { StringBuffer pathString = new StringBuffer ( m_path ) ; if ( p_includeQueryString && m_queryString != null ) { pathString . append ( '?' ) ; pathString . append ( m_queryString ) ; } if ( p_includeFragment && m_fragment != null ) { pathString . append ( '#' ) ; pathString . append ( m_fragment ) ; } return pathString . toString ( ) ; } public String getPath ( ) { return m_path ; } public String getQueryString ( ) { return m_queryString ; } public String getFragment ( ) { return m_fragment ; } public void setScheme ( String p_scheme ) throws MalformedURIException { if ( p_scheme == null ) { throw new MalformedURIException ( "Cannot set scheme from null string!" ) ; } if ( ! isConformantSchemeName ( p_scheme ) ) { throw new MalformedURIException ( "The scheme is not conformant." ) ; } m_scheme = p_scheme . toLowerCase ( ) ; } public void setUserinfo ( String p_userinfo ) throws MalformedURIException { if ( p_userinfo == null ) { m_userinfo = null ; } else { if ( m_host == null ) { throw new MalformedURIException ( "Userinfo cannot be set when host is null!" ) ; } int index = 0 ; int end = p_userinfo . length ( ) ; char testChar = '\0' ; while ( index < end ) { testChar = p_userinfo . charAt ( index ) ; if ( testChar == '%' ) { if ( index + 2 >= end || ! isHex ( p_userinfo . charAt ( index + 1 ) ) || ! isHex ( p_userinfo . charAt ( index + 2 ) ) ) { throw new MalformedURIException ( "Userinfo contains invalid escape sequence!" ) ; } } else if ( ! isUnreservedCharacter ( testChar ) && USERINFO_CHARACTERS . indexOf ( testChar ) == - 1 ) { throw new MalformedURIException ( "Userinfo contains invalid character:" + testChar ) ; } index ++ ; } } m_userinfo = p_userinfo ; } public void setHost ( String p_host ) throws MalformedURIException { if ( p_host == null || p_host . trim ( ) . length ( ) == 0 ) { m_host = p_host ; m_userinfo = null ; m_port = - 1 ; } else if ( ! isWellFormedAddress ( p_host ) ) { throw new MalformedURIException ( "Host is not a well formed address!" ) ; } m_host = p_host ; } public void setPort ( int p_port ) throws MalformedURIException { if ( p_port >= 0 && p_port <= 65535 ) { if ( m_host == null ) { throw new MalformedURIException ( "Port cannot be set when host is null!" ) ; } } else if ( p_port != - 1 ) { throw new MalformedURIException ( "Invalid port number!" ) ; } m_port = p_port ; } public void setPath ( String p_path ) throws MalformedURIException { if ( p_path == null ) { m_path = null ; m_queryString = null ; m_fragment = null ; } else { initializePath ( p_path ) ; } } public void appendPath ( String p_addToPath ) throws MalformedURIException { if ( p_addToPath == null || p_addToPath . trim ( ) . length ( ) == 0 ) { return ; } if ( ! isURIString ( p_addToPath ) ) { throw new MalformedURIException ( "Path contains invalid character!" ) ; } if ( m_path == null || m_path . trim ( ) . length ( ) == 0 ) { if ( p_addToPath . startsWith ( "/" ) ) { m_path = p_addToPath ; } else { m_path = "/" + p_addToPath ; } } else if ( m_path . endsWith ( "/" ) ) { if ( p_addToPath . startsWith ( "/" ) ) { m_path = m_path . concat ( p_addToPath . substring ( 1 ) ) ; } else { m_path = m_path . concat ( p_addToPath ) ; } } else { if ( p_addToPath . startsWith ( "/" ) ) { m_path = m_path . concat ( p_addToPath ) ; } else { m_path = m_path . concat ( "/" + p_addToPath ) ; } } } public void setQueryString ( String p_queryString ) throws MalformedURIException { if ( p_queryString == null ) { m_queryString = null ; } else if ( ! isGenericURI ( ) ) { throw new MalformedURIException ( "Query string can only be set for a generic URI!" ) ; } else if ( getPath ( ) == null ) { throw new MalformedURIException ( "Query string cannot be set when path is null!" ) ; } else if ( ! isURIString ( p_queryString ) ) { throw new MalformedURIException ( "Query string contains invalid character!" ) ; } else { m_queryString = p_queryString ; } } public void setFragment ( String p_fragment ) throws MalformedURIException { if ( p_fragment == null ) { m_fragment = null ; } else if ( ! isGenericURI ( ) ) { throw new MalformedURIException ( "Fragment can only be set for a generic URI!" ) ; } else if ( getPath ( ) == null ) { throw new MalformedURIException ( "Fragment cannot be set when path is null!" ) ; } else if ( ! isURIString ( p_fragment ) ) { throw new MalformedURIException ( "Fragment contains invalid character!" ) ; } else { m_fragment = p_fragment ; } } public boolean equals ( Object p_test ) { if ( p_test instanceof URI ) { URI testURI = ( URI ) p_test ; if ( ( ( m_scheme == null && testURI . m_scheme == null ) || ( m_scheme != null && testURI . m_scheme != null && m_scheme . equals ( testURI . m_scheme ) ) ) && ( ( m_userinfo == null && testURI . m_userinfo == null ) || ( m_userinfo != null && testURI . m_userinfo != null && m_userinfo . equals ( testURI . m_userinfo ) ) ) && ( ( m_host == null && testURI . m_host == null ) || ( m_host != null && testURI . m_host != null && m_host . equals ( testURI . m_host ) ) ) && m_port == testURI . m_port && ( ( m_path == null && testURI . m_path == null ) || ( m_path != null && testURI . m_path != null && m_path . equals ( testURI . m_path ) ) ) && ( ( m_queryString == null && testURI . m_queryString == null ) || ( m_queryString != null && testURI . m_queryString != null && m_queryString . equals ( testURI . m_queryString ) ) ) && ( ( m_fragment == null && testURI . m_fragment == null ) || ( m_fragment != null && testURI . m_fragment != null && m_fragment . equals ( testURI . m_fragment ) ) ) ) { return true ; } } return false ; } public String toString ( ) { StringBuffer uriSpecString = new StringBuffer ( ) ; if ( m_scheme != null ) { uriSpecString . append ( m_scheme ) ; uriSpecString . append ( ':' ) ; } uriSpecString . append ( getSchemeSpecificPart ( ) ) ; return uriSpecString . toString ( ) ; } public boolean isGenericURI ( ) { return ( m_host != null ) ; } public static boolean isConformantSchemeName ( String p_scheme ) { if ( p_scheme == null || p_scheme . trim ( ) . length ( ) == 0 ) { return false ; } if ( ! isAlpha ( p_scheme . charAt ( 0 ) ) ) { return false ; } char testChar ; for ( int i = 1 ; i < p_scheme . length ( ) ; i ++ ) { testChar = p_scheme . charAt ( i ) ; if ( ! isAlphanum ( testChar ) && SCHEME_CHARACTERS . indexOf ( testChar ) == - 1 ) { return false ; } } return true ; } public static boolean isWellFormedAddress ( String p_address ) { if ( p_address == null ) { return false ; } String address = p_address . trim ( ) ; int addrLength = address . length ( ) ; if ( addrLength == 0 || addrLength > 255 ) { return false ; } if ( address . startsWith ( "." ) || address . startsWith ( "-" ) ) { return false ; } int index = address . lastIndexOf ( '.' ) ; if ( address . endsWith ( "." ) ) { index = address . substring ( 0 , index ) . lastIndexOf ( '.' ) ; } if ( index + 1 < addrLength && isDigit ( p_address . charAt ( index + 1 ) ) ) { char testChar ; int numDots = 0 ; for ( int i = 0 ; i < addrLength ; i ++ ) { testChar = address . charAt ( i ) ; if ( testChar == '.' ) { if ( ! isDigit ( address . charAt ( i - 1 ) ) || ( i + 1 < addrLength && ! isDigit ( address . charAt ( i + 1 ) ) ) ) { return false ; } numDots ++ ; } else if ( ! isDigit ( testChar ) ) { return false ; } } if ( numDots != 3 ) { return false ; } } else { char testChar ; for ( int i = 0 ; i < addrLength ; i ++ ) { testChar = address . charAt ( i ) ; if ( testChar == '.' ) { if ( ! isAlphanum ( address . charAt ( i - 1 ) ) ) { return false ; } if ( i + 1 < addrLength && ! isAlphanum ( address . charAt ( i + 1 ) ) ) { return false ; } } else if ( ! isAlphanum ( testChar ) && testChar != '-' ) { return false ; } } } return true ; } private static boolean isDigit ( char p_char ) { return p_char >= '0' && p_char <= '9' ; } private static boolean isHex ( char p_char ) { return ( isDigit ( p_char ) || ( p_char >= 'a' && p_char <= 'f' ) || ( p_char >= 'A' && p_char <= 'F' ) ) ; } private static boolean isAlpha ( char p_char ) { return ( ( p_char >= 'a' && p_char <= 'z' ) || ( p_char >= 'A' && p_char <= 'Z' ) ) ; } private static boolean isAlphanum ( char p_char ) { return ( isAlpha ( p_char ) || isDigit ( p_char ) ) ; } private static boolean isReservedCharacter ( char p_char ) { return RESERVED_CHARACTERS . indexOf ( p_char ) != - 1 ; } private static boolean isUnreservedCharacter ( char p_char ) { return ( isAlphanum ( p_char ) || MARK_CHARACTERS . indexOf ( p_char ) != - 1 ) ; } private static boolean isURIString ( String p_uric ) { if ( p_uric == null ) { return false ; } int end = p_uric . length ( ) ; char testChar = '\0' ; for ( int i = 0 ; i < end ; i ++ ) { testChar = p_uric . charAt ( i ) ; if ( testChar == '%' ) { if ( i + 2 >= end || ! isHex ( p_uric . charAt ( i + 1 ) ) || ! isHex ( p_uric . charAt ( i + 2 ) ) ) { return false ; } else { i += 2 ; continue ; } } if ( isReservedCharacter ( testChar ) || isUnreservedCharacter ( testChar ) ) { continue ; } else { return false ; } } return true ; } } 	1	['42', '1', '0', '3', '66', '375', '2', '1', '29', '0.780487805', '2006', '1', '0', '0', '0.226480836', '0', '0', '46.47619048', '33', '3.1429', '4']
package org . apache . xerces . validators . schema ; import org . apache . xerces . dom . AttrImpl ; import org . apache . xerces . dom . DocumentImpl ; import org . w3c . dom . Attr ; import org . w3c . dom . Document ; import org . w3c . dom . DOMException ; import org . w3c . dom . Element ; import org . w3c . dom . NamedNodeMap ; import org . w3c . dom . Node ; public class XUtil { protected XUtil ( ) { } public static void copyInto ( Node src , Node dest ) throws DOMException { Document factory = dest . getOwnerDocument ( ) ; boolean domimpl = factory instanceof DocumentImpl ; Node start = src ; Node parent = src ; Node place = src ; while ( place != null ) { Node node = null ; int type = place . getNodeType ( ) ; switch ( type ) { case Node . CDATA_SECTION_NODE : { node = factory . createCDATASection ( place . getNodeValue ( ) ) ; break ; } case Node . COMMENT_NODE : { node = factory . createComment ( place . getNodeValue ( ) ) ; break ; } case Node . ELEMENT_NODE : { Element element = factory . createElement ( place . getNodeName ( ) ) ; node = element ; NamedNodeMap attrs = place . getAttributes ( ) ; int attrCount = attrs . getLength ( ) ; for ( int i = 0 ; i < attrCount ; i ++ ) { Attr attr = ( Attr ) attrs . item ( i ) ; String attrName = attr . getNodeName ( ) ; String attrValue = attr . getNodeValue ( ) ; element . setAttribute ( attrName , attrValue ) ; if ( domimpl && ! attr . getSpecified ( ) ) { ( ( AttrImpl ) element . getAttributeNode ( attrName ) ) . setSpecified ( false ) ; } } break ; } case Node . ENTITY_REFERENCE_NODE : { node = factory . createEntityReference ( place . getNodeName ( ) ) ; break ; } case Node . PROCESSING_INSTRUCTION_NODE : { node = factory . createProcessingInstruction ( place . getNodeName ( ) , place . getNodeValue ( ) ) ; break ; } case Node . TEXT_NODE : { node = factory . createTextNode ( place . getNodeValue ( ) ) ; break ; } default : { throw new IllegalArgumentException ( "can't copy node type, " + type + " (" + node . getNodeName ( ) + ')' ) ; } } dest . appendChild ( node ) ; if ( place . hasChildNodes ( ) ) { parent = place ; place = place . getFirstChild ( ) ; dest = node ; } else { place = place . getNextSibling ( ) ; while ( place == null && parent != start ) { place = parent . getNextSibling ( ) ; parent = parent . getParentNode ( ) ; dest = dest . getParentNode ( ) ; } } } } public static Element getFirstChildElement ( Node parent ) { Node child = parent . getFirstChild ( ) ; while ( child != null ) { if ( child . getNodeType ( ) == Node . ELEMENT_NODE ) { return ( Element ) child ; } child = child . getNextSibling ( ) ; } return null ; } public static Element getLastChildElement ( Node parent ) { Node child = parent . getLastChild ( ) ; while ( child != null ) { if ( child . getNodeType ( ) == Node . ELEMENT_NODE ) { return ( Element ) child ; } child = child . getPreviousSibling ( ) ; } return null ; } public static Element getNextSiblingElement ( Node node ) { Node sibling = node . getNextSibling ( ) ; while ( sibling != null ) { if ( sibling . getNodeType ( ) == Node . ELEMENT_NODE ) { return ( Element ) sibling ; } sibling = sibling . getNextSibling ( ) ; } return null ; } public static Element getFirstChildElement ( Node parent , String elemName ) { Node child = parent . getFirstChild ( ) ; while ( child != null ) { if ( child . getNodeType ( ) == Node . ELEMENT_NODE ) { if ( child . getNodeName ( ) . equals ( elemName ) ) { return ( Element ) child ; } } child = child . getNextSibling ( ) ; } return null ; } public static Element getLastChildElement ( Node parent , String elemName ) { Node child = parent . getLastChild ( ) ; while ( child != null ) { if ( child . getNodeType ( ) == Node . ELEMENT_NODE ) { if ( child . getNodeName ( ) . equals ( elemName ) ) { return ( Element ) child ; } } child = child . getPreviousSibling ( ) ; } return null ; } public static Element getNextSiblingElement ( Node node , String elemName ) { Node sibling = node . getNextSibling ( ) ; while ( sibling != null ) { if ( sibling . getNodeType ( ) == Node . ELEMENT_NODE ) { if ( sibling . getNodeName ( ) . equals ( elemName ) ) { return ( Element ) sibling ; } } sibling = sibling . getNextSibling ( ) ; } return null ; } public static Element getFirstChildElement ( Node parent , String elemNames [ ] ) { Node child = parent . getFirstChild ( ) ; while ( child != null ) { if ( child . getNodeType ( ) == Node . ELEMENT_NODE ) { for ( int i = 0 ; i < elemNames . length ; i ++ ) { if ( child . getNodeName ( ) . equals ( elemNames [ i ] ) ) { return ( Element ) child ; } } } child = child . getNextSibling ( ) ; } return null ; } public static Element getLastChildElement ( Node parent , String elemNames [ ] ) { Node child = parent . getLastChild ( ) ; while ( child != null ) { if ( child . getNodeType ( ) == Node . ELEMENT_NODE ) { for ( int i = 0 ; i < elemNames . length ; i ++ ) { if ( child . getNodeName ( ) . equals ( elemNames [ i ] ) ) { return ( Element ) child ; } } } child = child . getPreviousSibling ( ) ; } return null ; } public static Element getNextSiblingElement ( Node node , String elemNames [ ] ) { Node sibling = node . getNextSibling ( ) ; while ( sibling != null ) { if ( sibling . getNodeType ( ) == Node . ELEMENT_NODE ) { for ( int i = 0 ; i < elemNames . length ; i ++ ) { if ( sibling . getNodeName ( ) . equals ( elemNames [ i ] ) ) { return ( Element ) sibling ; } } } sibling = sibling . getNextSibling ( ) ; } return null ; } public static Element getFirstChildElement ( Node parent , String elemName , String attrName , String attrValue ) { Node child = parent . getFirstChild ( ) ; while ( child != null ) { if ( child . getNodeType ( ) == Node . ELEMENT_NODE ) { Element element = ( Element ) child ; if ( element . getNodeName ( ) . equals ( elemName ) && element . getAttribute ( attrName ) . equals ( attrValue ) ) { return element ; } } child = child . getNextSibling ( ) ; } return null ; } public static Element getLastChildElement ( Node parent , String elemName , String attrName , String attrValue ) { Node child = parent . getLastChild ( ) ; while ( child != null ) { if ( child . getNodeType ( ) == Node . ELEMENT_NODE ) { Element element = ( Element ) child ; if ( element . getNodeName ( ) . equals ( elemName ) && element . getAttribute ( attrName ) . equals ( attrValue ) ) { return element ; } } child = child . getPreviousSibling ( ) ; } return null ; } public static Element getNextSiblingElement ( Node node , String elemName , String attrName , String attrValue ) { Node sibling = node . getNextSibling ( ) ; while ( sibling != null ) { if ( sibling . getNodeType ( ) == Node . ELEMENT_NODE ) { Element element = ( Element ) sibling ; if ( element . getNodeName ( ) . equals ( elemName ) && element . getAttribute ( attrName ) . equals ( attrValue ) ) { return element ; } } sibling = sibling . getNextSibling ( ) ; } return null ; } public static String getChildText ( Node node ) { if ( node == null ) { return null ; } StringBuffer str = new StringBuffer ( ) ; Node child = node . getFirstChild ( ) ; while ( child != null ) { short type = child . getNodeType ( ) ; if ( type == Node . TEXT_NODE ) { str . append ( child . getNodeValue ( ) ) ; } else if ( type == Node . CDATA_SECTION_NODE ) { str . append ( getChildText ( child ) ) ; } child = child . getNextSibling ( ) ; } return str . toString ( ) ; } } 	0	['15', '1', '0', '5', '51', '105', '3', '2', '14', '2', '527', '0', '0', '0', '0.4', '0', '0', '34.13333333', '5', '3.8', '0']
package org . apache . xerces . validators . datatype ; import java . util . Hashtable ; import java . util . Vector ; import java . lang . reflect . * ; import org . apache . xerces . validators . datatype . * ; import org . apache . xerces . validators . schema . SchemaSymbols ; import org . apache . xerces . validators . datatype . DatatypeValidatorFactory ; import org . apache . xerces . validators . datatype . InvalidDatatypeFacetException ; public class DatatypeValidatorFactoryImpl implements DatatypeValidatorFactory { private static final boolean fDebug = false ; private Hashtable fRegistry ; private boolean fRegistryExpanded = false ; public DatatypeValidatorFactoryImpl ( ) { } public void initializeDTDRegistry ( ) { if ( fRegistry == null ) { fRegistry = new Hashtable ( ) ; fRegistryExpanded = false ; } if ( fRegistryExpanded == false ) { try { fRegistry . put ( "string" , new StringDatatypeValidator ( ) ) ; fRegistry . put ( "ID" , new IDDatatypeValidator ( ) ) ; fRegistry . put ( "IDREF" , new IDREFDatatypeValidator ( ) ) ; fRegistry . put ( "ENTITY" , new ENTITYDatatypeValidator ( ) ) ; fRegistry . put ( "NOTATION" , new NOTATIONDatatypeValidator ( ) ) ; createDatatypeValidator ( "IDREFS" , new IDREFDatatypeValidator ( ) , null , true ) ; createDatatypeValidator ( "ENTITIES" , new ENTITYDatatypeValidator ( ) , null , true ) ; Hashtable facets = new Hashtable ( ) ; facets . put ( SchemaSymbols . ELT_PATTERN , "\\c+" ) ; createDatatypeValidator ( "NMTOKEN" , new StringDatatypeValidator ( ) , facets , false ) ; createDatatypeValidator ( "NMTOKENS" , getDatatypeValidator ( "NMTOKEN" ) , null , true ) ; } catch ( InvalidDatatypeFacetException ex ) { ex . printStackTrace ( ) ; } } } public void expandRegistryToFullSchemaSet ( ) { if ( fRegistry == null ) { fRegistry = new Hashtable ( ) ; fRegistryExpanded = false ; } if ( fRegistryExpanded == false ) { DatatypeValidator v ; try { fRegistry . put ( "boolean" , new BooleanDatatypeValidator ( ) ) ; fRegistry . put ( "float" , new FloatDatatypeValidator ( ) ) ; fRegistry . put ( "double" , new DoubleDatatypeValidator ( ) ) ; fRegistry . put ( "decimal" , new DecimalDatatypeValidator ( ) ) ; fRegistry . put ( "timeDuration" , new TimeDurationDatatypeValidator ( ) ) ; fRegistry . put ( "recurringDuration" , new RecurringDurationDatatypeValidator ( ) ) ; fRegistry . put ( "binary" , new BinaryDatatypeValidator ( ) ) ; fRegistry . put ( "uriReference" , new URIReferenceDatatypeValidator ( ) ) ; fRegistry . put ( "QName" , new QNameDatatypeValidator ( ) ) ; if ( fRegistry . get ( "IDREF" ) == null ) { initializeDTDRegistry ( ) ; } Hashtable facets = new Hashtable ( ) ; facets . put ( SchemaSymbols . ELT_PATTERN , "([a-zA-Z]{2}|[iI]-[a-zA-Z]+|[xX]-[a-zA-Z]+)(-[a-zA-Z]+)*" ) ; createDatatypeValidator ( "language" , new StringDatatypeValidator ( ) , facets , false ) ; facets = new Hashtable ( ) ; facets . put ( SchemaSymbols . ELT_PATTERN , "\\i\\c*" ) ; createDatatypeValidator ( "Name" , new StringDatatypeValidator ( ) , facets , false ) ; facets = new Hashtable ( ) ; facets . put ( SchemaSymbols . ELT_PATTERN , "[\\i-[:]][\\c-[:]]*" ) ; createDatatypeValidator ( "NCName" , new StringDatatypeValidator ( ) , facets , false ) ; facets = new Hashtable ( ) ; facets . put ( SchemaSymbols . ELT_SCALE , "0" ) ; createDatatypeValidator ( "integer" , new DecimalDatatypeValidator ( ) , facets , false ) ; facets = new Hashtable ( ) ; facets . put ( SchemaSymbols . ELT_MAXINCLUSIVE , "0" ) ; createDatatypeValidator ( "nonPositiveInteger" , getDatatypeValidator ( "integer" ) , facets , false ) ; facets = new Hashtable ( ) ; facets . put ( SchemaSymbols . ELT_MAXINCLUSIVE , "-1" ) ; createDatatypeValidator ( "negativeInteger" , getDatatypeValidator ( "nonPositiveInteger" ) , facets , false ) ; facets = new Hashtable ( ) ; facets . put ( SchemaSymbols . ELT_MAXINCLUSIVE , "9223372036854775807" ) ; facets . put ( SchemaSymbols . ELT_MININCLUSIVE , "-9223372036854775808" ) ; createDatatypeValidator ( "long" , getDatatypeValidator ( "integer" ) , facets , false ) ; facets = new Hashtable ( ) ; facets . put ( SchemaSymbols . ELT_MAXINCLUSIVE , "2147483647" ) ; facets . put ( SchemaSymbols . ELT_MININCLUSIVE , "-2147483648" ) ; createDatatypeValidator ( "int" , getDatatypeValidator ( "long" ) , facets , false ) ; facets = new Hashtable ( ) ; facets . put ( SchemaSymbols . ELT_MAXINCLUSIVE , "32767" ) ; facets . put ( SchemaSymbols . ELT_MININCLUSIVE , "-32768" ) ; createDatatypeValidator ( "short" , getDatatypeValidator ( "int" ) , facets , false ) ; facets = new Hashtable ( ) ; facets . put ( SchemaSymbols . ELT_MAXINCLUSIVE , "127" ) ; facets . put ( SchemaSymbols . ELT_MININCLUSIVE , "-128" ) ; createDatatypeValidator ( "byte" , getDatatypeValidator ( "short" ) , facets , false ) ; facets = new Hashtable ( ) ; facets . put ( SchemaSymbols . ELT_MININCLUSIVE , "0" ) ; createDatatypeValidator ( "nonNegativeInteger" , getDatatypeValidator ( "integer" ) , facets , false ) ; facets = new Hashtable ( ) ; facets . put ( SchemaSymbols . ELT_MAXINCLUSIVE , "18446744073709551615" ) ; createDatatypeValidator ( "unsignedLong" , getDatatypeValidator ( "nonNegativeInteger" ) , facets , false ) ; facets = new Hashtable ( ) ; facets . put ( SchemaSymbols . ELT_MAXINCLUSIVE , "4294967295" ) ; createDatatypeValidator ( "unsignedInt" , getDatatypeValidator ( "unsignedLong" ) , facets , false ) ; facets = new Hashtable ( ) ; facets . put ( SchemaSymbols . ELT_MAXINCLUSIVE , "65535" ) ; createDatatypeValidator ( "unsignedShort" , getDatatypeValidator ( "unsignedInt" ) , facets , false ) ; facets = new Hashtable ( ) ; facets . put ( SchemaSymbols . ELT_MAXINCLUSIVE , "255" ) ; createDatatypeValidator ( "unsignedByte" , getDatatypeValidator ( "unsignedShort" ) , facets , false ) ; facets = new Hashtable ( ) ; facets . put ( SchemaSymbols . ELT_MININCLUSIVE , "1" ) ; createDatatypeValidator ( "positiveInteger" , getDatatypeValidator ( "nonNegativeInteger" ) , facets , false ) ; facets = new Hashtable ( ) ; facets . put ( SchemaSymbols . ELT_DURATION , "P0Y" ) ; facets . put ( SchemaSymbols . ELT_PERIOD , "P0Y" ) ; createDatatypeValidator ( "timeInstant" , getDatatypeValidator ( "recurringDuration" ) , facets , false ) ; facets = new Hashtable ( ) ; facets . put ( SchemaSymbols . ELT_DURATION , "P0Y" ) ; createDatatypeValidator ( "time" , getDatatypeValidator ( "recurringDuration" ) , facets , false ) ; facets = new Hashtable ( ) ; facets . put ( SchemaSymbols . ELT_PERIOD , "P0Y" ) ; createDatatypeValidator ( "timePeriod" , getDatatypeValidator ( "recurringDuration" ) , facets , false ) ; facets = new Hashtable ( ) ; facets . put ( SchemaSymbols . ELT_DURATION , "PT24H" ) ; createDatatypeValidator ( "date" , getDatatypeValidator ( "timePeriod" ) , facets , false ) ; facets = new Hashtable ( ) ; facets . put ( SchemaSymbols . ELT_DURATION , "P1M" ) ; createDatatypeValidator ( "month" , getDatatypeValidator ( "timePeriod" ) , facets , false ) ; facets = new Hashtable ( ) ; facets . put ( SchemaSymbols . ELT_DURATION , "P1Y" ) ; createDatatypeValidator ( "year" , getDatatypeValidator ( "timePeriod" ) , facets , false ) ; facets = new Hashtable ( ) ; facets . put ( SchemaSymbols . ELT_DURATION , "P100Y" ) ; createDatatypeValidator ( "century" , getDatatypeValidator ( "timePeriod" ) , facets , false ) ; facets = new Hashtable ( ) ; facets . put ( SchemaSymbols . ELT_PERIOD , "P1Y" ) ; facets . put ( SchemaSymbols . ELT_DURATION , "PT24H" ) ; createDatatypeValidator ( "recurringDate" , getDatatypeValidator ( "recurringDuration" ) , facets , false ) ; fRegistryExpanded = true ; } catch ( InvalidDatatypeFacetException ex ) { ex . printStackTrace ( ) ; } } } public void resetRegistry ( ) { if ( fRegistry != null ) { fRegistry . clear ( ) ; fRegistryExpanded = false ; } } public DatatypeValidator createDatatypeValidator ( String typeName , DatatypeValidator base , Hashtable facets , boolean list ) throws InvalidDatatypeFacetException { DatatypeValidator simpleType = null ; if ( this . fDebug == true ) { System . out . println ( "type name = " + typeName ) ; } if ( base != null ) { if ( list ) { simpleType = new ListDatatypeValidator ( base , facets , list ) ; } else { try { Class validatorDef = base . getClass ( ) ; Class [ ] validatorArgsClass = new Class [ ] { org . apache . xerces . validators . datatype . DatatypeValidator . class , java . util . Hashtable . class , boolean . class } ; Object [ ] validatorArgs = new Object [ ] { base , facets , Boolean . FALSE } ; Constructor validatorConstructor = validatorDef . getConstructor ( validatorArgsClass ) ; simpleType = ( DatatypeValidator ) createDatatypeValidator ( validatorConstructor , validatorArgs ) ; } catch ( NoSuchMethodException e ) { e . printStackTrace ( ) ; } } if ( simpleType != null ) { addValidator ( typeName , simpleType ) ; } } return simpleType ; } private static Object createDatatypeValidator ( Constructor validatorConstructor , Object [ ] arguments ) throws InvalidDatatypeFacetException { Object validator = null ; try { validator = validatorConstructor . newInstance ( arguments ) ; return validator ; } catch ( InstantiationException e ) { if ( fDebug ) { e . printStackTrace ( ) ; } else { return null ; } } catch ( IllegalAccessException e ) { if ( fDebug ) { e . printStackTrace ( ) ; } else { return null ; } } catch ( IllegalArgumentException e ) { if ( fDebug ) { e . printStackTrace ( ) ; } else { return null ; } } catch ( InvocationTargetException e ) { if ( fDebug ) { System . out . println ( "!! The original error message is: " + e . getTargetException ( ) . getMessage ( ) ) ; e . getTargetException ( ) . printStackTrace ( ) ; } else { throw new InvalidDatatypeFacetException ( e . getTargetException ( ) . getMessage ( ) ) ; } } return validator ; } public DatatypeValidator createDatatypeValidator ( String typeName , Vector validators ) { DatatypeValidator simpleType = null ; if ( validators != null ) { simpleType = new UnionDatatypeValidator ( validators ) ; } if ( simpleType != null ) { addValidator ( typeName , simpleType ) ; } return simpleType ; } public DatatypeValidator getDatatypeValidator ( String type ) { AbstractDatatypeValidator simpleType = null ; if ( fDebug ) { System . out . println ( "type = >" + type + "<" ) ; System . out . println ( "fRegistry = >" + fRegistry + "<" ) ; simpleType = ( AbstractDatatypeValidator ) fRegistry . get ( type ) ; } if ( type != null && fRegistry != null && fRegistry . containsKey ( type ) == true ) { simpleType = ( AbstractDatatypeValidator ) fRegistry . get ( type ) ; } return ( DatatypeValidator ) simpleType ; } private void addValidator ( String name , DatatypeValidator v ) { fRegistry . put ( name , v ) ; } } 	1	['10', '1', '0', '24', '47', '19', '4', '20', '7', '0.733333333', '875', '0.6', '0', '0', '0.25', '0', '0', '86', '4', '2', '5']
package org . apache . xerces . readers ; import org . apache . xerces . framework . XMLErrorReporter ; import org . apache . xerces . utils . ChunkyByteArray ; import org . apache . xerces . utils . QName ; import org . apache . xerces . utils . StringPool ; import java . io . InputStreamReader ; import java . io . IOException ; import java . io . UnsupportedEncodingException ; final class UTF8Recognizer extends XMLDeclRecognizer { private byte [ ] fUTF8BOM = { ( byte ) 0xEF , ( byte ) 0xBB , ( byte ) 0xBF } ; public XMLEntityHandler . EntityReader recognize ( XMLEntityReaderFactory readerFactory , XMLEntityHandler entityHandler , XMLErrorReporter errorReporter , boolean sendCharDataAsCharArray , StringPool stringPool , ChunkyByteArray data , boolean xmlDecl , boolean allowJavaEncodingName ) throws Exception { XMLEntityHandler . EntityReader reader = null ; boolean seeBOM = false ; byte bom0 = data . byteAt ( 0 ) ; if ( bom0 == fUTF8BOM [ 0 ] ) { byte bom1 = data . byteAt ( 1 ) ; if ( bom1 == fUTF8BOM [ 1 ] ) { byte bom2 = data . byteAt ( 2 ) ; if ( bom2 == fUTF8BOM [ 2 ] ) { seeBOM = true ; } } } if ( seeBOM ) { data . read ( fUTF8BOM , 0 , 3 ) ; } byte b0 = data . byteAt ( 0 ) ; boolean debug = false ; if ( b0 == '<' ) { int b1 = data . byteAt ( 1 ) ; if ( b1 == '?' ) { if ( data . byteAt ( 2 ) == 'x' && data . byteAt ( 3 ) == 'm' && data . byteAt ( 4 ) == 'l' ) { int b5 = data . byteAt ( 5 ) ; if ( b5 == 0x20 || b5 == 0x09 || b5 == 0x0a || b5 == 0x0d ) { XMLEntityHandler . EntityReader declReader = new XMLDeclReader ( entityHandler , errorReporter , sendCharDataAsCharArray , data , stringPool ) ; int encoding = prescanXMLDeclOrTextDecl ( declReader , xmlDecl ) ; if ( encoding != - 1 ) { String encname = stringPool . orphanString ( encoding ) ; String enc = encname . toUpperCase ( ) ; if ( "ISO-10646-UCS-2" . equals ( enc ) ) throw new UnsupportedEncodingException ( encname ) ; if ( "ISO-10646-UCS-4" . equals ( enc ) ) throw new UnsupportedEncodingException ( encname ) ; if ( "UTF-16" . equals ( enc ) ) throw new UnsupportedEncodingException ( encname ) ; String javaencname = MIME2Java . convert ( enc ) ; if ( null == javaencname ) { if ( allowJavaEncodingName ) { javaencname = encname ; } else { throw new UnsupportedEncodingException ( encname ) ; } } try { data . rewind ( ) ; if ( "UTF-8" . equalsIgnoreCase ( javaencname ) || "UTF8" . equalsIgnoreCase ( javaencname ) ) { reader = readerFactory . createUTF8Reader ( entityHandler , errorReporter , sendCharDataAsCharArray , data , stringPool ) ; } else { reader = readerFactory . createCharReader ( entityHandler , errorReporter , sendCharDataAsCharArray , new InputStreamReader ( data , javaencname ) , stringPool ) ; } } catch ( UnsupportedEncodingException e ) { throw new UnsupportedEncodingException ( encname ) ; } catch ( Exception e ) { if ( debug == true ) e . printStackTrace ( ) ; } } else { data . rewind ( ) ; reader = readerFactory . createUTF8Reader ( entityHandler , errorReporter , sendCharDataAsCharArray , data , stringPool ) ; } } } } } return reader ; } final class XMLDeclReader extends XMLEntityReader { private StringPool fStringPool = null ; private ChunkyByteArray fData = null ; XMLDeclReader ( XMLEntityHandler entityHandler , XMLErrorReporter errorReporter , boolean sendCharDataAsCharArray , ChunkyByteArray data , StringPool stringPool ) { super ( entityHandler , errorReporter , sendCharDataAsCharArray ) ; fStringPool = stringPool ; fData = data ; } public boolean lookingAtChar ( char ch , boolean skipPastChar ) throws IOException { if ( fData . byteAt ( fCurrentOffset ) != ch ) return false ; if ( skipPastChar ) fCurrentOffset ++ ; return true ; } public boolean lookingAtSpace ( boolean skipPastChar ) throws IOException { int ch = fData . byteAt ( fCurrentOffset ) & 0xff ; if ( ch != 0x20 && ch != 0x09 && ch != 0x0A && ch != 0x0D ) return false ; if ( skipPastChar ) fCurrentOffset ++ ; return true ; } public void skipPastSpaces ( ) throws IOException { while ( true ) { int ch = fData . byteAt ( fCurrentOffset ) & 0xff ; if ( ch != 0x20 && ch != 0x09 && ch != 0x0A && ch != 0x0D ) return ; fCurrentOffset ++ ; } } public boolean skippedString ( char [ ] s ) throws IOException { int offset = fCurrentOffset ; for ( int i = 0 ; i < s . length ; i ++ ) { if ( fData . byteAt ( offset ) != s [ i ] ) return false ; offset ++ ; } fCurrentOffset = offset ; return true ; } public int scanStringLiteral ( ) throws Exception { boolean single ; if ( ! ( single = lookingAtChar ( '\'' , true ) ) && ! lookingAtChar ( '\"' , true ) ) { return XMLEntityHandler . STRINGLIT_RESULT_QUOTE_REQUIRED ; } int offset = fCurrentOffset ; char qchar = single ? '\'' : '\"' ; while ( true ) { byte b = fData . byteAt ( fCurrentOffset ) ; if ( b == qchar ) break ; if ( b == - 1 ) return XMLEntityHandler . STRINGLIT_RESULT_QUOTE_REQUIRED ; fCurrentOffset ++ ; } int length = fCurrentOffset - offset ; StringBuffer str = new StringBuffer ( length ) ; for ( int i = 0 ; i < length ; i ++ ) { str . append ( ( char ) fData . byteAt ( offset + i ) ) ; } int stringIndex = fStringPool . addString ( str . toString ( ) ) ; fCurrentOffset ++ ; return stringIndex ; } public void append ( XMLEntityHandler . CharBuffer charBuffer , int offset , int length ) { throw new RuntimeException ( "RDR002 cannot happen" ) ; } public int addString ( int offset , int length ) { throw new RuntimeException ( "RDR002 cannot happen" ) ; } public int addSymbol ( int offset , int length ) { throw new RuntimeException ( "RDR002 cannot happen" ) ; } public void skipToChar ( char ch ) throws IOException { throw new IOException ( "RDR002 cannot happen" ) ; } public void skipPastName ( char fastcheck ) throws IOException { throw new IOException ( "RDR002 cannot happen" ) ; } public void skipPastNmtoken ( char fastcheck ) throws IOException { throw new IOException ( "RDR002 cannot happen" ) ; } public boolean lookingAtValidChar ( boolean skipPastChar ) throws IOException { throw new IOException ( "RDR002 cannot happen" ) ; } public int scanInvalidChar ( ) throws IOException { throw new IOException ( "RDR002 cannot happen" ) ; } public int scanCharRef ( boolean hex ) throws IOException { throw new IOException ( "RDR002 cannot happen" ) ; } public int scanAttValue ( char qchar , boolean asSymbol ) throws IOException { throw new IOException ( "RDR002 cannot happen" ) ; } public int scanEntityValue ( int qchar , boolean createString ) throws IOException { throw new IOException ( "RDR002 cannot happen" ) ; } public boolean scanExpectedName ( char fastcheck , StringPool . CharArrayRange expectedName ) throws IOException { throw new IOException ( "RDR002 cannot happen" ) ; } public void scanQName ( char fastcheck , QName qname ) throws IOException { throw new IOException ( "RDR002 cannot happen" ) ; } public int scanName ( char fastcheck ) throws IOException { throw new IOException ( "RDR002 cannot happen" ) ; } public int scanContent ( QName element ) throws IOException { throw new IOException ( "RDR002 cannot happen" ) ; } } } 	0	['2', '2', '0', '9', '18', '0', '2', '9', '1', '0', '239', '1', '0', '0.75', '0.571428571', '2', '2', '118', '1', '0.5', '0']
package org . apache . xerces . dom ; import org . w3c . dom . * ; public class DeferredProcessingInstructionImpl extends ProcessingInstructionImpl implements DeferredNode { static final long serialVersionUID = - 4643577954293565388L ; protected transient int fNodeIndex ; DeferredProcessingInstructionImpl ( DeferredDocumentImpl ownerDocument , int nodeIndex ) { super ( ownerDocument , null , null ) ; fNodeIndex = nodeIndex ; needsSyncData ( true ) ; } public int getNodeIndex ( ) { return fNodeIndex ; } protected void synchronizeData ( ) { needsSyncData ( false ) ; DeferredDocumentImpl ownerDocument = ( DeferredDocumentImpl ) this . ownerDocument ( ) ; target = ownerDocument . getNodeNameString ( fNodeIndex ) ; data = ownerDocument . getNodeValueString ( fNodeIndex ) ; } } 	1	['3', '3', '0', '4', '8', '0', '1', '4', '1', '0.75', '40', '0.5', '0', '0.960784314', '0.555555556', '2', '7', '11.66666667', '1', '0.6667', '2']
package org . apache . html . dom ; import org . w3c . dom . * ; import org . w3c . dom . html . * ; public class HTMLIsIndexElementImpl extends HTMLElementImpl implements HTMLIsIndexElement { public String getPrompt ( ) { return getAttribute ( "prompt" ) ; } public void setPrompt ( String prompt ) { setAttribute ( "prompt" , prompt ) ; } public HTMLIsIndexElementImpl ( HTMLDocumentImpl owner , String name ) { super ( owner , name ) ; } } 	0	['3', '4', '0', '2', '6', '3', '0', '2', '3', '2', '17', '0', '0', '0.979166667', '0.666666667', '0', '0', '4.666666667', '1', '0.6667', '0']
package org . apache . xerces . dom ; import org . w3c . dom . * ; public class EntityImpl extends ParentNode implements Entity { static final long serialVersionUID = - 3575760943444303423L ; protected String name ; protected String publicId ; protected String systemId ; protected String notationName ; public EntityImpl ( DocumentImpl ownerDoc , String name ) { super ( ownerDoc ) ; this . name = name ; isReadOnly ( true ) ; } public short getNodeType ( ) { return Node . ENTITY_NODE ; } public String getNodeName ( ) { if ( needsSyncData ( ) ) { synchronizeData ( ) ; } return name ; } public Node cloneNode ( boolean deep ) { EntityImpl newentity = ( EntityImpl ) super . cloneNode ( deep ) ; return newentity ; } public String getPublicId ( ) { if ( needsSyncData ( ) ) { synchronizeData ( ) ; } return publicId ; } public String getSystemId ( ) { if ( needsSyncData ( ) ) { synchronizeData ( ) ; } return systemId ; } public String getNotationName ( ) { if ( needsSyncData ( ) ) { synchronizeData ( ) ; } return notationName ; } public void setPublicId ( String id ) { if ( needsSyncData ( ) ) { synchronizeData ( ) ; } publicId = id ; } public void setSystemId ( String id ) { if ( needsSyncData ( ) ) { synchronizeData ( ) ; } systemId = id ; } public void setNotationName ( String name ) { if ( needsSyncData ( ) ) { synchronizeData ( ) ; } notationName = name ; } } 	1	['10', '4', '1', '5', '15', '37', '4', '2', '10', '0.933333333', '93', '0.8', '0', '0.897727273', '0.4', '2', '6', '7.8', '2', '1.6', '1']
package org . w3c . dom . html ; public interface HTMLBodyElement extends HTMLElement { public String getALink ( ) ; public void setALink ( String aLink ) ; public String getBackground ( ) ; public void setBackground ( String background ) ; public String getBgColor ( ) ; public void setBgColor ( String bgColor ) ; public String getLink ( ) ; public void setLink ( String link ) ; public String getText ( ) ; public void setText ( String text ) ; public String getVLink ( ) ; public void setVLink ( String vLink ) ; } 	0	['12', '1', '0', '0', '12', '66', '0', '0', '12', '2', '12', '0', '0', '0', '0.75', '0', '0', '0', '1', '1', '0']
package org . apache . xerces . validators . schema . identity ; import org . xml . sax . SAXException ; public interface ValueStore { public void addValue ( Field field , String value ) throws Exception ; } 	1	['1', '1', '0', '4', '1', '0', '4', '1', '1', '2', '1', '0', '0', '0', '1', '0', '0', '0', '1', '1', '1']
package org . apache . xerces . validators . datatype ; import java . util . Hashtable ; import java . util . Vector ; import java . util . Enumeration ; import java . util . Locale ; import java . text . Collator ; import java . util . Enumeration ; import java . util . StringTokenizer ; import java . util . NoSuchElementException ; import org . apache . xerces . validators . schema . SchemaSymbols ; import org . apache . xerces . utils . regex . RegularExpression ; public class ListDatatypeValidator extends AbstractDatatypeValidator { private Locale fLocale = null ; DatatypeValidator fBaseValidator = null ; private int fLength = 0 ; private int fMaxLength = Integer . MAX_VALUE ; private int fMinLength = 0 ; private String fPattern = null ; private Vector fEnumeration = null ; private int fFacetsDefined = 0 ; private boolean fDerivedByList = false ; private RegularExpression fRegex = null ; public ListDatatypeValidator ( ) throws InvalidDatatypeFacetException { this ( null , null , false ) ; } public ListDatatypeValidator ( DatatypeValidator base , Hashtable facets , boolean derivedByList ) throws InvalidDatatypeFacetException { setBasetype ( base ) ; fDerivedByList = derivedByList ; if ( facets != null ) { for ( Enumeration e = facets . keys ( ) ; e . hasMoreElements ( ) ; ) { String key = ( String ) e . nextElement ( ) ; if ( key . equals ( SchemaSymbols . ELT_LENGTH ) ) { fFacetsDefined += DatatypeValidator . FACET_LENGTH ; String lengthValue = ( String ) facets . get ( key ) ; try { fLength = Integer . parseInt ( lengthValue ) ; } catch ( NumberFormatException nfe ) { throw new InvalidDatatypeFacetException ( "Length value '" + lengthValue + "' is invalid." ) ; } if ( fLength < 0 ) throw new InvalidDatatypeFacetException ( "Length value '" + lengthValue + "'  must be a nonNegativeInteger." ) ; } else if ( key . equals ( SchemaSymbols . ELT_MINLENGTH ) ) { fFacetsDefined += DatatypeValidator . FACET_MINLENGTH ; String minLengthValue = ( String ) facets . get ( key ) ; try { fMinLength = Integer . parseInt ( minLengthValue ) ; } catch ( NumberFormatException nfe ) { throw new InvalidDatatypeFacetException ( "maxLength value '" + minLengthValue + "' is invalid." ) ; } } else if ( key . equals ( SchemaSymbols . ELT_MAXLENGTH ) ) { fFacetsDefined += DatatypeValidator . FACET_MAXLENGTH ; String maxLengthValue = ( String ) facets . get ( key ) ; try { fMaxLength = Integer . parseInt ( maxLengthValue ) ; } catch ( NumberFormatException nfe ) { throw new InvalidDatatypeFacetException ( "maxLength value '" + maxLengthValue + "' is invalid." ) ; } } else if ( key . equals ( SchemaSymbols . ELT_ENUMERATION ) ) { fFacetsDefined += DatatypeValidator . FACET_ENUMERATION ; fEnumeration = ( Vector ) facets . get ( key ) ; } else { throw new InvalidDatatypeFacetException ( "invalid facet tag : " + key ) ; } } if ( ( ( fFacetsDefined & DatatypeValidator . FACET_LENGTH ) != 0 ) ) { if ( ( ( fFacetsDefined & DatatypeValidator . FACET_MAXLENGTH ) != 0 ) ) { throw new InvalidDatatypeFacetException ( "It is an error for both length and maxLength to be members of facets." ) ; } else if ( ( ( fFacetsDefined & DatatypeValidator . FACET_MINLENGTH ) != 0 ) ) { throw new InvalidDatatypeFacetException ( "It is an error for both length and minLength to be members of facets." ) ; } } if ( ( ( fFacetsDefined & ( DatatypeValidator . FACET_MINLENGTH | DatatypeValidator . FACET_MAXLENGTH ) ) != 0 ) ) { if ( fMinLength > fMaxLength ) { throw new InvalidDatatypeFacetException ( "Value of minLength = " + fMinLength + "must be greater that the value of maxLength" + fMaxLength ) ; } } } } public Object validate ( String content , Object state ) throws InvalidDatatypeValueException { if ( content == null && state != null ) { this . fBaseValidator . validate ( content , state ) ; } else { checkContentEnum ( content , state , null ) ; } return null ; } public void setLocale ( Locale locale ) { fLocale = locale ; } public Hashtable getFacets ( ) { return null ; } public int compare ( String content , String facetValue ) { return 0 ; } public Object clone ( ) throws CloneNotSupportedException { ListDatatypeValidator newObj = null ; try { newObj = new ListDatatypeValidator ( ) ; newObj . fLocale = this . fLocale ; newObj . fBaseValidator = this . fBaseValidator ; newObj . fLength = this . fLength ; newObj . fMaxLength = this . fMaxLength ; newObj . fMinLength = this . fMinLength ; newObj . fPattern = this . fPattern ; newObj . fEnumeration = this . fEnumeration ; newObj . fFacetsDefined = this . fFacetsDefined ; newObj . fDerivedByList = this . fDerivedByList ; } catch ( InvalidDatatypeFacetException ex ) { ex . printStackTrace ( ) ; } return newObj ; } protected void checkContentEnum ( String content , Object state , Vector enumeration ) throws InvalidDatatypeValueException { StringTokenizer parsedList = null ; int numberOfTokens = 0 ; parsedList = new StringTokenizer ( content ) ; numberOfTokens = parsedList . countTokens ( ) ; if ( ! this . fDerivedByList ) { try { if ( ( fFacetsDefined & DatatypeValidator . FACET_MAXLENGTH ) != 0 ) { if ( numberOfTokens > fMaxLength ) { throw new InvalidDatatypeValueException ( "Value '" + content + "' with length ='" + numberOfTokens + "' tokens" + "' exceeds maximum length facet of '" + fMaxLength + "' tokens." ) ; } } if ( ( fFacetsDefined & DatatypeValidator . FACET_MINLENGTH ) != 0 ) { if ( numberOfTokens < fMinLength ) { throw new InvalidDatatypeValueException ( "Value '" + content + "' with length ='" + numberOfTokens + "' tokens" + "' is less than minimum length facet of '" + fMinLength + "' tokens." ) ; } } if ( ( fFacetsDefined & DatatypeValidator . FACET_LENGTH ) != 0 ) { if ( numberOfTokens != fLength ) { throw new InvalidDatatypeValueException ( "Value '" + content + "' with length ='" + numberOfTokens + "' tokens" + "' is not equal to length facet of '" + fLength + "' tokens." ) ; } } if ( enumeration != null ) { if ( ! verifyEnum ( enumeration ) ) { throw new InvalidDatatypeValueException ( "Enumeration '" + enumeration + "' for value '" + content + "' is based on enumeration '" + fEnumeration + "'" ) ; } } else { enumeration = ( fEnumeration != null ) ? fEnumeration : null ; } ( ( ListDatatypeValidator ) this . fBaseValidator ) . checkContentEnum ( content , state , enumeration ) ; } catch ( NoSuchElementException e ) { e . printStackTrace ( ) ; } } else { if ( enumeration != null ) { StringTokenizer eTokens = null ; StringTokenizer cTokens = null ; String token = null ; String eToken = null ; boolean valid = true ; int eSize = enumeration . size ( ) ; Vector enumTemp = new Vector ( ) ; enumTemp . setSize ( 1 ) ; String currentEnumeration = null ; for ( int i = 0 ; i < eSize ; i ++ ) { currentEnumeration = ( String ) enumeration . elementAt ( i ) ; eTokens = new StringTokenizer ( currentEnumeration ) ; valid = true ; cTokens = parsedList ; if ( numberOfTokens == eTokens . countTokens ( ) ) { try { if ( currentEnumeration . equals ( content ) ) { for ( int k = 0 ; k < numberOfTokens ; k ++ ) { if ( this . fBaseValidator != null ) { this . fBaseValidator . validate ( cTokens . nextToken ( ) , state ) ; } } } else { for ( int j = 0 ; j < numberOfTokens ; j ++ ) { token = cTokens . nextToken ( ) ; eToken = eTokens . nextToken ( ) ; enumTemp . setElementAt ( eToken , 0 ) ; if ( fBaseValidator instanceof DecimalDatatypeValidator ) { ( ( DecimalDatatypeValidator ) fBaseValidator ) . checkContentEnum ( token , state , enumTemp ) ; } else if ( fBaseValidator instanceof FloatDatatypeValidator ) { ( ( FloatDatatypeValidator ) fBaseValidator ) . checkContentEnum ( token , state , enumTemp ) ; } else if ( fBaseValidator instanceof DoubleDatatypeValidator ) { ( ( DoubleDatatypeValidator ) fBaseValidator ) . checkContentEnum ( token , state , enumTemp ) ; } else { if ( ! token . equals ( eToken ) ) { throw new InvalidDatatypeValueException ( "Value '" + content + "' must be one of " + enumeration ) ; } this . fBaseValidator . validate ( token , state ) ; } } } } catch ( InvalidDatatypeValueException e ) { valid = false ; } } else valid = false ; if ( valid ) break ; } if ( ! valid ) { throw new InvalidDatatypeValueException ( "Value '" + content + "' does not match list type" ) ; } } else { for ( int k = 0 ; k < numberOfTokens ; k ++ ) { if ( this . fBaseValidator != null ) { this . fBaseValidator . validate ( parsedList . nextToken ( ) , state ) ; } } } } } private boolean verifyEnum ( Vector enum ) { if ( ( fFacetsDefined & DatatypeValidator . FACET_ENUMERATION ) != 0 ) { for ( Enumeration e = enum . elements ( ) ; e . hasMoreElements ( ) ; ) { if ( fEnumeration . contains ( e . nextElement ( ) ) == false ) { return false ; } } } return true ; } private void setBasetype ( DatatypeValidator base ) { fBaseValidator = base ; } } 	0	['10', '2', '0', '10', '40', '15', '2', '8', '7', '0.577777778', '745', '0.9', '2', '0.333333333', '0.275', '0', '0', '72.5', '4', '1.1', '0']
package org . apache . xerces . validators . datatype ; import java . util . Hashtable ; import java . util . Vector ; import java . util . Enumeration ; import java . util . Locale ; import java . text . ParseException ; import java . text . Collator ; import java . util . StringTokenizer ; import java . util . NoSuchElementException ; import org . apache . xerces . validators . schema . SchemaSymbols ; import org . apache . xerces . utils . regex . RegularExpression ; public class QNameDatatypeValidator extends AbstractDatatypeValidator { private Locale fLocale = null ; private DatatypeValidator fBaseValidator = null ; private int fLength = 0 ; private int fMaxLength = Integer . MAX_VALUE ; private int fMinLength = 0 ; private String fPattern = null ; private Vector fEnumeration = null ; private String fMaxInclusive = null ; private String fMaxExclusive = null ; private String fMinInclusive = null ; private String fMinExclusive = null ; private int fFacetsDefined = 0 ; private boolean isMaxExclusiveDefined = false ; private boolean isMaxInclusiveDefined = false ; private boolean isMinExclusiveDefined = false ; private boolean isMinInclusiveDefined = false ; private RegularExpression fRegex = null ; public QNameDatatypeValidator ( ) throws InvalidDatatypeFacetException { this ( null , null , false ) ; } public QNameDatatypeValidator ( DatatypeValidator base , Hashtable facets , boolean derivedByList ) throws InvalidDatatypeFacetException { setBasetype ( base ) ; if ( facets != null ) { for ( Enumeration e = facets . keys ( ) ; e . hasMoreElements ( ) ; ) { String key = ( String ) e . nextElement ( ) ; if ( key . equals ( SchemaSymbols . ELT_LENGTH ) ) { fFacetsDefined += DatatypeValidator . FACET_LENGTH ; String lengthValue = ( String ) facets . get ( key ) ; try { fLength = Integer . parseInt ( lengthValue ) ; } catch ( NumberFormatException nfe ) { throw new InvalidDatatypeFacetException ( "Length value '" + lengthValue + "' is invalid." ) ; } if ( fLength < 0 ) throw new InvalidDatatypeFacetException ( "Length value '" + lengthValue + "'  must be a nonNegativeInteger." ) ; } else if ( key . equals ( SchemaSymbols . ELT_MINLENGTH ) ) { fFacetsDefined += DatatypeValidator . FACET_MINLENGTH ; String minLengthValue = ( String ) facets . get ( key ) ; try { fMinLength = Integer . parseInt ( minLengthValue ) ; } catch ( NumberFormatException nfe ) { throw new InvalidDatatypeFacetException ( "maxLength value '" + minLengthValue + "' is invalid." ) ; } } else if ( key . equals ( SchemaSymbols . ELT_MAXLENGTH ) ) { fFacetsDefined += DatatypeValidator . FACET_MAXLENGTH ; String maxLengthValue = ( String ) facets . get ( key ) ; try { fMaxLength = Integer . parseInt ( maxLengthValue ) ; } catch ( NumberFormatException nfe ) { throw new InvalidDatatypeFacetException ( "maxLength value '" + maxLengthValue + "' is invalid." ) ; } } else if ( key . equals ( SchemaSymbols . ELT_PATTERN ) ) { fFacetsDefined += DatatypeValidator . FACET_PATTERN ; fPattern = ( String ) facets . get ( key ) ; fRegex = new RegularExpression ( fPattern , "X" ) ; } else if ( key . equals ( SchemaSymbols . ELT_ENUMERATION ) ) { fFacetsDefined += DatatypeValidator . FACET_ENUMERATION ; fEnumeration = ( Vector ) facets . get ( key ) ; } else if ( key . equals ( SchemaSymbols . ELT_MAXINCLUSIVE ) ) { fFacetsDefined += DatatypeValidator . FACET_MAXINCLUSIVE ; fMaxInclusive = ( String ) facets . get ( key ) ; } else if ( key . equals ( SchemaSymbols . ELT_MAXEXCLUSIVE ) ) { fFacetsDefined += DatatypeValidator . FACET_MAXEXCLUSIVE ; fMaxExclusive = ( String ) facets . get ( key ) ; } else if ( key . equals ( SchemaSymbols . ELT_MININCLUSIVE ) ) { fFacetsDefined += DatatypeValidator . FACET_MININCLUSIVE ; fMinInclusive = ( String ) facets . get ( key ) ; } else if ( key . equals ( SchemaSymbols . ELT_MINEXCLUSIVE ) ) { fFacetsDefined += DatatypeValidator . FACET_MINEXCLUSIVE ; fMinExclusive = ( String ) facets . get ( key ) ; } else { throw new InvalidDatatypeFacetException ( ) ; } } if ( ( ( fFacetsDefined & DatatypeValidator . FACET_LENGTH ) != 0 ) ) { if ( ( ( fFacetsDefined & DatatypeValidator . FACET_MAXLENGTH ) != 0 ) ) { throw new InvalidDatatypeFacetException ( "It is an error for both length and maxLength to be members of facets." ) ; } else if ( ( ( fFacetsDefined & DatatypeValidator . FACET_MINLENGTH ) != 0 ) ) { throw new InvalidDatatypeFacetException ( "It is an error for both length and minLength to be members of facets." ) ; } } if ( ( ( fFacetsDefined & ( DatatypeValidator . FACET_MINLENGTH | DatatypeValidator . FACET_MAXLENGTH ) ) != 0 ) ) { if ( fMinLength > fMaxLength ) { throw new InvalidDatatypeFacetException ( "Value of maxLength = " + fMaxLength + "must be greater that the value of minLength" + fMinLength ) ; } } isMaxExclusiveDefined = ( ( fFacetsDefined & DatatypeValidator . FACET_MAXEXCLUSIVE ) != 0 ) ? true : false ; isMaxInclusiveDefined = ( ( fFacetsDefined & DatatypeValidator . FACET_MAXINCLUSIVE ) != 0 ) ? true : false ; isMinExclusiveDefined = ( ( fFacetsDefined & DatatypeValidator . FACET_MINEXCLUSIVE ) != 0 ) ? true : false ; isMinInclusiveDefined = ( ( fFacetsDefined & DatatypeValidator . FACET_MININCLUSIVE ) != 0 ) ? true : false ; if ( isMaxExclusiveDefined && isMaxInclusiveDefined ) { throw new InvalidDatatypeFacetException ( "It is an error for both maxInclusive and maxExclusive to be specified for the same datatype." ) ; } if ( isMinExclusiveDefined && isMinInclusiveDefined ) { throw new InvalidDatatypeFacetException ( "It is an error for both minInclusive and minExclusive to be specified for the same datatype." ) ; } } } public Object validate ( String content , Object state ) throws InvalidDatatypeValueException { checkContent ( content ) ; return null ; } public void setLocale ( Locale locale ) { fLocale = locale ; } private void checkContent ( String content ) throws InvalidDatatypeValueException { if ( ( fFacetsDefined & DatatypeValidator . FACET_MAXLENGTH ) != 0 ) { if ( content . length ( ) > fMaxLength ) { throw new InvalidDatatypeValueException ( "Value '" + content + "' with length '" + content . length ( ) + "' exceeds maximum length of " + fMaxLength + "." ) ; } } if ( ( fFacetsDefined & DatatypeValidator . FACET_ENUMERATION ) != 0 ) { if ( fEnumeration . contains ( content ) == false ) throw new InvalidDatatypeValueException ( "Value '" + content + "' must be one of " + fEnumeration ) ; } if ( isMaxExclusiveDefined == true ) { int comparisonResult ; comparisonResult = compare ( content , fMaxExclusive ) ; if ( comparisonResult >= 0 ) { throw new InvalidDatatypeValueException ( "Value '" + content + "'  must be " + "lexicographically less than '" + fMaxExclusive + "'." ) ; } } if ( isMaxInclusiveDefined == true ) { int comparisonResult ; comparisonResult = compare ( content , fMaxInclusive ) ; if ( comparisonResult > 0 ) throw new InvalidDatatypeValueException ( "Value '" + content + "' must be " + "lexicographically less or equal than '" + fMaxInclusive + "'." ) ; } if ( isMinExclusiveDefined == true ) { int comparisonResult ; comparisonResult = compare ( content , fMinExclusive ) ; if ( comparisonResult <= 0 ) throw new InvalidDatatypeValueException ( "Value '" + content + "' must be " + "lexicographically greater than '" + fMinExclusive + "'." ) ; } if ( isMinInclusiveDefined == true ) { int comparisonResult ; comparisonResult = compare ( content , fMinInclusive ) ; if ( comparisonResult < 0 ) throw new InvalidDatatypeValueException ( "Value '" + content + "' must be " + "lexicographically greater or equal than '" + fMinInclusive + "'." ) ; } if ( ( fFacetsDefined & DatatypeValidator . FACET_PATTERN ) != 0 ) { if ( fRegex == null || fRegex . matches ( content ) == false ) throw new InvalidDatatypeValueException ( "Value '" + content + "' does not match regular expression facet '" + fPattern + "'." ) ; } } public Hashtable getFacets ( ) { return null ; } public int compare ( String content , String facetValue ) { Locale loc = Locale . getDefault ( ) ; Collator collator = Collator . getInstance ( loc ) ; return collator . compare ( content , facetValue ) ; } public Object clone ( ) throws CloneNotSupportedException { throw new CloneNotSupportedException ( "clone() is not supported in " + this . getClass ( ) . getName ( ) ) ; } private void setBasetype ( DatatypeValidator base ) { fBaseValidator = base ; } } 	1	['9', '2', '0', '6', '34', '30', '1', '5', '7', '0.669117647', '721', '1', '2', '0.363636364', '0.285714286', '0', '0', '77.22222222', '1', '0.7778', '1']
package org . apache . wml ; import org . w3c . dom . * ; public interface WMLDOMImplementation extends DOMImplementation { } 	0	['0', '1', '0', '1', '0', '0', '1', '0', '0', '2', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0']
package org . apache . xerces . framework ; import org . apache . xerces . readers . XMLEntityHandler ; import org . apache . xerces . readers . DefaultEntityHandler ; import org . apache . xerces . utils . ChunkyCharArray ; import org . apache . xerces . utils . QName ; import org . apache . xerces . utils . StringPool ; import org . apache . xerces . utils . XMLCharacterProperties ; import org . apache . xerces . utils . XMLMessages ; import org . apache . xerces . validators . common . GrammarResolver ; import org . xml . sax . Locator ; import org . xml . sax . SAXParseException ; public final class XMLDocumentScanner { static final char [ ] cdata_string = { '[' , 'C' , 'D' , 'A' , 'T' , 'A' , '[' } ; static final char [ ] xml_string = { 'x' , 'm' , 'l' } ; private static final char [ ] version_string = { 'v' , 'e' , 'r' , 's' , 'i' , 'o' , 'n' } ; static final char [ ] doctype_string = { 'D' , 'O' , 'C' , 'T' , 'Y' , 'P' , 'E' } ; private static final char [ ] standalone_string = { 's' , 't' , 'a' , 'n' , 'd' , 'a' , 'l' , 'o' , 'n' , 'e' } ; private static final char [ ] encoding_string = { 'e' , 'n' , 'c' , 'o' , 'd' , 'i' , 'n' , 'g' } ; public static final int RESULT_SUCCESS = 0 , RESULT_FAILURE = - 1 , RESULT_DUPLICATE_ATTR = - 2 ; static final int SCANNER_STATE_XML_DECL = 0 , SCANNER_STATE_START_OF_MARKUP = 1 , SCANNER_STATE_COMMENT = 2 , SCANNER_STATE_PI = 3 , SCANNER_STATE_DOCTYPE = 4 , SCANNER_STATE_PROLOG = 5 , SCANNER_STATE_ROOT_ELEMENT = 6 , SCANNER_STATE_CONTENT = 7 , SCANNER_STATE_REFERENCE = 8 , SCANNER_STATE_ATTRIBUTE_LIST = 9 , SCANNER_STATE_ATTRIBUTE_NAME = 10 , SCANNER_STATE_ATTRIBUTE_VALUE = 11 , SCANNER_STATE_TRAILING_MISC = 12 , SCANNER_STATE_END_OF_INPUT = 13 , SCANNER_STATE_TERMINATED = 14 ; private StringPool . CharArrayRange fCurrentElementCharArrayRange = null ; int fAttrListHandle = - 1 ; XMLAttrList fAttrList = null ; GrammarResolver fGrammarResolver = null ; XMLDTDScanner fDTDScanner = null ; boolean fNamespacesEnabled = false ; boolean fValidationEnabled = false ; boolean fLoadExternalDTD = true ; QName fElementQName = new QName ( ) ; QName fAttributeQName = new QName ( ) ; QName fCurrentElementQName = new QName ( ) ; ScannerDispatcher fDispatcher = null ; EventHandler fEventHandler = null ; XMLDocumentHandler . DTDHandler fDTDHandler = null ; StringPool fStringPool = null ; XMLErrorReporter fErrorReporter = null ; XMLEntityHandler fEntityHandler = null ; XMLEntityHandler . EntityReader fEntityReader = null ; XMLEntityHandler . CharBuffer fLiteralData = null ; boolean fSeenRootElement = false ; boolean fSeenDoctypeDecl = false ; boolean fStandalone = false ; boolean fParseTextDecl = false ; boolean fScanningDTD = false ; int fScannerState = SCANNER_STATE_XML_DECL ; int fReaderId = - 1 ; int fAttValueReader = - 1 ; int fAttValueElementType = - 1 ; int fAttValueAttrName = - 1 ; int fAttValueOffset = - 1 ; int fAttValueMark = - 1 ; int fScannerMarkupDepth = 0 ; public interface EventHandler { public void callStandaloneIsYes ( ) throws Exception ; public void callStartDocument ( ) throws Exception ; public void callEndDocument ( ) throws Exception ; public void callXMLDecl ( int version , int encoding , int standalone ) throws Exception ; public void callTextDecl ( int version , int encoding ) throws Exception ; public void callStartElement ( QName element ) throws Exception ; public void element ( QName element ) throws Exception ; public boolean attribute ( QName element , QName attrName , int attrValue ) throws Exception ; public void callEndElement ( int readerId ) throws Exception ; public void callStartCDATA ( ) throws Exception ; public void callEndCDATA ( ) throws Exception ; public void callCharacters ( int ch ) throws Exception ; public void callProcessingInstruction ( int piTarget , int piData ) throws Exception ; public void callComment ( int data ) throws Exception ; } public XMLDocumentScanner ( StringPool stringPool , XMLErrorReporter errorReporter , XMLEntityHandler entityHandler , XMLEntityHandler . CharBuffer literalData ) { fStringPool = stringPool ; fErrorReporter = errorReporter ; fEntityHandler = entityHandler ; fLiteralData = literalData ; fDispatcher = new XMLDeclDispatcher ( ) ; fAttrList = new XMLAttrList ( fStringPool ) ; } public void setEventHandler ( XMLDocumentScanner . EventHandler eventHandler ) { fEventHandler = eventHandler ; } public void setDTDHandler ( XMLDocumentHandler . DTDHandler dtdHandler ) { fDTDHandler = dtdHandler ; } public void setGrammarResolver ( GrammarResolver resolver ) { fGrammarResolver = resolver ; } public void reset ( StringPool stringPool , XMLEntityHandler . CharBuffer literalData ) { fStringPool = stringPool ; fLiteralData = literalData ; fParseTextDecl = false ; fSeenRootElement = false ; fSeenDoctypeDecl = false ; fStandalone = false ; fScanningDTD = false ; fDispatcher = new XMLDeclDispatcher ( ) ; fScannerState = SCANNER_STATE_XML_DECL ; fScannerMarkupDepth = 0 ; fAttrList = new XMLAttrList ( fStringPool ) ; } public boolean parseSome ( boolean doItAll ) throws Exception { do { if ( ! fDispatcher . dispatch ( doItAll ) ) return false ; } while ( doItAll ) ; return true ; } public void readerChange ( XMLEntityHandler . EntityReader nextReader , int nextReaderId ) throws Exception { fEntityReader = nextReader ; fReaderId = nextReaderId ; if ( fScannerState == SCANNER_STATE_ATTRIBUTE_VALUE ) { fAttValueOffset = fEntityReader . currentOffset ( ) ; fAttValueMark = fAttValueOffset ; } if ( fDTDScanner != null && fScanningDTD ) fDTDScanner . readerChange ( nextReader , nextReaderId ) ; } public void endOfInput ( int entityName , boolean moreToFollow ) throws Exception { if ( fDTDScanner != null && fScanningDTD ) { fDTDScanner . endOfInput ( entityName , moreToFollow ) ; } fDispatcher . endOfInput ( entityName , moreToFollow ) ; } public boolean atEndOfInput ( ) { return fScannerState == SCANNER_STATE_END_OF_INPUT ; } public int scanAttValue ( QName element , QName attribute , boolean asSymbol ) throws Exception { boolean single ; if ( ! ( single = fEntityReader . lookingAtChar ( '\'' , true ) ) && ! fEntityReader . lookingAtChar ( '\"' , true ) ) { reportFatalXMLError ( XMLMessages . MSG_QUOTE_REQUIRED_IN_ATTVALUE , XMLMessages . P10_QUOTE_REQUIRED , element . rawname , attribute . rawname ) ; return - 1 ; } char qchar = single ? '\'' : '\"' ; fAttValueMark = fEntityReader . currentOffset ( ) ; int attValue = fEntityReader . scanAttValue ( qchar , asSymbol ) ; if ( attValue >= 0 ) return attValue ; int previousState = setScannerState ( SCANNER_STATE_ATTRIBUTE_VALUE ) ; fAttValueReader = fReaderId ; fAttValueElementType = element . rawname ; fAttValueAttrName = attribute . rawname ; fAttValueOffset = fEntityReader . currentOffset ( ) ; int dataOffset = fLiteralData . length ( ) ; if ( fAttValueOffset - fAttValueMark > 0 ) fEntityReader . append ( fLiteralData , fAttValueMark , fAttValueOffset - fAttValueMark ) ; fAttValueMark = fAttValueOffset ; boolean setMark = false ; boolean skippedCR ; while ( true ) { if ( fEntityReader . lookingAtChar ( qchar , true ) ) { if ( fReaderId == fAttValueReader ) break ; } else if ( fEntityReader . lookingAtChar ( ' ' , true ) ) { } else if ( ( skippedCR = fEntityReader . lookingAtChar ( ( char ) 0x0D , true ) ) || fEntityReader . lookingAtSpace ( true ) ) { if ( fAttValueOffset - fAttValueMark > 0 ) fEntityReader . append ( fLiteralData , fAttValueMark , fAttValueOffset - fAttValueMark ) ; setMark = true ; fLiteralData . append ( ' ' ) ; if ( skippedCR ) { } } else if ( fEntityReader . lookingAtChar ( '&' , true ) ) { if ( fAttValueOffset - fAttValueMark > 0 ) fEntityReader . append ( fLiteralData , fAttValueMark , fAttValueOffset - fAttValueMark ) ; setMark = true ; if ( fEntityReader . lookingAtChar ( '#' , true ) ) { int ch = scanCharRef ( ) ; if ( ch != - 1 ) { if ( ch < 0x10000 ) fLiteralData . append ( ( char ) ch ) ; else { fLiteralData . append ( ( char ) ( ( ( ch - 0x00010000 ) > > 10 ) + 0xd800 ) ) ; fLiteralData . append ( ( char ) ( ( ( ch - 0x00010000 ) & 0x3ff ) + 0xdc00 ) ) ; } } } else { int nameOffset = fEntityReader . currentOffset ( ) ; fEntityReader . skipPastName ( ';' ) ; int nameLength = fEntityReader . currentOffset ( ) - nameOffset ; if ( nameLength == 0 ) { reportFatalXMLError ( XMLMessages . MSG_NAME_REQUIRED_IN_REFERENCE , XMLMessages . P68_NAME_REQUIRED ) ; } else if ( ! fEntityReader . lookingAtChar ( ';' , true ) ) { reportFatalXMLError ( XMLMessages . MSG_SEMICOLON_REQUIRED_IN_REFERENCE , XMLMessages . P68_SEMICOLON_REQUIRED , fEntityReader . addString ( nameOffset , nameLength ) ) ; } else { int entityName = fEntityReader . addSymbol ( nameOffset , nameLength ) ; fEntityHandler . startReadingFromEntity ( entityName , fScannerMarkupDepth , XMLEntityHandler . ENTITYREF_IN_ATTVALUE ) ; } } } else if ( fEntityReader . lookingAtChar ( '<' , true ) ) { if ( fAttValueOffset - fAttValueMark > 0 ) fEntityReader . append ( fLiteralData , fAttValueMark , fAttValueOffset - fAttValueMark ) ; setMark = true ; reportFatalXMLError ( XMLMessages . MSG_LESSTHAN_IN_ATTVALUE , XMLMessages . WFC_NO_LESSTHAN_IN_ATTVALUE , element . rawname , attribute . rawname ) ; } else if ( ! fEntityReader . lookingAtValidChar ( true ) ) { if ( fAttValueOffset - fAttValueMark > 0 ) fEntityReader . append ( fLiteralData , fAttValueMark , fAttValueOffset - fAttValueMark ) ; setMark = true ; int invChar = fEntityReader . scanInvalidChar ( ) ; if ( fScannerState == SCANNER_STATE_END_OF_INPUT ) return - 1 ; if ( invChar >= 0 ) { reportFatalXMLError ( XMLMessages . MSG_INVALID_CHAR_IN_ATTVALUE , XMLMessages . P10_INVALID_CHARACTER , fStringPool . toString ( element . rawname ) , fStringPool . toString ( attribute . rawname ) , Integer . toHexString ( invChar ) ) ; } } fAttValueOffset = fEntityReader . currentOffset ( ) ; if ( setMark ) { fAttValueMark = fAttValueOffset ; setMark = false ; } } restoreScannerState ( previousState ) ; int dataLength = fLiteralData . length ( ) - dataOffset ; if ( dataLength == 0 ) { return fEntityReader . addString ( fAttValueMark , fAttValueOffset - fAttValueMark ) ; } if ( fAttValueOffset - fAttValueMark > 0 ) { fEntityReader . append ( fLiteralData , fAttValueMark , fAttValueOffset - fAttValueMark ) ; dataLength = fLiteralData . length ( ) - dataOffset ; } int value = fLiteralData . addString ( dataOffset , dataLength ) ; return value ; } public void checkXMLLangAttributeValue ( int langValue ) throws Exception { String lang = fStringPool . toString ( langValue ) ; int offset = - 1 ; if ( lang . length ( ) >= 2 ) { char ch0 = lang . charAt ( 0 ) ; if ( lang . charAt ( 1 ) == '-' ) { if ( ch0 == 'i' || ch0 == 'I' || ch0 == 'x' || ch0 == 'X' ) { offset = 1 ; } } else { char ch1 = lang . charAt ( 1 ) ; if ( ( ( ch0 >= 'a' && ch0 <= 'z' ) || ( ch0 >= 'A' && ch0 <= 'Z' ) ) && ( ( ch1 >= 'a' && ch1 <= 'z' ) || ( ch1 >= 'A' && ch1 <= 'Z' ) ) ) { offset = 2 ; } } } if ( offset > 0 && lang . length ( ) > offset ) { char ch = lang . charAt ( offset ++ ) ; if ( ch != '-' ) { offset = - 1 ; } else { while ( true ) { if ( ch == '-' ) { if ( lang . length ( ) == offset ) { offset = - 1 ; break ; } ch = lang . charAt ( offset ++ ) ; if ( ( ch < 'a' || ch > 'z' ) && ( ch < 'A' || ch > 'Z' ) ) { offset = - 1 ; break ; } if ( lang . length ( ) == offset ) break ; } else if ( ( ch < 'a' || ch > 'z' ) && ( ch < 'A' || ch > 'Z' ) ) { offset = - 1 ; break ; } else if ( lang . length ( ) == offset ) break ; ch = lang . charAt ( offset ++ ) ; } } } if ( offset == - 1 ) { reportFatalXMLError ( XMLMessages . MSG_XML_LANG_INVALID , XMLMessages . P33_INVALID , lang ) ; } } void reportFatalXMLError ( int majorCode , int minorCode ) throws Exception { fErrorReporter . reportError ( fErrorReporter . getLocator ( ) , XMLMessages . XML_DOMAIN , majorCode , minorCode , null , XMLErrorReporter . ERRORTYPE_FATAL_ERROR ) ; } void reportFatalXMLError ( int majorCode , int minorCode , int stringIndex1 ) throws Exception { Object [ ] args = { fStringPool . toString ( stringIndex1 ) } ; fErrorReporter . reportError ( fErrorReporter . getLocator ( ) , XMLMessages . XML_DOMAIN , majorCode , minorCode , args , XMLErrorReporter . ERRORTYPE_FATAL_ERROR ) ; } void reportFatalXMLError ( int majorCode , int minorCode , String string1 ) throws Exception { Object [ ] args = { string1 } ; fErrorReporter . reportError ( fErrorReporter . getLocator ( ) , XMLMessages . XML_DOMAIN , majorCode , minorCode , args , XMLErrorReporter . ERRORTYPE_FATAL_ERROR ) ; } void reportFatalXMLError ( int majorCode , int minorCode , int stringIndex1 , int stringIndex2 ) throws Exception { Object [ ] args = { fStringPool . toString ( stringIndex1 ) , fStringPool . toString ( stringIndex2 ) } ; fErrorReporter . reportError ( fErrorReporter . getLocator ( ) , XMLMessages . XML_DOMAIN , majorCode , minorCode , args , XMLErrorReporter . ERRORTYPE_FATAL_ERROR ) ; } void reportFatalXMLError ( int majorCode , int minorCode , String string1 , String string2 ) throws Exception { Object [ ] args = { string1 , string2 } ; fErrorReporter . reportError ( fErrorReporter . getLocator ( ) , XMLMessages . XML_DOMAIN , majorCode , minorCode , args , XMLErrorReporter . ERRORTYPE_FATAL_ERROR ) ; } void reportFatalXMLError ( int majorCode , int minorCode , String string1 , String string2 , String string3 ) throws Exception { Object [ ] args = { string1 , string2 , string3 } ; fErrorReporter . reportError ( fErrorReporter . getLocator ( ) , XMLMessages . XML_DOMAIN , majorCode , minorCode , args , XMLErrorReporter . ERRORTYPE_FATAL_ERROR ) ; } void abortMarkup ( int majorCode , int minorCode ) throws Exception { reportFatalXMLError ( majorCode , minorCode ) ; skipPastEndOfCurrentMarkup ( ) ; } void abortMarkup ( int majorCode , int minorCode , int stringIndex1 ) throws Exception { reportFatalXMLError ( majorCode , minorCode , stringIndex1 ) ; skipPastEndOfCurrentMarkup ( ) ; } void abortMarkup ( int majorCode , int minorCode , String string1 ) throws Exception { reportFatalXMLError ( majorCode , minorCode , string1 ) ; skipPastEndOfCurrentMarkup ( ) ; } void abortMarkup ( int majorCode , int minorCode , int stringIndex1 , int stringIndex2 ) throws Exception { reportFatalXMLError ( majorCode , minorCode , stringIndex1 , stringIndex2 ) ; skipPastEndOfCurrentMarkup ( ) ; } void skipPastEndOfCurrentMarkup ( ) throws Exception { fEntityReader . skipToChar ( '>' ) ; if ( fEntityReader . lookingAtChar ( '>' , true ) ) fScannerMarkupDepth -- ; } int setScannerState ( int state ) { int oldState = fScannerState ; fScannerState = state ; return oldState ; } void restoreScannerState ( int state ) { if ( fScannerState != SCANNER_STATE_END_OF_INPUT ) fScannerState = state ; } interface ScannerDispatcher { boolean dispatch ( boolean keepgoing ) throws Exception ; void endOfInput ( int entityName , boolean moreToFollow ) throws Exception ; } final class XMLDeclDispatcher implements ScannerDispatcher { public boolean dispatch ( boolean keepgoing ) throws Exception { fEventHandler . callStartDocument ( ) ; if ( fEntityReader . lookingAtChar ( '<' , true ) ) { fScannerMarkupDepth ++ ; setScannerState ( SCANNER_STATE_START_OF_MARKUP ) ; if ( fEntityReader . lookingAtChar ( '?' , true ) ) { int piTarget = fEntityReader . scanName ( ' ' ) ; if ( piTarget == - 1 ) { abortMarkup ( XMLMessages . MSG_PITARGET_REQUIRED , XMLMessages . P16_PITARGET_REQUIRED ) ; } else if ( "xml" . equals ( fStringPool . toString ( piTarget ) ) ) { if ( fEntityReader . lookingAtSpace ( true ) ) { scanXMLDeclOrTextDecl ( false ) ; } else { abortMarkup ( XMLMessages . MSG_RESERVED_PITARGET , XMLMessages . P17_RESERVED_PITARGET ) ; } } else { scanPI ( piTarget ) ; } fDispatcher = new PrologDispatcher ( ) ; restoreScannerState ( SCANNER_STATE_PROLOG ) ; return true ; } if ( fEntityReader . lookingAtChar ( '!' , true ) ) { if ( fEntityReader . lookingAtChar ( '-' , true ) ) { if ( fEntityReader . lookingAtChar ( '-' , true ) ) { scanComment ( ) ; } else { abortMarkup ( XMLMessages . MSG_MARKUP_NOT_RECOGNIZED_IN_PROLOG , XMLMessages . P22_NOT_RECOGNIZED ) ; } } else { if ( fEntityReader . skippedString ( doctype_string ) ) { setScannerState ( SCANNER_STATE_DOCTYPE ) ; fSeenDoctypeDecl = true ; scanDoctypeDecl ( fStandalone ) ; fScannerMarkupDepth -- ; fDispatcher = new PrologDispatcher ( ) ; restoreScannerState ( SCANNER_STATE_PROLOG ) ; return true ; } else { abortMarkup ( XMLMessages . MSG_MARKUP_NOT_RECOGNIZED_IN_PROLOG , XMLMessages . P22_NOT_RECOGNIZED ) ; } } } else { fDispatcher = new ContentDispatcher ( ) ; restoreScannerState ( SCANNER_STATE_ROOT_ELEMENT ) ; return true ; } } else { if ( fEntityReader . lookingAtSpace ( true ) ) { fEntityReader . skipPastSpaces ( ) ; } else if ( ! fEntityReader . lookingAtValidChar ( false ) ) { int invChar = fEntityReader . scanInvalidChar ( ) ; if ( fScannerState != SCANNER_STATE_END_OF_INPUT ) { if ( invChar >= 0 ) { String arg = Integer . toHexString ( invChar ) ; reportFatalXMLError ( XMLMessages . MSG_INVALID_CHAR_IN_PROLOG , XMLMessages . P22_INVALID_CHARACTER , arg ) ; } } } else { reportFatalXMLError ( XMLMessages . MSG_MARKUP_NOT_RECOGNIZED_IN_PROLOG , XMLMessages . P22_NOT_RECOGNIZED ) ; fEntityReader . lookingAtValidChar ( true ) ; } } fDispatcher = new PrologDispatcher ( ) ; restoreScannerState ( SCANNER_STATE_PROLOG ) ; return true ; } public void endOfInput ( int entityName , boolean moreToFollow ) throws Exception { switch ( fScannerState ) { case SCANNER_STATE_XML_DECL : case SCANNER_STATE_START_OF_MARKUP : case SCANNER_STATE_DOCTYPE : break ; case SCANNER_STATE_COMMENT : if ( ! moreToFollow ) { reportFatalXMLError ( XMLMessages . MSG_COMMENT_UNTERMINATED , XMLMessages . P15_UNTERMINATED ) ; } else { reportFatalXMLError ( XMLMessages . MSG_COMMENT_NOT_IN_ONE_ENTITY , XMLMessages . P78_NOT_WELLFORMED ) ; } break ; case SCANNER_STATE_PI : if ( ! moreToFollow ) { reportFatalXMLError ( XMLMessages . MSG_PI_UNTERMINATED , XMLMessages . P16_UNTERMINATED ) ; } else { reportFatalXMLError ( XMLMessages . MSG_PI_NOT_IN_ONE_ENTITY , XMLMessages . P78_NOT_WELLFORMED ) ; } break ; default : throw new RuntimeException ( "FWK001 1] ScannerState=" + fScannerState + "\n" + "1\t" + fScannerState ) ; } if ( ! moreToFollow ) { reportFatalXMLError ( XMLMessages . MSG_ROOT_ELEMENT_REQUIRED , XMLMessages . P1_ELEMENT_REQUIRED ) ; fDispatcher = new EndOfInputDispatcher ( ) ; setScannerState ( SCANNER_STATE_END_OF_INPUT ) ; } } } final class PrologDispatcher implements ScannerDispatcher { public boolean dispatch ( boolean keepgoing ) throws Exception { do { if ( fEntityReader . lookingAtChar ( '<' , true ) ) { fScannerMarkupDepth ++ ; setScannerState ( SCANNER_STATE_START_OF_MARKUP ) ; if ( fEntityReader . lookingAtChar ( '?' , true ) ) { int piTarget = fEntityReader . scanName ( ' ' ) ; if ( piTarget == - 1 ) { abortMarkup ( XMLMessages . MSG_PITARGET_REQUIRED , XMLMessages . P16_PITARGET_REQUIRED ) ; } else if ( "xml" . equals ( fStringPool . toString ( piTarget ) ) ) { if ( fEntityReader . lookingAtSpace ( true ) ) { abortMarkup ( XMLMessages . MSG_XMLDECL_MUST_BE_FIRST , XMLMessages . P22_XMLDECL_MUST_BE_FIRST ) ; } else { abortMarkup ( XMLMessages . MSG_RESERVED_PITARGET , XMLMessages . P17_RESERVED_PITARGET ) ; } } else { scanPI ( piTarget ) ; } } else if ( fEntityReader . lookingAtChar ( '!' , true ) ) { if ( fEntityReader . lookingAtChar ( '-' , true ) ) { if ( fEntityReader . lookingAtChar ( '-' , true ) ) { scanComment ( ) ; } else { abortMarkup ( XMLMessages . MSG_MARKUP_NOT_RECOGNIZED_IN_PROLOG , XMLMessages . P22_NOT_RECOGNIZED ) ; } } else { if ( ! fSeenDoctypeDecl && fEntityReader . skippedString ( doctype_string ) ) { setScannerState ( SCANNER_STATE_DOCTYPE ) ; fSeenDoctypeDecl = true ; scanDoctypeDecl ( fStandalone ) ; fScannerMarkupDepth -- ; } else { abortMarkup ( XMLMessages . MSG_MARKUP_NOT_RECOGNIZED_IN_PROLOG , XMLMessages . P22_NOT_RECOGNIZED ) ; } } } else { fDispatcher = new ContentDispatcher ( ) ; restoreScannerState ( SCANNER_STATE_ROOT_ELEMENT ) ; return true ; } restoreScannerState ( SCANNER_STATE_PROLOG ) ; } else if ( fEntityReader . lookingAtSpace ( true ) ) { fEntityReader . skipPastSpaces ( ) ; } else if ( ! fEntityReader . lookingAtValidChar ( false ) ) { int invChar = fEntityReader . scanInvalidChar ( ) ; if ( fScannerState != SCANNER_STATE_END_OF_INPUT ) { if ( invChar >= 0 ) { String arg = Integer . toHexString ( invChar ) ; reportFatalXMLError ( XMLMessages . MSG_INVALID_CHAR_IN_PROLOG , XMLMessages . P22_INVALID_CHARACTER , arg ) ; } } } else { reportFatalXMLError ( XMLMessages . MSG_MARKUP_NOT_RECOGNIZED_IN_PROLOG , XMLMessages . P22_NOT_RECOGNIZED ) ; fEntityReader . lookingAtValidChar ( true ) ; } } while ( fScannerState != SCANNER_STATE_END_OF_INPUT && keepgoing ) ; return true ; } public void endOfInput ( int entityName , boolean moreToFollow ) throws Exception { switch ( fScannerState ) { case SCANNER_STATE_PROLOG : case SCANNER_STATE_START_OF_MARKUP : case SCANNER_STATE_DOCTYPE : break ; case SCANNER_STATE_COMMENT : if ( ! moreToFollow ) { reportFatalXMLError ( XMLMessages . MSG_COMMENT_UNTERMINATED , XMLMessages . P15_UNTERMINATED ) ; } else { reportFatalXMLError ( XMLMessages . MSG_COMMENT_NOT_IN_ONE_ENTITY , XMLMessages . P78_NOT_WELLFORMED ) ; } break ; case SCANNER_STATE_PI : if ( ! moreToFollow ) { reportFatalXMLError ( XMLMessages . MSG_PI_UNTERMINATED , XMLMessages . P16_UNTERMINATED ) ; } else { reportFatalXMLError ( XMLMessages . MSG_PI_NOT_IN_ONE_ENTITY , XMLMessages . P78_NOT_WELLFORMED ) ; } break ; default : throw new RuntimeException ( "FWK001 2] ScannerState=" + fScannerState + "\n" + "2\t" + fScannerState ) ; } if ( ! moreToFollow ) { reportFatalXMLError ( XMLMessages . MSG_ROOT_ELEMENT_REQUIRED , XMLMessages . P1_ELEMENT_REQUIRED ) ; fDispatcher = new EndOfInputDispatcher ( ) ; setScannerState ( SCANNER_STATE_END_OF_INPUT ) ; } } } int fCurrentElementType = - 1 ; public int getCurrentElementType ( ) { return fCurrentElementType ; } final class ContentDispatcher implements ScannerDispatcher { private int fContentReader = - 1 ; private int fElementDepth = 0 ; private int [ ] fElementTypeStack = new int [ 8 ] ; void popElementType ( ) { if ( fElementDepth -- == 0 ) { throw new RuntimeException ( "FWK002 popElementType: fElementDepth-- == 0." ) ; } if ( fElementDepth == 0 ) { fCurrentElementType = - 1 ; } else { fCurrentElementType = fElementTypeStack [ fElementDepth - 1 ] ; } } public boolean dispatch ( boolean keepgoing ) throws Exception { do { switch ( fScannerState ) { case SCANNER_STATE_ROOT_ELEMENT : { scanElementType ( fEntityReader , '>' , fElementQName ) ; if ( fElementQName . rawname != - 1 ) { fContentReader = fReaderId ; fSeenRootElement = true ; if ( fEntityReader . lookingAtChar ( '>' , true ) ) { fEventHandler . callStartElement ( fElementQName ) ; fScannerMarkupDepth -- ; if ( fElementDepth == fElementTypeStack . length ) { int [ ] newStack = new int [ fElementDepth * 2 ] ; System . arraycopy ( fElementTypeStack , 0 , newStack , 0 , fElementDepth ) ; fElementTypeStack = newStack ; } fCurrentElementType = fElementQName . rawname ; fElementTypeStack [ fElementDepth ] = fElementQName . rawname ; fElementDepth ++ ; restoreScannerState ( SCANNER_STATE_CONTENT ) ; } else if ( scanElement ( fElementQName ) ) { if ( fElementDepth == fElementTypeStack . length ) { int [ ] newStack = new int [ fElementDepth * 2 ] ; System . arraycopy ( fElementTypeStack , 0 , newStack , 0 , fElementDepth ) ; fElementTypeStack = newStack ; } fCurrentElementType = fElementQName . rawname ; fElementTypeStack [ fElementDepth ] = fElementQName . rawname ; fElementDepth ++ ; restoreScannerState ( SCANNER_STATE_CONTENT ) ; } else { fDispatcher = new TrailingMiscDispatcher ( ) ; restoreScannerState ( SCANNER_STATE_TRAILING_MISC ) ; return true ; } } else { reportFatalXMLError ( XMLMessages . MSG_MARKUP_NOT_RECOGNIZED_IN_PROLOG , XMLMessages . P22_NOT_RECOGNIZED ) ; fDispatcher = new PrologDispatcher ( ) ; restoreScannerState ( SCANNER_STATE_PROLOG ) ; return true ; } break ; } case SCANNER_STATE_START_OF_MARKUP : if ( fEntityReader . lookingAtChar ( '?' , true ) ) { int piTarget = fEntityReader . scanName ( ' ' ) ; if ( piTarget == - 1 ) { abortMarkup ( XMLMessages . MSG_PITARGET_REQUIRED , XMLMessages . P16_PITARGET_REQUIRED ) ; } else if ( "xml" . equals ( fStringPool . toString ( piTarget ) ) ) { if ( fEntityReader . lookingAtSpace ( true ) ) { if ( fParseTextDecl ) { scanXMLDeclOrTextDecl ( true ) ; fParseTextDecl = false ; } else { abortMarkup ( XMLMessages . MSG_TEXTDECL_MUST_BE_FIRST , XMLMessages . P30_TEXTDECL_MUST_BE_FIRST ) ; } } else { abortMarkup ( XMLMessages . MSG_RESERVED_PITARGET , XMLMessages . P17_RESERVED_PITARGET ) ; } } else { scanPI ( piTarget ) ; } restoreScannerState ( SCANNER_STATE_CONTENT ) ; } else if ( fEntityReader . lookingAtChar ( '!' , true ) ) { if ( fEntityReader . lookingAtChar ( '-' , true ) ) { if ( fEntityReader . lookingAtChar ( '-' , true ) ) { scanComment ( ) ; } else { abortMarkup ( XMLMessages . MSG_MARKUP_NOT_RECOGNIZED_IN_CONTENT , XMLMessages . P43_NOT_RECOGNIZED ) ; } } else { if ( fEntityReader . skippedString ( cdata_string ) ) { fEntityReader . setInCDSect ( true ) ; fEventHandler . callStartCDATA ( ) ; } else { abortMarkup ( XMLMessages . MSG_MARKUP_NOT_RECOGNIZED_IN_CONTENT , XMLMessages . P43_NOT_RECOGNIZED ) ; } } } else { if ( fEntityReader . lookingAtChar ( '/' , true ) ) { if ( ! scanExpectedElementType ( fEntityReader , '>' , fCurrentElementType ) ) { abortMarkup ( XMLMessages . MSG_ETAG_REQUIRED , XMLMessages . P39_UNTERMINATED , fCurrentElementType ) ; } else { if ( ! fEntityReader . lookingAtChar ( '>' , true ) ) { fEntityReader . skipPastSpaces ( ) ; if ( ! fEntityReader . lookingAtChar ( '>' , true ) ) { reportFatalXMLError ( XMLMessages . MSG_ETAG_UNTERMINATED , XMLMessages . P42_UNTERMINATED , fCurrentElementType ) ; } } fScannerMarkupDepth -- ; fEventHandler . callEndElement ( fReaderId ) ; if ( fElementDepth -- == 0 ) { throw new RuntimeException ( "FWK002 popElementType: fElementDepth-- == 0." ) ; } if ( fElementDepth == 0 ) { fCurrentElementType = - 1 ; fDispatcher = new TrailingMiscDispatcher ( ) ; restoreScannerState ( SCANNER_STATE_TRAILING_MISC ) ; return true ; } else { fCurrentElementType = fElementTypeStack [ fElementDepth - 1 ] ; } } } else { scanElementType ( fEntityReader , '>' , fElementQName ) ; if ( fElementQName . rawname != - 1 ) { if ( fEntityReader . lookingAtChar ( '>' , true ) ) { fEventHandler . callStartElement ( fElementQName ) ; fScannerMarkupDepth -- ; if ( fElementDepth == fElementTypeStack . length ) { int [ ] newStack = new int [ fElementDepth * 2 ] ; System . arraycopy ( fElementTypeStack , 0 , newStack , 0 , fElementDepth ) ; fElementTypeStack = newStack ; } fCurrentElementType = fElementQName . rawname ; fElementTypeStack [ fElementDepth ] = fElementQName . rawname ; fElementDepth ++ ; } else { if ( scanElement ( fElementQName ) ) { if ( fElementDepth == fElementTypeStack . length ) { int [ ] newStack = new int [ fElementDepth * 2 ] ; System . arraycopy ( fElementTypeStack , 0 , newStack , 0 , fElementDepth ) ; fElementTypeStack = newStack ; } fCurrentElementType = fElementQName . rawname ; fElementTypeStack [ fElementDepth ] = fElementQName . rawname ; fElementDepth ++ ; } } } else { abortMarkup ( XMLMessages . MSG_MARKUP_NOT_RECOGNIZED_IN_CONTENT , XMLMessages . P43_NOT_RECOGNIZED ) ; } } } restoreScannerState ( SCANNER_STATE_CONTENT ) ; break ; case SCANNER_STATE_CONTENT : if ( fParseTextDecl && fEntityReader . lookingAtChar ( '<' , true ) ) { fScannerMarkupDepth ++ ; setScannerState ( SCANNER_STATE_START_OF_MARKUP ) ; continue ; } fCurrentElementQName . setValues ( - 1 , - 1 , fCurrentElementType ) ; switch ( fEntityReader . scanContent ( fCurrentElementQName ) ) { case XMLEntityHandler . CONTENT_RESULT_START_OF_PI : fScannerMarkupDepth ++ ; int piTarget = fEntityReader . scanName ( ' ' ) ; if ( piTarget == - 1 ) { abortMarkup ( XMLMessages . MSG_PITARGET_REQUIRED , XMLMessages . P16_PITARGET_REQUIRED ) ; } else if ( "xml" . equals ( fStringPool . toString ( piTarget ) ) ) { if ( fEntityReader . lookingAtSpace ( true ) ) { if ( fReaderId == fContentReader ) { abortMarkup ( XMLMessages . MSG_XMLDECL_MUST_BE_FIRST , XMLMessages . P22_XMLDECL_MUST_BE_FIRST ) ; } else { abortMarkup ( XMLMessages . MSG_TEXTDECL_MUST_BE_FIRST , XMLMessages . P30_TEXTDECL_MUST_BE_FIRST ) ; } } else { abortMarkup ( XMLMessages . MSG_RESERVED_PITARGET , XMLMessages . P17_RESERVED_PITARGET ) ; } } else { scanPI ( piTarget ) ; } break ; case XMLEntityHandler . CONTENT_RESULT_START_OF_COMMENT : fScannerMarkupDepth ++ ; fParseTextDecl = false ; scanComment ( ) ; break ; case XMLEntityHandler . CONTENT_RESULT_START_OF_CDSECT : fScannerMarkupDepth ++ ; fParseTextDecl = false ; fEntityReader . setInCDSect ( true ) ; fEventHandler . callStartCDATA ( ) ; break ; case XMLEntityHandler . CONTENT_RESULT_START_OF_ETAG : fScannerMarkupDepth ++ ; fParseTextDecl = false ; if ( ! scanExpectedElementType ( fEntityReader , '>' , fCurrentElementType ) ) { abortMarkup ( XMLMessages . MSG_ETAG_REQUIRED , XMLMessages . P39_UNTERMINATED , fCurrentElementType ) ; } else { if ( ! fEntityReader . lookingAtChar ( '>' , true ) ) { fEntityReader . skipPastSpaces ( ) ; if ( ! fEntityReader . lookingAtChar ( '>' , true ) ) { reportFatalXMLError ( XMLMessages . MSG_ETAG_UNTERMINATED , XMLMessages . P42_UNTERMINATED , fCurrentElementType ) ; } } fScannerMarkupDepth -- ; fEventHandler . callEndElement ( fReaderId ) ; if ( fElementDepth -- == 0 ) { throw new RuntimeException ( "FWK002 popElementType: fElementDepth-- == 0." ) ; } if ( fElementDepth == 0 ) { fCurrentElementType = - 1 ; fDispatcher = new TrailingMiscDispatcher ( ) ; restoreScannerState ( SCANNER_STATE_TRAILING_MISC ) ; return true ; } else { fCurrentElementType = fElementTypeStack [ fElementDepth - 1 ] ; } } restoreScannerState ( SCANNER_STATE_CONTENT ) ; break ; case XMLEntityHandler . CONTENT_RESULT_START_OF_ELEMENT : { fScannerMarkupDepth ++ ; fParseTextDecl = false ; scanElementType ( fEntityReader , '>' , fElementQName ) ; if ( fElementQName . rawname != - 1 ) { if ( fEntityReader . lookingAtChar ( '>' , true ) ) { fEventHandler . callStartElement ( fElementQName ) ; fScannerMarkupDepth -- ; if ( fElementDepth == fElementTypeStack . length ) { int [ ] newStack = new int [ fElementDepth * 2 ] ; System . arraycopy ( fElementTypeStack , 0 , newStack , 0 , fElementDepth ) ; fElementTypeStack = newStack ; } fCurrentElementType = fElementQName . rawname ; fElementTypeStack [ fElementDepth ] = fElementQName . rawname ; fElementDepth ++ ; } else { if ( scanElement ( fElementQName ) ) { if ( fElementDepth == fElementTypeStack . length ) { int [ ] newStack = new int [ fElementDepth * 2 ] ; System . arraycopy ( fElementTypeStack , 0 , newStack , 0 , fElementDepth ) ; fElementTypeStack = newStack ; } fCurrentElementType = fElementQName . rawname ; fElementTypeStack [ fElementDepth ] = fElementQName . rawname ; fElementDepth ++ ; } } } else { abortMarkup ( XMLMessages . MSG_MARKUP_NOT_RECOGNIZED_IN_CONTENT , XMLMessages . P43_NOT_RECOGNIZED ) ; } if ( fScannerState != SCANNER_STATE_END_OF_INPUT ) fScannerState = SCANNER_STATE_CONTENT ; break ; } case XMLEntityHandler . CONTENT_RESULT_MATCHING_ETAG : { fParseTextDecl = false ; fEventHandler . callEndElement ( fReaderId ) ; if ( fElementDepth -- == 0 ) { throw new RuntimeException ( "FWK002 popElementType: fElementDepth-- == 0." ) ; } if ( fElementDepth == 0 ) { fCurrentElementType = - 1 ; if ( fScannerState != SCANNER_STATE_END_OF_INPUT ) { fDispatcher = new TrailingMiscDispatcher ( ) ; fScannerState = SCANNER_STATE_TRAILING_MISC ; } return true ; } else { fCurrentElementType = fElementTypeStack [ fElementDepth - 1 ] ; } if ( fScannerState != SCANNER_STATE_END_OF_INPUT ) fScannerState = SCANNER_STATE_CONTENT ; break ; } case XMLEntityHandler . CONTENT_RESULT_START_OF_CHARREF : fParseTextDecl = false ; setScannerState ( SCANNER_STATE_REFERENCE ) ; int num = scanCharRef ( ) ; if ( num != - 1 ) fEventHandler . callCharacters ( num ) ; restoreScannerState ( SCANNER_STATE_CONTENT ) ; break ; case XMLEntityHandler . CONTENT_RESULT_REFERENCE_END_OF_INPUT : case XMLEntityHandler . CONTENT_RESULT_START_OF_ENTITYREF : fParseTextDecl = false ; setScannerState ( SCANNER_STATE_REFERENCE ) ; int nameOffset = fEntityReader . currentOffset ( ) ; fEntityReader . skipPastName ( ';' ) ; int nameLength = fEntityReader . currentOffset ( ) - nameOffset ; if ( nameLength == 0 ) { reportFatalXMLError ( XMLMessages . MSG_NAME_REQUIRED_IN_REFERENCE , XMLMessages . P68_NAME_REQUIRED ) ; restoreScannerState ( SCANNER_STATE_CONTENT ) ; } else if ( ! fEntityReader . lookingAtChar ( ';' , true ) ) { reportFatalXMLError ( XMLMessages . MSG_SEMICOLON_REQUIRED_IN_REFERENCE , XMLMessages . P68_SEMICOLON_REQUIRED , fEntityReader . addString ( nameOffset , nameLength ) ) ; restoreScannerState ( SCANNER_STATE_CONTENT ) ; } else { restoreScannerState ( SCANNER_STATE_CONTENT ) ; int entityName = fEntityReader . addSymbol ( nameOffset , nameLength ) ; fParseTextDecl = fEntityHandler . startReadingFromEntity ( entityName , fElementDepth , XMLEntityHandler . ENTITYREF_IN_CONTENT ) ; } break ; case XMLEntityHandler . CONTENT_RESULT_END_OF_CDSECT : fParseTextDecl = false ; if ( fEntityReader . getInCDSect ( ) ) { fEntityReader . setInCDSect ( false ) ; fEventHandler . callEndCDATA ( ) ; fScannerMarkupDepth -- ; } else { reportFatalXMLError ( XMLMessages . MSG_CDEND_IN_CONTENT , XMLMessages . P14_INVALID ) ; } restoreScannerState ( SCANNER_STATE_CONTENT ) ; break ; case XMLEntityHandler . CONTENT_RESULT_INVALID_CHAR : fParseTextDecl = false ; if ( fScannerState != SCANNER_STATE_END_OF_INPUT ) { if ( ! fEntityReader . lookingAtValidChar ( false ) ) { int invChar = fEntityReader . scanInvalidChar ( ) ; if ( fScannerState != SCANNER_STATE_END_OF_INPUT ) { if ( invChar >= 0 ) { if ( fEntityReader . getInCDSect ( ) ) { reportFatalXMLError ( XMLMessages . MSG_INVALID_CHAR_IN_CDSECT , XMLMessages . P20_INVALID_CHARACTER , Integer . toHexString ( invChar ) ) ; } else { reportFatalXMLError ( XMLMessages . MSG_INVALID_CHAR_IN_CONTENT , XMLMessages . P43_INVALID_CHARACTER , Integer . toHexString ( invChar ) ) ; } } } } restoreScannerState ( SCANNER_STATE_CONTENT ) ; } break ; case XMLEntityHandler . CONTENT_RESULT_MARKUP_NOT_RECOGNIZED : fParseTextDecl = false ; abortMarkup ( XMLMessages . MSG_MARKUP_NOT_RECOGNIZED_IN_CONTENT , XMLMessages . P43_NOT_RECOGNIZED ) ; break ; case XMLEntityHandler . CONTENT_RESULT_MARKUP_END_OF_INPUT : fScannerMarkupDepth ++ ; fParseTextDecl = false ; fScannerState = SCANNER_STATE_START_OF_MARKUP ; break ; default : throw new RuntimeException ( "FWK001 3] ScannerState=" + fScannerState + "\n" + "3\t" + fScannerState ) ; } break ; default : throw new RuntimeException ( "FWK001 4] ScannerState=" + fScannerState + "\n" + "4\t" + fScannerState ) ; } } while ( fScannerState != SCANNER_STATE_END_OF_INPUT && keepgoing ) ; return true ; } public void endOfInput ( int entityName , boolean moreToFollow ) throws Exception { switch ( fScannerState ) { case SCANNER_STATE_ROOT_ELEMENT : case SCANNER_STATE_START_OF_MARKUP : break ; case SCANNER_STATE_CONTENT : if ( fEntityReader . getInCDSect ( ) ) { reportFatalXMLError ( XMLMessages . MSG_CDSECT_UNTERMINATED , XMLMessages . P18_UNTERMINATED ) ; } break ; case SCANNER_STATE_ATTRIBUTE_LIST : if ( ! moreToFollow ) { } else { } break ; case SCANNER_STATE_ATTRIBUTE_NAME : if ( ! moreToFollow ) { } else { } break ; case SCANNER_STATE_ATTRIBUTE_VALUE : if ( ! moreToFollow ) { reportFatalXMLError ( XMLMessages . MSG_ATTRIBUTE_VALUE_UNTERMINATED , XMLMessages . P10_UNTERMINATED , fAttValueElementType , fAttValueAttrName ) ; } else if ( fReaderId == fAttValueReader ) { } else { fEntityReader . append ( fLiteralData , fAttValueMark , fAttValueOffset - fAttValueMark ) ; } break ; case SCANNER_STATE_COMMENT : if ( ! moreToFollow ) { reportFatalXMLError ( XMLMessages . MSG_COMMENT_UNTERMINATED , XMLMessages . P15_UNTERMINATED ) ; } else { reportFatalXMLError ( XMLMessages . MSG_COMMENT_NOT_IN_ONE_ENTITY , XMLMessages . P78_NOT_WELLFORMED ) ; } break ; case SCANNER_STATE_PI : if ( ! moreToFollow ) { reportFatalXMLError ( XMLMessages . MSG_PI_UNTERMINATED , XMLMessages . P16_UNTERMINATED ) ; } else { reportFatalXMLError ( XMLMessages . MSG_PI_NOT_IN_ONE_ENTITY , XMLMessages . P78_NOT_WELLFORMED ) ; } break ; case SCANNER_STATE_REFERENCE : if ( ! moreToFollow ) { reportFatalXMLError ( XMLMessages . MSG_REFERENCE_UNTERMINATED , XMLMessages . P67_UNTERMINATED ) ; } else { reportFatalXMLError ( XMLMessages . MSG_REFERENCE_NOT_IN_ONE_ENTITY , XMLMessages . P78_NOT_WELLFORMED ) ; } break ; default : throw new RuntimeException ( "FWK001 5] ScannerState=" + fScannerState + "\n" + "5\t" + fScannerState ) ; } if ( ! moreToFollow ) { if ( fElementDepth > 0 ) { reportFatalXMLError ( XMLMessages . MSG_ETAG_REQUIRED , XMLMessages . P39_UNTERMINATED , fCurrentElementType ) ; } else { reportFatalXMLError ( XMLMessages . MSG_ROOT_ELEMENT_REQUIRED , XMLMessages . P1_ELEMENT_REQUIRED , null ) ; } fDispatcher = new EndOfInputDispatcher ( ) ; setScannerState ( SCANNER_STATE_END_OF_INPUT ) ; } } } final class TrailingMiscDispatcher implements ScannerDispatcher { public boolean dispatch ( boolean keepgoing ) throws Exception { do { if ( fEntityReader . lookingAtChar ( '<' , true ) ) { fScannerMarkupDepth ++ ; setScannerState ( SCANNER_STATE_START_OF_MARKUP ) ; if ( fEntityReader . lookingAtChar ( '?' , true ) ) { int piTarget = fEntityReader . scanName ( ' ' ) ; if ( piTarget == - 1 ) { abortMarkup ( XMLMessages . MSG_PITARGET_REQUIRED , XMLMessages . P16_PITARGET_REQUIRED ) ; } else if ( "xml" . equals ( fStringPool . toString ( piTarget ) ) ) { if ( fEntityReader . lookingAtSpace ( true ) ) { abortMarkup ( XMLMessages . MSG_XMLDECL_MUST_BE_FIRST , XMLMessages . P22_XMLDECL_MUST_BE_FIRST ) ; } else { abortMarkup ( XMLMessages . MSG_RESERVED_PITARGET , XMLMessages . P17_RESERVED_PITARGET ) ; } } else { scanPI ( piTarget ) ; } } else if ( fEntityReader . lookingAtChar ( '!' , true ) ) { if ( fEntityReader . lookingAtChar ( '-' , true ) && fEntityReader . lookingAtChar ( '-' , true ) ) { scanComment ( ) ; } else { abortMarkup ( XMLMessages . MSG_MARKUP_NOT_RECOGNIZED_IN_MISC , XMLMessages . P27_NOT_RECOGNIZED ) ; } } else { abortMarkup ( XMLMessages . MSG_MARKUP_NOT_RECOGNIZED_IN_MISC , XMLMessages . P27_NOT_RECOGNIZED ) ; } restoreScannerState ( SCANNER_STATE_TRAILING_MISC ) ; } else if ( fEntityReader . lookingAtSpace ( true ) ) { fEntityReader . skipPastSpaces ( ) ; } else if ( ! fEntityReader . lookingAtValidChar ( false ) ) { int invChar = fEntityReader . scanInvalidChar ( ) ; if ( fScannerState != SCANNER_STATE_END_OF_INPUT ) { if ( invChar >= 0 ) { String arg = Integer . toHexString ( invChar ) ; reportFatalXMLError ( XMLMessages . MSG_INVALID_CHAR_IN_MISC , XMLMessages . P27_INVALID_CHARACTER , arg ) ; } } } else { reportFatalXMLError ( XMLMessages . MSG_MARKUP_NOT_RECOGNIZED_IN_MISC , XMLMessages . P27_NOT_RECOGNIZED ) ; fEntityReader . lookingAtValidChar ( true ) ; } } while ( fScannerState != SCANNER_STATE_END_OF_INPUT && keepgoing ) ; return true ; } public void endOfInput ( int entityName , boolean moreToFollow ) throws Exception { if ( moreToFollow ) throw new RuntimeException ( "FWK003 TrailingMiscDispatcher.endOfInput moreToFollow" ) ; switch ( fScannerState ) { case SCANNER_STATE_TRAILING_MISC : case SCANNER_STATE_START_OF_MARKUP : break ; case SCANNER_STATE_COMMENT : reportFatalXMLError ( XMLMessages . MSG_COMMENT_UNTERMINATED , XMLMessages . P15_UNTERMINATED ) ; break ; case SCANNER_STATE_PI : reportFatalXMLError ( XMLMessages . MSG_PI_UNTERMINATED , XMLMessages . P16_UNTERMINATED ) ; break ; default : throw new RuntimeException ( "FWK001 6] ScannerState=" + fScannerState + "\n" + "6\t" + fScannerState ) ; } fDispatcher = new EndOfInputDispatcher ( ) ; setScannerState ( SCANNER_STATE_END_OF_INPUT ) ; } } final class EndOfInputDispatcher implements ScannerDispatcher { public boolean dispatch ( boolean keepgoing ) throws Exception { if ( fScannerState != SCANNER_STATE_TERMINATED ) fEventHandler . callEndDocument ( ) ; setScannerState ( SCANNER_STATE_TERMINATED ) ; return false ; } public void endOfInput ( int entityName , boolean moreToFollow ) throws Exception { throw new RuntimeException ( "FWK001 7] ScannerState=" + fScannerState + "\n" + "7\t" + fScannerState ) ; } } void scanXMLDeclOrTextDecl ( boolean scanningTextDecl ) throws Exception { int version = - 1 ; int encoding = - 1 ; int standalone = - 1 ; final int XMLDECL_START = 0 ; final int XMLDECL_VERSION = 1 ; final int XMLDECL_ENCODING = 2 ; final int XMLDECL_STANDALONE = 3 ; final int XMLDECL_FINISHED = 4 ; int state = XMLDECL_START ; do { fEntityReader . skipPastSpaces ( ) ; int offset = fEntityReader . currentOffset ( ) ; if ( scanningTextDecl ) { if ( state == XMLDECL_START && fEntityReader . skippedString ( version_string ) ) { state = XMLDECL_VERSION ; } else if ( fEntityReader . skippedString ( encoding_string ) ) { state = XMLDECL_ENCODING ; } else { abortMarkup ( XMLMessages . MSG_ENCODINGDECL_REQUIRED , XMLMessages . P77_ENCODINGDECL_REQUIRED ) ; return ; } } else { if ( state == XMLDECL_START ) { if ( ! fEntityReader . skippedString ( version_string ) ) { abortMarkup ( XMLMessages . MSG_VERSIONINFO_REQUIRED , XMLMessages . P23_VERSIONINFO_REQUIRED ) ; return ; } state = XMLDECL_VERSION ; } else { if ( state == XMLDECL_VERSION ) { if ( fEntityReader . skippedString ( encoding_string ) ) state = XMLDECL_ENCODING ; else state = XMLDECL_STANDALONE ; } else state = XMLDECL_STANDALONE ; if ( state == XMLDECL_STANDALONE && ! fEntityReader . skippedString ( standalone_string ) ) break ; } } int length = fEntityReader . currentOffset ( ) - offset ; fEntityReader . skipPastSpaces ( ) ; if ( ! fEntityReader . lookingAtChar ( '=' , true ) ) { int majorCode = scanningTextDecl ? XMLMessages . MSG_EQ_REQUIRED_IN_TEXTDECL : XMLMessages . MSG_EQ_REQUIRED_IN_XMLDECL ; int minorCode = state == XMLDECL_VERSION ? XMLMessages . P24_EQ_REQUIRED : ( state == XMLDECL_ENCODING ? XMLMessages . P80_EQ_REQUIRED : XMLMessages . P32_EQ_REQUIRED ) ; abortMarkup ( majorCode , minorCode , fEntityReader . addString ( offset , length ) ) ; return ; } fEntityReader . skipPastSpaces ( ) ; int result = fEntityReader . scanStringLiteral ( ) ; switch ( result ) { case XMLEntityHandler . STRINGLIT_RESULT_QUOTE_REQUIRED : { int majorCode = scanningTextDecl ? XMLMessages . MSG_QUOTE_REQUIRED_IN_TEXTDECL : XMLMessages . MSG_QUOTE_REQUIRED_IN_XMLDECL ; int minorCode = state == XMLDECL_VERSION ? XMLMessages . P24_QUOTE_REQUIRED : ( state == XMLDECL_ENCODING ? XMLMessages . P80_QUOTE_REQUIRED : XMLMessages . P32_QUOTE_REQUIRED ) ; abortMarkup ( majorCode , minorCode , fEntityReader . addString ( offset , length ) ) ; return ; } case XMLEntityHandler . STRINGLIT_RESULT_INVALID_CHAR : int invChar = fEntityReader . scanInvalidChar ( ) ; if ( fScannerState != SCANNER_STATE_END_OF_INPUT ) { if ( invChar >= 0 ) { int majorCode = scanningTextDecl ? XMLMessages . MSG_INVALID_CHAR_IN_TEXTDECL : XMLMessages . MSG_INVALID_CHAR_IN_XMLDECL ; int minorCode = state == XMLDECL_VERSION ? XMLMessages . P26_INVALID_CHARACTER : ( state == XMLDECL_ENCODING ? XMLMessages . P81_INVALID_CHARACTER : XMLMessages . P32_INVALID_CHARACTER ) ; reportFatalXMLError ( majorCode , minorCode , Integer . toHexString ( invChar ) ) ; } skipPastEndOfCurrentMarkup ( ) ; } return ; default : break ; } switch ( state ) { case XMLDECL_VERSION : version = result ; String versionString = fStringPool . toString ( version ) ; if ( ! "1.0" . equals ( versionString ) ) { if ( ! validVersionNum ( versionString ) ) { abortMarkup ( XMLMessages . MSG_VERSIONINFO_INVALID , XMLMessages . P26_INVALID_VALUE , versionString ) ; return ; } Object [ ] args = { versionString } ; fErrorReporter . reportError ( fErrorReporter . getLocator ( ) , XMLMessages . XML_DOMAIN , XMLMessages . MSG_VERSION_NOT_SUPPORTED , XMLMessages . P26_NOT_SUPPORTED , args , XMLErrorReporter . ERRORTYPE_RECOVERABLE_ERROR ) ; } if ( ! fEntityReader . lookingAtSpace ( true ) ) { if ( scanningTextDecl ) { abortMarkup ( XMLMessages . MSG_SPACE_REQUIRED_IN_TEXTDECL , XMLMessages . P80_WHITESPACE_REQUIRED ) ; return ; } state = XMLDECL_FINISHED ; } break ; case XMLDECL_ENCODING : encoding = result ; String encodingString = fStringPool . toString ( encoding ) ; if ( ! validEncName ( encodingString ) ) { abortMarkup ( XMLMessages . MSG_ENCODINGDECL_INVALID , XMLMessages . P81_INVALID_VALUE , encodingString ) ; return ; } if ( ! fEntityReader . lookingAtSpace ( true ) ) { state = XMLDECL_FINISHED ; } else if ( scanningTextDecl ) { fEntityReader . skipPastSpaces ( ) ; state = XMLDECL_FINISHED ; } break ; case XMLDECL_STANDALONE : standalone = result ; String standaloneString = fStringPool . toString ( standalone ) ; boolean yes = "yes" . equals ( standaloneString ) ; if ( ! yes && ! "no" . equals ( standaloneString ) ) { abortMarkup ( XMLMessages . MSG_SDDECL_INVALID , XMLMessages . P32_INVALID_VALUE , standaloneString ) ; return ; } fStandalone = yes ; fEntityReader . skipPastSpaces ( ) ; state = XMLDECL_FINISHED ; break ; } } while ( state != XMLDECL_FINISHED ) ; if ( ! fEntityReader . lookingAtChar ( '?' , true ) || ! fEntityReader . lookingAtChar ( '>' , true ) ) { int majorCode , minorCode ; if ( scanningTextDecl ) { majorCode = XMLMessages . MSG_TEXTDECL_UNTERMINATED ; minorCode = XMLMessages . P77_UNTERMINATED ; } else { majorCode = XMLMessages . MSG_XMLDECL_UNTERMINATED ; minorCode = XMLMessages . P23_UNTERMINATED ; } abortMarkup ( majorCode , minorCode ) ; return ; } fScannerMarkupDepth -- ; if ( scanningTextDecl ) { fEventHandler . callTextDecl ( version , encoding ) ; } else { fEventHandler . callXMLDecl ( version , encoding , standalone ) ; if ( fStandalone ) { fEventHandler . callStandaloneIsYes ( ) ; } } } boolean scanElement ( QName element ) throws Exception { boolean greater = false ; boolean slash = false ; if ( greater = fEntityReader . lookingAtChar ( '>' , true ) ) { } else if ( fEntityReader . lookingAtSpace ( true ) ) { int previousState = setScannerState ( SCANNER_STATE_ATTRIBUTE_LIST ) ; while ( true ) { fEntityReader . skipPastSpaces ( ) ; if ( ( greater = fEntityReader . lookingAtChar ( '>' , true ) ) || ( slash = fEntityReader . lookingAtChar ( '/' , true ) ) ) break ; setScannerState ( SCANNER_STATE_ATTRIBUTE_NAME ) ; scanAttributeName ( fEntityReader , element , fAttributeQName ) ; if ( fAttributeQName . rawname == - 1 ) { break ; } fEntityReader . skipPastSpaces ( ) ; if ( ! fEntityReader . lookingAtChar ( '=' , true ) ) { if ( fScannerState != SCANNER_STATE_END_OF_INPUT ) { abortMarkup ( XMLMessages . MSG_EQ_REQUIRED_IN_ATTRIBUTE , XMLMessages . P41_EQ_REQUIRED , element . rawname , fAttributeQName . rawname ) ; restoreScannerState ( previousState ) ; } return false ; } fEntityReader . skipPastSpaces ( ) ; int result = scanAttValue ( element , fAttributeQName , false ) ; if ( result == RESULT_FAILURE ) { if ( fScannerState != SCANNER_STATE_END_OF_INPUT ) { skipPastEndOfCurrentMarkup ( ) ; restoreScannerState ( previousState ) ; } return false ; } else if ( result == RESULT_DUPLICATE_ATTR ) { reportFatalXMLError ( XMLMessages . MSG_ATTRIBUTE_NOT_UNIQUE , XMLMessages . WFC_UNIQUE_ATT_SPEC , element . rawname , fAttributeQName . rawname ) ; } if ( fEventHandler . attribute ( element , fAttributeQName , result ) ) { reportFatalXMLError ( XMLMessages . MSG_ATTRIBUTE_NOT_UNIQUE , XMLMessages . WFC_UNIQUE_ATT_SPEC , element . rawname , fAttributeQName . rawname ) ; } restoreScannerState ( SCANNER_STATE_ATTRIBUTE_LIST ) ; if ( ! fEntityReader . lookingAtSpace ( true ) ) { if ( ! ( greater = fEntityReader . lookingAtChar ( '>' , true ) ) ) slash = fEntityReader . lookingAtChar ( '/' , true ) ; break ; } } restoreScannerState ( previousState ) ; } else { slash = fEntityReader . lookingAtChar ( '/' , true ) ; } if ( ! greater && ( ! slash || ! fEntityReader . lookingAtChar ( '>' , true ) ) ) { if ( fScannerState != SCANNER_STATE_END_OF_INPUT ) { abortMarkup ( XMLMessages . MSG_ELEMENT_UNTERMINATED , XMLMessages . P40_UNTERMINATED , element . rawname ) ; } return false ; } fEventHandler . callStartElement ( element ) ; fScannerMarkupDepth -- ; if ( slash ) { fEventHandler . callEndElement ( fReaderId ) ; return false ; } else { return true ; } } int scanCharRef ( ) throws Exception { int valueOffset = fEntityReader . currentOffset ( ) ; boolean hex = fEntityReader . lookingAtChar ( 'x' , true ) ; int num = fEntityReader . scanCharRef ( hex ) ; if ( num < 0 ) { switch ( num ) { case XMLEntityHandler . CHARREF_RESULT_SEMICOLON_REQUIRED : reportFatalXMLError ( XMLMessages . MSG_SEMICOLON_REQUIRED_IN_CHARREF , XMLMessages . P66_SEMICOLON_REQUIRED ) ; return - 1 ; case XMLEntityHandler . CHARREF_RESULT_INVALID_CHAR : int majorCode = hex ? XMLMessages . MSG_HEXDIGIT_REQUIRED_IN_CHARREF : XMLMessages . MSG_DIGIT_REQUIRED_IN_CHARREF ; int minorCode = hex ? XMLMessages . P66_HEXDIGIT_REQUIRED : XMLMessages . P66_DIGIT_REQUIRED ; reportFatalXMLError ( majorCode , minorCode ) ; return - 1 ; case XMLEntityHandler . CHARREF_RESULT_OUT_OF_RANGE : num = 0x110000 ; break ; } } if ( num < 0x20 ) { if ( num == 0x09 || num == 0x0A || num == 0x0D ) { return num ; } } else if ( num <= 0xD7FF || ( num >= 0xE000 && ( num <= 0xFFFD || ( num >= 0x10000 && num <= 0x10FFFF ) ) ) ) { return num ; } int valueLength = fEntityReader . currentOffset ( ) - valueOffset ; reportFatalXMLError ( XMLMessages . MSG_INVALID_CHARREF , XMLMessages . WFC_LEGAL_CHARACTER , fEntityReader . addString ( valueOffset , valueLength ) ) ; return - 1 ; } void scanComment ( ) throws Exception { int commentOffset = fEntityReader . currentOffset ( ) ; boolean sawDashDash = false ; int previousState = setScannerState ( SCANNER_STATE_COMMENT ) ; while ( fScannerState == SCANNER_STATE_COMMENT ) { if ( fEntityReader . lookingAtChar ( '-' , false ) ) { int nextEndOffset = fEntityReader . currentOffset ( ) ; int endOffset = 0 ; fEntityReader . lookingAtChar ( '-' , true ) ; int offset = fEntityReader . currentOffset ( ) ; int count = 1 ; while ( fEntityReader . lookingAtChar ( '-' , true ) ) { count ++ ; endOffset = nextEndOffset ; nextEndOffset = offset ; offset = fEntityReader . currentOffset ( ) ; } if ( count > 1 ) { if ( fEntityReader . lookingAtChar ( '>' , true ) ) { if ( ! sawDashDash && count > 2 ) { reportFatalXMLError ( XMLMessages . MSG_DASH_DASH_IN_COMMENT , XMLMessages . P15_DASH_DASH ) ; sawDashDash = true ; } fScannerMarkupDepth -- ; fEventHandler . callComment ( fEntityReader . addString ( commentOffset , endOffset - commentOffset ) ) ; restoreScannerState ( previousState ) ; return ; } else if ( ! sawDashDash ) { reportFatalXMLError ( XMLMessages . MSG_DASH_DASH_IN_COMMENT , XMLMessages . P15_DASH_DASH ) ; sawDashDash = true ; } } } else { if ( ! fEntityReader . lookingAtValidChar ( true ) ) { int invChar = fEntityReader . scanInvalidChar ( ) ; if ( fScannerState != SCANNER_STATE_END_OF_INPUT ) { if ( invChar >= 0 ) { reportFatalXMLError ( XMLMessages . MSG_INVALID_CHAR_IN_COMMENT , XMLMessages . P15_INVALID_CHARACTER , Integer . toHexString ( invChar ) ) ; } } } } } restoreScannerState ( previousState ) ; } void scanPI ( int piTarget ) throws Exception { String piTargetString = fStringPool . toString ( piTarget ) ; if ( piTargetString . length ( ) == 3 && ( piTargetString . charAt ( 0 ) == 'X' || piTargetString . charAt ( 0 ) == 'x' ) && ( piTargetString . charAt ( 1 ) == 'M' || piTargetString . charAt ( 1 ) == 'm' ) && ( piTargetString . charAt ( 2 ) == 'L' || piTargetString . charAt ( 2 ) == 'l' ) ) { abortMarkup ( XMLMessages . MSG_RESERVED_PITARGET , XMLMessages . P17_RESERVED_PITARGET ) ; return ; } int prevState = setScannerState ( SCANNER_STATE_PI ) ; int piDataOffset = - 1 ; int piDataLength = - 1 ; if ( ! fEntityReader . lookingAtSpace ( true ) ) { if ( ! fEntityReader . lookingAtChar ( '?' , true ) || ! fEntityReader . lookingAtChar ( '>' , true ) ) { if ( fScannerState != SCANNER_STATE_END_OF_INPUT ) { abortMarkup ( XMLMessages . MSG_SPACE_REQUIRED_IN_PI , XMLMessages . P16_WHITESPACE_REQUIRED ) ; restoreScannerState ( prevState ) ; } return ; } piDataLength = 0 ; } else { fEntityReader . skipPastSpaces ( ) ; piDataOffset = fEntityReader . currentOffset ( ) ; while ( fScannerState == SCANNER_STATE_PI ) { while ( fEntityReader . lookingAtChar ( '?' , false ) ) { int offset = fEntityReader . currentOffset ( ) ; fEntityReader . lookingAtChar ( '?' , true ) ; if ( fEntityReader . lookingAtChar ( '>' , true ) ) { piDataLength = offset - piDataOffset ; break ; } } if ( piDataLength >= 0 ) break ; if ( ! fEntityReader . lookingAtValidChar ( true ) ) { int invChar = fEntityReader . scanInvalidChar ( ) ; if ( fScannerState != SCANNER_STATE_END_OF_INPUT ) { if ( invChar >= 0 ) { reportFatalXMLError ( XMLMessages . MSG_INVALID_CHAR_IN_PI , XMLMessages . P16_INVALID_CHARACTER , Integer . toHexString ( invChar ) ) ; } skipPastEndOfCurrentMarkup ( ) ; restoreScannerState ( prevState ) ; } return ; } } } fScannerMarkupDepth -- ; restoreScannerState ( prevState ) ; int piData = piDataLength == 0 ? StringPool . EMPTY_STRING : fEntityReader . addString ( piDataOffset , piDataLength ) ; fEventHandler . callProcessingInstruction ( piTarget , piData ) ; } public void setNamespacesEnabled ( boolean enabled ) { fNamespacesEnabled = enabled ; } public boolean getNamespacesEnabled ( ) { return fNamespacesEnabled ; } public void setValidationEnabled ( boolean enabled ) { fValidationEnabled = enabled ; if ( fDTDScanner != null ) { fDTDScanner . setValidationEnabled ( enabled ) ; } } public boolean getValidationEnabled ( ) { return fValidationEnabled ; } public void setLoadExternalDTD ( boolean enabled ) { fLoadExternalDTD = enabled ; if ( fDTDScanner != null ) { fDTDScanner . setLoadExternalDTD ( enabled ) ; } } public boolean getLoadExternalDTD ( ) { return fLoadExternalDTD ; } private void scanElementType ( XMLEntityHandler . EntityReader entityReader , char fastchar , QName element ) throws Exception { if ( ! fNamespacesEnabled ) { element . clear ( ) ; element . localpart = entityReader . scanName ( fastchar ) ; element . rawname = element . localpart ; } else { entityReader . scanQName ( fastchar , element ) ; if ( entityReader . lookingAtChar ( ':' , false ) ) { fErrorReporter . reportError ( fErrorReporter . getLocator ( ) , XMLMessages . XML_DOMAIN , XMLMessages . MSG_TWO_COLONS_IN_QNAME , XMLMessages . P5_INVALID_CHARACTER , null , XMLErrorReporter . ERRORTYPE_FATAL_ERROR ) ; entityReader . skipPastNmtoken ( ' ' ) ; } } fEventHandler . element ( element ) ; } private boolean scanExpectedElementType ( XMLEntityHandler . EntityReader entityReader , char fastchar , int elementType ) throws Exception { if ( fCurrentElementCharArrayRange == null ) { fCurrentElementCharArrayRange = fStringPool . createCharArrayRange ( ) ; } fStringPool . getCharArrayRange ( elementType , fCurrentElementCharArrayRange ) ; return entityReader . scanExpectedName ( fastchar , fCurrentElementCharArrayRange ) ; } private void scanAttributeName ( XMLEntityHandler . EntityReader entityReader , QName element , QName attribute ) throws Exception { if ( ! fNamespacesEnabled ) { attribute . clear ( ) ; attribute . localpart = entityReader . scanName ( '=' ) ; attribute . rawname = attribute . localpart ; } else { entityReader . scanQName ( '=' , attribute ) ; if ( entityReader . lookingAtChar ( ':' , false ) ) { fErrorReporter . reportError ( fErrorReporter . getLocator ( ) , XMLMessages . XML_DOMAIN , XMLMessages . MSG_TWO_COLONS_IN_QNAME , XMLMessages . P5_INVALID_CHARACTER , null , XMLErrorReporter . ERRORTYPE_FATAL_ERROR ) ; entityReader . skipPastNmtoken ( ' ' ) ; } } } private void scanDoctypeDecl ( boolean standalone ) throws Exception { fScanningDTD = true ; fSeenDoctypeDecl = true ; if ( fDTDScanner == null ) { fDTDScanner = new XMLDTDScanner ( fStringPool , fErrorReporter , fEntityHandler , new ChunkyCharArray ( fStringPool ) ) ; fDTDScanner . setValidationEnabled ( fValidationEnabled ) ; fDTDScanner . setNamespacesEnabled ( fNamespacesEnabled ) ; fDTDScanner . setLoadExternalDTD ( fLoadExternalDTD ) ; } else { fDTDScanner . reset ( fStringPool , new ChunkyCharArray ( fStringPool ) ) ; } fDTDScanner . setDTDHandler ( fDTDHandler ) ; fDTDScanner . setGrammarResolver ( fGrammarResolver ) ; if ( fDTDScanner . scanDoctypeDecl ( ) ) { if ( fDTDScanner . getReadingExternalEntity ( ) ) { fDTDScanner . scanDecls ( true ) ; } } if ( fValidationEnabled ) { ( ( DefaultEntityHandler ) fEntityHandler ) . checkRequiredNotations ( ) ; } fScanningDTD = false ; } private int scanAttValue ( QName element , QName attribute ) throws Exception { int attValue = scanAttValue ( element , attribute , fValidationEnabled ) ; if ( attValue == - 1 ) { return XMLDocumentScanner . RESULT_FAILURE ; } return XMLDocumentScanner . RESULT_SUCCESS ; } private boolean validVersionNum ( String version ) { return XMLCharacterProperties . validVersionNum ( version ) ; } private boolean validEncName ( String encoding ) { return XMLCharacterProperties . validEncName ( encoding ) ; } } 	1	['47', '1', '0', '23', '111', '677', '7', '17', '18', '0.944317315', '2575', '0.070175439', '15', '0', '0.150724638', '0', '0', '52.57446809', '2', '1.0426', '1']
package org . apache . wml . dom ; import org . apache . wml . * ; public class WMLAElementImpl extends WMLElementImpl implements WMLAElement { public WMLAElementImpl ( WMLDocumentImpl owner , String tagName ) { super ( owner , tagName ) ; } public void setHref ( String newValue ) { setAttribute ( "href" , newValue ) ; } public String getHref ( ) { return getAttribute ( "href" ) ; } public void setClassName ( String newValue ) { setAttribute ( "class" , newValue ) ; } public String getClassName ( ) { return getAttribute ( "class" ) ; } public void setXmlLang ( String newValue ) { setAttribute ( "xml:lang" , newValue ) ; } public String getXmlLang ( ) { return getAttribute ( "xml:lang" ) ; } public void setTitle ( String newValue ) { setAttribute ( "title" , newValue ) ; } public String getTitle ( ) { return getAttribute ( "title" ) ; } public void setId ( String newValue ) { setAttribute ( "id" , newValue ) ; } public String getId ( ) { return getAttribute ( "id" ) ; } } 	0	['11', '4', '0', '3', '14', '55', '0', '3', '11', '2', '61', '0', '0', '0.891304348', '0.545454545', '1', '6', '4.545454545', '1', '0.9091', '0']
package org . apache . xerces . dom ; import org . w3c . dom . Node ; public interface DeferredNode extends Node { public int getNodeIndex ( ) ; } 	1	['1', '1', '0', '16', '1', '0', '16', '0', '1', '2', '1', '0', '0', '0', '1', '0', '0', '0', '1', '1', '2']
package org . xml . sax ; import java . io . IOException ; public interface EntityResolver { public abstract InputSource resolveEntity ( String publicId , String systemId ) throws SAXException , IOException ; } 	0	['1', '1', '0', '0', '1', '0', '0', '0', '1', '2', '1', '0', '0', '0', '1', '0', '0', '0', '1', '1', '0']
package org . apache . xerces . dom ; import org . apache . xerces . utils . StringPool ; import org . w3c . dom . * ; public class DeferredNotationImpl extends NotationImpl implements DeferredNode { static final long serialVersionUID = 5705337172887990848L ; protected transient int fNodeIndex ; DeferredNotationImpl ( DeferredDocumentImpl ownerDocument , int nodeIndex ) { super ( ownerDocument , null ) ; fNodeIndex = nodeIndex ; needsSyncData ( true ) ; } public int getNodeIndex ( ) { return fNodeIndex ; } protected void synchronizeData ( ) { needsSyncData ( false ) ; DeferredDocumentImpl ownerDocument = ( DeferredDocumentImpl ) this . ownerDocument ( ) ; name = ownerDocument . getNodeNameString ( fNodeIndex ) ; StringPool pool = ownerDocument . getStringPool ( ) ; int extraDataIndex = ownerDocument . getNodeValue ( fNodeIndex ) ; ownerDocument . getNodeType ( extraDataIndex ) ; publicId = pool . toString ( ownerDocument . getNodeName ( extraDataIndex ) ) ; systemId = pool . toString ( ownerDocument . getNodeValue ( extraDataIndex ) ) ; } } 	1	['3', '3', '0', '5', '12', '0', '1', '5', '1', '0.75', '59', '0.5', '0', '0.961538462', '0.555555556', '2', '3', '18', '1', '0.6667', '2']
package org . xml . sax . ext ; import org . xml . sax . SAXException ; public interface DeclHandler { public abstract void elementDecl ( String name , String model ) throws SAXException ; public abstract void attributeDecl ( String eName , String aName , String type , String valueDefault , String value ) throws SAXException ; public abstract void internalEntityDecl ( String name , String value ) throws SAXException ; public abstract void externalEntityDecl ( String name , String publicId , String systemId ) throws SAXException ; } 	0	['4', '1', '0', '0', '4', '6', '0', '0', '4', '2', '4', '0', '0', '0', '1', '0', '0', '0', '1', '1', '0']
package org . apache . xerces . dom ; import org . w3c . dom . * ; public class DeferredTextImpl extends TextImpl implements DeferredNode { static final long serialVersionUID = 2310613872100393425L ; protected transient int fNodeIndex ; DeferredTextImpl ( DeferredDocumentImpl ownerDocument , int nodeIndex ) { super ( ownerDocument , null ) ; fNodeIndex = nodeIndex ; needsSyncData ( true ) ; } public int getNodeIndex ( ) { return fNodeIndex ; } protected void synchronizeData ( ) { needsSyncData ( false ) ; DeferredDocumentImpl ownerDocument = ( DeferredDocumentImpl ) this . ownerDocument ( ) ; data = ownerDocument . getNodeValueString ( fNodeIndex ) ; isIgnorableWhitespace ( ownerDocument . getLastChild ( fNodeIndex ) == 1 ) ; } } 	1	['3', '4', '0', '4', '9', '0', '1', '4', '1', '0.75', '44', '0.5', '0', '0.967741935', '0.555555556', '3', '12', '13', '2', '1', '2']
package org . apache . html . dom ; import org . w3c . dom . * ; import org . w3c . dom . html . * ; public class HTMLHeadingElementImpl extends HTMLElementImpl implements HTMLHeadingElement { public String getAlign ( ) { return getCapitalized ( "align" ) ; } public void setAlign ( String align ) { setAttribute ( "align" , align ) ; } public HTMLHeadingElementImpl ( HTMLDocumentImpl owner , String name ) { super ( owner , name ) ; } } 	0	['3', '4', '0', '2', '6', '3', '0', '2', '3', '2', '17', '0', '0', '0.979166667', '0.666666667', '0', '0', '4.666666667', '1', '0.6667', '0']
package org . apache . xerces . validators . schema ; public final class SchemaSymbols { public static final String URI_XSI = "http://www.w3.org/2000/10/XMLSchema-instance" ; public static final String URI_SCHEMAFORSCHEMA = "http://www.w3.org/2000/10/XMLSchema" ; public static final String XSI_SCHEMALOCACTION = "schemaLocation" ; public static final String XSI_NONAMESPACESCHEMALOCACTION = "noNamespaceSchemaLocation" ; public static final String XSI_TYPE = "type" ; public static final String ELT_ALL = "all" ; public static final String ELT_ANNOTATION = "annotation" ; public static final String ELT_ANY = "any" ; public static final String ELT_WILDCARD = "any" ; public static final String ELT_ANYATTRIBUTE = "anyAttribute" ; public static final String ELT_ATTRIBUTE = "attribute" ; public static final String ELT_ATTRIBUTEGROUP = "attributeGroup" ; public static final String ELT_CHOICE = "choice" ; public static final String ELT_COMPLEXTYPE = "complexType" ; public static final String ELT_CONTENT = "content" ; public static final String ELT_DURATION = "duration" ; public static final String ELT_ELEMENT = "element" ; public static final String ELT_ENCODING = "encoding" ; public static final String ELT_ENUMERATION = "enumeration" ; public static final String ELT_FIELD = "field" ; public static final String ELT_WHITESPACE = "whiteSpace" ; public static final String ELT_GROUP = "group" ; public static final String ELT_IMPORT = "import" ; public static final String ELT_INCLUDE = "include" ; public static final String ELT_KEY = "key" ; public static final String ELT_KEYREF = "keyref" ; public static final String ELT_LENGTH = "length" ; public static final String ELT_MAXEXCLUSIVE = "maxExclusive" ; public static final String ELT_MAXINCLUSIVE = "maxInclusive" ; public static final String ELT_MAXLENGTH = "maxLength" ; public static final String ELT_MINEXCLUSIVE = "minExclusive" ; public static final String ELT_MININCLUSIVE = "minInclusive" ; public static final String ELT_MINLENGTH = "minLength" ; public static final String ELT_NOTATION = "notation" ; public static final String ELT_PATTERN = "pattern" ; public static final String ELT_PERIOD = "period" ; public static final String ELT_PRECISION = "precision" ; public static final String ELT_SCALE = "scale" ; public static final String ELT_SCHEMA = "schema" ; public static final String ELT_SELECTOR = "selector" ; public static final String ELT_SEQUENCE = "sequence" ; public static final String ELT_SIMPLETYPE = "simpleType" ; public static final String ELT_UNION = "union" ; public static final String ELT_LIST = "list" ; public static final String ELT_UNIQUE = "unique" ; public static final String ELT_COMPLEXCONTENT = "complexContent" ; public static final String ELT_SIMPLECONTENT = "simpleContent" ; public static final String ELT_RESTRICTION = "restriction" ; public static final String ELT_EXTENSION = "extension" ; public static final String ATT_ABSTRACT = "abstract" ; public static final String ATT_ATTRIBUTEFORMDEFAULT = "attributeFormDefault" ; public static final String ATT_BASE = "base" ; public static final String ATT_ITEMTYPE = "itemType" ; public static final String ATT_MEMBERTYPES = "memberTypes" ; public static final String ATT_BLOCK = "block" ; public static final String ATT_BLOCKDEFAULT = "blockDefault" ; public static final String ATT_CONTENT = "content" ; public static final String ATT_DEFAULT = "default" ; public static final String ATT_DERIVEDBY = "derivedBy" ; public static final String ATT_ELEMENTFORMDEFAULT = "elementFormDefault" ; public static final String ATT_SUBSTITUTIONGROUP = "substitutionGroup" ; public static final String ATT_FINAL = "final" ; public static final String ATT_FINALDEFAULT = "finalDefault" ; public static final String ATT_FIXED = "fixed" ; public static final String ATT_FORM = "form" ; public static final String ATT_MAXOCCURS = "maxOccurs" ; public static final String ATT_MINOCCURS = "minOccurs" ; public static final String ATT_NAME = "name" ; public static final String ATT_NAMESPACE = "namespace" ; public static final String ATT_NULLABLE = "nullable" ; public static final String ATT_PROCESSCONTENTS = "processContents" ; public static final String ATT_REF = "ref" ; public static final String ATT_REFER = "refer" ; public static final String ATT_SCHEMALOCATION = "schemaLocation" ; public static final String ATT_SYSTEM = "system" ; public static final String ATT_TARGETNAMESPACE = "targetNamespace" ; public static final String ATT_TYPE = "type" ; public static final String ATT_USE = "use" ; public static final String ATT_VALUE = "value" ; public static final String ATT_MIXED = "mixed" ; public static final String ATT_XPATH = "xpath" ; public static final String ATTVAL_TWOPOUNDANY = "##any" ; public static final String ATTVAL_TWOPOUNDLOCAL = "##local" ; public static final String ATTVAL_TWOPOUNDOTHER = "##other" ; public static final String ATTVAL_POUNDALL = "#all" ; public static final String ATTVAL_BASE64 = "base64" ; public static final String ATTVAL_BOOLEAN = "boolean" ; public static final String ATTVAL_DEFAULT = "default" ; public static final String ATTVAL_ELEMENTONLY = "elementOnly" ; public static final String ATTVAL_EMPTY = "empty" ; public static final String ATTVAL_EXTENSION = "extension" ; public static final String ATTVAL_FALSE = "false" ; public static final String ATTVAL_FIXED = "fixed" ; public static final String ATTVAL_HEX = "hex" ; public static final String ATTVAL_ID = "ID" ; public static final String ATTVAL_LAX = "lax" ; public static final String ATTVAL_MAXLENGTH = "maxLength" ; public static final String ATTVAL_MINLENGTH = "minLength" ; public static final String ATTVAL_MIXED = "mixed" ; public static final String ATTVAL_NCNAME = "NCName" ; public static final String ATTVAL_OPTIONAL = "optional" ; public static final String ATTVAL_PROHIBITED = "prohibited" ; public static final String ATTVAL_QNAME = "QName" ; public static final String ATTVAL_QUALIFIED = "qualified" ; public static final String ATTVAL_REQUIRED = "required" ; public static final String ATTVAL_RESTRICTION = "restriction" ; public static final String ATTVAL_SKIP = "skip" ; public static final String ATTVAL_STRING = "string" ; public static final String ATTVAL_TEXTONLY = "textOnly" ; public static final String ATTVAL_TIMEDURATION = "timeDuration" ; public static final String ATTVAL_TRUE = "true" ; public static final String ATTVAL_UNQUALIFIED = "unqualified" ; public static final String ATTVAL_URI = "uri" ; public static final String ATTVAL_URIREFERENCE = "uriReference" ; public static final String ATTVAL_SUBSTITUTIONGROUP = "substitutionGroup" ; public static final int EMPTY_SET = 0 ; public static final int EXTENSION = 1 ; public static final int RESTRICTION = 2 ; public static final int REPRODUCTION = 4 ; public static final int LIST = 8 ; public static final int ENUMERATION = 16 ; public static final int SUBSTITUTIONGROUP = 32 ; public static final int CHOICE = 0 ; public static final int SEQUENCE = 1 ; public static final int ALL = 2 ; public static final int INFINITY = - 1 ; public static final int NULLABLE = 1 ; public static final int ABSTRACT = 2 ; } 	1	['1', '1', '0', '0', '2', '0', '0', '0', '1', '2', '132', '0', '0', '0', '1', '0', '0', '3', '0', '0', '1']
package org . apache . xerces . readers ; import org . apache . xerces . framework . XMLErrorReporter ; import org . apache . xerces . utils . QName ; import org . apache . xerces . utils . StringPool ; import org . apache . xerces . utils . XMLCharacterProperties ; import org . xml . sax . Locator ; import org . xml . sax . InputSource ; import java . io . IOException ; final class StringReader extends XMLEntityReader { public static StringReader createStringReader ( XMLEntityHandler entityHandler , XMLErrorReporter errorReporter , boolean sendCharDataAsCharArray , int lineNumber , int columnNumber , int stringHandle , StringPool stringPool , boolean addEnclosingSpaces ) { StringReader reader = null ; synchronized ( StringReader . class ) { reader = fgFreeReaders ; if ( reader == null ) { return new StringReader ( entityHandler , errorReporter , sendCharDataAsCharArray , lineNumber , columnNumber , stringHandle , stringPool , addEnclosingSpaces ) ; } fgFreeReaders = reader . fNextFreeReader ; } reader . init ( entityHandler , errorReporter , sendCharDataAsCharArray , lineNumber , columnNumber , stringHandle , stringPool , addEnclosingSpaces ) ; return reader ; } private StringReader ( XMLEntityHandler entityHandler , XMLErrorReporter errorReporter , boolean sendCharDataAsCharArray , int lineNumber , int columnNumber , int stringHandle , StringPool stringPool , boolean addEnclosingSpaces ) { super ( entityHandler , errorReporter , sendCharDataAsCharArray , lineNumber , columnNumber ) ; fStringPool = stringPool ; fData = fStringPool . toString ( stringHandle ) ; fCurrentOffset = 0 ; fEndOffset = fData . length ( ) ; if ( addEnclosingSpaces ) { fMostRecentChar = ' ' ; fCurrentOffset -- ; oweTrailingSpace = hadTrailingSpace = true ; } else { fMostRecentChar = fEndOffset == 0 ? - 1 : fData . charAt ( 0 ) ; } } private void init ( XMLEntityHandler entityHandler , XMLErrorReporter errorReporter , boolean sendCharDataAsCharArray , int lineNumber , int columnNumber , int stringHandle , StringPool stringPool , boolean addEnclosingSpaces ) { super . init ( entityHandler , errorReporter , sendCharDataAsCharArray , lineNumber , columnNumber ) ; fStringPool = stringPool ; fData = fStringPool . toString ( stringHandle ) ; fCurrentOffset = 0 ; fEndOffset = fData . length ( ) ; fNextFreeReader = null ; if ( addEnclosingSpaces ) { fMostRecentChar = ' ' ; fCurrentOffset -- ; oweTrailingSpace = hadTrailingSpace = true ; } else { fMostRecentChar = fEndOffset == 0 ? - 1 : fData . charAt ( 0 ) ; oweTrailingSpace = hadTrailingSpace = false ; } } public int addString ( int offset , int length ) { if ( length == 0 ) return 0 ; return fStringPool . addString ( fData . substring ( offset , offset + length ) ) ; } public int addSymbol ( int offset , int length ) { if ( length == 0 ) return 0 ; return fStringPool . addSymbol ( fData . substring ( offset , offset + length ) ) ; } public void append ( XMLEntityHandler . CharBuffer charBuffer , int offset , int length ) { boolean addSpace = false ; for ( int i = 0 ; i < length ; i ++ ) { try { charBuffer . append ( fData . charAt ( offset ++ ) ) ; } catch ( StringIndexOutOfBoundsException ex ) { if ( offset == fEndOffset + 1 && hadTrailingSpace ) { charBuffer . append ( ' ' ) ; } else { System . err . println ( "StringReader.append()" ) ; throw ex ; } } } } private int loadNextChar ( ) { if ( ++ fCurrentOffset >= fEndOffset ) { if ( oweTrailingSpace ) { oweTrailingSpace = false ; fMostRecentChar = ' ' ; } else { fMostRecentChar = - 1 ; } } else { fMostRecentChar = fData . charAt ( fCurrentOffset ) ; } return fMostRecentChar ; } public XMLEntityHandler . EntityReader changeReaders ( ) throws Exception { XMLEntityHandler . EntityReader nextReader = super . changeReaders ( ) ; synchronized ( StringReader . class ) { fNextFreeReader = fgFreeReaders ; fgFreeReaders = this ; } return nextReader ; } public boolean lookingAtChar ( char chr , boolean skipPastChar ) throws Exception { int ch = fMostRecentChar ; if ( ch != chr ) { if ( ch == - 1 ) { return changeReaders ( ) . lookingAtChar ( chr , skipPastChar ) ; } return false ; } if ( skipPastChar ) { if ( ++ fCurrentOffset >= fEndOffset ) { if ( oweTrailingSpace ) { oweTrailingSpace = false ; fMostRecentChar = ' ' ; } else { fMostRecentChar = - 1 ; } } else { fMostRecentChar = fData . charAt ( fCurrentOffset ) ; } } return true ; } public boolean lookingAtValidChar ( boolean skipPastChar ) throws Exception { int ch = fMostRecentChar ; if ( ch < 0xD800 ) { if ( ch < 0x20 && ch != 0x09 && ch != 0x0A && ch != 0x0D ) { if ( ch == - 1 ) return changeReaders ( ) . lookingAtValidChar ( skipPastChar ) ; return false ; } if ( skipPastChar ) { if ( ++ fCurrentOffset >= fEndOffset ) { if ( oweTrailingSpace ) { oweTrailingSpace = false ; fMostRecentChar = ' ' ; } else { fMostRecentChar = - 1 ; } } else { fMostRecentChar = fData . charAt ( fCurrentOffset ) ; } } return true ; } if ( ch > 0xFFFD ) { return false ; } if ( ch < 0xDC00 ) { if ( fCurrentOffset + 1 >= fEndOffset ) { return false ; } ch = fData . charAt ( fCurrentOffset + 1 ) ; if ( ch < 0xDC00 || ch >= 0xE000 ) { return false ; } else if ( ! skipPastChar ) { return true ; } else { fCurrentOffset ++ ; } } else if ( ch < 0xE000 ) { return false ; } if ( skipPastChar ) { if ( ++ fCurrentOffset >= fEndOffset ) { if ( oweTrailingSpace ) { oweTrailingSpace = false ; fMostRecentChar = ' ' ; } else { fMostRecentChar = - 1 ; } } else { fMostRecentChar = fData . charAt ( fCurrentOffset ) ; } } return true ; } public boolean lookingAtSpace ( boolean skipPastChar ) throws Exception { int ch = fMostRecentChar ; if ( ch > 0x20 ) return false ; if ( ch == 0x20 || ch == 0x0A || ch == 0x0D || ch == 0x09 ) { if ( skipPastChar ) { loadNextChar ( ) ; } return true ; } if ( ch == - 1 ) { return changeReaders ( ) . lookingAtSpace ( skipPastChar ) ; } return false ; } public void skipToChar ( char chr ) throws Exception { int ch = fMostRecentChar ; while ( true ) { if ( ch == chr ) return ; if ( ch == - 1 ) { changeReaders ( ) . skipToChar ( chr ) ; return ; } ch = loadNextChar ( ) ; } } public void skipPastSpaces ( ) throws Exception { int ch = fMostRecentChar ; if ( ch == - 1 ) { changeReaders ( ) . skipPastSpaces ( ) ; return ; } while ( true ) { if ( ch > 0x20 || ( ch != 0x20 && ch != 0x0A && ch != 0x09 && ch != 0x0D ) ) { fMostRecentChar = ch ; return ; } if ( ++ fCurrentOffset >= fEndOffset ) { changeReaders ( ) . skipPastSpaces ( ) ; return ; } ch = fData . charAt ( fCurrentOffset ) ; } } public void skipPastName ( char fastcheck ) throws Exception { int ch = fMostRecentChar ; if ( ch < 0x80 ) { if ( ch == - 1 || XMLCharacterProperties . fgAsciiInitialNameChar [ ch ] == 0 ) return ; } else { if ( ! fCalledCharPropInit ) { XMLCharacterProperties . initCharFlags ( ) ; fCalledCharPropInit = true ; } if ( ( XMLCharacterProperties . fgCharFlags [ ch ] & XMLCharacterProperties . E_InitialNameCharFlag ) == 0 ) return ; } while ( true ) { ch = loadNextChar ( ) ; if ( fastcheck == ch ) return ; if ( ch < 0x80 ) { if ( ch == - 1 || XMLCharacterProperties . fgAsciiNameChar [ ch ] == 0 ) return ; } else { if ( ! fCalledCharPropInit ) { XMLCharacterProperties . initCharFlags ( ) ; fCalledCharPropInit = true ; } if ( ( XMLCharacterProperties . fgCharFlags [ ch ] & XMLCharacterProperties . E_NameCharFlag ) == 0 ) return ; } } } public void skipPastNmtoken ( char fastcheck ) throws Exception { int ch = fMostRecentChar ; while ( true ) { if ( fastcheck == ch ) return ; if ( ch < 0x80 ) { if ( ch == - 1 || XMLCharacterProperties . fgAsciiNameChar [ ch ] == 0 ) return ; } else { if ( ! fCalledCharPropInit ) { XMLCharacterProperties . initCharFlags ( ) ; fCalledCharPropInit = true ; } if ( ( XMLCharacterProperties . fgCharFlags [ ch ] & XMLCharacterProperties . E_NameCharFlag ) == 0 ) return ; } ch = loadNextChar ( ) ; } } public boolean skippedString ( char [ ] s ) throws Exception { int ch = fMostRecentChar ; if ( ch != s [ 0 ] ) { if ( ch == - 1 ) return changeReaders ( ) . skippedString ( s ) ; return false ; } if ( fCurrentOffset + s . length > fEndOffset ) return false ; for ( int i = 1 ; i < s . length ; i ++ ) { if ( fData . charAt ( fCurrentOffset + i ) != s [ i ] ) return false ; } fCurrentOffset += ( s . length - 1 ) ; loadNextChar ( ) ; return true ; } public int scanInvalidChar ( ) throws Exception { int ch = fMostRecentChar ; if ( ch == - 1 ) return changeReaders ( ) . scanInvalidChar ( ) ; loadNextChar ( ) ; return ch ; } public int scanCharRef ( boolean hex ) throws Exception { int ch = fMostRecentChar ; if ( ch == - 1 ) return changeReaders ( ) . scanCharRef ( hex ) ; int num = 0 ; if ( hex ) { if ( ch > 'f' || XMLCharacterProperties . fgAsciiXDigitChar [ ch ] == 0 ) return XMLEntityHandler . CHARREF_RESULT_INVALID_CHAR ; num = ch - ( ch < 'A' ? '0' : ( ch < 'a' ? 'A' : 'a' ) - 10 ) ; } else { if ( ch < '0' || ch > '9' ) return XMLEntityHandler . CHARREF_RESULT_INVALID_CHAR ; num = ch - '0' ; } boolean toobig = false ; while ( true ) { ch = loadNextChar ( ) ; if ( ch == - 1 ) return XMLEntityHandler . CHARREF_RESULT_SEMICOLON_REQUIRED ; if ( hex ) { if ( ch > 'f' || XMLCharacterProperties . fgAsciiXDigitChar [ ch ] == 0 ) break ; } else { if ( ch < '0' || ch > '9' ) break ; } if ( hex ) { int dig = ch - ( ch < 'A' ? '0' : ( ch < 'a' ? 'A' : 'a' ) - 10 ) ; num = ( num << 4 ) + dig ; } else { int dig = ch - '0' ; num = ( num * 10 ) + dig ; } if ( num > 0x10FFFF ) { toobig = true ; num = 0 ; } } if ( ch != ';' ) return XMLEntityHandler . CHARREF_RESULT_SEMICOLON_REQUIRED ; loadNextChar ( ) ; if ( toobig ) return XMLEntityHandler . CHARREF_RESULT_OUT_OF_RANGE ; return num ; } public int scanStringLiteral ( ) throws Exception { boolean single ; if ( ! ( single = lookingAtChar ( '\'' , true ) ) && ! lookingAtChar ( '\"' , true ) ) { return XMLEntityHandler . STRINGLIT_RESULT_QUOTE_REQUIRED ; } int offset = fCurrentOffset ; char qchar = single ? '\'' : '\"' ; while ( ! lookingAtChar ( qchar , false ) ) { if ( ! lookingAtValidChar ( true ) ) { return XMLEntityHandler . STRINGLIT_RESULT_INVALID_CHAR ; } } int stringIndex = addString ( offset , fCurrentOffset - offset ) ; lookingAtChar ( qchar , true ) ; return stringIndex ; } public int scanAttValue ( char qchar , boolean asSymbol ) throws Exception { int offset = fCurrentOffset ; while ( true ) { if ( lookingAtChar ( qchar , false ) ) { break ; } if ( lookingAtChar ( ' ' , true ) ) { continue ; } if ( lookingAtSpace ( false ) ) { return XMLEntityHandler . ATTVALUE_RESULT_COMPLEX ; } if ( lookingAtChar ( '&' , false ) ) { return XMLEntityHandler . ATTVALUE_RESULT_COMPLEX ; } if ( lookingAtChar ( '<' , false ) ) { return XMLEntityHandler . ATTVALUE_RESULT_LESSTHAN ; } if ( ! lookingAtValidChar ( true ) ) { return XMLEntityHandler . ATTVALUE_RESULT_INVALID_CHAR ; } } int result = asSymbol ? addSymbol ( offset , fCurrentOffset - offset ) : addString ( offset , fCurrentOffset - offset ) ; lookingAtChar ( qchar , true ) ; return result ; } public static final byte fgAsciiEntityValueChar [ ] = { 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 0 , 0 , 4 , 4 , 0 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 0 , 0 , 1 , 0 , 0 , 3 , 2 , 1 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 } ; public int scanEntityValue ( int qchar , boolean createString ) throws Exception { int offset = fCurrentOffset ; int ch = fMostRecentChar ; while ( true ) { if ( ch == - 1 ) { changeReaders ( ) ; return XMLEntityHandler . ENTITYVALUE_RESULT_END_OF_INPUT ; } if ( ch < 0x80 ) { switch ( fgAsciiEntityValueChar [ ch ] ) { case 1 : if ( ch == qchar ) { if ( ! createString ) return XMLEntityHandler . ENTITYVALUE_RESULT_FINISHED ; int length = fCurrentOffset - offset ; int result = length == 0 ? StringPool . EMPTY_STRING : addString ( offset , length ) ; loadNextChar ( ) ; return result ; } case 0 : if ( ++ fCurrentOffset >= fEndOffset ) { if ( oweTrailingSpace ) { oweTrailingSpace = false ; ch = fMostRecentChar = ' ' ; } else { ch = fMostRecentChar = - 1 ; } } else { ch = fMostRecentChar = fData . charAt ( fCurrentOffset ) ; } continue ; case 2 : return XMLEntityHandler . ENTITYVALUE_RESULT_REFERENCE ; case 3 : return XMLEntityHandler . ENTITYVALUE_RESULT_PEREF ; case 4 : return XMLEntityHandler . ENTITYVALUE_RESULT_INVALID_CHAR ; } } else if ( ch < 0xD800 ) { ch = loadNextChar ( ) ; } else if ( ch >= 0xE000 && ( ch <= 0xFFFD || ( ch >= 0x10000 && ch <= 0x10FFFF ) ) ) { ch = loadNextChar ( ) ; } else { return XMLEntityHandler . ENTITYVALUE_RESULT_INVALID_CHAR ; } } } public boolean scanExpectedName ( char fastcheck , StringPool . CharArrayRange expectedName ) throws Exception { int ch = fMostRecentChar ; if ( ch == - 1 ) { return changeReaders ( ) . scanExpectedName ( fastcheck , expectedName ) ; } if ( ! fCalledCharPropInit ) { XMLCharacterProperties . initCharFlags ( ) ; fCalledCharPropInit = true ; } int nameOffset = fCurrentOffset ; if ( ( XMLCharacterProperties . fgCharFlags [ ch ] & XMLCharacterProperties . E_InitialNameCharFlag ) == 0 ) return false ; while ( true ) { ch = loadNextChar ( ) ; if ( fastcheck == ch ) break ; if ( ch == - 1 ) break ; if ( ( XMLCharacterProperties . fgCharFlags [ ch ] & XMLCharacterProperties . E_NameCharFlag ) == 0 ) break ; } int nameIndex = fStringPool . addSymbol ( fData . substring ( nameOffset , fCurrentOffset ) ) ; return true ; } public void scanQName ( char fastcheck , QName qname ) throws Exception { int ch = fMostRecentChar ; if ( ch == - 1 ) { changeReaders ( ) . scanQName ( fastcheck , qname ) ; return ; } if ( ! fCalledCharPropInit ) { XMLCharacterProperties . initCharFlags ( ) ; fCalledCharPropInit = true ; } int nameOffset = fCurrentOffset ; if ( ( XMLCharacterProperties . fgCharFlags [ ch ] & XMLCharacterProperties . E_InitialNameCharFlag ) == 0 ) { qname . clear ( ) ; return ; } while ( true ) { ch = loadNextChar ( ) ; if ( fastcheck == ch ) break ; if ( ch == - 1 ) break ; if ( ( XMLCharacterProperties . fgCharFlags [ ch ] & XMLCharacterProperties . E_NameCharFlag ) == 0 ) break ; } qname . clear ( ) ; qname . rawname = fStringPool . addSymbol ( fData . substring ( nameOffset , fCurrentOffset ) ) ; int index = fData . indexOf ( ':' , nameOffset ) ; if ( index != - 1 && index < fCurrentOffset ) { qname . prefix = fStringPool . addSymbol ( fData . substring ( nameOffset , index ) ) ; int indexOfSpaceChar = fData . indexOf ( ' ' , index + 1 ) ; String localPart ; if ( indexOfSpaceChar != - 1 ) { localPart = fData . substring ( index + 1 , indexOfSpaceChar ) ; qname . localpart = fStringPool . addSymbol ( localPart ) ; } else { int lenfData = fData . length ( ) ; localPart = fData . substring ( index + 1 , lenfData ) ; qname . localpart = fStringPool . addSymbol ( localPart ) ; } qname . localpart = fStringPool . addSymbol ( localPart ) ; } else { qname . localpart = qname . rawname ; } } public int scanName ( char fastcheck ) throws Exception { int ch = fMostRecentChar ; if ( ch == - 1 ) { return changeReaders ( ) . scanName ( fastcheck ) ; } if ( ! fCalledCharPropInit ) { XMLCharacterProperties . initCharFlags ( ) ; fCalledCharPropInit = true ; } int nameOffset = fCurrentOffset ; if ( ( XMLCharacterProperties . fgCharFlags [ ch ] & XMLCharacterProperties . E_InitialNameCharFlag ) == 0 ) return - 1 ; while ( true ) { if ( ++ fCurrentOffset >= fEndOffset ) { if ( oweTrailingSpace ) { oweTrailingSpace = false ; fMostRecentChar = ' ' ; } else { fMostRecentChar = - 1 ; } break ; } ch = fMostRecentChar = fData . charAt ( fCurrentOffset ) ; if ( fastcheck == ch ) break ; if ( ( XMLCharacterProperties . fgCharFlags [ ch ] & XMLCharacterProperties . E_NameCharFlag ) == 0 ) break ; } int nameIndex = fStringPool . addSymbol ( fData . substring ( nameOffset , fCurrentOffset ) ) ; return nameIndex ; } private int recognizeMarkup ( int ch ) throws Exception { if ( ch == - 1 ) { return XMLEntityHandler . CONTENT_RESULT_MARKUP_END_OF_INPUT ; } switch ( ch ) { case '?' : loadNextChar ( ) ; return XMLEntityHandler . CONTENT_RESULT_START_OF_PI ; case '!' : ch = loadNextChar ( ) ; if ( ch == - 1 ) { fCurrentOffset -= 2 ; loadNextChar ( ) ; return XMLEntityHandler . CONTENT_RESULT_MARKUP_END_OF_INPUT ; } if ( ch == '-' ) { ch = loadNextChar ( ) ; if ( ch == - 1 ) { fCurrentOffset -= 3 ; loadNextChar ( ) ; return XMLEntityHandler . CONTENT_RESULT_MARKUP_END_OF_INPUT ; } if ( ch == '-' ) { loadNextChar ( ) ; return XMLEntityHandler . CONTENT_RESULT_START_OF_COMMENT ; } break ; } if ( ch == '[' ) { for ( int i = 0 ; i < 6 ; i ++ ) { ch = loadNextChar ( ) ; if ( ch == - 1 ) { fCurrentOffset -= ( 3 + i ) ; loadNextChar ( ) ; return XMLEntityHandler . CONTENT_RESULT_MARKUP_END_OF_INPUT ; } if ( ch != cdata_string [ i ] ) { return XMLEntityHandler . CONTENT_RESULT_MARKUP_NOT_RECOGNIZED ; } } loadNextChar ( ) ; return XMLEntityHandler . CONTENT_RESULT_START_OF_CDSECT ; } break ; case '/' : loadNextChar ( ) ; return XMLEntityHandler . CONTENT_RESULT_START_OF_ETAG ; default : return XMLEntityHandler . CONTENT_RESULT_START_OF_ELEMENT ; } return XMLEntityHandler . CONTENT_RESULT_MARKUP_NOT_RECOGNIZED ; } private int recognizeReference ( int ch ) throws Exception { if ( ch == - 1 ) { return XMLEntityHandler . CONTENT_RESULT_MARKUP_END_OF_INPUT ; } if ( ch == '#' ) { loadNextChar ( ) ; return XMLEntityHandler . CONTENT_RESULT_START_OF_CHARREF ; } else { return XMLEntityHandler . CONTENT_RESULT_START_OF_ENTITYREF ; } } public int scanContent ( QName element ) throws Exception { int ch = fMostRecentChar ; if ( ch == - 1 ) { return changeReaders ( ) . scanContent ( element ) ; } int offset = fCurrentOffset ; if ( ch < 0x80 ) { switch ( XMLCharacterProperties . fgAsciiWSCharData [ ch ] ) { case 0 : ch = loadNextChar ( ) ; break ; case 1 : ch = loadNextChar ( ) ; if ( ! fInCDSect ) { return recognizeMarkup ( ch ) ; } break ; case 2 : ch = loadNextChar ( ) ; if ( ! fInCDSect ) { return recognizeReference ( ch ) ; } break ; case 3 : ch = loadNextChar ( ) ; if ( ch == ']' && fCurrentOffset + 1 < fEndOffset && fData . charAt ( fCurrentOffset + 1 ) == '>' ) { loadNextChar ( ) ; loadNextChar ( ) ; return XMLEntityHandler . CONTENT_RESULT_END_OF_CDSECT ; } break ; case 4 : return XMLEntityHandler . CONTENT_RESULT_INVALID_CHAR ; case 5 : do { ch = loadNextChar ( ) ; if ( ch == - 1 ) { callCharDataHandler ( offset , fEndOffset , true ) ; return changeReaders ( ) . scanContent ( element ) ; } } while ( ch == 0x20 || ch == 0x0A || ch == 0x0D || ch == 0x09 ) ; if ( ch < 0x80 ) { switch ( XMLCharacterProperties . fgAsciiCharData [ ch ] ) { case 0 : ch = loadNextChar ( ) ; break ; case 1 : ch = loadNextChar ( ) ; if ( ! fInCDSect ) { callCharDataHandler ( offset , fCurrentOffset - 1 , true ) ; return recognizeMarkup ( ch ) ; } break ; case 2 : ch = loadNextChar ( ) ; if ( ! fInCDSect ) { callCharDataHandler ( offset , fCurrentOffset - 1 , true ) ; return recognizeReference ( ch ) ; } break ; case 3 : ch = loadNextChar ( ) ; if ( ch == ']' && fCurrentOffset + 1 < fEndOffset && fData . charAt ( fCurrentOffset + 1 ) == '>' ) { callCharDataHandler ( offset , fCurrentOffset - 1 , true ) ; loadNextChar ( ) ; loadNextChar ( ) ; return XMLEntityHandler . CONTENT_RESULT_END_OF_CDSECT ; } break ; case 4 : callCharDataHandler ( offset , fCurrentOffset , true ) ; return XMLEntityHandler . CONTENT_RESULT_INVALID_CHAR ; } } else { if ( ch == 0xFFFE || ch == 0xFFFF ) { callCharDataHandler ( offset , fCurrentOffset , true ) ; return XMLEntityHandler . CONTENT_RESULT_INVALID_CHAR ; } ch = loadNextChar ( ) ; } } } else { if ( ch == 0xFFFE || ch == 0xFFFF ) { callCharDataHandler ( offset , fCurrentOffset , false ) ; return XMLEntityHandler . CONTENT_RESULT_INVALID_CHAR ; } ch = loadNextChar ( ) ; } while ( true ) { if ( ch == - 1 ) { callCharDataHandler ( offset , fEndOffset , false ) ; return changeReaders ( ) . scanContent ( element ) ; } if ( ch >= 0x80 ) break ; if ( XMLCharacterProperties . fgAsciiCharData [ ch ] != 0 ) break ; ch = loadNextChar ( ) ; } while ( true ) { if ( ch < 0x80 ) { switch ( XMLCharacterProperties . fgAsciiCharData [ ch ] ) { case 0 : ch = loadNextChar ( ) ; break ; case 1 : ch = loadNextChar ( ) ; if ( ! fInCDSect ) { callCharDataHandler ( offset , fCurrentOffset - 1 , false ) ; return recognizeMarkup ( ch ) ; } break ; case 2 : ch = loadNextChar ( ) ; if ( ! fInCDSect ) { callCharDataHandler ( offset , fCurrentOffset - 1 , false ) ; return recognizeReference ( ch ) ; } break ; case 3 : ch = loadNextChar ( ) ; if ( ch == ']' && fCurrentOffset + 1 < fEndOffset && fData . charAt ( fCurrentOffset + 1 ) == '>' ) { callCharDataHandler ( offset , fCurrentOffset - 1 , false ) ; loadNextChar ( ) ; loadNextChar ( ) ; return XMLEntityHandler . CONTENT_RESULT_END_OF_CDSECT ; } break ; case 4 : callCharDataHandler ( offset , fCurrentOffset , false ) ; return XMLEntityHandler . CONTENT_RESULT_INVALID_CHAR ; } } else { if ( ch == 0xFFFE || ch == 0xFFFF ) { callCharDataHandler ( offset , fCurrentOffset , false ) ; return XMLEntityHandler . CONTENT_RESULT_INVALID_CHAR ; } ch = loadNextChar ( ) ; } if ( ch == - 1 ) { callCharDataHandler ( offset , fCurrentOffset , false ) ; return changeReaders ( ) . scanContent ( element ) ; } } } private void callCharDataHandler ( int offset , int endOffset , boolean isWhitespace ) throws Exception { int length = endOffset - offset ; if ( ! fSendCharDataAsCharArray ) { int stringIndex = addString ( offset , length ) ; if ( isWhitespace ) fCharDataHandler . processWhitespace ( stringIndex ) ; else fCharDataHandler . processCharacters ( stringIndex ) ; return ; } if ( isWhitespace ) fCharDataHandler . processWhitespace ( fData . toCharArray ( ) , offset , length ) ; else fCharDataHandler . processCharacters ( fData . toCharArray ( ) , offset , length ) ; } private static final char [ ] cdata_string = { 'C' , 'D' , 'A' , 'T' , 'A' , '[' } ; private StringPool fStringPool = null ; private String fData = null ; private int fEndOffset ; private boolean hadTrailingSpace = false ; private boolean oweTrailingSpace = false ; private int fMostRecentChar ; private StringReader fNextFreeReader = null ; private static StringReader fgFreeReaders = null ; private boolean fCalledCharPropInit = false ; } 	0	['30', '2', '0', '11', '64', '0', '1', '10', '22', '0.522988506', '2603', '0.833333333', '3', '0.2', '0.201149425', '1', '2', '85.36666667', '4', '1.3', '0']
package org . apache . xerces . utils . regex ; import java . util . Hashtable ; import java . util . Locale ; class ParserForXMLSchema extends RegexParser { public ParserForXMLSchema ( ) { } public ParserForXMLSchema ( Locale locale ) { } Token processCaret ( ) throws ParseException { this . next ( ) ; return Token . createChar ( '^' ) ; } Token processDollar ( ) throws ParseException { this . next ( ) ; return Token . createChar ( '$' ) ; } Token processLookahead ( ) throws ParseException { throw ex ( "parser.process.1" , this . offset ) ; } Token processNegativelookahead ( ) throws ParseException { throw ex ( "parser.process.1" , this . offset ) ; } Token processLookbehind ( ) throws ParseException { throw ex ( "parser.process.1" , this . offset ) ; } Token processNegativelookbehind ( ) throws ParseException { throw ex ( "parser.process.1" , this . offset ) ; } Token processBacksolidus_A ( ) throws ParseException { throw ex ( "parser.process.1" , this . offset ) ; } Token processBacksolidus_Z ( ) throws ParseException { throw ex ( "parser.process.1" , this . offset ) ; } Token processBacksolidus_z ( ) throws ParseException { throw ex ( "parser.process.1" , this . offset ) ; } Token processBacksolidus_b ( ) throws ParseException { throw ex ( "parser.process.1" , this . offset ) ; } Token processBacksolidus_B ( ) throws ParseException { throw ex ( "parser.process.1" , this . offset ) ; } Token processBacksolidus_lt ( ) throws ParseException { throw ex ( "parser.process.1" , this . offset ) ; } Token processBacksolidus_gt ( ) throws ParseException { throw ex ( "parser.process.1" , this . offset ) ; } Token processStar ( Token tok ) throws ParseException { this . next ( ) ; return Token . createClosure ( tok ) ; } Token processPlus ( Token tok ) throws ParseException { this . next ( ) ; return Token . createConcat ( tok , Token . createClosure ( tok ) ) ; } Token processQuestion ( Token tok ) throws ParseException { this . next ( ) ; Token par = Token . createUnion ( ) ; par . addChild ( tok ) ; par . addChild ( Token . createEmpty ( ) ) ; return par ; } boolean checkQuestion ( int off ) { return false ; } Token processParen ( ) throws ParseException { this . next ( ) ; Token tok = Token . createParen ( this . parseRegex ( ) , 0 ) ; if ( this . read ( ) != super . T_RPAREN ) throw ex ( "parser.factor.1" , this . offset - 1 ) ; this . next ( ) ; return tok ; } Token processParen2 ( ) throws ParseException { throw ex ( "parser.process.1" , this . offset ) ; } Token processCondition ( ) throws ParseException { throw ex ( "parser.process.1" , this . offset ) ; } Token processModifiers ( ) throws ParseException { throw ex ( "parser.process.1" , this . offset ) ; } Token processIndependent ( ) throws ParseException { throw ex ( "parser.process.1" , this . offset ) ; } Token processBacksolidus_c ( ) throws ParseException { this . next ( ) ; return this . getTokenForShorthand ( 'c' ) ; } Token processBacksolidus_C ( ) throws ParseException { this . next ( ) ; return this . getTokenForShorthand ( 'C' ) ; } Token processBacksolidus_i ( ) throws ParseException { this . next ( ) ; return this . getTokenForShorthand ( 'i' ) ; } Token processBacksolidus_I ( ) throws ParseException { this . next ( ) ; return this . getTokenForShorthand ( 'I' ) ; } Token processBacksolidus_g ( ) throws ParseException { throw this . ex ( "parser.process.1" , this . offset - 2 ) ; } Token processBacksolidus_X ( ) throws ParseException { throw ex ( "parser.process.1" , this . offset - 2 ) ; } Token processBackreference ( ) throws ParseException { throw ex ( "parser.process.1" , this . offset - 4 ) ; } int processCIinCharacterClass ( RangeToken tok , int c ) { tok . mergeRanges ( this . getTokenForShorthand ( c ) ) ; return - 1 ; } protected RangeToken parseCharacterClass ( boolean useNrange ) throws ParseException { this . setContext ( S_INBRACKETS ) ; this . next ( ) ; boolean nrange = false ; RangeToken base = null ; RangeToken tok ; if ( this . read ( ) == T_CHAR && this . chardata == '^' ) { nrange = true ; this . next ( ) ; base = Token . createRange ( ) ; base . addRange ( 0 , Token . UTF16_MAX ) ; tok = Token . createRange ( ) ; } else { tok = Token . createRange ( ) ; } int type ; boolean firstloop = true ; while ( ( type = this . read ( ) ) != T_EOF ) { if ( type == T_CHAR && this . chardata == ']' && ! firstloop ) { if ( nrange ) { base . subtractRanges ( tok ) ; tok = base ; } break ; } int c = this . chardata ; boolean end = false ; if ( type == T_BACKSOLIDUS ) { switch ( c ) { case 'd' : case 'D' : case 'w' : case 'W' : case 's' : case 'S' : tok . mergeRanges ( this . getTokenForShorthand ( c ) ) ; end = true ; break ; case 'i' : case 'I' : case 'c' : case 'C' : c = this . processCIinCharacterClass ( tok , c ) ; if ( c < 0 ) end = true ; break ; case 'p' : case 'P' : int pstart = this . offset ; RangeToken tok2 = this . processBacksolidus_pP ( c ) ; if ( tok2 == null ) throw this . ex ( "parser.atom.5" , pstart ) ; tok . mergeRanges ( tok2 ) ; end = true ; break ; default : c = this . decodeEscaped ( ) ; } } else if ( type == T_XMLSCHEMA_CC_SUBTRACTION && ! firstloop ) { if ( nrange ) { base . subtractRanges ( tok ) ; tok = base ; } RangeToken range2 = this . parseCharacterClass ( false ) ; tok . subtractRanges ( range2 ) ; if ( this . read ( ) != T_CHAR || this . chardata != ']' ) throw this . ex ( "parser.cc.5" , this . offset ) ; break ; } this . next ( ) ; if ( ! end ) { if ( type == T_CHAR ) { if ( c == '[' ) throw this . ex ( "parser.cc.6" , this . offset - 2 ) ; if ( c == ']' ) throw this . ex ( "parser.cc.7" , this . offset - 2 ) ; } if ( this . read ( ) != T_CHAR || this . chardata != '-' ) { tok . addRange ( c , c ) ; } else { this . next ( ) ; if ( ( type = this . read ( ) ) == T_EOF ) throw this . ex ( "parser.cc.2" , this . offset ) ; if ( type == T_CHAR && this . chardata == ']' ) { tok . addRange ( c , c ) ; tok . addRange ( '-' , '-' ) ; } else if ( type == T_XMLSCHEMA_CC_SUBTRACTION ) { tok . addRange ( c , c ) ; tok . addRange ( '-' , '-' ) ; } else { int rangeend = this . chardata ; if ( type == T_CHAR ) { if ( rangeend == '[' ) throw this . ex ( "parser.cc.6" , this . offset - 1 ) ; if ( rangeend == ']' ) throw this . ex ( "parser.cc.7" , this . offset - 1 ) ; } if ( type == T_BACKSOLIDUS ) rangeend = this . decodeEscaped ( ) ; this . next ( ) ; tok . addRange ( c , rangeend ) ; } } } firstloop = false ; } if ( this . read ( ) == T_EOF ) throw this . ex ( "parser.cc.2" , this . offset ) ; tok . sortRanges ( ) ; tok . compactRanges ( ) ; this . setContext ( S_NORMAL ) ; this . next ( ) ; return tok ; } protected RangeToken parseSetOperations ( ) throws ParseException { throw this . ex ( "parser.process.1" , this . offset ) ; } Token getTokenForShorthand ( int ch ) { switch ( ch ) { case 'd' : return ParserForXMLSchema . getRange ( "xml:isDigit" , true ) ; case 'D' : return ParserForXMLSchema . getRange ( "xml:isDigit" , false ) ; case 'w' : return ParserForXMLSchema . getRange ( "xml:isWord" , true ) ; case 'W' : return ParserForXMLSchema . getRange ( "xml:isWord" , false ) ; case 's' : return ParserForXMLSchema . getRange ( "xml:isSpace" , true ) ; case 'S' : return ParserForXMLSchema . getRange ( "xml:isSpace" , false ) ; case 'c' : return ParserForXMLSchema . getRange ( "xml:isNameChar" , true ) ; case 'C' : return ParserForXMLSchema . getRange ( "xml:isNameChar" , false ) ; case 'i' : return ParserForXMLSchema . getRange ( "xml:isInitialNameChar" , true ) ; case 'I' : return ParserForXMLSchema . getRange ( "xml:isInitialNameChar" , false ) ; default : throw new RuntimeException ( "Internal Error: shorthands: \\u" + Integer . toString ( ch , 16 ) ) ; } } int decodeEscaped ( ) throws ParseException { if ( this . read ( ) != T_BACKSOLIDUS ) throw ex ( "parser.next.1" , this . offset - 1 ) ; int c = this . chardata ; switch ( c ) { case 'n' : c = '\n' ; break ; case 'r' : c = '\r' ; break ; case 't' : c = '\t' ; break ; case 'e' : case 'f' : case 'x' : case 'u' : case 'v' : throw ex ( "parser.process.1" , this . offset - 2 ) ; case 'A' : case 'Z' : case 'z' : throw ex ( "parser.descape.5" , this . offset - 2 ) ; default : } return c ; } static protected Hashtable ranges = null ; static protected Hashtable ranges2 = null ; static synchronized protected RangeToken getRange ( String name , boolean positive ) { if ( ranges == null ) { ranges = new Hashtable ( ) ; ranges2 = new Hashtable ( ) ; Token tok = Token . createRange ( ) ; setupRange ( tok , SPACES ) ; ranges . put ( "xml:isSpace" , tok ) ; ranges2 . put ( "xml:isSpace" , Token . complementRanges ( tok ) ) ; tok = Token . createRange ( ) ; setupRange ( tok , DIGITS ) ; ranges . put ( "xml:isDigit" , tok ) ; ranges2 . put ( "xml:isDigit" , Token . complementRanges ( tok ) ) ; tok = Token . createRange ( ) ; setupRange ( tok , DIGITS ) ; ranges . put ( "xml:isDigit" , tok ) ; ranges2 . put ( "xml:isDigit" , Token . complementRanges ( tok ) ) ; tok = Token . createRange ( ) ; setupRange ( tok , LETTERS ) ; tok . mergeRanges ( ( Token ) ranges . get ( "xml:isDigit" ) ) ; ranges . put ( "xml:isWord" , tok ) ; ranges2 . put ( "xml:isWord" , Token . complementRanges ( tok ) ) ; tok = Token . createRange ( ) ; setupRange ( tok , NAMECHARS ) ; ranges . put ( "xml:isNameChar" , tok ) ; ranges2 . put ( "xml:isNameChar" , Token . complementRanges ( tok ) ) ; tok = Token . createRange ( ) ; setupRange ( tok , LETTERS ) ; tok . addRange ( '_' , '_' ) ; tok . addRange ( ':' , ':' ) ; ranges . put ( "xml:isInitialNameChar" , tok ) ; ranges2 . put ( "xml:isInitialNameChar" , Token . complementRanges ( tok ) ) ; } RangeToken tok = positive ? ( RangeToken ) ranges . get ( name ) : ( RangeToken ) ranges2 . get ( name ) ; return tok ; } static void setupRange ( Token range , String src ) { int len = src . length ( ) ; for ( int i = 0 ; i < len ; i += 2 ) range . addRange ( src . charAt ( i ) , src . charAt ( i + 1 ) ) ; } private static final String SPACES = "\t\n\r\r  " ; private static final String NAMECHARS = "-.0:AZ__az··ÀÖ" + "ØöøıĴľŁňŊžƀǃǍǰ" + "ǴǵǺȗɐʨʻˁːˑ̀͠͡ͅ" + "ΆΊΌΌΎΡΣώϐϖϚϚϜϜ" + "ϞϞϠϠϢϳЁЌЎяёќўҁ" + "҃҆ҐӄӇӈӋӌӐӫӮӵӸӹ" + "ԱՖՙՙաֆֹֻֽֿֿ֑֣֡" + "ׁׂׄׄאתװײءغـْ٠٩" + "ٰڷںھۀێېۓە۪ۭۨ۰۹" + "ँःअह़्॑॔क़ॣ०९ঁঃ" + "অঌএঐওনপরললশহ়়" + "াৄেৈো্ৗৗড়ঢ়য়ৣ০ৱ" + "ਂਂਅਊਏਐਓਨਪਰਲਲ਼ਵਸ਼" + "ਸਹ਼਼ਾੂੇੈੋ੍ਖ਼ੜਫ਼ਫ਼" + "੦ੴઁઃઅઋઍઍએઑઓનપર" + "લળવહ઼ૅેૉો્ૠૠ૦૯" + "ଁଃଅଌଏଐଓନପରଲଳଶହ" + "଼ୃେୈୋ୍ୖୗଡ଼ଢ଼ୟୡ୦୯" + "ஂஃஅஊஎஐஒகஙசஜஜஞட" + "ணதநபமவஷஹாூெைொ்" + "ௗௗ௧௯ఁఃఅఌఎఐఒనపళ" + "వహాౄెైొ్ౕౖౠౡ౦౯" + "ಂಃಅಌಎಐಒನಪಳವಹಾೄ" + "ೆೈೊ್ೕೖೞೞೠೡ೦೯ംഃ" + "അഌഎഐഒനപഹാൃെൈൊ്" + "ൗൗൠൡ൦൯กฮะฺเ๎๐๙" + "ກຂຄຄງຈຊຊຍຍດທນຟ" + "ມຣລລວວສຫອຮະູົຽ" + "ເໄໆໆ່ໍ໐໙༘༙༠༩༵༵" + "༹༹༷༷༾ཇཉཀྵ྄ཱ྆ྋྐྕ" + "ྗྗྙྭྱྷྐྵྐྵႠჅაჶᄀᄀ" + "ᄂᄃᄅᄇᄉᄉᄋᄌᄎᄒᄼᄼᄾᄾ" + "ᅀᅀᅌᅌᅎᅎᅐᅐᅔᅕᅙᅙᅟᅡ" + "ᅣᅣᅥᅥᅧᅧᅩᅩᅭᅮᅲᅳᅵᅵ" + "ᆞᆞᆨᆨᆫᆫᆮᆯᆷᆸᆺᆺᆼᇂ" + "ᇫᇫᇰᇰᇹᇹḀẛẠỹἀἕἘἝ" + "ἠὅὈὍὐὗὙὙὛὛὝὝὟώ" + "ᾀᾴᾶᾼιιῂῄῆῌῐΐῖΊ" + "ῠῬῲῴῶῼ⃐⃜⃡⃡ΩΩKÅ" + "℮℮ↀↂ々々〇〇〡〯〱〵ぁゔ" + "゙゚ゝゞァヺーヾㄅㄬ一龥가힣" + "" ; private static final String LETTERS = "AZazÀÖØöøıĴľŁň" + "ŊžƀǃǍǰǴǵǺȗɐʨʻˁ" + "ΆΆΈΊΌΌΎΡΣώϐϖϚϚ" + "ϜϜϞϞϠϠϢϳЁЌЎяёќ" + "ўҁҐӄӇӈӋӌӐӫӮӵӸӹ" + "ԱՖՙՙաֆאתװײءغفي" + "ٱڷںھۀێېۓەەۥۦअह" + "ऽऽक़ॡঅঌএঐওনপরলল" + "শহড়ঢ়য়ৡৰৱਅਊਏਐਓਨ" + "ਪਰਲਲ਼ਵਸ਼ਸਹਖ਼ੜਫ਼ਫ਼ੲੴ" + "અઋઍઍએઑઓનપરલળવહ" + "ઽઽૠૠଅଌଏଐଓନପରଲଳ" + "ଶହଽଽଡ଼ଢ଼ୟୡஅஊஎஐஒக" + "ஙசஜஜஞடணதநபமவஷஹ" + "అఌఎఐఒనపళవహౠౡಅಌ" + "ಎಐಒನಪಳವಹೞೞೠೡഅഌ" + "എഐഒനപഹൠൡกฮะะาำ" + "เๅກຂຄຄງຈຊຊຍຍດທ" + "ນຟມຣລລວວສຫອຮະະ" + "າຳຽຽເໄཀཇཉཀྵႠჅაჶ" + "ᄀᄀᄂᄃᄅᄇᄉᄉᄋᄌᄎᄒᄼᄼ" + "ᄾᄾᅀᅀᅌᅌᅎᅎᅐᅐᅔᅕᅙᅙ" + "ᅟᅡᅣᅣᅥᅥᅧᅧᅩᅩᅭᅮᅲᅳ" + "ᅵᅵᆞᆞᆨᆨᆫᆫᆮᆯᆷᆸᆺᆺ" + "ᆼᇂᇫᇫᇰᇰᇹᇹḀẛẠỹἀἕ" + "ἘἝἠὅὈὍὐὗὙὙὛὛὝὝ" + "Ὗώᾀᾴᾶᾼιιῂῄῆῌῐΐ" + "ῖΊῠῬῲῴῶῼΩΩKÅ℮℮" + "ↀↂ〇〇〡〩ぁゔァヺㄅㄬ一龥" + "가힣" ; private static final String DIGITS = "09٠٩۰۹०९০৯੦੯૦૯" + "୦୯௧௯౦౯೦೯൦൯๐๙໐໙" + "༠༩" ; } 	1	['39', '2', '0', '10', '72', '277', '1', '9', '2', '1', '804', '1', '0', '0.571428571', '0.184210526', '1', '12', '19.46153846', '12', '1.5641', '1']
package org . xml . sax ; public interface ContentHandler { public void setDocumentLocator ( Locator locator ) ; public void startDocument ( ) throws SAXException ; public void endDocument ( ) throws SAXException ; public void startPrefixMapping ( String prefix , String uri ) throws SAXException ; public void endPrefixMapping ( String prefix ) throws SAXException ; public void startElement ( String namespaceURI , String localName , String qName , Attributes atts ) throws SAXException ; public void endElement ( String namespaceURI , String localName , String qName ) throws SAXException ; public void characters ( char ch [ ] , int start , int length ) throws SAXException ; public void ignorableWhitespace ( char ch [ ] , int start , int length ) throws SAXException ; public void processingInstruction ( String target , String data ) throws SAXException ; public void skippedEntity ( String name ) throws SAXException ; } 	0	['11', '1', '0', '0', '11', '55', '0', '0', '11', '2', '11', '0', '0', '0', '0.348484848', '0', '0', '0', '1', '1', '0']
package org . apache . xerces . jaxp ; import javax . xml . parsers . ParserConfigurationException ; import javax . xml . parsers . DocumentBuilder ; import javax . xml . parsers . DocumentBuilderFactory ; import org . xml . sax . SAXException ; public class DocumentBuilderFactoryImpl extends DocumentBuilderFactory { public DocumentBuilderFactoryImpl ( ) { super ( ) ; } public DocumentBuilder newDocumentBuilder ( ) throws ParserConfigurationException { return ( new DocumentBuilderImpl ( this . isNamespaceAware ( ) , this . isValidating ( ) ) ) ; } public void setAttribute ( String name , Object value ) throws IllegalArgumentException { throw new IllegalArgumentException ( "No attributes are implemented" ) ; } public Object getAttribute ( String name ) throws IllegalArgumentException { throw new IllegalArgumentException ( "No attributes are implemented" ) ; } } 	1	['4', '2', '0', '1', '9', '6', '0', '1', '4', '2', '25', '0', '0', '0.884615385', '0.583333333', '0', '0', '5.25', '1', '0.75', '3']
package org . w3c . dom . html ; import org . w3c . dom . DOMImplementation ; public interface HTMLDOMImplementation extends DOMImplementation { public HTMLDocument createHTMLDocument ( String title ) ; } 	0	['1', '1', '0', '0', '1', '0', '0', '0', '1', '2', '1', '0', '0', '0', '1', '0', '0', '0', '1', '1', '0']
package org . apache . xerces . msg ; import java . util . ListResourceBundle ; public class SchemaMessages extends ListResourceBundle { public static final Object CONTENTS [ ] [ ] = { { "BadMajorCode" , "The majorCode parameter to createMessage was out of bounds." } , { "FormatFailed" , "An internal error occurred while formatting the following message:\n  " } , { "NoValidatorFor" , "No validator for datatype {0}" } , { "IncorrectDatatype" , "Incorrect datatype: {0}" } , { "NotADatatype" , "{0} is not a datatype." } , { "TextOnlyContentWithType" , "The content attribute must be 'textOnly' if you specify a type attribute." } , { "FeatureUnsupported" , "{0} is unsupported" } , { "NestedOnlyInElemOnly" , "Nested Element decls only allowed in elementOnly content" } , { "EltRefOnlyInMixedElemOnly" , "Element references only allowed in mixed or elementOnly content" } , { "OnlyInEltContent" , "{0} only allowed in elementOnly content." } , { "OrderIsAll" , "{0} not allowed if the order is all." } , { "DatatypeWithType" , "Datatype qualifiers can only be used if you specify a type attribute." } , { "DatatypeQualUnsupported" , "The datatype qualifier {0} is not supported." } , { "GroupContentRestricted" , "Error: {0} content must be one of element, group, modelGroupRef.  Saw {1}" } , { "UnknownBaseDatatype" , "Unknown base type {0} for type {1}." } , { "BadAttWithRef" , "cannot use ref with any of type, block, final, abstract, nullable, default or fixed." } , { "NoContentForRef" , "Cannot have child content for an element declaration that has a ref attribute" } , { "IncorrectDefaultType" , "Incorrect type for {0}'s default value: {1}" } , { "IllegalAttContent" , "Illegal content {0} in attribute group" } , { "ValueNotInteger" , "Value of {0} is not an integer." } , { "DatatypeError" , "Datatype error: {0}." } , { "TypeAlreadySet" , "The type of the element has already been declared." } , { "GenericError" , "Schema error: {0}." } , { "UnexpectedError" , "UnexpectedError" } , { "ContentError" , "Content (annotation?,..) is incorrect for type {0}" } , { "AnnotationError" , "Annotation can only appear once: type {0}" } , { "ListUnionRestrictionError" , "List | Union | Restriction content is invalid for type {0}" } , { "ProhibitedAttributePresent" , "An attribute declared \"prohibited\" is present in this element definition." } , { "UniqueNotEnoughValues" , "Not enough values specified for <unique> identity constraint specified for element \"{0}\"." } , { "KeyNotEnoughValues" , "Not enough values specified for <key name=\"{1}\"> identity constraint specified for element \"{0}\"." } , { "KeyRefNotEnoughValues" , "Not enough values specified for <keyref name=\"{1}\"> identity constraint specified for element \"{0}\"." } , { "DuplicateField" , "Duplicate match in scope for field \"{0}\"." } , { "DuplicateUnique" , "Duplicate unique value [{0}] declared for identity constraint of element \"{1}\"." } , { "DuplicateKey" , "Duplicate key value [{0}] declared for identity constraint of element \"{1}\"." } , { "KeyNotFound" , "Key with value [{0}] not found for identity constraint of element \"{1}\"." } , { "UnknownField" , "Internal identity constraint error; unknown field \"{0}\"." } , } ; public Object [ ] [ ] getContents ( ) { return CONTENTS ; } } 	1	['3', '3', '0', '0', '4', '1', '0', '0', '2', '0.5', '481', '0', '0', '0.974358974', '1', '0', '0', '159', '1', '0.3333', '4']
