package org . apache . camel ; import java . util . Map ; public interface ProducerTemplate < E extends Exchange > extends Service { E send ( E exchange ) ; E send ( Processor processor ) ; Object sendBody ( Object body ) ; Object sendBodyAndHeader ( Object body , String header , Object headerValue ) ; Object sendBodyAndHeaders ( Object body , Map < String , Object > headers ) ; E send ( String endpointUri , E exchange ) ; E send ( String endpointUri , Processor processor ) ; E send ( String endpointUri , ExchangePattern pattern , Processor processor ) ; E send ( Endpoint < E > endpoint , E exchange ) ; E send ( Endpoint < E > endpoint , Processor processor ) ; E send ( Endpoint < E > endpoint , ExchangePattern pattern , Processor processor ) ; Object sendBody ( Endpoint < E > endpoint , Object body ) ; Object sendBody ( String endpointUri , Object body ) ; Object sendBody ( Endpoint < E > endpoint , ExchangePattern pattern , Object body ) ; Object sendBody ( String endpointUri , ExchangePattern pattern , Object body ) ; Object sendBodyAndHeader ( String endpointUri , Object body , String header , Object headerValue ) ; Object sendBodyAndHeader ( Endpoint endpoint , Object body , String header , Object headerValue ) ; Object sendBodyAndHeader ( Endpoint endpoint , ExchangePattern pattern , Object body , String header , Object headerValue ) ; Object sendBodyAndHeader ( String endpoint , ExchangePattern pattern , Object body , String header , Object headerValue ) ; Object sendBodyAndHeaders ( String endpointUri , Object body , Map < String , Object > headers ) ; Object sendBodyAndHeaders ( Endpoint endpoint , Object body , Map < String , Object > headers ) ; E request ( Endpoint < E > endpoint , Processor processor ) ; Object requestBody ( Endpoint < E > endpoint , Object body ) ; Object requestBodyAndHeader ( Endpoint < E > endpoint , Object body , String header , Object headerValue ) ; E request ( String endpoint , Processor processor ) ; Object requestBody ( String endpoint , Object body ) ; Object requestBodyAndHeader ( String endpoint , Object body , String header , Object headerValue ) ; } 	1	['27', '1', '0', '6', '27', '351', '1', '5', '27', '2', '27', '0', '0', '0', '0.412037037', '0', '0', '0', '1', '1', '3']
package org . apache . camel . processor ; import java . util . List ; import org . apache . camel . Exchange ; import org . apache . camel . Processor ; import org . apache . camel . RuntimeCamelException ; import org . apache . camel . impl . ServiceSupport ; import org . apache . camel . util . ServiceHelper ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class TryProcessor extends ServiceSupport implements Processor { private static final Log LOG = LogFactory . getLog ( TryProcessor . class ) ; private final Processor tryProcessor ; private final List < CatchProcessor > catchClauses ; private final Processor finallyProcessor ; public TryProcessor ( Processor tryProcessor , List < CatchProcessor > catchClauses , Processor finallyProcessor ) { this . tryProcessor = tryProcessor ; this . catchClauses = catchClauses ; this . finallyProcessor = finallyProcessor ; } public String toString ( ) { String finallyText = ( finallyProcessor == null ) ? "" : " Finally {" + finallyProcessor + "}" ; return "Try {" + tryProcessor + "} " + catchClauses + finallyText ; } public void process ( Exchange exchange ) throws Exception { Throwable e = null ; try { tryProcessor . process ( exchange ) ; e = exchange . getException ( ) ; if ( e != null && DeadLetterChannel . isFailureHandled ( exchange ) ) { e = null ; } } catch ( Exception ex ) { e = ex ; exchange . setException ( e ) ; } if ( e != null ) { try { DeadLetterChannel . setFailureHandled ( exchange , true ) ; handleException ( exchange , e ) ; } catch ( Exception ex ) { throw ex ; } catch ( Throwable ex ) { throw new RuntimeCamelException ( ex ) ; } finally { handleAll ( exchange ) ; } } else { handleAll ( exchange ) ; } } private void handleAll ( Exchange exchange ) { if ( finallyProcessor != null ) { DeadLetterChannel . setFailureHandled ( exchange , true ) ; try { finallyProcessor . process ( exchange ) ; } catch ( Exception e2 ) { LOG . warn ( "Caught exception in finally block while handling other exception: " + e2 , e2 ) ; } } } protected void doStart ( ) throws Exception { ServiceHelper . startServices ( tryProcessor , catchClauses , finallyProcessor ) ; } protected void doStop ( ) throws Exception { ServiceHelper . stopServices ( tryProcessor , catchClauses , finallyProcessor ) ; } protected void handleException ( Exchange exchange , Throwable e ) throws Throwable { for ( CatchProcessor catchClause : catchClauses ) { if ( catchClause . catches ( e ) ) { exchange . setException ( e ) ; try { catchClause . process ( exchange ) ; } catch ( Exception e1 ) { LOG . warn ( "Caught exception inside catch clause: " + e1 , e1 ) ; throw e1 ; } return ; } } if ( finallyProcessor == null ) { throw e ; } } } 	1	['8', '2', '0', '10', '28', '0', '1', '9', '3', '0.357142857', '224', '1', '3', '0.684210526', '0.371428571', '1', '1', '26.5', '2', '1', '9']
package org . apache . camel . builder . xml ; import org . apache . camel . util . ObjectHelper ; public class Namespaces { public static final String DEFAULT_NAMESPACE = "http://activemq.apache.org/camel/schema/spring" ; public static final String IN_NAMESPACE = "http://camel.apache.org/xml/in/" ; public static final String OUT_NAMESPACE = "http://camel.apache.org/xml/out/" ; public static final String SYSTEM_PROPERTIES_NAMESPACE = "http://camel.apache.org/xml/variables/system-properties" ; public static final String ENVIRONMENT_VARIABLES = "http://camel.apache.org/xml/variables/environment-variables" ; public static final String EXCHANGE_PROPERTY = "http://camel.apache.org/xml/variables/exchange-property" ; private Namespaces ( ) { } public static boolean isMatchingNamespaceOrEmptyNamespace ( String namespaceURI , String expectedNamespace ) { return ObjectHelper . isNullOrBlank ( namespaceURI ) || namespaceURI . equals ( expectedNamespace ) ; } } 	1	['2', '1', '0', '2', '5', '1', '1', '1', '1', '2', '22', '0', '0', '0', '0.5', '0', '0', '7', '3', '1.5', '2']
package org . apache . camel . component . seda ; import java . util . concurrent . BlockingQueue ; import org . apache . camel . AsyncCallback ; import org . apache . camel . AsyncProcessor ; import org . apache . camel . Component ; import org . apache . camel . Consumer ; import org . apache . camel . Endpoint ; import org . apache . camel . Exchange ; import org . apache . camel . Processor ; import org . apache . camel . Producer ; import org . apache . camel . ExchangePattern ; import org . apache . camel . impl . DefaultEndpoint ; import org . apache . camel . impl . DefaultExchange ; import org . apache . camel . impl . DefaultProducer ; public class SedaEndpoint extends DefaultEndpoint < Exchange > { private final class SedaProducer extends DefaultProducer implements AsyncProcessor { private SedaProducer ( Endpoint endpoint ) { super ( endpoint ) ; } public void process ( Exchange exchange ) { queue . add ( exchange . copy ( ) ) ; } public boolean process ( Exchange exchange , AsyncCallback callback ) { queue . add ( exchange . copy ( ) ) ; callback . done ( true ) ; return true ; } } private BlockingQueue < Exchange > queue ; public SedaEndpoint ( String endpointUri , Component component , BlockingQueue < Exchange > queue ) { super ( endpointUri , component ) ; this . queue = queue ; } public SedaEndpoint ( String uri , SedaComponent component ) { this ( uri , component , component . createQueue ( ) ) ; } public Producer createProducer ( ) throws Exception { return new SedaProducer ( this ) ; } public Consumer createConsumer ( Processor processor ) throws Exception { return new SedaConsumer ( this , processor ) ; } public BlockingQueue < Exchange > getQueue ( ) { return queue ; } public boolean isSingleton ( ) { return true ; } } 	1	['7', '2', '0', '11', '11', '15', '4', '10', '6', '0.5', '44', '1', '0', '0.772727273', '0.265306122', '0', '0', '5.142857143', '1', '0.7143', '2']
package org . apache . camel . model ; import org . apache . camel . Endpoint ; import org . apache . camel . Expression ; import org . apache . camel . Predicate ; import org . apache . camel . Processor ; import org . apache . camel . impl . RouteContext ; import org . apache . camel . processor . ChoiceProcessor ; import org . apache . camel . processor . DelegateProcessor ; import org . apache . camel . processor . FilterProcessor ; import org . apache . camel . util . CollectionStringBuffer ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlElement ; import javax . xml . bind . annotation . XmlElementRef ; import javax . xml . bind . annotation . XmlRootElement ; import java . util . ArrayList ; import java . util . Collection ; import java . util . Collections ; import java . util . List ; @ XmlRootElement ( name = "choice" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class ChoiceType extends ProcessorType < ChoiceType > { @ XmlElementRef private List < InterceptorType > interceptors = new ArrayList < InterceptorType > ( ) ; @ XmlElementRef private List < WhenType > whenClauses = new ArrayList < WhenType > ( ) ; @ XmlElement ( required = false ) private OtherwiseType otherwise ; @ Override public String toString ( ) { return "Choice[ " + getWhenClauses ( ) + " " + getOtherwise ( ) + "]" ; } @ Override public Processor createProcessor ( RouteContext routeContext ) throws Exception { List < FilterProcessor > filters = new ArrayList < FilterProcessor > ( ) ; for ( WhenType whenClaus : whenClauses ) { filters . add ( whenClaus . createProcessor ( routeContext ) ) ; } Processor otherwiseProcessor = null ; if ( otherwise != null ) { otherwiseProcessor = otherwise . createProcessor ( routeContext ) ; } return new ChoiceProcessor ( filters , otherwiseProcessor ) ; } public ChoiceType when ( Predicate predicate ) { getWhenClauses ( ) . add ( new WhenType ( predicate ) ) ; return this ; } public OtherwiseType otherwise ( ) { OtherwiseType answer = new OtherwiseType ( ) ; setOtherwise ( answer ) ; return answer ; } @ Override public String getLabel ( ) { CollectionStringBuffer buffer = new CollectionStringBuffer ( ) ; List < WhenType > list = getWhenClauses ( ) ; for ( WhenType whenType : list ) { buffer . append ( whenType . getLabel ( ) ) ; } return buffer . toString ( ) ; } public List < WhenType > getWhenClauses ( ) { return whenClauses ; } public void setWhenClauses ( List < WhenType > whenClauses ) { this . whenClauses = whenClauses ; } public List < ProcessorType < ? > > getOutputs ( ) { if ( otherwise != null ) { return otherwise . getOutputs ( ) ; } else if ( whenClauses . isEmpty ( ) ) { return Collections . EMPTY_LIST ; } else { WhenType when = whenClauses . get ( whenClauses . size ( ) - 1 ) ; return when . getOutputs ( ) ; } } public OtherwiseType getOtherwise ( ) { return otherwise ; } public void setOtherwise ( OtherwiseType otherwise ) { this . otherwise = otherwise ; } public List < InterceptorType > getInterceptors ( ) { return interceptors ; } public void setInterceptors ( List < InterceptorType > interceptors ) { this . interceptors = interceptors ; } } 	1	['13', '2', '0', '12', '37', '42', '4', '9', '13', '0.611111111', '175', '1', '1', '0.885714286', '0.276923077', '1', '4', '12.23076923', '3', '1.1538', '6']
package org . apache . camel . management ; import java . io . IOException ; import java . lang . management . ManagementFactory ; import java . net . InetAddress ; import java . net . UnknownHostException ; import java . rmi . RemoteException ; import java . rmi . registry . LocateRegistry ; import java . util . HashSet ; import java . util . List ; import java . util . Set ; import javax . management . InstanceAlreadyExistsException ; import javax . management . JMException ; import javax . management . MBeanServer ; import javax . management . MBeanServerFactory ; import javax . management . NotCompliantMBeanException ; import javax . management . ObjectInstance ; import javax . management . ObjectName ; import javax . management . modelmbean . InvalidTargetObjectTypeException ; import javax . management . modelmbean . ModelMBeanInfo ; import javax . management . modelmbean . RequiredModelMBean ; import javax . management . remote . JMXConnectorServer ; import javax . management . remote . JMXConnectorServerFactory ; import javax . management . remote . JMXServiceURL ; import org . apache . camel . CamelContext ; import org . apache . camel . CamelContextAware ; import org . apache . camel . impl . DefaultCamelContext ; import org . apache . camel . impl . ServiceSupport ; import org . apache . camel . spi . InstrumentationAgent ; import org . apache . camel . util . ObjectHelper ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import org . springframework . jmx . export . annotation . AnnotationJmxAttributeSource ; import org . springframework . jmx . export . assembler . MetadataMBeanInfoAssembler ; public class InstrumentationAgentImpl extends ServiceSupport implements InstrumentationAgent , CamelContextAware { private static final transient Log LOG = LogFactory . getLog ( InstrumentationAgentImpl . class ) ; public static final String SYSTEM_PROPERTY_JMX = "org.apache.camel.jmx" ; public static final String DEFAULT_DOMAIN = "org.apache.camel" ; public static final String DEFAULT_HOST = "localhost" ; public static final int DEFAULT_PORT = 1099 ; private MBeanServer server ; private CamelContext context ; private Set < ObjectName > mbeans = new HashSet < ObjectName > ( ) ; private MetadataMBeanInfoAssembler assembler ; private JMXConnectorServer cs ; private boolean jmxEnabled = false ; private String jmxDomainName = null ; private int jmxConnectorPort = 0 ; private CamelNamingStrategy namingStrategy ; public InstrumentationAgentImpl ( ) { assembler = new MetadataMBeanInfoAssembler ( ) ; assembler . setAttributeSource ( new AnnotationJmxAttributeSource ( ) ) ; namingStrategy = new CamelNamingStrategy ( ) ; } public CamelContext getCamelContext ( ) { return context ; } public void setCamelContext ( CamelContext camelContext ) { context = camelContext ; } public void setMBeanServer ( MBeanServer server ) { this . server = server ; jmxEnabled = true ; } public MBeanServer getMBeanServer ( ) { if ( server == null ) { server = ManagementFactory . getPlatformMBeanServer ( ) ; } return server ; } public void register ( Object obj , ObjectName name ) throws JMException { register ( obj , name , false ) ; } public void register ( Object obj , ObjectName name , boolean forceRegistration ) throws JMException { try { registerMBeanWithServer ( obj , name , forceRegistration ) ; } catch ( NotCompliantMBeanException e ) { ModelMBeanInfo mbi = null ; mbi = assembler . getMBeanInfo ( obj , name . toString ( ) ) ; RequiredModelMBean mbean = ( RequiredModelMBean ) server . instantiate ( RequiredModelMBean . class . getName ( ) ) ; mbean . setModelMBeanInfo ( mbi ) ; try { mbean . setManagedResource ( obj , "ObjectReference" ) ; } catch ( InvalidTargetObjectTypeException itotex ) { throw new JMException ( itotex . getMessage ( ) ) ; } registerMBeanWithServer ( mbean , name , forceRegistration ) ; } } public void unregister ( ObjectName name ) throws JMException { server . unregisterMBean ( name ) ; } public CamelNamingStrategy getNamingStrategy ( ) { return namingStrategy ; } public void setNamingStrategy ( CamelNamingStrategy namingStrategy ) { this . namingStrategy = namingStrategy ; } protected void doStart ( ) throws Exception { ObjectHelper . notNull ( context , "camelContext" ) ; if ( getMBeanServer ( ) == null ) { createMBeanServer ( ) ; } if ( jmxDomainName == null ) { jmxDomainName = System . getProperty ( SYSTEM_PROPERTY_JMX + ".domain" ) ; if ( jmxDomainName == null || jmxDomainName . length ( ) == 0 ) { jmxDomainName = DEFAULT_DOMAIN ; } } configureDomainName ( ) ; LOG . debug ( "Starting JMX agent on server: " + getMBeanServer ( ) ) ; if ( context instanceof DefaultCamelContext ) { DefaultCamelContext dc = ( DefaultCamelContext ) context ; InstrumentationLifecycleStrategy ls = new InstrumentationLifecycleStrategy ( this ) ; dc . setLifecycleStrategy ( ls ) ; ls . onContextCreate ( context ) ; } } protected void doStop ( ) throws Exception { Object [ ] mBeans = mbeans . toArray ( ) ; int caught = 0 ; for ( Object name : mBeans ) { mbeans . remove ( ( ObjectName ) name ) ; try { unregister ( ( ObjectName ) name ) ; } catch ( JMException jmex ) { LOG . info ( "Exception unregistering MBean" , jmex ) ; caught ++ ; } } if ( caught > 0 ) { LOG . warn ( "A number of " + caught + " exceptions caught while unregistering MBeans during stop operation.  " + "See INFO log for details." ) ; } } private void registerMBeanWithServer ( Object obj , ObjectName name , boolean forceRegistration ) throws JMException { ObjectInstance instance = null ; try { instance = server . registerMBean ( obj , name ) ; } catch ( InstanceAlreadyExistsException e ) { if ( forceRegistration ) { server . unregisterMBean ( name ) ; instance = server . registerMBean ( obj , name ) ; } else { throw e ; } } if ( instance != null ) { mbeans . add ( name ) ; } } public void enableJmx ( String domainName , int port ) { jmxEnabled = true ; jmxDomainName = domainName ; configureDomainName ( ) ; jmxConnectorPort = port ; } protected void configureDomainName ( ) { if ( jmxDomainName != null ) { namingStrategy . setDomainName ( jmxDomainName ) ; } } protected void createMBeanServer ( ) { String hostName = DEFAULT_HOST ; boolean canAccessSystemProps = true ; try { SecurityManager sm = System . getSecurityManager ( ) ; if ( sm != null ) { sm . checkPropertiesAccess ( ) ; } } catch ( SecurityException se ) { canAccessSystemProps = false ; } if ( canAccessSystemProps ) { if ( ! jmxEnabled ) { jmxEnabled = null != System . getProperty ( SYSTEM_PROPERTY_JMX ) ; if ( ! jmxEnabled ) { return ; } } if ( jmxConnectorPort <= 0 ) { String portKey = SYSTEM_PROPERTY_JMX + ".port" ; String portValue = System . getProperty ( portKey ) ; if ( portValue != null && portValue . length ( ) > 0 ) { try { jmxConnectorPort = Integer . parseInt ( portValue ) ; } catch ( NumberFormatException nfe ) { LOG . info ( "Invalid port number specified via System property [" + portKey + "=" + portValue + "].  Using default: " + DEFAULT_PORT ) ; jmxConnectorPort = DEFAULT_PORT ; } } } try { hostName = InetAddress . getLocalHost ( ) . getHostName ( ) ; } catch ( UnknownHostException uhe ) { LOG . info ( "Cannot determine host name.  Using default: " + DEFAULT_PORT , uhe ) ; hostName = DEFAULT_HOST ; } } else { jmxDomainName = jmxDomainName != null ? jmxDomainName : DEFAULT_DOMAIN ; jmxConnectorPort = jmxConnectorPort > 0 ? jmxConnectorPort : DEFAULT_PORT ; hostName = DEFAULT_HOST ; } if ( ! jmxEnabled ) { return ; } List servers = MBeanServerFactory . findMBeanServer ( jmxDomainName ) ; if ( servers . size ( ) == 0 ) { server = MBeanServerFactory . createMBeanServer ( jmxDomainName ) ; } else { server = ( MBeanServer ) servers . get ( 0 ) ; } try { createJmxConnector ( hostName ) ; } catch ( IOException ioe ) { LOG . warn ( "Could not create and start jmx connector." , ioe ) ; } } protected void createJmxConnector ( String host ) throws IOException { if ( jmxConnectorPort > 0 ) { try { LocateRegistry . createRegistry ( jmxConnectorPort ) ; } catch ( RemoteException ex ) { LocateRegistry . getRegistry ( jmxConnectorPort ) ; } JMXServiceURL url = new JMXServiceURL ( "service:jmx:rmi:///jndi/rmi://" + host + ":" + jmxConnectorPort + "/jmxrmi" ) ; cs = JMXConnectorServerFactory . newJMXConnectorServer ( url , null , server ) ; Thread connectorThread = new Thread ( ) { public void run ( ) { try { cs . start ( ) ; } catch ( IOException ioe ) { LOG . warn ( "Could not start jmx connector thread." , ioe ) ; } } } ; connectorThread . setName ( "JMX Connector Thread [" + url + "]" ) ; connectorThread . start ( ) ; LOG . info ( "Jmx connector thread started on " + url ) ; } } } 	1	['20', '2', '1', '16', '74', '68', '2', '15', '11', '0.864661654', '537', '0.714285714', '3', '0.419354839', '0.173684211', '1', '1', '25.15', '12', '1.55', '4']
package org . apache . camel ; public class CamelExchangeException extends CamelException { private static final long serialVersionUID = - 8721487431101572630L ; private final Exchange exchange ; public CamelExchangeException ( String message , Exchange exchange ) { super ( message + " on the exchange: " + exchange ) ; this . exchange = exchange ; } public Exchange getExchange ( ) { return exchange ; } } 	1	['2', '4', '6', '8', '7', '0', '6', '2', '2', '1', '23', '1', '1', '0.944444444', '0.666666667', '0', '0', '9.5', '1', '0.5', '1']
package org . apache . camel . model ; import javax . xml . bind . annotation . XmlRootElement ; import org . apache . camel . Predicate ; import org . apache . camel . impl . RouteContext ; import org . apache . camel . model . language . ExpressionType ; import org . apache . camel . processor . FilterProcessor ; @ XmlRootElement ( name = "when" ) public class WhenType < Type extends ProcessorType > extends ExpressionNode { public WhenType ( ) { } public WhenType ( Predicate predicate ) { super ( predicate ) ; } public WhenType ( ExpressionType expression ) { super ( expression ) ; } @ Override public String toString ( ) { return "When[ " + getExpression ( ) + " -> " + getOutputs ( ) + "]" ; } @ Override public FilterProcessor createProcessor ( RouteContext routeContext ) throws Exception { return createFilterProcessor ( routeContext ) ; } } 	1	['6', '3', '0', '8', '15', '15', '2', '6', '6', '2', '42', '0', '0', '0.971428571', '0.416666667', '2', '3', '6', '1', '0.5', '2']
package org . apache . camel . model ; import java . util . ArrayList ; import java . util . List ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlAttribute ; import javax . xml . bind . annotation . XmlElementRef ; import javax . xml . bind . annotation . XmlRootElement ; import org . apache . camel . Processor ; import org . apache . camel . impl . RouteContext ; import org . apache . camel . processor . Throttler ; @ XmlRootElement ( name = "throttler" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class ThrottlerType extends ProcessorType { @ XmlAttribute private Long maximumRequestsPerPeriod ; @ XmlAttribute private long timePeriodMillis = 1000 ; @ XmlElementRef private List < InterceptorType > interceptors = new ArrayList < InterceptorType > ( ) ; @ XmlElementRef private List < ProcessorType > outputs = new ArrayList < ProcessorType > ( ) ; public ThrottlerType ( ) { } public ThrottlerType ( long maximumRequestsPerPeriod ) { this . maximumRequestsPerPeriod = maximumRequestsPerPeriod ; } @ Override public String toString ( ) { return "Throttler[" + getMaximumRequestsPerPeriod ( ) + " request per " + getTimePeriodMillis ( ) + " millis -> " + getOutputs ( ) + "]" ; } @ Override public String getLabel ( ) { return "" + getMaximumRequestsPerPeriod ( ) + " per " + getTimePeriodMillis ( ) + " (ms)" ; } @ Override public Processor createProcessor ( RouteContext routeContext ) throws Exception { Processor childProcessor = routeContext . createProcessor ( this ) ; return new Throttler ( childProcessor , maximumRequestsPerPeriod , timePeriodMillis ) ; } public ThrottlerType timePeriodMillis ( long timePeriodMillis ) { this . timePeriodMillis = timePeriodMillis ; return this ; } public Long getMaximumRequestsPerPeriod ( ) { return maximumRequestsPerPeriod ; } public void setMaximumRequestsPerPeriod ( Long maximumRequestsPerPeriod ) { this . maximumRequestsPerPeriod = maximumRequestsPerPeriod ; } public long getTimePeriodMillis ( ) { return timePeriodMillis ; } public void setTimePeriodMillis ( long timePeriodMillis ) { this . timePeriodMillis = timePeriodMillis ; } public List < InterceptorType > getInterceptors ( ) { return interceptors ; } public void setInterceptors ( List < InterceptorType > interceptors ) { this . interceptors = interceptors ; } public List < ProcessorType > getOutputs ( ) { return outputs ; } public void setOutputs ( List < ProcessorType > outputs ) { this . outputs = outputs ; } } 	1	['14', '2', '0', '4', '25', '31', '1', '4', '14', '0.634615385', '140', '1', '0', '0.885714286', '0.3', '1', '4', '8.714285714', '1', '0.8571', '3']
package org . apache . camel . processor ; import java . util . ArrayList ; import java . util . List ; import org . apache . camel . Exchange ; import org . apache . camel . Predicate ; import org . apache . camel . Processor ; import org . apache . camel . impl . ServiceSupport ; import org . apache . camel . util . ServiceHelper ; public class ChoiceProcessor extends ServiceSupport implements Processor { private List < FilterProcessor > filters = new ArrayList < FilterProcessor > ( ) ; private Processor otherwise ; public ChoiceProcessor ( List < FilterProcessor > filters , Processor otherwise ) { this . filters = filters ; this . otherwise = otherwise ; } public void process ( Exchange exchange ) throws Exception { for ( FilterProcessor filterProcessor : filters ) { Predicate < Exchange > predicate = filterProcessor . getPredicate ( ) ; if ( predicate != null && predicate . matches ( exchange ) ) { filterProcessor . getProcessor ( ) . process ( exchange ) ; return ; } } if ( otherwise != null ) { otherwise . process ( exchange ) ; } } @ Override public String toString ( ) { StringBuilder builder = new StringBuilder ( "choice{" ) ; boolean first = true ; for ( FilterProcessor processor : filters ) { if ( first ) { first = false ; } else { builder . append ( ", " ) ; } builder . append ( "when " ) ; builder . append ( processor . getPredicate ( ) . toString ( ) ) ; builder . append ( ": " ) ; builder . append ( processor . getProcessor ( ) ) ; } if ( otherwise != null ) { builder . append ( ", otherwise: " ) ; builder . append ( otherwise ) ; } builder . append ( "}" ) ; return builder . toString ( ) ; } public List < FilterProcessor > getFilters ( ) { return filters ; } public Processor getOtherwise ( ) { return otherwise ; } protected void doStart ( ) throws Exception { ServiceHelper . startServices ( filters ) ; ServiceHelper . startServices ( otherwise ) ; } protected void doStop ( ) throws Exception { ServiceHelper . stopServices ( otherwise ) ; ServiceHelper . stopServices ( filters ) ; } } 	1	['7', '2', '0', '7', '25', '0', '1', '6', '5', '0.166666667', '153', '1', '1', '0.684210526', '0.357142857', '1', '1', '20.57142857', '4', '1.2857', '2']
package org . apache . camel . processor . loadbalancer ; import java . util . List ; import org . apache . camel . Exchange ; import org . apache . camel . Processor ; public class TopicLoadBalancer extends LoadBalancerSupport { public void process ( Exchange exchange ) throws Exception { List < Processor > list = getProcessors ( ) ; for ( Processor processor : list ) { Exchange copy = copyExchangeStrategy ( processor , exchange ) ; processor . process ( copy ) ; } } protected Exchange copyExchangeStrategy ( Processor processor , Exchange exchange ) { return exchange . copy ( ) ; } } 	1	['3', '2', '0', '4', '10', '3', '1', '3', '2', '2', '32', '0', '0', '0.6', '0.666666667', '0', '0', '9.666666667', '1', '0.6667', '2']
package org . apache . camel . language . simple ; import java . util . ArrayList ; import java . util . List ; import org . apache . camel . Exchange ; import org . apache . camel . Expression ; import org . apache . camel . Predicate ; import org . apache . camel . builder . ExpressionBuilder ; import org . apache . camel . builder . PredicateBuilder ; import org . apache . camel . language . IllegalSyntaxException ; import org . apache . camel . spi . Language ; import org . apache . camel . util . ObjectHelper ; public class SimpleLanguage implements Language { public static Expression simple ( String expression ) { SimpleLanguage language = new SimpleLanguage ( ) ; return language . createExpression ( expression ) ; } public Predicate < Exchange > createPredicate ( String expression ) { return PredicateBuilder . toPredicate ( createExpression ( expression ) ) ; } public Expression < Exchange > createExpression ( String expression ) { if ( expression . indexOf ( "${" ) >= 0 ) { return createComplexExpression ( expression ) ; } return createSimpleExpression ( expression ) ; } protected Expression < Exchange > createComplexExpression ( String expression ) { List < Expression > results = new ArrayList < Expression > ( ) ; int pivot = 0 ; int size = expression . length ( ) ; while ( pivot < size ) { int idx = expression . indexOf ( "${" , pivot ) ; if ( idx < 0 ) { results . add ( createConstantExpression ( expression , pivot , size ) ) ; break ; } else { if ( pivot < idx ) { results . add ( createConstantExpression ( expression , pivot , idx ) ) ; } pivot = idx + 2 ; int endIdx = expression . indexOf ( "}" , pivot ) ; if ( endIdx < 0 ) { throw new IllegalArgumentException ( "Expecting } but found end of string for simple expression: " + expression ) ; } String simpleText = expression . substring ( pivot , endIdx ) ; Expression simpleExpression = createSimpleExpression ( simpleText ) ; results . add ( simpleExpression ) ; pivot = endIdx + 1 ; } } return ExpressionBuilder . concatExpression ( results , expression ) ; } protected Expression createConstantExpression ( String expression , int start , int end ) { return ExpressionBuilder . constantExpression ( expression . substring ( start , end ) ) ; } protected Expression < Exchange > createSimpleExpression ( String expression ) { if ( ObjectHelper . isEqualToAny ( expression , "body" , "in.body" ) ) { return ExpressionBuilder . bodyExpression ( ) ; } else if ( ObjectHelper . equals ( expression , "out.body" ) ) { return ExpressionBuilder . outBodyExpression ( ) ; } String remainder = ifStartsWithReturnRemainder ( "in.header." , expression ) ; if ( remainder == null ) { remainder = ifStartsWithReturnRemainder ( "header." , expression ) ; } if ( remainder == null ) { remainder = ifStartsWithReturnRemainder ( "headers." , expression ) ; } if ( remainder == null ) { remainder = ifStartsWithReturnRemainder ( "in.headers." , expression ) ; } if ( remainder != null ) { return ExpressionBuilder . headerExpression ( remainder ) ; } remainder = ifStartsWithReturnRemainder ( "out.header." , expression ) ; if ( remainder == null ) { remainder = ifStartsWithReturnRemainder ( "out.headers." , expression ) ; } if ( remainder != null ) { return ExpressionBuilder . outHeaderExpression ( remainder ) ; } remainder = ifStartsWithReturnRemainder ( "property." , expression ) ; if ( remainder != null ) { return ExpressionBuilder . propertyExpression ( remainder ) ; } remainder = ifStartsWithReturnRemainder ( "sys." , expression ) ; if ( remainder != null ) { return ExpressionBuilder . propertyExpression ( remainder ) ; } throw new IllegalSyntaxException ( this , expression ) ; } protected String ifStartsWithReturnRemainder ( String prefix , String text ) { if ( text . startsWith ( prefix ) ) { String remainder = text . substring ( prefix . length ( ) ) ; if ( remainder . length ( ) > 0 ) { return remainder ; } } return null ; } } 	1	['8', '1', '0', '7', '32', '28', '0', '7', '4', '2', '237', '0', '0', '0', '0.625', '0', '0', '28.625', '11', '3', '2']
package org . apache . camel . impl ; import org . apache . camel . CamelContext ; import org . apache . camel . Component ; import org . apache . camel . Endpoint ; import org . apache . camel . Exchange ; import org . apache . camel . ExchangePattern ; import org . apache . camel . PollingConsumer ; import org . apache . camel . util . ObjectHelper ; import java . lang . reflect . ParameterizedType ; import java . lang . reflect . Type ; import java . util . concurrent . ScheduledExecutorService ; import java . util . concurrent . ScheduledThreadPoolExecutor ; public abstract class DefaultEndpoint < E extends Exchange > implements Endpoint < E > { private String endpointUri ; private CamelContext context ; private Component component ; private ScheduledExecutorService executorService ; private ExchangePattern exchangePattern = ExchangePattern . InOnly ; protected DefaultEndpoint ( String endpointUri , Component component ) { this ( endpointUri , component . getCamelContext ( ) ) ; this . component = component ; } protected DefaultEndpoint ( String endpointUri , CamelContext context ) { this . endpointUri = endpointUri ; this . context = context ; } public int hashCode ( ) { return endpointUri . hashCode ( ) * 37 + 1 ; } @ Override public boolean equals ( Object object ) { if ( object instanceof DefaultEndpoint ) { DefaultEndpoint that = ( DefaultEndpoint ) object ; return ObjectHelper . equals ( this . endpointUri , that . endpointUri ) ; } return false ; } @ Override public String toString ( ) { return "Endpoint[" + endpointUri + "]" ; } public String getEndpointUri ( ) { return endpointUri ; } public CamelContext getContext ( ) { return context ; } public Component getComponent ( ) { return component ; } public synchronized ScheduledExecutorService getExecutorService ( ) { if ( executorService == null ) { Component c = getComponent ( ) ; if ( c != null && c instanceof DefaultComponent ) { DefaultComponent dc = ( DefaultComponent ) c ; executorService = dc . getExecutorService ( ) ; } if ( executorService == null ) { executorService = createExecutorService ( ) ; } } return executorService ; } public synchronized void setExecutorService ( ScheduledExecutorService executorService ) { this . executorService = executorService ; } public PollingConsumer < E > createPollingConsumer ( ) throws Exception { return new EventDrivenPollingConsumer < E > ( this ) ; } public E convertTo ( Class < E > type , Exchange exchange ) { if ( type . isInstance ( exchange ) ) { return type . cast ( exchange ) ; } return getContext ( ) . getExchangeConverter ( ) . convertTo ( type , exchange ) ; } public E createExchange ( Exchange exchange ) { Class < E > exchangeType = getExchangeType ( ) ; if ( exchangeType != null ) { if ( exchangeType . isInstance ( exchange ) ) { return exchangeType . cast ( exchange ) ; } } E answer = createExchange ( ) ; answer . copyFrom ( exchange ) ; return answer ; } public Class < E > getExchangeType ( ) { Type type = getClass ( ) . getGenericSuperclass ( ) ; if ( type instanceof ParameterizedType ) { ParameterizedType parameterizedType = ( ParameterizedType ) type ; Type [ ] arguments = parameterizedType . getActualTypeArguments ( ) ; if ( arguments . length > 0 ) { Type argumentType = arguments [ 0 ] ; if ( argumentType instanceof Class ) { return ( Class < E > ) argumentType ; } } } return null ; } public E createExchange ( ) { return createExchange ( getExchangePattern ( ) ) ; } public E createExchange ( ExchangePattern pattern ) { return ( E ) new DefaultExchange ( getContext ( ) , pattern ) ; } public ExchangePattern getExchangePattern ( ) { return exchangePattern ; } public void setExchangePattern ( ExchangePattern exchangePattern ) { this . exchangePattern = exchangePattern ; } protected ScheduledThreadPoolExecutor createExecutorService ( ) { return new ScheduledThreadPoolExecutor ( 10 ) ; } } 	1	['19', '1', '15', '32', '38', '139', '21', '11', '16', '0.822222222', '216', '1', '3', '0', '0.175438596', '1', '1', '10.10526316', '5', '1.4737', '4']
package org . apache . camel . impl ; import java . util . Collection ; import org . apache . camel . CamelContext ; import org . apache . camel . Endpoint ; import org . apache . camel . model . RouteType ; import org . apache . camel . spi . LifecycleStrategy ; import org . apache . camel . Route ; import org . apache . camel . Service ; public class DefaultLifecycleStrategy implements LifecycleStrategy { public void onContextCreate ( CamelContext context ) { } public void onEndpointAdd ( Endpoint endpoint ) { } public void onServiceAdd ( CamelContext context , Service service ) { } public void onRoutesAdd ( Collection < Route > routes ) { } public void beforeStartRouteType ( CamelContext context , RouteType routeType ) { } } 	1	['6', '1', '0', '6', '7', '15', '1', '5', '6', '2', '14', '0', '0', '0', '0.361111111', '0', '0', '1.333333333', '1', '0.8333', '4']
package org . apache . camel . impl ; import org . apache . camel . impl . converter . TypeConverterRegistry ; public class CachingInjector < T > { private final TypeConverterRegistry repository ; private final Class < T > type ; private T instance ; public CachingInjector ( TypeConverterRegistry repository , Class < T > type ) { this . repository = repository ; this . type = type ; } public synchronized T newInstance ( ) { if ( instance == null ) { instance = createInstance ( type ) ; } return instance ; } protected T createInstance ( Class < T > t ) { return ( T ) repository . getInjector ( ) . newInstance ( t ) ; } } 	1	['3', '1', '0', '4', '6', '0', '2', '2', '2', '0.5', '33', '1', '1', '0', '0.666666667', '0', '0', '9', '2', '1', '1']
package org . apache . camel . processor . resequencer ; import java . util . Queue ; import java . util . Timer ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class ResequencerEngine < E > implements TimeoutHandler { private static final Log LOG = LogFactory . getLog ( ResequencerEngine . class ) ; private long timeout ; private int capacity ; private Queue < E > outQueue ; private Element < E > lastDelivered ; private Sequence < Element < E > > sequence ; private Timer timer ; public ResequencerEngine ( SequenceElementComparator < E > comparator ) { this ( comparator , Integer . MAX_VALUE ) ; } public ResequencerEngine ( SequenceElementComparator < E > comparator , int capacity ) { this . timer = new Timer ( "Resequencer Timer" ) ; this . sequence = createSequence ( comparator ) ; this . capacity = capacity ; this . timeout = 2000L ; this . lastDelivered = null ; } public void stop ( ) { this . timer . cancel ( ) ; } public Queue < E > getOutQueue ( ) { return outQueue ; } public void setOutQueue ( Queue < E > outQueue ) { this . outQueue = outQueue ; } public long getTimeout ( ) { return timeout ; } public void setTimeout ( long timeout ) { this . timeout = timeout ; } public synchronized void timeout ( Timeout timout ) { try { while ( deliver ( ) ) { } } catch ( RuntimeException e ) { LOG . error ( "error during delivery" , e ) ; } } public synchronized void add ( E o ) { if ( sequence . size ( ) >= capacity ) { throw new IllegalStateException ( "maximum capacity is reached" ) ; } insert ( o ) ; } public synchronized void put ( E o ) throws InterruptedException { if ( sequence . size ( ) >= capacity ) { wait ( ) ; } insert ( o ) ; } E getLastDelivered ( ) { if ( lastDelivered == null ) { return null ; } return lastDelivered . getObject ( ) ; } void setLastDelivered ( E o ) { lastDelivered = new Element < E > ( o ) ; } private void insert ( E o ) { Element < E > element = new Element < E > ( o ) ; sequence . add ( element ) ; Element < E > successor = sequence . successor ( element ) ; if ( successor != null ) { successor . cancel ( ) ; } if ( successorOfLastDelivered ( element ) ) { } else if ( sequence . predecessor ( element ) != null ) { } else { Timeout t = defineTimeout ( ) ; element . schedule ( t ) ; } while ( deliver ( ) ) { } } private boolean deliver ( ) { if ( sequence . size ( ) == 0 ) { return false ; } Element < E > element = sequence . first ( ) ; if ( element . scheduled ( ) ) { return false ; } sequence . remove ( element ) ; lastDelivered = element ; notify ( ) ; outQueue . add ( element . getObject ( ) ) ; return true ; } private boolean successorOfLastDelivered ( Element < E > element ) { if ( lastDelivered == null ) { return false ; } if ( sequence . comparator ( ) . successor ( element , lastDelivered ) ) { return true ; } return false ; } private Timeout defineTimeout ( ) { Timeout result = new Timeout ( timer , timeout ) ; result . addTimeoutHandler ( this ) ; return result ; } private static < E > Sequence < Element < E > > createSequence ( SequenceElementComparator < E > comparator ) { return new Sequence < Element < E > > ( new ElementComparator < E > ( comparator ) ) ; } } 	1	['18', '1', '0', '9', '44', '85', '1', '8', '10', '0.739495798', '242', '1', '3', '0', '0.205882353', '0', '0', '12.05555556', '5', '1.3889', '1']
package org . apache . camel ; public class RuntimeCamelException extends RuntimeException { private static final long serialVersionUID = 8046489554418284257L ; public RuntimeCamelException ( ) { } public RuntimeCamelException ( String message ) { super ( message ) ; } public RuntimeCamelException ( String message , Throwable cause ) { super ( message , cause ) ; } public RuntimeCamelException ( Throwable cause ) { super ( cause ) ; } } 	1	['4', '4', '15', '49', '8', '6', '49', '0', '4', '1.333333333', '21', '1', '0', '1', '0.666666667', '0', '0', '4', '0', '0', '1']
package org . apache . camel . impl . converter ; import java . lang . reflect . Array ; import java . util . ArrayList ; import java . util . Arrays ; import java . util . Collection ; import java . util . List ; import org . apache . camel . TypeConverter ; public class ArrayTypeConverter implements TypeConverter { public < T > T convertTo ( Class < T > type , Object value ) { if ( type . isArray ( ) ) { if ( value instanceof Collection ) { Collection collection = ( Collection ) value ; Object array = Array . newInstance ( type . getComponentType ( ) , collection . size ( ) ) ; if ( array instanceof Object [ ] ) { collection . toArray ( ( Object [ ] ) array ) ; } else { int index = 0 ; for ( Object element : collection ) { Array . set ( array , index ++ , element ) ; } } return ( T ) array ; } else if ( value != null && value . getClass ( ) . isArray ( ) ) { int size = Array . getLength ( value ) ; Object answer = Array . newInstance ( type . getComponentType ( ) , size ) ; for ( int i = 0 ; i < size ; i ++ ) { Array . set ( answer , i , Array . get ( value , i ) ) ; } return ( T ) answer ; } } else if ( Collection . class . isAssignableFrom ( type ) ) { if ( value != null ) { if ( value instanceof Object [ ] ) { return ( T ) Arrays . asList ( ( Object [ ] ) value ) ; } else if ( value . getClass ( ) . isArray ( ) ) { int size = Array . getLength ( value ) ; List answer = new ArrayList ( size ) ; for ( int i = 0 ; i < size ; i ++ ) { answer . add ( Array . get ( value , i ) ) ; } return ( T ) answer ; } } } return null ; } } 	1	['2', '1', '0', '2', '19', '1', '1', '1', '2', '2', '121', '0', '0', '0', '0.666666667', '0', '0', '59.5', '13', '6.5', '1']
package org . apache . camel . component . direct ; import java . util . ArrayList ; import java . util . concurrent . CopyOnWriteArrayList ; import org . apache . camel . AsyncCallback ; import org . apache . camel . AsyncProcessor ; import org . apache . camel . Consumer ; import org . apache . camel . Endpoint ; import org . apache . camel . Exchange ; import org . apache . camel . Processor ; import org . apache . camel . Producer ; import org . apache . camel . ExchangePattern ; import org . apache . camel . impl . DefaultConsumer ; import org . apache . camel . impl . DefaultEndpoint ; import org . apache . camel . impl . DefaultExchange ; import org . apache . camel . impl . DefaultProducer ; import org . apache . camel . impl . converter . AsyncProcessorTypeConverter ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class DirectEndpoint < E extends Exchange > extends DefaultEndpoint < E > { private final class DirectProducer extends DefaultProducer implements AsyncProcessor { private DirectProducer ( Endpoint endpoint ) { super ( endpoint ) ; } public void process ( Exchange exchange ) throws Exception { if ( consumers . isEmpty ( ) ) { LOG . warn ( "No consumers available on " + this + " for " + exchange ) ; } else { for ( DefaultConsumer < E > consumer : consumers ) { consumer . getProcessor ( ) . process ( exchange ) ; } } } public boolean process ( Exchange exchange , AsyncCallback callback ) { int size = consumers . size ( ) ; if ( size == 0 ) { LOG . warn ( "No consumers available on " + this + " for " + exchange ) ; } else { if ( size > 1 ) { try { for ( DefaultConsumer < E > consumer : consumers ) { consumer . getProcessor ( ) . process ( exchange ) ; } } catch ( Throwable error ) { exchange . setException ( error ) ; } } else { for ( DefaultConsumer < E > consumer : consumers ) { AsyncProcessor processor = AsyncProcessorTypeConverter . convert ( consumer . getProcessor ( ) ) ; return processor . process ( exchange , callback ) ; } } } callback . done ( true ) ; return true ; } } private static final Log LOG = LogFactory . getLog ( DirectEndpoint . class ) ; boolean allowMultipleConsumers = true ; private final CopyOnWriteArrayList < DefaultConsumer < E > > consumers = new CopyOnWriteArrayList < DefaultConsumer < E > > ( ) ; public DirectEndpoint ( String uri , DirectComponent < E > component ) { super ( uri , component ) ; } public Producer createProducer ( ) throws Exception { return new DirectProducer ( this ) ; } public Consumer < E > createConsumer ( Processor processor ) throws Exception { return new DefaultConsumer < E > ( this , processor ) { @ Override public void start ( ) throws Exception { if ( ! allowMultipleConsumers && ! consumers . isEmpty ( ) ) { throw new IllegalStateException ( "Endpoint " + getEndpointUri ( ) + " only allows 1 active consumer but you attempted to start a 2nd consumer." ) ; } consumers . add ( this ) ; super . start ( ) ; } @ Override public void stop ( ) throws Exception { super . stop ( ) ; consumers . remove ( this ) ; } } ; } public boolean isAllowMultipleConsumers ( ) { return allowMultipleConsumers ; } public void setAllowMultipleConsumers ( boolean allowMutlipleConsumers ) { this . allowMultipleConsumers = allowMutlipleConsumers ; } public boolean isSingleton ( ) { return true ; } } 	1	['9', '2', '0', '11', '14', '26', '3', '11', '6', '0.833333333', '57', '0.666666667', '1', '0.708333333', '0.229166667', '0', '0', '5', '1', '0.7778', '1']
package org . apache . camel . builder ; import org . apache . camel . Exchange ; import org . apache . camel . Processor ; public class NoErrorHandlerBuilder extends ErrorHandlerBuilderSupport { public ErrorHandlerBuilder copy ( ) { return this ; } public Processor createErrorHandler ( Processor processor ) { return processor ; } } 	1	['3', '2', '0', '5', '4', '3', '2', '3', '3', '2', '10', '0', '0', '0.5', '0.666666667', '0', '0', '2.333333333', '1', '0.6667', '1']
package org . apache . camel ; import java . util . HashMap ; import java . util . Map ; public enum ExchangePattern { InOnly , RobustInOnly , InOut , InOptionalOut , OutOnly , RobustOutOnly , OutIn , OutOptionalIn ; protected static final Map < String , ExchangePattern > map = new HashMap < String , ExchangePattern > ( ) ; public String getWsdlUri ( ) { switch ( this ) { case InOnly : return "http://www.w3.org/ns/wsdl/in-only" ; case InOptionalOut : return "http://www.w3.org/ns/wsdl/in-optional-out" ; case InOut : return "http://www.w3.org/ns/wsdl/in-out" ; case OutIn : return "http://www.w3.org/ns/wsdl/out-in" ; case OutOnly : return "http://www.w3.org/ns/wsdl/out-only" ; case OutOptionalIn : return "http://www.w3.org/ns/wsdl/out-optional_in" ; case RobustInOnly : return "http://www.w3.org/ns/wsdl/robust-in-only" ; case RobustOutOnly : return "http://www.w3.org/ns/wsdl/robust-out-only" ; default : throw new IllegalArgumentException ( "Unknown message exchange pattern: " + this ) ; } } public boolean isInCapable ( ) { switch ( this ) { case OutOnly : case RobustOutOnly : return true ; default : return false ; } } public boolean isOutCapable ( ) { switch ( this ) { case InOnly : case RobustInOnly : return false ; default : return true ; } } public boolean isFaultCapable ( ) { switch ( this ) { case InOnly : case OutOnly : return false ; default : return true ; } } public static ExchangePattern fromWsdlUri ( String wsdlUri ) { return map . get ( wsdlUri ) ; } static { for ( ExchangePattern mep : values ( ) ) { String uri = mep . getWsdlUri ( ) ; map . put ( uri , mep ) ; String name = uri . substring ( uri . lastIndexOf ( '/' ) ) ; map . put ( "http://www.w3.org/2004/08/wsdl/" + name , mep ) ; map . put ( "http://www.w3.org/2006/01/wsdl/" + name , mep ) ; } } } 	1	['9', '2', '0', '40', '23', '32', '39', '2', '7', '0.975', '240', '0.2', '9', '0.631578947', '0.375', '1', '1', '24.55555556', '4', '1.8889', '1']
package org . apache . camel . model ; import org . apache . camel . processor . RedeliveryPolicy ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlRootElement ; @ XmlRootElement ( name = "redeliveryPolicy" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class RedeliveryPolicyType { private Integer maximumRedeliveries ; private Long initialRedeliveryDelay ; private Double backOffMultiplier ; private Boolean useExponentialBackOff ; private Double collisionAvoidanceFactor ; private Boolean useCollisionAvoidance ; public RedeliveryPolicy createRedeliveryPolicy ( RedeliveryPolicy parentPolicy ) { RedeliveryPolicy answer = parentPolicy . copy ( ) ; if ( maximumRedeliveries != null ) { answer . setMaximumRedeliveries ( maximumRedeliveries ) ; } if ( initialRedeliveryDelay != null ) { answer . setInitialRedeliveryDelay ( initialRedeliveryDelay ) ; } if ( backOffMultiplier != null ) { answer . setBackOffMultiplier ( backOffMultiplier ) ; } if ( useExponentialBackOff != null ) { answer . setUseExponentialBackOff ( useExponentialBackOff ) ; } if ( collisionAvoidanceFactor != null ) { answer . setCollisionAvoidanceFactor ( collisionAvoidanceFactor ) ; } if ( useCollisionAvoidance != null ) { answer . setUseCollisionAvoidance ( useCollisionAvoidance ) ; } return answer ; } public String toString ( ) { return "RedeliveryPolicy[maxRedeliveries: " + maximumRedeliveries + "]" ; } public RedeliveryPolicyType backOffMultiplier ( double backOffMultiplier ) { setBackOffMultiplier ( backOffMultiplier ) ; return this ; } public RedeliveryPolicyType collisionAvoidancePercent ( double collisionAvoidancePercent ) { setCollisionAvoidanceFactor ( collisionAvoidancePercent * 0.01d ) ; return this ; } public RedeliveryPolicyType collisionAvoidanceFactor ( double collisionAvoidanceFactor ) { setCollisionAvoidanceFactor ( collisionAvoidanceFactor ) ; return this ; } public RedeliveryPolicyType initialRedeliveryDelay ( long initialRedeliveryDelay ) { setInitialRedeliveryDelay ( initialRedeliveryDelay ) ; return this ; } public RedeliveryPolicyType maximumRedeliveries ( int maximumRedeliveries ) { setMaximumRedeliveries ( maximumRedeliveries ) ; return this ; } public RedeliveryPolicyType useCollisionAvoidance ( ) { setUseCollisionAvoidance ( true ) ; return this ; } public RedeliveryPolicyType useExponentialBackOff ( ) { setUseExponentialBackOff ( true ) ; return this ; } public Double getBackOffMultiplier ( ) { return backOffMultiplier ; } public void setBackOffMultiplier ( Double backOffMultiplier ) { this . backOffMultiplier = backOffMultiplier ; } public Double getCollisionAvoidanceFactor ( ) { return collisionAvoidanceFactor ; } public void setCollisionAvoidanceFactor ( Double collisionAvoidanceFactor ) { this . collisionAvoidanceFactor = collisionAvoidanceFactor ; } public Long getInitialRedeliveryDelay ( ) { return initialRedeliveryDelay ; } public void setInitialRedeliveryDelay ( Long initialRedeliveryDelay ) { this . initialRedeliveryDelay = initialRedeliveryDelay ; } public Integer getMaximumRedeliveries ( ) { return maximumRedeliveries ; } public void setMaximumRedeliveries ( Integer maximumRedeliveries ) { this . maximumRedeliveries = maximumRedeliveries ; } public Boolean getUseCollisionAvoidance ( ) { return useCollisionAvoidance ; } public void setUseCollisionAvoidance ( Boolean useCollisionAvoidance ) { this . useCollisionAvoidance = useCollisionAvoidance ; } public Boolean getUseExponentialBackOff ( ) { return useExponentialBackOff ; } public void setUseExponentialBackOff ( Boolean useExponentialBackOff ) { this . useExponentialBackOff = useExponentialBackOff ; } } 	1	['22', '1', '0', '2', '42', '189', '1', '1', '22', '0.841269841', '182', '1', '0', '0', '0.171717172', '0', '0', '7', '7', '1.2273', '2']
package org . apache . camel . processor . loadbalancer ; import java . util . List ; import java . util . concurrent . CopyOnWriteArrayList ; import org . apache . camel . Processor ; public abstract class LoadBalancerSupport implements LoadBalancer { private List < Processor > processors = new CopyOnWriteArrayList < Processor > ( ) ; public void addProcessor ( Processor processor ) { processors . add ( processor ) ; } public void removeProcessor ( Processor processor ) { processors . remove ( processor ) ; } public List < Processor > getProcessors ( ) { return processors ; } } 	1	['4', '1', '2', '4', '8', '0', '2', '2', '4', '0', '28', '1', '0', '0', '0.75', '0', '0', '5.75', '1', '0.75', '1']
package org . apache . camel . processor ; import java . util . concurrent . RejectedExecutionException ; import org . apache . camel . AsyncCallback ; import org . apache . camel . AsyncProcessor ; import org . apache . camel . Exchange ; import org . apache . camel . Message ; import org . apache . camel . Processor ; import org . apache . camel . impl . converter . AsyncProcessorTypeConverter ; import org . apache . camel . model . ExceptionType ; import org . apache . camel . util . AsyncProcessorHelper ; import org . apache . camel . util . ServiceHelper ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class DeadLetterChannel extends ErrorHandlerSupport implements AsyncProcessor { public static final String REDELIVERY_COUNTER = "org.apache.camel.RedeliveryCounter" ; public static final String REDELIVERED = "org.apache.camel.Redelivered" ; private class RedeliveryData { int redeliveryCounter ; long redeliveryDelay ; boolean sync = true ; RedeliveryPolicy currentRedeliveryPolicy = redeliveryPolicy ; Processor failureProcessor = deadLetter ; } private static final transient Log LOG = LogFactory . getLog ( DeadLetterChannel . class ) ; private static final String FAILURE_HANDLED_PROPERTY = DeadLetterChannel . class . getName ( ) + ".FAILURE_HANDLED" ; private Processor output ; private Processor deadLetter ; private AsyncProcessor outputAsync ; private RedeliveryPolicy redeliveryPolicy ; private Logger logger ; public DeadLetterChannel ( Processor output , Processor deadLetter ) { this ( output , deadLetter , new RedeliveryPolicy ( ) , DeadLetterChannel . createDefaultLogger ( ) ) ; } public DeadLetterChannel ( Processor output , Processor deadLetter , RedeliveryPolicy redeliveryPolicy , Logger logger ) { this . deadLetter = deadLetter ; this . output = output ; this . outputAsync = AsyncProcessorTypeConverter . convert ( output ) ; this . redeliveryPolicy = redeliveryPolicy ; this . logger = logger ; } public static < E extends Exchange > Logger createDefaultLogger ( ) { return new Logger ( LOG , LoggingLevel . ERROR ) ; } @ Override public String toString ( ) { return "DeadLetterChannel[" + output + ", " + deadLetter + ", " + redeliveryPolicy + "]" ; } public boolean process ( Exchange exchange , final AsyncCallback callback ) { return process ( exchange , callback , new RedeliveryData ( ) ) ; } public boolean process ( final Exchange exchange , final AsyncCallback callback , final RedeliveryData data ) { while ( true ) { if ( ! isRunAllowed ( ) ) { if ( exchange . getException ( ) == null ) { exchange . setException ( new RejectedExecutionException ( ) ) ; } callback . done ( data . sync ) ; return data . sync ; } if ( exchange . getException ( ) != null ) { Throwable e = exchange . getException ( ) ; exchange . setException ( null ) ; logger . log ( "On delivery attempt: " + data . redeliveryCounter + " caught: " + e , e ) ; data . redeliveryCounter = incrementRedeliveryCounter ( exchange , e ) ; ExceptionType exceptionPolicy = getExceptionPolicy ( exchange , e ) ; if ( exceptionPolicy != null ) { data . currentRedeliveryPolicy = exceptionPolicy . createRedeliveryPolicy ( data . currentRedeliveryPolicy ) ; Processor processor = exceptionPolicy . getErrorHandler ( ) ; if ( processor != null ) { data . failureProcessor = processor ; } } } if ( ! data . currentRedeliveryPolicy . shouldRedeliver ( data . redeliveryCounter ) ) { setFailureHandled ( exchange , true ) ; AsyncProcessor afp = AsyncProcessorTypeConverter . convert ( data . failureProcessor ) ; return afp . process ( exchange , new AsyncCallback ( ) { public void done ( boolean sync ) { callback . done ( data . sync ) ; } } ) ; } if ( data . redeliveryCounter > 0 ) { data . redeliveryDelay = data . currentRedeliveryPolicy . getRedeliveryDelay ( data . redeliveryDelay ) ; sleep ( data . redeliveryDelay ) ; } exchange . setException ( null ) ; boolean sync = outputAsync . process ( exchange , new AsyncCallback ( ) { public void done ( boolean sync ) { if ( sync ) { return ; } data . sync = false ; if ( exchange . getException ( ) != null ) { process ( exchange , callback , data ) ; } else { callback . done ( sync ) ; } } } ) ; if ( ! sync ) { return false ; } if ( exchange . getException ( ) == null || isFailureHandled ( exchange ) ) { callback . done ( true ) ; return true ; } } } public static boolean isFailureHandled ( Exchange exchange ) { Boolean rc = exchange . getProperty ( FAILURE_HANDLED_PROPERTY , Boolean . class ) ; return rc == null ? false : rc ; } public static void setFailureHandled ( Exchange exchange , boolean b ) { exchange . setProperty ( FAILURE_HANDLED_PROPERTY , b ? Boolean . TRUE : Boolean . FALSE ) ; } public void process ( Exchange exchange ) throws Exception { AsyncProcessorHelper . process ( this , exchange ) ; } public Processor getOutput ( ) { return output ; } public Processor getDeadLetter ( ) { return deadLetter ; } public RedeliveryPolicy getRedeliveryPolicy ( ) { return redeliveryPolicy ; } public void setRedeliveryPolicy ( RedeliveryPolicy redeliveryPolicy ) { this . redeliveryPolicy = redeliveryPolicy ; } public Logger getLogger ( ) { return logger ; } public void setLogger ( Logger logger ) { this . logger = logger ; } protected int incrementRedeliveryCounter ( Exchange exchange , Throwable e ) { Message in = exchange . getIn ( ) ; Integer counter = in . getHeader ( REDELIVERY_COUNTER , Integer . class ) ; int next = 1 ; if ( counter != null ) { next = counter + 1 ; } in . setHeader ( REDELIVERY_COUNTER , next ) ; in . setHeader ( REDELIVERED , true ) ; exchange . setException ( e ) ; return next ; } protected void sleep ( long redeliveryDelay ) { if ( redeliveryDelay > 0 ) { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Sleeping for: " + redeliveryDelay + " until attempting redelivery" ) ; } try { Thread . sleep ( redeliveryDelay ) ; } catch ( InterruptedException e ) { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Thread interupted: " + e , e ) ; } } } } protected void doStart ( ) throws Exception { ServiceHelper . startServices ( output , deadLetter ) ; } protected void doStop ( ) throws Exception { ServiceHelper . stopServices ( deadLetter , output ) ; } } 	1	['22', '3', '0', '20', '65', '151', '5', '18', '15', '0.846560847', '401', '0.777777778', '6', '0.457142857', '0.155844156', '1', '1', '16.81818182', '10', '1.5455', '7']
package org . apache . camel . processor . resequencer ; import java . lang . reflect . InvocationHandler ; import java . lang . reflect . Method ; import java . lang . reflect . Proxy ; import java . util . concurrent . BlockingQueue ; import org . apache . camel . Exchange ; import org . apache . camel . Processor ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class SequenceSender extends Thread { private static final Log LOG = LogFactory . getLog ( SequenceSender . class ) ; private static final Exchange STOP = createStopSignal ( ) ; private BlockingQueue < Exchange > queue ; private Processor processor ; public SequenceSender ( Processor processor ) { this . processor = processor ; } public void setQueue ( BlockingQueue < Exchange > queue ) { this . queue = queue ; } public void run ( ) { while ( true ) { try { Exchange exchange = queue . take ( ) ; if ( exchange == STOP ) { LOG . info ( "exit processing loop after cancellation" ) ; return ; } processor . process ( exchange ) ; } catch ( InterruptedException e ) { LOG . info ( "exit processing loop after interrupt" ) ; return ; } catch ( Exception e ) { LOG . warn ( "exception during exchange processing" ) ; } } } public void cancel ( ) throws InterruptedException { queue . put ( STOP ) ; } private static Exchange createStopSignal ( ) { return ( Exchange ) Proxy . newProxyInstance ( SequenceSender . class . getClassLoader ( ) , new Class [ ] { Exchange . class } , createStopHandler ( ) ) ; } private static InvocationHandler createStopHandler ( ) { return new InvocationHandler ( ) { public Object invoke ( Object proxy , Method method , Object [ ] args ) throws Throwable { throw new RuntimeException ( "illegal method invocation on stop signal" ) ; } } ; } } 	1	['7', '2', '0', '6', '17', '9', '1', '5', '4', '0.75', '75', '1', '3', '0.923076923', '0.333333333', '0', '0', '9.142857143', '2', '0.8571', '1']
package org . apache . camel . spi ; import javax . management . JMException ; import javax . management . MBeanServer ; import javax . management . ObjectName ; import org . apache . camel . Service ; import org . apache . camel . management . CamelNamingStrategy ; public interface InstrumentationAgent extends Service { void register ( Object obj , ObjectName name ) throws JMException ; void register ( Object obj , ObjectName name , boolean forceRegistration ) throws JMException ; void unregister ( ObjectName name ) throws JMException ; MBeanServer getMBeanServer ( ) ; CamelNamingStrategy getNamingStrategy ( ) ; } 	1	['5', '1', '0', '5', '5', '10', '3', '2', '5', '2', '5', '0', '0', '0', '0.55', '0', '0', '0', '1', '1', '2']
package org . apache . camel . component . file ; import org . apache . camel . Consumer ; import org . apache . camel . Processor ; import org . apache . camel . Producer ; import org . apache . camel . ExchangePattern ; import org . apache . camel . Message ; import org . apache . camel . component . file . strategy . DefaultFileRenamer ; import org . apache . camel . component . file . strategy . DeleteFileProcessStrategy ; import org . apache . camel . component . file . strategy . FileProcessStrategy ; import org . apache . camel . component . file . strategy . FileProcessStrategySupport ; import org . apache . camel . component . file . strategy . NoOpFileProcessStrategy ; import org . apache . camel . component . file . strategy . RenameFileProcessStrategy ; import org . apache . camel . impl . ScheduledPollEndpoint ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import java . io . File ; public class FileEndpoint extends ScheduledPollEndpoint < FileExchange > { private static final transient Log LOG = LogFactory . getLog ( FileEndpoint . class ) ; private File file ; private FileProcessStrategy fileProcessStrategy ; private boolean autoCreate = true ; private boolean lock = true ; private boolean delete ; private boolean noop ; private boolean append = true ; private String moveNamePrefix ; private String moveNamePostfix ; private String [ ] excludedNamePrefixes = { "." } ; private String [ ] excludedNamePostfixes = { FileProcessStrategySupport . DEFAULT_LOCK_FILE_POSTFIX } ; private int bufferSize = 128 * 1024 ; private boolean ignoreFileNameHeader ; protected FileEndpoint ( File file , String endpointUri , FileComponent component ) { super ( endpointUri , component ) ; this . file = file ; } public Producer < FileExchange > createProducer ( ) throws Exception { Producer < FileExchange > result = new FileProducer ( this ) ; return result ; } public Consumer < FileExchange > createConsumer ( Processor file ) throws Exception { Consumer < FileExchange > result = new FileConsumer ( this , file ) ; configureConsumer ( result ) ; return result ; } public FileExchange createExchange ( File file ) { return new FileExchange ( getContext ( ) , getExchangePattern ( ) , file ) ; } public FileExchange createExchange ( ) { return createExchange ( getFile ( ) ) ; } public FileExchange createExchange ( ExchangePattern pattern ) { return new FileExchange ( getContext ( ) , pattern , file ) ; } public void configureMessage ( File file , Message message ) { message . setBody ( file ) ; String path = file . getPath ( ) ; String relativePath = path . substring ( path . length ( ) ) ; if ( relativePath . startsWith ( File . separator ) || relativePath . startsWith ( "/" ) ) { relativePath = relativePath . substring ( 1 ) ; } message . setHeader ( FileComponent . HEADER_FILE_NAME , relativePath ) ; } public File getFile ( ) { if ( autoCreate && ! file . exists ( ) ) { file . mkdirs ( ) ; } return file ; } public boolean isSingleton ( ) { return true ; } public boolean isAutoCreate ( ) { return this . autoCreate ; } public void setAutoCreate ( boolean autoCreate ) { this . autoCreate = autoCreate ; } public FileProcessStrategy getFileStrategy ( ) { if ( fileProcessStrategy == null ) { fileProcessStrategy = createFileStrategy ( ) ; LOG . debug ( "" + this + " using strategy: " + fileProcessStrategy ) ; } return fileProcessStrategy ; } public void setFileStrategy ( FileProcessStrategy fileProcessStrategy ) { this . fileProcessStrategy = fileProcessStrategy ; } public boolean isDelete ( ) { return delete ; } public void setDelete ( boolean delete ) { this . delete = delete ; } public boolean isLock ( ) { return lock ; } public void setLock ( boolean lock ) { this . lock = lock ; } public String getMoveNamePostfix ( ) { return moveNamePostfix ; } public void setMoveNamePostfix ( String moveNamePostfix ) { this . moveNamePostfix = moveNamePostfix ; } public String getMoveNamePrefix ( ) { return moveNamePrefix ; } public void setMoveNamePrefix ( String moveNamePrefix ) { this . moveNamePrefix = moveNamePrefix ; } public String [ ] getExcludedNamePrefixes ( ) { return excludedNamePrefixes ; } public void setExcludedNamePrefixes ( String [ ] excludedNamePrefixes ) { this . excludedNamePrefixes = excludedNamePrefixes ; } public String [ ] getExcludedNamePostfixes ( ) { return excludedNamePostfixes ; } public void setExcludedNamePostfixes ( String [ ] excludedNamePostfixes ) { this . excludedNamePostfixes = excludedNamePostfixes ; } public boolean isNoop ( ) { return noop ; } public void setNoop ( boolean noop ) { this . noop = noop ; } public boolean isAppend ( ) { return append ; } public void setAppend ( boolean append ) { this . append = append ; } public int getBufferSize ( ) { return bufferSize ; } public void setBufferSize ( int bufferSize ) { this . bufferSize = bufferSize ; } public boolean isIgnoreFileNameHeader ( ) { return ignoreFileNameHeader ; } public void setIgnoreFileNameHeader ( boolean ignoreFileNameHeader ) { this . ignoreFileNameHeader = ignoreFileNameHeader ; } protected FileProcessStrategy createFileStrategy ( ) { if ( isNoop ( ) ) { return new NoOpFileProcessStrategy ( ) ; } else if ( moveNamePostfix != null || moveNamePrefix != null ) { if ( isDelete ( ) ) { throw new IllegalArgumentException ( "You cannot set the deleteFiles property and a moveFilenamePostfix or moveFilenamePrefix" ) ; } return new RenameFileProcessStrategy ( isLock ( ) , moveNamePrefix , moveNamePostfix ) ; } else if ( isDelete ( ) ) { return new DeleteFileProcessStrategy ( isLock ( ) ) ; } else { return new RenameFileProcessStrategy ( isLock ( ) ) ; } } } 	1	['37', '3', '0', '21', '61', '598', '8', '19', '34', '0.932539683', '335', '1', '2', '0.375', '0.143939394', '1', '1', '7.675675676', '6', '1.2162', '8']
package org . apache . camel . model ; import java . util . ArrayList ; import java . util . List ; import java . util . Collection ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlElement ; import javax . xml . bind . annotation . XmlElementRef ; import javax . xml . bind . annotation . XmlRootElement ; import javax . xml . bind . annotation . XmlTransient ; import org . apache . camel . Processor ; import org . apache . camel . Route ; import org . apache . camel . builder . ErrorHandlerBuilder ; import org . apache . camel . impl . RouteContext ; import org . apache . camel . processor . CatchProcessor ; import org . apache . camel . processor . RedeliveryPolicy ; import org . apache . camel . util . ObjectHelper ; @ XmlRootElement ( name = "onException" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class ExceptionType extends ProcessorType < ProcessorType > { @ XmlElementRef private List < InterceptorType > interceptors = new ArrayList < InterceptorType > ( ) ; @ XmlElement ( name = "exception" ) private List < String > exceptions = new ArrayList < String > ( ) ; @ XmlElement ( name = "redeliveryPolicy" , required = false ) private RedeliveryPolicyType redeliveryPolicy ; @ XmlElementRef private List < ProcessorType < ? > > outputs = new ArrayList < ProcessorType < ? > > ( ) ; @ XmlTransient private List < Class > exceptionClasses ; @ XmlTransient private Processor errorHandler ; public ExceptionType ( ) { } public ExceptionType ( List < Class > exceptionClasses ) { this . exceptionClasses = exceptionClasses ; } public ExceptionType ( Class exceptionType ) { exceptionClasses = new ArrayList < Class > ( ) ; exceptionClasses . add ( exceptionType ) ; } @ Override public String toString ( ) { return "Exception[ " + getExceptionClasses ( ) + " -> " + getOutputs ( ) + "]" ; } public RedeliveryPolicy createRedeliveryPolicy ( RedeliveryPolicy parentPolicy ) { if ( redeliveryPolicy != null ) { return redeliveryPolicy . createRedeliveryPolicy ( parentPolicy ) ; } else if ( errorHandler != null ) { RedeliveryPolicy answer = parentPolicy . copy ( ) ; answer . setMaximumRedeliveries ( 0 ) ; return answer ; } return parentPolicy ; } public void addRoutes ( RouteContext routeContext , Collection < Route > routes ) throws Exception { errorHandler = routeContext . createProcessor ( this ) ; ErrorHandlerBuilder builder = routeContext . getRoute ( ) . getErrorHandlerBuilder ( ) ; builder . addErrorHandlers ( this ) ; } @ Override public CatchProcessor createProcessor ( RouteContext routeContext ) throws Exception { Processor childProcessor = routeContext . createProcessor ( this ) ; return new CatchProcessor ( getExceptionClasses ( ) , childProcessor ) ; } public ExceptionType backOffMultiplier ( double backOffMultiplier ) { getOrCreateRedeliveryPolicy ( ) . backOffMultiplier ( backOffMultiplier ) ; return this ; } public ExceptionType collisionAvoidanceFactor ( double collisionAvoidanceFactor ) { getOrCreateRedeliveryPolicy ( ) . collisionAvoidanceFactor ( collisionAvoidanceFactor ) ; return this ; } public ExceptionType collisionAvoidancePercent ( short collisionAvoidancePercent ) { getOrCreateRedeliveryPolicy ( ) . collisionAvoidancePercent ( collisionAvoidancePercent ) ; return this ; } public ExceptionType initialRedeliveryDelay ( long initialRedeliveryDelay ) { getOrCreateRedeliveryPolicy ( ) . initialRedeliveryDelay ( initialRedeliveryDelay ) ; return this ; } public ExceptionType maximumRedeliveries ( int maximumRedeliveries ) { getOrCreateRedeliveryPolicy ( ) . maximumRedeliveries ( maximumRedeliveries ) ; return this ; } public ExceptionType useCollisionAvoidance ( ) { getOrCreateRedeliveryPolicy ( ) . useCollisionAvoidance ( ) ; return this ; } public ExceptionType useExponentialBackOff ( ) { getOrCreateRedeliveryPolicy ( ) . useExponentialBackOff ( ) ; return this ; } public List < InterceptorType > getInterceptors ( ) { return interceptors ; } public void setInterceptors ( List < InterceptorType > interceptors ) { this . interceptors = interceptors ; } public List < ProcessorType < ? > > getOutputs ( ) { return outputs ; } public void setOutputs ( List < ProcessorType < ? > > outputs ) { this . outputs = outputs ; } public List < Class > getExceptionClasses ( ) { if ( exceptionClasses == null ) { exceptionClasses = createExceptionClasses ( ) ; } return exceptionClasses ; } public void setExceptionClasses ( List < Class > exceptionClasses ) { this . exceptionClasses = exceptionClasses ; } public List < String > getExceptions ( ) { return exceptions ; } public void setExceptions ( List < String > exceptions ) { this . exceptions = exceptions ; } public Processor getErrorHandler ( ) { return errorHandler ; } public RedeliveryPolicyType getRedeliveryPolicy ( ) { return redeliveryPolicy ; } public void setRedeliveryPolicy ( RedeliveryPolicyType redeliveryPolicy ) { this . redeliveryPolicy = redeliveryPolicy ; } protected RedeliveryPolicyType getOrCreateRedeliveryPolicy ( ) { if ( redeliveryPolicy == null ) { redeliveryPolicy = new RedeliveryPolicyType ( ) ; } return redeliveryPolicy ; } protected List < Class > createExceptionClasses ( ) { List < String > list = getExceptions ( ) ; List < Class > answer = new ArrayList < Class > ( list . size ( ) ) ; for ( String name : list ) { Class type = ObjectHelper . loadClass ( name , getClass ( ) . getClassLoader ( ) ) ; answer . add ( type ) ; } return answer ; } } 	1	['28', '2', '0', '14', '58', '302', '7', '9', '26', '0.802469136', '303', '1', '2', '0.788135593', '0.146103896', '1', '4', '9.607142857', '3', '1.0714', '3']
package org . apache . camel . impl ; import org . apache . camel . Exchange ; import org . apache . camel . Message ; import org . apache . camel . util . UuidGenerator ; public abstract class MessageSupport implements Message { private static final UuidGenerator DEFALT_ID_GENERATOR = new UuidGenerator ( ) ; private Exchange exchange ; private Object body ; private String messageId = DEFALT_ID_GENERATOR . generateId ( ) ; public Object getBody ( ) { if ( body == null ) { body = createBody ( ) ; } return body ; } @ SuppressWarnings ( { "unchecked" } ) public < T > T getBody ( Class < T > type ) { Exchange e = getExchange ( ) ; if ( e != null ) { return e . getContext ( ) . getTypeConverter ( ) . convertTo ( type , getBody ( ) ) ; } return ( T ) getBody ( ) ; } public void setBody ( Object body ) { this . body = body ; } public < T > void setBody ( Object value , Class < T > type ) { Exchange e = getExchange ( ) ; if ( e != null ) { T v = e . getContext ( ) . getTypeConverter ( ) . convertTo ( type , value ) ; if ( v != null ) { value = v ; } } setBody ( value ) ; } public Message copy ( ) { Message answer = newInstance ( ) ; answer . copyFrom ( this ) ; return answer ; } public void copyFrom ( Message that ) { setMessageId ( that . getMessageId ( ) ) ; setBody ( that . getBody ( ) ) ; getHeaders ( ) . putAll ( that . getHeaders ( ) ) ; } public Exchange getExchange ( ) { return exchange ; } public void setExchange ( Exchange exchange ) { this . exchange = exchange ; } public abstract Message newInstance ( ) ; protected Object createBody ( ) { return null ; } public String getMessageId ( ) { return this . messageId ; } public void setMessageId ( String messageId ) { this . messageId = messageId ; } } 	1	['14', '1', '1', '7', '26', '79', '2', '5', '12', '0.788461538', '118', '1', '2', '0', '0.256410256', '0', '0', '7.142857143', '3', '1.1429', '3']
package org . apache . camel . builder ; import org . apache . camel . CamelContext ; import org . apache . camel . Expression ; import org . apache . camel . model . ProcessorType ; import org . apache . camel . spi . Language ; public class ExpressionClause < T extends ProcessorType > { private T result ; private CamelContext camelContext ; public T el ( String text ) { return language ( "el" , text ) ; } public T groovy ( String text ) { return language ( "groovy" , text ) ; } public T javaScript ( String text ) { return language ( "js" , text ) ; } public T ognl ( String text ) { return language ( "ognl" , text ) ; } public T php ( String text ) { return language ( "php" , text ) ; } public T python ( String text ) { return language ( "python" , text ) ; } public T ruby ( String text ) { return language ( "ruby" , text ) ; } public T sql ( String text ) { return language ( "sql" , text ) ; } public T simple ( String text ) { return language ( "simple" , text ) ; } public T xpath ( String text ) { return language ( "xpath" , text ) ; } public T xqery ( String text ) { return language ( "xqery" , text ) ; } public T language ( String languageName , String text ) { Expression expression = createExpression ( "el" , text ) ; return result ; } protected Expression createExpression ( String languageName , String text ) { Language language = camelContext . resolveLanguage ( languageName ) ; if ( language == null ) { throw new IllegalArgumentException ( "Could not resolve language: " + languageName ) ; } return language . createExpression ( text ) ; } } 	1	['14', '1', '0', '4', '21', '91', '0', '4', '13', '0.538461538', '105', '1', '2', '0', '0.964285714', '0', '0', '6.357142857', '2', '1', '5']
package org . apache . camel . component . file . strategy ; import java . io . File ; import java . io . IOException ; import org . apache . camel . component . file . FileEndpoint ; import org . apache . camel . component . file . FileExchange ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class RenameFileProcessStrategy extends FileProcessStrategySupport { private static final transient Log LOG = LogFactory . getLog ( RenameFileProcessStrategy . class ) ; private FileRenamer renamer ; public RenameFileProcessStrategy ( ) { this ( true ) ; } public RenameFileProcessStrategy ( boolean lock ) { this ( lock , ".camel/" , "" ) ; } public RenameFileProcessStrategy ( boolean lock , String namePrefix , String namePostfix ) { this ( lock , new DefaultFileRenamer ( namePrefix , namePostfix ) ) ; } public RenameFileProcessStrategy ( boolean lock , FileRenamer renamer ) { super ( lock ) ; this . renamer = renamer ; } public void commit ( FileEndpoint endpoint , FileExchange exchange , File file ) throws Exception { File newName = renamer . renameFile ( file ) ; newName . getParentFile ( ) . mkdirs ( ) ; if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Renaming file: " + file + " to: " + newName ) ; } boolean renamed = file . renameTo ( newName ) ; if ( ! renamed ) { throw new IOException ( "Could not rename file from: " + file + " to " + newName ) ; } super . commit ( endpoint , exchange , file ) ; } public FileRenamer getRenamer ( ) { return renamer ; } public void setRenamer ( FileRenamer renamer ) { this . renamer = renamer ; } } 	1	['8', '2', '0', '7', '23', '14', '1', '7', '7', '0.642857143', '101', '1', '2', '0.666666667', '0.326530612', '0', '0', '11.375', '1', '0.375', '1']
package org . apache . camel ; public class NoTypeConversionAvailableException extends RuntimeCamelException { private final Object value ; private final Class type ; public NoTypeConversionAvailableException ( Object value , Class type ) { super ( "No converter available to convert value: " + value + " to the required type: " + type . getName ( ) ) ; this . value = value ; this . type = type ; } public Object getValue ( ) { return value ; } public Class getType ( ) { return type ; } } 	1	['3', '5', '0', '1', '9', '0', '0', '1', '3', '0.5', '33', '1', '0', '0.894736842', '0.555555556', '0', '0', '9.333333333', '1', '0.6667', '1']
package org . apache . camel . model ; import java . util . ArrayList ; import java . util . List ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlRootElement ; import javax . xml . bind . annotation . XmlTransient ; import org . apache . camel . Processor ; import org . apache . camel . impl . RouteContext ; import org . apache . camel . processor . CatchProcessor ; import org . apache . camel . processor . TryProcessor ; @ XmlRootElement ( name = "try" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class TryType extends OutputType < TryType > { @ XmlTransient private List < CatchType > catchClauses ; @ XmlTransient private FinallyType finallyClause ; @ XmlTransient private boolean initialized ; @ XmlTransient private List < ProcessorType < ? > > outputsWithoutCatches ; @ Override public String toString ( ) { return "Try[ " + getOutputs ( ) + "]" ; } @ Override public Processor createProcessor ( RouteContext routeContext ) throws Exception { Processor tryProcessor = createOutputsProcessor ( routeContext , getOutputsWithoutCatches ( ) ) ; Processor finallyProcessor = null ; if ( finallyClause != null ) { finallyProcessor = finallyClause . createProcessor ( routeContext ) ; } List < CatchProcessor > catchProcessors = new ArrayList < CatchProcessor > ( ) ; if ( catchClauses != null ) { for ( CatchType catchClause : catchClauses ) { catchProcessors . add ( catchClause . createProcessor ( routeContext ) ) ; } } return new TryProcessor ( tryProcessor , catchProcessors , finallyProcessor ) ; } public CatchType handle ( Class < ? > exceptionType ) { CatchType answer = new CatchType ( exceptionType ) ; addOutput ( answer ) ; return answer ; } public FinallyType handleAll ( ) { FinallyType answer = new FinallyType ( ) ; addOutput ( answer ) ; return answer ; } public List < CatchType > getCatchClauses ( ) { if ( catchClauses == null ) { checkInitialized ( ) ; } return catchClauses ; } public FinallyType getFinallyClause ( ) { if ( finallyClause == null ) { checkInitialized ( ) ; } return finallyClause ; } public List < ProcessorType < ? > > getOutputsWithoutCatches ( ) { if ( outputsWithoutCatches == null ) { checkInitialized ( ) ; } return outputsWithoutCatches ; } public void setOutputs ( List < ProcessorType < ? > > outputs ) { initialized = false ; super . setOutputs ( outputs ) ; } public void addOutput ( ProcessorType output ) { initialized = false ; getOutputs ( ) . add ( output ) ; } protected void checkInitialized ( ) { if ( ! initialized ) { initialized = true ; outputsWithoutCatches = new ArrayList < ProcessorType < ? > > ( ) ; catchClauses = new ArrayList < CatchType > ( ) ; finallyClause = null ; for ( ProcessorType output : outputs ) { if ( output instanceof CatchType ) { catchClauses . add ( ( CatchType ) output ) ; } else if ( output instanceof FinallyType ) { if ( finallyClause != null ) { throw new IllegalArgumentException ( "Multiple finally clauses added: " + finallyClause + " and " + output ) ; } else { finallyClause = ( FinallyType ) output ; } } else { outputsWithoutCatches . add ( output ) ; } } } } } 	1	['11', '3', '0', '8', '30', '37', '1', '8', '10', '0.525', '212', '1', '1', '0.907407407', '0.272727273', '1', '14', '17.90909091', '6', '1.6364', '5']
package org . apache . camel . impl . converter ; public interface TypeConverterLoader { void load ( TypeConverterRegistry registry ) throws Exception ; } 	1	['1', '1', '0', '3', '1', '0', '2', '1', '1', '2', '1', '0', '0', '0', '1', '0', '0', '0', '1', '1', '1']
package org . apache . camel . component . file . strategy ; import java . io . File ; import org . apache . camel . component . file . FileEndpoint ; import org . apache . camel . component . file . FileExchange ; public interface FileProcessStrategy { boolean begin ( FileEndpoint endpoint , FileExchange exchange , File file ) throws Exception ; void commit ( FileEndpoint endpoint , FileExchange exchange , File file ) throws Exception ; } 	1	['2', '1', '0', '5', '2', '1', '4', '2', '2', '2', '2', '0', '0', '0', '1', '0', '0', '0', '1', '1', '1']
package org . apache . camel . component . bean ; import java . lang . reflect . AccessibleObject ; import java . lang . reflect . InvocationTargetException ; import java . lang . reflect . Method ; import java . util . Arrays ; import java . util . List ; import org . apache . camel . Exchange ; import org . apache . camel . Expression ; import org . apache . camel . util . ObjectHelper ; import org . apache . camel . util . ExchangeHelper ; public class MethodInfo { private Class type ; private Method method ; private final List < ParameterInfo > parameters ; private final List < ParameterInfo > bodyParameters ; private final boolean hasCustomAnnotation ; private Expression parametersExpression ; public MethodInfo ( Class type , Method method , List < ParameterInfo > parameters , List < ParameterInfo > bodyParameters , boolean hasCustomAnnotation ) { this . type = type ; this . method = method ; this . parameters = parameters ; this . bodyParameters = bodyParameters ; this . hasCustomAnnotation = hasCustomAnnotation ; this . parametersExpression = createParametersExpression ( ) ; } public String toString ( ) { return method . toString ( ) ; } public MethodInvocation createMethodInvocation ( final Object pojo , final Exchange messageExchange ) { final Object [ ] arguments = ( Object [ ] ) parametersExpression . evaluate ( messageExchange ) ; return new MethodInvocation ( ) { public Method getMethod ( ) { return method ; } public Object [ ] getArguments ( ) { return arguments ; } public Object proceed ( ) throws Throwable { return invoke ( method , pojo , arguments , messageExchange ) ; } public Object getThis ( ) { return pojo ; } public AccessibleObject getStaticPart ( ) { return method ; } } ; } public Class getType ( ) { return type ; } public Method getMethod ( ) { return method ; } public Expression getParametersExpression ( ) { return parametersExpression ; } public List < ParameterInfo > getBodyParameters ( ) { return bodyParameters ; } public Class getBodyParameterType ( ) { ParameterInfo parameterInfo = bodyParameters . get ( 0 ) ; return parameterInfo . getType ( ) ; } public boolean bodyParameterMatches ( Class bodyType ) { Class actualType = getBodyParameterType ( ) ; return actualType != null && ObjectHelper . isAssignableFrom ( bodyType , actualType ) ; } public List < ParameterInfo > getParameters ( ) { return parameters ; } public boolean hasBodyParameter ( ) { return ! bodyParameters . isEmpty ( ) ; } public boolean isHasCustomAnnotation ( ) { return hasCustomAnnotation ; } protected Object invoke ( Method mth , Object pojo , Object [ ] arguments , Exchange exchange ) throws IllegalAccessException , InvocationTargetException { return mth . invoke ( pojo , arguments ) ; } protected Expression createParametersExpression ( ) { final int size = parameters . size ( ) ; final Expression [ ] expressions = new Expression [ size ] ; for ( int i = 0 ; i < size ; i ++ ) { Expression parameterExpression = parameters . get ( i ) . getExpression ( ) ; expressions [ i ] = parameterExpression ; } return new Expression < Exchange > ( ) { public Object evaluate ( Exchange exchange ) { Object [ ] answer = new Object [ size ] ; for ( int i = 0 ; i < size ; i ++ ) { Object value = expressions [ i ] . evaluate ( exchange ) ; value = ExchangeHelper . convertToType ( exchange , parameters . get ( i ) . getType ( ) , value ) ; answer [ i ] = value ; } return answer ; } @ Override public String toString ( ) { return "ParametersExpression: " + Arrays . asList ( expressions ) ; } } ; } } 	1	['16', '1', '0', '8', '28', '74', '3', '7', '12', '0.844444444', '154', '1', '1', '0', '0.1875', '0', '0', '8.25', '3', '1.1875', '2']
package org . apache . camel . model ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlRootElement ; import org . apache . camel . Processor ; import org . apache . camel . impl . RouteContext ; @ XmlRootElement ( name = "otherwise" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class OtherwiseType extends OutputType { @ Override public String toString ( ) { return "Otherwise[" + getOutputs ( ) + "]" ; } @ Override public Processor createProcessor ( RouteContext routeContext ) throws Exception { return routeContext . createProcessor ( this ) ; } @ Override public String getLabel ( ) { return "otherwise" ; } } 	1	['4', '3', '0', '9', '11', '6', '6', '4', '4', '2', '25', '0', '0', '0.97029703', '0.625', '1', '2', '5.25', '1', '0.75', '3']
package org . apache . camel . model ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlAttribute ; import javax . xml . bind . annotation . XmlRootElement ; import javax . xml . bind . annotation . XmlTransient ; import org . apache . camel . Processor ; import org . apache . camel . component . bean . BeanProcessor ; import org . apache . camel . impl . RouteContext ; import org . apache . camel . util . CamelContextHelper ; import org . apache . camel . util . ObjectHelper ; @ XmlRootElement ( name = "bean" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class BeanRef extends OutputType { @ XmlAttribute ( required = true ) private String ref ; @ XmlAttribute ( required = false ) private String method ; @ XmlAttribute ( required = false ) private Class beanType ; @ XmlTransient private Object bean ; public BeanRef ( ) { } public BeanRef ( String ref ) { this . ref = ref ; } public BeanRef ( String ref , String method ) { this . ref = ref ; this . method = method ; } @ Override public String toString ( ) { return "Bean[" + getLabel ( ) + "]" ; } public String getRef ( ) { return ref ; } public void setRef ( String ref ) { this . ref = ref ; } public String getMethod ( ) { return method ; } public void setMethod ( String method ) { this . method = method ; } public void setBean ( Object bean ) { this . bean = bean ; } public Class getBeanType ( ) { return beanType ; } public void setBeanType ( Class beanType ) { this . beanType = beanType ; } @ Override public Processor createProcessor ( RouteContext routeContext ) { if ( bean == null ) { String reference = getRef ( ) ; if ( reference != null ) { bean = routeContext . lookup ( reference , Object . class ) ; } else { ObjectHelper . notNull ( beanType , "bean, ref or beanType" ) ; bean = CamelContextHelper . newInstance ( routeContext . getCamelContext ( ) , beanType ) ; } } BeanProcessor answer = new BeanProcessor ( bean , routeContext . getCamelContext ( ) ) ; if ( method != null ) { answer . setMethodName ( method ) ; } return answer ; } @ Override public String getLabel ( ) { if ( ref != null ) { String methodText = "" ; if ( method != null ) { methodText = " method: " + method ; } return "ref: " + ref + methodText ; } else if ( bean != null ) { return bean . toString ( ) ; } else if ( beanType != null ) { return beanType . getName ( ) ; } else { return "" ; } } } 	1	['13', '3', '0', '8', '25', '26', '1', '7', '13', '0.625', '161', '1', '0', '0.907407407', '0.307692308', '1', '2', '11.07692308', '5', '1.3077', '3']
package org . apache . camel . converter ; import org . apache . camel . Converter ; import org . w3c . dom . Node ; import org . w3c . dom . NodeList ; import java . util . Arrays ; import java . util . Collection ; import java . util . Collections ; import java . util . Iterator ; import java . util . List ; @ Converter public class ObjectConverter { private ObjectConverter ( ) { } public static boolean isCollection ( Object value ) { return value instanceof Collection || ( value != null && value . getClass ( ) . isArray ( ) ) ; } @ Converter public static Iterator iterator ( Object value ) { if ( value == null ) { return Collections . EMPTY_LIST . iterator ( ) ; } else if ( value instanceof Collection ) { Collection collection = ( Collection ) value ; return collection . iterator ( ) ; } else if ( value . getClass ( ) . isArray ( ) ) { List < Object > list = Arrays . asList ( ( Object [ ] ) value ) ; return list . iterator ( ) ; } else if ( value instanceof NodeList ) { final NodeList nodeList = ( NodeList ) value ; return new Iterator < Node > ( ) { int idx = - 1 ; public boolean hasNext ( ) { return ++ idx < nodeList . getLength ( ) ; } public Node next ( ) { return nodeList . item ( idx ) ; } public void remove ( ) { throw new UnsupportedOperationException ( ) ; } } ; } else { return Collections . singletonList ( value ) . iterator ( ) ; } } @ Converter public static boolean toBool ( Object value ) { Boolean answer = toBoolean ( value ) ; if ( answer != null ) { return answer . booleanValue ( ) ; } return false ; } @ Converter public static Boolean toBoolean ( Object value ) { if ( value instanceof Boolean ) { return ( Boolean ) value ; } if ( value instanceof String ) { return "true" . equalsIgnoreCase ( value . toString ( ) ) ? Boolean . TRUE : Boolean . FALSE ; } return null ; } @ Converter public static Boolean toBoolean ( Boolean value ) { if ( value != null ) { return value . booleanValue ( ) ; } return false ; } } 	1	['6', '1', '0', '9', '18', '15', '8', '1', '5', '2', '102', '0', '0', '0', '0.333333333', '0', '0', '16', '5', '2.8333', '3']
package org . apache . camel . util ; import java . io . BufferedInputStream ; import java . io . IOException ; import java . io . InputStream ; import java . util . ArrayList ; import java . util . Collections ; import java . util . List ; import java . util . Properties ; import java . util . concurrent . ConcurrentHashMap ; import org . apache . camel . spi . Injector ; public class FactoryFinder { private final String path ; private final ConcurrentHashMap classMap = new ConcurrentHashMap ( ) ; public FactoryFinder ( ) { this ( "META-INF/services/org/apache/camel/" ) ; } public FactoryFinder ( String path ) { this . path = path ; } public Object newInstance ( String key ) throws IllegalAccessException , InstantiationException , IOException , ClassNotFoundException { return newInstance ( key , ( String ) null ) ; } public Object newInstance ( String key , String propertyPrefix ) throws IllegalAccessException , InstantiationException , IOException , ClassNotFoundException { Class clazz = findClass ( key , propertyPrefix ) ; return clazz . newInstance ( ) ; } public Object newInstance ( String key , Injector injector ) throws IOException , ClassNotFoundException { return newInstance ( key , injector , ( String ) null ) ; } public Object newInstance ( String key , Injector injector , String propertyPrefix ) throws IOException , ClassNotFoundException { Class type = findClass ( key , propertyPrefix ) ; return injector . newInstance ( type ) ; } public < T > T newInstance ( String key , Injector injector , Class < T > expectedType ) throws IOException , ClassNotFoundException { return newInstance ( key , injector , null , expectedType ) ; } public < T > T newInstance ( String key , Injector injector , String propertyPrefix , Class < T > expectedType ) throws IOException , ClassNotFoundException { Class type = findClass ( key , propertyPrefix ) ; Object value = injector . newInstance ( type ) ; if ( expectedType . isInstance ( value ) ) { return expectedType . cast ( value ) ; } else { throw new ClassCastException ( "Not instanceof " + expectedType . getName ( ) + " value: " + value ) ; } } public < T > List < T > newInstances ( String key , Injector injector , Class < T > type ) throws IOException , ClassNotFoundException { List < Class > list = findClasses ( key ) ; List < T > answer = new ArrayList < T > ( list . size ( ) ) ; answer . add ( newInstance ( key , injector , type ) ) ; return answer ; } public Class findClass ( String key ) throws ClassNotFoundException , IOException { return findClass ( key , null ) ; } public Class findClass ( String key , String propertyPrefix ) throws ClassNotFoundException , IOException { if ( propertyPrefix == null ) { propertyPrefix = "" ; } Class clazz = ( Class ) classMap . get ( propertyPrefix + key ) ; if ( clazz == null ) { clazz = newInstance ( doFindFactoryProperies ( key ) , propertyPrefix ) ; classMap . put ( propertyPrefix + key , clazz ) ; } return clazz ; } public List < Class > findClasses ( String key ) throws ClassNotFoundException , IOException { return findClasses ( key , null ) ; } public List < Class > findClasses ( String key , String propertyPrefix ) throws ClassNotFoundException , IOException { Class type = findClass ( key , propertyPrefix ) ; return Collections . singletonList ( type ) ; } public String getPath ( ) { return path ; } private Class newInstance ( Properties properties , String propertyPrefix ) throws ClassNotFoundException , IOException { String className = properties . getProperty ( propertyPrefix + "class" ) ; if ( className == null ) { throw new IOException ( "Expected property is missing: " + propertyPrefix + "class" ) ; } Class clazz = null ; ClassLoader loader = Thread . currentThread ( ) . getContextClassLoader ( ) ; if ( loader != null ) { try { clazz = loader . loadClass ( className ) ; } catch ( ClassNotFoundException e ) { } } if ( clazz == null ) { clazz = FactoryFinder . class . getClassLoader ( ) . loadClass ( className ) ; } return clazz ; } private Properties doFindFactoryProperies ( String key ) throws IOException { String uri = path + key ; ClassLoader classLoader = Thread . currentThread ( ) . getContextClassLoader ( ) ; if ( classLoader == null ) { classLoader = getClass ( ) . getClassLoader ( ) ; } InputStream in = classLoader . getResourceAsStream ( uri ) ; if ( in == null ) { in = FactoryFinder . class . getClassLoader ( ) . getResourceAsStream ( uri ) ; if ( in == null ) { throw new NoFactoryAvailableException ( uri ) ; } } BufferedInputStream reader = null ; try { reader = new BufferedInputStream ( in ) ; Properties properties = new Properties ( ) ; properties . load ( reader ) ; return properties ; } finally { try { reader . close ( ) ; } catch ( Exception ignore ) { } } } } 	1	['16', '1', '0', '6', '47', '112', '4', '2', '14', '0.6', '301', '1', '0', '0', '0.4875', '0', '0', '17.6875', '1', '0.875', '2']
package org . apache . camel . spi ; import org . apache . camel . CamelContext ; import org . apache . camel . Component ; import org . apache . camel . Exchange ; public interface ComponentResolver < E extends Exchange > { Component < E > resolveComponent ( String name , CamelContext context ) throws Exception ; } 	1	['1', '1', '0', '4', '1', '0', '2', '2', '1', '2', '1', '0', '0', '0', '1', '0', '0', '0', '1', '1', '1']
package org . apache . camel ; public class InvalidPayloadException extends CamelExchangeException { private final Class < ? > type ; public InvalidPayloadException ( Exchange exchange , Class < ? > type ) { super ( "No in body available of type: " + type . getName ( ) + NoSuchPropertyException . valueDescription ( exchange . getIn ( ) . getBody ( ) ) , exchange ) ; this . type = type ; } public Class < ? > getType ( ) { return type ; } } 	1	['2', '5', '0', '5', '10', '0', '1', '4', '2', '0', '27', '1', '0', '0.947368421', '0.666666667', '0', '0', '12', '1', '0.5', '1']
package org . apache . camel . processor ; import org . apache . camel . AsyncCallback ; import org . apache . camel . AsyncProcessor ; import org . apache . camel . Exchange ; import org . apache . camel . impl . DefaultUnitOfWork ; import org . apache . camel . spi . UnitOfWork ; public final class UnitOfWorkProcessor extends DelegateAsyncProcessor { public UnitOfWorkProcessor ( AsyncProcessor processor ) { super ( processor ) ; } public boolean process ( final Exchange exchange , final AsyncCallback callback ) { if ( exchange . getUnitOfWork ( ) == null ) { exchange . setUnitOfWork ( new DefaultUnitOfWork ( ) ) ; return processor . process ( exchange , new AsyncCallback ( ) { public void done ( boolean sync ) { callback . done ( sync ) ; exchange . getUnitOfWork ( ) . done ( exchange ) ; exchange . setUnitOfWork ( null ) ; } } ) ; } else { return processor . process ( exchange , callback ) ; } } } 	1	['2', '3', '0', '8', '8', '1', '2', '7', '2', '2', '31', '0', '0', '0.952380952', '0.625', '0', '0', '14.5', '2', '1', '1']
package org . apache . camel . impl ; import java . io . IOException ; import java . io . InputStream ; import java . io . ObjectInput ; import java . io . ObjectOutput ; import java . io . OutputStream ; import org . apache . camel . Exchange ; import org . apache . camel . converter . IOConverter ; import org . apache . camel . spi . DataFormat ; public class SerializationDataFormat implements DataFormat { public void marshal ( Exchange exchange , Object graph , OutputStream stream ) throws IOException { ObjectOutput out = IOConverter . toObjectOutput ( stream ) ; out . writeObject ( graph ) ; out . flush ( ) ; } public Object unmarshal ( Exchange exchange , InputStream stream ) throws IOException , ClassNotFoundException { ObjectInput in = IOConverter . toObjectInput ( stream ) ; return in . readObject ( ) ; } } 	1	['3', '1', '0', '4', '9', '3', '1', '3', '3', '2', '21', '0', '0', '0', '0.533333333', '0', '0', '6', '1', '0.6667', '1']
package org . apache . camel . processor ; import java . util . ArrayList ; import java . util . Collection ; import org . apache . camel . Endpoint ; import org . apache . camel . Exchange ; import org . apache . camel . Processor ; import org . apache . camel . impl . ServiceSupport ; import org . apache . camel . util . ServiceHelper ; public class MulticastProcessor extends ServiceSupport implements Processor { private Collection < Processor > processors ; public MulticastProcessor ( Collection < Processor > processors ) { this . processors = processors ; } public static < E extends Exchange > Collection < Processor > toProducers ( Collection < Endpoint > endpoints ) throws Exception { Collection < Processor > answer = new ArrayList < Processor > ( ) ; for ( Endpoint endpoint : endpoints ) { answer . add ( endpoint . createProducer ( ) ) ; } return answer ; } @ Override public String toString ( ) { return "Multicast" + getProcessors ( ) ; } public void process ( Exchange exchange ) throws Exception { for ( Processor producer : processors ) { Exchange copy = copyExchangeStrategy ( producer , exchange ) ; producer . process ( copy ) ; } } protected void doStop ( ) throws Exception { ServiceHelper . stopServices ( processors ) ; } protected void doStart ( ) throws Exception { ServiceHelper . startServices ( processors ) ; } public Collection < Processor > getProcessors ( ) { return processors ; } protected Exchange copyExchangeStrategy ( Processor processor , Exchange exchange ) { return exchange . copy ( ) ; } } 	1	['8', '2', '1', '8', '23', '8', '2', '6', '5', '0.285714286', '82', '1', '0', '0.65', '0.375', '1', '1', '9.125', '1', '0.875', '5']
package org . apache . camel . impl ; import java . io . IOException ; import java . util . ArrayList ; import java . util . Collection ; import java . util . HashMap ; import java . util . List ; import java . util . Map ; import java . util . concurrent . Callable ; import javax . naming . Context ; import org . apache . camel . CamelContext ; import org . apache . camel . Component ; import org . apache . camel . Endpoint ; import org . apache . camel . Exchange ; import org . apache . camel . spi . LifecycleStrategy ; import org . apache . camel . Processor ; import org . apache . camel . ResolveEndpointFailedException ; import org . apache . camel . Route ; import org . apache . camel . RuntimeCamelException ; import org . apache . camel . Service ; import org . apache . camel . TypeConverter ; import org . apache . camel . model . RouteType ; import org . apache . camel . builder . RouteBuilder ; import org . apache . camel . impl . converter . DefaultTypeConverter ; import org . apache . camel . spi . ComponentResolver ; import org . apache . camel . spi . ExchangeConverter ; import org . apache . camel . spi . Injector ; import org . apache . camel . spi . Language ; import org . apache . camel . spi . LanguageResolver ; import org . apache . camel . spi . Registry ; import org . apache . camel . util . FactoryFinder ; import org . apache . camel . util . NoFactoryAvailableException ; import org . apache . camel . util . ObjectHelper ; import static org . apache . camel . util . ServiceHelper . startServices ; import static org . apache . camel . util . ServiceHelper . stopServices ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class DefaultCamelContext extends ServiceSupport implements CamelContext , Service { private static final transient Log LOG = LogFactory . getLog ( DefaultCamelContext . class ) ; private static final String NAME_PREFIX = "camel-" ; private static int NAME_SUFFIX = 0 ; private String name ; private Map < String , Endpoint > endpoints = new HashMap < String , Endpoint > ( ) ; private Map < String , Component > components = new HashMap < String , Component > ( ) ; private List < Route > routes ; private List < Service > servicesToClose = new ArrayList < Service > ( ) ; private TypeConverter typeConverter ; private ExchangeConverter exchangeConverter ; private Injector injector ; private ComponentResolver componentResolver ; private boolean autoCreateComponents = true ; private LanguageResolver languageResolver = new DefaultLanguageResolver ( ) ; private Registry registry ; private LifecycleStrategy lifecycleStrategy = new DefaultLifecycleStrategy ( ) ; private List < RouteType > routeDefinitions = new ArrayList < RouteType > ( ) ; public DefaultCamelContext ( ) { name = NAME_PREFIX + ++ NAME_SUFFIX ; } public DefaultCamelContext ( Context jndiContext ) { this ( new JndiRegistry ( jndiContext ) ) ; } public DefaultCamelContext ( Registry registry ) { this ( ) ; this . registry = registry ; } public String getName ( ) { return name ; } public void setName ( String name ) { this . name = name ; } public void addComponent ( String componentName , final Component component ) { if ( component == null ) { throw new IllegalArgumentException ( "Component cannot be null" ) ; } synchronized ( components ) { if ( components . containsKey ( componentName ) ) { throw new IllegalArgumentException ( "Component previously added: " + componentName ) ; } component . setCamelContext ( this ) ; components . put ( componentName , component ) ; } } public Component getComponent ( String name ) { synchronized ( components ) { Component component = components . get ( name ) ; if ( component == null && autoCreateComponents ) { try { component = getComponentResolver ( ) . resolveComponent ( name , this ) ; if ( component != null ) { addComponent ( name , component ) ; if ( isStarted ( ) ) { startServices ( component ) ; } } } catch ( Exception e ) { throw new RuntimeCamelException ( "Could not auto create component: " + name , e ) ; } } return component ; } } public < T extends Component > T getComponent ( String name , Class < T > componentType ) { Component component = getComponent ( name ) ; if ( componentType . isInstance ( component ) ) { return componentType . cast ( component ) ; } else { throw new IllegalArgumentException ( "The component is not of type: " + componentType + " but is: " + component ) ; } } public Component removeComponent ( String componentName ) { synchronized ( components ) { return components . remove ( componentName ) ; } } public Component getOrCreateComponent ( String componentName , Callable < Component > factory ) { synchronized ( components ) { Component component = components . get ( componentName ) ; if ( component == null ) { try { component = factory . call ( ) ; if ( component == null ) { throw new RuntimeCamelException ( "Factory failed to create the " + componentName + " component, it returned null." ) ; } components . put ( componentName , component ) ; component . setCamelContext ( this ) ; } catch ( Exception e ) { throw new RuntimeCamelException ( "Factory failed to create the " + componentName + " component" , e ) ; } } return component ; } } public Collection < Endpoint > getSingletonEndpoints ( ) { synchronized ( endpoints ) { return new ArrayList < Endpoint > ( endpoints . values ( ) ) ; } } public Endpoint addSingletonEndpoint ( String uri , Endpoint endpoint ) throws Exception { Endpoint oldEndpoint ; synchronized ( endpoints ) { startServices ( endpoint ) ; oldEndpoint = endpoints . remove ( uri ) ; endpoints . put ( uri , endpoint ) ; stopServices ( oldEndpoint ) ; } return oldEndpoint ; } public Endpoint removeSingletonEndpoint ( String uri ) throws Exception { Endpoint oldEndpoint ; synchronized ( endpoints ) { oldEndpoint = endpoints . remove ( uri ) ; stopServices ( oldEndpoint ) ; } return oldEndpoint ; } public Endpoint getEndpoint ( String uri ) { Endpoint answer ; synchronized ( endpoints ) { answer = endpoints . get ( uri ) ; if ( answer == null ) { try { String splitURI [ ] = ObjectHelper . splitOnCharacter ( uri , ":" , 2 ) ; if ( splitURI [ 1 ] != null ) { String scheme = splitURI [ 0 ] ; Component component = getComponent ( scheme ) ; if ( component != null ) { answer = component . createEndpoint ( uri ) ; if ( answer != null && LOG . isDebugEnabled ( ) ) { LOG . debug ( uri + " converted to endpoint: " + answer + " by component: " + component ) ; } } } if ( answer == null ) { answer = createEndpoint ( uri ) ; } if ( answer != null && answer . isSingleton ( ) ) { startServices ( answer ) ; endpoints . put ( uri , answer ) ; lifecycleStrategy . onEndpointAdd ( answer ) ; } } catch ( Exception e ) { throw new ResolveEndpointFailedException ( uri , e ) ; } } } return answer ; } public < T extends Endpoint > T getEndpoint ( String name , Class < T > endpointType ) { Endpoint endpoint = getEndpoint ( name ) ; if ( endpointType . isInstance ( endpoint ) ) { return endpointType . cast ( endpoint ) ; } else { throw new IllegalArgumentException ( "The endpoint is not of type: " + endpointType + " but is: " + endpoint ) ; } } public List < Route > getRoutes ( ) { return routes ; } public void setRoutes ( List < Route > routes ) { this . routes = routes ; } public void addRoutes ( Collection < Route > routes ) throws Exception { if ( this . routes == null ) { this . routes = new ArrayList < Route > ( routes ) ; } else { this . routes . addAll ( routes ) ; } lifecycleStrategy . onRoutesAdd ( routes ) ; if ( shouldStartRoutes ( ) ) { startRoutes ( routes ) ; } } public void addRoutes ( RouteBuilder builder ) throws Exception { builder . setContext ( this ) ; List < Route > routeList = builder . getRouteList ( ) ; LOG . debug ( "Adding routes from: " + builder + " routes: " + routeList ) ; addRoutes ( routeList ) ; } public void addRouteDefinitions ( Collection < RouteType > routeDefinitions ) throws Exception { this . routeDefinitions . addAll ( routeDefinitions ) ; if ( shouldStartRoutes ( ) ) { startRouteDefinitions ( routeDefinitions ) ; } } public Language resolveLanguage ( String language ) { return getLanguageResolver ( ) . resolveLanguage ( language , this ) ; } public ExchangeConverter getExchangeConverter ( ) { if ( exchangeConverter == null ) { exchangeConverter = createExchangeConverter ( ) ; } return exchangeConverter ; } public void setExchangeConverter ( ExchangeConverter exchangeConverter ) { this . exchangeConverter = exchangeConverter ; } public TypeConverter getTypeConverter ( ) { if ( typeConverter == null ) { typeConverter = createTypeConverter ( ) ; } return typeConverter ; } public void setTypeConverter ( TypeConverter typeConverter ) { this . typeConverter = typeConverter ; } public Injector getInjector ( ) { if ( injector == null ) { injector = createInjector ( ) ; } return injector ; } public void setInjector ( Injector injector ) { this . injector = injector ; } public ComponentResolver getComponentResolver ( ) { if ( componentResolver == null ) { componentResolver = createComponentResolver ( ) ; } return componentResolver ; } public void setComponentResolver ( ComponentResolver componentResolver ) { this . componentResolver = componentResolver ; } public LanguageResolver getLanguageResolver ( ) { return languageResolver ; } public void setLanguageResolver ( LanguageResolver languageResolver ) { this . languageResolver = languageResolver ; } public boolean isAutoCreateComponents ( ) { return autoCreateComponents ; } public void setAutoCreateComponents ( boolean autoCreateComponents ) { this . autoCreateComponents = autoCreateComponents ; } public Registry getRegistry ( ) { if ( registry == null ) { registry = createRegistry ( ) ; } return registry ; } public void setRegistry ( Registry registry ) { this . registry = registry ; } public LifecycleStrategy getLifecycleStrategy ( ) { return lifecycleStrategy ; } public void setLifecycleStrategy ( LifecycleStrategy lifecycleStrategy ) { this . lifecycleStrategy = lifecycleStrategy ; } public List < RouteType > getRouteDefinitions ( ) { return routeDefinitions ; } protected void doStart ( ) throws Exception { forceLazyInitialization ( ) ; if ( components != null ) { for ( Component component : components . values ( ) ) { startServices ( component ) ; } } startRouteDefinitions ( routeDefinitions ) ; startRoutes ( routes ) ; } protected void startRouteDefinitions ( Collection < RouteType > list ) throws Exception { if ( list != null ) { for ( RouteType route : list ) { lifecycleStrategy . beforeStartRouteType ( this , route ) ; route . addRoutes ( this ) ; } } } protected void doStop ( ) throws Exception { stopServices ( servicesToClose ) ; if ( components != null ) { for ( Component component : components . values ( ) ) { stopServices ( component ) ; } } } protected void startRoutes ( Collection < Route > routeList ) throws Exception { if ( routeList != null ) { for ( Route < Exchange > route : routeList ) { List < Service > services = route . getServicesForRoute ( ) ; servicesToClose . addAll ( services ) ; startServices ( services ) ; } } } protected void forceLazyInitialization ( ) { getExchangeConverter ( ) ; getInjector ( ) ; getLanguageResolver ( ) ; getTypeConverter ( ) ; } protected ExchangeConverter createExchangeConverter ( ) { return new DefaultExchangeConverter ( ) ; } protected TypeConverter createTypeConverter ( ) { return new DefaultTypeConverter ( getInjector ( ) ) ; } protected Injector createInjector ( ) { FactoryFinder finder = new FactoryFinder ( ) ; try { return ( Injector ) finder . newInstance ( "Injector" ) ; } catch ( NoFactoryAvailableException e ) { return new ReflectionInjector ( ) ; } catch ( IllegalAccessException e ) { throw new RuntimeCamelException ( e ) ; } catch ( InstantiationException e ) { throw new RuntimeCamelException ( e ) ; } catch ( IOException e ) { throw new RuntimeCamelException ( e ) ; } catch ( ClassNotFoundException e ) { throw new RuntimeCamelException ( e ) ; } } protected ComponentResolver createComponentResolver ( ) { return new DefaultComponentResolver ( ) ; } protected Registry createRegistry ( ) { return new JndiRegistry ( ) ; } protected Endpoint createEndpoint ( String uri ) { Object value = getRegistry ( ) . lookup ( uri ) ; if ( value instanceof Endpoint ) { return ( Endpoint ) value ; } else if ( value instanceof Processor ) { return new ProcessorEndpoint ( uri , this , ( Processor ) value ) ; } else if ( value != null ) { return convertBeanToEndpoint ( uri , value ) ; } return null ; } protected Endpoint convertBeanToEndpoint ( String uri , Object bean ) { throw new IllegalArgumentException ( "uri: " + uri + " bean: " + bean + " could not be converted to an Endpoint" ) ; } protected boolean shouldStartRoutes ( ) { return isStarted ( ) && ! isStarting ( ) ; } } 	1	['52', '2', '1', '36', '112', '1166', '4', '33', '38', '0.91349481', '993', '1', '8', '0.213114754', '0.08875129', '1', '1', '17.76923077', '7', '1.3846', '7']
package org . apache . camel . processor ; import java . util . Iterator ; import org . apache . camel . Exchange ; import org . apache . camel . Expression ; import org . apache . camel . Processor ; import org . apache . camel . converter . ObjectConverter ; import org . apache . camel . impl . ServiceSupport ; import org . apache . camel . util . ServiceHelper ; import static org . apache . camel . util . ObjectHelper . notNull ; public class Splitter extends ServiceSupport implements Processor { private final Processor processor ; private final Expression expression ; public Splitter ( Expression expression , Processor destination ) { this . processor = destination ; this . expression = expression ; notNull ( destination , "destination" ) ; notNull ( expression , "expression" ) ; } @ Override public String toString ( ) { return "Splitter[on: " + expression + " to: " + processor + "]" ; } public void process ( Exchange exchange ) throws Exception { Object value = expression . evaluate ( exchange ) ; Iterator iter = ObjectConverter . iterator ( value ) ; while ( iter . hasNext ( ) ) { Object part = iter . next ( ) ; Exchange newExchange = exchange . copy ( ) ; newExchange . getIn ( ) . setBody ( part ) ; processor . process ( newExchange ) ; } } protected void doStart ( ) throws Exception { ServiceHelper . startServices ( processor ) ; } protected void doStop ( ) throws Exception { ServiceHelper . stopServices ( processor ) ; } } 	1	['5', '2', '0', '9', '21', '0', '1', '8', '3', '0.25', '84', '1', '2', '0.764705882', '0.4', '1', '1', '15.4', '1', '0.8', '2']
package org . apache . camel . model ; import org . apache . camel . model . language . ExpressionType ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlAttribute ; import javax . xml . bind . annotation . XmlElementRef ; import javax . xml . bind . annotation . XmlRootElement ; import java . util . ArrayList ; import java . util . List ; @ XmlRootElement ( name = "serviceActivation" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class ServiceActivationType { @ XmlAttribute private String group = "default" ; @ XmlElementRef private List < ExpressionType > uris = new ArrayList < ExpressionType > ( ) ; public String getGroup ( ) { return group ; } public void setGroup ( String group ) { this . group = group ; } public List < ExpressionType > getUris ( ) { return uris ; } public void setUris ( List < ExpressionType > uris ) { this . uris = uris ; } } 	1	['5', '1', '0', '0', '7', '0', '0', '0', '5', '0.5', '32', '1', '0', '0', '0.466666667', '0', '0', '5', '1', '0.8', '1']
package org . apache . camel . builder . xml ; public class StreamResultHandlerFactory implements ResultHandlerFactory { public ResultHandler createResult ( ) { return new StreamResultHandler ( ) ; } } 	1	['2', '1', '0', '4', '4', '1', '1', '3', '2', '2', '9', '0', '0', '0', '1', '0', '0', '3.5', '1', '0.5', '2']
package org . apache . camel . model ; import org . apache . camel . Endpoint ; import org . apache . camel . impl . RouteContext ; import org . apache . camel . util . ObjectHelper ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlAttribute ; import javax . xml . bind . annotation . XmlRootElement ; import javax . xml . bind . annotation . XmlTransient ; @ XmlRootElement ( name = "from" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class FromType { @ XmlAttribute private String uri ; @ XmlAttribute private String ref ; @ XmlTransient private Endpoint endpoint ; public FromType ( ) { } public FromType ( String uri ) { setUri ( uri ) ; } public FromType ( Endpoint endpoint ) { this . endpoint = endpoint ; } @ Override public String toString ( ) { return "From[" + getLabel ( ) + "]" ; } public String getLabel ( ) { return description ( getUri ( ) , getRef ( ) , getEndpoint ( ) ) ; } public Endpoint resolveEndpoint ( RouteContext context ) { if ( endpoint == null ) { endpoint = context . resolveEndpoint ( getUri ( ) , getRef ( ) ) ; } return endpoint ; } public String getUri ( ) { return uri ; } public void setUri ( String uri ) { this . uri = uri ; } public String getRef ( ) { return ref ; } public void setRef ( String ref ) { this . ref = ref ; } public Endpoint getEndpoint ( ) { return endpoint ; } public void setEndpoint ( Endpoint endpoint ) { this . endpoint = endpoint ; } public Object getUriOrRef ( ) { if ( ObjectHelper . isNullOrBlank ( uri ) ) { return uri ; } else if ( endpoint != null ) { return endpoint . getEndpointUri ( ) ; } return ref ; } protected static String description ( String uri , String ref , Endpoint endpoint ) { if ( ref != null ) { return "ref:" + ref ; } else if ( endpoint != null ) { return endpoint . getEndpointUri ( ) ; } else if ( uri != null ) { return uri ; } else { return "no uri or ref supplied!" ; } } } 	1	['14', '1', '0', '10', '21', '59', '8', '3', '13', '0.641025641', '126', '1', '1', '0', '0.375', '0', '0', '7.785714286', '4', '1.2143', '2']
package org . apache . camel . builder . xml ; import java . io . StringReader ; import java . util . List ; import javax . xml . namespace . QName ; import javax . xml . xpath . XPath ; import javax . xml . xpath . XPathConstants ; import javax . xml . xpath . XPathExpression ; import javax . xml . xpath . XPathExpressionException ; import javax . xml . xpath . XPathFactory ; import javax . xml . xpath . XPathFactoryConfigurationException ; import javax . xml . xpath . XPathFunction ; import javax . xml . xpath . XPathFunctionException ; import javax . xml . xpath . XPathFunctionResolver ; import org . w3c . dom . Document ; import org . w3c . dom . Element ; import org . xml . sax . InputSource ; import org . apache . camel . Exchange ; import org . apache . camel . Expression ; import org . apache . camel . Message ; import org . apache . camel . Predicate ; import org . apache . camel . RuntimeExpressionException ; import static org . apache . camel . builder . xml . Namespaces . DEFAULT_NAMESPACE ; import static org . apache . camel . builder . xml . Namespaces . IN_NAMESPACE ; import static org . apache . camel . builder . xml . Namespaces . OUT_NAMESPACE ; import static org . apache . camel . builder . xml . Namespaces . isMatchingNamespaceOrEmptyNamespace ; import static org . apache . camel . converter . ObjectConverter . toBoolean ; public class XPathBuilder < E extends Exchange > implements Expression < E > , Predicate < E > { private final String text ; private XPathFactory xpathFactory ; private Class documentType = Document . class ; private QName resultType = XPathConstants . NODESET ; private String objectModelUri ; private DefaultNamespaceContext namespaceContext ; private XPathFunctionResolver functionResolver ; private XPathExpression expression ; private MessageVariableResolver variableResolver = new MessageVariableResolver ( ) ; private E exchange ; private XPathFunction bodyFunction ; private XPathFunction headerFunction ; private XPathFunction outBodyFunction ; private XPathFunction outHeaderFunction ; public XPathBuilder ( String text ) { this . text = text ; } public static XPathBuilder xpath ( String text ) { return new XPathBuilder ( text ) ; } @ Override public String toString ( ) { return "XPath: " + text ; } public boolean matches ( E exchange ) { Object booleanResult = evaluateAs ( exchange , XPathConstants . BOOLEAN ) ; return toBoolean ( booleanResult ) ; } public void assertMatches ( String text , E exchange ) throws AssertionError { Object booleanResult = evaluateAs ( exchange , XPathConstants . BOOLEAN ) ; if ( ! toBoolean ( booleanResult ) ) { throw new AssertionError ( this + " failed on " + exchange + " as returned <" + booleanResult + ">" ) ; } } public Object evaluate ( E exchange ) { return evaluateAs ( exchange , resultType ) ; } public XPathBuilder < E > booleanResult ( ) { resultType = XPathConstants . BOOLEAN ; return this ; } public XPathBuilder < E > nodeResult ( ) { resultType = XPathConstants . NODE ; return this ; } public XPathBuilder < E > nodeSetResult ( ) { resultType = XPathConstants . NODESET ; return this ; } public XPathBuilder < E > numberResult ( ) { resultType = XPathConstants . NUMBER ; return this ; } public XPathBuilder < E > stringResult ( ) { resultType = XPathConstants . STRING ; return this ; } public XPathBuilder < E > objectModel ( String uri ) { this . objectModelUri = uri ; return this ; } public XPathBuilder < E > functionResolver ( XPathFunctionResolver functionResolver ) { this . functionResolver = functionResolver ; return this ; } public XPathBuilder < E > namespace ( String prefix , String uri ) { getNamespaceContext ( ) . add ( prefix , uri ) ; return this ; } public XPathBuilder < E > variable ( String name , Object value ) { variableResolver . addVariable ( name , value ) ; return this ; } public XPathFactory getXPathFactory ( ) throws XPathFactoryConfigurationException { if ( xpathFactory == null ) { if ( objectModelUri != null ) { xpathFactory = XPathFactory . newInstance ( objectModelUri ) ; } xpathFactory = XPathFactory . newInstance ( ) ; } return xpathFactory ; } public void setXPathFactory ( XPathFactory xpathFactory ) { this . xpathFactory = xpathFactory ; } public Class getDocumentType ( ) { return documentType ; } public void setDocumentType ( Class documentType ) { this . documentType = documentType ; } public String getText ( ) { return text ; } public QName getResultType ( ) { return resultType ; } public void setResultType ( QName resultType ) { this . resultType = resultType ; } public DefaultNamespaceContext getNamespaceContext ( ) { if ( namespaceContext == null ) { try { DefaultNamespaceContext defaultNamespaceContext = new DefaultNamespaceContext ( getXPathFactory ( ) ) ; populateDefaultNamespaces ( defaultNamespaceContext ) ; namespaceContext = defaultNamespaceContext ; } catch ( XPathFactoryConfigurationException e ) { throw new RuntimeExpressionException ( e ) ; } } return namespaceContext ; } public void setNamespaceContext ( DefaultNamespaceContext namespaceContext ) { this . namespaceContext = namespaceContext ; } public XPathFunctionResolver getFunctionResolver ( ) { return functionResolver ; } public void setFunctionResolver ( XPathFunctionResolver functionResolver ) { this . functionResolver = functionResolver ; } public XPathExpression getExpression ( ) throws XPathFactoryConfigurationException , XPathExpressionException { if ( expression == null ) { expression = createXPathExpression ( ) ; } return expression ; } public void setNamespacesFromDom ( Element node ) { getNamespaceContext ( ) . setNamespacesFromDom ( node ) ; } public XPathFunction getBodyFunction ( ) { if ( bodyFunction == null ) { bodyFunction = new XPathFunction ( ) { public Object evaluate ( List list ) throws XPathFunctionException { if ( exchange == null ) { return null ; } return exchange . getIn ( ) . getBody ( ) ; } } ; } return bodyFunction ; } public void setBodyFunction ( XPathFunction bodyFunction ) { this . bodyFunction = bodyFunction ; } public XPathFunction getHeaderFunction ( ) { if ( headerFunction == null ) { headerFunction = new XPathFunction ( ) { public Object evaluate ( List list ) throws XPathFunctionException { if ( exchange != null && ! list . isEmpty ( ) ) { Object value = list . get ( 0 ) ; if ( value != null ) { return exchange . getIn ( ) . getHeader ( value . toString ( ) ) ; } } return null ; } } ; } return headerFunction ; } public void setHeaderFunction ( XPathFunction headerFunction ) { this . headerFunction = headerFunction ; } public XPathFunction getOutBodyFunction ( ) { if ( outBodyFunction == null ) { outBodyFunction = new XPathFunction ( ) { public Object evaluate ( List list ) throws XPathFunctionException { if ( exchange == null ) { return null ; } return exchange . getOut ( ) . getBody ( ) ; } } ; } return outBodyFunction ; } public void setOutBodyFunction ( XPathFunction outBodyFunction ) { this . outBodyFunction = outBodyFunction ; } public XPathFunction getOutHeaderFunction ( ) { if ( outHeaderFunction == null ) { outHeaderFunction = new XPathFunction ( ) { public Object evaluate ( List list ) throws XPathFunctionException { if ( exchange != null && ! list . isEmpty ( ) ) { Object value = list . get ( 0 ) ; if ( value != null ) { return exchange . getOut ( ) . getHeader ( value . toString ( ) ) ; } } return null ; } } ; } return outHeaderFunction ; } public void setOutHeaderFunction ( XPathFunction outHeaderFunction ) { this . outHeaderFunction = outHeaderFunction ; } protected synchronized Object evaluateAs ( E exchange , QName resultType ) { this . exchange = exchange ; variableResolver . setExchange ( exchange ) ; try { Object document = getDocument ( exchange ) ; if ( resultType != null ) { if ( document instanceof InputSource ) { InputSource inputSource = ( InputSource ) document ; return getExpression ( ) . evaluate ( inputSource , resultType ) ; } else { return getExpression ( ) . evaluate ( document , resultType ) ; } } else { if ( document instanceof InputSource ) { InputSource inputSource = ( InputSource ) document ; return getExpression ( ) . evaluate ( inputSource ) ; } else { return getExpression ( ) . evaluate ( document ) ; } } } catch ( XPathExpressionException e ) { throw new InvalidXPathExpression ( getText ( ) , e ) ; } catch ( XPathFactoryConfigurationException e ) { throw new InvalidXPathExpression ( getText ( ) , e ) ; } } protected XPathExpression createXPathExpression ( ) throws XPathExpressionException , XPathFactoryConfigurationException { XPath xPath = getXPathFactory ( ) . newXPath ( ) ; xpathFactory = null ; xPath . setNamespaceContext ( getNamespaceContext ( ) ) ; xPath . setXPathVariableResolver ( variableResolver ) ; XPathFunctionResolver parentResolver = getFunctionResolver ( ) ; if ( parentResolver == null ) { parentResolver = xPath . getXPathFunctionResolver ( ) ; } xPath . setXPathFunctionResolver ( createDefaultFunctionResolver ( parentResolver ) ) ; return xPath . compile ( text ) ; } protected void populateDefaultNamespaces ( DefaultNamespaceContext context ) { setNamespaceIfNotPresent ( context , "in" , IN_NAMESPACE ) ; setNamespaceIfNotPresent ( context , "out" , OUT_NAMESPACE ) ; setNamespaceIfNotPresent ( context , "env" , Namespaces . ENVIRONMENT_VARIABLES ) ; setNamespaceIfNotPresent ( context , "system" , Namespaces . SYSTEM_PROPERTIES_NAMESPACE ) ; } protected void setNamespaceIfNotPresent ( DefaultNamespaceContext context , String prefix , String uri ) { if ( context != null ) { String current = context . getNamespaceURI ( prefix ) ; if ( current == null ) { context . add ( prefix , uri ) ; } } } protected XPathFunctionResolver createDefaultFunctionResolver ( final XPathFunctionResolver parent ) { return new XPathFunctionResolver ( ) { public XPathFunction resolveFunction ( QName qName , int argumentCount ) { XPathFunction answer = null ; if ( parent != null ) { answer = parent . resolveFunction ( qName , argumentCount ) ; } if ( answer == null ) { if ( isMatchingNamespaceOrEmptyNamespace ( qName . getNamespaceURI ( ) , IN_NAMESPACE ) || isMatchingNamespaceOrEmptyNamespace ( qName . getNamespaceURI ( ) , DEFAULT_NAMESPACE ) ) { String localPart = qName . getLocalPart ( ) ; if ( localPart . equals ( "body" ) && argumentCount == 0 ) { return getBodyFunction ( ) ; } if ( localPart . equals ( "header" ) && argumentCount == 1 ) { return getHeaderFunction ( ) ; } } if ( isMatchingNamespaceOrEmptyNamespace ( qName . getNamespaceURI ( ) , OUT_NAMESPACE ) ) { String localPart = qName . getLocalPart ( ) ; if ( localPart . equals ( "body" ) && argumentCount == 0 ) { return getOutBodyFunction ( ) ; } if ( localPart . equals ( "header" ) && argumentCount == 1 ) { return getOutHeaderFunction ( ) ; } } if ( isMatchingNamespaceOrEmptyNamespace ( qName . getNamespaceURI ( ) , DEFAULT_NAMESPACE ) ) { String localPart = qName . getLocalPart ( ) ; if ( localPart . equals ( "out-body" ) && argumentCount == 0 ) { return getOutBodyFunction ( ) ; } if ( localPart . equals ( "out-header" ) && argumentCount == 1 ) { return getOutHeaderFunction ( ) ; } } } return answer ; } } ; } protected Object getDocument ( E exchange ) { Message in = exchange . getIn ( ) ; Class type = getDocumentType ( ) ; Object answer = null ; if ( type != null ) { answer = in . getBody ( type ) ; } if ( answer == null ) { answer = in . getBody ( ) ; } if ( answer instanceof String ) { answer = new InputSource ( new StringReader ( answer . toString ( ) ) ) ; } return answer ; } } 	1	['45', '1', '0', '17', '85', '864', '8', '14', '38', '0.907467532', '523', '1', '3', '0', '0.138888889', '0', '0', '10.31111111', '4', '1.2667', '2']
package org . apache . camel . builder . xml ; public interface ResultHandlerFactory { ResultHandler createResult ( ) ; } 	1	['1', '1', '0', '5', '1', '0', '4', '1', '1', '2', '1', '0', '0', '0', '1', '0', '0', '0', '1', '1', '2']
package org . apache . camel . model . language ; import javax . xml . bind . annotation . XmlRootElement ; @ XmlRootElement ( name = "sql" ) public class SqlExpression extends ExpressionType { public SqlExpression ( ) { } public SqlExpression ( String expression ) { super ( expression ) ; } public String getLanguage ( ) { return "sql" ; } } 	1	['3', '2', '0', '1', '5', '3', '0', '1', '3', '2', '12', '0', '0', '0.923076923', '0.666666667', '1', '2', '3', '1', '0.3333', '1']
package org . apache . camel . management ; import org . apache . camel . Exchange ; import org . apache . camel . processor . DelegateProcessor ; public class InstrumentationProcessor extends DelegateProcessor { private PerformanceCounter counter ; InstrumentationProcessor ( PerformanceCounter counter ) { this . counter = counter ; } public void process ( Exchange exchange ) throws Exception { long startTime = System . nanoTime ( ) ; super . process ( exchange ) ; if ( counter != null ) { if ( exchange . getException ( ) == null ) { counter . completedExchange ( ( System . nanoTime ( ) - startTime ) / 1000 ) ; } else { counter . completedExchange ( ) ; } } } } 	1	['2', '3', '0', '4', '8', '0', '1', '3', '1', '0', '33', '1', '1', '0.954545455', '0.666666667', '0', '0', '15', '1', '0.5', '3']
package org . apache . camel . impl . converter ; import org . apache . camel . Converter ; import org . apache . camel . TypeConverter ; import org . apache . camel . impl . CachingInjector ; import org . apache . camel . util . ObjectHelper ; import org . apache . camel . util . ResolverUtil ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStreamReader ; import java . lang . reflect . Method ; import static java . lang . reflect . Modifier . * ; import java . net . URL ; import java . util . Enumeration ; import java . util . HashSet ; import java . util . Set ; import java . util . StringTokenizer ; public class AnnotationTypeConverterLoader implements TypeConverterLoader { public static final String META_INF_SERVICES = "META-INF/services/org/apache/camel/TypeConverter" ; private static final transient Log LOG = LogFactory . getLog ( AnnotationTypeConverterLoader . class ) ; private ResolverUtil resolver = new ResolverUtil ( ) ; private Set < Class > visitedClasses = new HashSet < Class > ( ) ; public void load ( TypeConverterRegistry registry ) throws Exception { String [ ] packageNames = findPackageNames ( ) ; resolver . findAnnotated ( Converter . class , packageNames ) ; Set < Class > classes = resolver . getClasses ( ) ; for ( Class type : classes ) { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Loading converter class: " + ObjectHelper . name ( type ) ) ; } loadConverterMethods ( registry , type ) ; } } protected String [ ] findPackageNames ( ) throws IOException { Set < String > packages = new HashSet < String > ( ) ; findPackages ( packages , Thread . currentThread ( ) . getContextClassLoader ( ) ) ; findPackages ( packages , getClass ( ) . getClassLoader ( ) ) ; return packages . toArray ( new String [ packages . size ( ) ] ) ; } protected void findPackages ( Set < String > packages , ClassLoader classLoader ) throws IOException { Enumeration < URL > resources = classLoader . getResources ( META_INF_SERVICES ) ; while ( resources . hasMoreElements ( ) ) { URL url = resources . nextElement ( ) ; if ( url != null ) { BufferedReader reader = new BufferedReader ( new InputStreamReader ( url . openStream ( ) ) ) ; try { while ( true ) { String line = reader . readLine ( ) ; if ( line == null ) { break ; } line = line . trim ( ) ; if ( line . startsWith ( "#" ) || line . length ( ) == 0 ) { continue ; } tokenize ( packages , line ) ; } } finally { try { reader . close ( ) ; } catch ( IOException e ) { LOG . warn ( "Caught exception closing stream: " + e , e ) ; } } } } } protected void tokenize ( Set < String > packages , String line ) { StringTokenizer iter = new StringTokenizer ( line , "," ) ; while ( iter . hasMoreTokens ( ) ) { String name = iter . nextToken ( ) . trim ( ) ; if ( name . length ( ) > 0 ) { packages . add ( name ) ; } } } protected void loadConverterMethods ( TypeConverterRegistry registry , Class type ) { if ( visitedClasses . contains ( type ) ) { return ; } visitedClasses . add ( type ) ; try { Method [ ] methods = type . getDeclaredMethods ( ) ; CachingInjector injector = null ; for ( Method method : methods ) { Converter annotation = method . getAnnotation ( Converter . class ) ; if ( annotation != null ) { Class < ? > [ ] parameterTypes = method . getParameterTypes ( ) ; if ( parameterTypes == null || parameterTypes . length != 1 ) { LOG . warn ( "Ignoring bad converter on type: " + type . getName ( ) + " method: " + method + " as a converter method should have one parameter" ) ; } else { int modifiers = method . getModifiers ( ) ; if ( isAbstract ( modifiers ) || ! isPublic ( modifiers ) ) { LOG . warn ( "Ignoring bad converter on type: " + type . getName ( ) + " method: " + method + " as a converter method is not a public and concrete method" ) ; } else { Class toType = method . getReturnType ( ) ; if ( toType . equals ( Void . class ) ) { LOG . warn ( "Ignoring bad converter on type: " + type . getName ( ) + " method: " + method + " as a converter method returns a void method" ) ; } else { Class fromType = parameterTypes [ 0 ] ; if ( isStatic ( modifiers ) ) { registerTypeConverter ( registry , method , toType , fromType , new StaticMethodTypeConverter ( method ) ) ; } else { if ( injector == null ) { injector = new CachingInjector ( registry , type ) ; } registerTypeConverter ( registry , method , toType , fromType , new InstanceMethodTypeConverter ( injector , method ) ) ; } } } } } } Class superclass = type . getSuperclass ( ) ; if ( superclass != null && ! superclass . equals ( Object . class ) ) { loadConverterMethods ( registry , superclass ) ; } } catch ( NoClassDefFoundError e ) { LOG . debug ( "Ignoring converter type: " + type . getName ( ) + " as a dependent class could not be found: " + e , e ) ; } } protected void registerTypeConverter ( TypeConverterRegistry registry , Method method , Class toType , Class fromType , TypeConverter typeConverter ) { registry . addTypeConverter ( toType , fromType , typeConverter ) ; } } 	1	['8', '1', '1', '13', '64', '12', '2', '11', '2', '0.785714286', '388', '0.75', '2', '0', '0.321428571', '0', '0', '47', '11', '2.125', '5']
package org . apache . camel . impl . converter ; import org . apache . camel . TypeConverter ; import org . apache . camel . util . ObjectHelper ; import java . beans . PropertyEditor ; import java . beans . PropertyEditorManager ; public class PropertyEditorTypeConverter implements TypeConverter { public < T > T convertTo ( Class < T > toType , Object value ) { if ( value == null ) { return null ; } if ( value . getClass ( ) == String . class ) { if ( toType == String . class ) { return ObjectHelper . cast ( toType , value ) ; } PropertyEditor editor = PropertyEditorManager . findEditor ( toType ) ; if ( editor != null ) { editor . setAsText ( value . toString ( ) ) ; return ObjectHelper . cast ( toType , editor . getValue ( ) ) ; } } else if ( toType == String . class ) { PropertyEditor editor = PropertyEditorManager . findEditor ( value . getClass ( ) ) ; if ( editor != null ) { editor . setValue ( value ) ; return ObjectHelper . cast ( toType , editor . getAsText ( ) ) ; } } return null ; } } 	1	['2', '1', '0', '3', '11', '1', '1', '2', '2', '2', '54', '0', '0', '0', '0.666666667', '0', '0', '26', '6', '3', '1']
package org . apache . camel . impl ; import java . util . concurrent . Future ; import org . apache . camel . AsyncCallback ; import org . apache . camel . AsyncProcessor ; import org . apache . camel . Consumer ; import org . apache . camel . Endpoint ; import org . apache . camel . Exchange ; import org . apache . camel . Processor ; import org . apache . camel . impl . converter . AsyncProcessorTypeConverter ; import org . apache . camel . spi . ExceptionHandler ; import org . apache . camel . util . ServiceHelper ; public class DefaultConsumer < E extends Exchange > extends ServiceSupport implements Consumer < E > { private Endpoint < E > endpoint ; private Processor processor ; private AsyncProcessor asyncProcessor ; private ExceptionHandler exceptionHandler ; public DefaultConsumer ( Endpoint < E > endpoint , Processor processor ) { this . endpoint = endpoint ; this . processor = processor ; } @ Override public String toString ( ) { return "Consumer on " + endpoint ; } public Endpoint < E > getEndpoint ( ) { return endpoint ; } public Processor getProcessor ( ) { return processor ; } public AsyncProcessor getAsyncProcessor ( ) { if ( asyncProcessor == null ) { asyncProcessor = AsyncProcessorTypeConverter . convert ( processor ) ; } return asyncProcessor ; } public ExceptionHandler getExceptionHandler ( ) { if ( exceptionHandler == null ) { exceptionHandler = new LoggingExceptionHandler ( getClass ( ) ) ; } return exceptionHandler ; } public void setExceptionHandler ( ExceptionHandler exceptionHandler ) { this . exceptionHandler = exceptionHandler ; } protected void doStop ( ) throws Exception { ServiceHelper . stopServices ( processor ) ; } protected void doStart ( ) throws Exception { ServiceHelper . startServices ( processor ) ; } protected void handleException ( Throwable t ) { getExceptionHandler ( ) . handleException ( t ) ; } } 	1	['10', '2', '12', '22', '21', '17', '13', '9', '7', '0.777777778', '90', '1', '4', '0.590909091', '0.28', '1', '1', '7.6', '2', '1.1', '3']
package org . apache . camel . component . bean ; import java . util . Map ; import org . apache . camel . Endpoint ; import org . apache . camel . ExchangePattern ; import org . apache . camel . impl . DefaultComponent ; import org . apache . camel . impl . ProcessorEndpoint ; import org . apache . camel . spi . Registry ; import org . apache . camel . util . IntrospectionSupport ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class BeanComponent extends DefaultComponent { private static final Log LOG = LogFactory . getLog ( BeanComponent . class ) ; private ParameterMappingStrategy parameterMappingStrategy ; public BeanComponent ( ) { } public ProcessorEndpoint createEndpoint ( Object bean ) { String uri = "bean:generated:" + bean ; return createEndpoint ( bean , uri ) ; } public ProcessorEndpoint createEndpoint ( Object bean , String uri ) { BeanProcessor processor = new BeanProcessor ( bean , getCamelContext ( ) , getParameterMappingStrategy ( ) ) ; return createEndpoint ( uri , processor ) ; } public ParameterMappingStrategy getParameterMappingStrategy ( ) { if ( parameterMappingStrategy == null ) { parameterMappingStrategy = createParameterMappingStrategy ( ) ; } return parameterMappingStrategy ; } public void setParameterMappingStrategy ( ParameterMappingStrategy parameterMappingStrategy ) { this . parameterMappingStrategy = parameterMappingStrategy ; } protected Endpoint createEndpoint ( String uri , String remaining , Map parameters ) throws Exception { Object bean = getBean ( remaining ) ; BeanProcessor processor = new BeanProcessor ( bean , getCamelContext ( ) , getParameterMappingStrategy ( ) ) ; setProperties ( processor , parameters ) ; return createEndpoint ( uri , processor ) ; } public Object getBean ( String remaining ) throws NoBeanAvailableException { Registry registry = getCamelContext ( ) . getRegistry ( ) ; Object bean = registry . lookup ( remaining ) ; if ( bean == null ) { throw new NoBeanAvailableException ( remaining ) ; } return bean ; } protected ProcessorEndpoint createEndpoint ( String uri , BeanProcessor processor ) { ProcessorEndpoint answer = new ProcessorEndpoint ( uri , this , processor ) ; answer . setExchangePattern ( ExchangePattern . InOut ) ; return answer ; } protected ParameterMappingStrategy createParameterMappingStrategy ( ) { return BeanProcessor . createParameterMappingStrategy ( getCamelContext ( ) ) ; } } 	1	['10', '3', '0', '13', '25', '43', '0', '13', '6', '0.833333333', '116', '1', '2', '0.741935484', '0.333333333', '1', '2', '10.4', '2', '0.9', '3']
package org . apache . camel . component . bean ; import java . lang . reflect . AccessibleObject ; import java . lang . reflect . Method ; public interface MethodInvocation { Method getMethod ( ) ; Object [ ] getArguments ( ) ; Object proceed ( ) throws Throwable ; Object getThis ( ) ; AccessibleObject getStaticPart ( ) ; } 	1	['5', '1', '0', '4', '5', '10', '4', '0', '5', '2', '5', '0', '0', '0', '1', '0', '0', '0', '1', '1', '2']
package org . apache . camel . model . config ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlAttribute ; import javax . xml . bind . annotation . XmlRootElement ; import javax . xml . bind . annotation . XmlTransient ; import org . apache . camel . Exchange ; import org . apache . camel . processor . StreamResequencer ; import org . apache . camel . processor . resequencer . DefaultExchangeComparator ; import org . apache . camel . processor . resequencer . ExpressionResultComparator ; @ XmlRootElement @ XmlAccessorType ( XmlAccessType . FIELD ) public class StreamResequencerConfig { @ XmlAttribute private Integer capacity ; @ XmlAttribute private Long timeout ; @ XmlTransient private ExpressionResultComparator < Exchange > comparator ; public StreamResequencerConfig ( ) { this ( 100 , 1000L ) ; } public StreamResequencerConfig ( int capacity , long timeout ) { this ( capacity , timeout , new DefaultExchangeComparator ( ) ) ; } public StreamResequencerConfig ( int capacity , long timeout , ExpressionResultComparator < Exchange > comparator ) { this . capacity = capacity ; this . timeout = timeout ; this . comparator = comparator ; } public static StreamResequencerConfig getDefault ( ) { return new StreamResequencerConfig ( ) ; } public int getCapacity ( ) { return capacity ; } public void setCapacity ( int capacity ) { this . capacity = capacity ; } public long getTimeout ( ) { return timeout ; } public void setTimeout ( long timeout ) { this . timeout = timeout ; } public ExpressionResultComparator < Exchange > getComparator ( ) { return comparator ; } public void setComparator ( ExpressionResultComparator < Exchange > comparator ) { this . comparator = comparator ; } } 	1	['10', '1', '0', '3', '16', '27', '1', '2', '10', '0.666666667', '69', '1', '1', '0', '0.425', '0', '0', '5.6', '1', '0.7', '1']
package org . apache . camel ; import java . util . HashMap ; import java . util . Map ; import org . apache . camel . impl . ServiceSupport ; import org . apache . camel . util . ObjectHelper ; import org . apache . camel . util . ProducerCache ; public class CamelTemplate < E extends Exchange > extends ServiceSupport implements ProducerTemplate < E > { private CamelContext context ; private ProducerCache < E > producerCache = new ProducerCache < E > ( ) ; private boolean useEndpointCache = true ; private Map < String , Endpoint < E > > endpointCache = new HashMap < String , Endpoint < E > > ( ) ; private Endpoint < E > defaultEndpoint ; public CamelTemplate ( CamelContext context ) { this . context = context ; } public CamelTemplate ( CamelContext context , Endpoint defaultEndpoint ) { this ( context ) ; this . defaultEndpoint = defaultEndpoint ; } public E send ( String endpointUri , E exchange ) { Endpoint endpoint = resolveMandatoryEndpoint ( endpointUri ) ; return send ( endpoint , exchange ) ; } public E send ( String endpointUri , Processor processor ) { Endpoint endpoint = resolveMandatoryEndpoint ( endpointUri ) ; return send ( endpoint , processor ) ; } public E send ( String endpointUri , Processor processor , AsyncCallback callback ) { Endpoint endpoint = resolveMandatoryEndpoint ( endpointUri ) ; return send ( endpoint , processor , callback ) ; } public E send ( String endpointUri , ExchangePattern pattern , Processor processor ) { Endpoint endpoint = resolveMandatoryEndpoint ( endpointUri ) ; return send ( endpoint , pattern , processor ) ; } public E send ( Endpoint < E > endpoint , E exchange ) { E convertedExchange = endpoint . createExchange ( exchange ) ; producerCache . send ( endpoint , convertedExchange ) ; return convertedExchange ; } public E send ( Endpoint < E > endpoint , Processor processor ) { return producerCache . send ( endpoint , processor ) ; } public E send ( Endpoint < E > endpoint , Processor processor , AsyncCallback callback ) { return producerCache . send ( endpoint , processor , callback ) ; } public E send ( Endpoint < E > endpoint , ExchangePattern pattern , Processor processor ) { return producerCache . send ( endpoint , pattern , processor ) ; } public Object sendBody ( Endpoint < E > endpoint , ExchangePattern pattern , Object body ) { E result = send ( endpoint , pattern , createSetBodyProcessor ( body ) ) ; return extractResultBody ( result ) ; } public Object sendBody ( Endpoint < E > endpoint , Object body ) { E result = send ( endpoint , createSetBodyProcessor ( body ) ) ; return extractResultBody ( result ) ; } public Object sendBody ( String endpointUri , Object body ) { Endpoint endpoint = resolveMandatoryEndpoint ( endpointUri ) ; return sendBody ( endpoint , body ) ; } public Object sendBody ( String endpointUri , ExchangePattern pattern , Object body ) { Endpoint endpoint = resolveMandatoryEndpoint ( endpointUri ) ; return sendBody ( endpoint , pattern , body ) ; } public Object sendBodyAndHeader ( String endpointUri , final Object body , final String header , final Object headerValue ) { return sendBodyAndHeader ( resolveMandatoryEndpoint ( endpointUri ) , body , header , headerValue ) ; } public Object sendBodyAndHeader ( Endpoint endpoint , final Object body , final String header , final Object headerValue ) { E result = send ( endpoint , createBodyAndHeaderProcessor ( body , header , headerValue ) ) ; return extractResultBody ( result ) ; } public Object sendBodyAndHeader ( Endpoint endpoint , ExchangePattern pattern , final Object body , final String header , final Object headerValue ) { E result = send ( endpoint , pattern , createBodyAndHeaderProcessor ( body , header , headerValue ) ) ; return extractResultBody ( result ) ; } public Object sendBodyAndHeader ( String endpoint , ExchangePattern pattern , final Object body , final String header , final Object headerValue ) { E result = send ( endpoint , pattern , createBodyAndHeaderProcessor ( body , header , headerValue ) ) ; return extractResultBody ( result ) ; } public Object sendBodyAndHeaders ( String endpointUri , final Object body , final Map < String , Object > headers ) { return sendBodyAndHeaders ( resolveMandatoryEndpoint ( endpointUri ) , body , headers ) ; } public Object sendBodyAndHeaders ( Endpoint endpoint , final Object body , final Map < String , Object > headers ) { E result = send ( endpoint , new Processor ( ) { public void process ( Exchange exchange ) { Message in = exchange . getIn ( ) ; for ( Map . Entry < String , Object > header : headers . entrySet ( ) ) { in . setHeader ( header . getKey ( ) , header . getValue ( ) ) ; } in . setBody ( body ) ; } } ) ; return extractResultBody ( result ) ; } public E request ( Endpoint < E > endpoint , Processor processor ) { return send ( endpoint , ExchangePattern . InOut , processor ) ; } public Object requestBody ( Endpoint < E > endpoint , Object body ) { return sendBody ( endpoint , ExchangePattern . InOut , body ) ; } public Object requestBodyAndHeader ( Endpoint < E > endpoint , Object body , String header , Object headerValue ) { return sendBodyAndHeader ( endpoint , ExchangePattern . InOut , body , header , headerValue ) ; } public E request ( String endpoint , Processor processor ) { return send ( endpoint , ExchangePattern . InOut , processor ) ; } public Object requestBody ( String endpoint , Object body ) { return sendBody ( endpoint , ExchangePattern . InOut , body ) ; } public Object requestBodyAndHeader ( String endpoint , Object body , String header , Object headerValue ) { return sendBodyAndHeader ( endpoint , ExchangePattern . InOut , body , header , headerValue ) ; } public Object sendBody ( Object body ) { return sendBody ( getMandatoryDefaultEndpoint ( ) , body ) ; } public E send ( E exchange ) { return send ( getMandatoryDefaultEndpoint ( ) , exchange ) ; } public E send ( Processor processor ) { return send ( getMandatoryDefaultEndpoint ( ) , processor ) ; } public Object sendBodyAndHeader ( Object body , String header , Object headerValue ) { return sendBodyAndHeader ( getMandatoryDefaultEndpoint ( ) , body , header , headerValue ) ; } public Object sendBodyAndHeaders ( Object body , Map < String , Object > headers ) { return sendBodyAndHeaders ( getMandatoryDefaultEndpoint ( ) , body , headers ) ; } public Producer < E > getProducer ( Endpoint < E > endpoint ) { return producerCache . getProducer ( endpoint ) ; } public CamelContext getContext ( ) { return context ; } public Endpoint < E > getDefaultEndpoint ( ) { return defaultEndpoint ; } public void setDefaultEndpoint ( Endpoint < E > defaultEndpoint ) { this . defaultEndpoint = defaultEndpoint ; } public void setDefaultEndpointUri ( String endpointUri ) { setDefaultEndpoint ( getContext ( ) . getEndpoint ( endpointUri ) ) ; } public boolean isUseEndpointCache ( ) { return useEndpointCache ; } public void setUseEndpointCache ( boolean useEndpointCache ) { this . useEndpointCache = useEndpointCache ; } protected Processor createBodyAndHeaderProcessor ( final Object body , final String header , final Object headerValue ) { return new Processor ( ) { public void process ( Exchange exchange ) { Message in = exchange . getIn ( ) ; in . setHeader ( header , headerValue ) ; in . setBody ( body ) ; } } ; } protected Processor createSetBodyProcessor ( final Object body ) { return new Processor ( ) { public void process ( Exchange exchange ) { Message in = exchange . getIn ( ) ; in . setBody ( body ) ; } } ; } protected Endpoint resolveMandatoryEndpoint ( String endpointUri ) { Endpoint endpoint = null ; if ( isUseEndpointCache ( ) ) { synchronized ( endpointCache ) { endpoint = endpointCache . get ( endpointUri ) ; if ( endpoint == null ) { endpoint = context . getEndpoint ( endpointUri ) ; if ( endpoint != null ) { endpointCache . put ( endpointUri , endpoint ) ; } } } } else { endpoint = context . getEndpoint ( endpointUri ) ; } if ( endpoint == null ) { throw new NoSuchEndpointException ( endpointUri ) ; } return endpoint ; } protected Endpoint < E > getMandatoryDefaultEndpoint ( ) { Endpoint < E > answer = getDefaultEndpoint ( ) ; ObjectHelper . notNull ( answer , "defaultEndpoint" ) ; return answer ; } protected void doStart ( ) throws Exception { producerCache . start ( ) ; } protected void doStop ( ) throws Exception { producerCache . stop ( ) ; } protected Object extractResultBody ( E result ) { Object answer = null ; if ( result != null ) { answer = result . getOut ( ) . getBody ( ) ; if ( answer == null ) { answer = result . getIn ( ) . getBody ( ) ; } } return answer ; } } 	1	['45', '2', '0', '21', '67', '916', '8', '16', '38', '0.686363636', '461', '1', '3', '0.232142857', '0.252525253', '1', '1', '9.133333333', '5', '1.0889', '2']
package org . apache . camel . component . file . strategy ; import java . io . File ; import org . apache . camel . component . file . FileEndpoint ; import org . apache . camel . component . file . FileExchange ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class DeleteFileProcessStrategy extends FileProcessStrategySupport { private static final transient Log LOG = LogFactory . getLog ( DeleteFileProcessStrategy . class ) ; public DeleteFileProcessStrategy ( ) { } public DeleteFileProcessStrategy ( boolean lockFile ) { super ( lockFile ) ; } public void commit ( FileEndpoint endpoint , FileExchange exchange , File file ) throws Exception { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Deleting file: " + file ) ; } file . delete ( ) ; super . commit ( endpoint , exchange , file ) ; } } 	1	['4', '2', '0', '5', '15', '4', '1', '5', '3', '0.666666667', '38', '1', '1', '0.857142857', '0.466666667', '0', '0', '8.25', '1', '0.25', '1']
package org . apache . camel . util ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import java . io . File ; import java . io . FileInputStream ; import java . io . IOException ; import java . lang . annotation . Annotation ; import java . net . URL ; import java . net . URLDecoder ; import java . util . Arrays ; import java . util . Enumeration ; import java . util . HashSet ; import java . util . Set ; import java . util . jar . JarEntry ; import java . util . jar . JarInputStream ; public class ResolverUtil < T > { private static final transient Log LOG = LogFactory . getLog ( ResolverUtil . class ) ; public static interface Test { boolean matches ( Class type ) ; } public static class IsA implements Test { private Class parent ; public IsA ( Class parentType ) { this . parent = parentType ; } public boolean matches ( Class type ) { return type != null && parent . isAssignableFrom ( type ) ; } @ Override public String toString ( ) { return "is assignable to " + parent . getSimpleName ( ) ; } } public static class AnnotatedWith implements Test { private Class < ? extends Annotation > annotation ; public AnnotatedWith ( Class < ? extends Annotation > annotation ) { this . annotation = annotation ; } public boolean matches ( Class type ) { return type != null && type . isAnnotationPresent ( annotation ) ; } @ Override public String toString ( ) { return "annotated with @" + annotation . getSimpleName ( ) ; } } private Set < Class < ? extends T > > matches = new HashSet < Class < ? extends T > > ( ) ; private Set < ClassLoader > classLoaders ; public Set < Class < ? extends T > > getClasses ( ) { return matches ; } public Set < ClassLoader > getClassLoaders ( ) { if ( classLoaders == null ) { classLoaders = new HashSet < ClassLoader > ( ) ; classLoaders . add ( Thread . currentThread ( ) . getContextClassLoader ( ) ) ; } return classLoaders ; } public void setClassLoaders ( Set < ClassLoader > classLoaders ) { this . classLoaders = classLoaders ; } public void findImplementations ( Class parent , String ... packageNames ) { if ( packageNames == null ) { return ; } LOG . debug ( "Searching for implementations of " + parent . getName ( ) + " in packages: " + Arrays . asList ( packageNames ) ) ; Test test = new IsA ( parent ) ; for ( String pkg : packageNames ) { find ( test , pkg ) ; } LOG . debug ( "Found: " + getClasses ( ) ) ; } public void findAnnotated ( Class < ? extends Annotation > annotation , String ... packageNames ) { if ( packageNames == null ) { return ; } Test test = new AnnotatedWith ( annotation ) ; for ( String pkg : packageNames ) { find ( test , pkg ) ; } } public void find ( Test test , String packageName ) { packageName = packageName . replace ( '.' , '/' ) ; Set < ClassLoader > set = getClassLoaders ( ) ; for ( ClassLoader classLoader : set ) { LOG . trace ( "Searching: " + classLoader ) ; find ( test , packageName , classLoader ) ; } } protected void find ( Test test , String packageName , ClassLoader loader ) { Enumeration < URL > urls ; try { urls = loader . getResources ( packageName ) ; } catch ( IOException ioe ) { LOG . warn ( "Could not read package: " + packageName , ioe ) ; return ; } while ( urls . hasMoreElements ( ) ) { try { URL url = urls . nextElement ( ) ; String urlPath = url . getFile ( ) ; urlPath = URLDecoder . decode ( urlPath , "UTF-8" ) ; if ( urlPath . startsWith ( "file:" ) ) { urlPath = urlPath . substring ( 5 ) ; } if ( urlPath . indexOf ( '!' ) > 0 ) { urlPath = urlPath . substring ( 0 , urlPath . indexOf ( '!' ) ) ; } LOG . debug ( "Scanning for classes in [" + urlPath + "] matching criteria: " + test ) ; File file = new File ( urlPath ) ; if ( file . isDirectory ( ) ) { loadImplementationsInDirectory ( test , packageName , file ) ; } else { loadImplementationsInJar ( test , packageName , file ) ; } } catch ( IOException ioe ) { LOG . warn ( "could not read entries" , ioe ) ; } } } private void loadImplementationsInDirectory ( Test test , String parent , File location ) { File [ ] files = location . listFiles ( ) ; StringBuilder builder = null ; for ( File file : files ) { builder = new StringBuilder ( 100 ) ; String name = file . getName ( ) ; if ( name != null ) { name = name . trim ( ) ; } builder . append ( parent ) . append ( "/" ) . append ( name ) ; String packageOrClass = parent == null ? name : builder . toString ( ) ; if ( file . isDirectory ( ) ) { loadImplementationsInDirectory ( test , packageOrClass , file ) ; } else if ( name . endsWith ( ".class" ) ) { addIfMatching ( test , packageOrClass ) ; } } } private void loadImplementationsInJar ( Test test , String parent , File jarfile ) { try { JarEntry entry ; JarInputStream jarStream = new JarInputStream ( new FileInputStream ( jarfile ) ) ; while ( ( entry = jarStream . getNextJarEntry ( ) ) != null ) { String name = entry . getName ( ) ; if ( name != null ) { name = name . trim ( ) ; } if ( ! entry . isDirectory ( ) && name . startsWith ( parent ) && name . endsWith ( ".class" ) ) { addIfMatching ( test , name ) ; } } } catch ( IOException ioe ) { LOG . error ( "Could not search jar file '" + jarfile + "' for classes matching criteria: " + test + "due to an IOException: " + ioe . getMessage ( ) ) ; } } protected void addIfMatching ( Test test , String fqn ) { try { String externalName = fqn . substring ( 0 , fqn . indexOf ( '.' ) ) . replace ( '/' , '.' ) ; Set < ClassLoader > set = getClassLoaders ( ) ; boolean found = false ; for ( ClassLoader classLoader : set ) { LOG . trace ( "Checking to see if class " + externalName + " matches criteria [" + test + "]" ) ; try { Class type = classLoader . loadClass ( externalName ) ; if ( test . matches ( type ) ) { matches . add ( ( Class < T > ) type ) ; } found = true ; break ; } catch ( ClassNotFoundException e ) { LOG . debug ( "Could not find class '" + fqn + "' in class loader: " + classLoader + ". Reason: " + e , e ) ; } } if ( ! found ) { LOG . warn ( "Could not find class '" + fqn + "' in any class loaders: " + set ) ; } } catch ( Throwable t ) { LOG . warn ( "Could not examine class '" + fqn + "' due to a " + t . getClass ( ) . getName ( ) + " with message: " + t . getMessage ( ) ) ; } } } 	1	['12', '1', '0', '7', '62', '28', '2', '5', '7', '0.545454545', '507', '1', '1', '0', '0.329545455', '0', '0', '41', '6', '2.3333', '6']
package org . apache . camel . builder . xml ; import org . apache . camel . Exchange ; import org . apache . camel . Expression ; import org . apache . camel . Predicate ; import org . apache . camel . spi . Language ; import javax . xml . namespace . QName ; public class XPathLanguage implements Language { private QName resultType ; public Predicate < Exchange > createPredicate ( String expression ) { XPathBuilder builder = XPathBuilder . xpath ( expression ) ; configureBuilder ( builder ) ; return builder ; } public Expression < Exchange > createExpression ( String expression ) { XPathBuilder builder = XPathBuilder . xpath ( expression ) ; configureBuilder ( builder ) ; return builder ; } public QName getResultType ( ) { return resultType ; } public void setResultType ( QName resultType ) { this . resultType = resultType ; } protected void configureBuilder ( XPathBuilder builder ) { if ( resultType != null ) { builder . setResultType ( resultType ) ; } } } 	1	['6', '1', '0', '4', '9', '9', '0', '4', '5', '0.2', '41', '1', '0', '0', '0.416666667', '0', '0', '5.666666667', '2', '1', '1']
package org . apache . camel . processor ; import org . apache . camel . Exchange ; import org . apache . camel . Processor ; import org . apache . camel . impl . ServiceSupport ; import org . apache . camel . model . ExceptionType ; import java . util . IdentityHashMap ; import java . util . List ; import java . util . Map ; import java . util . Set ; public abstract class ErrorHandlerSupport extends ServiceSupport implements ErrorHandler { private Map < Class , ExceptionType > exceptionPolicices = new IdentityHashMap < Class , ExceptionType > ( ) ; public void addExceptionPolicy ( ExceptionType exception ) { Processor processor = exception . getErrorHandler ( ) ; addChildService ( processor ) ; List < Class > list = exception . getExceptionClasses ( ) ; for ( Class exceptionType : list ) { exceptionPolicices . put ( exceptionType , exception ) ; } } protected boolean customProcessorForException ( Exchange exchange , Throwable exception ) throws Exception { ExceptionType policy = getExceptionPolicy ( exchange , exception ) ; Processor processor = policy . getErrorHandler ( ) ; if ( processor != null ) { processor . process ( exchange ) ; return true ; } return false ; } protected ExceptionType getExceptionPolicy ( Exchange exchange , Throwable exception ) { Set < Map . Entry < Class , ExceptionType > > entries = exceptionPolicices . entrySet ( ) ; for ( Map . Entry < Class , ExceptionType > entry : entries ) { Class type = entry . getKey ( ) ; if ( type . isInstance ( exception ) ) { return entry . getValue ( ) ; } } return null ; } } 	1	['4', '2', '2', '10', '19', '0', '5', '5', '2', '0', '86', '1', '0', '0.8125', '0.5625', '0', '0', '20.25', '2', '1.25', '2']
package org . apache . camel . model ; import java . util . ArrayList ; import java . util . List ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlElement ; import javax . xml . bind . annotation . XmlElementRef ; import javax . xml . bind . annotation . XmlRootElement ; import javax . xml . bind . annotation . XmlTransient ; import org . apache . camel . Processor ; import org . apache . camel . impl . RouteContext ; import org . apache . camel . processor . CatchProcessor ; import org . apache . camel . util . ObjectHelper ; @ XmlRootElement ( name = "catch" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class CatchType extends ProcessorType { @ XmlElementRef private List < InterceptorType > interceptors = new ArrayList < InterceptorType > ( ) ; @ XmlElement ( name = "exception" ) private List < String > exceptions = new ArrayList < String > ( ) ; @ XmlElementRef private List < ProcessorType < ? > > outputs = new ArrayList < ProcessorType < ? > > ( ) ; @ XmlTransient private List < Class > exceptionClasses ; public CatchType ( ) { } public CatchType ( List < Class > exceptionClasses ) { this . exceptionClasses = exceptionClasses ; } public CatchType ( Class exceptionType ) { exceptionClasses = new ArrayList < Class > ( ) ; exceptionClasses . add ( exceptionType ) ; } @ Override public String toString ( ) { return "Catch[ " + getExceptionClasses ( ) + " -> " + getOutputs ( ) + "]" ; } @ Override public String getLabel ( ) { return getExceptionClasses ( ) . toString ( ) ; } @ Override public CatchProcessor createProcessor ( RouteContext routeContext ) throws Exception { Processor childProcessor = routeContext . createProcessor ( this ) ; return new CatchProcessor ( getExceptionClasses ( ) , childProcessor ) ; } public List < InterceptorType > getInterceptors ( ) { return interceptors ; } public void setInterceptors ( List < InterceptorType > interceptors ) { this . interceptors = interceptors ; } public List < ProcessorType < ? > > getOutputs ( ) { return outputs ; } public void setOutputs ( List < ProcessorType < ? > > outputs ) { this . outputs = outputs ; } public List < Class > getExceptionClasses ( ) { if ( exceptionClasses == null ) { exceptionClasses = createExceptionClasses ( ) ; } return exceptionClasses ; } public void setExceptionClasses ( List < Class > exceptionClasses ) { this . exceptionClasses = exceptionClasses ; } public List < String > getExceptions ( ) { return exceptions ; } public void setExceptions ( List < String > exceptions ) { this . exceptions = exceptions ; } protected List < Class > createExceptionClasses ( ) { List < String > list = getExceptions ( ) ; List < Class > answer = new ArrayList < Class > ( list . size ( ) ) ; for ( String name : list ) { Class type = ObjectHelper . loadClass ( name , getClass ( ) . getClassLoader ( ) ) ; answer . add ( type ) ; } return answer ; } } 	1	['16', '2', '0', '6', '33', '62', '1', '5', '15', '0.65', '190', '1', '0', '0.877358491', '0.375', '1', '4', '10.625', '2', '0.9375', '3']
package org . apache . camel . converter ; import org . apache . camel . Converter ; import java . util . * ; @ Converter public class CollectionConverter { private CollectionConverter ( ) { } @ Converter public static Object [ ] toArray ( Collection value ) { if ( value == null ) { return null ; } return value . toArray ( ) ; } @ Converter public static List toList ( Object [ ] array ) { return Arrays . asList ( array ) ; } @ Converter public static List toList ( Collection collection ) { return new ArrayList ( collection ) ; } @ Converter public static Set toSet ( Object [ ] array ) { Set answer = new HashSet ( ) ; for ( Object element : array ) { answer . add ( element ) ; } return answer ; } @ Converter public static Set toSet ( Collection collection ) { return new HashSet ( collection ) ; } @ Converter public static Set toSet ( Map map ) { return map . entrySet ( ) ; } @ Converter public static Properties toProperties ( Map map ) { Properties answer = new Properties ( ) ; answer . putAll ( map ) ; return answer ; } @ Converter public static Hashtable toHashtable ( Map map ) { return new Hashtable ( map ) ; } @ Converter public static HashMap toHashMap ( Map map ) { return new HashMap ( map ) ; } } 	1	['10', '1', '0', '0', '22', '45', '0', '0', '9', '2', '81', '0', '0', '0', '0.25', '0', '0', '7.1', '2', '1.1', '2']
package org . apache . camel . impl ; import org . apache . camel . Service ; import org . apache . camel . util . ServiceHelper ; import java . util . ArrayList ; import java . util . Collection ; import java . util . concurrent . atomic . AtomicBoolean ; import org . springframework . jmx . export . annotation . ManagedAttribute ; import org . springframework . jmx . export . annotation . ManagedOperation ; import org . springframework . jmx . export . annotation . ManagedResource ; public abstract class ServiceSupport implements Service { private static int threadCounter ; private AtomicBoolean started = new AtomicBoolean ( false ) ; private AtomicBoolean starting = new AtomicBoolean ( false ) ; private AtomicBoolean stopping = new AtomicBoolean ( false ) ; private AtomicBoolean stopped = new AtomicBoolean ( false ) ; private Collection childServices ; public void start ( ) throws Exception { if ( started . compareAndSet ( false , true ) ) { starting . set ( true ) ; try { if ( childServices != null ) { ServiceHelper . startServices ( childServices ) ; } doStart ( ) ; } finally { starting . set ( false ) ; } } } public void stop ( ) throws Exception { if ( started . get ( ) && stopping . compareAndSet ( false , true ) ) { try { doStop ( ) ; } finally { if ( childServices != null ) { ServiceHelper . stopServices ( childServices ) ; } stopped . set ( true ) ; started . set ( false ) ; stopping . set ( false ) ; } } } public boolean isStarted ( ) { return started . get ( ) ; } public boolean isStarting ( ) { return starting . get ( ) ; } public boolean isStopping ( ) { return stopping . get ( ) ; } protected boolean isRunAllowed ( ) { return ! ( stopping . get ( ) || stopped . get ( ) ) ; } public boolean isStopped ( ) { return stopped . get ( ) ; } protected abstract void doStart ( ) throws Exception ; protected abstract void doStop ( ) throws Exception ; protected String getThreadName ( String prefix ) { return prefix + " thread:" + nextThreadCounter ( ) ; } protected static synchronized int nextThreadCounter ( ) { return ++ threadCounter ; } protected void addChildService ( Object childService ) { if ( childServices == null ) { childServices = new ArrayList ( ) ; } childServices . add ( childService ) ; } protected boolean removeChildService ( Object childService ) { if ( childServices != null ) { return childServices . remove ( childService ) ; } else { return false ; } } } 	1	['14', '1', '27', '31', '28', '49', '29', '2', '7', '0.807692308', '200', '1', '0', '0', '0.380952381', '0', '0', '12.85714286', '3', '1.2143', '1']
package org . apache . camel . model . dataformat ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlTransient ; import javax . xml . bind . annotation . XmlType ; import org . apache . camel . impl . RouteContext ; import org . apache . camel . spi . DataFormat ; import org . apache . camel . util . ObjectHelper ; import org . apache . camel . util . IntrospectionSupport ; @ XmlType ( name = "dataFormatType" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class DataFormatType { @ XmlTransient private DataFormat dataFormat ; @ XmlTransient private String dataFormatTypeName ; public DataFormatType ( ) { } public DataFormatType ( DataFormat dataFormat ) { this . dataFormat = dataFormat ; } protected DataFormatType ( String dataFormatTypeName ) { this . dataFormatTypeName = dataFormatTypeName ; } public DataFormat getDataFormat ( RouteContext routeContext ) { if ( dataFormat == null ) { dataFormat = createDataFormat ( routeContext ) ; ObjectHelper . notNull ( dataFormat , "dataFormat" ) ; configureDataFormat ( dataFormat ) ; } return dataFormat ; } protected DataFormat createDataFormat ( RouteContext routeContext ) { if ( dataFormatTypeName != null ) { Class type = ObjectHelper . loadClass ( dataFormatTypeName , getClass ( ) . getClassLoader ( ) ) ; if ( type == null ) { throw new IllegalArgumentException ( "The class " + dataFormatTypeName + " is not on the classpath! Cannot use the dataFormat " + this ) ; } return ( DataFormat ) ObjectHelper . newInstance ( type ) ; } return null ; } protected void configureDataFormat ( DataFormat dataFormat ) { } protected void setProperty ( DataFormat dataFormat , String name , Object value ) { try { IntrospectionSupport . setProperty ( dataFormat , name , value ) ; } catch ( Exception e ) { throw new IllegalArgumentException ( "Failed to set property " + name + " on " + dataFormat + ". Reason: " + e , e ) ; } } } 	1	['7', '1', '4', '12', '20', '17', '8', '4', '3', '0.75', '108', '1', '1', '0', '0.428571429', '0', '0', '14.14285714', '3', '1', '2']
package org . apache . camel . converter . jaxp ; import java . io . ByteArrayInputStream ; import java . io . InputStream ; import java . io . InputStreamReader ; import java . io . Reader ; import javax . xml . transform . stream . StreamSource ; public class BytesSource extends StreamSource { private byte [ ] data ; public BytesSource ( byte [ ] data ) { this . data = data ; } public BytesSource ( byte [ ] data , String systemId ) { this . data = data ; setSystemId ( systemId ) ; } public InputStream getInputStream ( ) { return new ByteArrayInputStream ( data ) ; } public Reader getReader ( ) { return new InputStreamReader ( getInputStream ( ) ) ; } public byte [ ] getData ( ) { return data ; } public String toString ( ) { return "BytesSource[" + new String ( data ) + "]" ; } } 	1	['6', '2', '0', '1', '14', '0', '1', '0', '6', '0', '52', '1', '0', '0.692307692', '0.5', '0', '0', '7.5', '1', '0.6667', '1']
package org . apache . camel . builder ; import org . apache . camel . CamelContext ; import org . apache . camel . Endpoint ; import org . apache . camel . Predicate ; import org . apache . camel . Route ; import org . apache . camel . impl . DefaultCamelContext ; import org . apache . camel . model . InterceptType ; import org . apache . camel . model . OtherwiseType ; import org . apache . camel . model . ProcessorType ; import org . apache . camel . model . RouteType ; import org . apache . camel . model . RoutesType ; import org . apache . camel . model . ExceptionType ; import org . apache . camel . processor . DelegateProcessor ; import java . util . ArrayList ; import java . util . List ; import java . util . concurrent . atomic . AtomicBoolean ; public abstract class RouteBuilder extends BuilderSupport { private AtomicBoolean initalized = new AtomicBoolean ( false ) ; private RoutesType routeCollection = new RoutesType ( ) ; private List < Route > routes = new ArrayList < Route > ( ) ; public RouteBuilder ( ) { this ( null ) ; } public RouteBuilder ( CamelContext context ) { super ( context ) ; } @ Override public String toString ( ) { return routeCollection . toString ( ) ; } public abstract void configure ( ) throws Exception ; public RouteType from ( String uri ) { RouteType answer = routeCollection . from ( uri ) ; configureRoute ( answer ) ; return answer ; } public RouteType from ( Endpoint endpoint ) { RouteType answer = routeCollection . from ( endpoint ) ; configureRoute ( answer ) ; return answer ; } public RouteBuilder errorHandler ( ErrorHandlerBuilder errorHandlerBuilder ) { setErrorHandlerBuilder ( errorHandlerBuilder ) ; return this ; } public RouteBuilder inheritErrorHandler ( boolean value ) { routeCollection . setInheritErrorHandlerFlag ( value ) ; return this ; } public RouteBuilder intercept ( DelegateProcessor interceptor ) { routeCollection . intercept ( interceptor ) ; return this ; } public InterceptType intercept ( ) { return routeCollection . intercept ( ) ; } public OtherwiseType intercept ( Predicate predicate ) { return routeCollection . intercept ( predicate ) ; } public ExceptionType exception ( Class exceptionType ) { return routeCollection . exception ( exceptionType ) ; } public CamelContext getContext ( ) { CamelContext context = super . getContext ( ) ; if ( context == null ) { context = createContainer ( ) ; setContext ( context ) ; } return context ; } public List < Route > getRouteList ( ) throws Exception { checkInitialized ( ) ; return routes ; } protected void checkInitialized ( ) throws Exception { if ( initalized . compareAndSet ( false , true ) ) { configure ( ) ; populateRoutes ( routes ) ; } } protected void populateRoutes ( List < Route > routes ) throws Exception { CamelContext camelContext = getContext ( ) ; if ( camelContext == null ) { throw new IllegalArgumentException ( "No CamelContext has been injected!" ) ; } routeCollection . setCamelContext ( camelContext ) ; camelContext . addRouteDefinitions ( routeCollection . getRoutes ( ) ) ; } public void setRouteCollection ( RoutesType routeCollection ) { this . routeCollection = routeCollection ; } protected CamelContext createContainer ( ) { return new DefaultCamelContext ( ) ; } protected void configureRoute ( RouteType route ) { route . setGroup ( getClass ( ) . getName ( ) ) ; } } 	1	['19', '2', '3', '17', '44', '55', '7', '12', '15', '0.666666667', '168', '1', '1', '0.622222222', '0.131578947', '1', '3', '7.684210526', '2', '0.9474', '3']
package org . apache . camel . impl ; import org . apache . camel . CamelContext ; import org . apache . camel . Exchange ; import org . apache . camel . ExchangePattern ; import org . apache . camel . Message ; import org . apache . camel . RuntimeCamelException ; import org . apache . camel . spi . UnitOfWork ; import org . apache . camel . util . UuidGenerator ; import java . util . HashMap ; import java . util . Map ; public class DefaultExchange implements Exchange { private static final UuidGenerator DEFAULT_ID_GENERATOR = new UuidGenerator ( ) ; protected final CamelContext context ; private Map < String , Object > properties ; private Message in ; private Message out ; private Message fault ; private Throwable exception ; private String exchangeId = DefaultExchange . DEFAULT_ID_GENERATOR . generateId ( ) ; private UnitOfWork unitOfWork ; private ExchangePattern pattern ; public DefaultExchange ( CamelContext context ) { this ( context , ExchangePattern . InOnly ) ; } public DefaultExchange ( CamelContext context , ExchangePattern pattern ) { this . context = context ; this . pattern = pattern ; } @ Override public String toString ( ) { return "Exchange[" + in + "]" ; } public Exchange copy ( ) { Exchange exchange = newInstance ( ) ; exchange . copyFrom ( this ) ; return exchange ; } public void copyFrom ( Exchange exchange ) { if ( exchange == this ) { return ; } setProperties ( safeCopy ( exchange . getProperties ( ) ) ) ; safeCopy ( getIn ( ) , exchange , exchange . getIn ( ) ) ; Message copyOut = exchange . getOut ( false ) ; if ( copyOut != null ) { safeCopy ( getOut ( true ) , exchange , copyOut ) ; } Message copyFault = exchange . getFault ( false ) ; if ( copyFault != null ) { safeCopy ( getFault ( true ) , exchange , copyFault ) ; } setException ( exchange . getException ( ) ) ; unitOfWork = exchange . getUnitOfWork ( ) ; pattern = exchange . getPattern ( ) ; } private static void safeCopy ( Message message , Exchange exchange , Message that ) { if ( message != null ) { message . copyFrom ( that ) ; } } private static Map < String , Object > safeCopy ( Map < String , Object > properties ) { if ( properties == null ) { return null ; } return new HashMap < String , Object > ( properties ) ; } private static Message safeCopy ( Exchange exchange , Message message ) { if ( message == null ) { return null ; } Message answer = message . copy ( ) ; if ( answer instanceof MessageSupport ) { MessageSupport messageSupport = ( MessageSupport ) answer ; messageSupport . setExchange ( exchange ) ; } return answer ; } public Exchange newInstance ( ) { return new DefaultExchange ( context ) ; } public CamelContext getContext ( ) { return context ; } public Object getProperty ( String name ) { if ( properties != null ) { return properties . get ( name ) ; } return null ; } public < T > T getProperty ( String name , Class < T > type ) { Object value = getProperty ( name ) ; return getContext ( ) . getTypeConverter ( ) . convertTo ( type , value ) ; } public void setProperty ( String name , Object value ) { getProperties ( ) . put ( name , value ) ; } public Object removeProperty ( String name ) { return getProperties ( ) . remove ( name ) ; } public Map < String , Object > getProperties ( ) { if ( properties == null ) { properties = new HashMap < String , Object > ( ) ; } return properties ; } public void setProperties ( Map < String , Object > properties ) { this . properties = properties ; } public Message getIn ( ) { if ( in == null ) { in = createInMessage ( ) ; configureMessage ( in ) ; } return in ; } public void setIn ( Message in ) { this . in = in ; configureMessage ( in ) ; } public Message getOut ( ) { return getOut ( true ) ; } public Message getOut ( boolean lazyCreate ) { if ( out == null && lazyCreate ) { out = createOutMessage ( ) ; configureMessage ( out ) ; } return out ; } public void setOut ( Message out ) { this . out = out ; configureMessage ( out ) ; } public Throwable getException ( ) { return exception ; } public void setException ( Throwable exception ) { this . exception = exception ; } public ExchangePattern getPattern ( ) { return pattern ; } public void setPattern ( ExchangePattern pattern ) { this . pattern = pattern ; } public void throwException ( ) throws Exception { if ( exception == null ) { return ; } if ( exception instanceof Exception ) { throw ( Exception ) exception ; } if ( exception instanceof RuntimeException ) { throw ( RuntimeException ) exception ; } throw new RuntimeCamelException ( exception ) ; } public Message getFault ( ) { return getFault ( true ) ; } public Message getFault ( boolean lazyCreate ) { if ( fault == null && lazyCreate ) { fault = createFaultMessage ( ) ; configureMessage ( fault ) ; } return fault ; } public void setFault ( Message fault ) { this . fault = fault ; configureMessage ( fault ) ; } public String getExchangeId ( ) { return exchangeId ; } public void setExchangeId ( String id ) { this . exchangeId = id ; } public boolean isFailed ( ) { Message faultMessage = getFault ( false ) ; if ( faultMessage != null ) { Object faultBody = faultMessage . getBody ( ) ; if ( faultBody != null ) { return true ; } } return getException ( ) != null ; } public UnitOfWork getUnitOfWork ( ) { return unitOfWork ; } public void setUnitOfWork ( UnitOfWork unitOfWork ) { this . unitOfWork = unitOfWork ; } protected Message createInMessage ( ) { return new DefaultMessage ( ) ; } protected Message createOutMessage ( ) { return new DefaultMessage ( ) ; } protected Message createFaultMessage ( ) { return new DefaultMessage ( ) ; } protected void configureMessage ( Message message ) { if ( message instanceof MessageSupport ) { MessageSupport messageSupport = ( MessageSupport ) message ; messageSupport . setExchange ( this ) ; } } } 	1	['39', '1', '11', '23', '67', '687', '13', '10', '31', '0.897368421', '405', '1', '7', '0', '0.13377193', '0', '0', '9.128205128', '4', '1.3846', '4']
package org . apache . camel . builder . xml ; public class DomResultHandlerFactory implements ResultHandlerFactory { public ResultHandler createResult ( ) { return new DomResultHandler ( ) ; } } 	1	['2', '1', '0', '4', '4', '1', '1', '3', '2', '2', '9', '0', '0', '0', '1', '0', '0', '3.5', '1', '0.5', '2']
package org . apache . camel . component . bean ; import org . apache . camel . * ; import org . apache . camel . builder . ExpressionBuilder ; import org . apache . camel . language . LanguageAnnotation ; import static org . apache . camel . util . ExchangeHelper . convertToType ; import org . apache . camel . util . ObjectHelper ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import java . lang . annotation . Annotation ; import java . lang . reflect . Method ; import java . lang . reflect . Modifier ; import java . util . ArrayList ; import java . util . Arrays ; import java . util . Collection ; import java . util . List ; import java . util . Map ; import java . util . concurrent . ConcurrentHashMap ; public class BeanInfo { private static final transient Log LOG = LogFactory . getLog ( BeanInfo . class ) ; private final CamelContext camelContext ; private Class type ; private ParameterMappingStrategy strategy ; private Map < String , MethodInfo > operations = new ConcurrentHashMap < String , MethodInfo > ( ) ; private MethodInfo defaultMethod ; private List < MethodInfo > operationsWithBody = new ArrayList < MethodInfo > ( ) ; public BeanInfo ( CamelContext camelContext , Class type , ParameterMappingStrategy strategy ) { this . camelContext = camelContext ; this . type = type ; this . strategy = strategy ; introspect ( getType ( ) ) ; if ( operations . size ( ) == 1 ) { Collection < MethodInfo > methodInfos = operations . values ( ) ; for ( MethodInfo methodInfo : methodInfos ) { defaultMethod = methodInfo ; } } } public Class getType ( ) { return type ; } public CamelContext getCamelContext ( ) { return camelContext ; } public MethodInvocation createInvocation ( Method method , Object pojo , Exchange exchange ) throws RuntimeCamelException { MethodInfo methodInfo = introspect ( type , method ) ; if ( methodInfo != null ) { return methodInfo . createMethodInvocation ( pojo , exchange ) ; } return null ; } public MethodInvocation createInvocation ( Object pojo , Exchange exchange ) throws RuntimeCamelException , AmbiguousMethodCallException { MethodInfo methodInfo = null ; String name = exchange . getIn ( ) . getHeader ( BeanProcessor . METHOD_NAME , String . class ) ; if ( name != null ) { methodInfo = operations . get ( name ) ; } if ( methodInfo == null ) { methodInfo = chooseMethod ( pojo , exchange ) ; } if ( methodInfo == null ) { methodInfo = defaultMethod ; } if ( methodInfo != null ) { return methodInfo . createMethodInvocation ( pojo , exchange ) ; } return null ; } protected void introspect ( Class clazz ) { Method [ ] methods = clazz . getDeclaredMethods ( ) ; for ( Method method : methods ) { if ( isValidMethod ( clazz , method ) ) { introspect ( clazz , method ) ; } } Class superclass = clazz . getSuperclass ( ) ; if ( superclass != null && ! superclass . equals ( Object . class ) ) { introspect ( superclass ) ; } } protected MethodInfo introspect ( Class clazz , Method method ) { Class [ ] parameterTypes = method . getParameterTypes ( ) ; Annotation [ ] [ ] parametersAnnotations = method . getParameterAnnotations ( ) ; final Expression [ ] parameterExpressions = new Expression [ parameterTypes . length ] ; List < ParameterInfo > parameters = new ArrayList < ParameterInfo > ( ) ; List < ParameterInfo > bodyParameters = new ArrayList < ParameterInfo > ( ) ; boolean hasCustomAnnotation = false ; for ( int i = 0 ; i < parameterTypes . length ; i ++ ) { Class parameterType = parameterTypes [ i ] ; Annotation [ ] parameterAnnotations = parametersAnnotations [ i ] ; Expression expression = createParameterUnmarshalExpression ( clazz , method , parameterType , parameterAnnotations ) ; hasCustomAnnotation |= expression != null ; if ( expression == null ) { hasCustomAnnotation |= ObjectHelper . hasAnnotation ( parameterAnnotations , Body . class ) ; if ( bodyParameters . isEmpty ( ) ) { expression = ExpressionBuilder . bodyExpression ( parameterType ) ; } else { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "No expression available for method: " + method . toString ( ) + " which already has a body so ignoring parameter: " + i + " so ignoring method" ) ; } return null ; } } ParameterInfo parameterInfo = new ParameterInfo ( i , parameterType , parameterAnnotations , expression ) ; parameters . add ( parameterInfo ) ; if ( isPossibleBodyParameter ( parameterAnnotations ) ) { bodyParameters . add ( parameterInfo ) ; } } String opName = method . getName ( ) ; MethodInfo methodInfo = new MethodInfo ( clazz , method , parameters , bodyParameters , hasCustomAnnotation ) ; operations . put ( opName , methodInfo ) ; if ( methodInfo . hasBodyParameter ( ) ) { operationsWithBody . add ( methodInfo ) ; } return methodInfo ; } protected MethodInfo chooseMethod ( Object pojo , Exchange exchange ) throws AmbiguousMethodCallException { if ( operationsWithBody . size ( ) == 1 ) { return operationsWithBody . get ( 0 ) ; } else if ( ! operationsWithBody . isEmpty ( ) ) { Message in = exchange . getIn ( ) ; Object body = in . getBody ( ) ; if ( body != null ) { Class bodyType = body . getClass ( ) ; List < MethodInfo > possibles = new ArrayList < MethodInfo > ( ) ; for ( MethodInfo methodInfo : operationsWithBody ) { if ( methodInfo . bodyParameterMatches ( bodyType ) ) { possibles . add ( methodInfo ) ; } } if ( possibles . size ( ) == 1 ) { return possibles . get ( 0 ) ; } else if ( possibles . isEmpty ( ) ) { Object newBody = null ; MethodInfo matched = null ; for ( MethodInfo methodInfo : operationsWithBody ) { Object value = convertToType ( exchange , methodInfo . getBodyParameterType ( ) , body ) ; if ( value != null ) { if ( newBody != null ) { throw new AmbiguousMethodCallException ( exchange , Arrays . asList ( matched , methodInfo ) ) ; } else { newBody = value ; matched = methodInfo ; } } } if ( matched != null ) { in . setBody ( newBody ) ; return matched ; } } else { MethodInfo chosen = null ; for ( MethodInfo possible : possibles ) { if ( possible . isHasCustomAnnotation ( ) ) { if ( chosen != null ) { chosen = null ; break ; } else { chosen = possible ; } } } if ( chosen != null ) { return chosen ; } throw new AmbiguousMethodCallException ( exchange , possibles ) ; } } return null ; } return null ; } protected Expression createParameterUnmarshalExpression ( Class clazz , Method method , Class parameterType , Annotation [ ] parameterAnnotation ) { for ( Annotation annotation : parameterAnnotation ) { Expression answer = createParameterUnmarshalExpressionForAnnotation ( clazz , method , parameterType , annotation ) ; if ( answer != null ) { return answer ; } } return strategy . getDefaultParameterTypeExpression ( parameterType ) ; } protected boolean isPossibleBodyParameter ( Annotation [ ] annotations ) { if ( annotations != null ) { for ( Annotation annotation : annotations ) { if ( ( annotation instanceof Property ) || ( annotation instanceof Header ) ) { return false ; } } } return true ; } protected Expression createParameterUnmarshalExpressionForAnnotation ( Class clazz , Method method , Class parameterType , Annotation annotation ) { if ( annotation instanceof Property ) { Property propertyAnnotation = ( Property ) annotation ; return ExpressionBuilder . propertyExpression ( propertyAnnotation . name ( ) ) ; } else if ( annotation instanceof Properties ) { return ExpressionBuilder . propertiesExpresion ( ) ; } else if ( annotation instanceof Header ) { Header headerAnnotation = ( Header ) annotation ; return ExpressionBuilder . headerExpression ( headerAnnotation . name ( ) ) ; } else if ( annotation instanceof Headers ) { return ExpressionBuilder . headersExpresion ( ) ; } else { LanguageAnnotation languageAnnotation = annotation . annotationType ( ) . getAnnotation ( LanguageAnnotation . class ) ; if ( languageAnnotation != null ) { Class < ? > type = languageAnnotation . factory ( ) ; Object object = camelContext . getInjector ( ) . newInstance ( type ) ; if ( object instanceof AnnotationExpressionFactory ) { AnnotationExpressionFactory expressionFactory = ( AnnotationExpressionFactory ) object ; return expressionFactory . createExpression ( camelContext , annotation , languageAnnotation , parameterType ) ; } else { LOG . error ( "Ignoring bad annotation: " + languageAnnotation + "on method: " + method + " which declares a factory: " + type . getName ( ) + " which does not implement " + AnnotationExpressionFactory . class . getName ( ) ) ; } } } return null ; } protected boolean isValidMethod ( Class clazz , Method method ) { return Modifier . isPublic ( method . getModifiers ( ) ) ; } } 	1	['13', '1', '0', '23', '77', '48', '1', '22', '5', '0.738095238', '614', '1', '4', '0', '0.314814815', '0', '0', '45.69230769', '8', '2.6154', '9']
package org . apache . camel . model ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlRootElement ; import org . apache . camel . Predicate ; import org . apache . camel . impl . RouteContext ; import org . apache . camel . model . language . ExpressionType ; import org . apache . camel . processor . FilterProcessor ; @ XmlRootElement ( name = "filter" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class FilterType extends ExpressionNode { public FilterType ( ) { } public FilterType ( ExpressionType expression ) { super ( expression ) ; } public FilterType ( Predicate predicate ) { super ( predicate ) ; } @ Override public String toString ( ) { return "Filter[ " + getExpression ( ) + " -> " + getOutputs ( ) + "]" ; } @ Override public FilterProcessor createProcessor ( RouteContext routeContext ) throws Exception { return createFilterProcessor ( routeContext ) ; } } 	1	['6', '3', '0', '9', '15', '15', '3', '6', '6', '2', '42', '0', '0', '0.971428571', '0.416666667', '2', '3', '6', '1', '0.5', '3']
package org . apache . camel . processor . idempotent ; import java . util . HashMap ; import java . util . Map ; import org . apache . camel . util . LRUCache ; public class MemoryMessageIdRepository implements MessageIdRepository { private Map cache ; public MemoryMessageIdRepository ( Map set ) { this . cache = set ; } public static MessageIdRepository memoryMessageIdRepository ( ) { return memoryMessageIdRepository ( new HashMap ( ) ) ; } public static MessageIdRepository memoryMessageIdRepository ( int cacheSize ) { return memoryMessageIdRepository ( new LRUCache ( cacheSize ) ) ; } public static MessageIdRepository memoryMessageIdRepository ( Map cache ) { return new MemoryMessageIdRepository ( cache ) ; } public boolean contains ( String messageId ) { synchronized ( cache ) { if ( cache . containsKey ( messageId ) ) { return true ; } else { cache . put ( messageId , messageId ) ; return false ; } } } } 	1	['5', '1', '0', '2', '10', '8', '0', '2', '5', '0.5', '57', '1', '0', '0', '0.3', '0', '0', '10.2', '2', '1', '1']
package org . apache . camel . language ; import org . apache . camel . Exchange ; import org . apache . camel . Expression ; import org . apache . camel . RuntimeCamelException ; public class ExpressionEvaluationException extends RuntimeCamelException { private final Expression < Exchange > expression ; private final Exchange exchange ; public ExpressionEvaluationException ( Expression < Exchange > expression , Exchange exchange , Throwable cause ) { super ( cause ) ; this . expression = expression ; this . exchange = exchange ; } public Expression < Exchange > getExpression ( ) { return expression ; } } 	1	['2', '5', '0', '4', '3', '0', '1', '3', '2', '0.5', '17', '1', '2', '0.944444444', '0.625', '0', '0', '6.5', '1', '0.5', '1']
package org . apache . camel . model ; import java . util . ArrayList ; import java . util . Collection ; import java . util . List ; import javax . xml . bind . annotation . XmlElement ; import javax . xml . bind . annotation . XmlElementRef ; import javax . xml . bind . annotation . XmlRootElement ; import javax . xml . bind . annotation . XmlTransient ; import org . apache . camel . Exchange ; import org . apache . camel . Expression ; import org . apache . camel . Processor ; import org . apache . camel . Route ; import org . apache . camel . impl . RouteContext ; import org . apache . camel . model . config . BatchResequencerConfig ; import org . apache . camel . model . config . StreamResequencerConfig ; import org . apache . camel . model . language . ExpressionType ; import org . apache . camel . processor . Resequencer ; import org . apache . camel . processor . StreamResequencer ; @ XmlRootElement ( name = "resequencer" ) public class ResequencerType extends ProcessorType < ProcessorType > { @ XmlElementRef private List < InterceptorType > interceptors = new ArrayList < InterceptorType > ( ) ; @ XmlElementRef private List < ExpressionType > expressions = new ArrayList < ExpressionType > ( ) ; @ XmlElementRef private List < ProcessorType < ? > > outputs = new ArrayList < ProcessorType < ? > > ( ) ; private BatchResequencerConfig batchConfig ; private StreamResequencerConfig streamConfig ; @ XmlTransient private List < Expression > expressionList ; public ResequencerType ( ) { this ( null ) ; } public ResequencerType ( List < Expression > expressions ) { this . expressionList = expressions ; this . batch ( ) ; } public ResequencerType stream ( ) { return stream ( StreamResequencerConfig . getDefault ( ) ) ; } public ResequencerType batch ( ) { return batch ( BatchResequencerConfig . getDefault ( ) ) ; } public ResequencerType stream ( StreamResequencerConfig config ) { this . streamConfig = config ; this . batchConfig = null ; return this ; } public ResequencerType batch ( BatchResequencerConfig config ) { this . batchConfig = config ; this . streamConfig = null ; return this ; } @ Override public String toString ( ) { return "Resequencer[ " + getExpressions ( ) + " -> " + getOutputs ( ) + "]" ; } @ Override public String getLabel ( ) { return ExpressionType . getLabel ( getExpressions ( ) ) ; } public List < ExpressionType > getExpressions ( ) { return expressions ; } public List < InterceptorType > getInterceptors ( ) { return interceptors ; } public void setInterceptors ( List < InterceptorType > interceptors ) { this . interceptors = interceptors ; } public List < ProcessorType < ? > > getOutputs ( ) { return outputs ; } public void setOutputs ( List < ProcessorType < ? > > outputs ) { this . outputs = outputs ; } public BatchResequencerConfig getBatchConfig ( ) { return batchConfig ; } public BatchResequencerConfig getBatchConfig ( BatchResequencerConfig defaultConfig ) { return batchConfig ; } public StreamResequencerConfig getStreamConfig ( ) { return streamConfig ; } @ XmlElement ( name = "batch-config" , required = false ) public void setBatchConfig ( BatchResequencerConfig batchConfig ) { batch ( batchConfig ) ; } @ XmlElement ( name = "stream-config" , required = false ) public void setStreamConfig ( StreamResequencerConfig streamConfig ) { stream ( streamConfig ) ; } @ Override public Processor createProcessor ( RouteContext routeContext ) throws Exception { return createStreamResequencer ( routeContext , streamConfig ) ; } @ Override public void addRoutes ( RouteContext routeContext , Collection < Route > routes ) throws Exception { if ( batchConfig != null ) { routes . add ( createBatchResequencerRoute ( routeContext ) ) ; } else { super . addRoutes ( routeContext , routes ) ; } } private Route < Exchange > createBatchResequencerRoute ( RouteContext routeContext ) throws Exception { final Resequencer resequencer = createBatchResequencer ( routeContext , batchConfig ) ; return new Route < Exchange > ( routeContext . getEndpoint ( ) , resequencer ) { @ Override public String toString ( ) { return "BatchResequencerRoute[" + getEndpoint ( ) + " -> " + resequencer . getProcessor ( ) + "]" ; } } ; } protected Resequencer createBatchResequencer ( RouteContext routeContext , BatchResequencerConfig config ) throws Exception { Processor processor = routeContext . createProcessor ( this ) ; Resequencer resequencer = new Resequencer ( routeContext . getEndpoint ( ) , processor , resolveExpressionList ( routeContext ) ) ; resequencer . setBatchSize ( config . getBatchSize ( ) ) ; resequencer . setBatchTimeout ( config . getBatchTimeout ( ) ) ; return resequencer ; } protected StreamResequencer createStreamResequencer ( RouteContext routeContext , StreamResequencerConfig config ) throws Exception { config . getComparator ( ) . setExpressions ( resolveExpressionList ( routeContext ) ) ; Processor processor = routeContext . createProcessor ( this ) ; StreamResequencer resequencer = new StreamResequencer ( processor , config . getComparator ( ) , config . getCapacity ( ) ) ; resequencer . setTimeout ( config . getTimeout ( ) ) ; return resequencer ; } private List < Expression > resolveExpressionList ( RouteContext routeContext ) { if ( expressionList == null ) { expressionList = new ArrayList < Expression > ( ) ; for ( ExpressionType expression : expressions ) { expressionList . add ( expression . createExpression ( routeContext ) ) ; } } if ( expressionList . isEmpty ( ) ) { throw new IllegalArgumentException ( "No expressions configured for: " + this ) ; } return expressionList ; } } 	1	['24', '2', '0', '16', '56', '218', '3', '15', '20', '0.753623188', '275', '1', '2', '0.808695652', '0.284722222', '1', '4', '10.20833333', '4', '1.0417', '5']
package org . apache . camel . impl ; import org . apache . camel . Message ; import java . util . HashMap ; import java . util . Map ; public class DefaultMessage extends MessageSupport { private Map < String , Object > headers ; @ Override public String toString ( ) { return "Message: " + getBody ( ) ; } public Object getHeader ( String name ) { return getHeaders ( ) . get ( name ) ; } public < T > T getHeader ( String name , Class < T > type ) { Object value = getHeader ( name ) ; return getExchange ( ) . getContext ( ) . getTypeConverter ( ) . convertTo ( type , value ) ; } public void setHeader ( String name , Object value ) { if ( headers == null ) { headers = createHeaders ( ) ; } headers . put ( name , value ) ; } public Object removeHeader ( String name ) { if ( headers != null ) { return headers . remove ( name ) ; } else { return null ; } } public Map < String , Object > getHeaders ( ) { if ( headers == null ) { headers = createHeaders ( ) ; } return headers ; } public void setHeaders ( Map < String , Object > headers ) { this . headers = headers ; } public DefaultMessage newInstance ( ) { return new DefaultMessage ( ) ; } protected Map < String , Object > createHeaders ( ) { HashMap < String , Object > map = new HashMap < String , Object > ( ) ; populateInitialHeaders ( map ) ; return map ; } protected void populateInitialHeaders ( Map < String , Object > map ) { } } 	1	['12', '2', '9', '15', '25', '54', '10', '5', '10', '0.545454545', '98', '1', '0', '0.52173913', '0.333333333', '1', '2', '7.083333333', '2', '1.1667', '1']
package org . apache . camel . builder ; import java . util . ArrayList ; import java . util . List ; import org . apache . camel . CamelContext ; import org . apache . camel . Endpoint ; import org . apache . camel . NoSuchEndpointException ; import org . apache . camel . processor . LoggingLevel ; import org . apache . camel . processor . SendProcessor ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public abstract class BuilderSupport { private CamelContext context ; private ErrorHandlerBuilder errorHandlerBuilder ; private boolean inheritErrorHandler = true ; protected BuilderSupport ( CamelContext context ) { this . context = context ; } protected BuilderSupport ( BuilderSupport parent ) { this . context = parent . getContext ( ) ; this . inheritErrorHandler = parent . inheritErrorHandler ; if ( inheritErrorHandler && parent . errorHandlerBuilder != null ) { this . errorHandlerBuilder = parent . errorHandlerBuilder . copy ( ) ; } } public ValueBuilder header ( String name ) { return Builder . header ( name ) ; } public ValueBuilder body ( ) { return Builder . body ( ) ; } public < T > ValueBuilder body ( Class < T > type ) { return Builder . bodyAs ( type ) ; } public ValueBuilder outBody ( ) { return Builder . outBody ( ) ; } public < T > ValueBuilder outBody ( Class < T > type ) { return Builder . outBodyAs ( type ) ; } public ValueBuilder faultBody ( ) { return Builder . faultBody ( ) ; } public < T > ValueBuilder faultBodyAs ( Class < T > type ) { return Builder . faultBodyAs ( type ) ; } public ValueBuilder systemProperty ( String name ) { return Builder . systemProperty ( name ) ; } public ValueBuilder systemProperty ( String name , String defaultValue ) { return Builder . systemProperty ( name , defaultValue ) ; } public ValueBuilder constant ( Object value ) { return Builder . constant ( value ) ; } public Endpoint endpoint ( String uri ) throws NoSuchEndpointException { if ( uri == null ) { throw new IllegalArgumentException ( "uri parameter cannot be null" ) ; } Endpoint endpoint = getContext ( ) . getEndpoint ( uri ) ; if ( endpoint == null ) { throw new NoSuchEndpointException ( uri ) ; } return endpoint ; } public List < Endpoint > endpoints ( String ... uris ) throws NoSuchEndpointException { List < Endpoint > endpoints = new ArrayList < Endpoint > ( ) ; for ( String uri : uris ) { endpoints . add ( endpoint ( uri ) ) ; } return endpoints ; } public List < Endpoint > endpoints ( Endpoint ... endpoints ) { List < Endpoint > answer = new ArrayList < Endpoint > ( ) ; for ( Endpoint endpoint : endpoints ) { answer . add ( endpoint ) ; } return answer ; } public NoErrorHandlerBuilder noErrorHandler ( ) { return new NoErrorHandlerBuilder ( ) ; } public LoggingErrorHandlerBuilder loggingErrorHandler ( ) { return new LoggingErrorHandlerBuilder ( ) ; } public LoggingErrorHandlerBuilder loggingErrorHandler ( String log ) { return loggingErrorHandler ( LogFactory . getLog ( log ) ) ; } public LoggingErrorHandlerBuilder loggingErrorHandler ( Log log ) { return new LoggingErrorHandlerBuilder ( log ) ; } public LoggingErrorHandlerBuilder loggingErrorHandler ( Log log , LoggingLevel level ) { return new LoggingErrorHandlerBuilder ( log , level ) ; } public DeadLetterChannelBuilder deadLetterChannel ( ) { return new DeadLetterChannelBuilder ( ) ; } public DeadLetterChannelBuilder deadLetterChannel ( String deadLetterUri ) { return deadLetterChannel ( endpoint ( deadLetterUri ) ) ; } public DeadLetterChannelBuilder deadLetterChannel ( Endpoint deadLetterEndpoint ) { return new DeadLetterChannelBuilder ( new SendProcessor ( deadLetterEndpoint ) ) ; } public CamelContext getContext ( ) { return context ; } public void setContext ( CamelContext context ) { this . context = context ; } public ErrorHandlerBuilder getErrorHandlerBuilder ( ) { if ( errorHandlerBuilder == null ) { errorHandlerBuilder = createErrorHandlerBuilder ( ) ; } return errorHandlerBuilder ; } protected ErrorHandlerBuilder createErrorHandlerBuilder ( ) { if ( isInheritErrorHandler ( ) ) { return new DeadLetterChannelBuilder ( ) ; } else { return new NoErrorHandlerBuilder ( ) ; } } public void setErrorHandlerBuilder ( ErrorHandlerBuilder errorHandlerBuilder ) { this . errorHandlerBuilder = errorHandlerBuilder ; } public boolean isInheritErrorHandler ( ) { return inheritErrorHandler ; } public void setInheritErrorHandler ( boolean inheritErrorHandler ) { this . inheritErrorHandler = inheritErrorHandler ; } } 	1	['30', '1', '1', '15', '55', '407', '1', '14', '27', '0.862068966', '251', '1', '2', '0', '0.130769231', '0', '0', '7.266666667', '2', '1.0333', '2']
package org . apache . camel ; import java . util . ArrayList ; import java . util . HashMap ; import java . util . List ; import java . util . Map ; public class Route < E extends Exchange > { private final Map < String , Object > properties = new HashMap < String , Object > ( 16 ) ; private Endpoint < E > endpoint ; private List < Service > services = new ArrayList < Service > ( ) ; public Route ( Endpoint < E > endpoint ) { this . endpoint = endpoint ; } public Route ( Endpoint < E > endpoint , Service ... services ) { this ( endpoint ) ; for ( Service service : services ) { addService ( service ) ; } } @ Override public String toString ( ) { return "Route" ; } public Endpoint < E > getEndpoint ( ) { return endpoint ; } public void setEndpoint ( Endpoint < E > endpoint ) { this . endpoint = endpoint ; } public Map < String , Object > getProperties ( ) { return properties ; } public List < Service > getServicesForRoute ( ) throws Exception { List < Service > servicesForRoute = new ArrayList < Service > ( getServices ( ) ) ; addServices ( servicesForRoute ) ; return servicesForRoute ; } public List < Service > getServices ( ) { return services ; } public void setServices ( List < Service > services ) { this . services = services ; } public void addService ( Service service ) { getServices ( ) . add ( service ) ; } protected void addServices ( List < Service > services ) throws Exception { } } 	1	['11', '1', '3', '12', '16', '41', '10', '2', '10', '0.666666667', '91', '1', '1', '0', '0.327272727', '0', '0', '7', '1', '0.8182', '2']
package org . apache . camel . converter . jaxp ; import java . io . ByteArrayInputStream ; import java . io . InputStream ; import java . io . Reader ; import java . io . Serializable ; import java . io . StringReader ; import java . io . UnsupportedEncodingException ; import javax . xml . transform . stream . StreamSource ; public class StringSource extends StreamSource implements Serializable { private final String text ; private String encoding = "UTF-8" ; public StringSource ( String text ) { if ( text == null ) { throw new NullPointerException ( "text can not be null" ) ; } this . text = text ; } public StringSource ( String text , String systemId ) { this ( text ) ; setSystemId ( systemId ) ; } public StringSource ( String text , String systemId , String encoding ) { this . text = text ; this . encoding = encoding ; setSystemId ( systemId ) ; } public InputStream getInputStream ( ) { try { return new ByteArrayInputStream ( text . getBytes ( encoding ) ) ; } catch ( UnsupportedEncodingException e ) { throw new RuntimeException ( e ) ; } } public Reader getReader ( ) { return new StringReader ( text ) ; } public String toString ( ) { return "StringSource[" + text + "]" ; } public String getText ( ) { return text ; } } 	1	['7', '2', '0', '1', '17', '0', '1', '0', '7', '0.25', '83', '1', '0', '0.692307692', '0.714285714', '0', '0', '10.57142857', '1', '0.5714', '2']
package org . apache . camel . component . mock ; import java . util . ArrayList ; import java . util . HashMap ; import java . util . List ; import java . util . Map ; import java . util . Collection ; import java . util . concurrent . CopyOnWriteArrayList ; import java . util . concurrent . CountDownLatch ; import java . util . concurrent . TimeUnit ; import org . apache . camel . * ; import org . apache . camel . impl . DefaultEndpoint ; import org . apache . camel . impl . DefaultExchange ; import org . apache . camel . impl . DefaultProducer ; import org . apache . camel . util . ExpressionComparator ; import org . apache . camel . util . ObjectHelper ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class MockEndpoint extends DefaultEndpoint < Exchange > { private static final transient Log LOG = LogFactory . getLog ( MockEndpoint . class ) ; private int expectedCount = - 1 ; private int counter ; private Map < Integer , Processor > processors = new HashMap < Integer , Processor > ( ) ; private List < Exchange > receivedExchanges = new CopyOnWriteArrayList < Exchange > ( ) ; private List < Throwable > failures = new CopyOnWriteArrayList < Throwable > ( ) ; private List < Runnable > tests = new CopyOnWriteArrayList < Runnable > ( ) ; private CountDownLatch latch ; private long sleepForEmptyTest = 1000L ; private long defaulResultWaitMillis = 20000L ; private int expectedMinimumCount = - 1 ; private List expectedBodyValues ; private List actualBodyValues = new ArrayList ( ) ; public MockEndpoint ( String endpointUri , Component component ) { super ( endpointUri , component ) ; } public static void assertWait ( long timeout , TimeUnit unit , MockEndpoint ... endpoints ) throws InterruptedException { long start = System . currentTimeMillis ( ) ; long left = unit . toMillis ( timeout ) ; long end = start + left ; for ( MockEndpoint endpoint : endpoints ) { if ( ! endpoint . await ( left , TimeUnit . MILLISECONDS ) ) { throw new AssertionError ( "Timeout waiting for endpoints to receive enough messages. " + endpoint . getEndpointUri ( ) + " timed out." ) ; } left = end - System . currentTimeMillis ( ) ; if ( left <= 0 ) { left = 0 ; } } } public static void assertIsSatisfied ( long timeout , TimeUnit unit , MockEndpoint ... endpoints ) throws InterruptedException { assertWait ( timeout , unit , endpoints ) ; for ( MockEndpoint endpoint : endpoints ) { endpoint . assertIsSatisfied ( ) ; } } public static void assertIsSatisfied ( MockEndpoint ... endpoints ) throws InterruptedException { for ( MockEndpoint endpoint : endpoints ) { endpoint . assertIsSatisfied ( ) ; } } public static void assertIsSatisfied ( CamelContext context ) throws InterruptedException { Collection < Endpoint > endpoints = context . getSingletonEndpoints ( ) ; for ( Endpoint endpoint : endpoints ) { if ( endpoint instanceof MockEndpoint ) { MockEndpoint mockEndpoint = ( MockEndpoint ) endpoint ; mockEndpoint . assertIsSatisfied ( ) ; } } } public static void expectsMessageCount ( int count , MockEndpoint ... endpoints ) throws InterruptedException { for ( MockEndpoint endpoint : endpoints ) { endpoint . expectsMessageCount ( count ) ; } } public Consumer < Exchange > createConsumer ( Processor processor ) throws Exception { throw new UnsupportedOperationException ( "You cannot consume from this endpoint" ) ; } public Producer < Exchange > createProducer ( ) throws Exception { return new DefaultProducer < Exchange > ( this ) { public void process ( Exchange exchange ) { onExchange ( exchange ) ; } } ; } public void whenExchangeReceived ( int index , Processor processor ) { this . processors . put ( index , processor ) ; } public void assertIsSatisfied ( ) throws InterruptedException { assertIsSatisfied ( sleepForEmptyTest ) ; } public void assertIsSatisfied ( long timeoutForEmptyEndpoints ) throws InterruptedException { LOG . info ( "Asserting: " + this + " is satisfied" ) ; if ( expectedCount >= 0 ) { if ( expectedCount != getReceivedCounter ( ) ) { if ( expectedCount == 0 ) { if ( timeoutForEmptyEndpoints > 0 ) { LOG . debug ( "Sleeping for: " + timeoutForEmptyEndpoints + " millis to check there really are no messages received" ) ; Thread . sleep ( timeoutForEmptyEndpoints ) ; } } else { waitForCompleteLatch ( ) ; } } assertEquals ( "Received message count" , expectedCount , getReceivedCounter ( ) ) ; } else if ( expectedMinimumCount > 0 && getReceivedCounter ( ) < expectedMinimumCount ) { waitForCompleteLatch ( ) ; } if ( expectedMinimumCount >= 0 ) { int receivedCounter = getReceivedCounter ( ) ; assertTrue ( "Received message count " + receivedCounter + ", expected at least " + expectedCount , expectedCount <= receivedCounter ) ; } for ( Runnable test : tests ) { test . run ( ) ; } for ( Throwable failure : failures ) { if ( failure != null ) { LOG . error ( "Caught on " + getEndpointUri ( ) + " Exception: " + failure , failure ) ; fail ( "Failed due to caught exception: " + failure ) ; } } } public void assertIsNotSatisfied ( ) throws InterruptedException { try { assertIsSatisfied ( ) ; fail ( "Expected assertion failure!" ) ; } catch ( AssertionError e ) { LOG . info ( "Caught expected failure: " + e ) ; } } public void expectedMessageCount ( int expectedCount ) { this . expectedCount = expectedCount ; if ( expectedCount <= 0 ) { latch = null ; } else { latch = new CountDownLatch ( expectedCount ) ; } } public void expectedMinimumMessageCount ( int expectedCount ) { this . expectedMinimumCount = expectedCount ; if ( expectedCount <= 0 ) { latch = null ; } else { latch = new CountDownLatch ( expectedMinimumCount ) ; } } public void expectedBodiesReceived ( final List bodies ) { expectedMessageCount ( bodies . size ( ) ) ; this . expectedBodyValues = bodies ; this . actualBodyValues = new ArrayList ( ) ; expects ( new Runnable ( ) { public void run ( ) { for ( int i = 0 ; i < expectedBodyValues . size ( ) ; i ++ ) { Exchange exchange = getReceivedExchanges ( ) . get ( i ) ; assertTrue ( "No exchange received for counter: " + i , exchange != null ) ; Object expectedBody = expectedBodyValues . get ( i ) ; Object actualBody = actualBodyValues . get ( i ) ; assertEquals ( "Body of message: " + i , expectedBody , actualBody ) ; } } } ) ; } public void expectedBodiesReceived ( Object ... bodies ) { List bodyList = new ArrayList ( ) ; for ( Object body : bodies ) { bodyList . add ( body ) ; } expectedBodiesReceived ( bodyList ) ; } public void expectsAscending ( final Expression < Exchange > expression ) { expects ( new Runnable ( ) { public void run ( ) { assertMessagesAscending ( expression ) ; } } ) ; } public void expectsDescending ( final Expression < Exchange > expression ) { expects ( new Runnable ( ) { public void run ( ) { assertMessagesDescending ( expression ) ; } } ) ; } public void expectsNoDuplicates ( final Expression < Exchange > expression ) { expects ( new Runnable ( ) { public void run ( ) { assertNoDuplicates ( expression ) ; } } ) ; } public void assertMessagesAscending ( Expression < Exchange > expression ) { assertMessagesSorted ( expression , true ) ; } public void assertMessagesDescending ( Expression < Exchange > expression ) { assertMessagesSorted ( expression , false ) ; } protected void assertMessagesSorted ( Expression < Exchange > expression , boolean ascending ) { String type = ascending ? "ascending" : "descending" ; ExpressionComparator comparator = new ExpressionComparator ( expression ) ; List < Exchange > list = getReceivedExchanges ( ) ; for ( int i = 1 ; i < list . size ( ) ; i ++ ) { int j = i - 1 ; Exchange e1 = list . get ( j ) ; Exchange e2 = list . get ( i ) ; int result = comparator . compare ( e1 , e2 ) ; if ( result == 0 ) { fail ( "Messages not " + type + ". Messages" + j + " and " + i + " are equal with value: " + expression . evaluate ( e1 ) + " for expression: " + expression + ". Exchanges: " + e1 + " and " + e2 ) ; } else { if ( ! ascending ) { result = result * - 1 ; } if ( result > 0 ) { fail ( "Messages not " + type + ". Message " + j + " has value: " + expression . evaluate ( e1 ) + " and message " + i + " has value: " + expression . evaluate ( e2 ) + " for expression: " + expression + ". Exchanges: " + e1 + " and " + e2 ) ; } } } } public void assertNoDuplicates ( Expression < Exchange > expression ) { Map < Object , Exchange > map = new HashMap < Object , Exchange > ( ) ; List < Exchange > list = getReceivedExchanges ( ) ; for ( int i = 0 ; i < list . size ( ) ; i ++ ) { Exchange e2 = list . get ( i ) ; Object key = expression . evaluate ( e2 ) ; Exchange e1 = map . get ( key ) ; if ( e1 != null ) { fail ( "Duplicate message found on message " + i + " has value: " + key + " for expression: " + expression + ". Exchanges: " + e1 + " and " + e2 ) ; } else { map . put ( key , e2 ) ; } } } public void expects ( Runnable runnable ) { tests . add ( runnable ) ; } public AssertionClause message ( final int messageIndex ) { AssertionClause clause = new AssertionClause ( ) { public void run ( ) { applyAssertionOn ( MockEndpoint . this , messageIndex , assertExchangeReceived ( messageIndex ) ) ; } } ; expects ( clause ) ; return clause ; } public AssertionClause allMessages ( ) { AssertionClause clause = new AssertionClause ( ) { public void run ( ) { List < Exchange > list = getReceivedExchanges ( ) ; int index = 0 ; for ( Exchange exchange : list ) { applyAssertionOn ( MockEndpoint . this , index ++ , exchange ) ; } } } ; expects ( clause ) ; return clause ; } public Exchange assertExchangeReceived ( int index ) { int count = getReceivedCounter ( ) ; assertTrue ( "Not enough messages received. Was: " + count , count > index ) ; return getReceivedExchanges ( ) . get ( index ) ; } public List < Throwable > getFailures ( ) { return failures ; } public int getReceivedCounter ( ) { return getReceivedExchanges ( ) . size ( ) ; } public List < Exchange > getReceivedExchanges ( ) { return receivedExchanges ; } public int getExpectedCount ( ) { return expectedCount ; } public long getSleepForEmptyTest ( ) { return sleepForEmptyTest ; } public void setSleepForEmptyTest ( long sleepForEmptyTest ) { this . sleepForEmptyTest = sleepForEmptyTest ; } public long getDefaulResultWaitMillis ( ) { return defaulResultWaitMillis ; } public void setDefaulResultWaitMillis ( long defaulResultWaitMillis ) { this . defaulResultWaitMillis = defaulResultWaitMillis ; } protected synchronized void onExchange ( Exchange exchange ) { try { Message in = exchange . getIn ( ) ; Object actualBody = in . getBody ( ) ; if ( expectedBodyValues != null ) { int index = actualBodyValues . size ( ) ; if ( expectedBodyValues . size ( ) > index ) { Object expectedBody = expectedBodyValues . get ( index ) ; if ( expectedBody != null ) { actualBody = in . getBody ( expectedBody . getClass ( ) ) ; } actualBodyValues . add ( actualBody ) ; } } LOG . debug ( getEndpointUri ( ) + " >>>> " + ( ++ counter ) + " : " + exchange + " with body: " + actualBody ) ; receivedExchanges . add ( exchange ) ; Processor processor = processors . get ( getReceivedCounter ( ) ) ; if ( processor != null ) { processor . process ( exchange ) ; } if ( latch != null ) { latch . countDown ( ) ; } } catch ( Exception e ) { failures . add ( e ) ; } } protected void waitForCompleteLatch ( ) throws InterruptedException { if ( latch == null ) { fail ( "Should have a latch!" ) ; } LOG . debug ( "Waiting on the latch for: " + defaulResultWaitMillis + " millis" ) ; latch . await ( defaulResultWaitMillis , TimeUnit . MILLISECONDS ) ; } protected void assertEquals ( String message , Object expectedValue , Object actualValue ) { if ( ! ObjectHelper . equals ( expectedValue , actualValue ) ) { fail ( message + ". Expected: <" + expectedValue + "> but was: <" + actualValue + ">" ) ; } } protected void assertTrue ( String message , boolean predicate ) { if ( ! predicate ) { fail ( message ) ; } } protected void fail ( Object message ) { if ( LOG . isDebugEnabled ( ) ) { List < Exchange > list = getReceivedExchanges ( ) ; int index = 0 ; for ( Exchange exchange : list ) { LOG . debug ( "Received[" + ( ++ index ) + "]: " + exchange ) ; } } throw new AssertionError ( getEndpointUri ( ) + " " + message ) ; } public int getExpectedMinimumCount ( ) { return expectedMinimumCount ; } public void await ( ) throws InterruptedException { if ( latch != null ) { latch . await ( ) ; } } public boolean await ( long timeout , TimeUnit unit ) throws InterruptedException { if ( latch != null ) { return latch . await ( timeout , unit ) ; } return true ; } public boolean isSingleton ( ) { return true ; } } 	1	['47', '2', '0', '23', '100', '943', '9', '22', '38', '0.87458194', '1056', '1', '1', '0.274193548', '0.104859335', '0', '0', '21.19148936', '6', '1.3617', '7']
package org . apache . camel . builder . xml ; public class StringResultHandlerFactory implements ResultHandlerFactory { public ResultHandler createResult ( ) { return new StringResultHandler ( ) ; } } 	1	['2', '1', '0', '4', '4', '1', '1', '3', '2', '2', '9', '0', '0', '0', '1', '0', '0', '3.5', '1', '0.5', '1']
package org . apache . camel . builder . xml ; import javax . xml . transform . Result ; import org . apache . camel . Message ; public interface ResultHandler { Result getResult ( ) ; void setBody ( Message in ) ; } 	1	['2', '1', '0', '9', '2', '1', '8', '1', '2', '2', '2', '0', '0', '0', '0.75', '0', '0', '0', '1', '1', '1']
package org . apache . camel . processor ; import java . util . List ; import org . apache . camel . Processor ; public class CatchProcessor extends DelegateProcessor { private List < Class > exceptions ; public CatchProcessor ( List < Class > exceptions , Processor processor ) { super ( processor ) ; this . exceptions = exceptions ; } @ Override public String toString ( ) { return "Catch[" + exceptions + " -> " + getProcessor ( ) + "]" ; } public boolean catches ( Throwable e ) { for ( Class type : exceptions ) { if ( type . isInstance ( e ) ) { return true ; } } return false ; } public List < Class > getExceptions ( ) { return exceptions ; } } 	1	['4', '3', '0', '6', '14', '0', '4', '2', '4', '0', '52', '1', '0', '0.875', '0.4375', '0', '0', '11.75', '2', '1', '1']
package org . apache . camel ; public interface AsyncProcessor extends Processor { boolean process ( Exchange exchange , AsyncCallback callback ) ; } 	1	['1', '1', '0', '22', '1', '0', '19', '3', '1', '2', '1', '0', '0', '0', '1', '0', '0', '0', '1', '1', '1']
package org . apache . camel . model ; import java . util . ArrayList ; import java . util . Collections ; import java . util . List ; import java . util . concurrent . BlockingQueue ; import java . util . concurrent . ThreadPoolExecutor ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlAttribute ; import javax . xml . bind . annotation . XmlElementRef ; import javax . xml . bind . annotation . XmlRootElement ; import javax . xml . bind . annotation . XmlTransient ; import org . apache . camel . Processor ; import org . apache . camel . impl . RouteContext ; import org . apache . camel . processor . Pipeline ; import org . apache . camel . processor . ThreadProcessor ; @ XmlRootElement ( name = "thread" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class ThreadType extends ProcessorType { @ XmlAttribute private int coreSize = 1 ; @ XmlAttribute private boolean daemon = true ; @ XmlAttribute private long keepAliveTime ; @ XmlAttribute private int maxSize = 1 ; @ XmlAttribute private String name = "Thread Processor" ; @ XmlAttribute private int priority = Thread . NORM_PRIORITY ; @ XmlAttribute private long stackSize ; @ XmlElementRef private List < ProcessorType > outputs = new ArrayList < ProcessorType > ( ) ; @ XmlTransient private BlockingQueue < Runnable > taskQueue ; @ XmlTransient private ThreadGroup threadGroup ; @ XmlTransient private ThreadPoolExecutor executor ; public ThreadType ( ) { } public ThreadType ( int coreSize ) { this . coreSize = coreSize ; this . maxSize = coreSize ; } public ThreadType ( ThreadPoolExecutor executor ) { this . executor = executor ; } @ Override public List getInterceptors ( ) { return Collections . EMPTY_LIST ; } @ Override public List getOutputs ( ) { return outputs ; } @ Override public String toString ( ) { return "Thread[" + getLabel ( ) + "]" ; } @ Override public String getLabel ( ) { return "coreSize=" + coreSize ; } @ Override public Processor createProcessor ( RouteContext routeContext ) throws Exception { ThreadProcessor thread = new ThreadProcessor ( ) ; thread . setExecutor ( executor ) ; thread . setCoreSize ( coreSize ) ; thread . setDaemon ( daemon ) ; thread . setKeepAliveTime ( keepAliveTime ) ; thread . setMaxSize ( maxSize ) ; thread . setName ( name ) ; thread . setPriority ( priority ) ; thread . setStackSize ( stackSize ) ; thread . setTaskQueue ( taskQueue ) ; thread . setThreadGroup ( threadGroup ) ; ArrayList < Processor > pipe = new ArrayList < Processor > ( 2 ) ; pipe . add ( thread ) ; pipe . add ( createOutputsProcessor ( routeContext , outputs ) ) ; return new Pipeline ( pipe ) ; } public ThreadType coreSize ( int coreSize ) { setCoreSize ( coreSize ) ; return this ; } public ThreadType daemon ( boolean daemon ) { setDaemon ( daemon ) ; return this ; } public ThreadType keepAliveTime ( long keepAliveTime ) { setKeepAliveTime ( keepAliveTime ) ; return this ; } public ThreadType maxSize ( int maxSize ) { setMaxSize ( maxSize ) ; return this ; } public ThreadType name ( String name ) { setName ( name ) ; return this ; } public ThreadType priority ( int priority ) { setPriority ( priority ) ; return this ; } public ThreadType stackSize ( long stackSize ) { setStackSize ( stackSize ) ; return this ; } public ThreadType taskQueue ( BlockingQueue < Runnable > taskQueue ) { setTaskQueue ( taskQueue ) ; return this ; } public ThreadType threadGroup ( ThreadGroup threadGroup ) { setThreadGroup ( threadGroup ) ; return this ; } public ThreadType executor ( ThreadPoolExecutor executor ) { setExecutor ( executor ) ; return this ; } public void setCoreSize ( int coreSize ) { this . coreSize = coreSize ; } public void setDaemon ( boolean daemon ) { this . daemon = daemon ; } public void setKeepAliveTime ( long keepAliveTime ) { this . keepAliveTime = keepAliveTime ; } public void setMaxSize ( int maxSize ) { this . maxSize = maxSize ; } public void setName ( String name ) { this . name = name ; } public void setPriority ( int priority ) { this . priority = priority ; } public void setStackSize ( long stackSize ) { this . stackSize = stackSize ; } public void setTaskQueue ( BlockingQueue < Runnable > taskQueue ) { this . taskQueue = taskQueue ; } public void setThreadGroup ( ThreadGroup threadGroup ) { this . threadGroup = threadGroup ; } public ThreadPoolExecutor getExecutor ( ) { return executor ; } public void setExecutor ( ThreadPoolExecutor executor ) { this . executor = executor ; } } 	1	['29', '2', '0', '5', '50', '318', '1', '5', '29', '0.86038961', '304', '1', '0', '0.781512605', '0.199233716', '1', '4', '9.103448276', '1', '0.8966', '2']
package org . apache . camel . util ; import org . apache . camel . CamelContext ; import org . apache . camel . Endpoint ; import org . apache . camel . NoSuchEndpointException ; import org . apache . camel . spi . Injector ; import static org . apache . camel . util . ObjectHelper . notNull ; public class CamelContextHelper { private CamelContextHelper ( ) { } public static Endpoint getMandatoryEndpoint ( CamelContext camelContext , String uri ) throws NoSuchEndpointException { Endpoint endpoint = camelContext . getEndpoint ( uri ) ; if ( endpoint == null ) { throw new NoSuchEndpointException ( uri ) ; } else { return endpoint ; } } public static < T > T convertTo ( CamelContext context , Class < T > type , Object value ) { notNull ( context , "camelContext" ) ; return context . getTypeConverter ( ) . convertTo ( type , value ) ; } public static < T > T mandatoryConvertTo ( CamelContext context , Class < T > type , Object value ) { T answer = convertTo ( context , type , value ) ; if ( answer == null ) { throw new IllegalArgumentException ( "Value " + value + " converted to " + type . getName ( ) + " cannot be null" ) ; } return answer ; } public static < T > T newInstance ( CamelContext context , Class < T > beanType ) { return context . getInjector ( ) . newInstance ( beanType ) ; } } 	1	['5', '1', '0', '13', '19', '10', '7', '6', '4', '2', '63', '0', '0', '0', '0.44', '0', '0', '11.6', '2', '1', '3']
package org . apache . camel . spi ; public interface Injector { < T > T newInstance ( Class < T > type ) ; } 	1	['1', '1', '0', '18', '1', '0', '18', '0', '1', '2', '1', '0', '0', '0', '1', '0', '0', '0', '1', '1', '1']
package org . apache . camel . component . bean ; import java . util . List ; import org . apache . camel . CamelExchangeException ; import org . apache . camel . Exchange ; public class AmbiguousMethodCallException extends CamelExchangeException { private final List < MethodInfo > methods ; public AmbiguousMethodCallException ( Exchange exchange , List < MethodInfo > methods ) { super ( "Ambiguous method invocations possible: " + methods , exchange ) ; this . methods = methods ; } public List < MethodInfo > getMethods ( ) { return methods ; } } 	1	['2', '5', '0', '3', '7', '0', '1', '2', '2', '0', '21', '1', '0', '0.947368421', '0.666666667', '0', '0', '9', '1', '0.5', '1']
package org . apache . camel . builder . xml ; import java . io . File ; import java . io . IOException ; import java . io . InputStream ; import java . net . URL ; import java . util . HashMap ; import java . util . Map ; import java . util . Set ; import javax . xml . parsers . ParserConfigurationException ; import javax . xml . transform . Result ; import javax . xml . transform . Source ; import javax . xml . transform . Transformer ; import javax . xml . transform . TransformerConfigurationException ; import javax . xml . transform . stream . StreamSource ; import org . apache . camel . Exchange ; import org . apache . camel . ExpectedBodyTypeException ; import org . apache . camel . Message ; import org . apache . camel . Processor ; import org . apache . camel . RuntimeTransformException ; import org . apache . camel . converter . jaxp . XmlConverter ; import static org . apache . camel . util . ObjectHelper . notNull ; public class XsltBuilder implements Processor { private Map < String , Object > parameters = new HashMap < String , Object > ( ) ; private XmlConverter converter = new XmlConverter ( ) ; private Transformer transformer ; private ResultHandlerFactory resultHandlerFactory = new StringResultHandlerFactory ( ) ; private boolean failOnNullBody = true ; public XsltBuilder ( ) { } public XsltBuilder ( Transformer transformer ) { this . transformer = transformer ; } @ Override public String toString ( ) { return "XSLT[" + transformer + "]" ; } public synchronized void process ( Exchange exchange ) throws Exception { Transformer transformer = getTransformer ( ) ; if ( transformer == null ) { throw new IllegalArgumentException ( "No transformer configured!" ) ; } configureTransformer ( transformer , exchange ) ; Source source = getSource ( exchange ) ; ResultHandler resultHandler = resultHandlerFactory . createResult ( ) ; Result result = resultHandler . getResult ( ) ; transformer . transform ( source , result ) ; resultHandler . setBody ( exchange . getIn ( ) ) ; } public static XsltBuilder xslt ( Transformer transformer ) { return new XsltBuilder ( transformer ) ; } public static XsltBuilder xslt ( Source xslt ) throws TransformerConfigurationException { notNull ( xslt , "xslt" ) ; XsltBuilder answer = new XsltBuilder ( ) ; answer . setTransformerSource ( xslt ) ; return answer ; } public static XsltBuilder xslt ( File xslt ) throws TransformerConfigurationException { notNull ( xslt , "xslt" ) ; return xslt ( new StreamSource ( xslt ) ) ; } public static XsltBuilder xslt ( URL xslt ) throws TransformerConfigurationException , IOException { notNull ( xslt , "xslt" ) ; return xslt ( xslt . openStream ( ) ) ; } public static XsltBuilder xslt ( InputStream xslt ) throws TransformerConfigurationException , IOException { notNull ( xslt , "xslt" ) ; return xslt ( new StreamSource ( xslt ) ) ; } public XsltBuilder outputBytes ( ) { setResultHandlerFactory ( new StreamResultHandlerFactory ( ) ) ; return this ; } public XsltBuilder outputString ( ) { setResultHandlerFactory ( new StringResultHandlerFactory ( ) ) ; return this ; } public XsltBuilder outputDOM ( ) { setResultHandlerFactory ( new DomResultHandlerFactory ( ) ) ; return this ; } public XsltBuilder parameter ( String name , Object value ) { parameters . put ( name , value ) ; return this ; } public Map < String , Object > getParameters ( ) { return parameters ; } public void setParameters ( Map < String , Object > parameters ) { this . parameters = parameters ; } public Transformer getTransformer ( ) { return transformer ; } public void setTransformer ( Transformer transformer ) { this . transformer = transformer ; } public boolean isFailOnNullBody ( ) { return failOnNullBody ; } public void setFailOnNullBody ( boolean failOnNullBody ) { this . failOnNullBody = failOnNullBody ; } public ResultHandlerFactory getResultHandlerFactory ( ) { return resultHandlerFactory ; } public void setResultHandlerFactory ( ResultHandlerFactory resultHandlerFactory ) { this . resultHandlerFactory = resultHandlerFactory ; } public void setTransformerSource ( Source source ) throws TransformerConfigurationException { setTransformer ( converter . getTransformerFactory ( ) . newTransformer ( source ) ) ; } protected Source getSource ( Exchange exchange ) { Message in = exchange . getIn ( ) ; Source source = in . getBody ( Source . class ) ; if ( source == null ) { if ( isFailOnNullBody ( ) ) { throw new ExpectedBodyTypeException ( exchange , Source . class ) ; } else { try { source = converter . toSource ( converter . createDocument ( ) ) ; } catch ( ParserConfigurationException e ) { throw new RuntimeTransformException ( e ) ; } } } return source ; } protected void configureTransformer ( Transformer transformer , Exchange exchange ) { transformer . clearParameters ( ) ; addParameters ( transformer , exchange . getProperties ( ) ) ; addParameters ( transformer , exchange . getIn ( ) . getHeaders ( ) ) ; addParameters ( transformer , getParameters ( ) ) ; transformer . setParameter ( "exchange" , exchange ) ; transformer . setParameter ( "in" , exchange . getIn ( ) ) ; transformer . setParameter ( "out" , exchange . getOut ( ) ) ; } protected void addParameters ( Transformer transformer , Map < String , Object > map ) { Set < Map . Entry < String , Object > > propertyEntries = map . entrySet ( ) ; for ( Map . Entry < String , Object > entry : propertyEntries ) { transformer . setParameter ( entry . getKey ( ) , entry . getValue ( ) ) ; } } } 	1	['25', '1', '0', '12', '64', '230', '0', '12', '22', '0.65', '318', '1', '2', '0', '0.13', '0', '0', '11.52', '3', '1.04', '3']
package org . apache . camel . impl . converter ; import java . lang . reflect . Method ; import org . apache . camel . RuntimeCamelException ; import org . apache . camel . TypeConverter ; import org . apache . camel . impl . CachingInjector ; import org . apache . camel . util . ObjectHelper ; public class InstanceMethodTypeConverter implements TypeConverter { private final CachingInjector injector ; private final Method method ; public InstanceMethodTypeConverter ( CachingInjector injector , Method method ) { this . injector = injector ; this . method = method ; } @ Override public String toString ( ) { return "InstanceMethodTypeConverter: " + method ; } public synchronized < T > T convertTo ( Class < T > type , Object value ) { Object instance = injector . newInstance ( ) ; if ( instance == null ) { throw new RuntimeCamelException ( "Could not instantiate aninstance of: " + type . getName ( ) ) ; } return ( T ) ObjectHelper . invokeMethod ( method , instance , value ) ; } } 	1	['3', '1', '0', '5', '12', '0', '1', '4', '3', '0.25', '54', '1', '1', '0', '0.466666667', '0', '0', '16.33333333', '2', '1', '1']
package org . apache . camel . model . language ; import javax . xml . bind . annotation . XmlRootElement ; @ XmlRootElement ( name = "simple" ) public class SimpleExpression extends ExpressionType { public SimpleExpression ( ) { } public SimpleExpression ( String expression ) { super ( expression ) ; } public String getLanguage ( ) { return "simple" ; } } 	1	['3', '2', '0', '1', '5', '3', '0', '1', '3', '2', '12', '0', '0', '0.923076923', '0.666666667', '1', '2', '3', '1', '0.3333', '1']
package org . apache . camel . processor ; import java . util . Collection ; import java . util . Iterator ; import org . apache . camel . Endpoint ; import org . apache . camel . Exchange ; import org . apache . camel . PollingConsumer ; import org . apache . camel . Processor ; import org . apache . camel . impl . LoggingExceptionHandler ; import org . apache . camel . impl . ServiceSupport ; import org . apache . camel . spi . ExceptionHandler ; import org . apache . camel . util . ServiceHelper ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class BatchProcessor extends ServiceSupport implements Runnable { public static final long DEFAULT_BATCH_TIMEOUT = 1000L ; public static final int DEFAULT_BATCH_SIZE = 100 ; private static final transient Log LOG = LogFactory . getLog ( Resequencer . class ) ; private Endpoint endpoint ; private Processor processor ; private Collection < Exchange > collection ; private long batchTimeout = DEFAULT_BATCH_TIMEOUT ; private int batchSize = DEFAULT_BATCH_SIZE ; private PollingConsumer consumer ; private ExceptionHandler exceptionHandler ; public BatchProcessor ( Endpoint endpoint , Processor processor , Collection < Exchange > collection ) { this . endpoint = endpoint ; this . processor = processor ; this . collection = collection ; } @ Override public String toString ( ) { return "BatchProcessor[to: " + processor + "]" ; } public void run ( ) { LOG . debug ( "Starting thread for " + this ) ; while ( isRunAllowed ( ) ) { try { processBatch ( ) ; } catch ( Exception e ) { getExceptionHandler ( ) . handleException ( e ) ; } } collection . clear ( ) ; } public ExceptionHandler getExceptionHandler ( ) { if ( exceptionHandler == null ) { exceptionHandler = new LoggingExceptionHandler ( getClass ( ) ) ; } return exceptionHandler ; } public void setExceptionHandler ( ExceptionHandler exceptionHandler ) { this . exceptionHandler = exceptionHandler ; } public int getBatchSize ( ) { return batchSize ; } public void setBatchSize ( int batchSize ) { this . batchSize = batchSize ; } public long getBatchTimeout ( ) { return batchTimeout ; } public void setBatchTimeout ( long batchTimeout ) { this . batchTimeout = batchTimeout ; } public Endpoint getEndpoint ( ) { return endpoint ; } public Processor getProcessor ( ) { return processor ; } protected synchronized void processBatch ( ) throws Exception { long start = System . currentTimeMillis ( ) ; long end = start + batchTimeout ; for ( int i = 0 ; i < batchSize ; i ++ ) { long timeout = end - System . currentTimeMillis ( ) ; Exchange exchange = consumer . receive ( timeout ) ; if ( exchange == null ) { break ; } collection . add ( exchange ) ; } if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Finsihed batch size: " + batchSize + " timeout: " + batchTimeout + " so sending set: " + collection ) ; } Iterator < Exchange > iter = collection . iterator ( ) ; while ( iter . hasNext ( ) ) { Exchange exchange = iter . next ( ) ; iter . remove ( ) ; processExchange ( exchange ) ; } } protected void processExchange ( Exchange exchange ) throws Exception { processor . process ( exchange ) ; } protected void doStart ( ) throws Exception { consumer = endpoint . createPollingConsumer ( ) ; ServiceHelper . startServices ( processor , consumer ) ; Thread thread = new Thread ( this , this + " Polling Thread" ) ; thread . start ( ) ; } protected void doStop ( ) throws Exception { ServiceHelper . stopServices ( consumer , processor ) ; collection . clear ( ) ; } protected Collection < Exchange > getCollection ( ) { return collection ; } } 	1	['17', '2', '2', '12', '45', '56', '2', '10', '11', '0.84375', '257', '0.8', '5', '0.464285714', '0.1796875', '1', '1', '13.52941176', '2', '1', '4']
package org . apache . camel . impl ; import org . apache . camel . CamelContext ; import org . apache . camel . NoSuchLanguageException ; import org . apache . camel . spi . Language ; import org . apache . camel . spi . LanguageResolver ; import org . apache . camel . util . FactoryFinder ; import org . apache . camel . util . NoFactoryAvailableException ; public class DefaultLanguageResolver implements LanguageResolver { protected static final FactoryFinder LANGUAGE_FACTORY = new FactoryFinder ( "META-INF/services/org/apache/camel/language/" ) ; protected static final FactoryFinder LANGUAGE_RESOLVER = new FactoryFinder ( "META-INF/services/org/apache/camel/language/resolver/" ) ; public Language resolveLanguage ( String name , CamelContext context ) { Class type = null ; try { type = LANGUAGE_FACTORY . findClass ( name ) ; } catch ( NoFactoryAvailableException e ) { } catch ( Throwable e ) { throw new IllegalArgumentException ( "Invalid URI, no Language registered for scheme : " + name , e ) ; } if ( type != null ) { if ( Language . class . isAssignableFrom ( type ) ) { return ( Language ) context . getInjector ( ) . newInstance ( type ) ; } else { throw new IllegalArgumentException ( "Type is not a Language implementation. Found: " + type . getName ( ) ) ; } } return noSpecificLanguageFound ( name , context ) ; } protected Language noSpecificLanguageFound ( String name , CamelContext context ) { Class type = null ; try { type = LANGUAGE_RESOLVER . findClass ( "default" ) ; } catch ( NoFactoryAvailableException e ) { } catch ( Throwable e ) { throw new IllegalArgumentException ( "Invalid URI, no Language registered for scheme : " + name , e ) ; } if ( type != null ) { if ( LanguageResolver . class . isAssignableFrom ( type ) ) { LanguageResolver resolver = ( LanguageResolver ) context . getInjector ( ) . newInstance ( type ) ; return resolver . resolveLanguage ( name , context ) ; } else { throw new IllegalArgumentException ( "Type is not a LanguageResolver implementation. Found: " + type . getName ( ) ) ; } } throw new NoSuchLanguageException ( name ) ; } } 	1	['4', '1', '0', '8', '18', '2', '1', '7', '2', '0.5', '131', '1', '2', '0', '0.777777778', '0', '0', '31.25', '3', '1.5', '1']
package org . apache . camel ; public interface Endpoint < E extends Exchange > { boolean isSingleton ( ) ; String getEndpointUri ( ) ; E createExchange ( ) ; E createExchange ( ExchangePattern pattern ) ; E createExchange ( Exchange exchange ) ; CamelContext getContext ( ) ; Producer < E > createProducer ( ) throws Exception ; Consumer < E > createConsumer ( Processor processor ) throws Exception ; PollingConsumer < E > createPollingConsumer ( ) throws Exception ; } 	1	['9', '1', '0', '127', '9', '36', '122', '7', '9', '2', '9', '0', '0', '0', '0.333333333', '0', '0', '0', '1', '1', '2']
package org . apache . camel . model . language ; import javax . xml . bind . annotation . XmlRootElement ; @ XmlRootElement ( name = "xquery" ) public class XQueryExpression extends ExpressionType { public XQueryExpression ( ) { } public XQueryExpression ( String expression ) { super ( expression ) ; } public String getLanguage ( ) { return "xquery" ; } } 	1	['3', '2', '0', '1', '5', '3', '0', '1', '3', '2', '12', '0', '0', '0.923076923', '0.666666667', '1', '2', '3', '1', '0.3333', '2']
package org . apache . camel . processor ; import java . util . List ; import java . util . concurrent . ArrayBlockingQueue ; import java . util . concurrent . BlockingQueue ; import java . util . concurrent . RejectedExecutionException ; import java . util . concurrent . RejectedExecutionHandler ; import java . util . concurrent . ThreadFactory ; import java . util . concurrent . ThreadPoolExecutor ; import java . util . concurrent . TimeUnit ; import java . util . concurrent . atomic . AtomicBoolean ; import org . apache . camel . AsyncCallback ; import org . apache . camel . AsyncProcessor ; import org . apache . camel . Exchange ; import org . apache . camel . Service ; import org . apache . camel . util . AsyncProcessorHelper ; public class ThreadProcessor implements AsyncProcessor , Service { private ThreadPoolExecutor executor ; private long stackSize ; private ThreadGroup threadGroup ; private int priority = Thread . NORM_PRIORITY ; private boolean daemon = true ; private String name = "Thread Processor" ; private BlockingQueue < Runnable > taskQueue ; private long keepAliveTime ; private int maxSize = 1 ; private int coreSize = 1 ; private final AtomicBoolean shutdown = new AtomicBoolean ( true ) ; ; class ProcessCall implements Runnable { private final Exchange exchange ; private final AsyncCallback callback ; public ProcessCall ( Exchange exchange , AsyncCallback callback ) { this . exchange = exchange ; this . callback = callback ; } public void run ( ) { if ( shutdown . get ( ) ) { exchange . setException ( new RejectedExecutionException ( ) ) ; callback . done ( false ) ; } else { callback . done ( false ) ; } } } public void process ( Exchange exchange ) throws Exception { AsyncProcessorHelper . process ( this , exchange ) ; } public boolean process ( final Exchange exchange , final AsyncCallback callback ) { if ( shutdown . get ( ) ) { throw new IllegalStateException ( "ThreadProcessor is not running." ) ; } ProcessCall call = new ProcessCall ( exchange , callback ) ; executor . execute ( call ) ; return false ; } public void start ( ) throws Exception { shutdown . set ( false ) ; getExecutor ( ) . setRejectedExecutionHandler ( new RejectedExecutionHandler ( ) { public void rejectedExecution ( Runnable runnable , ThreadPoolExecutor executor ) { ProcessCall call = ( ProcessCall ) runnable ; call . exchange . setException ( new RejectedExecutionException ( ) ) ; call . callback . done ( false ) ; } } ) ; } public void stop ( ) throws Exception { shutdown . set ( true ) ; executor . shutdown ( ) ; executor . awaitTermination ( 0 , TimeUnit . SECONDS ) ; } public long getStackSize ( ) { return stackSize ; } public void setStackSize ( long stackSize ) { this . stackSize = stackSize ; } public ThreadGroup getThreadGroup ( ) { return threadGroup ; } public void setThreadGroup ( ThreadGroup threadGroup ) { this . threadGroup = threadGroup ; } public int getPriority ( ) { return priority ; } public void setPriority ( int priority ) { this . priority = priority ; } public boolean isDaemon ( ) { return daemon ; } public void setDaemon ( boolean daemon ) { this . daemon = daemon ; } public String getName ( ) { return name ; } public void setName ( String name ) { this . name = name ; } public long getKeepAliveTime ( ) { return keepAliveTime ; } public void setKeepAliveTime ( long keepAliveTime ) { this . keepAliveTime = keepAliveTime ; } public int getMaxSize ( ) { return maxSize ; } public void setMaxSize ( int maxSize ) { this . maxSize = maxSize ; } public int getCoreSize ( ) { return coreSize ; } public void setCoreSize ( int coreSize ) { this . coreSize = coreSize ; } public BlockingQueue < Runnable > getTaskQueue ( ) { if ( taskQueue == null ) { taskQueue = new ArrayBlockingQueue < Runnable > ( 1000 ) ; } return taskQueue ; } public void setTaskQueue ( BlockingQueue < Runnable > taskQueue ) { this . taskQueue = taskQueue ; } public ThreadPoolExecutor getExecutor ( ) { if ( executor == null ) { executor = new ThreadPoolExecutor ( getCoreSize ( ) , getMaxSize ( ) , getKeepAliveTime ( ) , TimeUnit . MILLISECONDS , getTaskQueue ( ) , new ThreadFactory ( ) { public Thread newThread ( Runnable runnable ) { Thread thread ; if ( getStackSize ( ) > 0 ) { thread = new Thread ( getThreadGroup ( ) , runnable , getName ( ) , getStackSize ( ) ) ; } else { thread = new Thread ( getThreadGroup ( ) , runnable , getName ( ) ) ; } thread . setDaemon ( isDaemon ( ) ) ; thread . setPriority ( getPriority ( ) ) ; return thread ; } } ) ; } return executor ; } public void setExecutor ( ThreadPoolExecutor executor ) { this . executor = executor ; } } 	1	['26', '1', '0', '9', '41', '257', '4', '8', '25', '0.905454545', '216', '1', '0', '0', '0.136363636', '0', '0', '6.884615385', '2', '1.0769', '1']
package org . apache . camel . component . bean ; import org . apache . camel . CamelContext ; import org . apache . camel . Exchange ; import org . apache . camel . ExchangePattern ; import org . apache . camel . impl . DefaultExchange ; public class BeanExchange extends DefaultExchange { public BeanExchange ( CamelContext context , ExchangePattern pattern ) { super ( context , pattern ) ; } public BeanInvocation getInvocation ( ) { return getIn ( ) . getBody ( BeanInvocation . class ) ; } public void setInvocation ( BeanInvocation invocation ) { getIn ( ) . setBody ( invocation ) ; } @ Override public Exchange newInstance ( ) { return new BeanExchange ( getContext ( ) , getPattern ( ) ) ; } } 	1	['4', '2', '0', '9', '10', '6', '3', '6', '4', '2', '28', '0', '0', '0.923076923', '0.4375', '1', '1', '6', '1', '0.75', '1']
package org . apache . camel . model ; import org . apache . camel . Processor ; import org . apache . camel . Route ; import org . apache . camel . Predicate ; import org . apache . camel . builder . PredicateBuilder ; import org . apache . camel . impl . RouteContext ; import org . apache . camel . processor . Interceptor ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlRootElement ; import java . util . Collection ; @ XmlRootElement ( name = "intercept" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class InterceptType extends OutputType < ProcessorType > { @ Override public String toString ( ) { return "Intercept[" + getOutputs ( ) + "]" ; } public void addRoutes ( RouteContext routeContext , Collection < Route > routes ) throws Exception { Interceptor interceptor = new Interceptor ( ) ; routeContext . intercept ( interceptor ) ; final Processor interceptRoute = routeContext . createProcessor ( this ) ; interceptor . setInterceptorLogic ( interceptRoute ) ; } public OtherwiseType when ( Predicate predicate ) { return choice ( ) . when ( PredicateBuilder . not ( predicate ) ) . proceed ( ) . otherwise ( ) ; } } 	1	['4', '3', '0', '11', '19', '6', '3', '9', '4', '2', '43', '0', '0', '0.97029703', '0.4375', '0', '0', '9.75', '1', '0.75', '7']
package org . apache . camel . model ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlRootElement ; import org . apache . camel . Expression ; import org . apache . camel . Processor ; import org . apache . camel . impl . RouteContext ; import org . apache . camel . model . language . ExpressionType ; import org . apache . camel . processor . RecipientList ; @ XmlRootElement ( name = "recipientList" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class RecipientListType extends ExpressionNode { public RecipientListType ( ) { } public RecipientListType ( ExpressionType expression ) { super ( expression ) ; } public RecipientListType ( Expression expression ) { super ( expression ) ; } @ Override public String toString ( ) { return "RecipientList[ " + getExpression ( ) + "]" ; } @ Override public Processor createProcessor ( RouteContext routeContext ) throws Exception { return new RecipientList ( getExpression ( ) . createExpression ( routeContext ) ) ; } } 	1	['5', '3', '0', '8', '15', '10', '2', '6', '5', '2', '36', '0', '0', '0.980769231', '0.4', '1', '2', '6.2', '1', '0.4', '2']
package org . apache . camel . impl ; import org . apache . camel . Exchange ; import org . apache . camel . spi . ExchangeConverter ; public class DefaultExchangeConverter implements ExchangeConverter { public < T > T convertTo ( Class < T > type , Exchange exchange ) { return null ; } } 	1	['2', '1', '0', '3', '3', '1', '1', '2', '2', '2', '7', '0', '0', '0', '0.666666667', '0', '0', '2.5', '1', '0.5', '1']
package org . apache . camel . converter ; import org . apache . camel . Converter ; import java . io . BufferedInputStream ; import java . io . File ; import java . io . FileInputStream ; import java . io . IOException ; import java . io . InputStream ; import java . nio . ByteBuffer ; @ Converter public class NIOConverter { private NIOConverter ( ) { } @ Converter public static byte [ ] toByteArray ( ByteBuffer buffer ) { return buffer . array ( ) ; } @ Converter public static String toString ( ByteBuffer buffer ) { return IOConverter . toString ( buffer . array ( ) ) ; } @ Converter public static ByteBuffer toByteBuffer ( byte [ ] data ) { return ByteBuffer . wrap ( data ) ; } @ Converter public static ByteBuffer toByteBuffer ( File file ) throws IOException { byte [ ] buf = new byte [ ( int ) file . length ( ) ] ; InputStream in = new BufferedInputStream ( new FileInputStream ( file ) ) ; in . read ( buf ) ; return ByteBuffer . wrap ( buf ) ; } @ Converter public static ByteBuffer toByteBuffer ( String value ) { ByteBuffer buf = ByteBuffer . allocate ( value . length ( ) ) ; byte [ ] bytes = value . getBytes ( ) ; buf . put ( bytes ) ; return buf ; } @ Converter public static ByteBuffer toByteBuffer ( Short value ) { ByteBuffer buf = ByteBuffer . allocate ( 2 ) ; buf . putShort ( value ) ; return buf ; } @ Converter public static ByteBuffer toByteBuffer ( Integer value ) { ByteBuffer buf = ByteBuffer . allocate ( 4 ) ; buf . putInt ( value ) ; return buf ; } @ Converter public static ByteBuffer toByteBuffer ( Long value ) { ByteBuffer buf = ByteBuffer . allocate ( 8 ) ; buf . putLong ( value ) ; return buf ; } @ Converter public static ByteBuffer toByteBuffer ( Float value ) { ByteBuffer buf = ByteBuffer . allocate ( 4 ) ; buf . putFloat ( value ) ; return buf ; } @ Converter public static ByteBuffer toByteBuffer ( Double value ) { ByteBuffer buf = ByteBuffer . allocate ( 8 ) ; buf . putDouble ( value ) ; return buf ; } @ Converter public static InputStream toInputStream ( ByteBuffer bufferbuffer ) { return IOConverter . toInputStream ( toByteArray ( bufferbuffer ) ) ; } } 	1	['12', '1', '0', '3', '35', '66', '2', '1', '11', '2', '112', '0', '0', '0', '0.1', '0', '0', '8.333333333', '1', '0.9167', '1']
package org . apache . camel . util ; import java . io . UnsupportedEncodingException ; import java . net . URI ; import java . net . URISyntaxException ; import java . net . URLDecoder ; import java . net . URLEncoder ; import java . util . ArrayList ; import java . util . Collections ; import java . util . HashMap ; import java . util . Iterator ; import java . util . Map ; public class URISupport { public static class CompositeData { public String host ; String scheme ; String path ; URI components [ ] ; Map parameters ; String fragment ; public URI [ ] getComponents ( ) { return components ; } public String getFragment ( ) { return fragment ; } public Map getParameters ( ) { return parameters ; } public String getScheme ( ) { return scheme ; } public String getPath ( ) { return path ; } public String getHost ( ) { return host ; } public URI toURI ( ) throws URISyntaxException { StringBuffer sb = new StringBuffer ( ) ; if ( scheme != null ) { sb . append ( scheme ) ; sb . append ( ':' ) ; } if ( host != null && host . length ( ) != 0 ) { sb . append ( host ) ; } else { sb . append ( '(' ) ; for ( int i = 0 ; i < components . length ; i ++ ) { if ( i != 0 ) { sb . append ( ',' ) ; } sb . append ( components [ i ] . toString ( ) ) ; } sb . append ( ')' ) ; } if ( path != null ) { sb . append ( '/' ) ; sb . append ( path ) ; } if ( ! parameters . isEmpty ( ) ) { sb . append ( "?" ) ; sb . append ( createQueryString ( parameters ) ) ; } if ( fragment != null ) { sb . append ( "#" ) ; sb . append ( fragment ) ; } return new URI ( sb . toString ( ) ) ; } } public static Map parseQuery ( String uri ) throws URISyntaxException { try { Map rc = new HashMap ( ) ; if ( uri != null ) { String [ ] parameters = uri . split ( "&" ) ; for ( int i = 0 ; i < parameters . length ; i ++ ) { int p = parameters [ i ] . indexOf ( "=" ) ; if ( p >= 0 ) { String name = URLDecoder . decode ( parameters [ i ] . substring ( 0 , p ) , "UTF-8" ) ; String value = URLDecoder . decode ( parameters [ i ] . substring ( p + 1 ) , "UTF-8" ) ; rc . put ( name , value ) ; } else { rc . put ( parameters [ i ] , null ) ; } } } return rc ; } catch ( UnsupportedEncodingException e ) { throw ( URISyntaxException ) new URISyntaxException ( e . toString ( ) , "Invalid encoding" ) . initCause ( e ) ; } } public static Map parseParamters ( URI uri ) throws URISyntaxException { String query = uri . getQuery ( ) ; if ( query == null ) { String schemeSpecificPart = uri . getSchemeSpecificPart ( ) ; int idx = schemeSpecificPart . lastIndexOf ( '?' ) ; if ( idx < 0 ) { return Collections . EMPTY_MAP ; } else { query = schemeSpecificPart . substring ( idx + 1 ) ; } } else { query = stripPrefix ( query , "?" ) ; } return parseQuery ( query ) ; } public static URI removeQuery ( URI uri ) throws URISyntaxException { return createURIWithQuery ( uri , null ) ; } public static URI createURIWithQuery ( URI uri , String query ) throws URISyntaxException { return new URI ( uri . getScheme ( ) , uri . getUserInfo ( ) , uri . getHost ( ) , uri . getPort ( ) , uri . getPath ( ) , query , uri . getFragment ( ) ) ; } public static CompositeData parseComposite ( URI uri ) throws URISyntaxException { CompositeData rc = new CompositeData ( ) ; rc . scheme = uri . getScheme ( ) ; String ssp = stripPrefix ( uri . getSchemeSpecificPart ( ) . trim ( ) , "//" ) . trim ( ) ; parseComposite ( uri , rc , ssp ) ; rc . fragment = uri . getFragment ( ) ; return rc ; } private static void parseComposite ( URI uri , CompositeData rc , String ssp ) throws URISyntaxException { String componentString ; String params ; if ( ! checkParenthesis ( ssp ) ) { throw new URISyntaxException ( uri . toString ( ) , "Not a matching number of '(' and ')' parenthesis" ) ; } int p ; int intialParen = ssp . indexOf ( "(" ) ; if ( intialParen == 0 ) { rc . host = ssp . substring ( 0 , intialParen ) ; p = rc . host . indexOf ( "/" ) ; if ( p >= 0 ) { rc . path = rc . host . substring ( p ) ; rc . host = rc . host . substring ( 0 , p ) ; } p = ssp . lastIndexOf ( ")" ) ; componentString = ssp . substring ( intialParen + 1 , p ) ; params = ssp . substring ( p + 1 ) . trim ( ) ; } else { componentString = ssp ; params = "" ; } String components [ ] = splitComponents ( componentString ) ; rc . components = new URI [ components . length ] ; for ( int i = 0 ; i < components . length ; i ++ ) { rc . components [ i ] = new URI ( components [ i ] . trim ( ) ) ; } p = params . indexOf ( "?" ) ; if ( p >= 0 ) { if ( p > 0 ) { rc . path = stripPrefix ( params . substring ( 0 , p ) , "/" ) ; } rc . parameters = parseQuery ( params . substring ( p + 1 ) ) ; } else { if ( params . length ( ) > 0 ) { rc . path = stripPrefix ( params , "/" ) ; } rc . parameters = Collections . EMPTY_MAP ; } } private static String [ ] splitComponents ( String str ) { ArrayList l = new ArrayList ( ) ; int last = 0 ; int depth = 0 ; char chars [ ] = str . toCharArray ( ) ; for ( int i = 0 ; i < chars . length ; i ++ ) { switch ( chars [ i ] ) { case '(' : depth ++ ; break ; case ')' : depth -- ; break ; case ',' : if ( depth == 0 ) { String s = str . substring ( last , i ) ; l . add ( s ) ; last = i + 1 ; } break ; default : } } String s = str . substring ( last ) ; if ( s . length ( ) != 0 ) { l . add ( s ) ; } String rc [ ] = new String [ l . size ( ) ] ; l . toArray ( rc ) ; return rc ; } public static String stripPrefix ( String value , String prefix ) { if ( value . startsWith ( prefix ) ) { return value . substring ( prefix . length ( ) ) ; } return value ; } public static URI stripScheme ( URI uri ) throws URISyntaxException { return new URI ( stripPrefix ( uri . getSchemeSpecificPart ( ) . trim ( ) , "//" ) ) ; } public static String createQueryString ( Map options ) throws URISyntaxException { try { if ( options . size ( ) > 0 ) { StringBuffer rc = new StringBuffer ( ) ; boolean first = true ; for ( Iterator iter = options . keySet ( ) . iterator ( ) ; iter . hasNext ( ) ; ) { if ( first ) { first = false ; } else { rc . append ( "&" ) ; } String key = ( String ) iter . next ( ) ; String value = ( String ) options . get ( key ) ; rc . append ( URLEncoder . encode ( key , "UTF-8" ) ) ; rc . append ( "=" ) ; rc . append ( URLEncoder . encode ( value , "UTF-8" ) ) ; } return rc . toString ( ) ; } else { return "" ; } } catch ( UnsupportedEncodingException e ) { throw ( URISyntaxException ) new URISyntaxException ( e . toString ( ) , "Invalid encoding" ) . initCause ( e ) ; } } public static URI createRemainingURI ( URI originalURI , Map params ) throws URISyntaxException { String s = createQueryString ( params ) ; if ( s . length ( ) == 0 ) { s = null ; } return createURIWithQuery ( originalURI , s ) ; } public static URI changeScheme ( URI bindAddr , String scheme ) throws URISyntaxException { return new URI ( scheme , bindAddr . getUserInfo ( ) , bindAddr . getHost ( ) , bindAddr . getPort ( ) , bindAddr . getPath ( ) , bindAddr . getQuery ( ) , bindAddr . getFragment ( ) ) ; } public static boolean checkParenthesis ( String str ) { boolean result = true ; if ( str != null ) { int open = 0 ; int closed = 0 ; int i = 0 ; while ( ( i = str . indexOf ( '(' , i ) ) >= 0 ) { i ++ ; open ++ ; } i = 0 ; while ( ( i = str . indexOf ( ')' , i ) ) >= 0 ) { i ++ ; closed ++ ; } result = open == closed ; } return result ; } public int indexOfParenthesisMatch ( String str ) { int result = - 1 ; return result ; } } 	1	['15', '1', '0', '3', '59', '105', '3', '1', '13', '2', '519', '0', '0', '0', '0.28', '0', '0', '33.6', '5', '1.5333', '1']
package org . apache . camel ; public class CamelException extends Exception { public CamelException ( ) { } public CamelException ( String message ) { super ( message ) ; } public CamelException ( String message , Throwable cause ) { super ( message , cause ) ; } public CamelException ( Throwable cause ) { super ( cause ) ; } } 	1	['4', '3', '3', '5', '8', '6', '5', '0', '4', '2', '20', '0', '0', '1', '0.666666667', '0', '0', '4', '0', '0', '1']
package org . apache . camel . impl ; import java . util . ArrayList ; import java . util . List ; import java . util . concurrent . CountDownLatch ; import org . apache . camel . AsyncCallback ; import org . apache . camel . Exchange ; import org . apache . camel . spi . Synchronization ; import org . apache . camel . spi . UnitOfWork ; public class DefaultUnitOfWork implements UnitOfWork { private List < Synchronization > synchronizations ; private List < AsyncCallback > asyncCallbacks ; private CountDownLatch latch ; public DefaultUnitOfWork ( ) { } public synchronized void addSynchronization ( Synchronization synchronization ) { if ( synchronizations == null ) { synchronizations = new ArrayList < Synchronization > ( ) ; } synchronizations . add ( synchronization ) ; } public synchronized void removeSynchronization ( Synchronization synchronization ) { if ( synchronizations != null ) { synchronizations . remove ( synchronization ) ; } } public void reset ( ) { } public void done ( Exchange exchange ) { if ( synchronizations != null ) { boolean failed = exchange . isFailed ( ) ; for ( Synchronization synchronization : synchronizations ) { if ( failed ) { synchronization . onFailure ( exchange ) ; } else { synchronization . onComplete ( exchange ) ; } } } } public boolean isSynchronous ( ) { return asyncCallbacks == null || asyncCallbacks . isEmpty ( ) ; } } 	1	['6', '1', '0', '4', '17', '9', '1', '3', '6', '0.933333333', '75', '1', '0', '0', '0.5', '0', '0', '11', '4', '2', '1']
package org . apache . camel . builder ; import org . apache . camel . Expression ; import org . apache . camel . Processor ; import org . apache . camel . processor . DeadLetterChannel ; import org . apache . camel . processor . Logger ; import org . apache . camel . processor . LoggingLevel ; import org . apache . camel . processor . RecipientList ; import org . apache . camel . processor . RedeliveryPolicy ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class DeadLetterChannelBuilder extends ErrorHandlerBuilderSupport { private RedeliveryPolicy redeliveryPolicy = new RedeliveryPolicy ( ) ; private ProcessorFactory deadLetterFactory ; private Processor defaultDeadLetterEndpoint ; private Expression defaultDeadLetterEndpointExpression ; private String defaultDeadLetterEndpointUri = "log:org.apache.camel.DeadLetterChannel?level=error" ; private Logger logger = DeadLetterChannel . createDefaultLogger ( ) ; public DeadLetterChannelBuilder ( ) { } public DeadLetterChannelBuilder ( Processor processor ) { this ( new ConstantProcessorBuilder ( processor ) ) ; } public DeadLetterChannelBuilder ( ProcessorFactory deadLetterFactory ) { this . deadLetterFactory = deadLetterFactory ; } public ErrorHandlerBuilder copy ( ) { DeadLetterChannelBuilder answer = new DeadLetterChannelBuilder ( deadLetterFactory ) ; answer . setRedeliveryPolicy ( getRedeliveryPolicy ( ) . copy ( ) ) ; return answer ; } public Processor createErrorHandler ( Processor processor ) throws Exception { Processor deadLetter = getDeadLetterFactory ( ) . createProcessor ( ) ; DeadLetterChannel answer = new DeadLetterChannel ( processor , deadLetter , getRedeliveryPolicy ( ) , getLogger ( ) ) ; configure ( answer ) ; return answer ; } public DeadLetterChannelBuilder backOffMultiplier ( double backOffMultiplier ) { getRedeliveryPolicy ( ) . backOffMultiplier ( backOffMultiplier ) ; return this ; } public DeadLetterChannelBuilder collisionAvoidancePercent ( short collisionAvoidancePercent ) { getRedeliveryPolicy ( ) . collisionAvoidancePercent ( collisionAvoidancePercent ) ; return this ; } public DeadLetterChannelBuilder initialRedeliveryDelay ( long initialRedeliveryDelay ) { getRedeliveryPolicy ( ) . initialRedeliveryDelay ( initialRedeliveryDelay ) ; return this ; } public DeadLetterChannelBuilder maximumRedeliveries ( int maximumRedeliveries ) { getRedeliveryPolicy ( ) . maximumRedeliveries ( maximumRedeliveries ) ; return this ; } public DeadLetterChannelBuilder useCollisionAvoidance ( ) { getRedeliveryPolicy ( ) . useCollisionAvoidance ( ) ; return this ; } public DeadLetterChannelBuilder useExponentialBackOff ( ) { getRedeliveryPolicy ( ) . useExponentialBackOff ( ) ; return this ; } public DeadLetterChannelBuilder logger ( Logger logger ) { setLogger ( logger ) ; return this ; } public DeadLetterChannelBuilder loggingLevel ( LoggingLevel level ) { getLogger ( ) . setLevel ( level ) ; return this ; } public DeadLetterChannelBuilder log ( Log log ) { getLogger ( ) . setLog ( log ) ; return this ; } public DeadLetterChannelBuilder log ( String log ) { return log ( LogFactory . getLog ( log ) ) ; } public DeadLetterChannelBuilder log ( Class log ) { return log ( LogFactory . getLog ( log ) ) ; } public RedeliveryPolicy getRedeliveryPolicy ( ) { return redeliveryPolicy ; } public void setRedeliveryPolicy ( RedeliveryPolicy redeliveryPolicy ) { this . redeliveryPolicy = redeliveryPolicy ; } public ProcessorFactory getDeadLetterFactory ( ) { if ( deadLetterFactory == null ) { deadLetterFactory = new ProcessorFactory ( ) { public Processor createProcessor ( ) { return getDefaultDeadLetterEndpoint ( ) ; } } ; } return deadLetterFactory ; } public void setDeadLetterFactory ( ProcessorFactory deadLetterFactory ) { this . deadLetterFactory = deadLetterFactory ; } public Processor getDefaultDeadLetterEndpoint ( ) { if ( defaultDeadLetterEndpoint == null ) { defaultDeadLetterEndpoint = new RecipientList ( getDefaultDeadLetterEndpointExpression ( ) ) ; } return defaultDeadLetterEndpoint ; } public void setDefaultDeadLetterEndpoint ( Processor defaultDeadLetterEndpoint ) { this . defaultDeadLetterEndpoint = defaultDeadLetterEndpoint ; } public Expression getDefaultDeadLetterEndpointExpression ( ) { if ( defaultDeadLetterEndpointExpression == null ) { defaultDeadLetterEndpointExpression = ExpressionBuilder . constantExpression ( getDefaultDeadLetterEndpointUri ( ) ) ; } return defaultDeadLetterEndpointExpression ; } public void setDefaultDeadLetterEndpointExpression ( Expression defaultDeadLetterEndpointExpression ) { this . defaultDeadLetterEndpointExpression = defaultDeadLetterEndpointExpression ; } public String getDefaultDeadLetterEndpointUri ( ) { return defaultDeadLetterEndpointUri ; } public void setDefaultDeadLetterEndpointUri ( String defaultDeadLetterEndpointUri ) { this . defaultDeadLetterEndpointUri = defaultDeadLetterEndpointUri ; } public Logger getLogger ( ) { return logger ; } public void setLogger ( Logger logger ) { this . logger = logger ; } } 	1	['28', '2', '0', '18', '49', '330', '3', '16', '28', '0.771604938', '241', '1', '5', '0.074074074', '0.117346939', '0', '0', '7.392857143', '2', '1', '1']
package org . apache . camel . spi ; import org . apache . camel . TypeConverter ; public interface TypeConverterAware { void setTypeConverter ( TypeConverter parentTypeConverter ) ; } 	1	['1', '1', '0', '3', '1', '0', '2', '1', '1', '2', '1', '0', '0', '0', '1', '0', '0', '0', '1', '1', '1']
package org . apache . camel . component . file ; import org . apache . camel . Exchange ; import org . apache . camel . Message ; import org . apache . camel . Producer ; import org . apache . camel . impl . DefaultProducer ; import org . apache . camel . util . ExchangeHelper ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import java . io . File ; import java . io . FileOutputStream ; import java . io . IOException ; import java . io . InputStream ; import java . io . RandomAccessFile ; import java . nio . ByteBuffer ; import java . nio . channels . FileChannel ; public class FileProducer extends DefaultProducer { private static final transient Log LOG = LogFactory . getLog ( FileProducer . class ) ; private final FileEndpoint endpoint ; public FileProducer ( FileEndpoint endpoint ) { super ( endpoint ) ; this . endpoint = endpoint ; } public FileEndpoint getEndpoint ( ) { return ( FileEndpoint ) super . getEndpoint ( ) ; } public void process ( Exchange exchange ) throws Exception { FileExchange fileExchange = endpoint . createExchange ( exchange ) ; process ( fileExchange ) ; ExchangeHelper . copyResults ( exchange , fileExchange ) ; } public void process ( FileExchange exchange ) throws Exception { if ( ExchangeHelper . isOutCapable ( exchange ) ) { Message out = exchange . getOut ( true ) ; endpoint . configureMessage ( endpoint . getFile ( ) , out ) ; return ; } InputStream in = ExchangeHelper . getMandatoryInBody ( exchange , InputStream . class ) ; File file = createFileName ( exchange . getIn ( ) ) ; buildDirectory ( file ) ; if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "About to write to: " + file + " from exchange: " + exchange ) ; } FileChannel fc = null ; try { if ( getEndpoint ( ) . isAppend ( ) ) { fc = new RandomAccessFile ( file , "rw" ) . getChannel ( ) ; fc . position ( fc . size ( ) ) ; } else { fc = new FileOutputStream ( file ) . getChannel ( ) ; } int size = getEndpoint ( ) . getBufferSize ( ) ; byte [ ] buffer = new byte [ size ] ; ByteBuffer byteBuffer = ByteBuffer . wrap ( buffer ) ; while ( true ) { int count = in . read ( buffer ) ; if ( count <= 0 ) { break ; } else if ( count < size ) { byteBuffer = ByteBuffer . wrap ( buffer , 0 , count ) ; fc . write ( byteBuffer ) ; break ; } else { fc . write ( byteBuffer ) ; byteBuffer . clear ( ) ; } } } finally { if ( in != null ) { try { in . close ( ) ; } catch ( IOException e ) { LOG . warn ( "Failed to close input: " + e , e ) ; } } if ( fc != null ) { try { fc . close ( ) ; } catch ( IOException e ) { LOG . warn ( "Failed to close output: " + e , e ) ; } } } } protected File createFileName ( Message message ) { File answer ; File endpointFile = endpoint . getFile ( ) ; String name = null ; if ( ! endpoint . isIgnoreFileNameHeader ( ) ) { name = message . getHeader ( FileComponent . HEADER_FILE_NAME , String . class ) ; } if ( endpointFile . isDirectory ( ) ) { if ( name != null ) { answer = new File ( endpointFile , name ) ; if ( answer . isDirectory ( ) ) { answer = new File ( answer , message . getMessageId ( ) ) ; } } else { answer = new File ( endpointFile , message . getMessageId ( ) ) ; } } else { answer = endpointFile ; } return answer ; } private void buildDirectory ( File file ) { String dirName = file . getAbsolutePath ( ) ; int index = dirName . lastIndexOf ( File . separatorChar ) ; if ( index > 0 ) { dirName = dirName . substring ( 0 , index ) ; File dir = new File ( dirName ) ; dir . mkdirs ( ) ; } } } 	1	['8', '3', '0', '9', '50', '14', '1', '9', '5', '0.642857143', '295', '1', '2', '0.76', '0.285714286', '0', '0', '35.625', '5', '1.375', '4']
package org . apache . camel . component . bean ; import java . util . Map ; import java . util . concurrent . ConcurrentHashMap ; import org . apache . camel . Exchange ; import org . apache . camel . Expression ; import org . apache . camel . Message ; import org . apache . camel . builder . ExpressionBuilder ; public class DefaultParameterMappingStrategy implements ParameterMappingStrategy { private Map < Class , Expression > parameterTypeToExpressionMap = new ConcurrentHashMap < Class , Expression > ( ) ; public DefaultParameterMappingStrategy ( ) { } public synchronized Expression getDefaultParameterTypeExpression ( Class parameterType ) { return parameterTypeToExpressionMap . get ( parameterType ) ; } public synchronized void addParameterMapping ( Class parameterType , Expression expression ) { parameterTypeToExpressionMap . put ( parameterType , expression ) ; } public void loadDefaultRegistry ( ) { addParameterMapping ( Exchange . class , ExpressionBuilder . exchangeExpression ( ) ) ; addParameterMapping ( Message . class , ExpressionBuilder . inMessageExpression ( ) ) ; } } 	1	['4', '1', '0', '4', '10', '0', '1', '3', '4', '0', '35', '1', '0', '0', '0.583333333', '0', '0', '7.5', '1', '0.75', '1']
package org . apache . camel . model ; import java . util . ArrayList ; import java . util . List ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlElementRef ; import org . apache . camel . Expression ; import org . apache . camel . Predicate ; import org . apache . camel . Processor ; import org . apache . camel . impl . RouteContext ; import org . apache . camel . model . language . ExpressionType ; import org . apache . camel . processor . FilterProcessor ; @ XmlAccessorType ( XmlAccessType . FIELD ) public class ExpressionNode extends ProcessorType < ProcessorType > { @ XmlElementRef private List < InterceptorType > interceptors = new ArrayList < InterceptorType > ( ) ; @ XmlElementRef private ExpressionType expression ; @ XmlElementRef private List < ProcessorType < ? > > outputs = new ArrayList < ProcessorType < ? > > ( ) ; public ExpressionNode ( ) { } public ExpressionNode ( ExpressionType expression ) { this . expression = expression ; } public ExpressionNode ( Expression expression ) { setExpression ( new ExpressionType ( expression ) ) ; } public ExpressionNode ( Predicate predicate ) { setExpression ( new ExpressionType ( predicate ) ) ; } public List < InterceptorType > getInterceptors ( ) { return interceptors ; } public void setInterceptors ( List < InterceptorType > interceptors ) { this . interceptors = interceptors ; } public ExpressionType getExpression ( ) { return expression ; } public void setExpression ( ExpressionType expression ) { this . expression = expression ; } public List < ProcessorType < ? > > getOutputs ( ) { return outputs ; } public void setOutputs ( List < ProcessorType < ? > > outputs ) { this . outputs = outputs ; } @ Override public String getLabel ( ) { if ( getExpression ( ) == null ) { return "" ; } return getExpression ( ) . getLabel ( ) ; } protected FilterProcessor createFilterProcessor ( RouteContext routeContext ) throws Exception { Processor childProcessor = routeContext . createProcessor ( this ) ; return new FilterProcessor ( getExpression ( ) . createPredicate ( routeContext ) , childProcessor ) ; } @ Override protected void configureChild ( ProcessorType output ) { super . configureChild ( output ) ; if ( isInheritErrorHandler ( ) ) { output . setErrorHandlerBuilder ( getErrorHandlerBuilder ( ) ) ; } } } 	1	['13', '2', '7', '15', '25', '24', '7', '8', '11', '0.555555556', '137', '1', '1', '0.911764706', '0.230769231', '1', '5', '9.307692308', '2', '0.8462', '3']
package org . apache . camel . model ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlAttribute ; import javax . xml . bind . annotation . XmlRootElement ; import javax . xml . bind . annotation . XmlTransient ; import org . apache . camel . Expression ; import org . apache . camel . Processor ; import org . apache . camel . impl . RouteContext ; import org . apache . camel . processor . idempotent . IdempotentConsumer ; import org . apache . camel . processor . idempotent . MessageIdRepository ; @ XmlRootElement ( name = "idempotentConsumer" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class IdempotentConsumerType extends ExpressionNode { @ XmlAttribute private String messageIdRepositoryRef ; @ XmlTransient private MessageIdRepository messageIdRepository ; public IdempotentConsumerType ( ) { } public IdempotentConsumerType ( Expression messageIdExpression , MessageIdRepository messageIdRepository ) { super ( messageIdExpression ) ; this . messageIdRepository = messageIdRepository ; } @ Override public String toString ( ) { return "IdempotentConsumer[ " + getExpression ( ) + " -> " + getOutputs ( ) + "]" ; } public String getMessageIdRepositoryRef ( ) { return messageIdRepositoryRef ; } public void setMessageIdRepositoryRef ( String messageIdRepositoryRef ) { this . messageIdRepositoryRef = messageIdRepositoryRef ; } public MessageIdRepository getMessageIdRepository ( ) { return messageIdRepository ; } public void setMessageIdRepository ( MessageIdRepository messageIdRepository ) { this . messageIdRepository = messageIdRepository ; } @ Override public Processor createProcessor ( RouteContext routeContext ) throws Exception { Processor childProcessor = routeContext . createProcessor ( this ) ; MessageIdRepository messageIdRepository = resolveMessageIdRepository ( routeContext ) ; return new IdempotentConsumer ( getExpression ( ) . createExpression ( routeContext ) , messageIdRepository , childProcessor ) ; } public MessageIdRepository resolveMessageIdRepository ( RouteContext routeContext ) { if ( messageIdRepository == null ) { messageIdRepository = routeContext . lookup ( messageIdRepositoryRef , MessageIdRepository . class ) ; } return messageIdRepository ; } } 	1	['9', '3', '0', '8', '21', '18', '1', '8', '9', '0.5625', '84', '1', '1', '0.935779817', '0.333333333', '1', '2', '8.111111111', '2', '0.8889', '2']
package org . apache . camel . processor ; import org . apache . camel . Endpoint ; import org . apache . camel . Expression ; import org . apache . camel . Processor ; import org . apache . camel . processor . aggregate . AggregationCollection ; import org . apache . camel . processor . aggregate . AggregationStrategy ; public class Aggregator extends BatchProcessor { public Aggregator ( Endpoint endpoint , Processor processor , Expression correlationExpression , AggregationStrategy aggregationStrategy ) { this ( endpoint , processor , new AggregationCollection ( correlationExpression , aggregationStrategy ) ) ; } public Aggregator ( Endpoint endpoint , Processor processor , AggregationCollection collection ) { super ( endpoint , processor , collection ) ; } @ Override public String toString ( ) { return "Aggregator[to: " + getProcessor ( ) + "]" ; } } 	1	['3', '3', '0', '7', '10', '3', '1', '6', '3', '2', '31', '0', '0', '0.965517241', '0.555555556', '0', '0', '9.333333333', '1', '0.3333', '2']
package org . apache . camel . management ; import java . net . InetAddress ; import java . net . UnknownHostException ; import javax . management . MalformedObjectNameException ; import javax . management . ObjectName ; import org . apache . camel . CamelContext ; import org . apache . camel . Endpoint ; public class CamelNamingStrategy { public static final String VALUE_UNKNOWN = "unknown" ; public static final String VALUE_ROUTE = "route" ; public static final String KEY_NAME = "name" ; public static final String KEY_TYPE = "type" ; public static final String KEY_CONTEXT = "context" ; public static final String KEY_GROUP = "group" ; public static final String KEY_COMPONENT = "component" ; public static final String KEY_ROUTE_TYPE = "routeType" ; public static final String KEY_ROUTE = "route" ; public static final String GROUP_ENDPOINTS = "endpoints" ; public static final String GROUP_SERVICES = "services" ; public static final String GROUP_ROUTE_BUILDER = "routeBuilder" ; public static final String GROUP_ROUTE_TYPE = "routeType" ; protected String domainName ; protected String hostName = "locahost" ; public CamelNamingStrategy ( ) { this ( "org.apache.camel" ) ; } public CamelNamingStrategy ( String domainName ) { if ( domainName != null ) { this . domainName = domainName ; } try { hostName = InetAddress . getLocalHost ( ) . getHostName ( ) ; } catch ( UnknownHostException ex ) { } } public ObjectName getObjectName ( CamelContext context ) throws MalformedObjectNameException { StringBuffer buffer = new StringBuffer ( ) ; buffer . append ( domainName + ":" ) ; buffer . append ( KEY_CONTEXT + "=" + getContextId ( context ) + "," ) ; buffer . append ( KEY_NAME + "=" + "context" ) ; return createObjectName ( buffer ) ; } public ObjectName getObjectName ( ManagedEndpoint mbean ) throws MalformedObjectNameException { Endpoint ep = mbean . getEndpoint ( ) ; StringBuffer buffer = new StringBuffer ( ) ; buffer . append ( domainName + ":" ) ; buffer . append ( KEY_CONTEXT + "=" + getContextId ( ep . getContext ( ) ) + "," ) ; buffer . append ( KEY_GROUP + "=" + GROUP_ENDPOINTS + "," ) ; buffer . append ( KEY_COMPONENT + "=" + getComponentId ( ep ) + "," ) ; buffer . append ( KEY_NAME + "=" + getEndpointId ( ep ) ) ; return createObjectName ( buffer ) ; } public ObjectName getObjectName ( CamelContext context , ManagedService mbean ) throws MalformedObjectNameException { StringBuffer buffer = new StringBuffer ( ) ; buffer . append ( domainName + ":" ) ; buffer . append ( KEY_CONTEXT + "=" + getContextId ( context ) + "," ) ; buffer . append ( KEY_GROUP + "=" + GROUP_SERVICES + "," ) ; buffer . append ( KEY_NAME + "=" + Integer . toHexString ( mbean . getService ( ) . hashCode ( ) ) ) ; return createObjectName ( buffer ) ; } public ObjectName getObjectName ( ManagedRoute mbean ) throws MalformedObjectNameException { Endpoint ep = mbean . getRoute ( ) . getEndpoint ( ) ; String ctxid = ep != null ? getContextId ( ep . getContext ( ) ) : VALUE_UNKNOWN ; String cid = getComponentId ( ep ) ; String id = VALUE_UNKNOWN . equals ( cid ) ? getEndpointId ( ep ) : "[" + cid + "]" + getEndpointId ( ep ) ; StringBuffer buffer = new StringBuffer ( ) ; buffer . append ( domainName + ":" ) ; buffer . append ( KEY_CONTEXT + "=" + ctxid + "," ) ; buffer . append ( KEY_GROUP + "=" + GROUP_ROUTE_BUILDER + "," ) ; buffer . append ( KEY_ROUTE_TYPE + "=" + GROUP_ROUTE_TYPE + "," ) ; buffer . append ( KEY_ROUTE + "=" + id + "," ) ; buffer . append ( KEY_NAME + "=" + VALUE_ROUTE ) ; return createObjectName ( buffer ) ; } public ObjectName getObjectName ( CamelContext context , PerformanceCounter mbean ) throws MalformedObjectNameException { StringBuffer buffer = new StringBuffer ( ) ; buffer . append ( domainName + ":" ) ; buffer . append ( KEY_CONTEXT + "=" + getContextId ( context ) + "," ) ; buffer . append ( KEY_GROUP + "=" + GROUP_ENDPOINTS + "," ) ; buffer . append ( KEY_ROUTE + "=" + "Route.Counter" + "," ) ; buffer . append ( KEY_NAME + "=" + "Stats" ) ; return createObjectName ( buffer ) ; } public String getDomainName ( ) { return domainName ; } public void setDomainName ( String domainName ) { this . domainName = domainName ; } public String getHostName ( ) { return hostName ; } public void setHostName ( String hostName ) { this . hostName = hostName ; } protected String getContextId ( CamelContext context ) { String id = context != null ? context . getName ( ) : VALUE_UNKNOWN ; return hostName + "/" + id ; } protected String getComponentId ( Endpoint ep ) { String uri = ep . getEndpointUri ( ) ; int pos = uri . indexOf ( ':' ) ; return ( pos == - 1 ) ? VALUE_UNKNOWN : uri . substring ( 0 , pos ) ; } protected String getEndpointId ( Endpoint ep ) { String uri = ep . getEndpointUri ( ) ; int pos = uri . indexOf ( ':' ) ; String id = ( pos == - 1 ) ? uri : uri . substring ( pos + 1 ) ; if ( ! ep . isSingleton ( ) ) { id += "." + Integer . toString ( ep . hashCode ( ) ) ; } id = id . replace ( "=" , "_eq_" ) ; id = id . replace ( "," , "_cm_" ) ; return id ; } protected ObjectName createObjectName ( StringBuffer buffer ) throws MalformedObjectNameException { String text = buffer . toString ( ) ; try { text = text . replace ( "?" , "_qe_" ) ; return new ObjectName ( text ) ; } catch ( MalformedObjectNameException e ) { throw new MalformedObjectNameException ( "Could not create ObjectName from: " + text + ". Reason: " + e ) ; } } } 	1	['15', '1', '0', '11', '43', '37', '3', '8', '11', '0.980952381', '485', '0.133333333', '0', '0', '0.214814815', '0', '0', '30.33333333', '3', '1.1333', '10']
package org . apache . camel . model ; import org . apache . camel . Processor ; import org . apache . camel . impl . RouteContext ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlAttribute ; import javax . xml . bind . annotation . XmlRootElement ; import javax . xml . bind . annotation . XmlTransient ; @ XmlRootElement ( name = "process" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class ProcessorRef extends OutputType { @ XmlAttribute ( required = true ) private String ref ; @ XmlTransient private Processor processor ; public ProcessorRef ( ) { } public ProcessorRef ( Processor processor ) { this . processor = processor ; } @ Override public String toString ( ) { return "Processor[ref:  " + ref + "]" ; } @ Override public String getLabel ( ) { if ( ref != null ) { return "ref:  " + ref ; } else if ( processor != null ) { return processor . toString ( ) ; } else { return "" ; } } public String getRef ( ) { return ref ; } public void setRef ( String ref ) { this . ref = ref ; } @ Override public Processor createProcessor ( RouteContext routeContext ) { if ( processor == null ) { processor = routeContext . lookup ( getRef ( ) , Processor . class ) ; } return processor ; } } 	1	['7', '3', '0', '4', '13', '3', '1', '3', '7', '0.5', '73', '1', '1', '0.951456311', '0.357142857', '1', '2', '9.142857143', '3', '1.1429', '2']
package org . apache . camel . model ; import java . util . ArrayList ; import java . util . List ; import javax . xml . bind . annotation . XmlElementRef ; import javax . xml . bind . annotation . XmlType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlAccessType ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; @ XmlType ( name = "outputType" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class OutputType < Type extends ProcessorType > extends ProcessorType < Type > { private static final transient Log LOG = LogFactory . getLog ( OutputType . class ) ; @ XmlElementRef protected List < ProcessorType < ? > > outputs = new ArrayList < ProcessorType < ? > > ( ) ; @ XmlElementRef private List < InterceptorType > interceptors = new ArrayList < InterceptorType > ( ) ; public List < ProcessorType < ? > > getOutputs ( ) { return outputs ; } public void setOutputs ( List < ProcessorType < ? > > outputs ) { this . outputs = outputs ; if ( outputs != null ) { for ( ProcessorType output : outputs ) { configureChild ( output ) ; } } } public List < InterceptorType > getInterceptors ( ) { return interceptors ; } public void setInterceptors ( List < InterceptorType > interceptors ) { this . interceptors = interceptors ; } @ Override protected void configureChild ( ProcessorType output ) { super . configureChild ( output ) ; if ( isInheritErrorHandler ( ) ) { output . setErrorHandlerBuilder ( getErrorHandlerBuilder ( ) ) ; } } } 	1	['7', '2', '10', '15', '17', '9', '11', '4', '5', '0.777777778', '68', '1', '1', '0.948979592', '0.5', '1', '5', '8.285714286', '3', '1.1429', '1']
package org . apache . camel . processor ; import org . apache . camel . AsyncCallback ; import org . apache . camel . AsyncProcessor ; import org . apache . camel . Exchange ; import org . apache . camel . Processor ; import org . apache . camel . Service ; import org . apache . camel . impl . ServiceSupport ; import org . apache . camel . spi . Policy ; import org . apache . camel . util . AsyncProcessorHelper ; import org . apache . camel . util . ServiceHelper ; public class DelegateAsyncProcessor extends ServiceSupport implements AsyncProcessor { protected AsyncProcessor processor ; public DelegateAsyncProcessor ( ) { } public DelegateAsyncProcessor ( AsyncProcessor processor ) { this . processor = processor ; } @ Override public String toString ( ) { return "Delegate(" + processor + ")" ; } public AsyncProcessor getProcessor ( ) { return processor ; } public void setProcessor ( AsyncProcessor processor ) { this . processor = processor ; } protected void doStart ( ) throws Exception { ServiceHelper . startServices ( processor ) ; } protected void doStop ( ) throws Exception { ServiceHelper . stopServices ( processor ) ; } public boolean process ( final Exchange exchange , final AsyncCallback callback ) { return processor . process ( exchange , callback ) ; } public void process ( Exchange exchange ) throws Exception { AsyncProcessorHelper . process ( this , exchange ) ; } } 	1	['9', '2', '1', '7', '18', '0', '1', '6', '7', '0.25', '66', '1', '1', '0.65', '0.388888889', '1', '1', '6.222222222', '1', '0.7778', '1']
package org . apache . camel . model ; import java . util . ArrayList ; import java . util . Collection ; import java . util . Collections ; import java . util . List ; import java . util . concurrent . ThreadPoolExecutor ; import javax . xml . bind . annotation . XmlAttribute ; import javax . xml . bind . annotation . XmlTransient ; import org . apache . camel . Endpoint ; import org . apache . camel . Exchange ; import org . apache . camel . Expression ; import org . apache . camel . Predicate ; import org . apache . camel . Processor ; import org . apache . camel . Route ; import org . apache . camel . RuntimeCamelException ; import org . apache . camel . builder . Builder ; import org . apache . camel . builder . DataTypeExpression ; import org . apache . camel . builder . DeadLetterChannelBuilder ; import org . apache . camel . builder . ErrorHandlerBuilder ; import org . apache . camel . builder . NoErrorHandlerBuilder ; import org . apache . camel . builder . ProcessorBuilder ; import org . apache . camel . converter . ObjectConverter ; import org . apache . camel . impl . RouteContext ; import org . apache . camel . model . dataformat . DataFormatType ; import org . apache . camel . model . language . ExpressionType ; import org . apache . camel . model . language . LanguageExpression ; import org . apache . camel . processor . DelegateProcessor ; import org . apache . camel . processor . MulticastProcessor ; import org . apache . camel . processor . Pipeline ; import org . apache . camel . processor . RecipientList ; import org . apache . camel . processor . aggregate . AggregationStrategy ; import org . apache . camel . processor . idempotent . IdempotentConsumer ; import org . apache . camel . processor . idempotent . MessageIdRepository ; import org . apache . camel . spi . DataFormat ; import org . apache . camel . spi . Policy ; import org . apache . camel . spi . Registry ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public abstract class ProcessorType < Type extends ProcessorType > { public static final String DEFAULT_TRACE_CATEGORY = "org.apache.camel.TRACE" ; private ErrorHandlerBuilder errorHandlerBuilder ; private Boolean inheritErrorHandlerFlag = Boolean . TRUE ; private DelegateProcessor lastInterceptor ; private NodeFactory nodeFactory ; public abstract List < ProcessorType < ? > > getOutputs ( ) ; public abstract List < InterceptorType > getInterceptors ( ) ; public Processor createProcessor ( RouteContext routeContext ) throws Exception { throw new UnsupportedOperationException ( "Not implemented yet for class: " + getClass ( ) . getName ( ) ) ; } public Processor createOutputsProcessor ( RouteContext routeContext ) throws Exception { Collection < ProcessorType < ? > > outputs = getOutputs ( ) ; return createOutputsProcessor ( routeContext , outputs ) ; } public void addRoutes ( RouteContext routeContext , Collection < Route > routes ) throws Exception { Processor processor = makeProcessor ( routeContext ) ; routeContext . addEventDrivenProcessor ( processor ) ; } public Processor wrapProcessor ( RouteContext routeContext , Processor processor ) throws Exception { processor = wrapProcessorInInterceptors ( routeContext , processor ) ; return wrapInErrorHandler ( processor ) ; } public Type to ( String uri ) { addOutput ( new ToType ( uri ) ) ; return ( Type ) this ; } public Type to ( Endpoint endpoint ) { addOutput ( new ToType ( endpoint ) ) ; return ( Type ) this ; } public Type to ( String ... uris ) { for ( String uri : uris ) { addOutput ( new ToType ( uri ) ) ; } return ( Type ) this ; } public Type to ( Endpoint ... endpoints ) { for ( Endpoint endpoint : endpoints ) { addOutput ( new ToType ( endpoint ) ) ; } return ( Type ) this ; } public Type to ( Collection < Endpoint > endpoints ) { for ( Endpoint endpoint : endpoints ) { addOutput ( new ToType ( endpoint ) ) ; } return ( Type ) this ; } public MulticastType multicast ( ) { MulticastType answer = new MulticastType ( ) ; addOutput ( answer ) ; return answer ; } public Type pipeline ( String ... uris ) { return to ( uris ) ; } public Type pipeline ( Endpoint ... endpoints ) { return to ( endpoints ) ; } public Type pipeline ( Collection < Endpoint > endpoints ) { return to ( endpoints ) ; } public IdempotentConsumerType idempotentConsumer ( Expression messageIdExpression , MessageIdRepository messageIdRepository ) { IdempotentConsumerType answer = new IdempotentConsumerType ( messageIdExpression , messageIdRepository ) ; addOutput ( answer ) ; return answer ; } public FilterType filter ( Predicate predicate ) { FilterType filter = new FilterType ( predicate ) ; addOutput ( filter ) ; return filter ; } public ChoiceType choice ( ) { ChoiceType answer = new ChoiceType ( ) ; addOutput ( answer ) ; return answer ; } public TryType tryBlock ( ) { TryType answer = new TryType ( ) ; addOutput ( answer ) ; return answer ; } public Type recipientList ( Expression receipients ) { RecipientListType answer = new RecipientListType ( receipients ) ; addOutput ( answer ) ; return ( Type ) this ; } public SplitterType splitter ( Expression receipients ) { SplitterType answer = new SplitterType ( receipients ) ; addOutput ( answer ) ; return answer ; } public ResequencerType resequencer ( Expression < Exchange > expression ) { return resequencer ( Collections . < Expression > singletonList ( expression ) ) ; } public ResequencerType resequencer ( List < Expression > expressions ) { ResequencerType answer = new ResequencerType ( expressions ) ; addOutput ( answer ) ; return answer ; } public ResequencerType resequencer ( Expression ... expressions ) { List < Expression > list = new ArrayList < Expression > ( ) ; for ( Expression expression : expressions ) { list . add ( expression ) ; } return resequencer ( list ) ; } public AggregatorType aggregator ( Expression correlationExpression ) { AggregatorType answer = new AggregatorType ( correlationExpression ) ; addOutput ( answer ) ; return answer ; } public AggregatorType aggregator ( Expression correlationExpression , AggregationStrategy aggregationStrategy ) { AggregatorType answer = new AggregatorType ( correlationExpression , aggregationStrategy ) ; addOutput ( answer ) ; return answer ; } public DelayerType delayer ( Expression < Exchange > processAtExpression ) { return delayer ( processAtExpression , 0L ) ; } public DelayerType delayer ( Expression < Exchange > processAtExpression , long delay ) { DelayerType answer = new DelayerType ( processAtExpression , delay ) ; addOutput ( answer ) ; return answer ; } public DelayerType delayer ( long delay ) { return delayer ( null , delay ) ; } public ThrottlerType throttler ( long maximumRequestCount ) { ThrottlerType answer = new ThrottlerType ( maximumRequestCount ) ; addOutput ( answer ) ; return answer ; } public Type interceptor ( String ref ) { getInterceptors ( ) . add ( new InterceptorRef ( ref ) ) ; return ( Type ) this ; } public InterceptType intercept ( ) { InterceptType answer = new InterceptType ( ) ; addOutput ( answer ) ; return answer ; } public Type proceed ( ) { addOutput ( new ProceedType ( ) ) ; return ( Type ) this ; } public ExceptionType exception ( Class exceptionType ) { ExceptionType answer = new ExceptionType ( exceptionType ) ; addOutput ( answer ) ; return answer ; } public OtherwiseType intercept ( Predicate predicate ) { InterceptType answer = new InterceptType ( ) ; addOutput ( answer ) ; return answer . when ( predicate ) ; } public Type interceptors ( String ... refs ) { for ( String ref : refs ) { interceptor ( ref ) ; } return ( Type ) this ; } public FilterType filter ( ExpressionType expression ) { FilterType filter = getNodeFactory ( ) . createFilter ( ) ; filter . setExpression ( expression ) ; addOutput ( filter ) ; return filter ; } public FilterType filter ( String language , String expression ) { return filter ( new LanguageExpression ( language , expression ) ) ; } public Type trace ( ) { return trace ( DEFAULT_TRACE_CATEGORY ) ; } public Type trace ( String category ) { final Log log = LogFactory . getLog ( category ) ; return intercept ( new DelegateProcessor ( ) { @ Override public void process ( Exchange exchange ) throws Exception { log . trace ( exchange ) ; processNext ( exchange ) ; } } ) ; } public PolicyRef policies ( ) { PolicyRef answer = new PolicyRef ( ) ; addOutput ( answer ) ; return answer ; } public PolicyRef policy ( Policy policy ) { PolicyRef answer = new PolicyRef ( policy ) ; addOutput ( answer ) ; return answer ; } public Type intercept ( DelegateProcessor interceptor ) { getInterceptors ( ) . add ( new InterceptorRef ( interceptor ) ) ; lastInterceptor = interceptor ; return ( Type ) this ; } public Type errorHandler ( ErrorHandlerBuilder errorHandlerBuilder ) { setErrorHandlerBuilder ( errorHandlerBuilder ) ; return ( Type ) this ; } public Type inheritErrorHandler ( boolean condition ) { setInheritErrorHandlerFlag ( condition ) ; return ( Type ) this ; } public Type process ( Processor processor ) { ProcessorRef answer = new ProcessorRef ( processor ) ; addOutput ( answer ) ; return ( Type ) this ; } public Type processRef ( String ref ) { ProcessorRef answer = new ProcessorRef ( ) ; answer . setRef ( ref ) ; addOutput ( answer ) ; return ( Type ) this ; } public Type bean ( Object bean ) { BeanRef answer = new BeanRef ( ) ; answer . setBean ( bean ) ; addOutput ( answer ) ; return ( Type ) this ; } public Type bean ( Object bean , String method ) { BeanRef answer = new BeanRef ( ) ; answer . setBean ( bean ) ; answer . setMethod ( method ) ; addOutput ( answer ) ; return ( Type ) this ; } public Type bean ( Class beanType ) { BeanRef answer = new BeanRef ( ) ; answer . setBeanType ( beanType ) ; addOutput ( answer ) ; return ( Type ) this ; } public Type bean ( Class beanType , String method ) { BeanRef answer = new BeanRef ( ) ; answer . setBeanType ( beanType ) ; answer . setMethod ( method ) ; addOutput ( answer ) ; return ( Type ) this ; } public Type beanRef ( String ref ) { BeanRef answer = new BeanRef ( ref ) ; addOutput ( answer ) ; return ( Type ) this ; } public Type beanRef ( String ref , String method ) { BeanRef answer = new BeanRef ( ref , method ) ; addOutput ( answer ) ; return ( Type ) this ; } public Type setBody ( Expression expression ) { return process ( ProcessorBuilder . setBody ( expression ) ) ; } public Type setOutBody ( Expression expression ) { return process ( ProcessorBuilder . setOutBody ( expression ) ) ; } public Type setFaultBody ( Expression expression ) { return process ( ProcessorBuilder . setFaultBody ( expression ) ) ; } public Type setHeader ( String name , Expression expression ) { return process ( ProcessorBuilder . setHeader ( name , expression ) ) ; } public Type setOutHeader ( String name , Expression expression ) { return process ( ProcessorBuilder . setOutHeader ( name , expression ) ) ; } public Type setFaultHeader ( String name , Expression expression ) { return process ( ProcessorBuilder . setFaultHeader ( name , expression ) ) ; } public Type setProperty ( String name , Expression expression ) { return process ( ProcessorBuilder . setProperty ( name , expression ) ) ; } public Type removeHeader ( String name ) { return process ( ProcessorBuilder . removeHeader ( name ) ) ; } public Type removeOutHeader ( String name ) { return process ( ProcessorBuilder . removeOutHeader ( name ) ) ; } public Type removeFaultHeader ( String name ) { return process ( ProcessorBuilder . removeFaultHeader ( name ) ) ; } public Type removeProperty ( String name ) { return process ( ProcessorBuilder . removeProperty ( name ) ) ; } public Type convertBodyTo ( Class type ) { return process ( ProcessorBuilder . setBody ( Builder . body ( ) . convertTo ( type ) ) ) ; } public Type convertOutBodyTo ( Class type ) { return process ( ProcessorBuilder . setOutBody ( Builder . outBody ( ) . convertTo ( type ) ) ) ; } public Type convertFaultBodyTo ( Class type ) { return process ( ProcessorBuilder . setFaultBody ( Builder . faultBody ( ) . convertTo ( type ) ) ) ; } public DataTypeExpression < Type > unmarshal ( ) { return new DataTypeExpression < Type > ( this , DataTypeExpression . Operation . Unmarshal ) ; } public Type unmarshal ( DataFormatType dataFormatType ) { addOutput ( new UnmarshalType ( dataFormatType ) ) ; return ( Type ) this ; } public Type unmarshal ( DataFormat dataFormat ) { return unmarshal ( new DataFormatType ( dataFormat ) ) ; } public Type unmarshal ( String dataTypeRef ) { addOutput ( new UnmarshalType ( dataTypeRef ) ) ; return ( Type ) this ; } public DataTypeExpression < Type > marshal ( ) { return new DataTypeExpression < Type > ( this , DataTypeExpression . Operation . Marshal ) ; } public Type marshal ( DataFormatType dataFormatType ) { addOutput ( new MarshalType ( dataFormatType ) ) ; return ( Type ) this ; } public Type marshal ( DataFormat dataFormat ) { return marshal ( new DataFormatType ( dataFormat ) ) ; } public Type marshal ( String dataTypeRef ) { addOutput ( new MarshalType ( dataTypeRef ) ) ; return ( Type ) this ; } @ XmlTransient public ErrorHandlerBuilder getErrorHandlerBuilder ( ) { if ( errorHandlerBuilder == null ) { errorHandlerBuilder = createErrorHandlerBuilder ( ) ; } return errorHandlerBuilder ; } public void setErrorHandlerBuilder ( ErrorHandlerBuilder errorHandlerBuilder ) { this . errorHandlerBuilder = errorHandlerBuilder ; } @ XmlTransient public boolean isInheritErrorHandler ( ) { return ObjectConverter . toBoolean ( getInheritErrorHandlerFlag ( ) ) ; } @ XmlAttribute ( name = "inheritErrorHandler" , required = false ) public Boolean getInheritErrorHandlerFlag ( ) { return inheritErrorHandlerFlag ; } public void setInheritErrorHandlerFlag ( Boolean inheritErrorHandlerFlag ) { this . inheritErrorHandlerFlag = inheritErrorHandlerFlag ; } @ XmlTransient public NodeFactory getNodeFactory ( ) { if ( nodeFactory == null ) { nodeFactory = new NodeFactory ( ) ; } return nodeFactory ; } public void setNodeFactory ( NodeFactory nodeFactory ) { this . nodeFactory = nodeFactory ; } public String getLabel ( ) { return "" ; } protected Processor makeProcessor ( RouteContext routeContext ) throws Exception { Processor processor = createProcessor ( routeContext ) ; return wrapProcessor ( routeContext , processor ) ; } protected Processor wrapProcessorInInterceptors ( RouteContext routeContext , Processor target ) throws Exception { if ( target == null ) { throw new RuntimeCamelException ( "target provided." ) ; } DelegateProcessor first = null ; DelegateProcessor last = null ; List < InterceptorType > interceptors = new ArrayList < InterceptorType > ( routeContext . getRoute ( ) . getInterceptors ( ) ) ; List < InterceptorType > list = getInterceptors ( ) ; for ( InterceptorType interceptorType : list ) { if ( ! interceptors . contains ( interceptorType ) ) { interceptors . add ( interceptorType ) ; } } for ( InterceptorType interceptorRef : interceptors ) { DelegateProcessor p = interceptorRef . createInterceptor ( routeContext ) ; if ( first == null ) { first = p ; } if ( last != null ) { last . setProcessor ( p ) ; } last = p ; } if ( last != null ) { last . setProcessor ( target ) ; } return first == null ? target : first ; } protected Processor wrapInErrorHandler ( Processor processor ) throws Exception { return getErrorHandlerBuilder ( ) . createErrorHandler ( processor ) ; } protected ErrorHandlerBuilder createErrorHandlerBuilder ( ) { if ( isInheritErrorHandler ( ) ) { return new DeadLetterChannelBuilder ( ) ; } else { return new NoErrorHandlerBuilder ( ) ; } } protected void configureChild ( ProcessorType output ) { output . setNodeFactory ( getNodeFactory ( ) ) ; } protected void addOutput ( ProcessorType processorType ) { configureChild ( processorType ) ; getOutputs ( ) . add ( processorType ) ; } protected Processor createCompositeProcessor ( List < Processor > list ) { return new Pipeline ( list ) ; } protected Processor createOutputsProcessor ( RouteContext routeContext , Collection < ProcessorType < ? > > outputs ) throws Exception { List < Processor > list = new ArrayList < Processor > ( ) ; for ( ProcessorType output : outputs ) { Processor processor = output . createProcessor ( routeContext ) ; list . add ( processor ) ; } Processor processor = null ; if ( ! list . isEmpty ( ) ) { if ( list . size ( ) == 1 ) { processor = list . get ( 0 ) ; } else { processor = createCompositeProcessor ( list ) ; } } return processor ; } public ThreadType thread ( int coreSize ) { ThreadType answer = new ThreadType ( coreSize ) ; addOutput ( answer ) ; return answer ; } public ProcessorType < Type > thread ( ThreadPoolExecutor executor ) { ThreadType answer = new ThreadType ( executor ) ; addOutput ( answer ) ; return this ; } } 	1	['94', '1', '11', '63', '186', '4361', '28', '53', '86', '0.967741935', '1012', '0.8', '3', '0', '0.067131328', '0', '0', '9.712765957', '2', '1.0745', '28']
package org . apache . camel . component . bean ; import java . lang . annotation . Annotation ; import org . apache . camel . Expression ; public class ParameterInfo { private final int index ; private final Class type ; private final Annotation [ ] annotations ; private final Expression expression ; public ParameterInfo ( int index , Class type , Annotation [ ] annotations , Expression expression ) { this . index = index ; this . type = type ; this . annotations = annotations ; this . expression = expression ; } public Annotation [ ] getAnnotations ( ) { return annotations ; } public Expression getExpression ( ) { return expression ; } public int getIndex ( ) { return index ; } public Class getType ( ) { return type ; } } 	1	['5', '1', '0', '4', '6', '2', '3', '1', '5', '0.75', '36', '1', '1', '0', '0.36', '0', '0', '5.4', '1', '0.8', '2']
package org . apache . camel . processor ; import org . apache . camel . Exchange ; import org . apache . camel . Predicate ; import org . apache . camel . Processor ; public class FilterProcessor extends DelegateProcessor { private Predicate < Exchange > predicate ; public FilterProcessor ( Predicate < Exchange > predicate , Processor processor ) { super ( processor ) ; this . predicate = predicate ; } public void process ( Exchange exchange ) throws Exception { if ( predicate . matches ( exchange ) ) { super . process ( exchange ) ; } } @ Override public String toString ( ) { return "Filter[if: " + predicate + " do: " + getProcessor ( ) + "]" ; } public Predicate < Exchange > getPredicate ( ) { return predicate ; } } 	1	['4', '3', '0', '9', '12', '0', '5', '4', '4', '0', '41', '1', '1', '0.875', '0.4375', '0', '0', '9', '1', '0.75', '1']
package org . apache . camel . processor . aggregate ; import java . util . AbstractCollection ; import java . util . Iterator ; import java . util . LinkedHashMap ; import java . util . Map ; import org . apache . camel . Exchange ; import org . apache . camel . Expression ; public class AggregationCollection extends AbstractCollection < Exchange > { private final Expression < Exchange > correlationExpression ; private final AggregationStrategy aggregationStrategy ; private Map < Object , Exchange > map = new LinkedHashMap < Object , Exchange > ( ) ; public AggregationCollection ( Expression < Exchange > correlationExpression , AggregationStrategy aggregationStrategy ) { this . correlationExpression = correlationExpression ; this . aggregationStrategy = aggregationStrategy ; } @ Override public boolean add ( Exchange exchange ) { Object correlationKey = correlationExpression . evaluate ( exchange ) ; Exchange oldExchange = map . get ( correlationKey ) ; Exchange newExchange = exchange ; if ( oldExchange != null ) { newExchange = aggregationStrategy . aggregate ( oldExchange , newExchange ) ; } if ( newExchange != oldExchange ) { map . put ( correlationKey , newExchange ) ; } return true ; } public Iterator < Exchange > iterator ( ) { return map . values ( ) . iterator ( ) ; } public int size ( ) { return map . size ( ) ; } } 	1	['5', '2', '0', '4', '14', '0', '1', '3', '5', '0.333333333', '68', '1', '2', '0.777777778', '0.36', '1', '5', '12', '3', '1.2', '4']
package org . apache . camel . component . file ; import org . apache . camel . Exchange ; import org . apache . camel . impl . DefaultMessage ; import java . io . File ; public class FileMessage extends DefaultMessage { private File file ; public FileMessage ( ) { this ( new File ( "." ) ) ; } public FileMessage ( File file ) { this . file = file ; } @ Override public String toString ( ) { return "FileMessage: " + file ; } @ Override public FileExchange getExchange ( ) { return ( FileExchange ) super . getExchange ( ) ; } public File getFile ( ) { return file ; } public void setFile ( File file ) { this . file = file ; } @ Override public FileMessage newInstance ( ) { return new FileMessage ( ) ; } @ Override protected Object createBody ( ) { return file ; } } 	1	['11', '3', '0', '4', '15', '35', '1', '4', '10', '0.2', '62', '1', '0', '0.71875', '0.590909091', '2', '5', '4.545454545', '1', '0.8182', '1']
package org . apache . camel . component . bean ; import org . apache . camel . CamelException ; public class NoBeanAvailableException extends CamelException { private final String name ; public NoBeanAvailableException ( String name ) { super ( "No bean available for endpoint: " + name ) ; this . name = name ; } public String getName ( ) { return name ; } } 	1	['2', '4', '0', '2', '6', '0', '1', '1', '2', '0', '20', '1', '0', '0.944444444', '0.75', '0', '0', '8.5', '1', '0.5', '1']
package org . apache . camel ; public class InvalidHeaderTypeException extends RuntimeCamelException { private static final long serialVersionUID = - 8417806626073055262L ; private final Object headerValue ; public InvalidHeaderTypeException ( Throwable cause , Object headerValue ) { super ( cause . getMessage ( ) + " headerValue is: " + headerValue + " of type: " + typeName ( headerValue ) , cause ) ; this . headerValue = headerValue ; } public InvalidHeaderTypeException ( String message , Object headerValue ) { super ( message ) ; this . headerValue = headerValue ; } public Object getHeaderValue ( ) { return headerValue ; } protected static String typeName ( Object headerValue ) { return ( headerValue != null ) ? headerValue . getClass ( ) . getName ( ) : "null" ; } } 	1	['4', '5', '0', '1', '13', '0', '0', '1', '3', '0.833333333', '47', '1', '0', '0.894736842', '0.5', '0', '0', '10.25', '2', '0.75', '1']
package org . apache . camel ; import org . apache . camel . spi . UnitOfWork ; import java . util . Map ; public interface Exchange { ExchangePattern getPattern ( ) ; Object getProperty ( String name ) ; < T > T getProperty ( String name , Class < T > type ) ; void setProperty ( String name , Object value ) ; Object removeProperty ( String name ) ; Map < String , Object > getProperties ( ) ; Message getIn ( ) ; Message getOut ( ) ; Message getOut ( boolean lazyCreate ) ; Message getFault ( ) ; Message getFault ( boolean lazyCreate ) ; Throwable getException ( ) ; void setException ( Throwable e ) ; boolean isFailed ( ) ; CamelContext getContext ( ) ; Exchange copy ( ) ; void copyFrom ( Exchange source ) ; UnitOfWork getUnitOfWork ( ) ; void setUnitOfWork ( UnitOfWork unitOfWork ) ; String getExchangeId ( ) ; void setExchangeId ( String id ) ; } 	1	['21', '1', '0', '272', '21', '210', '270', '4', '21', '2', '21', '0', '0', '0', '0.196428571', '0', '0', '0', '1', '1', '2']
package org . apache . camel . language ; import org . apache . camel . component . bean . DefaultAnnotationExpressionFactory ; import java . lang . annotation . ElementType ; import java . lang . annotation . Retention ; import java . lang . annotation . RetentionPolicy ; import java . lang . annotation . Target ; @ Retention ( RetentionPolicy . RUNTIME ) @ Target ( { ElementType . ANNOTATION_TYPE } ) public @ interface LanguageAnnotation { public abstract String language ( ) ; public abstract Class < ? > factory ( ) default DefaultAnnotationExpressionFactory . class ; } 	1	['2', '1', '0', '4', '2', '1', '4', '0', '2', '2', '2', '0', '0', '0', '1', '0', '0', '0', '1', '1', '1']
package org . apache . camel . model ; import org . apache . camel . Processor ; import org . apache . camel . impl . RouteContext ; import javax . xml . bind . annotation . XmlRootElement ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlAccessType ; import java . util . Collections ; import java . util . List ; @ XmlRootElement ( name = "proceed" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class ProceedType extends ProcessorType { public List < ProcessorType > getOutputs ( ) { return Collections . EMPTY_LIST ; } public List < InterceptorType > getInterceptors ( ) { return Collections . EMPTY_LIST ; } public Processor createProcessor ( RouteContext routeContext ) throws Exception { return routeContext . createProceedProcessor ( ) ; } } 	1	['4', '2', '0', '3', '6', '6', '1', '3', '4', '2', '14', '0', '0', '0.96875', '0.625', '1', '4', '2.5', '1', '0.75', '4']
package org . apache . camel ; import java . util . Collection ; import java . util . List ; import java . util . concurrent . Callable ; import org . apache . camel . builder . RouteBuilder ; import org . apache . camel . spi . ExchangeConverter ; import org . apache . camel . spi . Injector ; import org . apache . camel . spi . Language ; import org . apache . camel . spi . LifecycleStrategy ; import org . apache . camel . spi . Registry ; import org . apache . camel . model . RouteType ; public interface CamelContext extends Service { String getName ( ) ; void addComponent ( String componentName , Component component ) ; Component getComponent ( String componentName ) ; < T extends Component > T getComponent ( String name , Class < T > componentType ) ; Component removeComponent ( String componentName ) ; Component getOrCreateComponent ( String componentName , Callable < Component > factory ) ; Endpoint getEndpoint ( String uri ) ; < T extends Endpoint > T getEndpoint ( String name , Class < T > endpointType ) ; Collection < Endpoint > getSingletonEndpoints ( ) ; Endpoint addSingletonEndpoint ( String uri , Endpoint endpoint ) throws Exception ; Endpoint removeSingletonEndpoint ( String uri ) throws Exception ; List < RouteType > getRouteDefinitions ( ) ; List < Route > getRoutes ( ) ; void setRoutes ( List < Route > routes ) ; void addRoutes ( Collection < Route > routes ) throws Exception ; void addRoutes ( RouteBuilder builder ) throws Exception ; void addRouteDefinitions ( Collection < RouteType > routeDefinitions ) throws Exception ; ExchangeConverter getExchangeConverter ( ) ; TypeConverter getTypeConverter ( ) ; Registry getRegistry ( ) ; Injector getInjector ( ) ; LifecycleStrategy getLifecycleStrategy ( ) ; Language resolveLanguage ( String language ) ; } 	1	['23', '1', '0', '111', '23', '253', '105', '10', '23', '2', '23', '0', '0', '0', '0.202898551', '0', '0', '0', '1', '1', '1']
package org . apache . camel . processor . aggregate ; import org . apache . camel . Exchange ; public class UseLatestAggregationStrategy implements AggregationStrategy { public Exchange aggregate ( Exchange oldExchange , Exchange newExchange ) { return newExchange ; } } 	1	['2', '1', '0', '3', '3', '1', '1', '2', '2', '2', '7', '0', '0', '0', '0.75', '0', '0', '2.5', '1', '0.5', '1']
package org . apache . camel . builder . xml ; import java . util . HashMap ; import java . util . Map ; import javax . xml . namespace . QName ; import javax . xml . xpath . XPathVariableResolver ; import org . apache . camel . Exchange ; import org . apache . camel . Message ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import static org . apache . camel . builder . xml . Namespaces . ENVIRONMENT_VARIABLES ; import static org . apache . camel . builder . xml . Namespaces . EXCHANGE_PROPERTY ; import static org . apache . camel . builder . xml . Namespaces . IN_NAMESPACE ; import static org . apache . camel . builder . xml . Namespaces . OUT_NAMESPACE ; import static org . apache . camel . builder . xml . Namespaces . SYSTEM_PROPERTIES_NAMESPACE ; public class MessageVariableResolver implements XPathVariableResolver { private static final transient Log LOG = LogFactory . getLog ( MessageVariableResolver . class ) ; private Exchange exchange ; private Map < String , Object > variables = new HashMap < String , Object > ( ) ; public Exchange getExchange ( ) { return exchange ; } public void setExchange ( Exchange exchange ) { this . exchange = exchange ; } public Object resolveVariable ( QName name ) { String uri = name . getNamespaceURI ( ) ; String localPart = name . getLocalPart ( ) ; Object answer = null ; Message in = exchange . getIn ( ) ; if ( uri == null || uri . length ( ) == 0 ) { answer = variables . get ( localPart ) ; if ( answer == null ) { Message message = in ; if ( message != null ) { answer = message . getHeader ( localPart ) ; } if ( answer == null ) { answer = exchange . getProperty ( localPart ) ; } } } else if ( uri . equals ( SYSTEM_PROPERTIES_NAMESPACE ) ) { try { answer = System . getProperty ( localPart ) ; } catch ( Exception e ) { LOG . debug ( "Security exception evaluating system property: " + localPart + ". Reason: " + e , e ) ; } } else if ( uri . equals ( ENVIRONMENT_VARIABLES ) ) { answer = System . getenv ( ) . get ( localPart ) ; } else if ( uri . equals ( EXCHANGE_PROPERTY ) ) { answer = exchange . getProperty ( localPart ) ; } else if ( uri . equals ( IN_NAMESPACE ) ) { answer = in . getHeader ( localPart ) ; if ( answer == null && localPart . equals ( "body" ) ) { answer = in . getBody ( ) ; } } else if ( uri . equals ( OUT_NAMESPACE ) ) { Message out = exchange . getOut ( ) ; answer = out . getHeader ( localPart ) ; if ( answer == null && localPart . equals ( "body" ) ) { answer = out . getBody ( ) ; } } return answer ; } public void addVariable ( String localPart , Object value ) { variables . put ( localPart , value ) ; } } 	1	['6', '1', '0', '5', '27', '1', '1', '4', '5', '0.666666667', '160', '1', '2', '0', '0.36', '0', '0', '25.16666667', '14', '2.8333', '2']
package org . apache . camel . model ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlRootElement ; import org . apache . camel . Expression ; import org . apache . camel . Processor ; import org . apache . camel . impl . RouteContext ; import org . apache . camel . model . language . ExpressionType ; import org . apache . camel . processor . Delayer ; @ XmlRootElement ( name = "delayer" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class DelayerType extends ExpressionNode { private Long delay = 0L ; public DelayerType ( ) { } public DelayerType ( Expression processAtExpression ) { super ( processAtExpression ) ; } public DelayerType ( ExpressionType processAtExpression ) { super ( processAtExpression ) ; } public DelayerType ( Expression processAtExpression , long delay ) { super ( processAtExpression ) ; this . delay = delay ; } @ Override public String toString ( ) { return "Delayer[ " + getExpression ( ) + " -> " + getOutputs ( ) + "]" ; } public Long getDelay ( ) { return delay ; } public void setDelay ( Long delay ) { this . delay = delay ; } @ Override public Processor createProcessor ( RouteContext routeContext ) throws Exception { Processor childProcessor = routeContext . createProcessor ( this ) ; Expression processAtExpression = getExpression ( ) . createExpression ( routeContext ) ; return new Delayer ( childProcessor , processAtExpression , delay ) ; } } 	1	['8', '3', '0', '7', '22', '0', '1', '7', '8', '0.142857143', '86', '1', '0', '0.962264151', '0.291666667', '1', '2', '9.625', '1', '0.5', '3']
package org . apache . camel . builder ; import org . apache . camel . Exchange ; import org . apache . camel . Expression ; import org . apache . camel . Processor ; public class ProcessorBuilder { private ProcessorBuilder ( ) { } public static Processor setBody ( final Expression expression ) { return new Processor ( ) { public void process ( Exchange exchange ) { Object newBody = expression . evaluate ( exchange ) ; exchange . getIn ( ) . setBody ( newBody ) ; } @ Override public String toString ( ) { return "setBody(" + expression + ")" ; } } ; } public static Processor setOutBody ( final Expression expression ) { return new Processor ( ) { public void process ( Exchange exchange ) { Object newBody = expression . evaluate ( exchange ) ; exchange . getOut ( ) . setBody ( newBody ) ; } @ Override public String toString ( ) { return "setOutBody(" + expression + ")" ; } } ; } public static Processor setFaultBody ( final Expression expression ) { return new Processor ( ) { public void process ( Exchange exchange ) { Object newBody = expression . evaluate ( exchange ) ; exchange . getFault ( ) . setBody ( newBody ) ; } @ Override public String toString ( ) { return "setFaultBody(" + expression + ")" ; } } ; } public static Processor setHeader ( final String name , final Expression expression ) { return new Processor ( ) { public void process ( Exchange exchange ) { Object value = expression . evaluate ( exchange ) ; exchange . getIn ( ) . setHeader ( name , value ) ; } @ Override public String toString ( ) { return "setHeader(" + name + ", " + expression + ")" ; } } ; } public static Processor setOutHeader ( final String name , final Expression expression ) { return new Processor ( ) { public void process ( Exchange exchange ) { Object value = expression . evaluate ( exchange ) ; exchange . getOut ( ) . setHeader ( name , value ) ; } @ Override public String toString ( ) { return "setOutHeader(" + name + ", " + expression + ")" ; } } ; } public static Processor setFaultHeader ( final String name , final Expression expression ) { return new Processor ( ) { public void process ( Exchange exchange ) { Object value = expression . evaluate ( exchange ) ; exchange . getFault ( ) . setHeader ( name , value ) ; } @ Override public String toString ( ) { return "setFaultHeader(" + name + ", " + expression + ")" ; } } ; } public static Processor setProperty ( final String name , final Expression expression ) { return new Processor ( ) { public void process ( Exchange exchange ) { Object value = expression . evaluate ( exchange ) ; exchange . setProperty ( name , value ) ; } @ Override public String toString ( ) { return "setProperty(" + name + ", " + expression + ")" ; } } ; } public static Processor removeHeader ( final String name ) { return new Processor ( ) { public void process ( Exchange exchange ) { exchange . getIn ( ) . removeHeader ( name ) ; } @ Override public String toString ( ) { return "removeHeader(" + name + ")" ; } } ; } public static Processor removeOutHeader ( final String name ) { return new Processor ( ) { public void process ( Exchange exchange ) { exchange . getOut ( ) . removeHeader ( name ) ; } @ Override public String toString ( ) { return "removeOutHeader(" + name + ")" ; } } ; } public static Processor removeFaultHeader ( final String name ) { return new Processor ( ) { public void process ( Exchange exchange ) { exchange . getFault ( ) . removeHeader ( name ) ; } @ Override public String toString ( ) { return "removeFaultHeader(" + name + ")" ; } } ; } public static Processor removeProperty ( final String name ) { return new Processor ( ) { public void process ( Exchange exchange ) { exchange . removeProperty ( name ) ; } @ Override public String toString ( ) { return "removeProperty(" + name + ")" ; } } ; } } 	1	['12', '1', '0', '14', '24', '66', '1', '13', '11', '2', '74', '0', '0', '0', '0.444444444', '0', '0', '5.166666667', '1', '0.9167', '1']
package org . apache . camel . model ; import org . apache . camel . * ; import org . apache . camel . impl . RouteContext ; import org . apache . camel . util . CamelContextHelper ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import javax . xml . bind . annotation . * ; import java . util . ArrayList ; import java . util . Collection ; import java . util . List ; @ XmlRootElement ( name = "route" ) @ XmlType ( propOrder = { "interceptors" , "inputs" , "outputs" } ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class RouteType extends ProcessorType implements CamelContextAware { private static final transient Log LOG = LogFactory . getLog ( RouteType . class ) ; @ XmlElementRef private List < InterceptorType > interceptors = new ArrayList < InterceptorType > ( ) ; @ XmlElementRef private List < FromType > inputs = new ArrayList < FromType > ( ) ; @ XmlElementRef private List < ProcessorType > outputs = new ArrayList < ProcessorType > ( ) ; @ XmlAttribute private String group ; @ XmlTransient private CamelContext camelContext ; public RouteType ( ) { } public RouteType ( String uri ) { from ( uri ) ; } public RouteType ( Endpoint endpoint ) { from ( endpoint ) ; } @ Override public String toString ( ) { return "Route[ " + inputs + " -> " + outputs + "]" ; } public void addRoutes ( CamelContext context ) throws Exception { Collection < Route > routes = new ArrayList < Route > ( ) ; addRoutes ( context , routes ) ; context . addRoutes ( routes ) ; } public void addRoutes ( CamelContext context , Collection < Route > routes ) throws Exception { setCamelContext ( context ) ; for ( FromType fromType : inputs ) { addRoutes ( routes , fromType ) ; } } public Endpoint resolveEndpoint ( String uri ) throws NoSuchEndpointException { CamelContext context = getCamelContext ( ) ; if ( context == null ) { throw new IllegalArgumentException ( "No CamelContext has been injected!" ) ; } return CamelContextHelper . getMandatoryEndpoint ( context , uri ) ; } public RouteType from ( String uri ) { getInputs ( ) . add ( new FromType ( uri ) ) ; return this ; } public RouteType from ( Endpoint endpoint ) { getInputs ( ) . add ( new FromType ( endpoint ) ) ; return this ; } public RouteType group ( String name ) { setGroup ( name ) ; return this ; } public List < InterceptorType > getInterceptors ( ) { return interceptors ; } public void setInterceptors ( List < InterceptorType > interceptors ) { this . interceptors = interceptors ; } public List < FromType > getInputs ( ) { return inputs ; } public void setInputs ( List < FromType > inputs ) { this . inputs = inputs ; } public List < ProcessorType > getOutputs ( ) { return outputs ; } public void setOutputs ( List < ProcessorType > outputs ) { this . outputs = outputs ; if ( outputs != null ) { for ( ProcessorType output : outputs ) { configureChild ( output ) ; } } } public CamelContext getCamelContext ( ) { return camelContext ; } public void setCamelContext ( CamelContext camelContext ) { this . camelContext = camelContext ; } public String getGroup ( ) { return group ; } public void setGroup ( String group ) { this . group = group ; } protected void addRoutes ( Collection < Route > routes , FromType fromType ) throws Exception { RouteContext routeContext = new RouteContext ( this , fromType , routes ) ; Endpoint endpoint = routeContext . getEndpoint ( ) ; for ( ProcessorType output : outputs ) { output . addRoutes ( routeContext , routes ) ; } routeContext . commit ( ) ; } @ Override protected void configureChild ( ProcessorType output ) { super . configureChild ( output ) ; if ( isInheritErrorHandler ( ) ) { output . setErrorHandlerBuilder ( getErrorHandlerBuilder ( ) ) ; } List < InterceptorType > list = output . getInterceptors ( ) ; if ( list == null ) { LOG . warn ( "No interceptor collection: " + output ) ; } else { list . addAll ( getInterceptors ( ) ) ; } } } 	1	['23', '2', '0', '23', '50', '161', '14', '11', '20', '0.787878788', '295', '1', '2', '0.830357143', '0.221590909', '1', '6', '11.56521739', '3', '1', '4']
package org . apache . camel . processor ; import org . apache . camel . Exchange ; import org . apache . camel . Processor ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class Logger implements Processor { private Log log ; private LoggingLevel level ; public Logger ( ) { this ( LogFactory . getLog ( Logger . class ) ) ; } public Logger ( Log log ) { this ( log , LoggingLevel . INFO ) ; } public Logger ( Log log , LoggingLevel level ) { this . log = log ; this . level = level ; } public Logger ( String logName ) { this ( LogFactory . getLog ( logName ) ) ; } public Logger ( String logName , LoggingLevel level ) { this ( LogFactory . getLog ( logName ) , level ) ; } @ Override public String toString ( ) { return "Logger[" + log + "]" ; } public void process ( Exchange exchange ) { switch ( level ) { case DEBUG : if ( log . isDebugEnabled ( ) ) { log . debug ( logMessage ( exchange ) ) ; } break ; case ERROR : if ( log . isErrorEnabled ( ) ) { log . error ( logMessage ( exchange ) ) ; } break ; case FATAL : if ( log . isFatalEnabled ( ) ) { log . fatal ( logMessage ( exchange ) ) ; } break ; case INFO : if ( log . isInfoEnabled ( ) ) { log . info ( logMessage ( exchange ) ) ; } break ; case TRACE : if ( log . isTraceEnabled ( ) ) { log . trace ( logMessage ( exchange ) ) ; } break ; case WARN : if ( log . isWarnEnabled ( ) ) { log . warn ( logMessage ( exchange ) ) ; } break ; default : log . error ( "Unknown level: " + level + " when trying to log exchange: " + logMessage ( exchange ) ) ; } } public void log ( String message ) { switch ( level ) { case DEBUG : if ( log . isDebugEnabled ( ) ) { log . debug ( message ) ; } break ; case ERROR : if ( log . isErrorEnabled ( ) ) { log . error ( message ) ; } break ; case FATAL : if ( log . isFatalEnabled ( ) ) { log . fatal ( message ) ; } break ; case INFO : if ( log . isInfoEnabled ( ) ) { log . debug ( message ) ; } break ; case TRACE : if ( log . isTraceEnabled ( ) ) { log . trace ( message ) ; } break ; case WARN : if ( log . isWarnEnabled ( ) ) { log . warn ( message ) ; } break ; default : log . error ( "Unknown level: " + level + " when trying to log exchange: " + message ) ; } } public void log ( String message , Throwable exception ) { switch ( level ) { case DEBUG : if ( log . isDebugEnabled ( ) ) { log . debug ( message , exception ) ; } break ; case ERROR : if ( log . isErrorEnabled ( ) ) { log . error ( message , exception ) ; } break ; case FATAL : if ( log . isFatalEnabled ( ) ) { log . fatal ( message , exception ) ; } break ; case INFO : if ( log . isInfoEnabled ( ) ) { log . debug ( message , exception ) ; } break ; case TRACE : if ( log . isTraceEnabled ( ) ) { log . trace ( message , exception ) ; } break ; case WARN : if ( log . isWarnEnabled ( ) ) { log . warn ( message , exception ) ; } break ; default : log . error ( "Unknown level: " + level + " when trying to log exchange: " + message , exception ) ; } } protected Object logMessage ( Exchange exchange ) { return exchange ; } public Log getLog ( ) { return log ; } public void setLog ( Log log ) { this . log = log ; } public LoggingLevel getLevel ( ) { return level ; } public void setLevel ( LoggingLevel level ) { this . level = level ; } } 	1	['14', '1', '0', '11', '39', '31', '5', '6', '13', '0.346153846', '326', '1', '2', '0', '0.321428571', '0', '0', '22.14285714', '8', '2.1429', '1']
package org . apache . camel . model ; import java . util . ArrayList ; import java . util . Collections ; import java . util . List ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlAttribute ; import javax . xml . bind . annotation . XmlRootElement ; import javax . xml . bind . annotation . XmlTransient ; import javax . xml . bind . annotation . XmlElementRef ; import org . apache . camel . Endpoint ; import org . apache . camel . Processor ; import org . apache . camel . util . ObjectHelper ; import org . apache . camel . impl . RouteContext ; import org . apache . camel . processor . SendProcessor ; @ XmlRootElement ( name = "to" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class ToType extends ProcessorType { @ XmlAttribute private String uri ; @ XmlAttribute private String ref ; @ XmlElementRef private List < InterceptorType > interceptors = new ArrayList < InterceptorType > ( ) ; @ XmlTransient private Endpoint endpoint ; public ToType ( ) { } public ToType ( String uri ) { setUri ( uri ) ; } public ToType ( Endpoint endpoint ) { setEndpoint ( endpoint ) ; } @ Override public String toString ( ) { return "To[" + getLabel ( ) + "]" ; } @ Override public String getLabel ( ) { return FromType . description ( getUri ( ) , getRef ( ) , getEndpoint ( ) ) ; } @ Override public Processor createProcessor ( RouteContext routeContext ) throws Exception { Endpoint endpoint = resolveEndpoint ( routeContext ) ; return new SendProcessor ( endpoint ) ; } public Endpoint resolveEndpoint ( RouteContext context ) { if ( endpoint == null ) { endpoint = context . resolveEndpoint ( getUri ( ) , getRef ( ) ) ; } return endpoint ; } public String getUri ( ) { return uri ; } public void setUri ( String uri ) { this . uri = uri ; } public String getRef ( ) { return ref ; } public void setRef ( String ref ) { this . ref = ref ; } public Endpoint getEndpoint ( ) { return endpoint ; } public void setEndpoint ( Endpoint endpoint ) { this . endpoint = endpoint ; } public List < ProcessorType > getOutputs ( ) { return Collections . EMPTY_LIST ; } public List < InterceptorType > getInterceptors ( ) { return interceptors ; } public void setInterceptors ( List < InterceptorType > interceptors ) { this . interceptors = interceptors ; } public Object getUriOrRef ( ) { if ( ObjectHelper . isNullOrBlank ( uri ) ) { return uri ; } else if ( endpoint != null ) { return endpoint . getEndpointUri ( ) ; } return ref ; } } 	1	['17', '2', '0', '9', '27', '92', '3', '7', '17', '0.703125', '141', '1', '1', '0.869158879', '0.294117647', '1', '4', '7.058823529', '3', '1', '2']
package org . apache . camel . component . file ; import org . apache . camel . AsyncCallback ; import org . apache . camel . Exchange ; import org . apache . camel . Processor ; import org . apache . camel . component . file . strategy . FileProcessStrategy ; import org . apache . camel . impl . ScheduledPollConsumer ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import java . io . File ; import java . util . concurrent . ConcurrentHashMap ; import java . util . concurrent . ExecutionException ; import java . util . concurrent . Future ; public class FileConsumer extends ScheduledPollConsumer < FileExchange > { private static final transient Log LOG = LogFactory . getLog ( FileConsumer . class ) ; private final FileEndpoint endpoint ; private boolean recursive = true ; private String regexPattern = "" ; private long lastPollTime ; boolean generateEmptyExchangeWhenIdle ; public FileConsumer ( final FileEndpoint endpoint , Processor processor ) { super ( endpoint , processor ) ; this . endpoint = endpoint ; } protected void poll ( ) throws Exception { int rc = pollFileOrDirectory ( endpoint . getFile ( ) , isRecursive ( ) ) ; if ( rc == 0 && generateEmptyExchangeWhenIdle ) { final FileExchange exchange = endpoint . createExchange ( ( File ) null ) ; getAsyncProcessor ( ) . process ( exchange , new AsyncCallback ( ) { public void done ( boolean sync ) { } } ) ; } lastPollTime = System . currentTimeMillis ( ) ; } protected int pollFileOrDirectory ( File fileOrDirectory , boolean processDir ) { if ( ! fileOrDirectory . isDirectory ( ) ) { return pollFile ( fileOrDirectory ) ; } else if ( processDir ) { int rc = 0 ; if ( isValidFile ( fileOrDirectory ) ) { LOG . debug ( "Polling directory " + fileOrDirectory ) ; File [ ] files = fileOrDirectory . listFiles ( ) ; for ( int i = 0 ; i < files . length ; i ++ ) { rc += pollFileOrDirectory ( files [ i ] , isRecursive ( ) ) ; } } return rc ; } else { LOG . debug ( "Skipping directory " + fileOrDirectory ) ; return 0 ; } } ConcurrentHashMap < File , File > filesBeingProcessed = new ConcurrentHashMap < File , File > ( ) ; protected int pollFile ( final File file ) { if ( ! file . exists ( ) ) { return 0 ; } if ( ! isValidFile ( file ) ) { return 0 ; } if ( endpoint . isNoop ( ) ) { long fileModified = file . lastModified ( ) ; if ( fileModified <= lastPollTime ) { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Ignoring file: " + file + " as modified time: " + fileModified + " less than last poll time: " + lastPollTime ) ; } return 0 ; } } else { if ( filesBeingProcessed . contains ( file ) ) { return 1 ; } filesBeingProcessed . put ( file , file ) ; } final FileProcessStrategy processStrategy = endpoint . getFileStrategy ( ) ; final FileExchange exchange = endpoint . createExchange ( file ) ; endpoint . configureMessage ( file , exchange . getIn ( ) ) ; try { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "About to process file:  " + file + " using exchange: " + exchange ) ; } if ( processStrategy . begin ( endpoint , exchange , file ) ) { getAsyncProcessor ( ) . process ( exchange , new AsyncCallback ( ) { public void done ( boolean sync ) { if ( exchange . getException ( ) == null ) { try { processStrategy . commit ( endpoint , ( FileExchange ) exchange , file ) ; } catch ( Exception e ) { handleException ( e ) ; } } else { handleException ( exchange . getException ( ) ) ; } filesBeingProcessed . remove ( file ) ; } } ) ; } else { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( endpoint + " cannot process file: " + file ) ; } } } catch ( Throwable e ) { handleException ( e ) ; } return 1 ; } protected boolean isValidFile ( File file ) { boolean result = false ; if ( file != null && file . exists ( ) ) { if ( isMatched ( file ) ) { result = true ; } } return result ; } protected boolean isMatched ( File file ) { String name = file . getName ( ) ; if ( regexPattern != null && regexPattern . length ( ) > 0 ) { if ( ! name . matches ( getRegexPattern ( ) ) ) { return false ; } } String [ ] prefixes = endpoint . getExcludedNamePrefixes ( ) ; if ( prefixes != null ) { for ( String prefix : prefixes ) { if ( name . startsWith ( prefix ) ) { return false ; } } } String [ ] postfixes = endpoint . getExcludedNamePostfixes ( ) ; if ( postfixes != null ) { for ( String postfix : postfixes ) { if ( name . endsWith ( postfix ) ) { return false ; } } } return true ; } public boolean isRecursive ( ) { return this . recursive ; } public void setRecursive ( boolean recursive ) { this . recursive = recursive ; } public String getRegexPattern ( ) { return this . regexPattern ; } public void setRegexPattern ( String regexPattern ) { this . regexPattern = regexPattern ; } public boolean isGenerateEmptyExchangeWhenIdle ( ) { return generateEmptyExchangeWhenIdle ; } public void setGenerateEmptyExchangeWhenIdle ( boolean generateEmptyExchangeWhenIdle ) { this . generateEmptyExchangeWhenIdle = generateEmptyExchangeWhenIdle ; } } 	1	['16', '4', '0', '14', '52', '72', '3', '14', '7', '0.780952381', '396', '0.714285714', '2', '0.708333333', '0.225', '1', '1', '23.3125', '10', '2.3125', '6']
package org . apache . camel . component . jmx ; import javax . management . MBeanServer ; import javax . management . Notification ; import javax . management . ObjectName ; import javax . management . monitor . CounterMonitor ; import org . apache . camel . Consumer ; import org . apache . camel . Processor ; import org . apache . camel . Producer ; import org . apache . camel . ExchangePattern ; import org . apache . camel . impl . DefaultEndpoint ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class JMXEndpoint extends DefaultEndpoint < JMXExchange > { private static final Log LOG = LogFactory . getLog ( JMXEndpoint . class ) ; private String name ; private ObjectName ourName ; private String observedObjectName ; private String attributeName ; private long granularityPeriod = 5000 ; private Number threshold ; private Number offset ; private MBeanServer mbeanServer ; private CounterMonitor counterMonitor = new CounterMonitor ( ) ; protected JMXEndpoint ( String endpointUri , JMXComponent component ) { super ( endpointUri , component ) ; observedObjectName = endpointUri ; } public Producer < JMXExchange > createProducer ( ) throws Exception { throw new RuntimeException ( "Not supported" ) ; } public Consumer < JMXExchange > createConsumer ( Processor proc ) throws Exception { ObjectName observedName = new ObjectName ( observedObjectName ) ; if ( name == null ) { String type = observedName . getKeyProperty ( "type" ) ; type = type != null ? type : "UNKNOWN" ; name = mbeanServer . getDefaultDomain ( ) + ":type=CounterMonitor_" + type ; } JMXConsumer result = new JMXConsumer ( this , proc ) ; ourName = new ObjectName ( name ) ; counterMonitor . setNotify ( true ) ; counterMonitor . addObservedObject ( observedName ) ; counterMonitor . setObservedAttribute ( attributeName ) ; counterMonitor . setGranularityPeriod ( granularityPeriod ) ; counterMonitor . setDifferenceMode ( false ) ; counterMonitor . setInitThreshold ( threshold ) ; counterMonitor . setOffset ( offset ) ; mbeanServer . registerMBean ( counterMonitor , ourName ) ; mbeanServer . addNotificationListener ( ourName , result , null , new Object ( ) ) ; return result ; } public boolean isSingleton ( ) { return true ; } public JMXExchange createExchange ( Notification notification ) { return new JMXExchange ( getContext ( ) , getExchangePattern ( ) , notification ) ; } public JMXExchange createExchange ( ) { return new JMXExchange ( getContext ( ) , getExchangePattern ( ) , null ) ; } public JMXExchange createExchange ( ExchangePattern pattern ) { return new JMXExchange ( getContext ( ) , pattern , null ) ; } public String getAttributeName ( ) { return attributeName ; } public void setAttributeName ( String attributeName ) { this . attributeName = attributeName ; } public long getGranularityPeriod ( ) { return granularityPeriod ; } public void setGranularityPeriod ( long granularityPeriod ) { this . granularityPeriod = granularityPeriod ; } public String getName ( ) { return name ; } public void setName ( String name ) { this . name = name ; } public Number getOffset ( ) { return offset ; } public void setOffset ( Number offset ) { this . offset = offset ; } public Number getThreshold ( ) { return threshold ; } public void setThreshold ( Number threshold ) { this . threshold = threshold ; } public MBeanServer getMbeanServer ( ) { return mbeanServer ; } public void setMbeanServer ( MBeanServer mbeanServer ) { this . mbeanServer = mbeanServer ; } } 	1	['22', '2', '0', '13', '44', '189', '2', '13', '20', '0.928571429', '232', '1', '1', '0.459459459', '0.174603175', '1', '1', '9.090909091', '1', '0.9091', '2']
package org . apache . camel . component . bean ; import org . apache . camel . CamelContext ; import org . apache . camel . Expression ; import org . apache . camel . language . LanguageAnnotation ; import org . apache . camel . spi . Language ; import org . apache . camel . util . ObjectHelper ; import java . lang . annotation . Annotation ; import java . lang . reflect . Method ; public class DefaultAnnotationExpressionFactory implements AnnotationExpressionFactory { public Expression createExpression ( CamelContext camelContext , Annotation annotation , LanguageAnnotation languageAnnotation , Class expressionReturnType ) { String languageName = languageAnnotation . language ( ) ; if ( languageName == null ) { throw new IllegalArgumentException ( "Cannot determine the language from the annotation: " + annotation ) ; } Language language = camelContext . resolveLanguage ( languageName ) ; if ( language == null ) { throw new IllegalArgumentException ( "Cannot find the language: " + languageName + " on the classpath" ) ; } String expression = getExpressionFromAnnotation ( annotation ) ; return language . createExpression ( expression ) ; } protected String getExpressionFromAnnotation ( Annotation annotation ) { try { Method method = annotation . getClass ( ) . getMethod ( "value" ) ; Object value = ObjectHelper . invokeMethod ( method , annotation ) ; if ( value == null ) { throw new IllegalArgumentException ( "Cannot determine the expression from the annotation: " + annotation ) ; } return value . toString ( ) ; } catch ( NoSuchMethodException e ) { throw new IllegalArgumentException ( "Cannot determine the expression of the annotation: " + annotation + " as it does not have an value() method" ) ; } } } 	1	['3', '1', '1', '7', '16', '3', '1', '6', '2', '2', '96', '0', '0', '0', '0.533333333', '0', '0', '31', '3', '1.6667', '2']
package org . apache . camel . processor . loadbalancer ; import java . util . HashMap ; import java . util . Iterator ; import java . util . List ; import java . util . Map ; import org . apache . camel . Exchange ; import org . apache . camel . Expression ; import org . apache . camel . Processor ; public class StickyLoadBalancer extends QueueLoadBalancer { private Expression < Exchange > correlationExpression ; private QueueLoadBalancer loadBalancer ; private int numberOfHashGroups = 64 * 1024 ; private Map < Object , Processor > stickyMap = new HashMap < Object , Processor > ( ) ; public StickyLoadBalancer ( Expression < Exchange > correlationExpression ) { this ( correlationExpression , new RoundRobinLoadBalancer ( ) ) ; } public StickyLoadBalancer ( Expression < Exchange > correlationExpression , QueueLoadBalancer loadBalancer ) { this . correlationExpression = correlationExpression ; this . loadBalancer = loadBalancer ; } protected synchronized Processor chooseProcessor ( List < Processor > processors , Exchange exchange ) { Object value = correlationExpression . evaluate ( exchange ) ; Object key = getStickyKey ( value ) ; Processor processor ; synchronized ( stickyMap ) { processor = stickyMap . get ( key ) ; if ( processor == null ) { processor = loadBalancer . chooseProcessor ( processors , exchange ) ; stickyMap . put ( key , processor ) ; } } return processor ; } @ Override public void removeProcessor ( Processor processor ) { synchronized ( stickyMap ) { Iterator < Map . Entry < Object , Processor > > iter = stickyMap . entrySet ( ) . iterator ( ) ; while ( iter . hasNext ( ) ) { Map . Entry < Object , Processor > entry = iter . next ( ) ; if ( processor . equals ( entry . getValue ( ) ) ) { iter . remove ( ) ; } } } super . removeProcessor ( processor ) ; } public int getNumberOfHashGroups ( ) { return numberOfHashGroups ; } public void setNumberOfHashGroups ( int numberOfHashGroups ) { this . numberOfHashGroups = numberOfHashGroups ; } protected Object getStickyKey ( Object value ) { int hashCode = 37 ; if ( value != null ) { hashCode = value . hashCode ( ) ; } if ( numberOfHashGroups > 0 ) { hashCode = hashCode % numberOfHashGroups ; } return hashCode ; } } 	1	['7', '3', '0', '5', '24', '3', '0', '5', '5', '0.5', '141', '1', '2', '0.5', '0.267857143', '2', '2', '18.57142857', '3', '1.2857', '2']
package org . apache . camel . impl . converter ; import org . apache . camel . AsyncCallback ; import org . apache . camel . AsyncProcessor ; import org . apache . camel . Exchange ; import org . apache . camel . Processor ; import org . apache . camel . Service ; import org . apache . camel . TypeConverter ; import org . apache . camel . processor . DelegateProcessor ; public class AsyncProcessorTypeConverter implements TypeConverter { public static final class ProcessorToAsynProcessorBridge extends DelegateProcessor implements AsyncProcessor { private ProcessorToAsynProcessorBridge ( Processor processor ) { super ( processor ) ; } public boolean process ( Exchange exchange , AsyncCallback callback ) { try { processor . process ( exchange ) ; } catch ( Throwable e ) { exchange . setException ( e ) ; } callback . done ( true ) ; return true ; } } public < T > T convertTo ( Class < T > toType , Object value ) { if ( value != null ) { if ( toType . equals ( AsyncProcessor . class ) ) { if ( value instanceof AsyncProcessor ) { return toType . cast ( value ) ; } else if ( value instanceof Processor ) { final Processor processor = ( Processor ) value ; return toType . cast ( new ProcessorToAsynProcessorBridge ( processor ) ) ; } } } return null ; } public static AsyncProcessor convert ( Processor value ) { if ( value instanceof AsyncProcessor ) { return ( AsyncProcessor ) value ; } return new ProcessorToAsynProcessorBridge ( value ) ; } } 	1	['3', '1', '0', '16', '7', '3', '11', '5', '3', '2', '47', '0', '0', '0', '0.416666667', '0', '0', '14.66666667', '5', '2.3333', '2']
package org . apache . camel . management ; import java . io . IOException ; import org . apache . camel . Endpoint ; import org . apache . camel . Route ; import org . springframework . jmx . export . annotation . ManagedAttribute ; import org . springframework . jmx . export . annotation . ManagedOperation ; import org . springframework . jmx . export . annotation . ManagedResource ; @ ManagedResource ( description = "Managed Route" , currencyTimeLimit = 15 ) public class ManagedRoute { public static final String VALUE_UNKNOWN = "Unknown" ; private Route route ; private String description ; ManagedRoute ( Route route ) { this . route = route ; this . description = route . toString ( ) ; } public Route getRoute ( ) { return route ; } @ ManagedAttribute ( description = "Route Endpoint Uri" ) public String getEndpointUri ( ) { Endpoint ep = route . getEndpoint ( ) ; return ep != null ? ep . getEndpointUri ( ) : VALUE_UNKNOWN ; } @ ManagedAttribute ( description = "Route description" ) public String getDescription ( ) { return description ; } @ ManagedOperation ( description = "Start Route" ) public void start ( ) throws IOException { throw new IOException ( "Not supported" ) ; } @ ManagedOperation ( description = "Stop Route" ) public void stop ( ) throws IOException { throw new IOException ( "Not supported" ) ; } } 	1	['6', '1', '0', '4', '11', '7', '2', '2', '5', '0.866666667', '46', '0.666666667', '1', '0', '0.583333333', '0', '0', '6.166666667', '2', '1', '1']
package org . apache . camel . util ; import org . apache . camel . RuntimeCamelException ; import org . apache . camel . Body ; import org . apache . camel . converter . ObjectConverter ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import java . lang . annotation . Annotation ; import java . lang . reflect . InvocationTargetException ; import java . lang . reflect . Method ; import java . nio . charset . Charset ; import java . util . ArrayList ; import java . util . Collection ; import java . util . Iterator ; import java . util . List ; import java . io . OutputStream ; import java . io . Closeable ; import java . io . IOException ; public class ObjectHelper { private static final transient Log LOG = LogFactory . getLog ( ObjectHelper . class ) ; private ObjectHelper ( ) { } public static boolean equals ( Object a , Object b ) { if ( a == b ) { return true ; } return a != null && b != null && a . equals ( b ) ; } public static boolean isEqualToAny ( Object object , Object ... values ) { for ( Object value : values ) { if ( equals ( object , value ) ) { return true ; } } return false ; } public static int compare ( Object a , Object b ) { if ( a == b ) { return 0 ; } if ( a == null ) { return - 1 ; } if ( b == null ) { return 1 ; } if ( a instanceof Comparable ) { Comparable comparable = ( Comparable ) a ; return comparable . compareTo ( b ) ; } else { int answer = a . getClass ( ) . getName ( ) . compareTo ( b . getClass ( ) . getName ( ) ) ; if ( answer == 0 ) { answer = a . hashCode ( ) - b . hashCode ( ) ; } return answer ; } } public static void notNull ( Object value , String name ) { if ( value == null ) { throw new IllegalArgumentException ( name + " must be specified" ) ; } } public static String [ ] splitOnCharacter ( String value , String needle , int count ) { String rc [ ] = new String [ count ] ; rc [ 0 ] = value ; for ( int i = 1 ; i < count ; i ++ ) { String v = rc [ i - 1 ] ; int p = v . indexOf ( needle ) ; if ( p < 0 ) { return rc ; } rc [ i - 1 ] = v . substring ( 0 , p ) ; rc [ i ] = v . substring ( p + 1 ) ; } return rc ; } public static String removeStartingCharacters ( String text , char ch ) { int idx = 0 ; while ( text . charAt ( idx ) == ch ) { idx ++ ; } if ( idx > 0 ) { return text . substring ( idx ) ; } return text ; } public static String capitalize ( String text ) { int length = text . length ( ) ; if ( text == null || length == 0 ) { return text ; } String answer = text . substring ( 0 , 1 ) . toUpperCase ( ) ; if ( length > 1 ) { answer += text . substring ( 1 , length ) ; } return answer ; } public static boolean contains ( Object collectionOrArray , Object value ) { if ( collectionOrArray instanceof Collection ) { Collection collection = ( Collection ) collectionOrArray ; return collection . contains ( value ) ; } else { Iterator iter = ObjectConverter . iterator ( value ) ; while ( iter . hasNext ( ) ) { if ( equals ( value , iter . next ( ) ) ) { return true ; } } return false ; } } public static boolean matches ( List list ) { if ( ! list . isEmpty ( ) ) { Object value = list . get ( 0 ) ; if ( value instanceof Boolean ) { Boolean flag = ( Boolean ) value ; return flag . booleanValue ( ) ; } else { return true ; } } return false ; } public static boolean isNotNullAndNonEmpty ( String text ) { return text != null && text . trim ( ) . length ( ) > 0 ; } public static boolean isNullOrBlank ( String text ) { return text == null || text . trim ( ) . length ( ) <= 0 ; } public static String getSystemProperty ( String name , String defaultValue ) { try { return System . getProperty ( name , defaultValue ) ; } catch ( Exception e ) { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Caught security exception accessing system property: " + name + ". Reason: " + e , e ) ; } return defaultValue ; } } public static String name ( Class type ) { return type != null ? type . getName ( ) : null ; } public static String className ( Object value ) { return name ( value != null ? value . getClass ( ) : null ) ; } public static Class < ? > loadClass ( String name ) { return loadClass ( name , ObjectHelper . class . getClassLoader ( ) ) ; } public static Class < ? > loadClass ( String name , ClassLoader loader ) { ClassLoader contextClassLoader = Thread . currentThread ( ) . getContextClassLoader ( ) ; if ( contextClassLoader != null ) { try { return contextClassLoader . loadClass ( name ) ; } catch ( ClassNotFoundException e ) { try { return loader . loadClass ( name ) ; } catch ( ClassNotFoundException e1 ) { LOG . debug ( "Could not find class: " + name + ". Reason: " + e ) ; } } } return null ; } public static Object invokeMethod ( Method method , Object instance , Object ... parameters ) { try { return method . invoke ( instance , parameters ) ; } catch ( IllegalAccessException e ) { throw new RuntimeCamelException ( e ) ; } catch ( InvocationTargetException e ) { throw new RuntimeCamelException ( e . getCause ( ) ) ; } } public static List < Method > findMethodsWithAnnotation ( Class < ? > type , Class < ? extends Annotation > annotationType ) { List < Method > answer = new ArrayList < Method > ( ) ; do { Method [ ] methods = type . getDeclaredMethods ( ) ; for ( Method method : methods ) { if ( method . getAnnotation ( annotationType ) != null ) { answer . add ( method ) ; } } type = type . getSuperclass ( ) ; } while ( type != null ) ; return answer ; } public static String asString ( Object [ ] objects ) { if ( objects == null ) { return "null" ; } else { StringBuffer buffer = new StringBuffer ( "{" ) ; int counter = 0 ; for ( Object object : objects ) { if ( counter ++ > 0 ) { buffer . append ( ", " ) ; } String text = ( object == null ) ? "null" : object . toString ( ) ; buffer . append ( text ) ; } buffer . append ( "}" ) ; return buffer . toString ( ) ; } } public static boolean isAssignableFrom ( Class a , Class b ) { a = convertPrimitiveTypeToWrapperType ( a ) ; b = convertPrimitiveTypeToWrapperType ( b ) ; return a . isAssignableFrom ( b ) ; } public static Class convertPrimitiveTypeToWrapperType ( Class type ) { Class rc = type ; if ( type . isPrimitive ( ) ) { if ( type == int . class ) { rc = Integer . class ; } else if ( type == long . class ) { rc = Long . class ; } else if ( type == double . class ) { rc = Double . class ; } else if ( type == float . class ) { rc = Float . class ; } else if ( type == short . class ) { rc = Short . class ; } else if ( type == byte . class ) { rc = Byte . class ; } } return rc ; } public static String getDefaultCharacterSet ( ) { return Charset . defaultCharset ( ) . name ( ) ; } public static String getPropertyName ( Method method ) { String propertyName = method . getName ( ) ; if ( propertyName . startsWith ( "set" ) && method . getParameterTypes ( ) . length == 1 ) { propertyName = propertyName . substring ( 3 , 4 ) . toLowerCase ( ) + propertyName . substring ( 4 ) ; } return propertyName ; } public static boolean hasAnnotation ( Annotation [ ] annotations , Class < ? > type ) { for ( Annotation annotation : annotations ) { if ( type . isInstance ( annotation ) ) { return true ; } } return false ; } public static void close ( Closeable closeable , String name , Log log ) { if ( closeable != null ) { try { closeable . close ( ) ; } catch ( IOException e ) { log . warn ( "Could not close " + name + ". Reason: " + e , e ) ; } } } public static < T > T cast ( Class < T > toType , Object value ) { if ( toType == boolean . class ) { return ( T ) cast ( Boolean . class , value ) ; } else if ( toType . isPrimitive ( ) ) { Class newType = convertPrimitiveTypeToWrapperType ( toType ) ; if ( newType != toType ) { return ( T ) cast ( newType , value ) ; } } try { return toType . cast ( value ) ; } catch ( ClassCastException e ) { throw new IllegalArgumentException ( "Failed to convert: " + value + " to type: " + toType . getName ( ) + " due to: " + e , e ) ; } } public static < T > T newInstance ( Class < T > type ) { try { return type . newInstance ( ) ; } catch ( InstantiationException e ) { throw new RuntimeCamelException ( e . getCause ( ) ) ; } catch ( IllegalAccessException e ) { throw new RuntimeCamelException ( e ) ; } } public static < T > T newInstance ( Class < ? > actualType , Class < T > expectedType ) { try { Object value = actualType . newInstance ( ) ; return cast ( expectedType , value ) ; } catch ( InstantiationException e ) { throw new RuntimeCamelException ( e . getCause ( ) ) ; } catch ( IllegalAccessException e ) { throw new RuntimeCamelException ( e ) ; } } } 	1	['30', '1', '0', '73', '92', '429', '69', '4', '28', '0.896551724', '693', '1', '1', '0', '0.103448276', '1', '1', '22.06666667', '8', '2.7333', '8']
package org . apache . camel . view ; import java . util . ArrayList ; import java . util . List ; import org . apache . camel . model . * ; import static org . apache . camel . util . ObjectHelper . isNotNullAndNonEmpty ; import static org . apache . camel . util . ObjectHelper . isNullOrBlank ; public class NodeData { public String id ; private final String imagePrefix ; public String image ; public String label ; public String shape ; public String edgeLabel ; public String tooltop ; public String nodeType ; public boolean nodeWritten ; public String url ; public List < ProcessorType > outputs ; public String association = "property" ; public NodeData ( String id , Object node , String imagePrefix ) { this . id = id ; this . imagePrefix = imagePrefix ; if ( node instanceof ProcessorType ) { ProcessorType processorType = ( ProcessorType ) node ; this . edgeLabel = processorType . getLabel ( ) ; } if ( node instanceof FromType ) { FromType fromType = ( FromType ) node ; this . tooltop = fromType . getLabel ( ) ; this . label = removeQueryString ( this . tooltop ) ; this . url = "http://activemq.apache.org/camel/message-endpoint.html" ; } else if ( node instanceof ToType ) { ToType toType = ( ToType ) node ; this . tooltop = toType . getLabel ( ) ; this . label = removeQueryString ( this . tooltop ) ; this . edgeLabel = "" ; this . url = "http://activemq.apache.org/camel/message-endpoint.html" ; } else if ( node instanceof FilterType ) { this . image = imagePrefix + "MessageFilterIcon.gif" ; this . nodeType = "Message Filter" ; } else if ( node instanceof WhenType ) { this . image = imagePrefix + "MessageFilterIcon.gif" ; this . nodeType = "When Filter" ; this . url = "http://activemq.apache.org/camel/content-based-router.html" ; } else if ( node instanceof OtherwiseType ) { this . nodeType = "Otherwise" ; this . edgeLabel = "" ; this . url = "http://activemq.apache.org/camel/content-based-router.html" ; this . tooltop = "Otherwise" ; } else if ( node instanceof ChoiceType ) { this . image = imagePrefix + "ContentBasedRouterIcon.gif" ; this . nodeType = "Content Based Router" ; this . label = "" ; this . edgeLabel = "" ; ChoiceType choice = ( ChoiceType ) node ; List < ProcessorType > outputs = new ArrayList < ProcessorType > ( choice . getWhenClauses ( ) ) ; outputs . add ( choice . getOtherwise ( ) ) ; this . outputs = outputs ; } else if ( node instanceof RecipientListType ) { this . image = imagePrefix + "RecipientListIcon.gif" ; this . nodeType = "Recipient List" ; } else if ( node instanceof SplitterType ) { this . image = imagePrefix + "SplitterIcon.gif" ; this . nodeType = "Splitter" ; } else if ( node instanceof AggregatorType ) { this . image = imagePrefix + "AggregatorIcon.gif" ; this . nodeType = "Aggregator" ; } else if ( node instanceof ResequencerType ) { this . image = imagePrefix + "ResequencerIcon.gif" ; this . nodeType = "Resequencer" ; } if ( isNullOrBlank ( this . nodeType ) ) { String name = node . getClass ( ) . getName ( ) ; int idx = name . lastIndexOf ( '.' ) ; if ( idx > 0 ) { name = name . substring ( idx + 1 ) ; } if ( name . endsWith ( "Type" ) ) { name = name . substring ( 0 , name . length ( ) - 4 ) ; } this . nodeType = insertSpacesBetweenCamelCase ( name ) ; } if ( this . label == null ) { if ( isNullOrBlank ( this . image ) ) { this . label = this . nodeType ; this . shape = "box" ; } else if ( isNotNullAndNonEmpty ( this . edgeLabel ) ) { this . label = "" ; } else { this . label = node . toString ( ) ; } } if ( isNullOrBlank ( this . tooltop ) ) { if ( isNotNullAndNonEmpty ( this . nodeType ) ) { String description = isNotNullAndNonEmpty ( this . edgeLabel ) ? this . edgeLabel : this . label ; this . tooltop = this . nodeType + ": " + description ; } else { this . tooltop = this . label ; } } if ( isNullOrBlank ( this . url ) && isNotNullAndNonEmpty ( this . nodeType ) ) { this . url = "http://activemq.apache.org/camel/" + this . nodeType . toLowerCase ( ) . replace ( ' ' , '-' ) + ".html" ; } if ( node instanceof ProcessorType && this . outputs == null ) { ProcessorType processorType = ( ProcessorType ) node ; this . outputs = processorType . getOutputs ( ) ; } } protected String removeQueryString ( String text ) { int idx = text . indexOf ( "?" ) ; if ( idx <= 0 ) { return text ; } else { return text . substring ( 0 , idx ) ; } } public static String insertSpacesBetweenCamelCase ( String name ) { boolean lastCharacterLowerCase = false ; StringBuffer buffer = new StringBuffer ( ) ; for ( int i = 0 , size = name . length ( ) ; i < size ; i ++ ) { char ch = name . charAt ( i ) ; if ( Character . isUpperCase ( ch ) ) { if ( lastCharacterLowerCase ) { buffer . append ( ' ' ) ; } lastCharacterLowerCase = false ; } else { lastCharacterLowerCase = true ; } buffer . append ( ch ) ; } return buffer . toString ( ) ; } } 	1	['3', '1', '0', '15', '33', '3', '3', '12', '2', '1.041666667', '431', '0.083333333', '0', '0', '0.666666667', '0', '0', '138.6666667', '4', '2', '4']
package org . apache . camel . component . jmx ; import javax . management . Notification ; import org . apache . camel . impl . DefaultMessage ; public class JMXMessage extends DefaultMessage { private Notification notification ; public JMXMessage ( ) { this ( null ) ; } public JMXMessage ( Notification notification ) { this . notification = notification ; } @ Override public String toString ( ) { return "JMXMessage: " + notification ; } @ Override public JMXExchange getExchange ( ) { return ( JMXExchange ) super . getExchange ( ) ; } @ Override public JMXMessage newInstance ( ) { return new JMXMessage ( ) ; } public Notification getNotification ( ) { return notification ; } } 	1	['9', '3', '0', '4', '12', '30', '1', '4', '9', '0.25', '50', '1', '0', '0.766666667', '0.555555556', '2', '5', '4.444444444', '1', '0.7778', '1']
package org . apache . camel . language ; import java . lang . annotation . Retention ; import java . lang . annotation . RetentionPolicy ; import java . lang . annotation . Target ; import java . lang . annotation . ElementType ; @ Retention ( RetentionPolicy . RUNTIME ) @ Target ( { ElementType . FIELD , ElementType . METHOD , ElementType . CONSTRUCTOR } ) public @ interface LanguageExpression { String language ( ) ; String expression ( ) ; } 	1	['2', '1', '0', '0', '2', '1', '0', '0', '2', '2', '2', '0', '0', '0', '1', '0', '0', '0', '1', '1', '1']
package org . apache . camel . management ; import org . apache . camel . Endpoint ; import org . springframework . jmx . export . annotation . ManagedAttribute ; import org . springframework . jmx . export . annotation . ManagedResource ; @ ManagedResource ( description = "Managed Endpoint" , currencyTimeLimit = 15 ) public class ManagedEndpoint { private Endpoint endpoint ; public ManagedEndpoint ( Endpoint endpoint ) { this . endpoint = endpoint ; } public Endpoint getEndpoint ( ) { return endpoint ; } @ ManagedAttribute ( description = "Endpoint Uri" ) public String getUri ( ) throws Exception { return endpoint . getEndpointUri ( ) ; } } 	1	['3', '1', '0', '3', '5', '0', '2', '1', '3', '0', '17', '1', '1', '0', '0.666666667', '0', '0', '4.333333333', '1', '0.6667', '1']
package org . apache . camel . processor . validation ; import javax . xml . transform . dom . DOMResult ; import javax . xml . validation . Schema ; import org . xml . sax . ErrorHandler ; import org . apache . camel . Exchange ; import org . apache . camel . ValidationException ; public interface ValidatorErrorHandler extends ErrorHandler { void reset ( ) ; void handleErrors ( Exchange exchange , Schema schema , DOMResult result ) throws ValidationException ; } 	1	['2', '1', '0', '4', '2', '1', '2', '2', '2', '2', '2', '0', '0', '0', '0.625', '0', '0', '0', '1', '1', '1']
package org . apache . camel . impl ; import org . apache . camel . CamelContext ; import org . apache . camel . Component ; import org . apache . camel . Exchange ; import org . apache . camel . spi . ComponentResolver ; import org . apache . camel . util . FactoryFinder ; import org . apache . camel . util . NoFactoryAvailableException ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class DefaultComponentResolver < E extends Exchange > implements ComponentResolver < E > { private static final transient Log LOG = LogFactory . getLog ( DefaultComponentResolver . class ) ; protected static final FactoryFinder COMPONENT_FACTORY = new FactoryFinder ( "META-INF/services/org/apache/camel/component/" ) ; public Component < E > resolveComponent ( String name , CamelContext context ) { Object bean = null ; try { bean = context . getRegistry ( ) . lookup ( name ) ; if ( bean != null && LOG . isDebugEnabled ( ) ) { LOG . debug ( "Found component: " + name + " in registry: " + bean ) ; } } catch ( Exception e ) { LOG . debug ( "Ignored error looking up bean: " + name + ". Error: " + e ) ; } if ( bean != null ) { if ( bean instanceof Component ) { return ( Component ) bean ; } else { throw new IllegalArgumentException ( "Bean with name: " + name + " in registry is not a Component: " + bean ) ; } } Class type ; try { type = COMPONENT_FACTORY . findClass ( name ) ; } catch ( NoFactoryAvailableException e ) { return null ; } catch ( Throwable e ) { throw new IllegalArgumentException ( "Invalid URI, no Component registered for scheme : " + name , e ) ; } if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Found component: " + name + " via type: " + type . getName ( ) + " via " + COMPONENT_FACTORY . getPath ( ) + name ) ; } if ( type == null ) { return null ; } if ( Component . class . isAssignableFrom ( type ) ) { return ( Component < E > ) context . getInjector ( ) . newInstance ( type ) ; } else { throw new IllegalArgumentException ( "Type is not a Component implementation. Found: " + type . getName ( ) ) ; } } } 	1	['3', '1', '0', '10', '22', '1', '1', '9', '2', '0.5', '157', '1', '2', '0', '0.666666667', '0', '0', '50.66666667', '6', '2', '1']
package org . apache . camel . model ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlAttribute ; import javax . xml . bind . annotation . XmlElementRef ; import javax . xml . bind . annotation . XmlRootElement ; import org . apache . camel . Processor ; import org . apache . camel . processor . MarshalProcessor ; import org . apache . camel . spi . DataFormat ; import org . apache . camel . impl . RouteContext ; import org . apache . camel . model . dataformat . DataFormatType ; import static org . apache . camel . util . ObjectHelper . notNull ; @ XmlRootElement ( name = "marshal" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class MarshalType extends OutputType { @ XmlAttribute ( required = false ) private String ref ; @ XmlElementRef private DataFormatType dataFormatType ; public MarshalType ( ) { } public MarshalType ( DataFormatType dataFormatType ) { this . dataFormatType = dataFormatType ; } public MarshalType ( String ref ) { this . ref = ref ; } @ Override public String toString ( ) { if ( dataFormatType != null ) { return "Marshal[" + dataFormatType + "]" ; } else { return "Marshal[ref:  " + ref + "]" ; } } public String getRef ( ) { return ref ; } public void setRef ( String ref ) { this . ref = ref ; } public DataFormatType getDataFormatType ( ) { return dataFormatType ; } public void setDataFormatType ( DataFormatType dataFormatType ) { this . dataFormatType = dataFormatType ; } @ Override public Processor createProcessor ( RouteContext routeContext ) { DataFormatType type = getDataFormatType ( ) ; if ( type == null ) { notNull ( ref , "ref or dataFormatType" ) ; type = routeContext . lookup ( ref , DataFormatType . class ) ; } DataFormat dataFormat = type . getDataFormat ( routeContext ) ; return new MarshalProcessor ( dataFormat ) ; } } 	1	['9', '3', '0', '8', '18', '4', '1', '7', '9', '0.5', '92', '1', '1', '0.942307692', '0.388888889', '1', '2', '9', '2', '0.8889', '3']
package org . apache . camel . impl ; import java . net . URI ; import java . util . Map ; import java . util . concurrent . ScheduledExecutorService ; import java . util . concurrent . ScheduledThreadPoolExecutor ; import java . util . concurrent . ThreadFactory ; import org . apache . camel . CamelContext ; import org . apache . camel . Component ; import org . apache . camel . Endpoint ; import org . apache . camel . Exchange ; import org . apache . camel . util . IntrospectionSupport ; import org . apache . camel . util . ObjectHelper ; import org . apache . camel . util . URISupport ; import org . apache . camel . util . UnsafeUriCharactersEncoder ; public abstract class DefaultComponent < E extends Exchange > extends ServiceSupport implements Component < E > { private int defaultThreadPoolSize = 5 ; private CamelContext camelContext ; private ScheduledExecutorService executorService ; public DefaultComponent ( ) { } public DefaultComponent ( CamelContext context ) { this . camelContext = context ; } public Endpoint < E > createEndpoint ( String uri ) throws Exception { ObjectHelper . notNull ( getCamelContext ( ) , "camelContext" ) ; URI u = new URI ( UnsafeUriCharactersEncoder . encode ( uri ) ) ; String path = u . getSchemeSpecificPart ( ) ; if ( path . startsWith ( "//" ) ) { path = path . substring ( 2 ) ; } int idx = path . indexOf ( '?' ) ; if ( idx > 0 ) { path = path . substring ( 0 , idx ) ; } Map parameters = URISupport . parseParamters ( u ) ; Endpoint < E > endpoint = createEndpoint ( uri , path , parameters ) ; if ( endpoint == null ) { return null ; } if ( parameters != null ) { if ( endpoint instanceof ScheduledPollEndpoint ) { ScheduledPollEndpoint scheduledPollEndpoint = ( ScheduledPollEndpoint ) endpoint ; scheduledPollEndpoint . configureProperties ( parameters ) ; } setProperties ( endpoint , parameters ) ; } return endpoint ; } public CamelContext getCamelContext ( ) { return camelContext ; } public void setCamelContext ( CamelContext context ) { this . camelContext = context ; } public ScheduledExecutorService getExecutorService ( ) { if ( executorService == null ) { executorService = createExecutorService ( ) ; } return executorService ; } public void setExecutorService ( ScheduledExecutorService executorService ) { this . executorService = executorService ; } protected ScheduledExecutorService createExecutorService ( ) { return new ScheduledThreadPoolExecutor ( defaultThreadPoolSize , new ThreadFactory ( ) { int counter ; public synchronized Thread newThread ( Runnable runnable ) { Thread thread = new Thread ( runnable ) ; thread . setName ( "Thread: " + ( ++ counter ) + " " + DefaultComponent . this . toString ( ) ) ; return thread ; } } ) ; } protected void doStart ( ) throws Exception { } protected void doStop ( ) throws Exception { if ( executorService != null ) { executorService . shutdown ( ) ; } } protected abstract Endpoint < E > createEndpoint ( String uri , String remaining , Map parameters ) throws Exception ; protected void setProperties ( Object bean , Map parameters ) throws Exception { IntrospectionSupport . setProperties ( getCamelContext ( ) . getTypeConverter ( ) , bean , parameters ) ; } } 	1	['12', '2', '24', '36', '28', '48', '26', '11', '7', '0.727272727', '139', '1', '1', '0.565217391', '0.277777778', '1', '1', '10.33333333', '2', '0.9167', '3']
package org . apache . camel . model ; import java . util . List ; import javax . xml . bind . annotation . XmlElementRef ; public interface RouteContainer { @ XmlElementRef List < RouteType > getRoutes ( ) ; void setRoutes ( List < RouteType > routes ) ; } 	1	['2', '1', '0', '2', '2', '1', '2', '0', '2', '2', '2', '0', '0', '0', '0.75', '0', '0', '0', '1', '1', '2']
package org . apache . camel . component . file . strategy ; import java . io . File ; import java . io . RandomAccessFile ; import java . nio . channels . Channel ; import java . nio . channels . FileChannel ; import java . nio . channels . FileLock ; import org . apache . camel . component . file . FileEndpoint ; import org . apache . camel . component . file . FileExchange ; import org . apache . camel . util . ExchangeHelper ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public abstract class FileProcessStrategySupport implements FileProcessStrategy { public static final String DEFAULT_LOCK_FILE_POSTFIX = ".cameLock" ; private static final transient Log LOG = LogFactory . getLog ( FileProcessStrategySupport . class ) ; private boolean lockFile ; private FileRenamer lockFileRenamer ; protected FileProcessStrategySupport ( ) { this ( true ) ; } protected FileProcessStrategySupport ( boolean lockFile ) { this ( lockFile , new DefaultFileRenamer ( null , DEFAULT_LOCK_FILE_POSTFIX ) ) ; } protected FileProcessStrategySupport ( boolean lockFile , FileRenamer lockFileRenamer ) { this . lockFile = lockFile ; this . lockFileRenamer = lockFileRenamer ; } public boolean begin ( FileEndpoint endpoint , FileExchange exchange , File file ) throws Exception { if ( isLockFile ( ) ) { File newFile = lockFileRenamer . renameFile ( file ) ; String lockFileName = newFile . getAbsolutePath ( ) ; if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Locking the file: " + file + " using the lock file name: " + lockFileName ) ; } FileChannel channel = new RandomAccessFile ( lockFileName , "rw" ) . getChannel ( ) ; FileLock lock = channel . lock ( ) ; if ( lock != null ) { exchange . setProperty ( "org.apache.camel.fileChannel" , channel ) ; exchange . setProperty ( "org.apache.camel.file.lock" , lock ) ; exchange . setProperty ( "org.apache.camel.file.lock.name" , lockFileName ) ; return true ; } return false ; } return true ; } public void commit ( FileEndpoint endpoint , FileExchange exchange , File file ) throws Exception { if ( isLockFile ( ) ) { Channel channel = ExchangeHelper . getMandatoryProperty ( exchange , "org.apache.camel.fileChannel" , Channel . class ) ; String lockfile = ExchangeHelper . getMandatoryProperty ( exchange , "org.apache.camel.file.lock.name" , String . class ) ; if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( "Unlocking file: " + file ) ; } channel . close ( ) ; File lock = new File ( lockfile ) ; lock . delete ( ) ; } } public boolean isLockFile ( ) { return lockFile ; } public void setLockFile ( boolean lockFile ) { this . lockFile = lockFile ; } public FileRenamer getLockFileRenamer ( ) { return lockFileRenamer ; } public void setLockFileRenamer ( FileRenamer lockFileRenamer ) { this . lockFileRenamer = lockFileRenamer ; } } 	1	['10', '1', '3', '12', '29', '21', '3', '9', '6', '0.722222222', '151', '0.75', '2', '0', '0.37037037', '0', '0', '13.7', '1', '0.6', '1']
package org . apache . camel . management ; import java . util . Collection ; import javax . management . JMException ; import org . apache . camel . CamelContext ; import org . apache . camel . Endpoint ; import org . apache . camel . spi . InstrumentationAgent ; import org . apache . camel . spi . LifecycleStrategy ; import org . apache . camel . Route ; import org . apache . camel . Service ; import org . apache . camel . impl . DefaultCamelContext ; import org . apache . camel . impl . ServiceSupport ; import org . apache . camel . model . RouteType ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class InstrumentationLifecycleStrategy implements LifecycleStrategy { private static final transient Log LOG = LogFactory . getLog ( InstrumentationProcessor . class ) ; private InstrumentationAgent agent ; private CamelNamingStrategy namingStrategy ; public InstrumentationLifecycleStrategy ( InstrumentationAgent agent ) { this . agent = agent ; setNamingStrategy ( agent . getNamingStrategy ( ) ) ; } public void onContextCreate ( CamelContext context ) { if ( context instanceof DefaultCamelContext ) { try { DefaultCamelContext dc = ( DefaultCamelContext ) context ; ManagedService ms = new ManagedService ( dc ) ; agent . register ( ms , getNamingStrategy ( ) . getObjectName ( dc ) ) ; } catch ( JMException e ) { LOG . warn ( "Could not register CamelContext MBean" , e ) ; } } } public void onEndpointAdd ( Endpoint endpoint ) { try { ManagedEndpoint me = new ManagedEndpoint ( endpoint ) ; agent . register ( me , getNamingStrategy ( ) . getObjectName ( me ) ) ; } catch ( JMException e ) { LOG . warn ( "Could not register Endpoint MBean" , e ) ; } } public void onRoutesAdd ( Collection < Route > routes ) { for ( Route route : routes ) { try { ManagedRoute mr = new ManagedRoute ( route ) ; agent . register ( mr , getNamingStrategy ( ) . getObjectName ( mr ) ) ; } catch ( JMException e ) { LOG . warn ( "Could not register Route MBean" , e ) ; } } } public void onServiceAdd ( CamelContext context , Service service ) { if ( service instanceof ServiceSupport ) { try { ManagedService ms = new ManagedService ( ( ServiceSupport ) service ) ; agent . register ( ms , getNamingStrategy ( ) . getObjectName ( context , ms ) ) ; } catch ( JMException e ) { LOG . warn ( "Could not register Service MBean" , e ) ; } } } public void beforeStartRouteType ( CamelContext context , RouteType routeType ) { PerformanceCounter mc = new PerformanceCounter ( ) ; routeType . intercept ( new InstrumentationProcessor ( mc ) ) ; } public CamelNamingStrategy getNamingStrategy ( ) { return namingStrategy ; } public void setNamingStrategy ( CamelNamingStrategy namingStrategy ) { this . namingStrategy = namingStrategy ; } } 	1	['9', '1', '0', '20', '27', '6', '1', '19', '8', '0.416666667', '147', '1', '3', '0', '0.265625', '0', '0', '15', '2', '1.1111', '9']
package org . apache . camel . spi ; import java . util . Collection ; import org . apache . camel . CamelContext ; import org . apache . camel . Endpoint ; import org . apache . camel . Route ; import org . apache . camel . Service ; import org . apache . camel . model . RouteType ; public interface LifecycleStrategy { void onContextCreate ( CamelContext context ) ; void onEndpointAdd ( Endpoint endpoint ) ; void onServiceAdd ( CamelContext context , Service service ) ; void onRoutesAdd ( Collection < Route > routes ) ; void beforeStartRouteType ( CamelContext context , RouteType routeType ) ; } 	1	['5', '1', '0', '8', '5', '10', '5', '4', '5', '2', '5', '0', '0', '0', '0.4', '0', '0', '0', '1', '1', '4']
package org . apache . camel . builder ; import org . apache . camel . model . ProcessorType ; import org . apache . camel . model . dataformat . ArtixDSContentType ; import org . apache . camel . model . dataformat . ArtixDSDataFormat ; import org . apache . camel . model . dataformat . DataFormatType ; import org . apache . camel . model . dataformat . JaxbDataFormat ; import org . apache . camel . model . dataformat . SerializationDataFormat ; import org . apache . camel . model . dataformat . XMLBeansDataFormat ; import org . apache . camel . spi . DataFormat ; public class DataTypeExpression < T extends ProcessorType > { private final ProcessorType < T > processorType ; private final Operation operation ; public enum Operation { Marshal , Unmarshal } ; public DataTypeExpression ( ProcessorType < T > processorType , Operation operation ) { this . processorType = processorType ; this . operation = operation ; } public T serialization ( ) { return dataFormat ( new SerializationDataFormat ( ) ) ; } public T jaxb ( ) { return dataFormat ( new JaxbDataFormat ( ) ) ; } public T jaxb ( boolean prettyPrint ) { return dataFormat ( new JaxbDataFormat ( prettyPrint ) ) ; } public T xmlBeans ( ) { return dataFormat ( new XMLBeansDataFormat ( ) ) ; } public T artixDS ( ) { return dataFormat ( new ArtixDSDataFormat ( ) ) ; } public T artixDS ( Class < ? > dataObjectType ) { return dataFormat ( new ArtixDSDataFormat ( dataObjectType ) ) ; } public T artixDS ( Class < ? > elementType , ArtixDSContentType contentType ) { return dataFormat ( new ArtixDSDataFormat ( elementType , contentType ) ) ; } public T artixDS ( ArtixDSContentType contentType ) { return dataFormat ( new ArtixDSDataFormat ( contentType ) ) ; } private T dataFormat ( DataFormatType dataFormatType ) { switch ( operation ) { case Unmarshal : return processorType . unmarshal ( dataFormatType ) ; case Marshal : return processorType . marshal ( dataFormatType ) ; default : throw new IllegalArgumentException ( "Unknown value: " + operation ) ; } } } 	1	['10', '1', '0', '9', '27', '43', '1', '9', '9', '0', '103', '1', '2', '0', '0.257142857', '0', '0', '9.1', '4', '1.2', '3']
package org . apache . camel . impl . converter ; import org . apache . camel . TypeConverter ; import org . apache . camel . spi . Injector ; public interface TypeConverterRegistry { void addTypeConverter ( Class toType , Class fromType , TypeConverter typeConverter ) ; Injector getInjector ( ) ; } 	1	['2', '1', '0', '8', '2', '1', '6', '2', '2', '2', '2', '0', '0', '0', '0.666666667', '0', '0', '0', '1', '1', '2']
package org . apache . camel . component . seda ; import java . util . concurrent . TimeUnit ; import org . apache . camel . AlreadyStoppedException ; import org . apache . camel . AsyncCallback ; import org . apache . camel . AsyncProcessor ; import org . apache . camel . Consumer ; import org . apache . camel . Exchange ; import org . apache . camel . Processor ; import org . apache . camel . impl . ServiceSupport ; import org . apache . camel . impl . converter . AsyncProcessorTypeConverter ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class SedaConsumer extends ServiceSupport implements Consumer , Runnable { private static final Log LOG = LogFactory . getLog ( SedaConsumer . class ) ; private SedaEndpoint endpoint ; private AsyncProcessor processor ; private Thread thread ; public SedaConsumer ( SedaEndpoint endpoint , Processor processor ) { this . endpoint = endpoint ; this . processor = AsyncProcessorTypeConverter . convert ( processor ) ; } @ Override public String toString ( ) { return "SedaConsumer: " + endpoint . getEndpointUri ( ) ; } public void run ( ) { while ( isRunAllowed ( ) ) { final Exchange exchange ; try { exchange = endpoint . getQueue ( ) . poll ( 1000 , TimeUnit . MILLISECONDS ) ; } catch ( InterruptedException e ) { break ; } if ( exchange != null && isRunAllowed ( ) ) { processor . process ( exchange , new AsyncCallback ( ) { public void done ( boolean sync ) { } } ) ; } } } protected void doStart ( ) throws Exception { thread = new Thread ( this , getThreadName ( endpoint . getEndpointUri ( ) ) ) ; thread . setDaemon ( true ) ; thread . start ( ) ; } protected void doStop ( ) throws Exception { thread . join ( ) ; } } 	1	['6', '2', '0', '11', '23', '1', '2', '11', '3', '0.75', '88', '1', '3', '0.764705882', '0.466666667', '1', '2', '13', '2', '0.8333', '2']
package org . apache . camel . component . vm ; import java . util . HashMap ; import java . util . Map ; import java . util . concurrent . BlockingQueue ; import java . util . concurrent . atomic . AtomicInteger ; import org . apache . camel . Endpoint ; import org . apache . camel . Exchange ; import org . apache . camel . component . seda . SedaComponent ; import org . apache . camel . component . seda . SedaEndpoint ; public class VmComponent extends SedaComponent { private static final AtomicInteger START_COUNTER = new AtomicInteger ( ) ; protected static Map < String , BlockingQueue > queues = new HashMap < String , BlockingQueue > ( ) ; @ Override protected Endpoint createEndpoint ( String uri , String remaining , Map parameters ) throws Exception { BlockingQueue < Exchange > blockingQueue = getBlockingQueue ( uri ) ; return new SedaEndpoint ( uri , this , blockingQueue ) ; } protected BlockingQueue < Exchange > getBlockingQueue ( String uri ) { synchronized ( queues ) { BlockingQueue < Exchange > answer = queues . get ( uri ) ; if ( answer == null ) { answer = createQueue ( ) ; queues . put ( uri , answer ) ; } return answer ; } } @ Override protected void doStart ( ) throws Exception { super . doStart ( ) ; START_COUNTER . incrementAndGet ( ) ; } @ Override protected void doStop ( ) throws Exception { super . doStop ( ) ; if ( START_COUNTER . decrementAndGet ( ) == 0 ) { synchronized ( queues ) { for ( BlockingQueue q : queues . values ( ) ) { q . clear ( ) ; } queues . clear ( ) ; } } } } 	1	['6', '4', '0', '4', '23', '5', '0', '4', '1', '0.5', '99', '1', '0', '0.862068966', '0.533333333', '2', '2', '15.16666667', '2', '0.8333', '4']
package org . apache . camel . impl ; import java . util . ArrayList ; import java . util . Collection ; import java . util . List ; import org . apache . camel . CamelContext ; import org . apache . camel . Endpoint ; import org . apache . camel . NoSuchEndpointException ; import org . apache . camel . Processor ; import org . apache . camel . Route ; import org . apache . camel . AsyncProcessor ; import org . apache . camel . impl . converter . AsyncProcessorTypeConverter ; import org . apache . camel . model . FromType ; import org . apache . camel . model . ProcessorType ; import org . apache . camel . model . RouteType ; import org . apache . camel . processor . Interceptor ; import org . apache . camel . processor . Pipeline ; import org . apache . camel . processor . ProceedProcessor ; import org . apache . camel . processor . UnitOfWorkProcessor ; public class RouteContext { private final RouteType route ; private final FromType from ; private final Collection < Route > routes ; private Endpoint endpoint ; private List < Processor > eventDrivenProcessors = new ArrayList < Processor > ( ) ; private Interceptor lastInterceptor ; public RouteContext ( RouteType route , FromType from , Collection < Route > routes ) { this . route = route ; this . from = from ; this . routes = routes ; } public Endpoint getEndpoint ( ) { if ( endpoint == null ) { endpoint = from . resolveEndpoint ( this ) ; } return endpoint ; } public FromType getFrom ( ) { return from ; } public RouteType getRoute ( ) { return route ; } public CamelContext getCamelContext ( ) { return getRoute ( ) . getCamelContext ( ) ; } public Processor createProcessor ( ProcessorType node ) throws Exception { return node . createOutputsProcessor ( this ) ; } public Endpoint resolveEndpoint ( String uri ) { return route . resolveEndpoint ( uri ) ; } public Endpoint resolveEndpoint ( String uri , String ref ) { Endpoint endpoint = null ; if ( uri != null ) { endpoint = resolveEndpoint ( uri ) ; if ( endpoint == null ) { throw new NoSuchEndpointException ( uri ) ; } } if ( ref != null ) { endpoint = lookup ( ref , Endpoint . class ) ; if ( endpoint == null ) { throw new NoSuchEndpointException ( "ref:" + ref ) ; } } if ( endpoint == null ) { throw new IllegalArgumentException ( "Either 'uri' or 'ref' must be specified on: " + this ) ; } else { return endpoint ; } } public < T > T lookup ( String name , Class < T > type ) { return getCamelContext ( ) . getRegistry ( ) . lookup ( name , type ) ; } public void commit ( ) { if ( ! eventDrivenProcessors . isEmpty ( ) ) { Processor processor = Pipeline . newInstance ( eventDrivenProcessors ) ; final AsyncProcessor asyncProcessor = AsyncProcessorTypeConverter . convert ( processor ) ; Processor unitOfWorkProcessor = new UnitOfWorkProcessor ( asyncProcessor ) ; routes . add ( new EventDrivenConsumerRoute ( getEndpoint ( ) , unitOfWorkProcessor ) ) ; } } public void addEventDrivenProcessor ( Processor processor ) { eventDrivenProcessors . add ( processor ) ; } public void intercept ( Interceptor interceptor ) { getRoute ( ) . intercept ( interceptor ) ; lastInterceptor = interceptor ; } public Processor createProceedProcessor ( ) { if ( lastInterceptor == null ) { throw new IllegalArgumentException ( "Cannot proceed() from outside of an interceptor!" ) ; } else { return new ProceedProcessor ( lastInterceptor ) ; } } } 	1	['13', '1', '0', '48', '36', '58', '35', '16', '13', '0.805555556', '183', '1', '4', '0', '0.196581197', '0', '0', '12.61538462', '6', '1.5385', '4']
package org . apache . camel . util ; import java . util . HashMap ; import java . util . Map ; import org . apache . camel . AsyncCallback ; import org . apache . camel . Endpoint ; import org . apache . camel . Exchange ; import org . apache . camel . FailedToCreateProducerException ; import org . apache . camel . Processor ; import org . apache . camel . Producer ; import org . apache . camel . RuntimeCamelException ; import org . apache . camel . ExchangePattern ; import org . apache . camel . impl . ServiceSupport ; import org . apache . camel . impl . converter . AsyncProcessorTypeConverter ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class ProducerCache < E extends Exchange > extends ServiceSupport { private static final Log LOG = LogFactory . getLog ( ProducerCache . class ) ; private Map < String , Producer < E > > producers = new HashMap < String , Producer < E > > ( ) ; public synchronized Producer < E > getProducer ( Endpoint < E > endpoint ) { String key = endpoint . getEndpointUri ( ) ; Producer < E > answer = producers . get ( key ) ; if ( answer == null ) { try { answer = endpoint . createProducer ( ) ; answer . start ( ) ; } catch ( Exception e ) { throw new FailedToCreateProducerException ( endpoint , e ) ; } producers . put ( key , answer ) ; } return answer ; } public void send ( Endpoint < E > endpoint , E exchange ) { try { Producer < E > producer = getProducer ( endpoint ) ; producer . process ( exchange ) ; } catch ( Exception e ) { throw new RuntimeCamelException ( e ) ; } } public E send ( Endpoint < E > endpoint , Processor processor ) { try { Producer < E > producer = getProducer ( endpoint ) ; E exchange = producer . createExchange ( ) ; return sendExchange ( endpoint , producer , processor , exchange ) ; } catch ( Exception e ) { throw new RuntimeCamelException ( e ) ; } } public E send ( Endpoint < E > endpoint , Processor processor , AsyncCallback callback ) { try { Producer < E > producer = getProducer ( endpoint ) ; E exchange = producer . createExchange ( ) ; boolean sync = sendExchange ( endpoint , producer , processor , exchange , callback ) ; setProcessedSync ( exchange , sync ) ; return exchange ; } catch ( Exception e ) { throw new RuntimeCamelException ( e ) ; } } public static boolean isProcessedSync ( Exchange exchange ) { Boolean rc = exchange . getProperty ( ProducerCache . class . getName ( ) + ".SYNC" , Boolean . class ) ; return rc == null ? false : rc ; } public static void setProcessedSync ( Exchange exchange , boolean b ) { exchange . setProperty ( ProducerCache . class . getName ( ) + ".SYNC" , b ? Boolean . TRUE : Boolean . FALSE ) ; } public E send ( Endpoint < E > endpoint , ExchangePattern pattern , Processor processor ) { try { Producer < E > producer = getProducer ( endpoint ) ; E exchange = producer . createExchange ( pattern ) ; return sendExchange ( endpoint , producer , processor , exchange ) ; } catch ( Exception e ) { throw new RuntimeCamelException ( e ) ; } } protected E sendExchange ( Endpoint < E > endpoint , Producer < E > producer , Processor processor , E exchange ) throws Exception { processor . process ( exchange ) ; if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( ">>>> " + endpoint + " " + exchange ) ; } producer . process ( exchange ) ; return exchange ; } protected boolean sendExchange ( Endpoint < E > endpoint , Producer < E > producer , Processor processor , E exchange , AsyncCallback callback ) throws Exception { processor . process ( exchange ) ; if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( ">>>> " + endpoint + " " + exchange ) ; } return AsyncProcessorTypeConverter . convert ( producer ) . process ( exchange , callback ) ; } protected void doStop ( ) throws Exception { ServiceHelper . stopServices ( producers . values ( ) ) ; } protected void doStart ( ) throws Exception { } } 	1	['13', '2', '0', '16', '41', '66', '2', '14', '8', '0.541666667', '236', '1', '1', '0.541666667', '0.34375', '1', '1', '17', '2', '1.0769', '1']
package org . apache . camel . component . seda ; import java . util . Map ; import java . util . concurrent . BlockingQueue ; import java . util . concurrent . LinkedBlockingQueue ; import org . apache . camel . Endpoint ; import org . apache . camel . Exchange ; import org . apache . camel . impl . DefaultComponent ; public class SedaComponent extends DefaultComponent { public BlockingQueue < Exchange > createQueue ( ) { return new LinkedBlockingQueue < Exchange > ( 1000 ) ; } @ Override protected Endpoint createEndpoint ( String uri , String remaining , Map parameters ) throws Exception { return new SedaEndpoint ( uri , this ) ; } } 	1	['3', '3', '2', '5', '6', '3', '3', '3', '2', '2', '17', '0', '0', '0.92', '0.555555556', '1', '1', '4.666666667', '1', '0.6667', '1']
package org . apache . camel . component . timer ; import org . apache . camel . Exchange ; import org . apache . camel . Processor ; import org . apache . camel . component . bean . BeanExchange ; import org . apache . camel . component . bean . BeanInvocation ; import org . apache . camel . impl . DefaultConsumer ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import java . lang . reflect . InvocationHandler ; import java . lang . reflect . InvocationTargetException ; import java . lang . reflect . Method ; import java . lang . reflect . Proxy ; import java . util . Timer ; import java . util . TimerTask ; public class TimerConsumer extends DefaultConsumer < Exchange > { private static final transient Log LOG = LogFactory . getLog ( TimerConsumer . class ) ; private final TimerEndpoint endpoint ; private TimerTask task ; public TimerConsumer ( TimerEndpoint endpoint , Processor processor ) { super ( endpoint , processor ) ; this . endpoint = endpoint ; } @ Override protected void doStart ( ) throws Exception { task = new TimerTask ( ) { @ Override public void run ( ) { sendTimerExchange ( ) ; } } ; Timer timer = endpoint . getTimer ( ) ; configureTask ( task , timer ) ; } @ Override protected void doStop ( ) throws Exception { task . cancel ( ) ; } protected void configureTask ( TimerTask task , Timer timer ) { if ( endpoint . isFixedRate ( ) ) { if ( endpoint . getTime ( ) != null ) { timer . scheduleAtFixedRate ( task , endpoint . getTime ( ) , endpoint . getPeriod ( ) ) ; } else { timer . scheduleAtFixedRate ( task , endpoint . getDelay ( ) , endpoint . getPeriod ( ) ) ; } } else { if ( endpoint . getTime ( ) != null ) { if ( endpoint . getPeriod ( ) >= 0 ) { timer . schedule ( task , endpoint . getTime ( ) , endpoint . getPeriod ( ) ) ; } else { timer . schedule ( task , endpoint . getTime ( ) ) ; } } else { if ( endpoint . getPeriod ( ) >= 0 ) { timer . schedule ( task , endpoint . getDelay ( ) , endpoint . getPeriod ( ) ) ; } else { timer . schedule ( task , endpoint . getDelay ( ) ) ; } } } } protected void sendTimerExchange ( ) { Exchange exchange = endpoint . createExchange ( ) ; exchange . setProperty ( "org.apache.camel.timer.name" , endpoint . getTimerName ( ) ) ; exchange . setProperty ( "org.apache.camel.timer.time" , endpoint . getTime ( ) ) ; exchange . setProperty ( "org.apache.camel.timer.period" , endpoint . getPeriod ( ) ) ; try { getProcessor ( ) . process ( exchange ) ; } catch ( Exception e ) { LOG . error ( "Caught: " + e , e ) ; } } } 	1	['6', '3', '0', '8', '32', '0', '2', '8', '1', '0.666666667', '161', '1', '2', '0.846153846', '0.36', '1', '1', '25.33333333', '6', '1.5', '1']
package org . apache . camel . builder ; import org . apache . camel . Exchange ; import org . apache . camel . Processor ; import org . apache . camel . model . ExceptionType ; import java . util . List ; public interface ErrorHandlerBuilder { ErrorHandlerBuilder copy ( ) ; Processor createErrorHandler ( Processor processor ) throws Exception ; void addErrorHandlers ( ExceptionType exception ) ; } 	1	['3', '1', '0', '12', '3', '3', '11', '2', '3', '2', '3', '0', '0', '0', '0.555555556', '0', '0', '0', '1', '1', '1']
package org . apache . camel . model . language ; import javax . xml . bind . annotation . XmlRootElement ; @ XmlRootElement ( name = "xpath" ) public class XPathExpression extends ExpressionType { public XPathExpression ( ) { } public XPathExpression ( String expression ) { super ( expression ) ; } public String getLanguage ( ) { return "xpath" ; } } 	1	['3', '2', '0', '1', '5', '3', '0', '1', '3', '2', '12', '0', '0', '0.923076923', '0.666666667', '1', '2', '3', '1', '0.3333', '1']
package org . apache . camel . component . bean ; import java . lang . reflect . InvocationTargetException ; import java . lang . reflect . Method ; import org . apache . camel . CamelContext ; import org . apache . camel . Exchange ; import org . apache . camel . Message ; import org . apache . camel . Processor ; import org . apache . camel . impl . ServiceSupport ; import org . apache . camel . spi . Registry ; import org . apache . camel . util . CamelContextHelper ; import org . apache . camel . util . ObjectHelper ; import static org . apache . camel . util . ObjectHelper . isNullOrBlank ; import org . apache . camel . util . ServiceHelper ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class BeanProcessor extends ServiceSupport implements Processor { public static final String METHOD_NAME = "org.apache.camel.MethodName" ; private static final Log LOG = LogFactory . getLog ( BeanProcessor . class ) ; private final Object pojo ; private final BeanInfo beanInfo ; private Method method ; private String methodName ; private final Processor processor ; public BeanProcessor ( Object pojo , BeanInfo beanInfo ) { this . pojo = pojo ; this . beanInfo = beanInfo ; this . processor = CamelContextHelper . convertTo ( beanInfo . getCamelContext ( ) , Processor . class , pojo ) ; } public BeanProcessor ( Object pojo , CamelContext camelContext , ParameterMappingStrategy parameterMappingStrategy ) { this ( pojo , new BeanInfo ( camelContext , pojo . getClass ( ) , parameterMappingStrategy ) ) ; } public BeanProcessor ( Object pojo , CamelContext camelContext ) { this ( pojo , camelContext , createParameterMappingStrategy ( camelContext ) ) ; } public static ParameterMappingStrategy createParameterMappingStrategy ( CamelContext camelContext ) { Registry registry = camelContext . getRegistry ( ) ; ParameterMappingStrategy answer = registry . lookup ( ParameterMappingStrategy . class . getName ( ) , ParameterMappingStrategy . class ) ; if ( answer == null ) { answer = new DefaultParameterMappingStrategy ( ) ; } return answer ; } @ Override public String toString ( ) { String description = method != null ? " " + method : "" ; return "BeanProcessor[" + pojo + description + "]" ; } public void process ( Exchange exchange ) throws Exception { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( ">>>> invoking method for: " + exchange ) ; } if ( processor != null ) { processor . process ( exchange ) ; return ; } Message in = exchange . getIn ( ) ; BeanInvocation beanInvoke = in . getBody ( BeanInvocation . class ) ; if ( beanInvoke != null ) { beanInvoke . invoke ( pojo , exchange ) ; return ; } MethodInvocation invocation ; if ( method != null ) { invocation = beanInfo . createInvocation ( method , pojo , exchange ) ; } else { if ( ObjectHelper . isNotNullAndNonEmpty ( methodName ) ) { if ( isNullOrBlank ( in . getHeader ( METHOD_NAME , String . class ) ) ) { in . setHeader ( METHOD_NAME , methodName ) ; } } invocation = beanInfo . createInvocation ( pojo , exchange ) ; } if ( invocation == null ) { throw new IllegalStateException ( "No method invocation could be created, no maching method could be found on: " + pojo ) ; } try { Object value = invocation . proceed ( ) ; if ( value != null ) { exchange . getOut ( ) . setBody ( value ) ; } } catch ( InvocationTargetException e ) { Throwable cause = e . getTargetException ( ) ; if ( cause instanceof Exception ) { throw ( Exception ) cause ; } else { throw e ; } } catch ( Exception e ) { throw e ; } catch ( Throwable throwable ) { throw new Exception ( throwable ) ; } } public Method getMethod ( ) { return method ; } public void setMethod ( Method method ) { this . method = method ; } public String getMethodName ( ) { return methodName ; } public void setMethodName ( String methodName ) { this . methodName = methodName ; } protected void doStart ( ) throws Exception { ServiceHelper . startService ( processor ) ; } protected void doStop ( ) throws Exception { ServiceHelper . stopService ( processor ) ; } } 	1	['13', '2', '0', '22', '47', '44', '6', '16', '10', '0.797619048', '248', '0.857142857', '3', '0.590909091', '0.229166667', '1', '1', '17.53846154', '2', '0.8462', '9']
package org . apache . camel ; import org . apache . camel . impl . MessageSupport ; import java . util . Map ; public interface Message { String getMessageId ( ) ; void setMessageId ( String messageId ) ; Exchange getExchange ( ) ; Object getHeader ( String name ) ; < T > T getHeader ( String name , Class < T > type ) ; void setHeader ( String name , Object value ) ; Object removeHeader ( String name ) ; Map < String , Object > getHeaders ( ) ; void setHeaders ( Map < String , Object > headers ) ; Object getBody ( ) ; < T > T getBody ( Class < T > type ) ; void setBody ( Object body ) ; < T > void setBody ( Object body , Class < T > type ) ; Message copy ( ) ; void copyFrom ( Message message ) ; } 	1	['15', '1', '0', '102', '15', '105', '102', '1', '15', '2', '15', '0', '0', '0', '0.311111111', '0', '0', '0', '1', '1', '2']
package org . apache . camel . builder ; import org . apache . camel . Processor ; public class ConstantProcessorBuilder implements ProcessorFactory { private Processor processor ; public ConstantProcessorBuilder ( Processor processor ) { this . processor = processor ; } public Processor createProcessor ( ) { return processor ; } } 	1	['2', '1', '0', '3', '3', '0', '1', '2', '2', '0', '12', '1', '1', '0', '0.75', '0', '0', '4.5', '1', '0.5', '1']
package org . apache . camel . model . language ; import org . apache . camel . CamelContext ; import org . apache . camel . Exchange ; import org . apache . camel . Expression ; import org . apache . camel . Predicate ; import org . apache . camel . impl . RouteContext ; import org . apache . camel . spi . Language ; import org . apache . camel . util . ObjectHelper ; import org . apache . camel . util . CollectionStringBuffer ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlAttribute ; import javax . xml . bind . annotation . XmlID ; import javax . xml . bind . annotation . XmlTransient ; import javax . xml . bind . annotation . XmlType ; import javax . xml . bind . annotation . XmlValue ; import javax . xml . bind . annotation . adapters . CollapsedStringAdapter ; import javax . xml . bind . annotation . adapters . XmlJavaTypeAdapter ; import java . util . List ; @ XmlType ( name = "expressionType" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class ExpressionType { @ XmlAttribute @ XmlJavaTypeAdapter ( CollapsedStringAdapter . class ) @ XmlID private String id ; @ XmlValue private String expression ; @ XmlTransient private Predicate predicate ; @ XmlTransient private Expression expressionValue ; public static String getLabel ( List < ExpressionType > expressions ) { CollectionStringBuffer buffer = new CollectionStringBuffer ( ) ; for ( ExpressionType expression : expressions ) { buffer . append ( expression . getLabel ( ) ) ; } return buffer . toString ( ) ; } public ExpressionType ( ) { } public ExpressionType ( String expression ) { this . expression = expression ; } public ExpressionType ( Predicate predicate ) { this . predicate = predicate ; } public ExpressionType ( Expression expression ) { this . expressionValue = expression ; } @ Override public String toString ( ) { return getLanguage ( ) + "Expression[" + getExpression ( ) + "]" ; } public String getLanguage ( ) { return "" ; } public Predicate < Exchange > createPredicate ( RouteContext route ) { if ( predicate == null ) { CamelContext camelContext = route . getCamelContext ( ) ; Language language = camelContext . resolveLanguage ( getLanguage ( ) ) ; predicate = language . createPredicate ( getExpression ( ) ) ; } return predicate ; } public Expression createExpression ( RouteContext routeContext ) { if ( expressionValue == null ) { CamelContext camelContext = routeContext . getCamelContext ( ) ; Language language = camelContext . resolveLanguage ( getLanguage ( ) ) ; expressionValue = language . createExpression ( getExpression ( ) ) ; } return expressionValue ; } public String getExpression ( ) { return expression ; } public void setExpression ( String expression ) { this . expression = expression ; } public String getId ( ) { return id ; } public void setId ( String value ) { this . id = value ; } public Predicate getPredicate ( ) { return predicate ; } public Expression getExpressionValue ( ) { return expressionValue ; } public String getLabel ( ) { String language = getExpression ( ) ; if ( ObjectHelper . isNullOrBlank ( language ) ) { Predicate predicate = getPredicate ( ) ; if ( predicate != null ) { return predicate . toString ( ) ; } Expression expressionValue = getExpressionValue ( ) ; if ( expressionValue != null ) { return expressionValue . toString ( ) ; } } else { return language ; } return "" ; } } 	1	['16', '1', '13', '31', '32', '100', '24', '7', '16', '0.783333333', '167', '1', '2', '0', '0.239583333', '0', '0', '9.1875', '3', '1.0625', '3']
package org . apache . camel . util ; import java . net . InetAddress ; import java . net . ServerSocket ; import java . util . logging . Level ; import java . util . logging . Logger ; public class UuidGenerator { private static final Logger LOG = Logger . getLogger ( UuidGenerator . class . getName ( ) ) ; private static final String UNIQUE_STUB ; private static int instanceCount ; private static String hostName ; private String seed ; private long sequence ; static { String stub = "" ; boolean canAccessSystemProps = true ; try { SecurityManager sm = System . getSecurityManager ( ) ; if ( sm != null ) { sm . checkPropertiesAccess ( ) ; } } catch ( SecurityException se ) { canAccessSystemProps = false ; } if ( canAccessSystemProps ) { try { hostName = InetAddress . getLocalHost ( ) . getHostName ( ) ; ServerSocket ss = new ServerSocket ( 0 ) ; stub = "/" + ss . getLocalPort ( ) + "-" + System . currentTimeMillis ( ) + "/" ; Thread . sleep ( 100 ) ; ss . close ( ) ; } catch ( Exception ioe ) { LOG . log ( Level . WARNING , "could not generate unique stub" , ioe ) ; } } else { hostName = "localhost" ; stub = "-1-" + System . currentTimeMillis ( ) + "-" ; } UNIQUE_STUB = stub ; } public UuidGenerator ( String prefix ) { synchronized ( UNIQUE_STUB ) { this . seed = prefix + UNIQUE_STUB + ( instanceCount ++ ) + "-" ; } } public UuidGenerator ( ) { this ( "ID-" + hostName ) ; } public static String getHostName ( ) { return hostName ; } public synchronized String generateId ( ) { return this . seed + ( this . sequence ++ ) ; } public String generateSanitizedId ( ) { String result = generateId ( ) ; result = result . replace ( ':' , '-' ) ; result = result . replace ( '_' , '-' ) ; result = result . replace ( '.' , '-' ) ; return result ; } } 	1	['6', '1', '0', '2', '25', '5', '2', '0', '5', '0.7', '166', '1', '0', '0', '0.5', '0', '0', '25.66666667', '1', '0.5', '2']
package org . apache . camel . impl ; import org . apache . camel . processor . Logger ; import org . apache . camel . processor . LoggingLevel ; import org . apache . camel . spi . ExceptionHandler ; import org . apache . commons . logging . LogFactory ; public class LoggingExceptionHandler implements ExceptionHandler { private final Logger logger ; public LoggingExceptionHandler ( Class ownerType ) { this ( new Logger ( LogFactory . getLog ( ownerType ) , LoggingLevel . ERROR ) ) ; } public LoggingExceptionHandler ( Logger logger ) { this . logger = logger ; } public void handleException ( Throwable exception ) { logger . log ( exception . getMessage ( ) , exception ) ; } } 	1	['3', '1', '0', '9', '8', '1', '4', '5', '3', '0', '26', '1', '1', '0', '0.5', '0', '0', '7.333333333', '1', '0.3333', '1']
package org . apache . camel . impl . converter ; import org . apache . camel . RuntimeCamelException ; import org . apache . camel . TypeConverter ; import org . apache . camel . util . ObjectHelper ; import java . lang . reflect . Method ; public class EnumTypeConverter implements TypeConverter { public < T > T convertTo ( Class < T > type , Object value ) { if ( type . isEnum ( ) && value != null ) { String text = value . toString ( ) ; Method method = null ; try { method = type . getMethod ( "valueOf" , String . class ) ; } catch ( NoSuchMethodException e ) { throw new RuntimeCamelException ( "Could not find valueOf method on enum type: " + type . getName ( ) ) ; } return ( T ) ObjectHelper . invokeMethod ( method , null , text ) ; } return null ; } } 	1	['2', '1', '0', '4', '12', '1', '1', '3', '2', '2', '52', '0', '0', '0', '0.666666667', '0', '0', '25', '3', '1.5', '1']
package org . apache . camel . model ; import org . apache . camel . processor . DelegateProcessor ; import org . apache . camel . impl . RouteContext ; import javax . xml . bind . annotation . XmlType ; @ XmlType ( name = "interceptorType" ) public abstract class InterceptorType { public abstract DelegateProcessor createInterceptor ( RouteContext routeContext ) throws Exception ; } 	1	['2', '1', '1', '4', '3', '1', '2', '2', '2', '2', '5', '0', '0', '0', '0.75', '0', '0', '1.5', '1', '0.5', '4']
package org . apache . camel . util . jndi ; import java . io . Serializable ; import java . util . HashMap ; import java . util . Hashtable ; import java . util . Iterator ; import java . util . Map ; import javax . naming . Binding ; import javax . naming . CompositeName ; import javax . naming . Context ; import javax . naming . LinkRef ; import javax . naming . Name ; import javax . naming . NameClassPair ; import javax . naming . NameNotFoundException ; import javax . naming . NameParser ; import javax . naming . NamingEnumeration ; import javax . naming . NamingException ; import javax . naming . NotContextException ; import javax . naming . OperationNotSupportedException ; import javax . naming . Reference ; import javax . naming . spi . NamingManager ; import org . apache . camel . impl . ReflectionInjector ; import org . apache . camel . spi . Injector ; import org . apache . camel . util . IntrospectionSupport ; import org . apache . camel . util . ObjectHelper ; public class JndiContext implements Context , Serializable { public static final String SEPARATOR = "/" ; protected static final NameParser NAME_PARSER = new NameParser ( ) { public Name parse ( String name ) throws NamingException { return new CompositeName ( name ) ; } } ; protected static final Injector INJETOR = new ReflectionInjector ( ) ; private static final long serialVersionUID = - 5754338187296859149L ; private final Hashtable environment ; private final Map bindings ; private final Map treeBindings ; private boolean frozen ; private String nameInNamespace = "" ; public JndiContext ( ) throws Exception { this ( new Hashtable ( ) ) ; } public JndiContext ( Hashtable env ) throws Exception { this ( env , createBindingsMapFromEnvironment ( env ) ) ; } public JndiContext ( Hashtable environment , Map bindings ) { if ( environment == null ) { this . environment = new Hashtable ( ) ; } else { this . environment = new Hashtable ( environment ) ; } this . bindings = bindings ; treeBindings = new HashMap ( ) ; } public JndiContext ( Hashtable environment , Map bindings , String nameInNamespace ) { this ( environment , bindings ) ; this . nameInNamespace = nameInNamespace ; } protected JndiContext ( JndiContext clone , Hashtable env ) { this . bindings = clone . bindings ; this . treeBindings = clone . treeBindings ; this . environment = new Hashtable ( env ) ; } protected JndiContext ( JndiContext clone , Hashtable env , String nameInNamespace ) { this ( clone , env ) ; this . nameInNamespace = nameInNamespace ; } public static Map createBindingsMapFromEnvironment ( Hashtable env ) throws Exception { Map answer = new HashMap ( env ) ; for ( Object object : env . entrySet ( ) ) { Map . Entry entry = ( Map . Entry ) object ; Object key = entry . getKey ( ) ; Object value = entry . getValue ( ) ; if ( key instanceof String && value instanceof String ) { String keyText = ( String ) key ; String valueText = ( String ) value ; if ( keyText . endsWith ( ".class" ) ) { Class < ? > type = ObjectHelper . loadClass ( valueText ) ; if ( type != null ) { String newEntry = keyText . substring ( 0 , keyText . length ( ) - ".class" . length ( ) ) ; Object bean = createBean ( type , answer , newEntry + "." ) ; if ( bean != null ) { answer . put ( newEntry , bean ) ; } } } } } return answer ; } public void freeze ( ) { frozen = true ; } boolean isFrozen ( ) { return frozen ; } protected Map internalBind ( String name , Object value ) throws NamingException { assert name != null && name . length ( ) > 0 ; assert ! frozen ; Map newBindings = new HashMap ( ) ; int pos = name . indexOf ( '/' ) ; if ( pos == - 1 ) { if ( treeBindings . put ( name , value ) != null ) { throw new NamingException ( "Something already bound at " + name ) ; } bindings . put ( name , value ) ; newBindings . put ( name , value ) ; } else { String segment = name . substring ( 0 , pos ) ; assert segment != null ; assert ! segment . equals ( "" ) ; Object o = treeBindings . get ( segment ) ; if ( o == null ) { o = newContext ( ) ; treeBindings . put ( segment , o ) ; bindings . put ( segment , o ) ; newBindings . put ( segment , o ) ; } else if ( ! ( o instanceof JndiContext ) ) { throw new NamingException ( "Something already bound where a subcontext should go" ) ; } JndiContext defaultContext = ( JndiContext ) o ; String remainder = name . substring ( pos + 1 ) ; Map subBindings = defaultContext . internalBind ( remainder , value ) ; for ( Iterator iterator = subBindings . entrySet ( ) . iterator ( ) ; iterator . hasNext ( ) ; ) { Map . Entry entry = ( Map . Entry ) iterator . next ( ) ; String subName = segment + "/" + ( String ) entry . getKey ( ) ; Object bound = entry . getValue ( ) ; treeBindings . put ( subName , bound ) ; newBindings . put ( subName , bound ) ; } } return newBindings ; } protected JndiContext newContext ( ) { try { return new JndiContext ( ) ; } catch ( Exception e ) { throw new IllegalArgumentException ( e ) ; } } public Object addToEnvironment ( String propName , Object propVal ) throws NamingException { return environment . put ( propName , propVal ) ; } public Hashtable getEnvironment ( ) throws NamingException { return ( Hashtable ) environment . clone ( ) ; } public Object removeFromEnvironment ( String propName ) throws NamingException { return environment . remove ( propName ) ; } public Object lookup ( String name ) throws NamingException { if ( name . length ( ) == 0 ) { return this ; } Object result = treeBindings . get ( name ) ; if ( result == null ) { result = bindings . get ( name ) ; } if ( result == null ) { int pos = name . indexOf ( ':' ) ; if ( pos > 0 ) { String scheme = name . substring ( 0 , pos ) ; Context ctx = NamingManager . getURLContext ( scheme , environment ) ; if ( ctx == null ) { throw new NamingException ( "scheme " + scheme + " not recognized" ) ; } return ctx . lookup ( name ) ; } else { CompositeName path = new CompositeName ( name ) ; if ( path . size ( ) == 0 ) { return this ; } else { String first = path . get ( 0 ) ; Object value = bindings . get ( first ) ; if ( value == null ) { throw new NameNotFoundException ( name ) ; } else if ( value instanceof Context && path . size ( ) > 1 ) { Context subContext = ( Context ) value ; value = subContext . lookup ( path . getSuffix ( 1 ) ) ; } return value ; } } } if ( result instanceof LinkRef ) { LinkRef ref = ( LinkRef ) result ; result = lookup ( ref . getLinkName ( ) ) ; } if ( result instanceof Reference ) { try { result = NamingManager . getObjectInstance ( result , null , null , this . environment ) ; } catch ( NamingException e ) { throw e ; } catch ( Exception e ) { throw ( NamingException ) new NamingException ( "could not look up : " + name ) . initCause ( e ) ; } } if ( result instanceof JndiContext ) { String prefix = getNameInNamespace ( ) ; if ( prefix . length ( ) > 0 ) { prefix = prefix + SEPARATOR ; } result = new JndiContext ( ( JndiContext ) result , environment , prefix + name ) ; } return result ; } public Object lookup ( Name name ) throws NamingException { return lookup ( name . toString ( ) ) ; } public Object lookupLink ( String name ) throws NamingException { return lookup ( name ) ; } public Name composeName ( Name name , Name prefix ) throws NamingException { Name result = ( Name ) prefix . clone ( ) ; result . addAll ( name ) ; return result ; } public String composeName ( String name , String prefix ) throws NamingException { CompositeName result = new CompositeName ( prefix ) ; result . addAll ( new CompositeName ( name ) ) ; return result . toString ( ) ; } public NamingEnumeration list ( String name ) throws NamingException { Object o = lookup ( name ) ; if ( o == this ) { return new ListEnumeration ( ) ; } else if ( o instanceof Context ) { return ( ( Context ) o ) . list ( "" ) ; } else { throw new NotContextException ( ) ; } } public NamingEnumeration listBindings ( String name ) throws NamingException { Object o = lookup ( name ) ; if ( o == this ) { return new ListBindingEnumeration ( ) ; } else if ( o instanceof Context ) { return ( ( Context ) o ) . listBindings ( "" ) ; } else { throw new NotContextException ( ) ; } } public Object lookupLink ( Name name ) throws NamingException { return lookupLink ( name . toString ( ) ) ; } public NamingEnumeration list ( Name name ) throws NamingException { return list ( name . toString ( ) ) ; } public NamingEnumeration listBindings ( Name name ) throws NamingException { return listBindings ( name . toString ( ) ) ; } public void bind ( Name name , Object value ) throws NamingException { bind ( name . toString ( ) , value ) ; } public void bind ( String name , Object value ) throws NamingException { if ( isFrozen ( ) ) { throw new OperationNotSupportedException ( ) ; } else { internalBind ( name , value ) ; } } public void close ( ) throws NamingException { } public Context createSubcontext ( Name name ) throws NamingException { throw new OperationNotSupportedException ( ) ; } public Context createSubcontext ( String name ) throws NamingException { throw new OperationNotSupportedException ( ) ; } public void destroySubcontext ( Name name ) throws NamingException { throw new OperationNotSupportedException ( ) ; } public void destroySubcontext ( String name ) throws NamingException { throw new OperationNotSupportedException ( ) ; } public String getNameInNamespace ( ) throws NamingException { return nameInNamespace ; } public NameParser getNameParser ( Name name ) throws NamingException { return NAME_PARSER ; } public NameParser getNameParser ( String name ) throws NamingException { return NAME_PARSER ; } public void rebind ( Name name , Object value ) throws NamingException { bind ( name , value ) ; } public void rebind ( String name , Object value ) throws NamingException { bind ( name , value ) ; } public void rename ( Name oldName , Name newName ) throws NamingException { throw new OperationNotSupportedException ( ) ; } public void rename ( String oldName , String newName ) throws NamingException { throw new OperationNotSupportedException ( ) ; } public void unbind ( Name name ) throws NamingException { throw new OperationNotSupportedException ( ) ; } public void unbind ( String name ) throws NamingException { throw new OperationNotSupportedException ( ) ; } private abstract class LocalNamingEnumeration implements NamingEnumeration { private Iterator i = bindings . entrySet ( ) . iterator ( ) ; public boolean hasMore ( ) throws NamingException { return i . hasNext ( ) ; } public boolean hasMoreElements ( ) { return i . hasNext ( ) ; } protected Map . Entry getNext ( ) { return ( Map . Entry ) i . next ( ) ; } public void close ( ) throws NamingException { } } private class ListEnumeration extends LocalNamingEnumeration { ListEnumeration ( ) { } public Object next ( ) throws NamingException { return nextElement ( ) ; } public Object nextElement ( ) { Map . Entry entry = getNext ( ) ; return new NameClassPair ( ( String ) entry . getKey ( ) , entry . getValue ( ) . getClass ( ) . getName ( ) ) ; } } private class ListBindingEnumeration extends LocalNamingEnumeration { ListBindingEnumeration ( ) { } public Object next ( ) throws NamingException { return nextElement ( ) ; } public Object nextElement ( ) { Map . Entry entry = getNext ( ) ; return new Binding ( ( String ) entry . getKey ( ) , entry . getValue ( ) ) ; } } protected static Object createBean ( Class < ? > type , Map properties , String prefix ) throws Exception { Object value = INJETOR . newInstance ( type ) ; IntrospectionSupport . setProperties ( value , properties , prefix ) ; return value ; } } 	1	['43', '1', '0', '9', '100', '825', '4', '7', '35', '0.838095238', '785', '0.8', '1', '0', '0.261904762', '0', '0', '17.02325581', '1', '0.8372', '2']
package org . apache . camel . processor ; import org . apache . camel . AsyncCallback ; import org . apache . camel . AsyncProcessor ; import org . apache . camel . Endpoint ; import org . apache . camel . Exchange ; import org . apache . camel . Producer ; import org . apache . camel . Service ; import org . apache . camel . impl . ServiceSupport ; import org . apache . camel . impl . converter . AsyncProcessorTypeConverter ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class SendProcessor extends ServiceSupport implements AsyncProcessor , Service { private static final transient Log LOG = LogFactory . getLog ( SendProcessor . class ) ; private Endpoint destination ; private Producer producer ; private AsyncProcessor processor ; public SendProcessor ( Endpoint destination ) { if ( destination == null ) { throw new IllegalArgumentException ( "Endpoint cannot be null!" ) ; } this . destination = destination ; } @ Override public String toString ( ) { return "sendTo(" + destination + ")" ; } public void process ( Exchange exchange ) throws Exception { if ( producer == null ) { if ( isStopped ( ) ) { LOG . warn ( "Ignoring exchange sent after processor is stopped: " + exchange ) ; } else { throw new IllegalStateException ( "No producer, this processor has not been started!" ) ; } } else { producer . process ( exchange ) ; } } public boolean process ( Exchange exchange , AsyncCallback callback ) { if ( producer == null ) { if ( isStopped ( ) ) { LOG . warn ( "Ignoring exchange sent after processor is stopped: " + exchange ) ; } else { exchange . setException ( new IllegalStateException ( "No producer, this processor has not been started!" ) ) ; } callback . done ( true ) ; return true ; } else { return processor . process ( exchange , callback ) ; } } public Endpoint getDestination ( ) { return destination ; } protected void doStart ( ) throws Exception { this . producer = destination . createProducer ( ) ; this . producer . start ( ) ; this . processor = AsyncProcessorTypeConverter . convert ( producer ) ; } protected void doStop ( ) throws Exception { if ( producer != null ) { try { producer . stop ( ) ; } finally { producer = null ; processor = null ; } } } } 	1	['8', '2', '0', '13', '26', '0', '2', '11', '5', '0.642857143', '142', '1', '4', '0.684210526', '0.392857143', '1', '1', '16.25', '3', '1', '1']
package org . apache . camel . processor ; import org . apache . camel . Exchange ; import org . apache . camel . Processor ; import org . apache . camel . impl . ServiceSupport ; import org . apache . camel . util . ServiceHelper ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class LoggingErrorHandler extends ErrorHandlerSupport { private Processor output ; private Log log ; private LoggingLevel level ; public LoggingErrorHandler ( Processor output ) { this ( output , LogFactory . getLog ( LoggingErrorHandler . class ) , LoggingLevel . INFO ) ; } public LoggingErrorHandler ( Processor output , Log log , LoggingLevel level ) { this . output = output ; this . log = log ; this . level = level ; } @ Override public String toString ( ) { return "LoggingErrorHandler[" + output + "]" ; } public void process ( Exchange exchange ) throws Exception { try { output . process ( exchange ) ; } catch ( Throwable e ) { if ( ! customProcessorForException ( exchange , e ) ) { logError ( exchange , e ) ; } } } public Processor getOutput ( ) { return output ; } public LoggingLevel getLevel ( ) { return level ; } public void setLevel ( LoggingLevel level ) { this . level = level ; } public Log getLog ( ) { return log ; } public void setLog ( Log log ) { this . log = log ; } protected void logError ( Exchange exchange , Throwable e ) { switch ( level ) { case DEBUG : if ( log . isDebugEnabled ( ) ) { log . debug ( logMessage ( exchange , e ) , e ) ; } break ; case ERROR : if ( log . isErrorEnabled ( ) ) { log . error ( logMessage ( exchange , e ) , e ) ; } break ; case FATAL : if ( log . isFatalEnabled ( ) ) { log . fatal ( logMessage ( exchange , e ) , e ) ; } break ; case INFO : if ( log . isInfoEnabled ( ) ) { log . debug ( logMessage ( exchange , e ) , e ) ; } break ; case TRACE : if ( log . isTraceEnabled ( ) ) { log . trace ( logMessage ( exchange , e ) , e ) ; } break ; case WARN : if ( log . isWarnEnabled ( ) ) { log . warn ( logMessage ( exchange , e ) , e ) ; } break ; default : log . error ( "Unknown level: " + level + " when trying to log exchange: " + logMessage ( exchange , e ) , e ) ; } } protected Object logMessage ( Exchange exchange , Throwable e ) { return e + " while processing exchange: " + exchange ; } protected void doStart ( ) throws Exception { ServiceHelper . startServices ( output ) ; } protected void doStop ( ) throws Exception { ServiceHelper . stopServices ( output ) ; } } 	1	['13', '3', '0', '9', '35', '26', '1', '8', '9', '0.555555556', '214', '1', '3', '0.592592593', '0.307692308', '1', '1', '15.23076923', '8', '1.3846', '1']
package org . apache . camel . util ; import java . util . Map ; import java . util . HashMap ; import org . apache . camel . Endpoint ; import org . apache . camel . Exchange ; import org . apache . camel . ExchangePattern ; import org . apache . camel . InvalidPayloadException ; import org . apache . camel . InvalidTypeException ; import org . apache . camel . Message ; import org . apache . camel . NoSuchEndpointException ; import org . apache . camel . NoSuchPropertyException ; import org . apache . camel . CamelContext ; public class ExchangeHelper { private ExchangeHelper ( ) { } public static < T > T getExchangeProperty ( Exchange exchange , String propertyName , Class < T > type , T defaultValue ) { T answer = exchange . getProperty ( propertyName , type ) ; if ( answer == null ) { return defaultValue ; } return answer ; } @ SuppressWarnings ( { "unchecked" } ) public static < E extends Exchange > Endpoint < E > resolveEndpoint ( E exchange , Object value ) throws NoSuchEndpointException { Endpoint < E > endpoint ; if ( value instanceof Endpoint ) { endpoint = ( Endpoint < E > ) value ; } else { String uri = value . toString ( ) ; endpoint = CamelContextHelper . getMandatoryEndpoint ( exchange . getContext ( ) , uri ) ; } return endpoint ; } public static < T > T getMandatoryProperty ( Exchange exchange , String propertyName , Class < T > type ) throws NoSuchPropertyException { T answer = exchange . getProperty ( propertyName , type ) ; if ( answer == null ) { throw new NoSuchPropertyException ( exchange , propertyName , type ) ; } return answer ; } public static Object getMandatoryInBody ( Exchange exchange ) throws InvalidPayloadException { Object answer = exchange . getIn ( ) . getBody ( ) ; if ( answer == null ) { throw new InvalidPayloadException ( exchange , Object . class ) ; } return answer ; } public static < T > T getMandatoryInBody ( Exchange exchange , Class < T > type ) throws InvalidPayloadException { T answer = exchange . getIn ( ) . getBody ( type ) ; if ( answer == null ) { throw new InvalidPayloadException ( exchange , type ) ; } return answer ; } public static Object getMandatoryOutBody ( Exchange exchange ) throws InvalidPayloadException { Object answer = exchange . getOut ( ) . getBody ( ) ; if ( answer == null ) { throw new InvalidPayloadException ( exchange , Object . class ) ; } return answer ; } public static < T > T getMandatoryOutBody ( Exchange exchange , Class < T > type ) throws InvalidPayloadException { T answer = exchange . getOut ( ) . getBody ( type ) ; if ( answer == null ) { throw new InvalidPayloadException ( exchange , type ) ; } return answer ; } public static < T > T convertToMandatoryType ( Exchange exchange , Class < T > type , Object value ) throws InvalidTypeException { T answer = convertToType ( exchange , type , value ) ; if ( answer == null ) { throw new InvalidTypeException ( exchange , value , type ) ; } return answer ; } public static < T > T convertToType ( Exchange exchange , Class < T > type , Object value ) { return exchange . getContext ( ) . getTypeConverter ( ) . convertTo ( type , value ) ; } public static void copyResults ( Exchange result , Exchange source ) { if ( result != source ) { result . setException ( source . getException ( ) ) ; Message fault = source . getFault ( false ) ; if ( fault != null ) { result . getFault ( true ) . copyFrom ( fault ) ; } Message out = source . getOut ( false ) ; if ( out != null ) { result . getOut ( true ) . copyFrom ( out ) ; } } } public static boolean isInCapable ( Exchange exchange ) { ExchangePattern pattern = exchange . getPattern ( ) ; return pattern != null && pattern . isInCapable ( ) ; } public static boolean isOutCapable ( Exchange exchange ) { ExchangePattern pattern = exchange . getPattern ( ) ; return pattern != null && pattern . isOutCapable ( ) ; } public static < T > T newInstance ( Exchange exchange , Class < T > type ) { return exchange . getContext ( ) . getInjector ( ) . newInstance ( type ) ; } public static Map createVariableMap ( Exchange exchange ) { Map answer = new HashMap ( ) ; populateVariableMap ( exchange , answer ) ; return answer ; } public static void populateVariableMap ( Exchange exchange , Map map ) { map . put ( "exchange" , exchange ) ; Message in = exchange . getIn ( ) ; map . put ( "in" , in ) ; map . put ( "request" , in ) ; map . put ( "headers" , in . getHeaders ( ) ) ; map . put ( "body" , in . getBody ( ) ) ; if ( isOutCapable ( exchange ) ) { Message out = exchange . getOut ( true ) ; map . put ( "out" , out ) ; map . put ( "response" , out ) ; } map . put ( "camelContext" , exchange . getContext ( ) ) ; } public static String getContentType ( Exchange exchange ) { return exchange . getIn ( ) . getHeader ( "Content-Type" , String . class ) ; } } 	1	['17', '1', '0', '26', '45', '136', '14', '12', '16', '2', '275', '0', '0', '0', '0.303921569', '0', '0', '15.17647059', '4', '1.4706', '5']
package org . apache . camel . builder ; import org . apache . camel . Exchange ; import org . apache . camel . Expression ; import org . apache . camel . Message ; import java . util . ArrayList ; import java . util . Arrays ; import java . util . List ; import java . util . StringTokenizer ; import java . util . Collection ; import java . util . regex . Pattern ; public class ExpressionBuilder { private ExpressionBuilder ( ) { } public static < E extends Exchange > Expression < E > headerExpression ( final String headerName ) { return new Expression < E > ( ) { public Object evaluate ( E exchange ) { Object header = exchange . getIn ( ) . getHeader ( headerName ) ; if ( header == null ) { header = exchange . getProperty ( headerName ) ; } return header ; } @ Override public String toString ( ) { return "header(" + headerName + ")" ; } } ; } public static < E extends Exchange > Expression < E > headersExpresion ( ) { return new Expression < E > ( ) { public Object evaluate ( E exchange ) { return exchange . getIn ( ) . getHeaders ( ) ; } @ Override public String toString ( ) { return "headers" ; } } ; } public static < E extends Exchange > Expression < E > outHeaderExpression ( final String headerName ) { return new Expression < E > ( ) { public Object evaluate ( E exchange ) { Object header = exchange . getOut ( ) . getHeader ( headerName ) ; if ( header == null ) { header = exchange . getProperty ( headerName ) ; } return header ; } @ Override public String toString ( ) { return "outHeader(" + headerName + ")" ; } } ; } public static < E extends Exchange > Expression < E > propertyExpression ( final String propertyName ) { return new Expression < E > ( ) { public Object evaluate ( E exchange ) { return exchange . getProperty ( propertyName ) ; } @ Override public String toString ( ) { return "property(" + propertyName + ")" ; } } ; } public static < E extends Exchange > Expression < E > propertiesExpresion ( ) { return new Expression < E > ( ) { public Object evaluate ( E exchange ) { return exchange . getProperties ( ) ; } @ Override public String toString ( ) { return "properties" ; } } ; } public static < E extends Exchange > Expression < E > systemPropertyExpression ( final String propertyName ) { return systemPropertyExpression ( propertyName , null ) ; } public static < E extends Exchange > Expression < E > systemPropertyExpression ( final String propertyName , final String defaultValue ) { return new Expression < E > ( ) { public Object evaluate ( E exchange ) { return System . getProperty ( propertyName , defaultValue ) ; } @ Override public String toString ( ) { return "systemProperty(" + propertyName + ")" ; } } ; } public static < E extends Exchange > Expression < E > constantExpression ( final Object value ) { return new Expression < E > ( ) { public Object evaluate ( E exchange ) { return value ; } @ Override public String toString ( ) { return "" + value ; } } ; } public static < E extends Exchange > Expression < E > bodyExpression ( ) { return new Expression < E > ( ) { public Object evaluate ( E exchange ) { return exchange . getIn ( ) . getBody ( ) ; } @ Override public String toString ( ) { return "body" ; } } ; } public static < E extends Exchange , T > Expression < E > bodyExpression ( final Class < T > type ) { return new Expression < E > ( ) { public Object evaluate ( E exchange ) { return exchange . getIn ( ) . getBody ( type ) ; } @ Override public String toString ( ) { return "bodyAs[" + type . getName ( ) + "]" ; } } ; } public static < E extends Exchange > Expression < E > outBodyExpression ( ) { return new Expression < E > ( ) { public Object evaluate ( E exchange ) { return exchange . getOut ( ) . getBody ( ) ; } @ Override public String toString ( ) { return "outBody" ; } } ; } public static < E extends Exchange , T > Expression < E > outBodyExpression ( final Class < T > type ) { return new Expression < E > ( ) { public Object evaluate ( E exchange ) { return exchange . getOut ( ) . getBody ( type ) ; } @ Override public String toString ( ) { return "outBodyAs[" + type . getName ( ) + "]" ; } } ; } public static < E extends Exchange > Expression < E > faultBodyExpression ( ) { return new Expression < E > ( ) { public Object evaluate ( E exchange ) { return exchange . getFault ( ) . getBody ( ) ; } @ Override public String toString ( ) { return "faultBody" ; } } ; } public static < E extends Exchange , T > Expression < E > faultBodyExpression ( final Class < T > type ) { return new Expression < E > ( ) { public Object evaluate ( E exchange ) { return exchange . getFault ( ) . getBody ( type ) ; } @ Override public String toString ( ) { return "faultBodyAs[" + type . getName ( ) + "]" ; } } ; } public static < E extends Exchange > Expression < E > exchangeExpression ( ) { return new Expression < E > ( ) { public Object evaluate ( E exchange ) { return exchange ; } @ Override public String toString ( ) { return "exchange" ; } } ; } public static < E extends Exchange > Expression < E > inMessageExpression ( ) { return new Expression < E > ( ) { public Object evaluate ( E exchange ) { return exchange . getIn ( ) ; } @ Override public String toString ( ) { return "inMessage" ; } } ; } public static < E extends Exchange > Expression < E > convertTo ( final Expression expression , final Class type ) { return new Expression < E > ( ) { public Object evaluate ( E exchange ) { Object value = expression . evaluate ( exchange ) ; return exchange . getContext ( ) . getTypeConverter ( ) . convertTo ( type , value ) ; } @ Override public String toString ( ) { return "" + expression + ".convertTo(" + type . getName ( ) + ".class)" ; } } ; } public static < E extends Exchange > Expression < E > tokenizeExpression ( final Expression < E > expression , final String token ) { return new Expression < E > ( ) { public Object evaluate ( E exchange ) { String text = evaluateStringExpression ( expression , exchange ) ; if ( text == null ) { return null ; } StringTokenizer iter = new StringTokenizer ( text , token ) ; List < String > answer = new ArrayList < String > ( ) ; while ( iter . hasMoreTokens ( ) ) { answer . add ( iter . nextToken ( ) ) ; } return answer ; } @ Override public String toString ( ) { return "tokenize(" + expression + ", " + token + ")" ; } } ; } public static < E extends Exchange > Expression < E > regexTokenize ( final Expression < E > expression , String regexTokenizer ) { final Pattern pattern = Pattern . compile ( regexTokenizer ) ; return new Expression < E > ( ) { public Object evaluate ( E exchange ) { String text = evaluateStringExpression ( expression , exchange ) ; if ( text == null ) { return null ; } return Arrays . asList ( pattern . split ( text ) ) ; } @ Override public String toString ( ) { return "regexTokenize(" + expression + ", " + pattern . pattern ( ) + ")" ; } } ; } public static < E extends Exchange > Expression < E > regexReplaceAll ( final Expression < E > expression , String regex , final String replacement ) { final Pattern pattern = Pattern . compile ( regex ) ; return new Expression < E > ( ) { public Object evaluate ( E exchange ) { String text = evaluateStringExpression ( expression , exchange ) ; if ( text == null ) { return null ; } return pattern . matcher ( text ) . replaceAll ( replacement ) ; } @ Override public String toString ( ) { return "regexReplaceAll(" + expression + ", " + pattern . pattern ( ) + ")" ; } } ; } public static < E extends Exchange > Expression < E > regexReplaceAll ( final Expression < E > expression , String regex , final Expression < E > replacementExpression ) { final Pattern pattern = Pattern . compile ( regex ) ; return new Expression < E > ( ) { public Object evaluate ( E exchange ) { String text = evaluateStringExpression ( expression , exchange ) ; String replacement = evaluateStringExpression ( replacementExpression , exchange ) ; if ( text == null || replacement == null ) { return null ; } return pattern . matcher ( text ) . replaceAll ( replacement ) ; } @ Override public String toString ( ) { return "regexReplaceAll(" + expression + ", " + pattern . pattern ( ) + ")" ; } } ; } public static < E extends Exchange > Expression < E > append ( final Expression < E > left , final Expression < E > right ) { return new Expression < E > ( ) { public Object evaluate ( E exchange ) { return evaluateStringExpression ( left , exchange ) + evaluateStringExpression ( right , exchange ) ; } @ Override public String toString ( ) { return "append(" + left + ", " + right + ")" ; } } ; } public static < E extends Exchange > String evaluateStringExpression ( Expression < E > expression , E exchange ) { Object value = expression . evaluate ( exchange ) ; return exchange . getContext ( ) . getTypeConverter ( ) . convertTo ( String . class , value ) ; } public static < E extends Exchange > Expression < E > systemProperty ( final String name ) { return systemProperty ( name , null ) ; } public static < E extends Exchange > Expression < E > systemProperty ( final String name , final String defaultValue ) { return new Expression < E > ( ) { public Object evaluate ( E exchange ) { return System . getProperty ( name , defaultValue ) ; } } ; } public static < E extends Exchange > Expression < E > concatExpression ( final Collection < Expression > expressions ) { return concatExpression ( expressions , null ) ; } public static < E extends Exchange > Expression < E > concatExpression ( final Collection < Expression > expressions , final String expression ) { return new Expression < E > ( ) { public Object evaluate ( E exchange ) { StringBuffer buffer = new StringBuffer ( ) ; for ( Expression < E > expression : expressions ) { String text = evaluateStringExpression ( expression , exchange ) ; if ( text != null ) { buffer . append ( text ) ; } } return buffer . toString ( ) ; } @ Override public String toString ( ) { if ( expression != null ) { return expression ; } else { return "concat" + expressions ; } } } ; } } 	1	['28', '1', '0', '35', '57', '378', '14', '27', '27', '2', '183', '0', '0', '0', '0.142857143', '0', '0', '5.535714286', '1', '0.9643', '3']
package org . apache . camel . util ; import java . io . IOException ; public class IOHelper { public static IOException createIOException ( Throwable cause ) { return createIOException ( cause . getMessage ( ) , cause ) ; } public static IOException createIOException ( String message , Throwable cause ) { IOException answer = new IOException ( message ) ; answer . initCause ( cause ) ; return answer ; } } 	1	['3', '1', '0', '1', '7', '3', '1', '0', '3', '2', '22', '0', '0', '0', '0.444444444', '0', '0', '6.333333333', '1', '0.6667', '1']
package org . apache . camel ; public class NoSuchEndpointException extends RuntimeCamelException { private static final long serialVersionUID = - 8721487431101572630L ; private final String uri ; public NoSuchEndpointException ( String uri ) { super ( "No endpoint could be found for: " + uri ) ; this . uri = uri ; } public String getUri ( ) { return uri ; } } 	1	['2', '5', '0', '8', '6', '0', '7', '1', '2', '1', '21', '1', '0', '0.944444444', '0.75', '0', '0', '8.5', '1', '0.5', '1']
package org . apache . camel . model ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlRootElement ; import org . apache . camel . Processor ; import org . apache . camel . impl . RouteContext ; @ XmlRootElement ( name = "finally" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class FinallyType extends OutputType { @ Override public String toString ( ) { return "Finally[" + getOutputs ( ) + "]" ; } @ Override public String getLabel ( ) { return "" ; } @ Override public Processor createProcessor ( RouteContext routeContext ) throws Exception { return routeContext . createProcessor ( this ) ; } } 	1	['4', '3', '0', '5', '11', '6', '1', '4', '4', '2', '25', '0', '0', '0.97029703', '0.625', '1', '2', '5.25', '1', '0.75', '3']
package org . apache . camel . component . file . strategy ; public class NoOpFileProcessStrategy extends FileProcessStrategySupport { public NoOpFileProcessStrategy ( ) { super ( false ) ; } } 	1	['1', '2', '0', '2', '2', '0', '1', '1', '1', '2', '5', '0', '0', '1', '1', '0', '0', '4', '0', '0', '1']
package org . apache . camel . component . jmx ; import javax . management . Notification ; import javax . management . NotificationListener ; import org . apache . camel . Processor ; import org . apache . camel . impl . DefaultConsumer ; public class JMXConsumer extends DefaultConsumer implements NotificationListener { JMXEndpoint jmxEndpoint ; public JMXConsumer ( JMXEndpoint endpoint , Processor processor ) { super ( endpoint , processor ) ; this . jmxEndpoint = endpoint ; } public void handleNotification ( Notification notification , Object handback ) { try { getProcessor ( ) . process ( jmxEndpoint . createExchange ( notification ) ) ; } catch ( Throwable e ) { handleException ( e ) ; } } } 	1	['2', '3', '0', '6', '7', '0', '1', '6', '2', '0', '24', '0', '1', '0.956521739', '0.6', '0', '0', '10.5', '1', '0.5', '2']
package org . apache . camel . util ; import org . apache . camel . TypeConverter ; import java . beans . PropertyEditor ; import java . beans . PropertyEditorManager ; import java . lang . reflect . Field ; import java . lang . reflect . InvocationTargetException ; import java . lang . reflect . Method ; import java . lang . reflect . Modifier ; import java . net . URI ; import java . net . URISyntaxException ; import java . util . Arrays ; import java . util . HashMap ; import java . util . Iterator ; import java . util . LinkedHashMap ; import java . util . Map ; import java . util . Map . Entry ; import java . util . Set ; public class IntrospectionSupport { private IntrospectionSupport ( ) { } public static boolean getProperties ( Object target , Map props , String optionPrefix ) { boolean rc = false ; if ( target == null ) { throw new IllegalArgumentException ( "target was null." ) ; } if ( props == null ) { throw new IllegalArgumentException ( "props was null." ) ; } if ( optionPrefix == null ) { optionPrefix = "" ; } Class clazz = target . getClass ( ) ; Method [ ] methods = clazz . getMethods ( ) ; for ( int i = 0 ; i < methods . length ; i ++ ) { Method method = methods [ i ] ; String name = method . getName ( ) ; Class type = method . getReturnType ( ) ; Class params [ ] = method . getParameterTypes ( ) ; if ( name . startsWith ( "get" ) && params . length == 0 && type != null && isSettableType ( type ) ) { try { Object value = method . invoke ( target , new Object [ ] { } ) ; if ( value == null ) { continue ; } String strValue = convertToString ( value , type ) ; if ( strValue == null ) { continue ; } name = name . substring ( 3 , 4 ) . toLowerCase ( ) + name . substring ( 4 ) ; props . put ( optionPrefix + name , strValue ) ; rc = true ; } catch ( Throwable ignore ) { } } } return rc ; } public static Object getProperty ( Object target , String prop ) throws SecurityException , NoSuchMethodException , IllegalArgumentException , IllegalAccessException , InvocationTargetException { if ( target == null ) { throw new IllegalArgumentException ( "target was null." ) ; } if ( prop == null ) { throw new IllegalArgumentException ( "prop was null." ) ; } prop = prop . substring ( 0 , 1 ) . toUpperCase ( ) + prop . substring ( 1 ) ; Class clazz = target . getClass ( ) ; Method method = getPropertyGetter ( clazz , prop ) ; return method . invoke ( target , new Object [ ] { } ) ; } public static Method getPropertyGetter ( Class type , String propertyName ) throws NoSuchMethodException { Method method = type . getMethod ( "get" + ObjectHelper . capitalize ( propertyName ) , new Class [ ] { } ) ; return method ; } public static boolean setProperties ( Object target , Map props , String optionPrefix ) throws Exception { boolean rc = false ; if ( target == null ) { throw new IllegalArgumentException ( "target was null." ) ; } if ( props == null ) { throw new IllegalArgumentException ( "props was null." ) ; } for ( Iterator iter = props . keySet ( ) . iterator ( ) ; iter . hasNext ( ) ; ) { String name = ( String ) iter . next ( ) ; if ( name . startsWith ( optionPrefix ) ) { Object value = props . get ( name ) ; name = name . substring ( optionPrefix . length ( ) ) ; if ( setProperty ( target , name , value ) ) { iter . remove ( ) ; rc = true ; } } } return rc ; } public static Map extractProperties ( Map props , String optionPrefix ) { if ( props == null ) { throw new IllegalArgumentException ( "props was null." ) ; } HashMap rc = new HashMap ( props . size ( ) ) ; for ( Iterator iter = props . keySet ( ) . iterator ( ) ; iter . hasNext ( ) ; ) { String name = ( String ) iter . next ( ) ; if ( name . startsWith ( optionPrefix ) ) { Object value = props . get ( name ) ; name = name . substring ( optionPrefix . length ( ) ) ; rc . put ( name , value ) ; iter . remove ( ) ; } } return rc ; } public static boolean setProperties ( TypeConverter typeConverter , Object target , Map props ) throws Exception { boolean rc = false ; if ( target == null ) { throw new IllegalArgumentException ( "target was null." ) ; } if ( props == null ) { throw new IllegalArgumentException ( "props was null." ) ; } for ( Iterator iter = props . entrySet ( ) . iterator ( ) ; iter . hasNext ( ) ; ) { Map . Entry entry = ( Entry ) iter . next ( ) ; if ( setProperty ( typeConverter , target , ( String ) entry . getKey ( ) , entry . getValue ( ) ) ) { iter . remove ( ) ; rc = true ; } } return rc ; } public static boolean setProperties ( Object target , Map props ) throws Exception { return setProperties ( null , target , props ) ; } public static boolean setProperty ( TypeConverter typeConverter , Object target , String name , Object value ) throws Exception { try { Class clazz = target . getClass ( ) ; Method setter = findSetterMethod ( typeConverter , clazz , name , value ) ; if ( setter == null ) { return false ; } if ( value == null || value . getClass ( ) == setter . getParameterTypes ( ) [ 0 ] ) { setter . invoke ( target , new Object [ ] { value } ) ; } else { Object convertedValue = convert ( typeConverter , setter . getParameterTypes ( ) [ 0 ] , value ) ; setter . invoke ( target , new Object [ ] { convertedValue } ) ; } return true ; } catch ( InvocationTargetException e ) { Throwable throwable = e . getTargetException ( ) ; if ( throwable instanceof Exception ) { Exception exception = ( Exception ) throwable ; throw exception ; } else { Error error = ( Error ) throwable ; throw error ; } } } public static boolean setProperty ( Object target , String name , Object value ) throws Exception { return setProperty ( null , target , name , value ) ; } private static Object convert ( TypeConverter typeConverter , Class type , Object value ) throws URISyntaxException { if ( typeConverter != null ) { Object answer = typeConverter . convertTo ( type , value ) ; if ( answer == null ) { throw new IllegalArgumentException ( "Could not convert \"" + value + "\" to " + type . getName ( ) ) ; } return answer ; } PropertyEditor editor = PropertyEditorManager . findEditor ( type ) ; if ( editor != null ) { editor . setAsText ( value . toString ( ) ) ; return editor . getValue ( ) ; } if ( type == URI . class ) { return new URI ( value . toString ( ) ) ; } return null ; } private static String convertToString ( Object value , Class type ) throws URISyntaxException { PropertyEditor editor = PropertyEditorManager . findEditor ( type ) ; if ( editor != null ) { editor . setValue ( value ) ; return editor . getAsText ( ) ; } if ( type == URI . class ) { return ( ( URI ) value ) . toString ( ) ; } return null ; } private static Method findSetterMethod ( TypeConverter typeConverter , Class clazz , String name , Object value ) { name = "set" + ObjectHelper . capitalize ( name ) ; while ( clazz != Object . class ) { Method [ ] methods = clazz . getMethods ( ) ; for ( int i = 0 ; i < methods . length ; i ++ ) { Method method = methods [ i ] ; Class params [ ] = method . getParameterTypes ( ) ; if ( method . getName ( ) . equals ( name ) && params . length == 1 ) { Class paramType = params [ 0 ] ; if ( typeConverter != null || isSettableType ( paramType ) || paramType . isInstance ( value ) ) { return method ; } } } clazz = clazz . getSuperclass ( ) ; } return null ; } private static boolean isSettableType ( Class clazz ) { if ( PropertyEditorManager . findEditor ( clazz ) != null ) { return true ; } if ( clazz == URI . class ) { return true ; } if ( clazz == Boolean . class ) { return true ; } return false ; } public static String toString ( Object target ) { return toString ( target , Object . class ) ; } public static String toString ( Object target , Class stopClass ) { LinkedHashMap map = new LinkedHashMap ( ) ; addFields ( target , target . getClass ( ) , stopClass , map ) ; StringBuffer buffer = new StringBuffer ( simpleName ( target . getClass ( ) ) ) ; buffer . append ( " {" ) ; Set entrySet = map . entrySet ( ) ; boolean first = true ; for ( Iterator iter = entrySet . iterator ( ) ; iter . hasNext ( ) ; ) { Map . Entry entry = ( Map . Entry ) iter . next ( ) ; if ( first ) { first = false ; } else { buffer . append ( ", " ) ; } buffer . append ( entry . getKey ( ) ) ; buffer . append ( " = " ) ; appendToString ( buffer , entry . getValue ( ) ) ; } buffer . append ( "}" ) ; return buffer . toString ( ) ; } protected static void appendToString ( StringBuffer buffer , Object value ) { buffer . append ( value ) ; } public static String simpleName ( Class clazz ) { String name = clazz . getName ( ) ; int p = name . lastIndexOf ( "." ) ; if ( p >= 0 ) { name = name . substring ( p + 1 ) ; } return name ; } private static void addFields ( Object target , Class startClass , Class stopClass , LinkedHashMap map ) { if ( startClass != stopClass ) { addFields ( target , startClass . getSuperclass ( ) , stopClass , map ) ; } Field [ ] fields = startClass . getDeclaredFields ( ) ; for ( int i = 0 ; i < fields . length ; i ++ ) { Field field = fields [ i ] ; if ( Modifier . isStatic ( field . getModifiers ( ) ) || Modifier . isTransient ( field . getModifiers ( ) ) || Modifier . isPrivate ( field . getModifiers ( ) ) ) { continue ; } try { field . setAccessible ( true ) ; Object o = field . get ( target ) ; if ( o != null && o . getClass ( ) . isArray ( ) ) { try { o = Arrays . asList ( ( Object [ ] ) o ) ; } catch ( Throwable e ) { } } map . put ( field . getName ( ) , o ) ; } catch ( Throwable e ) { e . printStackTrace ( ) ; } } } } 	1	['19', '1', '0', '10', '85', '171', '8', '2', '12', '2', '720', '0', '0', '0', '0.276315789', '0', '0', '36.89473684', '11', '2.6316', '3']
package org . apache . camel ; public class FailedToCreateProducerException extends RuntimeCamelException { private final Endpoint endpoint ; public FailedToCreateProducerException ( Endpoint endpoint , Throwable cause ) { super ( "Failed to create Producer for endpoint: " + endpoint + ". Reason: " + cause , cause ) ; this . endpoint = endpoint ; } public Endpoint getEndpoint ( ) { return endpoint ; } } 	1	['2', '5', '0', '3', '7', '0', '1', '2', '2', '0', '25', '1', '1', '0.944444444', '0.666666667', '0', '0', '11', '1', '0.5', '1']
package org . apache . camel . util ; import java . util . concurrent . CountDownLatch ; import org . apache . camel . AsyncCallback ; import org . apache . camel . AsyncProcessor ; import org . apache . camel . Exchange ; public final class AsyncProcessorHelper { private AsyncProcessorHelper ( ) { } public static void process ( AsyncProcessor processor , Exchange exchange ) throws Exception { final CountDownLatch latch = new CountDownLatch ( 1 ) ; boolean sync = processor . process ( exchange , new AsyncCallback ( ) { public void done ( boolean sync ) { if ( ! sync ) { latch . countDown ( ) ; } } } ) ; if ( ! sync ) { latch . await ( ) ; } } } 	1	['2', '1', '0', '10', '7', '1', '6', '4', '1', '2', '23', '0', '0', '0', '0.5', '0', '0', '10.5', '1', '0.5', '1']
package org . apache . camel . model ; import java . util . List ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlRootElement ; import org . apache . camel . Processor ; import org . apache . camel . impl . RouteContext ; import org . apache . camel . processor . MulticastProcessor ; @ XmlRootElement ( name = "multicast" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class MulticastType extends OutputType < ProcessorType > { @ Override public String toString ( ) { return "Multicast[" + getOutputs ( ) + "]" ; } @ Override public Processor createProcessor ( RouteContext routeContext ) throws Exception { return createOutputsProcessor ( routeContext ) ; } protected Processor createCompositeProcessor ( List < Processor > list ) { return new MulticastProcessor ( list ) ; } } 	1	['4', '3', '0', '8', '12', '6', '4', '4', '3', '2', '28', '0', '0', '0.97029703', '0.5', '1', '3', '6', '1', '0.75', '4']
package org . apache . camel ; public interface AsyncCallback { void done ( boolean doneSynchronously ) ; } 	1	['1', '1', '0', '28', '1', '0', '28', '0', '1', '2', '1', '0', '0', '0', '1', '0', '0', '0', '1', '1', '1']
package org . apache . camel . component . bean ; import org . apache . camel . CamelContext ; import org . apache . camel . Expression ; import org . apache . camel . builder . xml . XPathBuilder ; import org . apache . camel . language . LanguageAnnotation ; import org . apache . camel . language . NamespacePrefix ; import org . apache . camel . language . XPath ; import java . lang . annotation . Annotation ; public class XPathAnnotationExpressionFactory extends DefaultAnnotationExpressionFactory { @ Override public Expression createExpression ( CamelContext camelContext , Annotation annotation , LanguageAnnotation languageAnnotation , Class expressionReturnType ) { String xpath = getExpressionFromAnnotation ( annotation ) ; XPathBuilder builder = XPathBuilder . xpath ( xpath ) ; if ( annotation instanceof XPath ) { XPath xpathAnnotation = ( XPath ) annotation ; NamespacePrefix [ ] namespaces = xpathAnnotation . namespaces ( ) ; if ( namespaces != null ) { for ( NamespacePrefix namespacePrefix : namespaces ) { builder = builder . namespace ( namespacePrefix . prefix ( ) , namespacePrefix . uri ( ) ) ; } } } return builder ; } } 	1	['2', '2', '0', '7', '9', '1', '0', '7', '2', '2', '48', '0', '0', '0.666666667', '0.6', '1', '1', '23', '4', '2', '2']
package org . apache . camel . model ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlAttribute ; import javax . xml . bind . annotation . XmlID ; import javax . xml . bind . annotation . XmlType ; import javax . xml . bind . annotation . adapters . CollapsedStringAdapter ; import javax . xml . bind . annotation . adapters . XmlJavaTypeAdapter ; @ XmlType ( name = "identifiedType" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public abstract class IdentifiedType { @ XmlAttribute @ XmlJavaTypeAdapter ( CollapsedStringAdapter . class ) @ XmlID private String id ; public String getId ( ) { return id ; } public void setId ( String value ) { this . id = value ; } } 	1	['3', '1', '4', '4', '4', '1', '4', '0', '3', '0.5', '14', '1', '0', '0', '0.666666667', '0', '0', '3.333333333', '1', '0.6667', '1']
package org . apache . camel . model ; import java . util . Collection ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlRootElement ; import javax . xml . bind . annotation . XmlTransient ; import org . apache . camel . Endpoint ; import org . apache . camel . Exchange ; import org . apache . camel . Expression ; import org . apache . camel . Processor ; import org . apache . camel . Route ; import org . apache . camel . impl . RouteContext ; import org . apache . camel . model . language . ExpressionType ; import org . apache . camel . processor . Aggregator ; import org . apache . camel . processor . aggregate . AggregationStrategy ; import org . apache . camel . processor . aggregate . UseLatestAggregationStrategy ; @ XmlRootElement ( name = "aggregator" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class AggregatorType extends ExpressionNode { @ XmlTransient private AggregationStrategy aggregationStrategy = new UseLatestAggregationStrategy ( ) ; private int batchSize ; private long batchTimeout ; public AggregatorType ( ) { } public AggregatorType ( Expression correlationExpression ) { super ( correlationExpression ) ; } public AggregatorType ( ExpressionType correlationExpression ) { super ( correlationExpression ) ; } public AggregatorType ( Expression correlationExpression , AggregationStrategy aggregationStrategy ) { super ( correlationExpression ) ; this . aggregationStrategy = aggregationStrategy ; } @ Override public String toString ( ) { return "Aggregator[ " + getExpression ( ) + " -> " + getOutputs ( ) + "]" ; } @ Override public void addRoutes ( RouteContext routeContext , Collection < Route > routes ) throws Exception { Endpoint from = routeContext . getEndpoint ( ) ; final Processor processor = routeContext . createProcessor ( this ) ; final Aggregator service = new Aggregator ( from , processor , getExpression ( ) . createExpression ( routeContext ) , aggregationStrategy ) ; if ( batchSize != 0 ) { service . setBatchSize ( batchSize ) ; } if ( batchSize != 0 ) { service . setBatchTimeout ( batchTimeout ) ; } Route route = new Route < Exchange > ( from , service ) { @ Override public String toString ( ) { return "AggregatorRoute[" + getEndpoint ( ) + " -> " + processor + "]" ; } } ; routes . add ( route ) ; } public AggregationStrategy getAggregationStrategy ( ) { return aggregationStrategy ; } public void setAggregationStrategy ( AggregationStrategy aggregationStrategy ) { this . aggregationStrategy = aggregationStrategy ; } public int getBatchSize ( ) { return batchSize ; } public void setBatchSize ( int batchSize ) { this . batchSize = batchSize ; } public long getBatchTimeout ( ) { return batchTimeout ; } public void setBatchTimeout ( long batchTimeout ) { this . batchTimeout = batchTimeout ; } public AggregatorType batchSize ( int batchSize ) { setBatchSize ( batchSize ) ; return this ; } public AggregatorType batchTimeout ( long batchTimeout ) { setBatchTimeout ( batchTimeout ) ; return this ; } } 	1	['14', '3', '0', '13', '32', '37', '3', '12', '14', '0.692307692', '154', '1', '1', '0.910714286', '0.223214286', '0', '0', '9.785714286', '1', '0.7143', '5']
package org . apache . camel . component . log ; import java . util . Map ; import org . apache . camel . Endpoint ; import org . apache . camel . Exchange ; import org . apache . camel . impl . DefaultComponent ; import org . apache . camel . impl . ProcessorEndpoint ; import org . apache . camel . processor . Logger ; import org . apache . camel . processor . LoggingLevel ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class LogComponent extends DefaultComponent < Exchange > { private static final Log LOG = LogFactory . getLog ( LogComponent . class ) ; protected Endpoint < Exchange > createEndpoint ( String uri , String remaining , Map parameters ) throws Exception { LoggingLevel level = getLoggingLevel ( parameters ) ; Logger logger = new Logger ( remaining , level ) ; return new ProcessorEndpoint ( uri , this , logger ) ; } protected LoggingLevel getLoggingLevel ( Map parameters ) { String levelText = ( String ) parameters . get ( "level" ) ; LoggingLevel level = null ; if ( levelText != null ) { level = LoggingLevel . valueOf ( levelText . toUpperCase ( ) ) ; if ( level == null ) { LOG . warn ( "Could not convert level text: " + levelText + " to a valid logging level so defaulting to WARN" ) ; } } if ( level == null ) { level = LoggingLevel . INFO ; } return level ; } } 	1	['4', '3', '0', '9', '15', '4', '0', '9', '1', '0.333333333', '62', '1', '1', '0.92', '0.666666667', '1', '1', '14.25', '4', '1.25', '2']
package org . apache . camel . model ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlRootElement ; import org . apache . camel . Expression ; import org . apache . camel . Processor ; import org . apache . camel . impl . RouteContext ; import org . apache . camel . model . language . ExpressionType ; import org . apache . camel . processor . Splitter ; @ XmlRootElement ( name = "splitter" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class SplitterType extends ExpressionNode { public SplitterType ( ) { } public SplitterType ( Expression expression ) { super ( expression ) ; } public SplitterType ( ExpressionType expression ) { super ( expression ) ; } @ Override public String toString ( ) { return "Splitter[ " + getExpression ( ) + " -> " + getOutputs ( ) + "]" ; } @ Override public Processor createProcessor ( RouteContext routeContext ) throws Exception { Processor childProcessor = routeContext . createProcessor ( this ) ; return new Splitter ( getExpression ( ) . createExpression ( routeContext ) , childProcessor ) ; } } 	1	['5', '3', '0', '8', '17', '10', '2', '7', '5', '2', '46', '0', '0', '0.980769231', '0.4', '1', '2', '8.2', '1', '0.4', '3']
package org . apache . camel . model ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlAttribute ; import javax . xml . bind . annotation . XmlElementRef ; import javax . xml . bind . annotation . XmlRootElement ; import org . apache . camel . Processor ; import org . apache . camel . impl . RouteContext ; import org . apache . camel . model . dataformat . DataFormatType ; import org . apache . camel . processor . UnmarshalProcessor ; import org . apache . camel . spi . DataFormat ; import static org . apache . camel . util . ObjectHelper . notNull ; @ XmlRootElement ( name = "unmarshal" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class UnmarshalType extends OutputType { @ XmlAttribute ( required = false ) private String ref ; @ XmlElementRef private DataFormatType dataFormatType ; public UnmarshalType ( ) { } public UnmarshalType ( DataFormatType dataFormatType ) { this . dataFormatType = dataFormatType ; } public UnmarshalType ( String ref ) { this . ref = ref ; } @ Override public String toString ( ) { if ( dataFormatType != null ) { return "Marshal[" + dataFormatType + "]" ; } else { return "Marshal[ref:  " + ref + "]" ; } } public String getRef ( ) { return ref ; } public void setRef ( String ref ) { this . ref = ref ; } public DataFormatType getDataFormatType ( ) { return dataFormatType ; } public void setDataFormatType ( DataFormatType dataFormatType ) { this . dataFormatType = dataFormatType ; } @ Override public Processor createProcessor ( RouteContext routeContext ) { DataFormatType type = getDataFormatType ( ) ; if ( type == null ) { notNull ( ref , "ref or dataFormatType" ) ; type = routeContext . lookup ( ref , DataFormatType . class ) ; } DataFormat dataFormat = type . getDataFormat ( routeContext ) ; return new UnmarshalProcessor ( dataFormat ) ; } } 	1	['9', '3', '0', '8', '18', '4', '1', '7', '9', '0.5', '92', '1', '1', '0.942307692', '0.388888889', '1', '2', '9', '2', '0.8889', '3']
package org . apache . camel . component . file ; import org . apache . camel . CamelContext ; import org . apache . camel . Endpoint ; import org . apache . camel . impl . DefaultComponent ; import java . io . File ; import java . util . Map ; public class FileComponent extends DefaultComponent < FileExchange > { public static final String HEADER_FILE_NAME = "org.apache.camel.file.name" ; public FileComponent ( ) { } public FileComponent ( CamelContext context ) { super ( context ) ; } protected Endpoint < FileExchange > createEndpoint ( String uri , String remaining , Map parameters ) throws Exception { File file = new File ( remaining ) ; FileEndpoint result = new FileEndpoint ( file , uri , this ) ; setProperties ( result , parameters ) ; return result ; } } 	1	['3', '3', '0', '4', '8', '3', '1', '4', '2', '1.5', '29', '0', '0', '0.958333333', '0.5', '1', '2', '8.333333333', '1', '0.3333', '2']
package org . apache . camel . component . jmx ; import org . apache . camel . CamelContext ; import org . apache . camel . Endpoint ; import org . apache . camel . impl . DefaultComponent ; import javax . management . MBeanServer ; import java . util . Map ; public class JMXComponent extends DefaultComponent < JMXExchange > { private MBeanServer mbeanServer ; public JMXComponent ( ) { } public JMXComponent ( CamelContext context ) { super ( context ) ; } protected Endpoint < JMXExchange > createEndpoint ( String uri , String remaining , Map parameters ) throws Exception { JMXEndpoint result = new JMXEndpoint ( remaining , this ) ; setProperties ( result , parameters ) ; result . setMbeanServer ( getMbeanServer ( ) ) ; return result ; } public MBeanServer getMbeanServer ( ) { return mbeanServer ; } public void setMbeanServer ( MBeanServer mbeanServer ) { this . mbeanServer = mbeanServer ; } } 	1	['5', '3', '0', '4', '10', '8', '1', '4', '4', '0.5', '36', '1', '0', '0.884615385', '0.36', '1', '2', '6', '1', '0.6', '1']
package org . apache . camel . impl . converter ; import java . io . IOException ; import java . util . ArrayList ; import java . util . HashMap ; import java . util . List ; import java . util . Map ; import java . util . Set ; import org . apache . camel . RuntimeCamelException ; import org . apache . camel . TypeConverter ; import org . apache . camel . spi . Injector ; import org . apache . camel . spi . TypeConverterAware ; import org . apache . camel . util . FactoryFinder ; import org . apache . camel . util . NoFactoryAvailableException ; import org . apache . camel . util . ObjectHelper ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class DefaultTypeConverter implements TypeConverter , TypeConverterRegistry { private static final transient Log LOG = LogFactory . getLog ( DefaultTypeConverter . class ) ; private Map < TypeMapping , TypeConverter > typeMappings = new HashMap < TypeMapping , TypeConverter > ( ) ; private Injector injector ; private List < TypeConverterLoader > typeConverterLoaders = new ArrayList < TypeConverterLoader > ( ) ; private List < TypeConverter > fallbackConverters = new ArrayList < TypeConverter > ( ) ; private boolean loaded ; public DefaultTypeConverter ( Injector injector ) { typeConverterLoaders . add ( new AnnotationTypeConverterLoader ( ) ) ; this . injector = injector ; addFallbackConverter ( new AsyncProcessorTypeConverter ( ) ) ; addFallbackConverter ( new PropertyEditorTypeConverter ( ) ) ; addFallbackConverter ( new ToStringTypeConverter ( ) ) ; addFallbackConverter ( new ArrayTypeConverter ( ) ) ; addFallbackConverter ( new EnumTypeConverter ( ) ) ; } public < T > T convertTo ( Class < T > toType , Object value ) { if ( toType . isInstance ( value ) ) { return toType . cast ( value ) ; } checkLoaded ( ) ; TypeConverter converter = getOrFindTypeConverter ( toType , value ) ; if ( converter != null ) { return converter . convertTo ( toType , value ) ; } for ( TypeConverter fallback : fallbackConverters ) { T rc = fallback . convertTo ( toType , value ) ; if ( rc != null ) { return rc ; } } if ( boolean . class . isAssignableFrom ( toType ) ) { return ( T ) Boolean . FALSE ; } if ( toType . isPrimitive ( ) ) { Class primitiveType = ObjectHelper . convertPrimitiveTypeToWrapperType ( toType ) ; if ( primitiveType != toType ) { return ( T ) convertTo ( primitiveType , value ) ; } } return null ; } public void addTypeConverter ( Class toType , Class fromType , TypeConverter typeConverter ) { TypeMapping key = new TypeMapping ( toType , fromType ) ; synchronized ( typeMappings ) { TypeConverter converter = typeMappings . get ( key ) ; if ( converter != null ) { LOG . warn ( "Overriding type converter from: " + converter + " to: " + typeConverter ) ; } typeMappings . put ( key , typeConverter ) ; } } public void addFallbackConverter ( TypeConverter converter ) { fallbackConverters . add ( converter ) ; if ( converter instanceof TypeConverterAware ) { TypeConverterAware typeConverterAware = ( TypeConverterAware ) converter ; typeConverterAware . setTypeConverter ( this ) ; } } public TypeConverter getTypeConverter ( Class toType , Class fromType ) { TypeMapping key = new TypeMapping ( toType , fromType ) ; synchronized ( typeMappings ) { return typeMappings . get ( key ) ; } } public Injector getInjector ( ) { return injector ; } public void setInjector ( Injector injector ) { this . injector = injector ; } protected < T > TypeConverter getOrFindTypeConverter ( Class toType , Object value ) { Class fromType = null ; if ( value != null ) { fromType = value . getClass ( ) ; } TypeMapping key = new TypeMapping ( toType , fromType ) ; TypeConverter converter ; synchronized ( typeMappings ) { converter = typeMappings . get ( key ) ; if ( converter == null ) { converter = findTypeConverter ( toType , fromType , value ) ; if ( converter != null ) { typeMappings . put ( key , converter ) ; } } } return converter ; } protected TypeConverter findTypeConverter ( Class toType , Class fromType , Object value ) { if ( fromType != null ) { Class fromSuperClass = fromType . getSuperclass ( ) ; if ( fromSuperClass != null && ! fromSuperClass . equals ( Object . class ) ) { TypeConverter converter = getTypeConverter ( toType , fromSuperClass ) ; if ( converter == null ) { converter = findTypeConverter ( toType , fromSuperClass , value ) ; } if ( converter != null ) { return converter ; } } for ( Class type : fromType . getInterfaces ( ) ) { TypeConverter converter = getTypeConverter ( toType , type ) ; if ( converter != null ) { return converter ; } } if ( fromType . isArray ( ) && ! fromType . getComponentType ( ) . isPrimitive ( ) ) { if ( ! fromType . equals ( Object [ ] . class ) ) { fromSuperClass = Object [ ] . class ; TypeConverter converter = getTypeConverter ( toType , fromSuperClass ) ; if ( converter == null ) { converter = findTypeConverter ( toType , fromSuperClass , value ) ; } if ( converter != null ) { return converter ; } } } if ( ! fromType . equals ( Object . class ) ) { TypeConverter converter = getTypeConverter ( toType , Object . class ) ; if ( converter != null ) { return converter ; } } } if ( fromType != null ) { Set < Map . Entry < TypeMapping , TypeConverter > > entries = typeMappings . entrySet ( ) ; for ( Map . Entry < TypeMapping , TypeConverter > entry : entries ) { TypeMapping key = entry . getKey ( ) ; Class aToType = key . getToType ( ) ; if ( toType . isAssignableFrom ( aToType ) ) { if ( fromType . isAssignableFrom ( key . getFromType ( ) ) ) { return entry . getValue ( ) ; } } } } return null ; } protected synchronized void checkLoaded ( ) { if ( ! loaded ) { loaded = true ; try { for ( TypeConverterLoader typeConverterLoader : typeConverterLoaders ) { typeConverterLoader . load ( this ) ; } try { loadFallbackTypeConverters ( ) ; } catch ( NoFactoryAvailableException e ) { } } catch ( Exception e ) { throw new RuntimeCamelException ( e ) ; } } } protected void loadFallbackTypeConverters ( ) throws IOException , ClassNotFoundException { FactoryFinder finder = new FactoryFinder ( ) ; List < TypeConverter > converters = finder . newInstances ( "FallbackTypeConverter" , getInjector ( ) , TypeConverter . class ) ; for ( TypeConverter converter : converters ) { addFallbackConverter ( converter ) ; } } protected static class TypeMapping { Class toType ; Class fromType ; public TypeMapping ( Class toType , Class fromType ) { this . toType = toType ; this . fromType = fromType ; } public Class getFromType ( ) { return fromType ; } public Class getToType ( ) { return toType ; } @ Override public boolean equals ( Object object ) { if ( object instanceof TypeMapping ) { TypeMapping that = ( TypeMapping ) object ; return ObjectHelper . equals ( this . fromType , that . fromType ) && ObjectHelper . equals ( this . toType , that . toType ) ; } return false ; } @ Override public int hashCode ( ) { int answer = toType . hashCode ( ) ; if ( fromType != null ) { answer *= 37 + fromType . hashCode ( ) ; } return answer ; } @ Override public String toString ( ) { return "[" + fromType + "=>" + toType + "]" ; } } } 	1	['12', '1', '0', '19', '57', '30', '1', '18', '7', '0.772727273', '479', '1', '2', '0', '0.418181818', '0', '0', '38.41666667', '17', '3.25', '3']
package org . apache . camel ; public class RuntimeExchangeException extends RuntimeCamelException { private static final long serialVersionUID = - 8721487431101572630L ; private final Exchange exchange ; public RuntimeExchangeException ( String message , Exchange exchange ) { super ( message + " on the exchange: " + exchange ) ; this . exchange = exchange ; } public RuntimeExchangeException ( Exception e , Exchange exchange ) { super ( e . getMessage ( ) , e ) ; this . exchange = exchange ; } public Exchange getExchange ( ) { return exchange ; } } 	1	['3', '5', '0', '3', '10', '0', '1', '2', '3', '0.75', '33', '1', '1', '0.944444444', '0.583333333', '0', '0', '9.333333333', '1', '0.3333', '1']
package org . apache . camel ; public class InvalidTypeException extends CamelExchangeException { private final Object value ; private final Class < ? > type ; public InvalidTypeException ( Exchange exchange , Object value , Class < ? > type ) { super ( "Could not convert value: " + value + " to type: " + type . getName ( ) + NoSuchPropertyException . valueDescription ( value ) , exchange ) ; this . value = value ; this . type = type ; } public Object getValue ( ) { return value ; } public Class < ? > getType ( ) { return type ; } } 	1	['3', '5', '0', '4', '10', '0', '1', '3', '3', '0.5', '37', '1', '0', '0.9', '0.5', '0', '0', '10.66666667', '1', '0.6667', '1']
package org . apache . camel . util ; import java . io . UnsupportedEncodingException ; import java . nio . ByteBuffer ; import java . nio . CharBuffer ; import java . nio . charset . CharacterCodingException ; import java . util . BitSet ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; public class UnsafeUriCharactersEncoder { private static final transient Log LOG = LogFactory . getLog ( UnsafeUriCharactersEncoder . class ) ; static BitSet unsafeCharacters ; static { unsafeCharacters = new BitSet ( 256 ) ; unsafeCharacters . set ( ' ' ) ; unsafeCharacters . set ( '"' ) ; unsafeCharacters . set ( '<' ) ; unsafeCharacters . set ( '>' ) ; unsafeCharacters . set ( '#' ) ; unsafeCharacters . set ( '%' ) ; unsafeCharacters . set ( '{' ) ; unsafeCharacters . set ( '}' ) ; unsafeCharacters . set ( '|' ) ; unsafeCharacters . set ( '\\' ) ; unsafeCharacters . set ( '^' ) ; unsafeCharacters . set ( '~' ) ; unsafeCharacters . set ( '[' ) ; unsafeCharacters . set ( ']' ) ; unsafeCharacters . set ( '`' ) ; } private UnsafeUriCharactersEncoder ( ) { } public static String encode ( String s ) { int n = s . length ( ) ; if ( n == 0 ) return s ; try { byte [ ] bytes = s . getBytes ( "UTF8" ) ; for ( int i = 0 ; ; ) { if ( unsafeCharacters . get ( bytes [ i ] ) ) break ; if ( ++ i >= bytes . length ) return s ; } StringBuffer sb = new StringBuffer ( ) ; for ( byte b : bytes ) { if ( unsafeCharacters . get ( b ) ) { appendEscape ( sb , ( byte ) b ) ; } else sb . append ( ( char ) b ) ; } return sb . toString ( ) ; } catch ( UnsupportedEncodingException e ) { LOG . error ( "Can't encoding the uri: " , e ) ; return null ; } } private static void appendEscape ( StringBuffer sb , byte b ) { sb . append ( '%' ) ; sb . append ( hexDigits [ ( b > > 4 ) & 0x0f ] ) ; sb . append ( hexDigits [ ( b > > 0 ) & 0x0f ] ) ; } private final static char [ ] hexDigits = { '0' , '1' , '2' , '3' , '4' , '5' , '6' , '7' , '8' , '9' , 'A' , 'B' , 'C' , 'D' , 'E' , 'F' } ; } 	1	['4', '1', '0', '3', '15', '2', '1', '2', '1', '0.555555556', '226', '0.666666667', '1', '0', '0.333333333', '0', '0', '54.75', '6', '1.75', '1']
package org . apache . camel . model ; import java . util . ArrayList ; import java . util . List ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlAttribute ; import javax . xml . bind . annotation . XmlElementRef ; import javax . xml . bind . annotation . XmlRootElement ; import javax . xml . bind . annotation . XmlTransient ; import org . apache . camel . CamelContext ; import org . apache . camel . Endpoint ; import org . apache . camel . Route ; import org . apache . camel . Predicate ; import org . apache . camel . processor . DelegateProcessor ; @ XmlRootElement ( name = "routes" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class RoutesType implements RouteContainer { @ XmlAttribute private Boolean inheritErrorHandlerFlag = Boolean . TRUE ; @ XmlElementRef private List < RouteType > routes = new ArrayList < RouteType > ( ) ; @ XmlElementRef private List < ServiceActivationType > activations = new ArrayList < ServiceActivationType > ( ) ; @ XmlTransient private List < InterceptorType > interceptors = new ArrayList < InterceptorType > ( ) ; @ XmlTransient private List < InterceptType > intercepts = new ArrayList < InterceptType > ( ) ; @ XmlTransient private List < ExceptionType > exceptions = new ArrayList < ExceptionType > ( ) ; @ XmlTransient private CamelContext camelContext ; @ Override public String toString ( ) { return "Routes: " + routes ; } public void populateRoutes ( List < Route > answer ) throws Exception { for ( RouteType route : routes ) { route . addRoutes ( camelContext , answer ) ; } } public List < RouteType > getRoutes ( ) { return routes ; } public void setRoutes ( List < RouteType > routes ) { this . routes = routes ; } public List < InterceptorType > getInterceptors ( ) { return interceptors ; } public void setInterceptors ( List < InterceptorType > interceptors ) { this . interceptors = interceptors ; } public List < InterceptType > getIntercepts ( ) { return intercepts ; } public void setIntercepts ( List < InterceptType > intercepts ) { this . intercepts = intercepts ; } public List < ExceptionType > getExceptions ( ) { return exceptions ; } public void setExceptions ( List < ExceptionType > exceptions ) { this . exceptions = exceptions ; } public CamelContext getCamelContext ( ) { return camelContext ; } public void setCamelContext ( CamelContext camelContext ) { this . camelContext = camelContext ; } public Boolean getInheritErrorHandlerFlag ( ) { return inheritErrorHandlerFlag ; } public void setInheritErrorHandlerFlag ( Boolean inheritErrorHandlerFlag ) { this . inheritErrorHandlerFlag = inheritErrorHandlerFlag ; } public RouteType route ( ) { RouteType route = createRoute ( ) ; return route ( route ) ; } public RouteType from ( String uri ) { RouteType route = createRoute ( ) ; route . from ( uri ) ; return route ( route ) ; } public RouteType from ( Endpoint endpoint ) { RouteType route = createRoute ( ) ; route . from ( endpoint ) ; return route ( route ) ; } public RouteType route ( RouteType route ) { route . setCamelContext ( getCamelContext ( ) ) ; route . setInheritErrorHandlerFlag ( getInheritErrorHandlerFlag ( ) ) ; route . getInterceptors ( ) . addAll ( getInterceptors ( ) ) ; route . getOutputs ( ) . addAll ( getIntercepts ( ) ) ; route . getOutputs ( ) . addAll ( getExceptions ( ) ) ; getRoutes ( ) . add ( route ) ; return route ; } public RoutesType intercept ( DelegateProcessor interceptor ) { getInterceptors ( ) . add ( new InterceptorRef ( interceptor ) ) ; return this ; } public InterceptType intercept ( ) { InterceptType answer = new InterceptType ( ) ; getIntercepts ( ) . add ( answer ) ; return answer ; } public OtherwiseType intercept ( Predicate predicate ) { InterceptType answer = new InterceptType ( ) ; getIntercepts ( ) . add ( answer ) ; return answer . when ( predicate ) ; } public ExceptionType exception ( Class exceptionType ) { ExceptionType answer = new ExceptionType ( exceptionType ) ; getExceptions ( ) . add ( answer ) ; return answer ; } protected RouteType createRoute ( ) { return new RouteType ( ) ; } } 	1	['24', '1', '0', '11', '47', '226', '1', '10', '23', '0.850931677', '244', '1', '1', '0', '0.154166667', '0', '0', '8.875', '1', '0.9583', '5']
package org . apache . camel . builder ; import org . apache . camel . model . ExceptionType ; import org . apache . camel . processor . ErrorHandlerSupport ; import java . util . ArrayList ; import java . util . List ; public abstract class ErrorHandlerBuilderSupport implements ErrorHandlerBuilder { private List < ExceptionType > exceptions = new ArrayList < ExceptionType > ( ) ; public void addErrorHandlers ( ExceptionType exception ) { exceptions . add ( exception ) ; } protected void configure ( ErrorHandlerSupport handler ) { for ( ExceptionType exception : exceptions ) { handler . addExceptionPolicy ( exception ) ; } } } 	1	['3', '1', '3', '6', '10', '0', '3', '3', '2', '0', '34', '1', '0', '0', '0.555555556', '0', '0', '10', '2', '1', '1']
package org . apache . camel . component . jmx ; import org . apache . camel . CamelContext ; import org . apache . camel . Exchange ; import org . apache . camel . ExchangePattern ; import org . apache . camel . impl . DefaultExchange ; import javax . management . Notification ; public class JMXExchange extends DefaultExchange { public JMXExchange ( CamelContext camelContext , ExchangePattern pattern , Notification notification ) { super ( camelContext , pattern ) ; setIn ( new JMXMessage ( notification ) ) ; } } 	1	['1', '2', '0', '7', '4', '0', '3', '5', '1', '2', '12', '0', '0', '1', '1', '0', '0', '11', '0', '0', '1']
package org . apache . camel . model ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlAttribute ; import javax . xml . bind . annotation . XmlRootElement ; import javax . xml . bind . annotation . XmlTransient ; import org . apache . camel . Processor ; import org . apache . camel . impl . RouteContext ; import org . apache . camel . spi . Policy ; @ XmlRootElement ( name = "policy" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class PolicyRef extends OutputType { @ XmlAttribute ( required = true ) private String ref ; @ XmlTransient private Policy policy ; public PolicyRef ( ) { } public PolicyRef ( Policy policy ) { this . policy = policy ; } @ Override public String toString ( ) { return "Policy[" + description ( ) + "]" ; } @ Override public String getLabel ( ) { if ( ref != null ) { return "ref:  " + ref ; } else if ( policy != null ) { return policy . toString ( ) ; } else { return "" ; } } public String getRef ( ) { return ref ; } public void setRef ( String ref ) { this . ref = ref ; } @ Override public Processor createProcessor ( RouteContext routeContext ) throws Exception { Processor childProcessor = createOutputsProcessor ( routeContext ) ; Policy policy = resolvePolicy ( routeContext ) ; if ( policy == null ) { throw new IllegalArgumentException ( "No policy configured: " + this ) ; } return policy . wrap ( childProcessor ) ; } protected Policy resolvePolicy ( RouteContext routeContext ) { if ( policy == null ) { policy = routeContext . lookup ( getRef ( ) , Policy . class ) ; } return policy ; } protected String description ( ) { if ( policy != null ) { return policy . toString ( ) ; } else { return "ref:  " + ref ; } } } 	1	['9', '3', '0', '5', '19', '14', '1', '4', '7', '0.375', '118', '1', '1', '0.933333333', '0.361111111', '1', '2', '11.88888889', '3', '1.2222', '2']
package org . apache . camel . util ; import java . util . ArrayList ; import java . util . List ; import java . util . Map ; public class CollectionHelper { private CollectionHelper ( ) { } public static void appendValue ( Map map , Object key , Object value ) { Object oldValue = map . get ( key ) ; if ( oldValue != null ) { List list ; if ( oldValue instanceof List ) { list = ( List ) oldValue ; } else { list = new ArrayList ( ) ; list . add ( oldValue ) ; } list . add ( value ) ; } else { map . put ( key , value ) ; } } } 	1	['2', '1', '0', '1', '7', '1', '1', '0', '1', '2', '37', '0', '0', '0', '0.5', '0', '0', '17.5', '3', '1.5', '1']
package org . apache . camel . model ; import org . apache . camel . impl . RouteContext ; import org . apache . camel . processor . DelegateProcessor ; import javax . xml . bind . annotation . XmlAccessType ; import javax . xml . bind . annotation . XmlAccessorType ; import javax . xml . bind . annotation . XmlAttribute ; import javax . xml . bind . annotation . XmlRootElement ; import javax . xml . bind . annotation . XmlTransient ; @ XmlRootElement ( name = "interceptor" ) @ XmlAccessorType ( XmlAccessType . FIELD ) public class InterceptorRef extends InterceptorType { @ XmlAttribute ( required = true ) private String ref ; @ XmlTransient private DelegateProcessor interceptor ; public InterceptorRef ( ) { } public InterceptorRef ( String ref ) { setRef ( ref ) ; } public InterceptorRef ( DelegateProcessor interceptor ) { this . interceptor = interceptor ; } @ Override public String toString ( ) { return "Interceptor[" + getLabel ( ) + "]" ; } public DelegateProcessor createInterceptor ( RouteContext routeContext ) { if ( interceptor == null ) { interceptor = routeContext . lookup ( getRef ( ) , DelegateProcessor . class ) ; } if ( interceptor == null ) { throw new IllegalArgumentException ( "No DelegateProcessor bean available for reference: " + getRef ( ) ) ; } return interceptor ; } public String getRef ( ) { return ref ; } public void setRef ( String ref ) { this . ref = ref ; } public String getLabel ( ) { if ( ref != null ) { return "ref:  " + ref ; } else if ( interceptor != null ) { return interceptor . toString ( ) ; } else { return "" ; } } } 	1	['8', '2', '0', '5', '15', '16', '2', '3', '8', '0.428571429', '96', '1', '1', '0.166666667', '0.375', '0', '0', '10.75', '3', '1.125', '3']
package org . apache . camel ; public class AlreadyStoppedException extends CamelException { public AlreadyStoppedException ( ) { super ( "Already stopped" ) ; } } 	1	['1', '4', '0', '2', '2', '0', '1', '1', '1', '2', '5', '0', '0', '1', '1', '0', '0', '4', '0', '0', '1']
package org . apache . camel . converter ; import org . apache . camel . Converter ; import org . apache . camel . util . CollectionStringBuffer ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import java . io . * ; import java . net . URL ; @ Converter public class IOConverter { private static final transient Log LOG = LogFactory . getLog ( IOConverter . class ) ; private IOConverter ( ) { } @ Converter public static InputStream toInputStream ( URL url ) throws IOException { return url . openStream ( ) ; } @ Converter public static InputStream toInputStream ( File file ) throws FileNotFoundException { return new BufferedInputStream ( new FileInputStream ( file ) ) ; } @ Converter public static BufferedReader toReader ( File file ) throws FileNotFoundException { return new BufferedReader ( new FileReader ( file ) ) ; } @ Converter public static File toFile ( String name ) throws FileNotFoundException { return new File ( name ) ; } @ Converter public static OutputStream toOutputStream ( File file ) throws FileNotFoundException { return new BufferedOutputStream ( new FileOutputStream ( file ) ) ; } @ Converter public static BufferedWriter toWriter ( File file ) throws IOException { return new BufferedWriter ( new FileWriter ( file ) ) ; } @ Converter public static Reader toReader ( InputStream in ) throws FileNotFoundException { return new InputStreamReader ( in ) ; } @ Converter public static Writer toWriter ( OutputStream out ) throws FileNotFoundException { return new OutputStreamWriter ( out ) ; } @ Converter public static StringReader toReader ( String text ) { return new StringReader ( text ) ; } @ Converter public static InputStream toInputStream ( String text ) { return toInputStream ( text . getBytes ( ) ) ; } @ Converter public static byte [ ] toByteArray ( String text ) { return text . getBytes ( ) ; } @ Converter public static String toString ( byte [ ] data ) { return new String ( data ) ; } @ Converter public static String toString ( File file ) throws IOException { return toString ( toReader ( file ) ) ; } @ Converter public static String toString ( URL url ) throws IOException { return toString ( toInputStream ( url ) ) ; } @ Converter public static String toString ( Reader reader ) throws IOException { if ( reader instanceof BufferedReader ) { return toString ( ( BufferedReader ) reader ) ; } else { return toString ( new BufferedReader ( reader ) ) ; } } @ Converter public static String toString ( BufferedReader reader ) throws IOException { if ( reader == null ) { return null ; } try { CollectionStringBuffer builder = new CollectionStringBuffer ( "\n" ) ; while ( true ) { String line = reader . readLine ( ) ; if ( line == null ) { return builder . toString ( ) ; } builder . append ( line ) ; } } finally { try { reader . close ( ) ; } catch ( IOException e ) { LOG . warn ( "Failed to close stream: " + e , e ) ; } } } @ Converter public static String toString ( InputStream in ) throws IOException { return toString ( toReader ( in ) ) ; } @ Converter public static InputStream toInputStream ( byte [ ] data ) { return new ByteArrayInputStream ( data ) ; } @ Converter public static ObjectOutput toObjectOutput ( OutputStream stream ) throws IOException { if ( stream instanceof ObjectOutput ) { return ( ObjectOutput ) stream ; } else { return new ObjectOutputStream ( stream ) ; } } @ Converter public static ObjectInput toObjectInput ( InputStream stream ) throws IOException { if ( stream instanceof ObjectInput ) { return ( ObjectInput ) stream ; } else { return new ObjectInputStream ( stream ) ; } } } 	1	['22', '1', '0', '6', '52', '229', '3', '3', '20', '0.80952381', '205', '1', '1', '0', '0.111111111', '0', '0', '8.272727273', '1', '0.9091', '1']
package org . apache . camel . component . bean ; import java . lang . reflect . InvocationTargetException ; import java . lang . reflect . Method ; import org . apache . camel . Exchange ; public class BeanInvocation { private final Object proxy ; private final Method method ; private final Object [ ] args ; public BeanInvocation ( Object proxy , Method method , Object [ ] args ) { this . proxy = proxy ; this . method = method ; this . args = args ; } public Object [ ] getArgs ( ) { return args ; } public Method getMethod ( ) { return method ; } public Object getProxy ( ) { return proxy ; } public void invoke ( Object pojo , Exchange exchange ) { try { Object response = getMethod ( ) . invoke ( pojo , getArgs ( ) ) ; exchange . getOut ( ) . setBody ( response ) ; } catch ( InvocationTargetException e ) { exchange . setException ( e . getCause ( ) ) ; } catch ( RuntimeException e ) { throw e ; } catch ( Throwable e ) { throw new RuntimeException ( e ) ; } } } 	1	['5', '1', '0', '7', '12', '4', '5', '2', '5', '0.583333333', '57', '1', '0', '0', '0.4', '0', '0', '9.8', '1', '0.8', '1']
package org . apache . camel ; public class NoSuchPropertyException extends CamelExchangeException { private static final long serialVersionUID = - 8721487431101572630L ; private final String propertyName ; private final Class < ? > type ; public NoSuchPropertyException ( Exchange exchange , String propertyName , Class < ? > type ) { super ( "No '" + propertyName + "' property available of type: " + type . getName ( ) + reason ( exchange , propertyName ) , exchange ) ; this . propertyName = propertyName ; this . type = type ; } public String getPropertyName ( ) { return propertyName ; } public Class < ? > getType ( ) { return type ; } protected static String reason ( Exchange exchange , String propertyName ) { Object value = exchange . getProperty ( propertyName ) ; return valueDescription ( value ) ; } static String valueDescription ( Object value ) { if ( value == null ) { return "" ; } return " but has value: " + value + " of type: " + value . getClass ( ) . getName ( ) ; } } 	1	['5', '5', '0', '5', '13', '6', '3', '2', '3', '0.916666667', '67', '1', '0', '0.818181818', '0.36', '0', '0', '11.8', '2', '1', '1']
package org . apache . camel . model . dataformat ; import javax . xml . bind . annotation . XmlRootElement ; import org . apache . camel . spi . DataFormat ; import org . apache . camel . impl . RouteContext ; @ XmlRootElement ( name = "serialization" ) public class SerializationDataFormat extends DataFormatType { @ Override protected DataFormat createDataFormat ( RouteContext routeContext ) { return new org . apache . camel . impl . SerializationDataFormat ( ) ; } } 	1	['2', '2', '0', '5', '4', '1', '1', '4', '1', '2', '9', '0', '0', '0.8', '0.75', '1', '1', '3.5', '1', '0.5', '1']
package org . apache . camel . component . timer ; import org . apache . camel . Consumer ; import org . apache . camel . Exchange ; import org . apache . camel . Processor ; import org . apache . camel . Producer ; import org . apache . camel . RuntimeCamelException ; import org . apache . camel . ExchangePattern ; import org . apache . camel . component . bean . BeanExchange ; import org . apache . camel . impl . DefaultEndpoint ; import org . apache . camel . impl . DefaultExchange ; import java . util . Date ; import java . util . Timer ; public class TimerEndpoint extends DefaultEndpoint < Exchange > { private final TimerComponent component ; private final String timerName ; private Date time ; private long period = 1000 ; private long delay = 0 ; private boolean fixedRate ; private boolean daemon = true ; private Timer timer ; public TimerEndpoint ( String fullURI , TimerComponent component , String timerName ) { super ( fullURI , component ) ; this . component = component ; this . timerName = timerName ; } public Producer < Exchange > createProducer ( ) throws Exception { throw new RuntimeCamelException ( "Cannot produce to a TimerEndpoint: " + getEndpointUri ( ) ) ; } public Consumer < Exchange > createConsumer ( Processor processor ) throws Exception { return new TimerConsumer ( this , processor ) ; } public TimerComponent getComponent ( ) { return component ; } public String getTimerName ( ) { return timerName ; } public boolean isDaemon ( ) { return daemon ; } public void setDaemon ( boolean daemon ) { this . daemon = daemon ; } public long getDelay ( ) { return delay ; } public void setDelay ( long delay ) { this . delay = delay ; } public boolean isFixedRate ( ) { return fixedRate ; } public void setFixedRate ( boolean fixedRate ) { this . fixedRate = fixedRate ; } public long getPeriod ( ) { return period ; } public void setPeriod ( long period ) { this . period = period ; } public Date getTime ( ) { return time ; } public void setTime ( Date time ) { this . time = time ; } public boolean isSingleton ( ) { return true ; } public Timer getTimer ( ) { if ( timer == null ) { timer = component . getTimer ( this ) ; } return timer ; } } 	1	['18', '2', '0', '8', '25', '123', '2', '8', '18', '0.911764706', '123', '1', '1', '0.5', '0.206349206', '1', '1', '5.388888889', '2', '1', '1']
package org . apache . camel . converter . jaxp ; import org . apache . camel . Converter ; import org . apache . camel . converter . IOConverter ; import org . apache . camel . converter . NIOConverter ; import org . apache . camel . util . ObjectHelper ; import org . w3c . dom . Document ; import org . w3c . dom . Element ; import org . w3c . dom . Node ; import org . w3c . dom . NodeList ; import org . xml . sax . InputSource ; import org . xml . sax . SAXException ; import org . xml . sax . XMLReader ; import javax . xml . parsers . DocumentBuilder ; import javax . xml . parsers . DocumentBuilderFactory ; import javax . xml . parsers . ParserConfigurationException ; import javax . xml . transform . OutputKeys ; import javax . xml . transform . Result ; import javax . xml . transform . Source ; import javax . xml . transform . Transformer ; import javax . xml . transform . TransformerConfigurationException ; import javax . xml . transform . TransformerException ; import javax . xml . transform . TransformerFactory ; import javax . xml . transform . dom . DOMResult ; import javax . xml . transform . dom . DOMSource ; import javax . xml . transform . sax . SAXSource ; import javax . xml . transform . stream . StreamResult ; import javax . xml . transform . stream . StreamSource ; import java . io . ByteArrayInputStream ; import java . io . File ; import java . io . IOException ; import java . io . InputStream ; import java . io . InputStreamReader ; import java . io . Reader ; import java . io . StringReader ; import java . io . StringWriter ; import java . lang . reflect . Constructor ; import java . nio . ByteBuffer ; @ Converter public class XmlConverter { public static final String DEFAULT_CHARSET_PROPERTY = "org.apache.camel.default.charset" ; public static String defaultCharset = ObjectHelper . getSystemProperty ( DEFAULT_CHARSET_PROPERTY , "UTF-8" ) ; private DocumentBuilderFactory documentBuilderFactory ; private TransformerFactory transformerFactory ; private static final Class dom2SaxClass ; static { Class cl = null ; try { cl = Class . forName ( "org.apache.xalan.xsltc.trax.DOM2SAX" ) ; } catch ( Throwable t ) { } dom2SaxClass = cl ; } public XmlConverter ( ) { } public XmlConverter ( DocumentBuilderFactory documentBuilderFactory ) { this . documentBuilderFactory = documentBuilderFactory ; } public void toResult ( Source source , Result result ) throws TransformerException { if ( source == null ) { return ; } Transformer transformer = createTransfomer ( ) ; if ( transformer == null ) { throw new TransformerException ( "Could not create a transformer - JAXP is misconfigured!" ) ; } transformer . setOutputProperty ( OutputKeys . ENCODING , defaultCharset ) ; transformer . setOutputProperty ( OutputKeys . OMIT_XML_DECLARATION , "yes" ) ; transformer . transform ( source , result ) ; } @ Converter public BytesSource toSource ( byte [ ] data ) { return new BytesSource ( data ) ; } @ Converter public StringSource toSource ( String data ) { return new StringSource ( data ) ; } @ Converter public DOMSource toSource ( Document document ) { return new DOMSource ( document ) ; } @ Converter public String toString ( Source source ) throws TransformerException { if ( source == null ) { return null ; } else if ( source instanceof StringSource ) { return ( ( StringSource ) source ) . getText ( ) ; } else if ( source instanceof BytesSource ) { return new String ( ( ( BytesSource ) source ) . getData ( ) ) ; } else { StringWriter buffer = new StringWriter ( ) ; toResult ( source , new StreamResult ( buffer ) ) ; return buffer . toString ( ) ; } } @ Converter public String toString ( NodeList nodeList ) throws TransformerException { StringWriter buffer = new StringWriter ( ) ; for ( int i = 0 , size = nodeList . getLength ( ) ; i < size ; i ++ ) { Node node = nodeList . item ( i ) ; Source source = new DOMSource ( node ) ; toResult ( source , new StreamResult ( buffer ) ) ; } return buffer . toString ( ) ; } @ Converter public String toString ( Node node ) throws TransformerException { return toString ( new DOMSource ( node ) ) ; } @ Converter public DOMSource toDOMSource ( Source source ) throws ParserConfigurationException , IOException , SAXException , TransformerException { if ( source instanceof DOMSource ) { return ( DOMSource ) source ; } else if ( source instanceof SAXSource ) { return toDOMSourceFromSAX ( ( SAXSource ) source ) ; } else if ( source instanceof StreamSource ) { return toDOMSourceFromStream ( ( StreamSource ) source ) ; } else { return null ; } } @ Converter public DOMSource toDOMSource ( String text ) throws ParserConfigurationException , IOException , SAXException , TransformerException { Source source = toSource ( text ) ; if ( source != null ) { return toDOMSourceFromStream ( ( StreamSource ) source ) ; } else { return null ; } } @ Converter public SAXSource toSAXSource ( String source ) throws IOException , SAXException , TransformerException { return toSAXSource ( toSource ( source ) ) ; } @ Converter public SAXSource toSAXSource ( InputStream source ) throws IOException , SAXException , TransformerException { return toSAXSource ( toStreamSource ( source ) ) ; } @ Converter public SAXSource toSAXSource ( Source source ) throws IOException , SAXException , TransformerException { if ( source instanceof SAXSource ) { return ( SAXSource ) source ; } else if ( source instanceof DOMSource ) { return toSAXSourceFromDOM ( ( DOMSource ) source ) ; } else if ( source instanceof StreamSource ) { return toSAXSourceFromStream ( ( StreamSource ) source ) ; } else { return null ; } } @ Converter public StreamSource toStreamSource ( Source source ) throws TransformerException { if ( source instanceof StreamSource ) { return ( StreamSource ) source ; } else if ( source instanceof DOMSource ) { return toStreamSourceFromDOM ( ( DOMSource ) source ) ; } else if ( source instanceof SAXSource ) { return toStreamSourceFromSAX ( ( SAXSource ) source ) ; } else { return null ; } } @ Converter public StreamSource toStreamSource ( InputStream in ) throws TransformerException { if ( in != null ) { return new StreamSource ( in ) ; } return null ; } @ Converter public StreamSource toStreamSource ( Reader in ) throws TransformerException { if ( in != null ) { return new StreamSource ( in ) ; } return null ; } @ Converter public StreamSource toStreamSource ( File in ) throws TransformerException { if ( in != null ) { return new StreamSource ( in ) ; } return null ; } @ Converter public StreamSource toStreamSource ( byte [ ] in ) throws TransformerException { if ( in != null ) { return new StreamSource ( IOConverter . toInputStream ( in ) ) ; } return null ; } @ Converter public StreamSource toStreamSource ( ByteBuffer in ) throws TransformerException { if ( in != null ) { return new StreamSource ( NIOConverter . toInputStream ( in ) ) ; } return null ; } @ Converter public StreamSource toStreamSourceFromSAX ( SAXSource source ) throws TransformerException { InputSource inputSource = source . getInputSource ( ) ; if ( inputSource != null ) { if ( inputSource . getCharacterStream ( ) != null ) { return new StreamSource ( inputSource . getCharacterStream ( ) ) ; } if ( inputSource . getByteStream ( ) != null ) { return new StreamSource ( inputSource . getByteStream ( ) ) ; } } String result = toString ( source ) ; return new StringSource ( result ) ; } @ Converter public StreamSource toStreamSourceFromDOM ( DOMSource source ) throws TransformerException { String result = toString ( source ) ; return new StringSource ( result ) ; } @ Converter public SAXSource toSAXSourceFromStream ( StreamSource source ) { InputSource inputSource ; if ( source . getReader ( ) != null ) { inputSource = new InputSource ( source . getReader ( ) ) ; } else { inputSource = new InputSource ( source . getInputStream ( ) ) ; } inputSource . setSystemId ( source . getSystemId ( ) ) ; inputSource . setPublicId ( source . getPublicId ( ) ) ; return new SAXSource ( inputSource ) ; } @ Converter public Reader toReaderFromSource ( Source src ) throws TransformerException { StreamSource stSrc = toStreamSource ( src ) ; Reader r = stSrc . getReader ( ) ; if ( r == null ) { r = new InputStreamReader ( stSrc . getInputStream ( ) ) ; } return r ; } @ Converter public DOMSource toDOMSourceFromStream ( StreamSource source ) throws ParserConfigurationException , IOException , SAXException { DocumentBuilder builder = createDocumentBuilder ( ) ; String systemId = source . getSystemId ( ) ; Document document = null ; Reader reader = source . getReader ( ) ; if ( reader != null ) { document = builder . parse ( new InputSource ( reader ) ) ; } else { InputStream inputStream = source . getInputStream ( ) ; if ( inputStream != null ) { InputSource inputsource = new InputSource ( inputStream ) ; inputsource . setSystemId ( systemId ) ; document = builder . parse ( inputsource ) ; } else { throw new IOException ( "No input stream or reader available" ) ; } } return new DOMSource ( document , systemId ) ; } @ Converter public SAXSource toSAXSourceFromDOM ( DOMSource source ) throws TransformerException { if ( dom2SaxClass != null ) { try { Constructor cns = dom2SaxClass . getConstructor ( new Class [ ] { Node . class } ) ; XMLReader converter = ( XMLReader ) cns . newInstance ( new Object [ ] { source . getNode ( ) } ) ; return new SAXSource ( converter , new InputSource ( ) ) ; } catch ( Exception e ) { throw new TransformerException ( e ) ; } } else { String str = toString ( source ) ; StringReader reader = new StringReader ( str ) ; return new SAXSource ( new InputSource ( reader ) ) ; } } @ Converter public DOMSource toDOMSourceFromSAX ( SAXSource source ) throws IOException , SAXException , ParserConfigurationException , TransformerException { return new DOMSource ( toDOMNodeFromSAX ( source ) ) ; } @ Converter public Node toDOMNodeFromSAX ( SAXSource source ) throws ParserConfigurationException , IOException , SAXException , TransformerException { DOMResult result = new DOMResult ( ) ; toResult ( source , result ) ; return result . getNode ( ) ; } @ Converter public Node toDOMNode ( Source source ) throws TransformerException , ParserConfigurationException , IOException , SAXException { DOMSource domSrc = toDOMSource ( source ) ; return domSrc != null ? domSrc . getNode ( ) : null ; } @ Converter public Element toDOMElement ( Source source ) throws TransformerException , ParserConfigurationException , IOException , SAXException { Node node = toDOMNode ( source ) ; return toDOMElement ( node ) ; } @ Converter public Element toDOMElement ( Node node ) throws TransformerException { if ( node instanceof Document ) { return ( ( Document ) node ) . getDocumentElement ( ) ; } else if ( node instanceof Element ) { return ( Element ) node ; } else { throw new TransformerException ( "Unable to convert DOM node to an Element" ) ; } } @ Converter public Document toDOMDocument ( byte [ ] data ) throws IOException , SAXException , ParserConfigurationException { DocumentBuilder documentBuilder = getDocumentBuilderFactory ( ) . newDocumentBuilder ( ) ; return documentBuilder . parse ( new ByteArrayInputStream ( data ) ) ; } @ Converter public Document toDOMDocument ( InputStream in ) throws IOException , SAXException , ParserConfigurationException { DocumentBuilder documentBuilder = getDocumentBuilderFactory ( ) . newDocumentBuilder ( ) ; return documentBuilder . parse ( in ) ; } @ Converter public Document toDOMDocument ( InputSource in ) throws IOException , SAXException , ParserConfigurationException { DocumentBuilder documentBuilder = getDocumentBuilderFactory ( ) . newDocumentBuilder ( ) ; return documentBuilder . parse ( in ) ; } @ Converter public Document toDOMDocument ( String text ) throws IOException , SAXException , ParserConfigurationException { return toDOMDocument ( text . getBytes ( ) ) ; } @ Converter public Document toDOMDocument ( File file ) throws IOException , SAXException , ParserConfigurationException { DocumentBuilder documentBuilder = getDocumentBuilderFactory ( ) . newDocumentBuilder ( ) ; return documentBuilder . parse ( file ) ; } @ Converter public Document toDOMDocument ( Source source ) throws TransformerException , ParserConfigurationException , IOException , SAXException { Node node = toDOMNode ( source ) ; return toDOMDocument ( node ) ; } @ Converter public Document toDOMDocument ( Node node ) throws ParserConfigurationException , TransformerException { if ( node instanceof Document ) { return ( Document ) node ; } else if ( node instanceof Element ) { Element elem = ( Element ) node ; if ( elem . getOwnerDocument ( ) . getDocumentElement ( ) == elem ) { return elem . getOwnerDocument ( ) ; } else { Document doc = createDocument ( ) ; doc . appendChild ( doc . importNode ( node , true ) ) ; return doc ; } } else { throw new TransformerException ( "Unable to convert DOM node to a Document" ) ; } } public DocumentBuilderFactory getDocumentBuilderFactory ( ) { if ( documentBuilderFactory == null ) { documentBuilderFactory = createDocumentBuilderFactory ( ) ; } return documentBuilderFactory ; } public void setDocumentBuilderFactory ( DocumentBuilderFactory documentBuilderFactory ) { this . documentBuilderFactory = documentBuilderFactory ; } public DocumentBuilderFactory createDocumentBuilderFactory ( ) { DocumentBuilderFactory factory = DocumentBuilderFactory . newInstance ( ) ; factory . setNamespaceAware ( true ) ; factory . setIgnoringElementContentWhitespace ( true ) ; factory . setIgnoringComments ( true ) ; return factory ; } public DocumentBuilder createDocumentBuilder ( ) throws ParserConfigurationException { DocumentBuilderFactory factory = getDocumentBuilderFactory ( ) ; return factory . newDocumentBuilder ( ) ; } public Document createDocument ( ) throws ParserConfigurationException { DocumentBuilder builder = createDocumentBuilder ( ) ; return builder . newDocument ( ) ; } public TransformerFactory getTransformerFactory ( ) { if ( transformerFactory == null ) { transformerFactory = createTransformerFactory ( ) ; } return transformerFactory ; } public void setTransformerFactory ( TransformerFactory transformerFactory ) { this . transformerFactory = transformerFactory ; } public Transformer createTransfomer ( ) throws TransformerConfigurationException { TransformerFactory factory = getTransformerFactory ( ) ; return factory . newTransformer ( ) ; } public TransformerFactory createTransformerFactory ( ) { TransformerFactory answer = TransformerFactory . newInstance ( ) ; return answer ; } } 	1	['48', '1', '0', '7', '111', '1116', '2', '5', '47', '0.914893617', '729', '0.6', '0', '0', '0.102836879', '0', '0', '14.08333333', '2', '1', '3']
package org . apache . camel . impl ; import org . apache . camel . Exchange ; import org . apache . camel . Expression ; import org . apache . camel . Predicate ; import static org . apache . camel . builder . PredicateBuilder . evaluateValuePredicate ; public abstract class ExpressionSupport < E extends Exchange > implements Expression < E > , Predicate < E > { public boolean matches ( E exchange ) { Object value = evaluate ( exchange ) ; return evaluateValuePredicate ( value ) ; } public void assertMatches ( String text , E exchange ) { if ( ! matches ( exchange ) ) { throw new AssertionError ( text + assertionFailureMessage ( exchange ) + " for exchange: " + exchange ) ; } } protected abstract String assertionFailureMessage ( E exchange ) ; } 	1	['6', '1', '2', '6', '14', '15', '2', '4', '5', '2', '50', '0', '0', '0', '0.541666667', '0', '0', '7.333333333', '2', '1', '1']
package org . apache . camel . builder ; import org . apache . camel . Exchange ; import org . apache . camel . Predicate ; public interface PredicateFactory < E extends Exchange > { Predicate < E > createPredicate ( ) ; } 	1	['1', '1', '0', '1', '1', '0', '0', '1', '1', '2', '1', '0', '0', '0', '1', '0', '0', '0', '1', '1', '1']
package org . apache . camel . processor ; import java . util . Iterator ; import java . util . List ; import java . util . ArrayList ; import org . apache . camel . Endpoint ; import org . apache . camel . Exchange ; import org . apache . camel . Expression ; import org . apache . camel . Processor ; import org . apache . camel . Producer ; import org . apache . camel . AsyncCallback ; import org . apache . camel . converter . ObjectConverter ; import org . apache . camel . impl . ServiceSupport ; import org . apache . camel . util . ExchangeHelper ; import static org . apache . camel . util . ObjectHelper . notNull ; import org . apache . camel . util . ProducerCache ; public class RecipientList extends ServiceSupport implements Processor { private final Expression < Exchange > expression ; private ProducerCache < Exchange > producerCache = new ProducerCache < Exchange > ( ) ; public RecipientList ( Expression < Exchange > expression ) { notNull ( expression , "expression" ) ; this . expression = expression ; } @ Override public String toString ( ) { return "RecipientList[" + expression + "]" ; } public void process ( Exchange exchange ) throws Exception { Object receipientList = expression . evaluate ( exchange ) ; Iterator iter = ObjectConverter . iterator ( receipientList ) ; List < Processor > processors = new ArrayList < Processor > ( ) ; while ( iter . hasNext ( ) ) { Object recipient = iter . next ( ) ; Endpoint < Exchange > endpoint = resolveEndpoint ( exchange , recipient ) ; Producer < Exchange > producer = producerCache . getProducer ( endpoint ) ; processors . add ( producer ) ; } Pipeline pipeline = new Pipeline ( processors ) ; pipeline . process ( exchange ) ; } protected Endpoint < Exchange > resolveEndpoint ( Exchange exchange , Object recipient ) { return ExchangeHelper . resolveEndpoint ( exchange , recipient ) ; } protected void doStop ( ) throws Exception { producerCache . stop ( ) ; } protected void doStart ( ) throws Exception { } } 	1	['6', '2', '0', '13', '24', '5', '2', '11', '3', '0.6', '85', '1', '2', '0.722222222', '0.416666667', '1', '1', '12.83333333', '1', '0.8333', '1']
