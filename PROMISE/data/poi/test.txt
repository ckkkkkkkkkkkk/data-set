package org . apache . poi . poifs . storage ; import java . io . * ; import java . util . * ; import org . apache . poi . poifs . common . POIFSConstants ; import org . apache . poi . poifs . filesystem . OfficeXmlFileException ; import org . apache . poi . util . IOUtils ; import org . apache . poi . util . IntegerField ; import org . apache . poi . util . LittleEndian ; import org . apache . poi . util . LittleEndianConsts ; import org . apache . poi . util . LongField ; import org . apache . poi . util . ShortField ; public class HeaderBlockReader implements HeaderBlockConstants { private IntegerField _bat_count ; private IntegerField _property_start ; private IntegerField _sbat_start ; private IntegerField _xbat_start ; private IntegerField _xbat_count ; private byte [ ] _data ; public HeaderBlockReader ( final InputStream stream ) throws IOException { _data = new byte [ POIFSConstants . BIG_BLOCK_SIZE ] ; int byte_count = IOUtils . readFully ( stream , _data ) ; if ( byte_count != POIFSConstants . BIG_BLOCK_SIZE ) { if ( byte_count == - 1 ) byte_count = 0 ; String type = " byte" + ( ( byte_count == 1 ) ? ( "" ) : ( "s" ) ) ; throw new IOException ( "Unable to read entire header; " + byte_count + type + " read; expected " + POIFSConstants . BIG_BLOCK_SIZE + " bytes" ) ; } LongField signature = new LongField ( _signature_offset , _data ) ; if ( signature . get ( ) != _signature ) { if ( _data [ 0 ] == 0x50 && _data [ 1 ] == 0x4b && _data [ 2 ] == 0x03 && _data [ 3 ] == 0x04 ) { throw new OfficeXmlFileException ( "The supplied data appears to be in the Office 2007+ XML. POI only supports OLE2 Office documents" ) ; } throw new IOException ( "Invalid header signature; read " + signature . get ( ) + ", expected " + _signature ) ; } _bat_count = new IntegerField ( _bat_count_offset , _data ) ; _property_start = new IntegerField ( _property_start_offset , _data ) ; _sbat_start = new IntegerField ( _sbat_start_offset , _data ) ; _xbat_start = new IntegerField ( _xbat_start_offset , _data ) ; _xbat_count = new IntegerField ( _xbat_count_offset , _data ) ; } public int getPropertyStart ( ) { return _property_start . get ( ) ; } public int getSBATStart ( ) { return _sbat_start . get ( ) ; } public int getBATCount ( ) { return _bat_count . get ( ) ; } public int [ ] getBATArray ( ) { int [ ] result = new int [ _max_bats_in_header ] ; int offset = _bat_array_offset ; for ( int j = 0 ; j < _max_bats_in_header ; j ++ ) { result [ j ] = LittleEndian . getInt ( _data , offset ) ; offset += LittleEndianConsts . INT_SIZE ; } return result ; } public int getXBATCount ( ) { return _xbat_count . get ( ) ; } public int getXBATIndex ( ) { return _xbat_start . get ( ) ; } } 	1
package org . apache . poi . hssf . record . formula ; import org . apache . poi . util . LittleEndian ; import org . apache . poi . util . BitField ; import org . apache . poi . hssf . record . RecordInputStream ; import org . apache . poi . hssf . util . CellReference ; import org . apache . poi . hssf . model . Workbook ; public class RefVPtg extends ReferencePtg { public final static byte sid = 0x44 ; protected RefVPtg ( ) { super ( ) ; } public RefVPtg ( short row , short column , boolean isRowRelative , boolean isColumnRelative ) { super ( row , column , isRowRelative , isColumnRelative ) ; } public RefVPtg ( RecordInputStream in ) { super ( in ) ; } public String getRefPtgName ( ) { return "RefVPtg" ; } public Object clone ( ) { RefVPtg ptg = new RefVPtg ( ) ; ptg . setRow ( getRow ( ) ) ; ptg . setColumnRaw ( getColumnRaw ( ) ) ; ptg . setClass ( ptgClass ) ; return ptg ; } } 	0
package org . apache . poi . hssf . usermodel ; import org . apache . poi . ddf . EscherRecord ; import org . apache . poi . ddf . EscherClientAnchorRecord ; import org . apache . poi . ddf . EscherChildAnchorRecord ; public class HSSFChildAnchor extends HSSFAnchor { public HSSFChildAnchor ( ) { } public HSSFChildAnchor ( int dx1 , int dy1 , int dx2 , int dy2 ) { super ( dx1 , dy1 , dx2 , dy2 ) ; } public void setAnchor ( int dx1 , int dy1 , int dx2 , int dy2 ) { this . dx1 = dx1 ; this . dy1 = dy1 ; this . dx2 = dx2 ; this . dy2 = dy2 ; } public boolean isHorizontallyFlipped ( ) { return dx1 > dx2 ; } public boolean isVerticallyFlipped ( ) { return dy1 > dy2 ; } } 	1
package org . apache . poi . hssf . record . formula ; import java . util . List ; import org . apache . poi . hssf . model . Workbook ; import org . apache . poi . hssf . record . RecordInputStream ; public class SubtractPtg extends OperationPtg { public final static int SIZE = 1 ; public final static byte sid = 0x04 ; public SubtractPtg ( ) { } public SubtractPtg ( RecordInputStream in ) { } public void writeBytes ( byte [ ] array , int offset ) { array [ offset + 0 ] = sid ; } public int getSize ( ) { return SIZE ; } public int getType ( ) { return TYPE_BINARY ; } public int getNumberOfOperands ( ) { return 2 ; } public String toFormulaString ( Workbook book ) { return "-" ; } public String toFormulaString ( String [ ] operands ) { StringBuffer buffer = new StringBuffer ( ) ; buffer . append ( operands [ 0 ] ) ; buffer . append ( "-" ) ; buffer . append ( operands [ 1 ] ) ; return buffer . toString ( ) ; } public Object clone ( ) { return new SubtractPtg ( ) ; } } 	0
package org . apache . poi . poifs . filesystem ; import java . io . * ; import java . util . * ; import org . apache . poi . poifs . common . POIFSConstants ; import org . apache . poi . poifs . dev . POIFSViewable ; import org . apache . poi . poifs . property . DocumentProperty ; import org . apache . poi . poifs . property . Property ; import org . apache . poi . poifs . storage . BlockWritable ; import org . apache . poi . poifs . storage . ListManagedBlock ; import org . apache . poi . poifs . storage . DocumentBlock ; import org . apache . poi . poifs . storage . RawDataBlock ; import org . apache . poi . poifs . storage . SmallDocumentBlock ; import org . apache . poi . util . HexDump ; public class POIFSDocument implements BATManaged , BlockWritable , POIFSViewable { private DocumentProperty _property ; private int _size ; private SmallBlockStore _small_store ; private BigBlockStore _big_store ; public POIFSDocument ( final String name , final RawDataBlock [ ] blocks , final int length ) throws IOException { _size = length ; _big_store = new BigBlockStore ( blocks ) ; _property = new DocumentProperty ( name , _size ) ; _small_store = new SmallBlockStore ( new BlockWritable [ 0 ] ) ; _property . setDocument ( this ) ; } public POIFSDocument ( final String name , final SmallDocumentBlock [ ] blocks , final int length ) { _size = length ; try { _big_store = new BigBlockStore ( new RawDataBlock [ 0 ] ) ; } catch ( IOException ignored ) { } _property = new DocumentProperty ( name , _size ) ; _small_store = new SmallBlockStore ( blocks ) ; _property . setDocument ( this ) ; } public POIFSDocument ( final String name , final ListManagedBlock [ ] blocks , final int length ) throws IOException { _size = length ; _property = new DocumentProperty ( name , _size ) ; _property . setDocument ( this ) ; if ( Property . isSmall ( _size ) ) { _big_store = new BigBlockStore ( new RawDataBlock [ 0 ] ) ; _small_store = new SmallBlockStore ( blocks ) ; } else { _big_store = new BigBlockStore ( blocks ) ; _small_store = new SmallBlockStore ( new BlockWritable [ 0 ] ) ; } } public POIFSDocument ( final String name , final InputStream stream ) throws IOException { List blocks = new ArrayList ( ) ; _size = 0 ; while ( true ) { DocumentBlock block = new DocumentBlock ( stream ) ; int blockSize = block . size ( ) ; if ( blockSize > 0 ) { blocks . add ( block ) ; _size += blockSize ; } if ( block . partiallyRead ( ) ) { break ; } } DocumentBlock [ ] bigBlocks = ( DocumentBlock [ ] ) blocks . toArray ( new DocumentBlock [ 0 ] ) ; _big_store = new BigBlockStore ( bigBlocks ) ; _property = new DocumentProperty ( name , _size ) ; _property . setDocument ( this ) ; if ( _property . shouldUseSmallBlocks ( ) ) { _small_store = new SmallBlockStore ( SmallDocumentBlock . convert ( bigBlocks , _size ) ) ; _big_store = new BigBlockStore ( new DocumentBlock [ 0 ] ) ; } else { _small_store = new SmallBlockStore ( new BlockWritable [ 0 ] ) ; } } public POIFSDocument ( final String name , final int size , final POIFSDocumentPath path , final POIFSWriterListener writer ) throws IOException { _size = size ; _property = new DocumentProperty ( name , _size ) ; _property . setDocument ( this ) ; if ( _property . shouldUseSmallBlocks ( ) ) { _small_store = new SmallBlockStore ( path , name , size , writer ) ; _big_store = new BigBlockStore ( new Object [ 0 ] ) ; } else { _small_store = new SmallBlockStore ( new BlockWritable [ 0 ] ) ; _big_store = new BigBlockStore ( path , name , size , writer ) ; } } public BlockWritable [ ] getSmallBlocks ( ) { return _small_store . getBlocks ( ) ; } public int getSize ( ) { return _size ; } void read ( final byte [ ] buffer , final int offset ) { if ( _property . shouldUseSmallBlocks ( ) ) { SmallDocumentBlock . read ( _small_store . getBlocks ( ) , buffer , offset ) ; } else { DocumentBlock . read ( _big_store . getBlocks ( ) , buffer , offset ) ; } } DocumentProperty getDocumentProperty ( ) { return _property ; } public void writeBlocks ( final OutputStream stream ) throws IOException { _big_store . writeBlocks ( stream ) ; } public int countBlocks ( ) { return _big_store . countBlocks ( ) ; } public void setStartBlock ( final int index ) { _property . setStartBlock ( index ) ; } public Object [ ] getViewableArray ( ) { Object [ ] results = new Object [ 1 ] ; String result ; try { ByteArrayOutputStream output = new ByteArrayOutputStream ( ) ; BlockWritable [ ] blocks = null ; if ( _big_store . isValid ( ) ) { blocks = _big_store . getBlocks ( ) ; } else if ( _small_store . isValid ( ) ) { blocks = _small_store . getBlocks ( ) ; } if ( blocks != null ) { for ( int k = 0 ; k < blocks . length ; k ++ ) { blocks [ k ] . writeBlocks ( output ) ; } byte [ ] data = output . toByteArray ( ) ; if ( data . length > _property . getSize ( ) ) { byte [ ] tmp = new byte [ _property . getSize ( ) ] ; System . arraycopy ( data , 0 , tmp , 0 , tmp . length ) ; data = tmp ; } output = new ByteArrayOutputStream ( ) ; HexDump . dump ( data , 0 , output , 0 ) ; result = output . toString ( ) ; } else { result = "<NO DATA>" ; } } catch ( IOException e ) { result = e . getMessage ( ) ; } results [ 0 ] = result ; return results ; } public Iterator getViewableIterator ( ) { return Collections . EMPTY_LIST . iterator ( ) ; } public boolean preferArray ( ) { return true ; } public String getShortDescription ( ) { StringBuffer buffer = new StringBuffer ( ) ; buffer . append ( "Document: \"" ) . append ( _property . getName ( ) ) . append ( "\"" ) ; buffer . append ( " size = " ) . append ( getSize ( ) ) ; return buffer . toString ( ) ; } private class SmallBlockStore { private SmallDocumentBlock [ ] smallBlocks ; private POIFSDocumentPath path ; private String name ; private int size ; private POIFSWriterListener writer ; SmallBlockStore ( final Object [ ] blocks ) { smallBlocks = new SmallDocumentBlock [ blocks . length ] ; for ( int j = 0 ; j < blocks . length ; j ++ ) { smallBlocks [ j ] = ( SmallDocumentBlock ) blocks [ j ] ; } this . path = null ; this . name = null ; this . size = - 1 ; this . writer = null ; } SmallBlockStore ( final POIFSDocumentPath path , final String name , final int size , final POIFSWriterListener writer ) { smallBlocks = new SmallDocumentBlock [ 0 ] ; this . path = path ; this . name = name ; this . size = size ; this . writer = writer ; } boolean isValid ( ) { return ( ( smallBlocks . length > 0 ) || ( writer != null ) ) ; } BlockWritable [ ] getBlocks ( ) { if ( isValid ( ) && ( writer != null ) ) { ByteArrayOutputStream stream = new ByteArrayOutputStream ( size ) ; DocumentOutputStream dstream = new DocumentOutputStream ( stream , size ) ; writer . processPOIFSWriterEvent ( new POIFSWriterEvent ( dstream , path , name , size ) ) ; smallBlocks = SmallDocumentBlock . convert ( stream . toByteArray ( ) , size ) ; } return smallBlocks ; } } private class BigBlockStore { private DocumentBlock [ ] bigBlocks ; private POIFSDocumentPath path ; private String name ; private int size ; private POIFSWriterListener writer ; BigBlockStore ( final Object [ ] blocks ) throws IOException { bigBlocks = new DocumentBlock [ blocks . length ] ; for ( int j = 0 ; j < blocks . length ; j ++ ) { if ( blocks [ j ] instanceof DocumentBlock ) { bigBlocks [ j ] = ( DocumentBlock ) blocks [ j ] ; } else { bigBlocks [ j ] = new DocumentBlock ( ( RawDataBlock ) blocks [ j ] ) ; } } this . path = null ; this . name = null ; this . size = - 1 ; this . writer = null ; } BigBlockStore ( final POIFSDocumentPath path , final String name , final int size , final POIFSWriterListener writer ) { bigBlocks = new DocumentBlock [ 0 ] ; this . path = path ; this . name = name ; this . size = size ; this . writer = writer ; } boolean isValid ( ) { return ( ( bigBlocks . length > 0 ) || ( writer != null ) ) ; } DocumentBlock [ ] getBlocks ( ) { if ( isValid ( ) && ( writer != null ) ) { ByteArrayOutputStream stream = new ByteArrayOutputStream ( size ) ; DocumentOutputStream dstream = new DocumentOutputStream ( stream , size ) ; writer . processPOIFSWriterEvent ( new POIFSWriterEvent ( dstream , path , name , size ) ) ; bigBlocks = DocumentBlock . convert ( stream . toByteArray ( ) , size ) ; } return bigBlocks ; } void writeBlocks ( OutputStream stream ) throws IOException { if ( isValid ( ) ) { if ( writer != null ) { DocumentOutputStream dstream = new DocumentOutputStream ( stream , size ) ; writer . processPOIFSWriterEvent ( new POIFSWriterEvent ( dstream , path , name , size ) ) ; dstream . writeFiller ( countBlocks ( ) * POIFSConstants . BIG_BLOCK_SIZE , DocumentBlock . getFillByte ( ) ) ; } else { for ( int k = 0 ; k < bigBlocks . length ; k ++ ) { bigBlocks [ k ] . writeBlocks ( stream ) ; } } } } int countBlocks ( ) { int rval = 0 ; if ( isValid ( ) ) { if ( writer != null ) { rval = ( size + POIFSConstants . BIG_BLOCK_SIZE - 1 ) / POIFSConstants . BIG_BLOCK_SIZE ; } else { rval = bigBlocks . length ; } } return rval ; } } } 	1
package org . apache . poi . hssf . record . formula ; import org . apache . poi . hssf . model . Workbook ; import org . apache . poi . hssf . record . RecordFormatException ; import org . apache . poi . hssf . record . RecordInputStream ; import org . apache . poi . util . LittleEndian ; public class ExpPtg extends Ptg { private final static int SIZE = 5 ; public final static short sid = 0x1 ; private short field_1_first_row ; private short field_2_first_col ; public ExpPtg ( ) { } public ExpPtg ( RecordInputStream in ) { field_1_first_row = in . readShort ( ) ; field_2_first_col = in . readShort ( ) ; } public void writeBytes ( byte [ ] array , int offset ) { array [ offset + 0 ] = ( byte ) ( sid ) ; LittleEndian . putShort ( array , offset + 1 , field_1_first_row ) ; LittleEndian . putShort ( array , offset + 3 , field_2_first_col ) ; } public int getSize ( ) { return SIZE ; } public short getRow ( ) { return field_1_first_row ; } public short getColumn ( ) { return field_2_first_col ; } public String toFormulaString ( Workbook book ) { throw new RecordFormatException ( "Coding Error: Expected ExpPtg to be converted from Shared to Non-Shared Formula" ) ; } public String toString ( ) { StringBuffer buffer = new StringBuffer ( "[Array Formula or Shared Formula]\n" ) ; buffer . append ( "row = " ) . append ( getRow ( ) ) . append ( "\n" ) ; buffer . append ( "col = " ) . append ( getColumn ( ) ) . append ( "\n" ) ; return buffer . toString ( ) ; } public byte getDefaultOperandClass ( ) { return Ptg . CLASS_VALUE ; } public Object clone ( ) { ExpPtg result = new ExpPtg ( ) ; result . field_1_first_row = field_1_first_row ; result . field_2_first_col = field_2_first_col ; return result ; } } 	1
package org . apache . poi . ddf ; import java . util . HashMap ; import java . util . Map ; public class EscherProperties { public static final short TRANSFORM__ROTATION = 4 ; public static final short PROTECTION__LOCKROTATION = 119 ; public static final short PROTECTION__LOCKASPECTRATIO = 120 ; public static final short PROTECTION__LOCKPOSITION = 121 ; public static final short PROTECTION__LOCKAGAINSTSELECT = 122 ; public static final short PROTECTION__LOCKCROPPING = 123 ; public static final short PROTECTION__LOCKVERTICES = 124 ; public static final short PROTECTION__LOCKTEXT = 125 ; public static final short PROTECTION__LOCKADJUSTHANDLES = 126 ; public static final short PROTECTION__LOCKAGAINSTGROUPING = 127 ; public static final short TEXT__TEXTID = 128 ; public static final short TEXT__TEXTLEFT = 129 ; public static final short TEXT__TEXTTOP = 130 ; public static final short TEXT__TEXTRIGHT = 131 ; public static final short TEXT__TEXTBOTTOM = 132 ; public static final short TEXT__WRAPTEXT = 133 ; public static final short TEXT__SCALETEXT = 134 ; public static final short TEXT__ANCHORTEXT = 135 ; public static final short TEXT__TEXTFLOW = 136 ; public static final short TEXT__FONTROTATION = 137 ; public static final short TEXT__IDOFNEXTSHAPE = 138 ; public static final short TEXT__BIDIR = 139 ; public static final short TEXT__SINGLECLICKSELECTS = 187 ; public static final short TEXT__USEHOSTMARGINS = 188 ; public static final short TEXT__ROTATETEXTWITHSHAPE = 189 ; public static final short TEXT__SIZESHAPETOFITTEXT = 190 ; public static final short TEXT__SIZE_TEXT_TO_FIT_SHAPE = 191 ; public static final short GEOTEXT__UNICODE = 192 ; public static final short GEOTEXT__RTFTEXT = 193 ; public static final short GEOTEXT__ALIGNMENTONCURVE = 194 ; public static final short GEOTEXT__DEFAULTPOINTSIZE = 195 ; public static final short GEOTEXT__TEXTSPACING = 196 ; public static final short GEOTEXT__FONTFAMILYNAME = 197 ; public static final short GEOTEXT__REVERSEROWORDER = 240 ; public static final short GEOTEXT__HASTEXTEFFECT = 241 ; public static final short GEOTEXT__ROTATECHARACTERS = 242 ; public static final short GEOTEXT__KERNCHARACTERS = 243 ; public static final short GEOTEXT__TIGHTORTRACK = 244 ; public static final short GEOTEXT__STRETCHTOFITSHAPE = 245 ; public static final short GEOTEXT__CHARBOUNDINGBOX = 246 ; public static final short GEOTEXT__SCALETEXTONPATH = 247 ; public static final short GEOTEXT__STRETCHCHARHEIGHT = 248 ; public static final short GEOTEXT__NOMEASUREALONGPATH = 249 ; public static final short GEOTEXT__BOLDFONT = 250 ; public static final short GEOTEXT__ITALICFONT = 251 ; public static final short GEOTEXT__UNDERLINEFONT = 252 ; public static final short GEOTEXT__SHADOWFONT = 253 ; public static final short GEOTEXT__SMALLCAPSFONT = 254 ; public static final short GEOTEXT__STRIKETHROUGHFONT = 255 ; public static final short BLIP__CROPFROMTOP = 256 ; public static final short BLIP__CROPFROMBOTTOM = 257 ; public static final short BLIP__CROPFROMLEFT = 258 ; public static final short BLIP__CROPFROMRIGHT = 259 ; public static final short BLIP__BLIPTODISPLAY = 260 ; public static final short BLIP__BLIPFILENAME = 261 ; public static final short BLIP__BLIPFLAGS = 262 ; public static final short BLIP__TRANSPARENTCOLOR = 263 ; public static final short BLIP__CONTRASTSETTING = 264 ; public static final short BLIP__BRIGHTNESSSETTING = 265 ; public static final short BLIP__GAMMA = 266 ; public static final short BLIP__PICTUREID = 267 ; public static final short BLIP__DOUBLEMOD = 268 ; public static final short BLIP__PICTUREFILLMOD = 269 ; public static final short BLIP__PICTURELINE = 270 ; public static final short BLIP__PRINTBLIP = 271 ; public static final short BLIP__PRINTBLIPFILENAME = 272 ; public static final short BLIP__PRINTFLAGS = 273 ; public static final short BLIP__NOHITTESTPICTURE = 316 ; public static final short BLIP__PICTUREGRAY = 317 ; public static final short BLIP__PICTUREBILEVEL = 318 ; public static final short BLIP__PICTUREACTIVE = 319 ; public static final short GEOMETRY__LEFT = 320 ; public static final short GEOMETRY__TOP = 321 ; public static final short GEOMETRY__RIGHT = 322 ; public static final short GEOMETRY__BOTTOM = 323 ; public static final short GEOMETRY__SHAPEPATH = 324 ; public static final short GEOMETRY__VERTICES = 325 ; public static final short GEOMETRY__SEGMENTINFO = 326 ; public static final short GEOMETRY__ADJUSTVALUE = 327 ; public static final short GEOMETRY__ADJUST2VALUE = 328 ; public static final short GEOMETRY__ADJUST3VALUE = 329 ; public static final short GEOMETRY__ADJUST4VALUE = 330 ; public static final short GEOMETRY__ADJUST5VALUE = 331 ; public static final short GEOMETRY__ADJUST6VALUE = 332 ; public static final short GEOMETRY__ADJUST7VALUE = 333 ; public static final short GEOMETRY__ADJUST8VALUE = 334 ; public static final short GEOMETRY__ADJUST9VALUE = 335 ; public static final short GEOMETRY__ADJUST10VALUE = 336 ; public static final short GEOMETRY__SHADOWok = 378 ; public static final short GEOMETRY__3DOK = 379 ; public static final short GEOMETRY__LINEOK = 380 ; public static final short GEOMETRY__GEOTEXTOK = 381 ; public static final short GEOMETRY__FILLSHADESHAPEOK = 382 ; public static final short GEOMETRY__FILLOK = 383 ; public static final short FILL__FILLTYPE = 384 ; public static final short FILL__FILLCOLOR = 385 ; public static final short FILL__FILLOPACITY = 386 ; public static final short FILL__FILLBACKCOLOR = 387 ; public static final short FILL__BACKOPACITY = 388 ; public static final short FILL__CRMOD = 389 ; public static final short FILL__PATTERNTEXTURE = 390 ; public static final short FILL__BLIPFILENAME = 391 ; public static final short FILL__BLIPFLAGS = 392 ; public static final short FILL__WIDTH = 393 ; public static final short FILL__HEIGHT = 394 ; public static final short FILL__ANGLE = 395 ; public static final short FILL__FOCUS = 396 ; public static final short FILL__TOLEFT = 397 ; public static final short FILL__TOTOP = 398 ; public static final short FILL__TORIGHT = 399 ; public static final short FILL__TOBOTTOM = 400 ; public static final short FILL__RECTLEFT = 401 ; public static final short FILL__RECTTOP = 402 ; public static final short FILL__RECTRIGHT = 403 ; public static final short FILL__RECTBOTTOM = 404 ; public static final short FILL__DZTYPE = 405 ; public static final short FILL__SHADEPRESET = 406 ; public static final short FILL__SHADECOLORS = 407 ; public static final short FILL__ORIGINX = 408 ; public static final short FILL__ORIGINY = 409 ; public static final short FILL__SHAPEORIGINX = 410 ; public static final short FILL__SHAPEORIGINY = 411 ; public static final short FILL__SHADETYPE = 412 ; public static final short FILL__FILLED = 443 ; public static final short FILL__HITTESTFILL = 444 ; public static final short FILL__SHAPE = 445 ; public static final short FILL__USERECT = 446 ; public static final short FILL__NOFILLHITTEST = 447 ; public static final short LINESTYLE__COLOR = 448 ; public static final short LINESTYLE__OPACITY = 449 ; public static final short LINESTYLE__BACKCOLOR = 450 ; public static final short LINESTYLE__CRMOD = 451 ; public static final short LINESTYLE__LINETYPE = 452 ; public static final short LINESTYLE__FILLBLIP = 453 ; public static final short LINESTYLE__FILLBLIPNAME = 454 ; public static final short LINESTYLE__FILLBLIPFLAGS = 455 ; public static final short LINESTYLE__FILLWIDTH = 456 ; public static final short LINESTYLE__FILLHEIGHT = 457 ; public static final short LINESTYLE__FILLDZTYPE = 458 ; public static final short LINESTYLE__LINEWIDTH = 459 ; public static final short LINESTYLE__LINEMITERLIMIT = 460 ; public static final short LINESTYLE__LINESTYLE = 461 ; public static final short LINESTYLE__LINEDASHING = 462 ; public static final short LINESTYLE__LINEDASHSTYLE = 463 ; public static final short LINESTYLE__LINESTARTARROWHEAD = 464 ; public static final short LINESTYLE__LINEENDARROWHEAD = 465 ; public static final short LINESTYLE__LINESTARTARROWWIDTH = 466 ; public static final short LINESTYLE__LINEESTARTARROWLENGTH = 467 ; public static final short LINESTYLE__LINEENDARROWWIDTH = 468 ; public static final short LINESTYLE__LINEENDARROWLENGTH = 469 ; public static final short LINESTYLE__LINEJOINSTYLE = 470 ; public static final short LINESTYLE__LINEENDCAPSTYLE = 471 ; public static final short LINESTYLE__ARROWHEADSOK = 507 ; public static final short LINESTYLE__ANYLINE = 508 ; public static final short LINESTYLE__HITLINETEST = 509 ; public static final short LINESTYLE__LINEFILLSHAPE = 510 ; public static final short LINESTYLE__NOLINEDRAWDASH = 511 ; public static final short SHADOWSTYLE__TYPE = 512 ; public static final short SHADOWSTYLE__COLOR = 513 ; public static final short SHADOWSTYLE__HIGHLIGHT = 514 ; public static final short SHADOWSTYLE__CRMOD = 515 ; public static final short SHADOWSTYLE__OPACITY = 516 ; public static final short SHADOWSTYLE__OFFSETX = 517 ; public static final short SHADOWSTYLE__OFFSETY = 518 ; public static final short SHADOWSTYLE__SECONDOFFSETX = 519 ; public static final short SHADOWSTYLE__SECONDOFFSETY = 520 ; public static final short SHADOWSTYLE__SCALEXTOX = 521 ; public static final short SHADOWSTYLE__SCALEYTOX = 522 ; public static final short SHADOWSTYLE__SCALEXTOY = 523 ; public static final short SHADOWSTYLE__SCALEYTOY = 524 ; public static final short SHADOWSTYLE__PERSPECTIVEX = 525 ; public static final short SHADOWSTYLE__PERSPECTIVEY = 526 ; public static final short SHADOWSTYLE__WEIGHT = 527 ; public static final short SHADOWSTYLE__ORIGINX = 528 ; public static final short SHADOWSTYLE__ORIGINY = 529 ; public static final short SHADOWSTYLE__SHADOW = 574 ; public static final short SHADOWSTYLE__SHADOWOBSURED = 575 ; public static final short PERSPECTIVE__TYPE = 576 ; public static final short PERSPECTIVE__OFFSETX = 577 ; public static final short PERSPECTIVE__OFFSETY = 578 ; public static final short PERSPECTIVE__SCALEXTOX = 579 ; public static final short PERSPECTIVE__SCALEYTOX = 580 ; public static final short PERSPECTIVE__SCALEXTOY = 581 ; public static final short PERSPECTIVE__SCALEYTOY = 582 ; public static final short PERSPECTIVE__PERSPECTIVEX = 583 ; public static final short PERSPECTIVE__PERSPECTIVEY = 584 ; public static final short PERSPECTIVE__WEIGHT = 585 ; public static final short PERSPECTIVE__ORIGINX = 586 ; public static final short PERSPECTIVE__ORIGINY = 587 ; public static final short PERSPECTIVE__PERSPECTIVEON = 639 ; public static final short THREED__SPECULARAMOUNT = 640 ; public static final short THREED__DIFFUSEAMOUNT = 661 ; public static final short THREED__SHININESS = 662 ; public static final short THREED__EDGETHICKNESS = 663 ; public static final short THREED__EXTRUDEFORWARD = 664 ; public static final short THREED__EXTRUDEBACKWARD = 665 ; public static final short THREED__EXTRUDEPLANE = 666 ; public static final short THREED__EXTRUSIONCOLOR = 667 ; public static final short THREED__CRMOD = 648 ; public static final short THREED__3DEFFECT = 700 ; public static final short THREED__METALLIC = 701 ; public static final short THREED__USEEXTRUSIONCOLOR = 702 ; public static final short THREED__LIGHTFACE = 703 ; public static final short THREEDSTYLE__YROTATIONANGLE = 704 ; public static final short THREEDSTYLE__XROTATIONANGLE = 705 ; public static final short THREEDSTYLE__ROTATIONAXISX = 706 ; public static final short THREEDSTYLE__ROTATIONAXISY = 707 ; public static final short THREEDSTYLE__ROTATIONAXISZ = 708 ; public static final short THREEDSTYLE__ROTATIONANGLE = 709 ; public static final short THREEDSTYLE__ROTATIONCENTERX = 710 ; public static final short THREEDSTYLE__ROTATIONCENTERY = 711 ; public static final short THREEDSTYLE__ROTATIONCENTERZ = 712 ; public static final short THREEDSTYLE__RENDERMODE = 713 ; public static final short THREEDSTYLE__TOLERANCE = 714 ; public static final short THREEDSTYLE__XVIEWPOINT = 715 ; public static final short THREEDSTYLE__YVIEWPOINT = 716 ; public static final short THREEDSTYLE__ZVIEWPOINT = 717 ; public static final short THREEDSTYLE__ORIGINX = 718 ; public static final short THREEDSTYLE__ORIGINY = 719 ; public static final short THREEDSTYLE__SKEWANGLE = 720 ; public static final short THREEDSTYLE__SKEWAMOUNT = 721 ; public static final short THREEDSTYLE__AMBIENTINTENSITY = 722 ; public static final short THREEDSTYLE__KEYX = 723 ; public static final short THREEDSTYLE__KEYY = 724 ; public static final short THREEDSTYLE__KEYZ = 725 ; public static final short THREEDSTYLE__KEYINTENSITY = 726 ; public static final short THREEDSTYLE__FILLX = 727 ; public static final short THREEDSTYLE__FILLY = 728 ; public static final short THREEDSTYLE__FILLZ = 729 ; public static final short THREEDSTYLE__FILLINTENSITY = 730 ; public static final short THREEDSTYLE__CONSTRAINROTATION = 763 ; public static final short THREEDSTYLE__ROTATIONCENTERAUTO = 764 ; public static final short THREEDSTYLE__PARALLEL = 765 ; public static final short THREEDSTYLE__KEYHARSH = 766 ; public static final short THREEDSTYLE__FILLHARSH = 767 ; public static final short SHAPE__MASTER = 769 ; public static final short SHAPE__CONNECTORSTYLE = 771 ; public static final short SHAPE__BLACKANDWHITESETTINGS = 772 ; public static final short SHAPE__WMODEPUREBW = 773 ; public static final short SHAPE__WMODEBW = 774 ; public static final short SHAPE__OLEICON = 826 ; public static final short SHAPE__PREFERRELATIVERESIZE = 827 ; public static final short SHAPE__LOCKSHAPETYPE = 828 ; public static final short SHAPE__DELETEATTACHEDOBJECT = 830 ; public static final short SHAPE__BACKGROUNDSHAPE = 831 ; public static final short CALLOUT__CALLOUTTYPE = 832 ; public static final short CALLOUT__XYCALLOUTGAP = 833 ; public static final short CALLOUT__CALLOUTANGLE = 834 ; public static final short CALLOUT__CALLOUTDROPTYPE = 835 ; public static final short CALLOUT__CALLOUTDROPSPECIFIED = 836 ; public static final short CALLOUT__CALLOUTLENGTHSPECIFIED = 837 ; public static final short CALLOUT__ISCALLOUT = 889 ; public static final short CALLOUT__CALLOUTACCENTBAR = 890 ; public static final short CALLOUT__CALLOUTTEXTBORDER = 891 ; public static final short CALLOUT__CALLOUTMINUSX = 892 ; public static final short CALLOUT__CALLOUTMINUSY = 893 ; public static final short CALLOUT__DROPAUTO = 894 ; public static final short CALLOUT__LENGTHSPECIFIED = 895 ; public static final short GROUPSHAPE__SHAPENAME = 896 ; public static final short GROUPSHAPE__DESCRIPTION = 897 ; public static final short GROUPSHAPE__HYPERLINK = 898 ; public static final short GROUPSHAPE__WRAPPOLYGONVERTICES = 899 ; public static final short GROUPSHAPE__WRAPDISTLEFT = 900 ; public static final short GROUPSHAPE__WRAPDISTTOP = 901 ; public static final short GROUPSHAPE__WRAPDISTRIGHT = 902 ; public static final short GROUPSHAPE__WRAPDISTBOTTOM = 903 ; public static final short GROUPSHAPE__REGROUPID = 904 ; public static final short GROUPSHAPE__EDITEDWRAP = 953 ; public static final short GROUPSHAPE__BEHINDDOCUMENT = 954 ; public static final short GROUPSHAPE__ONDBLCLICKNOTIFY = 955 ; public static final short GROUPSHAPE__ISBUTTON = 956 ; public static final short GROUPSHAPE__1DADJUSTMENT = 957 ; public static final short GROUPSHAPE__HIDDEN = 958 ; public static final short GROUPSHAPE__PRINT = 959 ; private static Map properties ; private static void initProps ( ) { if ( properties == null ) { properties = new HashMap ( ) ; addProp ( TRANSFORM__ROTATION , data ( "transform.rotation" ) ) ; addProp ( PROTECTION__LOCKROTATION , data ( "protection.lockrotation" ) ) ; addProp ( PROTECTION__LOCKASPECTRATIO , data ( "protection.lockaspectratio" ) ) ; addProp ( PROTECTION__LOCKPOSITION , data ( "protection.lockposition" ) ) ; addProp ( PROTECTION__LOCKAGAINSTSELECT , data ( "protection.lockagainstselect" ) ) ; addProp ( PROTECTION__LOCKCROPPING , data ( "protection.lockcropping" ) ) ; addProp ( PROTECTION__LOCKVERTICES , data ( "protection.lockvertices" ) ) ; addProp ( PROTECTION__LOCKTEXT , data ( "protection.locktext" ) ) ; addProp ( PROTECTION__LOCKADJUSTHANDLES , data ( "protection.lockadjusthandles" ) ) ; addProp ( PROTECTION__LOCKAGAINSTGROUPING , data ( "protection.lockagainstgrouping" , EscherPropertyMetaData . TYPE_BOOLEAN ) ) ; addProp ( TEXT__TEXTID , data ( "text.textid" ) ) ; addProp ( TEXT__TEXTLEFT , data ( "text.textleft" ) ) ; addProp ( TEXT__TEXTTOP , data ( "text.texttop" ) ) ; addProp ( TEXT__TEXTRIGHT , data ( "text.textright" ) ) ; addProp ( TEXT__TEXTBOTTOM , data ( "text.textbottom" ) ) ; addProp ( TEXT__WRAPTEXT , data ( "text.wraptext" ) ) ; addProp ( TEXT__SCALETEXT , data ( "text.scaletext" ) ) ; addProp ( TEXT__ANCHORTEXT , data ( "text.anchortext" ) ) ; addProp ( TEXT__TEXTFLOW , data ( "text.textflow" ) ) ; addProp ( TEXT__FONTROTATION , data ( "text.fontrotation" ) ) ; addProp ( TEXT__IDOFNEXTSHAPE , data ( "text.idofnextshape" ) ) ; addProp ( TEXT__BIDIR , data ( "text.bidir" ) ) ; addProp ( TEXT__SINGLECLICKSELECTS , data ( "text.singleclickselects" ) ) ; addProp ( TEXT__USEHOSTMARGINS , data ( "text.usehostmargins" ) ) ; addProp ( TEXT__ROTATETEXTWITHSHAPE , data ( "text.rotatetextwithshape" ) ) ; addProp ( TEXT__SIZESHAPETOFITTEXT , data ( "text.sizeshapetofittext" ) ) ; addProp ( TEXT__SIZE_TEXT_TO_FIT_SHAPE , data ( "text.sizetexttofitshape" , EscherPropertyMetaData . TYPE_BOOLEAN ) ) ; addProp ( GEOTEXT__UNICODE , data ( "geotext.unicode" ) ) ; addProp ( GEOTEXT__RTFTEXT , data ( "geotext.rtftext" ) ) ; addProp ( GEOTEXT__ALIGNMENTONCURVE , data ( "geotext.alignmentoncurve" ) ) ; addProp ( GEOTEXT__DEFAULTPOINTSIZE , data ( "geotext.defaultpointsize" ) ) ; addProp ( GEOTEXT__TEXTSPACING , data ( "geotext.textspacing" ) ) ; addProp ( GEOTEXT__FONTFAMILYNAME , data ( "geotext.fontfamilyname" ) ) ; addProp ( GEOTEXT__REVERSEROWORDER , data ( "geotext.reverseroworder" ) ) ; addProp ( GEOTEXT__HASTEXTEFFECT , data ( "geotext.hastexteffect" ) ) ; addProp ( GEOTEXT__ROTATECHARACTERS , data ( "geotext.rotatecharacters" ) ) ; addProp ( GEOTEXT__KERNCHARACTERS , data ( "geotext.kerncharacters" ) ) ; addProp ( GEOTEXT__TIGHTORTRACK , data ( "geotext.tightortrack" ) ) ; addProp ( GEOTEXT__STRETCHTOFITSHAPE , data ( "geotext.stretchtofitshape" ) ) ; addProp ( GEOTEXT__CHARBOUNDINGBOX , data ( "geotext.charboundingbox" ) ) ; addProp ( GEOTEXT__SCALETEXTONPATH , data ( "geotext.scaletextonpath" ) ) ; addProp ( GEOTEXT__STRETCHCHARHEIGHT , data ( "geotext.stretchcharheight" ) ) ; addProp ( GEOTEXT__NOMEASUREALONGPATH , data ( "geotext.nomeasurealongpath" ) ) ; addProp ( GEOTEXT__BOLDFONT , data ( "geotext.boldfont" ) ) ; addProp ( GEOTEXT__ITALICFONT , data ( "geotext.italicfont" ) ) ; addProp ( GEOTEXT__UNDERLINEFONT , data ( "geotext.underlinefont" ) ) ; addProp ( GEOTEXT__SHADOWFONT , data ( "geotext.shadowfont" ) ) ; addProp ( GEOTEXT__SMALLCAPSFONT , data ( "geotext.smallcapsfont" ) ) ; addProp ( GEOTEXT__STRIKETHROUGHFONT , data ( "geotext.strikethroughfont" ) ) ; addProp ( BLIP__CROPFROMTOP , data ( "blip.cropfromtop" ) ) ; addProp ( BLIP__CROPFROMBOTTOM , data ( "blip.cropfrombottom" ) ) ; addProp ( BLIP__CROPFROMLEFT , data ( "blip.cropfromleft" ) ) ; addProp ( BLIP__CROPFROMRIGHT , data ( "blip.cropfromright" ) ) ; addProp ( BLIP__BLIPTODISPLAY , data ( "blip.bliptodisplay" ) ) ; addProp ( BLIP__BLIPFILENAME , data ( "blip.blipfilename" ) ) ; addProp ( BLIP__BLIPFLAGS , data ( "blip.blipflags" ) ) ; addProp ( BLIP__TRANSPARENTCOLOR , data ( "blip.transparentcolor" ) ) ; addProp ( BLIP__CONTRASTSETTING , data ( "blip.contrastsetting" ) ) ; addProp ( BLIP__BRIGHTNESSSETTING , data ( "blip.brightnesssetting" ) ) ; addProp ( BLIP__GAMMA , data ( "blip.gamma" ) ) ; addProp ( BLIP__PICTUREID , data ( "blip.pictureid" ) ) ; addProp ( BLIP__DOUBLEMOD , data ( "blip.doublemod" ) ) ; addProp ( BLIP__PICTUREFILLMOD , data ( "blip.picturefillmod" ) ) ; addProp ( BLIP__PICTURELINE , data ( "blip.pictureline" ) ) ; addProp ( BLIP__PRINTBLIP , data ( "blip.printblip" ) ) ; addProp ( BLIP__PRINTBLIPFILENAME , data ( "blip.printblipfilename" ) ) ; addProp ( BLIP__PRINTFLAGS , data ( "blip.printflags" ) ) ; addProp ( BLIP__NOHITTESTPICTURE , data ( "blip.nohittestpicture" ) ) ; addProp ( BLIP__PICTUREGRAY , data ( "blip.picturegray" ) ) ; addProp ( BLIP__PICTUREBILEVEL , data ( "blip.picturebilevel" ) ) ; addProp ( BLIP__PICTUREACTIVE , data ( "blip.pictureactive" ) ) ; addProp ( GEOMETRY__LEFT , data ( "geometry.left" ) ) ; addProp ( GEOMETRY__TOP , data ( "geometry.top" ) ) ; addProp ( GEOMETRY__RIGHT , data ( "geometry.right" ) ) ; addProp ( GEOMETRY__BOTTOM , data ( "geometry.bottom" ) ) ; addProp ( GEOMETRY__SHAPEPATH , data ( "geometry.shapepath" , EscherPropertyMetaData . TYPE_SHAPEPATH ) ) ; addProp ( GEOMETRY__VERTICES , data ( "geometry.vertices" , EscherPropertyMetaData . TYPE_ARRAY ) ) ; addProp ( GEOMETRY__SEGMENTINFO , data ( "geometry.segmentinfo" , EscherPropertyMetaData . TYPE_ARRAY ) ) ; addProp ( GEOMETRY__ADJUSTVALUE , data ( "geometry.adjustvalue" ) ) ; addProp ( GEOMETRY__ADJUST2VALUE , data ( "geometry.adjust2value" ) ) ; addProp ( GEOMETRY__ADJUST3VALUE , data ( "geometry.adjust3value" ) ) ; addProp ( GEOMETRY__ADJUST4VALUE , data ( "geometry.adjust4value" ) ) ; addProp ( GEOMETRY__ADJUST5VALUE , data ( "geometry.adjust5value" ) ) ; addProp ( GEOMETRY__ADJUST6VALUE , data ( "geometry.adjust6value" ) ) ; addProp ( GEOMETRY__ADJUST7VALUE , data ( "geometry.adjust7value" ) ) ; addProp ( GEOMETRY__ADJUST8VALUE , data ( "geometry.adjust8value" ) ) ; addProp ( GEOMETRY__ADJUST9VALUE , data ( "geometry.adjust9value" ) ) ; addProp ( GEOMETRY__ADJUST10VALUE , data ( "geometry.adjust10value" ) ) ; addProp ( GEOMETRY__SHADOWok , data ( "geometry.shadowOK" ) ) ; addProp ( GEOMETRY__3DOK , data ( "geometry.3dok" ) ) ; addProp ( GEOMETRY__LINEOK , data ( "geometry.lineok" ) ) ; addProp ( GEOMETRY__GEOTEXTOK , data ( "geometry.geotextok" ) ) ; addProp ( GEOMETRY__FILLSHADESHAPEOK , data ( "geometry.fillshadeshapeok" ) ) ; addProp ( GEOMETRY__FILLOK , data ( "geometry.fillok" , EscherPropertyMetaData . TYPE_BOOLEAN ) ) ; addProp ( FILL__FILLTYPE , data ( "fill.filltype" ) ) ; addProp ( FILL__FILLCOLOR , data ( "fill.fillcolor" , EscherPropertyMetaData . TYPE_RGB ) ) ; addProp ( FILL__FILLOPACITY , data ( "fill.fillopacity" ) ) ; addProp ( FILL__FILLBACKCOLOR , data ( "fill.fillbackcolor" , EscherPropertyMetaData . TYPE_RGB ) ) ; addProp ( FILL__BACKOPACITY , data ( "fill.backopacity" ) ) ; addProp ( FILL__CRMOD , data ( "fill.crmod" ) ) ; addProp ( FILL__PATTERNTEXTURE , data ( "fill.patterntexture" ) ) ; addProp ( FILL__BLIPFILENAME , data ( "fill.blipfilename" ) ) ; addProp ( FILL__BLIPFLAGS , data ( "fill.blipflags" ) ) ; addProp ( FILL__WIDTH , data ( "fill.width" ) ) ; addProp ( FILL__HEIGHT , data ( "fill.height" ) ) ; addProp ( FILL__ANGLE , data ( "fill.angle" ) ) ; addProp ( FILL__FOCUS , data ( "fill.focus" ) ) ; addProp ( FILL__TOLEFT , data ( "fill.toleft" ) ) ; addProp ( FILL__TOTOP , data ( "fill.totop" ) ) ; addProp ( FILL__TORIGHT , data ( "fill.toright" ) ) ; addProp ( FILL__TOBOTTOM , data ( "fill.tobottom" ) ) ; addProp ( FILL__RECTLEFT , data ( "fill.rectleft" ) ) ; addProp ( FILL__RECTTOP , data ( "fill.recttop" ) ) ; addProp ( FILL__RECTRIGHT , data ( "fill.rectright" ) ) ; addProp ( FILL__RECTBOTTOM , data ( "fill.rectbottom" ) ) ; addProp ( FILL__DZTYPE , data ( "fill.dztype" ) ) ; addProp ( FILL__SHADEPRESET , data ( "fill.shadepreset" ) ) ; addProp ( FILL__SHADECOLORS , data ( "fill.shadecolors" , EscherPropertyMetaData . TYPE_ARRAY ) ) ; addProp ( FILL__ORIGINX , data ( "fill.originx" ) ) ; addProp ( FILL__ORIGINY , data ( "fill.originy" ) ) ; addProp ( FILL__SHAPEORIGINX , data ( "fill.shapeoriginx" ) ) ; addProp ( FILL__SHAPEORIGINY , data ( "fill.shapeoriginy" ) ) ; addProp ( FILL__SHADETYPE , data ( "fill.shadetype" ) ) ; addProp ( FILL__FILLED , data ( "fill.filled" ) ) ; addProp ( FILL__HITTESTFILL , data ( "fill.hittestfill" ) ) ; addProp ( FILL__SHAPE , data ( "fill.shape" ) ) ; addProp ( FILL__USERECT , data ( "fill.userect" ) ) ; addProp ( FILL__NOFILLHITTEST , data ( "fill.nofillhittest" , EscherPropertyMetaData . TYPE_BOOLEAN ) ) ; addProp ( LINESTYLE__COLOR , data ( "linestyle.color" , EscherPropertyMetaData . TYPE_RGB ) ) ; addProp ( LINESTYLE__OPACITY , data ( "linestyle.opacity" ) ) ; addProp ( LINESTYLE__BACKCOLOR , data ( "linestyle.backcolor" , EscherPropertyMetaData . TYPE_RGB ) ) ; addProp ( LINESTYLE__CRMOD , data ( "linestyle.crmod" ) ) ; addProp ( LINESTYLE__LINETYPE , data ( "linestyle.linetype" ) ) ; addProp ( LINESTYLE__FILLBLIP , data ( "linestyle.fillblip" ) ) ; addProp ( LINESTYLE__FILLBLIPNAME , data ( "linestyle.fillblipname" ) ) ; addProp ( LINESTYLE__FILLBLIPFLAGS , data ( "linestyle.fillblipflags" ) ) ; addProp ( LINESTYLE__FILLWIDTH , data ( "linestyle.fillwidth" ) ) ; addProp ( LINESTYLE__FILLHEIGHT , data ( "linestyle.fillheight" ) ) ; addProp ( LINESTYLE__FILLDZTYPE , data ( "linestyle.filldztype" ) ) ; addProp ( LINESTYLE__LINEWIDTH , data ( "linestyle.linewidth" ) ) ; addProp ( LINESTYLE__LINEMITERLIMIT , data ( "linestyle.linemiterlimit" ) ) ; addProp ( LINESTYLE__LINESTYLE , data ( "linestyle.linestyle" ) ) ; addProp ( LINESTYLE__LINEDASHING , data ( "linestyle.linedashing" ) ) ; addProp ( LINESTYLE__LINEDASHSTYLE , data ( "linestyle.linedashstyle" , EscherPropertyMetaData . TYPE_ARRAY ) ) ; addProp ( LINESTYLE__LINESTARTARROWHEAD , data ( "linestyle.linestartarrowhead" ) ) ; addProp ( LINESTYLE__LINEENDARROWHEAD , data ( "linestyle.lineendarrowhead" ) ) ; addProp ( LINESTYLE__LINESTARTARROWWIDTH , data ( "linestyle.linestartarrowwidth" ) ) ; addProp ( LINESTYLE__LINEESTARTARROWLENGTH , data ( "linestyle.lineestartarrowlength" ) ) ; addProp ( LINESTYLE__LINEENDARROWWIDTH , data ( "linestyle.lineendarrowwidth" ) ) ; addProp ( LINESTYLE__LINEENDARROWLENGTH , data ( "linestyle.lineendarrowlength" ) ) ; addProp ( LINESTYLE__LINEJOINSTYLE , data ( "linestyle.linejoinstyle" ) ) ; addProp ( LINESTYLE__LINEENDCAPSTYLE , data ( "linestyle.lineendcapstyle" ) ) ; addProp ( LINESTYLE__ARROWHEADSOK , data ( "linestyle.arrowheadsok" ) ) ; addProp ( LINESTYLE__ANYLINE , data ( "linestyle.anyline" ) ) ; addProp ( LINESTYLE__HITLINETEST , data ( "linestyle.hitlinetest" ) ) ; addProp ( LINESTYLE__LINEFILLSHAPE , data ( "linestyle.linefillshape" ) ) ; addProp ( LINESTYLE__NOLINEDRAWDASH , data ( "linestyle.nolinedrawdash" , EscherPropertyMetaData . TYPE_BOOLEAN ) ) ; addProp ( SHADOWSTYLE__TYPE , data ( "shadowstyle.type" ) ) ; addProp ( SHADOWSTYLE__COLOR , data ( "shadowstyle.color" , EscherPropertyMetaData . TYPE_RGB ) ) ; addProp ( SHADOWSTYLE__HIGHLIGHT , data ( "shadowstyle.highlight" ) ) ; addProp ( SHADOWSTYLE__CRMOD , data ( "shadowstyle.crmod" ) ) ; addProp ( SHADOWSTYLE__OPACITY , data ( "shadowstyle.opacity" ) ) ; addProp ( SHADOWSTYLE__OFFSETX , data ( "shadowstyle.offsetx" ) ) ; addProp ( SHADOWSTYLE__OFFSETY , data ( "shadowstyle.offsety" ) ) ; addProp ( SHADOWSTYLE__SECONDOFFSETX , data ( "shadowstyle.secondoffsetx" ) ) ; addProp ( SHADOWSTYLE__SECONDOFFSETY , data ( "shadowstyle.secondoffsety" ) ) ; addProp ( SHADOWSTYLE__SCALEXTOX , data ( "shadowstyle.scalextox" ) ) ; addProp ( SHADOWSTYLE__SCALEYTOX , data ( "shadowstyle.scaleytox" ) ) ; addProp ( SHADOWSTYLE__SCALEXTOY , data ( "shadowstyle.scalextoy" ) ) ; addProp ( SHADOWSTYLE__SCALEYTOY , data ( "shadowstyle.scaleytoy" ) ) ; addProp ( SHADOWSTYLE__PERSPECTIVEX , data ( "shadowstyle.perspectivex" ) ) ; addProp ( SHADOWSTYLE__PERSPECTIVEY , data ( "shadowstyle.perspectivey" ) ) ; addProp ( SHADOWSTYLE__WEIGHT , data ( "shadowstyle.weight" ) ) ; addProp ( SHADOWSTYLE__ORIGINX , data ( "shadowstyle.originx" ) ) ; addProp ( SHADOWSTYLE__ORIGINY , data ( "shadowstyle.originy" ) ) ; addProp ( SHADOWSTYLE__SHADOW , data ( "shadowstyle.shadow" ) ) ; addProp ( SHADOWSTYLE__SHADOWOBSURED , data ( "shadowstyle.shadowobsured" ) ) ; addProp ( PERSPECTIVE__TYPE , data ( "perspective.type" ) ) ; addProp ( PERSPECTIVE__OFFSETX , data ( "perspective.offsetx" ) ) ; addProp ( PERSPECTIVE__OFFSETY , data ( "perspective.offsety" ) ) ; addProp ( PERSPECTIVE__SCALEXTOX , data ( "perspective.scalextox" ) ) ; addProp ( PERSPECTIVE__SCALEYTOX , data ( "perspective.scaleytox" ) ) ; addProp ( PERSPECTIVE__SCALEXTOY , data ( "perspective.scalextoy" ) ) ; addProp ( PERSPECTIVE__SCALEYTOY , data ( "perspective.scaleytoy" ) ) ; addProp ( PERSPECTIVE__PERSPECTIVEX , data ( "perspective.perspectivex" ) ) ; addProp ( PERSPECTIVE__PERSPECTIVEY , data ( "perspective.perspectivey" ) ) ; addProp ( PERSPECTIVE__WEIGHT , data ( "perspective.weight" ) ) ; addProp ( PERSPECTIVE__ORIGINX , data ( "perspective.originx" ) ) ; addProp ( PERSPECTIVE__ORIGINY , data ( "perspective.originy" ) ) ; addProp ( PERSPECTIVE__PERSPECTIVEON , data ( "perspective.perspectiveon" ) ) ; addProp ( THREED__SPECULARAMOUNT , data ( "3d.specularamount" ) ) ; addProp ( THREED__DIFFUSEAMOUNT , data ( "3d.diffuseamount" ) ) ; addProp ( THREED__SHININESS , data ( "3d.shininess" ) ) ; addProp ( THREED__EDGETHICKNESS , data ( "3d.edgethickness" ) ) ; addProp ( THREED__EXTRUDEFORWARD , data ( "3d.extrudeforward" ) ) ; addProp ( THREED__EXTRUDEBACKWARD , data ( "3d.extrudebackward" ) ) ; addProp ( THREED__EXTRUDEPLANE , data ( "3d.extrudeplane" ) ) ; addProp ( THREED__EXTRUSIONCOLOR , data ( "3d.extrusioncolor" , EscherPropertyMetaData . TYPE_RGB ) ) ; addProp ( THREED__CRMOD , data ( "3d.crmod" ) ) ; addProp ( THREED__3DEFFECT , data ( "3d.3deffect" ) ) ; addProp ( THREED__METALLIC , data ( "3d.metallic" ) ) ; addProp ( THREED__USEEXTRUSIONCOLOR , data ( "3d.useextrusioncolor" , EscherPropertyMetaData . TYPE_RGB ) ) ; addProp ( THREED__LIGHTFACE , data ( "3d.lightface" ) ) ; addProp ( THREEDSTYLE__YROTATIONANGLE , data ( "3dstyle.yrotationangle" ) ) ; addProp ( THREEDSTYLE__XROTATIONANGLE , data ( "3dstyle.xrotationangle" ) ) ; addProp ( THREEDSTYLE__ROTATIONAXISX , data ( "3dstyle.rotationaxisx" ) ) ; addProp ( THREEDSTYLE__ROTATIONAXISY , data ( "3dstyle.rotationaxisy" ) ) ; addProp ( THREEDSTYLE__ROTATIONAXISZ , data ( "3dstyle.rotationaxisz" ) ) ; addProp ( THREEDSTYLE__ROTATIONANGLE , data ( "3dstyle.rotationangle" ) ) ; addProp ( THREEDSTYLE__ROTATIONCENTERX , data ( "3dstyle.rotationcenterx" ) ) ; addProp ( THREEDSTYLE__ROTATIONCENTERY , data ( "3dstyle.rotationcentery" ) ) ; addProp ( THREEDSTYLE__ROTATIONCENTERZ , data ( "3dstyle.rotationcenterz" ) ) ; addProp ( THREEDSTYLE__RENDERMODE , data ( "3dstyle.rendermode" ) ) ; addProp ( THREEDSTYLE__TOLERANCE , data ( "3dstyle.tolerance" ) ) ; addProp ( THREEDSTYLE__XVIEWPOINT , data ( "3dstyle.xviewpoint" ) ) ; addProp ( THREEDSTYLE__YVIEWPOINT , data ( "3dstyle.yviewpoint" ) ) ; addProp ( THREEDSTYLE__ZVIEWPOINT , data ( "3dstyle.zviewpoint" ) ) ; addProp ( THREEDSTYLE__ORIGINX , data ( "3dstyle.originx" ) ) ; addProp ( THREEDSTYLE__ORIGINY , data ( "3dstyle.originy" ) ) ; addProp ( THREEDSTYLE__SKEWANGLE , data ( "3dstyle.skewangle" ) ) ; addProp ( THREEDSTYLE__SKEWAMOUNT , data ( "3dstyle.skewamount" ) ) ; addProp ( THREEDSTYLE__AMBIENTINTENSITY , data ( "3dstyle.ambientintensity" ) ) ; addProp ( THREEDSTYLE__KEYX , data ( "3dstyle.keyx" ) ) ; addProp ( THREEDSTYLE__KEYY , data ( "3dstyle.keyy" ) ) ; addProp ( THREEDSTYLE__KEYZ , data ( "3dstyle.keyz" ) ) ; addProp ( THREEDSTYLE__KEYINTENSITY , data ( "3dstyle.keyintensity" ) ) ; addProp ( THREEDSTYLE__FILLX , data ( "3dstyle.fillx" ) ) ; addProp ( THREEDSTYLE__FILLY , data ( "3dstyle.filly" ) ) ; addProp ( THREEDSTYLE__FILLZ , data ( "3dstyle.fillz" ) ) ; addProp ( THREEDSTYLE__FILLINTENSITY , data ( "3dstyle.fillintensity" ) ) ; addProp ( THREEDSTYLE__CONSTRAINROTATION , data ( "3dstyle.constrainrotation" ) ) ; addProp ( THREEDSTYLE__ROTATIONCENTERAUTO , data ( "3dstyle.rotationcenterauto" ) ) ; addProp ( THREEDSTYLE__PARALLEL , data ( "3dstyle.parallel" ) ) ; addProp ( THREEDSTYLE__KEYHARSH , data ( "3dstyle.keyharsh" ) ) ; addProp ( THREEDSTYLE__FILLHARSH , data ( "3dstyle.fillharsh" ) ) ; addProp ( SHAPE__MASTER , data ( "shape.master" ) ) ; addProp ( SHAPE__CONNECTORSTYLE , data ( "shape.connectorstyle" ) ) ; addProp ( SHAPE__BLACKANDWHITESETTINGS , data ( "shape.blackandwhitesettings" ) ) ; addProp ( SHAPE__WMODEPUREBW , data ( "shape.wmodepurebw" ) ) ; addProp ( SHAPE__WMODEBW , data ( "shape.wmodebw" ) ) ; addProp ( SHAPE__OLEICON , data ( "shape.oleicon" ) ) ; addProp ( SHAPE__PREFERRELATIVERESIZE , data ( "shape.preferrelativeresize" ) ) ; addProp ( SHAPE__LOCKSHAPETYPE , data ( "shape.lockshapetype" ) ) ; addProp ( SHAPE__DELETEATTACHEDOBJECT , data ( "shape.deleteattachedobject" ) ) ; addProp ( SHAPE__BACKGROUNDSHAPE , data ( "shape.backgroundshape" ) ) ; addProp ( CALLOUT__CALLOUTTYPE , data ( "callout.callouttype" ) ) ; addProp ( CALLOUT__XYCALLOUTGAP , data ( "callout.xycalloutgap" ) ) ; addProp ( CALLOUT__CALLOUTANGLE , data ( "callout.calloutangle" ) ) ; addProp ( CALLOUT__CALLOUTDROPTYPE , data ( "callout.calloutdroptype" ) ) ; addProp ( CALLOUT__CALLOUTDROPSPECIFIED , data ( "callout.calloutdropspecified" ) ) ; addProp ( CALLOUT__CALLOUTLENGTHSPECIFIED , data ( "callout.calloutlengthspecified" ) ) ; addProp ( CALLOUT__ISCALLOUT , data ( "callout.iscallout" ) ) ; addProp ( CALLOUT__CALLOUTACCENTBAR , data ( "callout.calloutaccentbar" ) ) ; addProp ( CALLOUT__CALLOUTTEXTBORDER , data ( "callout.callouttextborder" ) ) ; addProp ( CALLOUT__CALLOUTMINUSX , data ( "callout.calloutminusx" ) ) ; addProp ( CALLOUT__CALLOUTMINUSY , data ( "callout.calloutminusy" ) ) ; addProp ( CALLOUT__DROPAUTO , data ( "callout.dropauto" ) ) ; addProp ( CALLOUT__LENGTHSPECIFIED , data ( "callout.lengthspecified" ) ) ; addProp ( GROUPSHAPE__SHAPENAME , data ( "groupshape.shapename" ) ) ; addProp ( GROUPSHAPE__DESCRIPTION , data ( "groupshape.description" ) ) ; addProp ( GROUPSHAPE__HYPERLINK , data ( "groupshape.hyperlink" ) ) ; addProp ( GROUPSHAPE__WRAPPOLYGONVERTICES , data ( "groupshape.wrappolygonvertices" , EscherPropertyMetaData . TYPE_ARRAY ) ) ; addProp ( GROUPSHAPE__WRAPDISTLEFT , data ( "groupshape.wrapdistleft" ) ) ; addProp ( GROUPSHAPE__WRAPDISTTOP , data ( "groupshape.wrapdisttop" ) ) ; addProp ( GROUPSHAPE__WRAPDISTRIGHT , data ( "groupshape.wrapdistright" ) ) ; addProp ( GROUPSHAPE__WRAPDISTBOTTOM , data ( "groupshape.wrapdistbottom" ) ) ; addProp ( GROUPSHAPE__REGROUPID , data ( "groupshape.regroupid" ) ) ; addProp ( GROUPSHAPE__EDITEDWRAP , data ( "groupshape.editedwrap" ) ) ; addProp ( GROUPSHAPE__BEHINDDOCUMENT , data ( "groupshape.behinddocument" ) ) ; addProp ( GROUPSHAPE__ONDBLCLICKNOTIFY , data ( "groupshape.ondblclicknotify" ) ) ; addProp ( GROUPSHAPE__ISBUTTON , data ( "groupshape.isbutton" ) ) ; addProp ( GROUPSHAPE__1DADJUSTMENT , data ( "groupshape.1dadjustment" ) ) ; addProp ( GROUPSHAPE__HIDDEN , data ( "groupshape.hidden" ) ) ; addProp ( GROUPSHAPE__PRINT , data ( "groupshape.print" , EscherPropertyMetaData . TYPE_BOOLEAN ) ) ; } } private static void addProp ( int s , EscherPropertyMetaData data ) { properties . put ( new Short ( ( short ) s ) , data ) ; } private static EscherPropertyMetaData data ( String propName , byte type ) { return new EscherPropertyMetaData ( propName , type ) ; } private static EscherPropertyMetaData data ( String propName ) { return new EscherPropertyMetaData ( propName ) ; } public static String getPropertyName ( short propertyId ) { initProps ( ) ; EscherPropertyMetaData o = ( EscherPropertyMetaData ) properties . get ( new Short ( propertyId ) ) ; return o == null ? "unknown" : o . getDescription ( ) ; } public static byte getPropertyType ( short propertyId ) { initProps ( ) ; EscherPropertyMetaData escherPropertyMetaData = ( EscherPropertyMetaData ) properties . get ( new Short ( propertyId ) ) ; return escherPropertyMetaData == null ? 0 : escherPropertyMetaData . getType ( ) ; } } 	1
package org . apache . poi . ddf ; import org . apache . poi . util . LittleEndian ; import org . apache . poi . util . HexDump ; import java . util . Arrays ; import java . io . ByteArrayOutputStream ; import java . io . IOException ; public class EscherComplexProperty extends EscherProperty { byte [ ] complexData = new byte [ 0 ] ; public EscherComplexProperty ( short id , byte [ ] complexData ) { super ( id ) ; this . complexData = complexData ; } public EscherComplexProperty ( short propertyNumber , boolean isBlipId , byte [ ] complexData ) { super ( propertyNumber , true , isBlipId ) ; this . complexData = complexData ; } public int serializeSimplePart ( byte [ ] data , int pos ) { LittleEndian . putShort ( data , pos , getId ( ) ) ; LittleEndian . putInt ( data , pos + 2 , complexData . length ) ; return 6 ; } public int serializeComplexPart ( byte [ ] data , int pos ) { System . arraycopy ( complexData , 0 , data , pos , complexData . length ) ; return complexData . length ; } public byte [ ] getComplexData ( ) { return complexData ; } public boolean equals ( Object o ) { if ( this == o ) return true ; if ( ! ( o instanceof EscherComplexProperty ) ) return false ; final EscherComplexProperty escherComplexProperty = ( EscherComplexProperty ) o ; if ( ! Arrays . equals ( complexData , escherComplexProperty . complexData ) ) return false ; return true ; } public int getPropertySize ( ) { return 6 + complexData . length ; } public int hashCode ( ) { return getId ( ) * 11 ; } public String toString ( ) { String dataStr ; ByteArrayOutputStream b = new ByteArrayOutputStream ( ) ; try { HexDump . dump ( this . complexData , 0 , b , 0 ) ; dataStr = b . toString ( ) ; } catch ( Exception e ) { dataStr = e . toString ( ) ; } finally { try { b . close ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } return "propNum: " + getPropertyNumber ( ) + ", propName: " + EscherProperties . getPropertyName ( getPropertyNumber ( ) ) + ", complex: " + isComplex ( ) + ", blipId: " + isBlipId ( ) + ", data: " + System . getProperty ( "line.separator" ) + dataStr ; } } 	1
package org . apache . poi . hssf . record . formula ; import org . apache . poi . util . LittleEndian ; import org . apache . poi . util . BitField ; import org . apache . poi . hssf . record . RecordInputStream ; import org . apache . poi . hssf . util . CellReference ; import org . apache . poi . hssf . model . Workbook ; public class RefNPtg extends ReferencePtg { public final static byte sid = 0x2C ; protected RefNPtg ( ) { } public RefNPtg ( RecordInputStream in ) { super ( in ) ; } public void writeBytes ( byte [ ] array , int offset ) { throw new RuntimeException ( "Coding Error: This method should never be called. This ptg should be converted" ) ; } public String getRefPtgName ( ) { return "RefNPtg" ; } public String toFormulaString ( Workbook book ) { throw new RuntimeException ( "Coding Error: This method should never be called. This ptg should be converted" ) ; } public Object clone ( ) { throw new RuntimeException ( "Coding Error: This method should never be called. This ptg should be converted" ) ; } } 	0
package org . apache . poi . util ; import java . util . * ; public abstract class POILogger { public static final int DEBUG = 1 ; public static final int INFO = 3 ; public static final int WARN = 5 ; public static final int ERROR = 7 ; public static final int FATAL = 9 ; POILogger ( ) { } abstract public void initialize ( final String cat ) ; abstract public void log ( final int level , final Object obj1 ) ; abstract public boolean check ( final int level ) ; public void log ( final int level , final Object obj1 , final Object obj2 ) { if ( check ( level ) ) { log ( level , new StringBuffer ( 32 ) . append ( obj1 ) . append ( obj2 ) ) ; } } public void log ( final int level , final Object obj1 , final Object obj2 , final Object obj3 ) { if ( check ( level ) ) { log ( level , new StringBuffer ( 48 ) . append ( obj1 ) . append ( obj2 ) . append ( obj3 ) ) ; } } public void log ( final int level , final Object obj1 , final Object obj2 , final Object obj3 , final Object obj4 ) { if ( check ( level ) ) { log ( level , new StringBuffer ( 64 ) . append ( obj1 ) . append ( obj2 ) . append ( obj3 ) . append ( obj4 ) ) ; } } public void log ( final int level , final Object obj1 , final Object obj2 , final Object obj3 , final Object obj4 , final Object obj5 ) { if ( check ( level ) ) { log ( level , new StringBuffer ( 80 ) . append ( obj1 ) . append ( obj2 ) . append ( obj3 ) . append ( obj4 ) . append ( obj5 ) ) ; } } public void log ( final int level , final Object obj1 , final Object obj2 , final Object obj3 , final Object obj4 , final Object obj5 , final Object obj6 ) { if ( check ( level ) ) { log ( level , new StringBuffer ( 96 ) . append ( obj1 ) . append ( obj2 ) . append ( obj3 ) . append ( obj4 ) . append ( obj5 ) . append ( obj6 ) ) ; } } public void log ( final int level , final Object obj1 , final Object obj2 , final Object obj3 , final Object obj4 , final Object obj5 , final Object obj6 , final Object obj7 ) { if ( check ( level ) ) { log ( level , new StringBuffer ( 112 ) . append ( obj1 ) . append ( obj2 ) . append ( obj3 ) . append ( obj4 ) . append ( obj5 ) . append ( obj6 ) . append ( obj7 ) ) ; } } public void log ( final int level , final Object obj1 , final Object obj2 , final Object obj3 , final Object obj4 , final Object obj5 , final Object obj6 , final Object obj7 , final Object obj8 ) { if ( check ( level ) ) { log ( level , new StringBuffer ( 128 ) . append ( obj1 ) . append ( obj2 ) . append ( obj3 ) . append ( obj4 ) . append ( obj5 ) . append ( obj6 ) . append ( obj7 ) . append ( obj8 ) ) ; } } public void log ( final int level , final Object obj1 , final Throwable exception ) { log ( level , obj1 , exception ) ; } public void log ( final int level , final Object obj1 , final Object obj2 , final Throwable exception ) { if ( check ( level ) ) { log ( level , new StringBuffer ( 32 ) . append ( obj1 ) . append ( obj2 ) , exception ) ; } } public void log ( final int level , final Object obj1 , final Object obj2 , final Object obj3 , final Throwable exception ) { if ( check ( level ) ) { log ( level , new StringBuffer ( 48 ) . append ( obj1 ) . append ( obj2 ) . append ( obj3 ) , exception ) ; } } public void log ( final int level , final Object obj1 , final Object obj2 , final Object obj3 , final Object obj4 , final Throwable exception ) { if ( check ( level ) ) { log ( level , new StringBuffer ( 64 ) . append ( obj1 ) . append ( obj2 ) . append ( obj3 ) . append ( obj4 ) , exception ) ; } } public void log ( final int level , final Object obj1 , final Object obj2 , final Object obj3 , final Object obj4 , final Object obj5 , final Throwable exception ) { if ( check ( level ) ) { log ( level , new StringBuffer ( 80 ) . append ( obj1 ) . append ( obj2 ) . append ( obj3 ) . append ( obj4 ) . append ( obj5 ) , exception ) ; } } public void log ( final int level , final Object obj1 , final Object obj2 , final Object obj3 , final Object obj4 , final Object obj5 , final Object obj6 , final Throwable exception ) { if ( check ( level ) ) { log ( level , new StringBuffer ( 96 ) . append ( obj1 ) . append ( obj2 ) . append ( obj3 ) . append ( obj4 ) . append ( obj5 ) . append ( obj6 ) , exception ) ; } } public void log ( final int level , final Object obj1 , final Object obj2 , final Object obj3 , final Object obj4 , final Object obj5 , final Object obj6 , final Object obj7 , final Throwable exception ) { if ( check ( level ) ) { log ( level , new StringBuffer ( 112 ) . append ( obj1 ) . append ( obj2 ) . append ( obj3 ) . append ( obj4 ) . append ( obj5 ) . append ( obj6 ) . append ( obj7 ) , exception ) ; } } public void log ( final int level , final Object obj1 , final Object obj2 , final Object obj3 , final Object obj4 , final Object obj5 , final Object obj6 , final Object obj7 , final Object obj8 , final Throwable exception ) { if ( check ( level ) ) { log ( level , new StringBuffer ( 128 ) . append ( obj1 ) . append ( obj2 ) . append ( obj3 ) . append ( obj4 ) . append ( obj5 ) . append ( obj6 ) . append ( obj7 ) . append ( obj8 ) , exception ) ; } } public void logFormatted ( final int level , final String message , final Object obj1 ) { commonLogFormatted ( level , message , new Object [ ] { obj1 } ) ; } public void logFormatted ( final int level , final String message , final Object obj1 , final Object obj2 ) { commonLogFormatted ( level , message , new Object [ ] { obj1 , obj2 } ) ; } public void logFormatted ( final int level , final String message , final Object obj1 , final Object obj2 , final Object obj3 ) { commonLogFormatted ( level , message , new Object [ ] { obj1 , obj2 , obj3 } ) ; } public void logFormatted ( final int level , final String message , final Object obj1 , final Object obj2 , final Object obj3 , final Object obj4 ) { commonLogFormatted ( level , message , new Object [ ] { obj1 , obj2 , obj3 , obj4 } ) ; } private void commonLogFormatted ( final int level , final String message , final Object [ ] unflatParams ) { if ( check ( level ) ) { Object [ ] params = flattenArrays ( unflatParams ) ; if ( params [ params . length - 1 ] instanceof Throwable ) { log ( level , StringUtil . format ( message , params ) , ( Throwable ) params [ params . length - 1 ] ) ; } else { log ( level , StringUtil . format ( message , params ) ) ; } } } private Object [ ] flattenArrays ( final Object [ ] objects ) { List results = new ArrayList ( ) ; for ( int i = 0 ; i < objects . length ; i ++ ) { results . addAll ( objectToObjectArray ( objects [ i ] ) ) ; } return ( Object [ ] ) results . toArray ( new Object [ results . size ( ) ] ) ; } private List objectToObjectArray ( Object object ) { List results = new ArrayList ( ) ; if ( object instanceof byte [ ] ) { byte [ ] array = ( byte [ ] ) object ; for ( int j = 0 ; j < array . length ; j ++ ) { results . add ( new Byte ( array [ j ] ) ) ; } } if ( object instanceof char [ ] ) { char [ ] array = ( char [ ] ) object ; for ( int j = 0 ; j < array . length ; j ++ ) { results . add ( new Character ( array [ j ] ) ) ; } } else if ( object instanceof short [ ] ) { short [ ] array = ( short [ ] ) object ; for ( int j = 0 ; j < array . length ; j ++ ) { results . add ( new Short ( array [ j ] ) ) ; } } else if ( object instanceof int [ ] ) { int [ ] array = ( int [ ] ) object ; for ( int j = 0 ; j < array . length ; j ++ ) { results . add ( new Integer ( array [ j ] ) ) ; } } else if ( object instanceof long [ ] ) { long [ ] array = ( long [ ] ) object ; for ( int j = 0 ; j < array . length ; j ++ ) { results . add ( new Long ( array [ j ] ) ) ; } } else if ( object instanceof float [ ] ) { float [ ] array = ( float [ ] ) object ; for ( int j = 0 ; j < array . length ; j ++ ) { results . add ( new Float ( array [ j ] ) ) ; } } else if ( object instanceof double [ ] ) { double [ ] array = ( double [ ] ) object ; for ( int j = 0 ; j < array . length ; j ++ ) { results . add ( new Double ( array [ j ] ) ) ; } } else if ( object instanceof Object [ ] ) { Object [ ] array = ( Object [ ] ) object ; for ( int j = 0 ; j < array . length ; j ++ ) { results . add ( array [ j ] ) ; } } else { results . add ( object ) ; } return results ; } } 	1
package org . apache . poi . ddf ; public class EscherRGBProperty extends EscherSimpleProperty { public EscherRGBProperty ( short propertyNumber , int rgbColor ) { super ( propertyNumber , rgbColor ) ; } public int getRgbColor ( ) { return propertyValue ; } public byte getRed ( ) { return ( byte ) ( propertyValue & 0xFF ) ; } public byte getGreen ( ) { return ( byte ) ( ( propertyValue > > 8 ) & 0xFF ) ; } public byte getBlue ( ) { return ( byte ) ( ( propertyValue > > 16 ) & 0xFF ) ; } } 	1
package org . apache . poi . hssf . util ; import java . util . * ; public class HSSFColor { private final static int PALETTE_SIZE = 56 ; private final static int DISTINCT_COLOR_COUNT = 46 ; public HSSFColor ( ) { } public final static Hashtable getIndexHash ( ) { Hashtable hash = new Hashtable ( PALETTE_SIZE ) ; hash . put ( new Integer ( HSSFColor . BLACK . index ) , new HSSFColor . BLACK ( ) ) ; hash . put ( new Integer ( HSSFColor . BROWN . index ) , new HSSFColor . BROWN ( ) ) ; hash . put ( new Integer ( HSSFColor . OLIVE_GREEN . index ) , new HSSFColor . OLIVE_GREEN ( ) ) ; hash . put ( new Integer ( HSSFColor . DARK_GREEN . index ) , new HSSFColor . DARK_GREEN ( ) ) ; hash . put ( new Integer ( HSSFColor . DARK_TEAL . index ) , new HSSFColor . DARK_TEAL ( ) ) ; hash . put ( new Integer ( HSSFColor . DARK_BLUE . index ) , new HSSFColor . DARK_BLUE ( ) ) ; hash . put ( new Integer ( HSSFColor . DARK_BLUE . index2 ) , new HSSFColor . DARK_BLUE ( ) ) ; hash . put ( new Integer ( HSSFColor . INDIGO . index ) , new HSSFColor . INDIGO ( ) ) ; hash . put ( new Integer ( HSSFColor . GREY_80_PERCENT . index ) , new HSSFColor . GREY_80_PERCENT ( ) ) ; hash . put ( new Integer ( HSSFColor . ORANGE . index ) , new HSSFColor . ORANGE ( ) ) ; hash . put ( new Integer ( HSSFColor . DARK_YELLOW . index ) , new HSSFColor . DARK_YELLOW ( ) ) ; hash . put ( new Integer ( HSSFColor . GREEN . index ) , new HSSFColor . GREEN ( ) ) ; hash . put ( new Integer ( HSSFColor . TEAL . index ) , new HSSFColor . TEAL ( ) ) ; hash . put ( new Integer ( HSSFColor . TEAL . index2 ) , new HSSFColor . TEAL ( ) ) ; hash . put ( new Integer ( HSSFColor . BLUE . index ) , new HSSFColor . BLUE ( ) ) ; hash . put ( new Integer ( HSSFColor . BLUE . index2 ) , new HSSFColor . BLUE ( ) ) ; hash . put ( new Integer ( HSSFColor . BLUE_GREY . index ) , new HSSFColor . BLUE_GREY ( ) ) ; hash . put ( new Integer ( HSSFColor . GREY_50_PERCENT . index ) , new HSSFColor . GREY_50_PERCENT ( ) ) ; hash . put ( new Integer ( HSSFColor . RED . index ) , new HSSFColor . RED ( ) ) ; hash . put ( new Integer ( HSSFColor . LIGHT_ORANGE . index ) , new HSSFColor . LIGHT_ORANGE ( ) ) ; hash . put ( new Integer ( HSSFColor . LIME . index ) , new HSSFColor . LIME ( ) ) ; hash . put ( new Integer ( HSSFColor . SEA_GREEN . index ) , new HSSFColor . SEA_GREEN ( ) ) ; hash . put ( new Integer ( HSSFColor . AQUA . index ) , new HSSFColor . AQUA ( ) ) ; hash . put ( new Integer ( HSSFColor . LIGHT_BLUE . index ) , new HSSFColor . LIGHT_BLUE ( ) ) ; hash . put ( new Integer ( HSSFColor . VIOLET . index ) , new HSSFColor . VIOLET ( ) ) ; hash . put ( new Integer ( HSSFColor . VIOLET . index2 ) , new HSSFColor . VIOLET ( ) ) ; hash . put ( new Integer ( HSSFColor . GREY_40_PERCENT . index ) , new HSSFColor . GREY_40_PERCENT ( ) ) ; hash . put ( new Integer ( HSSFColor . PINK . index ) , new HSSFColor . PINK ( ) ) ; hash . put ( new Integer ( HSSFColor . PINK . index2 ) , new HSSFColor . PINK ( ) ) ; hash . put ( new Integer ( HSSFColor . GOLD . index ) , new HSSFColor . GOLD ( ) ) ; hash . put ( new Integer ( HSSFColor . YELLOW . index ) , new HSSFColor . YELLOW ( ) ) ; hash . put ( new Integer ( HSSFColor . YELLOW . index2 ) , new HSSFColor . YELLOW ( ) ) ; hash . put ( new Integer ( HSSFColor . BRIGHT_GREEN . index ) , new HSSFColor . BRIGHT_GREEN ( ) ) ; hash . put ( new Integer ( HSSFColor . BRIGHT_GREEN . index2 ) , new HSSFColor . BRIGHT_GREEN ( ) ) ; hash . put ( new Integer ( HSSFColor . TURQUOISE . index ) , new HSSFColor . TURQUOISE ( ) ) ; hash . put ( new Integer ( HSSFColor . TURQUOISE . index2 ) , new HSSFColor . TURQUOISE ( ) ) ; hash . put ( new Integer ( HSSFColor . DARK_RED . index ) , new HSSFColor . DARK_RED ( ) ) ; hash . put ( new Integer ( HSSFColor . DARK_RED . index2 ) , new HSSFColor . DARK_RED ( ) ) ; hash . put ( new Integer ( HSSFColor . SKY_BLUE . index ) , new HSSFColor . SKY_BLUE ( ) ) ; hash . put ( new Integer ( HSSFColor . PLUM . index ) , new HSSFColor . PLUM ( ) ) ; hash . put ( new Integer ( HSSFColor . PLUM . index2 ) , new HSSFColor . PLUM ( ) ) ; hash . put ( new Integer ( HSSFColor . GREY_25_PERCENT . index ) , new HSSFColor . GREY_25_PERCENT ( ) ) ; hash . put ( new Integer ( HSSFColor . ROSE . index ) , new HSSFColor . ROSE ( ) ) ; hash . put ( new Integer ( HSSFColor . LIGHT_YELLOW . index ) , new HSSFColor . LIGHT_YELLOW ( ) ) ; hash . put ( new Integer ( HSSFColor . LIGHT_GREEN . index ) , new HSSFColor . LIGHT_GREEN ( ) ) ; hash . put ( new Integer ( HSSFColor . LIGHT_TURQUOISE . index ) , new HSSFColor . LIGHT_TURQUOISE ( ) ) ; hash . put ( new Integer ( HSSFColor . LIGHT_TURQUOISE . index2 ) , new HSSFColor . LIGHT_TURQUOISE ( ) ) ; hash . put ( new Integer ( HSSFColor . PALE_BLUE . index ) , new HSSFColor . PALE_BLUE ( ) ) ; hash . put ( new Integer ( HSSFColor . LAVENDER . index ) , new HSSFColor . LAVENDER ( ) ) ; hash . put ( new Integer ( HSSFColor . WHITE . index ) , new HSSFColor . WHITE ( ) ) ; hash . put ( new Integer ( HSSFColor . CORNFLOWER_BLUE . index ) , new HSSFColor . CORNFLOWER_BLUE ( ) ) ; hash . put ( new Integer ( HSSFColor . LEMON_CHIFFON . index ) , new HSSFColor . LEMON_CHIFFON ( ) ) ; hash . put ( new Integer ( HSSFColor . MAROON . index ) , new HSSFColor . MAROON ( ) ) ; hash . put ( new Integer ( HSSFColor . ORCHID . index ) , new HSSFColor . ORCHID ( ) ) ; hash . put ( new Integer ( HSSFColor . CORAL . index ) , new HSSFColor . CORAL ( ) ) ; hash . put ( new Integer ( HSSFColor . ROYAL_BLUE . index ) , new HSSFColor . ROYAL_BLUE ( ) ) ; hash . put ( new Integer ( HSSFColor . LIGHT_CORNFLOWER_BLUE . index ) , new HSSFColor . LIGHT_CORNFLOWER_BLUE ( ) ) ; return hash ; } public final static Hashtable getTripletHash ( ) { Hashtable hash = new Hashtable ( DISTINCT_COLOR_COUNT ) ; hash . put ( HSSFColor . BLACK . hexString , new HSSFColor . BLACK ( ) ) ; hash . put ( HSSFColor . BROWN . hexString , new HSSFColor . BROWN ( ) ) ; hash . put ( HSSFColor . OLIVE_GREEN . hexString , new HSSFColor . OLIVE_GREEN ( ) ) ; hash . put ( HSSFColor . DARK_GREEN . hexString , new HSSFColor . DARK_GREEN ( ) ) ; hash . put ( HSSFColor . DARK_TEAL . hexString , new HSSFColor . DARK_TEAL ( ) ) ; hash . put ( HSSFColor . DARK_BLUE . hexString , new HSSFColor . DARK_BLUE ( ) ) ; hash . put ( HSSFColor . INDIGO . hexString , new HSSFColor . INDIGO ( ) ) ; hash . put ( HSSFColor . GREY_80_PERCENT . hexString , new HSSFColor . GREY_80_PERCENT ( ) ) ; hash . put ( HSSFColor . ORANGE . hexString , new HSSFColor . ORANGE ( ) ) ; hash . put ( HSSFColor . DARK_YELLOW . hexString , new HSSFColor . DARK_YELLOW ( ) ) ; hash . put ( HSSFColor . GREEN . hexString , new HSSFColor . GREEN ( ) ) ; hash . put ( HSSFColor . TEAL . hexString , new HSSFColor . TEAL ( ) ) ; hash . put ( HSSFColor . BLUE . hexString , new HSSFColor . BLUE ( ) ) ; hash . put ( HSSFColor . BLUE_GREY . hexString , new HSSFColor . BLUE_GREY ( ) ) ; hash . put ( HSSFColor . GREY_50_PERCENT . hexString , new HSSFColor . GREY_50_PERCENT ( ) ) ; hash . put ( HSSFColor . RED . hexString , new HSSFColor . RED ( ) ) ; hash . put ( HSSFColor . LIGHT_ORANGE . hexString , new HSSFColor . LIGHT_ORANGE ( ) ) ; hash . put ( HSSFColor . LIME . hexString , new HSSFColor . LIME ( ) ) ; hash . put ( HSSFColor . SEA_GREEN . hexString , new HSSFColor . SEA_GREEN ( ) ) ; hash . put ( HSSFColor . AQUA . hexString , new HSSFColor . AQUA ( ) ) ; hash . put ( HSSFColor . LIGHT_BLUE . hexString , new HSSFColor . LIGHT_BLUE ( ) ) ; hash . put ( HSSFColor . VIOLET . hexString , new HSSFColor . VIOLET ( ) ) ; hash . put ( HSSFColor . GREY_40_PERCENT . hexString , new HSSFColor . GREY_40_PERCENT ( ) ) ; hash . put ( HSSFColor . PINK . hexString , new HSSFColor . PINK ( ) ) ; hash . put ( HSSFColor . GOLD . hexString , new HSSFColor . GOLD ( ) ) ; hash . put ( HSSFColor . YELLOW . hexString , new HSSFColor . YELLOW ( ) ) ; hash . put ( HSSFColor . BRIGHT_GREEN . hexString , new HSSFColor . BRIGHT_GREEN ( ) ) ; hash . put ( HSSFColor . TURQUOISE . hexString , new HSSFColor . TURQUOISE ( ) ) ; hash . put ( HSSFColor . DARK_RED . hexString , new HSSFColor . DARK_RED ( ) ) ; hash . put ( HSSFColor . SKY_BLUE . hexString , new HSSFColor . SKY_BLUE ( ) ) ; hash . put ( HSSFColor . PLUM . hexString , new HSSFColor . PLUM ( ) ) ; hash . put ( HSSFColor . GREY_25_PERCENT . hexString , new HSSFColor . GREY_25_PERCENT ( ) ) ; hash . put ( HSSFColor . ROSE . hexString , new HSSFColor . ROSE ( ) ) ; hash . put ( HSSFColor . LIGHT_YELLOW . hexString , new HSSFColor . LIGHT_YELLOW ( ) ) ; hash . put ( HSSFColor . LIGHT_GREEN . hexString , new HSSFColor . LIGHT_GREEN ( ) ) ; hash . put ( HSSFColor . LIGHT_TURQUOISE . hexString , new HSSFColor . LIGHT_TURQUOISE ( ) ) ; hash . put ( HSSFColor . PALE_BLUE . hexString , new HSSFColor . PALE_BLUE ( ) ) ; hash . put ( HSSFColor . LAVENDER . hexString , new HSSFColor . LAVENDER ( ) ) ; hash . put ( HSSFColor . WHITE . hexString , new HSSFColor . WHITE ( ) ) ; hash . put ( HSSFColor . CORNFLOWER_BLUE . hexString , new HSSFColor . CORNFLOWER_BLUE ( ) ) ; hash . put ( HSSFColor . LEMON_CHIFFON . hexString , new HSSFColor . LEMON_CHIFFON ( ) ) ; hash . put ( HSSFColor . MAROON . hexString , new HSSFColor . MAROON ( ) ) ; hash . put ( HSSFColor . ORCHID . hexString , new HSSFColor . ORCHID ( ) ) ; hash . put ( HSSFColor . CORAL . hexString , new HSSFColor . CORAL ( ) ) ; hash . put ( HSSFColor . ROYAL_BLUE . hexString , new HSSFColor . ROYAL_BLUE ( ) ) ; hash . put ( HSSFColor . LIGHT_CORNFLOWER_BLUE . hexString , new HSSFColor . LIGHT_CORNFLOWER_BLUE ( ) ) ; return hash ; } public short getIndex ( ) { return BLACK . index ; } public short [ ] getTriplet ( ) { return BLACK . triplet ; } public String getHexString ( ) { return BLACK . hexString ; } public final static class BLACK extends HSSFColor { public final static short index = 0x8 ; public final static short [ ] triplet = { 0 , 0 , 0 } ; public final static String hexString = "0:0:0" ; public short getIndex ( ) { return index ; } public short [ ] getTriplet ( ) { return triplet ; } public String getHexString ( ) { return hexString ; } } public final static class BROWN extends HSSFColor { public final static short index = 0x3c ; public final static short [ ] triplet = { 153 , 51 , 0 } ; public final static String hexString = "9999:3333:0" ; public short getIndex ( ) { return index ; } public short [ ] getTriplet ( ) { return triplet ; } public String getHexString ( ) { return hexString ; } } public static class OLIVE_GREEN extends HSSFColor { public final static short index = 0x3b ; public final static short [ ] triplet = { 51 , 51 , 0 } ; public final static String hexString = "3333:3333:0" ; public short getIndex ( ) { return index ; } public short [ ] getTriplet ( ) { return triplet ; } public String getHexString ( ) { return hexString ; } } public final static class DARK_GREEN extends HSSFColor { public final static short index = 0x3a ; public final static short [ ] triplet = { 0 , 51 , 0 } ; public final static String hexString = "0:3333:0" ; public short getIndex ( ) { return index ; } public short [ ] getTriplet ( ) { return triplet ; } public String getHexString ( ) { return hexString ; } } public final static class DARK_TEAL extends HSSFColor { public final static short index = 0x38 ; public final static short [ ] triplet = { 0 , 51 , 102 } ; public final static String hexString = "0:3333:6666" ; public short getIndex ( ) { return index ; } public short [ ] getTriplet ( ) { return triplet ; } public String getHexString ( ) { return hexString ; } } public final static class DARK_BLUE extends HSSFColor { public final static short index = 0x12 ; public final static short index2 = 0x20 ; public final static short [ ] triplet = { 0 , 0 , 128 } ; public final static String hexString = "0:0:8080" ; public short getIndex ( ) { return index ; } public short [ ] getTriplet ( ) { return triplet ; } public String getHexString ( ) { return hexString ; } } public final static class INDIGO extends HSSFColor { public final static short index = 0x3e ; public final static short [ ] triplet = { 51 , 51 , 153 } ; public final static String hexString = "3333:3333:9999" ; public short getIndex ( ) { return index ; } public short [ ] getTriplet ( ) { return triplet ; } public String getHexString ( ) { return hexString ; } } public final static class GREY_80_PERCENT extends HSSFColor { public final static short index = 0x3f ; public final static short [ ] triplet = { 51 , 51 , 51 } ; public final static String hexString = "3333:3333:3333" ; public short getIndex ( ) { return index ; } public short [ ] getTriplet ( ) { return triplet ; } public String getHexString ( ) { return hexString ; } } public final static class DARK_RED extends HSSFColor { public final static short index = 0x10 ; public final static short index2 = 0x25 ; public final static short [ ] triplet = { 128 , 0 , 0 } ; public final static String hexString = "8080:0:0" ; public short getIndex ( ) { return index ; } public short [ ] getTriplet ( ) { return triplet ; } public String getHexString ( ) { return hexString ; } } public final static class ORANGE extends HSSFColor { public final static short index = 0x35 ; public final static short [ ] triplet = { 255 , 102 , 0 } ; public final static String hexString = "FFFF:6666:0" ; public short getIndex ( ) { return index ; } public short [ ] getTriplet ( ) { return triplet ; } public String getHexString ( ) { return hexString ; } } public final static class DARK_YELLOW extends HSSFColor { public final static short index = 0x13 ; public final static short [ ] triplet = { 128 , 128 , 0 } ; public final static String hexString = "8080:8080:0" ; public short getIndex ( ) { return index ; } public short [ ] getTriplet ( ) { return triplet ; } public String getHexString ( ) { return hexString ; } } public final static class GREEN extends HSSFColor { public final static short index = 0x11 ; public final static short [ ] triplet = { 0 , 128 , 0 } ; public final static String hexString = "0:8080:0" ; public short getIndex ( ) { return index ; } public short [ ] getTriplet ( ) { return triplet ; } public String getHexString ( ) { return hexString ; } } public final static class TEAL extends HSSFColor { public final static short index = 0x15 ; public final static short index2 = 0x26 ; public final static short [ ] triplet = { 0 , 128 , 128 } ; public final static String hexString = "0:8080:8080" ; public short getIndex ( ) { return index ; } public short [ ] getTriplet ( ) { return triplet ; } public String getHexString ( ) { return hexString ; } } public final static class BLUE extends HSSFColor { public final static short index = 0xc ; public final static short index2 = 0x27 ; public final static short [ ] triplet = { 0 , 0 , 255 } ; public final static String hexString = "0:0:FFFF" ; public short getIndex ( ) { return index ; } public short [ ] getTriplet ( ) { return triplet ; } public String getHexString ( ) { return hexString ; } } public final static class BLUE_GREY extends HSSFColor { public final static short index = 0x36 ; public final static short [ ] triplet = { 102 , 102 , 153 } ; public final static String hexString = "6666:6666:9999" ; public short getIndex ( ) { return index ; } public short [ ] getTriplet ( ) { return triplet ; } public String getHexString ( ) { return hexString ; } } public final static class GREY_50_PERCENT extends HSSFColor { public final static short index = 0x17 ; public final static short [ ] triplet = { 128 , 128 , 128 } ; public final static String hexString = "8080:8080:8080" ; public short getIndex ( ) { return index ; } public short [ ] getTriplet ( ) { return triplet ; } public String getHexString ( ) { return hexString ; } } public final static class RED extends HSSFColor { public final static short index = 0xa ; public final static short [ ] triplet = { 255 , 0 , 0 } ; public final static String hexString = "FFFF:0:0" ; public short getIndex ( ) { return index ; } public short [ ] getTriplet ( ) { return triplet ; } public String getHexString ( ) { return hexString ; } } public final static class LIGHT_ORANGE extends HSSFColor { public final static short index = 0x34 ; public final static short [ ] triplet = { 255 , 153 , 0 } ; public final static String hexString = "FFFF:9999:0" ; public short getIndex ( ) { return index ; } public short [ ] getTriplet ( ) { return triplet ; } public String getHexString ( ) { return hexString ; } } public final static class LIME extends HSSFColor { public final static short index = 0x32 ; public final static short [ ] triplet = { 153 , 204 , 0 } ; public final static String hexString = "9999:CCCC:0" ; public short getIndex ( ) { return index ; } public short [ ] getTriplet ( ) { return triplet ; } public String getHexString ( ) { return hexString ; } } public final static class SEA_GREEN extends HSSFColor { public final static short index = 0x39 ; public final static short [ ] triplet = { 51 , 153 , 102 } ; public final static String hexString = "3333:9999:6666" ; public short getIndex ( ) { return index ; } public short [ ] getTriplet ( ) { return triplet ; } public String getHexString ( ) { return hexString ; } } public final static class AQUA extends HSSFColor { public final static short index = 0x31 ; public final static short [ ] triplet = { 51 , 204 , 204 } ; public final static String hexString = "3333:CCCC:CCCC" ; public short getIndex ( ) { return index ; } public short [ ] getTriplet ( ) { return triplet ; } public String getHexString ( ) { return hexString ; } } public final static class LIGHT_BLUE extends HSSFColor { public final static short index = 0x30 ; public final static short [ ] triplet = { 51 , 102 , 255 } ; public final static String hexString = "3333:6666:FFFF" ; public short getIndex ( ) { return index ; } public short [ ] getTriplet ( ) { return triplet ; } public String getHexString ( ) { return hexString ; } } public final static class VIOLET extends HSSFColor { public final static short index = 0x14 ; public final static short index2 = 0x24 ; public final static short [ ] triplet = { 128 , 0 , 128 } ; public final static String hexString = "8080:0:8080" ; public short getIndex ( ) { return index ; } public short [ ] getTriplet ( ) { return triplet ; } public String getHexString ( ) { return hexString ; } } public final static class GREY_40_PERCENT extends HSSFColor { public final static short index = 0x37 ; public final static short [ ] triplet = { 150 , 150 , 150 } ; public final static String hexString = "9696:9696:9696" ; public short getIndex ( ) { return index ; } public short [ ] getTriplet ( ) { return triplet ; } public String getHexString ( ) { return hexString ; } } public final static class PINK extends HSSFColor { public final static short index = 0xe ; public final static short index2 = 0x21 ; public final static short [ ] triplet = { 255 , 0 , 255 } ; public final static String hexString = "FFFF:0:FFFF" ; public short getIndex ( ) { return index ; } public short [ ] getTriplet ( ) { return triplet ; } public String getHexString ( ) { return hexString ; } } public final static class GOLD extends HSSFColor { public final static short index = 0x33 ; public final static short [ ] triplet = { 255 , 204 , 0 } ; public final static String hexString = "FFFF:CCCC:0" ; public short getIndex ( ) { return index ; } public short [ ] getTriplet ( ) { return triplet ; } public String getHexString ( ) { return hexString ; } } public final static class YELLOW extends HSSFColor { public final static short index = 0xd ; public final static short index2 = 0x22 ; public final static short [ ] triplet = { 255 , 255 , 0 } ; public final static String hexString = "FFFF:FFFF:0" ; public short getIndex ( ) { return index ; } public short [ ] getTriplet ( ) { return triplet ; } public String getHexString ( ) { return hexString ; } } public final static class BRIGHT_GREEN extends HSSFColor { public final static short index = 0xb ; public final static short index2 = 0x23 ; public final static short [ ] triplet = { 0 , 255 , 0 } ; public final static String hexString = "0:FFFF:0" ; public short getIndex ( ) { return index ; } public String getHexString ( ) { return hexString ; } public short [ ] getTriplet ( ) { return triplet ; } } public final static class TURQUOISE extends HSSFColor { public final static short index = 0xf ; public final static short index2 = 0x23 ; public final static short [ ] triplet = { 0 , 255 , 255 } ; public final static String hexString = "0:FFFF:FFFF" ; public short getIndex ( ) { return index ; } public short [ ] getTriplet ( ) { return triplet ; } public String getHexString ( ) { return hexString ; } } public final static class SKY_BLUE extends HSSFColor { public final static short index = 0x28 ; public final static short [ ] triplet = { 0 , 204 , 255 } ; public final static String hexString = "0:CCCC:FFFF" ; public short getIndex ( ) { return index ; } public short [ ] getTriplet ( ) { return triplet ; } public String getHexString ( ) { return hexString ; } } public final static class PLUM extends HSSFColor { public final static short index = 0x3d ; public final static short index2 = 0x19 ; public final static short [ ] triplet = { 153 , 51 , 102 } ; public final static String hexString = "9999:3333:6666" ; public short getIndex ( ) { return index ; } public short [ ] getTriplet ( ) { return triplet ; } public String getHexString ( ) { return hexString ; } } public final static class GREY_25_PERCENT extends HSSFColor { public final static short index = 0x16 ; public final static short [ ] triplet = { 192 , 192 , 192 } ; public final static String hexString = "C0C0:C0C0:C0C0" ; public short getIndex ( ) { return index ; } public short [ ] getTriplet ( ) { return triplet ; } public String getHexString ( ) { return hexString ; } } public final static class ROSE extends HSSFColor { public final static short index = 0x2d ; public final static short [ ] triplet = { 255 , 153 , 204 } ; public final static String hexString = "FFFF:9999:CCCC" ; public short getIndex ( ) { return index ; } public short [ ] getTriplet ( ) { return triplet ; } public String getHexString ( ) { return hexString ; } } public final static class TAN extends HSSFColor { public final static short index = 0x2f ; public final static short [ ] triplet = { 255 , 204 , 153 } ; public final static String hexString = "FFFF:CCCC:9999" ; public short getIndex ( ) { return index ; } public short [ ] getTriplet ( ) { return triplet ; } public String getHexString ( ) { return hexString ; } } public final static class LIGHT_YELLOW extends HSSFColor { public final static short index = 0x2b ; public final static short [ ] triplet = { 255 , 255 , 153 } ; public final static String hexString = "FFFF:FFFF:9999" ; public short getIndex ( ) { return index ; } public short [ ] getTriplet ( ) { return triplet ; } public String getHexString ( ) { return hexString ; } } public final static class LIGHT_GREEN extends HSSFColor { public final static short index = 0x2a ; public final static short [ ] triplet = { 204 , 255 , 204 } ; public final static String hexString = "CCCC:FFFF:CCCC" ; public short getIndex ( ) { return index ; } public short [ ] getTriplet ( ) { return triplet ; } public String getHexString ( ) { return hexString ; } } public final static class LIGHT_TURQUOISE extends HSSFColor { public final static short index = 0x29 ; public final static short index2 = 0x1b ; public final static short [ ] triplet = { 204 , 255 , 255 } ; public final static String hexString = "CCCC:FFFF:FFFF" ; public short getIndex ( ) { return index ; } public short [ ] getTriplet ( ) { return triplet ; } public String getHexString ( ) { return hexString ; } } public final static class PALE_BLUE extends HSSFColor { public final static short index = 0x2c ; public final static short [ ] triplet = { 153 , 204 , 255 } ; public final static String hexString = "9999:CCCC:FFFF" ; public short getIndex ( ) { return index ; } public short [ ] getTriplet ( ) { return triplet ; } public String getHexString ( ) { return hexString ; } } public final static class LAVENDER extends HSSFColor { public final static short index = 0x2e ; public final static short [ ] triplet = { 204 , 153 , 255 } ; public final static String hexString = "CCCC:9999:FFFF" ; public short getIndex ( ) { return index ; } public short [ ] getTriplet ( ) { return triplet ; } public String getHexString ( ) { return hexString ; } } public final static class WHITE extends HSSFColor { public final static short index = 0x9 ; public final static short [ ] triplet = { 255 , 255 , 255 } ; public final static String hexString = "FFFF:FFFF:FFFF" ; public short getIndex ( ) { return index ; } public short [ ] getTriplet ( ) { return triplet ; } public String getHexString ( ) { return hexString ; } } public final static class CORNFLOWER_BLUE extends HSSFColor { public final static short index = 0x18 ; public final static short [ ] triplet = { 153 , 153 , 255 } ; public final static String hexString = "9999:9999:FFFF" ; public short getIndex ( ) { return index ; } public short [ ] getTriplet ( ) { return triplet ; } public String getHexString ( ) { return hexString ; } } public final static class LEMON_CHIFFON extends HSSFColor { public final static short index = 0x1a ; public final static short [ ] triplet = { 255 , 255 , 204 } ; public final static String hexString = "FFFF:FFFF:CCCC" ; public short getIndex ( ) { return index ; } public short [ ] getTriplet ( ) { return triplet ; } public String getHexString ( ) { return hexString ; } } public final static class MAROON extends HSSFColor { public final static short index = 0x19 ; public final static short [ ] triplet = { 153 , 51 , 102 } ; public final static String hexString = "9999:3333:6666" ; public short getIndex ( ) { return index ; } public short [ ] getTriplet ( ) { return triplet ; } public String getHexString ( ) { return hexString ; } } public final static class ORCHID extends HSSFColor { public final static short index = 0x1c ; public final static short [ ] triplet = { 102 , 0 , 102 } ; public final static String hexString = "6666:0:6666" ; public short getIndex ( ) { return index ; } public short [ ] getTriplet ( ) { return triplet ; } public String getHexString ( ) { return hexString ; } } public final static class CORAL extends HSSFColor { public final static short index = 0x1d ; public final static short [ ] triplet = { 255 , 128 , 128 } ; public final static String hexString = "FFFF:8080:8080" ; public short getIndex ( ) { return index ; } public short [ ] getTriplet ( ) { return triplet ; } public String getHexString ( ) { return hexString ; } } public final static class ROYAL_BLUE extends HSSFColor { public final static short index = 0x1e ; public final static short [ ] triplet = { 0 , 102 , 204 } ; public final static String hexString = "0:6666:CCCC" ; public short getIndex ( ) { return index ; } public short [ ] getTriplet ( ) { return triplet ; } public String getHexString ( ) { return hexString ; } } public final static class LIGHT_CORNFLOWER_BLUE extends HSSFColor { public final static short index = 0x1f ; public final static short [ ] triplet = { 204 , 204 , 255 } ; public final static String hexString = "CCCC:CCCC:FFFF" ; public short getIndex ( ) { return index ; } public short [ ] getTriplet ( ) { return triplet ; } public String getHexString ( ) { return hexString ; } } public final static class AUTOMATIC extends HSSFColor { private static HSSFColor instance = new AUTOMATIC ( ) ; public final static short index = 0x40 ; public short getIndex ( ) { return index ; } public short [ ] getTriplet ( ) { return BLACK . triplet ; } public String getHexString ( ) { return BLACK . hexString ; } public static HSSFColor getInstance ( ) { return instance ; } } } 	0
package org . apache . poi . util ; import java . io . IOException ; import java . io . InputStream ; public class IOUtils { private IOUtils ( ) { } public static int readFully ( InputStream in , byte [ ] b ) throws IOException { return readFully ( in , b , 0 , b . length ) ; } public static int readFully ( InputStream in , byte [ ] b , int off , int len ) throws IOException { int total = 0 ; for ( ; ; ) { int got = in . read ( b , off + total , len - total ) ; if ( got < 0 ) { return ( total == 0 ) ? - 1 : total ; } else { total += got ; if ( total == len ) return total ; } } } } 	1
package org . apache . poi . poifs . storage ; import org . apache . poi . poifs . common . POIFSConstants ; import org . apache . poi . util . IOUtils ; import java . io . * ; public class RawDataBlock implements ListManagedBlock { private byte [ ] _data ; private boolean _eof ; public RawDataBlock ( final InputStream stream ) throws IOException { _data = new byte [ POIFSConstants . BIG_BLOCK_SIZE ] ; int count = IOUtils . readFully ( stream , _data ) ; if ( count == - 1 ) { _eof = true ; } else if ( count != POIFSConstants . BIG_BLOCK_SIZE ) { if ( count == - 1 ) count = 0 ; String type = " byte" + ( ( count == 1 ) ? ( "" ) : ( "s" ) ) ; throw new IOException ( "Unable to read entire block; " + count + type + " read; expected " + POIFSConstants . BIG_BLOCK_SIZE + " bytes" ) ; } else { _eof = false ; } } public boolean eof ( ) throws IOException { return _eof ; } public byte [ ] getData ( ) throws IOException { if ( eof ( ) ) { throw new IOException ( "Cannot return empty data" ) ; } return _data ; } } 	1
package org . apache . poi . ddf ; import org . apache . poi . util . HexDump ; import org . apache . poi . util . LittleEndian ; public class EscherSpRecord extends EscherRecord { public static final short RECORD_ID = ( short ) 0xF00A ; public static final String RECORD_DESCRIPTION = "MsofbtSp" ; public static final int FLAG_GROUP = 0x0001 ; public static final int FLAG_CHILD = 0x0002 ; public static final int FLAG_PATRIARCH = 0x0004 ; public static final int FLAG_DELETED = 0x0008 ; public static final int FLAG_OLESHAPE = 0x0010 ; public static final int FLAG_HAVEMASTER = 0x0020 ; public static final int FLAG_FLIPHORIZ = 0x0040 ; public static final int FLAG_FLIPVERT = 0x0080 ; public static final int FLAG_CONNECTOR = 0x0100 ; public static final int FLAG_HAVEANCHOR = 0x0200 ; public static final int FLAG_BACKGROUND = 0x0400 ; public static final int FLAG_HASSHAPETYPE = 0x0800 ; private int field_1_shapeId ; private int field_2_flags ; public int fillFields ( byte [ ] data , int offset , EscherRecordFactory recordFactory ) { int bytesRemaining = readHeader ( data , offset ) ; int pos = offset + 8 ; int size = 0 ; field_1_shapeId = LittleEndian . getInt ( data , pos + size ) ; size += 4 ; field_2_flags = LittleEndian . getInt ( data , pos + size ) ; size += 4 ; return getRecordSize ( ) ; } public int serialize ( int offset , byte [ ] data , EscherSerializationListener listener ) { listener . beforeRecordSerialize ( offset , getRecordId ( ) , this ) ; LittleEndian . putShort ( data , offset , getOptions ( ) ) ; LittleEndian . putShort ( data , offset + 2 , getRecordId ( ) ) ; int remainingBytes = 8 ; LittleEndian . putInt ( data , offset + 4 , remainingBytes ) ; LittleEndian . putInt ( data , offset + 8 , field_1_shapeId ) ; LittleEndian . putInt ( data , offset + 12 , field_2_flags ) ; listener . afterRecordSerialize ( offset + getRecordSize ( ) , getRecordId ( ) , getRecordSize ( ) , this ) ; return 8 + 8 ; } public int getRecordSize ( ) { return 8 + 8 ; } public short getRecordId ( ) { return RECORD_ID ; } public String getRecordName ( ) { return "Sp" ; } public String toString ( ) { String nl = System . getProperty ( "line.separator" ) ; return getClass ( ) . getName ( ) + ":" + nl + "  RecordId: 0x" + HexDump . toHex ( RECORD_ID ) + nl + "  Options: 0x" + HexDump . toHex ( getOptions ( ) ) + nl + "  ShapeId: " + field_1_shapeId + nl + "  Flags: " + decodeFlags ( field_2_flags ) + " (0x" + HexDump . toHex ( field_2_flags ) + ")" + nl ; } private String decodeFlags ( int flags ) { StringBuffer result = new StringBuffer ( ) ; result . append ( ( flags & FLAG_GROUP ) != 0 ? "|GROUP" : "" ) ; result . append ( ( flags & FLAG_CHILD ) != 0 ? "|CHILD" : "" ) ; result . append ( ( flags & FLAG_PATRIARCH ) != 0 ? "|PATRIARCH" : "" ) ; result . append ( ( flags & FLAG_DELETED ) != 0 ? "|DELETED" : "" ) ; result . append ( ( flags & FLAG_OLESHAPE ) != 0 ? "|OLESHAPE" : "" ) ; result . append ( ( flags & FLAG_HAVEMASTER ) != 0 ? "|HAVEMASTER" : "" ) ; result . append ( ( flags & FLAG_FLIPHORIZ ) != 0 ? "|FLIPHORIZ" : "" ) ; result . append ( ( flags & FLAG_FLIPVERT ) != 0 ? "|FLIPVERT" : "" ) ; result . append ( ( flags & FLAG_CONNECTOR ) != 0 ? "|CONNECTOR" : "" ) ; result . append ( ( flags & FLAG_HAVEANCHOR ) != 0 ? "|HAVEANCHOR" : "" ) ; result . append ( ( flags & FLAG_BACKGROUND ) != 0 ? "|BACKGROUND" : "" ) ; result . append ( ( flags & FLAG_HASSHAPETYPE ) != 0 ? "|HASSHAPETYPE" : "" ) ; if ( result . length ( ) > 0 ) { result . deleteCharAt ( 0 ) ; } return result . toString ( ) ; } public int getShapeId ( ) { return field_1_shapeId ; } public void setShapeId ( int field_1_shapeId ) { this . field_1_shapeId = field_1_shapeId ; } public int getFlags ( ) { return field_2_flags ; } public void setFlags ( int field_2_flags ) { this . field_2_flags = field_2_flags ; } } 	1
package org . apache . poi . hpsf ; import java . util . Date ; import java . util . HashMap ; import java . util . Iterator ; import java . util . Map ; import org . apache . poi . hpsf . wellknown . PropertyIDMap ; public class CustomProperties extends HashMap { private Map dictionaryIDToName = new HashMap ( ) ; private Map dictionaryNameToID = new HashMap ( ) ; private boolean isPure = true ; public Object put ( final Object name , final Object customProperty ) throws ClassCastException { final CustomProperty cp = ( CustomProperty ) customProperty ; if ( name == null ) { isPure = false ; return null ; } if ( ! ( name instanceof String ) ) throw new ClassCastException ( "The name of a custom property must " + "be a java.lang.String, but it is a " + name . getClass ( ) . getName ( ) ) ; if ( ! ( name . equals ( cp . getName ( ) ) ) ) throw new IllegalArgumentException ( "Parameter \"name\" (" + name + ") and custom property's name (" + cp . getName ( ) + ") do not match." ) ; final Long idKey = new Long ( cp . getID ( ) ) ; final Object oldID = dictionaryNameToID . get ( name ) ; dictionaryIDToName . remove ( oldID ) ; dictionaryNameToID . put ( name , idKey ) ; dictionaryIDToName . put ( idKey , name ) ; final Object oldCp = super . remove ( oldID ) ; super . put ( idKey , cp ) ; return oldCp ; } private Object put ( final CustomProperty customProperty ) throws ClassCastException { final String name = customProperty . getName ( ) ; final Long oldId = ( Long ) dictionaryNameToID . get ( name ) ; if ( oldId != null ) customProperty . setID ( oldId . longValue ( ) ) ; else { long max = 1 ; for ( final Iterator i = dictionaryIDToName . keySet ( ) . iterator ( ) ; i . hasNext ( ) ; ) { final long id = ( ( Long ) i . next ( ) ) . longValue ( ) ; if ( id > max ) max = id ; } customProperty . setID ( max + 1 ) ; } return this . put ( name , customProperty ) ; } public Object remove ( final String name ) { final Long id = ( Long ) dictionaryNameToID . get ( name ) ; if ( id == null ) return null ; dictionaryIDToName . remove ( id ) ; dictionaryNameToID . remove ( name ) ; return super . remove ( id ) ; } public Object put ( final String name , final String value ) { final MutableProperty p = new MutableProperty ( ) ; p . setID ( - 1 ) ; p . setType ( Variant . VT_LPWSTR ) ; p . setValue ( value ) ; final CustomProperty cp = new CustomProperty ( p , name ) ; return put ( cp ) ; } public Object put ( final String name , final Long value ) { final MutableProperty p = new MutableProperty ( ) ; p . setID ( - 1 ) ; p . setType ( Variant . VT_I8 ) ; p . setValue ( value ) ; final CustomProperty cp = new CustomProperty ( p , name ) ; return put ( cp ) ; } public Object put ( final String name , final Double value ) { final MutableProperty p = new MutableProperty ( ) ; p . setID ( - 1 ) ; p . setType ( Variant . VT_R8 ) ; p . setValue ( value ) ; final CustomProperty cp = new CustomProperty ( p , name ) ; return put ( cp ) ; } public Object put ( final String name , final Integer value ) { final MutableProperty p = new MutableProperty ( ) ; p . setID ( - 1 ) ; p . setType ( Variant . VT_I4 ) ; p . setValue ( value ) ; final CustomProperty cp = new CustomProperty ( p , name ) ; return put ( cp ) ; } public Object put ( final String name , final Boolean value ) { final MutableProperty p = new MutableProperty ( ) ; p . setID ( - 1 ) ; p . setType ( Variant . VT_BOOL ) ; p . setValue ( value ) ; final CustomProperty cp = new CustomProperty ( p , name ) ; return put ( cp ) ; } public Object get ( final String name ) { final Long id = ( Long ) dictionaryNameToID . get ( name ) ; final CustomProperty cp = ( CustomProperty ) super . get ( id ) ; return cp != null ? cp . getValue ( ) : null ; } public Object put ( final String name , final Date value ) { final MutableProperty p = new MutableProperty ( ) ; p . setID ( - 1 ) ; p . setType ( Variant . VT_FILETIME ) ; p . setValue ( value ) ; final CustomProperty cp = new CustomProperty ( p , name ) ; return put ( cp ) ; } public void setCodepage ( final int codepage ) { final MutableProperty p = new MutableProperty ( ) ; p . setID ( PropertyIDMap . PID_CODEPAGE ) ; p . setType ( Variant . VT_I2 ) ; p . setValue ( new Integer ( codepage ) ) ; put ( new CustomProperty ( p ) ) ; } Map getDictionary ( ) { return dictionaryIDToName ; } public int getCodepage ( ) { int codepage = - 1 ; for ( final Iterator i = this . values ( ) . iterator ( ) ; codepage == - 1 && i . hasNext ( ) ; ) { final CustomProperty cp = ( CustomProperty ) i . next ( ) ; if ( cp . getID ( ) == PropertyIDMap . PID_CODEPAGE ) codepage = ( ( Integer ) cp . getValue ( ) ) . intValue ( ) ; } return codepage ; } public boolean isPure ( ) { return isPure ; } public void setPure ( final boolean isPure ) { this . isPure = isPure ; } } 	0
package org . apache . poi . hssf . record ; import org . apache . poi . util . LittleEndian ; public class IterationRecord extends Record { public final static short sid = 0x11 ; private short field_1_iteration ; public IterationRecord ( ) { } public IterationRecord ( RecordInputStream in ) { super ( in ) ; } protected void validateSid ( short id ) { if ( id != sid ) { throw new RecordFormatException ( "NOT An ITERATION RECORD" ) ; } } protected void fillFields ( RecordInputStream in ) { field_1_iteration = in . readShort ( ) ; } public void setIteration ( boolean iterate ) { if ( iterate ) { field_1_iteration = 1 ; } else { field_1_iteration = 0 ; } } public boolean getIteration ( ) { return ( field_1_iteration == 1 ) ; } public String toString ( ) { StringBuffer buffer = new StringBuffer ( ) ; buffer . append ( "[ITERATION]\n" ) ; buffer . append ( "    .iteration      = " ) . append ( getIteration ( ) ) . append ( "\n" ) ; buffer . append ( "[/ITERATION]\n" ) ; return buffer . toString ( ) ; } public int serialize ( int offset , byte [ ] data ) { LittleEndian . putShort ( data , 0 + offset , sid ) ; LittleEndian . putShort ( data , 2 + offset , ( short ) 0x2 ) ; LittleEndian . putShort ( data , 4 + offset , field_1_iteration ) ; return getRecordSize ( ) ; } public int getRecordSize ( ) { return 6 ; } public short getSid ( ) { return sid ; } public Object clone ( ) { IterationRecord rec = new IterationRecord ( ) ; rec . field_1_iteration = field_1_iteration ; return rec ; } } 	1
package org . apache . poi . poifs . storage ; import java . io . * ; import java . util . * ; import org . apache . poi . poifs . common . POIFSConstants ; import org . apache . poi . poifs . property . Property ; import org . apache . poi . util . IntegerField ; import org . apache . poi . util . LittleEndian ; import org . apache . poi . util . LittleEndianConsts ; public class PropertyBlock extends BigBlock { private static final int _properties_per_block = POIFSConstants . BIG_BLOCK_SIZE / POIFSConstants . PROPERTY_SIZE ; private Property [ ] _properties ; private PropertyBlock ( final Property [ ] properties , final int offset ) { _properties = new Property [ _properties_per_block ] ; for ( int j = 0 ; j < _properties_per_block ; j ++ ) { _properties [ j ] = properties [ j + offset ] ; } } public static BlockWritable [ ] createPropertyBlockArray ( final List properties ) { int block_count = ( properties . size ( ) + _properties_per_block - 1 ) / _properties_per_block ; Property [ ] to_be_written = new Property [ block_count * _properties_per_block ] ; System . arraycopy ( properties . toArray ( new Property [ 0 ] ) , 0 , to_be_written , 0 , properties . size ( ) ) ; for ( int j = properties . size ( ) ; j < to_be_written . length ; j ++ ) { to_be_written [ j ] = new Property ( ) { protected void preWrite ( ) { } public boolean isDirectory ( ) { return false ; } } ; } BlockWritable [ ] rvalue = new BlockWritable [ block_count ] ; for ( int j = 0 ; j < block_count ; j ++ ) { rvalue [ j ] = new PropertyBlock ( to_be_written , j * _properties_per_block ) ; } return rvalue ; } void writeData ( final OutputStream stream ) throws IOException { for ( int j = 0 ; j < _properties_per_block ; j ++ ) { _properties [ j ] . writeData ( stream ) ; } } } 	1
package org . apache . poi . hssf . record ; import org . apache . poi . util . LittleEndian ; import java . io . IOException ; import java . io . InputStream ; import java . io . ByteArrayOutputStream ; public class RecordInputStream extends InputStream { public final static short MAX_RECORD_DATA_SIZE = 8224 ; private InputStream in ; protected short currentSid ; protected short currentLength = - 1 ; protected short nextSid = - 1 ; protected byte [ ] data = new byte [ MAX_RECORD_DATA_SIZE ] ; protected short recordOffset ; protected long pos ; private boolean autoContinue = true ; public RecordInputStream ( InputStream in ) throws RecordFormatException { this . in = in ; try { nextSid = LittleEndian . readShort ( in ) ; } catch ( IOException ex ) { throw new RecordFormatException ( "Error reading bytes" , ex ) ; } } public int read ( ) throws IOException { checkRecordPosition ( ) ; byte result = data [ recordOffset ] ; recordOffset += 1 ; pos += 1 ; return result ; } public short getSid ( ) { return currentSid ; } public short getLength ( ) { return currentLength ; } public short getRecordOffset ( ) { return recordOffset ; } public long getPos ( ) { return pos ; } public boolean hasNextRecord ( ) { return ( nextSid != 0 ) ; } public void nextRecord ( ) throws RecordFormatException { if ( ( currentLength != - 1 ) && ( currentLength != recordOffset ) ) { System . out . println ( "WARN. Unread " + remaining ( ) + " bytes of record 0x" + Integer . toHexString ( currentSid ) ) ; } currentSid = nextSid ; pos += LittleEndian . SHORT_SIZE ; autoContinue = true ; try { recordOffset = 0 ; currentLength = LittleEndian . readShort ( in ) ; if ( currentLength > MAX_RECORD_DATA_SIZE ) throw new RecordFormatException ( "The content of an excel record cannot exceed " + MAX_RECORD_DATA_SIZE + " bytes" ) ; pos += LittleEndian . SHORT_SIZE ; in . read ( data , 0 , currentLength ) ; nextSid = LittleEndian . readShort ( in ) ; } catch ( IOException ex ) { throw new RecordFormatException ( "Error reading bytes" , ex ) ; } } public void setAutoContinue ( boolean enable ) { this . autoContinue = enable ; } public boolean getAutoContinue ( ) { return autoContinue ; } protected void checkRecordPosition ( ) { if ( remaining ( ) <= 0 ) { if ( isContinueNext ( ) && autoContinue ) { nextRecord ( ) ; } else throw new ArrayIndexOutOfBoundsException ( ) ; } } public byte readByte ( ) { checkRecordPosition ( ) ; byte result = data [ recordOffset ] ; recordOffset += 1 ; pos += 1 ; return result ; } public short readShort ( ) { checkRecordPosition ( ) ; short result = LittleEndian . getShort ( data , recordOffset ) ; recordOffset += LittleEndian . SHORT_SIZE ; pos += LittleEndian . SHORT_SIZE ; return result ; } public int readInt ( ) { checkRecordPosition ( ) ; int result = LittleEndian . getInt ( data , recordOffset ) ; recordOffset += LittleEndian . INT_SIZE ; pos += LittleEndian . INT_SIZE ; return result ; } public long readLong ( ) { checkRecordPosition ( ) ; long result = LittleEndian . getLong ( data , recordOffset ) ; recordOffset += LittleEndian . LONG_SIZE ; pos += LittleEndian . LONG_SIZE ; return result ; } public int readUShort ( ) { checkRecordPosition ( ) ; int result = LittleEndian . getUShort ( data , recordOffset ) ; recordOffset += LittleEndian . SHORT_SIZE ; pos += LittleEndian . SHORT_SIZE ; return result ; } byte [ ] NAN_data = null ; public double readDouble ( ) { checkRecordPosition ( ) ; NAN_data = null ; double result = LittleEndian . getDouble ( data , recordOffset ) ; if ( Double . isNaN ( result ) ) { NAN_data = new byte [ 8 ] ; System . arraycopy ( data , recordOffset , NAN_data , 0 , 8 ) ; } recordOffset += LittleEndian . DOUBLE_SIZE ; pos += LittleEndian . DOUBLE_SIZE ; return result ; } public byte [ ] getNANData ( ) { if ( NAN_data == null ) throw new RecordFormatException ( "Do NOT call getNANData without calling readDouble that returns NaN" ) ; return NAN_data ; } public short [ ] readShortArray ( ) { checkRecordPosition ( ) ; short [ ] arr = LittleEndian . getShortArray ( data , recordOffset ) ; final int size = ( 2 * ( arr . length + 1 ) ) ; recordOffset += size ; pos += size ; return arr ; } public String readUnicodeLEString ( int length ) { if ( ( length < 0 ) || ( ( ( remaining ( ) / 2 ) < length ) && ! isContinueNext ( ) ) ) { throw new IllegalArgumentException ( "Illegal length" ) ; } StringBuffer buf = new StringBuffer ( length ) ; for ( int i = 0 ; i < length ; i ++ ) { if ( ( remaining ( ) == 0 ) && ( isContinueNext ( ) ) ) nextRecord ( ) ; char ch = ( char ) readShort ( ) ; buf . append ( ch ) ; } return buf . toString ( ) ; } public String readCompressedUnicode ( int length ) { if ( ( length < 0 ) || ( remaining ( ) < length ) ) { throw new IllegalArgumentException ( "Illegal length" ) ; } StringBuffer buf = new StringBuffer ( length ) ; for ( int i = 0 ; i < length ; i ++ ) { if ( ( remaining ( ) == 0 ) && ( isContinueNext ( ) ) ) nextRecord ( ) ; byte b = readByte ( ) ; char ch = ( char ) ( ( short ) 0xff & ( short ) b ) ; buf . append ( ch ) ; } return buf . toString ( ) ; } public UnicodeString readUnicodeString ( ) { return new UnicodeString ( this ) ; } public byte [ ] readRemainder ( ) { int size = remaining ( ) ; byte [ ] result = new byte [ size ] ; System . arraycopy ( data , recordOffset , result , 0 , size ) ; recordOffset += size ; pos += size ; return result ; } public byte [ ] readAllContinuedRemainder ( ) { ByteArrayOutputStream out = new ByteArrayOutputStream ( 2 * MAX_RECORD_DATA_SIZE ) ; while ( isContinueNext ( ) ) { byte [ ] b = readRemainder ( ) ; out . write ( b , 0 , b . length ) ; nextRecord ( ) ; } byte [ ] b = readRemainder ( ) ; out . write ( b , 0 , b . length ) ; return out . toByteArray ( ) ; } public int remaining ( ) { return ( currentLength - recordOffset ) ; } public boolean isContinueNext ( ) { return ( nextSid == ContinueRecord . sid ) ; } } 	1
package org . apache . poi . hssf . record . formula ; import org . apache . poi . util . LittleEndian ; import org . apache . poi . util . BitField ; import org . apache . poi . hssf . record . RecordInputStream ; import org . apache . poi . hssf . util . AreaReference ; import org . apache . poi . hssf . util . CellReference ; import org . apache . poi . hssf . model . Workbook ; public class AreaNAPtg extends AreaPtg { public final static short sid = 0x6D ; protected AreaNAPtg ( ) { } public AreaNAPtg ( RecordInputStream in ) { super ( in ) ; } public void writeBytes ( byte [ ] array , int offset ) { throw new RuntimeException ( "Coding Error: This method should never be called. This ptg should be converted" ) ; } public String getAreaPtgName ( ) { return "AreaNAPtg" ; } public String toFormulaString ( Workbook book ) { throw new RuntimeException ( "Coding Error: This method should never be called. This ptg should be converted" ) ; } public Object clone ( ) { throw new RuntimeException ( "Coding Error: This method should never be called. This ptg should be converted" ) ; } } 	0
package org . apache . poi . hpsf ; import java . io . PrintStream ; import java . io . PrintWriter ; public class HPSFRuntimeException extends RuntimeException { private Throwable reason ; public HPSFRuntimeException ( ) { super ( ) ; } public HPSFRuntimeException ( final String msg ) { super ( msg ) ; } public HPSFRuntimeException ( final Throwable reason ) { super ( ) ; this . reason = reason ; } public HPSFRuntimeException ( final String msg , final Throwable reason ) { super ( msg ) ; this . reason = reason ; } public Throwable getReason ( ) { return reason ; } public void printStackTrace ( ) { printStackTrace ( System . err ) ; } public void printStackTrace ( final PrintStream p ) { final Throwable reason = getReason ( ) ; super . printStackTrace ( p ) ; if ( reason != null ) { p . println ( "Caused by:" ) ; reason . printStackTrace ( p ) ; } } public void printStackTrace ( final PrintWriter p ) { final Throwable reason = getReason ( ) ; super . printStackTrace ( p ) ; if ( reason != null ) { p . println ( "Caused by:" ) ; reason . printStackTrace ( p ) ; } } } 	0
package org . apache . poi . hssf . record ; public class VerticalPageBreakRecord extends PageBreakRecord { public static final short sid = PageBreakRecord . VERTICAL_SID ; public VerticalPageBreakRecord ( ) { super ( ) ; } public VerticalPageBreakRecord ( short sid ) { super ( sid ) ; } public VerticalPageBreakRecord ( RecordInputStream in ) { super ( in ) ; } public short getSid ( ) { return sid ; } } 	1
package org . apache . poi . hpsf . wellknown ; import java . util . HashMap ; public class SectionIDMap extends HashMap { public static final byte [ ] SUMMARY_INFORMATION_ID = new byte [ ] { ( byte ) 0xF2 , ( byte ) 0x9F , ( byte ) 0x85 , ( byte ) 0xE0 , ( byte ) 0x4F , ( byte ) 0xF9 , ( byte ) 0x10 , ( byte ) 0x68 , ( byte ) 0xAB , ( byte ) 0x91 , ( byte ) 0x08 , ( byte ) 0x00 , ( byte ) 0x2B , ( byte ) 0x27 , ( byte ) 0xB3 , ( byte ) 0xD9 } ; public static final byte [ ] [ ] DOCUMENT_SUMMARY_INFORMATION_ID = new byte [ ] [ ] { { ( byte ) 0xD5 , ( byte ) 0xCD , ( byte ) 0xD5 , ( byte ) 0x02 , ( byte ) 0x2E , ( byte ) 0x9C , ( byte ) 0x10 , ( byte ) 0x1B , ( byte ) 0x93 , ( byte ) 0x97 , ( byte ) 0x08 , ( byte ) 0x00 , ( byte ) 0x2B , ( byte ) 0x2C , ( byte ) 0xF9 , ( byte ) 0xAE } , { ( byte ) 0xD5 , ( byte ) 0xCD , ( byte ) 0xD5 , ( byte ) 0x05 , ( byte ) 0x2E , ( byte ) 0x9C , ( byte ) 0x10 , ( byte ) 0x1B , ( byte ) 0x93 , ( byte ) 0x97 , ( byte ) 0x08 , ( byte ) 0x00 , ( byte ) 0x2B , ( byte ) 0x2C , ( byte ) 0xF9 , ( byte ) 0xAE } } ; public static final String UNDEFINED = "[undefined]" ; private static SectionIDMap defaultMap ; public static SectionIDMap getInstance ( ) { if ( defaultMap == null ) { final SectionIDMap m = new SectionIDMap ( ) ; m . put ( SUMMARY_INFORMATION_ID , PropertyIDMap . getSummaryInformationProperties ( ) ) ; m . put ( DOCUMENT_SUMMARY_INFORMATION_ID [ 0 ] , PropertyIDMap . getDocumentSummaryInformationProperties ( ) ) ; defaultMap = m ; } return defaultMap ; } public static String getPIDString ( final byte [ ] sectionFormatID , final long pid ) { final PropertyIDMap m = getInstance ( ) . get ( sectionFormatID ) ; if ( m == null ) return UNDEFINED ; else { final String s = ( String ) m . get ( pid ) ; if ( s == null ) return UNDEFINED ; return s ; } } public PropertyIDMap get ( final byte [ ] sectionFormatID ) { return ( PropertyIDMap ) super . get ( new String ( sectionFormatID ) ) ; } public Object get ( final Object sectionFormatID ) { return get ( ( byte [ ] ) sectionFormatID ) ; } public Object put ( final byte [ ] sectionFormatID , final PropertyIDMap propertyIDMap ) { return super . put ( new String ( sectionFormatID ) , propertyIDMap ) ; } public Object put ( final Object key , final Object value ) { return put ( ( byte [ ] ) key , ( PropertyIDMap ) value ) ; } } 	1
package org . apache . poi . hssf . record ; import org . apache . poi . util . * ; public class SeriesLabelsRecord extends Record { public final static short sid = 0x100c ; private short field_1_formatFlags ; private BitField showActual = BitFieldFactory . getInstance ( 0x1 ) ; private BitField showPercent = BitFieldFactory . getInstance ( 0x2 ) ; private BitField labelAsPercentage = BitFieldFactory . getInstance ( 0x4 ) ; private BitField smoothedLine = BitFieldFactory . getInstance ( 0x8 ) ; private BitField showLabel = BitFieldFactory . getInstance ( 0x10 ) ; private BitField showBubbleSizes = BitFieldFactory . getInstance ( 0x20 ) ; public SeriesLabelsRecord ( ) { } public SeriesLabelsRecord ( RecordInputStream in ) { super ( in ) ; } protected void validateSid ( short id ) { if ( id != sid ) { throw new RecordFormatException ( "Not a SeriesLabels record" ) ; } } protected void fillFields ( RecordInputStream in ) { field_1_formatFlags = in . readShort ( ) ; } public String toString ( ) { StringBuffer buffer = new StringBuffer ( ) ; buffer . append ( "[ATTACHEDLABEL]\n" ) ; buffer . append ( "    .formatFlags          = " ) . append ( "0x" ) . append ( HexDump . toHex ( getFormatFlags ( ) ) ) . append ( " (" ) . append ( getFormatFlags ( ) ) . append ( " )" ) ; buffer . append ( System . getProperty ( "line.separator" ) ) ; buffer . append ( "         .showActual               = " ) . append ( isShowActual ( ) ) . append ( '\n' ) ; buffer . append ( "         .showPercent              = " ) . append ( isShowPercent ( ) ) . append ( '\n' ) ; buffer . append ( "         .labelAsPercentage        = " ) . append ( isLabelAsPercentage ( ) ) . append ( '\n' ) ; buffer . append ( "         .smoothedLine             = " ) . append ( isSmoothedLine ( ) ) . append ( '\n' ) ; buffer . append ( "         .showLabel                = " ) . append ( isShowLabel ( ) ) . append ( '\n' ) ; buffer . append ( "         .showBubbleSizes          = " ) . append ( isShowBubbleSizes ( ) ) . append ( '\n' ) ; buffer . append ( "[/ATTACHEDLABEL]\n" ) ; return buffer . toString ( ) ; } public int serialize ( int offset , byte [ ] data ) { int pos = 0 ; LittleEndian . putShort ( data , 0 + offset , sid ) ; LittleEndian . putShort ( data , 2 + offset , ( short ) ( getRecordSize ( ) - 4 ) ) ; LittleEndian . putShort ( data , 4 + offset + pos , field_1_formatFlags ) ; return getRecordSize ( ) ; } public int getRecordSize ( ) { return 4 + 2 ; } public short getSid ( ) { return sid ; } public Object clone ( ) { SeriesLabelsRecord rec = new SeriesLabelsRecord ( ) ; rec . field_1_formatFlags = field_1_formatFlags ; return rec ; } public short getFormatFlags ( ) { return field_1_formatFlags ; } public void setFormatFlags ( short field_1_formatFlags ) { this . field_1_formatFlags = field_1_formatFlags ; } public void setShowActual ( boolean value ) { field_1_formatFlags = showActual . setShortBoolean ( field_1_formatFlags , value ) ; } public boolean isShowActual ( ) { return showActual . isSet ( field_1_formatFlags ) ; } public void setShowPercent ( boolean value ) { field_1_formatFlags = showPercent . setShortBoolean ( field_1_formatFlags , value ) ; } public boolean isShowPercent ( ) { return showPercent . isSet ( field_1_formatFlags ) ; } public void setLabelAsPercentage ( boolean value ) { field_1_formatFlags = labelAsPercentage . setShortBoolean ( field_1_formatFlags , value ) ; } public boolean isLabelAsPercentage ( ) { return labelAsPercentage . isSet ( field_1_formatFlags ) ; } public void setSmoothedLine ( boolean value ) { field_1_formatFlags = smoothedLine . setShortBoolean ( field_1_formatFlags , value ) ; } public boolean isSmoothedLine ( ) { return smoothedLine . isSet ( field_1_formatFlags ) ; } public void setShowLabel ( boolean value ) { field_1_formatFlags = showLabel . setShortBoolean ( field_1_formatFlags , value ) ; } public boolean isShowLabel ( ) { return showLabel . isSet ( field_1_formatFlags ) ; } public void setShowBubbleSizes ( boolean value ) { field_1_formatFlags = showBubbleSizes . setShortBoolean ( field_1_formatFlags , value ) ; } public boolean isShowBubbleSizes ( ) { return showBubbleSizes . isSet ( field_1_formatFlags ) ; } } 	1
package org . apache . poi . hssf . eventusermodel ; public class HSSFUserException extends Exception { private Throwable reason ; public HSSFUserException ( ) { super ( ) ; } public HSSFUserException ( final String msg ) { super ( msg ) ; } public HSSFUserException ( final Throwable reason ) { super ( ) ; this . reason = reason ; } public HSSFUserException ( final String msg , final Throwable reason ) { super ( msg ) ; this . reason = reason ; } public Throwable getReason ( ) { return reason ; } } 	0
package org . apache . poi . hssf . eventusermodel ; import java . util . HashMap ; import java . util . List ; import java . util . ArrayList ; import org . apache . poi . hssf . record . Record ; import org . apache . poi . hssf . record . RecordFactory ; public class HSSFRequest { private HashMap records ; public HSSFRequest ( ) { records = new HashMap ( 50 ) ; } public void addListener ( HSSFListener lsnr , short sid ) { List list = null ; Object obj = records . get ( new Short ( sid ) ) ; if ( obj != null ) { list = ( List ) obj ; } else { list = new ArrayList ( 1 ) ; list . add ( lsnr ) ; records . put ( new Short ( sid ) , list ) ; } } public void addListenerForAllRecords ( HSSFListener lsnr ) { short [ ] rectypes = RecordFactory . getAllKnownRecordSIDs ( ) ; for ( int k = 0 ; k < rectypes . length ; k ++ ) { addListener ( lsnr , rectypes [ k ] ) ; } } protected short processRecord ( Record rec ) throws HSSFUserException { Object obj = records . get ( new Short ( rec . getSid ( ) ) ) ; short userCode = 0 ; if ( obj != null ) { List listeners = ( List ) obj ; for ( int k = 0 ; k < listeners . size ( ) ; k ++ ) { Object listenObj = listeners . get ( k ) ; if ( listenObj instanceof AbortableHSSFListener ) { AbortableHSSFListener listener = ( AbortableHSSFListener ) listenObj ; userCode = listener . abortableProcessRecord ( rec ) ; if ( userCode != 0 ) break ; } else { HSSFListener listener = ( HSSFListener ) listenObj ; listener . processRecord ( rec ) ; } } } return userCode ; } } 	0
package org . apache . poi . hssf . dev ; import org . apache . poi . hssf . record . * ; import org . apache . poi . poifs . filesystem . POIFSFileSystem ; import org . apache . poi . util . HexDump ; import java . io . FileInputStream ; import java . io . IOException ; import java . io . InputStream ; import java . util . ArrayList ; public class BiffViewer { String filename ; private boolean dump ; public BiffViewer ( String [ ] args ) { if ( args . length > 0 ) { filename = args [ 0 ] ; } else { System . out . println ( "BIFFVIEWER REQUIRES A FILENAME***" ) ; } } public void run ( ) { try { POIFSFileSystem fs = new POIFSFileSystem ( new FileInputStream ( filename ) ) ; InputStream stream = fs . createDocumentInputStream ( "Workbook" ) ; createRecords ( stream , dump ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; } } public static Record [ ] createRecords ( InputStream in , boolean dump ) throws RecordFormatException { ArrayList records = new ArrayList ( ) ; RecordDetails activeRecord = null ; try { BiffviewRecordInputStream recStream = new BiffviewRecordInputStream ( in ) ; while ( recStream . hasNextRecord ( ) ) { recStream . nextRecord ( ) ; if ( recStream . getSid ( ) != 0 ) { Record record = createRecord ( recStream ) ; if ( record . getSid ( ) != ContinueRecord . sid ) { records . add ( record ) ; if ( activeRecord != null ) activeRecord . dump ( ) ; activeRecord = new RecordDetails ( recStream . getSid ( ) , recStream . getLength ( ) , ( int ) recStream . getPos ( ) , record ) ; } if ( dump ) { recStream . dumpBytes ( ) ; } } } activeRecord . dump ( ) ; } catch ( IOException e ) { throw new RecordFormatException ( "Error reading bytes" , e ) ; } Record [ ] retval = new Record [ records . size ( ) ] ; retval = ( Record [ ] ) records . toArray ( retval ) ; return retval ; } private static void dumpNormal ( Record record , int startloc , short rectype , short recsize ) { System . out . println ( "Offset 0x" + Integer . toHexString ( startloc ) + " (" + startloc + ")" ) ; System . out . println ( "recordid = 0x" + Integer . toHexString ( rectype ) + ", size = " + recsize ) ; System . out . println ( record . toString ( ) ) ; } private static Record createRecord ( RecordInputStream in ) { Record retval = null ; switch ( in . getSid ( ) ) { case ChartRecord . sid : retval = new ChartRecord ( in ) ; break ; case ChartFormatRecord . sid : retval = new ChartFormatRecord ( in ) ; break ; case SeriesRecord . sid : retval = new SeriesRecord ( in ) ; break ; case BeginRecord . sid : retval = new BeginRecord ( in ) ; break ; case EndRecord . sid : retval = new EndRecord ( in ) ; break ; case BOFRecord . sid : retval = new BOFRecord ( in ) ; break ; case InterfaceHdrRecord . sid : retval = new InterfaceHdrRecord ( in ) ; break ; case MMSRecord . sid : retval = new MMSRecord ( in ) ; break ; case InterfaceEndRecord . sid : retval = new InterfaceEndRecord ( in ) ; break ; case WriteAccessRecord . sid : retval = new WriteAccessRecord ( in ) ; break ; case CodepageRecord . sid : retval = new CodepageRecord ( in ) ; break ; case DSFRecord . sid : retval = new DSFRecord ( in ) ; break ; case TabIdRecord . sid : retval = new TabIdRecord ( in ) ; break ; case FnGroupCountRecord . sid : retval = new FnGroupCountRecord ( in ) ; break ; case WindowProtectRecord . sid : retval = new WindowProtectRecord ( in ) ; break ; case ProtectRecord . sid : retval = new ProtectRecord ( in ) ; break ; case PasswordRecord . sid : retval = new PasswordRecord ( in ) ; break ; case ProtectionRev4Record . sid : retval = new ProtectionRev4Record ( in ) ; break ; case PasswordRev4Record . sid : retval = new PasswordRev4Record ( in ) ; break ; case WindowOneRecord . sid : retval = new WindowOneRecord ( in ) ; break ; case BackupRecord . sid : retval = new BackupRecord ( in ) ; break ; case HideObjRecord . sid : retval = new HideObjRecord ( in ) ; break ; case DateWindow1904Record . sid : retval = new DateWindow1904Record ( in ) ; break ; case PrecisionRecord . sid : retval = new PrecisionRecord ( in ) ; break ; case RefreshAllRecord . sid : retval = new RefreshAllRecord ( in ) ; break ; case BookBoolRecord . sid : retval = new BookBoolRecord ( in ) ; break ; case FontRecord . sid : retval = new FontRecord ( in ) ; break ; case FormatRecord . sid : retval = new FormatRecord ( in ) ; break ; case ExtendedFormatRecord . sid : retval = new ExtendedFormatRecord ( in ) ; break ; case StyleRecord . sid : retval = new StyleRecord ( in ) ; break ; case UseSelFSRecord . sid : retval = new UseSelFSRecord ( in ) ; break ; case BoundSheetRecord . sid : retval = new BoundSheetRecord ( in ) ; break ; case CountryRecord . sid : retval = new CountryRecord ( in ) ; break ; case SSTRecord . sid : retval = new SSTRecord ( in ) ; break ; case ExtSSTRecord . sid : retval = new ExtSSTRecord ( in ) ; break ; case EOFRecord . sid : retval = new EOFRecord ( in ) ; break ; case IndexRecord . sid : retval = new IndexRecord ( in ) ; break ; case CalcModeRecord . sid : retval = new CalcModeRecord ( in ) ; break ; case CalcCountRecord . sid : retval = new CalcCountRecord ( in ) ; break ; case RefModeRecord . sid : retval = new RefModeRecord ( in ) ; break ; case IterationRecord . sid : retval = new IterationRecord ( in ) ; break ; case DeltaRecord . sid : retval = new DeltaRecord ( in ) ; break ; case SaveRecalcRecord . sid : retval = new SaveRecalcRecord ( in ) ; break ; case PrintHeadersRecord . sid : retval = new PrintHeadersRecord ( in ) ; break ; case PrintGridlinesRecord . sid : retval = new PrintGridlinesRecord ( in ) ; break ; case GridsetRecord . sid : retval = new GridsetRecord ( in ) ; break ; case DrawingGroupRecord . sid : retval = new DrawingGroupRecord ( in ) ; break ; case DrawingRecordForBiffViewer . sid : retval = new DrawingRecordForBiffViewer ( in ) ; break ; case DrawingSelectionRecord . sid : retval = new DrawingSelectionRecord ( in ) ; break ; case GutsRecord . sid : retval = new GutsRecord ( in ) ; break ; case DefaultRowHeightRecord . sid : retval = new DefaultRowHeightRecord ( in ) ; break ; case WSBoolRecord . sid : retval = new WSBoolRecord ( in ) ; break ; case HeaderRecord . sid : retval = new HeaderRecord ( in ) ; break ; case FooterRecord . sid : retval = new FooterRecord ( in ) ; break ; case HCenterRecord . sid : retval = new HCenterRecord ( in ) ; break ; case VCenterRecord . sid : retval = new VCenterRecord ( in ) ; break ; case PrintSetupRecord . sid : retval = new PrintSetupRecord ( in ) ; break ; case DefaultColWidthRecord . sid : retval = new DefaultColWidthRecord ( in ) ; break ; case DimensionsRecord . sid : retval = new DimensionsRecord ( in ) ; break ; case RowRecord . sid : retval = new RowRecord ( in ) ; break ; case LabelSSTRecord . sid : retval = new LabelSSTRecord ( in ) ; break ; case RKRecord . sid : retval = new RKRecord ( in ) ; break ; case NumberRecord . sid : retval = new NumberRecord ( in ) ; break ; case DBCellRecord . sid : retval = new DBCellRecord ( in ) ; break ; case WindowTwoRecord . sid : retval = new WindowTwoRecord ( in ) ; break ; case SelectionRecord . sid : retval = new SelectionRecord ( in ) ; break ; case ContinueRecord . sid : retval = new ContinueRecord ( in ) ; break ; case LabelRecord . sid : retval = new LabelRecord ( in ) ; break ; case MulRKRecord . sid : retval = new MulRKRecord ( in ) ; break ; case MulBlankRecord . sid : retval = new MulBlankRecord ( in ) ; break ; case BlankRecord . sid : retval = new BlankRecord ( in ) ; break ; case BoolErrRecord . sid : retval = new BoolErrRecord ( in ) ; break ; case ColumnInfoRecord . sid : retval = new ColumnInfoRecord ( in ) ; break ; case MergeCellsRecord . sid : retval = new MergeCellsRecord ( in ) ; break ; case AreaRecord . sid : retval = new AreaRecord ( in ) ; break ; case DataFormatRecord . sid : retval = new DataFormatRecord ( in ) ; break ; case BarRecord . sid : retval = new BarRecord ( in ) ; break ; case DatRecord . sid : retval = new DatRecord ( in ) ; break ; case PlotGrowthRecord . sid : retval = new PlotGrowthRecord ( in ) ; break ; case UnitsRecord . sid : retval = new UnitsRecord ( in ) ; break ; case FrameRecord . sid : retval = new FrameRecord ( in ) ; break ; case ValueRangeRecord . sid : retval = new ValueRangeRecord ( in ) ; break ; case SeriesListRecord . sid : retval = new SeriesListRecord ( in ) ; break ; case FontBasisRecord . sid : retval = new FontBasisRecord ( in ) ; break ; case FontIndexRecord . sid : retval = new FontIndexRecord ( in ) ; break ; case LineFormatRecord . sid : retval = new LineFormatRecord ( in ) ; break ; case AreaFormatRecord . sid : retval = new AreaFormatRecord ( in ) ; break ; case LinkedDataRecord . sid : retval = new LinkedDataRecord ( in ) ; break ; case FormulaRecord . sid : retval = new FormulaRecord ( in ) ; break ; case SheetPropertiesRecord . sid : retval = new SheetPropertiesRecord ( in ) ; break ; case DefaultDataLabelTextPropertiesRecord . sid : retval = new DefaultDataLabelTextPropertiesRecord ( in ) ; break ; case TextRecord . sid : retval = new TextRecord ( in ) ; break ; case AxisParentRecord . sid : retval = new AxisParentRecord ( in ) ; break ; case AxisLineFormatRecord . sid : retval = new AxisLineFormatRecord ( in ) ; break ; case SupBookRecord . sid : retval = new SupBookRecord ( in ) ; break ; case ExternSheetRecord . sid : retval = new ExternSheetRecord ( in ) ; break ; case SCLRecord . sid : retval = new SCLRecord ( in ) ; break ; case SeriesToChartGroupRecord . sid : retval = new SeriesToChartGroupRecord ( in ) ; break ; case AxisUsedRecord . sid : retval = new AxisUsedRecord ( in ) ; break ; case AxisRecord . sid : retval = new AxisRecord ( in ) ; break ; case CategorySeriesAxisRecord . sid : retval = new CategorySeriesAxisRecord ( in ) ; break ; case AxisOptionsRecord . sid : retval = new AxisOptionsRecord ( in ) ; break ; case TickRecord . sid : retval = new TickRecord ( in ) ; break ; case SeriesTextRecord . sid : retval = new SeriesTextRecord ( in ) ; break ; case ObjectLinkRecord . sid : retval = new ObjectLinkRecord ( in ) ; break ; case PlotAreaRecord . sid : retval = new PlotAreaRecord ( in ) ; break ; case SeriesIndexRecord . sid : retval = new SeriesIndexRecord ( in ) ; break ; case LegendRecord . sid : retval = new LegendRecord ( in ) ; break ; case LeftMarginRecord . sid : retval = new LeftMarginRecord ( in ) ; break ; case RightMarginRecord . sid : retval = new RightMarginRecord ( in ) ; break ; case TopMarginRecord . sid : retval = new TopMarginRecord ( in ) ; break ; case BottomMarginRecord . sid : retval = new BottomMarginRecord ( in ) ; break ; case PaletteRecord . sid : retval = new PaletteRecord ( in ) ; break ; case StringRecord . sid : retval = new StringRecord ( in ) ; break ; case NameRecord . sid : retval = new NameRecord ( in ) ; break ; case PaneRecord . sid : retval = new PaneRecord ( in ) ; break ; case SharedFormulaRecord . sid : retval = new SharedFormulaRecord ( in ) ; break ; case ObjRecord . sid : retval = new ObjRecord ( in ) ; break ; case TextObjectRecord . sid : retval = new TextObjectRecord ( in ) ; break ; case HorizontalPageBreakRecord . sid : retval = new HorizontalPageBreakRecord ( in ) ; break ; case VerticalPageBreakRecord . sid : retval = new VerticalPageBreakRecord ( in ) ; break ; case WriteProtectRecord . sid : retval = new WriteProtectRecord ( in ) ; break ; case FilePassRecord . sid : retval = new FilePassRecord ( in ) ; break ; case NoteRecord . sid : retval = new NoteRecord ( in ) ; break ; default : retval = new UnknownRecord ( in ) ; } return retval ; } public void setDump ( boolean dump ) { this . dump = dump ; } public static void main ( String [ ] args ) { try { System . setProperty ( "poi.deserialize.escher" , "true" ) ; if ( args . length == 0 ) { System . out . println ( "Biff viewer needs a filename" ) ; } else { BiffViewer viewer = new BiffViewer ( args ) ; if ( ( args . length > 1 ) && args [ 1 ] . equals ( "on" ) ) { viewer . setDump ( true ) ; } if ( ( args . length > 1 ) && args [ 1 ] . equals ( "bfd" ) ) { POIFSFileSystem fs = new POIFSFileSystem ( new FileInputStream ( args [ 0 ] ) ) ; InputStream stream = fs . createDocumentInputStream ( "Workbook" ) ; int size = stream . available ( ) ; byte [ ] data = new byte [ size ] ; stream . read ( data ) ; HexDump . dump ( data , 0 , System . out , 0 ) ; } else { viewer . run ( ) ; } } } catch ( Exception e ) { e . printStackTrace ( ) ; } } static class RecordDetails { short rectype , recsize ; int startloc ; Record record ; public RecordDetails ( short rectype , short recsize , int startloc , Record record ) { this . rectype = rectype ; this . recsize = recsize ; this . startloc = startloc ; this . record = record ; } public short getRectype ( ) { return rectype ; } public short getRecsize ( ) { return recsize ; } public Record getRecord ( ) { return record ; } public void dump ( ) throws IOException { dumpNormal ( record , startloc , rectype , recsize ) ; } } static class BiffviewRecordInputStream extends RecordInputStream { public BiffviewRecordInputStream ( InputStream in ) { super ( in ) ; } public void dumpBytes ( ) { HexDump . dump ( this . data , 0 , this . currentLength ) ; } } } 	1
package org . apache . poi . hssf . record . formula ; import org . apache . poi . hssf . model . Workbook ; import org . apache . poi . hssf . record . RecordInputStream ; public class ConcatPtg extends OperationPtg { public final static int SIZE = 1 ; public final static byte sid = 0x08 ; private final static String CONCAT = "&" ; public ConcatPtg ( RecordInputStream in ) { } public ConcatPtg ( ) { } public void writeBytes ( byte [ ] array , int offset ) { array [ offset + 0 ] = sid ; } public int getSize ( ) { return SIZE ; } public int getType ( ) { return TYPE_BINARY ; } public int getNumberOfOperands ( ) { return 2 ; } public String toFormulaString ( Workbook book ) { return CONCAT ; } public String toFormulaString ( String [ ] operands ) { StringBuffer buffer = new StringBuffer ( ) ; buffer . append ( operands [ 0 ] ) ; buffer . append ( CONCAT ) ; buffer . append ( operands [ 1 ] ) ; return buffer . toString ( ) ; } public Object clone ( ) { return new ConcatPtg ( ) ; } } 	0
package org . apache . poi . hssf . record ; import org . apache . poi . util . * ; public class DataFormatRecord extends Record { public final static short sid = 0x1006 ; private short field_1_pointNumber ; private short field_2_seriesIndex ; private short field_3_seriesNumber ; private short field_4_formatFlags ; private BitField useExcel4Colors = BitFieldFactory . getInstance ( 0x1 ) ; public DataFormatRecord ( ) { } public DataFormatRecord ( RecordInputStream in ) { super ( in ) ; } protected void validateSid ( short id ) { if ( id != sid ) { throw new RecordFormatException ( "Not a DataFormat record" ) ; } } protected void fillFields ( RecordInputStream in ) { field_1_pointNumber = in . readShort ( ) ; field_2_seriesIndex = in . readShort ( ) ; field_3_seriesNumber = in . readShort ( ) ; field_4_formatFlags = in . readShort ( ) ; } public String toString ( ) { StringBuffer buffer = new StringBuffer ( ) ; buffer . append ( "[DATAFORMAT]\n" ) ; buffer . append ( "    .pointNumber          = " ) . append ( "0x" ) . append ( HexDump . toHex ( getPointNumber ( ) ) ) . append ( " (" ) . append ( getPointNumber ( ) ) . append ( " )" ) ; buffer . append ( System . getProperty ( "line.separator" ) ) ; buffer . append ( "    .seriesIndex          = " ) . append ( "0x" ) . append ( HexDump . toHex ( getSeriesIndex ( ) ) ) . append ( " (" ) . append ( getSeriesIndex ( ) ) . append ( " )" ) ; buffer . append ( System . getProperty ( "line.separator" ) ) ; buffer . append ( "    .seriesNumber         = " ) . append ( "0x" ) . append ( HexDump . toHex ( getSeriesNumber ( ) ) ) . append ( " (" ) . append ( getSeriesNumber ( ) ) . append ( " )" ) ; buffer . append ( System . getProperty ( "line.separator" ) ) ; buffer . append ( "    .formatFlags          = " ) . append ( "0x" ) . append ( HexDump . toHex ( getFormatFlags ( ) ) ) . append ( " (" ) . append ( getFormatFlags ( ) ) . append ( " )" ) ; buffer . append ( System . getProperty ( "line.separator" ) ) ; buffer . append ( "         .useExcel4Colors          = " ) . append ( isUseExcel4Colors ( ) ) . append ( '\n' ) ; buffer . append ( "[/DATAFORMAT]\n" ) ; return buffer . toString ( ) ; } public int serialize ( int offset , byte [ ] data ) { int pos = 0 ; LittleEndian . putShort ( data , 0 + offset , sid ) ; LittleEndian . putShort ( data , 2 + offset , ( short ) ( getRecordSize ( ) - 4 ) ) ; LittleEndian . putShort ( data , 4 + offset + pos , field_1_pointNumber ) ; LittleEndian . putShort ( data , 6 + offset + pos , field_2_seriesIndex ) ; LittleEndian . putShort ( data , 8 + offset + pos , field_3_seriesNumber ) ; LittleEndian . putShort ( data , 10 + offset + pos , field_4_formatFlags ) ; return getRecordSize ( ) ; } public int getRecordSize ( ) { return 4 + 2 + 2 + 2 + 2 ; } public short getSid ( ) { return sid ; } public Object clone ( ) { DataFormatRecord rec = new DataFormatRecord ( ) ; rec . field_1_pointNumber = field_1_pointNumber ; rec . field_2_seriesIndex = field_2_seriesIndex ; rec . field_3_seriesNumber = field_3_seriesNumber ; rec . field_4_formatFlags = field_4_formatFlags ; return rec ; } public short getPointNumber ( ) { return field_1_pointNumber ; } public void setPointNumber ( short field_1_pointNumber ) { this . field_1_pointNumber = field_1_pointNumber ; } public short getSeriesIndex ( ) { return field_2_seriesIndex ; } public void setSeriesIndex ( short field_2_seriesIndex ) { this . field_2_seriesIndex = field_2_seriesIndex ; } public short getSeriesNumber ( ) { return field_3_seriesNumber ; } public void setSeriesNumber ( short field_3_seriesNumber ) { this . field_3_seriesNumber = field_3_seriesNumber ; } public short getFormatFlags ( ) { return field_4_formatFlags ; } public void setFormatFlags ( short field_4_formatFlags ) { this . field_4_formatFlags = field_4_formatFlags ; } public void setUseExcel4Colors ( boolean value ) { field_4_formatFlags = useExcel4Colors . setShortBoolean ( field_4_formatFlags , value ) ; } public boolean isUseExcel4Colors ( ) { return useExcel4Colors . isSet ( field_4_formatFlags ) ; } } 	1
package org . apache . poi . poifs . storage ; import java . io . * ; import java . util . * ; public class RawDataBlockList extends BlockListImpl { public RawDataBlockList ( final InputStream stream ) throws IOException { List blocks = new ArrayList ( ) ; while ( true ) { RawDataBlock block = new RawDataBlock ( stream ) ; if ( block . eof ( ) ) { break ; } blocks . add ( block ) ; } setBlocks ( ( RawDataBlock [ ] ) blocks . toArray ( new RawDataBlock [ 0 ] ) ) ; } } 	0
package org . apache . poi . hssf . usermodel ; import org . apache . poi . hssf . model . FormulaParser ; import org . apache . poi . hssf . model . Sheet ; import org . apache . poi . hssf . model . Workbook ; import org . apache . poi . hssf . record . * ; import org . apache . poi . hssf . record . aggregates . FormulaRecordAggregate ; import org . apache . poi . hssf . record . formula . Ptg ; import java . text . DateFormat ; import java . text . SimpleDateFormat ; import java . util . * ; public class HSSFCell { public final static int CELL_TYPE_NUMERIC = 0 ; public final static int CELL_TYPE_STRING = 1 ; public final static int CELL_TYPE_FORMULA = 2 ; public final static int CELL_TYPE_BLANK = 3 ; public final static int CELL_TYPE_BOOLEAN = 4 ; public final static int CELL_TYPE_ERROR = 5 ; public final static short ENCODING_UNCHANGED = - 1 ; public final static short ENCODING_COMPRESSED_UNICODE = 0 ; public final static short ENCODING_UTF_16 = 1 ; private int cellType ; private HSSFRichTextString stringValue ; private short encoding = ENCODING_UNCHANGED ; private Workbook book ; private Sheet sheet ; private CellValueRecordInterface record ; private HSSFComment comment ; protected HSSFCell ( Workbook book , Sheet sheet , int row , short col ) { checkBounds ( col ) ; stringValue = null ; this . book = book ; this . sheet = sheet ; short xfindex = sheet . getXFIndexForColAt ( col ) ; setCellType ( CELL_TYPE_BLANK , false , row , col , xfindex ) ; } protected HSSFCell ( Workbook book , Sheet sheet , int row , short col , int type ) { checkBounds ( col ) ; cellType = - 1 ; stringValue = null ; this . book = book ; this . sheet = sheet ; short xfindex = sheet . getXFIndexForColAt ( col ) ; setCellType ( type , false , row , col , xfindex ) ; } protected HSSFCell ( Workbook book , Sheet sheet , int row , CellValueRecordInterface cval ) { record = cval ; cellType = determineType ( cval ) ; stringValue = null ; this . book = book ; this . sheet = sheet ; switch ( cellType ) { case CELL_TYPE_STRING : stringValue = new HSSFRichTextString ( book , ( LabelSSTRecord ) cval ) ; break ; case CELL_TYPE_BLANK : break ; case CELL_TYPE_FORMULA : stringValue = new HSSFRichTextString ( ( ( FormulaRecordAggregate ) cval ) . getStringValue ( ) ) ; break ; } ExtendedFormatRecord xf = book . getExFormatAt ( cval . getXFIndex ( ) ) ; setCellStyle ( new HSSFCellStyle ( ( short ) cval . getXFIndex ( ) , xf ) ) ; } private HSSFCell ( ) { } private int determineType ( CellValueRecordInterface cval ) { Record record = ( Record ) cval ; int sid = record . getSid ( ) ; int retval = 0 ; switch ( sid ) { case NumberRecord . sid : retval = HSSFCell . CELL_TYPE_NUMERIC ; break ; case BlankRecord . sid : retval = HSSFCell . CELL_TYPE_BLANK ; break ; case LabelSSTRecord . sid : retval = HSSFCell . CELL_TYPE_STRING ; break ; case FormulaRecordAggregate . sid : retval = HSSFCell . CELL_TYPE_FORMULA ; break ; case BoolErrRecord . sid : BoolErrRecord boolErrRecord = ( BoolErrRecord ) record ; retval = ( boolErrRecord . isBoolean ( ) ) ? HSSFCell . CELL_TYPE_BOOLEAN : HSSFCell . CELL_TYPE_ERROR ; break ; } return retval ; } public void setCellNum ( short num ) { record . setColumn ( num ) ; } public short getCellNum ( ) { return record . getColumn ( ) ; } public void setCellType ( int cellType ) { int row = record . getRow ( ) ; short col = record . getColumn ( ) ; short styleIndex = record . getXFIndex ( ) ; setCellType ( cellType , true , row , col , styleIndex ) ; } private void setCellType ( int cellType , boolean setValue , int row , short col , short styleIndex ) { if ( cellType > CELL_TYPE_ERROR ) { throw new RuntimeException ( "I have no idea what type that is!" ) ; } switch ( cellType ) { case CELL_TYPE_FORMULA : FormulaRecordAggregate frec = null ; if ( cellType != this . cellType ) { frec = new FormulaRecordAggregate ( new FormulaRecord ( ) , null ) ; } else { frec = ( FormulaRecordAggregate ) record ; } frec . setColumn ( col ) ; if ( setValue ) { frec . getFormulaRecord ( ) . setValue ( getNumericCellValue ( ) ) ; } frec . setXFIndex ( styleIndex ) ; frec . setRow ( row ) ; record = frec ; break ; case CELL_TYPE_NUMERIC : NumberRecord nrec = null ; if ( cellType != this . cellType ) { nrec = new NumberRecord ( ) ; } else { nrec = ( NumberRecord ) record ; } nrec . setColumn ( col ) ; if ( setValue ) { nrec . setValue ( getNumericCellValue ( ) ) ; } nrec . setXFIndex ( styleIndex ) ; nrec . setRow ( row ) ; record = nrec ; break ; case CELL_TYPE_STRING : LabelSSTRecord lrec = null ; if ( cellType != this . cellType ) { lrec = new LabelSSTRecord ( ) ; } else { lrec = ( LabelSSTRecord ) record ; } lrec . setColumn ( col ) ; lrec . setRow ( row ) ; lrec . setXFIndex ( styleIndex ) ; if ( setValue ) { if ( ( getStringCellValue ( ) != null ) && ( ! getStringCellValue ( ) . equals ( "" ) ) ) { int sst = 0 ; UnicodeString str = getRichStringCellValue ( ) . getUnicodeString ( ) ; sst = book . addSSTString ( str ) ; lrec . setSSTIndex ( sst ) ; getRichStringCellValue ( ) . setUnicodeString ( book . getSSTString ( sst ) ) ; } } record = lrec ; break ; case CELL_TYPE_BLANK : BlankRecord brec = null ; if ( cellType != this . cellType ) { brec = new BlankRecord ( ) ; } else { brec = ( BlankRecord ) record ; } brec . setColumn ( col ) ; brec . setXFIndex ( styleIndex ) ; brec . setRow ( row ) ; record = brec ; break ; case CELL_TYPE_BOOLEAN : BoolErrRecord boolRec = null ; if ( cellType != this . cellType ) { boolRec = new BoolErrRecord ( ) ; } else { boolRec = ( BoolErrRecord ) record ; } boolRec . setColumn ( col ) ; if ( setValue ) { boolRec . setValue ( getBooleanCellValue ( ) ) ; } boolRec . setXFIndex ( styleIndex ) ; boolRec . setRow ( row ) ; record = boolRec ; break ; case CELL_TYPE_ERROR : BoolErrRecord errRec = null ; if ( cellType != this . cellType ) { errRec = new BoolErrRecord ( ) ; } else { errRec = ( BoolErrRecord ) record ; } errRec . setColumn ( col ) ; if ( setValue ) { errRec . setValue ( getErrorCellValue ( ) ) ; } errRec . setXFIndex ( styleIndex ) ; errRec . setRow ( row ) ; record = errRec ; break ; } if ( cellType != this . cellType && this . cellType != - 1 ) { int loc = sheet . getLoc ( ) ; sheet . replaceValueRecord ( record ) ; sheet . setLoc ( loc ) ; } this . cellType = cellType ; } public int getCellType ( ) { return cellType ; } public void setCellValue ( double value ) { int row = record . getRow ( ) ; short col = record . getColumn ( ) ; short styleIndex = record . getXFIndex ( ) ; if ( ( cellType != CELL_TYPE_NUMERIC ) && ( cellType != CELL_TYPE_FORMULA ) ) { setCellType ( CELL_TYPE_NUMERIC , false , row , col , styleIndex ) ; } ( ( NumberRecord ) record ) . setValue ( value ) ; } public void setCellValue ( Date value ) { setCellValue ( HSSFDateUtil . getExcelDate ( value ) ) ; } public void setCellValue ( Calendar value ) { setCellValue ( value . getTime ( ) ) ; } public void setCellValue ( String value ) { HSSFRichTextString str = new HSSFRichTextString ( value ) ; setCellValue ( str ) ; } public void setCellValue ( HSSFRichTextString value ) { int row = record . getRow ( ) ; short col = record . getColumn ( ) ; short styleIndex = record . getXFIndex ( ) ; if ( value == null ) { setCellType ( CELL_TYPE_BLANK , false , row , col , styleIndex ) ; } else { if ( ( cellType != CELL_TYPE_STRING ) && ( cellType != CELL_TYPE_FORMULA ) ) { setCellType ( CELL_TYPE_STRING , false , row , col , styleIndex ) ; } int index = 0 ; UnicodeString str = value . getUnicodeString ( ) ; index = book . addSSTString ( str ) ; ( ( LabelSSTRecord ) record ) . setSSTIndex ( index ) ; stringValue = value ; stringValue . setWorkbookReferences ( book , ( ( LabelSSTRecord ) record ) ) ; stringValue . setUnicodeString ( book . getSSTString ( index ) ) ; } } public void setCellFormula ( String formula ) { int row = record . getRow ( ) ; short col = record . getColumn ( ) ; short styleIndex = record . getXFIndex ( ) ; if ( formula == null ) { setCellType ( CELL_TYPE_BLANK , false , row , col , styleIndex ) ; } else { setCellType ( CELL_TYPE_FORMULA , false , row , col , styleIndex ) ; FormulaRecordAggregate rec = ( FormulaRecordAggregate ) record ; FormulaRecord frec = rec . getFormulaRecord ( ) ; frec . setOptions ( ( short ) 2 ) ; frec . setValue ( 0 ) ; if ( rec . getXFIndex ( ) == ( short ) 0 ) rec . setXFIndex ( ( short ) 0x0f ) ; FormulaParser fp = new FormulaParser ( formula + ";" , book ) ; fp . parse ( ) ; Ptg [ ] ptg = fp . getRPNPtg ( ) ; int size = 0 ; for ( int i = 0 , iSize = frec . getNumberOfExpressionTokens ( ) ; i < iSize ; i ++ ) { frec . popExpressionToken ( ) ; } for ( int k = 0 ; k < ptg . length ; k ++ ) { size += ptg [ k ] . getSize ( ) ; frec . pushExpressionToken ( ptg [ k ] ) ; } rec . getFormulaRecord ( ) . setExpressionLength ( ( short ) size ) ; } } public String getCellFormula ( ) { String retval = FormulaParser . toFormulaString ( book , ( ( FormulaRecordAggregate ) record ) . getFormulaRecord ( ) . getParsedExpression ( ) ) ; return retval ; } public double getNumericCellValue ( ) { if ( cellType == CELL_TYPE_BLANK ) { return 0 ; } if ( cellType == CELL_TYPE_STRING ) { throw new NumberFormatException ( "You cannot get a numeric value from a String based cell" ) ; } if ( cellType == CELL_TYPE_BOOLEAN ) { throw new NumberFormatException ( "You cannot get a numeric value from a boolean cell" ) ; } if ( cellType == CELL_TYPE_ERROR ) { throw new NumberFormatException ( "You cannot get a numeric value from an error cell" ) ; } if ( cellType == CELL_TYPE_NUMERIC ) { return ( ( NumberRecord ) record ) . getValue ( ) ; } if ( cellType == CELL_TYPE_FORMULA ) { return ( ( FormulaRecordAggregate ) record ) . getFormulaRecord ( ) . getValue ( ) ; } throw new NumberFormatException ( "Unknown Record Type in Cell:" + cellType ) ; } public Date getDateCellValue ( ) { if ( cellType == CELL_TYPE_BLANK ) { return null ; } if ( cellType == CELL_TYPE_STRING ) { throw new NumberFormatException ( "You cannot get a date value from a String based cell" ) ; } if ( cellType == CELL_TYPE_BOOLEAN ) { throw new NumberFormatException ( "You cannot get a date value from a boolean cell" ) ; } if ( cellType == CELL_TYPE_ERROR ) { throw new NumberFormatException ( "You cannot get a date value from an error cell" ) ; } double value = this . getNumericCellValue ( ) ; if ( book . isUsing1904DateWindowing ( ) ) { return HSSFDateUtil . getJavaDate ( value , true ) ; } else { return HSSFDateUtil . getJavaDate ( value , false ) ; } } public String getStringCellValue ( ) { HSSFRichTextString str = getRichStringCellValue ( ) ; return str . getString ( ) ; } public HSSFRichTextString getRichStringCellValue ( ) { if ( cellType == CELL_TYPE_BLANK ) { return new HSSFRichTextString ( "" ) ; } if ( cellType == CELL_TYPE_NUMERIC ) { throw new NumberFormatException ( "You cannot get a string value from a numeric cell" ) ; } if ( cellType == CELL_TYPE_BOOLEAN ) { throw new NumberFormatException ( "You cannot get a string value from a boolean cell" ) ; } if ( cellType == CELL_TYPE_ERROR ) { throw new NumberFormatException ( "You cannot get a string value from an error cell" ) ; } if ( cellType == CELL_TYPE_FORMULA ) { if ( stringValue == null ) return new HSSFRichTextString ( "" ) ; } return stringValue ; } public void setCellValue ( boolean value ) { int row = record . getRow ( ) ; short col = record . getColumn ( ) ; short styleIndex = record . getXFIndex ( ) ; if ( ( cellType != CELL_TYPE_BOOLEAN ) && ( cellType != CELL_TYPE_FORMULA ) ) { setCellType ( CELL_TYPE_BOOLEAN , false , row , col , styleIndex ) ; } ( ( BoolErrRecord ) record ) . setValue ( value ) ; } public void setCellErrorValue ( byte value ) { int row = record . getRow ( ) ; short col = record . getColumn ( ) ; short styleIndex = record . getXFIndex ( ) ; if ( ( cellType != CELL_TYPE_ERROR ) && ( cellType != CELL_TYPE_FORMULA ) ) { setCellType ( CELL_TYPE_ERROR , false , row , col , styleIndex ) ; } ( ( BoolErrRecord ) record ) . setValue ( value ) ; } public boolean getBooleanCellValue ( ) { if ( cellType == CELL_TYPE_BOOLEAN ) { return ( ( BoolErrRecord ) record ) . getBooleanValue ( ) ; } if ( cellType == CELL_TYPE_BLANK ) { return false ; } throw new NumberFormatException ( "You cannot get a boolean value from a non-boolean cell" ) ; } public byte getErrorCellValue ( ) { if ( cellType == CELL_TYPE_ERROR ) { return ( ( BoolErrRecord ) record ) . getErrorValue ( ) ; } if ( cellType == CELL_TYPE_BLANK ) { return ( byte ) 0 ; } throw new NumberFormatException ( "You cannot get an error value from a non-error cell" ) ; } public void setCellStyle ( HSSFCellStyle style ) { record . setXFIndex ( style . getIndex ( ) ) ; } public HSSFCellStyle getCellStyle ( ) { short styleIndex = record . getXFIndex ( ) ; ExtendedFormatRecord xf = book . getExFormatAt ( styleIndex ) ; return new HSSFCellStyle ( styleIndex , xf ) ; } public short getEncoding ( ) { return encoding ; } public void setEncoding ( short encoding ) { this . encoding = encoding ; } protected CellValueRecordInterface getCellValueRecord ( ) { return record ; } private void checkBounds ( int cellNum ) { if ( cellNum > 255 ) { throw new RuntimeException ( "You cannot have more than 255 columns " + "in a given row (IV).  Because Excel can't handle it" ) ; } else if ( cellNum < 0 ) { throw new RuntimeException ( "You cannot reference columns with an index of less then 0." ) ; } } public void setAsActiveCell ( ) { int row = record . getRow ( ) ; short col = record . getColumn ( ) ; this . sheet . setActiveCellRow ( row ) ; this . sheet . setActiveCellCol ( col ) ; } public String toString ( ) { switch ( getCellType ( ) ) { case CELL_TYPE_BLANK : return "" ; case CELL_TYPE_BOOLEAN : return getBooleanCellValue ( ) ? "TRUE" : "FALSE" ; case CELL_TYPE_ERROR : return "#ERR" + getErrorCellValue ( ) ; case CELL_TYPE_FORMULA : return getCellFormula ( ) ; case CELL_TYPE_NUMERIC : if ( HSSFDateUtil . isCellDateFormatted ( this ) ) { DateFormat sdf = new SimpleDateFormat ( "dd-MMM-yyyy" ) ; return sdf . format ( getDateCellValue ( ) ) ; } else { return getNumericCellValue ( ) + "" ; } case CELL_TYPE_STRING : return getStringCellValue ( ) ; default : return "Unknown Cell Type: " + getCellType ( ) ; } } public void setCellComment ( HSSFComment comment ) { comment . setRow ( ( short ) record . getRow ( ) ) ; comment . setColumn ( record . getColumn ( ) ) ; this . comment = comment ; } public HSSFComment getCellComment ( ) { if ( comment == null ) { comment = findCellComment ( sheet , record . getRow ( ) , record . getColumn ( ) ) ; } return comment ; } protected static HSSFComment findCellComment ( Sheet sheet , int row , int column ) { HSSFComment comment = null ; HashMap txshapes = new HashMap ( ) ; for ( Iterator it = sheet . getRecords ( ) . iterator ( ) ; it . hasNext ( ) ; ) { Record rec = ( Record ) it . next ( ) ; if ( rec instanceof NoteRecord ) { NoteRecord note = ( NoteRecord ) rec ; if ( note . getRow ( ) == row && note . getColumn ( ) == column ) { TextObjectRecord txo = ( TextObjectRecord ) txshapes . get ( new Integer ( note . getShapeId ( ) ) ) ; comment = new HSSFComment ( note , txo ) ; comment . setRow ( note . getRow ( ) ) ; comment . setColumn ( note . getColumn ( ) ) ; comment . setAuthor ( note . getAuthor ( ) ) ; comment . setVisible ( note . getFlags ( ) == NoteRecord . NOTE_VISIBLE ) ; comment . setString ( txo . getStr ( ) ) ; break ; } } else if ( rec instanceof ObjRecord ) { ObjRecord obj = ( ObjRecord ) rec ; SubRecord sub = ( SubRecord ) obj . getSubRecords ( ) . get ( 0 ) ; if ( sub instanceof CommonObjectDataSubRecord ) { CommonObjectDataSubRecord cmo = ( CommonObjectDataSubRecord ) sub ; if ( cmo . getObjectType ( ) == CommonObjectDataSubRecord . OBJECT_TYPE_COMMENT ) { while ( it . hasNext ( ) ) { rec = ( Record ) it . next ( ) ; if ( rec instanceof TextObjectRecord ) { txshapes . put ( new Integer ( cmo . getObjectId ( ) ) , rec ) ; break ; } } } } } } return comment ; } } 	1
package org . apache . poi . hssf . eventmodel ; import java . io . InputStream ; import java . util . ArrayList ; import java . util . Iterator ; import java . util . List ; import org . apache . poi . hssf . model . Model ; import org . apache . poi . hssf . model . Sheet ; import org . apache . poi . hssf . model . Workbook ; import org . apache . poi . hssf . record . BOFRecord ; import org . apache . poi . hssf . record . EOFRecord ; import org . apache . poi . hssf . record . Record ; public class ModelFactory implements ERFListener { List listeners ; Model currentmodel ; boolean lastEOF ; public ModelFactory ( ) { super ( ) ; listeners = new ArrayList ( 1 ) ; } public void registerListener ( ModelFactoryListener listener ) { listeners . add ( listener ) ; } public void run ( InputStream stream ) { EventRecordFactory factory = new EventRecordFactory ( true ) ; factory . registerListener ( this , null ) ; lastEOF = true ; factory . processRecords ( stream ) ; } public boolean processRecord ( Record rec ) { if ( rec . getSid ( ) == BOFRecord . sid ) { if ( lastEOF != true ) { throw new RuntimeException ( "Not yet handled embedded models" ) ; } else { BOFRecord bof = ( BOFRecord ) rec ; switch ( bof . getType ( ) ) { case BOFRecord . TYPE_WORKBOOK : currentmodel = new Workbook ( ) ; break ; case BOFRecord . TYPE_WORKSHEET : currentmodel = new Sheet ( ) ; break ; default : throw new RuntimeException ( "Unsupported model type " + bof . getType ( ) ) ; } } } if ( rec . getSid ( ) == EOFRecord . sid ) { lastEOF = true ; throwEvent ( currentmodel ) ; } else { lastEOF = false ; } return true ; } private void throwEvent ( Model model ) { Iterator i = listeners . iterator ( ) ; while ( i . hasNext ( ) ) { ModelFactoryListener mfl = ( ModelFactoryListener ) i . next ( ) ; mfl . process ( model ) ; } } } 	1
package org . apache . poi . poifs . storage ; import java . io . IOException ; import java . io . OutputStream ; import java . util . * ; import org . apache . poi . poifs . common . POIFSConstants ; import org . apache . poi . poifs . filesystem . BATManaged ; import org . apache . poi . util . IntList ; import org . apache . poi . util . LittleEndian ; import org . apache . poi . util . LittleEndianConsts ; public class BlockAllocationTableWriter implements BlockWritable , BATManaged { private IntList _entries ; private BATBlock [ ] _blocks ; private int _start_block ; public BlockAllocationTableWriter ( ) { _start_block = POIFSConstants . END_OF_CHAIN ; _entries = new IntList ( ) ; _blocks = new BATBlock [ 0 ] ; } public int createBlocks ( ) { int xbat_blocks = 0 ; int bat_blocks = 0 ; while ( true ) { int calculated_bat_blocks = BATBlock . calculateStorageRequirements ( bat_blocks + xbat_blocks + _entries . size ( ) ) ; int calculated_xbat_blocks = HeaderBlockWriter . calculateXBATStorageRequirements ( calculated_bat_blocks ) ; if ( ( bat_blocks == calculated_bat_blocks ) && ( xbat_blocks == calculated_xbat_blocks ) ) { break ; } else { bat_blocks = calculated_bat_blocks ; xbat_blocks = calculated_xbat_blocks ; } } int startBlock = allocateSpace ( bat_blocks ) ; allocateSpace ( xbat_blocks ) ; simpleCreateBlocks ( ) ; return startBlock ; } public int allocateSpace ( final int blockCount ) { int startBlock = _entries . size ( ) ; if ( blockCount > 0 ) { int limit = blockCount - 1 ; int index = startBlock + 1 ; for ( int k = 0 ; k < limit ; k ++ ) { _entries . add ( index ++ ) ; } _entries . add ( POIFSConstants . END_OF_CHAIN ) ; } return startBlock ; } public int getStartBlock ( ) { return _start_block ; } void simpleCreateBlocks ( ) { _blocks = BATBlock . createBATBlocks ( _entries . toArray ( ) ) ; } public void writeBlocks ( final OutputStream stream ) throws IOException { for ( int j = 0 ; j < _blocks . length ; j ++ ) { _blocks [ j ] . writeBlocks ( stream ) ; } } public int countBlocks ( ) { return _blocks . length ; } public void setStartBlock ( int start_block ) { _start_block = start_block ; } } 	1
package org . apache . poi . hssf . util ; public class RangeAddress { final static int WRONG_POS = - 1 ; final static int MAX_HEIGHT = 66666 ; final static char SO_FORMNAME_ENCLOSURE = '\'' ; String m_sheetName ; String m_cellFrom ; String m_cellTo ; public RangeAddress ( String _url ) { init ( _url ) ; } public RangeAddress ( int _startCol , int _startRow , int _endCol , int _endRow ) { init ( numTo26Sys ( _startCol ) + _startRow + ":" + numTo26Sys ( _endCol ) + _endRow ) ; } public String getAddress ( ) { String result = "" ; if ( m_sheetName != null ) result += m_sheetName + "!" ; if ( m_cellFrom != null ) { result += m_cellFrom ; if ( m_cellTo != null ) result += ":" + m_cellTo ; } return result ; } public String getSheetName ( ) { return m_sheetName ; } public String getRange ( ) { String result = "" ; if ( m_cellFrom != null ) { result += m_cellFrom ; if ( m_cellTo != null ) result += ":" + m_cellTo ; } return result ; } public boolean isCellOk ( String _cell ) { if ( _cell != null ) { if ( ( getYPosition ( _cell ) != WRONG_POS ) && ( getXPosition ( _cell ) != WRONG_POS ) ) return true ; else return false ; } else return false ; } public boolean isSheetNameOk ( ) { return isSheetNameOk ( m_sheetName ) ; } private static boolean intern_isSheetNameOk ( String _sheetName , boolean _canBeWaitSpace ) { for ( int i = 0 ; i < _sheetName . length ( ) ; i ++ ) { char ch = _sheetName . charAt ( i ) ; if ( ! ( Character . isLetterOrDigit ( ch ) || ( ch == '_' ) || _canBeWaitSpace && ( ch == ' ' ) ) ) { return false ; } } return true ; } public static boolean isSheetNameOk ( String _sheetName ) { boolean res = false ; if ( ( _sheetName != null ) && ! _sheetName . equals ( "" ) ) { res = intern_isSheetNameOk ( _sheetName , true ) ; } else res = true ; return res ; } public String getFromCell ( ) { return m_cellFrom ; } public String getToCell ( ) { return m_cellTo ; } public int getWidth ( ) { if ( m_cellFrom != null && m_cellTo != null ) { int toX = getXPosition ( m_cellTo ) ; int fromX = getXPosition ( m_cellFrom ) ; if ( ( toX == WRONG_POS ) || ( fromX == WRONG_POS ) ) { return 0 ; } else return toX - fromX + 1 ; } return 0 ; } public int getHeight ( ) { if ( m_cellFrom != null && m_cellTo != null ) { int toY = getYPosition ( m_cellTo ) ; int fromY = getYPosition ( m_cellFrom ) ; if ( ( toY == WRONG_POS ) || ( fromY == WRONG_POS ) ) { return 0 ; } else return toY - fromY + 1 ; } return 0 ; } public void setSize ( int _width , int _height ) { if ( m_cellFrom == null ) m_cellFrom = "a1" ; int tlX , tlY , rbX , rbY ; tlX = getXPosition ( m_cellFrom ) ; tlY = getYPosition ( m_cellFrom ) ; m_cellTo = numTo26Sys ( tlX + _width - 1 ) ; m_cellTo += String . valueOf ( tlY + _height - 1 ) ; } public boolean hasSheetName ( ) { if ( m_sheetName == null ) return false ; return true ; } public boolean hasRange ( ) { return ( m_cellFrom != null && m_cellTo != null && ! m_cellFrom . equals ( m_cellTo ) ) ; } public boolean hasCell ( ) { if ( m_cellFrom == null ) return false ; return true ; } private void init ( String _url ) { _url = removeString ( _url , "$" ) ; _url = removeString ( _url , "'" ) ; String [ ] urls = parseURL ( _url ) ; m_sheetName = urls [ 0 ] ; m_cellFrom = urls [ 1 ] ; m_cellTo = urls [ 2 ] ; if ( m_cellTo == null ) { m_cellTo = m_cellFrom ; } m_cellTo = removeString ( m_cellTo , "." ) ; } private String [ ] parseURL ( String _url ) { String [ ] result = new String [ 3 ] ; int index = _url . indexOf ( ':' ) ; if ( index >= 0 ) { String fromStr = _url . substring ( 0 , index ) ; String toStr = _url . substring ( index + 1 ) ; index = fromStr . indexOf ( '!' ) ; if ( index >= 0 ) { result [ 0 ] = fromStr . substring ( 0 , index ) ; result [ 1 ] = fromStr . substring ( index + 1 ) ; } else { result [ 1 ] = fromStr ; } index = toStr . indexOf ( '!' ) ; if ( index >= 0 ) { result [ 2 ] = toStr . substring ( index + 1 ) ; } else { result [ 2 ] = toStr ; } } else { index = _url . indexOf ( '!' ) ; if ( index >= 0 ) { result [ 0 ] = _url . substring ( 0 , index ) ; result [ 1 ] = _url . substring ( index + 1 ) ; } else { result [ 1 ] = _url ; } } return result ; } public int getYPosition ( String _subrange ) { int result = WRONG_POS ; _subrange = _subrange . trim ( ) ; if ( _subrange . length ( ) != 0 ) { String digitstr = getDigitPart ( _subrange ) ; try { result = Integer . parseInt ( digitstr ) ; if ( result > MAX_HEIGHT ) { result = WRONG_POS ; } } catch ( Exception ex ) { result = WRONG_POS ; } } return result ; } private static boolean isLetter ( String _str ) { boolean res = true ; if ( ! _str . equals ( "" ) ) { for ( int i = 0 ; i < _str . length ( ) ; i ++ ) { char ch = _str . charAt ( i ) ; if ( ! Character . isLetter ( ch ) ) { res = false ; break ; } } } else res = false ; return res ; } public int getXPosition ( String _subrange ) { int result = WRONG_POS ; String tmp = filter$ ( _subrange ) ; tmp = this . getCharPart ( _subrange ) ; if ( isLetter ( tmp ) && ( ( tmp . length ( ) == 2 ) || ( tmp . length ( ) == 1 ) ) ) { result = get26Sys ( tmp ) ; } return result ; } public String getDigitPart ( String _value ) { String result = "" ; int digitpos = getFirstDigitPosition ( _value ) ; if ( digitpos >= 0 ) { result = _value . substring ( digitpos ) ; } return result ; } public String getCharPart ( String _value ) { String result = "" ; int digitpos = getFirstDigitPosition ( _value ) ; if ( digitpos >= 0 ) { result = _value . substring ( 0 , digitpos ) ; } return result ; } private String filter$ ( String _range ) { String res = "" ; for ( int i = 0 ; i < _range . length ( ) ; i ++ ) { char ch = _range . charAt ( i ) ; if ( ch != '$' ) { res = res + ch ; } } return res ; } private int getFirstDigitPosition ( String _value ) { int result = WRONG_POS ; if ( _value != null && _value . trim ( ) . length ( ) == 0 ) { return result ; } _value = _value . trim ( ) ; int length = _value . length ( ) ; for ( int i = 0 ; i < length ; i ++ ) { if ( Character . isDigit ( _value . charAt ( i ) ) ) { result = i ; break ; } } return result ; } public int get26Sys ( String _s ) { int sum = 0 ; int multiplier = 1 ; if ( _s != "" ) { for ( int i = _s . length ( ) - 1 ; i >= 0 ; i -- ) { char ch = _s . charAt ( i ) ; int val = Character . getNumericValue ( ch ) - Character . getNumericValue ( 'A' ) + 1 ; sum = sum + val * multiplier ; multiplier = multiplier * 26 ; } return sum ; } return WRONG_POS ; } public String numTo26Sys ( int _num ) { int sum = 0 ; int reminder ; String s = "" ; do { _num -- ; reminder = _num % 26 ; int val = 65 + reminder ; _num = _num / 26 ; s = ( char ) val + s ; } while ( _num > 0 ) ; return s ; } public String replaceString ( String _source , String _oldPattern , String _newPattern ) { StringBuffer res = new StringBuffer ( _source ) ; int pos = - 1 ; while ( ( pos = res . toString ( ) . indexOf ( _oldPattern , pos ) ) > - 1 ) { res . replace ( pos , pos + _oldPattern . length ( ) , _newPattern ) ; } return res . toString ( ) ; } public String removeString ( String _source , String _match ) { return replaceString ( _source , _match , "" ) ; } } 	1
package org . apache . poi . poifs . dev ; import java . io . * ; import java . util . * ; import org . apache . poi . poifs . filesystem . POIFSFileSystem ; public class POIFSViewer { public static void main ( final String args [ ] ) { if ( args . length < 0 ) { System . err . println ( "Must specify at least one file to view" ) ; System . exit ( 1 ) ; } boolean printNames = ( args . length > 1 ) ; for ( int j = 0 ; j < args . length ; j ++ ) { viewFile ( args [ j ] , printNames ) ; } } private static void viewFile ( final String filename , final boolean printName ) { if ( printName ) { StringBuffer flowerbox = new StringBuffer ( ) ; flowerbox . append ( "." ) ; for ( int j = 0 ; j < filename . length ( ) ; j ++ ) { flowerbox . append ( "-" ) ; } flowerbox . append ( "." ) ; System . out . println ( flowerbox ) ; System . out . println ( "|" + filename + "|" ) ; System . out . println ( flowerbox ) ; } try { POIFSViewable fs = new POIFSFileSystem ( new FileInputStream ( filename ) ) ; List strings = POIFSViewEngine . inspectViewable ( fs , true , 0 , "  " ) ; Iterator iter = strings . iterator ( ) ; while ( iter . hasNext ( ) ) { System . out . print ( iter . next ( ) ) ; } } catch ( IOException e ) { System . out . println ( e . getMessage ( ) ) ; } } } 	0
package org . apache . poi . util ; import java . io . UnsupportedEncodingException ; import java . text . FieldPosition ; import java . text . NumberFormat ; public class StringUtil { private final static String ENCODING = "ISO-8859-1" ; private StringUtil ( ) { } public static String getFromUnicodeLE ( final byte [ ] string , final int offset , final int len ) throws ArrayIndexOutOfBoundsException , IllegalArgumentException { if ( ( offset < 0 ) || ( offset >= string . length ) ) { throw new ArrayIndexOutOfBoundsException ( "Illegal offset" ) ; } if ( ( len < 0 ) || ( ( ( string . length - offset ) / 2 ) < len ) ) { throw new IllegalArgumentException ( "Illegal length" ) ; } try { return new String ( string , offset , len * 2 , "UTF-16LE" ) ; } catch ( UnsupportedEncodingException e ) { throw new InternalError ( ) ; } } public static String getFromUnicodeLE ( final byte [ ] string ) { if ( string . length == 0 ) { return "" ; } return getFromUnicodeLE ( string , 0 , string . length / 2 ) ; } public static String getFromUnicodeBE ( final byte [ ] string , final int offset , final int len ) throws ArrayIndexOutOfBoundsException , IllegalArgumentException { if ( ( offset < 0 ) || ( offset >= string . length ) ) { throw new ArrayIndexOutOfBoundsException ( "Illegal offset" ) ; } if ( ( len < 0 ) || ( ( ( string . length - offset ) / 2 ) < len ) ) { throw new IllegalArgumentException ( "Illegal length" ) ; } try { return new String ( string , offset , len * 2 , "UTF-16BE" ) ; } catch ( UnsupportedEncodingException e ) { throw new InternalError ( ) ; } } public static String getFromUnicodeBE ( final byte [ ] string ) { if ( string . length == 0 ) { return "" ; } return getFromUnicodeBE ( string , 0 , string . length / 2 ) ; } public static String getFromCompressedUnicode ( final byte [ ] string , final int offset , final int len ) { try { return new String ( string , offset , len , "ISO-8859-1" ) ; } catch ( UnsupportedEncodingException e ) { throw new InternalError ( ) ; } } public static void putCompressedUnicode ( final String input , final byte [ ] output , final int offset ) { try { byte [ ] bytes = input . getBytes ( "ISO-8859-1" ) ; System . arraycopy ( bytes , 0 , output , offset , bytes . length ) ; } catch ( UnsupportedEncodingException e ) { throw new InternalError ( ) ; } } public static void putUnicodeLE ( final String input , final byte [ ] output , final int offset ) { try { byte [ ] bytes = input . getBytes ( "UTF-16LE" ) ; System . arraycopy ( bytes , 0 , output , offset , bytes . length ) ; } catch ( UnsupportedEncodingException e ) { throw new InternalError ( ) ; } } public static void putUnicodeBE ( final String input , final byte [ ] output , final int offset ) { try { byte [ ] bytes = input . getBytes ( "UTF-16BE" ) ; System . arraycopy ( bytes , 0 , output , offset , bytes . length ) ; } catch ( UnsupportedEncodingException e ) { throw new InternalError ( ) ; } } public static String format ( String message , Object [ ] params ) { int currentParamNumber = 0 ; StringBuffer formattedMessage = new StringBuffer ( ) ; for ( int i = 0 ; i < message . length ( ) ; i ++ ) { if ( message . charAt ( i ) == '%' ) { if ( currentParamNumber >= params . length ) { formattedMessage . append ( "?missing data?" ) ; } else if ( ( params [ currentParamNumber ] instanceof Number ) && ( i + 1 < message . length ( ) ) ) { i += matchOptionalFormatting ( ( Number ) params [ currentParamNumber ++ ] , message . substring ( i + 1 ) , formattedMessage ) ; } else { formattedMessage . append ( params [ currentParamNumber ++ ] . toString ( ) ) ; } } else { if ( ( message . charAt ( i ) == '\\' ) && ( i + 1 < message . length ( ) ) && ( message . charAt ( i + 1 ) == '%' ) ) { formattedMessage . append ( '%' ) ; i ++ ; } else { formattedMessage . append ( message . charAt ( i ) ) ; } } } return formattedMessage . toString ( ) ; } private static int matchOptionalFormatting ( Number number , String formatting , StringBuffer outputTo ) { NumberFormat numberFormat = NumberFormat . getInstance ( ) ; if ( ( 0 < formatting . length ( ) ) && Character . isDigit ( formatting . charAt ( 0 ) ) ) { numberFormat . setMinimumIntegerDigits ( Integer . parseInt ( formatting . charAt ( 0 ) + "" ) ) ; if ( ( 2 < formatting . length ( ) ) && ( formatting . charAt ( 1 ) == '.' ) && Character . isDigit ( formatting . charAt ( 2 ) ) ) { numberFormat . setMaximumFractionDigits ( Integer . parseInt ( formatting . charAt ( 2 ) + "" ) ) ; numberFormat . format ( number , outputTo , new FieldPosition ( 0 ) ) ; return 3 ; } numberFormat . format ( number , outputTo , new FieldPosition ( 0 ) ) ; return 1 ; } else if ( ( 0 < formatting . length ( ) ) && ( formatting . charAt ( 0 ) == '.' ) ) { if ( ( 1 < formatting . length ( ) ) && Character . isDigit ( formatting . charAt ( 1 ) ) ) { numberFormat . setMaximumFractionDigits ( Integer . parseInt ( formatting . charAt ( 1 ) + "" ) ) ; numberFormat . format ( number , outputTo , new FieldPosition ( 0 ) ) ; return 2 ; } } numberFormat . format ( number , outputTo , new FieldPosition ( 0 ) ) ; return 1 ; } public static String getPreferredEncoding ( ) { return ENCODING ; } public static boolean hasMultibyte ( String value ) { if ( value == null ) return false ; for ( int i = 0 ; i < value . length ( ) ; i ++ ) { char c = value . charAt ( i ) ; if ( c > 0xFF ) return true ; } return false ; } public static boolean isUnicodeString ( final String value ) { try { return ! value . equals ( new String ( value . getBytes ( "ISO-8859-1" ) , "ISO-8859-1" ) ) ; } catch ( UnsupportedEncodingException e ) { return true ; } } } 	1
package org . apache . poi . hssf . record ; import org . apache . poi . util . * ; public class LineFormatRecord extends Record { public final static short sid = 0x1007 ; private int field_1_lineColor ; private short field_2_linePattern ; public final static short LINE_PATTERN_SOLID = 0 ; public final static short LINE_PATTERN_DASH = 1 ; public final static short LINE_PATTERN_DOT = 2 ; public final static short LINE_PATTERN_DASH_DOT = 3 ; public final static short LINE_PATTERN_DASH_DOT_DOT = 4 ; public final static short LINE_PATTERN_NONE = 5 ; public final static short LINE_PATTERN_DARK_GRAY_PATTERN = 6 ; public final static short LINE_PATTERN_MEDIUM_GRAY_PATTERN = 7 ; public final static short LINE_PATTERN_LIGHT_GRAY_PATTERN = 8 ; private short field_3_weight ; public final static short WEIGHT_HAIRLINE = - 1 ; public final static short WEIGHT_NARROW = 0 ; public final static short WEIGHT_MEDIUM = 1 ; public final static short WEIGHT_WIDE = 2 ; private short field_4_format ; private BitField auto = BitFieldFactory . getInstance ( 0x1 ) ; private BitField drawTicks = BitFieldFactory . getInstance ( 0x4 ) ; private BitField unknown = BitFieldFactory . getInstance ( 0x4 ) ; private short field_5_colourPaletteIndex ; public LineFormatRecord ( ) { } public LineFormatRecord ( RecordInputStream in ) { super ( in ) ; } protected void validateSid ( short id ) { if ( id != sid ) { throw new RecordFormatException ( "Not a LineFormat record" ) ; } } protected void fillFields ( RecordInputStream in ) { field_1_lineColor = in . readInt ( ) ; field_2_linePattern = in . readShort ( ) ; field_3_weight = in . readShort ( ) ; field_4_format = in . readShort ( ) ; field_5_colourPaletteIndex = in . readShort ( ) ; } public String toString ( ) { StringBuffer buffer = new StringBuffer ( ) ; buffer . append ( "[LINEFORMAT]\n" ) ; buffer . append ( "    .lineColor            = " ) . append ( "0x" ) . append ( HexDump . toHex ( getLineColor ( ) ) ) . append ( " (" ) . append ( getLineColor ( ) ) . append ( " )" ) ; buffer . append ( System . getProperty ( "line.separator" ) ) ; buffer . append ( "    .linePattern          = " ) . append ( "0x" ) . append ( HexDump . toHex ( getLinePattern ( ) ) ) . append ( " (" ) . append ( getLinePattern ( ) ) . append ( " )" ) ; buffer . append ( System . getProperty ( "line.separator" ) ) ; buffer . append ( "    .weight               = " ) . append ( "0x" ) . append ( HexDump . toHex ( getWeight ( ) ) ) . append ( " (" ) . append ( getWeight ( ) ) . append ( " )" ) ; buffer . append ( System . getProperty ( "line.separator" ) ) ; buffer . append ( "    .format               = " ) . append ( "0x" ) . append ( HexDump . toHex ( getFormat ( ) ) ) . append ( " (" ) . append ( getFormat ( ) ) . append ( " )" ) ; buffer . append ( System . getProperty ( "line.separator" ) ) ; buffer . append ( "         .auto                     = " ) . append ( isAuto ( ) ) . append ( '\n' ) ; buffer . append ( "         .drawTicks                = " ) . append ( isDrawTicks ( ) ) . append ( '\n' ) ; buffer . append ( "         .unknown                  = " ) . append ( isUnknown ( ) ) . append ( '\n' ) ; buffer . append ( "    .colourPaletteIndex   = " ) . append ( "0x" ) . append ( HexDump . toHex ( getColourPaletteIndex ( ) ) ) . append ( " (" ) . append ( getColourPaletteIndex ( ) ) . append ( " )" ) ; buffer . append ( System . getProperty ( "line.separator" ) ) ; buffer . append ( "[/LINEFORMAT]\n" ) ; return buffer . toString ( ) ; } public int serialize ( int offset , byte [ ] data ) { int pos = 0 ; LittleEndian . putShort ( data , 0 + offset , sid ) ; LittleEndian . putShort ( data , 2 + offset , ( short ) ( getRecordSize ( ) - 4 ) ) ; LittleEndian . putInt ( data , 4 + offset + pos , field_1_lineColor ) ; LittleEndian . putShort ( data , 8 + offset + pos , field_2_linePattern ) ; LittleEndian . putShort ( data , 10 + offset + pos , field_3_weight ) ; LittleEndian . putShort ( data , 12 + offset + pos , field_4_format ) ; LittleEndian . putShort ( data , 14 + offset + pos , field_5_colourPaletteIndex ) ; return getRecordSize ( ) ; } public int getRecordSize ( ) { return 4 + 4 + 2 + 2 + 2 + 2 ; } public short getSid ( ) { return sid ; } public Object clone ( ) { LineFormatRecord rec = new LineFormatRecord ( ) ; rec . field_1_lineColor = field_1_lineColor ; rec . field_2_linePattern = field_2_linePattern ; rec . field_3_weight = field_3_weight ; rec . field_4_format = field_4_format ; rec . field_5_colourPaletteIndex = field_5_colourPaletteIndex ; return rec ; } public int getLineColor ( ) { return field_1_lineColor ; } public void setLineColor ( int field_1_lineColor ) { this . field_1_lineColor = field_1_lineColor ; } public short getLinePattern ( ) { return field_2_linePattern ; } public void setLinePattern ( short field_2_linePattern ) { this . field_2_linePattern = field_2_linePattern ; } public short getWeight ( ) { return field_3_weight ; } public void setWeight ( short field_3_weight ) { this . field_3_weight = field_3_weight ; } public short getFormat ( ) { return field_4_format ; } public void setFormat ( short field_4_format ) { this . field_4_format = field_4_format ; } public short getColourPaletteIndex ( ) { return field_5_colourPaletteIndex ; } public void setColourPaletteIndex ( short field_5_colourPaletteIndex ) { this . field_5_colourPaletteIndex = field_5_colourPaletteIndex ; } public void setAuto ( boolean value ) { field_4_format = auto . setShortBoolean ( field_4_format , value ) ; } public boolean isAuto ( ) { return auto . isSet ( field_4_format ) ; } public void setDrawTicks ( boolean value ) { field_4_format = drawTicks . setShortBoolean ( field_4_format , value ) ; } public boolean isDrawTicks ( ) { return drawTicks . isSet ( field_4_format ) ; } public void setUnknown ( boolean value ) { field_4_format = unknown . setShortBoolean ( field_4_format , value ) ; } public boolean isUnknown ( ) { return unknown . isSet ( field_4_format ) ; } } 	1
package org . apache . poi . hssf . record ; import org . apache . poi . util . LittleEndian ; public class BlankRecord extends Record implements CellValueRecordInterface , Comparable { public final static short sid = 0x201 ; private int field_1_row ; private short field_2_col ; private short field_3_xf ; public BlankRecord ( ) { } public BlankRecord ( RecordInputStream in ) { super ( in ) ; } protected void fillFields ( RecordInputStream in ) { field_1_row = in . readUShort ( ) ; field_2_col = in . readShort ( ) ; field_3_xf = in . readShort ( ) ; } protected void validateSid ( short id ) { if ( id != sid ) { throw new RecordFormatException ( "NOT A BLANKRECORD!" ) ; } } public void setRow ( int row ) { field_1_row = row ; } public int getRow ( ) { return field_1_row ; } public short getColumn ( ) { return field_2_col ; } public void setXFIndex ( short xf ) { field_3_xf = xf ; } public short getXFIndex ( ) { return field_3_xf ; } public void setColumn ( short col ) { field_2_col = col ; } public boolean isBefore ( CellValueRecordInterface i ) { if ( this . getRow ( ) > i . getRow ( ) ) { return false ; } if ( ( this . getRow ( ) == i . getRow ( ) ) && ( this . getColumn ( ) > i . getColumn ( ) ) ) { return false ; } if ( ( this . getRow ( ) == i . getRow ( ) ) && ( this . getColumn ( ) == i . getColumn ( ) ) ) { return false ; } return true ; } public boolean isAfter ( CellValueRecordInterface i ) { if ( this . getRow ( ) < i . getRow ( ) ) { return false ; } if ( ( this . getRow ( ) == i . getRow ( ) ) && ( this . getColumn ( ) < i . getColumn ( ) ) ) { return false ; } if ( ( this . getRow ( ) == i . getRow ( ) ) && ( this . getColumn ( ) == i . getColumn ( ) ) ) { return false ; } return true ; } public boolean isEqual ( CellValueRecordInterface i ) { return ( ( this . getRow ( ) == i . getRow ( ) ) && ( this . getColumn ( ) == i . getColumn ( ) ) ) ; } public boolean isInValueSection ( ) { return true ; } public boolean isValue ( ) { return true ; } public short getSid ( ) { return sid ; } public String toString ( ) { StringBuffer buffer = new StringBuffer ( ) ; buffer . append ( "[BLANK]\n" ) ; buffer . append ( "row       = " ) . append ( Integer . toHexString ( getRow ( ) ) ) . append ( "\n" ) ; buffer . append ( "col       = " ) . append ( Integer . toHexString ( getColumn ( ) ) ) . append ( "\n" ) ; buffer . append ( "xf        = " ) . append ( Integer . toHexString ( getXFIndex ( ) ) ) . append ( "\n" ) ; buffer . append ( "[/BLANK]\n" ) ; return buffer . toString ( ) ; } public int serialize ( int offset , byte [ ] data ) { LittleEndian . putShort ( data , 0 + offset , sid ) ; LittleEndian . putShort ( data , 2 + offset , ( short ) 6 ) ; LittleEndian . putShort ( data , 4 + offset , ( short ) getRow ( ) ) ; LittleEndian . putShort ( data , 6 + offset , getColumn ( ) ) ; LittleEndian . putShort ( data , 8 + offset , getXFIndex ( ) ) ; return getRecordSize ( ) ; } public int getRecordSize ( ) { return 10 ; } public int compareTo ( Object obj ) { CellValueRecordInterface loc = ( CellValueRecordInterface ) obj ; if ( ( this . getRow ( ) == loc . getRow ( ) ) && ( this . getColumn ( ) == loc . getColumn ( ) ) ) { return 0 ; } if ( this . getRow ( ) < loc . getRow ( ) ) { return - 1 ; } if ( this . getRow ( ) > loc . getRow ( ) ) { return 1 ; } if ( this . getColumn ( ) < loc . getColumn ( ) ) { return - 1 ; } if ( this . getColumn ( ) > loc . getColumn ( ) ) { return 1 ; } return - 1 ; } public boolean equals ( Object obj ) { if ( ! ( obj instanceof CellValueRecordInterface ) ) { return false ; } CellValueRecordInterface loc = ( CellValueRecordInterface ) obj ; if ( ( this . getRow ( ) == loc . getRow ( ) ) && ( this . getColumn ( ) == loc . getColumn ( ) ) ) { return true ; } return false ; } public Object clone ( ) { BlankRecord rec = new BlankRecord ( ) ; rec . field_1_row = field_1_row ; rec . field_2_col = field_2_col ; rec . field_3_xf = field_3_xf ; return rec ; } } 	1
package org . apache . poi . hssf . record ; public class DrawingRecordForBiffViewer extends AbstractEscherHolderRecord { public static final short sid = 0xEC ; public DrawingRecordForBiffViewer ( ) { } public DrawingRecordForBiffViewer ( RecordInputStream in ) { super ( in ) ; } protected String getRecordName ( ) { return "MSODRAWING" ; } public short getSid ( ) { return sid ; } } 	0
package org . apache . poi . ddf ; import org . apache . poi . util . HexDump ; import org . apache . poi . util . LittleEndian ; public class EscherDgRecord extends EscherRecord { public static final short RECORD_ID = ( short ) 0xF008 ; public static final String RECORD_DESCRIPTION = "MsofbtDg" ; private int field_1_numShapes ; private int field_2_lastMSOSPID ; public int fillFields ( byte [ ] data , int offset , EscherRecordFactory recordFactory ) { int bytesRemaining = readHeader ( data , offset ) ; int pos = offset + 8 ; int size = 0 ; field_1_numShapes = LittleEndian . getInt ( data , pos + size ) ; size += 4 ; field_2_lastMSOSPID = LittleEndian . getInt ( data , pos + size ) ; size += 4 ; return getRecordSize ( ) ; } public int serialize ( int offset , byte [ ] data , EscherSerializationListener listener ) { listener . beforeRecordSerialize ( offset , getRecordId ( ) , this ) ; LittleEndian . putShort ( data , offset , getOptions ( ) ) ; LittleEndian . putShort ( data , offset + 2 , getRecordId ( ) ) ; LittleEndian . putInt ( data , offset + 4 , 8 ) ; LittleEndian . putInt ( data , offset + 8 , field_1_numShapes ) ; LittleEndian . putInt ( data , offset + 12 , field_2_lastMSOSPID ) ; listener . afterRecordSerialize ( offset + 16 , getRecordId ( ) , getRecordSize ( ) , this ) ; return getRecordSize ( ) ; } public int getRecordSize ( ) { return 8 + 8 ; } public short getRecordId ( ) { return RECORD_ID ; } public String getRecordName ( ) { return "Dg" ; } public String toString ( ) { String nl = System . getProperty ( "line.separator" ) ; return getClass ( ) . getName ( ) + ":" + nl + "  RecordId: 0x" + HexDump . toHex ( RECORD_ID ) + nl + "  Options: 0x" + HexDump . toHex ( getOptions ( ) ) + nl + "  NumShapes: " + field_1_numShapes + nl + "  LastMSOSPID: " + field_2_lastMSOSPID + nl ; } public int getNumShapes ( ) { return field_1_numShapes ; } public void setNumShapes ( int field_1_numShapes ) { this . field_1_numShapes = field_1_numShapes ; } public int getLastMSOSPID ( ) { return field_2_lastMSOSPID ; } public void setLastMSOSPID ( int field_2_lastMSOSPID ) { this . field_2_lastMSOSPID = field_2_lastMSOSPID ; } public short getDrawingGroupId ( ) { return ( short ) ( getOptions ( ) > > 4 ) ; } public void incrementShapeCount ( ) { this . field_1_numShapes ++ ; } } 	1
package org . apache . poi . hssf . record . formula ; import org . apache . poi . hssf . model . Workbook ; import org . apache . poi . hssf . record . RecordInputStream ; public class NotEqualPtg extends OperationPtg { public final static int SIZE = 1 ; public final static byte sid = 0x0e ; public NotEqualPtg ( ) { } public NotEqualPtg ( RecordInputStream in ) { } public void writeBytes ( byte [ ] array , int offset ) { array [ offset + 0 ] = sid ; } public int getSize ( ) { return SIZE ; } public int getType ( ) { return TYPE_BINARY ; } public int getNumberOfOperands ( ) { return 2 ; } public String toFormulaString ( Workbook book ) { return "<>" ; } public String toFormulaString ( String [ ] operands ) { StringBuffer buffer = new StringBuffer ( ) ; buffer . append ( operands [ 0 ] ) ; buffer . append ( toFormulaString ( ( Workbook ) null ) ) ; buffer . append ( operands [ 1 ] ) ; return buffer . toString ( ) ; } public Object clone ( ) { return new NotEqualPtg ( ) ; } } 	1
package org . apache . poi . hssf . eventmodel ; import org . apache . poi . hssf . record . Record ; public interface ERFListener { public boolean processRecord ( Record rec ) ; } 	0
package org . apache . poi . hssf . record ; import org . apache . poi . util . LittleEndian ; public class SupBookRecord extends Record { public final static short sid = 0x1AE ; private short field_1_number_of_sheets ; private short field_2_flag ; public SupBookRecord ( ) { setFlag ( ( short ) 0x401 ) ; } public SupBookRecord ( RecordInputStream in ) { super ( in ) ; } protected void validateSid ( short id ) { if ( id != sid ) { throw new RecordFormatException ( "NOT An Supbook RECORD" ) ; } } protected void fillFields ( RecordInputStream in ) { field_1_number_of_sheets = in . readShort ( ) ; field_2_flag = in . readShort ( ) ; } public String toString ( ) { StringBuffer buffer = new StringBuffer ( ) ; buffer . append ( "[SUPBOOK]\n" ) ; buffer . append ( "numberosheets = " ) . append ( getNumberOfSheets ( ) ) . append ( '\n' ) ; buffer . append ( "flag          = " ) . append ( getFlag ( ) ) . append ( '\n' ) ; buffer . append ( "[/SUPBOOK]\n" ) ; return buffer . toString ( ) ; } public int serialize ( int offset , byte [ ] data ) { LittleEndian . putShort ( data , 0 + offset , sid ) ; LittleEndian . putShort ( data , 2 + offset , ( short ) 4 ) ; LittleEndian . putShort ( data , 4 + offset , field_1_number_of_sheets ) ; LittleEndian . putShort ( data , 6 + offset , field_2_flag ) ; return getRecordSize ( ) ; } public void setNumberOfSheets ( short number ) { field_1_number_of_sheets = number ; } public short getNumberOfSheets ( ) { return field_1_number_of_sheets ; } public void setFlag ( short flag ) { field_2_flag = flag ; } public short getFlag ( ) { return field_2_flag ; } public int getRecordSize ( ) { return 4 + 4 ; } public short getSid ( ) { return sid ; } } 	1
package org . apache . poi . hssf . record . formula ; import org . apache . poi . hssf . model . Workbook ; import org . apache . poi . hssf . record . RecordInputStream ; public class BoolPtg extends Ptg { public final static int SIZE = 2 ; public final static byte sid = 0x1d ; private boolean field_1_value ; private BoolPtg ( ) { } public BoolPtg ( RecordInputStream in ) { field_1_value = ( in . readByte ( ) == 1 ) ; } public BoolPtg ( String formulaToken ) { field_1_value = ( formulaToken . equals ( "TRUE" ) ) ; } public void setValue ( boolean value ) { field_1_value = value ; } public boolean getValue ( ) { return field_1_value ; } public void writeBytes ( byte [ ] array , int offset ) { array [ offset + 0 ] = sid ; array [ offset + 1 ] = ( byte ) ( field_1_value ? 1 : 0 ) ; } public int getSize ( ) { return SIZE ; } public String toFormulaString ( Workbook book ) { return field_1_value ? "TRUE" : "FALSE" ; } public byte getDefaultOperandClass ( ) { return Ptg . CLASS_VALUE ; } public Object clone ( ) { BoolPtg ptg = new BoolPtg ( ) ; ptg . field_1_value = field_1_value ; return ptg ; } } 	0
package org . apache . poi . hssf . model ; import org . apache . poi . ddf . * ; import org . apache . poi . hssf . record . ObjRecord ; import org . apache . poi . hssf . usermodel . * ; public abstract class AbstractShape { public static AbstractShape createShape ( HSSFShape hssfShape , int shapeId ) { AbstractShape shape ; if ( hssfShape instanceof HSSFComment ) { shape = new CommentShape ( ( HSSFComment ) hssfShape , shapeId ) ; } else if ( hssfShape instanceof HSSFTextbox ) { shape = new TextboxShape ( ( HSSFTextbox ) hssfShape , shapeId ) ; } else if ( hssfShape instanceof HSSFPolygon ) { shape = new PolygonShape ( ( HSSFPolygon ) hssfShape , shapeId ) ; } else if ( hssfShape instanceof HSSFSimpleShape ) { HSSFSimpleShape simpleShape = ( HSSFSimpleShape ) hssfShape ; switch ( simpleShape . getShapeType ( ) ) { case HSSFSimpleShape . OBJECT_TYPE_PICTURE : shape = new PictureShape ( simpleShape , shapeId ) ; break ; case HSSFSimpleShape . OBJECT_TYPE_LINE : shape = new LineShape ( simpleShape , shapeId ) ; break ; case HSSFSimpleShape . OBJECT_TYPE_OVAL : case HSSFSimpleShape . OBJECT_TYPE_RECTANGLE : shape = new SimpleFilledShape ( simpleShape , shapeId ) ; break ; default : throw new IllegalArgumentException ( "Do not know how to handle this type of shape" ) ; } } else { throw new IllegalArgumentException ( "Unknown shape type" ) ; } EscherSpRecord sp = shape . getSpContainer ( ) . getChildById ( EscherSpRecord . RECORD_ID ) ; if ( hssfShape . getParent ( ) != null ) sp . setFlags ( sp . getFlags ( ) | EscherSpRecord . FLAG_CHILD ) ; return shape ; } protected AbstractShape ( ) { } public abstract EscherContainerRecord getSpContainer ( ) ; public abstract ObjRecord getObjRecord ( ) ; protected EscherRecord createAnchor ( HSSFAnchor userAnchor ) { return ConvertAnchor . createAnchor ( userAnchor ) ; } protected int addStandardOptions ( HSSFShape shape , EscherOptRecord opt ) { opt . addEscherProperty ( new EscherBoolProperty ( EscherProperties . TEXT__SIZE_TEXT_TO_FIT_SHAPE , 0x080000 ) ) ; if ( shape . isNoFill ( ) ) { opt . addEscherProperty ( new EscherBoolProperty ( EscherProperties . FILL__NOFILLHITTEST , 0x00110000 ) ) ; } else { opt . addEscherProperty ( new EscherBoolProperty ( EscherProperties . FILL__NOFILLHITTEST , 0x00010000 ) ) ; } opt . addEscherProperty ( new EscherRGBProperty ( EscherProperties . FILL__FILLCOLOR , shape . getFillColor ( ) ) ) ; opt . addEscherProperty ( new EscherBoolProperty ( EscherProperties . GROUPSHAPE__PRINT , 0x080000 ) ) ; opt . addEscherProperty ( new EscherRGBProperty ( EscherProperties . LINESTYLE__COLOR , shape . getLineStyleColor ( ) ) ) ; int options = 5 ; if ( shape . getLineWidth ( ) != HSSFShape . LINEWIDTH_DEFAULT ) { opt . addEscherProperty ( new EscherSimpleProperty ( EscherProperties . LINESTYLE__LINEWIDTH , shape . getLineWidth ( ) ) ) ; options ++ ; } if ( shape . getLineStyle ( ) != HSSFShape . LINESTYLE_SOLID ) { opt . addEscherProperty ( new EscherSimpleProperty ( EscherProperties . LINESTYLE__LINEDASHING , shape . getLineStyle ( ) ) ) ; opt . addEscherProperty ( new EscherSimpleProperty ( EscherProperties . LINESTYLE__LINEENDCAPSTYLE , 0 ) ) ; if ( shape . getLineStyle ( ) == HSSFShape . LINESTYLE_NONE ) opt . addEscherProperty ( new EscherBoolProperty ( EscherProperties . LINESTYLE__NOLINEDRAWDASH , 0x00080000 ) ) ; else opt . addEscherProperty ( new EscherBoolProperty ( EscherProperties . LINESTYLE__NOLINEDRAWDASH , 0x00080008 ) ) ; options += 3 ; } opt . sortProperties ( ) ; return options ; } } 	0
package org . apache . poi . hssf . record ; import org . apache . poi . util . LittleEndian ; public class DSFRecord extends Record { public final static short sid = 0x161 ; private short field_1_dsf ; public DSFRecord ( ) { } public DSFRecord ( RecordInputStream in ) { super ( in ) ; } protected void validateSid ( short id ) { if ( id != sid ) { throw new RecordFormatException ( "NOT A DSF RECORD" ) ; } } protected void fillFields ( RecordInputStream in ) { field_1_dsf = in . readShort ( ) ; } public void setDsf ( short dsfflag ) { field_1_dsf = dsfflag ; } public short getDsf ( ) { return field_1_dsf ; } public String toString ( ) { StringBuffer buffer = new StringBuffer ( ) ; buffer . append ( "[DSF]\n" ) ; buffer . append ( "    .isDSF           = " ) . append ( Integer . toHexString ( getDsf ( ) ) ) . append ( "\n" ) ; buffer . append ( "[/DSF]\n" ) ; return buffer . toString ( ) ; } public int serialize ( int offset , byte [ ] data ) { LittleEndian . putShort ( data , 0 + offset , sid ) ; LittleEndian . putShort ( data , 2 + offset , ( ( short ) 0x02 ) ) ; LittleEndian . putShort ( data , 4 + offset , getDsf ( ) ) ; return getRecordSize ( ) ; } public int getRecordSize ( ) { return 6 ; } public short getSid ( ) { return sid ; } } 	1
package org . apache . poi . hssf . record ; import org . apache . poi . util . LittleEndian ; import java . util . ArrayList ; public class ExtSSTRecord extends Record { public static final int DEFAULT_BUCKET_SIZE = 8 ; public static final int MAX_BUCKETS = 128 ; public final static short sid = 0xff ; private short field_1_strings_per_bucket = DEFAULT_BUCKET_SIZE ; private ArrayList field_2_sst_info ; public ExtSSTRecord ( ) { field_2_sst_info = new ArrayList ( ) ; } public ExtSSTRecord ( RecordInputStream in ) { super ( in ) ; } protected void validateSid ( short id ) { if ( id != sid ) { throw new RecordFormatException ( "NOT An EXTSST RECORD" ) ; } } protected void fillFields ( RecordInputStream in ) { field_2_sst_info = new ArrayList ( ) ; field_1_strings_per_bucket = in . readShort ( ) ; while ( in . remaining ( ) > 0 ) { ExtSSTInfoSubRecord rec = new ExtSSTInfoSubRecord ( in ) ; field_2_sst_info . add ( rec ) ; } } public void setNumStringsPerBucket ( short numStrings ) { field_1_strings_per_bucket = numStrings ; } public void addInfoRecord ( ExtSSTInfoSubRecord rec ) { field_2_sst_info . add ( rec ) ; } public short getNumStringsPerBucket ( ) { return field_1_strings_per_bucket ; } public int getNumInfoRecords ( ) { return field_2_sst_info . size ( ) ; } public ExtSSTInfoSubRecord getInfoRecordAt ( int elem ) { return ( ExtSSTInfoSubRecord ) field_2_sst_info . get ( elem ) ; } public String toString ( ) { StringBuffer buffer = new StringBuffer ( ) ; buffer . append ( "[EXTSST]\n" ) ; buffer . append ( "    .dsst           = " ) . append ( Integer . toHexString ( getNumStringsPerBucket ( ) ) ) . append ( "\n" ) ; buffer . append ( "    .numInfoRecords = " ) . append ( getNumInfoRecords ( ) ) . append ( "\n" ) ; for ( int k = 0 ; k < getNumInfoRecords ( ) ; k ++ ) { buffer . append ( "    .inforecord     = " ) . append ( k ) . append ( "\n" ) ; buffer . append ( "    .streampos      = " ) . append ( Integer . toHexString ( getInfoRecordAt ( k ) . getStreamPos ( ) ) ) . append ( "\n" ) ; buffer . append ( "    .sstoffset      = " ) . append ( Integer . toHexString ( getInfoRecordAt ( k ) . getBucketSSTOffset ( ) ) ) . append ( "\n" ) ; } buffer . append ( "[/EXTSST]\n" ) ; return buffer . toString ( ) ; } public int serialize ( int offset , byte [ ] data ) { LittleEndian . putShort ( data , 0 + offset , sid ) ; LittleEndian . putShort ( data , 2 + offset , ( short ) ( getRecordSize ( ) - 4 ) ) ; LittleEndian . putShort ( data , 4 + offset , field_1_strings_per_bucket ) ; int pos = 6 ; for ( int k = 0 ; k < getNumInfoRecords ( ) ; k ++ ) { ExtSSTInfoSubRecord rec = getInfoRecordAt ( k ) ; pos += rec . serialize ( pos + offset , data ) ; } return pos ; } public int getRecordSize ( ) { return 6 + 8 * getNumInfoRecords ( ) ; } public static final int getNumberOfInfoRecsForStrings ( int numStrings ) { int infoRecs = ( numStrings / DEFAULT_BUCKET_SIZE ) ; if ( ( numStrings % DEFAULT_BUCKET_SIZE ) != 0 ) infoRecs ++ ; if ( infoRecs > MAX_BUCKETS ) infoRecs = MAX_BUCKETS ; return infoRecs ; } public static final int getRecordSizeForStrings ( int numStrings ) { return 4 + 2 + ( getNumberOfInfoRecsForStrings ( numStrings ) * 8 ) ; } public short getSid ( ) { return sid ; } public void setBucketOffsets ( int [ ] bucketAbsoluteOffsets , int [ ] bucketRelativeOffsets ) { this . field_2_sst_info = new ArrayList ( bucketAbsoluteOffsets . length ) ; for ( int i = 0 ; i < bucketAbsoluteOffsets . length ; i ++ ) { ExtSSTInfoSubRecord r = new ExtSSTInfoSubRecord ( ) ; r . setBucketRecordOffset ( ( short ) bucketRelativeOffsets [ i ] ) ; r . setStreamPos ( bucketAbsoluteOffsets [ i ] ) ; field_2_sst_info . add ( r ) ; } } } 	1
package org . apache . poi . hssf . record . formula ; import org . apache . poi . hssf . model . Workbook ; import org . apache . poi . hssf . record . RecordInputStream ; public class MissingArgPtg extends Ptg { private final static int SIZE = 1 ; public final static byte sid = 0x16 ; public MissingArgPtg ( ) { } public MissingArgPtg ( RecordInputStream in ) { } public void writeBytes ( byte [ ] array , int offset ) { array [ offset + 0 ] = sid ; } public int getSize ( ) { return SIZE ; } public String toFormulaString ( Workbook book ) { return " " ; } public byte getDefaultOperandClass ( ) { return Ptg . CLASS_VALUE ; } public Object clone ( ) { return new MissingArgPtg ( ) ; } } 	0
package org . apache . poi . util ; import java . util . * ; public class BitFieldFactory { private static Map instances = new HashMap ( ) ; public static BitField getInstance ( final int mask ) { BitField f = ( BitField ) instances . get ( new Integer ( mask ) ) ; if ( f == null ) { f = new BitField ( mask ) ; instances . put ( new Integer ( mask ) , f ) ; } return f ; } } 	1
package org . apache . poi . hpsf ; public class NoFormatIDException extends HPSFRuntimeException { public NoFormatIDException ( ) { super ( ) ; } public NoFormatIDException ( final String msg ) { super ( msg ) ; } public NoFormatIDException ( final Throwable reason ) { super ( reason ) ; } public NoFormatIDException ( final String msg , final Throwable reason ) { super ( msg , reason ) ; } } 	0
package org . apache . poi . hssf . record ; import org . apache . poi . util . LittleEndian ; public class BoolErrRecord extends Record implements CellValueRecordInterface , Comparable { public final static short sid = 0x205 ; private int field_1_row ; private short field_2_column ; private short field_3_xf_index ; private byte field_4_bBoolErr ; private byte field_5_fError ; public BoolErrRecord ( ) { } public BoolErrRecord ( RecordInputStream in ) { super ( in ) ; } protected void fillFields ( RecordInputStream in ) { field_1_row = in . readUShort ( ) ; field_2_column = in . readShort ( ) ; field_3_xf_index = in . readShort ( ) ; field_4_bBoolErr = in . readByte ( ) ; field_5_fError = in . readByte ( ) ; } public void setRow ( int row ) { field_1_row = row ; } public void setColumn ( short col ) { field_2_column = col ; } public void setXFIndex ( short xf ) { field_3_xf_index = xf ; } public void setValue ( boolean value ) { field_4_bBoolErr = value ? ( byte ) 1 : ( byte ) 0 ; field_5_fError = ( byte ) 0 ; } public void setValue ( byte value ) { if ( ( value == 0 ) || ( value == 7 ) || ( value == 15 ) || ( value == 23 ) || ( value == 29 ) || ( value == 36 ) || ( value == 42 ) ) { field_4_bBoolErr = value ; field_5_fError = ( byte ) 1 ; } else { throw new RuntimeException ( "Error Value can only be 0,7,15,23,29,36 or 42. It cannot be " + value ) ; } } public int getRow ( ) { return field_1_row ; } public short getColumn ( ) { return field_2_column ; } public short getXFIndex ( ) { return field_3_xf_index ; } public boolean getBooleanValue ( ) { return ( field_4_bBoolErr != 0 ) ; } public byte getErrorValue ( ) { return field_4_bBoolErr ; } public boolean isBoolean ( ) { return ( field_5_fError == ( byte ) 0 ) ; } public void setError ( boolean val ) { field_5_fError = ( byte ) ( val == false ? 0 : 1 ) ; } public boolean isError ( ) { return ( field_5_fError != ( byte ) 0 ) ; } public String toString ( ) { StringBuffer buffer = new StringBuffer ( ) ; buffer . append ( "[BOOLERR]\n" ) ; buffer . append ( "    .row            = " ) . append ( Integer . toHexString ( getRow ( ) ) ) . append ( "\n" ) ; buffer . append ( "    .col            = " ) . append ( Integer . toHexString ( getColumn ( ) ) ) . append ( "\n" ) ; buffer . append ( "    .xfindex        = " ) . append ( Integer . toHexString ( getXFIndex ( ) ) ) . append ( "\n" ) ; if ( isBoolean ( ) ) { buffer . append ( "    .booleanValue   = " ) . append ( getBooleanValue ( ) ) . append ( "\n" ) ; } else { buffer . append ( "    .errorValue     = " ) . append ( getErrorValue ( ) ) . append ( "\n" ) ; } buffer . append ( "[/BOOLERR]\n" ) ; return buffer . toString ( ) ; } public int serialize ( int offset , byte [ ] data ) { LittleEndian . putShort ( data , 0 + offset , sid ) ; LittleEndian . putShort ( data , 2 + offset , ( short ) 8 ) ; LittleEndian . putShort ( data , 4 + offset , ( short ) getRow ( ) ) ; LittleEndian . putShort ( data , 6 + offset , getColumn ( ) ) ; LittleEndian . putShort ( data , 8 + offset , getXFIndex ( ) ) ; data [ 10 + offset ] = field_4_bBoolErr ; data [ 11 + offset ] = field_5_fError ; return getRecordSize ( ) ; } public int getRecordSize ( ) { return 12 ; } protected void validateSid ( short id ) { if ( id != BoolErrRecord . sid ) { throw new RecordFormatException ( "Not a valid BoolErrRecord" ) ; } } public short getSid ( ) { return sid ; } public boolean isBefore ( CellValueRecordInterface i ) { if ( this . getRow ( ) > i . getRow ( ) ) { return false ; } if ( ( this . getRow ( ) == i . getRow ( ) ) && ( this . getColumn ( ) > i . getColumn ( ) ) ) { return false ; } if ( ( this . getRow ( ) == i . getRow ( ) ) && ( this . getColumn ( ) == i . getColumn ( ) ) ) { return false ; } return true ; } public boolean isAfter ( CellValueRecordInterface i ) { if ( this . getRow ( ) < i . getRow ( ) ) { return false ; } if ( ( this . getRow ( ) == i . getRow ( ) ) && ( this . getColumn ( ) < i . getColumn ( ) ) ) { return false ; } if ( ( this . getRow ( ) == i . getRow ( ) ) && ( this . getColumn ( ) == i . getColumn ( ) ) ) { return false ; } return true ; } public boolean isEqual ( CellValueRecordInterface i ) { return ( ( this . getRow ( ) == i . getRow ( ) ) && ( this . getColumn ( ) == i . getColumn ( ) ) ) ; } public boolean isInValueSection ( ) { return true ; } public boolean isValue ( ) { return true ; } public int compareTo ( Object obj ) { CellValueRecordInterface loc = ( CellValueRecordInterface ) obj ; if ( ( this . getRow ( ) == loc . getRow ( ) ) && ( this . getColumn ( ) == loc . getColumn ( ) ) ) { return 0 ; } if ( this . getRow ( ) < loc . getRow ( ) ) { return - 1 ; } if ( this . getRow ( ) > loc . getRow ( ) ) { return 1 ; } if ( this . getColumn ( ) < loc . getColumn ( ) ) { return - 1 ; } if ( this . getColumn ( ) > loc . getColumn ( ) ) { return 1 ; } return - 1 ; } public boolean equals ( Object obj ) { if ( ! ( obj instanceof CellValueRecordInterface ) ) { return false ; } CellValueRecordInterface loc = ( CellValueRecordInterface ) obj ; if ( ( this . getRow ( ) == loc . getRow ( ) ) && ( this . getColumn ( ) == loc . getColumn ( ) ) ) { return true ; } return false ; } public Object clone ( ) { BoolErrRecord rec = new BoolErrRecord ( ) ; rec . field_1_row = field_1_row ; rec . field_2_column = field_2_column ; rec . field_3_xf_index = field_3_xf_index ; rec . field_4_bBoolErr = field_4_bBoolErr ; rec . field_5_fError = field_5_fError ; return rec ; } } 	1
package org . apache . poi . hssf . record ; import org . apache . poi . util . * ; public class FrameRecord extends Record { public final static short sid = 0x1032 ; private short field_1_borderType ; public final static short BORDER_TYPE_REGULAR = 0 ; public final static short BORDER_TYPE_SHADOW = 1 ; private short field_2_options ; private BitField autoSize = BitFieldFactory . getInstance ( 0x1 ) ; private BitField autoPosition = BitFieldFactory . getInstance ( 0x2 ) ; public FrameRecord ( ) { } public FrameRecord ( RecordInputStream in ) { super ( in ) ; } protected void validateSid ( short id ) { if ( id != sid ) { throw new RecordFormatException ( "Not a Frame record" ) ; } } protected void fillFields ( RecordInputStream in ) { field_1_borderType = in . readShort ( ) ; field_2_options = in . readShort ( ) ; } public String toString ( ) { StringBuffer buffer = new StringBuffer ( ) ; buffer . append ( "[FRAME]\n" ) ; buffer . append ( "    .borderType           = " ) . append ( "0x" ) . append ( HexDump . toHex ( getBorderType ( ) ) ) . append ( " (" ) . append ( getBorderType ( ) ) . append ( " )" ) ; buffer . append ( System . getProperty ( "line.separator" ) ) ; buffer . append ( "    .options              = " ) . append ( "0x" ) . append ( HexDump . toHex ( getOptions ( ) ) ) . append ( " (" ) . append ( getOptions ( ) ) . append ( " )" ) ; buffer . append ( System . getProperty ( "line.separator" ) ) ; buffer . append ( "         .autoSize                 = " ) . append ( isAutoSize ( ) ) . append ( '\n' ) ; buffer . append ( "         .autoPosition             = " ) . append ( isAutoPosition ( ) ) . append ( '\n' ) ; buffer . append ( "[/FRAME]\n" ) ; return buffer . toString ( ) ; } public int serialize ( int offset , byte [ ] data ) { int pos = 0 ; LittleEndian . putShort ( data , 0 + offset , sid ) ; LittleEndian . putShort ( data , 2 + offset , ( short ) ( getRecordSize ( ) - 4 ) ) ; LittleEndian . putShort ( data , 4 + offset + pos , field_1_borderType ) ; LittleEndian . putShort ( data , 6 + offset + pos , field_2_options ) ; return getRecordSize ( ) ; } public int getRecordSize ( ) { return 4 + 2 + 2 ; } public short getSid ( ) { return sid ; } public Object clone ( ) { FrameRecord rec = new FrameRecord ( ) ; rec . field_1_borderType = field_1_borderType ; rec . field_2_options = field_2_options ; return rec ; } public short getBorderType ( ) { return field_1_borderType ; } public void setBorderType ( short field_1_borderType ) { this . field_1_borderType = field_1_borderType ; } public short getOptions ( ) { return field_2_options ; } public void setOptions ( short field_2_options ) { this . field_2_options = field_2_options ; } public void setAutoSize ( boolean value ) { field_2_options = autoSize . setShortBoolean ( field_2_options , value ) ; } public boolean isAutoSize ( ) { return autoSize . isSet ( field_2_options ) ; } public void setAutoPosition ( boolean value ) { field_2_options = autoPosition . setShortBoolean ( field_2_options , value ) ; } public boolean isAutoPosition ( ) { return autoPosition . isSet ( field_2_options ) ; } } 	1
package org . apache . poi . poifs . eventfilesystem ; import java . io . * ; import java . util . * ; import org . apache . poi . poifs . filesystem . DocumentInputStream ; import org . apache . poi . poifs . filesystem . POIFSDocument ; import org . apache . poi . poifs . filesystem . POIFSDocumentPath ; import org . apache . poi . poifs . property . DirectoryProperty ; import org . apache . poi . poifs . property . Property ; import org . apache . poi . poifs . property . PropertyTable ; import org . apache . poi . poifs . storage . BlockAllocationTableReader ; import org . apache . poi . poifs . storage . BlockList ; import org . apache . poi . poifs . storage . HeaderBlockReader ; import org . apache . poi . poifs . storage . RawDataBlockList ; import org . apache . poi . poifs . storage . SmallBlockTableReader ; public class POIFSReader { private POIFSReaderRegistry registry ; private boolean registryClosed ; public POIFSReader ( ) { registry = new POIFSReaderRegistry ( ) ; registryClosed = false ; } public void read ( final InputStream stream ) throws IOException { registryClosed = true ; HeaderBlockReader header_block_reader = new HeaderBlockReader ( stream ) ; RawDataBlockList data_blocks = new RawDataBlockList ( stream ) ; new BlockAllocationTableReader ( header_block_reader . getBATCount ( ) , header_block_reader . getBATArray ( ) , header_block_reader . getXBATCount ( ) , header_block_reader . getXBATIndex ( ) , data_blocks ) ; PropertyTable properties = new PropertyTable ( header_block_reader . getPropertyStart ( ) , data_blocks ) ; processProperties ( SmallBlockTableReader . getSmallDocumentBlocks ( data_blocks , properties . getRoot ( ) , header_block_reader . getSBATStart ( ) ) , data_blocks , properties . getRoot ( ) . getChildren ( ) , new POIFSDocumentPath ( ) ) ; } public void registerListener ( final POIFSReaderListener listener ) { if ( listener == null ) { throw new NullPointerException ( ) ; } if ( registryClosed ) { throw new IllegalStateException ( ) ; } registry . registerListener ( listener ) ; } public void registerListener ( final POIFSReaderListener listener , final String name ) { registerListener ( listener , null , name ) ; } public void registerListener ( final POIFSReaderListener listener , final POIFSDocumentPath path , final String name ) { if ( ( listener == null ) || ( name == null ) || ( name . length ( ) == 0 ) ) { throw new NullPointerException ( ) ; } if ( registryClosed ) { throw new IllegalStateException ( ) ; } registry . registerListener ( listener , ( path == null ) ? new POIFSDocumentPath ( ) : path , name ) ; } public static void main ( String args [ ] ) throws IOException { if ( args . length == 0 ) { System . err . println ( "at least one argument required: input filename(s)" ) ; System . exit ( 1 ) ; } for ( int j = 0 ; j < args . length ; j ++ ) { POIFSReader reader = new POIFSReader ( ) ; POIFSReaderListener listener = new SampleListener ( ) ; reader . registerListener ( listener ) ; System . out . println ( "reading " + args [ j ] ) ; FileInputStream istream = new FileInputStream ( args [ j ] ) ; reader . read ( istream ) ; istream . close ( ) ; } } private void processProperties ( final BlockList small_blocks , final BlockList big_blocks , final Iterator properties , final POIFSDocumentPath path ) throws IOException { while ( properties . hasNext ( ) ) { Property property = ( Property ) properties . next ( ) ; String name = property . getName ( ) ; if ( property . isDirectory ( ) ) { POIFSDocumentPath new_path = new POIFSDocumentPath ( path , new String [ ] { name } ) ; processProperties ( small_blocks , big_blocks , ( ( DirectoryProperty ) property ) . getChildren ( ) , new_path ) ; } else { int startBlock = property . getStartBlock ( ) ; Iterator listeners = registry . getListeners ( path , name ) ; if ( listeners . hasNext ( ) ) { int size = property . getSize ( ) ; POIFSDocument document = null ; if ( property . shouldUseSmallBlocks ( ) ) { document = new POIFSDocument ( name , small_blocks . fetchBlocks ( startBlock ) , size ) ; } else { document = new POIFSDocument ( name , big_blocks . fetchBlocks ( startBlock ) , size ) ; } while ( listeners . hasNext ( ) ) { POIFSReaderListener listener = ( POIFSReaderListener ) listeners . next ( ) ; listener . processPOIFSReaderEvent ( new POIFSReaderEvent ( new DocumentInputStream ( document ) , path , name ) ) ; } } else { if ( property . shouldUseSmallBlocks ( ) ) { small_blocks . fetchBlocks ( startBlock ) ; } else { big_blocks . fetchBlocks ( startBlock ) ; } } } } } private static class SampleListener implements POIFSReaderListener { SampleListener ( ) { } public void processPOIFSReaderEvent ( final POIFSReaderEvent event ) { DocumentInputStream istream = event . getStream ( ) ; POIFSDocumentPath path = event . getPath ( ) ; String name = event . getName ( ) ; try { byte [ ] data = new byte [ istream . available ( ) ] ; istream . read ( data ) ; int pathLength = path . length ( ) ; for ( int k = 0 ; k < pathLength ; k ++ ) { System . out . print ( "/" + path . getComponent ( k ) ) ; } System . out . println ( "/" + name + ": " + data . length + " bytes read" ) ; } catch ( IOException ignored ) { } } } } 	1
package org . apache . poi . hssf . record ; import org . apache . poi . util . LittleEndian ; public class GridsetRecord extends Record { public final static short sid = 0x82 ; public short field_1_gridset_flag ; public GridsetRecord ( ) { } public GridsetRecord ( RecordInputStream in ) { super ( in ) ; } protected void validateSid ( short id ) { if ( id != sid ) { throw new RecordFormatException ( "NOT A Gridset RECORD" ) ; } } protected void fillFields ( RecordInputStream in ) { field_1_gridset_flag = in . readShort ( ) ; } public void setGridset ( boolean gridset ) { if ( gridset == true ) { field_1_gridset_flag = 1 ; } else { field_1_gridset_flag = 0 ; } } public boolean getGridset ( ) { return ( field_1_gridset_flag == 1 ) ; } public String toString ( ) { StringBuffer buffer = new StringBuffer ( ) ; buffer . append ( "[GRIDSET]\n" ) ; buffer . append ( "    .gridset        = " ) . append ( getGridset ( ) ) . append ( "\n" ) ; buffer . append ( "[/GRIDSET]\n" ) ; return buffer . toString ( ) ; } public int serialize ( int offset , byte [ ] data ) { LittleEndian . putShort ( data , 0 + offset , sid ) ; LittleEndian . putShort ( data , 2 + offset , ( short ) 0x2 ) ; LittleEndian . putShort ( data , 4 + offset , field_1_gridset_flag ) ; return getRecordSize ( ) ; } public int getRecordSize ( ) { return 6 ; } public short getSid ( ) { return sid ; } public Object clone ( ) { GridsetRecord rec = new GridsetRecord ( ) ; rec . field_1_gridset_flag = field_1_gridset_flag ; return rec ; } } 	1
package org . apache . poi . poifs . storage ; import org . apache . poi . poifs . common . POIFSConstants ; import org . apache . poi . util . IntegerField ; import org . apache . poi . util . LittleEndian ; import org . apache . poi . util . LittleEndianConsts ; import org . apache . poi . util . LongField ; import org . apache . poi . util . ShortField ; public interface HeaderBlockConstants { public static final long _signature = 0xE11AB1A1E011CFD0L ; public static final int _bat_array_offset = 0x4c ; public static final int _max_bats_in_header = ( POIFSConstants . BIG_BLOCK_SIZE - _bat_array_offset ) / LittleEndianConsts . INT_SIZE ; public static final int _signature_offset = 0 ; public static final int _bat_count_offset = 0x2C ; public static final int _property_start_offset = 0x30 ; public static final int _sbat_start_offset = 0x3C ; public static final int _sbat_block_count_offset = 0x40 ; public static final int _xbat_start_offset = 0x44 ; public static final int _xbat_count_offset = 0x48 ; } 	1
package org . apache . poi . hssf . record . formula ; import org . apache . poi . util . LittleEndian ; import org . apache . poi . hssf . record . RecordInputStream ; public class FuncPtg extends AbstractFunctionPtg { public final static byte sid = 0x21 ; public final static int SIZE = 3 ; private int numParams = 0 ; private FuncPtg ( ) { } public FuncPtg ( RecordInputStream in ) { field_2_fnc_index = in . readShort ( ) ; try { numParams = ( ( Integer ) functionData [ field_2_fnc_index ] [ 2 ] ) . intValue ( ) ; } catch ( NullPointerException npe ) { numParams = 0 ; } } public void writeBytes ( byte [ ] array , int offset ) { array [ offset + 0 ] = ( byte ) ( sid + ptgClass ) ; LittleEndian . putShort ( array , offset + 1 , field_2_fnc_index ) ; } public int getNumberOfOperands ( ) { return numParams ; } public Object clone ( ) { FuncPtg ptg = new FuncPtg ( ) ; ptg . field_2_fnc_index = field_2_fnc_index ; ptg . setClass ( ptgClass ) ; return ptg ; } public int getSize ( ) { return SIZE ; } public String toString ( ) { StringBuffer buffer = new StringBuffer ( ) ; buffer . append ( "<FunctionPtg>" ) . append ( "\n" ) . append ( "   numArgs(internal)=" ) . append ( this . numParams ) . append ( "\n" ) . append ( "      name         =" ) . append ( lookupName ( field_2_fnc_index ) ) . append ( "\n" ) . append ( "   field_2_fnc_index=" ) . append ( field_2_fnc_index ) . append ( "\n" ) . append ( "</FunctionPtg>" ) ; return buffer . toString ( ) ; } } 	0
package org . apache . poi . hssf . dev ; import java . io . FileInputStream ; import java . util . List ; import org . apache . poi . poifs . filesystem . POIFSFileSystem ; import org . apache . poi . hssf . record . * ; import org . apache . poi . hssf . record . formula . * ; import org . apache . poi . hssf . model . * ; public class FormulaViewer { private String file ; private boolean list = false ; public FormulaViewer ( ) { } public void run ( ) throws Exception { POIFSFileSystem fs = new POIFSFileSystem ( new FileInputStream ( file ) ) ; List records = RecordFactory . createRecords ( fs . createDocumentInputStream ( "Workbook" ) ) ; for ( int k = 0 ; k < records . size ( ) ; k ++ ) { Record record = ( Record ) records . get ( k ) ; if ( record . getSid ( ) == FormulaRecord . sid ) { if ( list ) { listFormula ( ( FormulaRecord ) record ) ; } else { parseFormulaRecord ( ( FormulaRecord ) record ) ; } } } } private void listFormula ( FormulaRecord record ) { String sep = "~" ; List tokens = record . getParsedExpression ( ) ; int numptgs = record . getNumberOfExpressionTokens ( ) ; Ptg token = null ; String name , numArg ; if ( tokens != null ) { token = ( Ptg ) tokens . get ( numptgs - 1 ) ; if ( token instanceof FuncPtg ) { numArg = String . valueOf ( numptgs - 1 ) ; } else { numArg = String . valueOf ( - 1 ) ; } StringBuffer buf = new StringBuffer ( ) ; if ( token instanceof ExpPtg ) return ; buf . append ( name = ( ( OperationPtg ) token ) . toFormulaString ( ( Workbook ) null ) ) ; buf . append ( sep ) ; switch ( token . getPtgClass ( ) ) { case Ptg . CLASS_REF : buf . append ( "REF" ) ; break ; case Ptg . CLASS_VALUE : buf . append ( "VALUE" ) ; break ; case Ptg . CLASS_ARRAY : buf . append ( "ARRAY" ) ; break ; } buf . append ( sep ) ; if ( numptgs > 1 ) { token = ( Ptg ) tokens . get ( numptgs - 2 ) ; switch ( token . getPtgClass ( ) ) { case Ptg . CLASS_REF : buf . append ( "REF" ) ; break ; case Ptg . CLASS_VALUE : buf . append ( "VALUE" ) ; break ; case Ptg . CLASS_ARRAY : buf . append ( "ARRAY" ) ; break ; } } else { buf . append ( "VALUE" ) ; } buf . append ( sep ) ; buf . append ( numArg ) ; System . out . println ( buf . toString ( ) ) ; } else { System . out . println ( "#NAME" ) ; } } public void parseFormulaRecord ( FormulaRecord record ) { System . out . println ( "==============================" ) ; System . out . print ( "row = " + record . getRow ( ) ) ; System . out . println ( ", col = " + record . getColumn ( ) ) ; System . out . println ( "value = " + record . getValue ( ) ) ; System . out . print ( "xf = " + record . getXFIndex ( ) ) ; System . out . print ( ", number of ptgs = " + record . getNumberOfExpressionTokens ( ) ) ; System . out . println ( ", options = " + record . getOptions ( ) ) ; System . out . println ( "RPN List = " + formulaString ( record ) ) ; System . out . println ( "Formula text = " + composeFormula ( record ) ) ; } private String formulaString ( FormulaRecord record ) { StringBuffer formula = new StringBuffer ( "=" ) ; int numptgs = record . getNumberOfExpressionTokens ( ) ; List tokens = record . getParsedExpression ( ) ; Ptg token ; StringBuffer buf = new StringBuffer ( ) ; for ( int i = 0 ; i < numptgs ; i ++ ) { token = ( Ptg ) tokens . get ( i ) ; buf . append ( token . toFormulaString ( ( Workbook ) null ) ) ; switch ( token . getPtgClass ( ) ) { case Ptg . CLASS_REF : buf . append ( "(R)" ) ; break ; case Ptg . CLASS_VALUE : buf . append ( "(V)" ) ; break ; case Ptg . CLASS_ARRAY : buf . append ( "(A)" ) ; break ; } buf . append ( ' ' ) ; } return buf . toString ( ) ; } private String composeFormula ( FormulaRecord record ) { return org . apache . poi . hssf . model . FormulaParser . toFormulaString ( ( Workbook ) null , record . getParsedExpression ( ) ) ; } public void setFile ( String file ) { this . file = file ; } public void setList ( boolean list ) { this . list = list ; } public static void main ( String args [ ] ) { if ( ( args == null ) || ( args . length > 2 ) || args [ 0 ] . equals ( "--help" ) ) { System . out . println ( "FormulaViewer .8 proof that the devil lies in the details (or just in BIFF8 files in general)" ) ; System . out . println ( "usage: Give me a big fat file name" ) ; } else if ( args [ 0 ] . equals ( "--listFunctions" ) ) { try { FormulaViewer viewer = new FormulaViewer ( ) ; viewer . setFile ( args [ 1 ] ) ; viewer . setList ( true ) ; viewer . run ( ) ; } catch ( Exception e ) { System . out . println ( "Whoops!" ) ; e . printStackTrace ( ) ; } } else { try { FormulaViewer viewer = new FormulaViewer ( ) ; viewer . setFile ( args [ 0 ] ) ; viewer . run ( ) ; } catch ( Exception e ) { System . out . println ( "Whoops!" ) ; e . printStackTrace ( ) ; } } } } 	0
package org . apache . poi . hssf . usermodel ; import org . apache . poi . hssf . model . Workbook ; import org . apache . poi . hssf . record . BoundSheetRecord ; import org . apache . poi . hssf . record . NameRecord ; import org . apache . poi . hssf . util . RangeAddress ; public class HSSFName { private Workbook book ; private NameRecord name ; protected HSSFName ( Workbook book , NameRecord name ) { this . book = book ; this . name = name ; } public String getSheetName ( ) { String result ; short indexToExternSheet = name . getExternSheetNumber ( ) ; result = book . findSheetNameFromExternSheet ( indexToExternSheet ) ; return result ; } public String getNameName ( ) { String result = name . getNameText ( ) ; return result ; } public void setNameName ( String nameName ) { name . setNameText ( nameName ) ; name . setNameTextLength ( ( byte ) nameName . length ( ) ) ; for ( int i = book . getNumNames ( ) - 1 ; i >= 0 ; i -- ) { NameRecord rec = book . getNameRecord ( i ) ; if ( rec != name ) { if ( rec . getNameText ( ) . equalsIgnoreCase ( getNameName ( ) ) ) throw new IllegalArgumentException ( "The workbook already contains this name (case-insensitive)" ) ; } } } public String getReference ( ) { String result ; result = name . getAreaReference ( book ) ; return result ; } private void setSheetName ( String sheetName ) { int sheetNumber = book . getSheetIndex ( sheetName ) ; short externSheetNumber = book . checkExternSheet ( sheetNumber ) ; name . setExternSheetNumber ( externSheetNumber ) ; } public void setReference ( String ref ) { RangeAddress ra = new RangeAddress ( ref ) ; String sheetName = ra . getSheetName ( ) ; if ( ra . hasSheetName ( ) ) { setSheetName ( sheetName ) ; } name . setAreaReference ( ref ) ; } } 	1
package org . apache . poi . hssf . record ; import org . apache . poi . util . IntMapper ; import org . apache . poi . util . LittleEndian ; class SSTSerializer { private IntMapper strings ; private SSTRecordHeader sstRecordHeader ; int [ ] bucketAbsoluteOffsets ; int [ ] bucketRelativeOffsets ; int startOfSST , startOfRecord ; public SSTSerializer ( IntMapper strings , int numStrings , int numUniqueStrings ) { this . strings = strings ; this . sstRecordHeader = new SSTRecordHeader ( numStrings , numUniqueStrings ) ; int infoRecs = ExtSSTRecord . getNumberOfInfoRecsForStrings ( strings . size ( ) ) ; this . bucketAbsoluteOffsets = new int [ infoRecs ] ; this . bucketRelativeOffsets = new int [ infoRecs ] ; } public int serialize ( int offset , byte [ ] data ) { UnicodeString . UnicodeRecordStats stats = new UnicodeString . UnicodeRecordStats ( ) ; sstRecordHeader . writeSSTHeader ( stats , data , 0 + offset , 0 ) ; int pos = offset + SSTRecord . SST_RECORD_OVERHEAD ; for ( int k = 0 ; k < strings . size ( ) ; k ++ ) { if ( k % ExtSSTRecord . DEFAULT_BUCKET_SIZE == 0 ) { int index = k / ExtSSTRecord . DEFAULT_BUCKET_SIZE ; if ( index < ExtSSTRecord . MAX_BUCKETS ) { bucketAbsoluteOffsets [ index ] = pos - offset ; bucketRelativeOffsets [ index ] = pos - offset ; } } UnicodeString s = getUnicodeString ( k ) ; pos += s . serialize ( stats , pos , data ) ; } if ( stats . lastLengthPos != - 1 ) { short lastRecordLength = ( short ) ( pos - stats . lastLengthPos - 2 ) ; if ( lastRecordLength > 8224 ) throw new InternalError ( ) ; LittleEndian . putShort ( data , stats . lastLengthPos , lastRecordLength ) ; } return pos - offset ; } private UnicodeString getUnicodeString ( int index ) { return getUnicodeString ( strings , index ) ; } private static UnicodeString getUnicodeString ( IntMapper strings , int index ) { return ( ( UnicodeString ) strings . get ( index ) ) ; } public int [ ] getBucketAbsoluteOffsets ( ) { return bucketAbsoluteOffsets ; } public int [ ] getBucketRelativeOffsets ( ) { return bucketRelativeOffsets ; } } 	0
package org . apache . poi . hssf . record . formula ; import org . apache . poi . util . LittleEndian ; import org . apache . poi . util . BitField ; import org . apache . poi . hssf . record . RecordInputStream ; import org . apache . poi . hssf . util . AreaReference ; import org . apache . poi . hssf . util . CellReference ; import org . apache . poi . hssf . model . Workbook ; public class AreaAPtg extends AreaPtg { public final static short sid = 0x65 ; protected AreaAPtg ( ) { } public AreaAPtg ( short firstRow , short lastRow , short firstColumn , short lastColumn , boolean firstRowRelative , boolean lastRowRelative , boolean firstColRelative , boolean lastColRelative ) { super ( firstRow , lastRow , firstColumn , lastColumn , firstRowRelative , lastRowRelative , firstColRelative , lastColRelative ) ; } public AreaAPtg ( RecordInputStream in ) { super ( in ) ; } public String getAreaPtgName ( ) { return "AreaAPtg" ; } public Object clone ( ) { AreaAPtg ptg = new AreaAPtg ( ) ; ptg . setFirstRow ( getFirstRow ( ) ) ; ptg . setLastRow ( getLastRow ( ) ) ; ptg . setFirstColumnRaw ( getFirstColumnRaw ( ) ) ; ptg . setLastColumnRaw ( getLastColumnRaw ( ) ) ; ptg . setClass ( ptgClass ) ; return ptg ; } } 	0
package org . apache . poi . hssf . model ; import org . apache . poi . ddf . EscherRecord ; import org . apache . poi . ddf . EscherClientAnchorRecord ; import org . apache . poi . ddf . EscherChildAnchorRecord ; import org . apache . poi . hssf . usermodel . HSSFAnchor ; import org . apache . poi . hssf . usermodel . HSSFClientAnchor ; import org . apache . poi . hssf . usermodel . HSSFChildAnchor ; public class ConvertAnchor { public static EscherRecord createAnchor ( HSSFAnchor userAnchor ) { if ( userAnchor instanceof HSSFClientAnchor ) { HSSFClientAnchor a = ( HSSFClientAnchor ) userAnchor ; EscherClientAnchorRecord anchor = new EscherClientAnchorRecord ( ) ; anchor . setRecordId ( EscherClientAnchorRecord . RECORD_ID ) ; anchor . setOptions ( ( short ) 0x0000 ) ; anchor . setFlag ( ( short ) a . getAnchorType ( ) ) ; anchor . setCol1 ( ( short ) Math . min ( a . getCol1 ( ) , a . getCol2 ( ) ) ) ; anchor . setDx1 ( ( short ) Math . min ( a . getDx1 ( ) , a . getDx2 ( ) ) ) ; anchor . setRow1 ( ( short ) Math . min ( a . getRow1 ( ) , a . getRow2 ( ) ) ) ; anchor . setDy1 ( ( short ) Math . min ( a . getDy1 ( ) , a . getDy2 ( ) ) ) ; anchor . setCol2 ( ( short ) Math . max ( a . getCol1 ( ) , a . getCol2 ( ) ) ) ; anchor . setDx2 ( ( short ) Math . max ( a . getDx1 ( ) , a . getDx2 ( ) ) ) ; anchor . setRow2 ( ( short ) Math . max ( a . getRow1 ( ) , a . getRow2 ( ) ) ) ; anchor . setDy2 ( ( short ) Math . max ( a . getDy1 ( ) , a . getDy2 ( ) ) ) ; return anchor ; } else { HSSFChildAnchor a = ( HSSFChildAnchor ) userAnchor ; EscherChildAnchorRecord anchor = new EscherChildAnchorRecord ( ) ; anchor . setRecordId ( EscherChildAnchorRecord . RECORD_ID ) ; anchor . setOptions ( ( short ) 0x0000 ) ; anchor . setDx1 ( ( short ) Math . min ( a . getDx1 ( ) , a . getDx2 ( ) ) ) ; anchor . setDy1 ( ( short ) Math . min ( a . getDy1 ( ) , a . getDy2 ( ) ) ) ; anchor . setDx2 ( ( short ) Math . max ( a . getDx2 ( ) , a . getDx1 ( ) ) ) ; anchor . setDy2 ( ( short ) Math . max ( a . getDy2 ( ) , a . getDy1 ( ) ) ) ; return anchor ; } } } 	1
package org . apache . poi . util ; public class ArrayUtil { public static void arraycopy ( byte [ ] src , int src_position , byte [ ] dst , int dst_position , int length ) { if ( src_position < 0 ) throw new IllegalArgumentException ( "src_position was less than 0.  Actual value " + src_position ) ; if ( src_position >= src . length ) throw new IllegalArgumentException ( "src_position was greater than src array size.  Tried to write starting at position " + src_position + " but the array length is " + src . length ) ; if ( src_position + length > src . length ) throw new IllegalArgumentException ( "src_position + length would overrun the src array.  Expected end at " + ( src_position + length ) + " actual end at " + src . length ) ; if ( dst_position < 0 ) throw new IllegalArgumentException ( "dst_position was less than 0.  Actual value " + dst_position ) ; if ( dst_position >= dst . length ) throw new IllegalArgumentException ( "dst_position was greater than dst array size.  Tried to write starting at position " + dst_position + " but the array length is " + dst . length ) ; if ( dst_position + length > dst . length ) throw new IllegalArgumentException ( "dst_position + length would overrun the dst array.  Expected end at " + ( dst_position + length ) + " actual end at " + dst . length ) ; System . arraycopy ( src , src_position , dst , dst_position , length ) ; } public static void arrayMoveWithin ( Object [ ] array , int moveFrom , int moveTo , int numToMove ) { if ( numToMove <= 0 ) { return ; } if ( moveFrom == moveTo ) { return ; } if ( moveFrom < 0 || moveFrom >= array . length ) { throw new IllegalArgumentException ( "The moveFrom must be a valid array index" ) ; } if ( moveTo < 0 || moveTo >= array . length ) { throw new IllegalArgumentException ( "The moveTo must be a valid array index" ) ; } if ( moveFrom + numToMove > array . length ) { throw new IllegalArgumentException ( "Asked to move more entries than the array has" ) ; } if ( moveTo + numToMove > array . length ) { throw new IllegalArgumentException ( "Asked to move to a position that doesn't have enough space" ) ; } Object [ ] toMove = new Object [ numToMove ] ; System . arraycopy ( array , moveFrom , toMove , 0 , numToMove ) ; Object [ ] toShift ; int shiftTo ; if ( moveFrom > moveTo ) { toShift = new Object [ ( moveFrom - moveTo ) ] ; System . arraycopy ( array , moveTo , toShift , 0 , toShift . length ) ; shiftTo = moveTo + numToMove ; } else { toShift = new Object [ ( moveTo - moveFrom ) ] ; System . arraycopy ( array , moveFrom + numToMove , toShift , 0 , toShift . length ) ; shiftTo = moveFrom ; } System . arraycopy ( toMove , 0 , array , moveTo , toMove . length ) ; System . arraycopy ( toShift , 0 , array , shiftTo , toShift . length ) ; } } 	0
package org . apache . poi . hssf . model ; import org . apache . poi . ddf . * ; import org . apache . poi . hssf . record . * ; import org . apache . poi . hssf . usermodel . * ; public class LineShape extends AbstractShape { private EscherContainerRecord spContainer ; private ObjRecord objRecord ; LineShape ( HSSFSimpleShape hssfShape , int shapeId ) { spContainer = createSpContainer ( hssfShape , shapeId ) ; objRecord = createObjRecord ( hssfShape , shapeId ) ; } private EscherContainerRecord createSpContainer ( HSSFSimpleShape hssfShape , int shapeId ) { HSSFShape shape = hssfShape ; EscherContainerRecord spContainer = new EscherContainerRecord ( ) ; EscherSpRecord sp = new EscherSpRecord ( ) ; EscherOptRecord opt = new EscherOptRecord ( ) ; EscherRecord anchor = new EscherClientAnchorRecord ( ) ; EscherClientDataRecord clientData = new EscherClientDataRecord ( ) ; spContainer . setRecordId ( EscherContainerRecord . SP_CONTAINER ) ; spContainer . setOptions ( ( short ) 0x000F ) ; sp . setRecordId ( EscherSpRecord . RECORD_ID ) ; sp . setOptions ( ( short ) ( ( EscherAggregate . ST_LINE << 4 ) | 0x2 ) ) ; sp . setShapeId ( shapeId ) ; sp . setFlags ( EscherSpRecord . FLAG_HAVEANCHOR | EscherSpRecord . FLAG_HASSHAPETYPE ) ; opt . setRecordId ( EscherOptRecord . RECORD_ID ) ; opt . addEscherProperty ( new EscherShapePathProperty ( EscherProperties . GEOMETRY__SHAPEPATH , EscherShapePathProperty . COMPLEX ) ) ; opt . addEscherProperty ( new EscherBoolProperty ( EscherProperties . LINESTYLE__NOLINEDRAWDASH , 1048592 ) ) ; addStandardOptions ( shape , opt ) ; HSSFAnchor userAnchor = shape . getAnchor ( ) ; if ( userAnchor . isHorizontallyFlipped ( ) ) sp . setFlags ( sp . getFlags ( ) | EscherSpRecord . FLAG_FLIPHORIZ ) ; if ( userAnchor . isVerticallyFlipped ( ) ) sp . setFlags ( sp . getFlags ( ) | EscherSpRecord . FLAG_FLIPVERT ) ; anchor = createAnchor ( userAnchor ) ; clientData . setRecordId ( EscherClientDataRecord . RECORD_ID ) ; clientData . setOptions ( ( short ) 0x0000 ) ; spContainer . addChildRecord ( sp ) ; spContainer . addChildRecord ( opt ) ; spContainer . addChildRecord ( anchor ) ; spContainer . addChildRecord ( clientData ) ; return spContainer ; } private ObjRecord createObjRecord ( HSSFShape hssfShape , int shapeId ) { HSSFShape shape = hssfShape ; ObjRecord obj = new ObjRecord ( ) ; CommonObjectDataSubRecord c = new CommonObjectDataSubRecord ( ) ; c . setObjectType ( ( short ) ( ( HSSFSimpleShape ) shape ) . getShapeType ( ) ) ; c . setObjectId ( ( short ) ( shapeId ) ) ; c . setLocked ( true ) ; c . setPrintable ( true ) ; c . setAutofill ( true ) ; c . setAutoline ( true ) ; EndSubRecord e = new EndSubRecord ( ) ; obj . addSubRecord ( c ) ; obj . addSubRecord ( e ) ; return obj ; } public EscherContainerRecord getSpContainer ( ) { return spContainer ; } public ObjRecord getObjRecord ( ) { return objRecord ; } } 	1
package org . apache . poi . hssf . record ; import org . apache . poi . util . IntList ; import org . apache . poi . util . LittleEndian ; public class IndexRecord extends Record { public final static short sid = 0x20B ; public final static int DBCELL_CAPACITY = 30 ; public int field_1_zero ; public int field_2_first_row ; public int field_3_last_row_add1 ; public int field_4_zero ; public IntList field_5_dbcells ; public IndexRecord ( ) { } public IndexRecord ( RecordInputStream in ) { super ( in ) ; } protected void validateSid ( short id ) { if ( id != sid ) { throw new RecordFormatException ( "NOT An Index RECORD" ) ; } } protected void fillFields ( RecordInputStream in ) { field_5_dbcells = new IntList ( DBCELL_CAPACITY ) ; field_1_zero = in . readInt ( ) ; field_2_first_row = in . readInt ( ) ; field_3_last_row_add1 = in . readInt ( ) ; field_4_zero = in . readInt ( ) ; while ( in . remaining ( ) > 0 ) { field_5_dbcells . add ( in . readInt ( ) ) ; } } public void setFirstRow ( int row ) { field_2_first_row = row ; } public void setLastRowAdd1 ( int row ) { field_3_last_row_add1 = row ; } public void addDbcell ( int cell ) { if ( field_5_dbcells == null ) { field_5_dbcells = new IntList ( ) ; } field_5_dbcells . add ( cell ) ; } public void setDbcell ( int cell , int value ) { field_5_dbcells . set ( cell , value ) ; } public int getFirstRow ( ) { return field_2_first_row ; } public int getLastRowAdd1 ( ) { return field_3_last_row_add1 ; } public int getNumDbcells ( ) { if ( field_5_dbcells == null ) { return 0 ; } return field_5_dbcells . size ( ) ; } public int getDbcellAt ( int cellnum ) { return field_5_dbcells . get ( cellnum ) ; } public String toString ( ) { StringBuffer buffer = new StringBuffer ( ) ; buffer . append ( "[INDEX]\n" ) ; buffer . append ( "    .firstrow       = " ) . append ( Integer . toHexString ( getFirstRow ( ) ) ) . append ( "\n" ) ; buffer . append ( "    .lastrowadd1    = " ) . append ( Integer . toHexString ( getLastRowAdd1 ( ) ) ) . append ( "\n" ) ; for ( int k = 0 ; k < getNumDbcells ( ) ; k ++ ) { buffer . append ( "    .dbcell_" + k + "       = " ) . append ( Integer . toHexString ( getDbcellAt ( k ) ) ) . append ( "\n" ) ; } buffer . append ( "[/INDEX]\n" ) ; return buffer . toString ( ) ; } public int serialize ( int offset , byte [ ] data ) { LittleEndian . putShort ( data , 0 + offset , sid ) ; LittleEndian . putShort ( data , 2 + offset , ( short ) ( 16 + ( getNumDbcells ( ) * 4 ) ) ) ; LittleEndian . putInt ( data , 4 + offset , 0 ) ; LittleEndian . putInt ( data , 8 + offset , getFirstRow ( ) ) ; LittleEndian . putInt ( data , 12 + offset , getLastRowAdd1 ( ) ) ; LittleEndian . putInt ( data , 16 + offset , 0 ) ; for ( int k = 0 ; k < getNumDbcells ( ) ; k ++ ) { LittleEndian . putInt ( data , ( k * 4 ) + 20 + offset , getDbcellAt ( k ) ) ; } return getRecordSize ( ) ; } public int getRecordSize ( ) { return 20 + ( getNumDbcells ( ) * 4 ) ; } public static int getRecordSizeForBlockCount ( int blockCount ) { return 20 + ( 4 * blockCount ) ; } public short getSid ( ) { return sid ; } public Object clone ( ) { IndexRecord rec = new IndexRecord ( ) ; rec . field_1_zero = field_1_zero ; rec . field_2_first_row = field_2_first_row ; rec . field_3_last_row_add1 = field_3_last_row_add1 ; rec . field_4_zero = field_4_zero ; rec . field_5_dbcells = new IntList ( ) ; rec . field_5_dbcells . addAll ( field_5_dbcells ) ; return rec ; } } 	1
package org . apache . poi . hpsf ; public class WritingNotSupportedException extends UnsupportedVariantTypeException { public WritingNotSupportedException ( final long variantType , final Object value ) { super ( variantType , value ) ; } } 	0
package org . apache . poi . hssf . record ; import org . apache . poi . util . BitField ; import org . apache . poi . util . BitFieldFactory ; import org . apache . poi . util . LittleEndian ; public class WindowTwoRecord extends Record { public final static short sid = 0x23e ; private short field_1_options ; private BitField displayFormulas = BitFieldFactory . getInstance ( 0x01 ) ; private BitField displayGridlines = BitFieldFactory . getInstance ( 0x02 ) ; private BitField displayRowColHeadings = BitFieldFactory . getInstance ( 0x04 ) ; private BitField freezePanes = BitFieldFactory . getInstance ( 0x08 ) ; private BitField displayZeros = BitFieldFactory . getInstance ( 0x10 ) ; private BitField defaultHeader = BitFieldFactory . getInstance ( 0x20 ) ; private BitField arabic = BitFieldFactory . getInstance ( 0x40 ) ; private BitField displayGuts = BitFieldFactory . getInstance ( 0x80 ) ; private BitField freezePanesNoSplit = BitFieldFactory . getInstance ( 0x100 ) ; private BitField selected = BitFieldFactory . getInstance ( 0x200 ) ; private BitField paged = BitFieldFactory . getInstance ( 0x400 ) ; private BitField savedInPageBreakPreview = BitFieldFactory . getInstance ( 0x800 ) ; private short field_2_top_row ; private short field_3_left_col ; private int field_4_header_color ; private short field_5_page_break_zoom ; private short field_6_normal_zoom ; private int field_7_reserved ; public WindowTwoRecord ( ) { } public WindowTwoRecord ( RecordInputStream in ) { super ( in ) ; } protected void validateSid ( short id ) { if ( id != sid ) { throw new RecordFormatException ( "NOT A valid WindowTwo RECORD" ) ; } } protected void fillFields ( RecordInputStream in ) { int size = in . remaining ( ) ; field_1_options = in . readShort ( ) ; field_2_top_row = in . readShort ( ) ; field_3_left_col = in . readShort ( ) ; field_4_header_color = in . readInt ( ) ; if ( size > 10 ) { field_5_page_break_zoom = in . readShort ( ) ; field_6_normal_zoom = in . readShort ( ) ; } if ( size > 14 ) { field_7_reserved = in . readInt ( ) ; } } public void setOptions ( short options ) { field_1_options = options ; } public void setDisplayFormulas ( boolean formulas ) { field_1_options = displayFormulas . setShortBoolean ( field_1_options , formulas ) ; } public void setDisplayGridlines ( boolean gridlines ) { field_1_options = displayGridlines . setShortBoolean ( field_1_options , gridlines ) ; } public void setDisplayRowColHeadings ( boolean headings ) { field_1_options = displayRowColHeadings . setShortBoolean ( field_1_options , headings ) ; } public void setFreezePanes ( boolean freezepanes ) { field_1_options = freezePanes . setShortBoolean ( field_1_options , freezepanes ) ; } public void setDisplayZeros ( boolean zeros ) { field_1_options = displayZeros . setShortBoolean ( field_1_options , zeros ) ; } public void setDefaultHeader ( boolean header ) { field_1_options = defaultHeader . setShortBoolean ( field_1_options , header ) ; } public void setArabic ( boolean isarabic ) { field_1_options = arabic . setShortBoolean ( field_1_options , isarabic ) ; } public void setDisplayGuts ( boolean guts ) { field_1_options = displayGuts . setShortBoolean ( field_1_options , guts ) ; } public void setFreezePanesNoSplit ( boolean freeze ) { field_1_options = freezePanesNoSplit . setShortBoolean ( field_1_options , freeze ) ; } public void setSelected ( boolean sel ) { field_1_options = selected . setShortBoolean ( field_1_options , sel ) ; } public void setPaged ( boolean p ) { field_1_options = paged . setShortBoolean ( field_1_options , p ) ; } public void setSavedInPageBreakPreview ( boolean p ) { field_1_options = savedInPageBreakPreview . setShortBoolean ( field_1_options , p ) ; } public void setTopRow ( short topRow ) { field_2_top_row = topRow ; } public void setLeftCol ( short leftCol ) { field_3_left_col = leftCol ; } public void setHeaderColor ( int color ) { field_4_header_color = color ; } public void setPageBreakZoom ( short zoom ) { field_5_page_break_zoom = zoom ; } public void setNormalZoom ( short zoom ) { field_6_normal_zoom = zoom ; } public void setReserved ( int reserved ) { field_7_reserved = reserved ; } public short getOptions ( ) { return field_1_options ; } public boolean getDisplayFormulas ( ) { return displayFormulas . isSet ( field_1_options ) ; } public boolean getDisplayGridlines ( ) { return displayGridlines . isSet ( field_1_options ) ; } public boolean getDisplayRowColHeadings ( ) { return displayRowColHeadings . isSet ( field_1_options ) ; } public boolean getFreezePanes ( ) { return freezePanes . isSet ( field_1_options ) ; } public boolean getDisplayZeros ( ) { return displayZeros . isSet ( field_1_options ) ; } public boolean getDefaultHeader ( ) { return defaultHeader . isSet ( field_1_options ) ; } public boolean getArabic ( ) { return arabic . isSet ( field_1_options ) ; } public boolean getDisplayGuts ( ) { return displayGuts . isSet ( field_1_options ) ; } public boolean getFreezePanesNoSplit ( ) { return freezePanesNoSplit . isSet ( field_1_options ) ; } public boolean getSelected ( ) { return selected . isSet ( field_1_options ) ; } public boolean getPaged ( ) { return paged . isSet ( field_1_options ) ; } public boolean getSavedInPageBreakPreview ( ) { return savedInPageBreakPreview . isSet ( field_1_options ) ; } public short getTopRow ( ) { return field_2_top_row ; } public short getLeftCol ( ) { return field_3_left_col ; } public int getHeaderColor ( ) { return field_4_header_color ; } public short getPageBreakZoom ( ) { return field_5_page_break_zoom ; } public short getNormalZoom ( ) { return field_6_normal_zoom ; } public int getReserved ( ) { return field_7_reserved ; } public String toString ( ) { StringBuffer buffer = new StringBuffer ( ) ; buffer . append ( "[WINDOW2]\n" ) ; buffer . append ( "    .options        = " ) . append ( Integer . toHexString ( getOptions ( ) ) ) . append ( "\n" ) ; buffer . append ( "       .dispformulas= " ) . append ( getDisplayFormulas ( ) ) . append ( "\n" ) ; buffer . append ( "       .dispgridlins= " ) . append ( getDisplayGridlines ( ) ) . append ( "\n" ) ; buffer . append ( "       .disprcheadin= " ) . append ( getDisplayRowColHeadings ( ) ) . append ( "\n" ) ; buffer . append ( "       .freezepanes = " ) . append ( getFreezePanes ( ) ) . append ( "\n" ) ; buffer . append ( "       .displayzeros= " ) . append ( getDisplayZeros ( ) ) . append ( "\n" ) ; buffer . append ( "       .defaultheadr= " ) . append ( getDefaultHeader ( ) ) . append ( "\n" ) ; buffer . append ( "       .arabic      = " ) . append ( getArabic ( ) ) . append ( "\n" ) ; buffer . append ( "       .displayguts = " ) . append ( getDisplayGuts ( ) ) . append ( "\n" ) ; buffer . append ( "       .frzpnsnosplt= " ) . append ( getFreezePanesNoSplit ( ) ) . append ( "\n" ) ; buffer . append ( "       .selected    = " ) . append ( getSelected ( ) ) . append ( "\n" ) ; buffer . append ( "       .paged       = " ) . append ( getPaged ( ) ) . append ( "\n" ) ; buffer . append ( "       .svdinpgbrkpv= " ) . append ( getSavedInPageBreakPreview ( ) ) . append ( "\n" ) ; buffer . append ( "    .toprow         = " ) . append ( Integer . toHexString ( getTopRow ( ) ) ) . append ( "\n" ) ; buffer . append ( "    .leftcol        = " ) . append ( Integer . toHexString ( getLeftCol ( ) ) ) . append ( "\n" ) ; buffer . append ( "    .headercolor    = " ) . append ( Integer . toHexString ( getHeaderColor ( ) ) ) . append ( "\n" ) ; buffer . append ( "    .pagebreakzoom  = " ) . append ( Integer . toHexString ( getPageBreakZoom ( ) ) ) . append ( "\n" ) ; buffer . append ( "    .normalzoom     = " ) . append ( Integer . toHexString ( getNormalZoom ( ) ) ) . append ( "\n" ) ; buffer . append ( "    .reserved       = " ) . append ( Integer . toHexString ( getReserved ( ) ) ) . append ( "\n" ) ; buffer . append ( "[/WINDOW2]\n" ) ; return buffer . toString ( ) ; } public int serialize ( int offset , byte [ ] data ) { LittleEndian . putShort ( data , 0 + offset , sid ) ; LittleEndian . putShort ( data , 2 + offset , ( short ) 18 ) ; LittleEndian . putShort ( data , 4 + offset , getOptions ( ) ) ; LittleEndian . putShort ( data , 6 + offset , getTopRow ( ) ) ; LittleEndian . putShort ( data , 8 + offset , getLeftCol ( ) ) ; LittleEndian . putInt ( data , 10 + offset , getHeaderColor ( ) ) ; LittleEndian . putShort ( data , 14 + offset , getPageBreakZoom ( ) ) ; LittleEndian . putShort ( data , 16 + offset , getNormalZoom ( ) ) ; LittleEndian . putInt ( data , 18 + offset , getReserved ( ) ) ; return getRecordSize ( ) ; } public int getRecordSize ( ) { return 22 ; } public short getSid ( ) { return sid ; } public Object clone ( ) { WindowTwoRecord rec = new WindowTwoRecord ( ) ; rec . field_1_options = field_1_options ; rec . field_2_top_row = field_2_top_row ; rec . field_3_left_col = field_3_left_col ; rec . field_4_header_color = field_4_header_color ; rec . field_5_page_break_zoom = field_5_page_break_zoom ; rec . field_6_normal_zoom = field_6_normal_zoom ; rec . field_7_reserved = field_7_reserved ; return rec ; } } 	1
package org . apache . poi . poifs . storage ; import java . io . IOException ; import java . util . * ; import org . apache . poi . poifs . common . POIFSConstants ; import org . apache . poi . util . IntList ; import org . apache . poi . util . LittleEndian ; import org . apache . poi . util . LittleEndianConsts ; public class BlockAllocationTableReader { private IntList _entries ; public BlockAllocationTableReader ( final int block_count , final int [ ] block_array , final int xbat_count , final int xbat_index , final BlockList raw_block_list ) throws IOException { this ( ) ; if ( block_count <= 0 ) { throw new IOException ( "Illegal block count; minimum count is 1, got " + block_count + " instead" ) ; } RawDataBlock blocks [ ] = new RawDataBlock [ block_count ] ; int limit = Math . min ( block_count , block_array . length ) ; int block_index ; for ( block_index = 0 ; block_index < limit ; block_index ++ ) { blocks [ block_index ] = ( RawDataBlock ) raw_block_list . remove ( block_array [ block_index ] ) ; } if ( block_index < block_count ) { if ( xbat_index < 0 ) { throw new IOException ( "BAT count exceeds limit, yet XBAT index indicates no valid entries" ) ; } int chain_index = xbat_index ; int max_entries_per_block = BATBlock . entriesPerXBATBlock ( ) ; int chain_index_offset = BATBlock . getXBATChainOffset ( ) ; for ( int j = 0 ; j < xbat_count ; j ++ ) { limit = Math . min ( block_count - block_index , max_entries_per_block ) ; byte [ ] data = raw_block_list . remove ( chain_index ) . getData ( ) ; int offset = 0 ; for ( int k = 0 ; k < limit ; k ++ ) { blocks [ block_index ++ ] = ( RawDataBlock ) raw_block_list . remove ( LittleEndian . getInt ( data , offset ) ) ; offset += LittleEndianConsts . INT_SIZE ; } chain_index = LittleEndian . getInt ( data , chain_index_offset ) ; if ( chain_index == POIFSConstants . END_OF_CHAIN ) { break ; } } } if ( block_index != block_count ) { throw new IOException ( "Could not find all blocks" ) ; } setEntries ( blocks , raw_block_list ) ; } BlockAllocationTableReader ( final ListManagedBlock [ ] blocks , final BlockList raw_block_list ) throws IOException { this ( ) ; setEntries ( blocks , raw_block_list ) ; } BlockAllocationTableReader ( ) { _entries = new IntList ( ) ; } ListManagedBlock [ ] fetchBlocks ( final int startBlock , final BlockList blockList ) throws IOException { List blocks = new ArrayList ( ) ; int currentBlock = startBlock ; while ( currentBlock != POIFSConstants . END_OF_CHAIN ) { blocks . add ( blockList . remove ( currentBlock ) ) ; currentBlock = _entries . get ( currentBlock ) ; } return ( ListManagedBlock [ ] ) blocks . toArray ( new ListManagedBlock [ 0 ] ) ; } boolean isUsed ( final int index ) { boolean rval = false ; try { rval = _entries . get ( index ) != - 1 ; } catch ( IndexOutOfBoundsException ignored ) { } return rval ; } int getNextBlockIndex ( final int index ) throws IOException { if ( isUsed ( index ) ) { return _entries . get ( index ) ; } else { throw new IOException ( "index " + index + " is unused" ) ; } } private void setEntries ( final ListManagedBlock [ ] blocks , final BlockList raw_blocks ) throws IOException { int limit = BATBlock . entriesPerBlock ( ) ; for ( int block_index = 0 ; block_index < blocks . length ; block_index ++ ) { byte [ ] data = blocks [ block_index ] . getData ( ) ; int offset = 0 ; for ( int k = 0 ; k < limit ; k ++ ) { int entry = LittleEndian . getInt ( data , offset ) ; if ( entry == POIFSConstants . UNUSED_BLOCK ) { raw_blocks . zap ( _entries . size ( ) ) ; } _entries . add ( entry ) ; offset += LittleEndianConsts . INT_SIZE ; } blocks [ block_index ] = null ; } raw_blocks . setBAT ( this ) ; } } 	1
package org . apache . poi . hpsf ; public class UnexpectedPropertySetTypeException extends HPSFException { public UnexpectedPropertySetTypeException ( ) { super ( ) ; } public UnexpectedPropertySetTypeException ( final String msg ) { super ( msg ) ; } public UnexpectedPropertySetTypeException ( final Throwable reason ) { super ( reason ) ; } public UnexpectedPropertySetTypeException ( final String msg , final Throwable reason ) { super ( msg , reason ) ; } } 	0
package org . apache . poi . util ; import java . util . * ; public final class BinaryTree extends AbstractMap { private Node [ ] _root = new Node [ ] { null , null } ; private int _size = 0 ; private int _modifications = 0 ; private Set [ ] _key_set = new Set [ ] { null , null } ; private Set [ ] _entry_set = new Set [ ] { null , null } ; private Collection [ ] _value_collection = new Collection [ ] { null , null } ; private static final int _KEY = 0 ; private static final int _VALUE = 1 ; private static final int _INDEX_SUM = _KEY + _VALUE ; private static final int _MINIMUM_INDEX = 0 ; private static final int _INDEX_COUNT = 2 ; private static final String [ ] _data_name = new String [ ] { "key" , "value" } ; public BinaryTree ( ) { } public BinaryTree ( final Map map ) throws ClassCastException , NullPointerException , IllegalArgumentException { putAll ( map ) ; } public Object getKeyForValue ( final Object value ) throws ClassCastException , NullPointerException { return doGet ( ( Comparable ) value , _VALUE ) ; } public Object removeValue ( final Object value ) { return doRemove ( ( Comparable ) value , _VALUE ) ; } public Set entrySetByValue ( ) { if ( _entry_set [ _VALUE ] == null ) { _entry_set [ _VALUE ] = new AbstractSet ( ) { public Iterator iterator ( ) { return new BinaryTreeIterator ( _VALUE ) { protected Object doGetNext ( ) { return _last_returned_node ; } } ; } public boolean contains ( Object o ) { if ( ! ( o instanceof Map . Entry ) ) { return false ; } Map . Entry entry = ( Map . Entry ) o ; Object key = entry . getKey ( ) ; Node node = lookup ( ( Comparable ) entry . getValue ( ) , _VALUE ) ; return ( node != null ) && node . getData ( _KEY ) . equals ( key ) ; } public boolean remove ( Object o ) { if ( ! ( o instanceof Map . Entry ) ) { return false ; } Map . Entry entry = ( Map . Entry ) o ; Object key = entry . getKey ( ) ; Node node = lookup ( ( Comparable ) entry . getValue ( ) , _VALUE ) ; if ( ( node != null ) && node . getData ( _KEY ) . equals ( key ) ) { doRedBlackDelete ( node ) ; return true ; } return false ; } public int size ( ) { return BinaryTree . this . size ( ) ; } public void clear ( ) { BinaryTree . this . clear ( ) ; } } ; } return _entry_set [ _VALUE ] ; } public Set keySetByValue ( ) { if ( _key_set [ _VALUE ] == null ) { _key_set [ _VALUE ] = new AbstractSet ( ) { public Iterator iterator ( ) { return new BinaryTreeIterator ( _VALUE ) { protected Object doGetNext ( ) { return _last_returned_node . getData ( _KEY ) ; } } ; } public int size ( ) { return BinaryTree . this . size ( ) ; } public boolean contains ( Object o ) { return containsKey ( o ) ; } public boolean remove ( Object o ) { int old_size = _size ; BinaryTree . this . remove ( o ) ; return _size != old_size ; } public void clear ( ) { BinaryTree . this . clear ( ) ; } } ; } return _key_set [ _VALUE ] ; } public Collection valuesByValue ( ) { if ( _value_collection [ _VALUE ] == null ) { _value_collection [ _VALUE ] = new AbstractCollection ( ) { public Iterator iterator ( ) { return new BinaryTreeIterator ( _VALUE ) { protected Object doGetNext ( ) { return _last_returned_node . getData ( _VALUE ) ; } } ; } public int size ( ) { return BinaryTree . this . size ( ) ; } public boolean contains ( Object o ) { return containsValue ( o ) ; } public boolean remove ( Object o ) { int old_size = _size ; removeValue ( o ) ; return _size != old_size ; } public boolean removeAll ( Collection c ) { boolean modified = false ; Iterator iter = c . iterator ( ) ; while ( iter . hasNext ( ) ) { if ( removeValue ( iter . next ( ) ) != null ) { modified = true ; } } return modified ; } public void clear ( ) { BinaryTree . this . clear ( ) ; } } ; } return _value_collection [ _VALUE ] ; } private Object doRemove ( final Comparable o , final int index ) { Node node = lookup ( o , index ) ; Object rval = null ; if ( node != null ) { rval = node . getData ( oppositeIndex ( index ) ) ; doRedBlackDelete ( node ) ; } return rval ; } private Object doGet ( final Comparable o , final int index ) { checkNonNullComparable ( o , index ) ; Node node = lookup ( o , index ) ; return ( ( node == null ) ? null : node . getData ( oppositeIndex ( index ) ) ) ; } private int oppositeIndex ( final int index ) { return _INDEX_SUM - index ; } private Node lookup ( final Comparable data , final int index ) { Node rval = null ; Node node = _root [ index ] ; while ( node != null ) { int cmp = compare ( data , node . getData ( index ) ) ; if ( cmp == 0 ) { rval = node ; break ; } else { node = ( cmp < 0 ) ? node . getLeft ( index ) : node . getRight ( index ) ; } } return rval ; } private static int compare ( final Comparable o1 , final Comparable o2 ) { return ( ( Comparable ) o1 ) . compareTo ( o2 ) ; } private static Node leastNode ( final Node node , final int index ) { Node rval = node ; if ( rval != null ) { while ( rval . getLeft ( index ) != null ) { rval = rval . getLeft ( index ) ; } } return rval ; } private Node nextGreater ( final Node node , final int index ) { Node rval = null ; if ( node == null ) { rval = null ; } else if ( node . getRight ( index ) != null ) { rval = leastNode ( node . getRight ( index ) , index ) ; } else { Node parent = node . getParent ( index ) ; Node child = node ; while ( ( parent != null ) && ( child == parent . getRight ( index ) ) ) { child = parent ; parent = parent . getParent ( index ) ; } rval = parent ; } return rval ; } private static void copyColor ( final Node from , final Node to , final int index ) { if ( to != null ) { if ( from == null ) { to . setBlack ( index ) ; } else { to . copyColor ( from , index ) ; } } } private static boolean isRed ( final Node node , final int index ) { return ( ( node == null ) ? false : node . isRed ( index ) ) ; } private static boolean isBlack ( final Node node , final int index ) { return ( ( node == null ) ? true : node . isBlack ( index ) ) ; } private static void makeRed ( final Node node , final int index ) { if ( node != null ) { node . setRed ( index ) ; } } private static void makeBlack ( final Node node , final int index ) { if ( node != null ) { node . setBlack ( index ) ; } } private static Node getGrandParent ( final Node node , final int index ) { return getParent ( getParent ( node , index ) , index ) ; } private static Node getParent ( final Node node , final int index ) { return ( ( node == null ) ? null : node . getParent ( index ) ) ; } private static Node getRightChild ( final Node node , final int index ) { return ( node == null ) ? null : node . getRight ( index ) ; } private static Node getLeftChild ( final Node node , final int index ) { return ( node == null ) ? null : node . getLeft ( index ) ; } private static boolean isLeftChild ( final Node node , final int index ) { return ( node == null ) ? true : ( ( node . getParent ( index ) == null ) ? false : ( node == node . getParent ( index ) . getLeft ( index ) ) ) ; } private static boolean isRightChild ( final Node node , final int index ) { return ( node == null ) ? true : ( ( node . getParent ( index ) == null ) ? false : ( node == node . getParent ( index ) . getRight ( index ) ) ) ; } private void rotateLeft ( final Node node , final int index ) { Node right_child = node . getRight ( index ) ; node . setRight ( right_child . getLeft ( index ) , index ) ; if ( right_child . getLeft ( index ) != null ) { right_child . getLeft ( index ) . setParent ( node , index ) ; } right_child . setParent ( node . getParent ( index ) , index ) ; if ( node . getParent ( index ) == null ) { _root [ index ] = right_child ; } else if ( node . getParent ( index ) . getLeft ( index ) == node ) { node . getParent ( index ) . setLeft ( right_child , index ) ; } else { node . getParent ( index ) . setRight ( right_child , index ) ; } right_child . setLeft ( node , index ) ; node . setParent ( right_child , index ) ; } private void rotateRight ( final Node node , final int index ) { Node left_child = node . getLeft ( index ) ; node . setLeft ( left_child . getRight ( index ) , index ) ; if ( left_child . getRight ( index ) != null ) { left_child . getRight ( index ) . setParent ( node , index ) ; } left_child . setParent ( node . getParent ( index ) , index ) ; if ( node . getParent ( index ) == null ) { _root [ index ] = left_child ; } else if ( node . getParent ( index ) . getRight ( index ) == node ) { node . getParent ( index ) . setRight ( left_child , index ) ; } else { node . getParent ( index ) . setLeft ( left_child , index ) ; } left_child . setRight ( node , index ) ; node . setParent ( left_child , index ) ; } private void doRedBlackInsert ( final Node inserted_node , final int index ) { Node current_node = inserted_node ; makeRed ( current_node , index ) ; while ( ( current_node != null ) && ( current_node != _root [ index ] ) && ( isRed ( current_node . getParent ( index ) , index ) ) ) { if ( isLeftChild ( getParent ( current_node , index ) , index ) ) { Node y = getRightChild ( getGrandParent ( current_node , index ) , index ) ; if ( isRed ( y , index ) ) { makeBlack ( getParent ( current_node , index ) , index ) ; makeBlack ( y , index ) ; makeRed ( getGrandParent ( current_node , index ) , index ) ; current_node = getGrandParent ( current_node , index ) ; } else { if ( isRightChild ( current_node , index ) ) { current_node = getParent ( current_node , index ) ; rotateLeft ( current_node , index ) ; } makeBlack ( getParent ( current_node , index ) , index ) ; makeRed ( getGrandParent ( current_node , index ) , index ) ; if ( getGrandParent ( current_node , index ) != null ) { rotateRight ( getGrandParent ( current_node , index ) , index ) ; } } } else { Node y = getLeftChild ( getGrandParent ( current_node , index ) , index ) ; if ( isRed ( y , index ) ) { makeBlack ( getParent ( current_node , index ) , index ) ; makeBlack ( y , index ) ; makeRed ( getGrandParent ( current_node , index ) , index ) ; current_node = getGrandParent ( current_node , index ) ; } else { if ( isLeftChild ( current_node , index ) ) { current_node = getParent ( current_node , index ) ; rotateRight ( current_node , index ) ; } makeBlack ( getParent ( current_node , index ) , index ) ; makeRed ( getGrandParent ( current_node , index ) , index ) ; if ( getGrandParent ( current_node , index ) != null ) { rotateLeft ( getGrandParent ( current_node , index ) , index ) ; } } } } makeBlack ( _root [ index ] , index ) ; } private void doRedBlackDelete ( final Node deleted_node ) { for ( int index = _MINIMUM_INDEX ; index < _INDEX_COUNT ; index ++ ) { if ( ( deleted_node . getLeft ( index ) != null ) && ( deleted_node . getRight ( index ) != null ) ) { swapPosition ( nextGreater ( deleted_node , index ) , deleted_node , index ) ; } Node replacement = ( ( deleted_node . getLeft ( index ) != null ) ? deleted_node . getLeft ( index ) : deleted_node . getRight ( index ) ) ; if ( replacement != null ) { replacement . setParent ( deleted_node . getParent ( index ) , index ) ; if ( deleted_node . getParent ( index ) == null ) { _root [ index ] = replacement ; } else if ( deleted_node == deleted_node . getParent ( index ) . getLeft ( index ) ) { deleted_node . getParent ( index ) . setLeft ( replacement , index ) ; } else { deleted_node . getParent ( index ) . setRight ( replacement , index ) ; } deleted_node . setLeft ( null , index ) ; deleted_node . setRight ( null , index ) ; deleted_node . setParent ( null , index ) ; if ( isBlack ( deleted_node , index ) ) { doRedBlackDeleteFixup ( replacement , index ) ; } } else { if ( deleted_node . getParent ( index ) == null ) { _root [ index ] = null ; } else { if ( isBlack ( deleted_node , index ) ) { doRedBlackDeleteFixup ( deleted_node , index ) ; } if ( deleted_node . getParent ( index ) != null ) { if ( deleted_node == deleted_node . getParent ( index ) . getLeft ( index ) ) { deleted_node . getParent ( index ) . setLeft ( null , index ) ; } else { deleted_node . getParent ( index ) . setRight ( null , index ) ; } deleted_node . setParent ( null , index ) ; } } } } shrink ( ) ; } private void doRedBlackDeleteFixup ( final Node replacement_node , final int index ) { Node current_node = replacement_node ; while ( ( current_node != _root [ index ] ) && ( isBlack ( current_node , index ) ) ) { if ( isLeftChild ( current_node , index ) ) { Node sibling_node = getRightChild ( getParent ( current_node , index ) , index ) ; if ( isRed ( sibling_node , index ) ) { makeBlack ( sibling_node , index ) ; makeRed ( getParent ( current_node , index ) , index ) ; rotateLeft ( getParent ( current_node , index ) , index ) ; sibling_node = getRightChild ( getParent ( current_node , index ) , index ) ; } if ( isBlack ( getLeftChild ( sibling_node , index ) , index ) && isBlack ( getRightChild ( sibling_node , index ) , index ) ) { makeRed ( sibling_node , index ) ; current_node = getParent ( current_node , index ) ; } else { if ( isBlack ( getRightChild ( sibling_node , index ) , index ) ) { makeBlack ( getLeftChild ( sibling_node , index ) , index ) ; makeRed ( sibling_node , index ) ; rotateRight ( sibling_node , index ) ; sibling_node = getRightChild ( getParent ( current_node , index ) , index ) ; } copyColor ( getParent ( current_node , index ) , sibling_node , index ) ; makeBlack ( getParent ( current_node , index ) , index ) ; makeBlack ( getRightChild ( sibling_node , index ) , index ) ; rotateLeft ( getParent ( current_node , index ) , index ) ; current_node = _root [ index ] ; } } else { Node sibling_node = getLeftChild ( getParent ( current_node , index ) , index ) ; if ( isRed ( sibling_node , index ) ) { makeBlack ( sibling_node , index ) ; makeRed ( getParent ( current_node , index ) , index ) ; rotateRight ( getParent ( current_node , index ) , index ) ; sibling_node = getLeftChild ( getParent ( current_node , index ) , index ) ; } if ( isBlack ( getRightChild ( sibling_node , index ) , index ) && isBlack ( getLeftChild ( sibling_node , index ) , index ) ) { makeRed ( sibling_node , index ) ; current_node = getParent ( current_node , index ) ; } else { if ( isBlack ( getLeftChild ( sibling_node , index ) , index ) ) { makeBlack ( getRightChild ( sibling_node , index ) , index ) ; makeRed ( sibling_node , index ) ; rotateLeft ( sibling_node , index ) ; sibling_node = getLeftChild ( getParent ( current_node , index ) , index ) ; } copyColor ( getParent ( current_node , index ) , sibling_node , index ) ; makeBlack ( getParent ( current_node , index ) , index ) ; makeBlack ( getLeftChild ( sibling_node , index ) , index ) ; rotateRight ( getParent ( current_node , index ) , index ) ; current_node = _root [ index ] ; } } } makeBlack ( current_node , index ) ; } private void swapPosition ( final Node x , final Node y , final int index ) { Node x_old_parent = x . getParent ( index ) ; Node x_old_left_child = x . getLeft ( index ) ; Node x_old_right_child = x . getRight ( index ) ; Node y_old_parent = y . getParent ( index ) ; Node y_old_left_child = y . getLeft ( index ) ; Node y_old_right_child = y . getRight ( index ) ; boolean x_was_left_child = ( x . getParent ( index ) != null ) && ( x == x . getParent ( index ) . getLeft ( index ) ) ; boolean y_was_left_child = ( y . getParent ( index ) != null ) && ( y == y . getParent ( index ) . getLeft ( index ) ) ; if ( x == y_old_parent ) { x . setParent ( y , index ) ; if ( y_was_left_child ) { y . setLeft ( x , index ) ; y . setRight ( x_old_right_child , index ) ; } else { y . setRight ( x , index ) ; y . setLeft ( x_old_left_child , index ) ; } } else { x . setParent ( y_old_parent , index ) ; if ( y_old_parent != null ) { if ( y_was_left_child ) { y_old_parent . setLeft ( x , index ) ; } else { y_old_parent . setRight ( x , index ) ; } } y . setLeft ( x_old_left_child , index ) ; y . setRight ( x_old_right_child , index ) ; } if ( y == x_old_parent ) { y . setParent ( x , index ) ; if ( x_was_left_child ) { x . setLeft ( y , index ) ; x . setRight ( y_old_right_child , index ) ; } else { x . setRight ( y , index ) ; x . setLeft ( y_old_left_child , index ) ; } } else { y . setParent ( x_old_parent , index ) ; if ( x_old_parent != null ) { if ( x_was_left_child ) { x_old_parent . setLeft ( y , index ) ; } else { x_old_parent . setRight ( y , index ) ; } } x . setLeft ( y_old_left_child , index ) ; x . setRight ( y_old_right_child , index ) ; } if ( x . getLeft ( index ) != null ) { x . getLeft ( index ) . setParent ( x , index ) ; } if ( x . getRight ( index ) != null ) { x . getRight ( index ) . setParent ( x , index ) ; } if ( y . getLeft ( index ) != null ) { y . getLeft ( index ) . setParent ( y , index ) ; } if ( y . getRight ( index ) != null ) { y . getRight ( index ) . setParent ( y , index ) ; } x . swapColors ( y , index ) ; if ( _root [ index ] == x ) { _root [ index ] = y ; } else if ( _root [ index ] == y ) { _root [ index ] = x ; } } private static void checkNonNullComparable ( final Object o , final int index ) { if ( o == null ) { throw new NullPointerException ( _data_name [ index ] + " cannot be null" ) ; } if ( ! ( o instanceof Comparable ) ) { throw new ClassCastException ( _data_name [ index ] + " must be Comparable" ) ; } } private static void checkKey ( final Object key ) { checkNonNullComparable ( key , _KEY ) ; } private static void checkValue ( final Object value ) { checkNonNullComparable ( value , _VALUE ) ; } private static void checkKeyAndValue ( final Object key , final Object value ) { checkKey ( key ) ; checkValue ( value ) ; } private void modify ( ) { _modifications ++ ; } private void grow ( ) { modify ( ) ; _size ++ ; } private void shrink ( ) { modify ( ) ; _size -- ; } private void insertValue ( final Node newNode ) throws IllegalArgumentException { Node node = _root [ _VALUE ] ; while ( true ) { int cmp = compare ( newNode . getData ( _VALUE ) , node . getData ( _VALUE ) ) ; if ( cmp == 0 ) { throw new IllegalArgumentException ( "Cannot store a duplicate value (\"" + newNode . getData ( _VALUE ) + "\") in this Map" ) ; } else if ( cmp < 0 ) { if ( node . getLeft ( _VALUE ) != null ) { node = node . getLeft ( _VALUE ) ; } else { node . setLeft ( newNode , _VALUE ) ; newNode . setParent ( node , _VALUE ) ; doRedBlackInsert ( newNode , _VALUE ) ; break ; } } else { if ( node . getRight ( _VALUE ) != null ) { node = node . getRight ( _VALUE ) ; } else { node . setRight ( newNode , _VALUE ) ; newNode . setParent ( node , _VALUE ) ; doRedBlackInsert ( newNode , _VALUE ) ; break ; } } } } public int size ( ) { return _size ; } public boolean containsKey ( final Object key ) throws ClassCastException , NullPointerException { checkKey ( key ) ; return lookup ( ( Comparable ) key , _KEY ) != null ; } public boolean containsValue ( final Object value ) { checkValue ( value ) ; return lookup ( ( Comparable ) value , _VALUE ) != null ; } public Object get ( final Object key ) throws ClassCastException , NullPointerException { return doGet ( ( Comparable ) key , _KEY ) ; } public Object put ( final Object key , final Object value ) throws ClassCastException , NullPointerException , IllegalArgumentException { checkKeyAndValue ( key , value ) ; Node node = _root [ _KEY ] ; if ( node == null ) { Node root = new Node ( ( Comparable ) key , ( Comparable ) value ) ; _root [ _KEY ] = root ; _root [ _VALUE ] = root ; grow ( ) ; } else { while ( true ) { int cmp = compare ( ( Comparable ) key , node . getData ( _KEY ) ) ; if ( cmp == 0 ) { throw new IllegalArgumentException ( "Cannot store a duplicate key (\"" + key + "\") in this Map" ) ; } else if ( cmp < 0 ) { if ( node . getLeft ( _KEY ) != null ) { node = node . getLeft ( _KEY ) ; } else { Node newNode = new Node ( ( Comparable ) key , ( Comparable ) value ) ; insertValue ( newNode ) ; node . setLeft ( newNode , _KEY ) ; newNode . setParent ( node , _KEY ) ; doRedBlackInsert ( newNode , _KEY ) ; grow ( ) ; break ; } } else { if ( node . getRight ( _KEY ) != null ) { node = node . getRight ( _KEY ) ; } else { Node newNode = new Node ( ( Comparable ) key , ( Comparable ) value ) ; insertValue ( newNode ) ; node . setRight ( newNode , _KEY ) ; newNode . setParent ( node , _KEY ) ; doRedBlackInsert ( newNode , _KEY ) ; grow ( ) ; break ; } } } } return null ; } public Object remove ( final Object key ) { return doRemove ( ( Comparable ) key , _KEY ) ; } public void clear ( ) { modify ( ) ; _size = 0 ; _root [ _KEY ] = null ; _root [ _VALUE ] = null ; } public Set keySet ( ) { if ( _key_set [ _KEY ] == null ) { _key_set [ _KEY ] = new AbstractSet ( ) { public Iterator iterator ( ) { return new BinaryTreeIterator ( _KEY ) { protected Object doGetNext ( ) { return _last_returned_node . getData ( _KEY ) ; } } ; } public int size ( ) { return BinaryTree . this . size ( ) ; } public boolean contains ( Object o ) { return containsKey ( o ) ; } public boolean remove ( Object o ) { int old_size = _size ; BinaryTree . this . remove ( o ) ; return _size != old_size ; } public void clear ( ) { BinaryTree . this . clear ( ) ; } } ; } return _key_set [ _KEY ] ; } public Collection values ( ) { if ( _value_collection [ _KEY ] == null ) { _value_collection [ _KEY ] = new AbstractCollection ( ) { public Iterator iterator ( ) { return new BinaryTreeIterator ( _KEY ) { protected Object doGetNext ( ) { return _last_returned_node . getData ( _VALUE ) ; } } ; } public int size ( ) { return BinaryTree . this . size ( ) ; } public boolean contains ( Object o ) { return containsValue ( o ) ; } public boolean remove ( Object o ) { int old_size = _size ; removeValue ( o ) ; return _size != old_size ; } public boolean removeAll ( Collection c ) { boolean modified = false ; Iterator iter = c . iterator ( ) ; while ( iter . hasNext ( ) ) { if ( removeValue ( iter . next ( ) ) != null ) { modified = true ; } } return modified ; } public void clear ( ) { BinaryTree . this . clear ( ) ; } } ; } return _value_collection [ _KEY ] ; } public Set entrySet ( ) { if ( _entry_set [ _KEY ] == null ) { _entry_set [ _KEY ] = new AbstractSet ( ) { public Iterator iterator ( ) { return new BinaryTreeIterator ( _KEY ) { protected Object doGetNext ( ) { return _last_returned_node ; } } ; } public boolean contains ( Object o ) { if ( ! ( o instanceof Map . Entry ) ) { return false ; } Map . Entry entry = ( Map . Entry ) o ; Object value = entry . getValue ( ) ; Node node = lookup ( ( Comparable ) entry . getKey ( ) , _KEY ) ; return ( node != null ) && node . getData ( _VALUE ) . equals ( value ) ; } public boolean remove ( Object o ) { if ( ! ( o instanceof Map . Entry ) ) { return false ; } Map . Entry entry = ( Map . Entry ) o ; Object value = entry . getValue ( ) ; Node node = lookup ( ( Comparable ) entry . getKey ( ) , _KEY ) ; if ( ( node != null ) && node . getData ( _VALUE ) . equals ( value ) ) { doRedBlackDelete ( node ) ; return true ; } return false ; } public int size ( ) { return BinaryTree . this . size ( ) ; } public void clear ( ) { BinaryTree . this . clear ( ) ; } } ; } return _entry_set [ _KEY ] ; } private abstract class BinaryTreeIterator implements Iterator { private int _expected_modifications ; protected Node _last_returned_node ; private Node _next_node ; private int _type ; BinaryTreeIterator ( final int type ) { _type = type ; _expected_modifications = BinaryTree . this . _modifications ; _last_returned_node = null ; _next_node = leastNode ( _root [ _type ] , _type ) ; } protected abstract Object doGetNext ( ) ; public final boolean hasNext ( ) { return _next_node != null ; } public final Object next ( ) throws NoSuchElementException , ConcurrentModificationException { if ( _next_node == null ) { throw new NoSuchElementException ( ) ; } if ( _modifications != _expected_modifications ) { throw new ConcurrentModificationException ( ) ; } _last_returned_node = _next_node ; _next_node = nextGreater ( _next_node , _type ) ; return doGetNext ( ) ; } public final void remove ( ) throws IllegalStateException , ConcurrentModificationException { if ( _last_returned_node == null ) { throw new IllegalStateException ( ) ; } if ( _modifications != _expected_modifications ) { throw new ConcurrentModificationException ( ) ; } doRedBlackDelete ( _last_returned_node ) ; _expected_modifications ++ ; _last_returned_node = null ; } } private static final class Node implements Map . Entry { private Comparable [ ] _data ; private Node [ ] _left ; private Node [ ] _right ; private Node [ ] _parent ; private boolean [ ] _black ; private int _hashcode ; private boolean _calculated_hashcode ; Node ( final Comparable key , final Comparable value ) { _data = new Comparable [ ] { key , value } ; _left = new Node [ ] { null , null } ; _right = new Node [ ] { null , null } ; _parent = new Node [ ] { null , null } ; _black = new boolean [ ] { true , true } ; _calculated_hashcode = false ; } private Comparable getData ( final int index ) { return _data [ index ] ; } private void setLeft ( final Node node , final int index ) { _left [ index ] = node ; } private Node getLeft ( final int index ) { return _left [ index ] ; } private void setRight ( final Node node , final int index ) { _right [ index ] = node ; } private Node getRight ( final int index ) { return _right [ index ] ; } private void setParent ( final Node node , final int index ) { _parent [ index ] = node ; } private Node getParent ( final int index ) { return _parent [ index ] ; } private void swapColors ( final Node node , final int index ) { _black [ index ] ^= node . _black [ index ] ; node . _black [ index ] ^= _black [ index ] ; _black [ index ] ^= node . _black [ index ] ; } private boolean isBlack ( final int index ) { return _black [ index ] ; } private boolean isRed ( final int index ) { return ! _black [ index ] ; } private void setBlack ( final int index ) { _black [ index ] = true ; } private void setRed ( final int index ) { _black [ index ] = false ; } private void copyColor ( final Node node , final int index ) { _black [ index ] = node . _black [ index ] ; } public Object getKey ( ) { return _data [ _KEY ] ; } public Object getValue ( ) { return _data [ _VALUE ] ; } public Object setValue ( Object ignored ) throws UnsupportedOperationException { throw new UnsupportedOperationException ( "Map.Entry.setValue is not supported" ) ; } public boolean equals ( Object o ) { if ( this == o ) { return true ; } if ( ! ( o instanceof Map . Entry ) ) { return false ; } Map . Entry e = ( Map . Entry ) o ; return _data [ _KEY ] . equals ( e . getKey ( ) ) && _data [ _VALUE ] . equals ( e . getValue ( ) ) ; } public int hashCode ( ) { if ( ! _calculated_hashcode ) { _hashcode = _data [ _KEY ] . hashCode ( ) ^ _data [ _VALUE ] . hashCode ( ) ; _calculated_hashcode = true ; } return _hashcode ; } } } 	1
package org . apache . poi . poifs . eventfilesystem ; import java . util . * ; import org . apache . poi . poifs . filesystem . DocumentDescriptor ; import org . apache . poi . poifs . filesystem . POIFSDocumentPath ; class POIFSReaderRegistry { private Set omnivorousListeners ; private Map selectiveListeners ; private Map chosenDocumentDescriptors ; POIFSReaderRegistry ( ) { omnivorousListeners = new HashSet ( ) ; selectiveListeners = new HashMap ( ) ; chosenDocumentDescriptors = new HashMap ( ) ; } void registerListener ( final POIFSReaderListener listener , final POIFSDocumentPath path , final String documentName ) { if ( ! omnivorousListeners . contains ( listener ) ) { Set descriptors = ( Set ) selectiveListeners . get ( listener ) ; if ( descriptors == null ) { descriptors = new HashSet ( ) ; selectiveListeners . put ( listener , descriptors ) ; } DocumentDescriptor descriptor = new DocumentDescriptor ( path , documentName ) ; if ( descriptors . add ( descriptor ) ) { Set listeners = ( Set ) chosenDocumentDescriptors . get ( descriptor ) ; if ( listeners == null ) { listeners = new HashSet ( ) ; chosenDocumentDescriptors . put ( descriptor , listeners ) ; } listeners . add ( listener ) ; } } } void registerListener ( final POIFSReaderListener listener ) { if ( ! omnivorousListeners . contains ( listener ) ) { removeSelectiveListener ( listener ) ; omnivorousListeners . add ( listener ) ; } } Iterator getListeners ( final POIFSDocumentPath path , final String name ) { Set rval = new HashSet ( omnivorousListeners ) ; Set selectiveListeners = ( Set ) chosenDocumentDescriptors . get ( new DocumentDescriptor ( path , name ) ) ; if ( selectiveListeners != null ) { rval . addAll ( selectiveListeners ) ; } return rval . iterator ( ) ; } private void removeSelectiveListener ( final POIFSReaderListener listener ) { Set selectedDescriptors = ( Set ) selectiveListeners . remove ( listener ) ; if ( selectedDescriptors != null ) { Iterator iter = selectedDescriptors . iterator ( ) ; while ( iter . hasNext ( ) ) { dropDocument ( listener , ( DocumentDescriptor ) iter . next ( ) ) ; } } } private void dropDocument ( final POIFSReaderListener listener , final DocumentDescriptor descriptor ) { Set listeners = ( Set ) chosenDocumentDescriptors . get ( descriptor ) ; listeners . remove ( listener ) ; if ( listeners . size ( ) == 0 ) { chosenDocumentDescriptors . remove ( descriptor ) ; } } } 	0
package org . apache . poi . util ; import org . apache . poi . util . LittleEndian . BufferUnderrunException ; import java . io . * ; public class LongField implements FixedField { private long _value ; private final int _offset ; public LongField ( final int offset ) throws ArrayIndexOutOfBoundsException { if ( offset < 0 ) { throw new ArrayIndexOutOfBoundsException ( "Illegal offset: " + offset ) ; } _offset = offset ; } public LongField ( final int offset , final long value ) throws ArrayIndexOutOfBoundsException { this ( offset ) ; set ( value ) ; } public LongField ( final int offset , final byte [ ] data ) throws ArrayIndexOutOfBoundsException { this ( offset ) ; readFromBytes ( data ) ; } public LongField ( final int offset , final long value , final byte [ ] data ) throws ArrayIndexOutOfBoundsException { this ( offset ) ; set ( value , data ) ; } public long get ( ) { return _value ; } public void set ( final long value ) { _value = value ; } public void set ( final long value , final byte [ ] data ) throws ArrayIndexOutOfBoundsException { _value = value ; writeToBytes ( data ) ; } public void readFromBytes ( final byte [ ] data ) throws ArrayIndexOutOfBoundsException { _value = LittleEndian . getLong ( data , _offset ) ; } public void readFromStream ( final InputStream stream ) throws IOException , BufferUnderrunException { _value = LittleEndian . readLong ( stream ) ; } public void writeToBytes ( final byte [ ] data ) throws ArrayIndexOutOfBoundsException { LittleEndian . putLong ( data , _offset , _value ) ; } public String toString ( ) { return String . valueOf ( _value ) ; } } 	0
package org . apache . poi . hssf . record ; import org . apache . poi . util . * ; public class FontBasisRecord extends Record { public final static short sid = 0x1060 ; private short field_1_xBasis ; private short field_2_yBasis ; private short field_3_heightBasis ; private short field_4_scale ; private short field_5_indexToFontTable ; public FontBasisRecord ( ) { } public FontBasisRecord ( RecordInputStream in ) { super ( in ) ; } protected void validateSid ( short id ) { if ( id != sid ) { throw new RecordFormatException ( "Not a FontBasis record" ) ; } } protected void fillFields ( RecordInputStream in ) { field_1_xBasis = in . readShort ( ) ; field_2_yBasis = in . readShort ( ) ; field_3_heightBasis = in . readShort ( ) ; field_4_scale = in . readShort ( ) ; field_5_indexToFontTable = in . readShort ( ) ; } public String toString ( ) { StringBuffer buffer = new StringBuffer ( ) ; buffer . append ( "[FBI]\n" ) ; buffer . append ( "    .xBasis               = " ) . append ( "0x" ) . append ( HexDump . toHex ( getXBasis ( ) ) ) . append ( " (" ) . append ( getXBasis ( ) ) . append ( " )" ) ; buffer . append ( System . getProperty ( "line.separator" ) ) ; buffer . append ( "    .yBasis               = " ) . append ( "0x" ) . append ( HexDump . toHex ( getYBasis ( ) ) ) . append ( " (" ) . append ( getYBasis ( ) ) . append ( " )" ) ; buffer . append ( System . getProperty ( "line.separator" ) ) ; buffer . append ( "    .heightBasis          = " ) . append ( "0x" ) . append ( HexDump . toHex ( getHeightBasis ( ) ) ) . append ( " (" ) . append ( getHeightBasis ( ) ) . append ( " )" ) ; buffer . append ( System . getProperty ( "line.separator" ) ) ; buffer . append ( "    .scale                = " ) . append ( "0x" ) . append ( HexDump . toHex ( getScale ( ) ) ) . append ( " (" ) . append ( getScale ( ) ) . append ( " )" ) ; buffer . append ( System . getProperty ( "line.separator" ) ) ; buffer . append ( "    .indexToFontTable     = " ) . append ( "0x" ) . append ( HexDump . toHex ( getIndexToFontTable ( ) ) ) . append ( " (" ) . append ( getIndexToFontTable ( ) ) . append ( " )" ) ; buffer . append ( System . getProperty ( "line.separator" ) ) ; buffer . append ( "[/FBI]\n" ) ; return buffer . toString ( ) ; } public int serialize ( int offset , byte [ ] data ) { int pos = 0 ; LittleEndian . putShort ( data , 0 + offset , sid ) ; LittleEndian . putShort ( data , 2 + offset , ( short ) ( getRecordSize ( ) - 4 ) ) ; LittleEndian . putShort ( data , 4 + offset + pos , field_1_xBasis ) ; LittleEndian . putShort ( data , 6 + offset + pos , field_2_yBasis ) ; LittleEndian . putShort ( data , 8 + offset + pos , field_3_heightBasis ) ; LittleEndian . putShort ( data , 10 + offset + pos , field_4_scale ) ; LittleEndian . putShort ( data , 12 + offset + pos , field_5_indexToFontTable ) ; return getRecordSize ( ) ; } public int getRecordSize ( ) { return 4 + 2 + 2 + 2 + 2 + 2 ; } public short getSid ( ) { return sid ; } public Object clone ( ) { FontBasisRecord rec = new FontBasisRecord ( ) ; rec . field_1_xBasis = field_1_xBasis ; rec . field_2_yBasis = field_2_yBasis ; rec . field_3_heightBasis = field_3_heightBasis ; rec . field_4_scale = field_4_scale ; rec . field_5_indexToFontTable = field_5_indexToFontTable ; return rec ; } public short getXBasis ( ) { return field_1_xBasis ; } public void setXBasis ( short field_1_xBasis ) { this . field_1_xBasis = field_1_xBasis ; } public short getYBasis ( ) { return field_2_yBasis ; } public void setYBasis ( short field_2_yBasis ) { this . field_2_yBasis = field_2_yBasis ; } public short getHeightBasis ( ) { return field_3_heightBasis ; } public void setHeightBasis ( short field_3_heightBasis ) { this . field_3_heightBasis = field_3_heightBasis ; } public short getScale ( ) { return field_4_scale ; } public void setScale ( short field_4_scale ) { this . field_4_scale = field_4_scale ; } public short getIndexToFontTable ( ) { return field_5_indexToFontTable ; } public void setIndexToFontTable ( short field_5_indexToFontTable ) { this . field_5_indexToFontTable = field_5_indexToFontTable ; } } 	1
package org . apache . poi . hssf . record ; import org . apache . poi . util . * ; public class SheetPropertiesRecord extends Record { public final static short sid = 0x1044 ; private short field_1_flags ; private BitField chartTypeManuallyFormatted = BitFieldFactory . getInstance ( 0x1 ) ; private BitField plotVisibleOnly = BitFieldFactory . getInstance ( 0x2 ) ; private BitField doNotSizeWithWindow = BitFieldFactory . getInstance ( 0x4 ) ; private BitField defaultPlotDimensions = BitFieldFactory . getInstance ( 0x8 ) ; private BitField autoPlotArea = BitFieldFactory . getInstance ( 0x10 ) ; private byte field_2_empty ; public final static byte EMPTY_NOT_PLOTTED = 0 ; public final static byte EMPTY_ZERO = 1 ; public final static byte EMPTY_INTERPOLATED = 2 ; public SheetPropertiesRecord ( ) { } public SheetPropertiesRecord ( RecordInputStream in ) { super ( in ) ; } protected void validateSid ( short id ) { if ( id != sid ) { throw new RecordFormatException ( "Not a SheetProperties record" ) ; } } protected void fillFields ( RecordInputStream in ) { field_1_flags = in . readShort ( ) ; field_2_empty = in . readByte ( ) ; } public String toString ( ) { StringBuffer buffer = new StringBuffer ( ) ; buffer . append ( "[SHTPROPS]\n" ) ; buffer . append ( "    .flags                = " ) . append ( "0x" ) . append ( HexDump . toHex ( getFlags ( ) ) ) . append ( " (" ) . append ( getFlags ( ) ) . append ( " )" ) ; buffer . append ( System . getProperty ( "line.separator" ) ) ; buffer . append ( "         .chartTypeManuallyFormatted     = " ) . append ( isChartTypeManuallyFormatted ( ) ) . append ( '\n' ) ; buffer . append ( "         .plotVisibleOnly          = " ) . append ( isPlotVisibleOnly ( ) ) . append ( '\n' ) ; buffer . append ( "         .doNotSizeWithWindow      = " ) . append ( isDoNotSizeWithWindow ( ) ) . append ( '\n' ) ; buffer . append ( "         .defaultPlotDimensions     = " ) . append ( isDefaultPlotDimensions ( ) ) . append ( '\n' ) ; buffer . append ( "         .autoPlotArea             = " ) . append ( isAutoPlotArea ( ) ) . append ( '\n' ) ; buffer . append ( "    .empty                = " ) . append ( "0x" ) . append ( HexDump . toHex ( getEmpty ( ) ) ) . append ( " (" ) . append ( getEmpty ( ) ) . append ( " )" ) ; buffer . append ( System . getProperty ( "line.separator" ) ) ; buffer . append ( "[/SHTPROPS]\n" ) ; return buffer . toString ( ) ; } public int serialize ( int offset , byte [ ] data ) { int pos = 0 ; LittleEndian . putShort ( data , 0 + offset , sid ) ; LittleEndian . putShort ( data , 2 + offset , ( short ) ( getRecordSize ( ) - 4 ) ) ; LittleEndian . putShort ( data , 4 + offset + pos , field_1_flags ) ; data [ 6 + offset + pos ] = field_2_empty ; return getRecordSize ( ) ; } public int getRecordSize ( ) { return 4 + 2 + 1 ; } public short getSid ( ) { return sid ; } public Object clone ( ) { SheetPropertiesRecord rec = new SheetPropertiesRecord ( ) ; rec . field_1_flags = field_1_flags ; rec . field_2_empty = field_2_empty ; return rec ; } public short getFlags ( ) { return field_1_flags ; } public void setFlags ( short field_1_flags ) { this . field_1_flags = field_1_flags ; } public byte getEmpty ( ) { return field_2_empty ; } public void setEmpty ( byte field_2_empty ) { this . field_2_empty = field_2_empty ; } public void setChartTypeManuallyFormatted ( boolean value ) { field_1_flags = chartTypeManuallyFormatted . setShortBoolean ( field_1_flags , value ) ; } public boolean isChartTypeManuallyFormatted ( ) { return chartTypeManuallyFormatted . isSet ( field_1_flags ) ; } public void setPlotVisibleOnly ( boolean value ) { field_1_flags = plotVisibleOnly . setShortBoolean ( field_1_flags , value ) ; } public boolean isPlotVisibleOnly ( ) { return plotVisibleOnly . isSet ( field_1_flags ) ; } public void setDoNotSizeWithWindow ( boolean value ) { field_1_flags = doNotSizeWithWindow . setShortBoolean ( field_1_flags , value ) ; } public boolean isDoNotSizeWithWindow ( ) { return doNotSizeWithWindow . isSet ( field_1_flags ) ; } public void setDefaultPlotDimensions ( boolean value ) { field_1_flags = defaultPlotDimensions . setShortBoolean ( field_1_flags , value ) ; } public boolean isDefaultPlotDimensions ( ) { return defaultPlotDimensions . isSet ( field_1_flags ) ; } public void setAutoPlotArea ( boolean value ) { field_1_flags = autoPlotArea . setShortBoolean ( field_1_flags , value ) ; } public boolean isAutoPlotArea ( ) { return autoPlotArea . isSet ( field_1_flags ) ; } } 	1
package org . apache . poi . hssf . record . formula ; import org . apache . poi . util . LittleEndian ; import org . apache . poi . util . BitField ; import org . apache . poi . hssf . record . RecordInputStream ; import org . apache . poi . hssf . util . CellReference ; import org . apache . poi . hssf . model . Workbook ; public class RefAPtg extends ReferencePtg { public final static byte sid = 0x64 ; protected RefAPtg ( ) { super ( ) ; } public RefAPtg ( short row , short column , boolean isRowRelative , boolean isColumnRelative ) { super ( row , column , isRowRelative , isColumnRelative ) ; } public RefAPtg ( RecordInputStream in ) { super ( in ) ; } public String getRefPtgName ( ) { return "RefAPtg" ; } public Object clone ( ) { RefAPtg ptg = new RefAPtg ( ) ; ptg . setRow ( getRow ( ) ) ; ptg . setColumnRaw ( getColumnRaw ( ) ) ; ptg . setClass ( ptgClass ) ; return ptg ; } } 	0
package org . apache . poi . hssf . record . formula ; import org . apache . poi . util . LittleEndian ; import org . apache . poi . util . BitField ; import org . apache . poi . hssf . record . RecordInputStream ; import org . apache . poi . hssf . util . AreaReference ; import org . apache . poi . hssf . util . CellReference ; import org . apache . poi . hssf . model . Workbook ; public class AreaNPtg extends AreaPtg { public final static short sid = 0x2D ; protected AreaNPtg ( ) { } public AreaNPtg ( RecordInputStream in ) { super ( in ) ; } public void writeBytes ( byte [ ] array , int offset ) { super . writeBytes ( array , offset ) ; } public String getAreaPtgName ( ) { return "AreaNPtg" ; } public String toFormulaString ( Workbook book ) { throw new RuntimeException ( "Coding Error: This method should never be called. This ptg should be converted" ) ; } public Object clone ( ) { throw new RuntimeException ( "Coding Error: This method should never be called. This ptg should be converted" ) ; } } 	0
package org . apache . poi . hssf . record . formula ; import org . apache . poi . util . LittleEndian ; import org . apache . poi . util . BitField ; import org . apache . poi . hssf . record . RecordInputStream ; import org . apache . poi . hssf . util . CellReference ; import org . apache . poi . hssf . model . Workbook ; public class RefNAPtg extends ReferencePtg { public final static byte sid = 0x6C ; protected RefNAPtg ( ) { } public RefNAPtg ( RecordInputStream in ) { super ( in ) ; } public void writeBytes ( byte [ ] array , int offset ) { throw new RuntimeException ( "Coding Error: This method should never be called. This ptg should be converted" ) ; } public String getRefPtgName ( ) { return "RefNAPtg" ; } public String toFormulaString ( Workbook book ) { throw new RuntimeException ( "Coding Error: This method should never be called. This ptg should be converted" ) ; } public Object clone ( ) { throw new RuntimeException ( "Coding Error: This method should never be called. This ptg should be converted" ) ; } } 	0
package org . apache . poi . hssf . record ; class RecordProcessor { } 	0
package org . apache . poi . hpsf ; import org . apache . poi . util . HexDump ; public abstract class UnsupportedVariantTypeException extends VariantTypeException { public UnsupportedVariantTypeException ( final long variantType , final Object value ) { super ( variantType , value , "HPSF does not yet support the variant type " + variantType + " (" + Variant . getVariantName ( variantType ) + ", " + HexDump . toHex ( variantType ) + "). If you want support for " + "this variant type in one of the next POI releases please " + "submit a request for enhancement (RFE) to " + "<http://issues.apache.org/bugzilla/>! Thank you!" ) ; } } 	0
package org . apache . poi . hssf . record ; import org . apache . poi . util . LittleEndian ; public class BeginRecord extends Record { public static final short sid = 0x1033 ; public BeginRecord ( ) { } public BeginRecord ( RecordInputStream in ) { super ( in ) ; } protected void validateSid ( short id ) { if ( id != sid ) { throw new RecordFormatException ( "NOT A BEGIN RECORD" ) ; } } protected void fillFields ( RecordInputStream in ) { } public String toString ( ) { StringBuffer buffer = new StringBuffer ( ) ; buffer . append ( "[BEGIN]\n" ) ; buffer . append ( "[/BEGIN]\n" ) ; return buffer . toString ( ) ; } public int serialize ( int offset , byte [ ] data ) { LittleEndian . putShort ( data , 0 + offset , sid ) ; LittleEndian . putShort ( data , 2 + offset , ( ( short ) 0 ) ) ; return getRecordSize ( ) ; } public int getRecordSize ( ) { return 4 ; } public short getSid ( ) { return sid ; } } 	1
package org . apache . poi . ddf ; import org . apache . poi . util . HexDump ; import org . apache . poi . util . LittleEndian ; import java . io . ByteArrayOutputStream ; public class EscherClientDataRecord extends EscherRecord { public static final short RECORD_ID = ( short ) 0xF011 ; public static final String RECORD_DESCRIPTION = "MsofbtClientData" ; private byte [ ] remainingData ; public int fillFields ( byte [ ] data , int offset , EscherRecordFactory recordFactory ) { int bytesRemaining = readHeader ( data , offset ) ; int pos = offset + 8 ; remainingData = new byte [ bytesRemaining ] ; System . arraycopy ( data , pos , remainingData , 0 , bytesRemaining ) ; return 8 + bytesRemaining ; } public int serialize ( int offset , byte [ ] data , EscherSerializationListener listener ) { listener . beforeRecordSerialize ( offset , getRecordId ( ) , this ) ; if ( remainingData == null ) remainingData = new byte [ 0 ] ; LittleEndian . putShort ( data , offset , getOptions ( ) ) ; LittleEndian . putShort ( data , offset + 2 , getRecordId ( ) ) ; LittleEndian . putInt ( data , offset + 4 , remainingData . length ) ; System . arraycopy ( remainingData , 0 , data , offset + 8 , remainingData . length ) ; int pos = offset + 8 + remainingData . length ; listener . afterRecordSerialize ( pos , getRecordId ( ) , pos - offset , this ) ; return pos - offset ; } public int getRecordSize ( ) { return 8 + ( remainingData == null ? 0 : remainingData . length ) ; } public short getRecordId ( ) { return RECORD_ID ; } public String getRecordName ( ) { return "ClientData" ; } public String toString ( ) { String nl = System . getProperty ( "line.separator" ) ; String extraData ; ByteArrayOutputStream b = new ByteArrayOutputStream ( ) ; try { HexDump . dump ( this . remainingData , 0 , b , 0 ) ; extraData = b . toString ( ) ; } catch ( Exception e ) { extraData = "error\n" ; } return getClass ( ) . getName ( ) + ":" + nl + "  RecordId: 0x" + HexDump . toHex ( RECORD_ID ) + nl + "  Options: 0x" + HexDump . toHex ( getOptions ( ) ) + nl + "  Extra Data:" + nl + extraData ; } public byte [ ] getRemainingData ( ) { return remainingData ; } public void setRemainingData ( byte [ ] remainingData ) { this . remainingData = remainingData ; } } 	1
package org . apache . poi . hssf . record ; public class LabelRecord extends Record implements CellValueRecordInterface { public final static short sid = 0x204 ; private int field_1_row ; private short field_2_column ; private short field_3_xf_index ; private short field_4_string_len ; private byte field_5_unicode_flag ; private String field_6_value ; public LabelRecord ( ) { } public LabelRecord ( RecordInputStream in ) { super ( in ) ; } protected void validateSid ( short id ) { if ( id != sid ) { throw new RecordFormatException ( "Not a valid LabelRecord" ) ; } } protected void fillFields ( RecordInputStream in ) { field_1_row = in . readUShort ( ) ; field_2_column = in . readShort ( ) ; field_3_xf_index = in . readShort ( ) ; field_4_string_len = in . readShort ( ) ; field_5_unicode_flag = in . readByte ( ) ; if ( field_4_string_len > 0 ) { if ( isUnCompressedUnicode ( ) ) { field_6_value = in . readUnicodeLEString ( field_4_string_len ) ; } else { field_6_value = in . readCompressedUnicode ( field_4_string_len ) ; } } else field_6_value = null ; } public int getRow ( ) { return field_1_row ; } public short getColumn ( ) { return field_2_column ; } public short getXFIndex ( ) { return field_3_xf_index ; } public short getStringLength ( ) { return field_4_string_len ; } public boolean isUnCompressedUnicode ( ) { return ( field_5_unicode_flag == 1 ) ; } public String getValue ( ) { return field_6_value ; } public int serialize ( int offset , byte [ ] data ) { throw new RecordFormatException ( "Label Records are supported READ ONLY...convert to LabelSST" ) ; } public short getSid ( ) { return sid ; } public String toString ( ) { StringBuffer buffer = new StringBuffer ( ) ; buffer . append ( "[LABEL]\n" ) ; buffer . append ( "    .row            = " ) . append ( Integer . toHexString ( getRow ( ) ) ) . append ( "\n" ) ; buffer . append ( "    .column         = " ) . append ( Integer . toHexString ( getColumn ( ) ) ) . append ( "\n" ) ; buffer . append ( "    .xfindex        = " ) . append ( Integer . toHexString ( getXFIndex ( ) ) ) . append ( "\n" ) ; buffer . append ( "    .string_len       = " ) . append ( Integer . toHexString ( field_4_string_len ) ) . append ( "\n" ) ; buffer . append ( "    .unicode_flag       = " ) . append ( Integer . toHexString ( field_5_unicode_flag ) ) . append ( "\n" ) ; buffer . append ( "    .value       = " ) . append ( getValue ( ) ) . append ( "\n" ) ; buffer . append ( "[/LABEL]\n" ) ; return buffer . toString ( ) ; } public boolean isBefore ( CellValueRecordInterface i ) { if ( this . getRow ( ) > i . getRow ( ) ) { return false ; } if ( ( this . getRow ( ) == i . getRow ( ) ) && ( this . getColumn ( ) > i . getColumn ( ) ) ) { return false ; } if ( ( this . getRow ( ) == i . getRow ( ) ) && ( this . getColumn ( ) == i . getColumn ( ) ) ) { return false ; } return true ; } public boolean isAfter ( CellValueRecordInterface i ) { if ( this . getRow ( ) < i . getRow ( ) ) { return false ; } if ( ( this . getRow ( ) == i . getRow ( ) ) && ( this . getColumn ( ) < i . getColumn ( ) ) ) { return false ; } if ( ( this . getRow ( ) == i . getRow ( ) ) && ( this . getColumn ( ) == i . getColumn ( ) ) ) { return false ; } return true ; } public boolean isEqual ( CellValueRecordInterface i ) { return ( ( this . getRow ( ) == i . getRow ( ) ) && ( this . getColumn ( ) == i . getColumn ( ) ) ) ; } public boolean isInValueSection ( ) { return true ; } public boolean isValue ( ) { return true ; } public void setColumn ( short col ) { } public void setRow ( int row ) { } public void setXFIndex ( short xf ) { } public Object clone ( ) { LabelRecord rec = new LabelRecord ( ) ; rec . field_1_row = field_1_row ; rec . field_2_column = field_2_column ; rec . field_3_xf_index = field_3_xf_index ; rec . field_4_string_len = field_4_string_len ; rec . field_5_unicode_flag = field_5_unicode_flag ; rec . field_6_value = field_6_value ; return rec ; } } 	1
package org . apache . poi . hssf . record ; import org . apache . poi . util . * ; public class SeriesTextRecord extends Record { public final static short sid = 0x100d ; private short field_1_id ; private byte field_2_textLength ; private byte field_3_undocumented ; private String field_4_text ; public SeriesTextRecord ( ) { } public SeriesTextRecord ( RecordInputStream in ) { super ( in ) ; } protected void validateSid ( short id ) { if ( id != sid ) { throw new RecordFormatException ( "Not a SeriesText record" ) ; } } protected void fillFields ( RecordInputStream in ) { field_1_id = in . readShort ( ) ; field_2_textLength = in . readByte ( ) ; field_3_undocumented = in . readByte ( ) ; field_4_text = in . readUnicodeLEString ( field_2_textLength ) ; } public String toString ( ) { StringBuffer buffer = new StringBuffer ( ) ; buffer . append ( "[SERIESTEXT]\n" ) ; buffer . append ( "    .id                   = " ) . append ( "0x" ) . append ( HexDump . toHex ( getId ( ) ) ) . append ( " (" ) . append ( getId ( ) ) . append ( " )" ) ; buffer . append ( System . getProperty ( "line.separator" ) ) ; buffer . append ( "    .textLength           = " ) . append ( "0x" ) . append ( HexDump . toHex ( getTextLength ( ) ) ) . append ( " (" ) . append ( getTextLength ( ) ) . append ( " )" ) ; buffer . append ( System . getProperty ( "line.separator" ) ) ; buffer . append ( "    .undocumented         = " ) . append ( "0x" ) . append ( HexDump . toHex ( getUndocumented ( ) ) ) . append ( " (" ) . append ( getUndocumented ( ) ) . append ( " )" ) ; buffer . append ( System . getProperty ( "line.separator" ) ) ; buffer . append ( "    .text                 = " ) . append ( " (" ) . append ( getText ( ) ) . append ( " )" ) ; buffer . append ( System . getProperty ( "line.separator" ) ) ; buffer . append ( "[/SERIESTEXT]\n" ) ; return buffer . toString ( ) ; } public int serialize ( int offset , byte [ ] data ) { int pos = 0 ; LittleEndian . putShort ( data , 0 + offset , sid ) ; LittleEndian . putShort ( data , 2 + offset , ( short ) ( getRecordSize ( ) - 4 ) ) ; LittleEndian . putShort ( data , 4 + offset + pos , field_1_id ) ; data [ 6 + offset + pos ] = field_2_textLength ; data [ 7 + offset + pos ] = field_3_undocumented ; StringUtil . putUnicodeLE ( field_4_text , data , 8 + offset + pos ) ; return getRecordSize ( ) ; } public int getRecordSize ( ) { return 4 + 2 + 1 + 1 + ( field_2_textLength * 2 ) ; } public short getSid ( ) { return sid ; } public Object clone ( ) { SeriesTextRecord rec = new SeriesTextRecord ( ) ; rec . field_1_id = field_1_id ; rec . field_2_textLength = field_2_textLength ; rec . field_3_undocumented = field_3_undocumented ; rec . field_4_text = field_4_text ; return rec ; } public short getId ( ) { return field_1_id ; } public void setId ( short field_1_id ) { this . field_1_id = field_1_id ; } public byte getTextLength ( ) { return field_2_textLength ; } public void setTextLength ( byte field_2_textLength ) { this . field_2_textLength = field_2_textLength ; } public byte getUndocumented ( ) { return field_3_undocumented ; } public void setUndocumented ( byte field_3_undocumented ) { this . field_3_undocumented = field_3_undocumented ; } public String getText ( ) { return field_4_text ; } public void setText ( String field_4_text ) { this . field_4_text = field_4_text ; } } 	1
package org . apache . poi . hssf . record . formula ; import org . apache . poi . util . LittleEndian ; import org . apache . poi . hssf . model . Workbook ; import org . apache . poi . hssf . record . RecordInputStream ; public class MemFuncPtg extends ControlPtg { public final static byte sid = 0x29 ; private short field_1_len_ref_subexpression = 0 ; public MemFuncPtg ( ) { } public MemFuncPtg ( RecordInputStream in ) { field_1_len_ref_subexpression = in . readShort ( ) ; } public int getSize ( ) { return 3 ; } public void writeBytes ( byte [ ] array , int offset ) { array [ offset + 0 ] = sid ; LittleEndian . putShort ( array , offset + 1 , ( short ) field_1_len_ref_subexpression ) ; } public String toFormulaString ( Workbook book ) { return "" ; } public byte getDefaultOperandClass ( ) { return 0 ; } public int getNumberOfOperands ( ) { return field_1_len_ref_subexpression ; } public Object clone ( ) { MemFuncPtg ptg = new MemFuncPtg ( ) ; ptg . field_1_len_ref_subexpression = this . field_1_len_ref_subexpression ; return ptg ; } public int getLenRefSubexpression ( ) { return field_1_len_ref_subexpression ; } public void setLenRefSubexpression ( int len ) { field_1_len_ref_subexpression = ( short ) len ; } } 	1
package org . apache . poi . hssf . record . formula ; import org . apache . poi . util . LittleEndian ; import org . apache . poi . util . BitField ; import org . apache . poi . util . BitFieldFactory ; import org . apache . poi . hssf . util . AreaReference ; import org . apache . poi . hssf . util . CellReference ; import org . apache . poi . hssf . model . Workbook ; import org . apache . poi . hssf . record . RecordInputStream ; public class AreaPtg extends Ptg { public final static short sid = 0x25 ; private final static int SIZE = 9 ; private short field_1_first_row ; private short field_2_last_row ; private short field_3_first_column ; private short field_4_last_column ; private BitField rowRelative = BitFieldFactory . getInstance ( 0x8000 ) ; private BitField colRelative = BitFieldFactory . getInstance ( 0x4000 ) ; private BitField column = BitFieldFactory . getInstance ( 0x3FFF ) ; protected AreaPtg ( ) { } public AreaPtg ( String arearef ) { AreaReference ar = new AreaReference ( arearef ) ; setFirstRow ( ( short ) ar . getCells ( ) [ 0 ] . getRow ( ) ) ; setFirstColumn ( ( short ) ar . getCells ( ) [ 0 ] . getCol ( ) ) ; setLastRow ( ( short ) ar . getCells ( ) [ 1 ] . getRow ( ) ) ; setLastColumn ( ( short ) ar . getCells ( ) [ 1 ] . getCol ( ) ) ; setFirstColRelative ( ! ar . getCells ( ) [ 0 ] . isColAbsolute ( ) ) ; setLastColRelative ( ! ar . getCells ( ) [ 1 ] . isColAbsolute ( ) ) ; setFirstRowRelative ( ! ar . getCells ( ) [ 0 ] . isRowAbsolute ( ) ) ; setLastRowRelative ( ! ar . getCells ( ) [ 1 ] . isRowAbsolute ( ) ) ; } public AreaPtg ( short firstRow , short lastRow , short firstColumn , short lastColumn , boolean firstRowRelative , boolean lastRowRelative , boolean firstColRelative , boolean lastColRelative ) { setFirstRow ( firstRow ) ; setLastRow ( lastRow ) ; setFirstColumn ( firstColumn ) ; setLastColumn ( lastColumn ) ; setFirstRowRelative ( firstRowRelative ) ; setLastRowRelative ( lastRowRelative ) ; setFirstColRelative ( firstColRelative ) ; setLastColRelative ( lastColRelative ) ; } public AreaPtg ( RecordInputStream in ) { field_1_first_row = in . readShort ( ) ; field_2_last_row = in . readShort ( ) ; field_3_first_column = in . readShort ( ) ; field_4_last_column = in . readShort ( ) ; } public String getAreaPtgName ( ) { return "AreaPtg" ; } public String toString ( ) { StringBuffer buffer = new StringBuffer ( ) ; buffer . append ( getAreaPtgName ( ) ) ; buffer . append ( "\n" ) ; buffer . append ( "firstRow = " + getFirstRow ( ) ) . append ( "\n" ) ; buffer . append ( "lastRow  = " + getLastRow ( ) ) . append ( "\n" ) ; buffer . append ( "firstCol = " + getFirstColumn ( ) ) . append ( "\n" ) ; buffer . append ( "lastCol  = " + getLastColumn ( ) ) . append ( "\n" ) ; buffer . append ( "firstColRowRel= " + isFirstRowRelative ( ) ) . append ( "\n" ) ; buffer . append ( "lastColRowRel = " + isLastRowRelative ( ) ) . append ( "\n" ) ; buffer . append ( "firstColRel   = " + isFirstColRelative ( ) ) . append ( "\n" ) ; buffer . append ( "lastColRel    = " + isLastColRelative ( ) ) . append ( "\n" ) ; return buffer . toString ( ) ; } public void writeBytes ( byte [ ] array , int offset ) { array [ offset ] = ( byte ) ( sid + ptgClass ) ; LittleEndian . putShort ( array , offset + 1 , field_1_first_row ) ; LittleEndian . putShort ( array , offset + 3 , field_2_last_row ) ; LittleEndian . putShort ( array , offset + 5 , field_3_first_column ) ; LittleEndian . putShort ( array , offset + 7 , field_4_last_column ) ; } public int getSize ( ) { return SIZE ; } public short getFirstRow ( ) { return field_1_first_row ; } public void setFirstRow ( short row ) { field_1_first_row = row ; } public short getLastRow ( ) { return field_2_last_row ; } public void setLastRow ( short row ) { field_2_last_row = row ; } public short getFirstColumn ( ) { return column . getShortValue ( field_3_first_column ) ; } public short getFirstColumnRaw ( ) { return field_3_first_column ; } public boolean isFirstRowRelative ( ) { return rowRelative . isSet ( field_3_first_column ) ; } public void setFirstRowRelative ( boolean rel ) { field_3_first_column = rowRelative . setShortBoolean ( field_3_first_column , rel ) ; } public boolean isFirstColRelative ( ) { return colRelative . isSet ( field_3_first_column ) ; } public void setFirstColRelative ( boolean rel ) { field_3_first_column = colRelative . setShortBoolean ( field_3_first_column , rel ) ; } public void setFirstColumn ( short column ) { field_3_first_column = column ; } public void setFirstColumnRaw ( short column ) { field_3_first_column = column ; } public short getLastColumn ( ) { return column . getShortValue ( field_4_last_column ) ; } public short getLastColumnRaw ( ) { return field_4_last_column ; } public boolean isLastRowRelative ( ) { return rowRelative . isSet ( field_4_last_column ) ; } public void setLastRowRelative ( boolean rel ) { field_4_last_column = rowRelative . setShortBoolean ( field_4_last_column , rel ) ; } public boolean isLastColRelative ( ) { return colRelative . isSet ( field_4_last_column ) ; } public void setLastColRelative ( boolean rel ) { field_4_last_column = colRelative . setShortBoolean ( field_4_last_column , rel ) ; } public void setLastColumn ( short column ) { field_4_last_column = column ; } public void setLastColumnRaw ( short column ) { field_4_last_column = column ; } public String toFormulaString ( Workbook book ) { return ( new CellReference ( getFirstRow ( ) , getFirstColumn ( ) , ! isFirstRowRelative ( ) , ! isFirstColRelative ( ) ) ) . toString ( ) + ":" + ( new CellReference ( getLastRow ( ) , getLastColumn ( ) , ! isLastRowRelative ( ) , ! isLastColRelative ( ) ) ) . toString ( ) ; } public byte getDefaultOperandClass ( ) { return Ptg . CLASS_REF ; } public Object clone ( ) { AreaPtg ptg = new AreaPtg ( ) ; ptg . field_1_first_row = field_1_first_row ; ptg . field_2_last_row = field_2_last_row ; ptg . field_3_first_column = field_3_first_column ; ptg . field_4_last_column = field_4_last_column ; ptg . setClass ( ptgClass ) ; return ptg ; } } 	1
package org . apache . poi . hssf . record ; public interface CustomField extends Cloneable { int getSize ( ) ; int fillField ( RecordInputStream in ) ; void toString ( StringBuffer str ) ; int serializeField ( int offset , byte [ ] data ) ; } 	1
package org . apache . poi . hssf . usermodel ; public interface HSSFErrorConstants { public static final byte ERROR_NULL = 0x00 ; public static final byte ERROR_DIV_0 = 0x07 ; public static final byte ERROR_VALUE = 0x0f ; public static final byte ERROR_REF = 0x17 ; public static final byte ERROR_NAME = 0x1d ; public static final byte ERROR_NUM = 0x24 ; public static final byte ERROR_NA = 0x2a ; } 	0
package org . apache . poi . hpsf ; import java . io . IOException ; import java . io . OutputStream ; import java . io . UnsupportedEncodingException ; import java . util . Date ; import java . util . LinkedList ; import java . util . List ; import org . apache . poi . util . LittleEndian ; import org . apache . poi . util . LittleEndianConsts ; public class VariantSupport extends Variant { private static boolean logUnsupportedTypes = false ; public static void setLogUnsupportedTypes ( final boolean logUnsupportedTypes ) { VariantSupport . logUnsupportedTypes = logUnsupportedTypes ; } public static boolean isLogUnsupportedTypes ( ) { return logUnsupportedTypes ; } protected static List unsupportedMessage ; protected static void writeUnsupportedTypeMessage ( final UnsupportedVariantTypeException ex ) { if ( isLogUnsupportedTypes ( ) ) { if ( unsupportedMessage == null ) unsupportedMessage = new LinkedList ( ) ; Long vt = new Long ( ex . getVariantType ( ) ) ; if ( ! unsupportedMessage . contains ( vt ) ) { System . err . println ( ex . getMessage ( ) ) ; unsupportedMessage . add ( vt ) ; } } } public static Object read ( final byte [ ] src , final int offset , final int length , final long type , final int codepage ) throws ReadingNotSupportedException , UnsupportedEncodingException { Object value ; int o1 = offset ; int l1 = length - LittleEndian . INT_SIZE ; long lType = type ; if ( codepage == Constants . CP_UNICODE && type == Variant . VT_LPSTR ) lType = Variant . VT_LPWSTR ; switch ( ( int ) lType ) { case Variant . VT_EMPTY : { value = null ; break ; } case Variant . VT_I2 : { value = new Integer ( LittleEndian . getShort ( src , o1 ) ) ; break ; } case Variant . VT_I4 : { value = new Integer ( LittleEndian . getInt ( src , o1 ) ) ; break ; } case Variant . VT_I8 : { value = new Long ( LittleEndian . getLong ( src , o1 ) ) ; break ; } case Variant . VT_R8 : { value = new Double ( LittleEndian . getDouble ( src , o1 ) ) ; break ; } case Variant . VT_FILETIME : { final long low = LittleEndian . getUInt ( src , o1 ) ; o1 += LittleEndian . INT_SIZE ; final long high = LittleEndian . getUInt ( src , o1 ) ; value = Util . filetimeToDate ( ( int ) high , ( int ) low ) ; break ; } case Variant . VT_LPSTR : { final int first = o1 + LittleEndian . INT_SIZE ; long last = first + LittleEndian . getUInt ( src , o1 ) - 1 ; o1 += LittleEndian . INT_SIZE ; while ( src [ ( int ) last ] == 0 && first <= last ) last -- ; final int l = ( int ) ( last - first + 1 ) ; value = codepage != - 1 ? new String ( src , first , l , codepageToEncoding ( codepage ) ) : new String ( src , first , l ) ; break ; } case Variant . VT_LPWSTR : { final int first = o1 + LittleEndian . INT_SIZE ; long last = first + LittleEndian . getUInt ( src , o1 ) - 1 ; long l = last - first ; o1 += LittleEndian . INT_SIZE ; StringBuffer b = new StringBuffer ( ( int ) ( last - first ) ) ; for ( int i = 0 ; i <= l ; i ++ ) { final int i1 = o1 + ( i * 2 ) ; final int i2 = i1 + 1 ; final int high = src [ i2 ] << 8 ; final int low = src [ i1 ] & 0x00ff ; final char c = ( char ) ( high | low ) ; b . append ( c ) ; } while ( b . length ( ) > 0 && b . charAt ( b . length ( ) - 1 ) == 0x00 ) b . setLength ( b . length ( ) - 1 ) ; value = b . toString ( ) ; break ; } case Variant . VT_CF : { final byte [ ] v = new byte [ l1 ] ; for ( int i = 0 ; i < l1 ; i ++ ) v [ i ] = src [ ( o1 + i ) ] ; value = v ; break ; } case Variant . VT_BOOL : { long bool = LittleEndian . getUInt ( src , o1 ) ; if ( bool != 0 ) value = Boolean . TRUE ; else value = Boolean . FALSE ; break ; } default : { final byte [ ] v = new byte [ l1 ] ; for ( int i = 0 ; i < l1 ; i ++ ) v [ i ] = src [ ( o1 + i ) ] ; throw new ReadingNotSupportedException ( type , v ) ; } } return value ; } public static String codepageToEncoding ( final int codepage ) throws UnsupportedEncodingException { if ( codepage <= 0 ) throw new UnsupportedEncodingException ( "Codepage number may not be " + codepage ) ; switch ( codepage ) { case Constants . CP_UTF16 : return "UTF-16" ; case Constants . CP_UTF16_BE : return "UTF-16BE" ; case Constants . CP_UTF8 : return "UTF-8" ; case Constants . CP_037 : return "cp037" ; case Constants . CP_GBK : return "GBK" ; case Constants . CP_MS949 : return "ms949" ; case Constants . CP_WINDOWS_1250 : return "windows-1250" ; case Constants . CP_WINDOWS_1251 : return "windows-1251" ; case Constants . CP_WINDOWS_1252 : return "windows-1252" ; case Constants . CP_WINDOWS_1253 : return "windows-1253" ; case Constants . CP_WINDOWS_1254 : return "windows-1254" ; case Constants . CP_WINDOWS_1255 : return "windows-1255" ; case Constants . CP_WINDOWS_1256 : return "windows-1256" ; case Constants . CP_WINDOWS_1257 : return "windows-1257" ; case Constants . CP_WINDOWS_1258 : return "windows-1258" ; case Constants . CP_JOHAB : return "johab" ; case Constants . CP_MAC_ROMAN : return "MacRoman" ; case Constants . CP_MAC_JAPAN : return "SJIS" ; case Constants . CP_MAC_CHINESE_TRADITIONAL : return "Big5" ; case Constants . CP_MAC_KOREAN : return "EUC-KR" ; case Constants . CP_MAC_ARABIC : return "MacArabic" ; case Constants . CP_MAC_HEBREW : return "MacHebrew" ; case Constants . CP_MAC_GREEK : return "MacGreek" ; case Constants . CP_MAC_CYRILLIC : return "MacCyrillic" ; case Constants . CP_MAC_CHINESE_SIMPLE : return "EUC_CN" ; case Constants . CP_MAC_ROMANIA : return "MacRomania" ; case Constants . CP_MAC_UKRAINE : return "MacUkraine" ; case Constants . CP_MAC_THAI : return "MacThai" ; case Constants . CP_MAC_CENTRAL_EUROPE : return "MacCentralEurope" ; case Constants . CP_MAC_ICELAND : return "MacIceland" ; case Constants . CP_MAC_TURKISH : return "MacTurkish" ; case Constants . CP_MAC_CROATIAN : return "MacCroatian" ; case Constants . CP_US_ACSII : case Constants . CP_US_ASCII2 : return "US-ASCII" ; case Constants . CP_KOI8_R : return "KOI8-R" ; case Constants . CP_ISO_8859_1 : return "ISO-8859-1" ; case Constants . CP_ISO_8859_2 : return "ISO-8859-2" ; case Constants . CP_ISO_8859_3 : return "ISO-8859-3" ; case Constants . CP_ISO_8859_4 : return "ISO-8859-4" ; case Constants . CP_ISO_8859_5 : return "ISO-8859-5" ; case Constants . CP_ISO_8859_6 : return "ISO-8859-6" ; case Constants . CP_ISO_8859_7 : return "ISO-8859-7" ; case Constants . CP_ISO_8859_8 : return "ISO-8859-8" ; case Constants . CP_ISO_8859_9 : return "ISO-8859-9" ; case Constants . CP_ISO_2022_JP1 : case Constants . CP_ISO_2022_JP2 : case Constants . CP_ISO_2022_JP3 : return "ISO-2022-JP" ; case Constants . CP_ISO_2022_KR : return "ISO-2022-KR" ; case Constants . CP_EUC_JP : return "EUC-JP" ; case Constants . CP_EUC_KR : return "EUC-KR" ; case Constants . CP_GB2312 : return "GB2312" ; case Constants . CP_GB18030 : return "GB18030" ; case Constants . CP_SJIS : return "SJIS" ; default : return "cp" + codepage ; } } public static int write ( final OutputStream out , final long type , final Object value , final int codepage ) throws IOException , WritingNotSupportedException { int length = 0 ; switch ( ( int ) type ) { case Variant . VT_BOOL : { int trueOrFalse ; if ( ( ( Boolean ) value ) . booleanValue ( ) ) trueOrFalse = 1 ; else trueOrFalse = 0 ; length = TypeWriter . writeUIntToStream ( out , trueOrFalse ) ; break ; } case Variant . VT_LPSTR : { final byte [ ] bytes = ( codepage == - 1 ? ( ( String ) value ) . getBytes ( ) : ( ( String ) value ) . getBytes ( codepageToEncoding ( codepage ) ) ) ; length = TypeWriter . writeUIntToStream ( out , bytes . length + 1 ) ; final byte [ ] b = new byte [ bytes . length + 1 ] ; System . arraycopy ( bytes , 0 , b , 0 , bytes . length ) ; b [ b . length - 1 ] = 0x00 ; out . write ( b ) ; length += b . length ; break ; } case Variant . VT_LPWSTR : { final int nrOfChars = ( ( String ) value ) . length ( ) + 1 ; length += TypeWriter . writeUIntToStream ( out , nrOfChars ) ; char [ ] s = Util . pad4 ( ( String ) value ) ; for ( int i = 0 ; i < s . length ; i ++ ) { final int high = ( ( s [ i ] & 0x0000ff00 ) > > 8 ) ; final int low = ( s [ i ] & 0x000000ff ) ; final byte highb = ( byte ) high ; final byte lowb = ( byte ) low ; out . write ( lowb ) ; out . write ( highb ) ; length += 2 ; } out . write ( 0x00 ) ; out . write ( 0x00 ) ; length += 2 ; break ; } case Variant . VT_CF : { final byte [ ] b = ( byte [ ] ) value ; out . write ( b ) ; length = b . length ; break ; } case Variant . VT_EMPTY : { TypeWriter . writeUIntToStream ( out , Variant . VT_EMPTY ) ; length = LittleEndianConsts . INT_SIZE ; break ; } case Variant . VT_I2 : { TypeWriter . writeToStream ( out , ( ( Integer ) value ) . shortValue ( ) ) ; length = LittleEndianConsts . SHORT_SIZE ; break ; } case Variant . VT_I4 : { if ( ! ( value instanceof Integer ) ) { throw new ClassCastException ( "Could not cast an object to " + Integer . class . toString ( ) + ": " + value . getClass ( ) . toString ( ) + ", " + value . toString ( ) ) ; } length += TypeWriter . writeToStream ( out , ( ( Integer ) value ) . intValue ( ) ) ; break ; } case Variant . VT_I8 : { TypeWriter . writeToStream ( out , ( ( Long ) value ) . longValue ( ) ) ; length = LittleEndianConsts . LONG_SIZE ; break ; } case Variant . VT_R8 : { length += TypeWriter . writeToStream ( out , ( ( Double ) value ) . doubleValue ( ) ) ; break ; } case Variant . VT_FILETIME : { long filetime = Util . dateToFileTime ( ( Date ) value ) ; int high = ( int ) ( ( filetime > > 32 ) & 0x00000000FFFFFFFFL ) ; int low = ( int ) ( filetime & 0x00000000FFFFFFFFL ) ; length += TypeWriter . writeUIntToStream ( out , 0x0000000FFFFFFFFL & low ) ; length += TypeWriter . writeUIntToStream ( out , 0x0000000FFFFFFFFL & high ) ; break ; } default : { if ( value instanceof byte [ ] ) { final byte [ ] b = ( byte [ ] ) value ; out . write ( b ) ; length = b . length ; writeUnsupportedTypeMessage ( new WritingNotSupportedException ( type , value ) ) ; } else throw new WritingNotSupportedException ( type , value ) ; break ; } } return length ; } } 	1
package org . apache . poi . poifs . filesystem ; import java . io . * ; import java . util . * ; import org . apache . poi . hpsf . ClassID ; public interface DirectoryEntry extends Entry { public Iterator getEntries ( ) ; public boolean isEmpty ( ) ; public int getEntryCount ( ) ; public Entry getEntry ( final String name ) throws FileNotFoundException ; public DocumentEntry createDocument ( final String name , final InputStream stream ) throws IOException ; public DocumentEntry createDocument ( final String name , final int size , final POIFSWriterListener writer ) throws IOException ; public DirectoryEntry createDirectory ( final String name ) throws IOException ; public ClassID getStorageClsid ( ) ; public void setStorageClsid ( ClassID clsidStorage ) ; } 	0
package org . apache . poi . hssf . usermodel ; import org . apache . poi . hssf . record . ExtendedFormatRecord ; import org . apache . poi . hssf . util . * ; public class HSSFCellStyle { private ExtendedFormatRecord format = null ; private short index = 0 ; public final static short ALIGN_GENERAL = 0x0 ; public final static short ALIGN_LEFT = 0x1 ; public final static short ALIGN_CENTER = 0x2 ; public final static short ALIGN_RIGHT = 0x3 ; public final static short ALIGN_FILL = 0x4 ; public final static short ALIGN_JUSTIFY = 0x5 ; public final static short ALIGN_CENTER_SELECTION = 0x6 ; public final static short VERTICAL_TOP = 0x0 ; public final static short VERTICAL_CENTER = 0x1 ; public final static short VERTICAL_BOTTOM = 0x2 ; public final static short VERTICAL_JUSTIFY = 0x3 ; public final static short BORDER_NONE = 0x0 ; public final static short BORDER_THIN = 0x1 ; public final static short BORDER_MEDIUM = 0x2 ; public final static short BORDER_DASHED = 0x3 ; public final static short BORDER_HAIR = 0x4 ; public final static short BORDER_THICK = 0x5 ; public final static short BORDER_DOUBLE = 0x6 ; public final static short BORDER_DOTTED = 0x7 ; public final static short BORDER_MEDIUM_DASHED = 0x8 ; public final static short BORDER_DASH_DOT = 0x9 ; public final static short BORDER_MEDIUM_DASH_DOT = 0xA ; public final static short BORDER_DASH_DOT_DOT = 0xB ; public final static short BORDER_MEDIUM_DASH_DOT_DOT = 0xC ; public final static short BORDER_SLANTED_DASH_DOT = 0xD ; public final static short NO_FILL = 0 ; public final static short SOLID_FOREGROUND = 1 ; public final static short FINE_DOTS = 2 ; public final static short ALT_BARS = 3 ; public final static short SPARSE_DOTS = 4 ; public final static short THICK_HORZ_BANDS = 5 ; public final static short THICK_VERT_BANDS = 6 ; public final static short THICK_BACKWARD_DIAG = 7 ; public final static short THICK_FORWARD_DIAG = 8 ; public final static short BIG_SPOTS = 9 ; public final static short BRICKS = 10 ; public final static short THIN_HORZ_BANDS = 11 ; public final static short THIN_VERT_BANDS = 12 ; public final static short THIN_BACKWARD_DIAG = 13 ; public final static short THIN_FORWARD_DIAG = 14 ; public final static short SQUARES = 15 ; public final static short DIAMONDS = 16 ; public final static short LESS_DOTS = 17 ; public final static short LEAST_DOTS = 18 ; protected HSSFCellStyle ( short index , ExtendedFormatRecord rec ) { this . index = index ; format = rec ; } public short getIndex ( ) { return index ; } public void setDataFormat ( short fmt ) { format . setFormatIndex ( fmt ) ; } public short getDataFormat ( ) { return format . getFormatIndex ( ) ; } public void setFont ( HSSFFont font ) { format . setIndentNotParentFont ( true ) ; short fontindex = font . getIndex ( ) ; format . setFontIndex ( fontindex ) ; } public short getFontIndex ( ) { return format . getFontIndex ( ) ; } public void setHidden ( boolean hidden ) { format . setIndentNotParentCellOptions ( true ) ; format . setHidden ( hidden ) ; } public boolean getHidden ( ) { return format . isHidden ( ) ; } public void setLocked ( boolean locked ) { format . setIndentNotParentCellOptions ( true ) ; format . setLocked ( locked ) ; } public boolean getLocked ( ) { return format . isLocked ( ) ; } public void setAlignment ( short align ) { format . setIndentNotParentAlignment ( true ) ; format . setAlignment ( align ) ; } public short getAlignment ( ) { return format . getAlignment ( ) ; } public void setWrapText ( boolean wrapped ) { format . setIndentNotParentAlignment ( true ) ; format . setWrapText ( wrapped ) ; } public boolean getWrapText ( ) { return format . getWrapText ( ) ; } public void setVerticalAlignment ( short align ) { format . setVerticalAlignment ( align ) ; } public short getVerticalAlignment ( ) { return format . getVerticalAlignment ( ) ; } public void setRotation ( short rotation ) { if ( ( rotation < 0 ) && ( rotation >= - 90 ) ) { rotation = ( short ) ( 90 - rotation ) ; } else if ( ( rotation < - 90 ) || ( rotation > 90 ) ) throw new IllegalArgumentException ( "The rotation must be between -90 and 90 degrees" ) ; format . setRotation ( rotation ) ; } public short getRotation ( ) { short rotation = format . getRotation ( ) ; if ( rotation > 90 ) rotation = ( short ) ( 90 - rotation ) ; return rotation ; } public void setIndention ( short indent ) { format . setIndent ( indent ) ; } public short getIndention ( ) { return format . getIndent ( ) ; } public void setBorderLeft ( short border ) { format . setIndentNotParentBorder ( true ) ; format . setBorderLeft ( border ) ; } public short getBorderLeft ( ) { return format . getBorderLeft ( ) ; } public void setBorderRight ( short border ) { format . setIndentNotParentBorder ( true ) ; format . setBorderRight ( border ) ; } public short getBorderRight ( ) { return format . getBorderRight ( ) ; } public void setBorderTop ( short border ) { format . setIndentNotParentBorder ( true ) ; format . setBorderTop ( border ) ; } public short getBorderTop ( ) { return format . getBorderTop ( ) ; } public void setBorderBottom ( short border ) { format . setIndentNotParentBorder ( true ) ; format . setBorderBottom ( border ) ; } public short getBorderBottom ( ) { return format . getBorderBottom ( ) ; } public void setLeftBorderColor ( short color ) { format . setLeftBorderPaletteIdx ( color ) ; } public short getLeftBorderColor ( ) { return format . getLeftBorderPaletteIdx ( ) ; } public void setRightBorderColor ( short color ) { format . setRightBorderPaletteIdx ( color ) ; } public short getRightBorderColor ( ) { return format . getRightBorderPaletteIdx ( ) ; } public void setTopBorderColor ( short color ) { format . setTopBorderPaletteIdx ( color ) ; } public short getTopBorderColor ( ) { return format . getTopBorderPaletteIdx ( ) ; } public void setBottomBorderColor ( short color ) { format . setBottomBorderPaletteIdx ( color ) ; } public short getBottomBorderColor ( ) { return format . getBottomBorderPaletteIdx ( ) ; } public void setFillPattern ( short fp ) { format . setAdtlFillPattern ( fp ) ; } public short getFillPattern ( ) { return format . getAdtlFillPattern ( ) ; } private void checkDefaultBackgroundFills ( ) { if ( format . getFillForeground ( ) == org . apache . poi . hssf . util . HSSFColor . AUTOMATIC . index ) { if ( format . getFillBackground ( ) != ( org . apache . poi . hssf . util . HSSFColor . AUTOMATIC . index + 1 ) ) setFillBackgroundColor ( ( short ) ( org . apache . poi . hssf . util . HSSFColor . AUTOMATIC . index + 1 ) ) ; } else if ( format . getFillBackground ( ) == org . apache . poi . hssf . util . HSSFColor . AUTOMATIC . index + 1 ) if ( format . getFillForeground ( ) != org . apache . poi . hssf . util . HSSFColor . AUTOMATIC . index ) setFillBackgroundColor ( org . apache . poi . hssf . util . HSSFColor . AUTOMATIC . index ) ; } public void setFillBackgroundColor ( short bg ) { format . setFillBackground ( bg ) ; checkDefaultBackgroundFills ( ) ; } public short getFillBackgroundColor ( ) { short result = format . getFillBackground ( ) ; if ( result == ( HSSFColor . AUTOMATIC . index + 1 ) ) return HSSFColor . AUTOMATIC . index ; else return result ; } public void setFillForegroundColor ( short bg ) { format . setFillForeground ( bg ) ; checkDefaultBackgroundFills ( ) ; } public short getFillForegroundColor ( ) { return format . getFillForeground ( ) ; } } 	1
package org . apache . poi . hssf . record ; import org . apache . poi . util . LittleEndian ; import org . apache . poi . util . BitField ; import org . apache . poi . util . BitFieldFactory ; public class ChartFormatRecord extends Record { public static final short sid = 0x1014 ; private int field1_x_position ; private int field2_y_position ; private int field3_width ; private int field4_height ; private short field5_grbit ; private BitField varyDisplayPattern = BitFieldFactory . getInstance ( 0x01 ) ; public ChartFormatRecord ( ) { } public ChartFormatRecord ( RecordInputStream in ) { super ( in ) ; } protected void validateSid ( short id ) { if ( id != sid ) { throw new RecordFormatException ( "NOT A CHARTFORMAT RECORD" ) ; } } protected void fillFields ( RecordInputStream in ) { field1_x_position = in . readInt ( ) ; field2_y_position = in . readInt ( ) ; field3_width = in . readInt ( ) ; field4_height = in . readInt ( ) ; field5_grbit = in . readShort ( ) ; } public String toString ( ) { StringBuffer buffer = new StringBuffer ( ) ; buffer . append ( "[CHARTFORMAT]\n" ) ; buffer . append ( "    .xPosition       = " ) . append ( getXPosition ( ) ) . append ( "\n" ) ; buffer . append ( "    .yPosition       = " ) . append ( getYPosition ( ) ) . append ( "\n" ) ; buffer . append ( "    .width           = " ) . append ( getWidth ( ) ) . append ( "\n" ) ; buffer . append ( "    .height          = " ) . append ( getHeight ( ) ) . append ( "\n" ) ; buffer . append ( "    .grBit           = " ) . append ( Integer . toHexString ( field5_grbit ) ) . append ( "\n" ) ; buffer . append ( "[/CHARTFORMAT]\n" ) ; return buffer . toString ( ) ; } public int serialize ( int offset , byte [ ] data ) { LittleEndian . putShort ( data , 0 + offset , sid ) ; LittleEndian . putShort ( data , 2 + offset , ( ( short ) 22 ) ) ; LittleEndian . putInt ( data , 4 + offset , getXPosition ( ) ) ; LittleEndian . putInt ( data , 8 + offset , getYPosition ( ) ) ; LittleEndian . putInt ( data , 12 + offset , getWidth ( ) ) ; LittleEndian . putInt ( data , 16 + offset , getHeight ( ) ) ; LittleEndian . putShort ( data , 20 + offset , field5_grbit ) ; return getRecordSize ( ) ; } public int getRecordSize ( ) { return 22 ; } public short getSid ( ) { return sid ; } public int getXPosition ( ) { return field1_x_position ; } public void setXPosition ( int xPosition ) { this . field1_x_position = xPosition ; } public int getYPosition ( ) { return field2_y_position ; } public void setYPosition ( int yPosition ) { this . field2_y_position = yPosition ; } public int getWidth ( ) { return field3_width ; } public void setWidth ( int width ) { this . field3_width = width ; } public int getHeight ( ) { return field4_height ; } public void setHeight ( int height ) { this . field4_height = height ; } public boolean getVaryDisplayPattern ( ) { return varyDisplayPattern . isSet ( field5_grbit ) ; } public void setVaryDisplayPattern ( boolean value ) { field5_grbit = varyDisplayPattern . setShortBoolean ( field5_grbit , value ) ; } } 	1
package org . apache . poi . poifs . filesystem ; import java . util . * ; import org . apache . poi . poifs . dev . POIFSViewable ; import org . apache . poi . poifs . property . DocumentProperty ; public class DocumentNode extends EntryNode implements DocumentEntry , POIFSViewable { private POIFSDocument _document ; DocumentNode ( final DocumentProperty property , final DirectoryNode parent ) { super ( property , parent ) ; _document = property . getDocument ( ) ; } POIFSDocument getDocument ( ) { return _document ; } public int getSize ( ) { return getProperty ( ) . getSize ( ) ; } public boolean isDocumentEntry ( ) { return true ; } protected boolean isDeleteOK ( ) { return true ; } public Object [ ] getViewableArray ( ) { return new Object [ 0 ] ; } public Iterator getViewableIterator ( ) { List components = new ArrayList ( ) ; components . add ( getProperty ( ) ) ; components . add ( _document ) ; return components . iterator ( ) ; } public boolean preferArray ( ) { return false ; } public String getShortDescription ( ) { return getName ( ) ; } } 	0
package org . apache . poi . hpsf ; import java . io . InputStream ; import java . io . IOException ; import java . io . UnsupportedEncodingException ; import java . rmi . UnexpectedException ; import org . apache . poi . hpsf . wellknown . SectionIDMap ; public class PropertySetFactory { public static PropertySet create ( final InputStream stream ) throws NoPropertySetStreamException , MarkUnsupportedException , UnsupportedEncodingException , IOException { final PropertySet ps = new PropertySet ( stream ) ; try { if ( ps . isSummaryInformation ( ) ) return new SummaryInformation ( ps ) ; else if ( ps . isDocumentSummaryInformation ( ) ) return new DocumentSummaryInformation ( ps ) ; else return ps ; } catch ( UnexpectedPropertySetTypeException ex ) { throw new UnexpectedException ( ex . toString ( ) ) ; } } public static SummaryInformation newSummaryInformation ( ) { final MutablePropertySet ps = new MutablePropertySet ( ) ; final MutableSection s = ( MutableSection ) ps . getFirstSection ( ) ; s . setFormatID ( SectionIDMap . SUMMARY_INFORMATION_ID ) ; try { return new SummaryInformation ( ps ) ; } catch ( UnexpectedPropertySetTypeException ex ) { throw new HPSFRuntimeException ( ex ) ; } } public static DocumentSummaryInformation newDocumentSummaryInformation ( ) { final MutablePropertySet ps = new MutablePropertySet ( ) ; final MutableSection s = ( MutableSection ) ps . getFirstSection ( ) ; s . setFormatID ( SectionIDMap . DOCUMENT_SUMMARY_INFORMATION_ID [ 0 ] ) ; try { return new DocumentSummaryInformation ( ps ) ; } catch ( UnexpectedPropertySetTypeException ex ) { throw new HPSFRuntimeException ( ex ) ; } } } 	0
package org . apache . poi . hssf . record ; public interface CellValueRecordInterface { public int getRow ( ) ; public short getColumn ( ) ; public void setRow ( int row ) ; public void setColumn ( short col ) ; public void setXFIndex ( short xf ) ; public short getXFIndex ( ) ; public boolean isBefore ( CellValueRecordInterface i ) ; public boolean isAfter ( CellValueRecordInterface i ) ; public boolean isEqual ( CellValueRecordInterface i ) ; public Object clone ( ) ; } 	0
package org . apache . poi . hssf . util ; public class PaneInformation { public static final byte PANE_LOWER_RIGHT = ( byte ) 0 ; public static final byte PANE_UPPER_RIGHT = ( byte ) 1 ; public static final byte PANE_LOWER_LEFT = ( byte ) 2 ; public static final byte PANE_UPPER_LEFT = ( byte ) 3 ; private short x ; private short y ; private short topRow ; private short leftColumn ; private byte activePane ; private boolean frozen = false ; public PaneInformation ( short x , short y , short top , short left , byte active , boolean frozen ) { this . x = x ; this . y = y ; this . topRow = top ; this . leftColumn = left ; this . activePane = active ; this . frozen = frozen ; } public short getVerticalSplitPosition ( ) { return x ; } public short getHorizontalSplitPosition ( ) { return y ; } public short getHorizontalSplitTopRow ( ) { return topRow ; } public short getVerticalSplitLeftColumn ( ) { return leftColumn ; } public byte getActivePane ( ) { return activePane ; } public boolean isFreezePane ( ) { return frozen ; } } 	0
package org . apache . poi . hssf . record . formula ; import org . apache . poi . hssf . record . RecordInputStream ; public class DeletedRef3DPtg extends Ref3DPtg { public final static byte sid = 0x3c ; public DeletedRef3DPtg ( RecordInputStream in ) { super ( in ) ; } public DeletedRef3DPtg ( String cellref , short externIdx ) { super ( cellref , externIdx ) ; } } 	0
package org . apache . poi . hssf . record . formula ; import org . apache . poi . hssf . model . Workbook ; import org . apache . poi . hssf . record . RecordInputStream ; public class UnionPtg extends OperationPtg { public final static byte sid = 0x10 ; public UnionPtg ( ) { } public UnionPtg ( RecordInputStream in ) { } public int getSize ( ) { return 1 ; } public void writeBytes ( byte [ ] array , int offset ) { array [ offset + 0 ] = sid ; } public Object clone ( ) { return new UnionPtg ( ) ; } public int getType ( ) { return TYPE_BINARY ; } public String toFormulaString ( Workbook book ) { return "," ; } public String toFormulaString ( String [ ] operands ) { StringBuffer buffer = new StringBuffer ( ) ; buffer . append ( operands [ 0 ] ) ; buffer . append ( "," ) ; buffer . append ( operands [ 1 ] ) ; return buffer . toString ( ) ; } public int getNumberOfOperands ( ) { return 2 ; } } 	0
package org . apache . poi . poifs . storage ; import org . apache . poi . poifs . filesystem . BATManaged ; import org . apache . poi . poifs . filesystem . POIFSDocument ; import org . apache . poi . poifs . property . RootProperty ; import java . util . * ; import java . io . * ; public class SmallBlockTableWriter implements BlockWritable , BATManaged { private BlockAllocationTableWriter _sbat ; private List _small_blocks ; private int _big_block_count ; private RootProperty _root ; public SmallBlockTableWriter ( final List documents , final RootProperty root ) { _sbat = new BlockAllocationTableWriter ( ) ; _small_blocks = new ArrayList ( ) ; _root = root ; Iterator iter = documents . iterator ( ) ; while ( iter . hasNext ( ) ) { POIFSDocument doc = ( POIFSDocument ) iter . next ( ) ; BlockWritable [ ] blocks = doc . getSmallBlocks ( ) ; if ( blocks . length != 0 ) { doc . setStartBlock ( _sbat . allocateSpace ( blocks . length ) ) ; for ( int j = 0 ; j < blocks . length ; j ++ ) { _small_blocks . add ( blocks [ j ] ) ; } } } _sbat . simpleCreateBlocks ( ) ; _root . setSize ( _small_blocks . size ( ) ) ; _big_block_count = SmallDocumentBlock . fill ( _small_blocks ) ; } public int getSBATBlockCount ( ) { return ( _big_block_count + 15 ) / 16 ; } public BlockAllocationTableWriter getSBAT ( ) { return _sbat ; } public int countBlocks ( ) { return _big_block_count ; } public void setStartBlock ( int start_block ) { _root . setStartBlock ( start_block ) ; } public void writeBlocks ( final OutputStream stream ) throws IOException { Iterator iter = _small_blocks . iterator ( ) ; while ( iter . hasNext ( ) ) { ( ( BlockWritable ) iter . next ( ) ) . writeBlocks ( stream ) ; } } } 	1
package org . apache . poi . hssf . record . formula ; import org . apache . poi . hssf . model . Workbook ; import org . apache . poi . hssf . record . RecordInputStream ; import org . apache . poi . util . LittleEndian ; import org . apache . poi . util . BitField ; import org . apache . poi . util . BitFieldFactory ; public class AttrPtg extends OperationPtg { public final static byte sid = 0x19 ; private final static int SIZE = 4 ; private byte field_1_options ; private short field_2_data ; private BitField semiVolatile = BitFieldFactory . getInstance ( 0x01 ) ; private BitField optiIf = BitFieldFactory . getInstance ( 0x02 ) ; private BitField optiChoose = BitFieldFactory . getInstance ( 0x04 ) ; private BitField optGoto = BitFieldFactory . getInstance ( 0x08 ) ; private BitField sum = BitFieldFactory . getInstance ( 0x10 ) ; private BitField baxcel = BitFieldFactory . getInstance ( 0x20 ) ; private BitField space = BitFieldFactory . getInstance ( 0x40 ) ; public AttrPtg ( ) { } public AttrPtg ( RecordInputStream in ) { field_1_options = in . readByte ( ) ; field_2_data = in . readShort ( ) ; } public void setOptions ( byte options ) { field_1_options = options ; } public byte getOptions ( ) { return field_1_options ; } public boolean isSemiVolatile ( ) { return semiVolatile . isSet ( getOptions ( ) ) ; } public boolean isOptimizedIf ( ) { return optiIf . isSet ( getOptions ( ) ) ; } public boolean isOptimizedChoose ( ) { return optiChoose . isSet ( getOptions ( ) ) ; } public boolean isGoto ( ) { return optGoto . isSet ( getOptions ( ) ) ; } public boolean isSum ( ) { return sum . isSet ( getOptions ( ) ) ; } public void setSum ( boolean bsum ) { field_1_options = sum . setByteBoolean ( field_1_options , bsum ) ; } public void setOptimizedIf ( boolean bif ) { field_1_options = optiIf . setByteBoolean ( field_1_options , bif ) ; } public void setGoto ( boolean isGoto ) { field_1_options = optGoto . setByteBoolean ( field_1_options , isGoto ) ; } public boolean isBaxcel ( ) { return baxcel . isSet ( getOptions ( ) ) ; } public boolean isSpace ( ) { return space . isSet ( getOptions ( ) ) ; } public void setData ( short data ) { field_2_data = data ; } public short getData ( ) { return field_2_data ; } public String toString ( ) { StringBuffer buffer = new StringBuffer ( ) ; buffer . append ( "AttrPtg\n" ) ; buffer . append ( "options=" ) . append ( field_1_options ) . append ( "\n" ) ; buffer . append ( "data   =" ) . append ( field_2_data ) . append ( "\n" ) ; buffer . append ( "semi   =" ) . append ( isSemiVolatile ( ) ) . append ( "\n" ) ; buffer . append ( "optimif=" ) . append ( isOptimizedIf ( ) ) . append ( "\n" ) ; buffer . append ( "optchos=" ) . append ( isOptimizedChoose ( ) ) . append ( "\n" ) ; buffer . append ( "isGoto =" ) . append ( isGoto ( ) ) . append ( "\n" ) ; buffer . append ( "isSum  =" ) . append ( isSum ( ) ) . append ( "\n" ) ; buffer . append ( "isBaxce=" ) . append ( isBaxcel ( ) ) . append ( "\n" ) ; buffer . append ( "isSpace=" ) . append ( isSpace ( ) ) . append ( "\n" ) ; return buffer . toString ( ) ; } public void writeBytes ( byte [ ] array , int offset ) { array [ offset ] = sid ; array [ offset + 1 ] = field_1_options ; LittleEndian . putShort ( array , offset + 2 , field_2_data ) ; } public int getSize ( ) { return SIZE ; } public String toFormulaString ( String [ ] operands ) { if ( space . isSet ( field_1_options ) ) { return operands [ 0 ] ; } else if ( optiIf . isSet ( field_1_options ) ) { return toFormulaString ( ( Workbook ) null ) + "(" + operands [ 0 ] + ")" ; } else if ( optGoto . isSet ( field_1_options ) ) { return toFormulaString ( ( Workbook ) null ) + operands [ 0 ] ; } else { return toFormulaString ( ( Workbook ) null ) + "(" + operands [ 0 ] + ")" ; } } public int getNumberOfOperands ( ) { return 1 ; } public int getType ( ) { return - 1 ; } public String toFormulaString ( Workbook book ) { if ( semiVolatile . isSet ( field_1_options ) ) { return "ATTR(semiVolatile)" ; } if ( optiIf . isSet ( field_1_options ) ) { return "IF" ; } if ( optiChoose . isSet ( field_1_options ) ) { return "CHOOSE" ; } if ( optGoto . isSet ( field_1_options ) ) { return "" ; } if ( sum . isSet ( field_1_options ) ) { return "SUM" ; } if ( baxcel . isSet ( field_1_options ) ) { return "ATTR(baxcel)" ; } if ( space . isSet ( field_1_options ) ) { return "" ; } return "UNKNOWN ATTRIBUTE" ; } public byte getDefaultOperandClass ( ) { return Ptg . CLASS_VALUE ; } public Object clone ( ) { AttrPtg ptg = new AttrPtg ( ) ; ptg . field_1_options = field_1_options ; ptg . field_2_data = field_2_data ; return ptg ; } } 	1
package org . apache . poi . hpsf ; import org . apache . poi . util . LittleEndian ; public class Thumbnail { public static int OFFSET_CFTAG = 4 ; public static int OFFSET_CF = 8 ; public static int OFFSET_WMFDATA = 20 ; public static int CFTAG_WINDOWS = - 1 ; public static int CFTAG_MACINTOSH = - 2 ; public static int CFTAG_FMTID = - 3 ; public static int CFTAG_NODATA = 0 ; public static int CF_METAFILEPICT = 3 ; public static int CF_DIB = 8 ; public static int CF_ENHMETAFILE = 14 ; public static int CF_BITMAP = 2 ; private byte [ ] thumbnailData = null ; public Thumbnail ( ) { super ( ) ; } public Thumbnail ( final byte [ ] thumbnailData ) { this . thumbnailData = thumbnailData ; } public byte [ ] getThumbnail ( ) { return thumbnailData ; } public void setThumbnail ( final byte [ ] thumbnail ) { this . thumbnailData = thumbnail ; } public long getClipboardFormatTag ( ) { long clipboardFormatTag = LittleEndian . getUInt ( getThumbnail ( ) , OFFSET_CFTAG ) ; return clipboardFormatTag ; } public long getClipboardFormat ( ) throws HPSFException { if ( ! ( getClipboardFormatTag ( ) == CFTAG_WINDOWS ) ) throw new HPSFException ( "Clipboard Format Tag of Thumbnail must " + "be CFTAG_WINDOWS." ) ; return LittleEndian . getUInt ( getThumbnail ( ) , OFFSET_CF ) ; } public byte [ ] getThumbnailAsWMF ( ) throws HPSFException { if ( ! ( getClipboardFormatTag ( ) == CFTAG_WINDOWS ) ) throw new HPSFException ( "Clipboard Format Tag of Thumbnail must " + "be CFTAG_WINDOWS." ) ; if ( ! ( getClipboardFormat ( ) == CF_METAFILEPICT ) ) throw new HPSFException ( "Clipboard Format of Thumbnail must " + "be CF_METAFILEPICT." ) ; else { byte [ ] thumbnail = getThumbnail ( ) ; int wmfImageLength = thumbnail . length - OFFSET_WMFDATA ; byte [ ] wmfImage = new byte [ wmfImageLength ] ; System . arraycopy ( thumbnail , OFFSET_WMFDATA , wmfImage , 0 , wmfImageLength ) ; return wmfImage ; } } } 	1
package org . apache . poi . hssf . model ; import org . apache . poi . ddf . * ; import org . apache . poi . hssf . record . ObjRecord ; import org . apache . poi . hssf . record . EscherAggregate ; import org . apache . poi . hssf . record . CommonObjectDataSubRecord ; import org . apache . poi . hssf . record . EndSubRecord ; import org . apache . poi . hssf . usermodel . HSSFShape ; import org . apache . poi . hssf . usermodel . HSSFPolygon ; import org . apache . poi . util . LittleEndian ; public class PolygonShape extends AbstractShape { public final static short OBJECT_TYPE_MICROSOFT_OFFICE_DRAWING = 30 ; private EscherContainerRecord spContainer ; private ObjRecord objRecord ; PolygonShape ( HSSFPolygon hssfShape , int shapeId ) { spContainer = createSpContainer ( hssfShape , shapeId ) ; objRecord = createObjRecord ( hssfShape , shapeId ) ; } private EscherContainerRecord createSpContainer ( HSSFPolygon hssfShape , int shapeId ) { HSSFShape shape = hssfShape ; EscherContainerRecord spContainer = new EscherContainerRecord ( ) ; EscherSpRecord sp = new EscherSpRecord ( ) ; EscherOptRecord opt = new EscherOptRecord ( ) ; EscherClientDataRecord clientData = new EscherClientDataRecord ( ) ; spContainer . setRecordId ( EscherContainerRecord . SP_CONTAINER ) ; spContainer . setOptions ( ( short ) 0x000F ) ; sp . setRecordId ( EscherSpRecord . RECORD_ID ) ; sp . setOptions ( ( short ) ( ( EscherAggregate . ST_DONUT << 4 ) | 0x2 ) ) ; sp . setShapeId ( shapeId ) ; if ( hssfShape . getParent ( ) == null ) sp . setFlags ( EscherSpRecord . FLAG_HAVEANCHOR | EscherSpRecord . FLAG_HASSHAPETYPE ) ; else sp . setFlags ( EscherSpRecord . FLAG_CHILD | EscherSpRecord . FLAG_HAVEANCHOR | EscherSpRecord . FLAG_HASSHAPETYPE ) ; opt . setRecordId ( EscherOptRecord . RECORD_ID ) ; opt . addEscherProperty ( new EscherSimpleProperty ( EscherProperties . TRANSFORM__ROTATION , false , false , 0 ) ) ; opt . addEscherProperty ( new EscherSimpleProperty ( EscherProperties . GEOMETRY__RIGHT , false , false , hssfShape . getDrawAreaWidth ( ) ) ) ; opt . addEscherProperty ( new EscherSimpleProperty ( EscherProperties . GEOMETRY__BOTTOM , false , false , hssfShape . getDrawAreaHeight ( ) ) ) ; opt . addEscherProperty ( new EscherShapePathProperty ( EscherProperties . GEOMETRY__SHAPEPATH , EscherShapePathProperty . COMPLEX ) ) ; EscherArrayProperty verticesProp = new EscherArrayProperty ( EscherProperties . GEOMETRY__VERTICES , false , new byte [ 0 ] ) ; verticesProp . setNumberOfElementsInArray ( hssfShape . getXPoints ( ) . length + 1 ) ; verticesProp . setNumberOfElementsInMemory ( hssfShape . getXPoints ( ) . length + 1 ) ; verticesProp . setSizeOfElements ( 0xFFF0 ) ; for ( int i = 0 ; i < hssfShape . getXPoints ( ) . length ; i ++ ) { byte [ ] data = new byte [ 4 ] ; LittleEndian . putShort ( data , 0 , ( short ) hssfShape . getXPoints ( ) [ i ] ) ; LittleEndian . putShort ( data , 2 , ( short ) hssfShape . getYPoints ( ) [ i ] ) ; verticesProp . setElement ( i , data ) ; } int point = hssfShape . getXPoints ( ) . length ; byte [ ] data = new byte [ 4 ] ; LittleEndian . putShort ( data , 0 , ( short ) hssfShape . getXPoints ( ) [ 0 ] ) ; LittleEndian . putShort ( data , 2 , ( short ) hssfShape . getYPoints ( ) [ 0 ] ) ; verticesProp . setElement ( point , data ) ; opt . addEscherProperty ( verticesProp ) ; EscherArrayProperty segmentsProp = new EscherArrayProperty ( EscherProperties . GEOMETRY__SEGMENTINFO , false , null ) ; segmentsProp . setSizeOfElements ( 0x0002 ) ; segmentsProp . setNumberOfElementsInArray ( hssfShape . getXPoints ( ) . length * 2 + 4 ) ; segmentsProp . setNumberOfElementsInMemory ( hssfShape . getXPoints ( ) . length * 2 + 4 ) ; segmentsProp . setElement ( 0 , new byte [ ] { ( byte ) 0x00 , ( byte ) 0x40 } ) ; segmentsProp . setElement ( 1 , new byte [ ] { ( byte ) 0x00 , ( byte ) 0xAC } ) ; for ( int i = 0 ; i < hssfShape . getXPoints ( ) . length ; i ++ ) { segmentsProp . setElement ( 2 + i * 2 , new byte [ ] { ( byte ) 0x01 , ( byte ) 0x00 } ) ; segmentsProp . setElement ( 3 + i * 2 , new byte [ ] { ( byte ) 0x00 , ( byte ) 0xAC } ) ; } segmentsProp . setElement ( segmentsProp . getNumberOfElementsInArray ( ) - 2 , new byte [ ] { ( byte ) 0x01 , ( byte ) 0x60 } ) ; segmentsProp . setElement ( segmentsProp . getNumberOfElementsInArray ( ) - 1 , new byte [ ] { ( byte ) 0x00 , ( byte ) 0x80 } ) ; opt . addEscherProperty ( segmentsProp ) ; opt . addEscherProperty ( new EscherSimpleProperty ( EscherProperties . GEOMETRY__FILLOK , false , false , 0x00010001 ) ) ; opt . addEscherProperty ( new EscherSimpleProperty ( EscherProperties . LINESTYLE__LINESTARTARROWHEAD , false , false , 0x0 ) ) ; opt . addEscherProperty ( new EscherSimpleProperty ( EscherProperties . LINESTYLE__LINEENDARROWHEAD , false , false , 0x0 ) ) ; opt . addEscherProperty ( new EscherSimpleProperty ( EscherProperties . LINESTYLE__LINEENDCAPSTYLE , false , false , 0x0 ) ) ; addStandardOptions ( shape , opt ) ; EscherRecord anchor = createAnchor ( shape . getAnchor ( ) ) ; clientData . setRecordId ( EscherClientDataRecord . RECORD_ID ) ; clientData . setOptions ( ( short ) 0x0000 ) ; spContainer . addChildRecord ( sp ) ; spContainer . addChildRecord ( opt ) ; spContainer . addChildRecord ( anchor ) ; spContainer . addChildRecord ( clientData ) ; return spContainer ; } private ObjRecord createObjRecord ( HSSFShape hssfShape , int shapeId ) { HSSFShape shape = hssfShape ; ObjRecord obj = new ObjRecord ( ) ; CommonObjectDataSubRecord c = new CommonObjectDataSubRecord ( ) ; c . setObjectType ( OBJECT_TYPE_MICROSOFT_OFFICE_DRAWING ) ; c . setObjectId ( ( short ) ( shapeId ) ) ; c . setLocked ( true ) ; c . setPrintable ( true ) ; c . setAutofill ( true ) ; c . setAutoline ( true ) ; EndSubRecord e = new EndSubRecord ( ) ; obj . addSubRecord ( c ) ; obj . addSubRecord ( e ) ; return obj ; } public EscherContainerRecord getSpContainer ( ) { return spContainer ; } public ObjRecord getObjRecord ( ) { return objRecord ; } } 	1
package org . apache . poi . hssf . record ; import org . apache . poi . util . LittleEndian ; public class DeltaRecord extends Record { public final static short sid = 0x10 ; public final static double DEFAULT_VALUE = 0.0010 ; private double field_1_max_change ; public DeltaRecord ( ) { } public DeltaRecord ( RecordInputStream in ) { super ( in ) ; } protected void validateSid ( short id ) { if ( id != sid ) { throw new RecordFormatException ( "NOT A DELTA RECORD" ) ; } } protected void fillFields ( RecordInputStream in ) { field_1_max_change = in . readDouble ( ) ; } public void setMaxChange ( double maxChange ) { field_1_max_change = maxChange ; } public double getMaxChange ( ) { return field_1_max_change ; } public String toString ( ) { StringBuffer buffer = new StringBuffer ( ) ; buffer . append ( "[DELTA]\n" ) ; buffer . append ( "    .maxchange      = " ) . append ( getMaxChange ( ) ) . append ( "\n" ) ; buffer . append ( "[/DELTA]\n" ) ; return buffer . toString ( ) ; } public int serialize ( int offset , byte [ ] data ) { LittleEndian . putShort ( data , 0 + offset , sid ) ; LittleEndian . putShort ( data , 2 + offset , ( short ) 0x8 ) ; LittleEndian . putDouble ( data , 4 + offset , getMaxChange ( ) ) ; return getRecordSize ( ) ; } public int getRecordSize ( ) { return 12 ; } public short getSid ( ) { return sid ; } public Object clone ( ) { DeltaRecord rec = new DeltaRecord ( ) ; rec . field_1_max_change = field_1_max_change ; return rec ; } } 	1
package org . apache . poi . hssf . record ; import org . apache . poi . util . * ; public class LinkedDataRecord extends Record { public final static short sid = 0x1051 ; private byte field_1_linkType ; public final static byte LINK_TYPE_TITLE_OR_TEXT = 0 ; public final static byte LINK_TYPE_VALUES = 1 ; public final static byte LINK_TYPE_CATEGORIES = 2 ; private byte field_2_referenceType ; public final static byte REFERENCE_TYPE_DEFAULT_CATEGORIES = 0 ; public final static byte REFERENCE_TYPE_DIRECT = 1 ; public final static byte REFERENCE_TYPE_WORKSHEET = 2 ; public final static byte REFERENCE_TYPE_NOT_USED = 3 ; public final static byte REFERENCE_TYPE_ERROR_REPORTED = 4 ; private short field_3_options ; private BitField customNumberFormat = BitFieldFactory . getInstance ( 0x1 ) ; private short field_4_indexNumberFmtRecord ; private LinkedDataFormulaField field_5_formulaOfLink ; public LinkedDataRecord ( ) { } public LinkedDataRecord ( RecordInputStream in ) { super ( in ) ; } protected void validateSid ( short id ) { if ( id != sid ) { throw new RecordFormatException ( "Not a LinkedData record" ) ; } } protected void fillFields ( RecordInputStream in ) { field_1_linkType = in . readByte ( ) ; field_2_referenceType = in . readByte ( ) ; field_3_options = in . readShort ( ) ; field_4_indexNumberFmtRecord = in . readShort ( ) ; field_5_formulaOfLink = new org . apache . poi . hssf . record . LinkedDataFormulaField ( ) ; field_5_formulaOfLink . fillField ( in ) ; } public String toString ( ) { StringBuffer buffer = new StringBuffer ( ) ; buffer . append ( "[AI]\n" ) ; buffer . append ( "    .linkType             = " ) . append ( "0x" ) . append ( HexDump . toHex ( getLinkType ( ) ) ) . append ( " (" ) . append ( getLinkType ( ) ) . append ( " )" ) ; buffer . append ( System . getProperty ( "line.separator" ) ) ; buffer . append ( "    .referenceType        = " ) . append ( "0x" ) . append ( HexDump . toHex ( getReferenceType ( ) ) ) . append ( " (" ) . append ( getReferenceType ( ) ) . append ( " )" ) ; buffer . append ( System . getProperty ( "line.separator" ) ) ; buffer . append ( "    .options              = " ) . append ( "0x" ) . append ( HexDump . toHex ( getOptions ( ) ) ) . append ( " (" ) . append ( getOptions ( ) ) . append ( " )" ) ; buffer . append ( System . getProperty ( "line.separator" ) ) ; buffer . append ( "         .customNumberFormat       = " ) . append ( isCustomNumberFormat ( ) ) . append ( '\n' ) ; buffer . append ( "    .indexNumberFmtRecord = " ) . append ( "0x" ) . append ( HexDump . toHex ( getIndexNumberFmtRecord ( ) ) ) . append ( " (" ) . append ( getIndexNumberFmtRecord ( ) ) . append ( " )" ) ; buffer . append ( System . getProperty ( "line.separator" ) ) ; buffer . append ( "    .formulaOfLink        = " ) . append ( " (" ) . append ( getFormulaOfLink ( ) ) . append ( " )" ) ; buffer . append ( System . getProperty ( "line.separator" ) ) ; buffer . append ( "[/AI]\n" ) ; return buffer . toString ( ) ; } public int serialize ( int offset , byte [ ] data ) { int pos = 0 ; LittleEndian . putShort ( data , 0 + offset , sid ) ; LittleEndian . putShort ( data , 2 + offset , ( short ) ( getRecordSize ( ) - 4 ) ) ; data [ 4 + offset + pos ] = field_1_linkType ; data [ 5 + offset + pos ] = field_2_referenceType ; LittleEndian . putShort ( data , 6 + offset + pos , field_3_options ) ; LittleEndian . putShort ( data , 8 + offset + pos , field_4_indexNumberFmtRecord ) ; pos += field_5_formulaOfLink . serializeField ( pos + 10 + offset , data ) ; return getRecordSize ( ) ; } public int getRecordSize ( ) { return 4 + 1 + 1 + 2 + 2 + field_5_formulaOfLink . getSize ( ) ; } public short getSid ( ) { return sid ; } public Object clone ( ) { LinkedDataRecord rec = new LinkedDataRecord ( ) ; rec . field_1_linkType = field_1_linkType ; rec . field_2_referenceType = field_2_referenceType ; rec . field_3_options = field_3_options ; rec . field_4_indexNumberFmtRecord = field_4_indexNumberFmtRecord ; rec . field_5_formulaOfLink = ( ( org . apache . poi . hssf . record . LinkedDataFormulaField ) field_5_formulaOfLink . clone ( ) ) ; ; return rec ; } public byte getLinkType ( ) { return field_1_linkType ; } public void setLinkType ( byte field_1_linkType ) { this . field_1_linkType = field_1_linkType ; } public byte getReferenceType ( ) { return field_2_referenceType ; } public void setReferenceType ( byte field_2_referenceType ) { this . field_2_referenceType = field_2_referenceType ; } public short getOptions ( ) { return field_3_options ; } public void setOptions ( short field_3_options ) { this . field_3_options = field_3_options ; } public short getIndexNumberFmtRecord ( ) { return field_4_indexNumberFmtRecord ; } public void setIndexNumberFmtRecord ( short field_4_indexNumberFmtRecord ) { this . field_4_indexNumberFmtRecord = field_4_indexNumberFmtRecord ; } public LinkedDataFormulaField getFormulaOfLink ( ) { return field_5_formulaOfLink ; } public void setFormulaOfLink ( LinkedDataFormulaField field_5_formulaOfLink ) { this . field_5_formulaOfLink = field_5_formulaOfLink ; } public void setCustomNumberFormat ( boolean value ) { field_3_options = customNumberFormat . setShortBoolean ( field_3_options , value ) ; } public boolean isCustomNumberFormat ( ) { return customNumberFormat . isSet ( field_3_options ) ; } } 	1
package org . apache . poi . hpsf ; public class MarkUnsupportedException extends HPSFException { public MarkUnsupportedException ( ) { super ( ) ; } public MarkUnsupportedException ( final String msg ) { super ( msg ) ; } public MarkUnsupportedException ( final Throwable reason ) { super ( reason ) ; } public MarkUnsupportedException ( final String msg , final Throwable reason ) { super ( msg , reason ) ; } } 	0
package org . apache . poi . util ; import org . apache . poi . util . LittleEndian . BufferUnderrunException ; import java . io . * ; public class ShortField implements FixedField { private short _value ; private final int _offset ; public ShortField ( final int offset ) throws ArrayIndexOutOfBoundsException { if ( offset < 0 ) { throw new ArrayIndexOutOfBoundsException ( "Illegal offset: " + offset ) ; } _offset = offset ; } public ShortField ( final int offset , final short value ) throws ArrayIndexOutOfBoundsException { this ( offset ) ; set ( value ) ; } public ShortField ( final int offset , final byte [ ] data ) throws ArrayIndexOutOfBoundsException { this ( offset ) ; readFromBytes ( data ) ; } public ShortField ( final int offset , final short value , final byte [ ] data ) throws ArrayIndexOutOfBoundsException { this ( offset ) ; set ( value , data ) ; } public short get ( ) { return _value ; } public void set ( final short value ) { _value = value ; } public void set ( final short value , final byte [ ] data ) throws ArrayIndexOutOfBoundsException { _value = value ; writeToBytes ( data ) ; } public void readFromBytes ( final byte [ ] data ) throws ArrayIndexOutOfBoundsException { _value = LittleEndian . getShort ( data , _offset ) ; } public void readFromStream ( final InputStream stream ) throws IOException , BufferUnderrunException { _value = LittleEndian . readShort ( stream ) ; } public void writeToBytes ( final byte [ ] data ) throws ArrayIndexOutOfBoundsException { LittleEndian . putShort ( data , _offset , _value ) ; } public String toString ( ) { return String . valueOf ( _value ) ; } } 	0
package org . apache . poi . hssf . record ; import org . apache . poi . util . IntMapper ; class SSTRecordSizeCalculator { private IntMapper strings ; public SSTRecordSizeCalculator ( IntMapper strings ) { this . strings = strings ; } public int getRecordSize ( ) { UnicodeString . UnicodeRecordStats rs = new UnicodeString . UnicodeRecordStats ( ) ; rs . remainingSize -= SSTRecord . SST_RECORD_OVERHEAD ; rs . recordSize += SSTRecord . SST_RECORD_OVERHEAD ; for ( int i = 0 ; i < strings . size ( ) ; i ++ ) { UnicodeString unistr = ( ( UnicodeString ) strings . get ( i ) ) ; unistr . getRecordSize ( rs ) ; } return rs . recordSize ; } } 	0
package org . apache . poi . hssf . record ; import org . apache . poi . util . * ; public class UnitsRecord extends Record { public final static short sid = 0x1001 ; private short field_1_units ; public UnitsRecord ( ) { } public UnitsRecord ( RecordInputStream in ) { super ( in ) ; } protected void validateSid ( short id ) { if ( id != sid ) { throw new RecordFormatException ( "Not a Units record" ) ; } } protected void fillFields ( RecordInputStream in ) { field_1_units = in . readShort ( ) ; } public String toString ( ) { StringBuffer buffer = new StringBuffer ( ) ; buffer . append ( "[UNITS]\n" ) ; buffer . append ( "    .units                = " ) . append ( "0x" ) . append ( HexDump . toHex ( getUnits ( ) ) ) . append ( " (" ) . append ( getUnits ( ) ) . append ( " )" ) ; buffer . append ( System . getProperty ( "line.separator" ) ) ; buffer . append ( "[/UNITS]\n" ) ; return buffer . toString ( ) ; } public int serialize ( int offset , byte [ ] data ) { int pos = 0 ; LittleEndian . putShort ( data , 0 + offset , sid ) ; LittleEndian . putShort ( data , 2 + offset , ( short ) ( getRecordSize ( ) - 4 ) ) ; LittleEndian . putShort ( data , 4 + offset + pos , field_1_units ) ; return getRecordSize ( ) ; } public int getRecordSize ( ) { return 4 + 2 ; } public short getSid ( ) { return sid ; } public Object clone ( ) { UnitsRecord rec = new UnitsRecord ( ) ; rec . field_1_units = field_1_units ; return rec ; } public short getUnits ( ) { return field_1_units ; } public void setUnits ( short field_1_units ) { this . field_1_units = field_1_units ; } } 	1
package org . apache . poi . util ; import org . apache . poi . hssf . usermodel . HSSFSheet ; import org . apache . poi . hssf . usermodel . HSSFWorkbook ; import org . apache . poi . poifs . filesystem . POIFSFileSystem ; import java . io . FileInputStream ; import java . io . IOException ; public class DrawingDump { public static void main ( String [ ] args ) throws IOException { POIFSFileSystem fs = new POIFSFileSystem ( new FileInputStream ( args [ 0 ] ) ) ; HSSFWorkbook wb = new HSSFWorkbook ( fs ) ; System . out . println ( "Drawing group:" ) ; wb . dumpDrawingGroupRecords ( true ) ; for ( int sheetNum = 1 ; sheetNum <= wb . getNumberOfSheets ( ) ; sheetNum ++ ) { System . out . println ( "Sheet " + sheetNum + ":" ) ; HSSFSheet sheet = wb . getSheetAt ( sheetNum - 1 ) ; sheet . dumpDrawingRecords ( true ) ; } } } 	0
package org . apache . poi . hssf . record . formula ; import org . apache . poi . hssf . model . Workbook ; import org . apache . poi . hssf . record . RecordInputStream ; public class DividePtg extends OperationPtg { public final static int SIZE = 1 ; public final static byte sid = 0x06 ; public DividePtg ( ) { } public DividePtg ( RecordInputStream in ) { } public void writeBytes ( byte [ ] array , int offset ) { array [ offset + 0 ] = sid ; } public int getSize ( ) { return SIZE ; } public int getType ( ) { return TYPE_BINARY ; } public int getNumberOfOperands ( ) { return 2 ; } public String toFormulaString ( Workbook book ) { return "/" ; } public String toFormulaString ( String [ ] operands ) { StringBuffer buffer = new StringBuffer ( ) ; buffer . append ( operands [ 0 ] ) ; buffer . append ( toFormulaString ( ( Workbook ) null ) ) ; buffer . append ( operands [ 1 ] ) ; return buffer . toString ( ) ; } public Object clone ( ) { DividePtg ptg = new DividePtg ( ) ; return ptg ; } } 	0
package org . apache . poi . hssf . record . formula ; import java . util . List ; import org . apache . poi . hssf . model . Workbook ; import org . apache . poi . hssf . record . RecordInputStream ; public class GreaterThanPtg extends OperationPtg { public final static int SIZE = 1 ; public final static byte sid = 0x0D ; private final static String GREATERTHAN = ">" ; public GreaterThanPtg ( ) { } public GreaterThanPtg ( RecordInputStream in ) { } public void writeBytes ( byte [ ] array , int offset ) { array [ offset + 0 ] = sid ; } public int getSize ( ) { return SIZE ; } public int getType ( ) { return TYPE_BINARY ; } public int getNumberOfOperands ( ) { return 2 ; } public String toFormulaString ( Workbook book ) { return this . GREATERTHAN ; } public String toFormulaString ( String [ ] operands ) { StringBuffer buffer = new StringBuffer ( ) ; buffer . append ( operands [ 0 ] ) ; buffer . append ( this . GREATERTHAN ) ; buffer . append ( operands [ 1 ] ) ; return buffer . toString ( ) ; } public byte getDefaultOperandClass ( ) { return Ptg . CLASS_VALUE ; } public Object clone ( ) { return new GreaterThanPtg ( ) ; } } 	1
package org . apache . poi . hpsf ; public class HPSFException extends Exception { private Throwable reason ; public HPSFException ( ) { super ( ) ; } public HPSFException ( final String msg ) { super ( msg ) ; } public HPSFException ( final Throwable reason ) { super ( ) ; this . reason = reason ; } public HPSFException ( final String msg , final Throwable reason ) { super ( msg ) ; this . reason = reason ; } public Throwable getReason ( ) { return reason ; } } 	0
package org . apache . poi . hssf . model ; public interface Model { } 	0
package org . apache . poi . hssf . eventusermodel ; import org . apache . poi . hssf . record . Record ; import org . apache . poi . hssf . eventusermodel . HSSFUserException ; public abstract class AbortableHSSFListener implements HSSFListener { public void processRecord ( Record record ) { } public abstract short abortableProcessRecord ( Record record ) throws HSSFUserException ; } 	1
package org . apache . poi . hssf . record ; import org . apache . poi . util . LittleEndian ; public class ExternSheetSubRecord extends Record { public final static short sid = 0xFFF ; private short field_1_index_to_supbook ; private short field_2_index_to_first_supbook_sheet ; private short field_3_index_to_last_supbook_sheet ; public ExternSheetSubRecord ( ) { } public ExternSheetSubRecord ( RecordInputStream in ) { super ( in ) ; } public void setIndexToSupBook ( short index ) { field_1_index_to_supbook = index ; } public short getIndexToSupBook ( ) { return field_1_index_to_supbook ; } public void setIndexToFirstSupBook ( short index ) { field_2_index_to_first_supbook_sheet = index ; } public short getIndexToFirstSupBook ( ) { return field_2_index_to_first_supbook_sheet ; } public void setIndexToLastSupBook ( short index ) { field_3_index_to_last_supbook_sheet = index ; } public short getIndexToLastSupBook ( ) { return field_3_index_to_last_supbook_sheet ; } protected void validateSid ( short id ) { } protected void fillFields ( RecordInputStream in ) { field_1_index_to_supbook = in . readShort ( ) ; field_2_index_to_first_supbook_sheet = in . readShort ( ) ; field_3_index_to_last_supbook_sheet = in . readShort ( ) ; } public String toString ( ) { StringBuffer buffer = new StringBuffer ( ) ; buffer . append ( "   supbookindex =" ) . append ( getIndexToSupBook ( ) ) . append ( '\n' ) ; buffer . append ( "   1stsbindex   =" ) . append ( getIndexToFirstSupBook ( ) ) . append ( '\n' ) ; buffer . append ( "   lastsbindex  =" ) . append ( getIndexToLastSupBook ( ) ) . append ( '\n' ) ; return buffer . toString ( ) ; } public int serialize ( int offset , byte [ ] data ) { LittleEndian . putShort ( data , 0 + offset , getIndexToSupBook ( ) ) ; LittleEndian . putShort ( data , 2 + offset , getIndexToFirstSupBook ( ) ) ; LittleEndian . putShort ( data , 4 + offset , getIndexToLastSupBook ( ) ) ; return getRecordSize ( ) ; } public int getRecordSize ( ) { return 6 ; } public short getSid ( ) { return sid ; } } 	1
package org . apache . poi . hssf . record ; import java . util . * ; import org . apache . poi . util . LittleEndian ; public class SelectionRecord extends Record { public final static short sid = 0x1d ; private byte field_1_pane ; private int field_2_row_active_cell ; private short field_3_col_active_cell ; private short field_4_ref_active_cell ; private short field_5_num_refs ; private ArrayList field_6_refs ; public class Reference { private short field_1_first_row ; private short field_2_last_row ; private byte field_3_first_column ; private byte field_4_last_column ; Reference ( RecordInputStream in ) { field_1_first_row = in . readShort ( ) ; field_2_last_row = in . readShort ( ) ; field_3_first_column = in . readByte ( ) ; field_4_last_column = in . readByte ( ) ; } public short getFirstRow ( ) { return field_1_first_row ; } public short getLastRow ( ) { return field_2_last_row ; } public byte getFirstColumn ( ) { return field_3_first_column ; } public byte getLastColumn ( ) { return field_4_last_column ; } } public SelectionRecord ( ) { } public SelectionRecord ( RecordInputStream in ) { super ( in ) ; } protected void validateSid ( short id ) { if ( id != sid ) { throw new RecordFormatException ( "NOT A valid Selection RECORD" ) ; } } protected void fillFields ( RecordInputStream in ) { field_1_pane = in . readByte ( ) ; field_2_row_active_cell = in . readUShort ( ) ; field_3_col_active_cell = in . readShort ( ) ; field_4_ref_active_cell = in . readShort ( ) ; field_5_num_refs = in . readShort ( ) ; field_6_refs = new ArrayList ( field_5_num_refs ) ; for ( int i = 0 ; i < field_5_num_refs ; i ++ ) { field_6_refs . add ( new Reference ( in ) ) ; } } public void setPane ( byte pane ) { field_1_pane = pane ; } public void setActiveCellRow ( int row ) { field_2_row_active_cell = row ; } public void setActiveCellCol ( short col ) { field_3_col_active_cell = col ; } public void setActiveCellRef ( short ref ) { field_4_ref_active_cell = ref ; } public void setNumRefs ( short refs ) { field_5_num_refs = refs ; } public byte getPane ( ) { return field_1_pane ; } public int getActiveCellRow ( ) { return field_2_row_active_cell ; } public short getActiveCellCol ( ) { return field_3_col_active_cell ; } public short getActiveCellRef ( ) { return field_4_ref_active_cell ; } public short getNumRefs ( ) { return field_5_num_refs ; } public String toString ( ) { StringBuffer buffer = new StringBuffer ( ) ; buffer . append ( "[SELECTION]\n" ) ; buffer . append ( "    .pane            = " ) . append ( Integer . toHexString ( getPane ( ) ) ) . append ( "\n" ) ; buffer . append ( "    .activecellrow   = " ) . append ( Integer . toHexString ( getActiveCellRow ( ) ) ) . append ( "\n" ) ; buffer . append ( "    .activecellcol   = " ) . append ( Integer . toHexString ( getActiveCellCol ( ) ) ) . append ( "\n" ) ; buffer . append ( "    .activecellref   = " ) . append ( Integer . toHexString ( getActiveCellRef ( ) ) ) . append ( "\n" ) ; buffer . append ( "    .numrefs         = " ) . append ( Integer . toHexString ( getNumRefs ( ) ) ) . append ( "\n" ) ; buffer . append ( "[/SELECTION]\n" ) ; return buffer . toString ( ) ; } public int serialize ( int offset , byte [ ] data ) { LittleEndian . putShort ( data , 0 + offset , sid ) ; LittleEndian . putShort ( data , 2 + offset , ( short ) 15 ) ; data [ 4 + offset ] = getPane ( ) ; LittleEndian . putShort ( data , 5 + offset , ( short ) getActiveCellRow ( ) ) ; LittleEndian . putShort ( data , 7 + offset , getActiveCellCol ( ) ) ; LittleEndian . putShort ( data , 9 + offset , getActiveCellRef ( ) ) ; LittleEndian . putShort ( data , 11 + offset , ( short ) 1 ) ; LittleEndian . putShort ( data , 13 + offset , ( short ) getActiveCellRow ( ) ) ; LittleEndian . putShort ( data , 15 + offset , ( short ) getActiveCellRow ( ) ) ; data [ 17 + offset ] = ( byte ) getActiveCellCol ( ) ; data [ 18 + offset ] = ( byte ) getActiveCellCol ( ) ; return getRecordSize ( ) ; } public int getRecordSize ( ) { return 19 ; } public short getSid ( ) { return sid ; } public Object clone ( ) { SelectionRecord rec = new SelectionRecord ( ) ; rec . field_1_pane = field_1_pane ; rec . field_2_row_active_cell = field_2_row_active_cell ; rec . field_3_col_active_cell = field_3_col_active_cell ; rec . field_4_ref_active_cell = field_4_ref_active_cell ; rec . field_5_num_refs = field_5_num_refs ; rec . field_6_refs = field_6_refs ; return rec ; } } 	1
package org . apache . poi . util ; import java . util . List ; import java . util . ArrayList ; public class DoubleList2d { List rows = new ArrayList ( ) ; public double get ( int col , int row ) { if ( row >= rows . size ( ) ) { return 0 ; } else { DoubleList cols = ( DoubleList ) rows . get ( row ) ; if ( col >= cols . size ( ) ) return 0 ; else return cols . get ( col ) ; } } public void set ( int col , int row , double value ) { resizeRows ( row ) ; resizeCols ( row , col ) ; DoubleList cols = ( DoubleList ) rows . get ( row ) ; cols . set ( col , value ) ; } private void resizeRows ( int row ) { while ( rows . size ( ) <= row ) rows . add ( new DoubleList ( ) ) ; } private void resizeCols ( int row , int col ) { DoubleList cols = ( DoubleList ) rows . get ( row ) ; while ( cols . size ( ) <= col ) cols . add ( 0 ) ; } } 	0
package org . apache . poi . hpsf ; import java . util . Collections ; import java . util . HashMap ; import java . util . Map ; public class Variant { public static final int VT_EMPTY = 0 ; public static final int VT_NULL = 1 ; public static final int VT_I2 = 2 ; public static final int VT_I4 = 3 ; public static final int VT_R4 = 4 ; public static final int VT_R8 = 5 ; public static final int VT_CY = 6 ; public static final int VT_DATE = 7 ; public static final int VT_BSTR = 8 ; public static final int VT_DISPATCH = 9 ; public static final int VT_ERROR = 10 ; public static final int VT_BOOL = 11 ; public static final int VT_VARIANT = 12 ; public static final int VT_UNKNOWN = 13 ; public static final int VT_DECIMAL = 14 ; public static final int VT_I1 = 16 ; public static final int VT_UI1 = 17 ; public static final int VT_UI2 = 18 ; public static final int VT_UI4 = 19 ; public static final int VT_I8 = 20 ; public static final int VT_UI8 = 21 ; public static final int VT_INT = 22 ; public static final int VT_UINT = 23 ; public static final int VT_VOID = 24 ; public static final int VT_HRESULT = 25 ; public static final int VT_PTR = 26 ; public static final int VT_SAFEARRAY = 27 ; public static final int VT_CARRAY = 28 ; public static final int VT_USERDEFINED = 29 ; public static final int VT_LPSTR = 30 ; public static final int VT_LPWSTR = 31 ; public static final int VT_FILETIME = 64 ; public static final int VT_BLOB = 65 ; public static final int VT_STREAM = 66 ; public static final int VT_STORAGE = 67 ; public static final int VT_STREAMED_OBJECT = 68 ; public static final int VT_STORED_OBJECT = 69 ; public static final int VT_BLOB_OBJECT = 70 ; public static final int VT_CF = 71 ; public static final int VT_CLSID = 72 ; public static final int VT_VECTOR = 0x1000 ; public static final int VT_ARRAY = 0x2000 ; public static final int VT_BYREF = 0x4000 ; public static final int VT_RESERVED = 0x8000 ; public static final int VT_ILLEGAL = 0xFFFF ; public static final int VT_ILLEGALMASKED = 0xFFF ; public static final int VT_TYPEMASK = 0xFFF ; private static Map numberToName ; private static Map numberToLength ; public static final Integer LENGTH_UNKNOWN = new Integer ( - 2 ) ; public static final Integer LENGTH_VARIABLE = new Integer ( - 1 ) ; public static final Integer LENGTH_0 = new Integer ( 0 ) ; public static final Integer LENGTH_2 = new Integer ( 2 ) ; public static final Integer LENGTH_4 = new Integer ( 4 ) ; public static final Integer LENGTH_8 = new Integer ( 8 ) ; static { Map tm1 = new HashMap ( ) ; tm1 . put ( new Long ( 0 ) , "VT_EMPTY" ) ; tm1 . put ( new Long ( 1 ) , "VT_NULL" ) ; tm1 . put ( new Long ( 2 ) , "VT_I2" ) ; tm1 . put ( new Long ( 3 ) , "VT_I4" ) ; tm1 . put ( new Long ( 4 ) , "VT_R4" ) ; tm1 . put ( new Long ( 5 ) , "VT_R8" ) ; tm1 . put ( new Long ( 6 ) , "VT_CY" ) ; tm1 . put ( new Long ( 7 ) , "VT_DATE" ) ; tm1 . put ( new Long ( 8 ) , "VT_BSTR" ) ; tm1 . put ( new Long ( 9 ) , "VT_DISPATCH" ) ; tm1 . put ( new Long ( 10 ) , "VT_ERROR" ) ; tm1 . put ( new Long ( 11 ) , "VT_BOOL" ) ; tm1 . put ( new Long ( 12 ) , "VT_VARIANT" ) ; tm1 . put ( new Long ( 13 ) , "VT_UNKNOWN" ) ; tm1 . put ( new Long ( 14 ) , "VT_DECIMAL" ) ; tm1 . put ( new Long ( 16 ) , "VT_I1" ) ; tm1 . put ( new Long ( 17 ) , "VT_UI1" ) ; tm1 . put ( new Long ( 18 ) , "VT_UI2" ) ; tm1 . put ( new Long ( 19 ) , "VT_UI4" ) ; tm1 . put ( new Long ( 20 ) , "VT_I8" ) ; tm1 . put ( new Long ( 21 ) , "VT_UI8" ) ; tm1 . put ( new Long ( 22 ) , "VT_INT" ) ; tm1 . put ( new Long ( 23 ) , "VT_UINT" ) ; tm1 . put ( new Long ( 24 ) , "VT_VOID" ) ; tm1 . put ( new Long ( 25 ) , "VT_HRESULT" ) ; tm1 . put ( new Long ( 26 ) , "VT_PTR" ) ; tm1 . put ( new Long ( 27 ) , "VT_SAFEARRAY" ) ; tm1 . put ( new Long ( 28 ) , "VT_CARRAY" ) ; tm1 . put ( new Long ( 29 ) , "VT_USERDEFINED" ) ; tm1 . put ( new Long ( 30 ) , "VT_LPSTR" ) ; tm1 . put ( new Long ( 31 ) , "VT_LPWSTR" ) ; tm1 . put ( new Long ( 64 ) , "VT_FILETIME" ) ; tm1 . put ( new Long ( 65 ) , "VT_BLOB" ) ; tm1 . put ( new Long ( 66 ) , "VT_STREAM" ) ; tm1 . put ( new Long ( 67 ) , "VT_STORAGE" ) ; tm1 . put ( new Long ( 68 ) , "VT_STREAMED_OBJECT" ) ; tm1 . put ( new Long ( 69 ) , "VT_STORED_OBJECT" ) ; tm1 . put ( new Long ( 70 ) , "VT_BLOB_OBJECT" ) ; tm1 . put ( new Long ( 71 ) , "VT_CF" ) ; tm1 . put ( new Long ( 72 ) , "VT_CLSID" ) ; Map tm2 = new HashMap ( tm1 . size ( ) , 1.0F ) ; tm2 . putAll ( tm1 ) ; numberToName = Collections . unmodifiableMap ( tm2 ) ; tm1 . clear ( ) ; tm1 . put ( new Long ( 0 ) , LENGTH_0 ) ; tm1 . put ( new Long ( 1 ) , LENGTH_UNKNOWN ) ; tm1 . put ( new Long ( 2 ) , LENGTH_2 ) ; tm1 . put ( new Long ( 3 ) , LENGTH_4 ) ; tm1 . put ( new Long ( 4 ) , LENGTH_4 ) ; tm1 . put ( new Long ( 5 ) , LENGTH_8 ) ; tm1 . put ( new Long ( 6 ) , LENGTH_UNKNOWN ) ; tm1 . put ( new Long ( 7 ) , LENGTH_UNKNOWN ) ; tm1 . put ( new Long ( 8 ) , LENGTH_UNKNOWN ) ; tm1 . put ( new Long ( 9 ) , LENGTH_UNKNOWN ) ; tm1 . put ( new Long ( 10 ) , LENGTH_UNKNOWN ) ; tm1 . put ( new Long ( 11 ) , LENGTH_UNKNOWN ) ; tm1 . put ( new Long ( 12 ) , LENGTH_UNKNOWN ) ; tm1 . put ( new Long ( 13 ) , LENGTH_UNKNOWN ) ; tm1 . put ( new Long ( 14 ) , LENGTH_UNKNOWN ) ; tm1 . put ( new Long ( 16 ) , LENGTH_UNKNOWN ) ; tm1 . put ( new Long ( 17 ) , LENGTH_UNKNOWN ) ; tm1 . put ( new Long ( 18 ) , LENGTH_UNKNOWN ) ; tm1 . put ( new Long ( 19 ) , LENGTH_UNKNOWN ) ; tm1 . put ( new Long ( 20 ) , LENGTH_UNKNOWN ) ; tm1 . put ( new Long ( 21 ) , LENGTH_UNKNOWN ) ; tm1 . put ( new Long ( 22 ) , LENGTH_UNKNOWN ) ; tm1 . put ( new Long ( 23 ) , LENGTH_UNKNOWN ) ; tm1 . put ( new Long ( 24 ) , LENGTH_UNKNOWN ) ; tm1 . put ( new Long ( 25 ) , LENGTH_UNKNOWN ) ; tm1 . put ( new Long ( 26 ) , LENGTH_UNKNOWN ) ; tm1 . put ( new Long ( 27 ) , LENGTH_UNKNOWN ) ; tm1 . put ( new Long ( 28 ) , LENGTH_UNKNOWN ) ; tm1 . put ( new Long ( 29 ) , LENGTH_UNKNOWN ) ; tm1 . put ( new Long ( 30 ) , LENGTH_VARIABLE ) ; tm1 . put ( new Long ( 31 ) , LENGTH_UNKNOWN ) ; tm1 . put ( new Long ( 64 ) , LENGTH_8 ) ; tm1 . put ( new Long ( 65 ) , LENGTH_UNKNOWN ) ; tm1 . put ( new Long ( 66 ) , LENGTH_UNKNOWN ) ; tm1 . put ( new Long ( 67 ) , LENGTH_UNKNOWN ) ; tm1 . put ( new Long ( 68 ) , LENGTH_UNKNOWN ) ; tm1 . put ( new Long ( 69 ) , LENGTH_UNKNOWN ) ; tm1 . put ( new Long ( 70 ) , LENGTH_UNKNOWN ) ; tm1 . put ( new Long ( 71 ) , LENGTH_UNKNOWN ) ; tm1 . put ( new Long ( 72 ) , LENGTH_UNKNOWN ) ; tm2 = new HashMap ( tm1 . size ( ) , 1.0F ) ; tm2 . putAll ( tm1 ) ; numberToLength = Collections . unmodifiableMap ( tm2 ) ; } public static String getVariantName ( final long variantType ) { final String name = ( String ) numberToName . get ( new Long ( variantType ) ) ; return name != null ? name : "unknown variant type" ; } public static int getVariantLength ( final long variantType ) { final Long key = new Long ( ( int ) variantType ) ; final Long length = ( Long ) numberToLength . get ( key ) ; if ( length == null ) return - 2 ; return length . intValue ( ) ; } } 	0
package org . apache . poi . hssf . record ; import org . apache . poi . util . BitField ; import org . apache . poi . util . BitFieldFactory ; import org . apache . poi . util . LittleEndian ; public class RowRecord extends Record implements Comparable { public final static short sid = 0x208 ; public final static int MAX_ROW_NUMBER = 65535 ; private int field_1_row_number ; private short field_2_first_col ; private short field_3_last_col ; private short field_4_height ; private short field_5_optimize ; private short field_6_reserved ; private short field_7_option_flags ; private static final BitField outlineLevel = BitFieldFactory . getInstance ( 0x07 ) ; private static final BitField colapsed = BitFieldFactory . getInstance ( 0x10 ) ; private static final BitField zeroHeight = BitFieldFactory . getInstance ( 0x20 ) ; private static final BitField badFontHeight = BitFieldFactory . getInstance ( 0x40 ) ; private static final BitField formatted = BitFieldFactory . getInstance ( 0x80 ) ; private short field_8_xf_index ; public RowRecord ( ) { } public RowRecord ( RecordInputStream in ) { super ( in ) ; } protected void validateSid ( short id ) { if ( id != sid ) { throw new RecordFormatException ( "NOT A valid ROW RECORD" ) ; } } protected void fillFields ( RecordInputStream in ) { field_1_row_number = in . readUShort ( ) ; field_2_first_col = in . readShort ( ) ; field_3_last_col = in . readShort ( ) ; field_4_height = in . readShort ( ) ; field_5_optimize = in . readShort ( ) ; field_6_reserved = in . readShort ( ) ; field_7_option_flags = in . readShort ( ) ; field_8_xf_index = in . readShort ( ) ; } public void setRowNumber ( int row ) { field_1_row_number = row ; } public void setFirstCol ( short col ) { field_2_first_col = col ; } public void setLastCol ( short col ) { field_3_last_col = col ; } public void setHeight ( short height ) { field_4_height = height ; } public void setOptimize ( short optimize ) { field_5_optimize = optimize ; } public void setOptionFlags ( short options ) { field_7_option_flags = options ; } public void setOutlineLevel ( short ol ) { field_7_option_flags = outlineLevel . setShortValue ( field_7_option_flags , ol ) ; } public void setColapsed ( boolean c ) { field_7_option_flags = colapsed . setShortBoolean ( field_7_option_flags , c ) ; } public void setZeroHeight ( boolean z ) { field_7_option_flags = zeroHeight . setShortBoolean ( field_7_option_flags , z ) ; } public void setBadFontHeight ( boolean f ) { field_7_option_flags = badFontHeight . setShortBoolean ( field_7_option_flags , f ) ; } public void setFormatted ( boolean f ) { field_7_option_flags = formatted . setShortBoolean ( field_7_option_flags , f ) ; } public void setXFIndex ( short index ) { field_8_xf_index = index ; } public int getRowNumber ( ) { return field_1_row_number ; } public short getFirstCol ( ) { return field_2_first_col ; } public short getLastCol ( ) { return field_3_last_col ; } public short getHeight ( ) { return field_4_height ; } public short getOptimize ( ) { return field_5_optimize ; } public short getOptionFlags ( ) { return field_7_option_flags ; } public short getOutlineLevel ( ) { return outlineLevel . getShortValue ( field_7_option_flags ) ; } public boolean getColapsed ( ) { return ( colapsed . isSet ( field_7_option_flags ) ) ; } public boolean getZeroHeight ( ) { return zeroHeight . isSet ( field_7_option_flags ) ; } public boolean getBadFontHeight ( ) { return badFontHeight . isSet ( field_7_option_flags ) ; } public boolean getFormatted ( ) { return formatted . isSet ( field_7_option_flags ) ; } public short getXFIndex ( ) { return field_8_xf_index ; } public boolean isInValueSection ( ) { return true ; } public String toString ( ) { StringBuffer buffer = new StringBuffer ( ) ; buffer . append ( "[ROW]\n" ) ; buffer . append ( "    .rownumber      = " ) . append ( Integer . toHexString ( getRowNumber ( ) ) ) . append ( "\n" ) ; buffer . append ( "    .firstcol       = " ) . append ( Integer . toHexString ( getFirstCol ( ) ) ) . append ( "\n" ) ; buffer . append ( "    .lastcol        = " ) . append ( Integer . toHexString ( getLastCol ( ) ) ) . append ( "\n" ) ; buffer . append ( "    .height         = " ) . append ( Integer . toHexString ( getHeight ( ) ) ) . append ( "\n" ) ; buffer . append ( "    .optimize       = " ) . append ( Integer . toHexString ( getOptimize ( ) ) ) . append ( "\n" ) ; buffer . append ( "    .reserved       = " ) . append ( Integer . toHexString ( field_6_reserved ) ) . append ( "\n" ) ; buffer . append ( "    .optionflags    = " ) . append ( Integer . toHexString ( getOptionFlags ( ) ) ) . append ( "\n" ) ; buffer . append ( "        .outlinelvl = " ) . append ( Integer . toHexString ( getOutlineLevel ( ) ) ) . append ( "\n" ) ; buffer . append ( "        .colapsed   = " ) . append ( getColapsed ( ) ) . append ( "\n" ) ; buffer . append ( "        .zeroheight = " ) . append ( getZeroHeight ( ) ) . append ( "\n" ) ; buffer . append ( "        .badfontheig= " ) . append ( getBadFontHeight ( ) ) . append ( "\n" ) ; buffer . append ( "        .formatted  = " ) . append ( getFormatted ( ) ) . append ( "\n" ) ; buffer . append ( "    .xfindex        = " ) . append ( Integer . toHexString ( getXFIndex ( ) ) ) . append ( "\n" ) ; buffer . append ( "[/ROW]\n" ) ; return buffer . toString ( ) ; } public int serialize ( int offset , byte [ ] data ) { LittleEndian . putShort ( data , 0 + offset , sid ) ; LittleEndian . putShort ( data , 2 + offset , ( short ) 16 ) ; LittleEndian . putShort ( data , 4 + offset , ( short ) getRowNumber ( ) ) ; LittleEndian . putShort ( data , 6 + offset , getFirstCol ( ) == - 1 ? ( short ) 0 : getFirstCol ( ) ) ; LittleEndian . putShort ( data , 8 + offset , getLastCol ( ) == - 1 ? ( short ) 0 : getLastCol ( ) ) ; LittleEndian . putShort ( data , 10 + offset , getHeight ( ) ) ; LittleEndian . putShort ( data , 12 + offset , getOptimize ( ) ) ; LittleEndian . putShort ( data , 14 + offset , field_6_reserved ) ; LittleEndian . putShort ( data , 16 + offset , getOptionFlags ( ) ) ; LittleEndian . putShort ( data , 18 + offset , getXFIndex ( ) ) ; return getRecordSize ( ) ; } public int getRecordSize ( ) { return 20 ; } public short getSid ( ) { return sid ; } public int compareTo ( Object obj ) { RowRecord loc = ( RowRecord ) obj ; if ( this . getRowNumber ( ) == loc . getRowNumber ( ) ) { return 0 ; } if ( this . getRowNumber ( ) < loc . getRowNumber ( ) ) { return - 1 ; } if ( this . getRowNumber ( ) > loc . getRowNumber ( ) ) { return 1 ; } return - 1 ; } public boolean equals ( Object obj ) { if ( ! ( obj instanceof RowRecord ) ) { return false ; } RowRecord loc = ( RowRecord ) obj ; if ( this . getRowNumber ( ) == loc . getRowNumber ( ) ) { return true ; } return false ; } public Object clone ( ) { RowRecord rec = new RowRecord ( ) ; rec . field_1_row_number = field_1_row_number ; rec . field_2_first_col = field_2_first_col ; rec . field_3_last_col = field_3_last_col ; rec . field_4_height = field_4_height ; rec . field_5_optimize = field_5_optimize ; rec . field_6_reserved = field_6_reserved ; rec . field_7_option_flags = field_7_option_flags ; rec . field_8_xf_index = field_8_xf_index ; return rec ; } } 	1
package org . apache . poi . hssf . record ; import org . apache . poi . util . LittleEndian ; public class CalcCountRecord extends Record { public final static short sid = 0xC ; private short field_1_iterations ; public CalcCountRecord ( ) { } public CalcCountRecord ( RecordInputStream in ) { super ( in ) ; } protected void validateSid ( short id ) { if ( id != sid ) { throw new RecordFormatException ( "NOT An Calc Count RECORD" ) ; } } protected void fillFields ( RecordInputStream in ) { field_1_iterations = in . readShort ( ) ; } public void setIterations ( short iterations ) { field_1_iterations = iterations ; } public short getIterations ( ) { return field_1_iterations ; } public String toString ( ) { StringBuffer buffer = new StringBuffer ( ) ; buffer . append ( "[CALCCOUNT]\n" ) ; buffer . append ( "    .iterations     = " ) . append ( Integer . toHexString ( getIterations ( ) ) ) . append ( "\n" ) ; buffer . append ( "[/CALCCOUNT]\n" ) ; return buffer . toString ( ) ; } public int serialize ( int offset , byte [ ] data ) { LittleEndian . putShort ( data , 0 + offset , sid ) ; LittleEndian . putShort ( data , 2 + offset , ( short ) 0x2 ) ; LittleEndian . putShort ( data , 4 + offset , getIterations ( ) ) ; return getRecordSize ( ) ; } public int getRecordSize ( ) { return 6 ; } public short getSid ( ) { return sid ; } public Object clone ( ) { CalcCountRecord rec = new CalcCountRecord ( ) ; rec . field_1_iterations = field_1_iterations ; return rec ; } } 	1
package org . apache . poi . hssf . record ; import org . apache . poi . util . * ; public class SeriesChartGroupIndexRecord extends Record { public final static short sid = 0x1045 ; private short field_1_chartGroupIndex ; public SeriesChartGroupIndexRecord ( ) { } public SeriesChartGroupIndexRecord ( RecordInputStream in ) { super ( in ) ; } protected void validateSid ( short id ) { if ( id != sid ) { throw new RecordFormatException ( "Not a SeriesChartGroupIndex record" ) ; } } protected void fillFields ( RecordInputStream in ) { field_1_chartGroupIndex = in . readShort ( ) ; } public String toString ( ) { StringBuffer buffer = new StringBuffer ( ) ; buffer . append ( "[SERTOCRT]\n" ) ; buffer . append ( "    .chartGroupIndex      = " ) . append ( "0x" ) . append ( HexDump . toHex ( getChartGroupIndex ( ) ) ) . append ( " (" ) . append ( getChartGroupIndex ( ) ) . append ( " )" ) ; buffer . append ( System . getProperty ( "line.separator" ) ) ; buffer . append ( "[/SERTOCRT]\n" ) ; return buffer . toString ( ) ; } public int serialize ( int offset , byte [ ] data ) { int pos = 0 ; LittleEndian . putShort ( data , 0 + offset , sid ) ; LittleEndian . putShort ( data , 2 + offset , ( short ) ( getRecordSize ( ) - 4 ) ) ; LittleEndian . putShort ( data , 4 + offset + pos , field_1_chartGroupIndex ) ; return getRecordSize ( ) ; } public int getRecordSize ( ) { return 4 + 2 ; } public short getSid ( ) { return sid ; } public Object clone ( ) { SeriesChartGroupIndexRecord rec = new SeriesChartGroupIndexRecord ( ) ; rec . field_1_chartGroupIndex = field_1_chartGroupIndex ; return rec ; } public short getChartGroupIndex ( ) { return field_1_chartGroupIndex ; } public void setChartGroupIndex ( short field_1_chartGroupIndex ) { this . field_1_chartGroupIndex = field_1_chartGroupIndex ; } } 	1
package org . apache . poi . hssf . record ; import org . apache . poi . util . LittleEndian ; public class DimensionsRecord extends Record { public final static short sid = 0x200 ; private int field_1_first_row ; private int field_2_last_row ; private short field_3_first_col ; private short field_4_last_col ; private short field_5_zero ; public DimensionsRecord ( ) { } public DimensionsRecord ( RecordInputStream in ) { super ( in ) ; } protected void validateSid ( short id ) { if ( id != sid ) { throw new RecordFormatException ( "NOT A valid DIMENSIONS RECORD" ) ; } } protected void fillFields ( RecordInputStream in ) { field_1_first_row = in . readInt ( ) ; field_2_last_row = in . readInt ( ) ; field_3_first_col = in . readShort ( ) ; field_4_last_col = in . readShort ( ) ; field_5_zero = in . readShort ( ) ; } public void setFirstRow ( int row ) { field_1_first_row = row ; } public void setLastRow ( int row ) { field_2_last_row = row ; } public void setFirstCol ( short col ) { field_3_first_col = col ; } public void setLastCol ( short col ) { field_4_last_col = col ; } public int getFirstRow ( ) { return field_1_first_row ; } public int getLastRow ( ) { return field_2_last_row ; } public short getFirstCol ( ) { return field_3_first_col ; } public short getLastCol ( ) { return field_4_last_col ; } public String toString ( ) { StringBuffer buffer = new StringBuffer ( ) ; buffer . append ( "[DIMENSIONS]\n" ) ; buffer . append ( "    .firstrow       = " ) . append ( Integer . toHexString ( getFirstRow ( ) ) ) . append ( "\n" ) ; buffer . append ( "    .lastrow        = " ) . append ( Integer . toHexString ( getLastRow ( ) ) ) . append ( "\n" ) ; buffer . append ( "    .firstcol       = " ) . append ( Integer . toHexString ( getFirstCol ( ) ) ) . append ( "\n" ) ; buffer . append ( "    .lastcol        = " ) . append ( Integer . toHexString ( getLastCol ( ) ) ) . append ( "\n" ) ; buffer . append ( "    .zero           = " ) . append ( Integer . toHexString ( field_5_zero ) ) . append ( "\n" ) ; buffer . append ( "[/DIMENSIONS]\n" ) ; return buffer . toString ( ) ; } public int serialize ( int offset , byte [ ] data ) { LittleEndian . putShort ( data , 0 + offset , sid ) ; LittleEndian . putShort ( data , 2 + offset , ( short ) 14 ) ; LittleEndian . putInt ( data , 4 + offset , getFirstRow ( ) ) ; LittleEndian . putInt ( data , 8 + offset , getLastRow ( ) ) ; LittleEndian . putShort ( data , 12 + offset , getFirstCol ( ) ) ; LittleEndian . putShort ( data , 14 + offset , getLastCol ( ) ) ; LittleEndian . putShort ( data , 16 + offset , ( short ) 0 ) ; return getRecordSize ( ) ; } public int getRecordSize ( ) { return 18 ; } public short getSid ( ) { return sid ; } public Object clone ( ) { DimensionsRecord rec = new DimensionsRecord ( ) ; rec . field_1_first_row = field_1_first_row ; rec . field_2_last_row = field_2_last_row ; rec . field_3_first_col = field_3_first_col ; rec . field_4_last_col = field_4_last_col ; rec . field_5_zero = field_5_zero ; return rec ; } } 	1
package org . apache . poi . hpsf ; import java . io . ByteArrayInputStream ; import java . io . ByteArrayOutputStream ; import java . io . FileNotFoundException ; import java . io . IOException ; import java . io . InputStream ; import java . io . OutputStream ; import java . io . UnsupportedEncodingException ; import java . util . Iterator ; import java . util . LinkedList ; import java . util . ListIterator ; import org . apache . poi . poifs . filesystem . DirectoryEntry ; import org . apache . poi . poifs . filesystem . Entry ; import org . apache . poi . util . LittleEndian ; import org . apache . poi . util . LittleEndianConsts ; public class MutablePropertySet extends PropertySet { public MutablePropertySet ( ) { byteOrder = LittleEndian . getUShort ( BYTE_ORDER_ASSERTION ) ; format = LittleEndian . getUShort ( FORMAT_ASSERTION ) ; osVersion = ( OS_WIN32 << 16 ) | 0x0A04 ; classID = new ClassID ( ) ; sections = new LinkedList ( ) ; sections . add ( new MutableSection ( ) ) ; } public MutablePropertySet ( final PropertySet ps ) { byteOrder = ps . getByteOrder ( ) ; format = ps . getFormat ( ) ; osVersion = ps . getOSVersion ( ) ; setClassID ( ps . getClassID ( ) ) ; clearSections ( ) ; for ( final Iterator i = ps . getSections ( ) . iterator ( ) ; i . hasNext ( ) ; ) { final MutableSection s = new MutableSection ( ( Section ) ( i . next ( ) ) ) ; addSection ( s ) ; } } private final int OFFSET_HEADER = BYTE_ORDER_ASSERTION . length + FORMAT_ASSERTION . length + LittleEndianConsts . INT_SIZE + ClassID . LENGTH + LittleEndianConsts . INT_SIZE ; public void setByteOrder ( final int byteOrder ) { this . byteOrder = byteOrder ; } public void setFormat ( final int format ) { this . format = format ; } public void setOSVersion ( final int osVersion ) { this . osVersion = osVersion ; } public void setClassID ( final ClassID classID ) { this . classID = classID ; } public void clearSections ( ) { sections = null ; } public void addSection ( final Section section ) { if ( sections == null ) sections = new LinkedList ( ) ; sections . add ( section ) ; } public void write ( final OutputStream out ) throws WritingNotSupportedException , IOException { final int nrSections = sections . size ( ) ; int length = 0 ; length += TypeWriter . writeToStream ( out , ( short ) getByteOrder ( ) ) ; length += TypeWriter . writeToStream ( out , ( short ) getFormat ( ) ) ; length += TypeWriter . writeToStream ( out , getOSVersion ( ) ) ; length += TypeWriter . writeToStream ( out , getClassID ( ) ) ; length += TypeWriter . writeToStream ( out , nrSections ) ; int offset = OFFSET_HEADER ; offset += nrSections * ( ClassID . LENGTH + LittleEndian . INT_SIZE ) ; final int sectionsBegin = offset ; for ( final ListIterator i = sections . listIterator ( ) ; i . hasNext ( ) ; ) { final MutableSection s = ( MutableSection ) i . next ( ) ; final ClassID formatID = s . getFormatID ( ) ; if ( formatID == null ) throw new NoFormatIDException ( ) ; length += TypeWriter . writeToStream ( out , s . getFormatID ( ) ) ; length += TypeWriter . writeUIntToStream ( out , offset ) ; try { offset += s . getSize ( ) ; } catch ( HPSFRuntimeException ex ) { final Throwable cause = ex . getReason ( ) ; if ( cause instanceof UnsupportedEncodingException ) throw new IllegalPropertySetDataException ( cause ) ; else throw ex ; } } offset = sectionsBegin ; for ( final ListIterator i = sections . listIterator ( ) ; i . hasNext ( ) ; ) { final MutableSection s = ( MutableSection ) i . next ( ) ; offset += s . write ( out ) ; } } public InputStream toInputStream ( ) throws IOException , WritingNotSupportedException { final ByteArrayOutputStream psStream = new ByteArrayOutputStream ( ) ; write ( psStream ) ; psStream . close ( ) ; final byte [ ] streamData = psStream . toByteArray ( ) ; return new ByteArrayInputStream ( streamData ) ; } public void write ( final DirectoryEntry dir , final String name ) throws WritingNotSupportedException , IOException { try { final Entry e = dir . getEntry ( name ) ; e . delete ( ) ; } catch ( FileNotFoundException ex ) { } dir . createDocument ( name , toInputStream ( ) ) ; } } 	1
package org . apache . poi . hssf . record . formula ; import java . util . List ; import org . apache . poi . hssf . model . Workbook ; import org . apache . poi . hssf . record . RecordInputStream ; public class UnaryPlusPtg extends OperationPtg { public final static int SIZE = 1 ; public final static byte sid = 0x12 ; private final static String ADD = "+" ; public UnaryPlusPtg ( ) { } public UnaryPlusPtg ( RecordInputStream in ) { } public void writeBytes ( byte [ ] array , int offset ) { array [ offset + 0 ] = sid ; } public int getSize ( ) { return SIZE ; } public int getType ( ) { return this . TYPE_UNARY ; } public int getNumberOfOperands ( ) { return 1 ; } public String toFormulaString ( Workbook book ) { return "+" ; } public String toFormulaString ( String [ ] operands ) { StringBuffer buffer = new StringBuffer ( ) ; buffer . append ( ADD ) ; buffer . append ( operands [ 0 ] ) ; return buffer . toString ( ) ; } public byte getDefaultOperandClass ( ) { return Ptg . CLASS_VALUE ; } public Object clone ( ) { return new UnaryPlusPtg ( ) ; } } 	0
package org . apache . poi . hssf . record ; import java . io . InputStream ; import java . lang . reflect . Constructor ; import java . util . * ; public class RecordFactory { private static int NUM_RECORDS = 10000 ; private static final Class [ ] records ; static { records = new Class [ ] { BOFRecord . class , InterfaceHdrRecord . class , MMSRecord . class , InterfaceEndRecord . class , WriteAccessRecord . class , CodepageRecord . class , DSFRecord . class , TabIdRecord . class , FnGroupCountRecord . class , WindowProtectRecord . class , ProtectRecord . class , PasswordRecord . class , ProtectionRev4Record . class , PasswordRev4Record . class , WindowOneRecord . class , BackupRecord . class , HideObjRecord . class , DateWindow1904Record . class , PrecisionRecord . class , RefreshAllRecord . class , BookBoolRecord . class , FontRecord . class , FormatRecord . class , ExtendedFormatRecord . class , StyleRecord . class , UseSelFSRecord . class , BoundSheetRecord . class , CountryRecord . class , SSTRecord . class , ExtSSTRecord . class , EOFRecord . class , IndexRecord . class , CalcModeRecord . class , CalcCountRecord . class , RefModeRecord . class , IterationRecord . class , DeltaRecord . class , SaveRecalcRecord . class , PrintHeadersRecord . class , PrintGridlinesRecord . class , GridsetRecord . class , GutsRecord . class , DefaultRowHeightRecord . class , WSBoolRecord . class , HeaderRecord . class , FooterRecord . class , HCenterRecord . class , VCenterRecord . class , PrintSetupRecord . class , DefaultColWidthRecord . class , DimensionsRecord . class , RowRecord . class , LabelSSTRecord . class , RKRecord . class , NumberRecord . class , DBCellRecord . class , WindowTwoRecord . class , SelectionRecord . class , ContinueRecord . class , LabelRecord . class , BlankRecord . class , ColumnInfoRecord . class , MulRKRecord . class , MulBlankRecord . class , MergeCellsRecord . class , FormulaRecord . class , BoolErrRecord . class , ExternSheetRecord . class , NameRecord . class , LeftMarginRecord . class , RightMarginRecord . class , TopMarginRecord . class , BottomMarginRecord . class , DrawingRecord . class , DrawingGroupRecord . class , DrawingSelectionRecord . class , ObjRecord . class , TextObjectRecord . class , PaletteRecord . class , StringRecord . class , RecalcIdRecord . class , SharedFormulaRecord . class , HorizontalPageBreakRecord . class , VerticalPageBreakRecord . class , WriteProtectRecord . class , FilePassRecord . class , PaneRecord . class , NoteRecord . class } ; } private static Map recordsMap = recordsToMap ( records ) ; public static void setCapacity ( int capacity ) { NUM_RECORDS = capacity ; } public static List createRecords ( InputStream in ) throws RecordFormatException { ArrayList records = new ArrayList ( NUM_RECORDS ) ; RecordInputStream recStream = new RecordInputStream ( in ) ; DrawingRecord lastDrawingRecord = new DrawingRecord ( ) ; Record lastRecord = null ; while ( recStream . hasNextRecord ( ) ) { recStream . nextRecord ( ) ; if ( recStream . getSid ( ) != 0 ) { Record [ ] recs = createRecord ( recStream ) ; if ( recs . length > 1 ) { for ( int k = 0 ; k < recs . length ; k ++ ) { records . add ( recs [ k ] ) ; } } else { Record record = recs [ 0 ] ; if ( record != null ) { if ( record . getSid ( ) == DrawingGroupRecord . sid && lastRecord instanceof DrawingGroupRecord ) { DrawingGroupRecord lastDGRecord = ( DrawingGroupRecord ) lastRecord ; lastDGRecord . join ( ( AbstractEscherHolderRecord ) record ) ; } else if ( record . getSid ( ) == ContinueRecord . sid && ( ( lastRecord instanceof ObjRecord ) || ( lastRecord instanceof TextObjectRecord ) ) ) { lastDrawingRecord . processContinueRecord ( ( ( ContinueRecord ) record ) . getData ( ) ) ; } else if ( record . getSid ( ) == ContinueRecord . sid && ( lastRecord instanceof DrawingGroupRecord ) ) { ( ( DrawingGroupRecord ) lastRecord ) . processContinueRecord ( ( ( ContinueRecord ) record ) . getData ( ) ) ; } else if ( record . getSid ( ) == ContinueRecord . sid ) { if ( lastRecord instanceof UnknownRecord ) { records . add ( record ) ; } else throw new RecordFormatException ( "Unhandled Continue Record" ) ; } else { lastRecord = record ; if ( record instanceof DrawingRecord ) lastDrawingRecord = ( DrawingRecord ) record ; records . add ( record ) ; } } } } } return records ; } public static Record [ ] createRecord ( RecordInputStream in ) { Record retval ; Record [ ] realretval = null ; try { Constructor constructor = ( Constructor ) recordsMap . get ( new Short ( in . getSid ( ) ) ) ; if ( constructor != null ) { retval = ( Record ) constructor . newInstance ( new Object [ ] { in } ) ; } else { retval = new UnknownRecord ( in ) ; } } catch ( Exception introspectionException ) { throw new RecordFormatException ( "Unable to construct record instance" , introspectionException ) ; } if ( retval instanceof RKRecord ) { RKRecord rk = ( RKRecord ) retval ; NumberRecord num = new NumberRecord ( ) ; num . setColumn ( rk . getColumn ( ) ) ; num . setRow ( rk . getRow ( ) ) ; num . setXFIndex ( rk . getXFIndex ( ) ) ; num . setValue ( rk . getRKNumber ( ) ) ; retval = num ; } else if ( retval instanceof DBCellRecord ) { retval = null ; } else if ( retval instanceof MulRKRecord ) { MulRKRecord mrk = ( MulRKRecord ) retval ; realretval = new Record [ mrk . getNumColumns ( ) ] ; for ( int k = 0 ; k < mrk . getNumColumns ( ) ; k ++ ) { NumberRecord nr = new NumberRecord ( ) ; nr . setColumn ( ( short ) ( k + mrk . getFirstColumn ( ) ) ) ; nr . setRow ( mrk . getRow ( ) ) ; nr . setXFIndex ( mrk . getXFAt ( k ) ) ; nr . setValue ( mrk . getRKNumberAt ( k ) ) ; realretval [ k ] = nr ; } } else if ( retval instanceof MulBlankRecord ) { MulBlankRecord mb = ( MulBlankRecord ) retval ; realretval = new Record [ mb . getNumColumns ( ) ] ; for ( int k = 0 ; k < mb . getNumColumns ( ) ; k ++ ) { BlankRecord br = new BlankRecord ( ) ; br . setColumn ( ( short ) ( k + mb . getFirstColumn ( ) ) ) ; br . setRow ( mb . getRow ( ) ) ; br . setXFIndex ( mb . getXFAt ( k ) ) ; realretval [ k ] = br ; } } if ( realretval == null ) { realretval = new Record [ 1 ] ; realretval [ 0 ] = retval ; } return realretval ; } public static short [ ] getAllKnownRecordSIDs ( ) { short [ ] results = new short [ recordsMap . size ( ) ] ; int i = 0 ; for ( Iterator iterator = recordsMap . keySet ( ) . iterator ( ) ; iterator . hasNext ( ) ; ) { Short sid = ( Short ) iterator . next ( ) ; results [ i ++ ] = sid . shortValue ( ) ; } return results ; } private static Map recordsToMap ( Class [ ] records ) { Map result = new HashMap ( ) ; Constructor constructor ; for ( int i = 0 ; i < records . length ; i ++ ) { Class record ; short sid ; record = records [ i ] ; try { sid = record . getField ( "sid" ) . getShort ( null ) ; constructor = record . getConstructor ( new Class [ ] { RecordInputStream . class } ) ; } catch ( Exception illegalArgumentException ) { throw new RecordFormatException ( "Unable to determine record types" , illegalArgumentException ) ; } result . put ( new Short ( sid ) , constructor ) ; } return result ; } } 	1
package org . apache . poi . poifs . filesystem ; public interface BATManaged { public int countBlocks ( ) ; public void setStartBlock ( final int index ) ; } 	0
package org . apache . poi . poifs . filesystem ; public interface DocumentEntry extends Entry { public int getSize ( ) ; } 	0
package org . apache . poi . hssf . record . aggregates ; import org . apache . poi . hssf . record . * ; import java . util . Iterator ; import java . util . List ; public class ValueRecordsAggregate extends Record { public final static short sid = - 1000 ; int firstcell = - 1 ; int lastcell = - 1 ; CellValueRecordInterface [ ] [ ] records ; public ValueRecordsAggregate ( ) { records = new CellValueRecordInterface [ 30 ] [ ] ; } public void insertCell ( CellValueRecordInterface cell ) { short column = cell . getColumn ( ) ; int row = cell . getRow ( ) ; if ( row >= records . length ) { CellValueRecordInterface [ ] [ ] oldRecords = records ; int newSize = oldRecords . length * 2 ; if ( newSize < row + 1 ) newSize = row + 1 ; records = new CellValueRecordInterface [ newSize ] [ ] ; System . arraycopy ( oldRecords , 0 , records , 0 , oldRecords . length ) ; } CellValueRecordInterface [ ] rowCells = records [ row ] ; if ( rowCells == null ) { int newSize = column + 1 ; if ( newSize < 10 ) newSize = 10 ; rowCells = new CellValueRecordInterface [ newSize ] ; records [ row ] = rowCells ; } if ( column >= rowCells . length ) { CellValueRecordInterface [ ] oldRowCells = rowCells ; int newSize = oldRowCells . length * 2 ; if ( newSize < column + 1 ) newSize = column + 1 ; rowCells = new CellValueRecordInterface [ newSize ] ; System . arraycopy ( oldRowCells , 0 , rowCells , 0 , oldRowCells . length ) ; records [ row ] = rowCells ; } rowCells [ column ] = cell ; if ( ( column < firstcell ) || ( firstcell == - 1 ) ) { firstcell = column ; } if ( ( column > lastcell ) || ( lastcell == - 1 ) ) { lastcell = column ; } } public void removeCell ( CellValueRecordInterface cell ) { if ( cell != null ) { short column = cell . getColumn ( ) ; int row = cell . getRow ( ) ; if ( row >= records . length ) return ; CellValueRecordInterface [ ] rowCells = records [ row ] ; if ( rowCells == null ) return ; if ( column >= rowCells . length ) return ; rowCells [ column ] = null ; } } public int getPhysicalNumberOfCells ( ) { int count = 0 ; for ( int r = 0 ; r < records . length ; r ++ ) { CellValueRecordInterface [ ] rowCells = records [ r ] ; if ( rowCells != null ) for ( short c = 0 ; c < rowCells . length ; c ++ ) { if ( rowCells [ c ] != null ) count ++ ; } } return count ; } public int getFirstCellNum ( ) { return firstcell ; } public int getLastCellNum ( ) { return lastcell ; } public int construct ( int offset , List records ) { int k = 0 ; FormulaRecordAggregate lastFormulaAggregate = null ; List sharedFormulas = new java . util . ArrayList ( ) ; for ( k = offset ; k < records . size ( ) ; k ++ ) { Record rec = ( Record ) records . get ( k ) ; if ( rec instanceof StringRecord == false && ! rec . isInValueSection ( ) && ! ( rec instanceof UnknownRecord ) ) { break ; } else if ( rec instanceof SharedFormulaRecord ) { sharedFormulas . add ( rec ) ; } else if ( rec instanceof FormulaRecord ) { FormulaRecord formula = ( FormulaRecord ) rec ; if ( formula . isSharedFormula ( ) ) { Record nextRecord = ( Record ) records . get ( k + 1 ) ; if ( nextRecord instanceof SharedFormulaRecord ) { sharedFormulas . add ( nextRecord ) ; k ++ ; } boolean found = false ; for ( int i = sharedFormulas . size ( ) - 1 ; i >= 0 ; i -- ) { SharedFormulaRecord shrd = ( SharedFormulaRecord ) sharedFormulas . get ( i ) ; if ( shrd . isFormulaInShared ( formula ) ) { shrd . convertSharedFormulaRecord ( formula ) ; found = true ; break ; } } if ( ! found ) { } } lastFormulaAggregate = new FormulaRecordAggregate ( ( FormulaRecord ) rec , null ) ; insertCell ( lastFormulaAggregate ) ; } else if ( rec instanceof StringRecord ) { lastFormulaAggregate . setStringRecord ( ( StringRecord ) rec ) ; } else if ( rec . isValue ( ) ) { insertCell ( ( CellValueRecordInterface ) rec ) ; } } return k ; } public int serialize ( int offset , byte [ ] data ) { throw new RuntimeException ( "This method shouldnt be called. ValueRecordsAggregate.serializeCellRow() should be called from RowRecordsAggregate." ) ; } public int getRowCellBlockSize ( int startRow , int endRow ) { MyIterator itr = new MyIterator ( startRow , endRow ) ; int size = 0 ; while ( itr . hasNext ( ) ) { CellValueRecordInterface cell = ( CellValueRecordInterface ) itr . next ( ) ; int row = cell . getRow ( ) ; if ( row > endRow ) break ; if ( ( row >= startRow ) && ( row <= endRow ) ) size += ( ( Record ) cell ) . getRecordSize ( ) ; } return size ; } public boolean rowHasCells ( int row ) { if ( row > records . length - 1 ) return false ; CellValueRecordInterface [ ] rowCells = records [ row ] ; if ( rowCells == null ) return false ; for ( int col = 0 ; col < rowCells . length ; col ++ ) { if ( rowCells [ col ] != null ) return true ; } return false ; } public int serializeCellRow ( final int row , int offset , byte [ ] data ) { MyIterator itr = new MyIterator ( row , row ) ; int pos = offset ; while ( itr . hasNext ( ) ) { CellValueRecordInterface cell = ( CellValueRecordInterface ) itr . next ( ) ; if ( cell . getRow ( ) != row ) break ; pos += ( ( Record ) cell ) . serialize ( pos , data ) ; } return pos - offset ; } protected void fillFields ( RecordInputStream in ) { } protected void validateSid ( short id ) { } public short getSid ( ) { return sid ; } public int getRecordSize ( ) { int size = 0 ; Iterator irecs = this . getIterator ( ) ; while ( irecs . hasNext ( ) ) { size += ( ( Record ) irecs . next ( ) ) . getRecordSize ( ) ; } return size ; } public Iterator getIterator ( ) { return new MyIterator ( ) ; } public Object clone ( ) { ValueRecordsAggregate rec = new ValueRecordsAggregate ( ) ; for ( Iterator valIter = getIterator ( ) ; valIter . hasNext ( ) ; ) { CellValueRecordInterface val = ( CellValueRecordInterface ) ( ( CellValueRecordInterface ) valIter . next ( ) ) . clone ( ) ; rec . insertCell ( val ) ; } return rec ; } public class MyIterator implements Iterator { short nextColumn = - 1 ; int nextRow , lastRow ; public MyIterator ( ) { this . nextRow = 0 ; this . lastRow = records . length - 1 ; findNext ( ) ; } public MyIterator ( int firstRow , int lastRow ) { this . nextRow = firstRow ; this . lastRow = lastRow ; findNext ( ) ; } public boolean hasNext ( ) { return nextRow <= lastRow ; } public Object next ( ) { Object o = records [ nextRow ] [ nextColumn ] ; findNext ( ) ; return o ; } public void remove ( ) { throw new UnsupportedOperationException ( "gibt's noch nicht" ) ; } private void findNext ( ) { nextColumn ++ ; for ( ; nextRow <= lastRow ; nextRow ++ ) { CellValueRecordInterface [ ] rowCells = ( nextRow < records . length ) ? records [ nextRow ] : null ; if ( rowCells == null ) { nextColumn = 0 ; continue ; } for ( ; nextColumn < rowCells . length ; nextColumn ++ ) { if ( rowCells [ nextColumn ] != null ) return ; } nextColumn = 0 ; } } } } 	1
package org . apache . poi . hssf . record ; public class HorizontalPageBreakRecord extends PageBreakRecord { public static final short sid = PageBreakRecord . HORIZONTAL_SID ; public HorizontalPageBreakRecord ( ) { super ( ) ; } public HorizontalPageBreakRecord ( short sid ) { super ( sid ) ; } public HorizontalPageBreakRecord ( RecordInputStream in ) { super ( in ) ; } public short getSid ( ) { return sid ; } } 	1
package org . apache . poi . poifs . storage ; import java . io . IOException ; import java . io . OutputStream ; abstract class BigBlock implements BlockWritable { protected void doWriteData ( final OutputStream stream , final byte [ ] data ) throws IOException { stream . write ( data ) ; } abstract void writeData ( final OutputStream stream ) throws IOException ; public void writeBlocks ( final OutputStream stream ) throws IOException { writeData ( stream ) ; } } 	0
package org . apache . poi . hssf . record ; import org . apache . poi . util . * ; public class CommonObjectDataSubRecord extends SubRecord { public final static short sid = 0x15 ; private short field_1_objectType ; public final static short OBJECT_TYPE_GROUP = 0 ; public final static short OBJECT_TYPE_LINE = 1 ; public final static short OBJECT_TYPE_RECTANGLE = 2 ; public final static short OBJECT_TYPE_OVAL = 3 ; public final static short OBJECT_TYPE_ARC = 4 ; public final static short OBJECT_TYPE_CHART = 5 ; public final static short OBJECT_TYPE_TEXT = 6 ; public final static short OBJECT_TYPE_BUTTON = 7 ; public final static short OBJECT_TYPE_PICTURE = 8 ; public final static short OBJECT_TYPE_POLYGON = 9 ; public final static short OBJECT_TYPE_RESERVED1 = 10 ; public final static short OBJECT_TYPE_CHECKBOX = 11 ; public final static short OBJECT_TYPE_OPTION_BUTTON = 12 ; public final static short OBJECT_TYPE_EDIT_BOX = 13 ; public final static short OBJECT_TYPE_LABEL = 14 ; public final static short OBJECT_TYPE_DIALOG_BOX = 15 ; public final static short OBJECT_TYPE_SPINNER = 16 ; public final static short OBJECT_TYPE_SCROLL_BAR = 17 ; public final static short OBJECT_TYPE_LIST_BOX = 18 ; public final static short OBJECT_TYPE_GROUP_BOX = 19 ; public final static short OBJECT_TYPE_COMBO_BOX = 20 ; public final static short OBJECT_TYPE_RESERVED2 = 21 ; public final static short OBJECT_TYPE_RESERVED3 = 22 ; public final static short OBJECT_TYPE_RESERVED4 = 23 ; public final static short OBJECT_TYPE_RESERVED5 = 24 ; public final static short OBJECT_TYPE_COMMENT = 25 ; public final static short OBJECT_TYPE_RESERVED6 = 26 ; public final static short OBJECT_TYPE_RESERVED7 = 27 ; public final static short OBJECT_TYPE_RESERVED8 = 28 ; public final static short OBJECT_TYPE_RESERVED9 = 29 ; public final static short OBJECT_TYPE_MICROSOFT_OFFICE_DRAWING = 30 ; private short field_2_objectId ; private short field_3_option ; private BitField locked = BitFieldFactory . getInstance ( 0x1 ) ; private BitField printable = BitFieldFactory . getInstance ( 0x10 ) ; private BitField autofill = BitFieldFactory . getInstance ( 0x2000 ) ; private BitField autoline = BitFieldFactory . getInstance ( 0x4000 ) ; private int field_4_reserved1 ; private int field_5_reserved2 ; private int field_6_reserved3 ; public CommonObjectDataSubRecord ( ) { } public CommonObjectDataSubRecord ( RecordInputStream in ) { super ( in ) ; } protected void validateSid ( short id ) { if ( id != sid ) { throw new RecordFormatException ( "Not a CommonObjectData record" ) ; } } protected void fillFields ( RecordInputStream in ) { field_1_objectType = in . readShort ( ) ; field_2_objectId = in . readShort ( ) ; field_3_option = in . readShort ( ) ; field_4_reserved1 = in . readInt ( ) ; field_5_reserved2 = in . readInt ( ) ; field_6_reserved3 = in . readInt ( ) ; } public String toString ( ) { StringBuffer buffer = new StringBuffer ( ) ; buffer . append ( "[ftCmo]\n" ) ; buffer . append ( "    .objectType           = " ) . append ( "0x" ) . append ( HexDump . toHex ( getObjectType ( ) ) ) . append ( " (" ) . append ( getObjectType ( ) ) . append ( " )" ) ; buffer . append ( System . getProperty ( "line.separator" ) ) ; buffer . append ( "    .objectId             = " ) . append ( "0x" ) . append ( HexDump . toHex ( getObjectId ( ) ) ) . append ( " (" ) . append ( getObjectId ( ) ) . append ( " )" ) ; buffer . append ( System . getProperty ( "line.separator" ) ) ; buffer . append ( "    .option               = " ) . append ( "0x" ) . append ( HexDump . toHex ( getOption ( ) ) ) . append ( " (" ) . append ( getOption ( ) ) . append ( " )" ) ; buffer . append ( System . getProperty ( "line.separator" ) ) ; buffer . append ( "         .locked                   = " ) . append ( isLocked ( ) ) . append ( '\n' ) ; buffer . append ( "         .printable                = " ) . append ( isPrintable ( ) ) . append ( '\n' ) ; buffer . append ( "         .autofill                 = " ) . append ( isAutofill ( ) ) . append ( '\n' ) ; buffer . append ( "         .autoline                 = " ) . append ( isAutoline ( ) ) . append ( '\n' ) ; buffer . append ( "    .reserved1            = " ) . append ( "0x" ) . append ( HexDump . toHex ( getReserved1 ( ) ) ) . append ( " (" ) . append ( getReserved1 ( ) ) . append ( " )" ) ; buffer . append ( System . getProperty ( "line.separator" ) ) ; buffer . append ( "    .reserved2            = " ) . append ( "0x" ) . append ( HexDump . toHex ( getReserved2 ( ) ) ) . append ( " (" ) . append ( getReserved2 ( ) ) . append ( " )" ) ; buffer . append ( System . getProperty ( "line.separator" ) ) ; buffer . append ( "    .reserved3            = " ) . append ( "0x" ) . append ( HexDump . toHex ( getReserved3 ( ) ) ) . append ( " (" ) . append ( getReserved3 ( ) ) . append ( " )" ) ; buffer . append ( System . getProperty ( "line.separator" ) ) ; buffer . append ( "[/ftCmo]\n" ) ; return buffer . toString ( ) ; } public int serialize ( int offset , byte [ ] data ) { int pos = 0 ; LittleEndian . putShort ( data , 0 + offset , sid ) ; LittleEndian . putShort ( data , 2 + offset , ( short ) ( getRecordSize ( ) - 4 ) ) ; LittleEndian . putShort ( data , 4 + offset + pos , field_1_objectType ) ; LittleEndian . putShort ( data , 6 + offset + pos , field_2_objectId ) ; LittleEndian . putShort ( data , 8 + offset + pos , field_3_option ) ; LittleEndian . putInt ( data , 10 + offset + pos , field_4_reserved1 ) ; LittleEndian . putInt ( data , 14 + offset + pos , field_5_reserved2 ) ; LittleEndian . putInt ( data , 18 + offset + pos , field_6_reserved3 ) ; return getRecordSize ( ) ; } public int getRecordSize ( ) { return 4 + 2 + 2 + 2 + 4 + 4 + 4 ; } public short getSid ( ) { return sid ; } public Object clone ( ) { CommonObjectDataSubRecord rec = new CommonObjectDataSubRecord ( ) ; rec . field_1_objectType = field_1_objectType ; rec . field_2_objectId = field_2_objectId ; rec . field_3_option = field_3_option ; rec . field_4_reserved1 = field_4_reserved1 ; rec . field_5_reserved2 = field_5_reserved2 ; rec . field_6_reserved3 = field_6_reserved3 ; return rec ; } public short getObjectType ( ) { return field_1_objectType ; } public void setObjectType ( short field_1_objectType ) { this . field_1_objectType = field_1_objectType ; } public short getObjectId ( ) { return field_2_objectId ; } public void setObjectId ( short field_2_objectId ) { this . field_2_objectId = field_2_objectId ; } public short getOption ( ) { return field_3_option ; } public void setOption ( short field_3_option ) { this . field_3_option = field_3_option ; } public int getReserved1 ( ) { return field_4_reserved1 ; } public void setReserved1 ( int field_4_reserved1 ) { this . field_4_reserved1 = field_4_reserved1 ; } public int getReserved2 ( ) { return field_5_reserved2 ; } public void setReserved2 ( int field_5_reserved2 ) { this . field_5_reserved2 = field_5_reserved2 ; } public int getReserved3 ( ) { return field_6_reserved3 ; } public void setReserved3 ( int field_6_reserved3 ) { this . field_6_reserved3 = field_6_reserved3 ; } public void setLocked ( boolean value ) { field_3_option = locked . setShortBoolean ( field_3_option , value ) ; } public boolean isLocked ( ) { return locked . isSet ( field_3_option ) ; } public void setPrintable ( boolean value ) { field_3_option = printable . setShortBoolean ( field_3_option , value ) ; } public boolean isPrintable ( ) { return printable . isSet ( field_3_option ) ; } public void setAutofill ( boolean value ) { field_3_option = autofill . setShortBoolean ( field_3_option , value ) ; } public boolean isAutofill ( ) { return autofill . isSet ( field_3_option ) ; } public void setAutoline ( boolean value ) { field_3_option = autoline . setShortBoolean ( field_3_option , value ) ; } public boolean isAutoline ( ) { return autoline . isSet ( field_3_option ) ; } } 	1
package org . apache . poi . poifs . storage ; import java . io . IOException ; import java . io . OutputStream ; public interface BlockWritable { public void writeBlocks ( final OutputStream stream ) throws IOException ; } 	0
package org . apache . poi . hssf . record ; import org . apache . poi . util . LittleEndian ; public class EOFRecord extends Record { public final static short sid = 0x0A ; public EOFRecord ( ) { } public EOFRecord ( RecordInputStream in ) { super ( in ) ; } protected void validateSid ( short id ) { if ( id != sid ) { throw new RecordFormatException ( "NOT An EOF RECORD" ) ; } } protected void fillFields ( RecordInputStream in ) { } public String toString ( ) { StringBuffer buffer = new StringBuffer ( ) ; buffer . append ( "[EOF]\n" ) ; buffer . append ( "[/EOF]\n" ) ; return buffer . toString ( ) ; } public int serialize ( int offset , byte [ ] data ) { LittleEndian . putShort ( data , 0 + offset , sid ) ; LittleEndian . putShort ( data , 2 + offset , ( ( short ) 0 ) ) ; return getRecordSize ( ) ; } public int getRecordSize ( ) { return 4 ; } public short getSid ( ) { return sid ; } public Object clone ( ) { EOFRecord rec = new EOFRecord ( ) ; return rec ; } } 	1
package org . apache . poi . hssf . record . formula ; import org . apache . poi . hssf . model . Workbook ; import org . apache . poi . hssf . record . RecordInputStream ; public class EqualPtg extends OperationPtg { public final static int SIZE = 1 ; public final static byte sid = 0x0b ; public EqualPtg ( ) { } public EqualPtg ( RecordInputStream in ) { } public void writeBytes ( byte [ ] array , int offset ) { array [ offset + 0 ] = sid ; } public int getSize ( ) { return SIZE ; } public int getType ( ) { return TYPE_BINARY ; } public int getNumberOfOperands ( ) { return 2 ; } public String toFormulaString ( Workbook book ) { return "=" ; } public String toFormulaString ( String [ ] operands ) { StringBuffer buffer = new StringBuffer ( ) ; buffer . append ( operands [ 0 ] ) ; buffer . append ( toFormulaString ( ( Workbook ) null ) ) ; buffer . append ( operands [ 1 ] ) ; return buffer . toString ( ) ; } public Object clone ( ) { return new EqualPtg ( ) ; } } 	0
package org . apache . poi . util ; import org . apache . poi . util . LittleEndian . BufferUnderrunException ; import java . io . * ; public class IntegerField implements FixedField { private int _value ; private final int _offset ; public IntegerField ( final int offset ) throws ArrayIndexOutOfBoundsException { if ( offset < 0 ) { throw new ArrayIndexOutOfBoundsException ( "negative offset" ) ; } _offset = offset ; } public IntegerField ( final int offset , final int value ) throws ArrayIndexOutOfBoundsException { this ( offset ) ; set ( value ) ; } public IntegerField ( final int offset , final byte [ ] data ) throws ArrayIndexOutOfBoundsException { this ( offset ) ; readFromBytes ( data ) ; } public IntegerField ( final int offset , final int value , final byte [ ] data ) throws ArrayIndexOutOfBoundsException { this ( offset ) ; set ( value , data ) ; } public int get ( ) { return _value ; } public void set ( final int value ) { _value = value ; } public void set ( final int value , final byte [ ] data ) throws ArrayIndexOutOfBoundsException { _value = value ; writeToBytes ( data ) ; } public void readFromBytes ( final byte [ ] data ) throws ArrayIndexOutOfBoundsException { _value = LittleEndian . getInt ( data , _offset ) ; } public void readFromStream ( final InputStream stream ) throws IOException , BufferUnderrunException { _value = LittleEndian . readInt ( stream ) ; } public void writeToBytes ( final byte [ ] data ) throws ArrayIndexOutOfBoundsException { LittleEndian . putInt ( data , _offset , _value ) ; } public String toString ( ) { return String . valueOf ( _value ) ; } } 	0
package org . apache . poi . hssf . record ; import org . apache . poi . util . * ; import java . io . ByteArrayInputStream ; import java . util . List ; import java . util . Iterator ; import java . util . ArrayList ; public class ObjRecord extends Record { public final static short sid = 0x5D ; private List subrecords ; public ObjRecord ( ) { subrecords = new ArrayList ( 2 ) ; } public ObjRecord ( RecordInputStream in ) { super ( in ) ; } protected void validateSid ( short id ) { if ( id != sid ) { throw new RecordFormatException ( "Not an OBJ record" ) ; } } protected void fillFields ( RecordInputStream in ) { subrecords = new ArrayList ( ) ; int subSize = 0 ; byte [ ] subRecordData = in . readRemainder ( ) ; RecordInputStream subRecStream = new RecordInputStream ( new ByteArrayInputStream ( subRecordData ) ) ; while ( subRecStream . hasNextRecord ( ) ) { subRecStream . nextRecord ( ) ; Record subRecord = SubRecord . createSubRecord ( subRecStream ) ; subSize += subRecord . getRecordSize ( ) ; subrecords . add ( subRecord ) ; } if ( subRecordData . length - subSize == 4 ) { subrecords . add ( new EndSubRecord ( ) ) ; } } public String toString ( ) { StringBuffer buffer = new StringBuffer ( ) ; buffer . append ( "[OBJ]\n" ) ; for ( Iterator iterator = subrecords . iterator ( ) ; iterator . hasNext ( ) ; ) { Record record = ( Record ) iterator . next ( ) ; buffer . append ( "SUBRECORD: " + record . toString ( ) ) ; } buffer . append ( "[/OBJ]\n" ) ; return buffer . toString ( ) ; } public int serialize ( int offset , byte [ ] data ) { int pos = 0 ; LittleEndian . putShort ( data , 0 + offset , sid ) ; LittleEndian . putShort ( data , 2 + offset , ( short ) ( getRecordSize ( ) - 4 ) ) ; pos = offset + 4 ; for ( Iterator iterator = subrecords . iterator ( ) ; iterator . hasNext ( ) ; ) { Record record = ( Record ) iterator . next ( ) ; pos += record . serialize ( pos , data ) ; } return getRecordSize ( ) ; } public int getRecordSize ( ) { int size = 0 ; for ( Iterator iterator = subrecords . iterator ( ) ; iterator . hasNext ( ) ; ) { Record record = ( Record ) iterator . next ( ) ; size += record . getRecordSize ( ) ; } return 4 + size ; } public short getSid ( ) { return sid ; } public List getSubRecords ( ) { return subrecords ; } public void clearSubRecords ( ) { subrecords . clear ( ) ; } public void addSubRecord ( int index , Object element ) { subrecords . add ( index , element ) ; } public boolean addSubRecord ( Object o ) { return subrecords . add ( o ) ; } public Object clone ( ) { ObjRecord rec = new ObjRecord ( ) ; for ( Iterator iterator = subrecords . iterator ( ) ; iterator . hasNext ( ) ; ) rec . addSubRecord ( ( ( Record ) iterator . next ( ) ) . clone ( ) ) ; return rec ; } } 	1
package org . apache . poi . hssf . record ; import org . apache . poi . util . LittleEndian ; public class CountryRecord extends Record { public final static short sid = 0x8c ; private short field_1_default_country ; private short field_2_current_country ; public CountryRecord ( ) { } public CountryRecord ( RecordInputStream in ) { super ( in ) ; } protected void validateSid ( short id ) { if ( id != sid ) { throw new RecordFormatException ( "NOT A Country RECORD" ) ; } } protected void fillFields ( RecordInputStream in ) { field_1_default_country = in . readShort ( ) ; field_2_current_country = in . readShort ( ) ; } public void setDefaultCountry ( short country ) { field_1_default_country = country ; } public void setCurrentCountry ( short country ) { field_2_current_country = country ; } public short getDefaultCountry ( ) { return field_1_default_country ; } public short getCurrentCountry ( ) { return field_2_current_country ; } public String toString ( ) { StringBuffer buffer = new StringBuffer ( ) ; buffer . append ( "[COUNTRY]\n" ) ; buffer . append ( "    .defaultcountry  = " ) . append ( Integer . toHexString ( getDefaultCountry ( ) ) ) . append ( "\n" ) ; buffer . append ( "    .currentcountry  = " ) . append ( Integer . toHexString ( getCurrentCountry ( ) ) ) . append ( "\n" ) ; buffer . append ( "[/COUNTRY]\n" ) ; return buffer . toString ( ) ; } public int serialize ( int offset , byte [ ] data ) { LittleEndian . putShort ( data , 0 + offset , sid ) ; LittleEndian . putShort ( data , 2 + offset , ( ( short ) 0x04 ) ) ; LittleEndian . putShort ( data , 4 + offset , getDefaultCountry ( ) ) ; LittleEndian . putShort ( data , 6 + offset , getCurrentCountry ( ) ) ; return getRecordSize ( ) ; } public int getRecordSize ( ) { return 8 ; } public short getSid ( ) { return sid ; } } 	1
package org . apache . poi . hssf . record . formula ; import java . util . List ; import java . util . ArrayList ; import java . util . Stack ; import org . apache . poi . hssf . model . Workbook ; import org . apache . poi . hssf . record . RecordInputStream ; public abstract class Ptg { public static Stack createParsedExpressionTokens ( short size , RecordInputStream in ) { Stack stack = new Stack ( ) ; int pos = 0 ; List arrayPtgs = null ; while ( pos < size ) { Ptg ptg = Ptg . createPtg ( in ) ; if ( ptg instanceof ArrayPtg ) { if ( arrayPtgs == null ) arrayPtgs = new ArrayList ( 5 ) ; arrayPtgs . add ( ptg ) ; pos += 8 ; } else pos += ptg . getSize ( ) ; stack . push ( ptg ) ; } if ( arrayPtgs != null ) { for ( int i = 0 ; i < arrayPtgs . size ( ) ; i ++ ) { ArrayPtg p = ( ArrayPtg ) arrayPtgs . get ( i ) ; p . readTokenValues ( in ) ; } } return stack ; } public static Ptg createPtg ( RecordInputStream in ) { byte id = in . readByte ( ) ; Ptg retval = null ; switch ( id ) { case ExpPtg . sid : retval = new ExpPtg ( in ) ; break ; case AddPtg . sid : retval = new AddPtg ( in ) ; break ; case SubtractPtg . sid : retval = new SubtractPtg ( in ) ; break ; case MultiplyPtg . sid : retval = new MultiplyPtg ( in ) ; break ; case DividePtg . sid : retval = new DividePtg ( in ) ; break ; case PowerPtg . sid : retval = new PowerPtg ( in ) ; break ; case ConcatPtg . sid : retval = new ConcatPtg ( in ) ; break ; case LessThanPtg . sid : retval = new LessThanPtg ( in ) ; break ; case LessEqualPtg . sid : retval = new LessEqualPtg ( in ) ; break ; case EqualPtg . sid : retval = new EqualPtg ( in ) ; break ; case GreaterEqualPtg . sid : retval = new GreaterEqualPtg ( in ) ; break ; case GreaterThanPtg . sid : retval = new GreaterThanPtg ( in ) ; break ; case NotEqualPtg . sid : retval = new NotEqualPtg ( in ) ; break ; case IntersectionPtg . sid : retval = new IntersectionPtg ( in ) ; break ; case UnionPtg . sid : retval = new UnionPtg ( in ) ; break ; case RangePtg . sid : retval = new RangePtg ( in ) ; break ; case UnaryPlusPtg . sid : retval = new UnaryPlusPtg ( in ) ; break ; case UnaryMinusPtg . sid : retval = new UnaryMinusPtg ( in ) ; break ; case PercentPtg . sid : retval = new PercentPtg ( in ) ; break ; case ParenthesisPtg . sid : retval = new ParenthesisPtg ( in ) ; break ; case MissingArgPtg . sid : retval = new MissingArgPtg ( in ) ; break ; case StringPtg . sid : retval = new StringPtg ( in ) ; break ; case AttrPtg . sid : retval = new AttrPtg ( in ) ; break ; case ErrPtg . sid : retval = new ErrPtg ( in ) ; break ; case BoolPtg . sid : retval = new BoolPtg ( in ) ; break ; case IntPtg . sid : retval = new IntPtg ( in ) ; break ; case NumberPtg . sid : retval = new NumberPtg ( in ) ; break ; case ArrayPtg . sid : retval = new ArrayPtg ( in ) ; break ; case ArrayPtgV . sid : retval = new ArrayPtgV ( in ) ; break ; case ArrayPtgA . sid : retval = new ArrayPtgA ( in ) ; break ; case FuncPtg . sid : case FuncPtg . sid + 0x20 : case FuncPtg . sid + 0x40 : retval = new FuncPtg ( in ) ; break ; case FuncVarPtg . sid : case FuncVarPtg . sid + 0x20 : case FuncVarPtg . sid + 0x40 : retval = new FuncVarPtg ( in ) ; break ; case ReferencePtg . sid : retval = new ReferencePtg ( in ) ; break ; case RefAPtg . sid : retval = new RefAPtg ( in ) ; break ; case RefVPtg . sid : retval = new RefVPtg ( in ) ; break ; case RefNAPtg . sid : retval = new RefNAPtg ( in ) ; break ; case RefNPtg . sid : retval = new RefNPtg ( in ) ; break ; case RefNVPtg . sid : retval = new RefNVPtg ( in ) ; break ; case AreaPtg . sid : retval = new AreaPtg ( in ) ; break ; case AreaVPtg . sid : retval = new AreaVPtg ( in ) ; break ; case AreaAPtg . sid : retval = new AreaAPtg ( in ) ; break ; case AreaNAPtg . sid : retval = new AreaNAPtg ( in ) ; break ; case AreaNPtg . sid : retval = new AreaNPtg ( in ) ; break ; case AreaNVPtg . sid : retval = new AreaNVPtg ( in ) ; break ; case MemAreaPtg . sid : case MemAreaPtg . sid + 0x40 : case MemAreaPtg . sid + 0x20 : retval = new MemAreaPtg ( in ) ; break ; case MemErrPtg . sid : case MemErrPtg . sid + 0x20 : case MemErrPtg . sid + 0x40 : retval = new MemErrPtg ( in ) ; break ; case MemFuncPtg . sid : retval = new MemFuncPtg ( in ) ; break ; case RefErrorPtg . sid : case RefErrorPtg . sid + 0x20 : case RefErrorPtg . sid + 0x40 : retval = new RefErrorPtg ( in ) ; break ; case AreaErrPtg . sid : case AreaErrPtg . sid + 0x20 : case AreaErrPtg . sid + 0x40 : retval = new AreaErrPtg ( in ) ; break ; case NamePtg . sid : case NamePtg . sid + 0x20 : case NamePtg . sid + 0x40 : retval = new NamePtg ( in ) ; break ; case NameXPtg . sid : case NameXPtg . sid + 0x20 : case NameXPtg . sid + 0x40 : retval = new NameXPtg ( in ) ; break ; case Area3DPtg . sid : case Area3DPtg . sid + 0x20 : case Area3DPtg . sid + 0x40 : retval = new Area3DPtg ( in ) ; break ; case Ref3DPtg . sid : case Ref3DPtg . sid + 0x20 : case Ref3DPtg . sid + 0x40 : retval = new Ref3DPtg ( in ) ; break ; case DeletedRef3DPtg . sid : case DeletedRef3DPtg . sid + 0x20 : case DeletedRef3DPtg . sid + 0x40 : retval = new DeletedRef3DPtg ( in ) ; break ; case DeletedArea3DPtg . sid : case DeletedArea3DPtg . sid + 0x20 : case DeletedArea3DPtg . sid + 0x40 : retval = new DeletedArea3DPtg ( in ) ; break ; default : throw new java . lang . UnsupportedOperationException ( " Unknown Ptg in Formula: 0x" + Integer . toHexString ( ( int ) id ) + " (" + ( int ) id + ")" ) ; } if ( id > 0x60 ) { retval . setClass ( CLASS_ARRAY ) ; } else if ( id > 0x40 ) { retval . setClass ( CLASS_VALUE ) ; } else { retval . setClass ( CLASS_REF ) ; } return retval ; } public static int serializePtgStack ( Stack expression , byte [ ] array , int offset ) { int pos = 0 ; int size = 0 ; if ( expression != null ) size = expression . size ( ) ; List arrayPtgs = null ; for ( int k = 0 ; k < size ; k ++ ) { Ptg ptg = ( Ptg ) expression . get ( k ) ; ptg . writeBytes ( array , pos + offset ) ; if ( ptg instanceof ArrayPtg ) { if ( arrayPtgs == null ) arrayPtgs = new ArrayList ( 5 ) ; arrayPtgs . add ( ptg ) ; pos += 8 ; } else pos += ptg . getSize ( ) ; } if ( arrayPtgs != null ) { for ( int i = 0 ; i < arrayPtgs . size ( ) ; i ++ ) { ArrayPtg p = ( ArrayPtg ) arrayPtgs . get ( i ) ; pos += p . writeTokenValueBytes ( array , pos + offset ) ; } } return pos ; } public abstract int getSize ( ) ; public final byte [ ] getBytes ( ) { int size = getSize ( ) ; byte [ ] bytes = new byte [ size ] ; writeBytes ( bytes , 0 ) ; return bytes ; } public abstract void writeBytes ( byte [ ] array , int offset ) ; public abstract String toFormulaString ( Workbook book ) ; public String toDebugString ( ) { byte [ ] ba = new byte [ getSize ( ) ] ; String retval = null ; writeBytes ( ba , 0 ) ; try { retval = org . apache . poi . util . HexDump . dump ( ba , 0 , 0 ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; } return retval ; } public String toString ( ) { return this . getClass ( ) . toString ( ) ; } public static final byte CLASS_REF = 0x00 ; public static final byte CLASS_VALUE = 0x20 ; public static final byte CLASS_ARRAY = 0x40 ; protected byte ptgClass = CLASS_REF ; public void setClass ( byte thePtgClass ) { ptgClass = thePtgClass ; } public byte getPtgClass ( ) { return ptgClass ; } public abstract byte getDefaultOperandClass ( ) ; public abstract Object clone ( ) ; } 	1
package org . apache . poi . hssf . record . formula ; import org . apache . poi . hssf . model . Workbook ; import org . apache . poi . hssf . record . RecordInputStream ; public class AddPtg extends OperationPtg { public final static int SIZE = 1 ; public final static byte sid = 0x03 ; private final static String ADD = "+" ; public AddPtg ( ) { } public AddPtg ( RecordInputStream in ) { } public void writeBytes ( byte [ ] array , int offset ) { array [ offset + 0 ] = sid ; } public int getSize ( ) { return SIZE ; } public int getType ( ) { return TYPE_BINARY ; } public int getNumberOfOperands ( ) { return 2 ; } public String toFormulaString ( Workbook book ) { return "+" ; } public String toFormulaString ( String [ ] operands ) { StringBuffer buffer = new StringBuffer ( ) ; buffer . append ( operands [ 0 ] ) ; buffer . append ( ADD ) ; buffer . append ( operands [ 1 ] ) ; return buffer . toString ( ) ; } public byte getDefaultOperandClass ( ) { return Ptg . CLASS_VALUE ; } public Object clone ( ) { return new AddPtg ( ) ; } } 	0
package org . apache . poi . hssf . record ; import java . util . List ; import java . util . Stack ; import org . apache . poi . hssf . model . Workbook ; import org . apache . poi . hssf . record . formula . Area3DPtg ; import org . apache . poi . hssf . record . formula . DeletedArea3DPtg ; import org . apache . poi . hssf . record . formula . DeletedRef3DPtg ; import org . apache . poi . hssf . record . formula . Ptg ; import org . apache . poi . hssf . record . formula . Ref3DPtg ; import org . apache . poi . hssf . util . RangeAddress ; import org . apache . poi . util . HexDump ; import org . apache . poi . util . LittleEndian ; import org . apache . poi . util . StringUtil ; public class NameRecord extends Record { public final static short sid = 0x18 ; public final static byte BUILTIN_CONSOLIDATE_AREA = ( byte ) 1 ; public final static byte BUILTIN_AUTO_OPEN = ( byte ) 2 ; public final static byte BUILTIN_AUTO_CLOSE = ( byte ) 3 ; public final static byte BUILTIN_DATABASE = ( byte ) 4 ; public final static byte BUILTIN_CRITERIA = ( byte ) 5 ; public final static byte BUILTIN_PRINT_AREA = ( byte ) 6 ; public final static byte BUILTIN_PRINT_TITLE = ( byte ) 7 ; public final static byte BUILTIN_RECORDER = ( byte ) 8 ; public final static byte BUILTIN_DATA_FORM = ( byte ) 9 ; public final static byte BUILTIN_AUTO_ACTIVATE = ( byte ) 10 ; public final static byte BUILTIN_AUTO_DEACTIVATE = ( byte ) 11 ; public final static byte BUILTIN_SHEET_TITLE = ( byte ) 12 ; public static final short OPT_HIDDEN_NAME = ( short ) 0x0001 ; public static final short OPT_FUNCTION_NAME = ( short ) 0x0002 ; public static final short OPT_COMMAND_NAME = ( short ) 0x0004 ; public static final short OPT_MACRO = ( short ) 0x0008 ; public static final short OPT_COMPLEX = ( short ) 0x0010 ; public static final short OPT_BUILTIN = ( short ) 0x0020 ; public static final short OPT_BINDATA = ( short ) 0x1000 ; private short field_1_option_flag ; private byte field_2_keyboard_shortcut ; private byte field_3_length_name_text ; private short field_4_length_name_definition ; private short field_5_index_to_sheet ; private short field_6_equals_to_index_to_sheet ; private byte field_7_length_custom_menu ; private byte field_8_length_description_text ; private byte field_9_length_help_topic_text ; private byte field_10_length_status_bar_text ; private byte field_11_compressed_unicode_flag ; private byte field_12_builtIn_name ; private String field_12_name_text ; private Stack field_13_name_definition ; private String field_14_custom_menu_text ; private String field_15_description_text ; private String field_16_help_topic_text ; private String field_17_status_bar_text ; public NameRecord ( ) { field_13_name_definition = new Stack ( ) ; field_12_name_text = new String ( ) ; field_14_custom_menu_text = new String ( ) ; field_15_description_text = new String ( ) ; field_16_help_topic_text = new String ( ) ; field_17_status_bar_text = new String ( ) ; } public NameRecord ( RecordInputStream in ) { super ( in ) ; } public NameRecord ( byte builtin , short index ) { this ( ) ; this . field_12_builtIn_name = builtin ; this . setOptionFlag ( ( short ) ( this . getOptionFlag ( ) | OPT_BUILTIN ) ) ; this . setNameTextLength ( ( byte ) 1 ) ; this . setEqualsToIndexToSheet ( index ) ; this . setCustomMenuLength ( ( byte ) 0 ) ; this . setDescriptionTextLength ( ( byte ) 0 ) ; this . setHelpTopicLength ( ( byte ) 0 ) ; this . setStatusBarLength ( ( byte ) 0 ) ; } public void setOptionFlag ( short flag ) { field_1_option_flag = flag ; } public void setKeyboardShortcut ( byte shortcut ) { field_2_keyboard_shortcut = shortcut ; } public void setNameTextLength ( byte length ) { field_3_length_name_text = length ; } public void setDefinitionTextLength ( short length ) { field_4_length_name_definition = length ; } public void setUnused ( short index ) { field_5_index_to_sheet = index ; } public short getEqualsToIndexToSheet ( ) { return field_6_equals_to_index_to_sheet ; } public short getIndexToSheet ( ) { return getEqualsToIndexToSheet ( ) ; } public byte getFnGroup ( ) { int masked = field_1_option_flag & 0x0fc0 ; return ( byte ) ( masked > > 4 ) ; } public void setEqualsToIndexToSheet ( short value ) { field_6_equals_to_index_to_sheet = value ; } public void setCustomMenuLength ( byte length ) { field_7_length_custom_menu = length ; } public void setDescriptionTextLength ( byte length ) { field_8_length_description_text = length ; } public void setHelpTopicLength ( byte length ) { field_9_length_help_topic_text = length ; } public void setStatusBarLength ( byte length ) { field_10_length_status_bar_text = length ; } public void setCompressedUnicodeFlag ( byte flag ) { field_11_compressed_unicode_flag = flag ; } public void setNameText ( String name ) { field_12_name_text = name ; } public void setCustomMenuText ( String text ) { field_14_custom_menu_text = text ; } public void setDescriptionText ( String text ) { field_15_description_text = text ; } public void setHelpTopicText ( String text ) { field_16_help_topic_text = text ; } public void setStatusBarText ( String text ) { field_17_status_bar_text = text ; } public short getOptionFlag ( ) { return field_1_option_flag ; } public byte getKeyboardShortcut ( ) { return field_2_keyboard_shortcut ; } public byte getNameTextLength ( ) { return field_3_length_name_text ; } public short getDefinitionLength ( ) { return field_4_length_name_definition ; } public short getUnused ( ) { return field_5_index_to_sheet ; } public byte getCustomMenuLength ( ) { return field_7_length_custom_menu ; } public byte getDescriptionTextLength ( ) { return field_8_length_description_text ; } public byte getHelpTopicLength ( ) { return field_9_length_help_topic_text ; } public byte getStatusBarLength ( ) { return field_10_length_status_bar_text ; } public byte getCompressedUnicodeFlag ( ) { return field_11_compressed_unicode_flag ; } public boolean isHiddenName ( ) { return ( field_1_option_flag & OPT_HIDDEN_NAME ) != 0 ; } public boolean isFunctionName ( ) { return ( field_1_option_flag & OPT_FUNCTION_NAME ) != 0 ; } public boolean isCommandName ( ) { return ( field_1_option_flag & OPT_COMMAND_NAME ) != 0 ; } public boolean isMacro ( ) { return ( field_1_option_flag & OPT_MACRO ) != 0 ; } public boolean isComplexFunction ( ) { return ( field_1_option_flag & OPT_COMPLEX ) != 0 ; } public boolean isBuiltInName ( ) { return ( ( this . getOptionFlag ( ) & OPT_BUILTIN ) != 0 ) ; } public String getNameText ( ) { return this . isBuiltInName ( ) ? this . translateBuiltInName ( this . getBuiltInName ( ) ) : field_12_name_text ; } public byte getBuiltInName ( ) { return this . field_12_builtIn_name ; } public List getNameDefinition ( ) { return field_13_name_definition ; } public void setNameDefinition ( Stack nameDefinition ) { field_13_name_definition = nameDefinition ; } public String getCustomMenuText ( ) { return field_14_custom_menu_text ; } public String getDescriptionText ( ) { return field_15_description_text ; } public String getHelpTopicText ( ) { return field_16_help_topic_text ; } public String getStatusBarText ( ) { return field_17_status_bar_text ; } protected void validateSid ( short id ) { if ( id != sid ) { throw new RecordFormatException ( "NOT A valid Name RECORD" ) ; } } public int serialize ( int offset , byte [ ] data ) { LittleEndian . putShort ( data , 0 + offset , sid ) ; short size = ( short ) ( 15 + getTextsLength ( ) + getNameDefinitionSize ( ) ) ; LittleEndian . putShort ( data , 2 + offset , size ) ; LittleEndian . putShort ( data , 4 + offset , getOptionFlag ( ) ) ; data [ 6 + offset ] = getKeyboardShortcut ( ) ; data [ 7 + offset ] = getNameTextLength ( ) ; LittleEndian . putShort ( data , 8 + offset , getDefinitionLength ( ) ) ; LittleEndian . putShort ( data , 10 + offset , getUnused ( ) ) ; LittleEndian . putShort ( data , 12 + offset , getEqualsToIndexToSheet ( ) ) ; data [ 14 + offset ] = getCustomMenuLength ( ) ; data [ 15 + offset ] = getDescriptionTextLength ( ) ; data [ 16 + offset ] = getHelpTopicLength ( ) ; data [ 17 + offset ] = getStatusBarLength ( ) ; data [ 18 + offset ] = getCompressedUnicodeFlag ( ) ; int start_of_name_definition = 19 + field_3_length_name_text ; if ( this . isBuiltInName ( ) ) { data [ 19 + offset ] = this . getBuiltInName ( ) ; } else { StringUtil . putCompressedUnicode ( getNameText ( ) , data , 19 + offset ) ; } Ptg . serializePtgStack ( field_13_name_definition , data , start_of_name_definition + offset ) ; int start_of_custom_menu_text = start_of_name_definition + field_4_length_name_definition ; StringUtil . putCompressedUnicode ( getCustomMenuText ( ) , data , start_of_custom_menu_text + offset ) ; int start_of_description_text = start_of_custom_menu_text + field_7_length_custom_menu ; StringUtil . putCompressedUnicode ( getDescriptionText ( ) , data , start_of_description_text + offset ) ; int start_of_help_topic_text = start_of_description_text + field_8_length_description_text ; StringUtil . putCompressedUnicode ( getHelpTopicText ( ) , data , start_of_help_topic_text + offset ) ; int start_of_status_bar_text = start_of_help_topic_text + field_9_length_help_topic_text ; StringUtil . putCompressedUnicode ( getStatusBarText ( ) , data , start_of_status_bar_text + offset ) ; return getRecordSize ( ) ; } public int getTextsLength ( ) { int result ; result = getNameTextLength ( ) + getDescriptionTextLength ( ) + getHelpTopicLength ( ) + getStatusBarLength ( ) ; return result ; } private int getNameDefinitionSize ( ) { int result = 0 ; List list = field_13_name_definition ; for ( int k = 0 ; k < list . size ( ) ; k ++ ) { Ptg ptg = ( Ptg ) list . get ( k ) ; result += ptg . getSize ( ) ; } return result ; } public int getRecordSize ( ) { int result ; result = 19 + getTextsLength ( ) + getNameDefinitionSize ( ) ; return result ; } public short getExternSheetNumber ( ) { if ( field_13_name_definition == null || field_13_name_definition . isEmpty ( ) ) return 0 ; Ptg ptg = ( Ptg ) field_13_name_definition . peek ( ) ; short result = 0 ; if ( ptg . getClass ( ) == Area3DPtg . class ) { result = ( ( Area3DPtg ) ptg ) . getExternSheetIndex ( ) ; } else if ( ptg . getClass ( ) == Ref3DPtg . class ) { result = ( ( Ref3DPtg ) ptg ) . getExternSheetIndex ( ) ; } return result ; } public void setExternSheetNumber ( short externSheetNumber ) { Ptg ptg ; if ( field_13_name_definition == null || field_13_name_definition . isEmpty ( ) ) { field_13_name_definition = new Stack ( ) ; ptg = createNewPtg ( ) ; } else { ptg = ( Ptg ) field_13_name_definition . peek ( ) ; } if ( ptg . getClass ( ) == Area3DPtg . class ) { ( ( Area3DPtg ) ptg ) . setExternSheetIndex ( externSheetNumber ) ; } else if ( ptg . getClass ( ) == Ref3DPtg . class ) { ( ( Ref3DPtg ) ptg ) . setExternSheetIndex ( externSheetNumber ) ; } } private Ptg createNewPtg ( ) { Ptg ptg = new Area3DPtg ( ) ; field_13_name_definition . push ( ptg ) ; return ptg ; } public String getAreaReference ( Workbook book ) { if ( field_13_name_definition == null || field_13_name_definition . isEmpty ( ) ) return "Error" ; Ptg ptg = ( Ptg ) field_13_name_definition . peek ( ) ; String result = "" ; if ( ptg . getClass ( ) == Area3DPtg . class ) { result = ptg . toFormulaString ( book ) ; } else if ( ptg . getClass ( ) == Ref3DPtg . class ) { result = ptg . toFormulaString ( book ) ; } else if ( ptg . getClass ( ) == DeletedArea3DPtg . class || ptg . getClass ( ) == DeletedRef3DPtg . class ) { result = "#REF!" ; } return result ; } public void setAreaReference ( String ref ) { RangeAddress ra = new RangeAddress ( ref ) ; Ptg oldPtg ; Ptg ptg ; if ( field_13_name_definition == null || field_13_name_definition . isEmpty ( ) ) { field_13_name_definition = new Stack ( ) ; oldPtg = createNewPtg ( ) ; } else { oldPtg = ( Ptg ) field_13_name_definition . pop ( ) ; } short externSheetIndex = 0 ; if ( oldPtg . getClass ( ) == Area3DPtg . class ) { externSheetIndex = ( ( Area3DPtg ) oldPtg ) . getExternSheetIndex ( ) ; } else if ( oldPtg . getClass ( ) == Ref3DPtg . class ) { externSheetIndex = ( ( Ref3DPtg ) oldPtg ) . getExternSheetIndex ( ) ; } if ( ra . hasRange ( ) ) { ptg = new Area3DPtg ( ) ; ( ( Area3DPtg ) ptg ) . setExternSheetIndex ( externSheetIndex ) ; ( ( Area3DPtg ) ptg ) . setArea ( ref ) ; this . setDefinitionTextLength ( ( short ) ptg . getSize ( ) ) ; } else { ptg = new Ref3DPtg ( ) ; ( ( Ref3DPtg ) ptg ) . setExternSheetIndex ( externSheetIndex ) ; ( ( Ref3DPtg ) ptg ) . setArea ( ref ) ; this . setDefinitionTextLength ( ( short ) ptg . getSize ( ) ) ; } field_13_name_definition . push ( ptg ) ; } protected void fillFields ( RecordInputStream in ) { field_1_option_flag = in . readShort ( ) ; field_2_keyboard_shortcut = in . readByte ( ) ; field_3_length_name_text = in . readByte ( ) ; field_4_length_name_definition = in . readShort ( ) ; field_5_index_to_sheet = in . readShort ( ) ; field_6_equals_to_index_to_sheet = in . readShort ( ) ; field_7_length_custom_menu = in . readByte ( ) ; field_8_length_description_text = in . readByte ( ) ; field_9_length_help_topic_text = in . readByte ( ) ; field_10_length_status_bar_text = in . readByte ( ) ; field_11_compressed_unicode_flag = in . readByte ( ) ; if ( this . isBuiltInName ( ) ) { field_12_builtIn_name = in . readByte ( ) ; } else { if ( field_11_compressed_unicode_flag == 1 ) { field_12_name_text = in . readCompressedUnicode ( field_3_length_name_text ) ; } else { field_12_name_text = in . readCompressedUnicode ( field_3_length_name_text ) ; } } field_13_name_definition = Ptg . createParsedExpressionTokens ( field_4_length_name_definition , in ) ; field_14_custom_menu_text = in . readCompressedUnicode ( LittleEndian . ubyteToInt ( field_7_length_custom_menu ) ) ; field_15_description_text = in . readCompressedUnicode ( LittleEndian . ubyteToInt ( field_8_length_description_text ) ) ; field_16_help_topic_text = in . readCompressedUnicode ( LittleEndian . ubyteToInt ( field_9_length_help_topic_text ) ) ; field_17_status_bar_text = in . readCompressedUnicode ( LittleEndian . ubyteToInt ( field_10_length_status_bar_text ) ) ; } public short getSid ( ) { return sid ; } public String toString ( ) { StringBuffer buffer = new StringBuffer ( ) ; buffer . append ( "[NAME]\n" ) ; buffer . append ( "    .option flags         = " ) . append ( HexDump . toHex ( field_1_option_flag ) ) . append ( "\n" ) ; buffer . append ( "    .keyboard shortcut    = " ) . append ( HexDump . toHex ( field_2_keyboard_shortcut ) ) . append ( "\n" ) ; buffer . append ( "    .length of the name   = " ) . append ( field_3_length_name_text ) . append ( "\n" ) ; buffer . append ( "    .size of the formula data = " ) . append ( field_4_length_name_definition ) . append ( "\n" ) ; buffer . append ( "    .unused                   = " ) . append ( field_5_index_to_sheet ) . append ( "\n" ) ; buffer . append ( "    .index to sheet (1-based, 0=Global)           = " ) . append ( field_6_equals_to_index_to_sheet ) . append ( "\n" ) ; buffer . append ( "    .Length of menu text (character count)        = " ) . append ( field_7_length_custom_menu ) . append ( "\n" ) ; buffer . append ( "    .Length of description text (character count) = " ) . append ( field_8_length_description_text ) . append ( "\n" ) ; buffer . append ( "    .Length of help topic text (character count)  = " ) . append ( field_9_length_help_topic_text ) . append ( "\n" ) ; buffer . append ( "    .Length of status bar text (character count)  = " ) . append ( field_10_length_status_bar_text ) . append ( "\n" ) ; buffer . append ( "    .Name (Unicode flag)  = " ) . append ( field_11_compressed_unicode_flag ) . append ( "\n" ) ; buffer . append ( "    .Name (Unicode text)  = " ) . append ( getNameText ( ) ) . append ( "\n" ) ; buffer . append ( "    .Menu text (Unicode string without length field)        = " ) . append ( field_14_custom_menu_text ) . append ( "\n" ) ; buffer . append ( "    .Description text (Unicode string without length field) = " ) . append ( field_15_description_text ) . append ( "\n" ) ; buffer . append ( "    .Help topic text (Unicode string without length field)  = " ) . append ( field_16_help_topic_text ) . append ( "\n" ) ; buffer . append ( "    .Status bar text (Unicode string without length field)  = " ) . append ( field_17_status_bar_text ) . append ( "\n" ) ; buffer . append ( "[/NAME]\n" ) ; return buffer . toString ( ) ; } protected String translateBuiltInName ( byte name ) { switch ( name ) { case NameRecord . BUILTIN_AUTO_ACTIVATE : return "Auto_Activate" ; case NameRecord . BUILTIN_AUTO_CLOSE : return "Auto_Close" ; case NameRecord . BUILTIN_AUTO_DEACTIVATE : return "Auto_Deactivate" ; case NameRecord . BUILTIN_AUTO_OPEN : return "Auto_Open" ; case NameRecord . BUILTIN_CONSOLIDATE_AREA : return "Consolidate_Area" ; case NameRecord . BUILTIN_CRITERIA : return "Criteria" ; case NameRecord . BUILTIN_DATABASE : return "Database" ; case NameRecord . BUILTIN_DATA_FORM : return "Data_Form" ; case NameRecord . BUILTIN_PRINT_AREA : return "Print_Area" ; case NameRecord . BUILTIN_PRINT_TITLE : return "Print_Titles" ; case NameRecord . BUILTIN_RECORDER : return "Recorder" ; case NameRecord . BUILTIN_SHEET_TITLE : return "Sheet_Title" ; } return "Unknown" ; } } 	1
package org . apache . poi . poifs . dev ; import java . util . Iterator ; public interface POIFSViewable { public Object [ ] getViewableArray ( ) ; public Iterator getViewableIterator ( ) ; public boolean preferArray ( ) ; public String getShortDescription ( ) ; } 	0
package org . apache . poi . hpsf ; import java . io . UnsupportedEncodingException ; import java . util . HashMap ; import java . util . Map ; import org . apache . poi . util . HexDump ; import org . apache . poi . util . LittleEndian ; public class Property { protected long id ; public long getID ( ) { return id ; } protected long type ; public long getType ( ) { return type ; } protected Object value ; public Object getValue ( ) { return value ; } public Property ( final long id , final long type , final Object value ) { this . id = id ; this . type = type ; this . value = value ; } public Property ( final long id , final byte [ ] src , final long offset , final int length , final int codepage ) throws UnsupportedEncodingException { this . id = id ; if ( id == 0 ) { value = readDictionary ( src , offset , length , codepage ) ; return ; } int o = ( int ) offset ; type = LittleEndian . getUInt ( src , o ) ; o += LittleEndian . INT_SIZE ; try { value = VariantSupport . read ( src , o , length , ( int ) type , codepage ) ; } catch ( UnsupportedVariantTypeException ex ) { VariantSupport . writeUnsupportedTypeMessage ( ex ) ; value = ex . getValue ( ) ; } } protected Property ( ) { } protected Map readDictionary ( final byte [ ] src , final long offset , final int length , final int codepage ) throws UnsupportedEncodingException { if ( offset < 0 || offset > src . length ) throw new HPSFRuntimeException ( "Illegal offset " + offset + " while HPSF stream contains " + length + " bytes." ) ; int o = ( int ) offset ; final long nrEntries = LittleEndian . getUInt ( src , o ) ; o += LittleEndian . INT_SIZE ; final Map m = new HashMap ( ( int ) nrEntries , ( float ) 1.0 ) ; for ( int i = 0 ; i < nrEntries ; i ++ ) { final Long id = new Long ( LittleEndian . getUInt ( src , o ) ) ; o += LittleEndian . INT_SIZE ; long sLength = LittleEndian . getUInt ( src , o ) ; o += LittleEndian . INT_SIZE ; final StringBuffer b = new StringBuffer ( ) ; switch ( codepage ) { case - 1 : { b . append ( new String ( src , o , ( int ) sLength ) ) ; break ; } case Constants . CP_UNICODE : { final int nrBytes = ( int ) ( sLength * 2 ) ; final byte [ ] h = new byte [ nrBytes ] ; for ( int i2 = 0 ; i2 < nrBytes ; i2 += 2 ) { h [ i2 ] = src [ o + i2 + 1 ] ; h [ i2 + 1 ] = src [ o + i2 ] ; } b . append ( new String ( h , 0 , nrBytes , VariantSupport . codepageToEncoding ( codepage ) ) ) ; break ; } default : { b . append ( new String ( src , o , ( int ) sLength , VariantSupport . codepageToEncoding ( codepage ) ) ) ; break ; } } while ( b . length ( ) > 0 && b . charAt ( b . length ( ) - 1 ) == 0x00 ) b . setLength ( b . length ( ) - 1 ) ; if ( codepage == Constants . CP_UNICODE ) { if ( sLength % 2 == 1 ) sLength ++ ; o += ( sLength + sLength ) ; } else o += sLength ; m . put ( id , b . toString ( ) ) ; } return m ; } protected int getSize ( ) throws WritingNotSupportedException { int length = VariantSupport . getVariantLength ( type ) ; if ( length >= 0 ) return length ; if ( length == - 2 ) throw new WritingNotSupportedException ( type , null ) ; final int PADDING = 4 ; switch ( ( int ) type ) { case Variant . VT_LPSTR : { int l = ( ( String ) value ) . length ( ) + 1 ; int r = l % PADDING ; if ( r > 0 ) l += PADDING - r ; length += l ; break ; } case Variant . VT_EMPTY : break ; default : throw new WritingNotSupportedException ( type , value ) ; } return length ; } public boolean equals ( final Object o ) { if ( ! ( o instanceof Property ) ) return false ; final Property p = ( Property ) o ; final Object pValue = p . getValue ( ) ; final long pId = p . getID ( ) ; if ( id != pId || ( id != 0 && ! typesAreEqual ( type , p . getType ( ) ) ) ) return false ; if ( value == null && pValue == null ) return true ; if ( value == null || pValue == null ) return false ; final Class valueClass = value . getClass ( ) ; final Class pValueClass = pValue . getClass ( ) ; if ( ! ( valueClass . isAssignableFrom ( pValueClass ) ) && ! ( pValueClass . isAssignableFrom ( valueClass ) ) ) return false ; if ( value instanceof byte [ ] ) return Util . equal ( ( byte [ ] ) value , ( byte [ ] ) pValue ) ; return value . equals ( pValue ) ; } private boolean typesAreEqual ( final long t1 , final long t2 ) { if ( t1 == t2 || ( t1 == Variant . VT_LPSTR && t2 == Variant . VT_LPWSTR ) || ( t2 == Variant . VT_LPSTR && t1 == Variant . VT_LPWSTR ) ) return true ; else return false ; } public int hashCode ( ) { long hashCode = 0 ; hashCode += id ; hashCode += type ; if ( value != null ) hashCode += value . hashCode ( ) ; final int returnHashCode = ( int ) ( hashCode & 0x0ffffffffL ) ; return returnHashCode ; } public String toString ( ) { final StringBuffer b = new StringBuffer ( ) ; b . append ( getClass ( ) . getName ( ) ) ; b . append ( '[' ) ; b . append ( "id: " ) ; b . append ( getID ( ) ) ; b . append ( ", type: " ) ; b . append ( getType ( ) ) ; final Object value = getValue ( ) ; b . append ( ", value: " ) ; b . append ( value . toString ( ) ) ; if ( value instanceof String ) { final String s = ( String ) value ; final int l = s . length ( ) ; final byte [ ] bytes = new byte [ l * 2 ] ; for ( int i = 0 ; i < l ; i ++ ) { final char c = s . charAt ( i ) ; final byte high = ( byte ) ( ( c & 0x00ff00 ) > > 8 ) ; final byte low = ( byte ) ( ( c & 0x0000ff ) > > 0 ) ; bytes [ i * 2 ] = high ; bytes [ i * 2 + 1 ] = low ; } final String hex = HexDump . dump ( bytes , 0L , 0 ) ; b . append ( " [" ) ; b . append ( hex ) ; b . append ( "]" ) ; } b . append ( ']' ) ; return b . toString ( ) ; } } 	1
package org . apache . poi . ddf ; public class EscherShapePathProperty extends EscherSimpleProperty { public static final int LINE_OF_STRAIGHT_SEGMENTS = 0 ; public static final int CLOSED_POLYGON = 1 ; public static final int CURVES = 2 ; public static final int CLOSED_CURVES = 3 ; public static final int COMPLEX = 4 ; public EscherShapePathProperty ( short propertyNumber , int shapePath ) { super ( propertyNumber , false , false , shapePath ) ; } } 	1
package org . apache . poi . util ; import java . io . File ; import java . io . IOException ; import java . util . Random ; public class TempFile { static File dir ; static Random rnd = new Random ( ) ; public static File createTempFile ( String prefix , String suffix ) throws IOException { if ( dir == null ) { dir = new File ( System . getProperty ( "java.io.tmpdir" ) , "poifiles" ) ; dir . mkdir ( ) ; if ( System . getProperty ( "poi.keep.tmp.files" ) == null ) dir . deleteOnExit ( ) ; } File newFile = new File ( dir , prefix + rnd . nextInt ( ) + suffix ) ; if ( System . getProperty ( "poi.keep.tmp.files" ) == null ) newFile . deleteOnExit ( ) ; return newFile ; } } 	1
package org . apache . poi . hssf . dev ; import java . io . FileInputStream ; import java . io . InputStream ; import java . io . IOException ; import org . apache . poi . poifs . filesystem . POIFSFileSystem ; import org . apache . poi . hssf . record . Record ; import org . apache . poi . hssf . eventusermodel . HSSFRequest ; import org . apache . poi . hssf . eventusermodel . HSSFListener ; import org . apache . poi . hssf . eventusermodel . HSSFEventFactory ; public class EFBiffViewer { String file ; public EFBiffViewer ( ) { } public void run ( ) throws IOException { FileInputStream fin = new FileInputStream ( file ) ; POIFSFileSystem poifs = new POIFSFileSystem ( fin ) ; InputStream din = poifs . createDocumentInputStream ( "Workbook" ) ; HSSFRequest req = new HSSFRequest ( ) ; req . addListenerForAllRecords ( new HSSFListener ( ) { public void processRecord ( Record rec ) { System . out . println ( rec . toString ( ) ) ; } } ) ; HSSFEventFactory factory = new HSSFEventFactory ( ) ; factory . processEvents ( req , din ) ; } public void setFile ( String file ) { this . file = file ; } public static void main ( String [ ] args ) { if ( ( args . length == 1 ) && ! args [ 0 ] . equals ( "--help" ) ) { try { EFBiffViewer viewer = new EFBiffViewer ( ) ; viewer . setFile ( args [ 0 ] ) ; viewer . run ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } else { System . out . println ( "EFBiffViewer" ) ; System . out . println ( "Outputs biffview of records based on HSSFEventFactory" ) ; System . out . println ( "usage: java org.apache.poi.hssf.dev.EBBiffViewer " + "filename" ) ; } } } 	0
package org . apache . poi . hssf . record ; import org . apache . poi . util . LittleEndian ; import org . apache . poi . util . StringUtil ; public class WriteAccessRecord extends Record { public final static short sid = 0x5c ; private String field_1_username ; public WriteAccessRecord ( ) { } public WriteAccessRecord ( RecordInputStream in ) { super ( in ) ; } protected void validateSid ( short id ) { if ( id != sid ) { throw new RecordFormatException ( "NOT A WRITEACCESS RECORD" ) ; } } protected void fillFields ( RecordInputStream in ) { byte [ ] data = in . readRemainder ( ) ; field_1_username = StringUtil . getFromCompressedUnicode ( data , 3 , data . length - 3 ) ; } public void setUsername ( String username ) { field_1_username = username ; } public String getUsername ( ) { return field_1_username ; } public String toString ( ) { StringBuffer buffer = new StringBuffer ( ) ; buffer . append ( "[WRITEACCESS]\n" ) ; buffer . append ( "    .name            = " ) . append ( field_1_username . toString ( ) ) . append ( "\n" ) ; buffer . append ( "[/WRITEACCESS]\n" ) ; return buffer . toString ( ) ; } public int serialize ( int offset , byte [ ] data ) { String username = getUsername ( ) ; StringBuffer temp = new StringBuffer ( 0x70 - ( 0x3 ) ) ; temp . append ( username ) ; while ( temp . length ( ) < 0x70 - 0x3 ) { temp . append ( " " ) ; } username = temp . toString ( ) ; UnicodeString str = new UnicodeString ( username ) ; str . setOptionFlags ( ( byte ) 0x0 ) ; LittleEndian . putShort ( data , 0 + offset , sid ) ; LittleEndian . putShort ( data , 2 + offset , ( short ) 112 ) ; UnicodeString . UnicodeRecordStats stats = new UnicodeString . UnicodeRecordStats ( ) ; stats . recordSize += 4 ; stats . remainingSize -= 4 ; str . serialize ( stats , 4 + offset , data ) ; return getRecordSize ( ) ; } public int getRecordSize ( ) { return 116 ; } public short getSid ( ) { return sid ; } } 	1
package org . apache . poi . hssf . record ; import org . apache . poi . util . LittleEndian ; public class PrecisionRecord extends Record { public final static short sid = 0xE ; public short field_1_precision ; public PrecisionRecord ( ) { } public PrecisionRecord ( RecordInputStream in ) { super ( in ) ; } protected void validateSid ( short id ) { if ( id != sid ) { throw new RecordFormatException ( "NOT A PRECISION RECORD" ) ; } } protected void fillFields ( RecordInputStream in ) { field_1_precision = in . readShort ( ) ; } public void setFullPrecision ( boolean fullprecision ) { if ( fullprecision == true ) { field_1_precision = 1 ; } else { field_1_precision = 0 ; } } public boolean getFullPrecision ( ) { return ( field_1_precision == 1 ) ; } public String toString ( ) { StringBuffer buffer = new StringBuffer ( ) ; buffer . append ( "[PRECISION]\n" ) ; buffer . append ( "    .precision       = " ) . append ( getFullPrecision ( ) ) . append ( "\n" ) ; buffer . append ( "[/PRECISION]\n" ) ; return buffer . toString ( ) ; } public int serialize ( int offset , byte [ ] data ) { LittleEndian . putShort ( data , 0 + offset , sid ) ; LittleEndian . putShort ( data , 2 + offset , ( ( short ) 0x02 ) ) ; LittleEndian . putShort ( data , 4 + offset , field_1_precision ) ; return getRecordSize ( ) ; } public int getRecordSize ( ) { return 6 ; } public short getSid ( ) { return sid ; } } 	1
package org . apache . poi . hssf . usermodel ; import java . util . ArrayList ; import java . util . List ; import java . util . Iterator ; public class HSSFShapeGroup extends HSSFShape implements HSSFShapeContainer { List shapes = new ArrayList ( ) ; int x1 = 0 ; int y1 = 0 ; int x2 = 1023 ; int y2 = 255 ; public HSSFShapeGroup ( HSSFShape parent , HSSFAnchor anchor ) { super ( parent , anchor ) ; } public HSSFShapeGroup createGroup ( HSSFChildAnchor anchor ) { HSSFShapeGroup group = new HSSFShapeGroup ( this , anchor ) ; group . anchor = anchor ; shapes . add ( group ) ; return group ; } public HSSFSimpleShape createShape ( HSSFChildAnchor anchor ) { HSSFSimpleShape shape = new HSSFSimpleShape ( this , anchor ) ; shape . anchor = anchor ; shapes . add ( shape ) ; return shape ; } public HSSFTextbox createTextbox ( HSSFChildAnchor anchor ) { HSSFTextbox shape = new HSSFTextbox ( this , anchor ) ; shape . anchor = anchor ; shapes . add ( shape ) ; return shape ; } public HSSFPolygon createPolygon ( HSSFChildAnchor anchor ) { HSSFPolygon shape = new HSSFPolygon ( this , anchor ) ; shape . anchor = anchor ; shapes . add ( shape ) ; return shape ; } public HSSFPicture createPicture ( HSSFChildAnchor anchor , int pictureIndex ) { HSSFPicture shape = new HSSFPicture ( this , anchor ) ; shape . anchor = anchor ; shape . setPictureIndex ( pictureIndex ) ; shapes . add ( shape ) ; return shape ; } public List getChildren ( ) { return shapes ; } public void setCoordinates ( int x1 , int y1 , int x2 , int y2 ) { this . x1 = x1 ; this . y1 = y1 ; this . x2 = x2 ; this . y2 = y2 ; } public int getX1 ( ) { return x1 ; } public int getY1 ( ) { return y1 ; } public int getX2 ( ) { return x2 ; } public int getY2 ( ) { return y2 ; } public int countOfAllChildren ( ) { int count = shapes . size ( ) ; for ( Iterator iterator = shapes . iterator ( ) ; iterator . hasNext ( ) ; ) { HSSFShape shape = ( HSSFShape ) iterator . next ( ) ; count += shape . countOfAllChildren ( ) ; } return count ; } } 	0
package org . apache . poi . hssf . record ; import org . apache . poi . util . LittleEndian ; public class CodepageRecord extends Record { public final static short sid = 0x42 ; private short field_1_codepage ; public final static short CODEPAGE = ( short ) 0x4b0 ; public CodepageRecord ( ) { } public CodepageRecord ( RecordInputStream in ) { super ( in ) ; } protected void validateSid ( short id ) { if ( id != sid ) { throw new RecordFormatException ( "NOT A CODEPAGE RECORD" ) ; } } protected void fillFields ( RecordInputStream in ) { field_1_codepage = in . readShort ( ) ; } public void setCodepage ( short cp ) { field_1_codepage = cp ; } public short getCodepage ( ) { return field_1_codepage ; } public String toString ( ) { StringBuffer buffer = new StringBuffer ( ) ; buffer . append ( "[CODEPAGE]\n" ) ; buffer . append ( "    .codepage        = " ) . append ( Integer . toHexString ( getCodepage ( ) ) ) . append ( "\n" ) ; buffer . append ( "[/CODEPAGE]\n" ) ; return buffer . toString ( ) ; } public int serialize ( int offset , byte [ ] data ) { LittleEndian . putShort ( data , 0 + offset , sid ) ; LittleEndian . putShort ( data , 2 + offset , ( ( short ) 0x02 ) ) ; LittleEndian . putShort ( data , 4 + offset , getCodepage ( ) ) ; return getRecordSize ( ) ; } public int getRecordSize ( ) { return 6 ; } public short getSid ( ) { return sid ; } } 	1
package org . apache . poi . hssf . record . formula ; import org . apache . poi . util . LittleEndian ; import org . apache . poi . hssf . model . Workbook ; import org . apache . poi . hssf . record . RecordInputStream ; public class MemAreaPtg extends Ptg { public final static short sid = 0x26 ; private final static int SIZE = 7 ; private int field_1_reserved ; private short field_2_subex_len ; public MemAreaPtg ( ) { } public MemAreaPtg ( RecordInputStream in ) { field_1_reserved = in . readInt ( ) ; field_2_subex_len = in . readShort ( ) ; } public void setReserved ( int res ) { field_1_reserved = res ; } public int getReserved ( ) { return field_1_reserved ; } public void setSubexpressionLength ( short subexlen ) { field_2_subex_len = subexlen ; } public short getSubexpressionLength ( ) { return field_2_subex_len ; } public void writeBytes ( byte [ ] array , int offset ) { array [ offset ] = ( byte ) ( sid + ptgClass ) ; LittleEndian . putInt ( array , offset + 1 , field_1_reserved ) ; LittleEndian . putShort ( array , offset + 5 , field_2_subex_len ) ; } public int getSize ( ) { return SIZE ; } public String toFormulaString ( Workbook book ) { return "" ; } public byte getDefaultOperandClass ( ) { return Ptg . CLASS_VALUE ; } public Object clone ( ) { MemAreaPtg ptg = new MemAreaPtg ( ) ; ptg . field_1_reserved = field_1_reserved ; ptg . field_2_subex_len = field_2_subex_len ; return ptg ; } } 	1
package org . apache . poi . ddf ; import org . apache . poi . util . HexDump ; import org . apache . poi . util . LittleEndian ; import org . apache . poi . hssf . record . RecordFormatException ; public class EscherSplitMenuColorsRecord extends EscherRecord { public static final short RECORD_ID = ( short ) 0xF11E ; public static final String RECORD_DESCRIPTION = "MsofbtSplitMenuColors" ; private int field_1_color1 ; private int field_2_color2 ; private int field_3_color3 ; private int field_4_color4 ; public int fillFields ( byte [ ] data , int offset , EscherRecordFactory recordFactory ) { int bytesRemaining = readHeader ( data , offset ) ; int pos = offset + 8 ; int size = 0 ; field_1_color1 = LittleEndian . getInt ( data , pos + size ) ; size += 4 ; field_2_color2 = LittleEndian . getInt ( data , pos + size ) ; size += 4 ; field_3_color3 = LittleEndian . getInt ( data , pos + size ) ; size += 4 ; field_4_color4 = LittleEndian . getInt ( data , pos + size ) ; size += 4 ; bytesRemaining -= size ; if ( bytesRemaining != 0 ) throw new RecordFormatException ( "Expecting no remaining data but got " + bytesRemaining + " byte(s)." ) ; return 8 + size + bytesRemaining ; } public int serialize ( int offset , byte [ ] data , EscherSerializationListener listener ) { listener . beforeRecordSerialize ( offset , getRecordId ( ) , this ) ; int pos = offset ; LittleEndian . putShort ( data , pos , getOptions ( ) ) ; pos += 2 ; LittleEndian . putShort ( data , pos , getRecordId ( ) ) ; pos += 2 ; int remainingBytes = getRecordSize ( ) - 8 ; LittleEndian . putInt ( data , pos , remainingBytes ) ; pos += 4 ; LittleEndian . putInt ( data , pos , field_1_color1 ) ; pos += 4 ; LittleEndian . putInt ( data , pos , field_2_color2 ) ; pos += 4 ; LittleEndian . putInt ( data , pos , field_3_color3 ) ; pos += 4 ; LittleEndian . putInt ( data , pos , field_4_color4 ) ; pos += 4 ; listener . afterRecordSerialize ( pos , getRecordId ( ) , pos - offset , this ) ; return getRecordSize ( ) ; } public int getRecordSize ( ) { return 8 + 4 * 4 ; } public short getRecordId ( ) { return RECORD_ID ; } public String getRecordName ( ) { return "SplitMenuColors" ; } public String toString ( ) { String nl = System . getProperty ( "line.separator" ) ; return getClass ( ) . getName ( ) + ":" + nl + "  RecordId: 0x" + HexDump . toHex ( RECORD_ID ) + nl + "  Options: 0x" + HexDump . toHex ( getOptions ( ) ) + nl + "  Color1: 0x" + HexDump . toHex ( field_1_color1 ) + nl + "  Color2: 0x" + HexDump . toHex ( field_2_color2 ) + nl + "  Color3: 0x" + HexDump . toHex ( field_3_color3 ) + nl + "  Color4: 0x" + HexDump . toHex ( field_4_color4 ) + nl + "" ; } public int getColor1 ( ) { return field_1_color1 ; } public void setColor1 ( int field_1_color1 ) { this . field_1_color1 = field_1_color1 ; } public int getColor2 ( ) { return field_2_color2 ; } public void setColor2 ( int field_2_color2 ) { this . field_2_color2 = field_2_color2 ; } public int getColor3 ( ) { return field_3_color3 ; } public void setColor3 ( int field_3_color3 ) { this . field_3_color3 = field_3_color3 ; } public int getColor4 ( ) { return field_4_color4 ; } public void setColor4 ( int field_4_color4 ) { this . field_4_color4 = field_4_color4 ; } } 	1
package org . apache . poi . util ; import java . io . * ; import java . util . List ; import java . util . ArrayList ; public class HexRead { public static byte [ ] readData ( String filename ) throws IOException { File file = new File ( filename ) ; FileInputStream stream = new FileInputStream ( file ) ; try { return readData ( stream , - 1 ) ; } finally { stream . close ( ) ; } } public static byte [ ] readData ( String filename , String section ) throws IOException { File file = new File ( filename ) ; FileInputStream stream = new FileInputStream ( file ) ; try { StringBuffer sectionText = new StringBuffer ( ) ; boolean inSection = false ; int c = stream . read ( ) ; while ( c != - 1 ) { switch ( c ) { case '[' : inSection = true ; break ; case '\n' : case '\r' : inSection = false ; sectionText = new StringBuffer ( ) ; break ; case ']' : inSection = false ; if ( sectionText . toString ( ) . equals ( section ) ) return readData ( stream , '[' ) ; sectionText = new StringBuffer ( ) ; break ; default : if ( inSection ) sectionText . append ( ( char ) c ) ; } c = stream . read ( ) ; } } finally { stream . close ( ) ; } throw new IOException ( "Section '" + section + "' not found" ) ; } static public byte [ ] readData ( InputStream stream , int eofChar ) throws IOException { int characterCount = 0 ; byte b = ( byte ) 0 ; List bytes = new ArrayList ( ) ; boolean done = false ; while ( ! done ) { int count = stream . read ( ) ; char baseChar = 'a' ; if ( count == eofChar ) break ; switch ( count ) { case '#' : readToEOL ( stream ) ; break ; case '0' : case '1' : case '2' : case '3' : case '4' : case '5' : case '6' : case '7' : case '8' : case '9' : b <<= 4 ; b += ( byte ) ( count - '0' ) ; characterCount ++ ; if ( characterCount == 2 ) { bytes . add ( new Byte ( b ) ) ; characterCount = 0 ; b = ( byte ) 0 ; } break ; case 'A' : case 'B' : case 'C' : case 'D' : case 'E' : case 'F' : baseChar = 'A' ; case 'a' : case 'b' : case 'c' : case 'd' : case 'e' : case 'f' : b <<= 4 ; b += ( byte ) ( count + 10 - baseChar ) ; characterCount ++ ; if ( characterCount == 2 ) { bytes . add ( new Byte ( b ) ) ; characterCount = 0 ; b = ( byte ) 0 ; } break ; case - 1 : done = true ; break ; default : break ; } } Byte [ ] polished = ( Byte [ ] ) bytes . toArray ( new Byte [ 0 ] ) ; byte [ ] rval = new byte [ polished . length ] ; for ( int j = 0 ; j < polished . length ; j ++ ) { rval [ j ] = polished [ j ] . byteValue ( ) ; } return rval ; } static public byte [ ] readFromString ( String data ) throws IOException { return readData ( new ByteArrayInputStream ( data . getBytes ( ) ) , - 1 ) ; } static private void readToEOL ( InputStream stream ) throws IOException { int c = stream . read ( ) ; while ( c != - 1 && c != '\n' && c != '\r' ) { c = stream . read ( ) ; } } } 	0
package org . apache . poi . hssf . record ; import org . apache . poi . util . * ; public class ValueRangeRecord extends Record { public final static short sid = 0x101f ; private double field_1_minimumAxisValue ; private double field_2_maximumAxisValue ; private double field_3_majorIncrement ; private double field_4_minorIncrement ; private double field_5_categoryAxisCross ; private short field_6_options ; private BitField automaticMinimum = BitFieldFactory . getInstance ( 0x1 ) ; private BitField automaticMaximum = BitFieldFactory . getInstance ( 0x2 ) ; private BitField automaticMajor = BitFieldFactory . getInstance ( 0x4 ) ; private BitField automaticMinor = BitFieldFactory . getInstance ( 0x8 ) ; private BitField automaticCategoryCrossing = BitFieldFactory . getInstance ( 0x10 ) ; private BitField logarithmicScale = BitFieldFactory . getInstance ( 0x20 ) ; private BitField valuesInReverse = BitFieldFactory . getInstance ( 0x40 ) ; private BitField crossCategoryAxisAtMaximum = BitFieldFactory . getInstance ( 0x80 ) ; private BitField reserved = BitFieldFactory . getInstance ( 0x100 ) ; public ValueRangeRecord ( ) { } public ValueRangeRecord ( RecordInputStream in ) { super ( in ) ; } protected void validateSid ( short id ) { if ( id != sid ) { throw new RecordFormatException ( "Not a ValueRange record" ) ; } } protected void fillFields ( RecordInputStream in ) { field_1_minimumAxisValue = in . readDouble ( ) ; field_2_maximumAxisValue = in . readDouble ( ) ; field_3_majorIncrement = in . readDouble ( ) ; field_4_minorIncrement = in . readDouble ( ) ; field_5_categoryAxisCross = in . readDouble ( ) ; field_6_options = in . readShort ( ) ; } public String toString ( ) { StringBuffer buffer = new StringBuffer ( ) ; buffer . append ( "[VALUERANGE]\n" ) ; buffer . append ( "    .minimumAxisValue     = " ) . append ( " (" ) . append ( getMinimumAxisValue ( ) ) . append ( " )" ) ; buffer . append ( System . getProperty ( "line.separator" ) ) ; buffer . append ( "    .maximumAxisValue     = " ) . append ( " (" ) . append ( getMaximumAxisValue ( ) ) . append ( " )" ) ; buffer . append ( System . getProperty ( "line.separator" ) ) ; buffer . append ( "    .majorIncrement       = " ) . append ( " (" ) . append ( getMajorIncrement ( ) ) . append ( " )" ) ; buffer . append ( System . getProperty ( "line.separator" ) ) ; buffer . append ( "    .minorIncrement       = " ) . append ( " (" ) . append ( getMinorIncrement ( ) ) . append ( " )" ) ; buffer . append ( System . getProperty ( "line.separator" ) ) ; buffer . append ( "    .categoryAxisCross    = " ) . append ( " (" ) . append ( getCategoryAxisCross ( ) ) . append ( " )" ) ; buffer . append ( System . getProperty ( "line.separator" ) ) ; buffer . append ( "    .options              = " ) . append ( "0x" ) . append ( HexDump . toHex ( getOptions ( ) ) ) . append ( " (" ) . append ( getOptions ( ) ) . append ( " )" ) ; buffer . append ( System . getProperty ( "line.separator" ) ) ; buffer . append ( "         .automaticMinimum         = " ) . append ( isAutomaticMinimum ( ) ) . append ( '\n' ) ; buffer . append ( "         .automaticMaximum         = " ) . append ( isAutomaticMaximum ( ) ) . append ( '\n' ) ; buffer . append ( "         .automaticMajor           = " ) . append ( isAutomaticMajor ( ) ) . append ( '\n' ) ; buffer . append ( "         .automaticMinor           = " ) . append ( isAutomaticMinor ( ) ) . append ( '\n' ) ; buffer . append ( "         .automaticCategoryCrossing     = " ) . append ( isAutomaticCategoryCrossing ( ) ) . append ( '\n' ) ; buffer . append ( "         .logarithmicScale         = " ) . append ( isLogarithmicScale ( ) ) . append ( '\n' ) ; buffer . append ( "         .valuesInReverse          = " ) . append ( isValuesInReverse ( ) ) . append ( '\n' ) ; buffer . append ( "         .crossCategoryAxisAtMaximum     = " ) . append ( isCrossCategoryAxisAtMaximum ( ) ) . append ( '\n' ) ; buffer . append ( "         .reserved                 = " ) . append ( isReserved ( ) ) . append ( '\n' ) ; buffer . append ( "[/VALUERANGE]\n" ) ; return buffer . toString ( ) ; } public int serialize ( int offset , byte [ ] data ) { int pos = 0 ; LittleEndian . putShort ( data , 0 + offset , sid ) ; LittleEndian . putShort ( data , 2 + offset , ( short ) ( getRecordSize ( ) - 4 ) ) ; LittleEndian . putDouble ( data , 4 + offset + pos , field_1_minimumAxisValue ) ; LittleEndian . putDouble ( data , 12 + offset + pos , field_2_maximumAxisValue ) ; LittleEndian . putDouble ( data , 20 + offset + pos , field_3_majorIncrement ) ; LittleEndian . putDouble ( data , 28 + offset + pos , field_4_minorIncrement ) ; LittleEndian . putDouble ( data , 36 + offset + pos , field_5_categoryAxisCross ) ; LittleEndian . putShort ( data , 44 + offset + pos , field_6_options ) ; return getRecordSize ( ) ; } public int getRecordSize ( ) { return 4 + 8 + 8 + 8 + 8 + 8 + 2 ; } public short getSid ( ) { return sid ; } public Object clone ( ) { ValueRangeRecord rec = new ValueRangeRecord ( ) ; rec . field_1_minimumAxisValue = field_1_minimumAxisValue ; rec . field_2_maximumAxisValue = field_2_maximumAxisValue ; rec . field_3_majorIncrement = field_3_majorIncrement ; rec . field_4_minorIncrement = field_4_minorIncrement ; rec . field_5_categoryAxisCross = field_5_categoryAxisCross ; rec . field_6_options = field_6_options ; return rec ; } public double getMinimumAxisValue ( ) { return field_1_minimumAxisValue ; } public void setMinimumAxisValue ( double field_1_minimumAxisValue ) { this . field_1_minimumAxisValue = field_1_minimumAxisValue ; } public double getMaximumAxisValue ( ) { return field_2_maximumAxisValue ; } public void setMaximumAxisValue ( double field_2_maximumAxisValue ) { this . field_2_maximumAxisValue = field_2_maximumAxisValue ; } public double getMajorIncrement ( ) { return field_3_majorIncrement ; } public void setMajorIncrement ( double field_3_majorIncrement ) { this . field_3_majorIncrement = field_3_majorIncrement ; } public double getMinorIncrement ( ) { return field_4_minorIncrement ; } public void setMinorIncrement ( double field_4_minorIncrement ) { this . field_4_minorIncrement = field_4_minorIncrement ; } public double getCategoryAxisCross ( ) { return field_5_categoryAxisCross ; } public void setCategoryAxisCross ( double field_5_categoryAxisCross ) { this . field_5_categoryAxisCross = field_5_categoryAxisCross ; } public short getOptions ( ) { return field_6_options ; } public void setOptions ( short field_6_options ) { this . field_6_options = field_6_options ; } public void setAutomaticMinimum ( boolean value ) { field_6_options = automaticMinimum . setShortBoolean ( field_6_options , value ) ; } public boolean isAutomaticMinimum ( ) { return automaticMinimum . isSet ( field_6_options ) ; } public void setAutomaticMaximum ( boolean value ) { field_6_options = automaticMaximum . setShortBoolean ( field_6_options , value ) ; } public boolean isAutomaticMaximum ( ) { return automaticMaximum . isSet ( field_6_options ) ; } public void setAutomaticMajor ( boolean value ) { field_6_options = automaticMajor . setShortBoolean ( field_6_options , value ) ; } public boolean isAutomaticMajor ( ) { return automaticMajor . isSet ( field_6_options ) ; } public void setAutomaticMinor ( boolean value ) { field_6_options = automaticMinor . setShortBoolean ( field_6_options , value ) ; } public boolean isAutomaticMinor ( ) { return automaticMinor . isSet ( field_6_options ) ; } public void setAutomaticCategoryCrossing ( boolean value ) { field_6_options = automaticCategoryCrossing . setShortBoolean ( field_6_options , value ) ; } public boolean isAutomaticCategoryCrossing ( ) { return automaticCategoryCrossing . isSet ( field_6_options ) ; } public void setLogarithmicScale ( boolean value ) { field_6_options = logarithmicScale . setShortBoolean ( field_6_options , value ) ; } public boolean isLogarithmicScale ( ) { return logarithmicScale . isSet ( field_6_options ) ; } public void setValuesInReverse ( boolean value ) { field_6_options = valuesInReverse . setShortBoolean ( field_6_options , value ) ; } public boolean isValuesInReverse ( ) { return valuesInReverse . isSet ( field_6_options ) ; } public void setCrossCategoryAxisAtMaximum ( boolean value ) { field_6_options = crossCategoryAxisAtMaximum . setShortBoolean ( field_6_options , value ) ; } public boolean isCrossCategoryAxisAtMaximum ( ) { return crossCategoryAxisAtMaximum . isSet ( field_6_options ) ; } public void setReserved ( boolean value ) { field_6_options = reserved . setShortBoolean ( field_6_options , value ) ; } public boolean isReserved ( ) { return reserved . isSet ( field_6_options ) ; } } 	1
package org . apache . poi . ddf ; import org . apache . poi . util . LittleEndian ; import java . io . PrintWriter ; import java . util . Collections ; import java . util . List ; abstract public class EscherRecord { private short options ; private short recordId ; public EscherRecord ( ) { } protected int fillFields ( byte [ ] data , EscherRecordFactory f ) { return fillFields ( data , 0 , f ) ; } public abstract int fillFields ( byte [ ] data , int offset , EscherRecordFactory recordFactory ) ; protected int readHeader ( byte [ ] data , int offset ) { EscherRecordHeader header = EscherRecordHeader . readHeader ( data , offset ) ; options = header . getOptions ( ) ; recordId = header . getRecordId ( ) ; return header . getRemainingBytes ( ) ; } public boolean isContainerRecord ( ) { return ( options & ( short ) 0x000f ) == ( short ) 0x000f ; } public short getOptions ( ) { return options ; } public void setOptions ( short options ) { this . options = options ; } public byte [ ] serialize ( ) { byte [ ] retval = new byte [ getRecordSize ( ) ] ; serialize ( 0 , retval ) ; return retval ; } public int serialize ( int offset , byte [ ] data ) { return serialize ( offset , data , new NullEscherSerializationListener ( ) ) ; } public abstract int serialize ( int offset , byte [ ] data , EscherSerializationListener listener ) ; abstract public int getRecordSize ( ) ; public short getRecordId ( ) { return recordId ; } public void setRecordId ( short recordId ) { this . recordId = recordId ; } public List getChildRecords ( ) { return Collections . EMPTY_LIST ; } public void setChildRecords ( List childRecords ) { throw new IllegalArgumentException ( "This record does not support child records." ) ; } public Object clone ( ) { throw new RuntimeException ( "The class " + getClass ( ) . getName ( ) + " needs to define a clone method" ) ; } public EscherRecord getChild ( int index ) { return ( EscherRecord ) getChildRecords ( ) . get ( index ) ; } public void display ( PrintWriter w , int indent ) { for ( int i = 0 ; i < indent * 4 ; i ++ ) w . print ( ' ' ) ; w . println ( getRecordName ( ) ) ; } public abstract String getRecordName ( ) ; public short getInstance ( ) { return ( short ) ( options > > 4 ) ; } static class EscherRecordHeader { private short options ; private short recordId ; private int remainingBytes ; private EscherRecordHeader ( ) { } public static EscherRecordHeader readHeader ( byte [ ] data , int offset ) { EscherRecordHeader header = new EscherRecordHeader ( ) ; header . options = LittleEndian . getShort ( data , offset ) ; header . recordId = LittleEndian . getShort ( data , offset + 2 ) ; header . remainingBytes = LittleEndian . getInt ( data , offset + 4 ) ; return header ; } public short getOptions ( ) { return options ; } public short getRecordId ( ) { return recordId ; } public int getRemainingBytes ( ) { return remainingBytes ; } public String toString ( ) { return "EscherRecordHeader{" + "options=" + options + ", recordId=" + recordId + ", remainingBytes=" + remainingBytes + "}" ; } } } 	1
package org . apache . poi . hssf . usermodel ; import org . apache . poi . hssf . model . Sheet ; import org . apache . poi . hssf . model . Workbook ; import org . apache . poi . hssf . record . CellValueRecordInterface ; import org . apache . poi . hssf . record . RowRecord ; import java . util . HashMap ; import java . util . Iterator ; import java . util . NoSuchElementException ; public class HSSFRow implements Comparable { public final static int INITIAL_CAPACITY = 5 ; private int rowNum ; private HSSFCell [ ] cells = new HSSFCell [ INITIAL_CAPACITY ] ; private RowRecord row ; private Workbook book ; private Sheet sheet ; protected HSSFRow ( ) { } protected HSSFRow ( Workbook book , Sheet sheet , int rowNum ) { this . rowNum = rowNum ; this . book = book ; this . sheet = sheet ; row = new RowRecord ( ) ; row . setOptionFlags ( ( short ) 0x100 ) ; row . setHeight ( ( short ) 0xff ) ; row . setLastCol ( ( short ) - 1 ) ; row . setFirstCol ( ( short ) - 1 ) ; setRowNum ( rowNum ) ; } protected HSSFRow ( Workbook book , Sheet sheet , RowRecord record ) { this . book = book ; this . sheet = sheet ; row = record ; setRowNum ( record . getRowNumber ( ) ) ; } public HSSFCell createCell ( short column ) { return this . createCell ( column , HSSFCell . CELL_TYPE_BLANK ) ; } public HSSFCell createCell ( short column , int type ) { HSSFCell cell = new HSSFCell ( book , sheet , getRowNum ( ) , column , type ) ; addCell ( cell ) ; sheet . addValueRecord ( getRowNum ( ) , cell . getCellValueRecord ( ) ) ; return cell ; } public void removeCell ( HSSFCell cell ) { CellValueRecordInterface cval = cell . getCellValueRecord ( ) ; sheet . removeValueRecord ( getRowNum ( ) , cval ) ; short column = cell . getCellNum ( ) ; if ( cell != null && column < cells . length ) { cells [ column ] = null ; } if ( cell . getCellNum ( ) == row . getLastCol ( ) ) { row . setLastCol ( findLastCell ( row . getLastCol ( ) ) ) ; } if ( cell . getCellNum ( ) == row . getFirstCol ( ) ) { row . setFirstCol ( findFirstCell ( row . getFirstCol ( ) ) ) ; } } protected HSSFCell createCellFromRecord ( CellValueRecordInterface cell ) { HSSFCell hcell = new HSSFCell ( book , sheet , getRowNum ( ) , cell ) ; addCell ( hcell ) ; return hcell ; } public void setRowNum ( int rowNum ) { if ( ( rowNum < 0 ) || ( rowNum > RowRecord . MAX_ROW_NUMBER ) ) throw new IndexOutOfBoundsException ( "Row number must be between 0 and " + RowRecord . MAX_ROW_NUMBER + ", was <" + rowNum + ">" ) ; this . rowNum = rowNum ; if ( row != null ) { row . setRowNumber ( rowNum ) ; } } public int getRowNum ( ) { return rowNum ; } private void addCell ( HSSFCell cell ) { short column = cell . getCellNum ( ) ; if ( row . getFirstCol ( ) == - 1 ) { row . setFirstCol ( column ) ; } if ( row . getLastCol ( ) == - 1 ) { row . setLastCol ( column ) ; } if ( column >= cells . length ) { HSSFCell [ ] oldCells = cells ; int newSize = oldCells . length * 2 ; if ( newSize < column + 1 ) newSize = column + 1 ; cells = new HSSFCell [ newSize ] ; System . arraycopy ( oldCells , 0 , cells , 0 , oldCells . length ) ; } cells [ column ] = cell ; if ( column < row . getFirstCol ( ) ) { row . setFirstCol ( column ) ; } if ( column > row . getLastCol ( ) ) { row . setLastCol ( column ) ; } } public HSSFCell getCell ( short cellnum ) { if ( cellnum < 0 || cellnum >= cells . length ) return null ; return cells [ cellnum ] ; } public short getFirstCellNum ( ) { if ( getPhysicalNumberOfCells ( ) == 0 ) return - 1 ; else return row . getFirstCol ( ) ; } public short getLastCellNum ( ) { if ( getPhysicalNumberOfCells ( ) == 0 ) return - 1 ; else return row . getLastCol ( ) ; } public int getPhysicalNumberOfCells ( ) { int count = 0 ; for ( int i = 0 ; i < cells . length ; i ++ ) { if ( cells [ i ] != null ) count ++ ; } return count ; } public void setHeight ( short height ) { row . setBadFontHeight ( true ) ; row . setHeight ( height ) ; } public void setZeroHeight ( boolean zHeight ) { row . setZeroHeight ( zHeight ) ; } public boolean getZeroHeight ( ) { return row . getZeroHeight ( ) ; } public void setHeightInPoints ( float height ) { row . setBadFontHeight ( true ) ; row . setHeight ( ( short ) ( height * 20 ) ) ; } public short getHeight ( ) { return row . getHeight ( ) ; } public float getHeightInPoints ( ) { return ( row . getHeight ( ) / 20 ) ; } protected RowRecord getRowRecord ( ) { return row ; } private short findLastCell ( short lastcell ) { short cellnum = ( short ) ( lastcell - 1 ) ; HSSFCell r = getCell ( cellnum ) ; while ( r == null && cellnum >= 0 ) { r = getCell ( -- cellnum ) ; } return cellnum ; } private short findFirstCell ( short firstcell ) { short cellnum = ( short ) ( firstcell + 1 ) ; HSSFCell r = getCell ( cellnum ) ; while ( r == null && cellnum <= getLastCellNum ( ) ) { r = getCell ( ++ cellnum ) ; } if ( cellnum > getLastCellNum ( ) ) return - 1 ; return cellnum ; } public Iterator cellIterator ( ) { return new CellIterator ( ) ; } private class CellIterator implements Iterator { int thisId = - 1 ; int nextId = - 1 ; public CellIterator ( ) { findNext ( ) ; } public boolean hasNext ( ) { return nextId < cells . length ; } public Object next ( ) { if ( ! hasNext ( ) ) throw new NoSuchElementException ( "At last element" ) ; HSSFCell cell = cells [ nextId ] ; thisId = nextId ; findNext ( ) ; return cell ; } public void remove ( ) { if ( thisId == - 1 ) throw new IllegalStateException ( "remove() called before next()" ) ; cells [ thisId ] = null ; } private void findNext ( ) { int i = nextId + 1 ; for ( ; i < cells . length ; i ++ ) { if ( cells [ i ] != null ) break ; } nextId = i ; } } public int compareTo ( Object obj ) { HSSFRow loc = ( HSSFRow ) obj ; if ( this . getRowNum ( ) == loc . getRowNum ( ) ) { return 0 ; } if ( this . getRowNum ( ) < loc . getRowNum ( ) ) { return - 1 ; } if ( this . getRowNum ( ) > loc . getRowNum ( ) ) { return 1 ; } return - 1 ; } public boolean equals ( Object obj ) { if ( ! ( obj instanceof HSSFRow ) ) { return false ; } HSSFRow loc = ( HSSFRow ) obj ; if ( this . getRowNum ( ) == loc . getRowNum ( ) ) { return true ; } return false ; } } 	1
package org . apache . poi . hssf . record ; import org . apache . poi . util . * ; public class ObjectLinkRecord extends Record { public final static short sid = 0x1027 ; private short field_1_anchorId ; public final static short ANCHOR_ID_CHART_TITLE = 1 ; public final static short ANCHOR_ID_Y_AXIS = 2 ; public final static short ANCHOR_ID_X_AXIS = 3 ; public final static short ANCHOR_ID_SERIES_OR_POINT = 4 ; public final static short ANCHOR_ID_Z_AXIS = 7 ; private short field_2_link1 ; private short field_3_link2 ; public ObjectLinkRecord ( ) { } public ObjectLinkRecord ( RecordInputStream in ) { super ( in ) ; } protected void validateSid ( short id ) { if ( id != sid ) { throw new RecordFormatException ( "Not a ObjectLink record" ) ; } } protected void fillFields ( RecordInputStream in ) { field_1_anchorId = in . readShort ( ) ; field_2_link1 = in . readShort ( ) ; field_3_link2 = in . readShort ( ) ; } public String toString ( ) { StringBuffer buffer = new StringBuffer ( ) ; buffer . append ( "[OBJECTLINK]\n" ) ; buffer . append ( "    .anchorId             = " ) . append ( "0x" ) . append ( HexDump . toHex ( getAnchorId ( ) ) ) . append ( " (" ) . append ( getAnchorId ( ) ) . append ( " )" ) ; buffer . append ( System . getProperty ( "line.separator" ) ) ; buffer . append ( "    .link1                = " ) . append ( "0x" ) . append ( HexDump . toHex ( getLink1 ( ) ) ) . append ( " (" ) . append ( getLink1 ( ) ) . append ( " )" ) ; buffer . append ( System . getProperty ( "line.separator" ) ) ; buffer . append ( "    .link2                = " ) . append ( "0x" ) . append ( HexDump . toHex ( getLink2 ( ) ) ) . append ( " (" ) . append ( getLink2 ( ) ) . append ( " )" ) ; buffer . append ( System . getProperty ( "line.separator" ) ) ; buffer . append ( "[/OBJECTLINK]\n" ) ; return buffer . toString ( ) ; } public int serialize ( int offset , byte [ ] data ) { int pos = 0 ; LittleEndian . putShort ( data , 0 + offset , sid ) ; LittleEndian . putShort ( data , 2 + offset , ( short ) ( getRecordSize ( ) - 4 ) ) ; LittleEndian . putShort ( data , 4 + offset + pos , field_1_anchorId ) ; LittleEndian . putShort ( data , 6 + offset + pos , field_2_link1 ) ; LittleEndian . putShort ( data , 8 + offset + pos , field_3_link2 ) ; return getRecordSize ( ) ; } public int getRecordSize ( ) { return 4 + 2 + 2 + 2 ; } public short getSid ( ) { return sid ; } public Object clone ( ) { ObjectLinkRecord rec = new ObjectLinkRecord ( ) ; rec . field_1_anchorId = field_1_anchorId ; rec . field_2_link1 = field_2_link1 ; rec . field_3_link2 = field_3_link2 ; return rec ; } public short getAnchorId ( ) { return field_1_anchorId ; } public void setAnchorId ( short field_1_anchorId ) { this . field_1_anchorId = field_1_anchorId ; } public short getLink1 ( ) { return field_2_link1 ; } public void setLink1 ( short field_2_link1 ) { this . field_2_link1 = field_2_link1 ; } public short getLink2 ( ) { return field_3_link2 ; } public void setLink2 ( short field_3_link2 ) { this . field_3_link2 = field_3_link2 ; } } 	1
package org . apache . poi . hssf . record . formula ; import org . apache . poi . util . LittleEndian ; import org . apache . poi . hssf . model . Workbook ; import org . apache . poi . hssf . record . NameRecord ; import org . apache . poi . hssf . record . RecordInputStream ; public class NamePtg extends Ptg { public final static short sid = 0x23 ; private final static int SIZE = 5 ; private short field_1_label_index ; private short field_2_zero ; boolean xtra = false ; private NamePtg ( ) { } public NamePtg ( String name , Workbook book ) { final short n = ( short ) ( book . getNumNames ( ) + 1 ) ; NameRecord rec ; for ( short i = 1 ; i < n ; i ++ ) { rec = book . getNameRecord ( i - 1 ) ; if ( name . equals ( rec . getNameText ( ) ) ) { field_1_label_index = i ; return ; } } rec = new NameRecord ( ) ; rec . setNameText ( name ) ; rec . setNameTextLength ( ( byte ) name . length ( ) ) ; book . addName ( rec ) ; field_1_label_index = n ; } public NamePtg ( RecordInputStream in ) { field_1_label_index = in . readShort ( ) ; field_2_zero = in . readShort ( ) ; } public void writeBytes ( byte [ ] array , int offset ) { array [ offset + 0 ] = ( byte ) ( sid + ptgClass ) ; LittleEndian . putShort ( array , offset + 1 , field_1_label_index ) ; LittleEndian . putShort ( array , offset + 3 , field_2_zero ) ; } public int getSize ( ) { return SIZE ; } public String toFormulaString ( Workbook book ) { NameRecord rec = book . getNameRecord ( field_1_label_index - 1 ) ; return rec . getNameText ( ) ; } public byte getDefaultOperandClass ( ) { return Ptg . CLASS_REF ; } public Object clone ( ) { NamePtg ptg = new NamePtg ( ) ; ptg . field_1_label_index = field_1_label_index ; ptg . field_2_zero = field_2_zero ; return ptg ; } } 	0
package org . apache . poi . hpsf ; import org . apache . poi . util . HexDump ; public class IllegalVariantTypeException extends VariantTypeException { public IllegalVariantTypeException ( final long variantType , final Object value , final String msg ) { super ( variantType , value , msg ) ; } public IllegalVariantTypeException ( final long variantType , final Object value ) { this ( variantType , value , "The variant type " + variantType + " (" + Variant . getVariantName ( variantType ) + ", " + HexDump . toHex ( variantType ) + ") is illegal in this context." ) ; } } 	0
package org . apache . poi . poifs . eventfilesystem ; public interface POIFSReaderListener { public void processPOIFSReaderEvent ( POIFSReaderEvent event ) ; } 	0
package org . apache . poi . hssf . record ; import org . apache . poi . util . * ; public class ChartRecord extends Record { public final static short sid = 0x1002 ; private int field_1_x ; private int field_2_y ; private int field_3_width ; private int field_4_height ; public ChartRecord ( ) { } public ChartRecord ( RecordInputStream in ) { super ( in ) ; } protected void validateSid ( short id ) { if ( id != sid ) { throw new RecordFormatException ( "Not a Chart record" ) ; } } protected void fillFields ( RecordInputStream in ) { field_1_x = in . readInt ( ) ; field_2_y = in . readInt ( ) ; field_3_width = in . readInt ( ) ; field_4_height = in . readInt ( ) ; } public String toString ( ) { StringBuffer buffer = new StringBuffer ( ) ; buffer . append ( "[CHART]\n" ) ; buffer . append ( "    .x                    = " ) . append ( "0x" ) . append ( HexDump . toHex ( getX ( ) ) ) . append ( " (" ) . append ( getX ( ) ) . append ( " )" ) ; buffer . append ( System . getProperty ( "line.separator" ) ) ; buffer . append ( "    .y                    = " ) . append ( "0x" ) . append ( HexDump . toHex ( getY ( ) ) ) . append ( " (" ) . append ( getY ( ) ) . append ( " )" ) ; buffer . append ( System . getProperty ( "line.separator" ) ) ; buffer . append ( "    .width                = " ) . append ( "0x" ) . append ( HexDump . toHex ( getWidth ( ) ) ) . append ( " (" ) . append ( getWidth ( ) ) . append ( " )" ) ; buffer . append ( System . getProperty ( "line.separator" ) ) ; buffer . append ( "    .height               = " ) . append ( "0x" ) . append ( HexDump . toHex ( getHeight ( ) ) ) . append ( " (" ) . append ( getHeight ( ) ) . append ( " )" ) ; buffer . append ( System . getProperty ( "line.separator" ) ) ; buffer . append ( "[/CHART]\n" ) ; return buffer . toString ( ) ; } public int serialize ( int offset , byte [ ] data ) { int pos = 0 ; LittleEndian . putShort ( data , 0 + offset , sid ) ; LittleEndian . putShort ( data , 2 + offset , ( short ) ( getRecordSize ( ) - 4 ) ) ; LittleEndian . putInt ( data , 4 + offset + pos , field_1_x ) ; LittleEndian . putInt ( data , 8 + offset + pos , field_2_y ) ; LittleEndian . putInt ( data , 12 + offset + pos , field_3_width ) ; LittleEndian . putInt ( data , 16 + offset + pos , field_4_height ) ; return getRecordSize ( ) ; } public int getRecordSize ( ) { return 4 + 4 + 4 + 4 + 4 ; } public short getSid ( ) { return sid ; } public Object clone ( ) { ChartRecord rec = new ChartRecord ( ) ; rec . field_1_x = field_1_x ; rec . field_2_y = field_2_y ; rec . field_3_width = field_3_width ; rec . field_4_height = field_4_height ; return rec ; } public int getX ( ) { return field_1_x ; } public void setX ( int field_1_x ) { this . field_1_x = field_1_x ; } public int getY ( ) { return field_2_y ; } public void setY ( int field_2_y ) { this . field_2_y = field_2_y ; } public int getWidth ( ) { return field_3_width ; } public void setWidth ( int field_3_width ) { this . field_3_width = field_3_width ; } public int getHeight ( ) { return field_4_height ; } public void setHeight ( int field_4_height ) { this . field_4_height = field_4_height ; } } 	1
package org . apache . poi . hssf . model ; import org . apache . poi . ddf . * ; import org . apache . poi . hssf . record . * ; import org . apache . poi . hssf . usermodel . * ; public class TextboxShape extends AbstractShape { private EscherContainerRecord spContainer ; private TextObjectRecord textObjectRecord ; private ObjRecord objRecord ; private EscherTextboxRecord escherTextbox ; TextboxShape ( HSSFTextbox hssfShape , int shapeId ) { spContainer = createSpContainer ( hssfShape , shapeId ) ; objRecord = createObjRecord ( hssfShape , shapeId ) ; textObjectRecord = createTextObjectRecord ( hssfShape , shapeId ) ; } private ObjRecord createObjRecord ( HSSFTextbox hssfShape , int shapeId ) { HSSFShape shape = hssfShape ; ObjRecord obj = new ObjRecord ( ) ; CommonObjectDataSubRecord c = new CommonObjectDataSubRecord ( ) ; c . setObjectType ( ( short ) ( ( HSSFSimpleShape ) shape ) . getShapeType ( ) ) ; c . setObjectId ( ( short ) ( shapeId ) ) ; c . setLocked ( true ) ; c . setPrintable ( true ) ; c . setAutofill ( true ) ; c . setAutoline ( true ) ; EndSubRecord e = new EndSubRecord ( ) ; obj . addSubRecord ( c ) ; obj . addSubRecord ( e ) ; return obj ; } private EscherContainerRecord createSpContainer ( HSSFTextbox hssfShape , int shapeId ) { HSSFTextbox shape = hssfShape ; EscherContainerRecord spContainer = new EscherContainerRecord ( ) ; EscherSpRecord sp = new EscherSpRecord ( ) ; EscherOptRecord opt = new EscherOptRecord ( ) ; EscherRecord anchor = new EscherClientAnchorRecord ( ) ; EscherClientDataRecord clientData = new EscherClientDataRecord ( ) ; escherTextbox = new EscherTextboxRecord ( ) ; spContainer . setRecordId ( EscherContainerRecord . SP_CONTAINER ) ; spContainer . setOptions ( ( short ) 0x000F ) ; sp . setRecordId ( EscherSpRecord . RECORD_ID ) ; sp . setOptions ( ( short ) ( ( EscherAggregate . ST_TEXTBOX << 4 ) | 0x2 ) ) ; sp . setShapeId ( shapeId ) ; sp . setFlags ( EscherSpRecord . FLAG_HAVEANCHOR | EscherSpRecord . FLAG_HASSHAPETYPE ) ; opt . setRecordId ( EscherOptRecord . RECORD_ID ) ; opt . addEscherProperty ( new EscherSimpleProperty ( EscherProperties . TEXT__TEXTID , 0 ) ) ; opt . addEscherProperty ( new EscherSimpleProperty ( EscherProperties . TEXT__TEXTLEFT , shape . getMarginLeft ( ) ) ) ; opt . addEscherProperty ( new EscherSimpleProperty ( EscherProperties . TEXT__TEXTRIGHT , shape . getMarginRight ( ) ) ) ; opt . addEscherProperty ( new EscherSimpleProperty ( EscherProperties . TEXT__TEXTBOTTOM , shape . getMarginBottom ( ) ) ) ; opt . addEscherProperty ( new EscherSimpleProperty ( EscherProperties . TEXT__TEXTTOP , shape . getMarginTop ( ) ) ) ; addStandardOptions ( shape , opt ) ; HSSFAnchor userAnchor = shape . getAnchor ( ) ; anchor = createAnchor ( userAnchor ) ; clientData . setRecordId ( EscherClientDataRecord . RECORD_ID ) ; clientData . setOptions ( ( short ) 0x0000 ) ; escherTextbox . setRecordId ( EscherTextboxRecord . RECORD_ID ) ; escherTextbox . setOptions ( ( short ) 0x0000 ) ; spContainer . addChildRecord ( sp ) ; spContainer . addChildRecord ( opt ) ; spContainer . addChildRecord ( anchor ) ; spContainer . addChildRecord ( clientData ) ; spContainer . addChildRecord ( escherTextbox ) ; return spContainer ; } private TextObjectRecord createTextObjectRecord ( HSSFTextbox hssfShape , int shapeId ) { HSSFTextbox shape = hssfShape ; TextObjectRecord obj = new TextObjectRecord ( ) ; obj . setHorizontalTextAlignment ( TextObjectRecord . HORIZONTAL_TEXT_ALIGNMENT_LEFT_ALIGNED ) ; obj . setVerticalTextAlignment ( TextObjectRecord . VERTICAL_TEXT_ALIGNMENT_TOP ) ; obj . setTextLocked ( true ) ; obj . setTextOrientation ( TextObjectRecord . TEXT_ORIENTATION_NONE ) ; int frLength = ( shape . getString ( ) . numFormattingRuns ( ) + 1 ) * 8 ; obj . setFormattingRunLength ( ( short ) frLength ) ; obj . setTextLength ( ( short ) shape . getString ( ) . length ( ) ) ; obj . setStr ( shape . getString ( ) ) ; obj . setReserved7 ( 0 ) ; return obj ; } public EscherContainerRecord getSpContainer ( ) { return spContainer ; } public ObjRecord getObjRecord ( ) { return objRecord ; } public TextObjectRecord getTextObjectRecord ( ) { return textObjectRecord ; } public EscherRecord getEscherTextbox ( ) { return escherTextbox ; } } 	1
package org . apache . poi . hssf . usermodel ; import java . util . ArrayList ; import java . util . Iterator ; import java . util . List ; public class HSSFPatriarch implements HSSFShapeContainer { List shapes = new ArrayList ( ) ; HSSFSheet sheet ; int x1 = 0 ; int y1 = 0 ; int x2 = 1023 ; int y2 = 255 ; HSSFPatriarch ( HSSFSheet sheet ) { this . sheet = sheet ; } public HSSFShapeGroup createGroup ( HSSFClientAnchor anchor ) { HSSFShapeGroup group = new HSSFShapeGroup ( null , anchor ) ; group . anchor = anchor ; shapes . add ( group ) ; return group ; } public HSSFSimpleShape createSimpleShape ( HSSFClientAnchor anchor ) { HSSFSimpleShape shape = new HSSFSimpleShape ( null , anchor ) ; shape . anchor = anchor ; shapes . add ( shape ) ; return shape ; } public HSSFPicture createPicture ( HSSFClientAnchor anchor , int pictureIndex ) { HSSFPicture shape = new HSSFPicture ( null , anchor ) ; shape . setPictureIndex ( pictureIndex ) ; shape . anchor = anchor ; shapes . add ( shape ) ; return shape ; } public HSSFPolygon createPolygon ( HSSFClientAnchor anchor ) { HSSFPolygon shape = new HSSFPolygon ( null , anchor ) ; shape . anchor = anchor ; shapes . add ( shape ) ; return shape ; } public HSSFTextbox createTextbox ( HSSFClientAnchor anchor ) { HSSFTextbox shape = new HSSFTextbox ( null , anchor ) ; shape . anchor = anchor ; shapes . add ( shape ) ; return shape ; } public HSSFComment createComment ( HSSFAnchor anchor ) { HSSFComment shape = new HSSFComment ( null , anchor ) ; shape . anchor = anchor ; shapes . add ( shape ) ; return shape ; } public List getChildren ( ) { return shapes ; } public int countOfAllChildren ( ) { int count = shapes . size ( ) ; for ( Iterator iterator = shapes . iterator ( ) ; iterator . hasNext ( ) ; ) { HSSFShape shape = ( HSSFShape ) iterator . next ( ) ; count += shape . countOfAllChildren ( ) ; } return count ; } public void setCoordinates ( int x1 , int y1 , int x2 , int y2 ) { this . x1 = x1 ; this . y1 = y1 ; this . x2 = x2 ; this . y2 = y2 ; } public int getX1 ( ) { return x1 ; } public int getY1 ( ) { return y1 ; } public int getX2 ( ) { return x2 ; } public int getY2 ( ) { return y2 ; } } 	1
package org . apache . poi . poifs . property ; import java . util . * ; import java . io . IOException ; import org . apache . poi . poifs . storage . SmallDocumentBlock ; public class DirectoryProperty extends Property implements Parent { private List _children ; private Set _children_names ; public DirectoryProperty ( String name ) { super ( ) ; _children = new ArrayList ( ) ; _children_names = new HashSet ( ) ; setName ( name ) ; setSize ( 0 ) ; setPropertyType ( PropertyConstants . DIRECTORY_TYPE ) ; setStartBlock ( 0 ) ; setNodeColor ( _NODE_BLACK ) ; } protected DirectoryProperty ( final int index , final byte [ ] array , final int offset ) { super ( index , array , offset ) ; _children = new ArrayList ( ) ; _children_names = new HashSet ( ) ; } public boolean changeName ( final Property property , final String newName ) { boolean result ; String oldName = property . getName ( ) ; property . setName ( newName ) ; String cleanNewName = property . getName ( ) ; if ( _children_names . contains ( cleanNewName ) ) { property . setName ( oldName ) ; result = false ; } else { _children_names . add ( cleanNewName ) ; _children_names . remove ( oldName ) ; result = true ; } return result ; } public boolean deleteChild ( final Property property ) { boolean result = _children . remove ( property ) ; if ( result ) { _children_names . remove ( property . getName ( ) ) ; } return result ; } public static class PropertyComparator implements Comparator { public boolean equals ( Object o ) { return this == o ; } public int compare ( Object o1 , Object o2 ) { String VBA_PROJECT = "_VBA_PROJECT" ; String name1 = ( ( Property ) o1 ) . getName ( ) ; String name2 = ( ( Property ) o2 ) . getName ( ) ; int result = name1 . length ( ) - name2 . length ( ) ; if ( result == 0 ) { if ( name1 . compareTo ( VBA_PROJECT ) == 0 ) result = 1 ; else if ( name2 . compareTo ( VBA_PROJECT ) == 0 ) result = - 1 ; else { if ( name1 . startsWith ( "__" ) && name2 . startsWith ( "__" ) ) { result = name1 . compareToIgnoreCase ( name2 ) ; } else if ( name1 . startsWith ( "__" ) ) { result = 1 ; } else if ( name2 . startsWith ( "__" ) ) { result = - 1 ; } else result = name1 . compareToIgnoreCase ( name2 ) ; } } return result ; } } public boolean isDirectory ( ) { return true ; } protected void preWrite ( ) { if ( _children . size ( ) > 0 ) { Property [ ] children = ( Property [ ] ) _children . toArray ( new Property [ 0 ] ) ; Arrays . sort ( children , new PropertyComparator ( ) ) ; int midpoint = children . length / 2 ; setChildProperty ( children [ midpoint ] . getIndex ( ) ) ; children [ 0 ] . setPreviousChild ( null ) ; children [ 0 ] . setNextChild ( null ) ; for ( int j = 1 ; j < midpoint ; j ++ ) { children [ j ] . setPreviousChild ( children [ j - 1 ] ) ; children [ j ] . setNextChild ( null ) ; } if ( midpoint != 0 ) { children [ midpoint ] . setPreviousChild ( children [ midpoint - 1 ] ) ; } if ( midpoint != ( children . length - 1 ) ) { children [ midpoint ] . setNextChild ( children [ midpoint + 1 ] ) ; for ( int j = midpoint + 1 ; j < children . length - 1 ; j ++ ) { children [ j ] . setPreviousChild ( null ) ; children [ j ] . setNextChild ( children [ j + 1 ] ) ; } children [ children . length - 1 ] . setPreviousChild ( null ) ; children [ children . length - 1 ] . setNextChild ( null ) ; } else { children [ midpoint ] . setNextChild ( null ) ; } } } public Iterator getChildren ( ) { return _children . iterator ( ) ; } public void addChild ( final Property property ) throws IOException { String name = property . getName ( ) ; if ( _children_names . contains ( name ) ) { throw new IOException ( "Duplicate name \"" + name + "\"" ) ; } _children_names . add ( name ) ; _children . add ( property ) ; } } 	1
package org . apache . poi . hssf . record ; import org . apache . poi . util . * ; public class NoteStructureSubRecord extends SubRecord { public final static short sid = 0x0D ; private byte [ ] reserved ; public NoteStructureSubRecord ( ) { reserved = new byte [ 22 ] ; } public NoteStructureSubRecord ( RecordInputStream in ) { super ( in ) ; } protected void validateSid ( short id ) { if ( id != sid ) { throw new RecordFormatException ( "Not a Note Structure record" ) ; } } protected void fillFields ( RecordInputStream in ) { reserved = in . readRemainder ( ) ; } public String toString ( ) { StringBuffer buffer = new StringBuffer ( ) ; String nl = System . getProperty ( "line.separator" ) ; buffer . append ( "[ftNts ]" + nl ) ; buffer . append ( "  size     = " ) . append ( getRecordSize ( ) ) . append ( nl ) ; buffer . append ( "  reserved = " ) . append ( HexDump . toHex ( reserved ) ) . append ( nl ) ; buffer . append ( "[/ftNts ]" + nl ) ; return buffer . toString ( ) ; } public int serialize ( int offset , byte [ ] data ) { LittleEndian . putShort ( data , 0 + offset , sid ) ; LittleEndian . putShort ( data , 2 + offset , ( short ) ( getRecordSize ( ) - 4 ) ) ; System . arraycopy ( reserved , 0 , data , offset + 4 , getRecordSize ( ) - 4 ) ; return getRecordSize ( ) ; } public int getRecordSize ( ) { return 4 + reserved . length ; } public short getSid ( ) { return sid ; } } 	1
package org . apache . poi . hssf . record ; import org . apache . poi . util . LittleEndian ; import org . apache . poi . util . StringUtil ; import org . apache . poi . util . BitField ; import org . apache . poi . util . BitFieldFactory ; public class FontRecord extends Record { public final static short sid = 0x31 ; public final static short SS_NONE = 0 ; public final static short SS_SUPER = 1 ; public final static short SS_SUB = 2 ; public final static byte U_NONE = 0 ; public final static byte U_SINGLE = 1 ; public final static byte U_DOUBLE = 2 ; public final static byte U_SINGLE_ACCOUNTING = 0x21 ; public final static byte U_DOUBLE_ACCOUNTING = 0x22 ; private short field_1_font_height ; private short field_2_attributes ; static final private BitField italic = BitFieldFactory . getInstance ( 0x02 ) ; static final private BitField strikeout = BitFieldFactory . getInstance ( 0x08 ) ; static final private BitField macoutline = BitFieldFactory . getInstance ( 0x10 ) ; static final private BitField macshadow = BitFieldFactory . getInstance ( 0x20 ) ; private short field_3_color_palette_index ; private short field_4_bold_weight ; private short field_5_super_sub_script ; private byte field_6_underline ; private byte field_7_family ; private byte field_8_charset ; private byte field_9_zero = 0 ; private byte field_10_font_name_len ; private String field_11_font_name ; public FontRecord ( ) { } public FontRecord ( RecordInputStream in ) { super ( in ) ; } protected void validateSid ( short id ) { if ( id != sid ) { throw new RecordFormatException ( "NOT A FONT RECORD" ) ; } } protected void fillFields ( RecordInputStream in ) { field_1_font_height = in . readShort ( ) ; field_2_attributes = in . readShort ( ) ; field_3_color_palette_index = in . readShort ( ) ; field_4_bold_weight = in . readShort ( ) ; field_5_super_sub_script = in . readShort ( ) ; field_6_underline = in . readByte ( ) ; field_7_family = in . readByte ( ) ; field_8_charset = in . readByte ( ) ; field_9_zero = in . readByte ( ) ; field_10_font_name_len = in . readByte ( ) ; if ( field_10_font_name_len > 0 ) { if ( in . readByte ( ) == 0 ) { field_11_font_name = in . readCompressedUnicode ( LittleEndian . ubyteToInt ( field_10_font_name_len ) ) ; } else { field_11_font_name = in . readUnicodeLEString ( field_10_font_name_len ) ; } } } public void setFontHeight ( short height ) { field_1_font_height = height ; } public void setAttributes ( short attributes ) { field_2_attributes = attributes ; } public void setItalic ( boolean italics ) { field_2_attributes = italic . setShortBoolean ( field_2_attributes , italics ) ; } public void setStrikeout ( boolean strike ) { field_2_attributes = strikeout . setShortBoolean ( field_2_attributes , strike ) ; } public void setMacoutline ( boolean mac ) { field_2_attributes = macoutline . setShortBoolean ( field_2_attributes , mac ) ; } public void setMacshadow ( boolean mac ) { field_2_attributes = macshadow . setShortBoolean ( field_2_attributes , mac ) ; } public void setColorPaletteIndex ( short cpi ) { field_3_color_palette_index = cpi ; } public void setBoldWeight ( short bw ) { field_4_bold_weight = bw ; } public void setSuperSubScript ( short sss ) { field_5_super_sub_script = sss ; } public void setUnderline ( byte u ) { field_6_underline = u ; } public void setFamily ( byte f ) { field_7_family = f ; } public void setCharset ( byte charset ) { field_8_charset = charset ; } public void setFontNameLength ( byte len ) { field_10_font_name_len = len ; } public void setFontName ( String fn ) { field_11_font_name = fn ; } public short getFontHeight ( ) { return field_1_font_height ; } public short getAttributes ( ) { return field_2_attributes ; } public boolean isItalic ( ) { return italic . isSet ( field_2_attributes ) ; } public boolean isStruckout ( ) { return strikeout . isSet ( field_2_attributes ) ; } public boolean isMacoutlined ( ) { return macoutline . isSet ( field_2_attributes ) ; } public boolean isMacshadowed ( ) { return macshadow . isSet ( field_2_attributes ) ; } public short getColorPaletteIndex ( ) { return field_3_color_palette_index ; } public short getBoldWeight ( ) { return field_4_bold_weight ; } public short getSuperSubScript ( ) { return field_5_super_sub_script ; } public byte getUnderline ( ) { return field_6_underline ; } public byte getFamily ( ) { return field_7_family ; } public byte getCharset ( ) { return field_8_charset ; } public byte getFontNameLength ( ) { return field_10_font_name_len ; } public String getFontName ( ) { return field_11_font_name ; } public String toString ( ) { StringBuffer buffer = new StringBuffer ( ) ; buffer . append ( "[FONT]\n" ) ; buffer . append ( "    .fontheight      = " ) . append ( Integer . toHexString ( getFontHeight ( ) ) ) . append ( "\n" ) ; buffer . append ( "    .attributes      = " ) . append ( Integer . toHexString ( getAttributes ( ) ) ) . append ( "\n" ) ; buffer . append ( "         .italic     = " ) . append ( isItalic ( ) ) . append ( "\n" ) ; buffer . append ( "         .strikout   = " ) . append ( isStruckout ( ) ) . append ( "\n" ) ; buffer . append ( "         .macoutlined= " ) . append ( isMacoutlined ( ) ) . append ( "\n" ) ; buffer . append ( "         .macshadowed= " ) . append ( isMacshadowed ( ) ) . append ( "\n" ) ; buffer . append ( "    .colorpalette    = " ) . append ( Integer . toHexString ( getColorPaletteIndex ( ) ) ) . append ( "\n" ) ; buffer . append ( "    .boldweight      = " ) . append ( Integer . toHexString ( getBoldWeight ( ) ) ) . append ( "\n" ) ; buffer . append ( "    .supersubscript  = " ) . append ( Integer . toHexString ( getSuperSubScript ( ) ) ) . append ( "\n" ) ; buffer . append ( "    .underline       = " ) . append ( Integer . toHexString ( getUnderline ( ) ) ) . append ( "\n" ) ; buffer . append ( "    .family          = " ) . append ( Integer . toHexString ( getFamily ( ) ) ) . append ( "\n" ) ; buffer . append ( "    .charset         = " ) . append ( Integer . toHexString ( getCharset ( ) ) ) . append ( "\n" ) ; buffer . append ( "    .namelength      = " ) . append ( Integer . toHexString ( getFontNameLength ( ) ) ) . append ( "\n" ) ; buffer . append ( "    .fontname        = " ) . append ( getFontName ( ) ) . append ( "\n" ) ; buffer . append ( "[/FONT]\n" ) ; return buffer . toString ( ) ; } public int serialize ( int offset , byte [ ] data ) { int realflen = getFontNameLength ( ) * 2 ; LittleEndian . putShort ( data , 0 + offset , sid ) ; LittleEndian . putShort ( data , 2 + offset , ( short ) ( 15 + realflen + 1 ) ) ; LittleEndian . putShort ( data , 4 + offset , getFontHeight ( ) ) ; LittleEndian . putShort ( data , 6 + offset , getAttributes ( ) ) ; LittleEndian . putShort ( data , 8 + offset , getColorPaletteIndex ( ) ) ; LittleEndian . putShort ( data , 10 + offset , getBoldWeight ( ) ) ; LittleEndian . putShort ( data , 12 + offset , getSuperSubScript ( ) ) ; data [ 14 + offset ] = getUnderline ( ) ; data [ 15 + offset ] = getFamily ( ) ; data [ 16 + offset ] = getCharset ( ) ; data [ 17 + offset ] = field_9_zero ; data [ 18 + offset ] = getFontNameLength ( ) ; data [ 19 + offset ] = ( byte ) 1 ; if ( getFontName ( ) != null ) { StringUtil . putUnicodeLE ( getFontName ( ) , data , 20 + offset ) ; } return getRecordSize ( ) ; } public int getRecordSize ( ) { return ( getFontNameLength ( ) * 2 ) + 20 ; } public short getSid ( ) { return sid ; } } 	1
package org . apache . poi . hssf . record ; import org . apache . poi . util . LittleEndian ; public class LabelSSTRecord extends Record implements CellValueRecordInterface , Comparable { public final static short sid = 0xfd ; private int field_1_row ; private short field_2_column ; private short field_3_xf_index ; private int field_4_sst_index ; public LabelSSTRecord ( ) { } public LabelSSTRecord ( RecordInputStream in ) { super ( in ) ; } protected void validateSid ( short id ) { if ( id != sid ) { throw new RecordFormatException ( "NOT A valid LabelSST RECORD" ) ; } } protected void fillFields ( RecordInputStream in ) { field_1_row = in . readUShort ( ) ; field_2_column = in . readShort ( ) ; field_3_xf_index = in . readShort ( ) ; field_4_sst_index = in . readInt ( ) ; } public void setRow ( int row ) { field_1_row = row ; } public void setColumn ( short col ) { field_2_column = col ; } public void setXFIndex ( short index ) { field_3_xf_index = index ; } public void setSSTIndex ( int index ) { field_4_sst_index = index ; } public int getRow ( ) { return field_1_row ; } public short getColumn ( ) { return field_2_column ; } public short getXFIndex ( ) { return field_3_xf_index ; } public int getSSTIndex ( ) { return field_4_sst_index ; } public String toString ( ) { StringBuffer buffer = new StringBuffer ( ) ; buffer . append ( "[LABELSST]\n" ) ; buffer . append ( "    .row            = " ) . append ( Integer . toHexString ( getRow ( ) ) ) . append ( "\n" ) ; buffer . append ( "    .column         = " ) . append ( Integer . toHexString ( getColumn ( ) ) ) . append ( "\n" ) ; buffer . append ( "    .xfindex        = " ) . append ( Integer . toHexString ( getXFIndex ( ) ) ) . append ( "\n" ) ; buffer . append ( "    .sstindex       = " ) . append ( Integer . toHexString ( getSSTIndex ( ) ) ) . append ( "\n" ) ; buffer . append ( "[/LABELSST]\n" ) ; return buffer . toString ( ) ; } public int serialize ( int offset , byte [ ] data ) { LittleEndian . putShort ( data , 0 + offset , sid ) ; LittleEndian . putShort ( data , 2 + offset , ( short ) 10 ) ; LittleEndian . putShort ( data , 4 + offset , ( short ) getRow ( ) ) ; LittleEndian . putShort ( data , 6 + offset , getColumn ( ) ) ; LittleEndian . putShort ( data , 8 + offset , getXFIndex ( ) ) ; LittleEndian . putInt ( data , 10 + offset , getSSTIndex ( ) ) ; return getRecordSize ( ) ; } public int getRecordSize ( ) { return 14 ; } public short getSid ( ) { return sid ; } public boolean isBefore ( CellValueRecordInterface i ) { if ( this . getRow ( ) > i . getRow ( ) ) { return false ; } if ( ( this . getRow ( ) == i . getRow ( ) ) && ( this . getColumn ( ) > i . getColumn ( ) ) ) { return false ; } if ( ( this . getRow ( ) == i . getRow ( ) ) && ( this . getColumn ( ) == i . getColumn ( ) ) ) { return false ; } return true ; } public boolean isAfter ( CellValueRecordInterface i ) { if ( this . getRow ( ) < i . getRow ( ) ) { return false ; } if ( ( this . getRow ( ) == i . getRow ( ) ) && ( this . getColumn ( ) < i . getColumn ( ) ) ) { return false ; } if ( ( this . getRow ( ) == i . getRow ( ) ) && ( this . getColumn ( ) == i . getColumn ( ) ) ) { return false ; } return true ; } public boolean isEqual ( CellValueRecordInterface i ) { return ( ( this . getRow ( ) == i . getRow ( ) ) && ( this . getColumn ( ) == i . getColumn ( ) ) ) ; } public boolean isInValueSection ( ) { return true ; } public boolean isValue ( ) { return true ; } public int compareTo ( Object obj ) { CellValueRecordInterface loc = ( CellValueRecordInterface ) obj ; if ( ( this . getRow ( ) == loc . getRow ( ) ) && ( this . getColumn ( ) == loc . getColumn ( ) ) ) { return 0 ; } if ( this . getRow ( ) < loc . getRow ( ) ) { return - 1 ; } if ( this . getRow ( ) > loc . getRow ( ) ) { return 1 ; } if ( this . getColumn ( ) < loc . getColumn ( ) ) { return - 1 ; } if ( this . getColumn ( ) > loc . getColumn ( ) ) { return 1 ; } return - 1 ; } public boolean equals ( Object obj ) { if ( ! ( obj instanceof CellValueRecordInterface ) ) { return false ; } CellValueRecordInterface loc = ( CellValueRecordInterface ) obj ; if ( ( this . getRow ( ) == loc . getRow ( ) ) && ( this . getColumn ( ) == loc . getColumn ( ) ) ) { return true ; } return false ; } public Object clone ( ) { LabelSSTRecord rec = new LabelSSTRecord ( ) ; rec . field_1_row = field_1_row ; rec . field_2_column = field_2_column ; rec . field_3_xf_index = field_3_xf_index ; rec . field_4_sst_index = field_4_sst_index ; return rec ; } } 	1
package org . apache . poi . util ; public class BitField { private final int _mask ; private final int _shift_count ; public BitField ( final int mask ) { _mask = mask ; int count = 0 ; int bit_pattern = mask ; if ( bit_pattern != 0 ) { while ( ( bit_pattern & 1 ) == 0 ) { count ++ ; bit_pattern >>= 1 ; } } _shift_count = count ; } public int getValue ( final int holder ) { return getRawValue ( holder ) > > _shift_count ; } public short getShortValue ( final short holder ) { return ( short ) getValue ( holder ) ; } public int getRawValue ( final int holder ) { return ( holder & _mask ) ; } public short getShortRawValue ( final short holder ) { return ( short ) getRawValue ( holder ) ; } public boolean isSet ( final int holder ) { return ( holder & _mask ) != 0 ; } public boolean isAllSet ( final int holder ) { return ( holder & _mask ) == _mask ; } public int setValue ( final int holder , final int value ) { return ( holder & ~ _mask ) | ( ( value << _shift_count ) & _mask ) ; } public short setShortValue ( final short holder , final short value ) { return ( short ) setValue ( holder , value ) ; } public int clear ( final int holder ) { return holder & ~ _mask ; } public short clearShort ( final short holder ) { return ( short ) clear ( holder ) ; } public byte clearByte ( final byte holder ) { return ( byte ) clear ( holder ) ; } public int set ( final int holder ) { return holder | _mask ; } public short setShort ( final short holder ) { return ( short ) set ( holder ) ; } public byte setByte ( final byte holder ) { return ( byte ) set ( holder ) ; } public int setBoolean ( final int holder , final boolean flag ) { return flag ? set ( holder ) : clear ( holder ) ; } public short setShortBoolean ( final short holder , final boolean flag ) { return flag ? setShort ( holder ) : clearShort ( holder ) ; } public byte setByteBoolean ( final byte holder , final boolean flag ) { return flag ? setByte ( holder ) : clearByte ( holder ) ; } } 	0
package org . apache . poi . util ; import java . io . InputStream ; import java . io . IOException ; public class BlockingInputStream extends InputStream { protected InputStream is ; public BlockingInputStream ( InputStream is ) { this . is = is ; } public int available ( ) throws IOException { return is . available ( ) ; } public void close ( ) throws IOException { is . close ( ) ; } public void mark ( int readLimit ) { is . mark ( readLimit ) ; } public boolean markSupported ( ) { return is . markSupported ( ) ; } public int read ( ) throws IOException { return is . read ( ) ; } public int read ( byte [ ] bf ) throws IOException { int i = 0 ; int b = 4611 ; while ( i < bf . length ) { b = is . read ( ) ; if ( b == - 1 ) break ; bf [ i ++ ] = ( byte ) b ; } if ( i == 0 && b == - 1 ) return - 1 ; return i ; } public int read ( byte [ ] bf , int s , int l ) throws IOException { return is . read ( bf , s , l ) ; } public void reset ( ) throws IOException { is . reset ( ) ; } public long skip ( long n ) throws IOException { return is . skip ( n ) ; } } 	0
package org . apache . poi . hssf . record ; import org . apache . poi . util . LittleEndian ; public class DBCellRecord extends Record { public final static int BLOCK_SIZE = 32 ; public final static short sid = 0xd7 ; private int field_1_row_offset ; private short [ ] field_2_cell_offsets ; public DBCellRecord ( ) { } public DBCellRecord ( RecordInputStream in ) { super ( in ) ; } protected void validateSid ( short id ) { if ( id != sid ) { throw new RecordFormatException ( "NOT A valid DBCell RECORD" ) ; } } protected void fillFields ( RecordInputStream in ) { field_1_row_offset = in . readUShort ( ) ; int size = in . remaining ( ) ; field_2_cell_offsets = new short [ size / 2 ] ; for ( int i = 0 ; i < field_2_cell_offsets . length ; i ++ ) { field_2_cell_offsets [ i ] = in . readShort ( ) ; } } public void setRowOffset ( int offset ) { field_1_row_offset = offset ; } public void addCellOffset ( short offset ) { if ( field_2_cell_offsets == null ) { field_2_cell_offsets = new short [ 1 ] ; } else { short [ ] temp = new short [ field_2_cell_offsets . length + 1 ] ; System . arraycopy ( field_2_cell_offsets , 0 , temp , 0 , field_2_cell_offsets . length ) ; field_2_cell_offsets = temp ; } field_2_cell_offsets [ field_2_cell_offsets . length - 1 ] = offset ; } public int getRowOffset ( ) { return field_1_row_offset ; } public short getCellOffsetAt ( int index ) { return field_2_cell_offsets [ index ] ; } public int getNumCellOffsets ( ) { return field_2_cell_offsets . length ; } public String toString ( ) { StringBuffer buffer = new StringBuffer ( ) ; buffer . append ( "[DBCELL]\n" ) ; buffer . append ( "    .rowoffset       = " ) . append ( Integer . toHexString ( getRowOffset ( ) ) ) . append ( "\n" ) ; for ( int k = 0 ; k < getNumCellOffsets ( ) ; k ++ ) { buffer . append ( "    .cell_" + k + "          = " ) . append ( Integer . toHexString ( getCellOffsetAt ( k ) ) ) . append ( "\n" ) ; } buffer . append ( "[/DBCELL]\n" ) ; return buffer . toString ( ) ; } public int serialize ( int offset , byte [ ] data ) { if ( field_2_cell_offsets == null ) { field_2_cell_offsets = new short [ 0 ] ; } LittleEndian . putShort ( data , 0 + offset , sid ) ; LittleEndian . putShort ( data , 2 + offset , ( ( short ) ( 4 + ( getNumCellOffsets ( ) * 2 ) ) ) ) ; LittleEndian . putInt ( data , 4 + offset , getRowOffset ( ) ) ; for ( int k = 0 ; k < getNumCellOffsets ( ) ; k ++ ) { LittleEndian . putShort ( data , 8 + 2 * k + offset , getCellOffsetAt ( k ) ) ; } return getRecordSize ( ) ; } public int getRecordSize ( ) { return 8 + ( getNumCellOffsets ( ) * 2 ) ; } public static int getRecordSizeForRows ( int rows ) { return 8 + ( rows * 2 ) ; } public short getSid ( ) { return sid ; } public boolean isInValueSection ( ) { return true ; } } 	1
package org . apache . poi . hssf . record ; import org . apache . poi . util . * ; public class DatRecord extends Record { public final static short sid = 0x1063 ; private short field_1_options ; private BitField horizontalBorder = BitFieldFactory . getInstance ( 0x1 ) ; private BitField verticalBorder = BitFieldFactory . getInstance ( 0x2 ) ; private BitField border = BitFieldFactory . getInstance ( 0x4 ) ; private BitField showSeriesKey = BitFieldFactory . getInstance ( 0x8 ) ; public DatRecord ( ) { } public DatRecord ( RecordInputStream in ) { super ( in ) ; } protected void validateSid ( short id ) { if ( id != sid ) { throw new RecordFormatException ( "Not a Dat record" ) ; } } protected void fillFields ( RecordInputStream in ) { field_1_options = in . readShort ( ) ; } public String toString ( ) { StringBuffer buffer = new StringBuffer ( ) ; buffer . append ( "[DAT]\n" ) ; buffer . append ( "    .options              = " ) . append ( "0x" ) . append ( HexDump . toHex ( getOptions ( ) ) ) . append ( " (" ) . append ( getOptions ( ) ) . append ( " )" ) ; buffer . append ( System . getProperty ( "line.separator" ) ) ; buffer . append ( "         .horizontalBorder         = " ) . append ( isHorizontalBorder ( ) ) . append ( '\n' ) ; buffer . append ( "         .verticalBorder           = " ) . append ( isVerticalBorder ( ) ) . append ( '\n' ) ; buffer . append ( "         .border                   = " ) . append ( isBorder ( ) ) . append ( '\n' ) ; buffer . append ( "         .showSeriesKey            = " ) . append ( isShowSeriesKey ( ) ) . append ( '\n' ) ; buffer . append ( "[/DAT]\n" ) ; return buffer . toString ( ) ; } public int serialize ( int offset , byte [ ] data ) { int pos = 0 ; LittleEndian . putShort ( data , 0 + offset , sid ) ; LittleEndian . putShort ( data , 2 + offset , ( short ) ( getRecordSize ( ) - 4 ) ) ; LittleEndian . putShort ( data , 4 + offset + pos , field_1_options ) ; return getRecordSize ( ) ; } public int getRecordSize ( ) { return 4 + 2 ; } public short getSid ( ) { return sid ; } public Object clone ( ) { DatRecord rec = new DatRecord ( ) ; rec . field_1_options = field_1_options ; return rec ; } public short getOptions ( ) { return field_1_options ; } public void setOptions ( short field_1_options ) { this . field_1_options = field_1_options ; } public void setHorizontalBorder ( boolean value ) { field_1_options = horizontalBorder . setShortBoolean ( field_1_options , value ) ; } public boolean isHorizontalBorder ( ) { return horizontalBorder . isSet ( field_1_options ) ; } public void setVerticalBorder ( boolean value ) { field_1_options = verticalBorder . setShortBoolean ( field_1_options , value ) ; } public boolean isVerticalBorder ( ) { return verticalBorder . isSet ( field_1_options ) ; } public void setBorder ( boolean value ) { field_1_options = border . setShortBoolean ( field_1_options , value ) ; } public boolean isBorder ( ) { return border . isSet ( field_1_options ) ; } public void setShowSeriesKey ( boolean value ) { field_1_options = showSeriesKey . setShortBoolean ( field_1_options , value ) ; } public boolean isShowSeriesKey ( ) { return showSeriesKey . isSet ( field_1_options ) ; } } 	1
package org . apache . poi . poifs . property ; public interface PropertyConstants { public static final int PROPERTY_TYPE_OFFSET = 0x42 ; public static final byte DIRECTORY_TYPE = 1 ; public static final byte DOCUMENT_TYPE = 2 ; public static final byte ROOT_TYPE = 5 ; } 	0
package org . apache . poi . hpsf ; public class MissingSectionException extends HPSFRuntimeException { public MissingSectionException ( ) { super ( ) ; } public MissingSectionException ( final String msg ) { super ( msg ) ; } public MissingSectionException ( final Throwable reason ) { super ( reason ) ; } public MissingSectionException ( final String msg , final Throwable reason ) { super ( msg , reason ) ; } } 	0
package org . apache . poi . hpsf ; import java . io . IOException ; import java . io . PrintWriter ; import java . io . StringWriter ; import java . util . Collection ; import java . util . Date ; public class Util { public static boolean equal ( final byte [ ] a , final byte [ ] b ) { if ( a . length != b . length ) return false ; for ( int i = 0 ; i < a . length ; i ++ ) if ( a [ i ] != b [ i ] ) return false ; return true ; } public static void copy ( final byte [ ] src , final int srcOffset , final int length , final byte [ ] dst , final int dstOffset ) { for ( int i = 0 ; i < length ; i ++ ) dst [ dstOffset + i ] = src [ srcOffset + i ] ; } public static byte [ ] cat ( final byte [ ] [ ] byteArrays ) { int capacity = 0 ; for ( int i = 0 ; i < byteArrays . length ; i ++ ) capacity += byteArrays [ i ] . length ; final byte [ ] result = new byte [ capacity ] ; int r = 0 ; for ( int i = 0 ; i < byteArrays . length ; i ++ ) for ( int j = 0 ; j < byteArrays [ i ] . length ; j ++ ) result [ r ++ ] = byteArrays [ i ] [ j ] ; return result ; } public static byte [ ] copy ( final byte [ ] src , final int offset , final int length ) { final byte [ ] result = new byte [ length ] ; copy ( src , offset , length , result , 0 ) ; return result ; } public static final long EPOCH_DIFF = 11644473600000L ; public static Date filetimeToDate ( final int high , final int low ) { final long filetime = ( ( long ) high ) << 32 | ( low & 0xffffffffL ) ; return filetimeToDate ( filetime ) ; } public static Date filetimeToDate ( final long filetime ) { final long ms_since_16010101 = filetime / ( 1000 * 10 ) ; final long ms_since_19700101 = ms_since_16010101 - EPOCH_DIFF ; return new Date ( ms_since_19700101 ) ; } public static long dateToFileTime ( final Date date ) { long ms_since_19700101 = date . getTime ( ) ; long ms_since_16010101 = ms_since_19700101 + EPOCH_DIFF ; return ms_since_16010101 * ( 1000 * 10 ) ; } public static boolean equals ( final Collection c1 , final Collection c2 ) { final Object [ ] o1 = c1 . toArray ( ) ; final Object [ ] o2 = c2 . toArray ( ) ; return internalEquals ( o1 , o2 ) ; } public static boolean equals ( final Object [ ] c1 , final Object [ ] c2 ) { final Object [ ] o1 = ( Object [ ] ) c1 . clone ( ) ; final Object [ ] o2 = ( Object [ ] ) c2 . clone ( ) ; return internalEquals ( o1 , o2 ) ; } private static boolean internalEquals ( final Object [ ] o1 , final Object [ ] o2 ) { for ( int i1 = 0 ; i1 < o1 . length ; i1 ++ ) { final Object obj1 = o1 [ i1 ] ; boolean matchFound = false ; for ( int i2 = 0 ; ! matchFound && i2 < o1 . length ; i2 ++ ) { final Object obj2 = o2 [ i2 ] ; if ( obj1 . equals ( obj2 ) ) { matchFound = true ; o2 [ i2 ] = null ; } } if ( ! matchFound ) return false ; } return true ; } public static byte [ ] pad4 ( final byte [ ] ba ) { final int PAD = 4 ; final byte [ ] result ; int l = ba . length % PAD ; if ( l == 0 ) result = ba ; else { l = PAD - l ; result = new byte [ ba . length + l ] ; System . arraycopy ( ba , 0 , result , 0 , ba . length ) ; } return result ; } public static char [ ] pad4 ( final char [ ] ca ) { final int PAD = 4 ; final char [ ] result ; int l = ca . length % PAD ; if ( l == 0 ) result = ca ; else { l = PAD - l ; result = new char [ ca . length + l ] ; System . arraycopy ( ca , 0 , result , 0 , ca . length ) ; } return result ; } public static char [ ] pad4 ( final String s ) { return pad4 ( s . toCharArray ( ) ) ; } public static String toString ( final Throwable t ) { final StringWriter sw = new StringWriter ( ) ; final PrintWriter pw = new PrintWriter ( sw ) ; t . printStackTrace ( pw ) ; pw . close ( ) ; try { sw . close ( ) ; return sw . toString ( ) ; } catch ( IOException e ) { final StringBuffer b = new StringBuffer ( t . getMessage ( ) ) ; b . append ( "\n" ) ; b . append ( "Could not create a stacktrace. Reason: " ) ; b . append ( e . getMessage ( ) ) ; return b . toString ( ) ; } } } 	1
package org . apache . poi . hssf . record . formula ; import java . util . List ; import org . apache . poi . hssf . model . Workbook ; import org . apache . poi . hssf . record . RecordInputStream ; public class LessThanPtg extends OperationPtg { public final static int SIZE = 1 ; public final static byte sid = 0x09 ; private final static String LESSTHAN = "<" ; public LessThanPtg ( ) { } public LessThanPtg ( RecordInputStream in ) { } public void writeBytes ( byte [ ] array , int offset ) { array [ offset + 0 ] = sid ; } public int getSize ( ) { return SIZE ; } public int getType ( ) { return TYPE_BINARY ; } public int getNumberOfOperands ( ) { return 2 ; } public String toFormulaString ( Workbook book ) { return this . LESSTHAN ; } public String toFormulaString ( String [ ] operands ) { StringBuffer buffer = new StringBuffer ( ) ; buffer . append ( operands [ 0 ] ) ; buffer . append ( this . LESSTHAN ) ; buffer . append ( operands [ 1 ] ) ; return buffer . toString ( ) ; } public byte getDefaultOperandClass ( ) { return Ptg . CLASS_VALUE ; } public Object clone ( ) { return new LessThanPtg ( ) ; } } 	1
package org . apache . poi . util ; import java . util . * ; public class NullLogger extends POILogger { public void initialize ( final String cat ) { } public void log ( final int level , final Object obj1 ) { } public boolean check ( final int level ) { return false ; } public void log ( final int level , final Object obj1 , final Object obj2 ) { } public void log ( final int level , final Object obj1 , final Object obj2 , final Object obj3 ) { } public void log ( final int level , final Object obj1 , final Object obj2 , final Object obj3 , final Object obj4 ) { } public void log ( final int level , final Object obj1 , final Object obj2 , final Object obj3 , final Object obj4 , final Object obj5 ) { } public void log ( final int level , final Object obj1 , final Object obj2 , final Object obj3 , final Object obj4 , final Object obj5 , final Object obj6 ) { } public void log ( final int level , final Object obj1 , final Object obj2 , final Object obj3 , final Object obj4 , final Object obj5 , final Object obj6 , final Object obj7 ) { } public void log ( final int level , final Object obj1 , final Object obj2 , final Object obj3 , final Object obj4 , final Object obj5 , final Object obj6 , final Object obj7 , final Object obj8 ) { } public void log ( final int level , final Object obj1 , final Throwable exception ) { } public void log ( final int level , final Object obj1 , final Object obj2 , final Throwable exception ) { } public void log ( final int level , final Object obj1 , final Object obj2 , final Object obj3 , final Throwable exception ) { } public void log ( final int level , final Object obj1 , final Object obj2 , final Object obj3 , final Object obj4 , final Throwable exception ) { } public void log ( final int level , final Object obj1 , final Object obj2 , final Object obj3 , final Object obj4 , final Object obj5 , final Throwable exception ) { } public void log ( final int level , final Object obj1 , final Object obj2 , final Object obj3 , final Object obj4 , final Object obj5 , final Object obj6 , final Throwable exception ) { } public void log ( final int level , final Object obj1 , final Object obj2 , final Object obj3 , final Object obj4 , final Object obj5 , final Object obj6 , final Object obj7 , final Throwable exception ) { } public void log ( final int level , final Object obj1 , final Object obj2 , final Object obj3 , final Object obj4 , final Object obj5 , final Object obj6 , final Object obj7 , final Object obj8 , final Throwable exception ) { } public void logFormatted ( final int level , final String message , final Object obj1 ) { } public void logFormatted ( final int level , final String message , final Object obj1 , final Object obj2 ) { } public void logFormatted ( final int level , final String message , final Object obj1 , final Object obj2 , final Object obj3 ) { } public void logFormatted ( final int level , final String message , final Object obj1 , final Object obj2 , final Object obj3 , final Object obj4 ) { } } 	1
package org . apache . poi . hpsf ; public class NoPropertySetStreamException extends HPSFException { public NoPropertySetStreamException ( ) { super ( ) ; } public NoPropertySetStreamException ( final String msg ) { super ( msg ) ; } public NoPropertySetStreamException ( final Throwable reason ) { super ( reason ) ; } public NoPropertySetStreamException ( final String msg , final Throwable reason ) { super ( msg , reason ) ; } } 	0
package org . apache . poi . hssf . record . formula ; import org . apache . poi . hssf . model . Workbook ; import org . apache . poi . hssf . record . RecordInputStream ; public class IntersectionPtg extends OperationPtg { public final static byte sid = 0x0f ; public IntersectionPtg ( ) { } public IntersectionPtg ( RecordInputStream in ) { } public int getSize ( ) { return 1 ; } public void writeBytes ( byte [ ] array , int offset ) { array [ offset + 0 ] = sid ; } public Object clone ( ) { return new IntersectionPtg ( ) ; } public int getType ( ) { return TYPE_BINARY ; } public String toFormulaString ( Workbook book ) { return " " ; } public String toFormulaString ( String [ ] operands ) { StringBuffer buffer = new StringBuffer ( ) ; buffer . append ( operands [ 0 ] ) ; buffer . append ( " " ) ; buffer . append ( operands [ 1 ] ) ; return buffer . toString ( ) ; } public int getNumberOfOperands ( ) { return 2 ; } } 	0
package org . apache . poi . hssf . usermodel ; public class HSSFClientAnchor extends HSSFAnchor { short col1 ; int row1 ; short col2 ; int row2 ; int anchorType ; public HSSFClientAnchor ( ) { } public HSSFClientAnchor ( int dx1 , int dy1 , int dx2 , int dy2 , short col1 , int row1 , short col2 , int row2 ) { super ( dx1 , dy1 , dx2 , dy2 ) ; checkRange ( dx1 , 0 , 1023 , "dx1" ) ; checkRange ( dx2 , 0 , 1023 , "dx2" ) ; checkRange ( dy1 , 0 , 255 , "dy1" ) ; checkRange ( dy2 , 0 , 255 , "dy2" ) ; checkRange ( col1 , 0 , 255 , "col1" ) ; checkRange ( col2 , 0 , 255 , "col2" ) ; checkRange ( row1 , 0 , 255 * 256 , "row1" ) ; checkRange ( row2 , 0 , 255 * 256 , "row2" ) ; this . col1 = col1 ; this . row1 = row1 ; this . col2 = col2 ; this . row2 = row2 ; } public float getAnchorHeightInPoints ( HSSFSheet sheet ) { int y1 = Math . min ( getDy1 ( ) , getDy2 ( ) ) ; int y2 = Math . max ( getDy1 ( ) , getDy2 ( ) ) ; int row1 = Math . min ( getRow1 ( ) , getRow2 ( ) ) ; int row2 = Math . max ( getRow1 ( ) , getRow2 ( ) ) ; float points = 0 ; if ( row1 == row2 ) { points = ( ( y2 - y1 ) / 256.0f ) * getRowHeightInPoints ( sheet , row2 ) ; } else { points += ( ( 256.0f - y1 ) / 256.0f ) * getRowHeightInPoints ( sheet , row1 ) ; for ( int i = row1 + 1 ; i < row2 ; i ++ ) { points += getRowHeightInPoints ( sheet , i ) ; } points += ( y2 / 256.0f ) * getRowHeightInPoints ( sheet , row2 ) ; } return points ; } private float getRowHeightInPoints ( HSSFSheet sheet , int rowNum ) { HSSFRow row = sheet . getRow ( rowNum ) ; if ( row == null ) return sheet . getDefaultRowHeightInPoints ( ) ; else return row . getHeightInPoints ( ) ; } public short getCol1 ( ) { return col1 ; } public void setCol1 ( short col1 ) { checkRange ( col1 , 0 , 255 , "col1" ) ; this . col1 = col1 ; } public short getCol2 ( ) { return col2 ; } public void setCol2 ( short col2 ) { checkRange ( col2 , 0 , 255 , "col2" ) ; this . col2 = col2 ; } public int getRow1 ( ) { return row1 ; } public void setRow1 ( int row1 ) { checkRange ( row1 , 0 , 256 * 256 , "row1" ) ; this . row1 = row1 ; } public int getRow2 ( ) { return row2 ; } public void setRow2 ( int row2 ) { checkRange ( row2 , 0 , 256 * 256 , "row2" ) ; this . row2 = row2 ; } public void setAnchor ( short col1 , int row1 , int x1 , int y1 , short col2 , int row2 , int x2 , int y2 ) { checkRange ( dx1 , 0 , 1023 , "dx1" ) ; checkRange ( dx2 , 0 , 1023 , "dx2" ) ; checkRange ( dy1 , 0 , 255 , "dy1" ) ; checkRange ( dy2 , 0 , 255 , "dy2" ) ; checkRange ( col1 , 0 , 255 , "col1" ) ; checkRange ( col2 , 0 , 255 , "col2" ) ; checkRange ( row1 , 0 , 255 * 256 , "row1" ) ; checkRange ( row2 , 0 , 255 * 256 , "row2" ) ; this . col1 = col1 ; this . row1 = row1 ; this . dx1 = x1 ; this . dy1 = y1 ; this . col2 = col2 ; this . row2 = row2 ; this . dx2 = x2 ; this . dy2 = y2 ; } public boolean isHorizontallyFlipped ( ) { if ( col1 == col2 ) return dx1 > dx2 ; else return col1 > col2 ; } public boolean isVerticallyFlipped ( ) { if ( row1 == row2 ) return dy1 > dy2 ; else return row1 > row2 ; } public int getAnchorType ( ) { return anchorType ; } public void setAnchorType ( int anchorType ) { this . anchorType = anchorType ; } private void checkRange ( int value , int minRange , int maxRange , String varName ) { if ( value < minRange || value > maxRange ) throw new IllegalArgumentException ( varName + " must be between " + minRange + " and " + maxRange ) ; } } 	1
package org . apache . poi . hssf . record . formula ; public abstract class ControlPtg extends Ptg { } 	0
package org . apache . poi . hssf . record ; import org . apache . poi . util . * ; public class PlotGrowthRecord extends Record { public final static short sid = 0x1064 ; private int field_1_horizontalScale ; private int field_2_verticalScale ; public PlotGrowthRecord ( ) { } public PlotGrowthRecord ( RecordInputStream in ) { super ( in ) ; } protected void validateSid ( short id ) { if ( id != sid ) { throw new RecordFormatException ( "Not a PlotGrowth record" ) ; } } protected void fillFields ( RecordInputStream in ) { field_1_horizontalScale = in . readInt ( ) ; field_2_verticalScale = in . readInt ( ) ; } public String toString ( ) { StringBuffer buffer = new StringBuffer ( ) ; buffer . append ( "[PLOTGROWTH]\n" ) ; buffer . append ( "    .horizontalScale      = " ) . append ( "0x" ) . append ( HexDump . toHex ( getHorizontalScale ( ) ) ) . append ( " (" ) . append ( getHorizontalScale ( ) ) . append ( " )" ) ; buffer . append ( System . getProperty ( "line.separator" ) ) ; buffer . append ( "    .verticalScale        = " ) . append ( "0x" ) . append ( HexDump . toHex ( getVerticalScale ( ) ) ) . append ( " (" ) . append ( getVerticalScale ( ) ) . append ( " )" ) ; buffer . append ( System . getProperty ( "line.separator" ) ) ; buffer . append ( "[/PLOTGROWTH]\n" ) ; return buffer . toString ( ) ; } public int serialize ( int offset , byte [ ] data ) { int pos = 0 ; LittleEndian . putShort ( data , 0 + offset , sid ) ; LittleEndian . putShort ( data , 2 + offset , ( short ) ( getRecordSize ( ) - 4 ) ) ; LittleEndian . putInt ( data , 4 + offset + pos , field_1_horizontalScale ) ; LittleEndian . putInt ( data , 8 + offset + pos , field_2_verticalScale ) ; return getRecordSize ( ) ; } public int getRecordSize ( ) { return 4 + 4 + 4 ; } public short getSid ( ) { return sid ; } public Object clone ( ) { PlotGrowthRecord rec = new PlotGrowthRecord ( ) ; rec . field_1_horizontalScale = field_1_horizontalScale ; rec . field_2_verticalScale = field_2_verticalScale ; return rec ; } public int getHorizontalScale ( ) { return field_1_horizontalScale ; } public void setHorizontalScale ( int field_1_horizontalScale ) { this . field_1_horizontalScale = field_1_horizontalScale ; } public int getVerticalScale ( ) { return field_2_verticalScale ; } public void setVerticalScale ( int field_2_verticalScale ) { this . field_2_verticalScale = field_2_verticalScale ; } } 	1
package org . apache . poi . hpsf ; public class IllegalPropertySetDataException extends HPSFRuntimeException { public IllegalPropertySetDataException ( ) { super ( ) ; } public IllegalPropertySetDataException ( final String msg ) { super ( msg ) ; } public IllegalPropertySetDataException ( final Throwable reason ) { super ( reason ) ; } public IllegalPropertySetDataException ( final String msg , final Throwable reason ) { super ( msg , reason ) ; } } 	0
package org . apache . poi . poifs . property ; import java . util . * ; import java . io . IOException ; import org . apache . poi . poifs . common . POIFSConstants ; import org . apache . poi . poifs . storage . SmallDocumentBlock ; public class RootProperty extends DirectoryProperty { RootProperty ( ) { super ( "Root Entry" ) ; setNodeColor ( _NODE_BLACK ) ; setPropertyType ( PropertyConstants . ROOT_TYPE ) ; setStartBlock ( POIFSConstants . END_OF_CHAIN ) ; } protected RootProperty ( final int index , final byte [ ] array , final int offset ) { super ( index , array , offset ) ; } public void setSize ( int size ) { super . setSize ( SmallDocumentBlock . calcSize ( size ) ) ; } } 	1
package org . apache . poi . hssf . record . aggregates ; import org . apache . poi . hssf . record . ColumnInfoRecord ; import org . apache . poi . hssf . record . Record ; import org . apache . poi . hssf . record . RecordInputStream ; import java . util . ArrayList ; import java . util . Iterator ; import java . util . List ; public class ColumnInfoRecordsAggregate extends Record { List records = null ; public ColumnInfoRecordsAggregate ( ) { records = new ArrayList ( ) ; } protected void fillFields ( RecordInputStream in ) { } protected void validateSid ( short id ) { } public short getSid ( ) { return - 1012 ; } public int getRecordSize ( ) { int size = 0 ; for ( Iterator iterator = records . iterator ( ) ; iterator . hasNext ( ) ; ) size += ( ( ColumnInfoRecord ) iterator . next ( ) ) . getRecordSize ( ) ; return size ; } public Iterator getIterator ( ) { return records . iterator ( ) ; } public Object clone ( ) { ColumnInfoRecordsAggregate rec = new ColumnInfoRecordsAggregate ( ) ; for ( int k = 0 ; k < records . size ( ) ; k ++ ) { ColumnInfoRecord ci = ( ColumnInfoRecord ) records . get ( k ) ; ci = ( ColumnInfoRecord ) ci . clone ( ) ; rec . insertColumn ( ci ) ; } return rec ; } public void insertColumn ( ColumnInfoRecord col ) { records . add ( col ) ; } public void insertColumn ( int idx , ColumnInfoRecord col ) { records . add ( idx , col ) ; } public int getNumColumns ( ) { return records . size ( ) ; } public int serialize ( int offset , byte [ ] data ) { Iterator itr = records . iterator ( ) ; int pos = offset ; while ( itr . hasNext ( ) ) { pos += ( ( Record ) itr . next ( ) ) . serialize ( pos , data ) ; } return pos - offset ; } public int findStartOfColumnOutlineGroup ( int idx ) { ColumnInfoRecord columnInfo = ( ColumnInfoRecord ) records . get ( idx ) ; int level = columnInfo . getOutlineLevel ( ) ; while ( idx != 0 ) { ColumnInfoRecord prevColumnInfo = ( ColumnInfoRecord ) records . get ( idx - 1 ) ; if ( columnInfo . getFirstColumn ( ) - 1 == prevColumnInfo . getLastColumn ( ) ) { if ( prevColumnInfo . getOutlineLevel ( ) < level ) { break ; } idx -- ; columnInfo = prevColumnInfo ; } else { break ; } } return idx ; } public int findEndOfColumnOutlineGroup ( int idx ) { ColumnInfoRecord columnInfo = ( ColumnInfoRecord ) records . get ( idx ) ; int level = columnInfo . getOutlineLevel ( ) ; while ( idx < records . size ( ) - 1 ) { ColumnInfoRecord nextColumnInfo = ( ColumnInfoRecord ) records . get ( idx + 1 ) ; if ( columnInfo . getLastColumn ( ) + 1 == nextColumnInfo . getFirstColumn ( ) ) { if ( nextColumnInfo . getOutlineLevel ( ) < level ) { break ; } idx ++ ; columnInfo = nextColumnInfo ; } else { break ; } } return idx ; } public ColumnInfoRecord getColInfo ( int idx ) { return ( ColumnInfoRecord ) records . get ( idx ) ; } public ColumnInfoRecord writeHidden ( ColumnInfoRecord columnInfo , int idx , boolean hidden ) { int level = columnInfo . getOutlineLevel ( ) ; while ( idx < records . size ( ) ) { columnInfo . setHidden ( hidden ) ; if ( idx + 1 < records . size ( ) ) { ColumnInfoRecord nextColumnInfo = ( ColumnInfoRecord ) records . get ( idx + 1 ) ; if ( columnInfo . getLastColumn ( ) + 1 == nextColumnInfo . getFirstColumn ( ) ) { if ( nextColumnInfo . getOutlineLevel ( ) < level ) break ; columnInfo = nextColumnInfo ; } else { break ; } } idx ++ ; } return columnInfo ; } public boolean isColumnGroupCollapsed ( int idx ) { int endOfOutlineGroupIdx = findEndOfColumnOutlineGroup ( idx ) ; if ( endOfOutlineGroupIdx >= records . size ( ) ) return false ; if ( getColInfo ( endOfOutlineGroupIdx ) . getLastColumn ( ) + 1 != getColInfo ( endOfOutlineGroupIdx + 1 ) . getFirstColumn ( ) ) return false ; else return getColInfo ( endOfOutlineGroupIdx + 1 ) . getCollapsed ( ) ; } public boolean isColumnGroupHiddenByParent ( int idx ) { int endLevel ; boolean endHidden ; int endOfOutlineGroupIdx = findEndOfColumnOutlineGroup ( idx ) ; if ( endOfOutlineGroupIdx >= records . size ( ) ) { endLevel = 0 ; endHidden = false ; } else if ( getColInfo ( endOfOutlineGroupIdx ) . getLastColumn ( ) + 1 != getColInfo ( endOfOutlineGroupIdx + 1 ) . getFirstColumn ( ) ) { endLevel = 0 ; endHidden = false ; } else { endLevel = getColInfo ( endOfOutlineGroupIdx + 1 ) . getOutlineLevel ( ) ; endHidden = getColInfo ( endOfOutlineGroupIdx + 1 ) . getHidden ( ) ; } int startLevel ; boolean startHidden ; int startOfOutlineGroupIdx = findStartOfColumnOutlineGroup ( idx ) ; if ( startOfOutlineGroupIdx <= 0 ) { startLevel = 0 ; startHidden = false ; } else if ( getColInfo ( startOfOutlineGroupIdx ) . getFirstColumn ( ) - 1 != getColInfo ( startOfOutlineGroupIdx - 1 ) . getLastColumn ( ) ) { startLevel = 0 ; startHidden = false ; } else { startLevel = getColInfo ( startOfOutlineGroupIdx - 1 ) . getOutlineLevel ( ) ; startHidden = getColInfo ( startOfOutlineGroupIdx - 1 ) . getHidden ( ) ; } if ( endLevel > startLevel ) { return endHidden ; } else { return startHidden ; } } public void collapseColumn ( short columnNumber ) { int idx = findColumnIdx ( columnNumber , 0 ) ; if ( idx == - 1 ) return ; ColumnInfoRecord columnInfo = ( ColumnInfoRecord ) records . get ( findStartOfColumnOutlineGroup ( idx ) ) ; columnInfo = writeHidden ( columnInfo , idx , true ) ; setColumn ( ( short ) ( columnInfo . getLastColumn ( ) + 1 ) , null , null , null , null , Boolean . TRUE ) ; } public void expandColumn ( short columnNumber ) { int idx = findColumnIdx ( columnNumber , 0 ) ; if ( idx == - 1 ) return ; if ( ! isColumnGroupCollapsed ( idx ) ) return ; int startIdx = findStartOfColumnOutlineGroup ( idx ) ; ColumnInfoRecord columnInfo = getColInfo ( startIdx ) ; int endIdx = findEndOfColumnOutlineGroup ( idx ) ; ColumnInfoRecord endColumnInfo = getColInfo ( endIdx ) ; if ( ! isColumnGroupHiddenByParent ( idx ) ) { for ( int i = startIdx ; i <= endIdx ; i ++ ) { if ( columnInfo . getOutlineLevel ( ) == getColInfo ( i ) . getOutlineLevel ( ) ) getColInfo ( i ) . setHidden ( false ) ; } } setColumn ( ( short ) ( columnInfo . getLastColumn ( ) + 1 ) , null , null , null , null , Boolean . FALSE ) ; } public static Record createColInfo ( ) { ColumnInfoRecord retval = new ColumnInfoRecord ( ) ; retval . setColumnWidth ( ( short ) 2275 ) ; retval . setOptions ( ( short ) 2 ) ; retval . setXFIndex ( ( short ) 0x0f ) ; return retval ; } public void setColumn ( short column , Short xfIndex , Short width , Integer level , Boolean hidden , Boolean collapsed ) { ColumnInfoRecord ci = null ; int k = 0 ; for ( k = 0 ; k < records . size ( ) ; k ++ ) { ci = ( ColumnInfoRecord ) records . get ( k ) ; if ( ( ci . getFirstColumn ( ) <= column ) && ( column <= ci . getLastColumn ( ) ) ) { break ; } ci = null ; } if ( ci != null ) { boolean styleChanged = xfIndex != null && ci . getXFIndex ( ) != xfIndex . shortValue ( ) ; boolean widthChanged = width != null && ci . getColumnWidth ( ) != width . shortValue ( ) ; boolean levelChanged = level != null && ci . getOutlineLevel ( ) != level . intValue ( ) ; boolean hiddenChanged = hidden != null && ci . getHidden ( ) != hidden . booleanValue ( ) ; boolean collapsedChanged = collapsed != null && ci . getCollapsed ( ) != collapsed . booleanValue ( ) ; boolean columnChanged = styleChanged || widthChanged || levelChanged || hiddenChanged || collapsedChanged ; if ( ! columnChanged ) { } else if ( ( ci . getFirstColumn ( ) == column ) && ( ci . getLastColumn ( ) == column ) ) { setColumnInfoFields ( ci , xfIndex , width , level , hidden , collapsed ) ; } else if ( ( ci . getFirstColumn ( ) == column ) || ( ci . getLastColumn ( ) == column ) ) { if ( ci . getFirstColumn ( ) == column ) { ci . setFirstColumn ( ( short ) ( column + 1 ) ) ; } else { ci . setLastColumn ( ( short ) ( column - 1 ) ) ; } ColumnInfoRecord nci = ( ColumnInfoRecord ) createColInfo ( ) ; nci . setFirstColumn ( column ) ; nci . setLastColumn ( column ) ; nci . setOptions ( ci . getOptions ( ) ) ; nci . setXFIndex ( ci . getXFIndex ( ) ) ; setColumnInfoFields ( nci , xfIndex , width , level , hidden , collapsed ) ; insertColumn ( k , nci ) ; } else { short lastcolumn = ci . getLastColumn ( ) ; ci . setLastColumn ( ( short ) ( column - 1 ) ) ; ColumnInfoRecord nci = ( ColumnInfoRecord ) createColInfo ( ) ; nci . setFirstColumn ( column ) ; nci . setLastColumn ( column ) ; nci . setOptions ( ci . getOptions ( ) ) ; nci . setXFIndex ( ci . getXFIndex ( ) ) ; setColumnInfoFields ( nci , xfIndex , width , level , hidden , collapsed ) ; insertColumn ( ++ k , nci ) ; nci = ( ColumnInfoRecord ) createColInfo ( ) ; nci . setFirstColumn ( ( short ) ( column + 1 ) ) ; nci . setLastColumn ( lastcolumn ) ; nci . setOptions ( ci . getOptions ( ) ) ; nci . setXFIndex ( ci . getXFIndex ( ) ) ; nci . setColumnWidth ( ci . getColumnWidth ( ) ) ; insertColumn ( ++ k , nci ) ; } } else { ColumnInfoRecord nci = ( ColumnInfoRecord ) createColInfo ( ) ; nci . setFirstColumn ( column ) ; nci . setLastColumn ( column ) ; setColumnInfoFields ( nci , xfIndex , width , level , hidden , collapsed ) ; insertColumn ( k , nci ) ; } } private void setColumnInfoFields ( ColumnInfoRecord ci , Short xfStyle , Short width , Integer level , Boolean hidden , Boolean collapsed ) { if ( xfStyle != null ) ci . setXFIndex ( xfStyle . shortValue ( ) ) ; if ( width != null ) ci . setColumnWidth ( width . shortValue ( ) ) ; if ( level != null ) ci . setOutlineLevel ( level . shortValue ( ) ) ; if ( hidden != null ) ci . setHidden ( hidden . booleanValue ( ) ) ; if ( collapsed != null ) ci . setCollapsed ( collapsed . booleanValue ( ) ) ; } public int findColumnIdx ( int column , int fromIdx ) { if ( column < 0 ) throw new IllegalArgumentException ( "column parameter out of range: " + column ) ; if ( fromIdx < 0 ) throw new IllegalArgumentException ( "fromIdx parameter out of range: " + fromIdx ) ; ColumnInfoRecord ci ; for ( int k = fromIdx ; k < records . size ( ) ; k ++ ) { ci = ( ColumnInfoRecord ) records . get ( k ) ; if ( ( ci . getFirstColumn ( ) <= column ) && ( column <= ci . getLastColumn ( ) ) ) { return k ; } ci = null ; } return - 1 ; } public void collapseColInfoRecords ( int columnIdx ) { if ( columnIdx == 0 ) return ; ColumnInfoRecord previousCol = ( ColumnInfoRecord ) records . get ( columnIdx - 1 ) ; ColumnInfoRecord currentCol = ( ColumnInfoRecord ) records . get ( columnIdx ) ; boolean adjacentColumns = previousCol . getLastColumn ( ) == currentCol . getFirstColumn ( ) - 1 ; if ( ! adjacentColumns ) return ; boolean columnsMatch = previousCol . getXFIndex ( ) == currentCol . getXFIndex ( ) && previousCol . getOptions ( ) == currentCol . getOptions ( ) && previousCol . getColumnWidth ( ) == currentCol . getColumnWidth ( ) ; if ( columnsMatch ) { previousCol . setLastColumn ( currentCol . getLastColumn ( ) ) ; records . remove ( columnIdx ) ; } } public void groupColumnRange ( short fromColumn , short toColumn , boolean indent ) { int fromIdx = 0 ; for ( int i = fromColumn ; i <= toColumn ; i ++ ) { int level = 1 ; int columnIdx = findColumnIdx ( i , Math . max ( 0 , fromIdx ) ) ; if ( columnIdx != - 1 ) { level = ( ( ColumnInfoRecord ) records . get ( columnIdx ) ) . getOutlineLevel ( ) ; if ( indent ) level ++ ; else level -- ; level = Math . max ( 0 , level ) ; level = Math . min ( 7 , level ) ; fromIdx = columnIdx - 1 ; } setColumn ( ( short ) i , null , null , new Integer ( level ) , null , null ) ; columnIdx = findColumnIdx ( i , Math . max ( 0 , fromIdx ) ) ; collapseColInfoRecords ( columnIdx ) ; } } } 	0
package org . apache . poi . poifs . storage ; import java . util . * ; public class SmallDocumentBlockList extends BlockListImpl { public SmallDocumentBlockList ( final List blocks ) { setBlocks ( ( SmallDocumentBlock [ ] ) blocks . toArray ( new SmallDocumentBlock [ 0 ] ) ) ; } } 	0
package org . apache . poi . hssf . record ; import org . apache . poi . ddf . EscherRecord ; import org . apache . poi . ddf . NullEscherSerializationListener ; import org . apache . poi . util . ArrayUtil ; import org . apache . poi . util . LittleEndian ; import java . util . Iterator ; import java . util . List ; public class DrawingGroupRecord extends AbstractEscherHolderRecord { public static final short sid = 0xEB ; static final int MAX_RECORD_SIZE = 8228 ; private static final int MAX_DATA_SIZE = MAX_RECORD_SIZE - 4 ; public DrawingGroupRecord ( ) { } public DrawingGroupRecord ( RecordInputStream in ) { super ( in ) ; } protected String getRecordName ( ) { return "MSODRAWINGGROUP" ; } public short getSid ( ) { return sid ; } public int serialize ( int offset , byte [ ] data ) { byte [ ] rawData = getRawData ( ) ; if ( getEscherRecords ( ) . size ( ) == 0 && rawData != null ) { return writeData ( offset , data , rawData ) ; } else { byte [ ] buffer = new byte [ getRawDataSize ( ) ] ; int pos = 0 ; for ( Iterator iterator = getEscherRecords ( ) . iterator ( ) ; iterator . hasNext ( ) ; ) { EscherRecord r = ( EscherRecord ) iterator . next ( ) ; pos += r . serialize ( pos , buffer , new NullEscherSerializationListener ( ) ) ; } return writeData ( offset , data , buffer ) ; } } public int getRecordSize ( ) { return grossSizeFromDataSize ( getRawDataSize ( ) ) ; } public int getRawDataSize ( ) { List escherRecords = getEscherRecords ( ) ; byte [ ] rawData = getRawData ( ) ; if ( escherRecords . size ( ) == 0 && rawData != null ) { return rawData . length ; } else { int size = 0 ; for ( Iterator iterator = escherRecords . iterator ( ) ; iterator . hasNext ( ) ; ) { EscherRecord r = ( EscherRecord ) iterator . next ( ) ; size += r . getRecordSize ( ) ; } return size ; } } static int grossSizeFromDataSize ( int dataSize ) { return dataSize + ( ( dataSize - 1 ) / MAX_DATA_SIZE + 1 ) * 4 ; } private int writeData ( int offset , byte [ ] data , byte [ ] rawData ) { int writtenActualData = 0 ; int writtenRawData = 0 ; while ( writtenRawData < rawData . length ) { int segmentLength = Math . min ( rawData . length - writtenRawData , MAX_DATA_SIZE ) ; if ( writtenRawData / MAX_DATA_SIZE >= 2 ) writeContinueHeader ( data , offset , segmentLength ) ; else writeHeader ( data , offset , segmentLength ) ; writtenActualData += 4 ; offset += 4 ; ArrayUtil . arraycopy ( rawData , writtenRawData , data , offset , segmentLength ) ; offset += segmentLength ; writtenRawData += segmentLength ; writtenActualData += segmentLength ; } return writtenActualData ; } private void writeHeader ( byte [ ] data , int offset , int sizeExcludingHeader ) { LittleEndian . putShort ( data , 0 + offset , getSid ( ) ) ; LittleEndian . putShort ( data , 2 + offset , ( short ) sizeExcludingHeader ) ; } private void writeContinueHeader ( byte [ ] data , int offset , int sizeExcludingHeader ) { LittleEndian . putShort ( data , 0 + offset , ContinueRecord . sid ) ; LittleEndian . putShort ( data , 2 + offset , ( short ) sizeExcludingHeader ) ; } } 	1
package org . apache . poi . hssf . record . aggregates ; import org . apache . poi . hssf . record . * ; public class FormulaRecordAggregate extends Record implements CellValueRecordInterface , Comparable { public final static short sid = - 2000 ; private FormulaRecord formulaRecord ; private StringRecord stringRecord ; public FormulaRecordAggregate ( FormulaRecord formulaRecord , StringRecord stringRecord ) { this . formulaRecord = formulaRecord ; this . stringRecord = stringRecord ; } protected void validateSid ( short id ) { } protected void fillFields ( RecordInputStream in ) { } public int serialize ( int offset , byte [ ] data ) { int pos = offset ; pos += formulaRecord . serialize ( pos , data ) ; if ( stringRecord != null ) { pos += stringRecord . serialize ( pos , data ) ; } return pos - offset ; } public int getRecordSize ( ) { int size = formulaRecord . getRecordSize ( ) + ( stringRecord == null ? 0 : stringRecord . getRecordSize ( ) ) ; return size ; } public short getSid ( ) { return sid ; } public void setStringRecord ( StringRecord stringRecord ) { this . stringRecord = stringRecord ; } public void setFormulaRecord ( FormulaRecord formulaRecord ) { this . formulaRecord = formulaRecord ; } public FormulaRecord getFormulaRecord ( ) { return formulaRecord ; } public StringRecord getStringRecord ( ) { return stringRecord ; } public boolean isEqual ( CellValueRecordInterface i ) { return formulaRecord . isEqual ( i ) ; } public boolean isAfter ( CellValueRecordInterface i ) { return formulaRecord . isAfter ( i ) ; } public boolean isBefore ( CellValueRecordInterface i ) { return formulaRecord . isBefore ( i ) ; } public short getXFIndex ( ) { return formulaRecord . getXFIndex ( ) ; } public void setXFIndex ( short xf ) { formulaRecord . setXFIndex ( xf ) ; } public void setColumn ( short col ) { formulaRecord . setColumn ( col ) ; } public void setRow ( int row ) { formulaRecord . setRow ( row ) ; } public short getColumn ( ) { return formulaRecord . getColumn ( ) ; } public int getRow ( ) { return formulaRecord . getRow ( ) ; } public int compareTo ( Object o ) { return formulaRecord . compareTo ( o ) ; } public boolean equals ( Object obj ) { return formulaRecord . equals ( obj ) ; } public String toString ( ) { return formulaRecord . toString ( ) ; } public Object clone ( ) { StringRecord clonedString = ( stringRecord == null ) ? null : ( StringRecord ) stringRecord . clone ( ) ; return new FormulaRecordAggregate ( ( FormulaRecord ) this . formulaRecord . clone ( ) , clonedString ) ; } public boolean isInValueSection ( ) { return true ; } public String getStringValue ( ) { if ( stringRecord == null ) return null ; return stringRecord . getString ( ) ; } } 	1
package org . apache . poi . poifs . filesystem ; import java . io . * ; public class DocumentInputStream extends InputStream { private int _current_offset ; private int _marked_offset ; private int _document_size ; private boolean _closed ; private POIFSDocument _document ; private byte [ ] _tiny_buffer ; static private final int EOD = - 1 ; public DocumentInputStream ( final DocumentEntry document ) throws IOException { _current_offset = 0 ; _marked_offset = 0 ; _document_size = document . getSize ( ) ; _closed = false ; _tiny_buffer = null ; if ( document instanceof DocumentNode ) { _document = ( ( DocumentNode ) document ) . getDocument ( ) ; } else { throw new IOException ( "Cannot open internal document storage" ) ; } } public DocumentInputStream ( final POIFSDocument document ) throws IOException { _current_offset = 0 ; _marked_offset = 0 ; _document_size = document . getSize ( ) ; _closed = false ; _tiny_buffer = null ; _document = document ; } public int available ( ) throws IOException { dieIfClosed ( ) ; return _document_size - _current_offset ; } public void close ( ) throws IOException { _closed = true ; } public void mark ( int ignoredReadlimit ) { _marked_offset = _current_offset ; } public boolean markSupported ( ) { return true ; } public int read ( ) throws IOException { dieIfClosed ( ) ; if ( atEOD ( ) ) { return EOD ; } if ( _tiny_buffer == null ) { _tiny_buffer = new byte [ 1 ] ; } _document . read ( _tiny_buffer , _current_offset ++ ) ; return ( ( int ) _tiny_buffer [ 0 ] ) & 0x000000FF ; } public int read ( final byte [ ] b ) throws IOException , NullPointerException { return read ( b , 0 , b . length ) ; } public int read ( final byte [ ] b , final int off , final int len ) throws IOException , NullPointerException , IndexOutOfBoundsException { dieIfClosed ( ) ; if ( b == null ) { throw new NullPointerException ( "buffer is null" ) ; } if ( ( off < 0 ) || ( len < 0 ) || ( b . length < ( off + len ) ) ) { throw new IndexOutOfBoundsException ( "can't read past buffer boundaries" ) ; } if ( len == 0 ) { return 0 ; } if ( atEOD ( ) ) { return EOD ; } int limit = Math . min ( available ( ) , len ) ; if ( ( off == 0 ) && ( limit == b . length ) ) { _document . read ( b , _current_offset ) ; } else { byte [ ] buffer = new byte [ limit ] ; _document . read ( buffer , _current_offset ) ; System . arraycopy ( buffer , 0 , b , off , limit ) ; } _current_offset += limit ; return limit ; } public void reset ( ) { _current_offset = _marked_offset ; } public long skip ( final long n ) throws IOException { dieIfClosed ( ) ; if ( n < 0 ) { return 0 ; } int new_offset = _current_offset + ( int ) n ; if ( new_offset < _current_offset ) { new_offset = _document_size ; } else if ( new_offset > _document_size ) { new_offset = _document_size ; } long rval = new_offset - _current_offset ; _current_offset = new_offset ; return rval ; } private void dieIfClosed ( ) throws IOException { if ( _closed ) { throw new IOException ( "cannot perform requested operation on a closed stream" ) ; } } private boolean atEOD ( ) { return _current_offset == _document_size ; } } 	0
package org . apache . poi . hssf . record . formula ; import org . apache . poi . util . LittleEndian ; import org . apache . poi . hssf . model . Workbook ; import org . apache . poi . hssf . record . RecordInputStream ; public class MemErrPtg extends MemAreaPtg { public final static short sid = 0x27 ; public MemErrPtg ( ) { } public MemErrPtg ( RecordInputStream in ) { super ( in ) ; } public void writeBytes ( byte [ ] array , int offset ) { super . writeBytes ( array , offset ) ; array [ offset ] = ( byte ) ( sid + ptgClass ) ; } public String toFormulaString ( Workbook book ) { return "ERR#" ; } public Object clone ( ) { MemErrPtg ptg = new MemErrPtg ( ) ; ptg . setReserved ( getReserved ( ) ) ; ptg . setSubexpressionLength ( getSubexpressionLength ( ) ) ; return ptg ; } } 	0
package org . apache . poi . hssf . eventmodel ; import java . io . InputStream ; import java . lang . reflect . Constructor ; import java . util . ArrayList ; import java . util . HashMap ; import java . util . Iterator ; import java . util . List ; import java . util . Map ; import org . apache . poi . hssf . record . BOFRecord ; import org . apache . poi . hssf . record . BackupRecord ; import org . apache . poi . hssf . record . BlankRecord ; import org . apache . poi . hssf . record . BookBoolRecord ; import org . apache . poi . hssf . record . BoolErrRecord ; import org . apache . poi . hssf . record . BottomMarginRecord ; import org . apache . poi . hssf . record . BoundSheetRecord ; import org . apache . poi . hssf . record . CalcCountRecord ; import org . apache . poi . hssf . record . CalcModeRecord ; import org . apache . poi . hssf . record . CodepageRecord ; import org . apache . poi . hssf . record . ColumnInfoRecord ; import org . apache . poi . hssf . record . ContinueRecord ; import org . apache . poi . hssf . record . CountryRecord ; import org . apache . poi . hssf . record . DBCellRecord ; import org . apache . poi . hssf . record . DSFRecord ; import org . apache . poi . hssf . record . DateWindow1904Record ; import org . apache . poi . hssf . record . DefaultColWidthRecord ; import org . apache . poi . hssf . record . DefaultRowHeightRecord ; import org . apache . poi . hssf . record . DeltaRecord ; import org . apache . poi . hssf . record . DimensionsRecord ; import org . apache . poi . hssf . record . EOFRecord ; import org . apache . poi . hssf . record . ExtSSTRecord ; import org . apache . poi . hssf . record . ExtendedFormatRecord ; import org . apache . poi . hssf . record . ExternSheetRecord ; import org . apache . poi . hssf . record . FnGroupCountRecord ; import org . apache . poi . hssf . record . FontRecord ; import org . apache . poi . hssf . record . FooterRecord ; import org . apache . poi . hssf . record . FormatRecord ; import org . apache . poi . hssf . record . GridsetRecord ; import org . apache . poi . hssf . record . GutsRecord ; import org . apache . poi . hssf . record . HCenterRecord ; import org . apache . poi . hssf . record . HeaderRecord ; import org . apache . poi . hssf . record . HideObjRecord ; import org . apache . poi . hssf . record . IndexRecord ; import org . apache . poi . hssf . record . InterfaceEndRecord ; import org . apache . poi . hssf . record . InterfaceHdrRecord ; import org . apache . poi . hssf . record . IterationRecord ; import org . apache . poi . hssf . record . LabelRecord ; import org . apache . poi . hssf . record . LabelSSTRecord ; import org . apache . poi . hssf . record . LeftMarginRecord ; import org . apache . poi . hssf . record . MMSRecord ; import org . apache . poi . hssf . record . MergeCellsRecord ; import org . apache . poi . hssf . record . MulBlankRecord ; import org . apache . poi . hssf . record . MulRKRecord ; import org . apache . poi . hssf . record . NameRecord ; import org . apache . poi . hssf . record . NumberRecord ; import org . apache . poi . hssf . record . PaneRecord ; import org . apache . poi . hssf . record . PaletteRecord ; import org . apache . poi . hssf . record . PasswordRecord ; import org . apache . poi . hssf . record . PasswordRev4Record ; import org . apache . poi . hssf . record . PrecisionRecord ; import org . apache . poi . hssf . record . PrintGridlinesRecord ; import org . apache . poi . hssf . record . PrintHeadersRecord ; import org . apache . poi . hssf . record . PrintSetupRecord ; import org . apache . poi . hssf . record . ProtectRecord ; import org . apache . poi . hssf . record . ProtectionRev4Record ; import org . apache . poi . hssf . record . RKRecord ; import org . apache . poi . hssf . record . Record ; import org . apache . poi . hssf . record . RecordFormatException ; import org . apache . poi . hssf . record . RecordInputStream ; import org . apache . poi . hssf . record . RefModeRecord ; import org . apache . poi . hssf . record . RefreshAllRecord ; import org . apache . poi . hssf . record . RightMarginRecord ; import org . apache . poi . hssf . record . RowRecord ; import org . apache . poi . hssf . record . SSTRecord ; import org . apache . poi . hssf . record . SaveRecalcRecord ; import org . apache . poi . hssf . record . SelectionRecord ; import org . apache . poi . hssf . record . SharedFormulaRecord ; import org . apache . poi . hssf . record . StringRecord ; import org . apache . poi . hssf . record . StyleRecord ; import org . apache . poi . hssf . record . TabIdRecord ; import org . apache . poi . hssf . record . TopMarginRecord ; import org . apache . poi . hssf . record . UnknownRecord ; import org . apache . poi . hssf . record . UseSelFSRecord ; import org . apache . poi . hssf . record . VCenterRecord ; import org . apache . poi . hssf . record . WSBoolRecord ; import org . apache . poi . hssf . record . WindowOneRecord ; import org . apache . poi . hssf . record . WindowProtectRecord ; import org . apache . poi . hssf . record . WindowTwoRecord ; import org . apache . poi . hssf . record . WriteAccessRecord ; import org . apache . poi . hssf . record . WriteProtectRecord ; import org . apache . poi . hssf . record . FilePassRecord ; import org . apache . poi . hssf . record . NoteRecord ; public class EventRecordFactory { private static final Class [ ] records ; static { records = new Class [ ] { BOFRecord . class , InterfaceHdrRecord . class , MMSRecord . class , InterfaceEndRecord . class , WriteAccessRecord . class , CodepageRecord . class , DSFRecord . class , TabIdRecord . class , FnGroupCountRecord . class , WindowProtectRecord . class , ProtectRecord . class , PasswordRecord . class , ProtectionRev4Record . class , PasswordRev4Record . class , WindowOneRecord . class , BackupRecord . class , HideObjRecord . class , DateWindow1904Record . class , PrecisionRecord . class , RefreshAllRecord . class , BookBoolRecord . class , FontRecord . class , FormatRecord . class , ExtendedFormatRecord . class , StyleRecord . class , UseSelFSRecord . class , BoundSheetRecord . class , CountryRecord . class , SSTRecord . class , ExtSSTRecord . class , EOFRecord . class , IndexRecord . class , CalcModeRecord . class , CalcCountRecord . class , RefModeRecord . class , IterationRecord . class , DeltaRecord . class , SaveRecalcRecord . class , PrintHeadersRecord . class , PrintGridlinesRecord . class , GridsetRecord . class , GutsRecord . class , DefaultRowHeightRecord . class , WSBoolRecord . class , HeaderRecord . class , FooterRecord . class , HCenterRecord . class , VCenterRecord . class , PrintSetupRecord . class , DefaultColWidthRecord . class , DimensionsRecord . class , RowRecord . class , LabelSSTRecord . class , RKRecord . class , NumberRecord . class , DBCellRecord . class , WindowTwoRecord . class , SelectionRecord . class , ContinueRecord . class , LabelRecord . class , BlankRecord . class , ColumnInfoRecord . class , MulRKRecord . class , MulBlankRecord . class , MergeCellsRecord . class , BoolErrRecord . class , ExternSheetRecord . class , NameRecord . class , LeftMarginRecord . class , RightMarginRecord . class , TopMarginRecord . class , BottomMarginRecord . class , PaletteRecord . class , StringRecord . class , SharedFormulaRecord . class , WriteProtectRecord . class , FilePassRecord . class , PaneRecord . class , NoteRecord . class } ; } private static Map recordsMap = recordsToMap ( records ) ; private static short [ ] sidscache ; private List listeners ; private boolean abortable ; public EventRecordFactory ( ) { this ( true ) ; } public EventRecordFactory ( boolean abortable ) { this . abortable = abortable ; listeners = new ArrayList ( recordsMap . size ( ) ) ; if ( sidscache == null ) { sidscache = getAllKnownRecordSIDs ( ) ; } } public void registerListener ( ERFListener listener , short [ ] sids ) { if ( sids == null ) sids = sidscache ; ERFListener wrapped = new ListenerWrapper ( listener , sids , abortable ) ; listeners . add ( wrapped ) ; } protected Iterator listeners ( ) { return listeners . iterator ( ) ; } private boolean throwRecordEvent ( Record record ) { boolean result = true ; Iterator i = listeners . iterator ( ) ; while ( i . hasNext ( ) ) { result = ( ( ERFListener ) i . next ( ) ) . processRecord ( record ) ; if ( abortable == true && result == false ) { break ; } } return result ; } public void processRecords ( InputStream in ) throws RecordFormatException { Record last_record = null ; RecordInputStream recStream = new RecordInputStream ( in ) ; while ( recStream . hasNextRecord ( ) ) { recStream . nextRecord ( ) ; Record [ ] recs = createRecord ( recStream ) ; if ( recs . length > 1 ) { for ( int k = 0 ; k < recs . length ; k ++ ) { if ( last_record != null ) { if ( throwRecordEvent ( last_record ) == false && abortable == true ) { last_record = null ; break ; } } last_record = recs [ k ] ; } } else { Record record = recs [ 0 ] ; if ( record != null ) { if ( last_record != null ) { if ( throwRecordEvent ( last_record ) == false && abortable == true ) { last_record = null ; break ; } } last_record = record ; } } } if ( last_record != null ) { throwRecordEvent ( last_record ) ; } } public static Record [ ] createRecord ( RecordInputStream in ) { Record retval = null ; Record [ ] realretval = null ; try { Constructor constructor = ( Constructor ) recordsMap . get ( new Short ( in . getSid ( ) ) ) ; if ( constructor != null ) { retval = ( Record ) constructor . newInstance ( new Object [ ] { in } ) ; } else { retval = new UnknownRecord ( in ) ; } } catch ( Exception introspectionException ) { throw new RecordFormatException ( "Unable to construct record instance" , introspectionException ) ; } if ( retval instanceof RKRecord ) { RKRecord rk = ( RKRecord ) retval ; NumberRecord num = new NumberRecord ( ) ; num . setColumn ( rk . getColumn ( ) ) ; num . setRow ( rk . getRow ( ) ) ; num . setXFIndex ( rk . getXFIndex ( ) ) ; num . setValue ( rk . getRKNumber ( ) ) ; retval = num ; } else if ( retval instanceof DBCellRecord ) { retval = null ; } else if ( retval instanceof MulRKRecord ) { MulRKRecord mrk = ( MulRKRecord ) retval ; realretval = new Record [ mrk . getNumColumns ( ) ] ; for ( int k = 0 ; k < mrk . getNumColumns ( ) ; k ++ ) { NumberRecord nr = new NumberRecord ( ) ; nr . setColumn ( ( short ) ( k + mrk . getFirstColumn ( ) ) ) ; nr . setRow ( mrk . getRow ( ) ) ; nr . setXFIndex ( mrk . getXFAt ( k ) ) ; nr . setValue ( mrk . getRKNumberAt ( k ) ) ; realretval [ k ] = nr ; } } else if ( retval instanceof MulBlankRecord ) { MulBlankRecord mb = ( MulBlankRecord ) retval ; realretval = new Record [ mb . getNumColumns ( ) ] ; for ( int k = 0 ; k < mb . getNumColumns ( ) ; k ++ ) { BlankRecord br = new BlankRecord ( ) ; br . setColumn ( ( short ) ( k + mb . getFirstColumn ( ) ) ) ; br . setRow ( mb . getRow ( ) ) ; br . setXFIndex ( mb . getXFAt ( k ) ) ; realretval [ k ] = br ; } } if ( realretval == null ) { realretval = new Record [ 1 ] ; realretval [ 0 ] = retval ; } return realretval ; } public static short [ ] getAllKnownRecordSIDs ( ) { short [ ] results = new short [ recordsMap . size ( ) ] ; int i = 0 ; for ( Iterator iterator = recordsMap . keySet ( ) . iterator ( ) ; iterator . hasNext ( ) ; ) { Short sid = ( Short ) iterator . next ( ) ; results [ i ++ ] = sid . shortValue ( ) ; } return results ; } private static Map recordsToMap ( Class [ ] records ) { Map result = new HashMap ( ) ; Constructor constructor ; for ( int i = 0 ; i < records . length ; i ++ ) { Class record = null ; short sid = 0 ; record = records [ i ] ; try { sid = record . getField ( "sid" ) . getShort ( null ) ; constructor = record . getConstructor ( new Class [ ] { RecordInputStream . class } ) ; } catch ( Exception illegalArgumentException ) { throw new RecordFormatException ( "Unable to determine record types" ) ; } result . put ( new Short ( sid ) , constructor ) ; } return result ; } } class ListenerWrapper implements ERFListener { private ERFListener listener ; private short [ ] sids ; private boolean abortable ; ListenerWrapper ( ERFListener listener , short [ ] sids , boolean abortable ) { this . listener = listener ; this . sids = sids ; this . abortable = abortable ; } public boolean processRecord ( Record rec ) { boolean result = true ; for ( int k = 0 ; k < sids . length ; k ++ ) { if ( sids [ k ] == rec . getSid ( ) ) { result = listener . processRecord ( rec ) ; if ( abortable == true && result == false ) { break ; } } } return result ; } } 	1
package org . apache . poi . hssf . usermodel ; import org . apache . poi . hssf . record . FontRecord ; public class HSSFFont { public final static String FONT_ARIAL = "Arial" ; public final static short BOLDWEIGHT_NORMAL = 0x190 ; public final static short BOLDWEIGHT_BOLD = 0x2bc ; public final static short COLOR_NORMAL = 0x7fff ; public final static short COLOR_RED = 0xa ; public final static short SS_NONE = 0 ; public final static short SS_SUPER = 1 ; public final static short SS_SUB = 2 ; public final static byte U_NONE = 0 ; public final static byte U_SINGLE = 1 ; public final static byte U_DOUBLE = 2 ; public final static byte U_SINGLE_ACCOUNTING = 0x21 ; public final static byte U_DOUBLE_ACCOUNTING = 0x22 ; public final static byte ANSI_CHARSET = 0 ; public final static byte DEFAULT_CHARSET = 1 ; public final static byte SYMBOL_CHARSET = 2 ; private FontRecord font ; private short index ; protected HSSFFont ( short index , FontRecord rec ) { font = rec ; this . index = index ; } public void setFontName ( String name ) { font . setFontName ( name ) ; font . setFontNameLength ( ( byte ) name . length ( ) ) ; } public String getFontName ( ) { return font . getFontName ( ) ; } public short getIndex ( ) { return index ; } public void setFontHeight ( short height ) { font . setFontHeight ( height ) ; } public void setFontHeightInPoints ( short height ) { font . setFontHeight ( ( short ) ( height * 20 ) ) ; } public short getFontHeight ( ) { return font . getFontHeight ( ) ; } public short getFontHeightInPoints ( ) { return ( short ) ( font . getFontHeight ( ) / 20 ) ; } public void setItalic ( boolean italic ) { font . setItalic ( italic ) ; } public boolean getItalic ( ) { return font . isItalic ( ) ; } public void setStrikeout ( boolean strikeout ) { font . setStrikeout ( strikeout ) ; } public boolean getStrikeout ( ) { return font . isStruckout ( ) ; } public void setColor ( short color ) { font . setColorPaletteIndex ( color ) ; } public short getColor ( ) { return font . getColorPaletteIndex ( ) ; } public void setBoldweight ( short boldweight ) { font . setBoldWeight ( boldweight ) ; } public short getBoldweight ( ) { return font . getBoldWeight ( ) ; } public void setTypeOffset ( short offset ) { font . setSuperSubScript ( offset ) ; } public short getTypeOffset ( ) { return font . getSuperSubScript ( ) ; } public void setUnderline ( byte underline ) { font . setUnderline ( underline ) ; } public byte getUnderline ( ) { return font . getUnderline ( ) ; } public byte getCharSet ( ) { return font . getCharset ( ) ; } public void setCharSet ( byte charset ) { font . setCharset ( charset ) ; } public String toString ( ) { return "org.apache.poi.hssf.usermodel.HSSFFont{" + font + "}" ; } } 	1
package org . apache . poi . hssf . record ; import org . apache . poi . util . LittleEndian ; public class RecalcIdRecord extends Record { public final static short sid = 0x1c1 ; public short [ ] field_1_recalcids ; private boolean isNeeded = true ; public RecalcIdRecord ( ) { } public RecalcIdRecord ( RecordInputStream in ) { super ( in ) ; } protected void validateSid ( short id ) { if ( id != sid ) { throw new RecordFormatException ( "NOT A RECALCID RECORD" ) ; } } protected void fillFields ( RecordInputStream in ) { field_1_recalcids = new short [ in . remaining ( ) / 2 ] ; for ( int k = 0 ; k < field_1_recalcids . length ; k ++ ) { field_1_recalcids [ k ] = in . readShort ( ) ; } } public void setRecalcIdArray ( short [ ] array ) { field_1_recalcids = array ; } public short [ ] getRecalcIdArray ( ) { return field_1_recalcids ; } public void setIsNeeded ( boolean isNeeded ) { this . isNeeded = isNeeded ; } public boolean isNeeded ( ) { return isNeeded ; } public String toString ( ) { StringBuffer buffer = new StringBuffer ( ) ; buffer . append ( "[RECALCID]\n" ) ; buffer . append ( "    .elements        = " ) . append ( field_1_recalcids . length ) . append ( "\n" ) ; for ( int k = 0 ; k < field_1_recalcids . length ; k ++ ) { buffer . append ( "    .element_" + k + "       = " ) . append ( field_1_recalcids [ k ] ) . append ( "\n" ) ; } buffer . append ( "[/RECALCID]\n" ) ; return buffer . toString ( ) ; } public int serialize ( int offset , byte [ ] data ) { short [ ] tabids = getRecalcIdArray ( ) ; short length = ( short ) ( tabids . length * 2 ) ; int byteoffset = 4 ; LittleEndian . putShort ( data , 0 + offset , sid ) ; LittleEndian . putShort ( data , 2 + offset , ( ( short ) length ) ) ; for ( int k = 0 ; k < ( length / 2 ) ; k ++ ) { LittleEndian . putShort ( data , byteoffset + offset , tabids [ k ] ) ; byteoffset += 2 ; } return getRecordSize ( ) ; } public int getRecordSize ( ) { return 4 + ( getRecalcIdArray ( ) . length * 2 ) ; } public short getSid ( ) { return sid ; } } 	1
package org . apache . poi . hssf . record . formula ; import org . apache . poi . hssf . record . RecordInputStream ; public class DeletedArea3DPtg extends Area3DPtg { public final static byte sid = 0x3d ; public DeletedArea3DPtg ( String arearef , short externIdx ) { super ( arearef , externIdx ) ; } public DeletedArea3DPtg ( RecordInputStream in ) { super ( in ) ; } } 	0
package org . apache . poi . hssf . usermodel ; import java . util . Calendar ; import java . util . Date ; import java . util . GregorianCalendar ; public class HSSFDateUtil { private HSSFDateUtil ( ) { } private static final int BAD_DATE = - 1 ; private static final long DAY_MILLISECONDS = 24 * 60 * 60 * 1000 ; private static final double CAL_1900_ABSOLUTE = ( double ) absoluteDay ( new GregorianCalendar ( 1900 , Calendar . JANUARY , 1 ) ) - 2.0 ; public static double getExcelDate ( Date date ) { Calendar calStart = new GregorianCalendar ( ) ; calStart . setTime ( date ) ; if ( calStart . get ( Calendar . YEAR ) < 1900 ) { return BAD_DATE ; } else { double fraction = ( ( ( calStart . get ( Calendar . HOUR_OF_DAY ) * 60 + calStart . get ( Calendar . MINUTE ) ) * 60 + calStart . get ( Calendar . SECOND ) ) * 1000 + calStart . get ( Calendar . MILLISECOND ) ) / ( double ) DAY_MILLISECONDS ; calStart = dayStart ( calStart ) ; return fraction + ( double ) absoluteDay ( calStart ) - CAL_1900_ABSOLUTE ; } } public static Date getJavaDate ( double date ) { return getJavaDate ( date , false ) ; } public static Date getJavaDate ( double date , boolean use1904windowing ) { if ( isValidExcelDate ( date ) ) { int startYear = 1900 ; int dayAdjust = - 1 ; int wholeDays = ( int ) Math . floor ( date ) ; if ( use1904windowing ) { startYear = 1904 ; dayAdjust = 1 ; } else if ( wholeDays < 61 ) { dayAdjust = 0 ; } GregorianCalendar calendar = new GregorianCalendar ( startYear , 0 , wholeDays + dayAdjust ) ; int millisecondsInDay = ( int ) ( ( date - Math . floor ( date ) ) * ( double ) DAY_MILLISECONDS + 0.5 ) ; calendar . set ( GregorianCalendar . MILLISECOND , millisecondsInDay ) ; return calendar . getTime ( ) ; } else { return null ; } } public static boolean isInternalDateFormat ( int format ) { boolean retval = false ; switch ( format ) { case 0x0e : case 0x0f : case 0x10 : case 0x11 : case 0x12 : case 0x13 : case 0x14 : case 0x15 : case 0x16 : case 0x2d : case 0x2e : case 0x2f : retval = true ; break ; default : retval = false ; break ; } return retval ; } public static boolean isCellDateFormatted ( HSSFCell cell ) { if ( cell == null ) return false ; boolean bDate = false ; double d = cell . getNumericCellValue ( ) ; if ( HSSFDateUtil . isValidExcelDate ( d ) ) { HSSFCellStyle style = cell . getCellStyle ( ) ; int i = style . getDataFormat ( ) ; bDate = isInternalDateFormat ( i ) ; } return bDate ; } public static boolean isValidExcelDate ( double value ) { return ( value > - Double . MIN_VALUE ) ; } private static int absoluteDay ( Calendar cal ) { return cal . get ( Calendar . DAY_OF_YEAR ) + daysInPriorYears ( cal . get ( Calendar . YEAR ) ) ; } private static int daysInPriorYears ( int yr ) { if ( yr < 1601 ) { throw new IllegalArgumentException ( "'year' must be 1601 or greater" ) ; } int y = yr - 1601 ; int days = 365 * y + y / 4 - y / 100 + y / 400 ; return days ; } private static Calendar dayStart ( final Calendar cal ) { cal . get ( Calendar . HOUR_OF_DAY ) ; cal . set ( Calendar . HOUR_OF_DAY , 0 ) ; cal . set ( Calendar . MINUTE , 0 ) ; cal . set ( Calendar . SECOND , 0 ) ; cal . set ( Calendar . MILLISECOND , 0 ) ; cal . get ( Calendar . HOUR_OF_DAY ) ; return cal ; } } 	1
package org . apache . poi . hssf . record ; import org . apache . poi . util . LittleEndian ; public class PrintHeadersRecord extends Record { public final static short sid = 0x2a ; private short field_1_print_headers ; public PrintHeadersRecord ( ) { } public PrintHeadersRecord ( RecordInputStream in ) { super ( in ) ; } protected void validateSid ( short id ) { if ( id != sid ) { throw new RecordFormatException ( "NOT A PrintHeaders RECORD" ) ; } } protected void fillFields ( RecordInputStream in ) { field_1_print_headers = in . readShort ( ) ; } public void setPrintHeaders ( boolean p ) { if ( p == true ) { field_1_print_headers = 1 ; } else { field_1_print_headers = 0 ; } } public boolean getPrintHeaders ( ) { return ( field_1_print_headers == 1 ) ; } public String toString ( ) { StringBuffer buffer = new StringBuffer ( ) ; buffer . append ( "[PRINTHEADERS]\n" ) ; buffer . append ( "    .printheaders   = " ) . append ( getPrintHeaders ( ) ) . append ( "\n" ) ; buffer . append ( "[/PRINTHEADERS]\n" ) ; return buffer . toString ( ) ; } public int serialize ( int offset , byte [ ] data ) { LittleEndian . putShort ( data , 0 + offset , sid ) ; LittleEndian . putShort ( data , 2 + offset , ( short ) 0x2 ) ; LittleEndian . putShort ( data , 4 + offset , field_1_print_headers ) ; return getRecordSize ( ) ; } public int getRecordSize ( ) { return 6 ; } public short getSid ( ) { return sid ; } public Object clone ( ) { PrintHeadersRecord rec = new PrintHeadersRecord ( ) ; rec . field_1_print_headers = field_1_print_headers ; return rec ; } } 	1
package org . apache . poi . hssf . usermodel ; public class HSSFPolygon extends HSSFShape { int [ ] xPoints ; int [ ] yPoints ; int drawAreaWidth = 100 ; int drawAreaHeight = 100 ; HSSFPolygon ( HSSFShape parent , HSSFAnchor anchor ) { super ( parent , anchor ) ; } public int [ ] getXPoints ( ) { return xPoints ; } public int [ ] getYPoints ( ) { return yPoints ; } public void setPoints ( int [ ] xPoints , int [ ] yPoints ) { this . xPoints = cloneArray ( xPoints ) ; this . yPoints = cloneArray ( yPoints ) ; } private int [ ] cloneArray ( int [ ] a ) { int [ ] result = new int [ a . length ] ; for ( int i = 0 ; i < a . length ; i ++ ) result [ i ] = a [ i ] ; return result ; } public void setPolygonDrawArea ( int width , int height ) { this . drawAreaWidth = width ; this . drawAreaHeight = height ; } public int getDrawAreaWidth ( ) { return drawAreaWidth ; } public int getDrawAreaHeight ( ) { return drawAreaHeight ; } } 	0
package org . apache . poi . hssf . record . formula ; import org . apache . poi . util . LittleEndian ; import org . apache . poi . hssf . record . RecordInputStream ; public class FuncVarPtg extends AbstractFunctionPtg { public final static byte sid = 0x22 ; private final static int SIZE = 4 ; private FuncVarPtg ( ) { } public FuncVarPtg ( RecordInputStream in ) { field_1_num_args = in . readByte ( ) ; field_2_fnc_index = in . readShort ( ) ; } public FuncVarPtg ( String pName , byte pNumOperands ) { field_1_num_args = pNumOperands ; field_2_fnc_index = lookupIndex ( pName ) ; try { returnClass = ( ( Byte ) functionData [ field_2_fnc_index ] [ 0 ] ) . byteValue ( ) ; paramClass = ( byte [ ] ) functionData [ field_2_fnc_index ] [ 1 ] ; } catch ( NullPointerException npe ) { returnClass = Ptg . CLASS_VALUE ; paramClass = new byte [ ] { Ptg . CLASS_VALUE } ; } } public void writeBytes ( byte [ ] array , int offset ) { array [ offset + 0 ] = ( byte ) ( sid + ptgClass ) ; array [ offset + 1 ] = field_1_num_args ; LittleEndian . putShort ( array , offset + 2 , field_2_fnc_index ) ; } public int getNumberOfOperands ( ) { return field_1_num_args ; } public Object clone ( ) { FuncVarPtg ptg = new FuncVarPtg ( ) ; ptg . field_1_num_args = field_1_num_args ; ptg . field_2_fnc_index = field_2_fnc_index ; ptg . setClass ( ptgClass ) ; return ptg ; } public int getSize ( ) { return SIZE ; } public String toString ( ) { StringBuffer buffer = new StringBuffer ( ) ; buffer . append ( "<FunctionVarPtg>" ) . append ( "\n" ) . append ( "   field_1_num_args=" ) . append ( field_1_num_args ) . append ( "\n" ) . append ( "      name         =" ) . append ( lookupName ( field_2_fnc_index ) ) . append ( "\n" ) . append ( "   field_2_fnc_index=" ) . append ( field_2_fnc_index ) . append ( "\n" ) . append ( "</FunctionPtg>" ) ; return buffer . toString ( ) ; } } 	0
package org . apache . poi . hssf . record . formula ; import org . apache . poi . util . LittleEndian ; import org . apache . poi . util . BitField ; import org . apache . poi . hssf . model . Workbook ; import org . apache . poi . hssf . record . RecordInputStream ; public class AreaErrPtg extends AreaPtg { public final static byte sid = 0x2b ; private AreaErrPtg ( ) { super ( ) ; } public AreaErrPtg ( RecordInputStream in ) { super ( in ) ; } public String toString ( ) { StringBuffer buffer = new StringBuffer ( ) ; buffer . append ( "AreaErrPtg\n" ) ; buffer . append ( "firstRow = " + getFirstRow ( ) ) . append ( "\n" ) ; buffer . append ( "lastRow  = " + getLastRow ( ) ) . append ( "\n" ) ; buffer . append ( "firstCol = " + getFirstColumn ( ) ) . append ( "\n" ) ; buffer . append ( "lastCol  = " + getLastColumn ( ) ) . append ( "\n" ) ; buffer . append ( "firstColRowRel= " + isFirstRowRelative ( ) ) . append ( "\n" ) ; buffer . append ( "lastColRowRel = " + isLastRowRelative ( ) ) . append ( "\n" ) ; buffer . append ( "firstColRel   = " + isFirstColRelative ( ) ) . append ( "\n" ) ; buffer . append ( "lastColRel    = " + isLastColRelative ( ) ) . append ( "\n" ) ; return buffer . toString ( ) ; } public void writeBytes ( byte [ ] array , int offset ) { super . writeBytes ( array , offset ) ; array [ offset ] = ( byte ) ( sid + ptgClass ) ; } public String toFormulaString ( Workbook book ) { return "#REF!" ; } public Object clone ( ) { AreaErrPtg ptg = new AreaErrPtg ( ) ; ptg . setFirstRow ( getFirstRow ( ) ) ; ptg . setFirstColumn ( getFirstColumn ( ) ) ; ptg . setLastRow ( getLastRow ( ) ) ; ptg . setLastColumn ( getLastColumn ( ) ) ; ptg . setFirstColRelative ( isFirstColRelative ( ) ) ; ptg . setLastColRelative ( isLastColRelative ( ) ) ; ptg . setFirstRowRelative ( isFirstRowRelative ( ) ) ; ptg . setLastRowRelative ( isLastRowRelative ( ) ) ; ptg . setClass ( ptgClass ) ; return ptg ; } } 	0
package org . apache . poi . hssf . record ; public class DrawingSelectionRecord extends AbstractEscherHolderRecord { public static final short sid = 0xED ; public DrawingSelectionRecord ( ) { } public DrawingSelectionRecord ( RecordInputStream in ) { super ( in ) ; } protected String getRecordName ( ) { return "MSODRAWINGSELECTION" ; } public short getSid ( ) { return sid ; } } 	0
package org . apache . poi . hssf . usermodel ; import org . apache . poi . hssf . record . FooterRecord ; public class HSSFFooter extends Object { FooterRecord footerRecord ; String left ; String center ; String right ; protected HSSFFooter ( FooterRecord footerRecord ) { this . footerRecord = footerRecord ; String foot = footerRecord . getFooter ( ) ; while ( foot != null && foot . length ( ) > 1 ) { int pos = foot . length ( ) ; switch ( foot . substring ( 1 , 2 ) . charAt ( 0 ) ) { case 'L' : if ( foot . indexOf ( "&C" ) >= 0 ) { pos = Math . min ( pos , foot . indexOf ( "&C" ) ) ; } if ( foot . indexOf ( "&R" ) >= 0 ) { pos = Math . min ( pos , foot . indexOf ( "&R" ) ) ; } left = foot . substring ( 2 , pos ) ; foot = foot . substring ( pos ) ; break ; case 'C' : if ( foot . indexOf ( "&L" ) >= 0 ) { pos = Math . min ( pos , foot . indexOf ( "&L" ) ) ; } if ( foot . indexOf ( "&R" ) >= 0 ) { pos = Math . min ( pos , foot . indexOf ( "&R" ) ) ; } center = foot . substring ( 2 , pos ) ; foot = foot . substring ( pos ) ; break ; case 'R' : if ( foot . indexOf ( "&C" ) >= 0 ) { pos = Math . min ( pos , foot . indexOf ( "&C" ) ) ; } if ( foot . indexOf ( "&L" ) >= 0 ) { pos = Math . min ( pos , foot . indexOf ( "&L" ) ) ; } right = foot . substring ( 2 , pos ) ; foot = foot . substring ( pos ) ; break ; default : foot = null ; } } } public String getLeft ( ) { return left ; } public void setLeft ( String newLeft ) { left = newLeft ; createFooterString ( ) ; } public String getCenter ( ) { return center ; } public void setCenter ( String newCenter ) { center = newCenter ; createFooterString ( ) ; } public String getRight ( ) { return right ; } public void setRight ( String newRight ) { right = newRight ; createFooterString ( ) ; } private void createFooterString ( ) { footerRecord . setFooter ( "&C" + ( center == null ? "" : center ) + "&L" + ( left == null ? "" : left ) + "&R" + ( right == null ? "" : right ) ) ; footerRecord . setFooterLength ( ( byte ) footerRecord . getFooter ( ) . length ( ) ) ; } public static String fontSize ( short size ) { return "&" + size ; } public static String font ( String font , String style ) { return "&\"" + font + "," + style + "\"" ; } public static String page ( ) { return "&P" ; } public static String numPages ( ) { return "&N" ; } public static String date ( ) { return "&D" ; } public static String time ( ) { return "&T" ; } public static String file ( ) { return "&F" ; } public static String tab ( ) { return "&A" ; } public static String startUnderline ( ) { return "&U" ; } public static String endUnderline ( ) { return "&U" ; } public static String startDoubleUnderline ( ) { return "&E" ; } public static String endDoubleUnderline ( ) { return "&E" ; } } 	1
package org . apache . poi . hssf . usermodel ; import java . awt . * ; import java . awt . geom . AffineTransform ; import java . awt . image . BufferedImage ; import java . awt . image . BufferedImageOp ; import java . awt . image . ImageObserver ; import java . awt . image . RenderedImage ; import java . awt . image . renderable . RenderableImage ; import java . awt . font . GlyphVector ; import java . awt . font . FontRenderContext ; import java . util . Map ; import java . text . AttributedCharacterIterator ; public class DummyGraphics2d extends Graphics2D { BufferedImage img ; private Graphics2D g2D ; public DummyGraphics2d ( ) { img = new BufferedImage ( 1000 , 1000 , 2 ) ; g2D = ( Graphics2D ) img . getGraphics ( ) ; } public void addRenderingHints ( Map hints ) { System . out . println ( "addRenderingHinds(Map):" ) ; System . out . println ( "  hints = " + hints ) ; g2D . addRenderingHints ( hints ) ; } public void clip ( Shape s ) { System . out . println ( "clip(Shape):" ) ; System . out . println ( "  s = " + s ) ; g2D . clip ( s ) ; } public void draw ( Shape s ) { System . out . println ( "draw(Shape):" ) ; System . out . println ( "s = " + s ) ; g2D . draw ( s ) ; } public void drawGlyphVector ( GlyphVector g , float x , float y ) { System . out . println ( "drawGlyphVector(GlyphVector, float, float):" ) ; System . out . println ( "g = " + g ) ; System . out . println ( "x = " + x ) ; System . out . println ( "y = " + y ) ; g2D . drawGlyphVector ( g , x , y ) ; } public void drawImage ( BufferedImage img , BufferedImageOp op , int x , int y ) { System . out . println ( "drawImage(BufferedImage, BufferedImageOp, x, y):" ) ; System . out . println ( "img = " + img ) ; System . out . println ( "op = " + op ) ; System . out . println ( "x = " + x ) ; System . out . println ( "y = " + y ) ; g2D . drawImage ( img , op , x , y ) ; } public boolean drawImage ( Image img , AffineTransform xform , ImageObserver obs ) { System . out . println ( "drawImage(Image,AfflineTransform,ImageObserver):" ) ; System . out . println ( "img = " + img ) ; System . out . println ( "xform = " + xform ) ; System . out . println ( "obs = " + obs ) ; return g2D . drawImage ( img , xform , obs ) ; } public void drawRenderableImage ( RenderableImage img , AffineTransform xform ) { System . out . println ( "drawRenderableImage(RenderableImage, AfflineTransform):" ) ; System . out . println ( "img = " + img ) ; System . out . println ( "xform = " + xform ) ; g2D . drawRenderableImage ( img , xform ) ; } public void drawRenderedImage ( RenderedImage img , AffineTransform xform ) { System . out . println ( "drawRenderedImage(RenderedImage, AffineTransform):" ) ; System . out . println ( "img = " + img ) ; System . out . println ( "xform = " + xform ) ; g2D . drawRenderedImage ( img , xform ) ; } public void drawString ( AttributedCharacterIterator iterator , float x , float y ) { System . out . println ( "drawString(AttributedCharacterIterator):" ) ; System . out . println ( "iterator = " + iterator ) ; System . out . println ( "x = " + x ) ; System . out . println ( "y = " + y ) ; g2D . drawString ( iterator , x , y ) ; } public void drawString ( String s , float x , float y ) { System . out . println ( "drawString(s,x,y):" ) ; System . out . println ( "s = " + s ) ; System . out . println ( "x = " + x ) ; System . out . println ( "y = " + y ) ; g2D . drawString ( s , x , y ) ; } public void fill ( Shape s ) { System . out . println ( "fill(Shape):" ) ; System . out . println ( "s = " + s ) ; g2D . fill ( s ) ; } public Color getBackground ( ) { System . out . println ( "getBackground():" ) ; return g2D . getBackground ( ) ; } public Composite getComposite ( ) { System . out . println ( "getComposite():" ) ; return g2D . getComposite ( ) ; } public GraphicsConfiguration getDeviceConfiguration ( ) { System . out . println ( "getDeviceConfiguration():" ) ; return g2D . getDeviceConfiguration ( ) ; } public FontRenderContext getFontRenderContext ( ) { System . out . println ( "getFontRenderContext():" ) ; return g2D . getFontRenderContext ( ) ; } public Paint getPaint ( ) { System . out . println ( "getPaint():" ) ; return g2D . getPaint ( ) ; } public Object getRenderingHint ( RenderingHints . Key hintKey ) { System . out . println ( "getRenderingHint(RenderingHints.Key):" ) ; System . out . println ( "hintKey = " + hintKey ) ; return g2D . getRenderingHint ( hintKey ) ; } public RenderingHints getRenderingHints ( ) { System . out . println ( "getRenderingHints():" ) ; return g2D . getRenderingHints ( ) ; } public Stroke getStroke ( ) { System . out . println ( "getStroke():" ) ; return g2D . getStroke ( ) ; } public AffineTransform getTransform ( ) { System . out . println ( "getTransform():" ) ; return g2D . getTransform ( ) ; } public boolean hit ( Rectangle rect , Shape s , boolean onStroke ) { System . out . println ( "hit(Rectangle, Shape, onStroke):" ) ; System . out . println ( "rect = " + rect ) ; System . out . println ( "s = " + s ) ; System . out . println ( "onStroke = " + onStroke ) ; return g2D . hit ( rect , s , onStroke ) ; } public void rotate ( double theta ) { System . out . println ( "rotate(theta):" ) ; System . out . println ( "theta = " + theta ) ; g2D . rotate ( theta ) ; } public void rotate ( double theta , double x , double y ) { System . out . println ( "rotate(double,double,double):" ) ; System . out . println ( "theta = " + theta ) ; System . out . println ( "x = " + x ) ; System . out . println ( "y = " + y ) ; g2D . rotate ( theta , x , y ) ; } public void scale ( double sx , double sy ) { System . out . println ( "scale(double,double):" ) ; System . out . println ( "sx = " + sx ) ; System . out . println ( "sy" ) ; g2D . scale ( sx , sy ) ; } public void setBackground ( Color color ) { System . out . println ( "setBackground(Color):" ) ; System . out . println ( "color = " + color ) ; g2D . setBackground ( color ) ; } public void setComposite ( Composite comp ) { System . out . println ( "setComposite(Composite):" ) ; System . out . println ( "comp = " + comp ) ; g2D . setComposite ( comp ) ; } public void setPaint ( Paint paint ) { System . out . println ( "setPain(Paint):" ) ; System . out . println ( "paint = " + paint ) ; g2D . setPaint ( paint ) ; } public void setRenderingHint ( RenderingHints . Key hintKey , Object hintValue ) { System . out . println ( "setRenderingHint(RenderingHints.Key, Object):" ) ; System . out . println ( "hintKey = " + hintKey ) ; System . out . println ( "hintValue = " + hintValue ) ; g2D . setRenderingHint ( hintKey , hintValue ) ; } public void setRenderingHints ( Map hints ) { System . out . println ( "setRenderingHints(Map):" ) ; System . out . println ( "hints = " + hints ) ; g2D . setRenderingHints ( hints ) ; } public void setStroke ( Stroke s ) { System . out . println ( "setStroke(Stoke):" ) ; System . out . println ( "s = " + s ) ; g2D . setStroke ( s ) ; } public void setTransform ( AffineTransform Tx ) { System . out . println ( "setTransform():" ) ; System . out . println ( "Tx = " + Tx ) ; g2D . setTransform ( Tx ) ; } public void shear ( double shx , double shy ) { System . out . println ( "shear(shx, dhy):" ) ; System . out . println ( "shx = " + shx ) ; System . out . println ( "shy = " + shy ) ; g2D . shear ( shx , shy ) ; } public void transform ( AffineTransform Tx ) { System . out . println ( "transform(AffineTransform):" ) ; System . out . println ( "Tx = " + Tx ) ; g2D . transform ( Tx ) ; } public void translate ( double tx , double ty ) { System . out . println ( "translate(double, double):" ) ; System . out . println ( "tx = " + tx ) ; System . out . println ( "ty = " + ty ) ; g2D . translate ( tx , ty ) ; } public void clearRect ( int x , int y , int width , int height ) { System . out . println ( "clearRect(int,int,int,int):" ) ; System . out . println ( "x = " + x ) ; System . out . println ( "y = " + y ) ; System . out . println ( "width = " + width ) ; System . out . println ( "height = " + height ) ; g2D . clearRect ( x , y , width , height ) ; } public void clipRect ( int x , int y , int width , int height ) { System . out . println ( "clipRect(int, int, int, int):" ) ; System . out . println ( "x = " + x ) ; System . out . println ( "y = " + y ) ; System . out . println ( "width = " + width ) ; System . out . println ( "height = " + height ) ; g2D . clipRect ( x , y , width , height ) ; } public void copyArea ( int x , int y , int width , int height , int dx , int dy ) { System . out . println ( "copyArea(int,int,int,int):" ) ; System . out . println ( "x = " + x ) ; System . out . println ( "y = " + y ) ; System . out . println ( "width = " + width ) ; System . out . println ( "height = " + height ) ; g2D . copyArea ( x , y , width , height , dx , dy ) ; } public Graphics create ( ) { System . out . println ( "create():" ) ; return g2D . create ( ) ; } public Graphics create ( int x , int y , int width , int height ) { System . out . println ( "create(int,int,int,int):" ) ; System . out . println ( "x = " + x ) ; System . out . println ( "y = " + y ) ; System . out . println ( "width = " + width ) ; System . out . println ( "height = " + height ) ; return g2D . create ( x , y , width , height ) ; } public void dispose ( ) { System . out . println ( "dispose():" ) ; g2D . dispose ( ) ; } public void draw3DRect ( int x , int y , int width , int height , boolean raised ) { System . out . println ( "draw3DRect(int,int,int,int,boolean):" ) ; System . out . println ( "x = " + x ) ; System . out . println ( "y = " + y ) ; System . out . println ( "width = " + width ) ; System . out . println ( "height = " + height ) ; System . out . println ( "raised = " + raised ) ; g2D . draw3DRect ( x , y , width , height , raised ) ; } public void drawArc ( int x , int y , int width , int height , int startAngle , int arcAngle ) { System . out . println ( "drawArc(int,int,int,int,int,int):" ) ; System . out . println ( "x = " + x ) ; System . out . println ( "y = " + y ) ; System . out . println ( "width = " + width ) ; System . out . println ( "height = " + height ) ; System . out . println ( "startAngle = " + startAngle ) ; System . out . println ( "arcAngle = " + arcAngle ) ; g2D . drawArc ( x , y , width , height , startAngle , arcAngle ) ; } public void drawBytes ( byte data [ ] , int offset , int length , int x , int y ) { System . out . println ( "drawBytes(byte[],int,int,int,int):" ) ; System . out . println ( "data = " + data ) ; System . out . println ( "offset = " + offset ) ; System . out . println ( "length = " + length ) ; System . out . println ( "x = " + x ) ; System . out . println ( "y = " + y ) ; g2D . drawBytes ( data , offset , length , x , y ) ; } public void drawChars ( char data [ ] , int offset , int length , int x , int y ) { System . out . println ( "drawChars(data,int,int,int,int):" ) ; System . out . println ( "data = " + data . toString ( ) ) ; System . out . println ( "offset = " + offset ) ; System . out . println ( "length = " + length ) ; System . out . println ( "x = " + x ) ; System . out . println ( "y = " + y ) ; g2D . drawChars ( data , offset , length , x , y ) ; } public boolean drawImage ( Image img , int dx1 , int dy1 , int dx2 , int dy2 , int sx1 , int sy1 , int sx2 , int sy2 , ImageObserver observer ) { System . out . println ( "drawImage(Image,int,int,int,int,int,int,int,int,ImageObserver):" ) ; System . out . println ( "img = " + img ) ; System . out . println ( "dx1 = " + dx1 ) ; System . out . println ( "dy1 = " + dy1 ) ; System . out . println ( "dx2 = " + dx2 ) ; System . out . println ( "dy2 = " + dy2 ) ; System . out . println ( "sx1 = " + sx1 ) ; System . out . println ( "sy1 = " + sy1 ) ; System . out . println ( "sx2 = " + sx2 ) ; System . out . println ( "sy2 = " + sy2 ) ; System . out . println ( "observer = " + observer ) ; return g2D . drawImage ( img , dx1 , dy1 , dx2 , dy2 , sx1 , sy1 , sx2 , sy2 , observer ) ; } public boolean drawImage ( Image img , int dx1 , int dy1 , int dx2 , int dy2 , int sx1 , int sy1 , int sx2 , int sy2 , Color bgcolor , ImageObserver observer ) { System . out . println ( "drawImage(Image,int,int,int,int,int,int,int,int,Color,ImageObserver):" ) ; System . out . println ( "img = " + img ) ; System . out . println ( "dx1 = " + dx1 ) ; System . out . println ( "dy1 = " + dy1 ) ; System . out . println ( "dx2 = " + dx2 ) ; System . out . println ( "dy2 = " + dy2 ) ; System . out . println ( "sx1 = " + sx1 ) ; System . out . println ( "sy1 = " + sy1 ) ; System . out . println ( "sx2 = " + sx2 ) ; System . out . println ( "sy2 = " + sy2 ) ; System . out . println ( "bgcolor = " + bgcolor ) ; System . out . println ( "observer = " + observer ) ; return g2D . drawImage ( img , dx1 , dy1 , dx2 , dy2 , sx1 , sy1 , sx2 , sy2 , bgcolor , observer ) ; } public boolean drawImage ( Image img , int x , int y , Color bgcolor , ImageObserver observer ) { System . out . println ( "drawImage(Image,int,int,Color,ImageObserver):" ) ; System . out . println ( "img = " + img ) ; System . out . println ( "x = " + x ) ; System . out . println ( "y = " + y ) ; System . out . println ( "bgcolor = " + bgcolor ) ; System . out . println ( "observer = " + observer ) ; return g2D . drawImage ( img , x , y , bgcolor , observer ) ; } public boolean drawImage ( Image img , int x , int y , ImageObserver observer ) { System . out . println ( "drawImage(Image,int,int,observer):" ) ; System . out . println ( "img = " + img ) ; System . out . println ( "x = " + x ) ; System . out . println ( "y = " + y ) ; System . out . println ( "observer = " + observer ) ; return g2D . drawImage ( img , x , y , observer ) ; } public boolean drawImage ( Image img , int x , int y , int width , int height , Color bgcolor , ImageObserver observer ) { System . out . println ( "drawImage(Image,int,int,int,int,Color,ImageObserver):" ) ; System . out . println ( "img = " + img ) ; System . out . println ( "x = " + x ) ; System . out . println ( "y = " + y ) ; System . out . println ( "width = " + width ) ; System . out . println ( "height = " + height ) ; System . out . println ( "bgcolor = " + bgcolor ) ; System . out . println ( "observer = " + observer ) ; return g2D . drawImage ( img , x , y , width , height , bgcolor , observer ) ; } public boolean drawImage ( Image img , int x , int y , int width , int height , ImageObserver observer ) { System . out . println ( "drawImage(Image,int,int,width,height,observer):" ) ; System . out . println ( "img = " + img ) ; System . out . println ( "x = " + x ) ; System . out . println ( "y = " + y ) ; System . out . println ( "width = " + width ) ; System . out . println ( "height = " + height ) ; System . out . println ( "observer = " + observer ) ; return g2D . drawImage ( img , x , y , width , height , observer ) ; } public void drawLine ( int x1 , int y1 , int x2 , int y2 ) { System . out . println ( "drawLine(int,int,int,int):" ) ; System . out . println ( "x1 = " + x1 ) ; System . out . println ( "y1 = " + y1 ) ; System . out . println ( "x2 = " + x2 ) ; System . out . println ( "y2 = " + y2 ) ; g2D . drawLine ( x1 , y1 , x2 , y2 ) ; } public void drawOval ( int x , int y , int width , int height ) { System . out . println ( "drawOval(int,int,int,int):" ) ; System . out . println ( "x = " + x ) ; System . out . println ( "y = " + y ) ; System . out . println ( "width = " + width ) ; System . out . println ( "height = " + height ) ; g2D . drawOval ( x , y , width , height ) ; } public void drawPolygon ( Polygon p ) { System . out . println ( "drawPolygon(Polygon):" ) ; System . out . println ( "p = " + p ) ; g2D . drawPolygon ( p ) ; } public void drawPolygon ( int xPoints [ ] , int yPoints [ ] , int nPoints ) { System . out . println ( "drawPolygon(int[],int[],int):" ) ; System . out . println ( "xPoints = " + xPoints ) ; System . out . println ( "yPoints = " + yPoints ) ; System . out . println ( "nPoints = " + nPoints ) ; g2D . drawPolygon ( xPoints , yPoints , nPoints ) ; } public void drawPolyline ( int xPoints [ ] , int yPoints [ ] , int nPoints ) { System . out . println ( "drawPolyline(int[],int[],int):" ) ; System . out . println ( "xPoints = " + xPoints ) ; System . out . println ( "yPoints = " + yPoints ) ; System . out . println ( "nPoints = " + nPoints ) ; g2D . drawPolyline ( xPoints , yPoints , nPoints ) ; } public void drawRect ( int x , int y , int width , int height ) { System . out . println ( "drawRect(int,int,int,int):" ) ; System . out . println ( "x = " + x ) ; System . out . println ( "y = " + y ) ; System . out . println ( "width = " + width ) ; System . out . println ( "height = " + height ) ; g2D . drawRect ( x , y , width , height ) ; } public void drawRoundRect ( int x , int y , int width , int height , int arcWidth , int arcHeight ) { System . out . println ( "drawRoundRect(int,int,int,int,int,int):" ) ; System . out . println ( "x = " + x ) ; System . out . println ( "y = " + y ) ; System . out . println ( "width = " + width ) ; System . out . println ( "height = " + height ) ; System . out . println ( "arcWidth = " + arcWidth ) ; System . out . println ( "arcHeight = " + arcHeight ) ; g2D . drawRoundRect ( x , y , width , height , arcWidth , arcHeight ) ; } public void drawString ( AttributedCharacterIterator iterator , int x , int y ) { System . out . println ( "drawString(AttributedCharacterIterator,int,int):" ) ; System . out . println ( "iterator = " + iterator ) ; System . out . println ( "x = " + x ) ; System . out . println ( "y = " + y ) ; g2D . drawString ( iterator , x , y ) ; } public void drawString ( String str , int x , int y ) { System . out . println ( "drawString(str,int,int):" ) ; System . out . println ( "str = " + str ) ; System . out . println ( "x = " + x ) ; System . out . println ( "y = " + y ) ; g2D . drawString ( str , x , y ) ; } public void fill3DRect ( int x , int y , int width , int height , boolean raised ) { System . out . println ( "fill3DRect(int,int,int,int,boolean):" ) ; System . out . println ( "x = " + x ) ; System . out . println ( "y = " + y ) ; System . out . println ( "width = " + width ) ; System . out . println ( "height = " + height ) ; System . out . println ( "raised = " + raised ) ; g2D . fill3DRect ( x , y , width , height , raised ) ; } public void fillArc ( int x , int y , int width , int height , int startAngle , int arcAngle ) { System . out . println ( "fillArc(int,int,int,int,int,int):" ) ; System . out . println ( "x = " + x ) ; System . out . println ( "y = " + y ) ; System . out . println ( "width = " + width ) ; System . out . println ( "height = " + height ) ; System . out . println ( "startAngle = " + startAngle ) ; System . out . println ( "arcAngle = " + arcAngle ) ; g2D . fillArc ( x , y , width , height , startAngle , arcAngle ) ; } public void fillOval ( int x , int y , int width , int height ) { System . out . println ( "fillOval(int,int,int,int):" ) ; System . out . println ( "x = " + x ) ; System . out . println ( "y = " + y ) ; System . out . println ( "width = " + width ) ; System . out . println ( "height = " + height ) ; g2D . fillOval ( x , y , width , height ) ; } public void fillPolygon ( Polygon p ) { System . out . println ( "fillPolygon(Polygon):" ) ; System . out . println ( "p = " + p ) ; g2D . fillPolygon ( p ) ; } public void fillPolygon ( int xPoints [ ] , int yPoints [ ] , int nPoints ) { System . out . println ( "fillPolygon(int[],int[],int):" ) ; System . out . println ( "xPoints = " + xPoints ) ; System . out . println ( "yPoints = " + yPoints ) ; System . out . println ( "nPoints = " + nPoints ) ; g2D . fillPolygon ( xPoints , yPoints , nPoints ) ; } public void fillRect ( int x , int y , int width , int height ) { System . out . println ( "fillRect(int,int,int,int):" ) ; System . out . println ( "x = " + x ) ; System . out . println ( "y = " + y ) ; System . out . println ( "width = " + width ) ; System . out . println ( "height = " + height ) ; g2D . fillRect ( x , y , width , height ) ; } public void fillRoundRect ( int x , int y , int width , int height , int arcWidth , int arcHeight ) { System . out . println ( "fillRoundRect(int,int,int,int,int,int):" ) ; System . out . println ( "x = " + x ) ; System . out . println ( "y = " + y ) ; System . out . println ( "width = " + width ) ; System . out . println ( "height = " + height ) ; g2D . fillRoundRect ( x , y , width , height , arcWidth , arcHeight ) ; } public void finalize ( ) { System . out . println ( "finalize():" ) ; g2D . finalize ( ) ; } public Shape getClip ( ) { System . out . println ( "getClip():" ) ; return g2D . getClip ( ) ; } public Rectangle getClipBounds ( ) { System . out . println ( "getClipBounds():" ) ; return g2D . getClipBounds ( ) ; } public Rectangle getClipBounds ( Rectangle r ) { System . out . println ( "getClipBounds(Rectangle):" ) ; System . out . println ( "r = " + r ) ; return g2D . getClipBounds ( r ) ; } public Rectangle getClipRect ( ) { System . out . println ( "getClipRect():" ) ; return g2D . getClipRect ( ) ; } public Color getColor ( ) { System . out . println ( "getColor():" ) ; return g2D . getColor ( ) ; } public Font getFont ( ) { System . out . println ( "getFont():" ) ; return g2D . getFont ( ) ; } public FontMetrics getFontMetrics ( ) { System . out . println ( "getFontMetrics():" ) ; return g2D . getFontMetrics ( ) ; } public FontMetrics getFontMetrics ( Font f ) { System . out . println ( "getFontMetrics():" ) ; return g2D . getFontMetrics ( f ) ; } public boolean hitClip ( int x , int y , int width , int height ) { System . out . println ( "hitClip(int,int,int,int):" ) ; System . out . println ( "x = " + x ) ; System . out . println ( "y = " + y ) ; System . out . println ( "width = " + width ) ; System . out . println ( "height = " + height ) ; return g2D . hitClip ( x , y , width , height ) ; } public void setClip ( Shape clip ) { System . out . println ( "setClip(Shape):" ) ; System . out . println ( "clip = " + clip ) ; g2D . setClip ( clip ) ; } public void setClip ( int x , int y , int width , int height ) { System . out . println ( "setClip(int,int,int,int):" ) ; System . out . println ( "x = " + x ) ; System . out . println ( "y = " + y ) ; System . out . println ( "width = " + width ) ; System . out . println ( "height = " + height ) ; g2D . setClip ( x , y , width , height ) ; } public void setColor ( Color c ) { System . out . println ( "setColor():" ) ; System . out . println ( "c = " + c ) ; g2D . setColor ( c ) ; } public void setFont ( Font font ) { System . out . println ( "setFont(Font):" ) ; System . out . println ( "font = " + font ) ; g2D . setFont ( font ) ; } public void setPaintMode ( ) { System . out . println ( "setPaintMode():" ) ; g2D . setPaintMode ( ) ; } public void setXORMode ( Color c1 ) { System . out . println ( "setXORMode(Color):" ) ; System . out . println ( "c1 = " + c1 ) ; g2D . setXORMode ( c1 ) ; } public String toString ( ) { System . out . println ( "toString():" ) ; return g2D . toString ( ) ; } public void translate ( int x , int y ) { System . out . println ( "translate(int,int):" ) ; System . out . println ( "x = " + x ) ; System . out . println ( "y = " + y ) ; g2D . translate ( x , y ) ; } } 	0
package org . apache . poi . ddf ; abstract public class EscherProperty { protected short id ; public EscherProperty ( short id ) { this . id = id ; } public EscherProperty ( short propertyNumber , boolean isComplex , boolean isBlipId ) { this . id = ( short ) ( propertyNumber + ( isComplex ? 0x8000 : 0x0 ) + ( isBlipId ? 0x4000 : 0x0 ) ) ; } public short getId ( ) { return id ; } public short getPropertyNumber ( ) { return ( short ) ( id & ( short ) 0x3FFF ) ; } public boolean isComplex ( ) { return ( id & ( short ) 0x8000 ) != 0 ; } public boolean isBlipId ( ) { return ( id & ( short ) 0x4000 ) != 0 ; } public String getName ( ) { return EscherProperties . getPropertyName ( id ) ; } public int getPropertySize ( ) { return 6 ; } abstract public int serializeSimplePart ( byte [ ] data , int pos ) ; abstract public int serializeComplexPart ( byte [ ] data , int pos ) ; } 	1
package org . apache . poi . hssf . record ; import org . apache . poi . util . LittleEndian ; public class GutsRecord extends Record { public final static short sid = 0x80 ; private short field_1_left_row_gutter ; private short field_2_top_col_gutter ; private short field_3_row_level_max ; private short field_4_col_level_max ; public GutsRecord ( ) { } public GutsRecord ( RecordInputStream in ) { super ( in ) ; } protected void validateSid ( short id ) { if ( id != sid ) { throw new RecordFormatException ( "NOT A Guts RECORD" ) ; } } protected void fillFields ( RecordInputStream in ) { field_1_left_row_gutter = in . readShort ( ) ; field_2_top_col_gutter = in . readShort ( ) ; field_3_row_level_max = in . readShort ( ) ; field_4_col_level_max = in . readShort ( ) ; } public void setLeftRowGutter ( short gut ) { field_1_left_row_gutter = gut ; } public void setTopColGutter ( short gut ) { field_2_top_col_gutter = gut ; } public void setRowLevelMax ( short max ) { field_3_row_level_max = max ; } public void setColLevelMax ( short max ) { field_4_col_level_max = max ; } public short getLeftRowGutter ( ) { return field_1_left_row_gutter ; } public short getTopColGutter ( ) { return field_2_top_col_gutter ; } public short getRowLevelMax ( ) { return field_3_row_level_max ; } public short getColLevelMax ( ) { return field_4_col_level_max ; } public String toString ( ) { StringBuffer buffer = new StringBuffer ( ) ; buffer . append ( "[GUTS]\n" ) ; buffer . append ( "    .leftgutter     = " ) . append ( Integer . toHexString ( getLeftRowGutter ( ) ) ) . append ( "\n" ) ; buffer . append ( "    .topgutter      = " ) . append ( Integer . toHexString ( getTopColGutter ( ) ) ) . append ( "\n" ) ; buffer . append ( "    .rowlevelmax    = " ) . append ( Integer . toHexString ( getRowLevelMax ( ) ) ) . append ( "\n" ) ; buffer . append ( "    .collevelmax    = " ) . append ( Integer . toHexString ( getColLevelMax ( ) ) ) . append ( "\n" ) ; buffer . append ( "[/GUTS]\n" ) ; return buffer . toString ( ) ; } public int serialize ( int offset , byte [ ] data ) { LittleEndian . putShort ( data , 0 + offset , sid ) ; LittleEndian . putShort ( data , 2 + offset , ( short ) 0x8 ) ; LittleEndian . putShort ( data , 4 + offset , getLeftRowGutter ( ) ) ; LittleEndian . putShort ( data , 6 + offset , getTopColGutter ( ) ) ; LittleEndian . putShort ( data , 8 + offset , getRowLevelMax ( ) ) ; LittleEndian . putShort ( data , 10 + offset , getColLevelMax ( ) ) ; return getRecordSize ( ) ; } public int getRecordSize ( ) { return 12 ; } public short getSid ( ) { return sid ; } public Object clone ( ) { GutsRecord rec = new GutsRecord ( ) ; rec . field_1_left_row_gutter = field_1_left_row_gutter ; rec . field_2_top_col_gutter = field_2_top_col_gutter ; rec . field_3_row_level_max = field_3_row_level_max ; rec . field_4_col_level_max = field_4_col_level_max ; return rec ; } } 	1
package org . apache . poi . hssf . util ; import org . apache . poi . hssf . record . MergeCellsRecord . MergedRegion ; public class Region implements Comparable { private int rowFrom ; private short colFrom ; private int rowTo ; private short colTo ; public Region ( ) { } public Region ( int rowFrom , short colFrom , int rowTo , short colTo ) { this . rowFrom = rowFrom ; this . rowTo = rowTo ; this . colFrom = colFrom ; this . colTo = colTo ; } public Region ( MergedRegion region ) { this ( region . row_from , region . col_from , region . row_to , region . col_to ) ; } public short getColumnFrom ( ) { return colFrom ; } public int getRowFrom ( ) { return rowFrom ; } public short getColumnTo ( ) { return colTo ; } public int getRowTo ( ) { return rowTo ; } public void setColumnFrom ( short colFrom ) { this . colFrom = colFrom ; } public void setRowFrom ( int rowFrom ) { this . rowFrom = rowFrom ; } public void setColumnTo ( short colTo ) { this . colTo = colTo ; } public void setRowTo ( int rowTo ) { this . rowTo = rowTo ; } public boolean contains ( int row , short col ) { if ( ( this . rowFrom <= row ) && ( this . rowTo >= row ) && ( this . colFrom <= col ) && ( this . colTo >= col ) ) { return true ; } return false ; } public boolean equals ( Region r ) { return ( compareTo ( r ) == 0 ) ; } public int compareTo ( Region r ) { if ( ( this . getRowFrom ( ) == r . getRowFrom ( ) ) && ( this . getColumnFrom ( ) == r . getColumnFrom ( ) ) && ( this . getRowTo ( ) == r . getRowTo ( ) ) && ( this . getColumnTo ( ) == r . getColumnTo ( ) ) ) { return 0 ; } if ( ( this . getRowFrom ( ) < r . getRowFrom ( ) ) || ( this . getColumnFrom ( ) < r . getColumnFrom ( ) ) || ( this . getRowTo ( ) < r . getRowTo ( ) ) || ( this . getColumnTo ( ) < r . getColumnTo ( ) ) ) { return 1 ; } return - 1 ; } public int compareTo ( Object o ) { return compareTo ( ( Region ) o ) ; } public int getArea ( ) { return ( ( 1 + ( getRowTo ( ) - getRowFrom ( ) ) ) * ( 1 + ( getColumnTo ( ) - getColumnFrom ( ) ) ) ) ; } } 	0
package org . apache . poi . hssf . record . formula ; import org . apache . poi . util . LittleEndian ; import org . apache . poi . util . BitField ; import org . apache . poi . hssf . record . RecordInputStream ; import org . apache . poi . hssf . util . AreaReference ; import org . apache . poi . hssf . util . CellReference ; import org . apache . poi . hssf . model . Workbook ; public class AreaNVPtg extends AreaPtg { public final static short sid = 0x4D ; protected AreaNVPtg ( ) { } public AreaNVPtg ( RecordInputStream in ) { super ( in ) ; } public void writeBytes ( byte [ ] array , int offset ) { throw new RuntimeException ( "Coding Error: This method should never be called. This ptg should be converted" ) ; } public String getAreaPtgName ( ) { return "AreaNVPtg" ; } public String toFormulaString ( Workbook book ) { throw new RuntimeException ( "Coding Error: This method should never be called. This ptg should be converted" ) ; } public Object clone ( ) { throw new RuntimeException ( "Coding Error: This method should never be called. This ptg should be converted" ) ; } } 	0
package org . apache . poi . hssf . usermodel ; import org . apache . poi . ddf . EscherBSERecord ; import org . apache . poi . ddf . EscherBitmapBlip ; import org . apache . poi . ddf . EscherRecord ; import org . apache . poi . ddf . EscherBlipRecord ; import org . apache . poi . hssf . eventmodel . EventRecordFactory ; import org . apache . poi . hssf . model . Sheet ; import org . apache . poi . hssf . model . Workbook ; import org . apache . poi . hssf . record . * ; import org . apache . poi . hssf . record . formula . Area3DPtg ; import org . apache . poi . hssf . record . formula . MemFuncPtg ; import org . apache . poi . hssf . record . formula . UnionPtg ; import org . apache . poi . hssf . util . CellReference ; import org . apache . poi . poifs . filesystem . * ; import org . apache . poi . util . POILogFactory ; import org . apache . poi . util . POILogger ; import java . io . ByteArrayInputStream ; import java . io . FileNotFoundException ; import java . io . IOException ; import java . io . InputStream ; import java . io . OutputStream ; import java . io . PrintWriter ; import java . util . ArrayList ; import java . util . Iterator ; import java . util . List ; import java . util . Stack ; public class HSSFWorkbook { private static final int DEBUG = POILogger . DEBUG ; public final static int INITIAL_CAPACITY = 3 ; private Workbook workbook ; protected ArrayList sheets ; private ArrayList names ; private boolean preserveNodes ; private POIFSFileSystem poifs ; private HSSFDataFormat formatter ; public static final int PICTURE_TYPE_EMF = 2 ; public static final int PICTURE_TYPE_WMF = 3 ; public static final int PICTURE_TYPE_PICT = 4 ; public static final int PICTURE_TYPE_JPEG = 5 ; public static final int PICTURE_TYPE_PNG = 6 ; public static final int PICTURE_TYPE_DIB = 7 ; private static POILogger log = POILogFactory . getLogger ( HSSFWorkbook . class ) ; public HSSFWorkbook ( ) { this ( Workbook . createWorkbook ( ) ) ; } protected HSSFWorkbook ( Workbook book ) { workbook = book ; sheets = new ArrayList ( INITIAL_CAPACITY ) ; names = new ArrayList ( INITIAL_CAPACITY ) ; } public HSSFWorkbook ( POIFSFileSystem fs ) throws IOException { this ( fs , true ) ; } public HSSFWorkbook ( POIFSFileSystem fs , boolean preserveNodes ) throws IOException { this . preserveNodes = preserveNodes ; if ( preserveNodes ) { this . poifs = fs ; } sheets = new ArrayList ( INITIAL_CAPACITY ) ; names = new ArrayList ( INITIAL_CAPACITY ) ; String workbookName = "Workbook" ; try { fs . getRoot ( ) . getEntry ( workbookName ) ; } catch ( FileNotFoundException fe ) { try { workbookName = "WORKBOOK" ; fs . getRoot ( ) . getEntry ( workbookName ) ; } catch ( FileNotFoundException wfe ) { throw new IllegalArgumentException ( "The supplied POIFSFileSystem contained neither a 'Workbook' entry, nor a 'WORKBOOK' entry. Is it really an excel file?" ) ; } } InputStream stream = fs . createDocumentInputStream ( workbookName ) ; EventRecordFactory factory = new EventRecordFactory ( ) ; List records = RecordFactory . createRecords ( stream ) ; workbook = Workbook . createWorkbook ( records ) ; setPropertiesFromWorkbook ( workbook ) ; int recOffset = workbook . getNumRecords ( ) ; int sheetNum = 0 ; convertLabelRecords ( records , recOffset ) ; while ( recOffset < records . size ( ) ) { Sheet sheet = Sheet . createSheet ( records , sheetNum ++ , recOffset ) ; recOffset = sheet . getEofLoc ( ) + 1 ; if ( recOffset == 1 ) { break ; } HSSFSheet hsheet = new HSSFSheet ( workbook , sheet ) ; sheets . add ( hsheet ) ; } for ( int i = 0 ; i < workbook . getNumNames ( ) ; ++ i ) { HSSFName name = new HSSFName ( workbook , workbook . getNameRecord ( i ) ) ; names . add ( name ) ; } } public HSSFWorkbook ( InputStream s ) throws IOException { this ( s , true ) ; } public HSSFWorkbook ( InputStream s , boolean preserveNodes ) throws IOException { this ( new POIFSFileSystem ( s ) , preserveNodes ) ; } private void setPropertiesFromWorkbook ( Workbook book ) { this . workbook = book ; } private void convertLabelRecords ( List records , int offset ) { if ( log . check ( POILogger . DEBUG ) ) log . log ( POILogger . DEBUG , "convertLabelRecords called" ) ; for ( int k = offset ; k < records . size ( ) ; k ++ ) { Record rec = ( Record ) records . get ( k ) ; if ( rec . getSid ( ) == LabelRecord . sid ) { LabelRecord oldrec = ( LabelRecord ) rec ; records . remove ( k ) ; LabelSSTRecord newrec = new LabelSSTRecord ( ) ; int stringid = workbook . addSSTString ( new UnicodeString ( oldrec . getValue ( ) ) ) ; newrec . setRow ( oldrec . getRow ( ) ) ; newrec . setColumn ( oldrec . getColumn ( ) ) ; newrec . setXFIndex ( oldrec . getXFIndex ( ) ) ; newrec . setSSTIndex ( stringid ) ; records . add ( k , newrec ) ; } } if ( log . check ( POILogger . DEBUG ) ) log . log ( POILogger . DEBUG , "convertLabelRecords exit" ) ; } public void setSheetOrder ( String sheetname , int pos ) { workbook . setSheetOrder ( sheetname , pos ) ; } public void setSelectedTab ( short index ) { workbook . getWindowOne ( ) . setSelectedTab ( index ) ; } public short getSelectedTab ( ) { return workbook . getWindowOne ( ) . getSelectedTab ( ) ; } public void setDisplayedTab ( short index ) { workbook . getWindowOne ( ) . setDisplayedTab ( index ) ; } public short getDisplayedTab ( ) { return workbook . getWindowOne ( ) . getDisplayedTab ( ) ; } public final static byte ENCODING_COMPRESSED_UNICODE = 0 ; public final static byte ENCODING_UTF_16 = 1 ; public void setSheetName ( int sheet , String name ) { if ( workbook . doesContainsSheetName ( name , sheet ) ) throw new IllegalArgumentException ( "The workbook already contains a sheet with this name" ) ; if ( sheet > ( sheets . size ( ) - 1 ) ) { throw new RuntimeException ( "Sheet out of bounds" ) ; } workbook . setSheetName ( sheet , name ) ; } public void setSheetName ( int sheet , String name , short encoding ) { if ( workbook . doesContainsSheetName ( name , sheet ) ) throw new IllegalArgumentException ( "The workbook already contains a sheet with this name" ) ; if ( sheet > ( sheets . size ( ) - 1 ) ) { throw new RuntimeException ( "Sheet out of bounds" ) ; } switch ( encoding ) { case ENCODING_COMPRESSED_UNICODE : case ENCODING_UTF_16 : break ; default : throw new RuntimeException ( "Unsupported encoding" ) ; } workbook . setSheetName ( sheet , name , encoding ) ; } public String getSheetName ( int sheet ) { if ( sheet > ( sheets . size ( ) - 1 ) ) { throw new RuntimeException ( "Sheet out of bounds" ) ; } return workbook . getSheetName ( sheet ) ; } public int getSheetIndex ( String name ) { int retval = workbook . getSheetIndex ( name ) ; return retval ; } public HSSFSheet createSheet ( ) { HSSFSheet sheet = new HSSFSheet ( workbook ) ; sheets . add ( sheet ) ; workbook . setSheetName ( sheets . size ( ) - 1 , "Sheet" + ( sheets . size ( ) - 1 ) ) ; WindowTwoRecord windowTwo = ( WindowTwoRecord ) sheet . getSheet ( ) . findFirstRecordBySid ( WindowTwoRecord . sid ) ; windowTwo . setSelected ( sheets . size ( ) == 1 ) ; windowTwo . setPaged ( sheets . size ( ) == 1 ) ; return sheet ; } public HSSFSheet cloneSheet ( int sheetNum ) { HSSFSheet srcSheet = ( HSSFSheet ) sheets . get ( sheetNum ) ; String srcName = workbook . getSheetName ( sheetNum ) ; if ( srcSheet != null ) { HSSFSheet clonedSheet = srcSheet . cloneSheet ( workbook ) ; WindowTwoRecord windowTwo = ( WindowTwoRecord ) clonedSheet . getSheet ( ) . findFirstRecordBySid ( WindowTwoRecord . sid ) ; windowTwo . setSelected ( sheets . size ( ) == 1 ) ; windowTwo . setPaged ( sheets . size ( ) == 1 ) ; sheets . add ( clonedSheet ) ; int i = 1 ; while ( true ) { String name = srcName ; String index = Integer . toString ( i ++ ) ; if ( name . length ( ) + index . length ( ) + 2 < 31 ) name = name + "(" + index + ")" ; else name = name . substring ( 0 , 31 - index . length ( ) - 2 ) + "(" + index + ")" ; if ( workbook . getSheetIndex ( name ) == - 1 ) { workbook . setSheetName ( sheets . size ( ) - 1 , name ) ; break ; } } return clonedSheet ; } return null ; } public HSSFSheet createSheet ( String sheetname ) { if ( workbook . doesContainsSheetName ( sheetname , sheets . size ( ) ) ) throw new IllegalArgumentException ( "The workbook already contains a sheet of this name" ) ; HSSFSheet sheet = new HSSFSheet ( workbook ) ; sheets . add ( sheet ) ; workbook . setSheetName ( sheets . size ( ) - 1 , sheetname ) ; WindowTwoRecord windowTwo = ( WindowTwoRecord ) sheet . getSheet ( ) . findFirstRecordBySid ( WindowTwoRecord . sid ) ; windowTwo . setSelected ( sheets . size ( ) == 1 ) ; windowTwo . setPaged ( sheets . size ( ) == 1 ) ; return sheet ; } public int getNumberOfSheets ( ) { return sheets . size ( ) ; } public HSSFSheet getSheetAt ( int index ) { return ( HSSFSheet ) sheets . get ( index ) ; } public HSSFSheet getSheet ( String name ) { HSSFSheet retval = null ; for ( int k = 0 ; k < sheets . size ( ) ; k ++ ) { String sheetname = workbook . getSheetName ( k ) ; if ( sheetname . equals ( name ) ) { retval = ( HSSFSheet ) sheets . get ( k ) ; } } return retval ; } public void removeSheetAt ( int index ) { sheets . remove ( index ) ; workbook . removeSheet ( index ) ; } public void setBackupFlag ( boolean backupValue ) { BackupRecord backupRecord = workbook . getBackupRecord ( ) ; backupRecord . setBackup ( backupValue ? ( short ) 1 : ( short ) 0 ) ; } public boolean getBackupFlag ( ) { BackupRecord backupRecord = workbook . getBackupRecord ( ) ; return ( backupRecord . getBackup ( ) == 0 ) ? false : true ; } public void setRepeatingRowsAndColumns ( int sheetIndex , int startColumn , int endColumn , int startRow , int endRow ) { if ( startColumn == - 1 && endColumn != - 1 ) throw new IllegalArgumentException ( "Invalid column range specification" ) ; if ( startRow == - 1 && endRow != - 1 ) throw new IllegalArgumentException ( "Invalid row range specification" ) ; if ( startColumn < - 1 || startColumn >= 0xFF ) throw new IllegalArgumentException ( "Invalid column range specification" ) ; if ( endColumn < - 1 || endColumn >= 0xFF ) throw new IllegalArgumentException ( "Invalid column range specification" ) ; if ( startRow < - 1 || startRow > 65535 ) throw new IllegalArgumentException ( "Invalid row range specification" ) ; if ( endRow < - 1 || endRow > 65535 ) throw new IllegalArgumentException ( "Invalid row range specification" ) ; if ( startColumn > endColumn ) throw new IllegalArgumentException ( "Invalid column range specification" ) ; if ( startRow > endRow ) throw new IllegalArgumentException ( "Invalid row range specification" ) ; HSSFSheet sheet = getSheetAt ( sheetIndex ) ; short externSheetIndex = getWorkbook ( ) . checkExternSheet ( sheetIndex ) ; boolean settingRowAndColumn = startColumn != - 1 && endColumn != - 1 && startRow != - 1 && endRow != - 1 ; boolean removingRange = startColumn == - 1 && endColumn == - 1 && startRow == - 1 && endRow == - 1 ; boolean isNewRecord = false ; NameRecord nameRecord ; nameRecord = findExistingRowColHeaderNameRecord ( sheetIndex ) ; if ( removingRange ) { if ( nameRecord != null ) workbook . removeName ( findExistingRowColHeaderNameRecordIdx ( sheetIndex + 1 ) ) ; return ; } if ( nameRecord == null ) { nameRecord = workbook . createBuiltInName ( NameRecord . BUILTIN_PRINT_TITLE , sheetIndex + 1 ) ; isNewRecord = true ; } short definitionTextLength = settingRowAndColumn ? ( short ) 0x001a : ( short ) 0x000b ; nameRecord . setDefinitionTextLength ( definitionTextLength ) ; Stack ptgs = new Stack ( ) ; if ( settingRowAndColumn ) { MemFuncPtg memFuncPtg = new MemFuncPtg ( ) ; memFuncPtg . setLenRefSubexpression ( 23 ) ; ptgs . add ( memFuncPtg ) ; } if ( startColumn >= 0 ) { Area3DPtg area3DPtg1 = new Area3DPtg ( ) ; area3DPtg1 . setExternSheetIndex ( externSheetIndex ) ; area3DPtg1 . setFirstColumn ( ( short ) startColumn ) ; area3DPtg1 . setLastColumn ( ( short ) endColumn ) ; area3DPtg1 . setFirstRow ( ( short ) 0 ) ; area3DPtg1 . setLastRow ( ( short ) 0xFFFF ) ; ptgs . add ( area3DPtg1 ) ; } if ( startRow >= 0 ) { Area3DPtg area3DPtg2 = new Area3DPtg ( ) ; area3DPtg2 . setExternSheetIndex ( externSheetIndex ) ; area3DPtg2 . setFirstColumn ( ( short ) 0 ) ; area3DPtg2 . setLastColumn ( ( short ) 0x00FF ) ; area3DPtg2 . setFirstRow ( ( short ) startRow ) ; area3DPtg2 . setLastRow ( ( short ) endRow ) ; ptgs . add ( area3DPtg2 ) ; } if ( settingRowAndColumn ) { UnionPtg unionPtg = new UnionPtg ( ) ; ptgs . add ( unionPtg ) ; } nameRecord . setNameDefinition ( ptgs ) ; if ( isNewRecord ) { HSSFName newName = new HSSFName ( workbook , nameRecord ) ; names . add ( newName ) ; } HSSFPrintSetup printSetup = sheet . getPrintSetup ( ) ; printSetup . setValidSettings ( false ) ; WindowTwoRecord w2 = ( WindowTwoRecord ) sheet . getSheet ( ) . findFirstRecordBySid ( WindowTwoRecord . sid ) ; w2 . setPaged ( true ) ; } private NameRecord findExistingRowColHeaderNameRecord ( int sheetIndex ) { int index = findExistingRowColHeaderNameRecordIdx ( sheetIndex ) ; if ( index == - 1 ) return null ; else return ( NameRecord ) workbook . findNextRecordBySid ( NameRecord . sid , index ) ; } private int findExistingRowColHeaderNameRecordIdx ( int sheetIndex ) { int index = 0 ; NameRecord r = null ; while ( ( r = ( NameRecord ) workbook . findNextRecordBySid ( NameRecord . sid , index ) ) != null ) { int indexToSheet = r . getEqualsToIndexToSheet ( ) - 1 ; if ( indexToSheet > - 1 ) { int nameRecordSheetIndex = workbook . getSheetIndexFromExternSheetIndex ( indexToSheet ) ; if ( isRowColHeaderRecord ( r ) && nameRecordSheetIndex == sheetIndex ) { return index ; } } index ++ ; } return - 1 ; } private boolean isRowColHeaderRecord ( NameRecord r ) { return r . getOptionFlag ( ) == 0x20 && ( "" + ( ( char ) 7 ) ) . equals ( r . getNameText ( ) ) ; } public HSSFFont createFont ( ) { FontRecord font = workbook . createNewFont ( ) ; short fontindex = ( short ) ( getNumberOfFonts ( ) - 1 ) ; if ( fontindex > 3 ) { fontindex ++ ; } HSSFFont retval = new HSSFFont ( fontindex , font ) ; return retval ; } public HSSFFont findFont ( short boldWeight , short color , short fontHeight , String name , boolean italic , boolean strikeout , short typeOffset , byte underline ) { for ( short i = 0 ; i < workbook . getNumberOfFontRecords ( ) ; i ++ ) { if ( i == 4 ) continue ; FontRecord font = workbook . getFontRecordAt ( i ) ; HSSFFont hssfFont = new HSSFFont ( i , font ) ; if ( hssfFont . getBoldweight ( ) == boldWeight && hssfFont . getColor ( ) == color && hssfFont . getFontHeight ( ) == fontHeight && hssfFont . getFontName ( ) . equals ( name ) && hssfFont . getItalic ( ) == italic && hssfFont . getStrikeout ( ) == strikeout && hssfFont . getTypeOffset ( ) == typeOffset && hssfFont . getUnderline ( ) == underline ) { return hssfFont ; } } return null ; } public short getNumberOfFonts ( ) { return ( short ) workbook . getNumberOfFontRecords ( ) ; } public HSSFFont getFontAt ( short idx ) { FontRecord font = workbook . getFontRecordAt ( idx ) ; HSSFFont retval = new HSSFFont ( idx , font ) ; return retval ; } public HSSFCellStyle createCellStyle ( ) { ExtendedFormatRecord xfr = workbook . createCellXF ( ) ; short index = ( short ) ( getNumCellStyles ( ) - 1 ) ; HSSFCellStyle style = new HSSFCellStyle ( index , xfr ) ; return style ; } public short getNumCellStyles ( ) { return ( short ) workbook . getNumExFormats ( ) ; } public HSSFCellStyle getCellStyleAt ( short idx ) { ExtendedFormatRecord xfr = workbook . getExFormatAt ( idx ) ; HSSFCellStyle style = new HSSFCellStyle ( idx , xfr ) ; return style ; } public void write ( OutputStream stream ) throws IOException { byte [ ] bytes = getBytes ( ) ; POIFSFileSystem fs = new POIFSFileSystem ( ) ; fs . createDocument ( new ByteArrayInputStream ( bytes ) , "Workbook" ) ; if ( preserveNodes ) { List excepts = new ArrayList ( 1 ) ; excepts . add ( "Workbook" ) ; copyNodes ( this . poifs , fs , excepts ) ; } fs . writeFilesystem ( stream ) ; } public byte [ ] getBytes ( ) { if ( log . check ( POILogger . DEBUG ) ) log . log ( DEBUG , "HSSFWorkbook.getBytes()" ) ; for ( int k = 0 ; k < sheets . size ( ) ; k ++ ) ( ( HSSFSheet ) sheets . get ( k ) ) . getSheet ( ) . preSerialize ( ) ; int wbsize = workbook . getSize ( ) ; int totalsize = wbsize ; for ( int k = 0 ; k < sheets . size ( ) ; k ++ ) { workbook . setSheetBof ( k , totalsize ) ; totalsize += ( ( HSSFSheet ) sheets . get ( k ) ) . getSheet ( ) . getSize ( ) ; } byte [ ] retval = new byte [ totalsize ] ; int pos = workbook . serialize ( 0 , retval ) ; for ( int k = 0 ; k < sheets . size ( ) ; k ++ ) { int len = ( ( HSSFSheet ) sheets . get ( k ) ) . getSheet ( ) . serialize ( pos , retval ) ; pos += len ; } return retval ; } public int addSSTString ( String string ) { return workbook . addSSTString ( new UnicodeString ( string ) ) ; } public String getSSTString ( int index ) { return workbook . getSSTString ( index ) . getString ( ) ; } Workbook getWorkbook ( ) { return workbook ; } public int getNumberOfNames ( ) { int result = names . size ( ) ; return result ; } public HSSFName getNameAt ( int index ) { HSSFName result = ( HSSFName ) names . get ( index ) ; return result ; } public String getNameName ( int index ) { String result = getNameAt ( index ) . getNameName ( ) ; return result ; } public void setPrintArea ( int sheetIndex , String reference ) { NameRecord name = workbook . getSpecificBuiltinRecord ( NameRecord . BUILTIN_PRINT_AREA , sheetIndex + 1 ) ; if ( name == null ) name = workbook . createBuiltInName ( NameRecord . BUILTIN_PRINT_AREA , sheetIndex + 1 ) ; short externSheetIndex = getWorkbook ( ) . checkExternSheet ( sheetIndex ) ; name . setExternSheetNumber ( externSheetIndex ) ; name . setAreaReference ( reference ) ; } public void setPrintArea ( int sheetIndex , int startColumn , int endColumn , int startRow , int endRow ) { CellReference cell = new CellReference ( startRow , startColumn , true , true ) ; String reference = cell . toString ( ) ; cell = new CellReference ( endRow , endColumn , true , true ) ; reference = reference + ":" + cell . toString ( ) ; setPrintArea ( sheetIndex , reference ) ; } public String getPrintArea ( int sheetIndex ) { NameRecord name = workbook . getSpecificBuiltinRecord ( NameRecord . BUILTIN_PRINT_AREA , sheetIndex + 1 ) ; if ( name == null ) return null ; return name . getAreaReference ( workbook ) ; } public void removePrintArea ( int sheetIndex ) { getWorkbook ( ) . removeBuiltinRecord ( NameRecord . BUILTIN_PRINT_AREA , sheetIndex + 1 ) ; } public HSSFName createName ( ) { NameRecord nameRecord = workbook . createName ( ) ; HSSFName newName = new HSSFName ( workbook , nameRecord ) ; names . add ( newName ) ; return newName ; } public int getNameIndex ( String name ) { int retval = - 1 ; for ( int k = 0 ; k < names . size ( ) ; k ++ ) { String nameName = getNameName ( k ) ; if ( nameName . equalsIgnoreCase ( name ) ) { retval = k ; break ; } } return retval ; } public void removeName ( int index ) { names . remove ( index ) ; workbook . removeName ( index ) ; } public HSSFDataFormat createDataFormat ( ) { if ( formatter == null ) formatter = new HSSFDataFormat ( workbook ) ; return formatter ; } public void removeName ( String name ) { int index = getNameIndex ( name ) ; removeName ( index ) ; } public HSSFPalette getCustomPalette ( ) { return new HSSFPalette ( workbook . getCustomPalette ( ) ) ; } private void copyNodes ( POIFSFileSystem source , POIFSFileSystem target , List excepts ) throws IOException { DirectoryEntry root = source . getRoot ( ) ; DirectoryEntry newRoot = target . getRoot ( ) ; Iterator entries = root . getEntries ( ) ; while ( entries . hasNext ( ) ) { Entry entry = ( Entry ) entries . next ( ) ; if ( ! isInList ( entry . getName ( ) , excepts ) ) { copyNodeRecursively ( entry , newRoot ) ; } } } private boolean isInList ( String entry , List list ) { for ( int k = 0 ; k < list . size ( ) ; k ++ ) { if ( list . get ( k ) . equals ( entry ) ) { return true ; } } return false ; } private void copyNodeRecursively ( Entry entry , DirectoryEntry target ) throws IOException { DirectoryEntry newTarget = null ; if ( entry . isDirectoryEntry ( ) ) { newTarget = target . createDirectory ( entry . getName ( ) ) ; Iterator entries = ( ( DirectoryEntry ) entry ) . getEntries ( ) ; while ( entries . hasNext ( ) ) { copyNodeRecursively ( ( Entry ) entries . next ( ) , newTarget ) ; } } else { DocumentEntry dentry = ( DocumentEntry ) entry ; DocumentInputStream dstream = new DocumentInputStream ( dentry ) ; target . createDocument ( dentry . getName ( ) , dstream ) ; dstream . close ( ) ; } } public void insertChartRecord ( ) { int loc = workbook . findFirstRecordLocBySid ( SSTRecord . sid ) ; byte [ ] data = { ( byte ) 0x0F , ( byte ) 0x00 , ( byte ) 0x00 , ( byte ) 0xF0 , ( byte ) 0x52 , ( byte ) 0x00 , ( byte ) 0x00 , ( byte ) 0x00 , ( byte ) 0x00 , ( byte ) 0x00 , ( byte ) 0x06 , ( byte ) 0xF0 , ( byte ) 0x18 , ( byte ) 0x00 , ( byte ) 0x00 , ( byte ) 0x00 , ( byte ) 0x01 , ( byte ) 0x08 , ( byte ) 0x00 , ( byte ) 0x00 , ( byte ) 0x02 , ( byte ) 0x00 , ( byte ) 0x00 , ( byte ) 0x00 , ( byte ) 0x02 , ( byte ) 0x00 , ( byte ) 0x00 , ( byte ) 0x00 , ( byte ) 0x01 , ( byte ) 0x00 , ( byte ) 0x00 , ( byte ) 0x00 , ( byte ) 0x01 , ( byte ) 0x00 , ( byte ) 0x00 , ( byte ) 0x00 , ( byte ) 0x03 , ( byte ) 0x00 , ( byte ) 0x00 , ( byte ) 0x00 , ( byte ) 0x33 , ( byte ) 0x00 , ( byte ) 0x0B , ( byte ) 0xF0 , ( byte ) 0x12 , ( byte ) 0x00 , ( byte ) 0x00 , ( byte ) 0x00 , ( byte ) 0xBF , ( byte ) 0x00 , ( byte ) 0x08 , ( byte ) 0x00 , ( byte ) 0x08 , ( byte ) 0x00 , ( byte ) 0x81 , ( byte ) 0x01 , ( byte ) 0x09 , ( byte ) 0x00 , ( byte ) 0x00 , ( byte ) 0x08 , ( byte ) 0xC0 , ( byte ) 0x01 , ( byte ) 0x40 , ( byte ) 0x00 , ( byte ) 0x00 , ( byte ) 0x08 , ( byte ) 0x40 , ( byte ) 0x00 , ( byte ) 0x1E , ( byte ) 0xF1 , ( byte ) 0x10 , ( byte ) 0x00 , ( byte ) 0x00 , ( byte ) 0x00 , ( byte ) 0x0D , ( byte ) 0x00 , ( byte ) 0x00 , ( byte ) 0x08 , ( byte ) 0x0C , ( byte ) 0x00 , ( byte ) 0x00 , ( byte ) 0x08 , ( byte ) 0x17 , ( byte ) 0x00 , ( byte ) 0x00 , ( byte ) 0x08 , ( byte ) 0xF7 , ( byte ) 0x00 , ( byte ) 0x00 , ( byte ) 0x10 , } ; UnknownRecord r = new UnknownRecord ( ( short ) 0x00EB , data ) ; workbook . getRecords ( ) . add ( loc , r ) ; } public void dumpDrawingGroupRecords ( boolean fat ) { DrawingGroupRecord r = ( DrawingGroupRecord ) workbook . findFirstRecordBySid ( DrawingGroupRecord . sid ) ; r . decode ( ) ; List escherRecords = r . getEscherRecords ( ) ; PrintWriter w = new PrintWriter ( System . out ) ; for ( Iterator iterator = escherRecords . iterator ( ) ; iterator . hasNext ( ) ; ) { EscherRecord escherRecord = ( EscherRecord ) iterator . next ( ) ; if ( fat ) System . out . println ( escherRecord . toString ( ) ) ; else escherRecord . display ( w , 0 ) ; } w . flush ( ) ; } public int addPicture ( byte [ ] pictureData , int format ) { byte [ ] uid = newUID ( ) ; EscherBitmapBlip blipRecord = new EscherBitmapBlip ( ) ; blipRecord . setRecordId ( ( short ) ( EscherBitmapBlip . RECORD_ID_START + format ) ) ; switch ( format ) { case PICTURE_TYPE_EMF : blipRecord . setOptions ( HSSFPictureData . MSOBI_EMF ) ; break ; case PICTURE_TYPE_WMF : blipRecord . setOptions ( HSSFPictureData . MSOBI_WMF ) ; break ; case PICTURE_TYPE_PICT : blipRecord . setOptions ( HSSFPictureData . MSOBI_PICT ) ; break ; case PICTURE_TYPE_PNG : blipRecord . setOptions ( HSSFPictureData . MSOBI_PNG ) ; break ; case HSSFWorkbook . PICTURE_TYPE_JPEG : blipRecord . setOptions ( HSSFPictureData . MSOBI_JPEG ) ; break ; case HSSFWorkbook . PICTURE_TYPE_DIB : blipRecord . setOptions ( HSSFPictureData . MSOBI_DIB ) ; break ; } blipRecord . setUID ( uid ) ; blipRecord . setMarker ( ( byte ) 0xFF ) ; blipRecord . setPictureData ( pictureData ) ; EscherBSERecord r = new EscherBSERecord ( ) ; r . setRecordId ( EscherBSERecord . RECORD_ID ) ; r . setOptions ( ( short ) ( 0x0002 | ( format << 4 ) ) ) ; r . setBlipTypeMacOS ( ( byte ) format ) ; r . setBlipTypeWin32 ( ( byte ) format ) ; r . setUid ( uid ) ; r . setTag ( ( short ) 0xFF ) ; r . setSize ( pictureData . length + 25 ) ; r . setRef ( 1 ) ; r . setOffset ( 0 ) ; r . setBlipRecord ( blipRecord ) ; return workbook . addBSERecord ( r ) ; } public List getAllPictures ( ) { List pictures = new ArrayList ( ) ; Iterator recordIter = workbook . getRecords ( ) . iterator ( ) ; while ( recordIter . hasNext ( ) ) { Object obj = recordIter . next ( ) ; if ( obj instanceof AbstractEscherHolderRecord ) { ( ( AbstractEscherHolderRecord ) obj ) . decode ( ) ; List escherRecords = ( ( AbstractEscherHolderRecord ) obj ) . getEscherRecords ( ) ; searchForPictures ( escherRecords , pictures ) ; } } return pictures ; } private void searchForPictures ( List escherRecords , List pictures ) { Iterator recordIter = escherRecords . iterator ( ) ; while ( recordIter . hasNext ( ) ) { Object obj = recordIter . next ( ) ; if ( obj instanceof EscherRecord ) { EscherRecord escherRecord = ( EscherRecord ) obj ; if ( escherRecord instanceof EscherBSERecord ) { EscherBlipRecord blip = ( ( EscherBSERecord ) escherRecord ) . getBlipRecord ( ) ; if ( blip instanceof EscherBitmapBlip ) { pictures . add ( new HSSFPictureData ( ( EscherBitmapBlip ) blip ) ) ; } } searchForPictures ( escherRecord . getChildRecords ( ) , pictures ) ; } } } private byte [ ] newUID ( ) { byte [ ] bytes = new byte [ 16 ] ; return bytes ; } } 	1
package org . apache . poi . hssf . record ; import org . apache . poi . util . BitField ; import org . apache . poi . util . BitFieldFactory ; import org . apache . poi . util . LittleEndian ; public class WindowOneRecord extends Record { public final static short sid = 0x3d ; private short field_1_h_hold ; private short field_2_v_hold ; private short field_3_width ; private short field_4_height ; private short field_5_options ; static final private BitField hidden = BitFieldFactory . getInstance ( 0x01 ) ; static final private BitField iconic = BitFieldFactory . getInstance ( 0x02 ) ; static final private BitField reserved = BitFieldFactory . getInstance ( 0x04 ) ; static final private BitField hscroll = BitFieldFactory . getInstance ( 0x08 ) ; static final private BitField vscroll = BitFieldFactory . getInstance ( 0x10 ) ; static final private BitField tabs = BitFieldFactory . getInstance ( 0x20 ) ; private short field_6_selected_tab ; private short field_7_displayed_tab ; private short field_8_num_selected_tabs ; private short field_9_tab_width_ratio ; public WindowOneRecord ( ) { } public WindowOneRecord ( RecordInputStream in ) { super ( in ) ; } protected void validateSid ( short id ) { if ( id != sid ) { throw new RecordFormatException ( "NOT A WINDOW1 RECORD" ) ; } } protected void fillFields ( RecordInputStream in ) { field_1_h_hold = in . readShort ( ) ; field_2_v_hold = in . readShort ( ) ; field_3_width = in . readShort ( ) ; field_4_height = in . readShort ( ) ; field_5_options = in . readShort ( ) ; field_6_selected_tab = in . readShort ( ) ; field_7_displayed_tab = in . readShort ( ) ; field_8_num_selected_tabs = in . readShort ( ) ; field_9_tab_width_ratio = in . readShort ( ) ; } public void setHorizontalHold ( short h ) { field_1_h_hold = h ; } public void setVerticalHold ( short v ) { field_2_v_hold = v ; } public void setWidth ( short w ) { field_3_width = w ; } public void setHeight ( short h ) { field_4_height = h ; } public void setOptions ( short o ) { field_5_options = o ; } public void setHidden ( boolean ishidden ) { field_5_options = hidden . setShortBoolean ( field_5_options , ishidden ) ; } public void setIconic ( boolean isiconic ) { field_5_options = iconic . setShortBoolean ( field_5_options , isiconic ) ; } public void setDisplayHorizonalScrollbar ( boolean scroll ) { field_5_options = hscroll . setShortBoolean ( field_5_options , scroll ) ; } public void setDisplayVerticalScrollbar ( boolean scroll ) { field_5_options = vscroll . setShortBoolean ( field_5_options , scroll ) ; } public void setDisplayTabs ( boolean disptabs ) { field_5_options = tabs . setShortBoolean ( field_5_options , disptabs ) ; } public void setSelectedTab ( short s ) { field_6_selected_tab = s ; } public void setDisplayedTab ( short t ) { field_7_displayed_tab = t ; } public void setNumSelectedTabs ( short n ) { field_8_num_selected_tabs = n ; } public void setTabWidthRatio ( short r ) { field_9_tab_width_ratio = r ; } public short getHorizontalHold ( ) { return field_1_h_hold ; } public short getVerticalHold ( ) { return field_2_v_hold ; } public short getWidth ( ) { return field_3_width ; } public short getHeight ( ) { return field_4_height ; } public short getOptions ( ) { return field_5_options ; } public boolean getHidden ( ) { return hidden . isSet ( field_5_options ) ; } public boolean getIconic ( ) { return iconic . isSet ( field_5_options ) ; } public boolean getDisplayHorizontalScrollbar ( ) { return hscroll . isSet ( field_5_options ) ; } public boolean getDisplayVerticalScrollbar ( ) { return vscroll . isSet ( field_5_options ) ; } public boolean getDisplayTabs ( ) { return tabs . isSet ( field_5_options ) ; } public short getSelectedTab ( ) { return field_6_selected_tab ; } public short getDisplayedTab ( ) { return field_7_displayed_tab ; } public short getNumSelectedTabs ( ) { return field_8_num_selected_tabs ; } public short getTabWidthRatio ( ) { return field_9_tab_width_ratio ; } public String toString ( ) { StringBuffer buffer = new StringBuffer ( ) ; buffer . append ( "[WINDOW1]\n" ) ; buffer . append ( "    .h_hold          = " ) . append ( Integer . toHexString ( getHorizontalHold ( ) ) ) . append ( "\n" ) ; buffer . append ( "    .v_hold          = " ) . append ( Integer . toHexString ( getVerticalHold ( ) ) ) . append ( "\n" ) ; buffer . append ( "    .width           = " ) . append ( Integer . toHexString ( getWidth ( ) ) ) . append ( "\n" ) ; buffer . append ( "    .height          = " ) . append ( Integer . toHexString ( getHeight ( ) ) ) . append ( "\n" ) ; buffer . append ( "    .options         = " ) . append ( Integer . toHexString ( getOptions ( ) ) ) . append ( "\n" ) ; buffer . append ( "        .hidden      = " ) . append ( getHidden ( ) ) . append ( "\n" ) ; buffer . append ( "        .iconic      = " ) . append ( getIconic ( ) ) . append ( "\n" ) ; buffer . append ( "        .hscroll     = " ) . append ( getDisplayHorizontalScrollbar ( ) ) . append ( "\n" ) ; buffer . append ( "        .vscroll     = " ) . append ( getDisplayVerticalScrollbar ( ) ) . append ( "\n" ) ; buffer . append ( "        .tabs        = " ) . append ( getDisplayTabs ( ) ) . append ( "\n" ) ; buffer . append ( "    .selectedtab     = " ) . append ( Integer . toHexString ( getSelectedTab ( ) ) ) . append ( "\n" ) ; buffer . append ( "    .displayedtab    = " ) . append ( Integer . toHexString ( getDisplayedTab ( ) ) ) . append ( "\n" ) ; buffer . append ( "    .numselectedtabs = " ) . append ( Integer . toHexString ( getNumSelectedTabs ( ) ) ) . append ( "\n" ) ; buffer . append ( "    .tabwidthratio   = " ) . append ( Integer . toHexString ( getTabWidthRatio ( ) ) ) . append ( "\n" ) ; buffer . append ( "[/WINDOW1]\n" ) ; return buffer . toString ( ) ; } public int serialize ( int offset , byte [ ] data ) { LittleEndian . putShort ( data , 0 + offset , sid ) ; LittleEndian . putShort ( data , 2 + offset , ( ( short ) 0x12 ) ) ; LittleEndian . putShort ( data , 4 + offset , getHorizontalHold ( ) ) ; LittleEndian . putShort ( data , 6 + offset , getVerticalHold ( ) ) ; LittleEndian . putShort ( data , 8 + offset , getWidth ( ) ) ; LittleEndian . putShort ( data , 10 + offset , getHeight ( ) ) ; LittleEndian . putShort ( data , 12 + offset , getOptions ( ) ) ; LittleEndian . putShort ( data , 14 + offset , getSelectedTab ( ) ) ; LittleEndian . putShort ( data , 16 + offset , getDisplayedTab ( ) ) ; LittleEndian . putShort ( data , 18 + offset , getNumSelectedTabs ( ) ) ; LittleEndian . putShort ( data , 20 + offset , getTabWidthRatio ( ) ) ; return getRecordSize ( ) ; } public int getRecordSize ( ) { return 22 ; } public short getSid ( ) { return sid ; } } 	1
package org . apache . poi . hssf . record ; import org . apache . poi . util . LittleEndian ; import org . apache . poi . util . BitField ; import org . apache . poi . util . BitFieldFactory ; public class ColumnInfoRecord extends Record { public static final short sid = 0x7d ; private short field_1_first_col ; private short field_2_last_col ; private short field_3_col_width ; private short field_4_xf_index ; private short field_5_options ; static final private BitField hidden = BitFieldFactory . getInstance ( 0x01 ) ; static final private BitField outlevel = BitFieldFactory . getInstance ( 0x0700 ) ; static final private BitField collapsed = BitFieldFactory . getInstance ( 0x1000 ) ; private short field_6_reserved ; public ColumnInfoRecord ( ) { } public ColumnInfoRecord ( RecordInputStream in ) { super ( in ) ; } protected void fillFields ( RecordInputStream in ) { field_1_first_col = in . readShort ( ) ; field_2_last_col = in . readShort ( ) ; field_3_col_width = in . readShort ( ) ; field_4_xf_index = in . readShort ( ) ; field_5_options = in . readShort ( ) ; field_6_reserved = in . readShort ( ) ; } protected void validateSid ( short id ) { if ( id != sid ) { throw new RecordFormatException ( "NOT A COLINFO RECORD!!" ) ; } } public void setFirstColumn ( short fc ) { field_1_first_col = fc ; } public void setLastColumn ( short lc ) { field_2_last_col = lc ; } public void setColumnWidth ( short cw ) { field_3_col_width = cw ; } public void setXFIndex ( short xfi ) { field_4_xf_index = xfi ; } public void setOptions ( short options ) { field_5_options = options ; } public void setHidden ( boolean ishidden ) { field_5_options = hidden . setShortBoolean ( field_5_options , ishidden ) ; } public void setOutlineLevel ( short olevel ) { field_5_options = outlevel . setShortValue ( field_5_options , olevel ) ; } public void setCollapsed ( boolean iscollapsed ) { field_5_options = collapsed . setShortBoolean ( field_5_options , iscollapsed ) ; } public short getFirstColumn ( ) { return field_1_first_col ; } public short getLastColumn ( ) { return field_2_last_col ; } public short getColumnWidth ( ) { return field_3_col_width ; } public short getXFIndex ( ) { return field_4_xf_index ; } public short getOptions ( ) { return field_5_options ; } public boolean getHidden ( ) { return hidden . isSet ( field_5_options ) ; } public short getOutlineLevel ( ) { return outlevel . getShortValue ( field_5_options ) ; } public boolean getCollapsed ( ) { return collapsed . isSet ( field_5_options ) ; } public short getSid ( ) { return sid ; } public int serialize ( int offset , byte [ ] data ) { LittleEndian . putShort ( data , 0 + offset , sid ) ; LittleEndian . putShort ( data , 2 + offset , ( short ) 12 ) ; LittleEndian . putShort ( data , 4 + offset , getFirstColumn ( ) ) ; LittleEndian . putShort ( data , 6 + offset , getLastColumn ( ) ) ; LittleEndian . putShort ( data , 8 + offset , getColumnWidth ( ) ) ; LittleEndian . putShort ( data , 10 + offset , getXFIndex ( ) ) ; LittleEndian . putShort ( data , 12 + offset , getOptions ( ) ) ; LittleEndian . putShort ( data , 14 + offset , field_6_reserved ) ; return getRecordSize ( ) ; } public int getRecordSize ( ) { return 16 ; } public String toString ( ) { StringBuffer buffer = new StringBuffer ( ) ; buffer . append ( "[COLINFO]\n" ) ; buffer . append ( "colfirst       = " ) . append ( getFirstColumn ( ) ) . append ( "\n" ) ; buffer . append ( "collast        = " ) . append ( getLastColumn ( ) ) . append ( "\n" ) ; buffer . append ( "colwidth       = " ) . append ( getColumnWidth ( ) ) . append ( "\n" ) ; buffer . append ( "xfindex        = " ) . append ( getXFIndex ( ) ) . append ( "\n" ) ; buffer . append ( "options        = " ) . append ( getOptions ( ) ) . append ( "\n" ) ; buffer . append ( "  hidden       = " ) . append ( getHidden ( ) ) . append ( "\n" ) ; buffer . append ( "  olevel       = " ) . append ( getOutlineLevel ( ) ) . append ( "\n" ) ; buffer . append ( "  collapsed    = " ) . append ( getCollapsed ( ) ) . append ( "\n" ) ; buffer . append ( "[/COLINFO]\n" ) ; return buffer . toString ( ) ; } public Object clone ( ) { ColumnInfoRecord rec = new ColumnInfoRecord ( ) ; rec . field_1_first_col = field_1_first_col ; rec . field_2_last_col = field_2_last_col ; rec . field_3_col_width = field_3_col_width ; rec . field_4_xf_index = field_4_xf_index ; rec . field_5_options = field_5_options ; rec . field_6_reserved = field_6_reserved ; return rec ; } } 	1
package org . apache . poi . poifs . storage ; import java . io . * ; import java . util . * ; import org . apache . poi . poifs . common . POIFSConstants ; import org . apache . poi . util . IntegerField ; import org . apache . poi . util . LittleEndianConsts ; import org . apache . poi . util . LongField ; import org . apache . poi . util . ShortField ; public class HeaderBlockWriter extends BigBlock implements HeaderBlockConstants { private static final byte _default_value = ( byte ) 0xFF ; private IntegerField _bat_count ; private IntegerField _property_start ; private IntegerField _sbat_start ; private IntegerField _sbat_block_count ; private IntegerField _xbat_start ; private IntegerField _xbat_count ; private byte [ ] _data ; public HeaderBlockWriter ( ) { _data = new byte [ POIFSConstants . BIG_BLOCK_SIZE ] ; Arrays . fill ( _data , _default_value ) ; new LongField ( _signature_offset , _signature , _data ) ; new IntegerField ( 0x08 , 0 , _data ) ; new IntegerField ( 0x0c , 0 , _data ) ; new IntegerField ( 0x10 , 0 , _data ) ; new IntegerField ( 0x14 , 0 , _data ) ; new ShortField ( 0x18 , ( short ) 0x3b , _data ) ; new ShortField ( 0x1a , ( short ) 0x3 , _data ) ; new ShortField ( 0x1c , ( short ) - 2 , _data ) ; new ShortField ( 0x1e , ( short ) 0x9 , _data ) ; new IntegerField ( 0x20 , 0x6 , _data ) ; new IntegerField ( 0x24 , 0 , _data ) ; new IntegerField ( 0x28 , 0 , _data ) ; _bat_count = new IntegerField ( _bat_count_offset , 0 , _data ) ; _property_start = new IntegerField ( _property_start_offset , POIFSConstants . END_OF_CHAIN , _data ) ; new IntegerField ( 0x34 , 0 , _data ) ; new IntegerField ( 0x38 , 0x1000 , _data ) ; _sbat_start = new IntegerField ( _sbat_start_offset , POIFSConstants . END_OF_CHAIN , _data ) ; _sbat_block_count = new IntegerField ( _sbat_block_count_offset , 0 , _data ) ; _xbat_start = new IntegerField ( _xbat_start_offset , POIFSConstants . END_OF_CHAIN , _data ) ; _xbat_count = new IntegerField ( _xbat_count_offset , 0 , _data ) ; } public BATBlock [ ] setBATBlocks ( final int blockCount , final int startBlock ) { BATBlock [ ] rvalue ; _bat_count . set ( blockCount , _data ) ; int limit = Math . min ( blockCount , _max_bats_in_header ) ; int offset = _bat_array_offset ; for ( int j = 0 ; j < limit ; j ++ ) { new IntegerField ( offset , startBlock + j , _data ) ; offset += LittleEndianConsts . INT_SIZE ; } if ( blockCount > _max_bats_in_header ) { int excess_blocks = blockCount - _max_bats_in_header ; int [ ] excess_block_array = new int [ excess_blocks ] ; for ( int j = 0 ; j < excess_blocks ; j ++ ) { excess_block_array [ j ] = startBlock + j + _max_bats_in_header ; } rvalue = BATBlock . createXBATBlocks ( excess_block_array , startBlock + blockCount ) ; _xbat_start . set ( startBlock + blockCount , _data ) ; } else { rvalue = BATBlock . createXBATBlocks ( new int [ 0 ] , 0 ) ; _xbat_start . set ( POIFSConstants . END_OF_CHAIN , _data ) ; } _xbat_count . set ( rvalue . length , _data ) ; return rvalue ; } public void setPropertyStart ( final int startBlock ) { _property_start . set ( startBlock , _data ) ; } public void setSBATStart ( final int startBlock ) { _sbat_start . set ( startBlock , _data ) ; } public void setSBATBlockCount ( final int count ) { _sbat_block_count . set ( count , _data ) ; } static int calculateXBATStorageRequirements ( final int blockCount ) { return ( blockCount > _max_bats_in_header ) ? BATBlock . calculateXBATStorageRequirements ( blockCount - _max_bats_in_header ) : 0 ; } void writeData ( final OutputStream stream ) throws IOException { doWriteData ( stream , _data ) ; } } 	0
package org . apache . poi . hssf . record . formula ; import org . apache . poi . util . LittleEndian ; import org . apache . poi . hssf . model . Workbook ; import org . apache . poi . hssf . record . RecordInputStream ; public class IntPtg extends Ptg { public final static int SIZE = 3 ; public final static byte sid = 0x1e ; private short field_1_value ; private IntPtg ( ) { } public IntPtg ( RecordInputStream in ) { setValue ( in . readShort ( ) ) ; } public IntPtg ( String formulaToken ) { setValue ( Short . parseShort ( formulaToken ) ) ; } public void setValue ( short value ) { field_1_value = value ; } public short getValue ( ) { return field_1_value ; } public void writeBytes ( byte [ ] array , int offset ) { array [ offset + 0 ] = sid ; LittleEndian . putShort ( array , offset + 1 , getValue ( ) ) ; } public int getSize ( ) { return SIZE ; } public String toFormulaString ( Workbook book ) { return "" + getValue ( ) ; } public byte getDefaultOperandClass ( ) { return Ptg . CLASS_VALUE ; } public Object clone ( ) { IntPtg ptg = new IntPtg ( ) ; ptg . field_1_value = field_1_value ; return ptg ; } } 	1
package org . apache . poi . hssf . util ; import java . util . HashMap ; import java . util . Map ; public class SheetReferences { Map map ; public SheetReferences ( ) { map = new HashMap ( 5 ) ; } public void addSheetReference ( String sheetName , int number ) { map . put ( new Integer ( number ) , sheetName ) ; } public String getSheetName ( int number ) { return ( String ) map . get ( new Integer ( number ) ) ; } } 	0
package org . apache . poi . hssf . record ; import java . util . List ; import java . util . Stack ; import org . apache . poi . hssf . record . formula . Ptg ; import org . apache . poi . util . BitField ; import org . apache . poi . util . BitFieldFactory ; import org . apache . poi . util . LittleEndian ; public class FormulaRecord extends Record implements CellValueRecordInterface , Comparable { public static final short sid = 0x06 ; private int field_1_row ; private short field_2_column ; private short field_3_xf ; private double field_4_value ; private short field_5_options ; private BitField alwaysCalc = BitFieldFactory . getInstance ( 0x0001 ) ; private BitField calcOnLoad = BitFieldFactory . getInstance ( 0x0002 ) ; private BitField sharedFormula = BitFieldFactory . getInstance ( 0x0008 ) ; private int field_6_zero ; private short field_7_expression_len ; private Stack field_8_parsed_expr ; private byte [ ] value_data ; private byte [ ] all_data ; public FormulaRecord ( ) { field_8_parsed_expr = new Stack ( ) ; } public FormulaRecord ( RecordInputStream in ) { super ( in ) ; } protected void fillFields ( RecordInputStream in ) { try { field_1_row = in . readUShort ( ) ; field_2_column = in . readShort ( ) ; field_3_xf = in . readShort ( ) ; field_4_value = in . readDouble ( ) ; field_5_options = in . readShort ( ) ; if ( Double . isNaN ( field_4_value ) ) { value_data = in . getNANData ( ) ; } field_6_zero = in . readInt ( ) ; field_7_expression_len = in . readShort ( ) ; field_8_parsed_expr = Ptg . createParsedExpressionTokens ( field_7_expression_len , in ) ; } catch ( java . lang . UnsupportedOperationException uoe ) { throw new RecordFormatException ( uoe ) ; } } public void setRow ( int row ) { field_1_row = row ; } public void setColumn ( short column ) { field_2_column = column ; } public void setXFIndex ( short xf ) { field_3_xf = xf ; } public void setValue ( double value ) { field_4_value = value ; } public void setOptions ( short options ) { field_5_options = options ; } public void setExpressionLength ( short len ) { field_7_expression_len = len ; } public int getRow ( ) { return field_1_row ; } public short getColumn ( ) { return field_2_column ; } public short getXFIndex ( ) { return field_3_xf ; } public double getValue ( ) { return field_4_value ; } public short getOptions ( ) { return field_5_options ; } public boolean isSharedFormula ( ) { return sharedFormula . isSet ( field_5_options ) ; } public void setSharedFormula ( boolean flag ) { sharedFormula . setBoolean ( field_5_options , flag ) ; } public short getExpressionLength ( ) { return field_7_expression_len ; } public void pushExpressionToken ( Ptg ptg ) { field_8_parsed_expr . push ( ptg ) ; } public Ptg popExpressionToken ( ) { return ( Ptg ) field_8_parsed_expr . pop ( ) ; } public Ptg peekExpressionToken ( ) { return ( Ptg ) field_8_parsed_expr . peek ( ) ; } public int getNumberOfExpressionTokens ( ) { if ( this . field_8_parsed_expr == null ) { return 0 ; } else { return field_8_parsed_expr . size ( ) ; } } public List getParsedExpression ( ) { return field_8_parsed_expr ; } public void setParsedExpression ( Stack ptgs ) { field_8_parsed_expr = ptgs ; } protected void validateSid ( short id ) { if ( id != sid ) { throw new RecordFormatException ( "NOT A FORMULA RECORD" ) ; } } public short getSid ( ) { return sid ; } public int serialize ( int offset , byte [ ] data ) { if ( this . field_8_parsed_expr != null ) { int ptgSize = getTotalPtgSize ( ) ; LittleEndian . putShort ( data , 0 + offset , sid ) ; LittleEndian . putShort ( data , 2 + offset , ( short ) ( 22 + ptgSize ) ) ; LittleEndian . putShort ( data , 4 + offset , ( short ) getRow ( ) ) ; LittleEndian . putShort ( data , 6 + offset , getColumn ( ) ) ; LittleEndian . putShort ( data , 8 + offset , getXFIndex ( ) ) ; if ( Double . isNaN ( this . getValue ( ) ) && value_data != null ) { System . arraycopy ( value_data , 0 , data , 10 + offset , value_data . length ) ; } else { LittleEndian . putDouble ( data , 10 + offset , field_4_value ) ; } LittleEndian . putShort ( data , 18 + offset , getOptions ( ) ) ; LittleEndian . putInt ( data , 20 + offset , 0 ) ; LittleEndian . putShort ( data , 24 + offset , getExpressionLength ( ) ) ; Ptg . serializePtgStack ( field_8_parsed_expr , data , 26 + offset ) ; } else { System . arraycopy ( all_data , 0 , data , offset , all_data . length ) ; } return getRecordSize ( ) ; } public int getRecordSize ( ) { int retval = 0 ; if ( this . field_8_parsed_expr != null ) { retval = getTotalPtgSize ( ) + 26 ; } else { retval = all_data . length ; } return retval ; } private int getTotalPtgSize ( ) { List list = getParsedExpression ( ) ; int retval = 0 ; for ( int k = 0 ; k < list . size ( ) ; k ++ ) { Ptg ptg = ( Ptg ) list . get ( k ) ; retval += ptg . getSize ( ) ; } return retval ; } public boolean isBefore ( CellValueRecordInterface i ) { if ( this . getRow ( ) > i . getRow ( ) ) { return false ; } if ( ( this . getRow ( ) == i . getRow ( ) ) && ( this . getColumn ( ) > i . getColumn ( ) ) ) { return false ; } if ( ( this . getRow ( ) == i . getRow ( ) ) && ( this . getColumn ( ) == i . getColumn ( ) ) ) { return false ; } return true ; } public boolean isAfter ( CellValueRecordInterface i ) { if ( this . getRow ( ) < i . getRow ( ) ) { return false ; } if ( ( this . getRow ( ) == i . getRow ( ) ) && ( this . getColumn ( ) < i . getColumn ( ) ) ) { return false ; } if ( ( this . getRow ( ) == i . getRow ( ) ) && ( this . getColumn ( ) == i . getColumn ( ) ) ) { return false ; } return true ; } public boolean isEqual ( CellValueRecordInterface i ) { return ( ( this . getRow ( ) == i . getRow ( ) ) && ( this . getColumn ( ) == i . getColumn ( ) ) ) ; } public boolean isInValueSection ( ) { return true ; } public boolean isValue ( ) { return true ; } public int compareTo ( Object obj ) { CellValueRecordInterface loc = ( CellValueRecordInterface ) obj ; if ( ( this . getRow ( ) == loc . getRow ( ) ) && ( this . getColumn ( ) == loc . getColumn ( ) ) ) { return 0 ; } if ( this . getRow ( ) < loc . getRow ( ) ) { return - 1 ; } if ( this . getRow ( ) > loc . getRow ( ) ) { return 1 ; } if ( this . getColumn ( ) < loc . getColumn ( ) ) { return - 1 ; } if ( this . getColumn ( ) > loc . getColumn ( ) ) { return 1 ; } return - 1 ; } public boolean equals ( Object obj ) { if ( ! ( obj instanceof CellValueRecordInterface ) ) { return false ; } CellValueRecordInterface loc = ( CellValueRecordInterface ) obj ; if ( ( this . getRow ( ) == loc . getRow ( ) ) && ( this . getColumn ( ) == loc . getColumn ( ) ) ) { return true ; } return false ; } public String toString ( ) { StringBuffer buffer = new StringBuffer ( ) ; buffer . append ( "[FORMULA]\n" ) ; buffer . append ( "    .row       = " ) . append ( Integer . toHexString ( getRow ( ) ) ) . append ( "\n" ) ; buffer . append ( "    .column    = " ) . append ( Integer . toHexString ( getColumn ( ) ) ) . append ( "\n" ) ; buffer . append ( "    .xf              = " ) . append ( Integer . toHexString ( getXFIndex ( ) ) ) . append ( "\n" ) ; if ( Double . isNaN ( this . getValue ( ) ) && value_data != null ) buffer . append ( "    .value (NaN)     = " ) . append ( org . apache . poi . util . HexDump . dump ( value_data , 0 , 0 ) ) . append ( "\n" ) ; else buffer . append ( "    .value           = " ) . append ( getValue ( ) ) . append ( "\n" ) ; buffer . append ( "    .options         = " ) . append ( getOptions ( ) ) . append ( "\n" ) ; buffer . append ( "      .alwaysCalc         = " ) . append ( alwaysCalc . isSet ( getOptions ( ) ) ) . append ( "\n" ) ; buffer . append ( "      .calcOnLoad         = " ) . append ( calcOnLoad . isSet ( getOptions ( ) ) ) . append ( "\n" ) ; buffer . append ( "      .sharedFormula         = " ) . append ( sharedFormula . isSet ( getOptions ( ) ) ) . append ( "\n" ) ; buffer . append ( "    .zero            = " ) . append ( field_6_zero ) . append ( "\n" ) ; buffer . append ( "    .expressionlength= " ) . append ( getExpressionLength ( ) ) . append ( "\n" ) ; if ( field_8_parsed_expr != null ) { buffer . append ( "    .numptgsinarray  = " ) . append ( field_8_parsed_expr . size ( ) ) . append ( "\n" ) ; for ( int k = 0 ; k < field_8_parsed_expr . size ( ) ; k ++ ) { buffer . append ( "     Ptg(" ) . append ( k ) . append ( ")=" ) . append ( field_8_parsed_expr . get ( k ) . toString ( ) ) . append ( "\n" ) . append ( ( ( Ptg ) field_8_parsed_expr . get ( k ) ) . toDebugString ( ) ) . append ( "\n" ) ; } } else { buffer . append ( "Formula full data \n" ) . append ( org . apache . poi . util . HexDump . dump ( this . all_data , 0 , 0 ) ) ; } buffer . append ( "[/FORMULA]\n" ) ; return buffer . toString ( ) ; } public Object clone ( ) { FormulaRecord rec = new FormulaRecord ( ) ; rec . field_1_row = field_1_row ; rec . field_2_column = field_2_column ; rec . field_3_xf = field_3_xf ; rec . field_4_value = field_4_value ; rec . field_5_options = field_5_options ; rec . field_6_zero = field_6_zero ; rec . field_7_expression_len = field_7_expression_len ; rec . field_8_parsed_expr = new Stack ( ) ; int size = 0 ; if ( field_8_parsed_expr != null ) size = field_8_parsed_expr . size ( ) ; for ( int i = 0 ; i < size ; i ++ ) { Ptg ptg = ( Ptg ) ( ( Ptg ) field_8_parsed_expr . get ( i ) ) . clone ( ) ; rec . field_8_parsed_expr . add ( i , ptg ) ; } rec . value_data = value_data ; rec . all_data = all_data ; return rec ; } } 	1
package org . apache . poi . util ; import org . apache . poi . util . LittleEndian . BufferUnderrunException ; import java . io . * ; public class ByteField implements FixedField { private static final byte _default_value = 0 ; private byte _value ; private final int _offset ; public ByteField ( final int offset ) throws ArrayIndexOutOfBoundsException { this ( offset , _default_value ) ; } public ByteField ( final int offset , final byte value ) throws ArrayIndexOutOfBoundsException { if ( offset < 0 ) { throw new ArrayIndexOutOfBoundsException ( "offset cannot be negative" ) ; } _offset = offset ; set ( value ) ; } public ByteField ( final int offset , final byte [ ] data ) throws ArrayIndexOutOfBoundsException { this ( offset ) ; readFromBytes ( data ) ; } public ByteField ( final int offset , final byte value , final byte [ ] data ) throws ArrayIndexOutOfBoundsException { this ( offset , value ) ; writeToBytes ( data ) ; } public byte get ( ) { return _value ; } public void set ( final byte value ) { _value = value ; } public void set ( final byte value , final byte [ ] data ) throws ArrayIndexOutOfBoundsException { set ( value ) ; writeToBytes ( data ) ; } public void readFromBytes ( final byte [ ] data ) throws ArrayIndexOutOfBoundsException { _value = data [ _offset ] ; } public void readFromStream ( final InputStream stream ) throws IOException , BufferUnderrunException { _value = ( LittleEndian . readFromStream ( stream , LittleEndianConsts . BYTE_SIZE ) ) [ 0 ] ; } public void writeToBytes ( final byte [ ] data ) throws ArrayIndexOutOfBoundsException { data [ _offset ] = _value ; } public String toString ( ) { return String . valueOf ( _value ) ; } } 	0
package org . apache . poi . hssf . usermodel ; import org . apache . poi . util . POILogFactory ; import org . apache . poi . util . POILogger ; import java . awt . * ; import java . awt . font . FontRenderContext ; import java . awt . font . GlyphVector ; import java . awt . font . TextLayout ; import java . awt . geom . AffineTransform ; import java . awt . geom . Area ; import java . awt . geom . GeneralPath ; import java . awt . geom . Line2D ; import java . awt . image . BufferedImage ; import java . awt . image . BufferedImageOp ; import java . awt . image . ImageObserver ; import java . awt . image . RenderedImage ; import java . awt . image . renderable . RenderableImage ; import java . text . AttributedCharacterIterator ; import java . util . Map ; public class EscherGraphics2d extends Graphics2D { private EscherGraphics escherGraphics ; private BufferedImage img ; private AffineTransform trans ; private Stroke stroke ; private Paint paint ; private Shape deviceclip ; private POILogger logger = POILogFactory . getLogger ( getClass ( ) ) ; public EscherGraphics2d ( EscherGraphics escherGraphics ) { this . escherGraphics = escherGraphics ; setImg ( new BufferedImage ( 1 , 1 , 2 ) ) ; setColor ( Color . black ) ; } public void addRenderingHints ( Map map ) { getG2D ( ) . addRenderingHints ( map ) ; } public void clearRect ( int i , int j , int k , int l ) { Paint paint1 = getPaint ( ) ; setColor ( getBackground ( ) ) ; fillRect ( i , j , k , l ) ; setPaint ( paint1 ) ; } public void clip ( Shape shape ) { if ( getDeviceclip ( ) != null ) { Area area = new Area ( getClip ( ) ) ; if ( shape != null ) area . intersect ( new Area ( shape ) ) ; shape = area ; } setClip ( shape ) ; } public void clipRect ( int x , int y , int width , int height ) { clip ( new Rectangle ( x , y , width , height ) ) ; } public void copyArea ( int x , int y , int width , int height , int dx , int dy ) { getG2D ( ) . copyArea ( x , y , width , height , dx , dy ) ; } public Graphics create ( ) { EscherGraphics2d g2d = new EscherGraphics2d ( escherGraphics ) ; return g2d ; } public void dispose ( ) { getEscherGraphics ( ) . dispose ( ) ; getG2D ( ) . dispose ( ) ; getImg ( ) . flush ( ) ; } public void draw ( Shape shape ) { if ( shape instanceof Line2D ) { Line2D shape2d = ( Line2D ) shape ; int width = 0 ; if ( stroke != null && stroke instanceof BasicStroke ) { width = ( int ) ( ( BasicStroke ) stroke ) . getLineWidth ( ) * 12700 ; } drawLine ( ( int ) shape2d . getX1 ( ) , ( int ) shape2d . getY1 ( ) , ( int ) shape2d . getX2 ( ) , ( int ) shape2d . getY2 ( ) , width ) ; } else { if ( logger . check ( POILogger . WARN ) ) logger . log ( POILogger . WARN , "draw not fully supported" ) ; } } public void drawArc ( int x , int y , int width , int height , int startAngle , int arcAngle ) { draw ( new java . awt . geom . Arc2D . Float ( x , y , width , height , startAngle , arcAngle , 0 ) ) ; } public void drawGlyphVector ( GlyphVector g , float x , float y ) { fill ( g . getOutline ( x , y ) ) ; } public boolean drawImage ( Image image , int dx1 , int dy1 , int dx2 , int dy2 , int sx1 , int sy1 , int sx2 , int sy2 , Color bgColor , ImageObserver imageobserver ) { if ( logger . check ( POILogger . WARN ) ) logger . log ( POILogger . WARN , "drawImage() not supported" ) ; return true ; } public boolean drawImage ( Image image , int dx1 , int dy1 , int dx2 , int dy2 , int sx1 , int sy1 , int sx2 , int sy2 , ImageObserver imageobserver ) { if ( logger . check ( POILogger . WARN ) ) logger . log ( POILogger . WARN , "drawImage() not supported" ) ; return drawImage ( image , dx1 , dy1 , dx2 , dy2 , sx1 , sy1 , sx2 , sy2 , null , imageobserver ) ; } public boolean drawImage ( Image image , int dx1 , int dy1 , int dx2 , int dy2 , Color bgColor , ImageObserver imageobserver ) { if ( logger . check ( POILogger . WARN ) ) logger . log ( POILogger . WARN , "drawImage() not supported" ) ; return true ; } public boolean drawImage ( Image img , int x , int y , int width , int height , ImageObserver observer ) { return drawImage ( img , x , y , width , height , null , observer ) ; } public boolean drawImage ( Image image , int x , int y , Color bgColor , ImageObserver imageobserver ) { return drawImage ( image , x , y , image . getWidth ( imageobserver ) , image . getHeight ( imageobserver ) , bgColor , imageobserver ) ; } public boolean drawImage ( Image image , int x , int y , ImageObserver imageobserver ) { return drawImage ( image , x , y , image . getWidth ( imageobserver ) , image . getHeight ( imageobserver ) , imageobserver ) ; } public boolean drawImage ( Image image , AffineTransform affinetransform , ImageObserver imageobserver ) { AffineTransform affinetransform1 = ( AffineTransform ) getTrans ( ) . clone ( ) ; getTrans ( ) . concatenate ( affinetransform ) ; drawImage ( image , 0 , 0 , imageobserver ) ; setTrans ( affinetransform1 ) ; return true ; } public void drawImage ( BufferedImage bufferedimage , BufferedImageOp op , int x , int y ) { BufferedImage img = op . filter ( bufferedimage , null ) ; drawImage ( ( ( Image ) ( img ) ) , new AffineTransform ( 1.0F , 0.0F , 0.0F , 1.0F , x , y ) , null ) ; } public void drawLine ( int x1 , int y1 , int x2 , int y2 , int width ) { getEscherGraphics ( ) . drawLine ( x1 , y1 , x2 , y2 , width ) ; } public void drawLine ( int x1 , int y1 , int x2 , int y2 ) { int width = 0 ; if ( stroke != null && stroke instanceof BasicStroke ) { width = ( int ) ( ( BasicStroke ) stroke ) . getLineWidth ( ) * 12700 ; } getEscherGraphics ( ) . drawLine ( x1 , y1 , x2 , y2 , width ) ; } public void drawOval ( int x , int y , int width , int height ) { getEscherGraphics ( ) . drawOval ( x , y , width , height ) ; } public void drawPolygon ( int xPoints [ ] , int yPoints [ ] , int nPoints ) { getEscherGraphics ( ) . drawPolygon ( xPoints , yPoints , nPoints ) ; } public void drawPolyline ( int xPoints [ ] , int yPoints [ ] , int nPoints ) { if ( nPoints > 0 ) { GeneralPath generalpath = new GeneralPath ( ) ; generalpath . moveTo ( xPoints [ 0 ] , yPoints [ 0 ] ) ; for ( int j = 1 ; j < nPoints ; j ++ ) generalpath . lineTo ( xPoints [ j ] , yPoints [ j ] ) ; draw ( generalpath ) ; } } public void drawRect ( int x , int y , int width , int height ) { escherGraphics . drawRect ( x , y , width , height ) ; } public void drawRenderableImage ( RenderableImage renderableimage , AffineTransform affinetransform ) { drawRenderedImage ( renderableimage . createDefaultRendering ( ) , affinetransform ) ; } public void drawRenderedImage ( RenderedImage renderedimage , AffineTransform affinetransform ) { BufferedImage bufferedimage = new BufferedImage ( renderedimage . getColorModel ( ) , renderedimage . getData ( ) . createCompatibleWritableRaster ( ) , false , null ) ; bufferedimage . setData ( renderedimage . getData ( ) ) ; drawImage ( bufferedimage , affinetransform , null ) ; } public void drawRoundRect ( int i , int j , int k , int l , int i1 , int j1 ) { draw ( new java . awt . geom . RoundRectangle2D . Float ( i , j , k , l , i1 , j1 ) ) ; } public void drawString ( String string , float x , float y ) { getEscherGraphics ( ) . drawString ( string , ( int ) x , ( int ) y ) ; } public void drawString ( String string , int x , int y ) { getEscherGraphics ( ) . drawString ( string , x , y ) ; } public void drawString ( AttributedCharacterIterator attributedcharacteriterator , float x , float y ) { TextLayout textlayout = new TextLayout ( attributedcharacteriterator , getFontRenderContext ( ) ) ; Paint paint1 = getPaint ( ) ; setColor ( getColor ( ) ) ; fill ( textlayout . getOutline ( AffineTransform . getTranslateInstance ( x , y ) ) ) ; setPaint ( paint1 ) ; } public void drawString ( AttributedCharacterIterator attributedcharacteriterator , int x , int y ) { drawString ( attributedcharacteriterator , x , y ) ; } public void fill ( Shape shape ) { if ( logger . check ( POILogger . WARN ) ) logger . log ( POILogger . WARN , "fill(Shape) not supported" ) ; } public void fillArc ( int i , int j , int k , int l , int i1 , int j1 ) { fill ( new java . awt . geom . Arc2D . Float ( i , j , k , l , i1 , j1 , 2 ) ) ; } public void fillOval ( int x , int y , int width , int height ) { escherGraphics . fillOval ( x , y , width , height ) ; } public void fillPolygon ( int xPoints [ ] , int yPoints [ ] , int nPoints ) { escherGraphics . fillPolygon ( xPoints , yPoints , nPoints ) ; } public void fillRect ( int x , int y , int width , int height ) { getEscherGraphics ( ) . fillRect ( x , y , width , height ) ; } public void fillRoundRect ( int x , int y , int width , int height , int arcWidth , int arcHeight ) { fill ( new java . awt . geom . RoundRectangle2D . Float ( x , y , width , height , arcWidth , arcHeight ) ) ; } public Color getBackground ( ) { return getEscherGraphics ( ) . getBackground ( ) ; } public Shape getClip ( ) { try { return getTrans ( ) . createInverse ( ) . createTransformedShape ( getDeviceclip ( ) ) ; } catch ( Exception _ex ) { return null ; } } public Rectangle getClipBounds ( ) { if ( getDeviceclip ( ) != null ) return getClip ( ) . getBounds ( ) ; else return null ; } public Color getColor ( ) { return escherGraphics . getColor ( ) ; } public Composite getComposite ( ) { return getG2D ( ) . getComposite ( ) ; } public GraphicsConfiguration getDeviceConfiguration ( ) { return getG2D ( ) . getDeviceConfiguration ( ) ; } public Font getFont ( ) { return getEscherGraphics ( ) . getFont ( ) ; } public FontMetrics getFontMetrics ( Font font ) { return getEscherGraphics ( ) . getFontMetrics ( font ) ; } public FontRenderContext getFontRenderContext ( ) { getG2D ( ) . setTransform ( getTrans ( ) ) ; return getG2D ( ) . getFontRenderContext ( ) ; } public Paint getPaint ( ) { return paint ; } public Object getRenderingHint ( java . awt . RenderingHints . Key key ) { return getG2D ( ) . getRenderingHint ( key ) ; } public RenderingHints getRenderingHints ( ) { return getG2D ( ) . getRenderingHints ( ) ; } public Stroke getStroke ( ) { return stroke ; } public AffineTransform getTransform ( ) { return ( AffineTransform ) getTrans ( ) . clone ( ) ; } public boolean hit ( Rectangle rectangle , Shape shape , boolean flag ) { getG2D ( ) . setTransform ( getTrans ( ) ) ; getG2D ( ) . setStroke ( getStroke ( ) ) ; getG2D ( ) . setClip ( getClip ( ) ) ; return getG2D ( ) . hit ( rectangle , shape , flag ) ; } public void rotate ( double d ) { getTrans ( ) . rotate ( d ) ; } public void rotate ( double d , double d1 , double d2 ) { getTrans ( ) . rotate ( d , d1 , d2 ) ; } public void scale ( double d , double d1 ) { getTrans ( ) . scale ( d , d1 ) ; } public void setBackground ( Color c ) { getEscherGraphics ( ) . setBackground ( c ) ; } public void setClip ( int i , int j , int k , int l ) { setClip ( ( ( Shape ) ( new Rectangle ( i , j , k , l ) ) ) ) ; } public void setClip ( Shape shape ) { setDeviceclip ( getTrans ( ) . createTransformedShape ( shape ) ) ; } public void setColor ( Color c ) { escherGraphics . setColor ( c ) ; } public void setComposite ( Composite composite ) { getG2D ( ) . setComposite ( composite ) ; } public void setFont ( Font font ) { getEscherGraphics ( ) . setFont ( font ) ; } public void setPaint ( Paint paint1 ) { if ( paint1 != null ) { paint = paint1 ; if ( paint1 instanceof Color ) setColor ( ( Color ) paint1 ) ; } } public void setPaintMode ( ) { getEscherGraphics ( ) . setPaintMode ( ) ; } public void setRenderingHint ( java . awt . RenderingHints . Key key , Object obj ) { getG2D ( ) . setRenderingHint ( key , obj ) ; } public void setRenderingHints ( Map map ) { getG2D ( ) . setRenderingHints ( map ) ; } public void setStroke ( Stroke s ) { stroke = s ; } public void setTransform ( AffineTransform affinetransform ) { setTrans ( ( AffineTransform ) affinetransform . clone ( ) ) ; } public void setXORMode ( Color color1 ) { getEscherGraphics ( ) . setXORMode ( color1 ) ; } public void shear ( double d , double d1 ) { getTrans ( ) . shear ( d , d1 ) ; } public void transform ( AffineTransform affinetransform ) { getTrans ( ) . concatenate ( affinetransform ) ; } public void translate ( double d , double d1 ) { getTrans ( ) . translate ( d , d1 ) ; } public void translate ( int i , int j ) { getTrans ( ) . translate ( i , j ) ; } private EscherGraphics getEscherGraphics ( ) { return escherGraphics ; } private BufferedImage getImg ( ) { return img ; } private void setImg ( BufferedImage img ) { this . img = img ; } private Graphics2D getG2D ( ) { return ( Graphics2D ) img . getGraphics ( ) ; } private AffineTransform getTrans ( ) { return trans ; } private void setTrans ( AffineTransform trans ) { this . trans = trans ; } private Shape getDeviceclip ( ) { return deviceclip ; } private void setDeviceclip ( Shape deviceclip ) { this . deviceclip = deviceclip ; } } 	1
package org . apache . poi . hssf . record ; import org . apache . poi . util . LittleEndian ; public class PasswordRecord extends Record { public final static short sid = 0x13 ; private short field_1_password ; public PasswordRecord ( ) { } public PasswordRecord ( RecordInputStream in ) { super ( in ) ; } protected void validateSid ( short id ) { if ( id != sid ) { throw new RecordFormatException ( "NOT A PASSWORD RECORD" ) ; } } protected void fillFields ( RecordInputStream in ) { field_1_password = in . readShort ( ) ; } public void setPassword ( short password ) { field_1_password = password ; } public short getPassword ( ) { return field_1_password ; } public String toString ( ) { StringBuffer buffer = new StringBuffer ( ) ; buffer . append ( "[PASSWORD]\n" ) ; buffer . append ( "    .password       = " ) . append ( Integer . toHexString ( getPassword ( ) ) ) . append ( "\n" ) ; buffer . append ( "[/PASSWORD]\n" ) ; return buffer . toString ( ) ; } public int serialize ( int offset , byte [ ] data ) { LittleEndian . putShort ( data , 0 + offset , sid ) ; LittleEndian . putShort ( data , 2 + offset , ( ( short ) 0x02 ) ) ; LittleEndian . putShort ( data , 4 + offset , getPassword ( ) ) ; return getRecordSize ( ) ; } public int getRecordSize ( ) { return 6 ; } public short getSid ( ) { return sid ; } public Object clone ( ) { PasswordRecord clone = new PasswordRecord ( ) ; clone . setPassword ( field_1_password ) ; return clone ; } } 	1
package org . apache . poi . hssf . record ; import org . apache . poi . util . * ; public class NumberFormatIndexRecord extends Record { public final static short sid = 0x104e ; private short field_1_formatIndex ; public NumberFormatIndexRecord ( ) { } public NumberFormatIndexRecord ( RecordInputStream in ) { super ( in ) ; } protected void validateSid ( short id ) { if ( id != sid ) { throw new RecordFormatException ( "Not a NumberFormatIndex record" ) ; } } protected void fillFields ( RecordInputStream in ) { field_1_formatIndex = in . readShort ( ) ; } public String toString ( ) { StringBuffer buffer = new StringBuffer ( ) ; buffer . append ( "[IFMT]\n" ) ; buffer . append ( "    .formatIndex          = " ) . append ( "0x" ) . append ( HexDump . toHex ( getFormatIndex ( ) ) ) . append ( " (" ) . append ( getFormatIndex ( ) ) . append ( " )" ) ; buffer . append ( System . getProperty ( "line.separator" ) ) ; buffer . append ( "[/IFMT]\n" ) ; return buffer . toString ( ) ; } public int serialize ( int offset , byte [ ] data ) { int pos = 0 ; LittleEndian . putShort ( data , 0 + offset , sid ) ; LittleEndian . putShort ( data , 2 + offset , ( short ) ( getRecordSize ( ) - 4 ) ) ; LittleEndian . putShort ( data , 4 + offset + pos , field_1_formatIndex ) ; return getRecordSize ( ) ; } public int getRecordSize ( ) { return 4 + 2 ; } public short getSid ( ) { return sid ; } public Object clone ( ) { NumberFormatIndexRecord rec = new NumberFormatIndexRecord ( ) ; rec . field_1_formatIndex = field_1_formatIndex ; return rec ; } public short getFormatIndex ( ) { return field_1_formatIndex ; } public void setFormatIndex ( short field_1_formatIndex ) { this . field_1_formatIndex = field_1_formatIndex ; } } 	1
package org . apache . poi . hssf . record ; import org . apache . poi . util . LittleEndian ; import org . apache . poi . util . LittleEndianConsts ; class SSTRecordHeader { int numStrings ; int numUniqueStrings ; public SSTRecordHeader ( int numStrings , int numUniqueStrings ) { this . numStrings = numStrings ; this . numUniqueStrings = numUniqueStrings ; } public int writeSSTHeader ( UnicodeString . UnicodeRecordStats stats , byte [ ] data , int bufferIndex , int recSize ) { int offset = bufferIndex ; LittleEndian . putShort ( data , offset , SSTRecord . sid ) ; offset += LittleEndianConsts . SHORT_SIZE ; stats . recordSize += LittleEndianConsts . SHORT_SIZE ; stats . remainingSize -= LittleEndianConsts . SHORT_SIZE ; stats . lastLengthPos = offset ; offset += LittleEndianConsts . SHORT_SIZE ; stats . recordSize += LittleEndianConsts . SHORT_SIZE ; stats . remainingSize -= LittleEndianConsts . SHORT_SIZE ; LittleEndian . putInt ( data , offset , numStrings ) ; offset += LittleEndianConsts . INT_SIZE ; stats . recordSize += LittleEndianConsts . INT_SIZE ; stats . remainingSize -= LittleEndianConsts . INT_SIZE ; LittleEndian . putInt ( data , offset , numUniqueStrings ) ; offset += LittleEndianConsts . INT_SIZE ; stats . recordSize += LittleEndianConsts . INT_SIZE ; stats . remainingSize -= LittleEndianConsts . INT_SIZE ; return offset - bufferIndex ; } } 	0
package org . apache . poi . poifs . storage ; import java . io . IOException ; public interface BlockList { public void zap ( final int index ) ; public ListManagedBlock remove ( final int index ) throws IOException ; public ListManagedBlock [ ] fetchBlocks ( final int startBlock ) throws IOException ; public void setBAT ( final BlockAllocationTableReader bat ) throws IOException ; } 	1
package org . apache . poi . hssf . record ; public abstract class Record { public Record ( ) { } public Record ( RecordInputStream in ) { validateSid ( in . getSid ( ) ) ; fillFields ( in ) ; } protected abstract void validateSid ( short id ) ; protected abstract void fillFields ( RecordInputStream in ) ; public byte [ ] serialize ( ) { byte [ ] retval = new byte [ getRecordSize ( ) ] ; serialize ( 0 , retval ) ; return retval ; } public abstract int serialize ( int offset , byte [ ] data ) ; public int getRecordSize ( ) { return serialize ( ) . length ; } public boolean isValue ( ) { return false ; } public boolean isInValueSection ( ) { return false ; } public String toString ( ) { return super . toString ( ) ; } public abstract short getSid ( ) ; public Object clone ( ) { throw new RuntimeException ( "The class " + getClass ( ) . getName ( ) + " needs to define a clone method" ) ; } } 	1
package org . apache . poi . hssf . record ; import org . apache . poi . util . * ; public class AxisRecord extends Record { public final static short sid = 0x101d ; private short field_1_axisType ; public final static short AXIS_TYPE_CATEGORY_OR_X_AXIS = 0 ; public final static short AXIS_TYPE_VALUE_AXIS = 1 ; public final static short AXIS_TYPE_SERIES_AXIS = 2 ; private int field_2_reserved1 ; private int field_3_reserved2 ; private int field_4_reserved3 ; private int field_5_reserved4 ; public AxisRecord ( ) { } public AxisRecord ( RecordInputStream in ) { super ( in ) ; } protected void validateSid ( short id ) { if ( id != sid ) { throw new RecordFormatException ( "Not a Axis record" ) ; } } protected void fillFields ( RecordInputStream in ) { field_1_axisType = in . readShort ( ) ; field_2_reserved1 = in . readInt ( ) ; field_3_reserved2 = in . readInt ( ) ; field_4_reserved3 = in . readInt ( ) ; field_5_reserved4 = in . readInt ( ) ; } public String toString ( ) { StringBuffer buffer = new StringBuffer ( ) ; buffer . append ( "[AXIS]\n" ) ; buffer . append ( "    .axisType             = " ) . append ( "0x" ) . append ( HexDump . toHex ( getAxisType ( ) ) ) . append ( " (" ) . append ( getAxisType ( ) ) . append ( " )" ) ; buffer . append ( System . getProperty ( "line.separator" ) ) ; buffer . append ( "    .reserved1            = " ) . append ( "0x" ) . append ( HexDump . toHex ( getReserved1 ( ) ) ) . append ( " (" ) . append ( getReserved1 ( ) ) . append ( " )" ) ; buffer . append ( System . getProperty ( "line.separator" ) ) ; buffer . append ( "    .reserved2            = " ) . append ( "0x" ) . append ( HexDump . toHex ( getReserved2 ( ) ) ) . append ( " (" ) . append ( getReserved2 ( ) ) . append ( " )" ) ; buffer . append ( System . getProperty ( "line.separator" ) ) ; buffer . append ( "    .reserved3            = " ) . append ( "0x" ) . append ( HexDump . toHex ( getReserved3 ( ) ) ) . append ( " (" ) . append ( getReserved3 ( ) ) . append ( " )" ) ; buffer . append ( System . getProperty ( "line.separator" ) ) ; buffer . append ( "    .reserved4            = " ) . append ( "0x" ) . append ( HexDump . toHex ( getReserved4 ( ) ) ) . append ( " (" ) . append ( getReserved4 ( ) ) . append ( " )" ) ; buffer . append ( System . getProperty ( "line.separator" ) ) ; buffer . append ( "[/AXIS]\n" ) ; return buffer . toString ( ) ; } public int serialize ( int offset , byte [ ] data ) { int pos = 0 ; LittleEndian . putShort ( data , 0 + offset , sid ) ; LittleEndian . putShort ( data , 2 + offset , ( short ) ( getRecordSize ( ) - 4 ) ) ; LittleEndian . putShort ( data , 4 + offset + pos , field_1_axisType ) ; LittleEndian . putInt ( data , 6 + offset + pos , field_2_reserved1 ) ; LittleEndian . putInt ( data , 10 + offset + pos , field_3_reserved2 ) ; LittleEndian . putInt ( data , 14 + offset + pos , field_4_reserved3 ) ; LittleEndian . putInt ( data , 18 + offset + pos , field_5_reserved4 ) ; return getRecordSize ( ) ; } public int getRecordSize ( ) { return 4 + 2 + 4 + 4 + 4 + 4 ; } public short getSid ( ) { return sid ; } public Object clone ( ) { AxisRecord rec = new AxisRecord ( ) ; rec . field_1_axisType = field_1_axisType ; rec . field_2_reserved1 = field_2_reserved1 ; rec . field_3_reserved2 = field_3_reserved2 ; rec . field_4_reserved3 = field_4_reserved3 ; rec . field_5_reserved4 = field_5_reserved4 ; return rec ; } public short getAxisType ( ) { return field_1_axisType ; } public void setAxisType ( short field_1_axisType ) { this . field_1_axisType = field_1_axisType ; } public int getReserved1 ( ) { return field_2_reserved1 ; } public void setReserved1 ( int field_2_reserved1 ) { this . field_2_reserved1 = field_2_reserved1 ; } public int getReserved2 ( ) { return field_3_reserved2 ; } public void setReserved2 ( int field_3_reserved2 ) { this . field_3_reserved2 = field_3_reserved2 ; } public int getReserved3 ( ) { return field_4_reserved3 ; } public void setReserved3 ( int field_4_reserved3 ) { this . field_4_reserved3 = field_4_reserved3 ; } public int getReserved4 ( ) { return field_5_reserved4 ; } public void setReserved4 ( int field_5_reserved4 ) { this . field_5_reserved4 = field_5_reserved4 ; } } 	1
package org . apache . poi . hssf . record ; import org . apache . poi . util . LittleEndian ; public class ExtSSTInfoSubRecord extends Record { public static final int INFO_SIZE = 8 ; public final static short sid = 0xFFF ; private int field_1_stream_pos ; private short field_2_bucket_sst_offset ; private short field_3_zero ; public ExtSSTInfoSubRecord ( ) { } public ExtSSTInfoSubRecord ( RecordInputStream in ) { super ( in ) ; } protected void validateSid ( short id ) { } protected void fillFields ( RecordInputStream in ) { field_1_stream_pos = in . readInt ( ) ; field_2_bucket_sst_offset = in . readShort ( ) ; field_3_zero = in . readShort ( ) ; } public void setStreamPos ( int pos ) { field_1_stream_pos = pos ; } public void setBucketRecordOffset ( short offset ) { field_2_bucket_sst_offset = offset ; } public int getStreamPos ( ) { return field_1_stream_pos ; } public short getBucketSSTOffset ( ) { return field_2_bucket_sst_offset ; } public String toString ( ) { StringBuffer buffer = new StringBuffer ( ) ; buffer . append ( "[EXTSST]\n" ) ; buffer . append ( "    .streampos      = " ) . append ( Integer . toHexString ( getStreamPos ( ) ) ) . append ( "\n" ) ; buffer . append ( "    .bucketsstoffset= " ) . append ( Integer . toHexString ( getBucketSSTOffset ( ) ) ) . append ( "\n" ) ; buffer . append ( "    .zero           = " ) . append ( Integer . toHexString ( field_3_zero ) ) . append ( "\n" ) ; buffer . append ( "[/EXTSST]\n" ) ; return buffer . toString ( ) ; } public int serialize ( int offset , byte [ ] data ) { LittleEndian . putInt ( data , 0 + offset , getStreamPos ( ) ) ; LittleEndian . putShort ( data , 4 + offset , getBucketSSTOffset ( ) ) ; LittleEndian . putShort ( data , 6 + offset , ( short ) 0 ) ; return getRecordSize ( ) ; } public int getRecordSize ( ) { return 8 ; } public short getSid ( ) { return sid ; } } 	0
package org . apache . poi . hssf . record ; import org . apache . poi . util . LittleEndian ; public class InterfaceHdrRecord extends Record { public final static short sid = 0xe1 ; private short field_1_codepage ; public final static short CODEPAGE = ( short ) 0x4b0 ; public InterfaceHdrRecord ( ) { } public InterfaceHdrRecord ( RecordInputStream in ) { super ( in ) ; } protected void validateSid ( short id ) { if ( id != sid ) { throw new RecordFormatException ( "NOT A INTERFACEHDR RECORD" ) ; } } protected void fillFields ( RecordInputStream in ) { field_1_codepage = in . readShort ( ) ; } public void setCodepage ( short cp ) { field_1_codepage = cp ; } public short getCodepage ( ) { return field_1_codepage ; } public String toString ( ) { StringBuffer buffer = new StringBuffer ( ) ; buffer . append ( "[INTERFACEHDR]\n" ) ; buffer . append ( "    .codepage        = " ) . append ( Integer . toHexString ( getCodepage ( ) ) ) . append ( "\n" ) ; buffer . append ( "[/INTERFACEHDR]\n" ) ; return buffer . toString ( ) ; } public int serialize ( int offset , byte [ ] data ) { LittleEndian . putShort ( data , 0 + offset , sid ) ; LittleEndian . putShort ( data , 2 + offset , ( ( short ) 0x02 ) ) ; LittleEndian . putShort ( data , 4 + offset , getCodepage ( ) ) ; return getRecordSize ( ) ; } public int getRecordSize ( ) { return 6 ; } public short getSid ( ) { return sid ; } } 	1
package org . apache . poi . poifs . property ; public interface Child { public Child getNextChild ( ) ; public Child getPreviousChild ( ) ; public void setNextChild ( final Child child ) ; public void setPreviousChild ( final Child child ) ; } 	0
package org . apache . poi . hssf . dev ; import java . io . IOException ; import java . io . FileInputStream ; import java . io . FileOutputStream ; import org . apache . poi . poifs . filesystem . POIFSFileSystem ; import org . apache . poi . hssf . usermodel . * ; import org . apache . poi . hssf . util . * ; public class HSSF { private String filename = null ; protected HSSFWorkbook hssfworkbook = null ; public HSSF ( String filename ) throws IOException { this . filename = filename ; POIFSFileSystem fs = new POIFSFileSystem ( new FileInputStream ( filename ) ) ; hssfworkbook = new HSSFWorkbook ( fs ) ; } public HSSF ( String filename , boolean write ) throws IOException { short rownum = 0 ; FileOutputStream out = new FileOutputStream ( filename ) ; HSSFWorkbook wb = new HSSFWorkbook ( ) ; HSSFSheet s = wb . createSheet ( ) ; HSSFRow r = null ; HSSFCell c = null ; HSSFCellStyle cs = wb . createCellStyle ( ) ; HSSFCellStyle cs2 = wb . createCellStyle ( ) ; HSSFCellStyle cs3 = wb . createCellStyle ( ) ; HSSFFont f = wb . createFont ( ) ; HSSFFont f2 = wb . createFont ( ) ; f . setFontHeightInPoints ( ( short ) 12 ) ; f . setColor ( ( short ) 0xA ) ; f . setBoldweight ( HSSFFont . BOLDWEIGHT_BOLD ) ; f2 . setFontHeightInPoints ( ( short ) 10 ) ; f2 . setColor ( ( short ) 0xf ) ; f2 . setBoldweight ( HSSFFont . BOLDWEIGHT_BOLD ) ; cs . setFont ( f ) ; cs . setDataFormat ( HSSFDataFormat . getBuiltinFormat ( "($#,##0_);[Red]($#,##0)" ) ) ; cs2 . setBorderBottom ( HSSFCellStyle . BORDER_THIN ) ; cs2 . setFillPattern ( ( short ) 1 ) ; cs2 . setFillForegroundColor ( ( short ) 0xA ) ; cs2 . setFont ( f2 ) ; wb . setSheetName ( 0 , "HSSF Test" ) ; for ( rownum = ( short ) 0 ; rownum < 300 ; rownum ++ ) { r = s . createRow ( rownum ) ; if ( ( rownum % 2 ) == 0 ) { r . setHeight ( ( short ) 0x249 ) ; } for ( short cellnum = ( short ) 0 ; cellnum < 50 ; cellnum += 2 ) { c = r . createCell ( cellnum , HSSFCell . CELL_TYPE_NUMERIC ) ; c . setCellValue ( rownum * 10000 + cellnum + ( ( ( double ) rownum / 1000 ) + ( ( double ) cellnum / 10000 ) ) ) ; if ( ( rownum % 2 ) == 0 ) { c . setCellStyle ( cs ) ; } c = r . createCell ( ( short ) ( cellnum + 1 ) , HSSFCell . CELL_TYPE_STRING ) ; c . setCellValue ( "TEST" ) ; s . setColumnWidth ( ( short ) ( cellnum + 1 ) , ( short ) ( ( 50 * 8 ) / ( ( double ) 1 / 20 ) ) ) ; if ( ( rownum % 2 ) == 0 ) { c . setCellStyle ( cs2 ) ; } } } rownum ++ ; rownum ++ ; r = s . createRow ( rownum ) ; cs3 . setBorderBottom ( HSSFCellStyle . BORDER_THICK ) ; for ( short cellnum = ( short ) 0 ; cellnum < 50 ; cellnum ++ ) { c = r . createCell ( cellnum , HSSFCell . CELL_TYPE_BLANK ) ; c . setCellStyle ( cs3 ) ; } s . addMergedRegion ( new Region ( ( short ) 0 , ( short ) 0 , ( short ) 3 , ( short ) 3 ) ) ; s . addMergedRegion ( new Region ( ( short ) 100 , ( short ) 100 , ( short ) 110 , ( short ) 110 ) ) ; s = wb . createSheet ( ) ; wb . setSheetName ( 1 , "DeletedSheet" ) ; wb . removeSheetAt ( 1 ) ; wb . write ( out ) ; out . close ( ) ; } public HSSF ( String infile , String outfile , boolean write ) throws IOException { this . filename = infile ; POIFSFileSystem fs = new POIFSFileSystem ( new FileInputStream ( filename ) ) ; hssfworkbook = new HSSFWorkbook ( fs ) ; } public static void main ( String [ ] args ) { if ( args . length < 2 ) { } else if ( args . length == 2 ) { if ( args [ 1 ] . toLowerCase ( ) . equals ( "write" ) ) { System . out . println ( "Write mode" ) ; try { long time = System . currentTimeMillis ( ) ; HSSF hssf = new HSSF ( args [ 0 ] , true ) ; System . out . println ( "" + ( System . currentTimeMillis ( ) - time ) + " ms generation time" ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; } } else { System . out . println ( "readwrite test" ) ; try { HSSF hssf = new HSSF ( args [ 0 ] ) ; HSSFWorkbook wb = hssf . hssfworkbook ; FileOutputStream stream = new FileOutputStream ( args [ 1 ] ) ; wb . write ( stream ) ; stream . close ( ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; } } } else if ( ( args . length == 3 ) && args [ 2 ] . toLowerCase ( ) . equals ( "modify1" ) ) { try { HSSF hssf = new HSSF ( args [ 0 ] ) ; HSSFWorkbook wb = hssf . hssfworkbook ; FileOutputStream stream = new FileOutputStream ( args [ 1 ] ) ; HSSFSheet sheet = wb . getSheetAt ( 0 ) ; for ( int k = 0 ; k < 25 ; k ++ ) { HSSFRow row = sheet . getRow ( k ) ; sheet . removeRow ( row ) ; } for ( int k = 74 ; k < 100 ; k ++ ) { HSSFRow row = sheet . getRow ( k ) ; sheet . removeRow ( row ) ; } HSSFRow row = sheet . getRow ( 39 ) ; HSSFCell cell = row . getCell ( ( short ) 3 ) ; cell . setCellType ( HSSFCell . CELL_TYPE_STRING ) ; cell . setCellValue ( "MODIFIED CELL!!!!!" ) ; wb . write ( stream ) ; stream . close ( ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; } } } } 	1
package org . apache . poi . hssf . record ; public class RecordFormatException extends RuntimeException { public RecordFormatException ( String exception ) { super ( exception ) ; } public RecordFormatException ( String exception , Throwable thr ) { super ( exception , thr ) ; } public RecordFormatException ( Throwable thr ) { super ( thr ) ; } } 	0
package org . apache . poi . hpsf ; import java . io . IOException ; import java . io . OutputStream ; public class MutableProperty extends Property { public MutableProperty ( ) { } public MutableProperty ( final Property p ) { setID ( p . getID ( ) ) ; setType ( p . getType ( ) ) ; setValue ( p . getValue ( ) ) ; } public void setID ( final long id ) { this . id = id ; } public void setType ( final long type ) { this . type = type ; } public void setValue ( final Object value ) { this . value = value ; } public int write ( final OutputStream out , final int codepage ) throws IOException , WritingNotSupportedException { int length = 0 ; long variantType = getType ( ) ; if ( codepage == Constants . CP_UNICODE && variantType == Variant . VT_LPSTR ) variantType = Variant . VT_LPWSTR ; length += TypeWriter . writeUIntToStream ( out , variantType ) ; length += VariantSupport . write ( out , variantType , getValue ( ) , codepage ) ; return length ; } } 	0
package org . apache . poi . hssf . record ; import org . apache . poi . util . LittleEndian ; public class InterfaceEndRecord extends Record { public final static short sid = 0xe2 ; public InterfaceEndRecord ( ) { } public InterfaceEndRecord ( RecordInputStream in ) { super ( in ) ; } protected void validateSid ( short id ) { if ( id != sid ) { throw new RecordFormatException ( "NOT A INTERFACEEND RECORD" ) ; } } protected void fillFields ( RecordInputStream in ) { } public String toString ( ) { StringBuffer buffer = new StringBuffer ( ) ; buffer . append ( "[INTERFACEEND]\n" ) ; buffer . append ( "[/INTERFACEEND]\n" ) ; return buffer . toString ( ) ; } public int serialize ( int offset , byte [ ] data ) { LittleEndian . putShort ( data , 0 + offset , sid ) ; LittleEndian . putShort ( data , 2 + offset , ( ( short ) 0x00 ) ) ; return getRecordSize ( ) ; } public int getRecordSize ( ) { return 4 ; } public short getSid ( ) { return sid ; } } 	1
package org . apache . poi . ddf ; import org . apache . poi . hssf . record . RecordFormatException ; import org . apache . poi . util . HexDump ; import org . apache . poi . util . LittleEndian ; import java . util . * ; public class EscherDggRecord extends EscherRecord { public static final short RECORD_ID = ( short ) 0xF006 ; public static final String RECORD_DESCRIPTION = "MsofbtDgg" ; private int field_1_shapeIdMax ; private int field_3_numShapesSaved ; private int field_4_drawingsSaved ; private FileIdCluster [ ] field_5_fileIdClusters ; public static class FileIdCluster { public FileIdCluster ( int drawingGroupId , int numShapeIdsUsed ) { this . field_1_drawingGroupId = drawingGroupId ; this . field_2_numShapeIdsUsed = numShapeIdsUsed ; } private int field_1_drawingGroupId ; private int field_2_numShapeIdsUsed ; public int getDrawingGroupId ( ) { return field_1_drawingGroupId ; } public int getNumShapeIdsUsed ( ) { return field_2_numShapeIdsUsed ; } public void incrementShapeId ( ) { this . field_2_numShapeIdsUsed ++ ; } } public int fillFields ( byte [ ] data , int offset , EscherRecordFactory recordFactory ) { int bytesRemaining = readHeader ( data , offset ) ; int pos = offset + 8 ; int size = 0 ; field_1_shapeIdMax = LittleEndian . getInt ( data , pos + size ) ; size += 4 ; int field_2_numIdClusters = LittleEndian . getInt ( data , pos + size ) ; size += 4 ; field_3_numShapesSaved = LittleEndian . getInt ( data , pos + size ) ; size += 4 ; field_4_drawingsSaved = LittleEndian . getInt ( data , pos + size ) ; size += 4 ; field_5_fileIdClusters = new FileIdCluster [ ( bytesRemaining - size ) / 8 ] ; for ( int i = 0 ; i < field_5_fileIdClusters . length ; i ++ ) { field_5_fileIdClusters [ i ] = new FileIdCluster ( LittleEndian . getInt ( data , pos + size ) , LittleEndian . getInt ( data , pos + size + 4 ) ) ; size += 8 ; } bytesRemaining -= size ; if ( bytesRemaining != 0 ) throw new RecordFormatException ( "Expecting no remaining data but got " + bytesRemaining + " byte(s)." ) ; return 8 + size + bytesRemaining ; } public int serialize ( int offset , byte [ ] data , EscherSerializationListener listener ) { listener . beforeRecordSerialize ( offset , getRecordId ( ) , this ) ; int pos = offset ; LittleEndian . putShort ( data , pos , getOptions ( ) ) ; pos += 2 ; LittleEndian . putShort ( data , pos , getRecordId ( ) ) ; pos += 2 ; int remainingBytes = getRecordSize ( ) - 8 ; LittleEndian . putInt ( data , pos , remainingBytes ) ; pos += 4 ; LittleEndian . putInt ( data , pos , field_1_shapeIdMax ) ; pos += 4 ; LittleEndian . putInt ( data , pos , getNumIdClusters ( ) ) ; pos += 4 ; LittleEndian . putInt ( data , pos , field_3_numShapesSaved ) ; pos += 4 ; LittleEndian . putInt ( data , pos , field_4_drawingsSaved ) ; pos += 4 ; for ( int i = 0 ; i < field_5_fileIdClusters . length ; i ++ ) { LittleEndian . putInt ( data , pos , field_5_fileIdClusters [ i ] . field_1_drawingGroupId ) ; pos += 4 ; LittleEndian . putInt ( data , pos , field_5_fileIdClusters [ i ] . field_2_numShapeIdsUsed ) ; pos += 4 ; } listener . afterRecordSerialize ( pos , getRecordId ( ) , getRecordSize ( ) , this ) ; return getRecordSize ( ) ; } public int getRecordSize ( ) { return 8 + 16 + ( 8 * field_5_fileIdClusters . length ) ; } public short getRecordId ( ) { return RECORD_ID ; } public String getRecordName ( ) { return "Dgg" ; } public String toString ( ) { String nl = System . getProperty ( "line.separator" ) ; StringBuffer field_5_string = new StringBuffer ( ) ; for ( int i = 0 ; i < field_5_fileIdClusters . length ; i ++ ) { field_5_string . append ( "  DrawingGroupId" ) . append ( i + 1 ) . append ( ": " ) ; field_5_string . append ( field_5_fileIdClusters [ i ] . field_1_drawingGroupId ) ; field_5_string . append ( nl ) ; field_5_string . append ( "  NumShapeIdsUsed" ) . append ( i + 1 ) . append ( ": " ) ; field_5_string . append ( field_5_fileIdClusters [ i ] . field_2_numShapeIdsUsed ) ; field_5_string . append ( nl ) ; } return getClass ( ) . getName ( ) + ":" + nl + "  RecordId: 0x" + HexDump . toHex ( RECORD_ID ) + nl + "  Options: 0x" + HexDump . toHex ( getOptions ( ) ) + nl + "  ShapeIdMax: " + field_1_shapeIdMax + nl + "  NumIdClusters: " + getNumIdClusters ( ) + nl + "  NumShapesSaved: " + field_3_numShapesSaved + nl + "  DrawingsSaved: " + field_4_drawingsSaved + nl + "" + field_5_string . toString ( ) ; } public int getShapeIdMax ( ) { return field_1_shapeIdMax ; } public void setShapeIdMax ( int field_1_shapeIdMax ) { this . field_1_shapeIdMax = field_1_shapeIdMax ; } public int getNumIdClusters ( ) { return field_5_fileIdClusters . length + 1 ; } public int getNumShapesSaved ( ) { return field_3_numShapesSaved ; } public void setNumShapesSaved ( int field_3_numShapesSaved ) { this . field_3_numShapesSaved = field_3_numShapesSaved ; } public int getDrawingsSaved ( ) { return field_4_drawingsSaved ; } public void setDrawingsSaved ( int field_4_drawingsSaved ) { this . field_4_drawingsSaved = field_4_drawingsSaved ; } public FileIdCluster [ ] getFileIdClusters ( ) { return field_5_fileIdClusters ; } public void setFileIdClusters ( FileIdCluster [ ] field_5_fileIdClusters ) { this . field_5_fileIdClusters = field_5_fileIdClusters ; } public void addCluster ( int dgId , int numShapedUsed ) { List clusters = new ArrayList ( Arrays . asList ( field_5_fileIdClusters ) ) ; clusters . add ( new FileIdCluster ( dgId , numShapedUsed ) ) ; Collections . sort ( clusters , new Comparator ( ) { public int compare ( Object o1 , Object o2 ) { FileIdCluster f1 = ( FileIdCluster ) o1 ; FileIdCluster f2 = ( FileIdCluster ) o2 ; if ( f1 . getDrawingGroupId ( ) == f2 . getDrawingGroupId ( ) ) return 0 ; if ( f1 . getDrawingGroupId ( ) < f2 . getDrawingGroupId ( ) ) return - 1 ; else return + 1 ; } } ) ; field_5_fileIdClusters = ( FileIdCluster [ ] ) clusters . toArray ( new FileIdCluster [ clusters . size ( ) ] ) ; } } 	1
package org . apache . poi . poifs . filesystem ; import java . io . File ; public class POIFSDocumentPath { private String [ ] components ; private int hashcode = 0 ; public POIFSDocumentPath ( final String [ ] components ) throws IllegalArgumentException { if ( components == null ) { this . components = new String [ 0 ] ; } else { this . components = new String [ components . length ] ; for ( int j = 0 ; j < components . length ; j ++ ) { if ( ( components [ j ] == null ) || ( components [ j ] . length ( ) == 0 ) ) { throw new IllegalArgumentException ( "components cannot contain null or empty strings" ) ; } this . components [ j ] = components [ j ] ; } } } public POIFSDocumentPath ( ) { this . components = new String [ 0 ] ; } public POIFSDocumentPath ( final POIFSDocumentPath path , final String [ ] components ) throws IllegalArgumentException { if ( components == null ) { this . components = new String [ path . components . length ] ; } else { this . components = new String [ path . components . length + components . length ] ; } for ( int j = 0 ; j < path . components . length ; j ++ ) { this . components [ j ] = path . components [ j ] ; } if ( components != null ) { for ( int j = 0 ; j < components . length ; j ++ ) { if ( ( components [ j ] == null ) || ( components [ j ] . length ( ) == 0 ) ) { throw new IllegalArgumentException ( "components cannot contain null or empty strings" ) ; } this . components [ j + path . components . length ] = components [ j ] ; } } } public boolean equals ( final Object o ) { boolean rval = false ; if ( ( o != null ) && ( o . getClass ( ) == this . getClass ( ) ) ) { if ( this == o ) { rval = true ; } else { POIFSDocumentPath path = ( POIFSDocumentPath ) o ; if ( path . components . length == this . components . length ) { rval = true ; for ( int j = 0 ; j < this . components . length ; j ++ ) { if ( ! path . components [ j ] . equals ( this . components [ j ] ) ) { rval = false ; break ; } } } } } return rval ; } public int hashCode ( ) { if ( hashcode == 0 ) { for ( int j = 0 ; j < components . length ; j ++ ) { hashcode += components [ j ] . hashCode ( ) ; } } return hashcode ; } public int length ( ) { return components . length ; } public String getComponent ( int n ) throws ArrayIndexOutOfBoundsException { return components [ n ] ; } public POIFSDocumentPath getParent ( ) { final int length = components . length - 1 ; if ( length < 0 ) { return null ; } POIFSDocumentPath parent = new POIFSDocumentPath ( null ) ; parent . components = new String [ length ] ; System . arraycopy ( components , 0 , parent . components , 0 , length ) ; return parent ; } public String toString ( ) { final StringBuffer b = new StringBuffer ( ) ; final int l = length ( ) ; b . append ( File . separatorChar ) ; for ( int i = 0 ; i < l ; i ++ ) { b . append ( getComponent ( i ) ) ; if ( i < l - 1 ) { b . append ( File . separatorChar ) ; } } return b . toString ( ) ; } } 	0
package org . apache . poi . hssf . record . aggregates ; import org . apache . poi . hssf . record . DBCellRecord ; import org . apache . poi . hssf . record . Record ; import org . apache . poi . hssf . record . RecordInputStream ; import org . apache . poi . hssf . record . RowRecord ; import java . util . Iterator ; import java . util . Map ; import java . util . TreeMap ; public class RowRecordsAggregate extends Record { int firstrow = - 1 ; int lastrow = - 1 ; Map records = null ; int size = 0 ; public RowRecordsAggregate ( ) { records = new TreeMap ( ) ; } public void insertRow ( RowRecord row ) { size += row . getRecordSize ( ) ; records . put ( row , row ) ; if ( ( row . getRowNumber ( ) < firstrow ) || ( firstrow == - 1 ) ) { firstrow = row . getRowNumber ( ) ; } if ( ( row . getRowNumber ( ) > lastrow ) || ( lastrow == - 1 ) ) { lastrow = row . getRowNumber ( ) ; } } public void removeRow ( RowRecord row ) { size -= row . getRecordSize ( ) ; records . remove ( row ) ; } public RowRecord getRow ( int rownum ) { RowRecord row = new RowRecord ( ) ; row . setRowNumber ( ( short ) rownum ) ; return ( RowRecord ) records . get ( row ) ; } public int getPhysicalNumberOfRows ( ) { return records . size ( ) ; } public int getFirstRowNum ( ) { return firstrow ; } public int getLastRowNum ( ) { return lastrow ; } public int getRowBlockCount ( ) { int size = records . size ( ) / DBCellRecord . BLOCK_SIZE ; if ( ( records . size ( ) % DBCellRecord . BLOCK_SIZE ) != 0 ) size ++ ; return size ; } public int getRowBlockSize ( int block ) { return 20 * getRowCountForBlock ( block ) ; } public int getRowCountForBlock ( int block ) { int startIndex = block * DBCellRecord . BLOCK_SIZE ; int endIndex = startIndex + DBCellRecord . BLOCK_SIZE - 1 ; if ( endIndex >= records . size ( ) ) endIndex = records . size ( ) - 1 ; return endIndex - startIndex + 1 ; } public int getStartRowNumberForBlock ( int block ) { int startIndex = block * DBCellRecord . BLOCK_SIZE ; Iterator rowIter = records . values ( ) . iterator ( ) ; RowRecord row = null ; for ( int i = 0 ; i <= startIndex ; i ++ ) { row = ( RowRecord ) rowIter . next ( ) ; } return row . getRowNumber ( ) ; } public int getEndRowNumberForBlock ( int block ) { int endIndex = ( ( block + 1 ) * DBCellRecord . BLOCK_SIZE ) - 1 ; if ( endIndex >= records . size ( ) ) endIndex = records . size ( ) - 1 ; Iterator rowIter = records . values ( ) . iterator ( ) ; RowRecord row = null ; for ( int i = 0 ; i <= endIndex ; i ++ ) { row = ( RowRecord ) rowIter . next ( ) ; } return row . getRowNumber ( ) ; } private int serializeRowBlock ( final int block , final int offset , byte [ ] data ) { final int startIndex = block * DBCellRecord . BLOCK_SIZE ; final int endIndex = startIndex + DBCellRecord . BLOCK_SIZE ; Iterator rowIterator = records . values ( ) . iterator ( ) ; int pos = offset ; int i = 0 ; for ( ; i < startIndex ; i ++ ) rowIterator . next ( ) ; while ( rowIterator . hasNext ( ) && ( i ++ < endIndex ) ) { RowRecord row = ( RowRecord ) rowIterator . next ( ) ; pos += row . serialize ( pos , data ) ; } return pos - offset ; } public int serialize ( int offset , byte [ ] data ) { throw new RuntimeException ( "The serialize method that passes in cells should be used" ) ; } public int serialize ( int offset , byte [ ] data , ValueRecordsAggregate cells ) { int pos = offset ; final int blockCount = getRowBlockCount ( ) ; for ( int block = 0 ; block < blockCount ; block ++ ) { final int rowStartPos = pos ; final int rowBlockSize = serializeRowBlock ( block , pos , data ) ; pos += rowBlockSize ; final int startRowNumber = getStartRowNumberForBlock ( block ) ; final int endRowNumber = getEndRowNumberForBlock ( block ) ; DBCellRecord cellRecord = new DBCellRecord ( ) ; int cellRefOffset = ( rowBlockSize - 20 ) ; for ( int row = startRowNumber ; row <= endRowNumber ; row ++ ) { if ( null != cells && cells . rowHasCells ( row ) ) { final int rowCellSize = cells . serializeCellRow ( row , pos , data ) ; pos += rowCellSize ; cellRecord . addCellOffset ( ( short ) cellRefOffset ) ; cellRefOffset = rowCellSize ; } } cellRecord . setRowOffset ( pos - rowStartPos ) ; pos += cellRecord . serialize ( pos , data ) ; } return pos - offset ; } protected void fillFields ( RecordInputStream in ) { } protected void validateSid ( short id ) { } public short getSid ( ) { return - 1000 ; } public int getRecordSize ( ) { return size ; } public Iterator getIterator ( ) { return records . values ( ) . iterator ( ) ; } public Object clone ( ) { RowRecordsAggregate rec = new RowRecordsAggregate ( ) ; for ( Iterator rowIter = getIterator ( ) ; rowIter . hasNext ( ) ; ) { RowRecord row = ( RowRecord ) ( ( RowRecord ) rowIter . next ( ) ) . clone ( ) ; rec . insertRow ( row ) ; } return rec ; } public int findStartOfRowOutlineGroup ( int row ) { RowRecord rowRecord = this . getRow ( row ) ; int level = rowRecord . getOutlineLevel ( ) ; int currentRow = row ; while ( this . getRow ( currentRow ) != null ) { rowRecord = this . getRow ( currentRow ) ; if ( rowRecord . getOutlineLevel ( ) < level ) return currentRow + 1 ; currentRow -- ; } return currentRow + 1 ; } public int findEndOfRowOutlineGroup ( int row ) { int level = getRow ( row ) . getOutlineLevel ( ) ; int currentRow ; for ( currentRow = row ; currentRow < this . getLastRowNum ( ) ; currentRow ++ ) { if ( getRow ( currentRow ) == null || getRow ( currentRow ) . getOutlineLevel ( ) < level ) { break ; } } return currentRow - 1 ; } public int writeHidden ( RowRecord rowRecord , int row , boolean hidden ) { int level = rowRecord . getOutlineLevel ( ) ; while ( rowRecord != null && this . getRow ( row ) . getOutlineLevel ( ) >= level ) { rowRecord . setZeroHeight ( hidden ) ; row ++ ; rowRecord = this . getRow ( row ) ; } return row - 1 ; } public void collapseRow ( int rowNumber ) { int startRow = findStartOfRowOutlineGroup ( rowNumber ) ; RowRecord rowRecord = ( RowRecord ) getRow ( startRow ) ; int lastRow = writeHidden ( rowRecord , startRow , true ) ; if ( getRow ( lastRow + 1 ) != null ) { getRow ( lastRow + 1 ) . setColapsed ( true ) ; } else { RowRecord row = createRow ( lastRow + 1 ) ; row . setColapsed ( true ) ; insertRow ( row ) ; } } public static RowRecord createRow ( int row ) { RowRecord rowrec = new RowRecord ( ) ; rowrec . setRowNumber ( row ) ; rowrec . setHeight ( ( short ) 0xff ) ; rowrec . setOptimize ( ( short ) 0x0 ) ; rowrec . setOptionFlags ( ( short ) 0x100 ) ; rowrec . setXFIndex ( ( short ) 0xf ) ; return rowrec ; } public boolean isRowGroupCollapsed ( int row ) { int collapseRow = findEndOfRowOutlineGroup ( row ) + 1 ; if ( getRow ( collapseRow ) == null ) return false ; else return getRow ( collapseRow ) . getColapsed ( ) ; } public void expandRow ( int rowNumber ) { int idx = rowNumber ; if ( idx == - 1 ) return ; if ( ! isRowGroupCollapsed ( idx ) ) return ; int startIdx = findStartOfRowOutlineGroup ( idx ) ; RowRecord row = getRow ( startIdx ) ; int endIdx = findEndOfRowOutlineGroup ( idx ) ; if ( ! isRowGroupHiddenByParent ( idx ) ) { for ( int i = startIdx ; i <= endIdx ; i ++ ) { if ( row . getOutlineLevel ( ) == getRow ( i ) . getOutlineLevel ( ) ) getRow ( i ) . setZeroHeight ( false ) ; else if ( ! isRowGroupCollapsed ( i ) ) getRow ( i ) . setZeroHeight ( false ) ; } } getRow ( endIdx + 1 ) . setColapsed ( false ) ; } public boolean isRowGroupHiddenByParent ( int row ) { int endLevel ; boolean endHidden ; int endOfOutlineGroupIdx = findEndOfRowOutlineGroup ( row ) ; if ( getRow ( endOfOutlineGroupIdx + 1 ) == null ) { endLevel = 0 ; endHidden = false ; } else { endLevel = getRow ( endOfOutlineGroupIdx + 1 ) . getOutlineLevel ( ) ; endHidden = getRow ( endOfOutlineGroupIdx + 1 ) . getZeroHeight ( ) ; } int startLevel ; boolean startHidden ; int startOfOutlineGroupIdx = findStartOfRowOutlineGroup ( row ) ; if ( startOfOutlineGroupIdx - 1 < 0 || getRow ( startOfOutlineGroupIdx - 1 ) == null ) { startLevel = 0 ; startHidden = false ; } else { startLevel = getRow ( startOfOutlineGroupIdx - 1 ) . getOutlineLevel ( ) ; startHidden = getRow ( startOfOutlineGroupIdx - 1 ) . getZeroHeight ( ) ; } if ( endLevel > startLevel ) { return endHidden ; } else { return startHidden ; } } } 	1
package org . apache . poi . poifs . property ; import java . io . * ; import java . util . * ; import org . apache . poi . hpsf . ClassID ; import org . apache . poi . poifs . common . POIFSConstants ; import org . apache . poi . poifs . dev . POIFSViewable ; import org . apache . poi . util . ByteField ; import org . apache . poi . util . IntegerField ; import org . apache . poi . util . LittleEndianConsts ; import org . apache . poi . util . ShortField ; public abstract class Property implements Child , POIFSViewable { static final private byte _default_fill = ( byte ) 0x00 ; static final private int _name_size_offset = 0x40 ; static final private int _max_name_length = ( _name_size_offset / LittleEndianConsts . SHORT_SIZE ) - 1 ; static final protected int _NO_INDEX = - 1 ; static final private int _node_color_offset = 0x43 ; static final private int _previous_property_offset = 0x44 ; static final private int _next_property_offset = 0x48 ; static final private int _child_property_offset = 0x4C ; static final private int _storage_clsid_offset = 0x50 ; static final private int _user_flags_offset = 0x60 ; static final private int _seconds_1_offset = 0x64 ; static final private int _days_1_offset = 0x68 ; static final private int _seconds_2_offset = 0x6C ; static final private int _days_2_offset = 0x70 ; static final private int _start_block_offset = 0x74 ; static final private int _size_offset = 0x78 ; static final protected byte _NODE_BLACK = 1 ; static final protected byte _NODE_RED = 0 ; static final private int _big_block_minimum_bytes = 4096 ; private String _name ; private ShortField _name_size ; private ByteField _property_type ; private ByteField _node_color ; private IntegerField _previous_property ; private IntegerField _next_property ; private IntegerField _child_property ; private ClassID _storage_clsid ; private IntegerField _user_flags ; private IntegerField _seconds_1 ; private IntegerField _days_1 ; private IntegerField _seconds_2 ; private IntegerField _days_2 ; private IntegerField _start_block ; private IntegerField _size ; private byte [ ] _raw_data ; private int _index ; private Child _next_child ; private Child _previous_child ; protected Property ( ) { _raw_data = new byte [ POIFSConstants . PROPERTY_SIZE ] ; Arrays . fill ( _raw_data , _default_fill ) ; _name_size = new ShortField ( _name_size_offset ) ; _property_type = new ByteField ( PropertyConstants . PROPERTY_TYPE_OFFSET ) ; _node_color = new ByteField ( _node_color_offset ) ; _previous_property = new IntegerField ( _previous_property_offset , _NO_INDEX , _raw_data ) ; _next_property = new IntegerField ( _next_property_offset , _NO_INDEX , _raw_data ) ; _child_property = new IntegerField ( _child_property_offset , _NO_INDEX , _raw_data ) ; _storage_clsid = new ClassID ( _raw_data , _storage_clsid_offset ) ; _user_flags = new IntegerField ( _user_flags_offset , 0 , _raw_data ) ; _seconds_1 = new IntegerField ( _seconds_1_offset , 0 , _raw_data ) ; _days_1 = new IntegerField ( _days_1_offset , 0 , _raw_data ) ; _seconds_2 = new IntegerField ( _seconds_2_offset , 0 , _raw_data ) ; _days_2 = new IntegerField ( _days_2_offset , 0 , _raw_data ) ; _start_block = new IntegerField ( _start_block_offset ) ; _size = new IntegerField ( _size_offset , 0 , _raw_data ) ; _index = _NO_INDEX ; setName ( "" ) ; setNextChild ( null ) ; setPreviousChild ( null ) ; } protected Property ( final int index , final byte [ ] array , final int offset ) { _raw_data = new byte [ POIFSConstants . PROPERTY_SIZE ] ; System . arraycopy ( array , offset , _raw_data , 0 , POIFSConstants . PROPERTY_SIZE ) ; _name_size = new ShortField ( _name_size_offset , _raw_data ) ; _property_type = new ByteField ( PropertyConstants . PROPERTY_TYPE_OFFSET , _raw_data ) ; _node_color = new ByteField ( _node_color_offset , _raw_data ) ; _previous_property = new IntegerField ( _previous_property_offset , _raw_data ) ; _next_property = new IntegerField ( _next_property_offset , _raw_data ) ; _child_property = new IntegerField ( _child_property_offset , _raw_data ) ; _storage_clsid = new ClassID ( _raw_data , _storage_clsid_offset ) ; _user_flags = new IntegerField ( _user_flags_offset , 0 , _raw_data ) ; _seconds_1 = new IntegerField ( _seconds_1_offset , _raw_data ) ; _days_1 = new IntegerField ( _days_1_offset , _raw_data ) ; _seconds_2 = new IntegerField ( _seconds_2_offset , _raw_data ) ; _days_2 = new IntegerField ( _days_2_offset , _raw_data ) ; _start_block = new IntegerField ( _start_block_offset , _raw_data ) ; _size = new IntegerField ( _size_offset , _raw_data ) ; _index = index ; int name_length = ( _name_size . get ( ) / LittleEndianConsts . SHORT_SIZE ) - 1 ; if ( name_length < 1 ) { _name = "" ; } else { char [ ] char_array = new char [ name_length ] ; int name_offset = 0 ; for ( int j = 0 ; j < name_length ; j ++ ) { char_array [ j ] = ( char ) new ShortField ( name_offset , _raw_data ) . get ( ) ; name_offset += LittleEndianConsts . SHORT_SIZE ; } _name = new String ( char_array , 0 , name_length ) ; } _next_child = null ; _previous_child = null ; } public void writeData ( final OutputStream stream ) throws IOException { stream . write ( _raw_data ) ; } public void setStartBlock ( final int startBlock ) { _start_block . set ( startBlock , _raw_data ) ; } public int getStartBlock ( ) { return _start_block . get ( ) ; } public int getSize ( ) { return _size . get ( ) ; } public boolean shouldUseSmallBlocks ( ) { return Property . isSmall ( _size . get ( ) ) ; } public static boolean isSmall ( final int length ) { return length < _big_block_minimum_bytes ; } public String getName ( ) { return _name ; } abstract public boolean isDirectory ( ) ; public ClassID getStorageClsid ( ) { return _storage_clsid ; } protected final void setName ( final String name ) { char [ ] char_array = name . toCharArray ( ) ; int limit = Math . min ( char_array . length , _max_name_length ) ; _name = new String ( char_array , 0 , limit ) ; short offset = 0 ; int j = 0 ; for ( ; j < limit ; j ++ ) { new ShortField ( offset , ( short ) char_array [ j ] , _raw_data ) ; offset += LittleEndianConsts . SHORT_SIZE ; } for ( ; j < _max_name_length + 1 ; j ++ ) { new ShortField ( offset , ( short ) 0 , _raw_data ) ; offset += LittleEndianConsts . SHORT_SIZE ; } _name_size . set ( ( short ) ( ( limit + 1 ) * LittleEndianConsts . SHORT_SIZE ) , _raw_data ) ; } public void setStorageClsid ( ClassID clsidStorage ) { _storage_clsid = clsidStorage ; if ( clsidStorage == null ) { Arrays . fill ( _raw_data , _storage_clsid_offset , _storage_clsid_offset + ClassID . LENGTH , ( byte ) 0 ) ; } else { clsidStorage . write ( _raw_data , _storage_clsid_offset ) ; } } protected void setPropertyType ( final byte propertyType ) { _property_type . set ( propertyType , _raw_data ) ; } protected void setNodeColor ( final byte nodeColor ) { _node_color . set ( nodeColor , _raw_data ) ; } protected void setChildProperty ( final int child ) { _child_property . set ( child , _raw_data ) ; } protected int getChildIndex ( ) { return _child_property . get ( ) ; } protected void setSize ( final int size ) { _size . set ( size , _raw_data ) ; } protected void setIndex ( final int index ) { _index = index ; } protected int getIndex ( ) { return _index ; } abstract protected void preWrite ( ) ; int getNextChildIndex ( ) { return _next_property . get ( ) ; } int getPreviousChildIndex ( ) { return _previous_property . get ( ) ; } static boolean isValidIndex ( int index ) { return index != _NO_INDEX ; } public Child getNextChild ( ) { return _next_child ; } public Child getPreviousChild ( ) { return _previous_child ; } public void setNextChild ( final Child child ) { _next_child = child ; _next_property . set ( ( child == null ) ? _NO_INDEX : ( ( Property ) child ) . getIndex ( ) , _raw_data ) ; } public void setPreviousChild ( final Child child ) { _previous_child = child ; _previous_property . set ( ( child == null ) ? _NO_INDEX : ( ( Property ) child ) . getIndex ( ) , _raw_data ) ; } public Object [ ] getViewableArray ( ) { Object [ ] results = new Object [ 5 ] ; results [ 0 ] = "Name          = \"" + getName ( ) + "\"" ; results [ 1 ] = "Property Type = " + _property_type . get ( ) ; results [ 2 ] = "Node Color    = " + _node_color . get ( ) ; long time = _days_1 . get ( ) ; time <<= 32 ; time += ( ( long ) _seconds_1 . get ( ) ) & 0x0000FFFFL ; results [ 3 ] = "Time 1        = " + time ; time = _days_2 . get ( ) ; time <<= 32 ; time += ( ( long ) _seconds_2 . get ( ) ) & 0x0000FFFFL ; results [ 4 ] = "Time 2        = " + time ; return results ; } public Iterator getViewableIterator ( ) { return Collections . EMPTY_LIST . iterator ( ) ; } public boolean preferArray ( ) { return true ; } public String getShortDescription ( ) { StringBuffer buffer = new StringBuffer ( ) ; buffer . append ( "Property: \"" ) . append ( getName ( ) ) . append ( "\"" ) ; return buffer . toString ( ) ; } } 	1
package org . apache . poi . hssf . record ; import org . apache . poi . util . LittleEndian ; public class ContinueRecord extends Record { public final static short sid = 0x003C ; private byte [ ] field_1_data ; public ContinueRecord ( ) { } public ContinueRecord ( RecordInputStream in ) { super ( in ) ; } public byte [ ] serialize ( ) { byte [ ] retval = new byte [ field_1_data . length + 4 ] ; serialize ( 0 , retval ) ; return retval ; } public int serialize ( int offset , byte [ ] data ) { LittleEndian . putShort ( data , offset , sid ) ; LittleEndian . putShort ( data , offset + 2 , ( short ) field_1_data . length ) ; System . arraycopy ( field_1_data , 0 , data , offset + 4 , field_1_data . length ) ; return field_1_data . length + 4 ; } public void setData ( byte [ ] data ) { field_1_data = data ; } public byte [ ] getData ( ) { return field_1_data ; } protected void validateSid ( short id ) { if ( id != ContinueRecord . sid ) { throw new RecordFormatException ( "Not a Continue Record" ) ; } } public String toString ( ) { StringBuffer buffer = new StringBuffer ( ) ; buffer . append ( "[CONTINUE RECORD]\n" ) ; buffer . append ( "    .id        = " ) . append ( Integer . toHexString ( sid ) ) . append ( "\n" ) ; buffer . append ( "[/CONTINUE RECORD]\n" ) ; return buffer . toString ( ) ; } public short getSid ( ) { return sid ; } protected void fillFields ( RecordInputStream in ) { field_1_data = in . readRemainder ( ) ; } public Object clone ( ) { ContinueRecord clone = new ContinueRecord ( ) ; clone . setData ( field_1_data ) ; return clone ; } } 	1
package org . apache . poi . hssf . record . formula ; import org . apache . poi . hssf . model . Workbook ; import org . apache . poi . util . BitField ; import org . apache . poi . util . BitFieldFactory ; import org . apache . poi . util . StringUtil ; import org . apache . poi . hssf . record . RecordInputStream ; public class StringPtg extends Ptg { public final static int SIZE = 9 ; public final static byte sid = 0x17 ; int field_1_length ; byte field_2_options ; BitField fHighByte = BitFieldFactory . getInstance ( 0x01 ) ; private String field_3_string ; private StringPtg ( ) { } public StringPtg ( RecordInputStream in ) { field_1_length = in . readByte ( ) & 0xFF ; field_2_options = in . readByte ( ) ; if ( fHighByte . isSet ( field_2_options ) ) { field_3_string = in . readUnicodeLEString ( field_1_length ) ; } else { field_3_string = in . readCompressedUnicode ( field_1_length ) ; } } public StringPtg ( String value ) { if ( value . length ( ) > 255 ) { throw new IllegalArgumentException ( "String literals in formulas cant be bigger than 255 characters ASCII" ) ; } this . field_2_options = 0 ; field_2_options = ( byte ) this . fHighByte . setBoolean ( field_2_options , StringUtil . hasMultibyte ( value ) ) ; this . field_3_string = value ; this . field_1_length = value . length ( ) ; } public String getValue ( ) { return field_3_string ; } public void writeBytes ( byte [ ] array , int offset ) { array [ offset + 0 ] = sid ; array [ offset + 1 ] = ( byte ) field_1_length ; array [ offset + 2 ] = field_2_options ; if ( fHighByte . isSet ( field_2_options ) ) { StringUtil . putUnicodeLE ( getValue ( ) , array , offset + 3 ) ; } else { StringUtil . putCompressedUnicode ( getValue ( ) , array , offset + 3 ) ; } } public int getSize ( ) { if ( fHighByte . isSet ( field_2_options ) ) { return 2 * field_1_length + 3 ; } else { return field_1_length + 3 ; } } public String toFormulaString ( Workbook book ) { return "\"" + getValue ( ) + "\"" ; } public byte getDefaultOperandClass ( ) { return Ptg . CLASS_VALUE ; } public Object clone ( ) { StringPtg ptg = new StringPtg ( ) ; ptg . field_1_length = field_1_length ; ptg . field_2_options = field_2_options ; ptg . field_3_string = field_3_string ; return ptg ; } } 	0
package org . apache . poi . ddf ; import org . apache . poi . util . HexDump ; import org . apache . poi . util . LittleEndian ; import java . util . Iterator ; import java . util . List ; import java . util . ArrayList ; public class UnknownEscherRecord extends EscherRecord { private static final byte [ ] NO_BYTES = new byte [ 0 ] ; private byte [ ] thedata = NO_BYTES ; private List childRecords = new ArrayList ( ) ; public UnknownEscherRecord ( ) { } public int fillFields ( byte [ ] data , int offset , EscherRecordFactory recordFactory ) { int bytesRemaining = readHeader ( data , offset ) ; if ( isContainerRecord ( ) ) { int bytesWritten = 0 ; thedata = new byte [ 0 ] ; offset += 8 ; bytesWritten += 8 ; while ( bytesRemaining > 0 ) { EscherRecord child = recordFactory . createRecord ( data , offset ) ; int childBytesWritten = child . fillFields ( data , offset , recordFactory ) ; bytesWritten += childBytesWritten ; offset += childBytesWritten ; bytesRemaining -= childBytesWritten ; getChildRecords ( ) . add ( child ) ; } return bytesWritten ; } else { thedata = new byte [ bytesRemaining ] ; System . arraycopy ( data , offset + 8 , thedata , 0 , bytesRemaining ) ; return bytesRemaining + 8 ; } } public int serialize ( int offset , byte [ ] data , EscherSerializationListener listener ) { listener . beforeRecordSerialize ( offset , getRecordId ( ) , this ) ; LittleEndian . putShort ( data , offset , getOptions ( ) ) ; LittleEndian . putShort ( data , offset + 2 , getRecordId ( ) ) ; int remainingBytes = thedata . length ; for ( Iterator iterator = getChildRecords ( ) . iterator ( ) ; iterator . hasNext ( ) ; ) { EscherRecord r = ( EscherRecord ) iterator . next ( ) ; remainingBytes += r . getRecordSize ( ) ; } LittleEndian . putInt ( data , offset + 4 , remainingBytes ) ; System . arraycopy ( thedata , 0 , data , offset + 8 , thedata . length ) ; int pos = offset + 8 + thedata . length ; for ( Iterator iterator = getChildRecords ( ) . iterator ( ) ; iterator . hasNext ( ) ; ) { EscherRecord r = ( EscherRecord ) iterator . next ( ) ; pos += r . serialize ( pos , data , listener ) ; } listener . afterRecordSerialize ( pos , getRecordId ( ) , pos - offset , this ) ; return pos - offset ; } public byte [ ] getData ( ) { return thedata ; } public int getRecordSize ( ) { return 8 + thedata . length ; } public List getChildRecords ( ) { return childRecords ; } public void setChildRecords ( List childRecords ) { this . childRecords = childRecords ; } public Object clone ( ) { return super . clone ( ) ; } public String getRecordName ( ) { return "Unknown 0x" + HexDump . toHex ( getRecordId ( ) ) ; } public String toString ( ) { String nl = System . getProperty ( "line.separator" ) ; StringBuffer children = new StringBuffer ( ) ; if ( getChildRecords ( ) . size ( ) > 0 ) { children . append ( "  children: " + nl ) ; for ( Iterator iterator = getChildRecords ( ) . iterator ( ) ; iterator . hasNext ( ) ; ) { EscherRecord record = ( EscherRecord ) iterator . next ( ) ; children . append ( record . toString ( ) ) ; children . append ( nl ) ; } } String theDumpHex = "" ; try { if ( thedata . length != 0 ) { theDumpHex = "  Extra Data:" + nl ; theDumpHex += HexDump . dump ( thedata , 0 , 0 ) ; } } catch ( Exception e ) { theDumpHex = "Error!!" ; } return getClass ( ) . getName ( ) + ":" + nl + "  isContainer: " + isContainerRecord ( ) + nl + "  options: 0x" + HexDump . toHex ( getOptions ( ) ) + nl + "  recordId: 0x" + HexDump . toHex ( getRecordId ( ) ) + nl + "  numchildren: " + getChildRecords ( ) . size ( ) + nl + theDumpHex + children . toString ( ) ; } public void addChildRecord ( EscherRecord childRecord ) { getChildRecords ( ) . add ( childRecord ) ; } } 	1
package org . apache . poi . ddf ; public class EscherPropertyMetaData { public final static byte TYPE_UNKNOWN = ( byte ) 0 ; public final static byte TYPE_BOOLEAN = ( byte ) 1 ; public final static byte TYPE_RGB = ( byte ) 2 ; public final static byte TYPE_SHAPEPATH = ( byte ) 3 ; public final static byte TYPE_SIMPLE = ( byte ) 4 ; public final static byte TYPE_ARRAY = ( byte ) 5 ; ; private String description ; private byte type ; public EscherPropertyMetaData ( String description ) { this . description = description ; } public EscherPropertyMetaData ( String description , byte type ) { this . description = description ; this . type = type ; } public String getDescription ( ) { return description ; } public byte getType ( ) { return type ; } } 	1
package org . apache . poi . hssf . record ; import org . apache . poi . util . LittleEndian ; public class RefModeRecord extends Record { public final static short sid = 0xf ; public final static short USE_A1_MODE = 1 ; public final static short USE_R1C1_MODE = 0 ; private short field_1_mode ; public RefModeRecord ( ) { } public RefModeRecord ( RecordInputStream in ) { super ( in ) ; } protected void validateSid ( short id ) { if ( id != sid ) { throw new RecordFormatException ( "NOT An RefMode RECORD" ) ; } } protected void fillFields ( RecordInputStream in ) { field_1_mode = in . readShort ( ) ; } public void setMode ( short mode ) { field_1_mode = mode ; } public short getMode ( ) { return field_1_mode ; } public String toString ( ) { StringBuffer buffer = new StringBuffer ( ) ; buffer . append ( "[REFMODE]\n" ) ; buffer . append ( "    .mode           = " ) . append ( Integer . toHexString ( getMode ( ) ) ) . append ( "\n" ) ; buffer . append ( "[/REFMODE]\n" ) ; return buffer . toString ( ) ; } public int serialize ( int offset , byte [ ] data ) { LittleEndian . putShort ( data , 0 + offset , sid ) ; LittleEndian . putShort ( data , 2 + offset , ( short ) 0x2 ) ; LittleEndian . putShort ( data , 4 + offset , getMode ( ) ) ; return getRecordSize ( ) ; } public int getRecordSize ( ) { return 6 ; } public short getSid ( ) { return sid ; } public Object clone ( ) { RefModeRecord rec = new RefModeRecord ( ) ; rec . field_1_mode = field_1_mode ; return rec ; } } 	1
package org . apache . poi . hssf . record . formula ; import org . apache . poi . util . LittleEndian ; import org . apache . poi . util . BitField ; import org . apache . poi . util . BitFieldFactory ; import org . apache . poi . util . StringUtil ; import org . apache . poi . hssf . util . CellReference ; import org . apache . poi . hssf . model . Workbook ; import org . apache . poi . hssf . record . RecordFormatException ; import org . apache . poi . hssf . record . RecordInputStream ; import org . apache . poi . hssf . record . SSTRecord ; import org . apache . poi . hssf . record . UnicodeString ; public class ArrayPtg extends Ptg { public final static byte sid = 0x20 ; protected byte field_1_reserved ; protected byte field_2_reserved ; protected byte field_3_reserved ; protected byte field_4_reserved ; protected byte field_5_reserved ; protected byte field_6_reserved ; protected byte field_7_reserved ; protected short token_1_columns ; protected short token_2_rows ; protected Object [ ] [ ] token_3_arrayValues ; protected ArrayPtg ( ) { } public ArrayPtg ( RecordInputStream in ) { field_1_reserved = in . readByte ( ) ; field_2_reserved = in . readByte ( ) ; field_3_reserved = in . readByte ( ) ; field_4_reserved = in . readByte ( ) ; field_5_reserved = in . readByte ( ) ; field_6_reserved = in . readByte ( ) ; field_7_reserved = in . readByte ( ) ; } public void readTokenValues ( RecordInputStream in ) { token_1_columns = ( short ) ( 0x00ff & in . readByte ( ) ) ; token_2_rows = in . readShort ( ) ; token_1_columns ++ ; token_2_rows ++ ; token_3_arrayValues = new Object [ token_1_columns ] [ token_2_rows ] ; for ( int x = 0 ; x < token_1_columns ; x ++ ) { for ( int y = 0 ; y < token_2_rows ; y ++ ) { byte grbit = in . readByte ( ) ; if ( grbit == 0x01 ) { token_3_arrayValues [ x ] [ y ] = new Double ( in . readDouble ( ) ) ; } else if ( grbit == 0x02 ) { token_3_arrayValues [ x ] [ y ] = in . readUnicodeString ( ) ; } else throw new RecordFormatException ( "Unknown grbit '" + grbit + "'" ) ; } } } public String toString ( ) { StringBuffer buffer = new StringBuffer ( "[ArrayPtg]\n" ) ; buffer . append ( "columns = " ) . append ( getColumnCount ( ) ) . append ( "\n" ) ; buffer . append ( "rows = " ) . append ( getRowCount ( ) ) . append ( "\n" ) ; for ( int x = 0 ; x < getColumnCount ( ) ; x ++ ) { for ( int y = 0 ; y < getRowCount ( ) ; y ++ ) { Object o = token_3_arrayValues [ x ] [ y ] ; buffer . append ( "[" ) . append ( x ) . append ( "][" ) . append ( y ) . append ( "] = " ) . append ( o ) . append ( "\n" ) ; } } return buffer . toString ( ) ; } public void writeBytes ( byte [ ] array , int offset ) { array [ offset ++ ] = ( byte ) ( sid + ptgClass ) ; array [ offset ++ ] = field_1_reserved ; array [ offset ++ ] = field_2_reserved ; array [ offset ++ ] = field_3_reserved ; array [ offset ++ ] = field_4_reserved ; array [ offset ++ ] = field_5_reserved ; array [ offset ++ ] = field_6_reserved ; array [ offset ++ ] = field_7_reserved ; } public int writeTokenValueBytes ( byte [ ] array , int offset ) { int pos = 0 ; array [ pos + offset ] = ( byte ) ( token_1_columns - 1 ) ; pos ++ ; LittleEndian . putShort ( array , pos + offset , ( short ) ( token_2_rows - 1 ) ) ; pos += 2 ; for ( int x = 0 ; x < getColumnCount ( ) ; x ++ ) { for ( int y = 0 ; y < getRowCount ( ) ; y ++ ) { Object o = token_3_arrayValues [ x ] [ y ] ; if ( o instanceof Double ) { array [ pos + offset ] = 0x01 ; pos ++ ; LittleEndian . putDouble ( array , pos + offset , ( ( Double ) o ) . doubleValue ( ) ) ; pos += 8 ; } else if ( o instanceof UnicodeString ) { array [ pos + offset ] = 0x02 ; pos ++ ; UnicodeString s = ( UnicodeString ) o ; UnicodeString . UnicodeRecordStats stats = new UnicodeString . UnicodeRecordStats ( ) ; s . serialize ( stats , pos + offset , array ) ; pos += stats . recordSize ; } else throw new RuntimeException ( "Coding error" ) ; } } return pos ; } public void setRowCount ( short row ) { token_2_rows = row ; } public short getRowCount ( ) { return token_2_rows ; } public void setColumnCount ( short col ) { token_1_columns = ( byte ) col ; } public short getColumnCount ( ) { return token_1_columns ; } public int getSize ( ) { int size = 1 + 7 + 1 + 2 ; for ( int x = 0 ; x < getColumnCount ( ) ; x ++ ) { for ( int y = 0 ; y < getRowCount ( ) ; y ++ ) { Object o = token_3_arrayValues [ x ] [ y ] ; if ( o instanceof UnicodeString ) { size ++ ; UnicodeString . UnicodeRecordStats rs = new UnicodeString . UnicodeRecordStats ( ) ; ( ( UnicodeString ) o ) . getRecordSize ( rs ) ; size += rs . recordSize ; } else if ( o instanceof Double ) { size += 9 ; } } } return size ; } public String toFormulaString ( Workbook book ) { StringBuffer b = new StringBuffer ( ) ; b . append ( "{" ) ; for ( int x = 0 ; x < getColumnCount ( ) ; x ++ ) { for ( int y = 0 ; y < getRowCount ( ) ; y ++ ) { Object o = token_3_arrayValues [ x ] [ y ] ; if ( o instanceof String ) { b . append ( ( String ) o ) ; } else if ( o instanceof Double ) { b . append ( ( ( Double ) o ) . doubleValue ( ) ) ; } if ( y != getRowCount ( ) ) b . append ( "," ) ; } if ( x != getColumnCount ( ) ) b . append ( ";" ) ; } b . append ( "}" ) ; return b . toString ( ) ; } public byte getDefaultOperandClass ( ) { return Ptg . CLASS_ARRAY ; } public Object clone ( ) { ArrayPtg ptg = new ArrayPtg ( ) ; ptg . field_1_reserved = field_1_reserved ; ptg . field_2_reserved = field_2_reserved ; ptg . field_3_reserved = field_3_reserved ; ptg . field_4_reserved = field_4_reserved ; ptg . field_5_reserved = field_5_reserved ; ptg . field_6_reserved = field_6_reserved ; ptg . field_7_reserved = field_7_reserved ; ptg . token_1_columns = token_1_columns ; ptg . token_2_rows = token_2_rows ; ptg . token_3_arrayValues = new Object [ getColumnCount ( ) ] [ getRowCount ( ) ] ; for ( int x = 0 ; x < getColumnCount ( ) ; x ++ ) { for ( int y = 0 ; y < getRowCount ( ) ; y ++ ) { ptg . token_3_arrayValues [ x ] [ y ] = token_3_arrayValues [ x ] [ y ] ; } } ptg . setClass ( ptgClass ) ; return ptg ; } } 	1
package org . apache . poi . hssf . record ; import org . apache . poi . util . LittleEndian ; import org . apache . poi . util . StringUtil ; public class FormatRecord extends Record { public final static short sid = 0x41e ; private short field_1_index_code ; private short field_3_unicode_len ; private boolean field_3_unicode_flag ; private String field_4_formatstring ; public FormatRecord ( ) { } public FormatRecord ( RecordInputStream in ) { super ( in ) ; } protected void validateSid ( short id ) { if ( id != sid ) { throw new RecordFormatException ( "NOT A FORMAT RECORD" ) ; } } protected void fillFields ( RecordInputStream in ) { field_1_index_code = in . readShort ( ) ; field_3_unicode_len = in . readShort ( ) ; field_3_unicode_flag = ( in . readByte ( ) & ( byte ) 0x01 ) != 0 ; if ( field_3_unicode_flag ) { field_4_formatstring = in . readUnicodeLEString ( field_3_unicode_len ) ; } else { field_4_formatstring = in . readCompressedUnicode ( field_3_unicode_len ) ; } } public void setIndexCode ( short index ) { field_1_index_code = index ; } public void setFormatStringLength ( byte len ) { field_3_unicode_len = len ; } public void setUnicodeFlag ( boolean unicode ) { field_3_unicode_flag = unicode ; } public void setFormatString ( String fs ) { field_4_formatstring = fs ; setUnicodeFlag ( StringUtil . hasMultibyte ( fs ) ) ; } public short getIndexCode ( ) { return field_1_index_code ; } public boolean getUnicodeFlag ( ) { return field_3_unicode_flag ; } public String getFormatString ( ) { return field_4_formatstring ; } public String toString ( ) { StringBuffer buffer = new StringBuffer ( ) ; buffer . append ( "[FORMAT]\n" ) ; buffer . append ( "    .indexcode       = " ) . append ( Integer . toHexString ( getIndexCode ( ) ) ) . append ( "\n" ) ; buffer . append ( "    .unicode length  = " ) . append ( Integer . toHexString ( field_3_unicode_len ) ) . append ( "\n" ) ; buffer . append ( "    .isUnicode       = " ) . append ( field_3_unicode_flag ) . append ( "\n" ) ; buffer . append ( "    .formatstring    = " ) . append ( getFormatString ( ) ) . append ( "\n" ) ; buffer . append ( "[/FORMAT]\n" ) ; return buffer . toString ( ) ; } public int serialize ( int offset , byte [ ] data ) { LittleEndian . putShort ( data , 0 + offset , sid ) ; LittleEndian . putShort ( data , 2 + offset , ( short ) ( 2 + 2 + 1 + ( ( field_3_unicode_flag ) ? 2 * field_3_unicode_len : field_3_unicode_len ) ) ) ; LittleEndian . putShort ( data , 4 + offset , getIndexCode ( ) ) ; LittleEndian . putShort ( data , 6 + offset , field_3_unicode_len ) ; data [ 8 + offset ] = ( byte ) ( ( field_3_unicode_flag ) ? 0x01 : 0x00 ) ; if ( field_3_unicode_flag ) { StringUtil . putUnicodeLE ( getFormatString ( ) , data , 9 + offset ) ; } else { StringUtil . putCompressedUnicode ( getFormatString ( ) , data , 9 + offset ) ; } return getRecordSize ( ) ; } public int getRecordSize ( ) { return 9 + ( ( field_3_unicode_flag ) ? 2 * field_3_unicode_len : field_3_unicode_len ) ; } public short getSid ( ) { return sid ; } } 	1
package org . apache . poi . hssf . record ; import org . apache . poi . util . LittleEndian ; public class SaveRecalcRecord extends Record { public final static short sid = 0x5f ; private short field_1_recalc ; public SaveRecalcRecord ( ) { } public SaveRecalcRecord ( RecordInputStream in ) { super ( in ) ; } protected void validateSid ( short id ) { if ( id != sid ) { throw new RecordFormatException ( "NOT A Save Recalc RECORD" ) ; } } protected void fillFields ( RecordInputStream in ) { field_1_recalc = in . readShort ( ) ; } public void setRecalc ( boolean recalc ) { field_1_recalc = ( short ) ( ( recalc == true ) ? 1 : 0 ) ; } public boolean getRecalc ( ) { return ( field_1_recalc == 1 ) ; } public String toString ( ) { StringBuffer buffer = new StringBuffer ( ) ; buffer . append ( "[SAVERECALC]\n" ) ; buffer . append ( "    .recalc         = " ) . append ( getRecalc ( ) ) . append ( "\n" ) ; buffer . append ( "[/SAVERECALC]\n" ) ; return buffer . toString ( ) ; } public int serialize ( int offset , byte [ ] data ) { LittleEndian . putShort ( data , 0 + offset , sid ) ; LittleEndian . putShort ( data , 2 + offset , ( short ) 0x2 ) ; LittleEndian . putShort ( data , 4 + offset , field_1_recalc ) ; return getRecordSize ( ) ; } public int getRecordSize ( ) { return 6 ; } public short getSid ( ) { return sid ; } public Object clone ( ) { SaveRecalcRecord rec = new SaveRecalcRecord ( ) ; rec . field_1_recalc = field_1_recalc ; return rec ; } } 	1
package org . apache . poi . poifs . filesystem ; public interface Entry { public String getName ( ) ; public boolean isDirectoryEntry ( ) ; public boolean isDocumentEntry ( ) ; public DirectoryEntry getParent ( ) ; public boolean delete ( ) ; public boolean renameTo ( final String newName ) ; } 	0
package org . apache . poi . hssf . record ; import org . apache . poi . util . IntMapper ; class SSTDeserializer { private IntMapper strings ; public SSTDeserializer ( IntMapper strings ) { this . strings = strings ; } public void manufactureStrings ( int stringCount , RecordInputStream in ) { for ( int i = 0 ; i < stringCount ; i ++ ) { UnicodeString str = new UnicodeString ( in ) ; addToStringTable ( strings , str ) ; } } static public void addToStringTable ( IntMapper strings , UnicodeString string ) { strings . add ( string ) ; } } 	0
package org . apache . poi . ddf ; import org . apache . poi . util . LittleEndian ; import org . apache . poi . util . HexDump ; public class EscherArrayProperty extends EscherComplexProperty { private static final int FIXED_SIZE = 3 * 2 ; private boolean sizeIncludesHeaderSize = true ; private boolean emptyComplexPart = false ; public EscherArrayProperty ( short id , byte [ ] complexData ) { super ( id , checkComplexData ( complexData ) ) ; emptyComplexPart = complexData . length == 0 ; } public EscherArrayProperty ( short propertyNumber , boolean isBlipId , byte [ ] complexData ) { super ( propertyNumber , isBlipId , checkComplexData ( complexData ) ) ; } private static byte [ ] checkComplexData ( byte [ ] complexData ) { if ( complexData == null || complexData . length == 0 ) complexData = new byte [ 6 ] ; return complexData ; } public int getNumberOfElementsInArray ( ) { return LittleEndian . getUShort ( complexData , 0 ) ; } public void setNumberOfElementsInArray ( int numberOfElements ) { int expectedArraySize = numberOfElements * getActualSizeOfElements ( getSizeOfElements ( ) ) + FIXED_SIZE ; if ( expectedArraySize != complexData . length ) { byte [ ] newArray = new byte [ expectedArraySize ] ; System . arraycopy ( complexData , 0 , newArray , 0 , complexData . length ) ; complexData = newArray ; } LittleEndian . putShort ( complexData , 0 , ( short ) numberOfElements ) ; } public int getNumberOfElementsInMemory ( ) { return LittleEndian . getUShort ( complexData , 2 ) ; } public void setNumberOfElementsInMemory ( int numberOfElements ) { int expectedArraySize = numberOfElements * getActualSizeOfElements ( getSizeOfElements ( ) ) + FIXED_SIZE ; if ( expectedArraySize != complexData . length ) { byte [ ] newArray = new byte [ expectedArraySize ] ; System . arraycopy ( complexData , 0 , newArray , 0 , expectedArraySize ) ; complexData = newArray ; } LittleEndian . putShort ( complexData , 2 , ( short ) numberOfElements ) ; } public short getSizeOfElements ( ) { return LittleEndian . getShort ( complexData , 4 ) ; } public void setSizeOfElements ( int sizeOfElements ) { LittleEndian . putShort ( complexData , 4 , ( short ) sizeOfElements ) ; int expectedArraySize = getNumberOfElementsInArray ( ) * getActualSizeOfElements ( getSizeOfElements ( ) ) + FIXED_SIZE ; if ( expectedArraySize != complexData . length ) { byte [ ] newArray = new byte [ expectedArraySize ] ; System . arraycopy ( complexData , 0 , newArray , 0 , 6 ) ; complexData = newArray ; } } public byte [ ] getElement ( int index ) { int actualSize = getActualSizeOfElements ( getSizeOfElements ( ) ) ; byte [ ] result = new byte [ actualSize ] ; System . arraycopy ( complexData , FIXED_SIZE + index * actualSize , result , 0 , result . length ) ; return result ; } public void setElement ( int index , byte [ ] element ) { int actualSize = getActualSizeOfElements ( getSizeOfElements ( ) ) ; System . arraycopy ( element , 0 , complexData , FIXED_SIZE + index * actualSize , actualSize ) ; } public String toString ( ) { String nl = System . getProperty ( "line.separator" ) ; StringBuffer results = new StringBuffer ( ) ; results . append ( "    {EscherArrayProperty:" + nl ) ; results . append ( "     Num Elements: " + getNumberOfElementsInArray ( ) + nl ) ; results . append ( "     Num Elements In Memory: " + getNumberOfElementsInMemory ( ) + nl ) ; results . append ( "     Size of elements: " + getSizeOfElements ( ) + nl ) ; for ( int i = 0 ; i < getNumberOfElementsInArray ( ) ; i ++ ) { results . append ( "     Element " + i + ": " + HexDump . toHex ( getElement ( i ) ) + nl ) ; } results . append ( "}" + nl ) ; return "propNum: " + getPropertyNumber ( ) + ", propName: " + EscherProperties . getPropertyName ( getPropertyNumber ( ) ) + ", complex: " + isComplex ( ) + ", blipId: " + isBlipId ( ) + ", data: " + nl + results . toString ( ) ; } public int setArrayData ( byte [ ] data , int offset ) { if ( emptyComplexPart ) { complexData = new byte [ 0 ] ; } else { short numElements = LittleEndian . getShort ( data , offset ) ; short numReserved = LittleEndian . getShort ( data , offset + 2 ) ; short sizeOfElements = LittleEndian . getShort ( data , offset + 4 ) ; int arraySize = getActualSizeOfElements ( sizeOfElements ) * numElements ; if ( arraySize == complexData . length ) { complexData = new byte [ arraySize + 6 ] ; sizeIncludesHeaderSize = false ; } System . arraycopy ( data , offset , complexData , 0 , complexData . length ) ; } return complexData . length ; } public int serializeSimplePart ( byte [ ] data , int pos ) { LittleEndian . putShort ( data , pos , getId ( ) ) ; int recordSize = complexData . length ; if ( ! sizeIncludesHeaderSize ) { recordSize -= 6 ; } LittleEndian . putInt ( data , pos + 2 , recordSize ) ; return 6 ; } public static int getActualSizeOfElements ( short sizeOfElements ) { if ( sizeOfElements < 0 ) return ( short ) ( ( - sizeOfElements ) > > 2 ) ; else return sizeOfElements ; } } 	1
package org . apache . poi . hpsf ; public class ReadingNotSupportedException extends UnsupportedVariantTypeException { public ReadingNotSupportedException ( final long variantType , final Object value ) { super ( variantType , value ) ; } } 	0
package org . apache . poi . hssf . record ; import org . apache . poi . util . * ; public class BottomMarginRecord extends Record implements Margin { public final static short sid = 0x29 ; private double field_1_margin ; public BottomMarginRecord ( ) { } public BottomMarginRecord ( RecordInputStream in ) { super ( in ) ; } protected void validateSid ( short id ) { if ( id != sid ) { throw new RecordFormatException ( "Not a BottomMargin record" ) ; } } protected void fillFields ( RecordInputStream in ) { field_1_margin = in . readDouble ( ) ; } public String toString ( ) { StringBuffer buffer = new StringBuffer ( ) ; buffer . append ( "[BottomMargin]\n" ) ; buffer . append ( "    .margin               = " ) . append ( " (" ) . append ( getMargin ( ) ) . append ( " )\n" ) ; buffer . append ( "[/BottomMargin]\n" ) ; return buffer . toString ( ) ; } public int serialize ( int offset , byte [ ] data ) { LittleEndian . putShort ( data , 0 + offset , sid ) ; LittleEndian . putShort ( data , 2 + offset , ( short ) ( getRecordSize ( ) - 4 ) ) ; LittleEndian . putDouble ( data , 4 + offset , field_1_margin ) ; return getRecordSize ( ) ; } public int getRecordSize ( ) { return 4 + 8 ; } public short getSid ( ) { return sid ; } public double getMargin ( ) { return field_1_margin ; } public void setMargin ( double field_1_margin ) { this . field_1_margin = field_1_margin ; } public Object clone ( ) { BottomMarginRecord rec = new BottomMarginRecord ( ) ; rec . field_1_margin = this . field_1_margin ; return rec ; } } 	1
package org . apache . poi . hssf . record ; import java . util . ArrayList ; import java . util . Iterator ; import org . apache . poi . util . LittleEndian ; public class MergeCellsRecord extends Record { public final static short sid = 0xe5 ; private ArrayList field_2_regions ; public MergeCellsRecord ( ) { } public MergeCellsRecord ( RecordInputStream in ) { super ( in ) ; } protected void fillFields ( RecordInputStream in ) { short numAreas = in . readShort ( ) ; field_2_regions = new ArrayList ( numAreas + 10 ) ; for ( int k = 0 ; k < numAreas ; k ++ ) { MergedRegion region = new MergedRegion ( in . readShort ( ) , in . readShort ( ) , in . readShort ( ) , in . readShort ( ) ) ; field_2_regions . add ( region ) ; } } public short getNumAreas ( ) { if ( field_2_regions == null ) return 0 ; return ( short ) field_2_regions . size ( ) ; } public void setNumAreas ( short numareas ) { } public int addArea ( int rowfrom , short colfrom , int rowto , short colto ) { if ( field_2_regions == null ) { field_2_regions = new ArrayList ( 10 ) ; } MergedRegion region = new MergedRegion ( rowfrom , rowto , colfrom , colto ) ; field_2_regions . add ( region ) ; return field_2_regions . size ( ) - 1 ; } public void removeAreaAt ( int area ) { field_2_regions . remove ( area ) ; } public MergedRegion getAreaAt ( int index ) { return ( MergedRegion ) field_2_regions . get ( index ) ; } public int getRecordSize ( ) { int retValue ; retValue = 6 + ( 8 * field_2_regions . size ( ) ) ; return retValue ; } public short getSid ( ) { return sid ; } public int serialize ( int offset , byte [ ] data ) { int recordsize = getRecordSize ( ) ; int pos = 6 ; LittleEndian . putShort ( data , offset + 0 , sid ) ; LittleEndian . putShort ( data , offset + 2 , ( short ) ( recordsize - 4 ) ) ; LittleEndian . putShort ( data , offset + 4 , getNumAreas ( ) ) ; for ( int k = 0 ; k < getNumAreas ( ) ; k ++ ) { MergedRegion region = getAreaAt ( k ) ; LittleEndian . putShort ( data , offset + pos , ( short ) region . row_from ) ; pos += 2 ; LittleEndian . putShort ( data , offset + pos , ( short ) region . row_to ) ; pos += 2 ; LittleEndian . putShort ( data , offset + pos , region . col_from ) ; pos += 2 ; LittleEndian . putShort ( data , offset + pos , region . col_to ) ; pos += 2 ; } return recordsize ; } public String toString ( ) { StringBuffer retval = new StringBuffer ( ) ; retval . append ( "[MERGEDCELLS]" ) . append ( "\n" ) ; retval . append ( "     .sid        =" ) . append ( sid ) . append ( "\n" ) ; retval . append ( "     .numregions =" ) . append ( getNumAreas ( ) ) . append ( "\n" ) ; for ( int k = 0 ; k < getNumAreas ( ) ; k ++ ) { MergedRegion region = ( MergedRegion ) field_2_regions . get ( k ) ; retval . append ( "     .rowfrom    =" ) . append ( region . row_from ) . append ( "\n" ) ; retval . append ( "     .colfrom    =" ) . append ( region . col_from ) . append ( "\n" ) ; retval . append ( "     .rowto      =" ) . append ( region . row_to ) . append ( "\n" ) ; retval . append ( "     .colto      =" ) . append ( region . col_to ) . append ( "\n" ) ; } retval . append ( "[MERGEDCELLS]" ) . append ( "\n" ) ; return retval . toString ( ) ; } protected void validateSid ( short id ) { if ( id != sid ) { throw new RecordFormatException ( "NOT A MERGEDCELLS RECORD!! " + id ) ; } } public class MergedRegion { public MergedRegion ( int row_from , int row_to , short col_from , short col_to ) { this . row_from = row_from ; this . row_to = row_to ; this . col_from = col_from ; this . col_to = col_to ; } public int row_from ; public int row_to ; public short col_from ; public short col_to ; } public Object clone ( ) { MergeCellsRecord rec = new MergeCellsRecord ( ) ; rec . field_2_regions = new ArrayList ( ) ; Iterator iterator = field_2_regions . iterator ( ) ; while ( iterator . hasNext ( ) ) { MergedRegion oldRegion = ( MergedRegion ) iterator . next ( ) ; rec . addArea ( oldRegion . row_from , oldRegion . col_from , oldRegion . row_to , oldRegion . col_to ) ; } return rec ; } } 	1
package org . apache . poi . hssf . record ; import org . apache . poi . util . LittleEndian ; public class WindowProtectRecord extends Record { public final static short sid = 0x19 ; private short field_1_protect ; public WindowProtectRecord ( ) { } public WindowProtectRecord ( RecordInputStream in ) { super ( in ) ; } protected void validateSid ( short id ) { if ( id != sid ) { throw new RecordFormatException ( "NOT A WINDOWPROTECT RECORD" ) ; } } protected void fillFields ( RecordInputStream in ) { field_1_protect = in . readShort ( ) ; } public void setProtect ( boolean protect ) { if ( protect == true ) { field_1_protect = 1 ; } else { field_1_protect = 0 ; } } public boolean getProtect ( ) { return ( field_1_protect == 1 ) ; } public String toString ( ) { StringBuffer buffer = new StringBuffer ( ) ; buffer . append ( "[WINDOWPROTECT]\n" ) ; buffer . append ( "    .protect         = " ) . append ( getProtect ( ) ) . append ( "\n" ) ; buffer . append ( "[/WINDOWPROTECT]\n" ) ; return buffer . toString ( ) ; } public int serialize ( int offset , byte [ ] data ) { LittleEndian . putShort ( data , 0 + offset , sid ) ; LittleEndian . putShort ( data , 2 + offset , ( ( short ) 0x02 ) ) ; LittleEndian . putShort ( data , 4 + offset , field_1_protect ) ; return getRecordSize ( ) ; } public int getRecordSize ( ) { return 6 ; } public short getSid ( ) { return sid ; } } 	1
package org . apache . poi . hssf . model ; import org . apache . poi . ddf . * ; import org . apache . poi . hssf . record . ObjRecord ; import org . apache . poi . hssf . record . EscherAggregate ; import org . apache . poi . hssf . record . CommonObjectDataSubRecord ; import org . apache . poi . hssf . record . EndSubRecord ; import org . apache . poi . hssf . usermodel . HSSFSimpleShape ; import org . apache . poi . hssf . usermodel . HSSFShape ; public class SimpleFilledShape extends AbstractShape { private EscherContainerRecord spContainer ; private ObjRecord objRecord ; SimpleFilledShape ( HSSFSimpleShape hssfShape , int shapeId ) { spContainer = createSpContainer ( hssfShape , shapeId ) ; objRecord = createObjRecord ( hssfShape , shapeId ) ; } private EscherContainerRecord createSpContainer ( HSSFSimpleShape hssfShape , int shapeId ) { HSSFShape shape = hssfShape ; EscherContainerRecord spContainer = new EscherContainerRecord ( ) ; EscherSpRecord sp = new EscherSpRecord ( ) ; EscherOptRecord opt = new EscherOptRecord ( ) ; EscherClientDataRecord clientData = new EscherClientDataRecord ( ) ; spContainer . setRecordId ( EscherContainerRecord . SP_CONTAINER ) ; spContainer . setOptions ( ( short ) 0x000F ) ; sp . setRecordId ( EscherSpRecord . RECORD_ID ) ; short shapeType = objTypeToShapeType ( hssfShape . getShapeType ( ) ) ; sp . setOptions ( ( short ) ( ( shapeType << 4 ) | 0x2 ) ) ; sp . setShapeId ( shapeId ) ; sp . setFlags ( EscherSpRecord . FLAG_HAVEANCHOR | EscherSpRecord . FLAG_HASSHAPETYPE ) ; opt . setRecordId ( EscherOptRecord . RECORD_ID ) ; addStandardOptions ( shape , opt ) ; EscherRecord anchor = createAnchor ( shape . getAnchor ( ) ) ; clientData . setRecordId ( EscherClientDataRecord . RECORD_ID ) ; clientData . setOptions ( ( short ) 0x0000 ) ; spContainer . addChildRecord ( sp ) ; spContainer . addChildRecord ( opt ) ; spContainer . addChildRecord ( anchor ) ; spContainer . addChildRecord ( clientData ) ; return spContainer ; } private short objTypeToShapeType ( int objType ) { short shapeType ; if ( objType == HSSFSimpleShape . OBJECT_TYPE_OVAL ) shapeType = EscherAggregate . ST_ELLIPSE ; else if ( objType == HSSFSimpleShape . OBJECT_TYPE_RECTANGLE ) shapeType = EscherAggregate . ST_RECTANGLE ; else throw new IllegalArgumentException ( "Unable to handle an object of this type" ) ; return shapeType ; } private ObjRecord createObjRecord ( HSSFShape hssfShape , int shapeId ) { HSSFShape shape = hssfShape ; ObjRecord obj = new ObjRecord ( ) ; CommonObjectDataSubRecord c = new CommonObjectDataSubRecord ( ) ; c . setObjectType ( ( short ) ( ( HSSFSimpleShape ) shape ) . getShapeType ( ) ) ; c . setObjectId ( ( short ) ( shapeId ) ) ; c . setLocked ( true ) ; c . setPrintable ( true ) ; c . setAutofill ( true ) ; c . setAutoline ( true ) ; EndSubRecord e = new EndSubRecord ( ) ; obj . addSubRecord ( c ) ; obj . addSubRecord ( e ) ; return obj ; } public EscherContainerRecord getSpContainer ( ) { return spContainer ; } public ObjRecord getObjRecord ( ) { return objRecord ; } } 	1
package org . apache . poi . ddf ; import org . apache . poi . util . HexDump ; import org . apache . poi . util . HexRead ; import org . apache . poi . util . LittleEndian ; import java . io . ByteArrayInputStream ; import java . io . IOException ; import java . io . InputStream ; import java . io . PrintStream ; import java . util . zip . InflaterInputStream ; public class EscherDump { public EscherDump ( ) { } public void dump ( byte [ ] data , int offset , int size , PrintStream out ) throws IOException , LittleEndian . BufferUnderrunException { EscherRecordFactory recordFactory = new DefaultEscherRecordFactory ( ) ; int pos = offset ; while ( pos < offset + size ) { EscherRecord r = recordFactory . createRecord ( data , pos ) ; int bytesRead = r . fillFields ( data , pos , recordFactory ) ; System . out . println ( r . toString ( ) ) ; pos += bytesRead ; } } public void dumpOld ( long maxLength , InputStream in , PrintStream out ) throws IOException , LittleEndian . BufferUnderrunException { long remainingBytes = maxLength ; short options ; short recordId ; int recordBytesRemaining ; StringBuffer stringBuf = new StringBuffer ( ) ; short nDumpSize ; String recordName ; boolean atEOF = false ; while ( ! atEOF && ( remainingBytes > 0 ) ) { stringBuf = new StringBuffer ( ) ; options = LittleEndian . readShort ( in ) ; recordId = LittleEndian . readShort ( in ) ; recordBytesRemaining = LittleEndian . readInt ( in ) ; remainingBytes -= 2 + 2 + 4 ; switch ( recordId ) { case ( short ) 0xF000 : recordName = "MsofbtDggContainer" ; break ; case ( short ) 0xF006 : recordName = "MsofbtDgg" ; break ; case ( short ) 0xF016 : recordName = "MsofbtCLSID" ; break ; case ( short ) 0xF00B : recordName = "MsofbtOPT" ; break ; case ( short ) 0xF11A : recordName = "MsofbtColorMRU" ; break ; case ( short ) 0xF11E : recordName = "MsofbtSplitMenuColors" ; break ; case ( short ) 0xF001 : recordName = "MsofbtBstoreContainer" ; break ; case ( short ) 0xF007 : recordName = "MsofbtBSE" ; break ; case ( short ) 0xF002 : recordName = "MsofbtDgContainer" ; break ; case ( short ) 0xF008 : recordName = "MsofbtDg" ; break ; case ( short ) 0xF118 : recordName = "MsofbtRegroupItem" ; break ; case ( short ) 0xF120 : recordName = "MsofbtColorScheme" ; break ; case ( short ) 0xF003 : recordName = "MsofbtSpgrContainer" ; break ; case ( short ) 0xF004 : recordName = "MsofbtSpContainer" ; break ; case ( short ) 0xF009 : recordName = "MsofbtSpgr" ; break ; case ( short ) 0xF00A : recordName = "MsofbtSp" ; break ; case ( short ) 0xF00C : recordName = "MsofbtTextbox" ; break ; case ( short ) 0xF00D : recordName = "MsofbtClientTextbox" ; break ; case ( short ) 0xF00E : recordName = "MsofbtAnchor" ; break ; case ( short ) 0xF00F : recordName = "MsofbtChildAnchor" ; break ; case ( short ) 0xF010 : recordName = "MsofbtClientAnchor" ; break ; case ( short ) 0xF011 : recordName = "MsofbtClientData" ; break ; case ( short ) 0xF11F : recordName = "MsofbtOleObject" ; break ; case ( short ) 0xF11D : recordName = "MsofbtDeletedPspl" ; break ; case ( short ) 0xF005 : recordName = "MsofbtSolverContainer" ; break ; case ( short ) 0xF012 : recordName = "MsofbtConnectorRule" ; break ; case ( short ) 0xF013 : recordName = "MsofbtAlignRule" ; break ; case ( short ) 0xF014 : recordName = "MsofbtArcRule" ; break ; case ( short ) 0xF015 : recordName = "MsofbtClientRule" ; break ; case ( short ) 0xF017 : recordName = "MsofbtCalloutRule" ; break ; case ( short ) 0xF119 : recordName = "MsofbtSelection" ; break ; case ( short ) 0xF122 : recordName = "MsofbtUDefProp" ; break ; default : if ( recordId >= ( short ) 0xF018 && recordId <= ( short ) 0xF117 ) recordName = "MsofbtBLIP" ; else if ( ( options & ( short ) 0x000F ) == ( short ) 0x000F ) recordName = "UNKNOWN container" ; else recordName = "UNKNOWN ID" ; } stringBuf . append ( "  " ) ; stringBuf . append ( HexDump . toHex ( recordId ) ) ; stringBuf . append ( "  " ) . append ( recordName ) . append ( " [" ) ; stringBuf . append ( HexDump . toHex ( options ) ) ; stringBuf . append ( ',' ) ; stringBuf . append ( HexDump . toHex ( recordBytesRemaining ) ) ; stringBuf . append ( "]  instance: " ) ; stringBuf . append ( HexDump . toHex ( ( ( short ) ( options > > 4 ) ) ) ) ; out . println ( stringBuf . toString ( ) ) ; if ( recordId == ( short ) 0xF007 && 36 <= remainingBytes && 36 <= recordBytesRemaining ) { byte n8 ; stringBuf = new StringBuffer ( "    btWin32: " ) ; n8 = ( byte ) in . read ( ) ; stringBuf . append ( HexDump . toHex ( n8 ) ) ; stringBuf . append ( getBlipType ( n8 ) ) ; stringBuf . append ( "  btMacOS: " ) ; n8 = ( byte ) in . read ( ) ; stringBuf . append ( HexDump . toHex ( n8 ) ) ; stringBuf . append ( getBlipType ( n8 ) ) ; out . println ( stringBuf . toString ( ) ) ; out . println ( "    rgbUid:" ) ; HexDump . dump ( in , out , 0 , 16 ) ; out . print ( "    tag: " ) ; outHex ( 2 , in , out ) ; out . println ( ) ; out . print ( "    size: " ) ; outHex ( 4 , in , out ) ; out . println ( ) ; out . print ( "    cRef: " ) ; outHex ( 4 , in , out ) ; out . println ( ) ; out . print ( "    offs: " ) ; outHex ( 4 , in , out ) ; out . println ( ) ; out . print ( "    usage: " ) ; outHex ( 1 , in , out ) ; out . println ( ) ; out . print ( "    cbName: " ) ; outHex ( 1 , in , out ) ; out . println ( ) ; out . print ( "    unused2: " ) ; outHex ( 1 , in , out ) ; out . println ( ) ; out . print ( "    unused3: " ) ; outHex ( 1 , in , out ) ; out . println ( ) ; remainingBytes -= 36 ; recordBytesRemaining = 0 ; } else if ( recordId == ( short ) 0xF010 && 0x12 <= remainingBytes && 0x12 <= recordBytesRemaining ) { out . print ( "    Flag: " ) ; outHex ( 2 , in , out ) ; out . println ( ) ; out . print ( "    Col1: " ) ; outHex ( 2 , in , out ) ; out . print ( "    dX1: " ) ; outHex ( 2 , in , out ) ; out . print ( "    Row1: " ) ; outHex ( 2 , in , out ) ; out . print ( "    dY1: " ) ; outHex ( 2 , in , out ) ; out . println ( ) ; out . print ( "    Col2: " ) ; outHex ( 2 , in , out ) ; out . print ( "    dX2: " ) ; outHex ( 2 , in , out ) ; out . print ( "    Row2: " ) ; outHex ( 2 , in , out ) ; out . print ( "    dY2: " ) ; outHex ( 2 , in , out ) ; out . println ( ) ; remainingBytes -= 18 ; recordBytesRemaining -= 18 ; } else if ( recordId == ( short ) 0xF00B || recordId == ( short ) 0xF122 ) { int nComplex = 0 ; out . println ( "    PROPID        VALUE" ) ; while ( recordBytesRemaining >= 6 + nComplex && remainingBytes >= 6 + nComplex ) { short n16 ; int n32 ; n16 = LittleEndian . readShort ( in ) ; n32 = LittleEndian . readInt ( in ) ; recordBytesRemaining -= 6 ; remainingBytes -= 6 ; out . print ( "    " ) ; out . print ( HexDump . toHex ( n16 ) ) ; out . print ( " (" ) ; int propertyId = n16 & ( short ) 0x3FFF ; out . print ( " " + propertyId ) ; if ( ( n16 & ( short ) 0x8000 ) == 0 ) { if ( ( n16 & ( short ) 0x4000 ) != 0 ) out . print ( ", fBlipID" ) ; out . print ( ")  " ) ; out . print ( HexDump . toHex ( n32 ) ) ; if ( ( n16 & ( short ) 0x4000 ) == 0 ) { out . print ( " (" ) ; out . print ( dec1616 ( n32 ) ) ; out . print ( ')' ) ; out . print ( " {" + propName ( ( short ) propertyId ) + "}" ) ; } out . println ( ) ; } else { out . print ( ", fComplex)  " ) ; out . print ( HexDump . toHex ( n32 ) ) ; out . print ( " - Complex prop len" ) ; out . println ( " {" + propName ( ( short ) propertyId ) + "}" ) ; nComplex += n32 ; } } while ( ( nComplex & remainingBytes ) > 0 ) { nDumpSize = ( nComplex > ( int ) remainingBytes ) ? ( short ) remainingBytes : ( short ) nComplex ; HexDump . dump ( in , out , 0 , nDumpSize ) ; nComplex -= nDumpSize ; recordBytesRemaining -= nDumpSize ; remainingBytes -= nDumpSize ; } } else if ( recordId == ( short ) 0xF012 ) { out . print ( "    Connector rule: " ) ; out . print ( LittleEndian . readInt ( in ) ) ; out . print ( "    ShapeID A: " ) ; out . print ( LittleEndian . readInt ( in ) ) ; out . print ( "   ShapeID B: " ) ; out . print ( LittleEndian . readInt ( in ) ) ; out . print ( "    ShapeID connector: " ) ; out . print ( LittleEndian . readInt ( in ) ) ; out . print ( "   Connect pt A: " ) ; out . print ( LittleEndian . readInt ( in ) ) ; out . print ( "   Connect pt B: " ) ; out . println ( LittleEndian . readInt ( in ) ) ; recordBytesRemaining -= 24 ; remainingBytes -= 24 ; } else if ( recordId >= ( short ) 0xF018 && recordId < ( short ) 0xF117 ) { out . println ( "    Secondary UID: " ) ; HexDump . dump ( in , out , 0 , 16 ) ; out . println ( "    Cache of size: " + HexDump . toHex ( LittleEndian . readInt ( in ) ) ) ; out . println ( "    Boundary top: " + HexDump . toHex ( LittleEndian . readInt ( in ) ) ) ; out . println ( "    Boundary left: " + HexDump . toHex ( LittleEndian . readInt ( in ) ) ) ; out . println ( "    Boundary width: " + HexDump . toHex ( LittleEndian . readInt ( in ) ) ) ; out . println ( "    Boundary height: " + HexDump . toHex ( LittleEndian . readInt ( in ) ) ) ; out . println ( "    X: " + HexDump . toHex ( LittleEndian . readInt ( in ) ) ) ; out . println ( "    Y: " + HexDump . toHex ( LittleEndian . readInt ( in ) ) ) ; out . println ( "    Cache of saved size: " + HexDump . toHex ( LittleEndian . readInt ( in ) ) ) ; out . println ( "    Compression Flag: " + HexDump . toHex ( ( byte ) in . read ( ) ) ) ; out . println ( "    Filter: " + HexDump . toHex ( ( byte ) in . read ( ) ) ) ; out . println ( "    Data (after decompression): " ) ; recordBytesRemaining -= 34 + 16 ; remainingBytes -= 34 + 16 ; nDumpSize = ( recordBytesRemaining > ( int ) remainingBytes ) ? ( short ) remainingBytes : ( short ) recordBytesRemaining ; byte [ ] buf = new byte [ nDumpSize ] ; int read = in . read ( buf ) ; while ( read != - 1 && read < nDumpSize ) read += in . read ( buf , read , buf . length ) ; ByteArrayInputStream bin = new ByteArrayInputStream ( buf ) ; InputStream in1 = new InflaterInputStream ( bin ) ; int bytesToDump = - 1 ; HexDump . dump ( in1 , out , 0 , bytesToDump ) ; recordBytesRemaining -= nDumpSize ; remainingBytes -= nDumpSize ; } boolean isContainer = ( options & ( short ) 0x000F ) == ( short ) 0x000F ; if ( isContainer && remainingBytes >= 0 ) { if ( recordBytesRemaining <= ( int ) remainingBytes ) out . println ( "            completed within" ) ; else out . println ( "            continued elsewhere" ) ; } else if ( remainingBytes >= 0 ) { nDumpSize = ( recordBytesRemaining > ( int ) remainingBytes ) ? ( short ) remainingBytes : ( short ) recordBytesRemaining ; if ( nDumpSize != 0 ) { HexDump . dump ( in , out , 0 , nDumpSize ) ; remainingBytes -= nDumpSize ; } } else out . println ( " >> OVERRUN <<" ) ; } } private String propName ( short propertyId ) { class PropName { public PropName ( int id , String name ) { this . id = id ; this . name = name ; } int id ; String name ; } final PropName [ ] props = new PropName [ ] { new PropName ( 4 , "transform.rotation" ) , new PropName ( 119 , "protection.lockrotation" ) , new PropName ( 120 , "protection.lockaspectratio" ) , new PropName ( 121 , "protection.lockposition" ) , new PropName ( 122 , "protection.lockagainstselect" ) , new PropName ( 123 , "protection.lockcropping" ) , new PropName ( 124 , "protection.lockvertices" ) , new PropName ( 125 , "protection.locktext" ) , new PropName ( 126 , "protection.lockadjusthandles" ) , new PropName ( 127 , "protection.lockagainstgrouping" ) , new PropName ( 128 , "text.textid" ) , new PropName ( 129 , "text.textleft" ) , new PropName ( 130 , "text.texttop" ) , new PropName ( 131 , "text.textright" ) , new PropName ( 132 , "text.textbottom" ) , new PropName ( 133 , "text.wraptext" ) , new PropName ( 134 , "text.scaletext" ) , new PropName ( 135 , "text.anchortext" ) , new PropName ( 136 , "text.textflow" ) , new PropName ( 137 , "text.fontrotation" ) , new PropName ( 138 , "text.idofnextshape" ) , new PropName ( 139 , "text.bidir" ) , new PropName ( 187 , "text.singleclickselects" ) , new PropName ( 188 , "text.usehostmargins" ) , new PropName ( 189 , "text.rotatetextwithshape" ) , new PropName ( 190 , "text.sizeshapetofittext" ) , new PropName ( 191 , "text.sizetexttofitshape" ) , new PropName ( 192 , "geotext.unicode" ) , new PropName ( 193 , "geotext.rtftext" ) , new PropName ( 194 , "geotext.alignmentoncurve" ) , new PropName ( 195 , "geotext.defaultpointsize" ) , new PropName ( 196 , "geotext.textspacing" ) , new PropName ( 197 , "geotext.fontfamilyname" ) , new PropName ( 240 , "geotext.reverseroworder" ) , new PropName ( 241 , "geotext.hastexteffect" ) , new PropName ( 242 , "geotext.rotatecharacters" ) , new PropName ( 243 , "geotext.kerncharacters" ) , new PropName ( 244 , "geotext.tightortrack" ) , new PropName ( 245 , "geotext.stretchtofitshape" ) , new PropName ( 246 , "geotext.charboundingbox" ) , new PropName ( 247 , "geotext.scaletextonpath" ) , new PropName ( 248 , "geotext.stretchcharheight" ) , new PropName ( 249 , "geotext.nomeasurealongpath" ) , new PropName ( 250 , "geotext.boldfont" ) , new PropName ( 251 , "geotext.italicfont" ) , new PropName ( 252 , "geotext.underlinefont" ) , new PropName ( 253 , "geotext.shadowfont" ) , new PropName ( 254 , "geotext.smallcapsfont" ) , new PropName ( 255 , "geotext.strikethroughfont" ) , new PropName ( 256 , "blip.cropfromtop" ) , new PropName ( 257 , "blip.cropfrombottom" ) , new PropName ( 258 , "blip.cropfromleft" ) , new PropName ( 259 , "blip.cropfromright" ) , new PropName ( 260 , "blip.bliptodisplay" ) , new PropName ( 261 , "blip.blipfilename" ) , new PropName ( 262 , "blip.blipflags" ) , new PropName ( 263 , "blip.transparentcolor" ) , new PropName ( 264 , "blip.contrastsetting" ) , new PropName ( 265 , "blip.brightnesssetting" ) , new PropName ( 266 , "blip.gamma" ) , new PropName ( 267 , "blip.pictureid" ) , new PropName ( 268 , "blip.doublemod" ) , new PropName ( 269 , "blip.picturefillmod" ) , new PropName ( 270 , "blip.pictureline" ) , new PropName ( 271 , "blip.printblip" ) , new PropName ( 272 , "blip.printblipfilename" ) , new PropName ( 273 , "blip.printflags" ) , new PropName ( 316 , "blip.nohittestpicture" ) , new PropName ( 317 , "blip.picturegray" ) , new PropName ( 318 , "blip.picturebilevel" ) , new PropName ( 319 , "blip.pictureactive" ) , new PropName ( 320 , "geometry.left" ) , new PropName ( 321 , "geometry.top" ) , new PropName ( 322 , "geometry.right" ) , new PropName ( 323 , "geometry.bottom" ) , new PropName ( 324 , "geometry.shapepath" ) , new PropName ( 325 , "geometry.vertices" ) , new PropName ( 326 , "geometry.segmentinfo" ) , new PropName ( 327 , "geometry.adjustvalue" ) , new PropName ( 328 , "geometry.adjust2value" ) , new PropName ( 329 , "geometry.adjust3value" ) , new PropName ( 330 , "geometry.adjust4value" ) , new PropName ( 331 , "geometry.adjust5value" ) , new PropName ( 332 , "geometry.adjust6value" ) , new PropName ( 333 , "geometry.adjust7value" ) , new PropName ( 334 , "geometry.adjust8value" ) , new PropName ( 335 , "geometry.adjust9value" ) , new PropName ( 336 , "geometry.adjust10value" ) , new PropName ( 378 , "geometry.shadowOK" ) , new PropName ( 379 , "geometry.3dok" ) , new PropName ( 380 , "geometry.lineok" ) , new PropName ( 381 , "geometry.geotextok" ) , new PropName ( 382 , "geometry.fillshadeshapeok" ) , new PropName ( 383 , "geometry.fillok" ) , new PropName ( 384 , "fill.filltype" ) , new PropName ( 385 , "fill.fillcolor" ) , new PropName ( 386 , "fill.fillopacity" ) , new PropName ( 387 , "fill.fillbackcolor" ) , new PropName ( 388 , "fill.backopacity" ) , new PropName ( 389 , "fill.crmod" ) , new PropName ( 390 , "fill.patterntexture" ) , new PropName ( 391 , "fill.blipfilename" ) , new PropName ( 392 , "fill.blipflags" ) , new PropName ( 393 , "fill.width" ) , new PropName ( 394 , "fill.height" ) , new PropName ( 395 , "fill.angle" ) , new PropName ( 396 , "fill.focus" ) , new PropName ( 397 , "fill.toleft" ) , new PropName ( 398 , "fill.totop" ) , new PropName ( 399 , "fill.toright" ) , new PropName ( 400 , "fill.tobottom" ) , new PropName ( 401 , "fill.rectleft" ) , new PropName ( 402 , "fill.recttop" ) , new PropName ( 403 , "fill.rectright" ) , new PropName ( 404 , "fill.rectbottom" ) , new PropName ( 405 , "fill.dztype" ) , new PropName ( 406 , "fill.shadepreset" ) , new PropName ( 407 , "fill.shadecolors" ) , new PropName ( 408 , "fill.originx" ) , new PropName ( 409 , "fill.originy" ) , new PropName ( 410 , "fill.shapeoriginx" ) , new PropName ( 411 , "fill.shapeoriginy" ) , new PropName ( 412 , "fill.shadetype" ) , new PropName ( 443 , "fill.filled" ) , new PropName ( 444 , "fill.hittestfill" ) , new PropName ( 445 , "fill.shape" ) , new PropName ( 446 , "fill.userect" ) , new PropName ( 447 , "fill.nofillhittest" ) , new PropName ( 448 , "linestyle.color" ) , new PropName ( 449 , "linestyle.opacity" ) , new PropName ( 450 , "linestyle.backcolor" ) , new PropName ( 451 , "linestyle.crmod" ) , new PropName ( 452 , "linestyle.linetype" ) , new PropName ( 453 , "linestyle.fillblip" ) , new PropName ( 454 , "linestyle.fillblipname" ) , new PropName ( 455 , "linestyle.fillblipflags" ) , new PropName ( 456 , "linestyle.fillwidth" ) , new PropName ( 457 , "linestyle.fillheight" ) , new PropName ( 458 , "linestyle.filldztype" ) , new PropName ( 459 , "linestyle.linewidth" ) , new PropName ( 460 , "linestyle.linemiterlimit" ) , new PropName ( 461 , "linestyle.linestyle" ) , new PropName ( 462 , "linestyle.linedashing" ) , new PropName ( 463 , "linestyle.linedashstyle" ) , new PropName ( 464 , "linestyle.linestartarrowhead" ) , new PropName ( 465 , "linestyle.lineendarrowhead" ) , new PropName ( 466 , "linestyle.linestartarrowwidth" ) , new PropName ( 467 , "linestyle.lineestartarrowlength" ) , new PropName ( 468 , "linestyle.lineendarrowwidth" ) , new PropName ( 469 , "linestyle.lineendarrowlength" ) , new PropName ( 470 , "linestyle.linejoinstyle" ) , new PropName ( 471 , "linestyle.lineendcapstyle" ) , new PropName ( 507 , "linestyle.arrowheadsok" ) , new PropName ( 508 , "linestyle.anyline" ) , new PropName ( 509 , "linestyle.hitlinetest" ) , new PropName ( 510 , "linestyle.linefillshape" ) , new PropName ( 511 , "linestyle.nolinedrawdash" ) , new PropName ( 512 , "shadowstyle.type" ) , new PropName ( 513 , "shadowstyle.color" ) , new PropName ( 514 , "shadowstyle.highlight" ) , new PropName ( 515 , "shadowstyle.crmod" ) , new PropName ( 516 , "shadowstyle.opacity" ) , new PropName ( 517 , "shadowstyle.offsetx" ) , new PropName ( 518 , "shadowstyle.offsety" ) , new PropName ( 519 , "shadowstyle.secondoffsetx" ) , new PropName ( 520 , "shadowstyle.secondoffsety" ) , new PropName ( 521 , "shadowstyle.scalextox" ) , new PropName ( 522 , "shadowstyle.scaleytox" ) , new PropName ( 523 , "shadowstyle.scalextoy" ) , new PropName ( 524 , "shadowstyle.scaleytoy" ) , new PropName ( 525 , "shadowstyle.perspectivex" ) , new PropName ( 526 , "shadowstyle.perspectivey" ) , new PropName ( 527 , "shadowstyle.weight" ) , new PropName ( 528 , "shadowstyle.originx" ) , new PropName ( 529 , "shadowstyle.originy" ) , new PropName ( 574 , "shadowstyle.shadow" ) , new PropName ( 575 , "shadowstyle.shadowobsured" ) , new PropName ( 576 , "perspective.type" ) , new PropName ( 577 , "perspective.offsetx" ) , new PropName ( 578 , "perspective.offsety" ) , new PropName ( 579 , "perspective.scalextox" ) , new PropName ( 580 , "perspective.scaleytox" ) , new PropName ( 581 , "perspective.scalextoy" ) , new PropName ( 582 , "perspective.scaleytox" ) , new PropName ( 583 , "perspective.perspectivex" ) , new PropName ( 584 , "perspective.perspectivey" ) , new PropName ( 585 , "perspective.weight" ) , new PropName ( 586 , "perspective.originx" ) , new PropName ( 587 , "perspective.originy" ) , new PropName ( 639 , "perspective.perspectiveon" ) , new PropName ( 640 , "3d.specularamount" ) , new PropName ( 661 , "3d.diffuseamount" ) , new PropName ( 662 , "3d.shininess" ) , new PropName ( 663 , "3d.edgethickness" ) , new PropName ( 664 , "3d.extrudeforward" ) , new PropName ( 665 , "3d.extrudebackward" ) , new PropName ( 666 , "3d.extrudeplane" ) , new PropName ( 667 , "3d.extrusioncolor" ) , new PropName ( 648 , "3d.crmod" ) , new PropName ( 700 , "3d.3deffect" ) , new PropName ( 701 , "3d.metallic" ) , new PropName ( 702 , "3d.useextrusioncolor" ) , new PropName ( 703 , "3d.lightface" ) , new PropName ( 704 , "3dstyle.yrotationangle" ) , new PropName ( 705 , "3dstyle.xrotationangle" ) , new PropName ( 706 , "3dstyle.rotationaxisx" ) , new PropName ( 707 , "3dstyle.rotationaxisy" ) , new PropName ( 708 , "3dstyle.rotationaxisz" ) , new PropName ( 709 , "3dstyle.rotationangle" ) , new PropName ( 710 , "3dstyle.rotationcenterx" ) , new PropName ( 711 , "3dstyle.rotationcentery" ) , new PropName ( 712 , "3dstyle.rotationcenterz" ) , new PropName ( 713 , "3dstyle.rendermode" ) , new PropName ( 714 , "3dstyle.tolerance" ) , new PropName ( 715 , "3dstyle.xviewpoint" ) , new PropName ( 716 , "3dstyle.yviewpoint" ) , new PropName ( 717 , "3dstyle.zviewpoint" ) , new PropName ( 718 , "3dstyle.originx" ) , new PropName ( 719 , "3dstyle.originy" ) , new PropName ( 720 , "3dstyle.skewangle" ) , new PropName ( 721 , "3dstyle.skewamount" ) , new PropName ( 722 , "3dstyle.ambientintensity" ) , new PropName ( 723 , "3dstyle.keyx" ) , new PropName ( 724 , "3dstyle.keyy" ) , new PropName ( 725 , "3dstyle.keyz" ) , new PropName ( 726 , "3dstyle.keyintensity" ) , new PropName ( 727 , "3dstyle.fillx" ) , new PropName ( 728 , "3dstyle.filly" ) , new PropName ( 729 , "3dstyle.fillz" ) , new PropName ( 730 , "3dstyle.fillintensity" ) , new PropName ( 763 , "3dstyle.constrainrotation" ) , new PropName ( 764 , "3dstyle.rotationcenterauto" ) , new PropName ( 765 , "3dstyle.parallel" ) , new PropName ( 766 , "3dstyle.keyharsh" ) , new PropName ( 767 , "3dstyle.fillharsh" ) , new PropName ( 769 , "shape.master" ) , new PropName ( 771 , "shape.connectorstyle" ) , new PropName ( 772 , "shape.blackandwhitesettings" ) , new PropName ( 773 , "shape.wmodepurebw" ) , new PropName ( 774 , "shape.wmodebw" ) , new PropName ( 826 , "shape.oleicon" ) , new PropName ( 827 , "shape.preferrelativeresize" ) , new PropName ( 828 , "shape.lockshapetype" ) , new PropName ( 830 , "shape.deleteattachedobject" ) , new PropName ( 831 , "shape.backgroundshape" ) , new PropName ( 832 , "callout.callouttype" ) , new PropName ( 833 , "callout.xycalloutgap" ) , new PropName ( 834 , "callout.calloutangle" ) , new PropName ( 835 , "callout.calloutdroptype" ) , new PropName ( 836 , "callout.calloutdropspecified" ) , new PropName ( 837 , "callout.calloutlengthspecified" ) , new PropName ( 889 , "callout.iscallout" ) , new PropName ( 890 , "callout.calloutaccentbar" ) , new PropName ( 891 , "callout.callouttextborder" ) , new PropName ( 892 , "callout.calloutminusx" ) , new PropName ( 893 , "callout.calloutminusy" ) , new PropName ( 894 , "callout.dropauto" ) , new PropName ( 895 , "callout.lengthspecified" ) , new PropName ( 896 , "groupshape.shapename" ) , new PropName ( 897 , "groupshape.description" ) , new PropName ( 898 , "groupshape.hyperlink" ) , new PropName ( 899 , "groupshape.wrappolygonvertices" ) , new PropName ( 900 , "groupshape.wrapdistleft" ) , new PropName ( 901 , "groupshape.wrapdisttop" ) , new PropName ( 902 , "groupshape.wrapdistright" ) , new PropName ( 903 , "groupshape.wrapdistbottom" ) , new PropName ( 904 , "groupshape.regroupid" ) , new PropName ( 953 , "groupshape.editedwrap" ) , new PropName ( 954 , "groupshape.behinddocument" ) , new PropName ( 955 , "groupshape.ondblclicknotify" ) , new PropName ( 956 , "groupshape.isbutton" ) , new PropName ( 957 , "groupshape.1dadjustment" ) , new PropName ( 958 , "groupshape.hidden" ) , new PropName ( 959 , "groupshape.print" ) , } ; for ( int i = 0 ; i < props . length ; i ++ ) { if ( props [ i ] . id == propertyId ) { return props [ i ] . name ; } } return "unknown property" ; } private String getBlipType ( byte b ) { switch ( b ) { case 0 : return " ERROR" ; case 1 : return " UNKNOWN" ; case 2 : return " EMF" ; case 3 : return " WMF" ; case 4 : return " PICT" ; case 5 : return " JPEG" ; case 6 : return " PNG" ; case 7 : return " DIB" ; default : if ( b < 32 ) return " NotKnown" ; else return " Client" ; } } private String dec1616 ( int n32 ) { String result = "" ; result += ( short ) ( n32 > > 16 ) ; result += '.' ; result += ( short ) ( n32 & ( short ) 0xFFFF ) ; return result ; } private void outHex ( int bytes , InputStream in , PrintStream out ) throws IOException , LittleEndian . BufferUnderrunException { switch ( bytes ) { case 1 : out . print ( HexDump . toHex ( ( byte ) in . read ( ) ) ) ; break ; case 2 : out . print ( HexDump . toHex ( LittleEndian . readShort ( in ) ) ) ; break ; case 4 : out . print ( HexDump . toHex ( LittleEndian . readInt ( in ) ) ) ; break ; default : throw new IOException ( "Unable to output variable of that width" ) ; } } public static void main ( String [ ] args ) throws IOException { String dump = "0F 00 00 F0 89 07 00 00 00 00 06 F0 18 00 00 00 " + "05 04 00 00 02 00 00 00 05 00 00 00 01 00 00 00 " + "01 00 00 00 05 00 00 00 4F 00 01 F0 2F 07 00 00 " + "42 00 07 F0 B7 01 00 00 03 04 3F 14 AE 6B 0F 65 " + "B0 48 BF 5E 94 63 80 E8 91 73 FF 00 93 01 00 00 " + "01 00 00 00 00 00 00 00 00 00 FF FF 20 54 1C F0 " + "8B 01 00 00 3F 14 AE 6B 0F 65 B0 48 BF 5E 94 63 " + "80 E8 91 73 92 0E 00 00 00 00 00 00 00 00 00 00 " + "D1 07 00 00 DD 05 00 00 4A AD 6F 00 8A C5 53 00 " + "59 01 00 00 00 FE 78 9C E3 9B C4 00 04 AC 77 D9 " + "2F 32 08 32 FD E7 61 F8 FF 0F C8 FD 05 C5 30 19 " + "10 90 63 90 FA 0F 06 0C 8C 0C 5C 70 19 43 30 EB " + "0E FB 05 86 85 0C DB 18 58 80 72 8C 70 16 0B 83 " + "05 56 51 29 88 C9 60 D9 69 0C 6C 20 26 23 03 C8 " + "74 B0 A8 0E 03 07 FB 45 56 C7 A2 CC C4 1C 06 66 " + "A0 0D 2C 40 39 5E 86 4C 06 3D A0 4E 10 D0 60 D9 " + "C8 58 CC E8 CF B0 80 61 3A 8A 7E 0D C6 23 AC 4F " + "E0 E2 98 B6 12 2B 06 73 9D 12 E3 52 56 59 F6 08 " + "8A CC 52 66 A3 50 FF 96 2B 94 E9 DF 4C A1 FE 2D " + "3A 03 AB 9F 81 C2 F0 A3 54 BF 0F 85 EE A7 54 FF " + "40 FB 7F A0 E3 9F D2 F4 4F 71 FE 19 58 FF 2B 31 " + "7F 67 36 3B 25 4F 99 1B 4E 53 A6 5F 89 25 95 E9 " + "C4 00 C7 83 12 F3 1F 26 35 4A D3 D2 47 0E 0A C3 " + "41 8E C9 8A 52 37 DC 15 A1 D0 0D BC 4C 06 0C 2B " + "28 2C 13 28 D4 EF 43 61 5A A0 58 3F 85 71 E0 4B " + "69 9E 64 65 FE 39 C0 E5 22 30 1D 30 27 0E 74 3A " + "18 60 FD 4A CC B1 2C 13 7D 07 36 2D 2A 31 85 B2 " + "6A 0D 74 1D 1D 22 4D 99 FE 60 0A F5 9B EC 1C 58 " + "FD 67 06 56 3F 38 0D 84 3C A5 30 0E 28 D3 AF C4 " + "A4 CA FA 44 7A 0D 65 6E 60 7F 4D A1 1B 24 58 F7 " + "49 AF A5 CC 0D CC DF 19 FE 03 00 F0 B1 25 4D 42 " + "00 07 F0 E1 01 00 00 03 04 39 50 BE 98 B0 6F 57 " + "24 31 70 5D 23 2F 9F 10 66 FF 00 BD 01 00 00 01 " + "00 00 00 00 00 00 00 00 00 FF FF 20 54 1C F0 B5 " + "01 00 00 39 50 BE 98 B0 6F 57 24 31 70 5D 23 2F " + "9F 10 66 DA 03 00 00 00 00 00 00 00 00 00 00 D1 " + "07 00 00 DD 05 00 00 4A AD 6F 00 8A C5 53 00 83 " + "01 00 00 00 FE 78 9C A5 52 BF 4B 42 51 14 3E F7 " + "DC 77 7A 16 45 48 8B 3C 48 A8 16 15 0D 6C 88 D0 " + "04 C3 40 A3 32 1C 84 96 08 21 04 A1 C5 5C A2 35 " + "82 C0 35 6A AB 1C 6A 6B A8 24 5A 83 68 08 84 84 " + "96 A2 86 A0 7F C2 86 5E E7 5E F5 41 E4 10 BC 03 " + "1F E7 FB F1 CE B9 F7 F1 9E 7C 05 2E 7A 37 9B E0 " + "45 7B 10 EC 6F 96 5F 1D 74 13 55 7E B0 6C 5D 20 " + "60 C0 49 A2 9A BD 99 4F 50 83 1B 30 38 13 0E 33 " + "60 A6 A7 6B B5 37 EB F4 10 FA 14 15 A0 B6 6B 37 " + "0C 1E B3 49 73 5B A5 C2 26 48 3E C1 E0 6C 08 4A " + "30 C9 93 AA 02 B8 20 13 62 05 4E E1 E8 D7 7C C0 " + "B8 14 95 5E BE B8 A7 CF 1E BE 55 2C 56 B9 78 DF " + "08 7E 88 4C 27 FF 7B DB FF 7A DD B7 1A 17 67 34 " + "6A AE BA DA 35 D1 E7 72 BE FE EC 6E FE DA E5 7C " + "3D EC 7A DE 03 FD 50 06 0B 23 F2 0E F3 B2 A5 11 " + "91 0D 4C B5 B5 F3 BF 94 C1 8F 24 F7 D9 6F 60 94 " + "3B C9 9A F3 1C 6B E7 BB F0 2E 49 B2 25 2B C6 B1 " + "EE 69 EE 15 63 4F 71 7D CE 85 CC C8 35 B9 C3 28 " + "28 CE D0 5C 67 79 F2 4A A2 14 23 A4 38 43 73 9D " + "2D 69 2F C1 08 31 9F C5 5C 9B EB 7B C5 69 19 B3 " + "B4 81 F3 DC E3 B4 8E 8B CC B3 94 53 5A E7 41 2A " + "63 9A AA 38 C5 3D 48 BB EC 57 59 6F 2B AD 73 1F " + "1D 60 92 AE 70 8C BB 8F CE 31 C1 3C 49 27 4A EB " + "DC A4 5B 8C D1 0B 0E 73 37 E9 11 A7 99 C7 E8 41 " + "69 B0 7F 00 96 F2 A7 E8 42 00 07 F0 B4 01 00 00 " + "03 04 1A BA F9 D6 A9 B9 3A 03 08 61 E9 90 FF 7B " + "9E E6 FF 00 90 01 00 00 01 00 00 00 00 00 00 00 " + "00 00 FF FF 20 54 1C F0 88 01 00 00 1A BA F9 D6 " + "A9 B9 3A 03 08 61 E9 90 FF 7B 9E E6 12 0E 00 00 " + "00 00 00 00 00 00 00 00 D1 07 00 00 DD 05 00 00 " + "4A AD 6F 00 8A C5 53 00 56 01 00 00 00 FE 78 9C " + "E3 13 62 00 02 D6 BB EC 17 19 04 99 FE F3 30 FC " + "FF 07 E4 FE 82 62 98 0C 08 C8 31 48 FD 07 03 06 " + "46 06 2E B8 8C 21 98 75 87 FD 02 C3 42 86 6D 0C " + "2C 40 39 46 38 8B 85 C1 02 AB A8 14 C4 64 B0 EC " + "34 06 36 10 93 91 01 64 3A 58 54 87 81 83 FD 22 " + "AB 63 51 66 62 0E 03 33 D0 06 16 A0 1C 2F 43 26 " + "83 1E 50 27 08 68 B0 6C 64 2C 66 F4 67 58 C0 30 " + "1D 45 BF 06 E3 11 D6 27 70 71 4C 5B 89 15 83 B9 " + "4E 89 71 29 AB 2C 7B 04 45 66 29 B3 51 A8 7F CB " + "15 CA F4 6F A6 50 FF 16 9D 81 D5 CF 40 61 F8 51 " + "AA DF 87 42 F7 53 AA 7F A0 FD 3F D0 F1 4F 69 FA " + "A7 38 FF 0C AC FF 95 98 BF 33 9B 9D 92 A7 CC 0D " + "A7 29 D3 AF C4 92 CA 74 62 80 E3 41 89 F9 0F 93 " + "1A A5 69 E9 23 07 85 E1 20 C7 64 45 A9 1B EE 8A " + "50 E8 06 5E 26 03 86 15 14 96 09 14 EA F7 A1 30 " + "2D 50 AC 9F C2 38 F0 A5 34 4F B2 32 FF 1C E0 72 " + "11 98 0E 98 13 07 38 1D 28 31 C7 B2 4C F4 1D D8 " + "B4 A0 C4 14 CA AA 35 D0 75 64 88 34 65 FA 83 29 " + "D4 6F B2 73 60 F5 9F A1 54 FF 0E CA D3 40 C8 53 " + "0A E3 E0 09 85 6E 50 65 7D 22 BD 86 32 37 B0 BF " + "A6 D0 0D 12 AC FB A4 D7 52 E6 06 E6 EF 0C FF 01 " + "97 1D 12 C7 42 00 07 F0 C3 01 00 00 03 04 BA 4C " + "B6 23 BA 8B 27 BE C8 55 59 86 24 9F 89 D4 FF 00 " + "9F 01 00 00 01 00 00 00 00 00 00 00 00 00 FF FF " + "20 54 1C F0 97 01 00 00 BA 4C B6 23 BA 8B 27 BE " + "C8 55 59 86 24 9F 89 D4 AE 0E 00 00 00 00 00 00 " + "00 00 00 00 D1 07 00 00 DD 05 00 00 4A AD 6F 00 " + "8A C5 53 00 65 01 00 00 00 FE 78 9C E3 5B C7 00 " + "04 AC 77 D9 2F 32 08 32 FD E7 61 F8 FF 0F C8 FD " + "05 C5 30 19 10 90 63 90 FA 0F 06 0C 8C 0C 5C 70 " + "19 43 30 EB 0E FB 05 86 85 0C DB 18 58 80 72 8C " + "70 16 0B 83 05 56 51 29 88 C9 60 D9 69 0C 6C 20 " + "26 23 03 C8 74 B0 A8 0E 03 07 FB 45 56 C7 A2 CC " + "C4 1C 06 66 A0 0D 2C 40 39 5E 86 4C 06 3D A0 4E " + "10 D0 60 99 C6 B8 98 D1 9F 61 01 C3 74 14 FD 1A " + "8C 2B D8 84 B1 88 4B A5 A5 75 03 01 50 DF 59 46 " + "77 46 0F A8 3C A6 AB 88 15 83 B9 5E 89 B1 8B D5 " + "97 2D 82 22 B3 94 29 D5 BF E5 CA C0 EA DF AC 43 " + "A1 FD 14 EA 67 A0 30 FC 28 D5 EF 43 A1 FB 7D 87 " + "B8 FF 07 3A FE 07 3A FD 53 EA 7E 0A C3 4F 89 F9 " + "0E 73 EA 69 79 CA DC 70 8A 32 FD 4A 2C 5E 4C DF " + "87 7A 3C BC E0 A5 30 1E 3E 31 C5 33 AC A0 30 2F " + "52 A8 DF 87 C2 30 A4 54 3F A5 65 19 85 65 A9 12 " + "D3 2B 16 0D 8A CB 13 4A F3 E3 27 E6 09 03 9D 0E " + "06 58 BF 12 B3 13 CB C1 01 4E 8B 4A 4C 56 AC 91 " + "03 5D 37 86 48 53 A6 3F 98 42 FD 26 3B 07 56 FF " + "99 1D 14 EA A7 CC 7E 70 1A 08 79 42 61 1C 3C A5 " + "D0 0D 9C 6C C2 32 6B 29 73 03 DB 6B CA DC C0 F8 " + "97 F5 AD CC 1A CA DC C0 F4 83 32 37 B0 A4 30 CE " + "FC C7 48 99 1B FE 33 32 FC 07 00 6C CC 2E 23 33 " + "00 0B F0 12 00 00 00 BF 00 08 00 08 00 81 01 09 " + "00 00 08 C0 01 40 00 00 08 40 00 1E F1 10 00 00 " + "00 0D 00 00 08 0C 00 00 08 17 00 00 08 F7 00 00 " + "10                                              " ; byte [ ] bytes = HexRead . readData ( new ByteArrayInputStream ( dump . getBytes ( ) ) , - 1 ) ; EscherDump dumper = new EscherDump ( ) ; dumper . dump ( bytes , 0 , bytes . length , System . out ) ; } public void dump ( int recordSize , byte [ ] data , PrintStream out ) throws IOException , LittleEndian . BufferUnderrunException { dump ( data , 0 , recordSize , System . out ) ; } } 	1
package org . apache . poi . hssf . record ; import org . apache . poi . util . LittleEndian ; import org . apache . poi . util . StringUtil ; public class WriteProtectRecord extends Record { public final static short sid = 0x86 ; public WriteProtectRecord ( ) { } public WriteProtectRecord ( RecordInputStream in ) { super ( in ) ; } protected void validateSid ( short id ) { if ( id != sid ) { throw new RecordFormatException ( "NOT A WRITEPROTECT RECORD" ) ; } } protected void fillFields ( RecordInputStream in ) { } public String toString ( ) { StringBuffer buffer = new StringBuffer ( ) ; buffer . append ( "[WRITEPROTECT]\n" ) ; buffer . append ( "[/WRITEPROTECT]\n" ) ; return buffer . toString ( ) ; } public int serialize ( int offset , byte [ ] data ) { LittleEndian . putShort ( data , 0 + offset , sid ) ; LittleEndian . putShort ( data , 2 + offset , ( short ) 0 ) ; return getRecordSize ( ) ; } public int getRecordSize ( ) { return 4 ; } public short getSid ( ) { return sid ; } } 	1
package org . apache . poi . poifs . storage ; import java . io . * ; import java . util . * ; import org . apache . poi . poifs . common . POIFSConstants ; public class SmallDocumentBlock implements BlockWritable , ListManagedBlock { private byte [ ] _data ; private static final byte _default_fill = ( byte ) 0xff ; private static final int _block_size = 64 ; private static final int _blocks_per_big_block = POIFSConstants . BIG_BLOCK_SIZE / _block_size ; private SmallDocumentBlock ( final byte [ ] data , final int index ) { this ( ) ; System . arraycopy ( data , index * _block_size , _data , 0 , _block_size ) ; } private SmallDocumentBlock ( ) { _data = new byte [ _block_size ] ; } public static SmallDocumentBlock [ ] convert ( final byte [ ] array , final int size ) { SmallDocumentBlock [ ] rval = new SmallDocumentBlock [ ( size + _block_size - 1 ) / _block_size ] ; int offset = 0 ; for ( int k = 0 ; k < rval . length ; k ++ ) { rval [ k ] = new SmallDocumentBlock ( ) ; if ( offset < array . length ) { int length = Math . min ( _block_size , array . length - offset ) ; System . arraycopy ( array , offset , rval [ k ] . _data , 0 , length ) ; if ( length != _block_size ) { Arrays . fill ( rval [ k ] . _data , length , _block_size , _default_fill ) ; } } else { Arrays . fill ( rval [ k ] . _data , _default_fill ) ; } offset += _block_size ; } return rval ; } public static int fill ( final List blocks ) { int count = blocks . size ( ) ; int big_block_count = ( count + _blocks_per_big_block - 1 ) / _blocks_per_big_block ; int full_count = big_block_count * _blocks_per_big_block ; for ( ; count < full_count ; count ++ ) { blocks . add ( makeEmptySmallDocumentBlock ( ) ) ; } return big_block_count ; } public static SmallDocumentBlock [ ] convert ( final BlockWritable [ ] store , final int size ) throws IOException , ArrayIndexOutOfBoundsException { ByteArrayOutputStream stream = new ByteArrayOutputStream ( ) ; for ( int j = 0 ; j < store . length ; j ++ ) { store [ j ] . writeBlocks ( stream ) ; } byte [ ] data = stream . toByteArray ( ) ; SmallDocumentBlock [ ] rval = new SmallDocumentBlock [ convertToBlockCount ( size ) ] ; for ( int index = 0 ; index < rval . length ; index ++ ) { rval [ index ] = new SmallDocumentBlock ( data , index ) ; } return rval ; } public static List extract ( ListManagedBlock [ ] blocks ) throws IOException { List sdbs = new ArrayList ( ) ; for ( int j = 0 ; j < blocks . length ; j ++ ) { byte [ ] data = blocks [ j ] . getData ( ) ; for ( int k = 0 ; k < _blocks_per_big_block ; k ++ ) { sdbs . add ( new SmallDocumentBlock ( data , k ) ) ; } } return sdbs ; } public static void read ( final BlockWritable [ ] blocks , final byte [ ] buffer , final int offset ) { int firstBlockIndex = offset / _block_size ; int firstBlockOffset = offset % _block_size ; int lastBlockIndex = ( offset + buffer . length - 1 ) / _block_size ; if ( firstBlockIndex == lastBlockIndex ) { System . arraycopy ( ( ( SmallDocumentBlock ) blocks [ firstBlockIndex ] ) . _data , firstBlockOffset , buffer , 0 , buffer . length ) ; } else { int buffer_offset = 0 ; System . arraycopy ( ( ( SmallDocumentBlock ) blocks [ firstBlockIndex ] ) . _data , firstBlockOffset , buffer , buffer_offset , _block_size - firstBlockOffset ) ; buffer_offset += _block_size - firstBlockOffset ; for ( int j = firstBlockIndex + 1 ; j < lastBlockIndex ; j ++ ) { System . arraycopy ( ( ( SmallDocumentBlock ) blocks [ j ] ) . _data , 0 , buffer , buffer_offset , _block_size ) ; buffer_offset += _block_size ; } System . arraycopy ( ( ( SmallDocumentBlock ) blocks [ lastBlockIndex ] ) . _data , 0 , buffer , buffer_offset , buffer . length - buffer_offset ) ; } } public static int calcSize ( int size ) { return size * _block_size ; } private static SmallDocumentBlock makeEmptySmallDocumentBlock ( ) { SmallDocumentBlock block = new SmallDocumentBlock ( ) ; Arrays . fill ( block . _data , _default_fill ) ; return block ; } private static int convertToBlockCount ( final int size ) { return ( size + _block_size - 1 ) / _block_size ; } public void writeBlocks ( final OutputStream stream ) throws IOException { stream . write ( _data ) ; } public byte [ ] getData ( ) throws IOException { return _data ; } } 	1
package org . apache . poi . hssf . record ; import org . apache . poi . ddf . DefaultEscherRecordFactory ; import org . apache . poi . ddf . EscherRecord ; import org . apache . poi . ddf . EscherRecordFactory ; import org . apache . poi . ddf . NullEscherSerializationListener ; import org . apache . poi . util . LittleEndian ; import java . util . ArrayList ; import java . util . Iterator ; import java . util . List ; public abstract class AbstractEscherHolderRecord extends Record { private static final boolean DESERIALISE = System . getProperty ( "poi.deserialize.escher" ) != null ; private List escherRecords ; private byte [ ] rawData ; public AbstractEscherHolderRecord ( ) { escherRecords = new ArrayList ( ) ; } public AbstractEscherHolderRecord ( RecordInputStream in ) { super ( in ) ; } protected void validateSid ( short id ) { if ( id != getSid ( ) ) { throw new RecordFormatException ( "Not an escher record" ) ; } } protected void fillFields ( RecordInputStream in ) { escherRecords = new ArrayList ( ) ; if ( ! DESERIALISE ) { rawData = in . readRemainder ( ) ; } else { byte [ ] data = in . readAllContinuedRemainder ( ) ; convertToEscherRecords ( 0 , data . length , data ) ; } } private void convertToEscherRecords ( int offset , int size , byte [ ] data ) { EscherRecordFactory recordFactory = new DefaultEscherRecordFactory ( ) ; int pos = offset ; while ( pos < offset + size ) { EscherRecord r = recordFactory . createRecord ( data , pos ) ; int bytesRead = r . fillFields ( data , pos , recordFactory ) ; escherRecords . add ( r ) ; pos += bytesRead ; } } public String toString ( ) { StringBuffer buffer = new StringBuffer ( ) ; final String nl = System . getProperty ( "line.separator" ) ; buffer . append ( '[' + getRecordName ( ) + ']' + nl ) ; if ( escherRecords . size ( ) == 0 ) buffer . append ( "No Escher Records Decoded" + nl ) ; for ( Iterator iterator = escherRecords . iterator ( ) ; iterator . hasNext ( ) ; ) { EscherRecord r = ( EscherRecord ) iterator . next ( ) ; buffer . append ( r . toString ( ) ) ; } buffer . append ( "[/" + getRecordName ( ) + ']' + nl ) ; return buffer . toString ( ) ; } protected abstract String getRecordName ( ) ; public int serialize ( int offset , byte [ ] data ) { LittleEndian . putShort ( data , 0 + offset , getSid ( ) ) ; LittleEndian . putShort ( data , 2 + offset , ( short ) ( getRecordSize ( ) - 4 ) ) ; if ( escherRecords . size ( ) == 0 && rawData != null ) { LittleEndian . putShort ( data , 0 + offset , getSid ( ) ) ; LittleEndian . putShort ( data , 2 + offset , ( short ) ( getRecordSize ( ) - 4 ) ) ; System . arraycopy ( rawData , 0 , data , 4 + offset , rawData . length ) ; return rawData . length + 4 ; } else { LittleEndian . putShort ( data , 0 + offset , getSid ( ) ) ; LittleEndian . putShort ( data , 2 + offset , ( short ) ( getRecordSize ( ) - 4 ) ) ; int pos = offset + 4 ; for ( Iterator iterator = escherRecords . iterator ( ) ; iterator . hasNext ( ) ; ) { EscherRecord r = ( EscherRecord ) iterator . next ( ) ; pos += r . serialize ( pos , data , new NullEscherSerializationListener ( ) ) ; } } return getRecordSize ( ) ; } public int getRecordSize ( ) { if ( escherRecords . size ( ) == 0 && rawData != null ) { return rawData . length + 4 ; } else { int size = 4 ; for ( Iterator iterator = escherRecords . iterator ( ) ; iterator . hasNext ( ) ; ) { EscherRecord r = ( EscherRecord ) iterator . next ( ) ; size += r . getRecordSize ( ) ; } return size ; } } public abstract short getSid ( ) ; public Object clone ( ) { throw new IllegalStateException ( "Not implemented yet." ) ; } public void addEscherRecord ( int index , EscherRecord element ) { escherRecords . add ( index , element ) ; } public boolean addEscherRecord ( EscherRecord element ) { return escherRecords . add ( element ) ; } public List getEscherRecords ( ) { return escherRecords ; } public void clearEscherRecords ( ) { escherRecords . clear ( ) ; } public EscherRecord getEscherRecord ( int index ) { return ( EscherRecord ) escherRecords . get ( index ) ; } public void join ( AbstractEscherHolderRecord record ) { int length = this . rawData . length + record . getRawData ( ) . length ; byte [ ] data = new byte [ length ] ; System . arraycopy ( rawData , 0 , data , 0 , rawData . length ) ; System . arraycopy ( record . getRawData ( ) , 0 , data , rawData . length , record . getRawData ( ) . length ) ; rawData = data ; } public void processContinueRecord ( byte [ ] record ) { int length = this . rawData . length + record . length ; byte [ ] data = new byte [ length ] ; System . arraycopy ( rawData , 0 , data , 0 , rawData . length ) ; System . arraycopy ( record , 0 , data , rawData . length , record . length ) ; rawData = data ; } public byte [ ] getRawData ( ) { return rawData ; } public void setRawData ( byte [ ] rawData ) { this . rawData = rawData ; } public void decode ( ) { convertToEscherRecords ( 0 , rawData . length , rawData ) ; } } 	1
package org . apache . poi . ddf ; import org . apache . poi . util . HexDump ; import org . apache . poi . util . LittleEndian ; import java . io . ByteArrayOutputStream ; public class EscherBitmapBlip extends EscherBlipRecord { public static final short RECORD_ID_JPEG = ( short ) 0xF018 + 5 ; public static final short RECORD_ID_PNG = ( short ) 0xF018 + 6 ; public static final short RECORD_ID_DIB = ( short ) 0xF018 + 7 ; private static final int HEADER_SIZE = 8 ; private byte [ ] field_1_UID ; private byte field_2_marker = ( byte ) 0xFF ; public int fillFields ( byte [ ] data , int offset , EscherRecordFactory recordFactory ) { int bytesAfterHeader = readHeader ( data , offset ) ; int pos = offset + HEADER_SIZE ; field_1_UID = new byte [ 16 ] ; System . arraycopy ( data , pos , field_1_UID , 0 , 16 ) ; pos += 16 ; field_2_marker = data [ pos ] ; pos ++ ; field_pictureData = new byte [ bytesAfterHeader - 17 ] ; System . arraycopy ( data , pos , field_pictureData , 0 , field_pictureData . length ) ; return bytesAfterHeader + HEADER_SIZE ; } public int serialize ( int offset , byte [ ] data , EscherSerializationListener listener ) { listener . beforeRecordSerialize ( offset , getRecordId ( ) , this ) ; LittleEndian . putShort ( data , offset , getOptions ( ) ) ; LittleEndian . putShort ( data , offset + 2 , getRecordId ( ) ) ; LittleEndian . putInt ( data , offset + 4 , getRecordSize ( ) - HEADER_SIZE ) ; int pos = offset + HEADER_SIZE ; System . arraycopy ( field_1_UID , 0 , data , pos , 16 ) ; data [ pos + 16 ] = field_2_marker ; System . arraycopy ( field_pictureData , 0 , data , pos + 17 , field_pictureData . length ) ; listener . afterRecordSerialize ( offset + getRecordSize ( ) , getRecordId ( ) , getRecordSize ( ) , this ) ; return HEADER_SIZE + 16 + 1 + field_pictureData . length ; } public int getRecordSize ( ) { return 8 + 16 + 1 + field_pictureData . length ; } public byte [ ] getUID ( ) { return field_1_UID ; } public void setUID ( byte [ ] field_1_UID ) { this . field_1_UID = field_1_UID ; } public byte getMarker ( ) { return field_2_marker ; } public void setMarker ( byte field_2_marker ) { this . field_2_marker = field_2_marker ; } public byte [ ] getPicturedata ( ) { return field_pictureData ; } public void setPictureData ( byte [ ] pictureData ) { field_pictureData = pictureData ; } public String toString ( ) { String nl = System . getProperty ( "line.separator" ) ; String extraData ; ByteArrayOutputStream b = new ByteArrayOutputStream ( ) ; try { HexDump . dump ( this . field_pictureData , 0 , b , 0 ) ; extraData = b . toString ( ) ; } catch ( Exception e ) { extraData = e . toString ( ) ; } return getClass ( ) . getName ( ) + ":" + nl + "  RecordId: 0x" + HexDump . toHex ( getRecordId ( ) ) + nl + "  Options: 0x" + HexDump . toHex ( getOptions ( ) ) + nl + "  UID: 0x" + HexDump . toHex ( field_1_UID ) + nl + "  Marker: 0x" + HexDump . toHex ( field_2_marker ) + nl + "  Extra Data:" + nl + extraData ; } } 	1
package org . apache . poi . hssf . record ; import org . apache . poi . util . LittleEndian ; import java . util . ArrayList ; public class ExternSheetRecord extends Record { public final static short sid = 0x17 ; private short field_1_number_of_REF_sturcutres ; private ArrayList field_2_REF_structures ; public ExternSheetRecord ( ) { field_2_REF_structures = new ArrayList ( ) ; } public ExternSheetRecord ( RecordInputStream in ) { super ( in ) ; } protected void validateSid ( short id ) { if ( id != sid ) { throw new RecordFormatException ( "NOT An ExternSheet RECORD" ) ; } } protected void fillFields ( RecordInputStream in ) { field_2_REF_structures = new ArrayList ( ) ; field_1_number_of_REF_sturcutres = in . readShort ( ) ; for ( int i = 0 ; i < field_1_number_of_REF_sturcutres ; ++ i ) { ExternSheetSubRecord rec = new ExternSheetSubRecord ( in ) ; field_2_REF_structures . add ( rec ) ; } } public void setNumOfREFStructures ( short numStruct ) { field_1_number_of_REF_sturcutres = numStruct ; } public short getNumOfREFStructures ( ) { return field_1_number_of_REF_sturcutres ; } public void addREFRecord ( ExternSheetSubRecord rec ) { field_2_REF_structures . add ( rec ) ; } public int getNumOfREFRecords ( ) { return field_2_REF_structures . size ( ) ; } public ExternSheetSubRecord getREFRecordAt ( int elem ) { ExternSheetSubRecord result = ( ExternSheetSubRecord ) field_2_REF_structures . get ( elem ) ; return result ; } public String toString ( ) { StringBuffer buffer = new StringBuffer ( ) ; buffer . append ( "[EXTERNSHEET]\n" ) ; buffer . append ( "   numOfRefs     = " ) . append ( getNumOfREFStructures ( ) ) . append ( "\n" ) ; for ( int k = 0 ; k < this . getNumOfREFRecords ( ) ; k ++ ) { buffer . append ( "refrec         #" ) . append ( k ) . append ( '\n' ) ; buffer . append ( getREFRecordAt ( k ) . toString ( ) ) ; buffer . append ( "----refrec     #" ) . append ( k ) . append ( '\n' ) ; } buffer . append ( "[/EXTERNSHEET]\n" ) ; return buffer . toString ( ) ; } public int serialize ( int offset , byte [ ] data ) { LittleEndian . putShort ( data , 0 + offset , sid ) ; LittleEndian . putShort ( data , 2 + offset , ( short ) ( 2 + ( getNumOfREFRecords ( ) * 6 ) ) ) ; LittleEndian . putShort ( data , 4 + offset , getNumOfREFStructures ( ) ) ; int pos = 6 ; for ( int k = 0 ; k < getNumOfREFRecords ( ) ; k ++ ) { ExternSheetSubRecord record = getREFRecordAt ( k ) ; System . arraycopy ( record . serialize ( ) , 0 , data , pos + offset , 6 ) ; pos += 6 ; } return getRecordSize ( ) ; } public int getRecordSize ( ) { return 4 + 2 + getNumOfREFRecords ( ) * 6 ; } public short getSid ( ) { return sid ; } } 	1
package org . apache . poi . util ; import java . io . * ; import java . text . DecimalFormat ; public class HexDump { public static final String EOL = System . getProperty ( "line.separator" ) ; private static final char _hexcodes [ ] = { '0' , '1' , '2' , '3' , '4' , '5' , '6' , '7' , '8' , '9' , 'A' , 'B' , 'C' , 'D' , 'E' , 'F' } ; private static final int _shifts [ ] = { 60 , 56 , 52 , 48 , 44 , 40 , 36 , 32 , 28 , 24 , 20 , 16 , 12 , 8 , 4 , 0 } ; private HexDump ( ) { } public synchronized static void dump ( final byte [ ] data , final long offset , final OutputStream stream , final int index , final int length ) throws IOException , ArrayIndexOutOfBoundsException , IllegalArgumentException { if ( data . length == 0 ) { stream . write ( ( "No Data" + System . getProperty ( "line.separator" ) ) . getBytes ( ) ) ; stream . flush ( ) ; return ; } if ( ( index < 0 ) || ( index >= data . length ) ) { throw new ArrayIndexOutOfBoundsException ( "illegal index: " + index + " into array of length " + data . length ) ; } if ( stream == null ) { throw new IllegalArgumentException ( "cannot write to nullstream" ) ; } long display_offset = offset + index ; StringBuffer buffer = new StringBuffer ( 74 ) ; int data_length = Math . min ( data . length , index + length ) ; for ( int j = index ; j < data_length ; j += 16 ) { int chars_read = data_length - j ; if ( chars_read > 16 ) { chars_read = 16 ; } buffer . append ( dump ( display_offset ) ) . append ( ' ' ) ; for ( int k = 0 ; k < 16 ; k ++ ) { if ( k < chars_read ) { buffer . append ( dump ( data [ k + j ] ) ) ; } else { buffer . append ( "  " ) ; } buffer . append ( ' ' ) ; } for ( int k = 0 ; k < chars_read ; k ++ ) { if ( ( data [ k + j ] >= ' ' ) && ( data [ k + j ] < 127 ) ) { buffer . append ( ( char ) data [ k + j ] ) ; } else { buffer . append ( '.' ) ; } } buffer . append ( EOL ) ; stream . write ( buffer . toString ( ) . getBytes ( ) ) ; stream . flush ( ) ; buffer . setLength ( 0 ) ; display_offset += chars_read ; } } public synchronized static void dump ( final byte [ ] data , final long offset , final OutputStream stream , final int index ) throws IOException , ArrayIndexOutOfBoundsException , IllegalArgumentException { dump ( data , offset , stream , index , data . length - index ) ; } public static String dump ( final byte [ ] data , final long offset , final int index ) { StringBuffer buffer ; if ( ( index < 0 ) || ( index >= data . length ) ) { throw new ArrayIndexOutOfBoundsException ( "illegal index: " + index + " into array of length " + data . length ) ; } long display_offset = offset + index ; buffer = new StringBuffer ( 74 ) ; for ( int j = index ; j < data . length ; j += 16 ) { int chars_read = data . length - j ; if ( chars_read > 16 ) { chars_read = 16 ; } buffer . append ( dump ( display_offset ) ) . append ( ' ' ) ; for ( int k = 0 ; k < 16 ; k ++ ) { if ( k < chars_read ) { buffer . append ( dump ( data [ k + j ] ) ) ; } else { buffer . append ( "  " ) ; } buffer . append ( ' ' ) ; } for ( int k = 0 ; k < chars_read ; k ++ ) { if ( ( data [ k + j ] >= ' ' ) && ( data [ k + j ] < 127 ) ) { buffer . append ( ( char ) data [ k + j ] ) ; } else { buffer . append ( '.' ) ; } } buffer . append ( EOL ) ; display_offset += chars_read ; } return buffer . toString ( ) ; } private static String dump ( final long value ) { StringBuffer buf = new StringBuffer ( ) ; buf . setLength ( 0 ) ; for ( int j = 0 ; j < 8 ; j ++ ) { buf . append ( _hexcodes [ ( ( int ) ( value > > _shifts [ j + _shifts . length - 8 ] ) ) & 15 ] ) ; } return buf . toString ( ) ; } private static String dump ( final byte value ) { StringBuffer buf = new StringBuffer ( ) ; buf . setLength ( 0 ) ; for ( int j = 0 ; j < 2 ; j ++ ) { buf . append ( _hexcodes [ ( value > > _shifts [ j + 6 ] ) & 15 ] ) ; } return buf . toString ( ) ; } public static String toHex ( final byte [ ] value ) { StringBuffer retVal = new StringBuffer ( ) ; retVal . append ( '[' ) ; for ( int x = 0 ; x < value . length ; x ++ ) { retVal . append ( toHex ( value [ x ] ) ) ; retVal . append ( ", " ) ; } retVal . append ( ']' ) ; return retVal . toString ( ) ; } public static String toHex ( final byte [ ] value , final int bytesPerLine ) { final int digits = ( int ) Math . round ( Math . log ( value . length ) / Math . log ( 10 ) + 0.5 ) ; final StringBuffer formatString = new StringBuffer ( ) ; for ( int i = 0 ; i < digits ; i ++ ) formatString . append ( '0' ) ; formatString . append ( ": " ) ; final DecimalFormat format = new DecimalFormat ( formatString . toString ( ) ) ; StringBuffer retVal = new StringBuffer ( ) ; retVal . append ( format . format ( 0 ) ) ; int i = - 1 ; for ( int x = 0 ; x < value . length ; x ++ ) { if ( ++ i == bytesPerLine ) { retVal . append ( '\n' ) ; retVal . append ( format . format ( x ) ) ; i = 0 ; } retVal . append ( toHex ( value [ x ] ) ) ; retVal . append ( ", " ) ; } return retVal . toString ( ) ; } public static String toHex ( final short value ) { return toHex ( value , 4 ) ; } public static String toHex ( final byte value ) { return toHex ( value , 2 ) ; } public static String toHex ( final int value ) { return toHex ( value , 8 ) ; } public static String toHex ( final long value ) { return toHex ( value , 16 ) ; } private static String toHex ( final long value , final int digits ) { StringBuffer result = new StringBuffer ( digits ) ; for ( int j = 0 ; j < digits ; j ++ ) { result . append ( _hexcodes [ ( int ) ( ( value > > _shifts [ j + ( 16 - digits ) ] ) & 15 ) ] ) ; } return result . toString ( ) ; } public static void dump ( InputStream in , PrintStream out , int start , int bytesToDump ) throws IOException { ByteArrayOutputStream buf = new ByteArrayOutputStream ( ) ; if ( bytesToDump == - 1 ) { int c = in . read ( ) ; while ( c != - 1 ) { buf . write ( c ) ; c = in . read ( ) ; } } else { int bytesRemaining = bytesToDump ; while ( bytesRemaining -- > 0 ) { int c = in . read ( ) ; if ( c == - 1 ) break ; else buf . write ( c ) ; } } byte [ ] data = buf . toByteArray ( ) ; dump ( data , 0 , out , start , data . length ) ; } public static void main ( String [ ] args ) throws Exception { File file = new File ( args [ 0 ] ) ; InputStream in = new BufferedInputStream ( new FileInputStream ( file ) ) ; byte [ ] b = new byte [ ( int ) file . length ( ) ] ; in . read ( b ) ; System . out . println ( HexDump . dump ( b , 0 , 0 ) ) ; in . close ( ) ; } } 	1
package org . apache . poi . hssf . record ; import org . apache . poi . util . LittleEndian ; public class DrawingRecord extends Record { public static final short sid = 0xEC ; private byte [ ] recordData ; public DrawingRecord ( ) { } public DrawingRecord ( RecordInputStream in ) { super ( in ) ; } protected void validateSid ( short id ) { if ( id != sid ) { throw new RecordFormatException ( "Not a MSODRAWING record" ) ; } } protected void fillFields ( RecordInputStream in ) { recordData = in . readRemainder ( ) ; } public void processContinueRecord ( byte [ ] record ) { byte [ ] newBuffer = new byte [ recordData . length + record . length ] ; System . arraycopy ( recordData , 0 , newBuffer , 0 , recordData . length ) ; System . arraycopy ( record , 0 , newBuffer , recordData . length , record . length ) ; recordData = newBuffer ; } public int serialize ( int offset , byte [ ] data ) { if ( recordData == null ) { recordData = new byte [ 0 ] ; } LittleEndian . putShort ( data , 0 + offset , sid ) ; LittleEndian . putShort ( data , 2 + offset , ( short ) ( recordData . length ) ) ; if ( recordData . length > 0 ) { System . arraycopy ( recordData , 0 , data , 4 + offset , recordData . length ) ; } return getRecordSize ( ) ; } public int getRecordSize ( ) { int retval = 4 ; if ( recordData != null ) { retval += recordData . length ; } return retval ; } public short getSid ( ) { return sid ; } public byte [ ] getData ( ) { return recordData ; } public void setData ( byte [ ] thedata ) { this . recordData = thedata ; } } 	1
package org . apache . poi . hssf . record ; public class MulBlankRecord extends Record { public final static short sid = 0xbe ; private int field_1_row ; private short field_2_first_col ; private short [ ] field_3_xfs ; private short field_4_last_col ; public MulBlankRecord ( ) { } public MulBlankRecord ( RecordInputStream in ) { super ( in ) ; } public int getRow ( ) { return field_1_row ; } public short getFirstColumn ( ) { return field_2_first_col ; } public short getLastColumn ( ) { return field_4_last_col ; } public int getNumColumns ( ) { return field_4_last_col - field_2_first_col + 1 ; } public short getXFAt ( int coffset ) { return field_3_xfs [ coffset ] ; } protected void fillFields ( RecordInputStream in ) { field_1_row = in . readUShort ( ) ; field_2_first_col = in . readShort ( ) ; field_3_xfs = parseXFs ( in ) ; field_4_last_col = in . readShort ( ) ; } private short [ ] parseXFs ( RecordInputStream in ) { short [ ] retval = new short [ ( in . remaining ( ) - 2 ) / 2 ] ; for ( int idx = 0 ; idx < retval . length ; idx ++ ) { retval [ idx ] = in . readShort ( ) ; } return retval ; } public String toString ( ) { StringBuffer buffer = new StringBuffer ( ) ; buffer . append ( "[MULBLANK]\n" ) ; buffer . append ( "row  = " ) . append ( Integer . toHexString ( getRow ( ) ) ) . append ( "\n" ) ; buffer . append ( "firstcol  = " ) . append ( Integer . toHexString ( getFirstColumn ( ) ) ) . append ( "\n" ) ; buffer . append ( " lastcol  = " ) . append ( Integer . toHexString ( getLastColumn ( ) ) ) . append ( "\n" ) ; for ( int k = 0 ; k < getNumColumns ( ) ; k ++ ) { buffer . append ( "xf" ) . append ( k ) . append ( "        = " ) . append ( Integer . toHexString ( getXFAt ( k ) ) ) . append ( "\n" ) ; } buffer . append ( "[/MULBLANK]\n" ) ; return buffer . toString ( ) ; } protected void validateSid ( short id ) { if ( id != sid ) { throw new RecordFormatException ( "Not a MulBlankRecord!" ) ; } } public short getSid ( ) { return sid ; } public int serialize ( int offset , byte [ ] data ) { throw new RecordFormatException ( "Sorry, you can't serialize a MulBlank in this release" ) ; } } 	1
package org . apache . poi . hssf . usermodel ; import java . util . * ; import java . awt . * ; import java . io . * ; class StaticFontMetrics { private static Properties fontMetricsProps ; private static Map fontDetailsMap = new HashMap ( ) ; public static FontDetails getFontDetails ( Font font ) { if ( fontMetricsProps == null ) { InputStream metricsIn = null ; try { fontMetricsProps = new Properties ( ) ; if ( System . getProperty ( "font.metrics.filename" ) != null ) { String filename = System . getProperty ( "font.metrics.filename" ) ; File file = new File ( filename ) ; if ( ! file . exists ( ) ) throw new FileNotFoundException ( "font_metrics.properties not found at path " + file . getAbsolutePath ( ) ) ; metricsIn = new FileInputStream ( file ) ; } else { metricsIn = FontDetails . class . getResourceAsStream ( "/font_metrics.properties" ) ; if ( metricsIn == null ) throw new FileNotFoundException ( "font_metrics.properties not found in classpath" ) ; } fontMetricsProps . load ( metricsIn ) ; } catch ( IOException e ) { throw new RuntimeException ( "Could not load font metrics: " + e . getMessage ( ) ) ; } finally { if ( metricsIn != null ) { try { metricsIn . close ( ) ; } catch ( IOException ignore ) { } } } } String fontName = font . getName ( ) ; if ( fontDetailsMap . get ( fontName ) == null ) { FontDetails fontDetails = FontDetails . create ( fontName , fontMetricsProps ) ; fontDetailsMap . put ( fontName , fontDetails ) ; return fontDetails ; } else { return ( FontDetails ) fontDetailsMap . get ( fontName ) ; } } } 	1
package org . apache . poi . ddf ; import org . apache . poi . util . HexDump ; import org . apache . poi . util . LittleEndian ; import java . io . ByteArrayOutputStream ; public class EscherClientAnchorRecord extends EscherRecord { public static final short RECORD_ID = ( short ) 0xF010 ; public static final String RECORD_DESCRIPTION = "MsofbtClientAnchor" ; private short field_1_flag ; private short field_2_col1 ; private short field_3_dx1 ; private short field_4_row1 ; private short field_5_dy1 ; private short field_6_col2 ; private short field_7_dx2 ; private short field_8_row2 ; private short field_9_dy2 ; private byte [ ] remainingData ; private boolean shortRecord = false ; public int fillFields ( byte [ ] data , int offset , EscherRecordFactory recordFactory ) { int bytesRemaining = readHeader ( data , offset ) ; int pos = offset + 8 ; int size = 0 ; field_1_flag = LittleEndian . getShort ( data , pos + size ) ; size += 2 ; field_2_col1 = LittleEndian . getShort ( data , pos + size ) ; size += 2 ; field_3_dx1 = LittleEndian . getShort ( data , pos + size ) ; size += 2 ; field_4_row1 = LittleEndian . getShort ( data , pos + size ) ; size += 2 ; if ( bytesRemaining >= 18 ) { field_5_dy1 = LittleEndian . getShort ( data , pos + size ) ; size += 2 ; field_6_col2 = LittleEndian . getShort ( data , pos + size ) ; size += 2 ; field_7_dx2 = LittleEndian . getShort ( data , pos + size ) ; size += 2 ; field_8_row2 = LittleEndian . getShort ( data , pos + size ) ; size += 2 ; field_9_dy2 = LittleEndian . getShort ( data , pos + size ) ; size += 2 ; shortRecord = false ; } else { shortRecord = true ; } bytesRemaining -= size ; remainingData = new byte [ bytesRemaining ] ; System . arraycopy ( data , pos + size , remainingData , 0 , bytesRemaining ) ; return 8 + size + bytesRemaining ; } public int serialize ( int offset , byte [ ] data , EscherSerializationListener listener ) { listener . beforeRecordSerialize ( offset , getRecordId ( ) , this ) ; if ( remainingData == null ) remainingData = new byte [ 0 ] ; LittleEndian . putShort ( data , offset , getOptions ( ) ) ; LittleEndian . putShort ( data , offset + 2 , getRecordId ( ) ) ; int remainingBytes = remainingData . length + ( shortRecord ? 8 : 18 ) ; LittleEndian . putInt ( data , offset + 4 , remainingBytes ) ; LittleEndian . putShort ( data , offset + 8 , field_1_flag ) ; LittleEndian . putShort ( data , offset + 10 , field_2_col1 ) ; LittleEndian . putShort ( data , offset + 12 , field_3_dx1 ) ; LittleEndian . putShort ( data , offset + 14 , field_4_row1 ) ; if ( ! shortRecord ) { LittleEndian . putShort ( data , offset + 16 , field_5_dy1 ) ; LittleEndian . putShort ( data , offset + 18 , field_6_col2 ) ; LittleEndian . putShort ( data , offset + 20 , field_7_dx2 ) ; LittleEndian . putShort ( data , offset + 22 , field_8_row2 ) ; LittleEndian . putShort ( data , offset + 24 , field_9_dy2 ) ; } System . arraycopy ( remainingData , 0 , data , offset + ( shortRecord ? 16 : 26 ) , remainingData . length ) ; int pos = offset + 8 + ( shortRecord ? 8 : 18 ) + remainingData . length ; listener . afterRecordSerialize ( pos , getRecordId ( ) , pos - offset , this ) ; return pos - offset ; } public int getRecordSize ( ) { return 8 + ( shortRecord ? 8 : 18 ) + ( remainingData == null ? 0 : remainingData . length ) ; } public short getRecordId ( ) { return RECORD_ID ; } public String getRecordName ( ) { return "ClientAnchor" ; } public String toString ( ) { String nl = System . getProperty ( "line.separator" ) ; String extraData ; ByteArrayOutputStream b = new ByteArrayOutputStream ( ) ; try { HexDump . dump ( this . remainingData , 0 , b , 0 ) ; extraData = b . toString ( ) ; } catch ( Exception e ) { extraData = "error\n" ; } return getClass ( ) . getName ( ) + ":" + nl + "  RecordId: 0x" + HexDump . toHex ( RECORD_ID ) + nl + "  Options: 0x" + HexDump . toHex ( getOptions ( ) ) + nl + "  Flag: " + field_1_flag + nl + "  Col1: " + field_2_col1 + nl + "  DX1: " + field_3_dx1 + nl + "  Row1: " + field_4_row1 + nl + "  DY1: " + field_5_dy1 + nl + "  Col2: " + field_6_col2 + nl + "  DX2: " + field_7_dx2 + nl + "  Row2: " + field_8_row2 + nl + "  DY2: " + field_9_dy2 + nl + "  Extra Data:" + nl + extraData ; } public short getFlag ( ) { return field_1_flag ; } public void setFlag ( short field_1_flag ) { this . field_1_flag = field_1_flag ; } public short getCol1 ( ) { return field_2_col1 ; } public void setCol1 ( short field_2_col1 ) { this . field_2_col1 = field_2_col1 ; } public short getDx1 ( ) { return field_3_dx1 ; } public void setDx1 ( short field_3_dx1 ) { this . field_3_dx1 = field_3_dx1 ; } public short getRow1 ( ) { return field_4_row1 ; } public void setRow1 ( short field_4_row1 ) { this . field_4_row1 = field_4_row1 ; } public short getDy1 ( ) { return field_5_dy1 ; } public void setDy1 ( short field_5_dy1 ) { shortRecord = false ; this . field_5_dy1 = field_5_dy1 ; } public short getCol2 ( ) { return field_6_col2 ; } public void setCol2 ( short field_6_col2 ) { shortRecord = false ; this . field_6_col2 = field_6_col2 ; } public short getDx2 ( ) { return field_7_dx2 ; } public void setDx2 ( short field_7_dx2 ) { shortRecord = false ; this . field_7_dx2 = field_7_dx2 ; } public short getRow2 ( ) { return field_8_row2 ; } public void setRow2 ( short field_8_row2 ) { shortRecord = false ; this . field_8_row2 = field_8_row2 ; } public short getDy2 ( ) { return field_9_dy2 ; } public void setDy2 ( short field_9_dy2 ) { shortRecord = false ; this . field_9_dy2 = field_9_dy2 ; } public byte [ ] getRemainingData ( ) { return remainingData ; } public void setRemainingData ( byte [ ] remainingData ) { this . remainingData = remainingData ; } } 	1
package org . apache . poi . hssf . usermodel ; import org . apache . poi . hssf . record . EscherAggregate ; import org . apache . poi . hssf . record . NoteRecord ; import org . apache . poi . hssf . record . TextObjectRecord ; import org . apache . poi . ddf . * ; import java . util . Map ; import java . util . List ; import java . util . Iterator ; public class HSSFComment extends HSSFTextbox { private boolean visible ; private short col , row ; private String author ; private NoteRecord note = null ; private TextObjectRecord txo = null ; public HSSFComment ( HSSFShape parent , HSSFAnchor anchor ) { super ( parent , anchor ) ; setShapeType ( OBJECT_TYPE_COMMENT ) ; fillColor = 0x08000050 ; visible = false ; author = "" ; } protected HSSFComment ( NoteRecord note , TextObjectRecord txo ) { this ( ( HSSFShape ) null , ( HSSFAnchor ) null ) ; this . txo = txo ; this . note = note ; } public void setVisible ( boolean visible ) { if ( note != null ) note . setFlags ( visible ? NoteRecord . NOTE_VISIBLE : NoteRecord . NOTE_HIDDEN ) ; this . visible = visible ; } public boolean isVisible ( ) { return this . visible ; } public int getRow ( ) { return row ; } public void setRow ( int row ) { if ( note != null ) note . setRow ( ( short ) row ) ; this . row = ( short ) row ; } public short getColumn ( ) { return col ; } public void setColumn ( short col ) { if ( note != null ) note . setColumn ( col ) ; this . col = col ; } public String getAuthor ( ) { return author ; } public void setAuthor ( String author ) { if ( note != null ) note . setAuthor ( author ) ; this . author = author ; } public void setString ( HSSFRichTextString string ) { if ( string . numFormattingRuns ( ) == 0 ) string . applyFont ( ( short ) 0 ) ; if ( txo != null ) { int frLength = ( string . numFormattingRuns ( ) + 1 ) * 8 ; txo . setFormattingRunLength ( ( short ) frLength ) ; txo . setTextLength ( ( short ) string . length ( ) ) ; txo . setStr ( string ) ; } super . setString ( string ) ; } } 	1
package org . apache . poi . hssf . record ; import org . apache . poi . hssf . util . RKUtil ; public class RKRecord extends Record implements CellValueRecordInterface { public final static short sid = 0x27e ; public final static short RK_IEEE_NUMBER = 0 ; public final static short RK_IEEE_NUMBER_TIMES_100 = 1 ; public final static short RK_INTEGER = 2 ; public final static short RK_INTEGER_TIMES_100 = 3 ; private int field_1_row ; private short field_2_col ; private short field_3_xf_index ; private int field_4_rk_number ; public RKRecord ( ) { } public RKRecord ( RecordInputStream in ) { super ( in ) ; } protected void validateSid ( short id ) { if ( id != sid ) { throw new RecordFormatException ( "NOT A valid RK RECORD" ) ; } } protected void fillFields ( RecordInputStream in ) { field_1_row = in . readUShort ( ) ; field_2_col = in . readShort ( ) ; field_3_xf_index = in . readShort ( ) ; field_4_rk_number = in . readInt ( ) ; } public int getRow ( ) { return field_1_row ; } public short getColumn ( ) { return field_2_col ; } public short getXFIndex ( ) { return field_3_xf_index ; } public int getRKField ( ) { return field_4_rk_number ; } public short getRKType ( ) { return ( short ) ( field_4_rk_number & 3 ) ; } public double getRKNumber ( ) { return RKUtil . decodeNumber ( field_4_rk_number ) ; } public String toString ( ) { StringBuffer buffer = new StringBuffer ( ) ; buffer . append ( "[RK]\n" ) ; buffer . append ( "    .row            = " ) . append ( Integer . toHexString ( getRow ( ) ) ) . append ( "\n" ) ; buffer . append ( "    .col            = " ) . append ( Integer . toHexString ( getColumn ( ) ) ) . append ( "\n" ) ; buffer . append ( "    .xfindex        = " ) . append ( Integer . toHexString ( getXFIndex ( ) ) ) . append ( "\n" ) ; buffer . append ( "    .rknumber       = " ) . append ( Integer . toHexString ( getRKField ( ) ) ) . append ( "\n" ) ; buffer . append ( "        .rktype     = " ) . append ( Integer . toHexString ( getRKType ( ) ) ) . append ( "\n" ) ; buffer . append ( "        .rknumber   = " ) . append ( getRKNumber ( ) ) . append ( "\n" ) ; buffer . append ( "[/RK]\n" ) ; return buffer . toString ( ) ; } public int serialize ( int offset , byte [ ] data ) { NumberRecord rec = new NumberRecord ( ) ; rec . setColumn ( getColumn ( ) ) ; rec . setRow ( getRow ( ) ) ; rec . setValue ( getRKNumber ( ) ) ; rec . setXFIndex ( getXFIndex ( ) ) ; return rec . serialize ( offset , data ) ; } public static void main ( String ignored_args [ ] ) { int [ ] values = { 0x3FF00000 , 0x405EC001 , 0x02F1853A , 0x02F1853B , 0xFCDD699A } ; double [ ] rvalues = { 1 , 1.23 , 12345678 , 123456.78 , - 13149594 } ; for ( int j = 0 ; j < values . length ; j ++ ) { System . out . println ( "input = " + Integer . toHexString ( values [ j ] ) + " -> " + rvalues [ j ] + ": " + RKUtil . decodeNumber ( values [ j ] ) ) ; } } public short getSid ( ) { return sid ; } public boolean isBefore ( CellValueRecordInterface i ) { if ( this . getRow ( ) > i . getRow ( ) ) { return false ; } if ( ( this . getRow ( ) == i . getRow ( ) ) && ( this . getColumn ( ) > i . getColumn ( ) ) ) { return false ; } if ( ( this . getRow ( ) == i . getRow ( ) ) && ( this . getColumn ( ) == i . getColumn ( ) ) ) { return false ; } return true ; } public boolean isAfter ( CellValueRecordInterface i ) { if ( this . getRow ( ) < i . getRow ( ) ) { return false ; } if ( ( this . getRow ( ) == i . getRow ( ) ) && ( this . getColumn ( ) < i . getColumn ( ) ) ) { return false ; } if ( ( this . getRow ( ) == i . getRow ( ) ) && ( this . getColumn ( ) == i . getColumn ( ) ) ) { return false ; } return true ; } public boolean isEqual ( CellValueRecordInterface i ) { return ( ( this . getRow ( ) == i . getRow ( ) ) && ( this . getColumn ( ) == i . getColumn ( ) ) ) ; } public boolean isInValueSection ( ) { return true ; } public boolean isValue ( ) { return true ; } public void setColumn ( short col ) { } public void setRow ( int row ) { } public void setXFIndex ( short xf ) { } public Object clone ( ) { RKRecord rec = new RKRecord ( ) ; rec . field_1_row = field_1_row ; rec . field_2_col = field_2_col ; rec . field_3_xf_index = field_3_xf_index ; rec . field_4_rk_number = field_4_rk_number ; return rec ; } } 	1
package org . apache . poi . hssf . record ; import org . apache . poi . util . * ; public class EndSubRecord extends SubRecord { public final static short sid = 0x00 ; public EndSubRecord ( ) { } public EndSubRecord ( RecordInputStream in ) { super ( in ) ; } protected void validateSid ( short id ) { if ( id != sid ) { throw new RecordFormatException ( "Not a End record" ) ; } } protected void fillFields ( RecordInputStream in ) { } public String toString ( ) { StringBuffer buffer = new StringBuffer ( ) ; buffer . append ( "[ftEnd]\n" ) ; buffer . append ( "[/ftEnd]\n" ) ; return buffer . toString ( ) ; } public int serialize ( int offset , byte [ ] data ) { LittleEndian . putShort ( data , 0 + offset , sid ) ; LittleEndian . putShort ( data , 2 + offset , ( short ) ( getRecordSize ( ) - 4 ) ) ; return getRecordSize ( ) ; } public int getRecordSize ( ) { return 4 ; } public short getSid ( ) { return sid ; } public Object clone ( ) { EndSubRecord rec = new EndSubRecord ( ) ; return rec ; } } 	1
package org . apache . poi . hssf . record . formula ; import org . apache . poi . util . BinaryTree ; import org . apache . poi . hssf . model . Workbook ; public abstract class AbstractFunctionPtg extends OperationPtg { public static final String ATTR_NAME = "specialflag" ; public static final short INDEX_EXTERNAL = 255 ; private static BinaryTree map = produceHash ( ) ; protected static Object [ ] [ ] functionData = produceFunctionData ( ) ; protected byte returnClass ; protected byte [ ] paramClass ; protected byte field_1_num_args ; protected short field_2_fnc_index ; public String toString ( ) { StringBuffer buffer = new StringBuffer ( ) ; buffer . append ( "<FunctionPtg>" ) . append ( "\n" ) . append ( "   field_1_num_args=" ) . append ( field_1_num_args ) . append ( "\n" ) . append ( "      name         =" ) . append ( lookupName ( field_2_fnc_index ) ) . append ( "\n" ) . append ( "   field_2_fnc_index=" ) . append ( field_2_fnc_index ) . append ( "\n" ) . append ( "</FunctionPtg>" ) ; return buffer . toString ( ) ; } public int getType ( ) { return - 1 ; } public short getFunctionIndex ( ) { return field_2_fnc_index ; } public String getName ( ) { return lookupName ( field_2_fnc_index ) ; } public String toFormulaString ( Workbook book ) { return getName ( ) ; } public String toFormulaString ( String [ ] operands ) { StringBuffer buf = new StringBuffer ( ) ; if ( field_2_fnc_index != 1 ) { buf . append ( getName ( ) ) ; buf . append ( '(' ) ; } if ( operands . length > 0 ) { for ( int i = 0 ; i < operands . length ; i ++ ) { buf . append ( operands [ i ] ) ; buf . append ( ',' ) ; } buf . deleteCharAt ( buf . length ( ) - 1 ) ; } if ( field_2_fnc_index != 1 ) { buf . append ( ")" ) ; } return buf . toString ( ) ; } public abstract void writeBytes ( byte [ ] array , int offset ) ; public abstract int getSize ( ) ; protected String lookupName ( short index ) { return ( ( String ) map . get ( new Integer ( index ) ) ) ; } protected short lookupIndex ( String name ) { Integer index = ( Integer ) map . getKeyForValue ( name ) ; if ( index != null ) return index . shortValue ( ) ; return INDEX_EXTERNAL ; } private static BinaryTree produceHash ( ) { BinaryTree dmap = new BinaryTree ( ) ; dmap . put ( new Integer ( 0 ) , "COUNT" ) ; dmap . put ( new Integer ( 1 ) , "specialflag" ) ; dmap . put ( new Integer ( 2 ) , "ISNA" ) ; dmap . put ( new Integer ( 3 ) , "ISERROR" ) ; dmap . put ( new Integer ( 4 ) , "SUM" ) ; dmap . put ( new Integer ( 5 ) , "AVERAGE" ) ; dmap . put ( new Integer ( 6 ) , "MIN" ) ; dmap . put ( new Integer ( 7 ) , "MAX" ) ; dmap . put ( new Integer ( 8 ) , "ROW" ) ; dmap . put ( new Integer ( 9 ) , "COLUMN" ) ; dmap . put ( new Integer ( 10 ) , "NA" ) ; dmap . put ( new Integer ( 11 ) , "NPV" ) ; dmap . put ( new Integer ( 12 ) , "STDEV" ) ; dmap . put ( new Integer ( 13 ) , "DOLLAR" ) ; dmap . put ( new Integer ( 14 ) , "FIXED" ) ; dmap . put ( new Integer ( 15 ) , "SIN" ) ; dmap . put ( new Integer ( 16 ) , "COS" ) ; dmap . put ( new Integer ( 17 ) , "TAN" ) ; dmap . put ( new Integer ( 18 ) , "ATAN" ) ; dmap . put ( new Integer ( 19 ) , "PI" ) ; dmap . put ( new Integer ( 20 ) , "SQRT" ) ; dmap . put ( new Integer ( 21 ) , "EXP" ) ; dmap . put ( new Integer ( 22 ) , "LN" ) ; dmap . put ( new Integer ( 23 ) , "LOG10" ) ; dmap . put ( new Integer ( 24 ) , "ABS" ) ; dmap . put ( new Integer ( 25 ) , "INT" ) ; dmap . put ( new Integer ( 26 ) , "SIGN" ) ; dmap . put ( new Integer ( 27 ) , "ROUND" ) ; dmap . put ( new Integer ( 28 ) , "LOOKUP" ) ; dmap . put ( new Integer ( 29 ) , "INDEX" ) ; dmap . put ( new Integer ( 30 ) , "REPT" ) ; dmap . put ( new Integer ( 31 ) , "MID" ) ; dmap . put ( new Integer ( 32 ) , "LEN" ) ; dmap . put ( new Integer ( 33 ) , "VALUE" ) ; dmap . put ( new Integer ( 34 ) , "TRUE" ) ; dmap . put ( new Integer ( 35 ) , "FALSE" ) ; dmap . put ( new Integer ( 36 ) , "AND" ) ; dmap . put ( new Integer ( 37 ) , "OR" ) ; dmap . put ( new Integer ( 38 ) , "NOT" ) ; dmap . put ( new Integer ( 39 ) , "MOD" ) ; dmap . put ( new Integer ( 40 ) , "DCOUNT" ) ; dmap . put ( new Integer ( 41 ) , "DSUM" ) ; dmap . put ( new Integer ( 42 ) , "DAVERAGE" ) ; dmap . put ( new Integer ( 43 ) , "DMIN" ) ; dmap . put ( new Integer ( 44 ) , "DMAX" ) ; dmap . put ( new Integer ( 45 ) , "DSTDEV" ) ; dmap . put ( new Integer ( 46 ) , "VAR" ) ; dmap . put ( new Integer ( 47 ) , "DVAR" ) ; dmap . put ( new Integer ( 48 ) , "TEXT" ) ; dmap . put ( new Integer ( 49 ) , "LINEST" ) ; dmap . put ( new Integer ( 50 ) , "TREND" ) ; dmap . put ( new Integer ( 51 ) , "LOGEST" ) ; dmap . put ( new Integer ( 52 ) , "GROWTH" ) ; dmap . put ( new Integer ( 53 ) , "GOTO" ) ; dmap . put ( new Integer ( 54 ) , "HALT" ) ; dmap . put ( new Integer ( 56 ) , "PV" ) ; dmap . put ( new Integer ( 57 ) , "FV" ) ; dmap . put ( new Integer ( 58 ) , "NPER" ) ; dmap . put ( new Integer ( 59 ) , "PMT" ) ; dmap . put ( new Integer ( 60 ) , "RATE" ) ; dmap . put ( new Integer ( 61 ) , "MIRR" ) ; dmap . put ( new Integer ( 62 ) , "IRR" ) ; dmap . put ( new Integer ( 63 ) , "RAND" ) ; dmap . put ( new Integer ( 64 ) , "MATCH" ) ; dmap . put ( new Integer ( 65 ) , "DATE" ) ; dmap . put ( new Integer ( 66 ) , "TIME" ) ; dmap . put ( new Integer ( 67 ) , "DAY" ) ; dmap . put ( new Integer ( 68 ) , "MONTH" ) ; dmap . put ( new Integer ( 69 ) , "YEAR" ) ; dmap . put ( new Integer ( 70 ) , "WEEKDAY" ) ; dmap . put ( new Integer ( 71 ) , "HOUR" ) ; dmap . put ( new Integer ( 72 ) , "MINUTE" ) ; dmap . put ( new Integer ( 73 ) , "SECOND" ) ; dmap . put ( new Integer ( 74 ) , "NOW" ) ; dmap . put ( new Integer ( 75 ) , "AREAS" ) ; dmap . put ( new Integer ( 76 ) , "ROWS" ) ; dmap . put ( new Integer ( 77 ) , "COLUMNS" ) ; dmap . put ( new Integer ( 78 ) , "OFFSET" ) ; dmap . put ( new Integer ( 79 ) , "ABSREF" ) ; dmap . put ( new Integer ( 80 ) , "RELREF" ) ; dmap . put ( new Integer ( 81 ) , "ARGUMENT" ) ; dmap . put ( new Integer ( 82 ) , "SEARCH" ) ; dmap . put ( new Integer ( 83 ) , "TRANSPOSE" ) ; dmap . put ( new Integer ( 84 ) , "ERROR" ) ; dmap . put ( new Integer ( 85 ) , "STEP" ) ; dmap . put ( new Integer ( 86 ) , "TYPE" ) ; dmap . put ( new Integer ( 87 ) , "ECHO" ) ; dmap . put ( new Integer ( 88 ) , "SETNAME" ) ; dmap . put ( new Integer ( 89 ) , "CALLER" ) ; dmap . put ( new Integer ( 90 ) , "DEREF" ) ; dmap . put ( new Integer ( 91 ) , "WINDOWS" ) ; dmap . put ( new Integer ( 92 ) , "SERIES" ) ; dmap . put ( new Integer ( 93 ) , "DOCUMENTS" ) ; dmap . put ( new Integer ( 94 ) , "ACTIVECELL" ) ; dmap . put ( new Integer ( 95 ) , "SELECTION" ) ; dmap . put ( new Integer ( 96 ) , "RESULT" ) ; dmap . put ( new Integer ( 97 ) , "ATAN2" ) ; dmap . put ( new Integer ( 98 ) , "ASIN" ) ; dmap . put ( new Integer ( 99 ) , "ACOS" ) ; dmap . put ( new Integer ( 100 ) , "CHOOSE" ) ; dmap . put ( new Integer ( 101 ) , "HLOOKUP" ) ; dmap . put ( new Integer ( 102 ) , "VLOOKUP" ) ; dmap . put ( new Integer ( 103 ) , "LINKS" ) ; dmap . put ( new Integer ( 104 ) , "INPUT" ) ; dmap . put ( new Integer ( 105 ) , "ISREF" ) ; dmap . put ( new Integer ( 106 ) , "GETFORMULA" ) ; dmap . put ( new Integer ( 107 ) , "GETNAME" ) ; dmap . put ( new Integer ( 108 ) , "SETVALUE" ) ; dmap . put ( new Integer ( 109 ) , "LOG" ) ; dmap . put ( new Integer ( 110 ) , "EXEC" ) ; dmap . put ( new Integer ( 111 ) , "CHAR" ) ; dmap . put ( new Integer ( 112 ) , "LOWER" ) ; dmap . put ( new Integer ( 113 ) , "UPPER" ) ; dmap . put ( new Integer ( 114 ) , "PROPER" ) ; dmap . put ( new Integer ( 115 ) , "LEFT" ) ; dmap . put ( new Integer ( 116 ) , "RIGHT" ) ; dmap . put ( new Integer ( 117 ) , "EXACT" ) ; dmap . put ( new Integer ( 118 ) , "TRIM" ) ; dmap . put ( new Integer ( 119 ) , "REPLACE" ) ; dmap . put ( new Integer ( 120 ) , "SUBSTITUTE" ) ; dmap . put ( new Integer ( 121 ) , "CODE" ) ; dmap . put ( new Integer ( 122 ) , "NAMES" ) ; dmap . put ( new Integer ( 123 ) , "DIRECTORY" ) ; dmap . put ( new Integer ( 124 ) , "FIND" ) ; dmap . put ( new Integer ( 125 ) , "CELL" ) ; dmap . put ( new Integer ( 126 ) , "ISERR" ) ; dmap . put ( new Integer ( 127 ) , "ISTEXT" ) ; dmap . put ( new Integer ( 128 ) , "ISNUMBER" ) ; dmap . put ( new Integer ( 129 ) , "ISBLANK" ) ; dmap . put ( new Integer ( 130 ) , "T" ) ; dmap . put ( new Integer ( 131 ) , "N" ) ; dmap . put ( new Integer ( 132 ) , "FOPEN" ) ; dmap . put ( new Integer ( 133 ) , "FCLOSE" ) ; dmap . put ( new Integer ( 134 ) , "FSIZE" ) ; dmap . put ( new Integer ( 135 ) , "FREADLN" ) ; dmap . put ( new Integer ( 136 ) , "FREAD" ) ; dmap . put ( new Integer ( 137 ) , "FWRITELN" ) ; dmap . put ( new Integer ( 138 ) , "FWRITE" ) ; dmap . put ( new Integer ( 139 ) , "FPOS" ) ; dmap . put ( new Integer ( 140 ) , "DATEVALUE" ) ; dmap . put ( new Integer ( 141 ) , "TIMEVALUE" ) ; dmap . put ( new Integer ( 142 ) , "SLN" ) ; dmap . put ( new Integer ( 143 ) , "SYD" ) ; dmap . put ( new Integer ( 144 ) , "DDB" ) ; dmap . put ( new Integer ( 145 ) , "GETDEF" ) ; dmap . put ( new Integer ( 146 ) , "REFTEXT" ) ; dmap . put ( new Integer ( 147 ) , "TEXTREF" ) ; dmap . put ( new Integer ( 148 ) , "INDIRECT" ) ; dmap . put ( new Integer ( 149 ) , "REGISTER" ) ; dmap . put ( new Integer ( 150 ) , "CALL" ) ; dmap . put ( new Integer ( 151 ) , "ADDBAR" ) ; dmap . put ( new Integer ( 152 ) , "ADDMENU" ) ; dmap . put ( new Integer ( 153 ) , "ADDCOMMAND" ) ; dmap . put ( new Integer ( 154 ) , "ENABLECOMMAND" ) ; dmap . put ( new Integer ( 155 ) , "CHECKCOMMAND" ) ; dmap . put ( new Integer ( 156 ) , "RENAMECOMMAND" ) ; dmap . put ( new Integer ( 157 ) , "SHOWBAR" ) ; dmap . put ( new Integer ( 158 ) , "DELETEMENU" ) ; dmap . put ( new Integer ( 159 ) , "DELETECOMMAND" ) ; dmap . put ( new Integer ( 160 ) , "GETCHARTITEM" ) ; dmap . put ( new Integer ( 161 ) , "DIALOGBOX" ) ; dmap . put ( new Integer ( 162 ) , "CLEAN" ) ; dmap . put ( new Integer ( 163 ) , "MDETERM" ) ; dmap . put ( new Integer ( 164 ) , "MINVERSE" ) ; dmap . put ( new Integer ( 165 ) , "MMULT" ) ; dmap . put ( new Integer ( 166 ) , "FILES" ) ; dmap . put ( new Integer ( 167 ) , "IPMT" ) ; dmap . put ( new Integer ( 168 ) , "PPMT" ) ; dmap . put ( new Integer ( 169 ) , "COUNTA" ) ; dmap . put ( new Integer ( 170 ) , "CANCELKEY" ) ; dmap . put ( new Integer ( 175 ) , "INITIATE" ) ; dmap . put ( new Integer ( 176 ) , "REQUEST" ) ; dmap . put ( new Integer ( 177 ) , "POKE" ) ; dmap . put ( new Integer ( 178 ) , "EXECUTE" ) ; dmap . put ( new Integer ( 179 ) , "TERMINATE" ) ; dmap . put ( new Integer ( 180 ) , "RESTART" ) ; dmap . put ( new Integer ( 181 ) , "HELP" ) ; dmap . put ( new Integer ( 182 ) , "GETBAR" ) ; dmap . put ( new Integer ( 183 ) , "PRODUCT" ) ; dmap . put ( new Integer ( 184 ) , "FACT" ) ; dmap . put ( new Integer ( 185 ) , "GETCELL" ) ; dmap . put ( new Integer ( 186 ) , "GETWORKSPACE" ) ; dmap . put ( new Integer ( 187 ) , "GETWINDOW" ) ; dmap . put ( new Integer ( 188 ) , "GETDOCUMENT" ) ; dmap . put ( new Integer ( 189 ) , "DPRODUCT" ) ; dmap . put ( new Integer ( 190 ) , "ISNONTEXT" ) ; dmap . put ( new Integer ( 191 ) , "GETNOTE" ) ; dmap . put ( new Integer ( 192 ) , "NOTE" ) ; dmap . put ( new Integer ( 193 ) , "STDEVP" ) ; dmap . put ( new Integer ( 194 ) , "VARP" ) ; dmap . put ( new Integer ( 195 ) , "DSTDEVP" ) ; dmap . put ( new Integer ( 196 ) , "DVARP" ) ; dmap . put ( new Integer ( 197 ) , "TRUNC" ) ; dmap . put ( new Integer ( 198 ) , "ISLOGICAL" ) ; dmap . put ( new Integer ( 199 ) , "DCOUNTA" ) ; dmap . put ( new Integer ( 200 ) , "DELETEBAR" ) ; dmap . put ( new Integer ( 201 ) , "UNREGISTER" ) ; dmap . put ( new Integer ( 204 ) , "USDOLLAR" ) ; dmap . put ( new Integer ( 205 ) , "FINDB" ) ; dmap . put ( new Integer ( 206 ) , "SEARCHB" ) ; dmap . put ( new Integer ( 207 ) , "REPLACEB" ) ; dmap . put ( new Integer ( 208 ) , "LEFTB" ) ; dmap . put ( new Integer ( 209 ) , "RIGHTB" ) ; dmap . put ( new Integer ( 210 ) , "MIDB" ) ; dmap . put ( new Integer ( 211 ) , "LENB" ) ; dmap . put ( new Integer ( 212 ) , "ROUNDUP" ) ; dmap . put ( new Integer ( 213 ) , "ROUNDDOWN" ) ; dmap . put ( new Integer ( 214 ) , "ASC" ) ; dmap . put ( new Integer ( 215 ) , "DBCS" ) ; dmap . put ( new Integer ( 216 ) , "RANK" ) ; dmap . put ( new Integer ( 219 ) , "ADDRESS" ) ; dmap . put ( new Integer ( 220 ) , "DAYS360" ) ; dmap . put ( new Integer ( 221 ) , "TODAY" ) ; dmap . put ( new Integer ( 222 ) , "VDB" ) ; dmap . put ( new Integer ( 227 ) , "MEDIAN" ) ; dmap . put ( new Integer ( 228 ) , "SUMPRODUCT" ) ; dmap . put ( new Integer ( 229 ) , "SINH" ) ; dmap . put ( new Integer ( 230 ) , "COSH" ) ; dmap . put ( new Integer ( 231 ) , "TANH" ) ; dmap . put ( new Integer ( 232 ) , "ASINH" ) ; dmap . put ( new Integer ( 233 ) , "ACOSH" ) ; dmap . put ( new Integer ( 234 ) , "ATANH" ) ; dmap . put ( new Integer ( 235 ) , "DGET" ) ; dmap . put ( new Integer ( 236 ) , "CREATEOBJECT" ) ; dmap . put ( new Integer ( 237 ) , "VOLATILE" ) ; dmap . put ( new Integer ( 238 ) , "LASTERROR" ) ; dmap . put ( new Integer ( 239 ) , "CUSTOMUNDO" ) ; dmap . put ( new Integer ( 240 ) , "CUSTOMREPEAT" ) ; dmap . put ( new Integer ( 241 ) , "FORMULACONVERT" ) ; dmap . put ( new Integer ( 242 ) , "GETLINKINFO" ) ; dmap . put ( new Integer ( 243 ) , "TEXTBOX" ) ; dmap . put ( new Integer ( 244 ) , "INFO" ) ; dmap . put ( new Integer ( 245 ) , "GROUP" ) ; dmap . put ( new Integer ( 246 ) , "GETOBJECT" ) ; dmap . put ( new Integer ( 247 ) , "DB" ) ; dmap . put ( new Integer ( 248 ) , "PAUSE" ) ; dmap . put ( new Integer ( 250 ) , "RESUME" ) ; dmap . put ( new Integer ( 252 ) , "FREQUENCY" ) ; dmap . put ( new Integer ( 253 ) , "ADDTOOLBAR" ) ; dmap . put ( new Integer ( 254 ) , "DELETETOOLBAR" ) ; dmap . put ( new Integer ( 255 ) , "externalflag" ) ; dmap . put ( new Integer ( 256 ) , "RESETTOOLBAR" ) ; dmap . put ( new Integer ( 257 ) , "EVALUATE" ) ; dmap . put ( new Integer ( 258 ) , "GETTOOLBAR" ) ; dmap . put ( new Integer ( 259 ) , "GETTOOL" ) ; dmap . put ( new Integer ( 260 ) , "SPELLINGCHECK" ) ; dmap . put ( new Integer ( 261 ) , "ERROR.TYPE" ) ; dmap . put ( new Integer ( 262 ) , "APPTITLE" ) ; dmap . put ( new Integer ( 263 ) , "WINDOWTITLE" ) ; dmap . put ( new Integer ( 264 ) , "SAVETOOLBAR" ) ; dmap . put ( new Integer ( 265 ) , "ENABLETOOL" ) ; dmap . put ( new Integer ( 266 ) , "PRESSTOOL" ) ; dmap . put ( new Integer ( 267 ) , "REGISTERID" ) ; dmap . put ( new Integer ( 268 ) , "GETWORKBOOK" ) ; dmap . put ( new Integer ( 269 ) , "AVEDEV" ) ; dmap . put ( new Integer ( 270 ) , "BETADIST" ) ; dmap . put ( new Integer ( 271 ) , "GAMMALN" ) ; dmap . put ( new Integer ( 272 ) , "BETAINV" ) ; dmap . put ( new Integer ( 273 ) , "BINOMDIST" ) ; dmap . put ( new Integer ( 274 ) , "CHIDIST" ) ; dmap . put ( new Integer ( 275 ) , "CHIINV" ) ; dmap . put ( new Integer ( 276 ) , "COMBIN" ) ; dmap . put ( new Integer ( 277 ) , "CONFIDENCE" ) ; dmap . put ( new Integer ( 278 ) , "CRITBINOM" ) ; dmap . put ( new Integer ( 279 ) , "EVEN" ) ; dmap . put ( new Integer ( 280 ) , "EXPONDIST" ) ; dmap . put ( new Integer ( 281 ) , "FDIST" ) ; dmap . put ( new Integer ( 282 ) , "FINV" ) ; dmap . put ( new Integer ( 283 ) , "FISHER" ) ; dmap . put ( new Integer ( 284 ) , "FISHERINV" ) ; dmap . put ( new Integer ( 285 ) , "FLOOR" ) ; dmap . put ( new Integer ( 286 ) , "GAMMADIST" ) ; dmap . put ( new Integer ( 287 ) , "GAMMAINV" ) ; dmap . put ( new Integer ( 288 ) , "CEILING" ) ; dmap . put ( new Integer ( 289 ) , "HYPGEOMDIST" ) ; dmap . put ( new Integer ( 290 ) , "LOGNORMDIST" ) ; dmap . put ( new Integer ( 291 ) , "LOGINV" ) ; dmap . put ( new Integer ( 292 ) , "NEGBINOMDIST" ) ; dmap . put ( new Integer ( 293 ) , "NORMDIST" ) ; dmap . put ( new Integer ( 294 ) , "NORMSDIST" ) ; dmap . put ( new Integer ( 295 ) , "NORMINV" ) ; dmap . put ( new Integer ( 296 ) , "NORMSINV" ) ; dmap . put ( new Integer ( 297 ) , "STANDARDIZE" ) ; dmap . put ( new Integer ( 298 ) , "ODD" ) ; dmap . put ( new Integer ( 299 ) , "PERMUT" ) ; dmap . put ( new Integer ( 300 ) , "POISSON" ) ; dmap . put ( new Integer ( 301 ) , "TDIST" ) ; dmap . put ( new Integer ( 302 ) , "WEIBULL" ) ; dmap . put ( new Integer ( 303 ) , "SUMXMY2" ) ; dmap . put ( new Integer ( 304 ) , "SUMX2MY2" ) ; dmap . put ( new Integer ( 305 ) , "SUMX2PY2" ) ; dmap . put ( new Integer ( 306 ) , "CHITEST" ) ; dmap . put ( new Integer ( 307 ) , "CORREL" ) ; dmap . put ( new Integer ( 308 ) , "COVAR" ) ; dmap . put ( new Integer ( 309 ) , "FORECAST" ) ; dmap . put ( new Integer ( 310 ) , "FTEST" ) ; dmap . put ( new Integer ( 311 ) , "INTERCEPT" ) ; dmap . put ( new Integer ( 312 ) , "PEARSON" ) ; dmap . put ( new Integer ( 313 ) , "RSQ" ) ; dmap . put ( new Integer ( 314 ) , "STEYX" ) ; dmap . put ( new Integer ( 315 ) , "SLOPE" ) ; dmap . put ( new Integer ( 316 ) , "TTEST" ) ; dmap . put ( new Integer ( 317 ) , "PROB" ) ; dmap . put ( new Integer ( 318 ) , "DEVSQ" ) ; dmap . put ( new Integer ( 319 ) , "GEOMEAN" ) ; dmap . put ( new Integer ( 320 ) , "HARMEAN" ) ; dmap . put ( new Integer ( 321 ) , "SUMSQ" ) ; dmap . put ( new Integer ( 322 ) , "KURT" ) ; dmap . put ( new Integer ( 323 ) , "SKEW" ) ; dmap . put ( new Integer ( 324 ) , "ZTEST" ) ; dmap . put ( new Integer ( 325 ) , "LARGE" ) ; dmap . put ( new Integer ( 326 ) , "SMALL" ) ; dmap . put ( new Integer ( 327 ) , "QUARTILE" ) ; dmap . put ( new Integer ( 328 ) , "PERCENTILE" ) ; dmap . put ( new Integer ( 329 ) , "PERCENTRANK" ) ; dmap . put ( new Integer ( 330 ) , "MODE" ) ; dmap . put ( new Integer ( 331 ) , "TRIMMEAN" ) ; dmap . put ( new Integer ( 332 ) , "TINV" ) ; dmap . put ( new Integer ( 334 ) , "MOVIECOMMAND" ) ; dmap . put ( new Integer ( 335 ) , "GETMOVIE" ) ; dmap . put ( new Integer ( 336 ) , "CONCATENATE" ) ; dmap . put ( new Integer ( 337 ) , "POWER" ) ; dmap . put ( new Integer ( 338 ) , "PIVOTADDDATA" ) ; dmap . put ( new Integer ( 339 ) , "GETPIVOTTABLE" ) ; dmap . put ( new Integer ( 340 ) , "GETPIVOTFIELD" ) ; dmap . put ( new Integer ( 341 ) , "GETPIVOTITEM" ) ; dmap . put ( new Integer ( 342 ) , "RADIANS" ) ; dmap . put ( new Integer ( 343 ) , "DEGREES" ) ; dmap . put ( new Integer ( 344 ) , "SUBTOTAL" ) ; dmap . put ( new Integer ( 345 ) , "SUMIF" ) ; dmap . put ( new Integer ( 346 ) , "COUNTIF" ) ; dmap . put ( new Integer ( 347 ) , "COUNTBLANK" ) ; dmap . put ( new Integer ( 348 ) , "SCENARIOGET" ) ; dmap . put ( new Integer ( 349 ) , "OPTIONSLISTSGET" ) ; dmap . put ( new Integer ( 350 ) , "ISPMT" ) ; dmap . put ( new Integer ( 351 ) , "DATEDIF" ) ; dmap . put ( new Integer ( 352 ) , "DATESTRING" ) ; dmap . put ( new Integer ( 353 ) , "NUMBERSTRING" ) ; dmap . put ( new Integer ( 354 ) , "ROMAN" ) ; dmap . put ( new Integer ( 355 ) , "OPENDIALOG" ) ; dmap . put ( new Integer ( 356 ) , "SAVEDIALOG" ) ; dmap . put ( new Integer ( 357 ) , "VIEWGET" ) ; dmap . put ( new Integer ( 358 ) , "GETPIVOTDATA" ) ; dmap . put ( new Integer ( 359 ) , "HYPERLINK" ) ; dmap . put ( new Integer ( 360 ) , "PHONETIC" ) ; dmap . put ( new Integer ( 361 ) , "AVERAGEA" ) ; dmap . put ( new Integer ( 362 ) , "MAXA" ) ; dmap . put ( new Integer ( 363 ) , "MINA" ) ; dmap . put ( new Integer ( 364 ) , "STDEVPA" ) ; dmap . put ( new Integer ( 365 ) , "VARPA" ) ; dmap . put ( new Integer ( 366 ) , "STDEVA" ) ; dmap . put ( new Integer ( 367 ) , "VARA" ) ; return dmap ; } private static Object [ ] [ ] produceFunctionData ( ) { Object [ ] [ ] functionData = new Object [ 368 ] [ 3 ] ; functionData [ 0 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 0 ] [ 1 ] = new byte [ ] { Ptg . CLASS_REF } ; functionData [ 0 ] [ 2 ] = new Integer ( - 1 ) ; functionData [ 2 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 2 ] [ 1 ] = new byte [ ] { Ptg . CLASS_VALUE } ; functionData [ 2 ] [ 2 ] = new Integer ( 1 ) ; functionData [ 3 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 3 ] [ 1 ] = new byte [ ] { Ptg . CLASS_VALUE } ; functionData [ 3 ] [ 2 ] = new Integer ( 1 ) ; functionData [ 4 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 4 ] [ 1 ] = new byte [ ] { Ptg . CLASS_REF } ; functionData [ 4 ] [ 2 ] = new Integer ( - 1 ) ; functionData [ 5 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 5 ] [ 1 ] = new byte [ ] { Ptg . CLASS_REF } ; functionData [ 5 ] [ 2 ] = new Integer ( - 1 ) ; functionData [ 6 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 6 ] [ 1 ] = new byte [ ] { Ptg . CLASS_REF } ; functionData [ 6 ] [ 2 ] = new Integer ( - 1 ) ; functionData [ 7 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 7 ] [ 1 ] = new byte [ ] { Ptg . CLASS_REF } ; functionData [ 7 ] [ 2 ] = new Integer ( - 1 ) ; functionData [ 8 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 8 ] [ 1 ] = new byte [ ] { Ptg . CLASS_REF } ; functionData [ 8 ] [ 2 ] = new Integer ( - 1 ) ; functionData [ 9 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 9 ] [ 1 ] = new byte [ ] { Ptg . CLASS_REF } ; functionData [ 9 ] [ 2 ] = new Integer ( - 1 ) ; functionData [ 10 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 10 ] [ 1 ] = new byte [ ] { Ptg . CLASS_VALUE } ; functionData [ 10 ] [ 2 ] = new Integer ( 0 ) ; functionData [ 11 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 11 ] [ 1 ] = new byte [ ] { Ptg . CLASS_REF } ; functionData [ 11 ] [ 2 ] = new Integer ( - 1 ) ; functionData [ 12 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 12 ] [ 1 ] = new byte [ ] { Ptg . CLASS_REF } ; functionData [ 12 ] [ 2 ] = new Integer ( - 1 ) ; functionData [ 13 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 13 ] [ 1 ] = new byte [ ] { Ptg . CLASS_VALUE } ; functionData [ 13 ] [ 2 ] = new Integer ( - 1 ) ; functionData [ 14 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 14 ] [ 1 ] = new byte [ ] { Ptg . CLASS_VALUE } ; functionData [ 14 ] [ 2 ] = new Integer ( - 1 ) ; functionData [ 15 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 15 ] [ 1 ] = new byte [ ] { Ptg . CLASS_VALUE } ; functionData [ 15 ] [ 2 ] = new Integer ( 1 ) ; functionData [ 16 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 16 ] [ 1 ] = new byte [ ] { Ptg . CLASS_VALUE } ; functionData [ 16 ] [ 2 ] = new Integer ( 1 ) ; functionData [ 17 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 17 ] [ 1 ] = new byte [ ] { Ptg . CLASS_VALUE } ; functionData [ 17 ] [ 2 ] = new Integer ( 1 ) ; functionData [ 18 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 18 ] [ 1 ] = new byte [ ] { Ptg . CLASS_VALUE } ; functionData [ 18 ] [ 2 ] = new Integer ( 1 ) ; functionData [ 19 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 19 ] [ 1 ] = new byte [ ] { Ptg . CLASS_VALUE } ; functionData [ 19 ] [ 2 ] = new Integer ( 0 ) ; functionData [ 20 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 20 ] [ 1 ] = new byte [ ] { Ptg . CLASS_VALUE } ; functionData [ 20 ] [ 2 ] = new Integer ( 1 ) ; functionData [ 21 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 21 ] [ 1 ] = new byte [ ] { Ptg . CLASS_VALUE } ; functionData [ 21 ] [ 2 ] = new Integer ( 1 ) ; functionData [ 22 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 22 ] [ 1 ] = new byte [ ] { Ptg . CLASS_VALUE } ; functionData [ 22 ] [ 2 ] = new Integer ( 1 ) ; functionData [ 23 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 23 ] [ 1 ] = new byte [ ] { Ptg . CLASS_VALUE } ; functionData [ 23 ] [ 2 ] = new Integer ( 1 ) ; functionData [ 24 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 24 ] [ 1 ] = new byte [ ] { Ptg . CLASS_VALUE } ; functionData [ 24 ] [ 2 ] = new Integer ( 1 ) ; functionData [ 25 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 25 ] [ 1 ] = new byte [ ] { Ptg . CLASS_VALUE } ; functionData [ 25 ] [ 2 ] = new Integer ( 1 ) ; functionData [ 26 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 26 ] [ 1 ] = new byte [ ] { Ptg . CLASS_VALUE } ; functionData [ 26 ] [ 2 ] = new Integer ( 1 ) ; functionData [ 27 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 27 ] [ 1 ] = new byte [ ] { Ptg . CLASS_VALUE } ; functionData [ 27 ] [ 2 ] = new Integer ( 2 ) ; functionData [ 28 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 28 ] [ 1 ] = new byte [ ] { Ptg . CLASS_VALUE , Ptg . CLASS_REF } ; functionData [ 28 ] [ 2 ] = new Integer ( - 1 ) ; functionData [ 29 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 29 ] [ 1 ] = new byte [ ] { Ptg . CLASS_REF } ; functionData [ 29 ] [ 2 ] = new Integer ( - 1 ) ; functionData [ 30 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 30 ] [ 1 ] = new byte [ ] { Ptg . CLASS_VALUE } ; functionData [ 30 ] [ 2 ] = new Integer ( 2 ) ; functionData [ 31 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 31 ] [ 1 ] = new byte [ ] { Ptg . CLASS_VALUE } ; functionData [ 31 ] [ 2 ] = new Integer ( 3 ) ; functionData [ 32 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 32 ] [ 1 ] = new byte [ ] { Ptg . CLASS_VALUE } ; functionData [ 32 ] [ 2 ] = new Integer ( 1 ) ; functionData [ 33 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 33 ] [ 1 ] = new byte [ ] { Ptg . CLASS_VALUE } ; functionData [ 33 ] [ 2 ] = new Integer ( 1 ) ; functionData [ 34 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 34 ] [ 1 ] = new byte [ ] { Ptg . CLASS_VALUE } ; functionData [ 34 ] [ 2 ] = new Integer ( 1 ) ; functionData [ 35 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 35 ] [ 1 ] = new byte [ ] { Ptg . CLASS_VALUE } ; functionData [ 35 ] [ 2 ] = new Integer ( 1 ) ; functionData [ 36 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 36 ] [ 1 ] = new byte [ ] { Ptg . CLASS_REF } ; functionData [ 36 ] [ 2 ] = new Integer ( - 1 ) ; functionData [ 37 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 37 ] [ 1 ] = new byte [ ] { Ptg . CLASS_REF } ; functionData [ 37 ] [ 2 ] = new Integer ( - 1 ) ; functionData [ 38 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 38 ] [ 1 ] = new byte [ ] { Ptg . CLASS_VALUE } ; functionData [ 38 ] [ 2 ] = new Integer ( 1 ) ; functionData [ 39 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 39 ] [ 1 ] = new byte [ ] { Ptg . CLASS_VALUE } ; functionData [ 39 ] [ 2 ] = new Integer ( 2 ) ; functionData [ 40 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 40 ] [ 1 ] = new byte [ ] { Ptg . CLASS_REF } ; functionData [ 40 ] [ 2 ] = new Integer ( 3 ) ; functionData [ 41 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 41 ] [ 1 ] = new byte [ ] { Ptg . CLASS_REF } ; functionData [ 41 ] [ 2 ] = new Integer ( 3 ) ; functionData [ 42 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 42 ] [ 1 ] = new byte [ ] { Ptg . CLASS_REF } ; functionData [ 42 ] [ 2 ] = new Integer ( 3 ) ; functionData [ 43 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 43 ] [ 1 ] = new byte [ ] { Ptg . CLASS_REF } ; functionData [ 43 ] [ 2 ] = new Integer ( 3 ) ; functionData [ 44 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 44 ] [ 1 ] = new byte [ ] { Ptg . CLASS_REF } ; functionData [ 44 ] [ 2 ] = new Integer ( 3 ) ; functionData [ 45 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 45 ] [ 1 ] = new byte [ ] { Ptg . CLASS_REF } ; functionData [ 45 ] [ 2 ] = new Integer ( 3 ) ; functionData [ 46 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 46 ] [ 1 ] = new byte [ ] { Ptg . CLASS_REF } ; functionData [ 46 ] [ 2 ] = new Integer ( - 1 ) ; functionData [ 47 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 47 ] [ 1 ] = new byte [ ] { Ptg . CLASS_REF } ; functionData [ 47 ] [ 2 ] = new Integer ( 3 ) ; functionData [ 48 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 48 ] [ 1 ] = new byte [ ] { Ptg . CLASS_VALUE } ; functionData [ 48 ] [ 2 ] = new Integer ( 2 ) ; functionData [ 49 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 49 ] [ 1 ] = new byte [ ] { Ptg . CLASS_REF } ; functionData [ 49 ] [ 2 ] = new Integer ( - 1 ) ; functionData [ 50 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 50 ] [ 1 ] = new byte [ ] { Ptg . CLASS_REF } ; functionData [ 50 ] [ 2 ] = new Integer ( - 1 ) ; functionData [ 51 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 51 ] [ 1 ] = new byte [ ] { Ptg . CLASS_REF } ; functionData [ 51 ] [ 2 ] = new Integer ( - 1 ) ; functionData [ 52 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 52 ] [ 1 ] = new byte [ ] { Ptg . CLASS_REF } ; functionData [ 52 ] [ 2 ] = new Integer ( - 1 ) ; functionData [ 56 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 56 ] [ 1 ] = new byte [ ] { Ptg . CLASS_VALUE } ; functionData [ 56 ] [ 2 ] = new Integer ( - 1 ) ; functionData [ 57 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 57 ] [ 1 ] = new byte [ ] { Ptg . CLASS_VALUE } ; functionData [ 57 ] [ 2 ] = new Integer ( - 1 ) ; functionData [ 58 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 58 ] [ 1 ] = new byte [ ] { Ptg . CLASS_VALUE } ; functionData [ 58 ] [ 2 ] = new Integer ( - 1 ) ; functionData [ 59 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 59 ] [ 1 ] = new byte [ ] { Ptg . CLASS_VALUE } ; functionData [ 59 ] [ 2 ] = new Integer ( - 1 ) ; functionData [ 60 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 60 ] [ 1 ] = new byte [ ] { Ptg . CLASS_VALUE } ; functionData [ 60 ] [ 2 ] = new Integer ( - 1 ) ; functionData [ 61 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 61 ] [ 1 ] = new byte [ ] { Ptg . CLASS_VALUE } ; functionData [ 61 ] [ 2 ] = new Integer ( 3 ) ; functionData [ 62 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 62 ] [ 1 ] = new byte [ ] { Ptg . CLASS_REF } ; functionData [ 62 ] [ 2 ] = new Integer ( - 1 ) ; functionData [ 63 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 63 ] [ 1 ] = new byte [ ] { Ptg . CLASS_REF } ; functionData [ 63 ] [ 2 ] = new Integer ( 1 ) ; functionData [ 64 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 64 ] [ 1 ] = new byte [ ] { Ptg . CLASS_VALUE , Ptg . CLASS_REF } ; functionData [ 64 ] [ 2 ] = new Integer ( - 1 ) ; functionData [ 65 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 65 ] [ 1 ] = new byte [ ] { Ptg . CLASS_VALUE } ; functionData [ 65 ] [ 2 ] = new Integer ( 3 ) ; functionData [ 66 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 66 ] [ 1 ] = new byte [ ] { Ptg . CLASS_VALUE } ; functionData [ 66 ] [ 2 ] = new Integer ( 3 ) ; functionData [ 67 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 67 ] [ 1 ] = new byte [ ] { Ptg . CLASS_VALUE } ; functionData [ 67 ] [ 2 ] = new Integer ( 1 ) ; functionData [ 68 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 68 ] [ 1 ] = new byte [ ] { Ptg . CLASS_VALUE } ; functionData [ 68 ] [ 2 ] = new Integer ( 1 ) ; functionData [ 69 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 69 ] [ 1 ] = new byte [ ] { Ptg . CLASS_VALUE } ; functionData [ 69 ] [ 2 ] = new Integer ( 1 ) ; functionData [ 70 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 70 ] [ 1 ] = new byte [ ] { Ptg . CLASS_VALUE } ; functionData [ 70 ] [ 2 ] = new Integer ( - 1 ) ; functionData [ 71 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 71 ] [ 1 ] = new byte [ ] { Ptg . CLASS_VALUE } ; functionData [ 71 ] [ 2 ] = new Integer ( 1 ) ; functionData [ 72 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 72 ] [ 1 ] = new byte [ ] { Ptg . CLASS_VALUE } ; functionData [ 72 ] [ 2 ] = new Integer ( 1 ) ; functionData [ 73 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 73 ] [ 1 ] = new byte [ ] { Ptg . CLASS_VALUE } ; functionData [ 73 ] [ 2 ] = new Integer ( 1 ) ; functionData [ 74 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 74 ] [ 1 ] = new byte [ ] { Ptg . CLASS_REF } ; functionData [ 74 ] [ 2 ] = new Integer ( 1 ) ; functionData [ 75 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 75 ] [ 1 ] = new byte [ ] { Ptg . CLASS_REF } ; functionData [ 75 ] [ 2 ] = new Integer ( 1 ) ; functionData [ 76 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 76 ] [ 1 ] = new byte [ ] { Ptg . CLASS_REF } ; functionData [ 76 ] [ 2 ] = new Integer ( 1 ) ; functionData [ 77 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 77 ] [ 1 ] = new byte [ ] { Ptg . CLASS_REF } ; functionData [ 77 ] [ 2 ] = new Integer ( 1 ) ; functionData [ 78 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 78 ] [ 1 ] = new byte [ ] { Ptg . CLASS_VALUE } ; functionData [ 78 ] [ 2 ] = new Integer ( - 1 ) ; functionData [ 82 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 82 ] [ 1 ] = new byte [ ] { Ptg . CLASS_VALUE } ; functionData [ 82 ] [ 2 ] = new Integer ( - 1 ) ; functionData [ 83 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 83 ] [ 1 ] = new byte [ ] { Ptg . CLASS_VALUE } ; functionData [ 83 ] [ 2 ] = new Integer ( 1 ) ; functionData [ 86 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 86 ] [ 1 ] = new byte [ ] { Ptg . CLASS_VALUE } ; functionData [ 86 ] [ 2 ] = new Integer ( 1 ) ; functionData [ 97 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 97 ] [ 1 ] = new byte [ ] { Ptg . CLASS_VALUE } ; functionData [ 97 ] [ 2 ] = new Integer ( 2 ) ; functionData [ 98 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 98 ] [ 1 ] = new byte [ ] { Ptg . CLASS_VALUE } ; functionData [ 98 ] [ 2 ] = new Integer ( 1 ) ; functionData [ 99 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 99 ] [ 1 ] = new byte [ ] { Ptg . CLASS_VALUE } ; functionData [ 99 ] [ 2 ] = new Integer ( 1 ) ; functionData [ 101 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 101 ] [ 1 ] = new byte [ ] { Ptg . CLASS_REF } ; functionData [ 101 ] [ 2 ] = new Integer ( - 1 ) ; functionData [ 102 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 102 ] [ 1 ] = new byte [ ] { Ptg . CLASS_REF } ; functionData [ 102 ] [ 2 ] = new Integer ( - 1 ) ; functionData [ 105 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 105 ] [ 1 ] = new byte [ ] { Ptg . CLASS_REF } ; functionData [ 105 ] [ 2 ] = new Integer ( 1 ) ; functionData [ 109 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 109 ] [ 1 ] = new byte [ ] { Ptg . CLASS_VALUE } ; functionData [ 109 ] [ 2 ] = new Integer ( - 1 ) ; functionData [ 111 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 111 ] [ 1 ] = new byte [ ] { Ptg . CLASS_VALUE } ; functionData [ 111 ] [ 2 ] = new Integer ( 1 ) ; functionData [ 112 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 112 ] [ 1 ] = new byte [ ] { Ptg . CLASS_VALUE } ; functionData [ 112 ] [ 2 ] = new Integer ( 1 ) ; functionData [ 113 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 113 ] [ 1 ] = new byte [ ] { Ptg . CLASS_VALUE } ; functionData [ 113 ] [ 2 ] = new Integer ( 1 ) ; functionData [ 114 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 114 ] [ 1 ] = new byte [ ] { Ptg . CLASS_VALUE } ; functionData [ 114 ] [ 2 ] = new Integer ( 1 ) ; functionData [ 115 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 115 ] [ 1 ] = new byte [ ] { Ptg . CLASS_VALUE } ; functionData [ 115 ] [ 2 ] = new Integer ( - 1 ) ; functionData [ 116 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 116 ] [ 1 ] = new byte [ ] { Ptg . CLASS_VALUE } ; functionData [ 116 ] [ 2 ] = new Integer ( - 1 ) ; functionData [ 117 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 117 ] [ 1 ] = new byte [ ] { Ptg . CLASS_VALUE } ; functionData [ 117 ] [ 2 ] = new Integer ( 2 ) ; functionData [ 118 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 118 ] [ 1 ] = new byte [ ] { Ptg . CLASS_VALUE } ; functionData [ 118 ] [ 2 ] = new Integer ( 1 ) ; functionData [ 119 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 119 ] [ 1 ] = new byte [ ] { Ptg . CLASS_VALUE } ; functionData [ 119 ] [ 2 ] = new Integer ( 4 ) ; functionData [ 120 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 120 ] [ 1 ] = new byte [ ] { Ptg . CLASS_VALUE } ; functionData [ 120 ] [ 2 ] = new Integer ( - 1 ) ; functionData [ 121 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 121 ] [ 1 ] = new byte [ ] { Ptg . CLASS_VALUE } ; functionData [ 121 ] [ 2 ] = new Integer ( 1 ) ; functionData [ 124 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 124 ] [ 1 ] = new byte [ ] { Ptg . CLASS_VALUE } ; functionData [ 124 ] [ 2 ] = new Integer ( - 1 ) ; functionData [ 125 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 125 ] [ 1 ] = new byte [ ] { Ptg . CLASS_VALUE } ; functionData [ 125 ] [ 2 ] = new Integer ( - 1 ) ; functionData [ 126 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 126 ] [ 1 ] = new byte [ ] { Ptg . CLASS_VALUE } ; functionData [ 126 ] [ 2 ] = new Integer ( 1 ) ; functionData [ 127 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 127 ] [ 1 ] = new byte [ ] { Ptg . CLASS_VALUE } ; functionData [ 127 ] [ 2 ] = new Integer ( 1 ) ; functionData [ 128 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 128 ] [ 1 ] = new byte [ ] { Ptg . CLASS_VALUE } ; functionData [ 128 ] [ 2 ] = new Integer ( 1 ) ; functionData [ 129 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 129 ] [ 1 ] = new byte [ ] { Ptg . CLASS_VALUE } ; functionData [ 129 ] [ 2 ] = new Integer ( 1 ) ; functionData [ 130 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 130 ] [ 1 ] = new byte [ ] { Ptg . CLASS_REF } ; functionData [ 130 ] [ 2 ] = new Integer ( 1 ) ; functionData [ 131 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 131 ] [ 1 ] = new byte [ ] { Ptg . CLASS_REF } ; functionData [ 131 ] [ 2 ] = new Integer ( 1 ) ; functionData [ 140 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 140 ] [ 1 ] = new byte [ ] { Ptg . CLASS_VALUE } ; functionData [ 140 ] [ 2 ] = new Integer ( 1 ) ; functionData [ 141 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 141 ] [ 1 ] = new byte [ ] { Ptg . CLASS_VALUE } ; functionData [ 141 ] [ 2 ] = new Integer ( 1 ) ; functionData [ 142 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 142 ] [ 1 ] = new byte [ ] { Ptg . CLASS_VALUE } ; functionData [ 142 ] [ 2 ] = new Integer ( 3 ) ; functionData [ 148 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 148 ] [ 1 ] = new byte [ ] { Ptg . CLASS_VALUE } ; functionData [ 148 ] [ 2 ] = new Integer ( - 1 ) ; functionData [ 150 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 150 ] [ 1 ] = new byte [ ] { Ptg . CLASS_VALUE } ; functionData [ 150 ] [ 2 ] = new Integer ( - 1 ) ; functionData [ 162 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 162 ] [ 1 ] = new byte [ ] { Ptg . CLASS_VALUE } ; functionData [ 162 ] [ 2 ] = new Integer ( 1 ) ; functionData [ 163 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 163 ] [ 1 ] = new byte [ ] { Ptg . CLASS_ARRAY } ; functionData [ 163 ] [ 2 ] = new Integer ( 1 ) ; functionData [ 164 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 164 ] [ 1 ] = new byte [ ] { Ptg . CLASS_ARRAY } ; functionData [ 164 ] [ 2 ] = new Integer ( 1 ) ; functionData [ 165 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 165 ] [ 1 ] = new byte [ ] { Ptg . CLASS_ARRAY } ; functionData [ 165 ] [ 2 ] = new Integer ( 2 ) ; functionData [ 166 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 166 ] [ 1 ] = new byte [ ] { Ptg . CLASS_VALUE } ; functionData [ 166 ] [ 2 ] = new Integer ( - 1 ) ; functionData [ 167 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 167 ] [ 1 ] = new byte [ ] { Ptg . CLASS_VALUE } ; functionData [ 167 ] [ 2 ] = new Integer ( - 1 ) ; functionData [ 168 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 168 ] [ 1 ] = new byte [ ] { Ptg . CLASS_REF } ; functionData [ 168 ] [ 2 ] = new Integer ( - 1 ) ; functionData [ 183 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 183 ] [ 1 ] = new byte [ ] { Ptg . CLASS_REF } ; functionData [ 183 ] [ 2 ] = new Integer ( - 1 ) ; functionData [ 184 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 184 ] [ 1 ] = new byte [ ] { Ptg . CLASS_VALUE } ; functionData [ 184 ] [ 2 ] = new Integer ( 1 ) ; functionData [ 189 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 189 ] [ 1 ] = new byte [ ] { Ptg . CLASS_REF } ; functionData [ 189 ] [ 2 ] = new Integer ( 3 ) ; functionData [ 190 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 190 ] [ 1 ] = new byte [ ] { Ptg . CLASS_VALUE } ; functionData [ 190 ] [ 2 ] = new Integer ( 1 ) ; functionData [ 193 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 193 ] [ 1 ] = new byte [ ] { Ptg . CLASS_REF } ; functionData [ 193 ] [ 2 ] = new Integer ( - 1 ) ; functionData [ 194 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 194 ] [ 1 ] = new byte [ ] { Ptg . CLASS_REF } ; functionData [ 194 ] [ 2 ] = new Integer ( - 1 ) ; functionData [ 195 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 195 ] [ 1 ] = new byte [ ] { Ptg . CLASS_REF } ; functionData [ 195 ] [ 2 ] = new Integer ( 3 ) ; functionData [ 196 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 196 ] [ 1 ] = new byte [ ] { Ptg . CLASS_REF } ; functionData [ 196 ] [ 2 ] = new Integer ( 3 ) ; functionData [ 197 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 197 ] [ 1 ] = new byte [ ] { Ptg . CLASS_VALUE } ; functionData [ 197 ] [ 2 ] = new Integer ( - 1 ) ; functionData [ 198 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 198 ] [ 1 ] = new byte [ ] { Ptg . CLASS_VALUE } ; functionData [ 198 ] [ 2 ] = new Integer ( 1 ) ; functionData [ 199 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 199 ] [ 1 ] = new byte [ ] { Ptg . CLASS_REF } ; functionData [ 199 ] [ 2 ] = new Integer ( 3 ) ; functionData [ 204 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 204 ] [ 1 ] = new byte [ ] { Ptg . CLASS_VALUE } ; functionData [ 204 ] [ 2 ] = new Integer ( - 1 ) ; functionData [ 205 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 205 ] [ 1 ] = new byte [ ] { Ptg . CLASS_VALUE } ; functionData [ 205 ] [ 2 ] = new Integer ( - 1 ) ; functionData [ 206 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 206 ] [ 1 ] = new byte [ ] { Ptg . CLASS_VALUE } ; functionData [ 206 ] [ 2 ] = new Integer ( - 1 ) ; functionData [ 207 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 207 ] [ 1 ] = new byte [ ] { Ptg . CLASS_VALUE } ; functionData [ 207 ] [ 2 ] = new Integer ( 3 ) ; functionData [ 208 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 208 ] [ 1 ] = new byte [ ] { Ptg . CLASS_VALUE } ; functionData [ 208 ] [ 2 ] = new Integer ( 1 ) ; functionData [ 209 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 209 ] [ 1 ] = new byte [ ] { Ptg . CLASS_VALUE } ; functionData [ 209 ] [ 2 ] = new Integer ( 2 ) ; functionData [ 210 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 210 ] [ 1 ] = new byte [ ] { Ptg . CLASS_VALUE } ; functionData [ 210 ] [ 2 ] = new Integer ( 2 ) ; functionData [ 211 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 211 ] [ 1 ] = new byte [ ] { Ptg . CLASS_VALUE } ; functionData [ 211 ] [ 2 ] = new Integer ( 1 ) ; functionData [ 212 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 212 ] [ 1 ] = new byte [ ] { Ptg . CLASS_VALUE } ; functionData [ 212 ] [ 2 ] = new Integer ( 2 ) ; functionData [ 213 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 213 ] [ 1 ] = new byte [ ] { Ptg . CLASS_REF } ; functionData [ 213 ] [ 2 ] = new Integer ( 2 ) ; functionData [ 214 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 214 ] [ 1 ] = new byte [ ] { Ptg . CLASS_VALUE } ; functionData [ 214 ] [ 2 ] = new Integer ( - 1 ) ; functionData [ 221 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 221 ] [ 1 ] = new byte [ ] { Ptg . CLASS_REF } ; functionData [ 221 ] [ 2 ] = new Integer ( 1 ) ; functionData [ 222 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 222 ] [ 1 ] = new byte [ ] { Ptg . CLASS_VALUE } ; functionData [ 222 ] [ 2 ] = new Integer ( - 1 ) ; functionData [ 227 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 227 ] [ 1 ] = new byte [ ] { Ptg . CLASS_REF } ; functionData [ 227 ] [ 2 ] = new Integer ( - 1 ) ; functionData [ 228 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 228 ] [ 1 ] = new byte [ ] { Ptg . CLASS_ARRAY } ; functionData [ 228 ] [ 2 ] = new Integer ( - 1 ) ; functionData [ 229 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 229 ] [ 1 ] = new byte [ ] { Ptg . CLASS_VALUE } ; functionData [ 229 ] [ 2 ] = new Integer ( 1 ) ; functionData [ 230 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 230 ] [ 1 ] = new byte [ ] { Ptg . CLASS_VALUE } ; functionData [ 230 ] [ 2 ] = new Integer ( 1 ) ; functionData [ 231 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 231 ] [ 1 ] = new byte [ ] { Ptg . CLASS_VALUE } ; functionData [ 231 ] [ 2 ] = new Integer ( 1 ) ; functionData [ 232 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 232 ] [ 1 ] = new byte [ ] { Ptg . CLASS_VALUE } ; functionData [ 232 ] [ 2 ] = new Integer ( 1 ) ; functionData [ 233 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 233 ] [ 1 ] = new byte [ ] { Ptg . CLASS_VALUE } ; functionData [ 233 ] [ 2 ] = new Integer ( 1 ) ; functionData [ 234 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 234 ] [ 1 ] = new byte [ ] { Ptg . CLASS_VALUE } ; functionData [ 234 ] [ 2 ] = new Integer ( 1 ) ; functionData [ 235 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 235 ] [ 1 ] = new byte [ ] { Ptg . CLASS_REF } ; functionData [ 235 ] [ 2 ] = new Integer ( 3 ) ; functionData [ 244 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 244 ] [ 1 ] = new byte [ ] { Ptg . CLASS_VALUE } ; functionData [ 244 ] [ 2 ] = new Integer ( 2 ) ; functionData [ 252 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 252 ] [ 1 ] = new byte [ ] { Ptg . CLASS_REF } ; functionData [ 252 ] [ 2 ] = new Integer ( 2 ) ; functionData [ 261 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 261 ] [ 1 ] = new byte [ ] { Ptg . CLASS_VALUE } ; functionData [ 261 ] [ 2 ] = new Integer ( 1 ) ; functionData [ 269 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 269 ] [ 1 ] = new byte [ ] { Ptg . CLASS_REF } ; functionData [ 269 ] [ 2 ] = new Integer ( - 1 ) ; functionData [ 270 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 270 ] [ 1 ] = new byte [ ] { Ptg . CLASS_VALUE } ; functionData [ 270 ] [ 2 ] = new Integer ( - 1 ) ; functionData [ 271 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 271 ] [ 1 ] = new byte [ ] { Ptg . CLASS_VALUE } ; functionData [ 271 ] [ 2 ] = new Integer ( 1 ) ; functionData [ 272 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 272 ] [ 1 ] = new byte [ ] { Ptg . CLASS_VALUE } ; functionData [ 272 ] [ 2 ] = new Integer ( - 1 ) ; functionData [ 273 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 273 ] [ 1 ] = new byte [ ] { Ptg . CLASS_VALUE } ; functionData [ 273 ] [ 2 ] = new Integer ( 4 ) ; functionData [ 274 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 274 ] [ 1 ] = new byte [ ] { Ptg . CLASS_VALUE } ; functionData [ 274 ] [ 2 ] = new Integer ( 2 ) ; functionData [ 275 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 275 ] [ 1 ] = new byte [ ] { Ptg . CLASS_VALUE } ; functionData [ 275 ] [ 2 ] = new Integer ( 2 ) ; functionData [ 276 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 276 ] [ 1 ] = new byte [ ] { Ptg . CLASS_VALUE } ; functionData [ 276 ] [ 2 ] = new Integer ( 2 ) ; functionData [ 277 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 277 ] [ 1 ] = new byte [ ] { Ptg . CLASS_VALUE } ; functionData [ 277 ] [ 2 ] = new Integer ( 3 ) ; functionData [ 278 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 278 ] [ 1 ] = new byte [ ] { Ptg . CLASS_VALUE } ; functionData [ 278 ] [ 2 ] = new Integer ( 3 ) ; functionData [ 279 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 279 ] [ 1 ] = new byte [ ] { Ptg . CLASS_VALUE } ; functionData [ 279 ] [ 2 ] = new Integer ( 1 ) ; functionData [ 280 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 280 ] [ 1 ] = new byte [ ] { Ptg . CLASS_VALUE } ; functionData [ 280 ] [ 2 ] = new Integer ( 3 ) ; functionData [ 281 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 281 ] [ 1 ] = new byte [ ] { Ptg . CLASS_VALUE } ; functionData [ 281 ] [ 2 ] = new Integer ( 3 ) ; functionData [ 282 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 282 ] [ 1 ] = new byte [ ] { Ptg . CLASS_VALUE } ; functionData [ 282 ] [ 2 ] = new Integer ( 3 ) ; functionData [ 283 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 283 ] [ 1 ] = new byte [ ] { Ptg . CLASS_VALUE } ; functionData [ 283 ] [ 2 ] = new Integer ( 1 ) ; functionData [ 284 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 284 ] [ 1 ] = new byte [ ] { Ptg . CLASS_VALUE } ; functionData [ 284 ] [ 2 ] = new Integer ( 1 ) ; functionData [ 285 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 285 ] [ 1 ] = new byte [ ] { Ptg . CLASS_VALUE } ; functionData [ 285 ] [ 2 ] = new Integer ( 2 ) ; functionData [ 286 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 286 ] [ 1 ] = new byte [ ] { Ptg . CLASS_VALUE } ; functionData [ 286 ] [ 2 ] = new Integer ( 4 ) ; functionData [ 287 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 287 ] [ 1 ] = new byte [ ] { Ptg . CLASS_VALUE } ; functionData [ 287 ] [ 2 ] = new Integer ( 3 ) ; functionData [ 288 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 288 ] [ 1 ] = new byte [ ] { Ptg . CLASS_VALUE } ; functionData [ 288 ] [ 2 ] = new Integer ( 2 ) ; functionData [ 289 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 289 ] [ 1 ] = new byte [ ] { Ptg . CLASS_VALUE } ; functionData [ 289 ] [ 2 ] = new Integer ( 4 ) ; functionData [ 290 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 290 ] [ 1 ] = new byte [ ] { Ptg . CLASS_VALUE } ; functionData [ 290 ] [ 2 ] = new Integer ( 3 ) ; functionData [ 291 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 291 ] [ 1 ] = new byte [ ] { Ptg . CLASS_VALUE } ; functionData [ 291 ] [ 2 ] = new Integer ( 3 ) ; functionData [ 292 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 292 ] [ 1 ] = new byte [ ] { Ptg . CLASS_VALUE } ; functionData [ 292 ] [ 2 ] = new Integer ( 3 ) ; functionData [ 293 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 293 ] [ 1 ] = new byte [ ] { Ptg . CLASS_VALUE } ; functionData [ 293 ] [ 2 ] = new Integer ( 4 ) ; functionData [ 294 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 294 ] [ 1 ] = new byte [ ] { Ptg . CLASS_VALUE } ; functionData [ 294 ] [ 2 ] = new Integer ( 1 ) ; functionData [ 295 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 295 ] [ 1 ] = new byte [ ] { Ptg . CLASS_VALUE } ; functionData [ 295 ] [ 2 ] = new Integer ( 3 ) ; functionData [ 296 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 296 ] [ 1 ] = new byte [ ] { Ptg . CLASS_VALUE } ; functionData [ 296 ] [ 2 ] = new Integer ( 1 ) ; functionData [ 297 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 297 ] [ 1 ] = new byte [ ] { Ptg . CLASS_VALUE } ; functionData [ 297 ] [ 2 ] = new Integer ( 3 ) ; functionData [ 298 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 298 ] [ 1 ] = new byte [ ] { Ptg . CLASS_VALUE } ; functionData [ 298 ] [ 2 ] = new Integer ( 1 ) ; functionData [ 299 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 299 ] [ 1 ] = new byte [ ] { Ptg . CLASS_VALUE } ; functionData [ 299 ] [ 2 ] = new Integer ( 2 ) ; functionData [ 300 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 300 ] [ 1 ] = new byte [ ] { Ptg . CLASS_VALUE } ; functionData [ 300 ] [ 2 ] = new Integer ( 3 ) ; functionData [ 301 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 301 ] [ 1 ] = new byte [ ] { Ptg . CLASS_VALUE } ; functionData [ 301 ] [ 2 ] = new Integer ( 3 ) ; functionData [ 302 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 302 ] [ 1 ] = new byte [ ] { Ptg . CLASS_VALUE } ; functionData [ 302 ] [ 2 ] = new Integer ( 4 ) ; functionData [ 303 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 303 ] [ 1 ] = new byte [ ] { Ptg . CLASS_ARRAY } ; functionData [ 303 ] [ 2 ] = new Integer ( 2 ) ; functionData [ 304 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 304 ] [ 1 ] = new byte [ ] { Ptg . CLASS_ARRAY } ; functionData [ 304 ] [ 2 ] = new Integer ( 2 ) ; functionData [ 305 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 305 ] [ 1 ] = new byte [ ] { Ptg . CLASS_ARRAY } ; functionData [ 305 ] [ 2 ] = new Integer ( 2 ) ; functionData [ 306 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 306 ] [ 1 ] = new byte [ ] { Ptg . CLASS_ARRAY } ; functionData [ 306 ] [ 2 ] = new Integer ( 2 ) ; functionData [ 307 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 307 ] [ 1 ] = new byte [ ] { Ptg . CLASS_ARRAY } ; functionData [ 307 ] [ 2 ] = new Integer ( 2 ) ; functionData [ 308 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 308 ] [ 1 ] = new byte [ ] { Ptg . CLASS_ARRAY } ; functionData [ 308 ] [ 2 ] = new Integer ( 2 ) ; functionData [ 309 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 309 ] [ 1 ] = new byte [ ] { Ptg . CLASS_ARRAY } ; functionData [ 309 ] [ 2 ] = new Integer ( 3 ) ; functionData [ 310 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 310 ] [ 1 ] = new byte [ ] { Ptg . CLASS_ARRAY } ; functionData [ 310 ] [ 2 ] = new Integer ( 2 ) ; functionData [ 311 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 311 ] [ 1 ] = new byte [ ] { Ptg . CLASS_ARRAY } ; functionData [ 311 ] [ 2 ] = new Integer ( 2 ) ; functionData [ 312 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 312 ] [ 1 ] = new byte [ ] { Ptg . CLASS_ARRAY } ; functionData [ 312 ] [ 2 ] = new Integer ( 2 ) ; functionData [ 313 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 313 ] [ 1 ] = new byte [ ] { Ptg . CLASS_ARRAY } ; functionData [ 313 ] [ 2 ] = new Integer ( 2 ) ; functionData [ 314 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 314 ] [ 1 ] = new byte [ ] { Ptg . CLASS_ARRAY } ; functionData [ 314 ] [ 2 ] = new Integer ( 2 ) ; functionData [ 315 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 315 ] [ 1 ] = new byte [ ] { Ptg . CLASS_ARRAY } ; functionData [ 315 ] [ 2 ] = new Integer ( 2 ) ; functionData [ 316 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 316 ] [ 1 ] = new byte [ ] { Ptg . CLASS_VALUE } ; functionData [ 316 ] [ 2 ] = new Integer ( 4 ) ; functionData [ 317 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 317 ] [ 1 ] = new byte [ ] { Ptg . CLASS_VALUE } ; functionData [ 317 ] [ 2 ] = new Integer ( - 1 ) ; functionData [ 318 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 318 ] [ 1 ] = new byte [ ] { Ptg . CLASS_REF } ; functionData [ 318 ] [ 2 ] = new Integer ( - 1 ) ; functionData [ 319 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 319 ] [ 1 ] = new byte [ ] { Ptg . CLASS_REF } ; functionData [ 319 ] [ 2 ] = new Integer ( - 1 ) ; functionData [ 320 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 320 ] [ 1 ] = new byte [ ] { Ptg . CLASS_REF } ; functionData [ 320 ] [ 2 ] = new Integer ( - 1 ) ; functionData [ 321 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 321 ] [ 1 ] = new byte [ ] { Ptg . CLASS_REF } ; functionData [ 321 ] [ 2 ] = new Integer ( - 1 ) ; functionData [ 322 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 322 ] [ 1 ] = new byte [ ] { Ptg . CLASS_REF } ; functionData [ 322 ] [ 2 ] = new Integer ( - 1 ) ; functionData [ 323 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 323 ] [ 1 ] = new byte [ ] { Ptg . CLASS_REF } ; functionData [ 323 ] [ 2 ] = new Integer ( - 1 ) ; functionData [ 324 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 324 ] [ 1 ] = new byte [ ] { Ptg . CLASS_VALUE } ; functionData [ 324 ] [ 2 ] = new Integer ( - 1 ) ; functionData [ 325 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 325 ] [ 1 ] = new byte [ ] { Ptg . CLASS_VALUE } ; functionData [ 325 ] [ 2 ] = new Integer ( 2 ) ; functionData [ 326 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 326 ] [ 1 ] = new byte [ ] { Ptg . CLASS_VALUE } ; functionData [ 326 ] [ 2 ] = new Integer ( 2 ) ; functionData [ 327 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 327 ] [ 1 ] = new byte [ ] { Ptg . CLASS_VALUE } ; functionData [ 327 ] [ 2 ] = new Integer ( 2 ) ; functionData [ 328 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 328 ] [ 1 ] = new byte [ ] { Ptg . CLASS_VALUE } ; functionData [ 328 ] [ 2 ] = new Integer ( 2 ) ; functionData [ 329 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 329 ] [ 1 ] = new byte [ ] { Ptg . CLASS_VALUE } ; functionData [ 329 ] [ 2 ] = new Integer ( - 1 ) ; functionData [ 330 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 330 ] [ 1 ] = new byte [ ] { Ptg . CLASS_ARRAY } ; functionData [ 330 ] [ 2 ] = new Integer ( - 1 ) ; functionData [ 331 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 331 ] [ 1 ] = new byte [ ] { Ptg . CLASS_VALUE } ; functionData [ 331 ] [ 2 ] = new Integer ( 2 ) ; functionData [ 332 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 332 ] [ 1 ] = new byte [ ] { Ptg . CLASS_VALUE } ; functionData [ 332 ] [ 2 ] = new Integer ( 2 ) ; functionData [ 336 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 336 ] [ 1 ] = new byte [ ] { Ptg . CLASS_VALUE } ; functionData [ 336 ] [ 2 ] = new Integer ( - 1 ) ; functionData [ 337 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 337 ] [ 1 ] = new byte [ ] { Ptg . CLASS_VALUE } ; functionData [ 337 ] [ 2 ] = new Integer ( 2 ) ; functionData [ 342 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 342 ] [ 1 ] = new byte [ ] { Ptg . CLASS_VALUE } ; functionData [ 342 ] [ 2 ] = new Integer ( 1 ) ; functionData [ 343 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 343 ] [ 1 ] = new byte [ ] { Ptg . CLASS_VALUE } ; functionData [ 343 ] [ 2 ] = new Integer ( 1 ) ; functionData [ 344 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 344 ] [ 1 ] = new byte [ ] { Ptg . CLASS_REF } ; functionData [ 344 ] [ 2 ] = new Integer ( - 1 ) ; functionData [ 345 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 345 ] [ 1 ] = new byte [ ] { Ptg . CLASS_REF } ; functionData [ 345 ] [ 2 ] = new Integer ( - 1 ) ; functionData [ 346 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 346 ] [ 1 ] = new byte [ ] { Ptg . CLASS_VALUE } ; functionData [ 346 ] [ 2 ] = new Integer ( 2 ) ; functionData [ 347 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 347 ] [ 1 ] = new byte [ ] { Ptg . CLASS_REF } ; functionData [ 347 ] [ 2 ] = new Integer ( 1 ) ; functionData [ 350 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 350 ] [ 1 ] = new byte [ ] { Ptg . CLASS_VALUE } ; functionData [ 350 ] [ 2 ] = new Integer ( 4 ) ; functionData [ 352 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 352 ] [ 1 ] = new byte [ ] { Ptg . CLASS_VALUE } ; functionData [ 352 ] [ 2 ] = new Integer ( 1 ) ; functionData [ 354 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 354 ] [ 1 ] = new byte [ ] { Ptg . CLASS_VALUE } ; functionData [ 354 ] [ 2 ] = new Integer ( - 1 ) ; functionData [ 358 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 358 ] [ 1 ] = new byte [ ] { Ptg . CLASS_VALUE } ; functionData [ 358 ] [ 2 ] = new Integer ( 2 ) ; functionData [ 359 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 359 ] [ 1 ] = new byte [ ] { Ptg . CLASS_VALUE } ; functionData [ 359 ] [ 2 ] = new Integer ( - 1 ) ; functionData [ 360 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 360 ] [ 1 ] = new byte [ ] { Ptg . CLASS_REF } ; functionData [ 360 ] [ 2 ] = new Integer ( 1 ) ; functionData [ 361 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 361 ] [ 1 ] = new byte [ ] { Ptg . CLASS_REF } ; functionData [ 361 ] [ 2 ] = new Integer ( - 1 ) ; functionData [ 362 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 362 ] [ 1 ] = new byte [ ] { Ptg . CLASS_REF } ; functionData [ 362 ] [ 2 ] = new Integer ( - 1 ) ; functionData [ 363 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 363 ] [ 1 ] = new byte [ ] { Ptg . CLASS_REF } ; functionData [ 363 ] [ 2 ] = new Integer ( - 1 ) ; functionData [ 364 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 364 ] [ 1 ] = new byte [ ] { Ptg . CLASS_REF } ; functionData [ 364 ] [ 2 ] = new Integer ( - 1 ) ; functionData [ 365 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 365 ] [ 1 ] = new byte [ ] { Ptg . CLASS_REF } ; functionData [ 365 ] [ 2 ] = new Integer ( - 1 ) ; functionData [ 366 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 366 ] [ 1 ] = new byte [ ] { Ptg . CLASS_REF } ; functionData [ 366 ] [ 2 ] = new Integer ( - 1 ) ; functionData [ 367 ] [ 0 ] = new Byte ( Ptg . CLASS_VALUE ) ; functionData [ 367 ] [ 1 ] = new byte [ ] { Ptg . CLASS_REF } ; functionData [ 367 ] [ 2 ] = new Integer ( - 1 ) ; return functionData ; } public byte getDefaultOperandClass ( ) { return returnClass ; } public byte getParameterClass ( int index ) { try { return paramClass [ index ] ; } catch ( ArrayIndexOutOfBoundsException aioobe ) { return paramClass [ paramClass . length - 1 ] ; } } } 	1
package org . apache . poi . ddf ; import org . apache . poi . hssf . record . RecordFormatException ; import org . apache . poi . util . HexDump ; import org . apache . poi . util . LittleEndian ; public class EscherTextboxRecord extends EscherRecord { public static final short RECORD_ID = ( short ) 0xF00D ; public static final String RECORD_DESCRIPTION = "msofbtClientTextbox" ; private static final byte [ ] NO_BYTES = new byte [ 0 ] ; private byte [ ] thedata = NO_BYTES ; public EscherTextboxRecord ( ) { } public int fillFields ( byte [ ] data , int offset , EscherRecordFactory recordFactory ) { int bytesRemaining = readHeader ( data , offset ) ; thedata = new byte [ bytesRemaining ] ; System . arraycopy ( data , offset + 8 , thedata , 0 , bytesRemaining ) ; return bytesRemaining + 8 ; } public int serialize ( int offset , byte [ ] data , EscherSerializationListener listener ) { listener . beforeRecordSerialize ( offset , getRecordId ( ) , this ) ; LittleEndian . putShort ( data , offset , getOptions ( ) ) ; LittleEndian . putShort ( data , offset + 2 , getRecordId ( ) ) ; int remainingBytes = thedata . length ; LittleEndian . putInt ( data , offset + 4 , remainingBytes ) ; System . arraycopy ( thedata , 0 , data , offset + 8 , thedata . length ) ; int pos = offset + 8 + thedata . length ; listener . afterRecordSerialize ( pos , getRecordId ( ) , pos - offset , this ) ; int size = pos - offset ; if ( size != getRecordSize ( ) ) throw new RecordFormatException ( size + " bytes written but getRecordSize() reports " + getRecordSize ( ) ) ; return size ; } public byte [ ] getData ( ) { return thedata ; } public void setData ( byte [ ] b , int start , int length ) { thedata = new byte [ length ] ; System . arraycopy ( b , start , thedata , 0 , length ) ; } public void setData ( byte [ ] b ) { setData ( b , 0 , b . length ) ; } public int getRecordSize ( ) { return 8 + thedata . length ; } public Object clone ( ) { return super . clone ( ) ; } public String getRecordName ( ) { return "ClientTextbox" ; } public String toString ( ) { String nl = System . getProperty ( "line.separator" ) ; String theDumpHex = "" ; try { if ( thedata . length != 0 ) { theDumpHex = "  Extra Data:" + nl ; theDumpHex += HexDump . dump ( thedata , 0 , 0 ) ; } } catch ( Exception e ) { theDumpHex = "Error!!" ; } return getClass ( ) . getName ( ) + ":" + nl + "  isContainer: " + isContainerRecord ( ) + nl + "  options: 0x" + HexDump . toHex ( getOptions ( ) ) + nl + "  recordId: 0x" + HexDump . toHex ( getRecordId ( ) ) + nl + "  numchildren: " + getChildRecords ( ) . size ( ) + nl + theDumpHex ; } } 	1
package org . apache . poi . hssf . model ; import org . apache . poi . ddf . EscherDgRecord ; import org . apache . poi . ddf . EscherDggRecord ; import java . util . List ; import java . util . ArrayList ; public class DrawingManager2 { EscherDggRecord dgg ; List drawingGroups = new ArrayList ( ) ; public DrawingManager2 ( EscherDggRecord dgg ) { this . dgg = dgg ; } public EscherDgRecord createDgRecord ( ) { EscherDgRecord dg = new EscherDgRecord ( ) ; dg . setRecordId ( EscherDgRecord . RECORD_ID ) ; short dgId = findNewDrawingGroupId ( ) ; dg . setOptions ( ( short ) ( dgId << 4 ) ) ; dg . setNumShapes ( 0 ) ; dg . setLastMSOSPID ( - 1 ) ; drawingGroups . add ( dg ) ; dgg . addCluster ( dgId , 0 ) ; dgg . setDrawingsSaved ( dgg . getDrawingsSaved ( ) + 1 ) ; return dg ; } public int allocateShapeId ( short drawingGroupId ) { dgg . setNumShapesSaved ( dgg . getNumShapesSaved ( ) + 1 ) ; for ( int i = 0 ; i < dgg . getFileIdClusters ( ) . length ; i ++ ) { EscherDggRecord . FileIdCluster c = dgg . getFileIdClusters ( ) [ i ] ; if ( c . getDrawingGroupId ( ) == drawingGroupId && c . getNumShapeIdsUsed ( ) != 1024 ) { int result = c . getNumShapeIdsUsed ( ) + ( 1024 * ( i + 1 ) ) ; c . incrementShapeId ( ) ; EscherDgRecord dg = getDrawingGroup ( drawingGroupId ) ; dg . setNumShapes ( dg . getNumShapes ( ) + 1 ) ; dg . setLastMSOSPID ( result ) ; if ( result >= dgg . getShapeIdMax ( ) ) dgg . setShapeIdMax ( result + 1 ) ; return result ; } } dgg . addCluster ( drawingGroupId , 0 ) ; dgg . getFileIdClusters ( ) [ dgg . getFileIdClusters ( ) . length - 1 ] . incrementShapeId ( ) ; EscherDgRecord dg = getDrawingGroup ( drawingGroupId ) ; dg . setNumShapes ( dg . getNumShapes ( ) + 1 ) ; int result = ( 1024 * dgg . getFileIdClusters ( ) . length ) ; dg . setLastMSOSPID ( result ) ; if ( result >= dgg . getShapeIdMax ( ) ) dgg . setShapeIdMax ( result + 1 ) ; return result ; } short findNewDrawingGroupId ( ) { short dgId = 1 ; while ( drawingGroupExists ( dgId ) ) dgId ++ ; return dgId ; } EscherDgRecord getDrawingGroup ( int drawingGroupId ) { return ( EscherDgRecord ) drawingGroups . get ( drawingGroupId - 1 ) ; } boolean drawingGroupExists ( short dgId ) { for ( int i = 0 ; i < dgg . getFileIdClusters ( ) . length ; i ++ ) { if ( dgg . getFileIdClusters ( ) [ i ] . getDrawingGroupId ( ) == dgId ) return true ; } return false ; } int findFreeSPIDBlock ( ) { int max = dgg . getShapeIdMax ( ) ; int next = ( ( max / 1024 ) + 1 ) * 1024 ; return next ; } public EscherDggRecord getDgg ( ) { return dgg ; } } 	0
package org . apache . poi . hssf . record . formula ; import org . apache . poi . hssf . model . Workbook ; import org . apache . poi . hssf . record . RecordInputStream ; public class MultiplyPtg extends OperationPtg { public final static int SIZE = 1 ; public final static byte sid = 0x05 ; public MultiplyPtg ( ) { } public MultiplyPtg ( RecordInputStream in ) { } public void writeBytes ( byte [ ] array , int offset ) { array [ offset + 0 ] = sid ; } public int getSize ( ) { return SIZE ; } public int getType ( ) { return TYPE_BINARY ; } public int getNumberOfOperands ( ) { return 2 ; } public int getStringLength ( ) { return 1 ; } public String toFormulaString ( Workbook book ) { return "*" ; } public String toFormulaString ( Ptg [ ] operands ) { StringBuffer buffer = new StringBuffer ( ) ; buffer . append ( operands [ 0 ] . toFormulaString ( ( Workbook ) null ) ) ; buffer . append ( "*" ) ; buffer . append ( operands [ 1 ] . toFormulaString ( ( Workbook ) null ) ) ; return buffer . toString ( ) ; } public String toFormulaString ( String [ ] operands ) { StringBuffer buffer = new StringBuffer ( ) ; buffer . append ( operands [ 0 ] ) ; buffer . append ( toFormulaString ( ( Workbook ) null ) ) ; buffer . append ( operands [ 1 ] ) ; return buffer . toString ( ) ; } public Object clone ( ) { return new MultiplyPtg ( ) ; } } 	0
package org . apache . poi . hssf . usermodel ; import java . util . HashMap ; import java . util . Map ; import java . util . Properties ; import java . util . StringTokenizer ; public class FontDetails { private String fontName ; private int height ; private Map charWidths = new HashMap ( ) ; public FontDetails ( String fontName , int height ) { this . fontName = fontName ; this . height = height ; } public String getFontName ( ) { return fontName ; } public int getHeight ( ) { return height ; } public void addChar ( char c , int width ) { charWidths . put ( new Character ( c ) , new Integer ( width ) ) ; } public int getCharWidth ( char c ) { Integer widthInteger = ( Integer ) ( charWidths . get ( new Character ( c ) ) ) ; if ( widthInteger == null && c != 'W' ) return getCharWidth ( 'W' ) ; else return widthInteger . intValue ( ) ; } public void addChars ( char [ ] characters , int [ ] widths ) { for ( int i = 0 ; i < characters . length ; i ++ ) { charWidths . put ( new Character ( characters [ i ] ) , new Integer ( widths [ i ] ) ) ; } } public static FontDetails create ( String fontName , Properties fontMetricsProps ) { String heightStr = fontMetricsProps . getProperty ( "font." + fontName + ".height" ) ; String widthsStr = fontMetricsProps . getProperty ( "font." + fontName + ".widths" ) ; String charactersStr = fontMetricsProps . getProperty ( "font." + fontName + ".characters" ) ; int height = Integer . parseInt ( heightStr ) ; FontDetails d = new FontDetails ( fontName , height ) ; String [ ] charactersStrArray = split ( charactersStr , "," , - 1 ) ; String [ ] widthsStrArray = split ( widthsStr , "," , - 1 ) ; if ( charactersStrArray . length != widthsStrArray . length ) throw new RuntimeException ( "Number of characters does not number of widths for font " + fontName ) ; for ( int i = 0 ; i < widthsStrArray . length ; i ++ ) { if ( charactersStrArray [ i ] . length ( ) != 0 ) d . addChar ( charactersStrArray [ i ] . charAt ( 0 ) , Integer . parseInt ( widthsStrArray [ i ] ) ) ; } return d ; } public int getStringWidth ( String str ) { int width = 0 ; for ( int i = 0 ; i < str . length ( ) ; i ++ ) { width += getCharWidth ( str . charAt ( i ) ) ; } return width ; } private static String [ ] split ( String text , String separator , int max ) { StringTokenizer tok = new StringTokenizer ( text , separator ) ; int listSize = tok . countTokens ( ) ; if ( max != - 1 && listSize > max ) listSize = max ; String list [ ] = new String [ listSize ] ; for ( int i = 0 ; tok . hasMoreTokens ( ) ; i ++ ) { if ( max != - 1 && i == listSize - 1 ) { StringBuffer buf = new StringBuffer ( ( text . length ( ) * ( listSize - i ) ) / listSize ) ; while ( tok . hasMoreTokens ( ) ) { buf . append ( tok . nextToken ( ) ) ; if ( tok . hasMoreTokens ( ) ) buf . append ( separator ) ; } list [ i ] = buf . toString ( ) . trim ( ) ; break ; } list [ i ] = tok . nextToken ( ) . trim ( ) ; } return list ; } } 	1
package org . apache . poi . hssf . record ; import java . util . ArrayList ; import org . apache . poi . hssf . util . RKUtil ; public class MulRKRecord extends Record { public final static short sid = 0xbd ; private int field_1_row ; private short field_2_first_col ; private ArrayList field_3_rks ; private short field_4_last_col ; public MulRKRecord ( ) { } public MulRKRecord ( RecordInputStream in ) { super ( in ) ; } public int getRow ( ) { return field_1_row ; } public short getFirstColumn ( ) { return field_2_first_col ; } public short getLastColumn ( ) { return field_4_last_col ; } public int getNumColumns ( ) { return field_4_last_col - field_2_first_col + 1 ; } public short getXFAt ( int coffset ) { return ( ( RkRec ) field_3_rks . get ( coffset ) ) . xf ; } public double getRKNumberAt ( int coffset ) { return RKUtil . decodeNumber ( ( ( RkRec ) field_3_rks . get ( coffset ) ) . rk ) ; } protected void fillFields ( RecordInputStream in ) { field_1_row = in . readUShort ( ) ; field_2_first_col = in . readShort ( ) ; field_3_rks = parseRKs ( in ) ; field_4_last_col = in . readShort ( ) ; } private ArrayList parseRKs ( RecordInputStream in ) { ArrayList retval = new ArrayList ( ) ; while ( ( in . remaining ( ) - 2 ) > 0 ) { RkRec rec = new RkRec ( ) ; rec . xf = in . readShort ( ) ; rec . rk = in . readInt ( ) ; retval . add ( rec ) ; } return retval ; } public String toString ( ) { StringBuffer buffer = new StringBuffer ( ) ; buffer . append ( "[MULRK]\n" ) ; buffer . append ( "firstcol  = " ) . append ( Integer . toHexString ( getFirstColumn ( ) ) ) . append ( "\n" ) ; buffer . append ( " lastcol  = " ) . append ( Integer . toHexString ( getLastColumn ( ) ) ) . append ( "\n" ) ; for ( int k = 0 ; k < getNumColumns ( ) ; k ++ ) { buffer . append ( "xf" ) . append ( k ) . append ( "        = " ) . append ( Integer . toHexString ( getXFAt ( k ) ) ) . append ( "\n" ) ; buffer . append ( "rk" ) . append ( k ) . append ( "        = " ) . append ( getRKNumberAt ( k ) ) . append ( "\n" ) ; } buffer . append ( "[/MULRK]\n" ) ; return buffer . toString ( ) ; } protected void validateSid ( short id ) { if ( id != sid ) { throw new RecordFormatException ( "Not a MulRKRecord!" ) ; } } public short getSid ( ) { return sid ; } public int serialize ( int offset , byte [ ] data ) { throw new RecordFormatException ( "Sorry, you can't serialize a MulRK in this release" ) ; } } class RkRec { public short xf ; public int rk ; } 	1
package org . apache . poi . poifs . filesystem ; public class OfficeXmlFileException extends IllegalArgumentException { public OfficeXmlFileException ( String s ) { super ( s ) ; } } 	0
package org . apache . poi . ddf ; import org . apache . poi . util . LittleEndian ; import org . apache . poi . util . HexDump ; import java . util . * ; import java . io . IOException ; public class EscherOptRecord extends EscherRecord { public static final short RECORD_ID = ( short ) 0xF00B ; public static final String RECORD_DESCRIPTION = "msofbtOPT" ; private List properties = new ArrayList ( ) ; public int fillFields ( byte [ ] data , int offset , EscherRecordFactory recordFactory ) { int bytesRemaining = readHeader ( data , offset ) ; int pos = offset + 8 ; EscherPropertyFactory f = new EscherPropertyFactory ( ) ; properties = f . createProperties ( data , pos , getInstance ( ) ) ; return bytesRemaining + 8 ; } public int serialize ( int offset , byte [ ] data , EscherSerializationListener listener ) { listener . beforeRecordSerialize ( offset , getRecordId ( ) , this ) ; LittleEndian . putShort ( data , offset , getOptions ( ) ) ; LittleEndian . putShort ( data , offset + 2 , getRecordId ( ) ) ; LittleEndian . putInt ( data , offset + 4 , getPropertiesSize ( ) ) ; int pos = offset + 8 ; for ( Iterator iterator = properties . iterator ( ) ; iterator . hasNext ( ) ; ) { EscherProperty escherProperty = ( EscherProperty ) iterator . next ( ) ; pos += escherProperty . serializeSimplePart ( data , pos ) ; } for ( Iterator iterator = properties . iterator ( ) ; iterator . hasNext ( ) ; ) { EscherProperty escherProperty = ( EscherProperty ) iterator . next ( ) ; pos += escherProperty . serializeComplexPart ( data , pos ) ; } listener . afterRecordSerialize ( pos , getRecordId ( ) , pos - offset , this ) ; return pos - offset ; } public int getRecordSize ( ) { return 8 + getPropertiesSize ( ) ; } public short getOptions ( ) { setOptions ( ( short ) ( ( properties . size ( ) << 4 ) | 0x3 ) ) ; return super . getOptions ( ) ; } public String getRecordName ( ) { return "Opt" ; } private int getPropertiesSize ( ) { int totalSize = 0 ; for ( Iterator iterator = properties . iterator ( ) ; iterator . hasNext ( ) ; ) { EscherProperty escherProperty = ( EscherProperty ) iterator . next ( ) ; totalSize += escherProperty . getPropertySize ( ) ; } return totalSize ; } public String toString ( ) { String nl = System . getProperty ( "line.separator" ) ; StringBuffer propertiesBuf = new StringBuffer ( ) ; for ( Iterator iterator = properties . iterator ( ) ; iterator . hasNext ( ) ; ) propertiesBuf . append ( "    " + iterator . next ( ) . toString ( ) + nl ) ; return "org.apache.poi.ddf.EscherOptRecord:" + nl + "  isContainer: " + isContainerRecord ( ) + nl + "  options: 0x" + HexDump . toHex ( getOptions ( ) ) + nl + "  recordId: 0x" + HexDump . toHex ( getRecordId ( ) ) + nl + "  numchildren: " + getChildRecords ( ) . size ( ) + nl + "  properties:" + nl + propertiesBuf . toString ( ) ; } public List getEscherProperties ( ) { return properties ; } public EscherProperty getEscherProperty ( int index ) { return ( EscherProperty ) properties . get ( index ) ; } public void addEscherProperty ( EscherProperty prop ) { properties . add ( prop ) ; } public void sortProperties ( ) { Collections . sort ( properties , new Comparator ( ) { public int compare ( Object o1 , Object o2 ) { EscherProperty p1 = ( EscherProperty ) o1 ; EscherProperty p2 = ( EscherProperty ) o2 ; return new Short ( p1 . getPropertyNumber ( ) ) . compareTo ( new Short ( p2 . getPropertyNumber ( ) ) ) ; } } ) ; } } 	1
package org . apache . poi . hssf . record ; import org . apache . poi . util . * ; public class AxisLineFormatRecord extends Record { public final static short sid = 0x1021 ; private short field_1_axisType ; public final static short AXIS_TYPE_AXIS_LINE = 0 ; public final static short AXIS_TYPE_MAJOR_GRID_LINE = 1 ; public final static short AXIS_TYPE_MINOR_GRID_LINE = 2 ; public final static short AXIS_TYPE_WALLS_OR_FLOOR = 3 ; public AxisLineFormatRecord ( ) { } public AxisLineFormatRecord ( RecordInputStream in ) { super ( in ) ; } protected void validateSid ( short id ) { if ( id != sid ) { throw new RecordFormatException ( "Not a AxisLineFormat record" ) ; } } protected void fillFields ( RecordInputStream in ) { field_1_axisType = in . readShort ( ) ; } public String toString ( ) { StringBuffer buffer = new StringBuffer ( ) ; buffer . append ( "[AXISLINEFORMAT]\n" ) ; buffer . append ( "    .axisType             = " ) . append ( "0x" ) . append ( HexDump . toHex ( getAxisType ( ) ) ) . append ( " (" ) . append ( getAxisType ( ) ) . append ( " )" ) ; buffer . append ( System . getProperty ( "line.separator" ) ) ; buffer . append ( "[/AXISLINEFORMAT]\n" ) ; return buffer . toString ( ) ; } public int serialize ( int offset , byte [ ] data ) { int pos = 0 ; LittleEndian . putShort ( data , 0 + offset , sid ) ; LittleEndian . putShort ( data , 2 + offset , ( short ) ( getRecordSize ( ) - 4 ) ) ; LittleEndian . putShort ( data , 4 + offset + pos , field_1_axisType ) ; return getRecordSize ( ) ; } public int getRecordSize ( ) { return 4 + 2 ; } public short getSid ( ) { return sid ; } public Object clone ( ) { AxisLineFormatRecord rec = new AxisLineFormatRecord ( ) ; rec . field_1_axisType = field_1_axisType ; return rec ; } public short getAxisType ( ) { return field_1_axisType ; } public void setAxisType ( short field_1_axisType ) { this . field_1_axisType = field_1_axisType ; } } 	1
package org . apache . poi . hssf . record ; import java . util . ArrayList ; import java . util . Collections ; import java . util . HashMap ; import java . util . Iterator ; import java . util . List ; import java . util . Map ; import org . apache . poi . util . LittleEndian ; public class PageBreakRecord extends Record { public static final short HORIZONTAL_SID = ( short ) 0x1B ; public static final short VERTICAL_SID = ( short ) 0x1A ; public short sid ; private short numBreaks ; private List breaks ; private Map BreakMap ; public class Break { public short main ; public short subFrom ; public short subTo ; public Break ( short main , short subFrom , short subTo ) { this . main = main ; this . subFrom = subFrom ; this . subTo = subTo ; } } public PageBreakRecord ( ) { } public PageBreakRecord ( short sid ) { super ( ) ; this . sid = sid ; } public PageBreakRecord ( RecordInputStream in ) { super ( in ) ; this . sid = in . getSid ( ) ; } protected void fillFields ( RecordInputStream in ) { short loadedBreaks = in . readShort ( ) ; setNumBreaks ( loadedBreaks ) ; for ( int k = 0 ; k < loadedBreaks ; k ++ ) { addBreak ( ( short ) ( in . readShort ( ) - 1 ) , in . readShort ( ) , in . readShort ( ) ) ; } } public short getSid ( ) { return sid ; } public int serialize ( int offset , byte data [ ] ) { int recordsize = getRecordSize ( ) ; int pos = 6 ; LittleEndian . putShort ( data , offset + 0 , getSid ( ) ) ; LittleEndian . putShort ( data , offset + 2 , ( short ) ( recordsize - 4 ) ) ; LittleEndian . putShort ( data , offset + 4 , getNumBreaks ( ) ) ; for ( Iterator iterator = getBreaksIterator ( ) ; iterator . hasNext ( ) ; ) { Break Break = ( Break ) iterator . next ( ) ; LittleEndian . putShort ( data , offset + pos , ( short ) ( Break . main + 1 ) ) ; pos += 2 ; LittleEndian . putShort ( data , offset + pos , Break . subFrom ) ; pos += 2 ; LittleEndian . putShort ( data , offset + pos , Break . subTo ) ; pos += 2 ; } return recordsize ; } protected void validateSid ( short id ) { if ( id != HORIZONTAL_SID && id != VERTICAL_SID ) throw new RecordFormatException ( "NOT A HorizontalPageBreak or VerticalPageBreak RECORD!! " + id ) ; else return ; } public short getNumBreaks ( ) { return breaks != null ? ( short ) breaks . size ( ) : numBreaks ; } public void setNumBreaks ( short numBreaks ) { this . numBreaks = numBreaks ; } public Iterator getBreaksIterator ( ) { if ( breaks == null ) return Collections . EMPTY_LIST . iterator ( ) ; else return breaks . iterator ( ) ; } public String toString ( ) { StringBuffer retval = new StringBuffer ( ) ; if ( getSid ( ) != HORIZONTAL_SID && getSid ( ) != VERTICAL_SID ) return "[INVALIDPAGEBREAK]\n     .sid =" + getSid ( ) + "[INVALIDPAGEBREAK]" ; String label ; String mainLabel ; String subLabel ; if ( getSid ( ) == HORIZONTAL_SID ) { label = "HORIZONTALPAGEBREAK" ; mainLabel = "row" ; subLabel = "col" ; } else { label = "VERTICALPAGEBREAK" ; mainLabel = "column" ; subLabel = "row" ; } retval . append ( "[" + label + "]" ) . append ( "\n" ) ; retval . append ( "     .sid        =" ) . append ( getSid ( ) ) . append ( "\n" ) ; retval . append ( "     .numbreaks =" ) . append ( getNumBreaks ( ) ) . append ( "\n" ) ; Iterator iterator = getBreaksIterator ( ) ; for ( int k = 0 ; k < getNumBreaks ( ) ; k ++ ) { Break region = ( Break ) iterator . next ( ) ; retval . append ( "     ." ) . append ( mainLabel ) . append ( " (zero-based) =" ) . append ( region . main ) . append ( "\n" ) ; retval . append ( "     ." ) . append ( subLabel ) . append ( "From    =" ) . append ( region . subFrom ) . append ( "\n" ) ; retval . append ( "     ." ) . append ( subLabel ) . append ( "To      =" ) . append ( region . subTo ) . append ( "\n" ) ; } retval . append ( "[" + label + "]" ) . append ( "\n" ) ; return retval . toString ( ) ; } public void addBreak ( short main , short subFrom , short subTo ) { if ( breaks == null ) { breaks = new ArrayList ( getNumBreaks ( ) + 10 ) ; BreakMap = new HashMap ( ) ; } Integer key = new Integer ( main ) ; Break region = ( Break ) BreakMap . get ( key ) ; if ( region != null ) { region . main = main ; region . subFrom = subFrom ; region . subTo = subTo ; } else { region = new Break ( main , subFrom , subTo ) ; breaks . add ( region ) ; } BreakMap . put ( key , region ) ; } public void removeBreak ( short main ) { Integer rowKey = new Integer ( main ) ; Break region = ( Break ) BreakMap . get ( rowKey ) ; breaks . remove ( region ) ; BreakMap . remove ( rowKey ) ; } public int getRecordSize ( ) { return 6 + getNumBreaks ( ) * 6 ; } public Break getBreak ( short main ) { if ( BreakMap == null ) return null ; Integer rowKey = new Integer ( main ) ; return ( Break ) BreakMap . get ( rowKey ) ; } public Object clone ( ) { PageBreakRecord record = new PageBreakRecord ( getSid ( ) ) ; Iterator iterator = getBreaksIterator ( ) ; while ( iterator . hasNext ( ) ) { Break original = ( Break ) iterator . next ( ) ; record . addBreak ( original . main , original . subFrom , original . subTo ) ; } return record ; } } 	1
package org . apache . poi . hpsf ; public class Constants { public static final int CP_037 = 37 ; public static final int CP_SJIS = 932 ; public static final int CP_GBK = 936 ; public static final int CP_MS949 = 949 ; public static final int CP_UTF16 = 1200 ; public static final int CP_UTF16_BE = 1201 ; public static final int CP_WINDOWS_1250 = 1250 ; public static final int CP_WINDOWS_1251 = 1251 ; public static final int CP_WINDOWS_1252 = 1252 ; public static final int CP_WINDOWS_1253 = 1253 ; public static final int CP_WINDOWS_1254 = 1254 ; public static final int CP_WINDOWS_1255 = 1255 ; public static final int CP_WINDOWS_1256 = 1256 ; public static final int CP_WINDOWS_1257 = 1257 ; public static final int CP_WINDOWS_1258 = 1258 ; public static final int CP_JOHAB = 1361 ; public static final int CP_MAC_ROMAN = 10000 ; public static final int CP_MAC_JAPAN = 10001 ; public static final int CP_MAC_CHINESE_TRADITIONAL = 10002 ; public static final int CP_MAC_KOREAN = 10003 ; public static final int CP_MAC_ARABIC = 10004 ; public static final int CP_MAC_HEBREW = 10005 ; public static final int CP_MAC_GREEK = 10006 ; public static final int CP_MAC_CYRILLIC = 10007 ; public static final int CP_MAC_CHINESE_SIMPLE = 10008 ; public static final int CP_MAC_ROMANIA = 10010 ; public static final int CP_MAC_UKRAINE = 10017 ; public static final int CP_MAC_THAI = 10021 ; public static final int CP_MAC_CENTRAL_EUROPE = 10029 ; public static final int CP_MAC_ICELAND = 10079 ; public static final int CP_MAC_TURKISH = 10081 ; public static final int CP_MAC_CROATIAN = 10082 ; public static final int CP_US_ACSII = 20127 ; public static final int CP_KOI8_R = 20866 ; public static final int CP_ISO_8859_1 = 28591 ; public static final int CP_ISO_8859_2 = 28592 ; public static final int CP_ISO_8859_3 = 28593 ; public static final int CP_ISO_8859_4 = 28594 ; public static final int CP_ISO_8859_5 = 28595 ; public static final int CP_ISO_8859_6 = 28596 ; public static final int CP_ISO_8859_7 = 28597 ; public static final int CP_ISO_8859_8 = 28598 ; public static final int CP_ISO_8859_9 = 28599 ; public static final int CP_ISO_2022_JP1 = 50220 ; public static final int CP_ISO_2022_JP2 = 50221 ; public static final int CP_ISO_2022_JP3 = 50222 ; public static final int CP_ISO_2022_KR = 50225 ; public static final int CP_EUC_JP = 51932 ; public static final int CP_EUC_KR = 51949 ; public static final int CP_GB2312 = 52936 ; public static final int CP_GB18030 = 54936 ; public static final int CP_US_ASCII2 = 65000 ; public static final int CP_UTF8 = 65001 ; public static final int CP_UNICODE = CP_UTF16 ; } 	0
package org . apache . poi . poifs . storage ; import java . io . IOException ; import java . io . InputStream ; import java . io . OutputStream ; import java . util . Arrays ; import org . apache . poi . poifs . common . POIFSConstants ; import org . apache . poi . util . IOUtils ; import org . apache . poi . util . IntegerField ; import org . apache . poi . util . LittleEndian ; import org . apache . poi . util . LittleEndianConsts ; public class DocumentBlock extends BigBlock { private static final byte _default_value = ( byte ) 0xFF ; private byte [ ] _data ; private int _bytes_read ; public DocumentBlock ( final RawDataBlock block ) throws IOException { _data = block . getData ( ) ; _bytes_read = _data . length ; } public DocumentBlock ( final InputStream stream ) throws IOException { this ( ) ; int count = IOUtils . readFully ( stream , _data ) ; _bytes_read = ( count == - 1 ) ? 0 : count ; } private DocumentBlock ( ) { _data = new byte [ POIFSConstants . BIG_BLOCK_SIZE ] ; Arrays . fill ( _data , _default_value ) ; } public int size ( ) { return _bytes_read ; } public boolean partiallyRead ( ) { return _bytes_read != POIFSConstants . BIG_BLOCK_SIZE ; } public static byte getFillByte ( ) { return _default_value ; } public static DocumentBlock [ ] convert ( final byte [ ] array , final int size ) { DocumentBlock [ ] rval = new DocumentBlock [ ( size + POIFSConstants . BIG_BLOCK_SIZE - 1 ) / POIFSConstants . BIG_BLOCK_SIZE ] ; int offset = 0 ; for ( int k = 0 ; k < rval . length ; k ++ ) { rval [ k ] = new DocumentBlock ( ) ; if ( offset < array . length ) { int length = Math . min ( POIFSConstants . BIG_BLOCK_SIZE , array . length - offset ) ; System . arraycopy ( array , offset , rval [ k ] . _data , 0 , length ) ; if ( length != POIFSConstants . BIG_BLOCK_SIZE ) { Arrays . fill ( rval [ k ] . _data , length , POIFSConstants . BIG_BLOCK_SIZE , _default_value ) ; } } else { Arrays . fill ( rval [ k ] . _data , _default_value ) ; } offset += POIFSConstants . BIG_BLOCK_SIZE ; } return rval ; } public static void read ( final DocumentBlock [ ] blocks , final byte [ ] buffer , final int offset ) { int firstBlockIndex = offset / POIFSConstants . BIG_BLOCK_SIZE ; int firstBlockOffset = offset % POIFSConstants . BIG_BLOCK_SIZE ; int lastBlockIndex = ( offset + buffer . length - 1 ) / POIFSConstants . BIG_BLOCK_SIZE ; if ( firstBlockIndex == lastBlockIndex ) { System . arraycopy ( blocks [ firstBlockIndex ] . _data , firstBlockOffset , buffer , 0 , buffer . length ) ; } else { int buffer_offset = 0 ; System . arraycopy ( blocks [ firstBlockIndex ] . _data , firstBlockOffset , buffer , buffer_offset , POIFSConstants . BIG_BLOCK_SIZE - firstBlockOffset ) ; buffer_offset += POIFSConstants . BIG_BLOCK_SIZE - firstBlockOffset ; for ( int j = firstBlockIndex + 1 ; j < lastBlockIndex ; j ++ ) { System . arraycopy ( blocks [ j ] . _data , 0 , buffer , buffer_offset , POIFSConstants . BIG_BLOCK_SIZE ) ; buffer_offset += POIFSConstants . BIG_BLOCK_SIZE ; } System . arraycopy ( blocks [ lastBlockIndex ] . _data , 0 , buffer , buffer_offset , buffer . length - buffer_offset ) ; } } void writeData ( final OutputStream stream ) throws IOException { doWriteData ( stream , _data ) ; } } 	0
package org . apache . poi . ddf ; import org . apache . poi . util . LittleEndian ; import java . util . ArrayList ; import java . util . Iterator ; import java . util . List ; public class EscherPropertyFactory { public List createProperties ( byte [ ] data , int offset , short numProperties ) { List results = new ArrayList ( ) ; int pos = offset ; for ( int i = 0 ; i < numProperties ; i ++ ) { short propId ; int propData ; propId = LittleEndian . getShort ( data , pos ) ; propData = LittleEndian . getInt ( data , pos + 2 ) ; short propNumber = ( short ) ( propId & ( short ) 0x3FFF ) ; boolean isComplex = ( propId & ( short ) 0x8000 ) != 0 ; boolean isBlipId = ( propId & ( short ) 0x4000 ) != 0 ; byte propertyType = EscherProperties . getPropertyType ( ( short ) propNumber ) ; if ( propertyType == EscherPropertyMetaData . TYPE_BOOLEAN ) results . add ( new EscherBoolProperty ( propId , propData ) ) ; else if ( propertyType == EscherPropertyMetaData . TYPE_RGB ) results . add ( new EscherRGBProperty ( propId , propData ) ) ; else if ( propertyType == EscherPropertyMetaData . TYPE_SHAPEPATH ) results . add ( new EscherShapePathProperty ( propId , propData ) ) ; else { if ( ! isComplex ) results . add ( new EscherSimpleProperty ( propId , propData ) ) ; else { if ( propertyType == EscherPropertyMetaData . TYPE_ARRAY ) results . add ( new EscherArrayProperty ( propId , new byte [ propData ] ) ) ; else results . add ( new EscherComplexProperty ( propId , new byte [ propData ] ) ) ; } } pos += 6 ; } for ( Iterator iterator = results . iterator ( ) ; iterator . hasNext ( ) ; ) { EscherProperty p = ( EscherProperty ) iterator . next ( ) ; if ( p instanceof EscherComplexProperty ) { if ( p instanceof EscherArrayProperty ) { pos += ( ( EscherArrayProperty ) p ) . setArrayData ( data , pos ) ; } else { byte [ ] complexData = ( ( EscherComplexProperty ) p ) . getComplexData ( ) ; System . arraycopy ( data , pos , complexData , 0 , complexData . length ) ; pos += complexData . length ; } } } return results ; } } 	1
package org . apache . poi . hssf . record . formula ; import org . apache . poi . util . LittleEndian ; import org . apache . poi . util . BitField ; import org . apache . poi . hssf . util . CellReference ; import org . apache . poi . hssf . model . Workbook ; import org . apache . poi . hssf . record . RecordInputStream ; public class RefErrorPtg extends Ptg { private final static int SIZE = 5 ; public final static byte sid = 0x2a ; private int field_1_reserved ; private RefErrorPtg ( ) { } public RefErrorPtg ( RecordInputStream in ) { field_1_reserved = in . readInt ( ) ; } public String toString ( ) { StringBuffer buffer = new StringBuffer ( "[RefError]\n" ) ; buffer . append ( "reserved = " ) . append ( getReserved ( ) ) . append ( "\n" ) ; return buffer . toString ( ) ; } public void writeBytes ( byte [ ] array , int offset ) { array [ offset ] = ( byte ) ( sid + ptgClass ) ; LittleEndian . putInt ( array , offset + 1 , field_1_reserved ) ; } public void setReserved ( int reserved ) { field_1_reserved = reserved ; } public int getReserved ( ) { return field_1_reserved ; } public int getSize ( ) { return SIZE ; } public String toFormulaString ( Workbook book ) { return "#REF!" ; } public byte getDefaultOperandClass ( ) { return Ptg . CLASS_REF ; } public Object clone ( ) { RefErrorPtg ptg = new RefErrorPtg ( ) ; ptg . field_1_reserved = field_1_reserved ; ptg . setClass ( ptgClass ) ; return ptg ; } } 	1
package org . apache . poi . hssf . record . formula ; import java . util . List ; import org . apache . poi . hssf . model . Workbook ; import org . apache . poi . hssf . record . RecordInputStream ; public class PowerPtg extends OperationPtg { public final static int SIZE = 1 ; public final static byte sid = 0x07 ; public PowerPtg ( ) { } public PowerPtg ( RecordInputStream in ) { } public void writeBytes ( byte [ ] array , int offset ) { array [ offset + 0 ] = sid ; } public int getSize ( ) { return SIZE ; } public int getType ( ) { return TYPE_BINARY ; } public int getNumberOfOperands ( ) { return 2 ; } public String toFormulaString ( Workbook book ) { return "^" ; } public String toFormulaString ( String [ ] operands ) { StringBuffer buffer = new StringBuffer ( ) ; buffer . append ( operands [ 0 ] ) ; buffer . append ( toFormulaString ( ( Workbook ) null ) ) ; buffer . append ( operands [ 1 ] ) ; return buffer . toString ( ) ; } public Object clone ( ) { return new PowerPtg ( ) ; } } 	0
package org . apache . poi . poifs . dev ; import java . io . * ; import java . util . * ; public class POIFSViewEngine { private static final String _EOL = System . getProperty ( "line.separator" ) ; public static List inspectViewable ( final Object viewable , final boolean drilldown , final int indentLevel , final String indentString ) { List objects = new ArrayList ( ) ; if ( viewable instanceof POIFSViewable ) { POIFSViewable inspected = ( POIFSViewable ) viewable ; objects . add ( indent ( indentLevel , indentString , inspected . getShortDescription ( ) ) ) ; if ( drilldown ) { if ( inspected . preferArray ( ) ) { Object [ ] data = inspected . getViewableArray ( ) ; for ( int j = 0 ; j < data . length ; j ++ ) { objects . addAll ( inspectViewable ( data [ j ] , drilldown , indentLevel + 1 , indentString ) ) ; } } else { Iterator iter = inspected . getViewableIterator ( ) ; while ( iter . hasNext ( ) ) { objects . addAll ( inspectViewable ( iter . next ( ) , drilldown , indentLevel + 1 , indentString ) ) ; } } } } else { objects . add ( indent ( indentLevel , indentString , viewable . toString ( ) ) ) ; } return objects ; } private static String indent ( final int indentLevel , final String indentString , final String data ) { StringBuffer finalBuffer = new StringBuffer ( ) ; StringBuffer indentPrefix = new StringBuffer ( ) ; for ( int j = 0 ; j < indentLevel ; j ++ ) { indentPrefix . append ( indentString ) ; } LineNumberReader reader = new LineNumberReader ( new StringReader ( data ) ) ; try { String line = reader . readLine ( ) ; while ( line != null ) { finalBuffer . append ( indentPrefix ) . append ( line ) . append ( _EOL ) ; line = reader . readLine ( ) ; } } catch ( IOException e ) { finalBuffer . append ( indentPrefix ) . append ( e . getMessage ( ) ) . append ( _EOL ) ; } return finalBuffer . toString ( ) ; } } 	0
package org . apache . poi . hssf . record ; import org . apache . poi . util . IntMapper ; import org . apache . poi . util . LittleEndianConsts ; import java . util . Iterator ; public class SSTRecord extends Record { private static UnicodeString EMPTY_STRING = new UnicodeString ( "" ) ; static final int MAX_RECORD_SIZE = 8228 ; static final int STD_RECORD_OVERHEAD = 2 * LittleEndianConsts . SHORT_SIZE ; static final int SST_RECORD_OVERHEAD = ( STD_RECORD_OVERHEAD + ( 2 * LittleEndianConsts . INT_SIZE ) ) ; static final int MAX_DATA_SPACE = MAX_RECORD_SIZE - SST_RECORD_OVERHEAD ; static final int STRING_MINIMAL_OVERHEAD = LittleEndianConsts . SHORT_SIZE + LittleEndianConsts . BYTE_SIZE ; public static final short sid = 0xfc ; private int field_1_num_strings ; private int field_2_num_unique_strings ; private IntMapper field_3_strings ; private SSTDeserializer deserializer ; int [ ] bucketAbsoluteOffsets ; int [ ] bucketRelativeOffsets ; public SSTRecord ( ) { field_1_num_strings = 0 ; field_2_num_unique_strings = 0 ; field_3_strings = new IntMapper ( ) ; deserializer = new SSTDeserializer ( field_3_strings ) ; } public SSTRecord ( RecordInputStream in ) { super ( in ) ; } public int addString ( final UnicodeString string ) { field_1_num_strings ++ ; UnicodeString ucs = ( string == null ) ? EMPTY_STRING : string ; int rval ; int index = field_3_strings . getIndex ( ucs ) ; if ( index != - 1 ) { rval = index ; } else { rval = field_3_strings . size ( ) ; field_2_num_unique_strings ++ ; SSTDeserializer . addToStringTable ( field_3_strings , ucs ) ; } return rval ; } public int getNumStrings ( ) { return field_1_num_strings ; } public int getNumUniqueStrings ( ) { return field_2_num_unique_strings ; } public void setNumStrings ( final int count ) { field_1_num_strings = count ; } public void setNumUniqueStrings ( final int count ) { field_2_num_unique_strings = count ; } public UnicodeString getString ( final int id ) { return ( UnicodeString ) field_3_strings . get ( id ) ; } public boolean isString16bit ( final int id ) { UnicodeString unicodeString = ( ( UnicodeString ) field_3_strings . get ( id ) ) ; return ( ( unicodeString . getOptionFlags ( ) & 0x01 ) == 1 ) ; } public String toString ( ) { StringBuffer buffer = new StringBuffer ( ) ; buffer . append ( "[SST]\n" ) ; buffer . append ( "    .numstrings     = " ) . append ( Integer . toHexString ( getNumStrings ( ) ) ) . append ( "\n" ) ; buffer . append ( "    .uniquestrings  = " ) . append ( Integer . toHexString ( getNumUniqueStrings ( ) ) ) . append ( "\n" ) ; for ( int k = 0 ; k < field_3_strings . size ( ) ; k ++ ) { UnicodeString s = ( UnicodeString ) field_3_strings . get ( k ) ; buffer . append ( "    .string_" + k + "      = " ) . append ( s . getDebugInfo ( ) ) . append ( "\n" ) ; } buffer . append ( "[/SST]\n" ) ; return buffer . toString ( ) ; } public short getSid ( ) { return sid ; } public int hashCode ( ) { return field_2_num_unique_strings ; } public boolean equals ( Object o ) { if ( ( o == null ) || ( o . getClass ( ) != this . getClass ( ) ) ) { return false ; } SSTRecord other = ( SSTRecord ) o ; return ( ( field_1_num_strings == other . field_1_num_strings ) && ( field_2_num_unique_strings == other . field_2_num_unique_strings ) && field_3_strings . equals ( other . field_3_strings ) ) ; } protected void validateSid ( final short id ) throws RecordFormatException { if ( id != sid ) { throw new RecordFormatException ( "NOT An SST RECORD" ) ; } } protected void fillFields ( RecordInputStream in ) { field_1_num_strings = in . readInt ( ) ; field_2_num_unique_strings = in . readInt ( ) ; field_3_strings = new IntMapper ( ) ; deserializer = new SSTDeserializer ( field_3_strings ) ; deserializer . manufactureStrings ( field_2_num_unique_strings , in ) ; } Iterator getStrings ( ) { return field_3_strings . iterator ( ) ; } int countStrings ( ) { return field_3_strings . size ( ) ; } public int serialize ( int offset , byte [ ] data ) { SSTSerializer serializer = new SSTSerializer ( field_3_strings , getNumStrings ( ) , getNumUniqueStrings ( ) ) ; int bytes = serializer . serialize ( offset , data ) ; bucketAbsoluteOffsets = serializer . getBucketAbsoluteOffsets ( ) ; bucketRelativeOffsets = serializer . getBucketRelativeOffsets ( ) ; return bytes ; } public int getRecordSize ( ) { SSTRecordSizeCalculator calculator = new SSTRecordSizeCalculator ( field_3_strings ) ; int recordSize = calculator . getRecordSize ( ) ; return recordSize ; } SSTDeserializer getDeserializer ( ) { return deserializer ; } public ExtSSTRecord createExtSSTRecord ( int sstOffset ) { if ( bucketAbsoluteOffsets == null || bucketAbsoluteOffsets == null ) throw new IllegalStateException ( "SST record has not yet been serialized." ) ; ExtSSTRecord extSST = new ExtSSTRecord ( ) ; extSST . setNumStringsPerBucket ( ( short ) 8 ) ; int [ ] absoluteOffsets = ( int [ ] ) bucketAbsoluteOffsets . clone ( ) ; int [ ] relativeOffsets = ( int [ ] ) bucketRelativeOffsets . clone ( ) ; for ( int i = 0 ; i < absoluteOffsets . length ; i ++ ) absoluteOffsets [ i ] += sstOffset ; extSST . setBucketOffsets ( absoluteOffsets , relativeOffsets ) ; return extSST ; } public int calcExtSSTRecordSize ( ) { return ExtSSTRecord . getRecordSizeForStrings ( field_3_strings . size ( ) ) ; } } 	1
package org . apache . poi . poifs . property ; import org . apache . poi . poifs . filesystem . POIFSDocument ; public class DocumentProperty extends Property { private POIFSDocument _document ; public DocumentProperty ( final String name , final int size ) { super ( ) ; _document = null ; setName ( name ) ; setSize ( size ) ; setNodeColor ( _NODE_BLACK ) ; setPropertyType ( PropertyConstants . DOCUMENT_TYPE ) ; } protected DocumentProperty ( final int index , final byte [ ] array , final int offset ) { super ( index , array , offset ) ; _document = null ; } public void setDocument ( POIFSDocument doc ) { _document = doc ; } public POIFSDocument getDocument ( ) { return _document ; } public boolean shouldUseSmallBlocks ( ) { return super . shouldUseSmallBlocks ( ) ; } public boolean isDirectory ( ) { return false ; } protected void preWrite ( ) { } } 	0
package org . apache . poi . hssf . usermodel ; import org . apache . poi . hssf . record . PrintSetupRecord ; public class HSSFPrintSetup extends Object { public static final short LETTER_PAPERSIZE = 1 ; public static final short LEGAL_PAPERSIZE = 5 ; public static final short EXECUTIVE_PAPERSIZE = 7 ; public static final short A4_PAPERSIZE = 9 ; public static final short A5_PAPERSIZE = 11 ; public static final short ENVELOPE_10_PAPERSIZE = 20 ; public static final short ENVELOPE_DL_PAPERSIZE = 27 ; public static final short ENVELOPE_CS_PAPERSIZE = 28 ; public static final short ENVELOPE_MONARCH_PAPERSIZE = 37 ; PrintSetupRecord printSetupRecord ; protected HSSFPrintSetup ( PrintSetupRecord printSetupRecord ) { this . printSetupRecord = printSetupRecord ; } public void setPaperSize ( short size ) { printSetupRecord . setPaperSize ( size ) ; } public void setScale ( short scale ) { printSetupRecord . setScale ( scale ) ; } public void setPageStart ( short start ) { printSetupRecord . setPageStart ( start ) ; } public void setFitWidth ( short width ) { printSetupRecord . setFitWidth ( width ) ; } public void setFitHeight ( short height ) { printSetupRecord . setFitHeight ( height ) ; } public void setOptions ( short options ) { printSetupRecord . setOptions ( options ) ; } public void setLeftToRight ( boolean ltor ) { printSetupRecord . setLeftToRight ( ltor ) ; } public void setLandscape ( boolean ls ) { printSetupRecord . setLandscape ( ! ls ) ; } public void setValidSettings ( boolean valid ) { printSetupRecord . setValidSettings ( valid ) ; } public void setNoColor ( boolean mono ) { printSetupRecord . setNoColor ( mono ) ; } public void setDraft ( boolean d ) { printSetupRecord . setDraft ( d ) ; } public void setNotes ( boolean printnotes ) { printSetupRecord . setNotes ( printnotes ) ; } public void setNoOrientation ( boolean orientation ) { printSetupRecord . setNoOrientation ( orientation ) ; } public void setUsePage ( boolean page ) { printSetupRecord . setUsePage ( page ) ; } public void setHResolution ( short resolution ) { printSetupRecord . setHResolution ( resolution ) ; } public void setVResolution ( short resolution ) { printSetupRecord . setVResolution ( resolution ) ; } public void setHeaderMargin ( double headermargin ) { printSetupRecord . setHeaderMargin ( headermargin ) ; } public void setFooterMargin ( double footermargin ) { printSetupRecord . setFooterMargin ( footermargin ) ; } public void setCopies ( short copies ) { printSetupRecord . setCopies ( copies ) ; } public short getPaperSize ( ) { return printSetupRecord . getPaperSize ( ) ; } public short getScale ( ) { return printSetupRecord . getScale ( ) ; } public short getPageStart ( ) { return printSetupRecord . getPageStart ( ) ; } public short getFitWidth ( ) { return printSetupRecord . getFitWidth ( ) ; } public short getFitHeight ( ) { return printSetupRecord . getFitHeight ( ) ; } public short getOptions ( ) { return printSetupRecord . getOptions ( ) ; } public boolean getLeftToRight ( ) { return printSetupRecord . getLeftToRight ( ) ; } public boolean getLandscape ( ) { return ! printSetupRecord . getLandscape ( ) ; } public boolean getValidSettings ( ) { return printSetupRecord . getValidSettings ( ) ; } public boolean getNoColor ( ) { return printSetupRecord . getNoColor ( ) ; } public boolean getDraft ( ) { return printSetupRecord . getDraft ( ) ; } public boolean getNotes ( ) { return printSetupRecord . getNotes ( ) ; } public boolean getNoOrientation ( ) { return printSetupRecord . getNoOrientation ( ) ; } public boolean getUsePage ( ) { return printSetupRecord . getUsePage ( ) ; } public short getHResolution ( ) { return printSetupRecord . getHResolution ( ) ; } public short getVResolution ( ) { return printSetupRecord . getVResolution ( ) ; } public double getHeaderMargin ( ) { return printSetupRecord . getHeaderMargin ( ) ; } public double getFooterMargin ( ) { return printSetupRecord . getFooterMargin ( ) ; } public short getCopies ( ) { return printSetupRecord . getCopies ( ) ; } } 	0
package org . apache . poi . util ; public class SystemOutLogger extends POILogger { private String cat ; public void initialize ( final String cat ) { this . cat = cat ; } public void log ( final int level , final Object obj1 ) { if ( check ( level ) ) System . out . println ( "[" + cat + "] " + obj1 ) ; } public boolean check ( final int level ) { int currentLevel = Integer . parseInt ( System . getProperty ( "poi.log.level" , WARN + "" ) ) ; if ( level >= currentLevel ) return true ; else return false ; } } 	1
package org . apache . poi . poifs . filesystem ; import java . io . * ; import java . util . * ; public class DocumentOutputStream extends OutputStream { private OutputStream stream ; private int limit ; private int written ; DocumentOutputStream ( final OutputStream stream , final int limit ) { this . stream = stream ; this . limit = limit ; this . written = 0 ; } public void write ( final int b ) throws IOException { limitCheck ( 1 ) ; stream . write ( b ) ; } public void write ( final byte b [ ] ) throws IOException { write ( b , 0 , b . length ) ; } public void write ( final byte b [ ] , final int off , final int len ) throws IOException { limitCheck ( len ) ; stream . write ( b , off , len ) ; } public void flush ( ) throws IOException { stream . flush ( ) ; } public void close ( ) throws IOException { } void writeFiller ( final int totalLimit , final byte fill ) throws IOException { if ( totalLimit > written ) { byte [ ] filler = new byte [ totalLimit - written ] ; Arrays . fill ( filler , fill ) ; stream . write ( filler ) ; } } private void limitCheck ( final int toBeWritten ) throws IOException { if ( ( written + toBeWritten ) > limit ) { throw new IOException ( "tried to write too much data" ) ; } written += toBeWritten ; } } 	1
package org . apache . poi . poifs . storage ; import java . io . IOException ; import java . io . OutputStream ; import java . util . Arrays ; import org . apache . poi . poifs . common . POIFSConstants ; import org . apache . poi . util . IntegerField ; import org . apache . poi . util . LittleEndian ; import org . apache . poi . util . LittleEndianConsts ; public class BATBlock extends BigBlock { private static final int _entries_per_block = POIFSConstants . BIG_BLOCK_SIZE / LittleEndianConsts . INT_SIZE ; private static final int _entries_per_xbat_block = _entries_per_block - 1 ; private static final int _xbat_chain_offset = _entries_per_xbat_block * LittleEndianConsts . INT_SIZE ; private static final byte _default_value = ( byte ) 0xFF ; private IntegerField [ ] _fields ; private byte [ ] _data ; private BATBlock ( ) { _data = new byte [ POIFSConstants . BIG_BLOCK_SIZE ] ; Arrays . fill ( _data , _default_value ) ; _fields = new IntegerField [ _entries_per_block ] ; int offset = 0 ; for ( int j = 0 ; j < _entries_per_block ; j ++ ) { _fields [ j ] = new IntegerField ( offset ) ; offset += LittleEndianConsts . INT_SIZE ; } } public static BATBlock [ ] createBATBlocks ( final int [ ] entries ) { int block_count = calculateStorageRequirements ( entries . length ) ; BATBlock [ ] blocks = new BATBlock [ block_count ] ; int index = 0 ; int remaining = entries . length ; for ( int j = 0 ; j < entries . length ; j += _entries_per_block ) { blocks [ index ++ ] = new BATBlock ( entries , j , ( remaining > _entries_per_block ) ? j + _entries_per_block : entries . length ) ; remaining -= _entries_per_block ; } return blocks ; } public static BATBlock [ ] createXBATBlocks ( final int [ ] entries , final int startBlock ) { int block_count = calculateXBATStorageRequirements ( entries . length ) ; BATBlock [ ] blocks = new BATBlock [ block_count ] ; int index = 0 ; int remaining = entries . length ; if ( block_count != 0 ) { for ( int j = 0 ; j < entries . length ; j += _entries_per_xbat_block ) { blocks [ index ++ ] = new BATBlock ( entries , j , ( remaining > _entries_per_xbat_block ) ? j + _entries_per_xbat_block : entries . length ) ; remaining -= _entries_per_xbat_block ; } for ( index = 0 ; index < blocks . length - 1 ; index ++ ) { blocks [ index ] . setXBATChain ( startBlock + index + 1 ) ; } blocks [ index ] . setXBATChain ( POIFSConstants . END_OF_CHAIN ) ; } return blocks ; } public static int calculateStorageRequirements ( final int entryCount ) { return ( entryCount + _entries_per_block - 1 ) / _entries_per_block ; } public static int calculateXBATStorageRequirements ( final int entryCount ) { return ( entryCount + _entries_per_xbat_block - 1 ) / _entries_per_xbat_block ; } public static final int entriesPerBlock ( ) { return _entries_per_block ; } public static final int entriesPerXBATBlock ( ) { return _entries_per_xbat_block ; } public static final int getXBATChainOffset ( ) { return _xbat_chain_offset ; } private void setXBATChain ( int chainIndex ) { _fields [ _entries_per_xbat_block ] . set ( chainIndex , _data ) ; } private BATBlock ( final int [ ] entries , final int start_index , final int end_index ) { this ( ) ; for ( int k = start_index ; k < end_index ; k ++ ) { _fields [ k - start_index ] . set ( entries [ k ] , _data ) ; } } void writeData ( final OutputStream stream ) throws IOException { doWriteData ( stream , _data ) ; } } 	1
package org . apache . poi . ddf ; import org . apache . poi . util . HexDump ; import org . apache . poi . util . LittleEndian ; import java . io . ByteArrayOutputStream ; public class EscherBSERecord extends EscherRecord { public static final short RECORD_ID = ( short ) 0xF007 ; public static final String RECORD_DESCRIPTION = "MsofbtBSE" ; public static final byte BT_ERROR = 0 ; public static final byte BT_UNKNOWN = 1 ; public static final byte BT_EMF = 2 ; public static final byte BT_WMF = 3 ; public static final byte BT_PICT = 4 ; public static final byte BT_JPEG = 5 ; public static final byte BT_PNG = 6 ; public static final byte BT_DIB = 7 ; private byte field_1_blipTypeWin32 ; private byte field_2_blipTypeMacOS ; private byte [ ] field_3_uid ; private short field_4_tag ; private int field_5_size ; private int field_6_ref ; private int field_7_offset ; private byte field_8_usage ; private byte field_9_name ; private byte field_10_unused2 ; private byte field_11_unused3 ; private EscherBlipRecord field_12_blipRecord ; private byte [ ] remainingData ; public int fillFields ( byte [ ] data , int offset , EscherRecordFactory recordFactory ) { int bytesRemaining = readHeader ( data , offset ) ; int pos = offset + 8 ; field_1_blipTypeWin32 = data [ pos ] ; field_2_blipTypeMacOS = data [ pos + 1 ] ; System . arraycopy ( data , pos + 2 , field_3_uid = new byte [ 16 ] , 0 , 16 ) ; field_4_tag = LittleEndian . getShort ( data , pos + 18 ) ; field_5_size = LittleEndian . getInt ( data , pos + 20 ) ; field_6_ref = LittleEndian . getInt ( data , pos + 24 ) ; field_7_offset = LittleEndian . getInt ( data , pos + 28 ) ; field_8_usage = data [ pos + 32 ] ; field_9_name = data [ pos + 33 ] ; field_10_unused2 = data [ pos + 34 ] ; field_11_unused3 = data [ pos + 35 ] ; bytesRemaining -= 36 ; int bytesRead = 0 ; if ( bytesRemaining > 0 ) { field_12_blipRecord = ( EscherBlipRecord ) recordFactory . createRecord ( data , pos + 36 ) ; bytesRead = field_12_blipRecord . fillFields ( data , pos + 36 , recordFactory ) ; } pos += 36 + bytesRead ; bytesRemaining -= bytesRead ; remainingData = new byte [ bytesRemaining ] ; System . arraycopy ( data , pos , remainingData , 0 , bytesRemaining ) ; return bytesRemaining + 8 + 36 + ( field_12_blipRecord == null ? 0 : field_12_blipRecord . getRecordSize ( ) ) ; } public int serialize ( int offset , byte [ ] data , EscherSerializationListener listener ) { listener . beforeRecordSerialize ( offset , getRecordId ( ) , this ) ; if ( remainingData == null ) remainingData = new byte [ 0 ] ; LittleEndian . putShort ( data , offset , getOptions ( ) ) ; LittleEndian . putShort ( data , offset + 2 , getRecordId ( ) ) ; if ( remainingData == null ) remainingData = new byte [ 0 ] ; int blipSize = field_12_blipRecord == null ? 0 : field_12_blipRecord . getRecordSize ( ) ; int remainingBytes = remainingData . length + 36 + blipSize ; LittleEndian . putInt ( data , offset + 4 , remainingBytes ) ; data [ offset + 8 ] = field_1_blipTypeWin32 ; data [ offset + 9 ] = field_2_blipTypeMacOS ; for ( int i = 0 ; i < 16 ; i ++ ) data [ offset + 10 + i ] = field_3_uid [ i ] ; LittleEndian . putShort ( data , offset + 26 , field_4_tag ) ; LittleEndian . putInt ( data , offset + 28 , field_5_size ) ; LittleEndian . putInt ( data , offset + 32 , field_6_ref ) ; LittleEndian . putInt ( data , offset + 36 , field_7_offset ) ; data [ offset + 40 ] = field_8_usage ; data [ offset + 41 ] = field_9_name ; data [ offset + 42 ] = field_10_unused2 ; data [ offset + 43 ] = field_11_unused3 ; int bytesWritten = 0 ; if ( field_12_blipRecord != null ) { bytesWritten = field_12_blipRecord . serialize ( offset + 44 , data , new NullEscherSerializationListener ( ) ) ; } if ( remainingData == null ) remainingData = new byte [ 0 ] ; System . arraycopy ( remainingData , 0 , data , offset + 44 + bytesWritten , remainingData . length ) ; int pos = offset + 8 + 36 + remainingData . length + bytesWritten ; listener . afterRecordSerialize ( pos , getRecordId ( ) , pos - offset , this ) ; return pos - offset ; } public int getRecordSize ( ) { return 8 + 1 + 1 + 16 + 2 + 4 + 4 + 4 + 1 + 1 + 1 + 1 + field_12_blipRecord . getRecordSize ( ) + ( remainingData == null ? 0 : remainingData . length ) ; } public String getRecordName ( ) { return "BSE" ; } public byte getBlipTypeWin32 ( ) { return field_1_blipTypeWin32 ; } public void setBlipTypeWin32 ( byte blipTypeWin32 ) { this . field_1_blipTypeWin32 = blipTypeWin32 ; } public byte getBlipTypeMacOS ( ) { return field_2_blipTypeMacOS ; } public void setBlipTypeMacOS ( byte blipTypeMacOS ) { this . field_2_blipTypeMacOS = blipTypeMacOS ; } public byte [ ] getUid ( ) { return field_3_uid ; } public void setUid ( byte [ ] uid ) { this . field_3_uid = uid ; } public short getTag ( ) { return field_4_tag ; } public void setTag ( short tag ) { this . field_4_tag = tag ; } public int getSize ( ) { return field_5_size ; } public void setSize ( int size ) { this . field_5_size = size ; } public int getRef ( ) { return field_6_ref ; } public void setRef ( int ref ) { this . field_6_ref = ref ; } public int getOffset ( ) { return field_7_offset ; } public void setOffset ( int offset ) { this . field_7_offset = offset ; } public byte getUsage ( ) { return field_8_usage ; } public void setUsage ( byte usage ) { this . field_8_usage = usage ; } public byte getName ( ) { return field_9_name ; } public void setName ( byte name ) { this . field_9_name = name ; } public byte getUnused2 ( ) { return field_10_unused2 ; } public void setUnused2 ( byte unused2 ) { this . field_10_unused2 = unused2 ; } public byte getUnused3 ( ) { return field_11_unused3 ; } public void setUnused3 ( byte unused3 ) { this . field_11_unused3 = unused3 ; } public EscherBlipRecord getBlipRecord ( ) { return field_12_blipRecord ; } public void setBlipRecord ( EscherBlipRecord field_12_blipRecord ) { this . field_12_blipRecord = field_12_blipRecord ; } public byte [ ] getRemainingData ( ) { return remainingData ; } public void setRemainingData ( byte [ ] remainingData ) { this . remainingData = remainingData ; } public String toString ( ) { String nl = System . getProperty ( "line.separator" ) ; String extraData ; ByteArrayOutputStream b = new ByteArrayOutputStream ( ) ; try { HexDump . dump ( this . remainingData , 0 , b , 0 ) ; extraData = b . toString ( ) ; } catch ( Exception e ) { extraData = e . toString ( ) ; } return getClass ( ) . getName ( ) + ":" + nl + "  RecordId: 0x" + HexDump . toHex ( RECORD_ID ) + nl + "  Options: 0x" + HexDump . toHex ( getOptions ( ) ) + nl + "  BlipTypeWin32: " + field_1_blipTypeWin32 + nl + "  BlipTypeMacOS: " + field_2_blipTypeMacOS + nl + "  SUID: " + HexDump . toHex ( field_3_uid ) + nl + "  Tag: " + field_4_tag + nl + "  Size: " + field_5_size + nl + "  Ref: " + field_6_ref + nl + "  Offset: " + field_7_offset + nl + "  Usage: " + field_8_usage + nl + "  Name: " + field_9_name + nl + "  Unused2: " + field_10_unused2 + nl + "  Unused3: " + field_11_unused3 + nl + "  blipRecord: " + field_12_blipRecord + nl + "  Extra Data:" + nl + extraData ; } public String getBlipType ( byte b ) { switch ( b ) { case BT_ERROR : return " ERROR" ; case BT_UNKNOWN : return " UNKNOWN" ; case BT_EMF : return " EMF" ; case BT_WMF : return " WMF" ; case BT_PICT : return " PICT" ; case BT_JPEG : return " JPEG" ; case BT_PNG : return " PNG" ; case BT_DIB : return " DIB" ; default : if ( b < 32 ) return " NotKnown" ; else return " Client" ; } } } 	1
package org . apache . poi . ddf ; import org . apache . poi . hssf . record . RecordFormatException ; import org . apache . poi . util . HexDump ; import org . apache . poi . util . LittleEndian ; import java . io . ByteArrayInputStream ; import java . io . ByteArrayOutputStream ; import java . io . InputStream ; import java . io . IOException ; import java . util . zip . InflaterInputStream ; import java . util . zip . DeflaterOutputStream ; public class EscherBlipWMFRecord extends EscherBlipRecord { public static final String RECORD_DESCRIPTION = "msofbtBlip" ; private static final int HEADER_SIZE = 8 ; private byte [ ] field_1_secondaryUID ; private int field_2_cacheOfSize ; private int field_3_boundaryTop ; private int field_4_boundaryLeft ; private int field_5_boundaryWidth ; private int field_6_boundaryHeight ; private int field_7_width ; private int field_8_height ; private int field_9_cacheOfSavedSize ; private byte field_10_compressionFlag ; private byte field_11_filter ; private byte [ ] field_12_data ; public int fillFields ( byte [ ] data , int offset , EscherRecordFactory recordFactory ) { int bytesAfterHeader = readHeader ( data , offset ) ; int pos = offset + HEADER_SIZE ; int size = 0 ; field_1_secondaryUID = new byte [ 16 ] ; System . arraycopy ( data , pos + size , field_1_secondaryUID , 0 , 16 ) ; size += 16 ; field_2_cacheOfSize = LittleEndian . getInt ( data , pos + size ) ; size += 4 ; field_3_boundaryTop = LittleEndian . getInt ( data , pos + size ) ; size += 4 ; field_4_boundaryLeft = LittleEndian . getInt ( data , pos + size ) ; size += 4 ; field_5_boundaryWidth = LittleEndian . getInt ( data , pos + size ) ; size += 4 ; field_6_boundaryHeight = LittleEndian . getInt ( data , pos + size ) ; size += 4 ; field_7_width = LittleEndian . getInt ( data , pos + size ) ; size += 4 ; field_8_height = LittleEndian . getInt ( data , pos + size ) ; size += 4 ; field_9_cacheOfSavedSize = LittleEndian . getInt ( data , pos + size ) ; size += 4 ; field_10_compressionFlag = data [ pos + size ] ; size ++ ; field_11_filter = data [ pos + size ] ; size ++ ; int bytesRemaining = bytesAfterHeader - size ; field_12_data = new byte [ bytesRemaining ] ; System . arraycopy ( data , pos + size , field_12_data , 0 , bytesRemaining ) ; size += bytesRemaining ; return HEADER_SIZE + size ; } public int serialize ( int offset , byte [ ] data , EscherSerializationListener listener ) { listener . beforeRecordSerialize ( offset , getRecordId ( ) , this ) ; LittleEndian . putShort ( data , offset , getOptions ( ) ) ; LittleEndian . putShort ( data , offset + 2 , getRecordId ( ) ) ; int remainingBytes = field_12_data . length + 36 ; LittleEndian . putInt ( data , offset + 4 , remainingBytes ) ; int pos = offset + HEADER_SIZE ; System . arraycopy ( field_1_secondaryUID , 0 , data , pos , 16 ) ; pos += 16 ; LittleEndian . putInt ( data , pos , field_2_cacheOfSize ) ; pos += 4 ; LittleEndian . putInt ( data , pos , field_3_boundaryTop ) ; pos += 4 ; LittleEndian . putInt ( data , pos , field_4_boundaryLeft ) ; pos += 4 ; LittleEndian . putInt ( data , pos , field_5_boundaryWidth ) ; pos += 4 ; LittleEndian . putInt ( data , pos , field_6_boundaryHeight ) ; pos += 4 ; LittleEndian . putInt ( data , pos , field_7_width ) ; pos += 4 ; LittleEndian . putInt ( data , pos , field_8_height ) ; pos += 4 ; LittleEndian . putInt ( data , pos , field_9_cacheOfSavedSize ) ; pos += 4 ; data [ pos ++ ] = field_10_compressionFlag ; data [ pos ++ ] = field_11_filter ; System . arraycopy ( field_12_data , 0 , data , pos , field_12_data . length ) ; pos += field_12_data . length ; listener . afterRecordSerialize ( pos , getRecordId ( ) , pos - offset , this ) ; return pos - offset ; } public int getRecordSize ( ) { return 58 + field_12_data . length ; } public String getRecordName ( ) { return "Blip" ; } public byte [ ] getSecondaryUID ( ) { return field_1_secondaryUID ; } public void setSecondaryUID ( byte [ ] field_1_secondaryUID ) { this . field_1_secondaryUID = field_1_secondaryUID ; } public int getCacheOfSize ( ) { return field_2_cacheOfSize ; } public void setCacheOfSize ( int field_2_cacheOfSize ) { this . field_2_cacheOfSize = field_2_cacheOfSize ; } public int getBoundaryTop ( ) { return field_3_boundaryTop ; } public void setBoundaryTop ( int field_3_boundaryTop ) { this . field_3_boundaryTop = field_3_boundaryTop ; } public int getBoundaryLeft ( ) { return field_4_boundaryLeft ; } public void setBoundaryLeft ( int field_4_boundaryLeft ) { this . field_4_boundaryLeft = field_4_boundaryLeft ; } public int getBoundaryWidth ( ) { return field_5_boundaryWidth ; } public void setBoundaryWidth ( int field_5_boundaryWidth ) { this . field_5_boundaryWidth = field_5_boundaryWidth ; } public int getBoundaryHeight ( ) { return field_6_boundaryHeight ; } public void setBoundaryHeight ( int field_6_boundaryHeight ) { this . field_6_boundaryHeight = field_6_boundaryHeight ; } public int getWidth ( ) { return field_7_width ; } public void setWidth ( int width ) { this . field_7_width = width ; } public int getHeight ( ) { return field_8_height ; } public void setHeight ( int height ) { this . field_8_height = height ; } public int getCacheOfSavedSize ( ) { return field_9_cacheOfSavedSize ; } public void setCacheOfSavedSize ( int field_9_cacheOfSavedSize ) { this . field_9_cacheOfSavedSize = field_9_cacheOfSavedSize ; } public byte getCompressionFlag ( ) { return field_10_compressionFlag ; } public void setCompressionFlag ( byte field_10_compressionFlag ) { this . field_10_compressionFlag = field_10_compressionFlag ; } public byte getFilter ( ) { return field_11_filter ; } public void setFilter ( byte field_11_filter ) { this . field_11_filter = field_11_filter ; } public byte [ ] getData ( ) { return field_12_data ; } public void setData ( byte [ ] field_12_data ) { this . field_12_data = field_12_data ; } public String toString ( ) { String nl = System . getProperty ( "line.separator" ) ; String extraData ; ByteArrayOutputStream b = new ByteArrayOutputStream ( ) ; try { HexDump . dump ( this . field_12_data , 0 , b , 0 ) ; extraData = b . toString ( ) ; } catch ( Exception e ) { extraData = e . toString ( ) ; } return getClass ( ) . getName ( ) + ":" + nl + "  RecordId: 0x" + HexDump . toHex ( getRecordId ( ) ) + nl + "  Options: 0x" + HexDump . toHex ( getOptions ( ) ) + nl + "  Secondary UID: " + HexDump . toHex ( field_1_secondaryUID ) + nl + "  CacheOfSize: " + field_2_cacheOfSize + nl + "  BoundaryTop: " + field_3_boundaryTop + nl + "  BoundaryLeft: " + field_4_boundaryLeft + nl + "  BoundaryWidth: " + field_5_boundaryWidth + nl + "  BoundaryHeight: " + field_6_boundaryHeight + nl + "  X: " + field_7_width + nl + "  Y: " + field_8_height + nl + "  CacheOfSavedSize: " + field_9_cacheOfSavedSize + nl + "  CompressionFlag: " + field_10_compressionFlag + nl + "  Filter: " + field_11_filter + nl + "  Data:" + nl + extraData ; } public static byte [ ] compress ( byte [ ] data ) { ByteArrayOutputStream out = new ByteArrayOutputStream ( ) ; DeflaterOutputStream deflaterOutputStream = new DeflaterOutputStream ( out ) ; try { for ( int i = 0 ; i < data . length ; i ++ ) deflaterOutputStream . write ( data [ i ] ) ; } catch ( IOException e ) { throw new RecordFormatException ( e . toString ( ) ) ; } return out . toByteArray ( ) ; } public static byte [ ] decompress ( byte [ ] data , int pos , int length ) { byte [ ] compressedData = new byte [ length ] ; System . arraycopy ( data , pos + 50 , compressedData , 0 , length ) ; InputStream compressedInputStream = new ByteArrayInputStream ( compressedData ) ; InflaterInputStream inflaterInputStream = new InflaterInputStream ( compressedInputStream ) ; ByteArrayOutputStream out = new ByteArrayOutputStream ( ) ; int c ; try { while ( ( c = inflaterInputStream . read ( ) ) != - 1 ) out . write ( c ) ; } catch ( IOException e ) { throw new RecordFormatException ( e . toString ( ) ) ; } return out . toByteArray ( ) ; } } 	1
package org . apache . poi . util ; public interface LittleEndianConsts { public static final int BYTE_SIZE = 1 ; public static final int SHORT_SIZE = 2 ; public static final int INT_SIZE = 4 ; public static final int LONG_SIZE = 8 ; public static final int DOUBLE_SIZE = 8 ; } 	0
package org . apache . poi . hssf . record ; import org . apache . poi . util . LittleEndian ; public class MMSRecord extends Record { public final static short sid = 0xC1 ; private byte field_1_addMenuCount ; private byte field_2_delMenuCount ; public MMSRecord ( ) { } public MMSRecord ( RecordInputStream in ) { super ( in ) ; } protected void validateSid ( short id ) { if ( id != sid ) { throw new RecordFormatException ( "NOT A MMS RECORD" ) ; } } protected void fillFields ( RecordInputStream in ) { field_1_addMenuCount = in . readByte ( ) ; field_2_delMenuCount = in . readByte ( ) ; } public void setAddMenuCount ( byte am ) { field_1_addMenuCount = am ; } public void setDelMenuCount ( byte dm ) { field_2_delMenuCount = dm ; } public byte getAddMenuCount ( ) { return field_1_addMenuCount ; } public byte getDelMenuCount ( ) { return field_2_delMenuCount ; } public String toString ( ) { StringBuffer buffer = new StringBuffer ( ) ; buffer . append ( "[MMS]\n" ) ; buffer . append ( "    .addMenu        = " ) . append ( Integer . toHexString ( getAddMenuCount ( ) ) ) . append ( "\n" ) ; buffer . append ( "    .delMenu        = " ) . append ( Integer . toHexString ( getDelMenuCount ( ) ) ) . append ( "\n" ) ; buffer . append ( "[/MMS]\n" ) ; return buffer . toString ( ) ; } public int serialize ( int offset , byte [ ] data ) { LittleEndian . putShort ( data , 0 + offset , sid ) ; LittleEndian . putShort ( data , 2 + offset , ( ( short ) 0x02 ) ) ; data [ 4 + offset ] = getAddMenuCount ( ) ; data [ 5 + offset ] = getDelMenuCount ( ) ; return getRecordSize ( ) ; } public int getRecordSize ( ) { return 6 ; } public short getSid ( ) { return sid ; } } 	1
package org . apache . poi . hssf . record ; import org . apache . poi . util . LittleEndian ; import org . apache . poi . util . StringUtil ; public class HeaderRecord extends Record { public final static short sid = 0x14 ; private byte field_1_header_len ; private byte field_2_reserved ; private byte field_3_unicode_flag ; private String field_4_header ; public HeaderRecord ( ) { } public HeaderRecord ( RecordInputStream in ) { super ( in ) ; } protected void validateSid ( short id ) { if ( id != sid ) { throw new RecordFormatException ( "NOT A HEADERRECORD" ) ; } } protected void fillFields ( RecordInputStream in ) { if ( in . remaining ( ) > 0 ) { field_1_header_len = in . readByte ( ) ; field_2_reserved = in . readByte ( ) ; field_3_unicode_flag = in . readByte ( ) ; if ( isMultibyte ( ) ) { field_4_header = in . readUnicodeLEString ( LittleEndian . ubyteToInt ( field_1_header_len ) ) ; } else { field_4_header = in . readCompressedUnicode ( LittleEndian . ubyteToInt ( field_1_header_len ) ) ; } } } public boolean isMultibyte ( ) { return ( ( field_3_unicode_flag & 0xFF ) == 1 ) ; } public void setHeaderLength ( byte len ) { field_1_header_len = len ; } public void setHeader ( String header ) { field_4_header = header ; field_3_unicode_flag = ( byte ) ( StringUtil . hasMultibyte ( field_4_header ) ? 1 : 0 ) ; } public short getHeaderLength ( ) { return ( short ) ( 0xFF & field_1_header_len ) ; } public String getHeader ( ) { return field_4_header ; } public String toString ( ) { StringBuffer buffer = new StringBuffer ( ) ; buffer . append ( "[HEADER]\n" ) ; buffer . append ( "    .length         = " ) . append ( getHeaderLength ( ) ) . append ( "\n" ) ; buffer . append ( "    .header         = " ) . append ( getHeader ( ) ) . append ( "\n" ) ; buffer . append ( "[/HEADER]\n" ) ; return buffer . toString ( ) ; } public int serialize ( int offset , byte [ ] data ) { int len = 4 ; if ( getHeaderLength ( ) != 0 ) { len += 3 ; } short bytelen = ( short ) ( isMultibyte ( ) ? getHeaderLength ( ) * 2 : getHeaderLength ( ) ) ; LittleEndian . putShort ( data , 0 + offset , sid ) ; LittleEndian . putShort ( data , 2 + offset , ( short ) ( ( len - 4 ) + bytelen ) ) ; if ( getHeaderLength ( ) > 0 ) { data [ 4 + offset ] = ( byte ) getHeaderLength ( ) ; data [ 6 + offset ] = field_3_unicode_flag ; if ( isMultibyte ( ) ) { StringUtil . putUnicodeLE ( getHeader ( ) , data , 7 + offset ) ; } else { StringUtil . putCompressedUnicode ( getHeader ( ) , data , 7 + offset ) ; } } return getRecordSize ( ) ; } public int getRecordSize ( ) { int retval = 4 ; if ( getHeaderLength ( ) != 0 ) { retval += 3 ; } return ( isMultibyte ( ) ? ( retval + getHeaderLength ( ) * 2 ) : ( retval + getHeaderLength ( ) ) ) ; } public short getSid ( ) { return sid ; } public Object clone ( ) { HeaderRecord rec = new HeaderRecord ( ) ; rec . field_1_header_len = field_1_header_len ; rec . field_2_reserved = field_2_reserved ; rec . field_3_unicode_flag = field_3_unicode_flag ; rec . field_4_header = field_4_header ; return rec ; } } 	1
package org . apache . poi . hssf . record ; import org . apache . poi . util . LittleEndian ; import org . apache . poi . util . StringUtil ; public class StringRecord extends Record { public final static short sid = 0x207 ; private int field_1_string_length ; private byte field_2_unicode_flag ; private String field_3_string ; public StringRecord ( ) { } public StringRecord ( RecordInputStream in ) { super ( in ) ; } protected void validateSid ( short id ) { if ( id != sid ) { throw new RecordFormatException ( "Not a valid StringRecord" ) ; } } protected void fillFields ( RecordInputStream in ) { field_1_string_length = in . readShort ( ) ; field_2_unicode_flag = in . readByte ( ) ; byte [ ] data = in . readRemainder ( ) ; if ( isUnCompressedUnicode ( ) ) { field_3_string = StringUtil . getFromUnicodeLE ( data , 0 , field_1_string_length ) ; } else { field_3_string = StringUtil . getFromCompressedUnicode ( data , 0 , field_1_string_length ) ; } } public boolean isInValueSection ( ) { return true ; } private int getStringByteLength ( ) { return isUnCompressedUnicode ( ) ? field_1_string_length * 2 : field_1_string_length ; } public int getRecordSize ( ) { return 4 + 2 + 1 + getStringByteLength ( ) ; } public boolean isUnCompressedUnicode ( ) { return ( field_2_unicode_flag == 1 ) ; } public int serialize ( int offset , byte [ ] data ) { LittleEndian . putShort ( data , 0 + offset , sid ) ; LittleEndian . putShort ( data , 2 + offset , ( short ) ( 3 + getStringByteLength ( ) ) ) ; LittleEndian . putUShort ( data , 4 + offset , field_1_string_length ) ; data [ 6 + offset ] = field_2_unicode_flag ; if ( isUnCompressedUnicode ( ) ) { StringUtil . putUnicodeLE ( field_3_string , data , 7 + offset ) ; } else { StringUtil . putCompressedUnicode ( field_3_string , data , 7 + offset ) ; } return getRecordSize ( ) ; } public short getSid ( ) { return sid ; } public String getString ( ) { return field_3_string ; } public void setCompressedFlag ( byte unicode_flag ) { this . field_2_unicode_flag = unicode_flag ; } public void setString ( String string ) { this . field_1_string_length = string . length ( ) ; this . field_3_string = string ; setCompressedFlag ( StringUtil . hasMultibyte ( string ) ? ( byte ) 1 : ( byte ) 0 ) ; } public String toString ( ) { StringBuffer buffer = new StringBuffer ( ) ; buffer . append ( "[STRING]\n" ) ; buffer . append ( "    .string            = " ) . append ( field_3_string ) . append ( "\n" ) ; buffer . append ( "[/STRING]\n" ) ; return buffer . toString ( ) ; } public Object clone ( ) { StringRecord rec = new StringRecord ( ) ; rec . field_1_string_length = this . field_1_string_length ; rec . field_2_unicode_flag = this . field_2_unicode_flag ; rec . field_3_string = this . field_3_string ; return rec ; } } 	1
package org . apache . poi . hssf . record . formula ; import org . apache . poi . util . LittleEndian ; import org . apache . poi . util . BitField ; import org . apache . poi . hssf . record . RecordInputStream ; import org . apache . poi . hssf . util . CellReference ; import org . apache . poi . hssf . model . Workbook ; public class RefNVPtg extends ReferencePtg { public final static byte sid = 0x4C ; protected RefNVPtg ( ) { } public RefNVPtg ( RecordInputStream in ) { super ( in ) ; } public void writeBytes ( byte [ ] array , int offset ) { throw new RuntimeException ( "Coding Error: This method should never be called. This ptg should be converted" ) ; } public String getRefPtgName ( ) { return "RefNVPtg" ; } public String toFormulaString ( Workbook book ) { throw new RuntimeException ( "Coding Error: This method should never be called. This ptg should be converted" ) ; } public Object clone ( ) { throw new RuntimeException ( "Coding Error: This method should never be called. This ptg should be converted" ) ; } } 	0
package org . apache . poi . hssf . record . formula ; public abstract class OperationPtg extends Ptg { public final static int TYPE_UNARY = 0 ; public final static int TYPE_BINARY = 1 ; public final static int TYPE_FUNCTION = 2 ; public abstract int getType ( ) ; public abstract String toFormulaString ( String [ ] operands ) ; public abstract int getNumberOfOperands ( ) ; public byte getDefaultOperandClass ( ) { return Ptg . CLASS_VALUE ; } } 	0
package org . apache . poi . hssf . eventusermodel ; import java . io . InputStream ; import java . io . IOException ; import org . apache . poi . hssf . eventusermodel . HSSFUserException ; import org . apache . poi . hssf . record . RecordFormatException ; import org . apache . poi . hssf . record . Record ; import org . apache . poi . hssf . record . RecordInputStream ; import org . apache . poi . hssf . record . RecordFactory ; import org . apache . poi . hssf . record . ContinueRecord ; import org . apache . poi . poifs . filesystem . POIFSFileSystem ; public class HSSFEventFactory { public HSSFEventFactory ( ) { } public void processWorkbookEvents ( HSSFRequest req , POIFSFileSystem fs ) throws IOException { InputStream in = fs . createDocumentInputStream ( "Workbook" ) ; processEvents ( req , in ) ; } public short abortableProcessWorkbookEvents ( HSSFRequest req , POIFSFileSystem fs ) throws IOException , HSSFUserException { InputStream in = fs . createDocumentInputStream ( "Workbook" ) ; return abortableProcessEvents ( req , in ) ; } public void processEvents ( HSSFRequest req , InputStream in ) throws IOException { try { genericProcessEvents ( req , new RecordInputStream ( in ) ) ; } catch ( HSSFUserException hue ) { } } public short abortableProcessEvents ( HSSFRequest req , InputStream in ) throws IOException , HSSFUserException { return genericProcessEvents ( req , new RecordInputStream ( in ) ) ; } protected short genericProcessEvents ( HSSFRequest req , RecordInputStream in ) throws IOException , HSSFUserException { short userCode = 0 ; short sid = 0 ; process : { Record rec = null ; while ( in . hasNextRecord ( ) ) { in . nextRecord ( ) ; sid = in . getSid ( ) ; ; if ( sid == 0 ) break ; if ( ( rec != null ) && ( sid != ContinueRecord . sid ) ) { userCode = req . processRecord ( rec ) ; if ( userCode != 0 ) break process ; } if ( sid != ContinueRecord . sid ) { Record [ ] recs = RecordFactory . createRecord ( in ) ; if ( recs . length > 1 ) { for ( int k = 0 ; k < ( recs . length - 1 ) ; k ++ ) { userCode = req . processRecord ( recs [ k ] ) ; if ( userCode != 0 ) break process ; } } rec = recs [ recs . length - 1 ] ; } else { throw new RecordFormatException ( "Records should handle ContinueRecord internally. Should not see this exception" ) ; } } if ( rec != null ) { userCode = req . processRecord ( rec ) ; if ( userCode != 0 ) break process ; } } return userCode ; } } 	1
package org . apache . poi . hssf . record ; import org . apache . poi . util . LittleEndian ; public class EndRecord extends Record { public static final short sid = 0x1034 ; public EndRecord ( ) { } public EndRecord ( RecordInputStream in ) { super ( in ) ; } protected void validateSid ( short id ) { if ( id != sid ) { throw new RecordFormatException ( "NOT An END RECORD" ) ; } } protected void fillFields ( RecordInputStream in ) { } public String toString ( ) { StringBuffer buffer = new StringBuffer ( ) ; buffer . append ( "[END]\n" ) ; buffer . append ( "[/END]\n" ) ; return buffer . toString ( ) ; } public int serialize ( int offset , byte [ ] data ) { LittleEndian . putShort ( data , 0 + offset , sid ) ; LittleEndian . putShort ( data , 2 + offset , ( ( short ) 0 ) ) ; return getRecordSize ( ) ; } public int getRecordSize ( ) { return 4 ; } public short getSid ( ) { return sid ; } } 	1
package org . apache . poi . hssf . model ; import java . util . ArrayList ; import java . util . Iterator ; import java . util . List ; import org . apache . poi . hssf . record . Record ; public class WorkbookRecordList { private List records = new ArrayList ( ) ; private int protpos = 0 ; private int bspos = 0 ; private int tabpos = 0 ; private int fontpos = 0 ; private int xfpos = 0 ; private int backuppos = 0 ; private int namepos = 0 ; private int supbookpos = 0 ; private int externsheetPos = 0 ; private int palettepos = - 1 ; public void setRecords ( List records ) { this . records = records ; } public int size ( ) { return records . size ( ) ; } public Record get ( int i ) { return ( Record ) records . get ( i ) ; } public void add ( int pos , Record r ) { records . add ( pos , r ) ; if ( getProtpos ( ) >= pos ) setProtpos ( protpos + 1 ) ; if ( getBspos ( ) >= pos ) setBspos ( bspos + 1 ) ; if ( getTabpos ( ) >= pos ) setTabpos ( tabpos + 1 ) ; if ( getFontpos ( ) >= pos ) setFontpos ( fontpos + 1 ) ; if ( getXfpos ( ) >= pos ) setXfpos ( xfpos + 1 ) ; if ( getBackuppos ( ) >= pos ) setBackuppos ( backuppos + 1 ) ; if ( getNamepos ( ) >= pos ) setNamepos ( namepos + 1 ) ; if ( getSupbookpos ( ) >= pos ) setSupbookpos ( supbookpos + 1 ) ; if ( ( getPalettepos ( ) != - 1 ) && ( getPalettepos ( ) >= pos ) ) setPalettepos ( palettepos + 1 ) ; if ( getExternsheetPos ( ) >= pos ) setExternsheetPos ( getExternsheetPos ( ) + 1 ) ; } public List getRecords ( ) { return records ; } public Iterator iterator ( ) { return records . iterator ( ) ; } public void remove ( int pos ) { records . remove ( pos ) ; if ( getProtpos ( ) >= pos ) setProtpos ( protpos - 1 ) ; if ( getBspos ( ) >= pos ) setBspos ( bspos - 1 ) ; if ( getTabpos ( ) >= pos ) setTabpos ( tabpos - 1 ) ; if ( getFontpos ( ) >= pos ) setFontpos ( fontpos - 1 ) ; if ( getXfpos ( ) >= pos ) setXfpos ( xfpos - 1 ) ; if ( getBackuppos ( ) >= pos ) setBackuppos ( backuppos - 1 ) ; if ( getNamepos ( ) >= pos ) setNamepos ( getNamepos ( ) - 1 ) ; if ( getSupbookpos ( ) >= pos ) setSupbookpos ( getSupbookpos ( ) - 1 ) ; if ( ( getPalettepos ( ) != - 1 ) && ( getPalettepos ( ) >= pos ) ) setPalettepos ( palettepos - 1 ) ; if ( getExternsheetPos ( ) >= pos ) setExternsheetPos ( getExternsheetPos ( ) - 1 ) ; } public int getProtpos ( ) { return protpos ; } public void setProtpos ( int protpos ) { this . protpos = protpos ; } public int getBspos ( ) { return bspos ; } public void setBspos ( int bspos ) { this . bspos = bspos ; } public int getTabpos ( ) { return tabpos ; } public void setTabpos ( int tabpos ) { this . tabpos = tabpos ; } public int getFontpos ( ) { return fontpos ; } public void setFontpos ( int fontpos ) { this . fontpos = fontpos ; } public int getXfpos ( ) { return xfpos ; } public void setXfpos ( int xfpos ) { this . xfpos = xfpos ; } public int getBackuppos ( ) { return backuppos ; } public void setBackuppos ( int backuppos ) { this . backuppos = backuppos ; } public int getPalettepos ( ) { return palettepos ; } public void setPalettepos ( int palettepos ) { this . palettepos = palettepos ; } public int getNamepos ( ) { return namepos ; } public int getSupbookpos ( ) { return supbookpos ; } public void setNamepos ( int namepos ) { this . namepos = namepos ; } public void setSupbookpos ( int supbookpos ) { this . supbookpos = supbookpos ; } public int getExternsheetPos ( ) { return externsheetPos ; } public void setExternsheetPos ( int externsheetPos ) { this . externsheetPos = externsheetPos ; } } 	1
package org . apache . poi . hssf . record ; import org . apache . poi . util . LittleEndian ; public class BOFRecord extends Record { public final static short sid = 0x809 ; private short field_1_version ; private short field_2_type ; private short field_3_build ; private short field_4_year ; private int field_5_history ; private int field_6_rversion ; public final static short VERSION = 0x06 ; public final static short BUILD = 0x10d3 ; public final static short BUILD_YEAR = 0x07CC ; public final static short HISTORY_MASK = 0x41 ; public final static short TYPE_WORKBOOK = 0x05 ; public final static short TYPE_VB_MODULE = 0x06 ; public final static short TYPE_WORKSHEET = 0x10 ; public final static short TYPE_CHART = 0x20 ; public final static short TYPE_EXCEL_4_MACRO = 0x40 ; public final static short TYPE_WORKSPACE_FILE = 0x100 ; public BOFRecord ( ) { } public BOFRecord ( RecordInputStream in ) { super ( in ) ; } protected void validateSid ( short id ) { if ( id != sid ) { throw new RecordFormatException ( "NOT A BOF RECORD" ) ; } } protected void fillFields ( RecordInputStream in ) { field_1_version = in . readShort ( ) ; field_2_type = in . readShort ( ) ; field_3_build = in . readShort ( ) ; field_4_year = in . readShort ( ) ; field_5_history = in . readInt ( ) ; field_6_rversion = in . readInt ( ) ; } public void setVersion ( short version ) { field_1_version = version ; } public void setType ( short type ) { field_2_type = type ; } public void setBuild ( short build ) { field_3_build = build ; } public void setBuildYear ( short year ) { field_4_year = year ; } public void setHistoryBitMask ( int bitmask ) { field_5_history = bitmask ; } public void setRequiredVersion ( int version ) { field_6_rversion = version ; } public short getVersion ( ) { return field_1_version ; } public short getType ( ) { return field_2_type ; } public short getBuild ( ) { return field_3_build ; } public short getBuildYear ( ) { return field_4_year ; } public int getHistoryBitMask ( ) { return field_5_history ; } public int getRequiredVersion ( ) { return field_6_rversion ; } public String toString ( ) { StringBuffer buffer = new StringBuffer ( ) ; buffer . append ( "[BOF RECORD]\n" ) ; buffer . append ( "    .version         = " ) . append ( Integer . toHexString ( getVersion ( ) ) ) . append ( "\n" ) ; buffer . append ( "    .type            = " ) . append ( Integer . toHexString ( getType ( ) ) ) . append ( "\n" ) ; buffer . append ( "    .build           = " ) . append ( Integer . toHexString ( getBuild ( ) ) ) . append ( "\n" ) ; buffer . append ( "    .buildyear       = " ) . append ( getBuildYear ( ) ) . append ( "\n" ) ; buffer . append ( "    .history         = " ) . append ( Integer . toHexString ( getHistoryBitMask ( ) ) ) . append ( "\n" ) ; buffer . append ( "    .requiredversion = " ) . append ( Integer . toHexString ( getRequiredVersion ( ) ) ) . append ( "\n" ) ; buffer . append ( "[/BOF RECORD]\n" ) ; return buffer . toString ( ) ; } public int serialize ( int offset , byte [ ] data ) { LittleEndian . putShort ( data , 0 + offset , sid ) ; LittleEndian . putShort ( data , 2 + offset , ( ( short ) 0x10 ) ) ; LittleEndian . putShort ( data , 4 + offset , getVersion ( ) ) ; LittleEndian . putShort ( data , 6 + offset , getType ( ) ) ; LittleEndian . putShort ( data , 8 + offset , getBuild ( ) ) ; LittleEndian . putShort ( data , 10 + offset , getBuildYear ( ) ) ; LittleEndian . putInt ( data , 12 + offset , getHistoryBitMask ( ) ) ; LittleEndian . putInt ( data , 16 + offset , getRequiredVersion ( ) ) ; return getRecordSize ( ) ; } public int getRecordSize ( ) { return 20 ; } public short getSid ( ) { return sid ; } public Object clone ( ) { BOFRecord rec = new BOFRecord ( ) ; rec . field_1_version = field_1_version ; rec . field_2_type = field_2_type ; rec . field_3_build = field_3_build ; rec . field_4_year = field_4_year ; rec . field_5_history = field_5_history ; rec . field_6_rversion = field_6_rversion ; return rec ; } } 	1
package org . apache . poi . hssf . record ; import org . apache . poi . util . LittleEndian ; import org . apache . poi . util . BitField ; import org . apache . poi . util . BitFieldFactory ; public class PrintSetupRecord extends Record { public final static short sid = 0xa1 ; private short field_1_paper_size ; private short field_2_scale ; private short field_3_page_start ; private short field_4_fit_width ; private short field_5_fit_height ; private short field_6_options ; static final private BitField lefttoright = BitFieldFactory . getInstance ( 0x01 ) ; static final private BitField landscape = BitFieldFactory . getInstance ( 0x02 ) ; static final private BitField validsettings = BitFieldFactory . getInstance ( 0x04 ) ; static final private BitField nocolor = BitFieldFactory . getInstance ( 0x08 ) ; static final private BitField draft = BitFieldFactory . getInstance ( 0x10 ) ; static final private BitField notes = BitFieldFactory . getInstance ( 0x20 ) ; static final private BitField noOrientation = BitFieldFactory . getInstance ( 0x40 ) ; static final private BitField usepage = BitFieldFactory . getInstance ( 0x80 ) ; private short field_7_hresolution ; private short field_8_vresolution ; private double field_9_headermargin ; private double field_10_footermargin ; private short field_11_copies ; public PrintSetupRecord ( ) { } public PrintSetupRecord ( RecordInputStream in ) { super ( in ) ; } protected void validateSid ( short id ) { if ( id != sid ) { throw new RecordFormatException ( "NOT A valid PrintSetup record RECORD" ) ; } } protected void fillFields ( RecordInputStream in ) { field_1_paper_size = in . readShort ( ) ; field_2_scale = in . readShort ( ) ; field_3_page_start = in . readShort ( ) ; field_4_fit_width = in . readShort ( ) ; field_5_fit_height = in . readShort ( ) ; field_6_options = in . readShort ( ) ; field_7_hresolution = in . readShort ( ) ; field_8_vresolution = in . readShort ( ) ; field_9_headermargin = in . readDouble ( ) ; field_10_footermargin = in . readDouble ( ) ; field_11_copies = in . readShort ( ) ; } public void setPaperSize ( short size ) { field_1_paper_size = size ; } public void setScale ( short scale ) { field_2_scale = scale ; } public void setPageStart ( short start ) { field_3_page_start = start ; } public void setFitWidth ( short width ) { field_4_fit_width = width ; } public void setFitHeight ( short height ) { field_5_fit_height = height ; } public void setOptions ( short options ) { field_6_options = options ; } public void setLeftToRight ( boolean ltor ) { field_6_options = lefttoright . setShortBoolean ( field_6_options , ltor ) ; } public void setLandscape ( boolean ls ) { field_6_options = landscape . setShortBoolean ( field_6_options , ls ) ; } public void setValidSettings ( boolean valid ) { field_6_options = validsettings . setShortBoolean ( field_6_options , valid ) ; } public void setNoColor ( boolean mono ) { field_6_options = nocolor . setShortBoolean ( field_6_options , mono ) ; } public void setDraft ( boolean d ) { field_6_options = draft . setShortBoolean ( field_6_options , d ) ; } public void setNotes ( boolean printnotes ) { field_6_options = notes . setShortBoolean ( field_6_options , printnotes ) ; } public void setNoOrientation ( boolean orientation ) { field_6_options = noOrientation . setShortBoolean ( field_6_options , orientation ) ; } public void setUsePage ( boolean page ) { field_6_options = usepage . setShortBoolean ( field_6_options , page ) ; } public void setHResolution ( short resolution ) { field_7_hresolution = resolution ; } public void setVResolution ( short resolution ) { field_8_vresolution = resolution ; } public void setHeaderMargin ( double headermargin ) { field_9_headermargin = headermargin ; } public void setFooterMargin ( double footermargin ) { field_10_footermargin = footermargin ; } public void setCopies ( short copies ) { field_11_copies = copies ; } public short getPaperSize ( ) { return field_1_paper_size ; } public short getScale ( ) { return field_2_scale ; } public short getPageStart ( ) { return field_3_page_start ; } public short getFitWidth ( ) { return field_4_fit_width ; } public short getFitHeight ( ) { return field_5_fit_height ; } public short getOptions ( ) { return field_6_options ; } public boolean getLeftToRight ( ) { return lefttoright . isSet ( field_6_options ) ; } public boolean getLandscape ( ) { return landscape . isSet ( field_6_options ) ; } public boolean getValidSettings ( ) { return validsettings . isSet ( field_6_options ) ; } public boolean getNoColor ( ) { return nocolor . isSet ( field_6_options ) ; } public boolean getDraft ( ) { return draft . isSet ( field_6_options ) ; } public boolean getNotes ( ) { return notes . isSet ( field_6_options ) ; } public boolean getNoOrientation ( ) { return noOrientation . isSet ( field_6_options ) ; } public boolean getUsePage ( ) { return usepage . isSet ( field_6_options ) ; } public short getHResolution ( ) { return field_7_hresolution ; } public short getVResolution ( ) { return field_8_vresolution ; } public double getHeaderMargin ( ) { return field_9_headermargin ; } public double getFooterMargin ( ) { return field_10_footermargin ; } public short getCopies ( ) { return field_11_copies ; } public String toString ( ) { StringBuffer buffer = new StringBuffer ( ) ; buffer . append ( "[PRINTSETUP]\n" ) ; buffer . append ( "    .papersize      = " ) . append ( getPaperSize ( ) ) . append ( "\n" ) ; buffer . append ( "    .scale          = " ) . append ( getScale ( ) ) . append ( "\n" ) ; buffer . append ( "    .pagestart      = " ) . append ( getPageStart ( ) ) . append ( "\n" ) ; buffer . append ( "    .fitwidth       = " ) . append ( getFitWidth ( ) ) . append ( "\n" ) ; buffer . append ( "    .fitheight      = " ) . append ( getFitHeight ( ) ) . append ( "\n" ) ; buffer . append ( "    .options        = " ) . append ( getOptions ( ) ) . append ( "\n" ) ; buffer . append ( "        .ltor       = " ) . append ( getLeftToRight ( ) ) . append ( "\n" ) ; buffer . append ( "        .landscape  = " ) . append ( getLandscape ( ) ) . append ( "\n" ) ; buffer . append ( "        .valid      = " ) . append ( getValidSettings ( ) ) . append ( "\n" ) ; buffer . append ( "        .mono       = " ) . append ( getNoColor ( ) ) . append ( "\n" ) ; buffer . append ( "        .draft      = " ) . append ( getDraft ( ) ) . append ( "\n" ) ; buffer . append ( "        .notes      = " ) . append ( getNotes ( ) ) . append ( "\n" ) ; buffer . append ( "        .noOrientat = " ) . append ( getNoOrientation ( ) ) . append ( "\n" ) ; buffer . append ( "        .usepage    = " ) . append ( getUsePage ( ) ) . append ( "\n" ) ; buffer . append ( "    .hresolution    = " ) . append ( getHResolution ( ) ) . append ( "\n" ) ; buffer . append ( "    .vresolution    = " ) . append ( getVResolution ( ) ) . append ( "\n" ) ; buffer . append ( "    .headermargin   = " ) . append ( getHeaderMargin ( ) ) . append ( "\n" ) ; buffer . append ( "    .footermargin   = " ) . append ( getFooterMargin ( ) ) . append ( "\n" ) ; buffer . append ( "    .copies         = " ) . append ( getCopies ( ) ) . append ( "\n" ) ; buffer . append ( "[/PRINTSETUP]\n" ) ; return buffer . toString ( ) ; } public int serialize ( int offset , byte [ ] data ) { LittleEndian . putShort ( data , 0 + offset , sid ) ; LittleEndian . putShort ( data , 2 + offset , ( short ) 34 ) ; LittleEndian . putShort ( data , 4 + offset , getPaperSize ( ) ) ; LittleEndian . putShort ( data , 6 + offset , getScale ( ) ) ; LittleEndian . putShort ( data , 8 + offset , getPageStart ( ) ) ; LittleEndian . putShort ( data , 10 + offset , getFitWidth ( ) ) ; LittleEndian . putShort ( data , 12 + offset , getFitHeight ( ) ) ; LittleEndian . putShort ( data , 14 + offset , getOptions ( ) ) ; LittleEndian . putShort ( data , 16 + offset , getHResolution ( ) ) ; LittleEndian . putShort ( data , 18 + offset , getVResolution ( ) ) ; LittleEndian . putDouble ( data , 20 + offset , getHeaderMargin ( ) ) ; LittleEndian . putDouble ( data , 28 + offset , getFooterMargin ( ) ) ; LittleEndian . putShort ( data , 36 + offset , getCopies ( ) ) ; return getRecordSize ( ) ; } public int getRecordSize ( ) { return 38 ; } public short getSid ( ) { return sid ; } public Object clone ( ) { PrintSetupRecord rec = new PrintSetupRecord ( ) ; rec . field_1_paper_size = field_1_paper_size ; rec . field_2_scale = field_2_scale ; rec . field_3_page_start = field_3_page_start ; rec . field_4_fit_width = field_4_fit_width ; rec . field_5_fit_height = field_5_fit_height ; rec . field_6_options = field_6_options ; rec . field_7_hresolution = field_7_hresolution ; rec . field_8_vresolution = field_8_vresolution ; rec . field_9_headermargin = field_9_headermargin ; rec . field_10_footermargin = field_10_footermargin ; rec . field_11_copies = field_11_copies ; return rec ; } } 	1
package org . apache . poi . hssf . usermodel ; public class HSSFPicture extends HSSFSimpleShape { public static final int PICTURE_TYPE_EMF = 0 ; public static final int PICTURE_TYPE_WMF = 1 ; public static final int PICTURE_TYPE_PICT = 2 ; public static final int PICTURE_TYPE_JPEG = 3 ; public static final int PICTURE_TYPE_PNG = 4 ; public static final int PICTURE_TYPE_DIB = 5 ; int pictureIndex ; HSSFPicture ( HSSFShape parent , HSSFAnchor anchor ) { super ( parent , anchor ) ; setShapeType ( OBJECT_TYPE_PICTURE ) ; } public int getPictureIndex ( ) { return pictureIndex ; } public void setPictureIndex ( int pictureIndex ) { this . pictureIndex = pictureIndex ; } } 	1
package org . apache . poi . hssf . record ; import org . apache . poi . util . * ; public class SeriesToChartGroupRecord extends Record { public final static short sid = 0x1045 ; private short field_1_chartGroupIndex ; public SeriesToChartGroupRecord ( ) { } public SeriesToChartGroupRecord ( RecordInputStream in ) { super ( in ) ; } protected void validateSid ( short id ) { if ( id != sid ) { throw new RecordFormatException ( "Not a SeriesToChartGroup record" ) ; } } protected void fillFields ( RecordInputStream in ) { field_1_chartGroupIndex = in . readShort ( ) ; } public String toString ( ) { StringBuffer buffer = new StringBuffer ( ) ; buffer . append ( "[SeriesToChartGroup]\n" ) ; buffer . append ( "    .chartGroupIndex      = " ) . append ( "0x" ) . append ( HexDump . toHex ( getChartGroupIndex ( ) ) ) . append ( " (" ) . append ( getChartGroupIndex ( ) ) . append ( " )" ) ; buffer . append ( System . getProperty ( "line.separator" ) ) ; buffer . append ( "[/SeriesToChartGroup]\n" ) ; return buffer . toString ( ) ; } public int serialize ( int offset , byte [ ] data ) { int pos = 0 ; LittleEndian . putShort ( data , 0 + offset , sid ) ; LittleEndian . putShort ( data , 2 + offset , ( short ) ( getRecordSize ( ) - 4 ) ) ; LittleEndian . putShort ( data , 4 + offset + pos , field_1_chartGroupIndex ) ; return getRecordSize ( ) ; } public int getRecordSize ( ) { return 4 + 2 ; } public short getSid ( ) { return sid ; } public Object clone ( ) { SeriesToChartGroupRecord rec = new SeriesToChartGroupRecord ( ) ; rec . field_1_chartGroupIndex = field_1_chartGroupIndex ; return rec ; } public short getChartGroupIndex ( ) { return field_1_chartGroupIndex ; } public void setChartGroupIndex ( short field_1_chartGroupIndex ) { this . field_1_chartGroupIndex = field_1_chartGroupIndex ; } } 	1
package org . apache . poi . hssf . record ; import org . apache . poi . util . LittleEndian ; public class CalcModeRecord extends Record { public final static short sid = 0xD ; public final static short MANUAL = 0 ; public final static short AUTOMATIC = 1 ; public final static short AUTOMATIC_EXCEPT_TABLES = - 1 ; private short field_1_calcmode ; public CalcModeRecord ( ) { } public CalcModeRecord ( RecordInputStream in ) { super ( in ) ; } protected void validateSid ( short id ) { if ( id != sid ) { throw new RecordFormatException ( "NOT An Calc Mode RECORD" ) ; } } protected void fillFields ( RecordInputStream in ) { field_1_calcmode = in . readShort ( ) ; } public void setCalcMode ( short calcmode ) { field_1_calcmode = calcmode ; } public short getCalcMode ( ) { return field_1_calcmode ; } public String toString ( ) { StringBuffer buffer = new StringBuffer ( ) ; buffer . append ( "[CALCMODE]\n" ) ; buffer . append ( "    .calcmode       = " ) . append ( Integer . toHexString ( getCalcMode ( ) ) ) . append ( "\n" ) ; buffer . append ( "[/CALCMODE]\n" ) ; return buffer . toString ( ) ; } public int serialize ( int offset , byte [ ] data ) { LittleEndian . putShort ( data , 0 + offset , sid ) ; LittleEndian . putShort ( data , 2 + offset , ( short ) 0x2 ) ; LittleEndian . putShort ( data , 4 + offset , getCalcMode ( ) ) ; return getRecordSize ( ) ; } public int getRecordSize ( ) { return 6 ; } public short getSid ( ) { return sid ; } public Object clone ( ) { CalcModeRecord rec = new CalcModeRecord ( ) ; rec . field_1_calcmode = field_1_calcmode ; return rec ; } } 	1
package org . apache . poi . hssf . record ; import org . apache . poi . util . LittleEndian ; public class PrintGridlinesRecord extends Record { public final static short sid = 0x2b ; private short field_1_print_gridlines ; public PrintGridlinesRecord ( ) { } public PrintGridlinesRecord ( RecordInputStream in ) { super ( in ) ; } protected void validateSid ( short id ) { if ( id != sid ) { throw new RecordFormatException ( "NOT A PrintGridlines RECORD" ) ; } } protected void fillFields ( RecordInputStream in ) { field_1_print_gridlines = in . readShort ( ) ; } public void setPrintGridlines ( boolean pg ) { if ( pg == true ) { field_1_print_gridlines = 1 ; } else { field_1_print_gridlines = 0 ; } } public boolean getPrintGridlines ( ) { return ( field_1_print_gridlines == 1 ) ; } public String toString ( ) { StringBuffer buffer = new StringBuffer ( ) ; buffer . append ( "[PRINTGRIDLINES]\n" ) ; buffer . append ( "    .printgridlines = " ) . append ( getPrintGridlines ( ) ) . append ( "\n" ) ; buffer . append ( "[/PRINTGRIDLINES]\n" ) ; return buffer . toString ( ) ; } public int serialize ( int offset , byte [ ] data ) { LittleEndian . putShort ( data , 0 + offset , sid ) ; LittleEndian . putShort ( data , 2 + offset , ( short ) 0x2 ) ; LittleEndian . putShort ( data , 4 + offset , field_1_print_gridlines ) ; return getRecordSize ( ) ; } public int getRecordSize ( ) { return 6 ; } public short getSid ( ) { return sid ; } public Object clone ( ) { PrintGridlinesRecord rec = new PrintGridlinesRecord ( ) ; rec . field_1_print_gridlines = field_1_print_gridlines ; return rec ; } } 	1
package org . apache . poi . poifs . property ; import java . util . Iterator ; import java . io . IOException ; public interface Parent extends Child { public Iterator getChildren ( ) ; public void addChild ( final Property property ) throws IOException ; public void setPreviousChild ( final Child child ) ; public void setNextChild ( final Child child ) ; } 	0
package org . apache . poi . poifs . eventfilesystem ; import org . apache . poi . poifs . filesystem . DocumentInputStream ; import org . apache . poi . poifs . filesystem . POIFSDocumentPath ; public class POIFSReaderEvent { private DocumentInputStream stream ; private POIFSDocumentPath path ; private String documentName ; POIFSReaderEvent ( final DocumentInputStream stream , final POIFSDocumentPath path , final String documentName ) { this . stream = stream ; this . path = path ; this . documentName = documentName ; } public DocumentInputStream getStream ( ) { return stream ; } public POIFSDocumentPath getPath ( ) { return path ; } public String getName ( ) { return documentName ; } } 	0
package org . apache . poi . hpsf ; import java . io . ByteArrayOutputStream ; import java . io . IOException ; import java . io . OutputStream ; import java . util . Collections ; import java . util . Comparator ; import java . util . Date ; import java . util . Iterator ; import java . util . LinkedList ; import java . util . List ; import java . util . ListIterator ; import java . util . Map ; import org . apache . poi . hpsf . wellknown . PropertyIDMap ; import org . apache . poi . util . LittleEndian ; public class MutableSection extends Section { private boolean dirty = true ; private List preprops ; private byte [ ] sectionBytes ; public MutableSection ( ) { dirty = true ; formatID = null ; offset = - 1 ; preprops = new LinkedList ( ) ; } public MutableSection ( final Section s ) { setFormatID ( s . getFormatID ( ) ) ; final Property [ ] pa = s . getProperties ( ) ; final MutableProperty [ ] mpa = new MutableProperty [ pa . length ] ; for ( int i = 0 ; i < pa . length ; i ++ ) mpa [ i ] = new MutableProperty ( pa [ i ] ) ; setProperties ( mpa ) ; setDictionary ( s . getDictionary ( ) ) ; } public void setFormatID ( final ClassID formatID ) { this . formatID = formatID ; } public void setFormatID ( final byte [ ] formatID ) { ClassID fid = getFormatID ( ) ; if ( fid == null ) { fid = new ClassID ( ) ; setFormatID ( fid ) ; } fid . setBytes ( formatID ) ; } public void setProperties ( final Property [ ] properties ) { this . properties = properties ; preprops = new LinkedList ( ) ; for ( int i = 0 ; i < properties . length ; i ++ ) preprops . add ( properties [ i ] ) ; dirty = true ; } public void setProperty ( final int id , final String value ) { setProperty ( id , Variant . VT_LPWSTR , value ) ; dirty = true ; } public void setProperty ( final int id , final int value ) { setProperty ( id , Variant . VT_I4 , new Integer ( value ) ) ; dirty = true ; } public void setProperty ( final int id , final long value ) { setProperty ( id , Variant . VT_I8 , new Long ( value ) ) ; dirty = true ; } public void setProperty ( final int id , final boolean value ) { setProperty ( id , Variant . VT_BOOL , new Boolean ( value ) ) ; dirty = true ; } public void setProperty ( final int id , final long variantType , final Object value ) { final MutableProperty p = new MutableProperty ( ) ; p . setID ( id ) ; p . setType ( variantType ) ; p . setValue ( value ) ; setProperty ( p ) ; dirty = true ; } public void setProperty ( final Property p ) { final long id = p . getID ( ) ; removeProperty ( id ) ; preprops . add ( p ) ; dirty = true ; } public void removeProperty ( final long id ) { for ( final Iterator i = preprops . iterator ( ) ; i . hasNext ( ) ; ) if ( ( ( Property ) i . next ( ) ) . getID ( ) == id ) { i . remove ( ) ; break ; } dirty = true ; } protected void setPropertyBooleanValue ( final int id , final boolean value ) { setProperty ( id , Variant . VT_BOOL , new Boolean ( value ) ) ; } public int getSize ( ) { if ( dirty ) { try { size = calcSize ( ) ; dirty = false ; } catch ( HPSFRuntimeException ex ) { throw ex ; } catch ( Exception ex ) { throw new HPSFRuntimeException ( ex ) ; } } return size ; } private int calcSize ( ) throws WritingNotSupportedException , IOException { final ByteArrayOutputStream out = new ByteArrayOutputStream ( ) ; write ( out ) ; out . close ( ) ; sectionBytes = Util . pad4 ( out . toByteArray ( ) ) ; return sectionBytes . length ; } public int write ( final OutputStream out ) throws WritingNotSupportedException , IOException { if ( ! dirty && sectionBytes != null ) { out . write ( sectionBytes ) ; return sectionBytes . length ; } final ByteArrayOutputStream propertyStream = new ByteArrayOutputStream ( ) ; final ByteArrayOutputStream propertyListStream = new ByteArrayOutputStream ( ) ; int position = 0 ; position += 2 * LittleEndian . INT_SIZE + getPropertyCount ( ) * 2 * LittleEndian . INT_SIZE ; int codepage = - 1 ; if ( getProperty ( PropertyIDMap . PID_DICTIONARY ) != null ) { final Object p1 = getProperty ( PropertyIDMap . PID_CODEPAGE ) ; if ( p1 != null ) { if ( ! ( p1 instanceof Integer ) ) throw new IllegalPropertySetDataException ( "The codepage property (ID = 1) must be an " + "Integer object." ) ; } else setProperty ( PropertyIDMap . PID_CODEPAGE , Variant . VT_I2 , new Integer ( Constants . CP_UNICODE ) ) ; codepage = getCodepage ( ) ; } Collections . sort ( preprops , new Comparator ( ) { public int compare ( final Object o1 , final Object o2 ) { final Property p1 = ( Property ) o1 ; final Property p2 = ( Property ) o2 ; if ( p1 . getID ( ) < p2 . getID ( ) ) return - 1 ; else if ( p1 . getID ( ) == p2 . getID ( ) ) return 0 ; else return 1 ; } } ) ; for ( final ListIterator i = preprops . listIterator ( ) ; i . hasNext ( ) ; ) { final MutableProperty p = ( MutableProperty ) i . next ( ) ; final long id = p . getID ( ) ; TypeWriter . writeUIntToStream ( propertyListStream , p . getID ( ) ) ; TypeWriter . writeUIntToStream ( propertyListStream , position ) ; if ( id != 0 ) position += p . write ( propertyStream , getCodepage ( ) ) ; else { if ( codepage == - 1 ) throw new IllegalPropertySetDataException ( "Codepage (property 1) is undefined." ) ; position += writeDictionary ( propertyStream , dictionary , codepage ) ; } } propertyStream . close ( ) ; propertyListStream . close ( ) ; byte [ ] pb1 = propertyListStream . toByteArray ( ) ; byte [ ] pb2 = propertyStream . toByteArray ( ) ; TypeWriter . writeToStream ( out , LittleEndian . INT_SIZE * 2 + pb1 . length + pb2 . length ) ; TypeWriter . writeToStream ( out , getPropertyCount ( ) ) ; out . write ( pb1 ) ; out . write ( pb2 ) ; int streamLength = LittleEndian . INT_SIZE * 2 + pb1 . length + pb2 . length ; return streamLength ; } private static int writeDictionary ( final OutputStream out , final Map dictionary , final int codepage ) throws IOException { int length = TypeWriter . writeUIntToStream ( out , dictionary . size ( ) ) ; for ( final Iterator i = dictionary . keySet ( ) . iterator ( ) ; i . hasNext ( ) ; ) { final Long key = ( Long ) i . next ( ) ; final String value = ( String ) dictionary . get ( key ) ; if ( codepage == Constants . CP_UNICODE ) { int sLength = value . length ( ) + 1 ; if ( sLength % 2 == 1 ) sLength ++ ; length += TypeWriter . writeUIntToStream ( out , key . longValue ( ) ) ; length += TypeWriter . writeUIntToStream ( out , sLength ) ; final byte [ ] ca = value . getBytes ( VariantSupport . codepageToEncoding ( codepage ) ) ; for ( int j = 2 ; j < ca . length ; j += 2 ) { out . write ( ca [ j + 1 ] ) ; out . write ( ca [ j ] ) ; length += 2 ; } sLength -= value . length ( ) ; while ( sLength > 0 ) { out . write ( 0x00 ) ; out . write ( 0x00 ) ; length += 2 ; sLength -- ; } } else { length += TypeWriter . writeUIntToStream ( out , key . longValue ( ) ) ; length += TypeWriter . writeUIntToStream ( out , value . length ( ) + 1 ) ; final byte [ ] ba = value . getBytes ( VariantSupport . codepageToEncoding ( codepage ) ) ; for ( int j = 0 ; j < ba . length ; j ++ ) { out . write ( ba [ j ] ) ; length ++ ; } out . write ( 0x00 ) ; length ++ ; } } return length ; } public int getPropertyCount ( ) { return preprops . size ( ) ; } public Property [ ] getProperties ( ) { properties = ( Property [ ] ) preprops . toArray ( new Property [ 0 ] ) ; return properties ; } public Object getProperty ( final long id ) { getProperties ( ) ; return super . getProperty ( id ) ; } public void setDictionary ( final Map dictionary ) throws IllegalPropertySetDataException { if ( dictionary != null ) { for ( final Iterator i = dictionary . keySet ( ) . iterator ( ) ; i . hasNext ( ) ; ) if ( ! ( i . next ( ) instanceof Long ) ) throw new IllegalPropertySetDataException ( "Dictionary keys must be of type Long." ) ; for ( final Iterator i = dictionary . values ( ) . iterator ( ) ; i . hasNext ( ) ; ) if ( ! ( i . next ( ) instanceof String ) ) throw new IllegalPropertySetDataException ( "Dictionary values must be of type String." ) ; this . dictionary = dictionary ; setProperty ( PropertyIDMap . PID_DICTIONARY , - 1 , dictionary ) ; final Integer codepage = ( Integer ) getProperty ( PropertyIDMap . PID_CODEPAGE ) ; if ( codepage == null ) setProperty ( PropertyIDMap . PID_CODEPAGE , Variant . VT_I2 , new Integer ( Constants . CP_UNICODE ) ) ; } else removeProperty ( PropertyIDMap . PID_DICTIONARY ) ; } public void setProperty ( final int id , final Object value ) { if ( value instanceof String ) setProperty ( id , ( String ) value ) ; else if ( value instanceof Long ) setProperty ( id , ( ( Long ) value ) . longValue ( ) ) ; else if ( value instanceof Integer ) setProperty ( id , ( ( Integer ) value ) . intValue ( ) ) ; else if ( value instanceof Short ) setProperty ( id , ( ( Short ) value ) . intValue ( ) ) ; else if ( value instanceof Boolean ) setProperty ( id , ( ( Boolean ) value ) . booleanValue ( ) ) ; else if ( value instanceof Date ) setProperty ( id , Variant . VT_FILETIME , value ) ; else throw new HPSFRuntimeException ( "HPSF does not support properties of type " + value . getClass ( ) . getName ( ) + "." ) ; } public void clear ( ) { final Property [ ] properties = getProperties ( ) ; for ( int i = 0 ; i < properties . length ; i ++ ) { final Property p = properties [ i ] ; removeProperty ( p . getID ( ) ) ; } } public void setCodepage ( final int codepage ) { setProperty ( PropertyIDMap . PID_CODEPAGE , Variant . VT_I2 , new Integer ( codepage ) ) ; } } 	0
package org . apache . poi . hssf . record ; import org . apache . poi . util . LittleEndian ; import org . apache . poi . util . StringUtil ; public class FooterRecord extends Record { public final static short sid = 0x15 ; private byte field_1_footer_len ; private byte field_2_reserved ; private byte field_3_unicode_flag ; private String field_4_footer ; public FooterRecord ( ) { } public FooterRecord ( RecordInputStream in ) { super ( in ) ; } protected void validateSid ( short id ) { if ( id != sid ) { throw new RecordFormatException ( "NOT A FooterRECORD" ) ; } } protected void fillFields ( RecordInputStream in ) { if ( in . remaining ( ) > 0 ) { field_1_footer_len = in . readByte ( ) ; field_2_reserved = in . readByte ( ) ; field_3_unicode_flag = in . readByte ( ) ; if ( isMultibyte ( ) ) { field_4_footer = in . readUnicodeLEString ( LittleEndian . ubyteToInt ( field_1_footer_len ) ) ; } else { field_4_footer = in . readCompressedUnicode ( LittleEndian . ubyteToInt ( field_1_footer_len ) ) ; } } } public boolean isMultibyte ( ) { return ( ( field_3_unicode_flag & 0xFF ) == 1 ) ; } public void setFooterLength ( byte len ) { field_1_footer_len = len ; } public void setFooter ( String footer ) { field_4_footer = footer ; field_3_unicode_flag = ( byte ) ( StringUtil . hasMultibyte ( field_4_footer ) ? 1 : 0 ) ; } public short getFooterLength ( ) { return ( short ) ( 0xFF & field_1_footer_len ) ; } public String getFooter ( ) { return field_4_footer ; } public String toString ( ) { StringBuffer buffer = new StringBuffer ( ) ; buffer . append ( "[FOOTER]\n" ) ; buffer . append ( "    .footerlen      = " ) . append ( Integer . toHexString ( getFooterLength ( ) ) ) . append ( "\n" ) ; buffer . append ( "    .footer         = " ) . append ( getFooter ( ) ) . append ( "\n" ) ; buffer . append ( "[/FOOTER]\n" ) ; return buffer . toString ( ) ; } public int serialize ( int offset , byte [ ] data ) { int len = 4 ; if ( getFooterLength ( ) > 0 ) { len += 3 ; } short bytelen = ( short ) ( isMultibyte ( ) ? getFooterLength ( ) * 2 : getFooterLength ( ) ) ; LittleEndian . putShort ( data , 0 + offset , sid ) ; LittleEndian . putShort ( data , 2 + offset , ( short ) ( ( len - 4 ) + bytelen ) ) ; if ( getFooterLength ( ) > 0 ) { data [ 4 + offset ] = ( byte ) getFooterLength ( ) ; data [ 6 + offset ] = field_3_unicode_flag ; if ( isMultibyte ( ) ) { StringUtil . putUnicodeLE ( getFooter ( ) , data , 7 + offset ) ; } else { StringUtil . putCompressedUnicode ( getFooter ( ) , data , 7 + offset ) ; } } return getRecordSize ( ) ; } public int getRecordSize ( ) { int retval = 4 ; if ( getFooterLength ( ) > 0 ) { retval += 3 ; } return ( isMultibyte ( ) ? ( retval + getFooterLength ( ) * 2 ) : ( retval + getFooterLength ( ) ) ) ; } public short getSid ( ) { return sid ; } public Object clone ( ) { FooterRecord rec = new FooterRecord ( ) ; rec . field_1_footer_len = field_1_footer_len ; rec . field_2_reserved = field_2_reserved ; rec . field_3_unicode_flag = field_3_unicode_flag ; rec . field_4_footer = field_4_footer ; return rec ; } } 	1
package org . apache . poi . util ; import java . util . List ; import java . util . ArrayList ; public class IntList2d { List rows = new ArrayList ( ) ; public int get ( int col , int row ) { if ( row >= rows . size ( ) ) { return 0 ; } else { IntList cols = ( IntList ) rows . get ( row ) ; if ( col >= cols . size ( ) ) return 0 ; else return cols . get ( col ) ; } } public void set ( int col , int row , int value ) { resizeRows ( row ) ; resizeCols ( row , col ) ; IntList cols = ( IntList ) rows . get ( row ) ; cols . set ( col , value ) ; } private void resizeRows ( int row ) { while ( rows . size ( ) <= row ) rows . add ( new IntList ( ) ) ; } private void resizeCols ( int row , int col ) { IntList cols = ( IntList ) rows . get ( row ) ; while ( cols . size ( ) <= col ) cols . add ( 0 ) ; } public boolean isAllocated ( int col , int row ) { if ( row < rows . size ( ) ) { IntList cols = ( IntList ) rows . get ( row ) ; return ( col < cols . size ( ) ) ; } else { return false ; } } } 	0
package org . apache . poi . hssf . usermodel ; import org . apache . poi . hssf . record . PaletteRecord ; import org . apache . poi . hssf . util . HSSFColor ; public class HSSFPalette { private PaletteRecord palette ; protected HSSFPalette ( PaletteRecord palette ) { this . palette = palette ; } public HSSFColor getColor ( short index ) { if ( index == HSSFColor . AUTOMATIC . index ) return HSSFColor . AUTOMATIC . getInstance ( ) ; else { byte [ ] b = palette . getColor ( index ) ; if ( b != null ) { return new CustomColor ( index , b ) ; } } return null ; } public HSSFColor findColor ( byte red , byte green , byte blue ) { byte [ ] b = palette . getColor ( PaletteRecord . FIRST_COLOR_INDEX ) ; for ( short i = ( short ) PaletteRecord . FIRST_COLOR_INDEX ; b != null ; b = palette . getColor ( ++ i ) ) { if ( b [ 0 ] == red && b [ 1 ] == green && b [ 2 ] == blue ) { return new CustomColor ( i , b ) ; } } return null ; } public HSSFColor findSimilarColor ( byte red , byte green , byte blue ) { HSSFColor result = null ; int minColorDistance = Integer . MAX_VALUE ; byte [ ] b = palette . getColor ( PaletteRecord . FIRST_COLOR_INDEX ) ; for ( short i = ( short ) PaletteRecord . FIRST_COLOR_INDEX ; b != null ; b = palette . getColor ( ++ i ) ) { int colorDistance = red - b [ 0 ] + green - b [ 1 ] + blue - b [ 2 ] ; if ( colorDistance < minColorDistance ) { result = getColor ( i ) ; } } return result ; } public void setColorAtIndex ( short index , byte red , byte green , byte blue ) { palette . setColor ( index , red , green , blue ) ; } public HSSFColor addColor ( byte red , byte green , byte blue ) { byte [ ] b = palette . getColor ( PaletteRecord . FIRST_COLOR_INDEX ) ; short i ; for ( i = ( short ) PaletteRecord . FIRST_COLOR_INDEX ; i < PaletteRecord . STANDARD_PALETTE_SIZE + PaletteRecord . FIRST_COLOR_INDEX ; b = palette . getColor ( ++ i ) ) { if ( b == null ) { setColorAtIndex ( i , red , green , blue ) ; return getColor ( i ) ; } } throw new RuntimeException ( "Could not find free color index" ) ; } private static class CustomColor extends HSSFColor { private short byteOffset ; private byte red ; private byte green ; private byte blue ; private CustomColor ( short byteOffset , byte [ ] colors ) { this ( byteOffset , colors [ 0 ] , colors [ 1 ] , colors [ 2 ] ) ; } private CustomColor ( short byteOffset , byte red , byte green , byte blue ) { this . byteOffset = byteOffset ; this . red = red ; this . green = green ; this . blue = blue ; } public short getIndex ( ) { return byteOffset ; } public short [ ] getTriplet ( ) { return new short [ ] { ( short ) ( red & 0xff ) , ( short ) ( green & 0xff ) , ( short ) ( blue & 0xff ) } ; } public String getHexString ( ) { StringBuffer sb = new StringBuffer ( ) ; sb . append ( getGnumericPart ( red ) ) ; sb . append ( ':' ) ; sb . append ( getGnumericPart ( green ) ) ; sb . append ( ':' ) ; sb . append ( getGnumericPart ( blue ) ) ; return sb . toString ( ) ; } private String getGnumericPart ( byte color ) { String s ; if ( color == 0 ) { s = "0" ; } else { int c = color & 0xff ; c = ( c << 8 ) | c ; s = Integer . toHexString ( c ) . toUpperCase ( ) ; while ( s . length ( ) < 4 ) { s = "0" + s ; } } return s ; } } } 	1
package org . apache . poi . poifs . property ; import java . io . IOException ; import java . io . OutputStream ; import java . util . * ; import org . apache . poi . poifs . common . POIFSConstants ; import org . apache . poi . poifs . filesystem . BATManaged ; import org . apache . poi . poifs . storage . BlockWritable ; import org . apache . poi . poifs . storage . PropertyBlock ; import org . apache . poi . poifs . storage . RawDataBlock ; import org . apache . poi . poifs . storage . RawDataBlockList ; public class PropertyTable implements BATManaged , BlockWritable { private int _start_block ; private List _properties ; private BlockWritable [ ] _blocks ; public PropertyTable ( ) { _start_block = POIFSConstants . END_OF_CHAIN ; _properties = new ArrayList ( ) ; addProperty ( new RootProperty ( ) ) ; _blocks = null ; } public PropertyTable ( final int startBlock , final RawDataBlockList blockList ) throws IOException { _start_block = POIFSConstants . END_OF_CHAIN ; _blocks = null ; _properties = PropertyFactory . convertToProperties ( blockList . fetchBlocks ( startBlock ) ) ; populatePropertyTree ( ( DirectoryProperty ) _properties . get ( 0 ) ) ; } public void addProperty ( final Property property ) { _properties . add ( property ) ; } public void removeProperty ( final Property property ) { _properties . remove ( property ) ; } public RootProperty getRoot ( ) { return ( RootProperty ) _properties . get ( 0 ) ; } public void preWrite ( ) { Property [ ] properties = ( Property [ ] ) _properties . toArray ( new Property [ 0 ] ) ; for ( int k = 0 ; k < properties . length ; k ++ ) { properties [ k ] . setIndex ( k ) ; } _blocks = PropertyBlock . createPropertyBlockArray ( _properties ) ; for ( int k = 0 ; k < properties . length ; k ++ ) { properties [ k ] . preWrite ( ) ; } } public int getStartBlock ( ) { return _start_block ; } private void populatePropertyTree ( DirectoryProperty root ) throws IOException { int index = root . getChildIndex ( ) ; if ( ! Property . isValidIndex ( index ) ) { return ; } Stack children = new Stack ( ) ; children . push ( _properties . get ( index ) ) ; while ( ! children . empty ( ) ) { Property property = ( Property ) children . pop ( ) ; root . addChild ( property ) ; if ( property . isDirectory ( ) ) { populatePropertyTree ( ( DirectoryProperty ) property ) ; } index = property . getPreviousChildIndex ( ) ; if ( Property . isValidIndex ( index ) ) { children . push ( _properties . get ( index ) ) ; } index = property . getNextChildIndex ( ) ; if ( Property . isValidIndex ( index ) ) { children . push ( _properties . get ( index ) ) ; } } } public int countBlocks ( ) { return ( _blocks == null ) ? 0 : _blocks . length ; } public void setStartBlock ( final int index ) { _start_block = index ; } public void writeBlocks ( final OutputStream stream ) throws IOException { if ( _blocks != null ) { for ( int j = 0 ; j < _blocks . length ; j ++ ) { _blocks [ j ] . writeBlocks ( stream ) ; } } } } 	1
package org . apache . poi . hssf . record ; import org . apache . poi . util . LittleEndian ; public class BookBoolRecord extends Record { public final static short sid = 0xDA ; private short field_1_save_link_values ; public BookBoolRecord ( ) { } public BookBoolRecord ( RecordInputStream in ) { super ( in ) ; } protected void validateSid ( short id ) { if ( id != sid ) { throw new RecordFormatException ( "NOT A BOOKBOOL RECORD" ) ; } } protected void fillFields ( RecordInputStream in ) { field_1_save_link_values = in . readShort ( ) ; } public void setSaveLinkValues ( short flag ) { field_1_save_link_values = flag ; } public short getSaveLinkValues ( ) { return field_1_save_link_values ; } public String toString ( ) { StringBuffer buffer = new StringBuffer ( ) ; buffer . append ( "[BOOKBOOL]\n" ) ; buffer . append ( "    .savelinkvalues  = " ) . append ( Integer . toHexString ( getSaveLinkValues ( ) ) ) . append ( "\n" ) ; buffer . append ( "[/BOOKBOOL]\n" ) ; return buffer . toString ( ) ; } public int serialize ( int offset , byte [ ] data ) { LittleEndian . putShort ( data , 0 + offset , sid ) ; LittleEndian . putShort ( data , 2 + offset , ( ( short ) 0x02 ) ) ; LittleEndian . putShort ( data , 4 + offset , field_1_save_link_values ) ; return getRecordSize ( ) ; } public int getRecordSize ( ) { return 6 ; } public short getSid ( ) { return sid ; } } 	1
package org . apache . poi . hssf . record ; import org . apache . poi . util . * ; public class SCLRecord extends Record { public final static short sid = 0xa0 ; private short field_1_numerator ; private short field_2_denominator ; public SCLRecord ( ) { } public SCLRecord ( RecordInputStream in ) { super ( in ) ; } protected void validateSid ( short id ) { if ( id != sid ) { throw new RecordFormatException ( "Not a SCL record" ) ; } } protected void fillFields ( RecordInputStream in ) { field_1_numerator = in . readShort ( ) ; field_2_denominator = in . readShort ( ) ; } public String toString ( ) { StringBuffer buffer = new StringBuffer ( ) ; buffer . append ( "[SCL]\n" ) ; buffer . append ( "    .numerator            = " ) . append ( "0x" ) . append ( HexDump . toHex ( getNumerator ( ) ) ) . append ( " (" ) . append ( getNumerator ( ) ) . append ( " )" ) ; buffer . append ( System . getProperty ( "line.separator" ) ) ; buffer . append ( "    .denominator          = " ) . append ( "0x" ) . append ( HexDump . toHex ( getDenominator ( ) ) ) . append ( " (" ) . append ( getDenominator ( ) ) . append ( " )" ) ; buffer . append ( System . getProperty ( "line.separator" ) ) ; buffer . append ( "[/SCL]\n" ) ; return buffer . toString ( ) ; } public int serialize ( int offset , byte [ ] data ) { int pos = 0 ; LittleEndian . putShort ( data , 0 + offset , sid ) ; LittleEndian . putShort ( data , 2 + offset , ( short ) ( getRecordSize ( ) - 4 ) ) ; LittleEndian . putShort ( data , 4 + offset + pos , field_1_numerator ) ; LittleEndian . putShort ( data , 6 + offset + pos , field_2_denominator ) ; return getRecordSize ( ) ; } public int getRecordSize ( ) { return 4 + 2 + 2 ; } public short getSid ( ) { return sid ; } public Object clone ( ) { SCLRecord rec = new SCLRecord ( ) ; rec . field_1_numerator = field_1_numerator ; rec . field_2_denominator = field_2_denominator ; return rec ; } public short getNumerator ( ) { return field_1_numerator ; } public void setNumerator ( short field_1_numerator ) { this . field_1_numerator = field_1_numerator ; } public short getDenominator ( ) { return field_2_denominator ; } public void setDenominator ( short field_2_denominator ) { this . field_2_denominator = field_2_denominator ; } } 	1
package org . apache . poi . hssf . record ; import org . apache . poi . util . LittleEndian ; import org . apache . poi . hssf . record . Record ; public class NumberRecord extends Record implements CellValueRecordInterface , Comparable { public static final short sid = 0x203 ; private int field_1_row ; private short field_2_col ; private short field_3_xf ; private double field_4_value ; public NumberRecord ( ) { } public NumberRecord ( RecordInputStream in ) { super ( in ) ; } protected void fillFields ( RecordInputStream in ) { field_1_row = in . readUShort ( ) ; field_2_col = in . readShort ( ) ; field_3_xf = in . readShort ( ) ; field_4_value = in . readDouble ( ) ; } public void setRow ( int row ) { field_1_row = row ; } public void setColumn ( short col ) { field_2_col = col ; } public void setXFIndex ( short xf ) { field_3_xf = xf ; } public void setValue ( double value ) { field_4_value = value ; } public int getRow ( ) { return field_1_row ; } public short getColumn ( ) { return field_2_col ; } public short getXFIndex ( ) { return field_3_xf ; } public double getValue ( ) { return field_4_value ; } public String toString ( ) { StringBuffer buffer = new StringBuffer ( ) ; buffer . append ( "[NUMBER]\n" ) ; buffer . append ( "    .row            = " ) . append ( Integer . toHexString ( getRow ( ) ) ) . append ( "\n" ) ; buffer . append ( "    .col            = " ) . append ( Integer . toHexString ( getColumn ( ) ) ) . append ( "\n" ) ; buffer . append ( "    .xfindex        = " ) . append ( Integer . toHexString ( getXFIndex ( ) ) ) . append ( "\n" ) ; buffer . append ( "    .value          = " ) . append ( getValue ( ) ) . append ( "\n" ) ; buffer . append ( "[/NUMBER]\n" ) ; return buffer . toString ( ) ; } public int serialize ( int offset , byte [ ] data ) { LittleEndian . putShort ( data , 0 + offset , sid ) ; LittleEndian . putShort ( data , 2 + offset , ( short ) 14 ) ; LittleEndian . putShort ( data , 4 + offset , ( short ) getRow ( ) ) ; LittleEndian . putShort ( data , 6 + offset , getColumn ( ) ) ; LittleEndian . putShort ( data , 8 + offset , getXFIndex ( ) ) ; LittleEndian . putDouble ( data , 10 + offset , getValue ( ) ) ; return getRecordSize ( ) ; } public int getRecordSize ( ) { return 18 ; } protected void validateSid ( short id ) { if ( id != sid ) { throw new RecordFormatException ( "NOT A Number RECORD" ) ; } } public short getSid ( ) { return sid ; } public boolean isBefore ( CellValueRecordInterface i ) { if ( this . getRow ( ) > i . getRow ( ) ) { return false ; } if ( ( this . getRow ( ) == i . getRow ( ) ) && ( this . getColumn ( ) > i . getColumn ( ) ) ) { return false ; } if ( ( this . getRow ( ) == i . getRow ( ) ) && ( this . getColumn ( ) == i . getColumn ( ) ) ) { return false ; } return true ; } public boolean isAfter ( CellValueRecordInterface i ) { if ( this . getRow ( ) < i . getRow ( ) ) { return false ; } if ( ( this . getRow ( ) == i . getRow ( ) ) && ( this . getColumn ( ) < i . getColumn ( ) ) ) { return false ; } if ( ( this . getRow ( ) == i . getRow ( ) ) && ( this . getColumn ( ) == i . getColumn ( ) ) ) { return false ; } return true ; } public boolean isEqual ( CellValueRecordInterface i ) { return ( ( this . getRow ( ) == i . getRow ( ) ) && ( this . getColumn ( ) == i . getColumn ( ) ) ) ; } public boolean isInValueSection ( ) { return true ; } public boolean isValue ( ) { return true ; } public int compareTo ( Object obj ) { CellValueRecordInterface loc = ( CellValueRecordInterface ) obj ; if ( ( this . getRow ( ) == loc . getRow ( ) ) && ( this . getColumn ( ) == loc . getColumn ( ) ) ) { return 0 ; } if ( this . getRow ( ) < loc . getRow ( ) ) { return - 1 ; } if ( this . getRow ( ) > loc . getRow ( ) ) { return 1 ; } if ( this . getColumn ( ) < loc . getColumn ( ) ) { return - 1 ; } if ( this . getColumn ( ) > loc . getColumn ( ) ) { return 1 ; } return - 1 ; } public boolean equals ( Object obj ) { if ( ! ( obj instanceof CellValueRecordInterface ) ) { return false ; } CellValueRecordInterface loc = ( CellValueRecordInterface ) obj ; if ( ( this . getRow ( ) == loc . getRow ( ) ) && ( this . getColumn ( ) == loc . getColumn ( ) ) ) { return true ; } return false ; } public Object clone ( ) { NumberRecord rec = new NumberRecord ( ) ; rec . field_1_row = field_1_row ; rec . field_2_col = field_2_col ; rec . field_3_xf = field_3_xf ; rec . field_4_value = field_4_value ; return rec ; } } 	1
package org . apache . poi . ddf ; import org . apache . poi . hssf . record . RecordFormatException ; import java . lang . reflect . Constructor ; import java . util . HashMap ; import java . util . Map ; public class DefaultEscherRecordFactory implements EscherRecordFactory { private static Class [ ] escherRecordClasses = { EscherBSERecord . class , EscherOptRecord . class , EscherClientAnchorRecord . class , EscherDgRecord . class , EscherSpgrRecord . class , EscherSpRecord . class , EscherClientDataRecord . class , EscherDggRecord . class , EscherSplitMenuColorsRecord . class , EscherChildAnchorRecord . class , EscherTextboxRecord . class } ; private static Map recordsMap = recordsToMap ( escherRecordClasses ) ; public DefaultEscherRecordFactory ( ) { } public EscherRecord createRecord ( byte [ ] data , int offset ) { EscherRecord . EscherRecordHeader header = EscherRecord . EscherRecordHeader . readHeader ( data , offset ) ; if ( ( header . getOptions ( ) & ( short ) 0x000F ) == ( short ) 0x000F && header . getRecordId ( ) != EscherTextboxRecord . RECORD_ID ) { EscherContainerRecord r = new EscherContainerRecord ( ) ; r . setRecordId ( header . getRecordId ( ) ) ; r . setOptions ( header . getOptions ( ) ) ; return r ; } else if ( header . getRecordId ( ) >= EscherBlipRecord . RECORD_ID_START && header . getRecordId ( ) <= EscherBlipRecord . RECORD_ID_END ) { EscherBlipRecord r ; if ( header . getRecordId ( ) == EscherBitmapBlip . RECORD_ID_DIB || header . getRecordId ( ) == EscherBitmapBlip . RECORD_ID_JPEG || header . getRecordId ( ) == EscherBitmapBlip . RECORD_ID_PNG ) { r = new EscherBitmapBlip ( ) ; } else { r = new EscherBlipRecord ( ) ; } r . setRecordId ( header . getRecordId ( ) ) ; r . setOptions ( header . getOptions ( ) ) ; return r ; } else { Constructor recordConstructor = ( Constructor ) recordsMap . get ( new Short ( header . getRecordId ( ) ) ) ; EscherRecord escherRecord = null ; if ( recordConstructor != null ) { try { escherRecord = ( EscherRecord ) recordConstructor . newInstance ( new Object [ ] { } ) ; escherRecord . setRecordId ( header . getRecordId ( ) ) ; escherRecord . setOptions ( header . getOptions ( ) ) ; } catch ( Exception e ) { escherRecord = null ; } } return escherRecord == null ? new UnknownEscherRecord ( ) : escherRecord ; } } private static Map recordsToMap ( Class [ ] records ) { Map result = new HashMap ( ) ; Constructor constructor ; for ( int i = 0 ; i < records . length ; i ++ ) { Class record = null ; short sid = 0 ; record = records [ i ] ; try { sid = record . getField ( "RECORD_ID" ) . getShort ( null ) ; constructor = record . getConstructor ( new Class [ ] { } ) ; } catch ( Exception illegalArgumentException ) { throw new RecordFormatException ( "Unable to determine record types" ) ; } result . put ( new Short ( sid ) , constructor ) ; } return result ; } } 	1
package org . apache . poi . ddf ; public class NullEscherSerializationListener implements EscherSerializationListener { public void beforeRecordSerialize ( int offset , short recordId , EscherRecord record ) { } public void afterRecordSerialize ( int offset , short recordId , int size , EscherRecord record ) { } } 	1
package org . apache . poi . hssf . record ; import org . apache . poi . util . * ; public class PlotAreaRecord extends Record { public final static short sid = 0x1035 ; public PlotAreaRecord ( ) { } public PlotAreaRecord ( RecordInputStream in ) { super ( in ) ; } protected void validateSid ( short id ) { if ( id != sid ) { throw new RecordFormatException ( "Not a PlotArea record" ) ; } } protected void fillFields ( RecordInputStream in ) { } public String toString ( ) { StringBuffer buffer = new StringBuffer ( ) ; buffer . append ( "[PLOTAREA]\n" ) ; buffer . append ( "[/PLOTAREA]\n" ) ; return buffer . toString ( ) ; } public int serialize ( int offset , byte [ ] data ) { LittleEndian . putShort ( data , 0 + offset , sid ) ; LittleEndian . putShort ( data , 2 + offset , ( short ) ( getRecordSize ( ) - 4 ) ) ; return getRecordSize ( ) ; } public int getRecordSize ( ) { return 4 ; } public short getSid ( ) { return sid ; } public Object clone ( ) { PlotAreaRecord rec = new PlotAreaRecord ( ) ; return rec ; } } 	1
package org . apache . poi . hpsf ; public class CustomProperty extends MutableProperty { private String name ; public CustomProperty ( ) { this . name = null ; } public CustomProperty ( final Property property ) { this ( property , null ) ; } public CustomProperty ( final Property property , final String name ) { super ( property ) ; this . name = name ; } public String getName ( ) { return name ; } public void setName ( final String name ) { this . name = name ; } public boolean equalsContents ( final Object o ) { final CustomProperty c = ( CustomProperty ) o ; final String name1 = c . getName ( ) ; final String name2 = this . getName ( ) ; boolean equalNames = true ; if ( name1 == null ) equalNames = name2 == null ; else equalNames = name1 . equals ( name2 ) ; return equalNames && c . getID ( ) == this . getID ( ) && c . getType ( ) == this . getType ( ) && c . getValue ( ) . equals ( this . getValue ( ) ) ; } public int hashCode ( ) { return ( int ) this . getID ( ) ; } } 	0
package org . apache . poi . ddf ; import org . apache . poi . util . HexDump ; import org . apache . poi . util . LittleEndian ; import org . apache . poi . hssf . record . RecordFormatException ; public class EscherSpgrRecord extends EscherRecord { public static final short RECORD_ID = ( short ) 0xF009 ; public static final String RECORD_DESCRIPTION = "MsofbtSpgr" ; private int field_1_rectX1 ; private int field_2_rectY1 ; private int field_3_rectX2 ; private int field_4_rectY2 ; public int fillFields ( byte [ ] data , int offset , EscherRecordFactory recordFactory ) { int bytesRemaining = readHeader ( data , offset ) ; int pos = offset + 8 ; int size = 0 ; field_1_rectX1 = LittleEndian . getInt ( data , pos + size ) ; size += 4 ; field_2_rectY1 = LittleEndian . getInt ( data , pos + size ) ; size += 4 ; field_3_rectX2 = LittleEndian . getInt ( data , pos + size ) ; size += 4 ; field_4_rectY2 = LittleEndian . getInt ( data , pos + size ) ; size += 4 ; bytesRemaining -= size ; if ( bytesRemaining != 0 ) throw new RecordFormatException ( "Expected no remaining bytes but got " + bytesRemaining ) ; return 8 + size + bytesRemaining ; } public int serialize ( int offset , byte [ ] data , EscherSerializationListener listener ) { listener . beforeRecordSerialize ( offset , getRecordId ( ) , this ) ; LittleEndian . putShort ( data , offset , getOptions ( ) ) ; LittleEndian . putShort ( data , offset + 2 , getRecordId ( ) ) ; int remainingBytes = 16 ; LittleEndian . putInt ( data , offset + 4 , remainingBytes ) ; LittleEndian . putInt ( data , offset + 8 , field_1_rectX1 ) ; LittleEndian . putInt ( data , offset + 12 , field_2_rectY1 ) ; LittleEndian . putInt ( data , offset + 16 , field_3_rectX2 ) ; LittleEndian . putInt ( data , offset + 20 , field_4_rectY2 ) ; listener . afterRecordSerialize ( offset + getRecordSize ( ) , getRecordId ( ) , offset + getRecordSize ( ) , this ) ; return 8 + 16 ; } public int getRecordSize ( ) { return 8 + 16 ; } public short getRecordId ( ) { return RECORD_ID ; } public String getRecordName ( ) { return "Spgr" ; } public String toString ( ) { String nl = System . getProperty ( "line.separator" ) ; return getClass ( ) . getName ( ) + ":" + nl + "  RecordId: 0x" + HexDump . toHex ( RECORD_ID ) + nl + "  Options: 0x" + HexDump . toHex ( getOptions ( ) ) + nl + "  RectX: " + field_1_rectX1 + nl + "  RectY: " + field_2_rectY1 + nl + "  RectWidth: " + field_3_rectX2 + nl + "  RectHeight: " + field_4_rectY2 + nl ; } public int getRectX1 ( ) { return field_1_rectX1 ; } public void setRectX1 ( int x1 ) { this . field_1_rectX1 = x1 ; } public int getRectY1 ( ) { return field_2_rectY1 ; } public void setRectY1 ( int y1 ) { this . field_2_rectY1 = y1 ; } public int getRectX2 ( ) { return field_3_rectX2 ; } public void setRectX2 ( int x2 ) { this . field_3_rectX2 = x2 ; } public int getRectY2 ( ) { return field_4_rectY2 ; } public void setRectY2 ( int field_4_rectY2 ) { this . field_4_rectY2 = field_4_rectY2 ; } } 	1
package org . apache . poi . hssf . record ; import org . apache . poi . util . * ; public class AxisParentRecord extends Record { public final static short sid = 0x1041 ; private short field_1_axisType ; public final static short AXIS_TYPE_MAIN = 0 ; public final static short AXIS_TYPE_SECONDARY = 1 ; private int field_2_x ; private int field_3_y ; private int field_4_width ; private int field_5_height ; public AxisParentRecord ( ) { } public AxisParentRecord ( RecordInputStream in ) { super ( in ) ; } protected void validateSid ( short id ) { if ( id != sid ) { throw new RecordFormatException ( "Not a AxisParent record" ) ; } } protected void fillFields ( RecordInputStream in ) { field_1_axisType = in . readShort ( ) ; field_2_x = in . readInt ( ) ; field_3_y = in . readInt ( ) ; field_4_width = in . readInt ( ) ; field_5_height = in . readInt ( ) ; } public String toString ( ) { StringBuffer buffer = new StringBuffer ( ) ; buffer . append ( "[AXISPARENT]\n" ) ; buffer . append ( "    .axisType             = " ) . append ( "0x" ) . append ( HexDump . toHex ( getAxisType ( ) ) ) . append ( " (" ) . append ( getAxisType ( ) ) . append ( " )" ) ; buffer . append ( System . getProperty ( "line.separator" ) ) ; buffer . append ( "    .x                    = " ) . append ( "0x" ) . append ( HexDump . toHex ( getX ( ) ) ) . append ( " (" ) . append ( getX ( ) ) . append ( " )" ) ; buffer . append ( System . getProperty ( "line.separator" ) ) ; buffer . append ( "    .y                    = " ) . append ( "0x" ) . append ( HexDump . toHex ( getY ( ) ) ) . append ( " (" ) . append ( getY ( ) ) . append ( " )" ) ; buffer . append ( System . getProperty ( "line.separator" ) ) ; buffer . append ( "    .width                = " ) . append ( "0x" ) . append ( HexDump . toHex ( getWidth ( ) ) ) . append ( " (" ) . append ( getWidth ( ) ) . append ( " )" ) ; buffer . append ( System . getProperty ( "line.separator" ) ) ; buffer . append ( "    .height               = " ) . append ( "0x" ) . append ( HexDump . toHex ( getHeight ( ) ) ) . append ( " (" ) . append ( getHeight ( ) ) . append ( " )" ) ; buffer . append ( System . getProperty ( "line.separator" ) ) ; buffer . append ( "[/AXISPARENT]\n" ) ; return buffer . toString ( ) ; } public int serialize ( int offset , byte [ ] data ) { int pos = 0 ; LittleEndian . putShort ( data , 0 + offset , sid ) ; LittleEndian . putShort ( data , 2 + offset , ( short ) ( getRecordSize ( ) - 4 ) ) ; LittleEndian . putShort ( data , 4 + offset + pos , field_1_axisType ) ; LittleEndian . putInt ( data , 6 + offset + pos , field_2_x ) ; LittleEndian . putInt ( data , 10 + offset + pos , field_3_y ) ; LittleEndian . putInt ( data , 14 + offset + pos , field_4_width ) ; LittleEndian . putInt ( data , 18 + offset + pos , field_5_height ) ; return getRecordSize ( ) ; } public int getRecordSize ( ) { return 4 + 2 + 4 + 4 + 4 + 4 ; } public short getSid ( ) { return sid ; } public Object clone ( ) { AxisParentRecord rec = new AxisParentRecord ( ) ; rec . field_1_axisType = field_1_axisType ; rec . field_2_x = field_2_x ; rec . field_3_y = field_3_y ; rec . field_4_width = field_4_width ; rec . field_5_height = field_5_height ; return rec ; } public short getAxisType ( ) { return field_1_axisType ; } public void setAxisType ( short field_1_axisType ) { this . field_1_axisType = field_1_axisType ; } public int getX ( ) { return field_2_x ; } public void setX ( int field_2_x ) { this . field_2_x = field_2_x ; } public int getY ( ) { return field_3_y ; } public void setY ( int field_3_y ) { this . field_3_y = field_3_y ; } public int getWidth ( ) { return field_4_width ; } public void setWidth ( int field_4_width ) { this . field_4_width = field_4_width ; } public int getHeight ( ) { return field_5_height ; } public void setHeight ( int field_5_height ) { this . field_5_height = field_5_height ; } } 	1
package org . apache . poi . hssf . record ; import org . apache . poi . util . LittleEndian ; public class DateWindow1904Record extends Record { public final static short sid = 0x22 ; private short field_1_window ; public DateWindow1904Record ( ) { } public DateWindow1904Record ( RecordInputStream in ) { super ( in ) ; } protected void validateSid ( short id ) { if ( id != sid ) { throw new RecordFormatException ( "NOT A 1904 RECORD" ) ; } } protected void fillFields ( RecordInputStream in ) { field_1_window = in . readShort ( ) ; } public void setWindowing ( short window ) { field_1_window = window ; } public short getWindowing ( ) { return field_1_window ; } public String toString ( ) { StringBuffer buffer = new StringBuffer ( ) ; buffer . append ( "[1904]\n" ) ; buffer . append ( "    .is1904          = " ) . append ( Integer . toHexString ( getWindowing ( ) ) ) . append ( "\n" ) ; buffer . append ( "[/1904]\n" ) ; return buffer . toString ( ) ; } public int serialize ( int offset , byte [ ] data ) { LittleEndian . putShort ( data , 0 + offset , sid ) ; LittleEndian . putShort ( data , 2 + offset , ( ( short ) 0x02 ) ) ; LittleEndian . putShort ( data , 4 + offset , getWindowing ( ) ) ; return getRecordSize ( ) ; } public int getRecordSize ( ) { return 6 ; } public short getSid ( ) { return sid ; } } 	1
package org . apache . poi . hssf . record ; import org . apache . poi . util . LittleEndian ; public class RefreshAllRecord extends Record { public final static short sid = 0x1B7 ; private short field_1_refreshall ; public RefreshAllRecord ( ) { } public RefreshAllRecord ( RecordInputStream in ) { super ( in ) ; } protected void validateSid ( short id ) { if ( id != sid ) { throw new RecordFormatException ( "NOT A REFRESHALL RECORD" ) ; } } protected void fillFields ( RecordInputStream in ) { field_1_refreshall = in . readShort ( ) ; } public void setRefreshAll ( boolean refreshall ) { if ( refreshall ) { field_1_refreshall = 1 ; } else { field_1_refreshall = 0 ; } } public boolean getRefreshAll ( ) { return ( field_1_refreshall == 1 ) ; } public String toString ( ) { StringBuffer buffer = new StringBuffer ( ) ; buffer . append ( "[REFRESHALL]\n" ) ; buffer . append ( "    .refreshall      = " ) . append ( getRefreshAll ( ) ) . append ( "\n" ) ; buffer . append ( "[/REFRESHALL]\n" ) ; return buffer . toString ( ) ; } public int serialize ( int offset , byte [ ] data ) { LittleEndian . putShort ( data , 0 + offset , sid ) ; LittleEndian . putShort ( data , 2 + offset , ( ( short ) 0x02 ) ) ; LittleEndian . putShort ( data , 4 + offset , field_1_refreshall ) ; return getRecordSize ( ) ; } public int getRecordSize ( ) { return 6 ; } public short getSid ( ) { return sid ; } } 	1
package org . apache . poi . hssf . record ; import org . apache . poi . hssf . record . formula . Ptg ; import org . apache . poi . util . LittleEndian ; import java . util . Stack ; import java . util . Iterator ; public class LinkedDataFormulaField implements CustomField { Stack formulaTokens = new Stack ( ) ; public int getSize ( ) { int size = 0 ; for ( Iterator iterator = formulaTokens . iterator ( ) ; iterator . hasNext ( ) ; ) { Ptg token = ( Ptg ) iterator . next ( ) ; size += token . getSize ( ) ; } return size + 2 ; } public int fillField ( RecordInputStream in ) { short tokenSize = in . readShort ( ) ; formulaTokens = Ptg . createParsedExpressionTokens ( tokenSize , in ) ; return tokenSize + 2 ; } public void toString ( StringBuffer buffer ) { for ( int k = 0 ; k < formulaTokens . size ( ) ; k ++ ) { buffer . append ( "Formula " ) . append ( k ) . append ( "=" ) . append ( formulaTokens . get ( k ) . toString ( ) ) . append ( "\n" ) . append ( ( ( Ptg ) formulaTokens . get ( k ) ) . toDebugString ( ) ) . append ( "\n" ) ; } } public String toString ( ) { StringBuffer b = new StringBuffer ( ) ; toString ( b ) ; return b . toString ( ) ; } public int serializeField ( int offset , byte [ ] data ) { int size = getSize ( ) ; LittleEndian . putShort ( data , offset , ( short ) ( size - 2 ) ) ; int pos = offset + 2 ; pos += Ptg . serializePtgStack ( formulaTokens , data , pos ) ; return size ; } public Object clone ( ) { try { return super . clone ( ) ; } catch ( CloneNotSupportedException e ) { return null ; } } public void setFormulaTokens ( Stack formulaTokens ) { this . formulaTokens = ( Stack ) formulaTokens . clone ( ) ; } public Stack getFormulaTokens ( ) { return ( Stack ) this . formulaTokens . clone ( ) ; } } 	0
package org . apache . poi . hssf . util ; public class CellReference { private int row ; private int col ; private String sheetName ; private boolean rowAbs ; private boolean colAbs ; public CellReference ( String cellRef ) { String [ ] parts = separateRefParts ( cellRef ) ; sheetName = parts [ 0 ] ; String ref = parts [ 1 ] ; if ( ( ref == null ) || ( "" . equals ( ref ) ) ) throw new IllegalArgumentException ( "Invalid Formula cell reference: '" + cellRef + "'" ) ; if ( ref . charAt ( 0 ) == '$' ) { colAbs = true ; ref = ref . substring ( 1 ) ; } col = convertColStringToNum ( ref ) ; ref = parts [ 2 ] ; if ( ( ref == null ) || ( "" . equals ( ref ) ) ) throw new IllegalArgumentException ( "Invalid Formula cell reference: '" + cellRef + "'" ) ; if ( ref . charAt ( 0 ) == '$' ) { rowAbs = true ; ref = ref . substring ( 1 ) ; } row = Integer . parseInt ( ref ) - 1 ; } public CellReference ( int pRow , int pCol ) { this ( pRow , pCol , false , false ) ; } public CellReference ( int pRow , int pCol , boolean pAbsRow , boolean pAbsCol ) { row = pRow ; col = pCol ; rowAbs = pAbsRow ; colAbs = pAbsCol ; } public int getRow ( ) { return row ; } public short getCol ( ) { return ( short ) col ; } public boolean isRowAbsolute ( ) { return rowAbs ; } public boolean isColAbsolute ( ) { return colAbs ; } public String getSheetName ( ) { return sheetName ; } private int convertColStringToNum ( String ref ) { int len = ref . length ( ) ; int retval = 0 ; int pos = 0 ; for ( int k = ref . length ( ) - 1 ; k > - 1 ; k -- ) { char thechar = ref . charAt ( k ) ; if ( pos == 0 ) { retval += ( Character . getNumericValue ( thechar ) - 9 ) ; } else { retval += ( Character . getNumericValue ( thechar ) - 9 ) * ( pos * 26 ) ; } pos ++ ; } return retval - 1 ; } private String [ ] separateRefParts ( String reference ) { String retval [ ] = new String [ 3 ] ; int start = reference . indexOf ( "!" ) ; if ( start != - 1 ) retval [ 0 ] = reference . substring ( 0 , start ) ; start += 1 ; int length = reference . length ( ) ; char [ ] chars = reference . toCharArray ( ) ; int loc = start ; if ( chars [ loc ] == '$' ) loc ++ ; for ( ; loc < chars . length ; loc ++ ) { if ( Character . isDigit ( chars [ loc ] ) || chars [ loc ] == '$' ) { break ; } } retval [ 1 ] = reference . substring ( start , loc ) ; retval [ 2 ] = reference . substring ( loc ) ; return retval ; } private static String convertNumToColString ( int col ) { String retval = null ; int mod = col % 26 ; int div = col / 26 ; char small = ( char ) ( mod + 65 ) ; char big = ( char ) ( div + 64 ) ; if ( div == 0 ) { retval = "" + small ; } else { retval = "" + big + "" + small ; } return retval ; } public String toString ( ) { StringBuffer retval = new StringBuffer ( ) ; retval . append ( ( colAbs ) ? "$" : "" ) ; retval . append ( convertNumToColString ( col ) ) ; retval . append ( ( rowAbs ) ? "$" : "" ) ; retval . append ( row + 1 ) ; return retval . toString ( ) ; } } 	1
package org . apache . poi . hssf . usermodel ; import org . apache . poi . hssf . model . Workbook ; import org . apache . poi . hssf . record . LabelSSTRecord ; import org . apache . poi . hssf . record . UnicodeString ; import java . util . Iterator ; public class HSSFRichTextString implements Comparable { public static final short NO_FONT = 0 ; private UnicodeString string ; private Workbook book ; private LabelSSTRecord record ; public HSSFRichTextString ( ) { this ( "" ) ; } public HSSFRichTextString ( String string ) { if ( string == null ) string = "" ; this . string = new UnicodeString ( string ) ; } HSSFRichTextString ( Workbook book , LabelSSTRecord record ) { setWorkbookReferences ( book , record ) ; this . string = book . getSSTString ( record . getSSTIndex ( ) ) ; } void setWorkbookReferences ( Workbook book , LabelSSTRecord record ) { this . book = book ; this . record = record ; } private UnicodeString cloneStringIfRequired ( ) { if ( book == null ) return string ; UnicodeString s = ( UnicodeString ) string . clone ( ) ; return s ; } private void addToSSTIfRequired ( ) { if ( book != null ) { int index = book . addSSTString ( string ) ; record . setSSTIndex ( index ) ; string = book . getSSTString ( index ) ; } } public void applyFont ( int startIndex , int endIndex , short fontIndex ) { if ( startIndex > endIndex ) throw new IllegalArgumentException ( "Start index must be less than end index." ) ; if ( startIndex < 0 || endIndex > length ( ) ) throw new IllegalArgumentException ( "Start and end index not in range." ) ; if ( startIndex == endIndex ) return ; short currentFont = NO_FONT ; if ( endIndex != length ( ) ) { currentFont = this . getFontAtIndex ( startIndex ) ; } string = cloneStringIfRequired ( ) ; Iterator formatting = string . formatIterator ( ) ; if ( formatting != null ) { while ( formatting . hasNext ( ) ) { UnicodeString . FormatRun r = ( UnicodeString . FormatRun ) formatting . next ( ) ; if ( ( r . getCharacterPos ( ) >= startIndex ) && ( r . getCharacterPos ( ) < endIndex ) ) formatting . remove ( ) ; } } string . addFormatRun ( new UnicodeString . FormatRun ( ( short ) startIndex , fontIndex ) ) ; if ( endIndex != length ( ) ) string . addFormatRun ( new UnicodeString . FormatRun ( ( short ) endIndex , currentFont ) ) ; addToSSTIfRequired ( ) ; } public void applyFont ( int startIndex , int endIndex , HSSFFont font ) { applyFont ( startIndex , endIndex , font . getIndex ( ) ) ; } public void applyFont ( HSSFFont font ) { applyFont ( 0 , string . getCharCount ( ) , font ) ; } public void clearFormatting ( ) { string = cloneStringIfRequired ( ) ; string . clearFormatting ( ) ; addToSSTIfRequired ( ) ; } public String getString ( ) { return string . getString ( ) ; } UnicodeString getUnicodeString ( ) { return cloneStringIfRequired ( ) ; } void setUnicodeString ( UnicodeString str ) { this . string = str ; } public int length ( ) { return string . getCharCount ( ) ; } public short getFontAtIndex ( int index ) { int size = string . getFormatRunCount ( ) ; UnicodeString . FormatRun currentRun = null ; for ( int i = 0 ; i < size ; i ++ ) { UnicodeString . FormatRun r = string . getFormatRun ( i ) ; if ( r . getCharacterPos ( ) > index ) break ; else currentRun = r ; } if ( currentRun == null ) return NO_FONT ; else return currentRun . getFontIndex ( ) ; } public int numFormattingRuns ( ) { return string . getFormatRunCount ( ) ; } public int getIndexOfFormattingRun ( int index ) { UnicodeString . FormatRun r = string . getFormatRun ( index ) ; return r . getCharacterPos ( ) ; } public short getFontOfFormattingRun ( int index ) { UnicodeString . FormatRun r = string . getFormatRun ( index ) ; return r . getFontIndex ( ) ; } public int compareTo ( Object o ) { HSSFRichTextString r = ( HSSFRichTextString ) o ; return string . compareTo ( r . string ) ; } public boolean equals ( Object o ) { if ( o instanceof HSSFRichTextString ) { return string . equals ( ( ( HSSFRichTextString ) o ) . string ) ; } return false ; } public String toString ( ) { return string . toString ( ) ; } public void applyFont ( short fontIndex ) { applyFont ( 0 , string . getCharCount ( ) , fontIndex ) ; } } 	1
package org . apache . poi . hpsf ; import java . io . IOException ; import java . io . OutputStream ; import org . apache . poi . util . LittleEndian ; public class TypeWriter { public static int writeToStream ( final OutputStream out , final short n ) throws IOException { final int length = LittleEndian . SHORT_SIZE ; byte [ ] buffer = new byte [ length ] ; LittleEndian . putShort ( buffer , 0 , n ) ; out . write ( buffer , 0 , length ) ; return length ; } public static int writeToStream ( final OutputStream out , final int n ) throws IOException { final int l = LittleEndian . INT_SIZE ; final byte [ ] buffer = new byte [ l ] ; LittleEndian . putInt ( buffer , 0 , n ) ; out . write ( buffer , 0 , l ) ; return l ; } public static int writeToStream ( final OutputStream out , final long n ) throws IOException { final int l = LittleEndian . LONG_SIZE ; final byte [ ] buffer = new byte [ l ] ; LittleEndian . putLong ( buffer , 0 , n ) ; out . write ( buffer , 0 , l ) ; return l ; } public static void writeUShortToStream ( final OutputStream out , final int n ) throws IOException { int high = n & 0xFFFF0000 ; if ( high != 0 ) throw new IllegalPropertySetDataException ( "Value " + n + " cannot be represented by 2 bytes." ) ; writeToStream ( out , ( short ) n ) ; } public static int writeUIntToStream ( final OutputStream out , final long n ) throws IOException { long high = n & 0xFFFFFFFF00000000L ; if ( high != 0 && high != 0xFFFFFFFF00000000L ) throw new IllegalPropertySetDataException ( "Value " + n + " cannot be represented by 4 bytes." ) ; return writeToStream ( out , ( int ) n ) ; } public static int writeToStream ( final OutputStream out , final ClassID n ) throws IOException { byte [ ] b = new byte [ 16 ] ; n . write ( b , 0 ) ; out . write ( b , 0 , b . length ) ; return b . length ; } public static void writeToStream ( final OutputStream out , final Property [ ] properties , final int codepage ) throws IOException , UnsupportedVariantTypeException { if ( properties == null ) return ; for ( int i = 0 ; i < properties . length ; i ++ ) { final Property p = properties [ i ] ; writeUIntToStream ( out , p . getID ( ) ) ; writeUIntToStream ( out , p . getSize ( ) ) ; } for ( int i = 0 ; i < properties . length ; i ++ ) { final Property p = properties [ i ] ; long type = p . getType ( ) ; writeUIntToStream ( out , type ) ; VariantSupport . write ( out , ( int ) type , p . getValue ( ) , codepage ) ; } } public static int writeToStream ( final OutputStream out , final double n ) throws IOException { final int l = LittleEndian . DOUBLE_SIZE ; final byte [ ] buffer = new byte [ l ] ; LittleEndian . putDouble ( buffer , 0 , n ) ; out . write ( buffer , 0 , l ) ; return l ; } } 	0
package org . apache . poi . hssf . record ; import org . apache . poi . util . BitField ; import org . apache . poi . util . BitFieldFactory ; import org . apache . poi . util . LittleEndian ; import org . apache . poi . util . HexDump ; import java . util . Iterator ; import java . util . List ; import java . util . ArrayList ; import java . util . Collections ; public class UnicodeString implements Comparable { public final static short sid = 0xFFF ; private short field_1_charCount ; private byte field_2_optionflags ; private String field_3_string ; private List field_4_format_runs ; private byte [ ] field_5_ext_rst ; private static final BitField highByte = BitFieldFactory . getInstance ( 0x1 ) ; private static final BitField extBit = BitFieldFactory . getInstance ( 0x4 ) ; private static final BitField richText = BitFieldFactory . getInstance ( 0x8 ) ; public static class FormatRun implements Comparable { private short character ; private short fontIndex ; public FormatRun ( short character , short fontIndex ) { this . character = character ; this . fontIndex = fontIndex ; } public short getCharacterPos ( ) { return character ; } public short getFontIndex ( ) { return fontIndex ; } public boolean equals ( Object o ) { if ( ( o == null ) || ( o . getClass ( ) != this . getClass ( ) ) ) { return false ; } FormatRun other = ( FormatRun ) o ; return ( ( character == other . character ) && ( fontIndex == other . fontIndex ) ) ; } public int compareTo ( Object obj ) { FormatRun r = ( FormatRun ) obj ; if ( ( character == r . character ) && ( fontIndex == r . fontIndex ) ) return 0 ; if ( character == r . character ) return fontIndex - r . fontIndex ; else return character - r . character ; } public String toString ( ) { return "character=" + character + ",fontIndex=" + fontIndex ; } } private UnicodeString ( ) { } public UnicodeString ( String str ) { setString ( str ) ; } public UnicodeString ( RecordInputStream in ) { validateSid ( in . getSid ( ) ) ; fillFields ( in ) ; } public int hashCode ( ) { int stringHash = 0 ; if ( field_3_string != null ) stringHash = field_3_string . hashCode ( ) ; return field_1_charCount + stringHash ; } public boolean equals ( Object o ) { if ( ( o == null ) || ( o . getClass ( ) != this . getClass ( ) ) ) { return false ; } UnicodeString other = ( UnicodeString ) o ; boolean eq = ( ( field_1_charCount == other . field_1_charCount ) && ( field_2_optionflags == other . field_2_optionflags ) && field_3_string . equals ( other . field_3_string ) ) ; if ( ! eq ) return false ; if ( ( field_4_format_runs == null ) && ( other . field_4_format_runs == null ) ) return true ; if ( ( ( field_4_format_runs == null ) && ( other . field_4_format_runs != null ) ) || ( field_4_format_runs != null ) && ( other . field_4_format_runs == null ) ) return false ; int size = field_4_format_runs . size ( ) ; if ( size != other . field_4_format_runs . size ( ) ) return false ; for ( int i = 0 ; i < size ; i ++ ) { FormatRun run1 = ( FormatRun ) field_4_format_runs . get ( i ) ; FormatRun run2 = ( FormatRun ) other . field_4_format_runs . get ( i ) ; if ( ! run1 . equals ( run2 ) ) return false ; } if ( ( field_5_ext_rst == null ) && ( other . field_5_ext_rst == null ) ) return true ; if ( ( ( field_5_ext_rst == null ) && ( other . field_5_ext_rst != null ) ) || ( ( field_5_ext_rst != null ) && ( other . field_5_ext_rst == null ) ) ) return false ; size = field_5_ext_rst . length ; if ( size != field_5_ext_rst . length ) return false ; for ( int i = 0 ; i < size ; i ++ ) { if ( field_5_ext_rst [ i ] != other . field_5_ext_rst [ i ] ) return false ; } return true ; } protected void validateSid ( short id ) { } protected void fillFields ( RecordInputStream in ) { field_1_charCount = in . readShort ( ) ; field_2_optionflags = in . readByte ( ) ; int runCount = 0 ; int extensionLength = 0 ; if ( isRichText ( ) ) { runCount = in . readShort ( ) ; } if ( isExtendedText ( ) ) { extensionLength = in . readInt ( ) ; } in . setAutoContinue ( false ) ; StringBuffer tmpString = new StringBuffer ( field_1_charCount ) ; int stringCharCount = field_1_charCount ; boolean isCompressed = ( ( field_2_optionflags & 1 ) == 0 ) ; while ( stringCharCount != 0 ) { if ( in . remaining ( ) == 0 ) { if ( in . isContinueNext ( ) ) { in . nextRecord ( ) ; byte optionflags = in . readByte ( ) ; isCompressed = ( ( optionflags & 1 ) == 0 ) ; } else throw new RecordFormatException ( "Expected continue record." ) ; } if ( isCompressed ) { char ch = ( char ) ( ( short ) 0xff & ( short ) in . readByte ( ) ) ; tmpString . append ( ch ) ; } else { char ch = ( char ) in . readShort ( ) ; tmpString . append ( ch ) ; } stringCharCount -- ; } field_3_string = tmpString . toString ( ) ; in . setAutoContinue ( true ) ; if ( isRichText ( ) && ( runCount > 0 ) ) { field_4_format_runs = new ArrayList ( runCount ) ; for ( int i = 0 ; i < runCount ; i ++ ) { field_4_format_runs . add ( new FormatRun ( in . readShort ( ) , in . readShort ( ) ) ) ; } } if ( isExtendedText ( ) && ( extensionLength > 0 ) ) { field_5_ext_rst = new byte [ extensionLength ] ; for ( int i = 0 ; i < extensionLength ; i ++ ) { field_5_ext_rst [ i ] = in . readByte ( ) ; } } } public short getCharCount ( ) { return field_1_charCount ; } public void setCharCount ( short cc ) { field_1_charCount = cc ; } public byte getOptionFlags ( ) { return field_2_optionflags ; } public void setOptionFlags ( byte of ) { field_2_optionflags = of ; } public String getString ( ) { return field_3_string ; } public void setString ( String string ) { field_3_string = string ; setCharCount ( ( short ) field_3_string . length ( ) ) ; boolean useUTF16 = false ; int strlen = string . length ( ) ; for ( int j = 0 ; j < strlen ; j ++ ) { if ( string . charAt ( j ) > 255 ) { useUTF16 = true ; break ; } } if ( useUTF16 ) field_2_optionflags = highByte . setByte ( field_2_optionflags ) ; else field_2_optionflags = highByte . clearByte ( field_2_optionflags ) ; } public int getFormatRunCount ( ) { if ( field_4_format_runs == null ) return 0 ; return field_4_format_runs . size ( ) ; } public FormatRun getFormatRun ( int index ) { if ( field_4_format_runs == null ) return null ; if ( ( index < 0 ) || ( index >= field_4_format_runs . size ( ) ) ) return null ; return ( FormatRun ) field_4_format_runs . get ( index ) ; } private int findFormatRunAt ( int characterPos ) { int size = field_4_format_runs . size ( ) ; for ( int i = 0 ; i < size ; i ++ ) { FormatRun r = ( FormatRun ) field_4_format_runs . get ( i ) ; if ( r . character == characterPos ) return i ; else if ( r . character > characterPos ) return - 1 ; } return - 1 ; } public void addFormatRun ( FormatRun r ) { if ( field_4_format_runs == null ) field_4_format_runs = new ArrayList ( ) ; int index = findFormatRunAt ( r . character ) ; if ( index != - 1 ) field_4_format_runs . remove ( index ) ; field_4_format_runs . add ( r ) ; Collections . sort ( field_4_format_runs ) ; field_2_optionflags = richText . setByte ( field_2_optionflags ) ; } public Iterator formatIterator ( ) { if ( field_4_format_runs != null ) return field_4_format_runs . iterator ( ) ; return null ; } public void removeFormatRun ( FormatRun r ) { field_4_format_runs . remove ( r ) ; if ( field_4_format_runs . size ( ) == 0 ) { field_4_format_runs = null ; field_2_optionflags = richText . clearByte ( field_2_optionflags ) ; } } public void clearFormatting ( ) { field_4_format_runs = null ; field_2_optionflags = richText . clearByte ( field_2_optionflags ) ; } public byte [ ] getExtendedRst ( ) { return this . field_5_ext_rst ; } public void setExtendedRst ( byte [ ] ext_rst ) { if ( ext_rst != null ) field_2_optionflags = extBit . setByte ( field_2_optionflags ) ; else field_2_optionflags = extBit . clearByte ( field_2_optionflags ) ; this . field_5_ext_rst = ext_rst ; } public String toString ( ) { return getString ( ) ; } public String getDebugInfo ( ) { StringBuffer buffer = new StringBuffer ( ) ; buffer . append ( "[UNICODESTRING]\n" ) ; buffer . append ( "    .charcount       = " ) . append ( Integer . toHexString ( getCharCount ( ) ) ) . append ( "\n" ) ; buffer . append ( "    .optionflags     = " ) . append ( Integer . toHexString ( getOptionFlags ( ) ) ) . append ( "\n" ) ; buffer . append ( "    .string          = " ) . append ( getString ( ) ) . append ( "\n" ) ; if ( field_4_format_runs != null ) { for ( int i = 0 ; i < field_4_format_runs . size ( ) ; i ++ ) { FormatRun r = ( FormatRun ) field_4_format_runs . get ( i ) ; buffer . append ( "      .format_run" + i + "          = " ) . append ( r . toString ( ) ) . append ( "\n" ) ; } } if ( field_5_ext_rst != null ) { buffer . append ( "    .field_5_ext_rst          = " ) . append ( "\n" ) . append ( HexDump . toHex ( field_5_ext_rst ) ) . append ( "\n" ) ; } buffer . append ( "[/UNICODESTRING]\n" ) ; return buffer . toString ( ) ; } private int writeContinueIfRequired ( UnicodeRecordStats stats , final int requiredSize , int offset , byte [ ] data ) { if ( stats . remainingSize < requiredSize ) { if ( stats . lastLengthPos != - 1 ) { short lastRecordLength = ( short ) ( offset - stats . lastLengthPos - 2 ) ; if ( lastRecordLength > 8224 ) throw new InternalError ( ) ; LittleEndian . putShort ( data , stats . lastLengthPos , lastRecordLength ) ; } LittleEndian . putShort ( data , offset , ContinueRecord . sid ) ; offset += 2 ; stats . lastLengthPos = offset ; offset += 2 ; stats . recordSize += 4 ; stats . remainingSize = SSTRecord . MAX_RECORD_SIZE - 4 ; } return offset ; } public int serialize ( UnicodeRecordStats stats , final int offset , byte [ ] data ) { int pos = offset ; pos = writeContinueIfRequired ( stats , 3 , pos , data ) ; LittleEndian . putShort ( data , pos , getCharCount ( ) ) ; pos += 2 ; data [ pos ] = getOptionFlags ( ) ; pos += 1 ; stats . recordSize += 3 ; stats . remainingSize -= 3 ; if ( isRichText ( ) ) { if ( field_4_format_runs != null ) { pos = writeContinueIfRequired ( stats , 2 , pos , data ) ; LittleEndian . putShort ( data , pos , ( short ) field_4_format_runs . size ( ) ) ; pos += 2 ; stats . recordSize += 2 ; stats . remainingSize -= 2 ; } } if ( isExtendedText ( ) ) { if ( this . field_5_ext_rst != null ) { pos = writeContinueIfRequired ( stats , 4 , pos , data ) ; LittleEndian . putInt ( data , pos , field_5_ext_rst . length ) ; pos += 4 ; stats . recordSize += 4 ; stats . remainingSize -= 4 ; } } int charsize = isUncompressedUnicode ( ) ? 2 : 1 ; int strSize = ( getString ( ) . length ( ) * charsize ) ; byte [ ] strBytes = null ; try { String unicodeString = getString ( ) ; if ( ! isUncompressedUnicode ( ) ) { strBytes = unicodeString . getBytes ( "ISO-8859-1" ) ; } else { strBytes = unicodeString . getBytes ( "UTF-16LE" ) ; } } catch ( Exception e ) { throw new InternalError ( ) ; } if ( strSize != strBytes . length ) throw new InternalError ( "That shouldnt have happened!" ) ; if ( strSize > stats . remainingSize ) { int ammountThatCantFit = strSize ; int strPos = 0 ; while ( ammountThatCantFit > 0 ) { int ammountWritten = Math . min ( stats . remainingSize , ammountThatCantFit ) ; if ( isUncompressedUnicode ( ) ) { if ( ( ( ammountWritten ) % 2 ) == 1 ) ammountWritten -- ; } System . arraycopy ( strBytes , strPos , data , pos , ammountWritten ) ; pos += ammountWritten ; strPos += ammountWritten ; stats . recordSize += ammountWritten ; stats . remainingSize -= ammountWritten ; ammountThatCantFit -= ammountWritten ; if ( ammountThatCantFit > 0 ) { pos = writeContinueIfRequired ( stats , ammountThatCantFit , pos , data ) ; data [ pos ] = ( byte ) ( isUncompressedUnicode ( ) ? 0x1 : 0x0 ) ; pos ++ ; stats . recordSize ++ ; stats . remainingSize -- ; } } } else { if ( strSize > ( data . length - pos ) ) System . out . println ( "Hmm shouldnt happen" ) ; System . arraycopy ( strBytes , 0 , data , pos , strSize ) ; pos += strSize ; stats . recordSize += strSize ; stats . remainingSize -= strSize ; } if ( isRichText ( ) && ( field_4_format_runs != null ) ) { int count = field_4_format_runs . size ( ) ; for ( int i = 0 ; i < count ; i ++ ) { pos = writeContinueIfRequired ( stats , 4 , pos , data ) ; FormatRun r = ( FormatRun ) field_4_format_runs . get ( i ) ; LittleEndian . putShort ( data , pos , r . character ) ; pos += 2 ; LittleEndian . putShort ( data , pos , r . fontIndex ) ; pos += 2 ; stats . recordSize += 4 ; stats . remainingSize -= 4 ; } } if ( isExtendedText ( ) && ( field_5_ext_rst != null ) ) { int ammountThatCantFit = field_5_ext_rst . length - stats . remainingSize ; int extPos = 0 ; if ( ammountThatCantFit > 0 ) { while ( ammountThatCantFit > 0 ) { int ammountWritten = Math . min ( stats . remainingSize , ammountThatCantFit ) ; System . arraycopy ( field_5_ext_rst , extPos , data , pos , ammountWritten ) ; pos += ammountWritten ; extPos += ammountWritten ; stats . recordSize += ammountWritten ; stats . remainingSize -= ammountWritten ; ammountThatCantFit -= ammountWritten ; if ( ammountThatCantFit > 0 ) { pos = writeContinueIfRequired ( stats , 1 , pos , data ) ; } } } else { System . arraycopy ( field_5_ext_rst , 0 , data , pos , field_5_ext_rst . length ) ; pos += field_5_ext_rst . length ; stats . remainingSize -= field_5_ext_rst . length ; stats . recordSize += field_5_ext_rst . length ; } } return pos - offset ; } public void setCompressedUnicode ( ) { field_2_optionflags = highByte . setByte ( field_2_optionflags ) ; } public void setUncompressedUnicode ( ) { field_2_optionflags = highByte . clearByte ( field_2_optionflags ) ; } private boolean isUncompressedUnicode ( ) { return highByte . isSet ( getOptionFlags ( ) ) ; } public static class UnicodeRecordStats { public int recordSize ; public int remainingSize = SSTRecord . MAX_RECORD_SIZE ; public int lastLengthPos = - 1 ; } public void getRecordSize ( UnicodeRecordStats stats ) { if ( stats . remainingSize < 3 ) { stats . recordSize += 4 ; stats . remainingSize = SSTRecord . MAX_RECORD_SIZE - 4 ; } stats . recordSize += 3 ; stats . remainingSize -= 3 ; if ( isRichText ( ) ) { if ( stats . remainingSize < 2 ) { stats . remainingSize = SSTRecord . MAX_RECORD_SIZE - 4 ; stats . recordSize += 4 ; } stats . recordSize += 2 ; stats . remainingSize -= 2 ; } if ( isExtendedText ( ) ) { if ( stats . remainingSize < 4 ) { stats . remainingSize = SSTRecord . MAX_RECORD_SIZE - 4 ; stats . recordSize += 4 ; } stats . recordSize += 4 ; stats . remainingSize -= 4 ; } int charsize = isUncompressedUnicode ( ) ? 2 : 1 ; int strSize = ( getString ( ) . length ( ) * charsize ) ; if ( strSize > stats . remainingSize ) { int ammountThatCantFit = strSize ; while ( ammountThatCantFit > 0 ) { int ammountWritten = Math . min ( stats . remainingSize , ammountThatCantFit ) ; if ( isUncompressedUnicode ( ) ) { if ( ( ( ammountWritten ) % 2 ) == 1 ) ammountWritten -- ; } stats . recordSize += ammountWritten ; stats . remainingSize -= ammountWritten ; ammountThatCantFit -= ammountWritten ; if ( ammountThatCantFit > 0 ) { stats . remainingSize = SSTRecord . MAX_RECORD_SIZE - 4 ; stats . recordSize += 4 ; stats . recordSize ++ ; stats . remainingSize -- ; } } } else { stats . recordSize += strSize ; stats . remainingSize -= strSize ; } if ( isRichText ( ) && ( field_4_format_runs != null ) ) { int count = field_4_format_runs . size ( ) ; for ( int i = 0 ; i < count ; i ++ ) { if ( stats . remainingSize < 4 ) { stats . remainingSize = SSTRecord . MAX_RECORD_SIZE - 4 ; stats . recordSize += 4 ; } stats . recordSize += 4 ; stats . remainingSize -= 4 ; } } if ( isExtendedText ( ) && ( field_5_ext_rst != null ) ) { int ammountThatCantFit = field_5_ext_rst . length - stats . remainingSize ; if ( ammountThatCantFit > 0 ) { while ( ammountThatCantFit > 0 ) { int ammountWritten = Math . min ( stats . remainingSize , ammountThatCantFit ) ; stats . recordSize += ammountWritten ; stats . remainingSize -= ammountWritten ; ammountThatCantFit -= ammountWritten ; if ( ammountThatCantFit > 0 ) { stats . remainingSize = SSTRecord . MAX_RECORD_SIZE - 4 ; stats . recordSize += 4 ; } } } else { stats . remainingSize -= field_5_ext_rst . length ; stats . recordSize += field_5_ext_rst . length ; } } } public short getSid ( ) { return sid ; } public int compareTo ( Object obj ) { UnicodeString str = ( UnicodeString ) obj ; int result = getString ( ) . compareTo ( str . getString ( ) ) ; if ( result != 0 ) return result ; if ( ( field_4_format_runs == null ) && ( str . field_4_format_runs == null ) ) return 0 ; if ( ( field_4_format_runs == null ) && ( str . field_4_format_runs != null ) ) return 1 ; if ( ( field_4_format_runs != null ) && ( str . field_4_format_runs == null ) ) return - 1 ; int size = field_4_format_runs . size ( ) ; if ( size != str . field_4_format_runs . size ( ) ) return size - str . field_4_format_runs . size ( ) ; for ( int i = 0 ; i < size ; i ++ ) { FormatRun run1 = ( FormatRun ) field_4_format_runs . get ( i ) ; FormatRun run2 = ( FormatRun ) str . field_4_format_runs . get ( i ) ; result = run1 . compareTo ( run2 ) ; if ( result != 0 ) return result ; } if ( ( field_5_ext_rst == null ) && ( str . field_5_ext_rst == null ) ) return 0 ; if ( ( field_5_ext_rst == null ) && ( str . field_5_ext_rst != null ) ) return 1 ; if ( ( field_5_ext_rst != null ) && ( str . field_5_ext_rst == null ) ) return - 1 ; size = field_5_ext_rst . length ; if ( size != field_5_ext_rst . length ) return size - field_5_ext_rst . length ; for ( int i = 0 ; i < size ; i ++ ) { if ( field_5_ext_rst [ i ] != str . field_5_ext_rst [ i ] ) return field_5_ext_rst [ i ] - str . field_5_ext_rst [ i ] ; } return 0 ; } public boolean isRichText ( ) { return richText . isSet ( getOptionFlags ( ) ) ; } public boolean isExtendedText ( ) { return extBit . isSet ( getOptionFlags ( ) ) ; } public Object clone ( ) { UnicodeString str = new UnicodeString ( ) ; str . field_1_charCount = field_1_charCount ; str . field_2_optionflags = field_2_optionflags ; str . field_3_string = field_3_string ; if ( field_4_format_runs != null ) { str . field_4_format_runs = new ArrayList ( ) ; int size = field_4_format_runs . size ( ) ; for ( int i = 0 ; i < size ; i ++ ) { FormatRun r = ( FormatRun ) field_4_format_runs . get ( i ) ; str . field_4_format_runs . add ( new FormatRun ( r . character , r . fontIndex ) ) ; } } if ( field_5_ext_rst != null ) { str . field_5_ext_rst = new byte [ field_5_ext_rst . length ] ; System . arraycopy ( field_5_ext_rst , 0 , str . field_5_ext_rst , 0 , field_5_ext_rst . length ) ; } return str ; } } 	1
package org . apache . poi . hssf . record . formula ; import org . apache . poi . util . LittleEndian ; import org . apache . poi . hssf . model . Workbook ; import org . apache . poi . hssf . record . RecordInputStream ; public class NumberPtg extends Ptg { public final static int SIZE = 9 ; public final static byte sid = 0x1f ; private double field_1_value ; private NumberPtg ( ) { } public NumberPtg ( RecordInputStream in ) { setValue ( in . readDouble ( ) ) ; } public NumberPtg ( String value ) { setValue ( Double . parseDouble ( value ) ) ; } public void setValue ( double value ) { field_1_value = value ; } public double getValue ( ) { return field_1_value ; } public void writeBytes ( byte [ ] array , int offset ) { array [ offset + 0 ] = sid ; LittleEndian . putDouble ( array , offset + 1 , getValue ( ) ) ; } public int getSize ( ) { return SIZE ; } public String toFormulaString ( Workbook book ) { return "" + getValue ( ) ; } public byte getDefaultOperandClass ( ) { return Ptg . CLASS_VALUE ; } public Object clone ( ) { NumberPtg ptg = new NumberPtg ( ) ; ptg . field_1_value = field_1_value ; return ptg ; } } 	1
package org . apache . poi . hssf . record . formula ; import org . apache . poi . util . LittleEndian ; import org . apache . poi . util . BitField ; import org . apache . poi . hssf . record . RecordInputStream ; import org . apache . poi . hssf . util . AreaReference ; import org . apache . poi . hssf . util . CellReference ; import org . apache . poi . hssf . model . Workbook ; public class AreaVPtg extends AreaPtg { public final static short sid = 0x45 ; protected AreaVPtg ( ) { } public AreaVPtg ( short firstRow , short lastRow , short firstColumn , short lastColumn , boolean firstRowRelative , boolean lastRowRelative , boolean firstColRelative , boolean lastColRelative ) { super ( firstRow , lastRow , firstColumn , lastColumn , firstRowRelative , lastRowRelative , firstColRelative , lastColRelative ) ; } public AreaVPtg ( RecordInputStream in ) { super ( in ) ; } public String getAreaPtgName ( ) { return "AreaVPtg" ; } public Object clone ( ) { AreaVPtg ptg = new AreaVPtg ( ) ; ptg . setFirstRow ( getFirstRow ( ) ) ; ptg . setLastRow ( getLastRow ( ) ) ; ptg . setFirstColumnRaw ( getFirstColumnRaw ( ) ) ; ptg . setLastColumnRaw ( getLastColumnRaw ( ) ) ; ptg . setClass ( ptgClass ) ; return ptg ; } } 	0
package org . apache . poi . hssf . record . formula ; import org . apache . poi . util . LittleEndian ; import org . apache . poi . util . BitField ; import org . apache . poi . util . BitFieldFactory ; import org . apache . poi . util . StringUtil ; import org . apache . poi . hssf . util . CellReference ; import org . apache . poi . hssf . model . Workbook ; import org . apache . poi . hssf . record . RecordFormatException ; import org . apache . poi . hssf . record . RecordInputStream ; import org . apache . poi . hssf . record . SSTRecord ; import org . apache . poi . hssf . record . UnicodeString ; public class ArrayPtgV extends ArrayPtg { public final static byte sid = 0x40 ; protected ArrayPtgV ( ) { } public ArrayPtgV ( RecordInputStream in ) { super ( in ) ; } public Object clone ( ) { ArrayPtgV ptg = new ArrayPtgV ( ) ; ptg . field_1_reserved = field_1_reserved ; ptg . field_2_reserved = field_2_reserved ; ptg . field_3_reserved = field_3_reserved ; ptg . field_4_reserved = field_4_reserved ; ptg . field_5_reserved = field_5_reserved ; ptg . field_6_reserved = field_6_reserved ; ptg . field_7_reserved = field_7_reserved ; ptg . token_1_columns = token_1_columns ; ptg . token_2_rows = token_2_rows ; ptg . token_3_arrayValues = new Object [ getColumnCount ( ) ] [ getRowCount ( ) ] ; for ( int x = 0 ; x < getColumnCount ( ) ; x ++ ) { for ( int y = 0 ; y < getRowCount ( ) ; y ++ ) { ptg . token_3_arrayValues [ x ] [ y ] = token_3_arrayValues [ x ] [ y ] ; } } ptg . setClass ( ptgClass ) ; return ptg ; } } 	0
package org . apache . poi . poifs . common ; public interface POIFSConstants { public static final int BIG_BLOCK_SIZE = 0x0200 ; public static final int END_OF_CHAIN = - 2 ; public static final int PROPERTY_SIZE = 0x0080 ; public static final int UNUSED_BLOCK = - 1 ; } 	0
package org . apache . poi . hssf . record ; import org . apache . poi . util . LittleEndian ; public class FilePassRecord extends Record { public final static short sid = 0x2F ; private int field_1_encryptedpassword ; public FilePassRecord ( ) { } public FilePassRecord ( RecordInputStream in ) { super ( in ) ; } protected void validateSid ( short id ) { if ( id != sid ) { throw new RecordFormatException ( "NOT A FILEPASS RECORD" ) ; } } protected void fillFields ( RecordInputStream in ) { field_1_encryptedpassword = in . readInt ( ) ; throw new RecordFormatException ( "HSSF does not currently support encrypted workbooks" ) ; } public String toString ( ) { StringBuffer buffer = new StringBuffer ( ) ; buffer . append ( "[FILEPASS]\n" ) ; buffer . append ( "    .password        = " ) . append ( field_1_encryptedpassword ) . append ( "\n" ) ; buffer . append ( "[/FILEPASS]\n" ) ; return buffer . toString ( ) ; } public int serialize ( int offset , byte [ ] data ) { LittleEndian . putShort ( data , 0 + offset , sid ) ; LittleEndian . putShort ( data , 2 + offset , ( short ) 0x4 ) ; LittleEndian . putInt ( data , 4 + offset , ( short ) field_1_encryptedpassword ) ; return getRecordSize ( ) ; } public int getRecordSize ( ) { return 8 ; } public short getSid ( ) { return sid ; } public Object clone ( ) { FilePassRecord rec = new FilePassRecord ( ) ; rec . field_1_encryptedpassword = field_1_encryptedpassword ; return rec ; } } 	1
package org . apache . poi . hpsf ; import java . util . Iterator ; import java . util . Map ; import org . apache . poi . hpsf . wellknown . PropertyIDMap ; import org . apache . poi . hpsf . wellknown . SectionIDMap ; public class DocumentSummaryInformation extends SpecialPropertySet { public static final String DEFAULT_STREAM_NAME = "\005DocumentSummaryInformation" ; public DocumentSummaryInformation ( final PropertySet ps ) throws UnexpectedPropertySetTypeException { super ( ps ) ; if ( ! isDocumentSummaryInformation ( ) ) throw new UnexpectedPropertySetTypeException ( "Not a " + getClass ( ) . getName ( ) ) ; } public String getCategory ( ) { return ( String ) getProperty ( PropertyIDMap . PID_CATEGORY ) ; } public void setCategory ( final String category ) { final MutableSection s = ( MutableSection ) getFirstSection ( ) ; s . setProperty ( PropertyIDMap . PID_CATEGORY , category ) ; } public void removeCategory ( ) { final MutableSection s = ( MutableSection ) getFirstSection ( ) ; s . removeProperty ( PropertyIDMap . PID_CATEGORY ) ; } public String getPresentationFormat ( ) { return ( String ) getProperty ( PropertyIDMap . PID_PRESFORMAT ) ; } public void setPresentationFormat ( final String presentationFormat ) { final MutableSection s = ( MutableSection ) getFirstSection ( ) ; s . setProperty ( PropertyIDMap . PID_PRESFORMAT , presentationFormat ) ; } public void removePresentationFormat ( ) { final MutableSection s = ( MutableSection ) getFirstSection ( ) ; s . removeProperty ( PropertyIDMap . PID_PRESFORMAT ) ; } public int getByteCount ( ) { return getPropertyIntValue ( PropertyIDMap . PID_BYTECOUNT ) ; } public void setByteCount ( final int byteCount ) { final MutableSection s = ( MutableSection ) getFirstSection ( ) ; s . setProperty ( PropertyIDMap . PID_BYTECOUNT , byteCount ) ; } public void removeByteCount ( ) { final MutableSection s = ( MutableSection ) getFirstSection ( ) ; s . removeProperty ( PropertyIDMap . PID_BYTECOUNT ) ; } public int getLineCount ( ) { return getPropertyIntValue ( PropertyIDMap . PID_LINECOUNT ) ; } public void setLineCount ( final int lineCount ) { final MutableSection s = ( MutableSection ) getFirstSection ( ) ; s . setProperty ( PropertyIDMap . PID_LINECOUNT , lineCount ) ; } public void removeLineCount ( ) { final MutableSection s = ( MutableSection ) getFirstSection ( ) ; s . removeProperty ( PropertyIDMap . PID_LINECOUNT ) ; } public int getParCount ( ) { return getPropertyIntValue ( PropertyIDMap . PID_PARCOUNT ) ; } public void setParCount ( final int parCount ) { final MutableSection s = ( MutableSection ) getFirstSection ( ) ; s . setProperty ( PropertyIDMap . PID_PARCOUNT , parCount ) ; } public void removeParCount ( ) { final MutableSection s = ( MutableSection ) getFirstSection ( ) ; s . removeProperty ( PropertyIDMap . PID_PARCOUNT ) ; } public int getSlideCount ( ) { return getPropertyIntValue ( PropertyIDMap . PID_SLIDECOUNT ) ; } public void setSlideCount ( final int slideCount ) { final MutableSection s = ( MutableSection ) getFirstSection ( ) ; s . setProperty ( PropertyIDMap . PID_SLIDECOUNT , slideCount ) ; } public void removeSlideCount ( ) { final MutableSection s = ( MutableSection ) getFirstSection ( ) ; s . removeProperty ( PropertyIDMap . PID_SLIDECOUNT ) ; } public int getNoteCount ( ) { return getPropertyIntValue ( PropertyIDMap . PID_NOTECOUNT ) ; } public void setNoteCount ( final int noteCount ) { final MutableSection s = ( MutableSection ) getFirstSection ( ) ; s . setProperty ( PropertyIDMap . PID_NOTECOUNT , noteCount ) ; } public void removeNoteCount ( ) { final MutableSection s = ( MutableSection ) getFirstSection ( ) ; s . removeProperty ( PropertyIDMap . PID_NOTECOUNT ) ; } public int getHiddenCount ( ) { return getPropertyIntValue ( PropertyIDMap . PID_HIDDENCOUNT ) ; } public void setHiddenCount ( final int hiddenCount ) { final MutableSection s = ( MutableSection ) getSections ( ) . get ( 0 ) ; s . setProperty ( PropertyIDMap . PID_HIDDENCOUNT , hiddenCount ) ; } public void removeHiddenCount ( ) { final MutableSection s = ( MutableSection ) getFirstSection ( ) ; s . removeProperty ( PropertyIDMap . PID_HIDDENCOUNT ) ; } public int getMMClipCount ( ) { return getPropertyIntValue ( PropertyIDMap . PID_MMCLIPCOUNT ) ; } public void setMMClipCount ( final int mmClipCount ) { final MutableSection s = ( MutableSection ) getFirstSection ( ) ; s . setProperty ( PropertyIDMap . PID_MMCLIPCOUNT , mmClipCount ) ; } public void removeMMClipCount ( ) { final MutableSection s = ( MutableSection ) getFirstSection ( ) ; s . removeProperty ( PropertyIDMap . PID_MMCLIPCOUNT ) ; } public boolean getScale ( ) { return getPropertyBooleanValue ( PropertyIDMap . PID_SCALE ) ; } public void setScale ( final boolean scale ) { final MutableSection s = ( MutableSection ) getFirstSection ( ) ; s . setProperty ( PropertyIDMap . PID_SCALE , scale ) ; } public void removeScale ( ) { final MutableSection s = ( MutableSection ) getFirstSection ( ) ; s . removeProperty ( PropertyIDMap . PID_SCALE ) ; } public byte [ ] getHeadingPair ( ) { notYetImplemented ( "Reading byte arrays " ) ; return ( byte [ ] ) getProperty ( PropertyIDMap . PID_HEADINGPAIR ) ; } public void setHeadingPair ( final byte [ ] headingPair ) { notYetImplemented ( "Writing byte arrays " ) ; } public void removeHeadingPair ( ) { final MutableSection s = ( MutableSection ) getFirstSection ( ) ; s . removeProperty ( PropertyIDMap . PID_HEADINGPAIR ) ; } public byte [ ] getDocparts ( ) { notYetImplemented ( "Reading byte arrays" ) ; return ( byte [ ] ) getProperty ( PropertyIDMap . PID_DOCPARTS ) ; } public void setDocparts ( final byte [ ] docparts ) { notYetImplemented ( "Writing byte arrays" ) ; } public void removeDocparts ( ) { final MutableSection s = ( MutableSection ) getFirstSection ( ) ; s . removeProperty ( PropertyIDMap . PID_DOCPARTS ) ; } public String getManager ( ) { return ( String ) getProperty ( PropertyIDMap . PID_MANAGER ) ; } public void setManager ( final String manager ) { final MutableSection s = ( MutableSection ) getFirstSection ( ) ; s . setProperty ( PropertyIDMap . PID_MANAGER , manager ) ; } public void removeManager ( ) { final MutableSection s = ( MutableSection ) getFirstSection ( ) ; s . removeProperty ( PropertyIDMap . PID_MANAGER ) ; } public String getCompany ( ) { return ( String ) getProperty ( PropertyIDMap . PID_COMPANY ) ; } public void setCompany ( final String company ) { final MutableSection s = ( MutableSection ) getFirstSection ( ) ; s . setProperty ( PropertyIDMap . PID_COMPANY , company ) ; } public void removeCompany ( ) { final MutableSection s = ( MutableSection ) getFirstSection ( ) ; s . removeProperty ( PropertyIDMap . PID_COMPANY ) ; } public boolean getLinksDirty ( ) { return getPropertyBooleanValue ( PropertyIDMap . PID_LINKSDIRTY ) ; } public void setLinksDirty ( final boolean linksDirty ) { final MutableSection s = ( MutableSection ) getFirstSection ( ) ; s . setProperty ( PropertyIDMap . PID_LINKSDIRTY , linksDirty ) ; } public void removeLinksDirty ( ) { final MutableSection s = ( MutableSection ) getFirstSection ( ) ; s . removeProperty ( PropertyIDMap . PID_LINKSDIRTY ) ; } public CustomProperties getCustomProperties ( ) { CustomProperties cps = null ; if ( getSectionCount ( ) >= 2 ) { cps = new CustomProperties ( ) ; final Section section = ( Section ) getSections ( ) . get ( 1 ) ; final Map dictionary = section . getDictionary ( ) ; final Property [ ] properties = section . getProperties ( ) ; int propertyCount = 0 ; for ( int i = 0 ; i < properties . length ; i ++ ) { final Property p = properties [ i ] ; final long id = p . getID ( ) ; if ( id != 0 && id != 1 ) { propertyCount ++ ; final CustomProperty cp = new CustomProperty ( p , ( String ) dictionary . get ( new Long ( id ) ) ) ; cps . put ( cp . getName ( ) , cp ) ; } } if ( cps . size ( ) != propertyCount ) cps . setPure ( false ) ; } return cps ; } public void setCustomProperties ( final CustomProperties customProperties ) { ensureSection2 ( ) ; final MutableSection section = ( MutableSection ) getSections ( ) . get ( 1 ) ; final Map dictionary = customProperties . getDictionary ( ) ; section . clear ( ) ; int cpCodepage = customProperties . getCodepage ( ) ; if ( cpCodepage < 0 ) cpCodepage = section . getCodepage ( ) ; if ( cpCodepage < 0 ) cpCodepage = Constants . CP_UNICODE ; customProperties . setCodepage ( cpCodepage ) ; section . setCodepage ( cpCodepage ) ; section . setDictionary ( dictionary ) ; for ( final Iterator i = customProperties . values ( ) . iterator ( ) ; i . hasNext ( ) ; ) { final Property p = ( Property ) i . next ( ) ; section . setProperty ( p ) ; } } private void ensureSection2 ( ) { if ( getSectionCount ( ) < 2 ) { MutableSection s2 = new MutableSection ( ) ; s2 . setFormatID ( SectionIDMap . DOCUMENT_SUMMARY_INFORMATION_ID [ 1 ] ) ; addSection ( s2 ) ; } } public void removeCustomProperties ( ) { if ( getSectionCount ( ) >= 2 ) getSections ( ) . remove ( 1 ) ; else throw new HPSFRuntimeException ( "Illegal internal format of Document SummaryInformation stream: second section is missing." ) ; } private void notYetImplemented ( final String msg ) { throw new UnsupportedOperationException ( msg + " is not yet implemented." ) ; } } 	0
package org . apache . poi . hssf . record . formula ; import org . apache . poi . util . LittleEndian ; import org . apache . poi . util . BitField ; import org . apache . poi . util . BitFieldFactory ; import org . apache . poi . util . StringUtil ; import org . apache . poi . hssf . util . CellReference ; import org . apache . poi . hssf . model . Workbook ; import org . apache . poi . hssf . record . RecordFormatException ; import org . apache . poi . hssf . record . RecordInputStream ; import org . apache . poi . hssf . record . SSTRecord ; import org . apache . poi . hssf . record . UnicodeString ; public class ArrayPtgA extends ArrayPtg { public final static byte sid = 0x60 ; protected ArrayPtgA ( ) { super ( ) ; } public ArrayPtgA ( RecordInputStream in ) { super ( in ) ; } public Object clone ( ) { ArrayPtgA ptg = new ArrayPtgA ( ) ; ptg . field_1_reserved = field_1_reserved ; ptg . field_2_reserved = field_2_reserved ; ptg . field_3_reserved = field_3_reserved ; ptg . field_4_reserved = field_4_reserved ; ptg . field_5_reserved = field_5_reserved ; ptg . field_6_reserved = field_6_reserved ; ptg . field_7_reserved = field_7_reserved ; ptg . token_1_columns = token_1_columns ; ptg . token_2_rows = token_2_rows ; ptg . token_3_arrayValues = new Object [ getColumnCount ( ) ] [ getRowCount ( ) ] ; for ( int x = 0 ; x < getColumnCount ( ) ; x ++ ) { for ( int y = 0 ; y < getRowCount ( ) ; y ++ ) { ptg . token_3_arrayValues [ x ] [ y ] = token_3_arrayValues [ x ] [ y ] ; } } ptg . setClass ( ptgClass ) ; return ptg ; } } 	0
package org . apache . poi . hpsf ; import java . io . UnsupportedEncodingException ; import java . util . ArrayList ; import java . util . Collections ; import java . util . Iterator ; import java . util . List ; import java . util . Map ; import org . apache . poi . hpsf . wellknown . PropertyIDMap ; import org . apache . poi . hpsf . wellknown . SectionIDMap ; import org . apache . poi . util . LittleEndian ; public class Section { protected Map dictionary ; protected ClassID formatID ; public ClassID getFormatID ( ) { return formatID ; } protected long offset ; public long getOffset ( ) { return offset ; } protected int size ; public int getSize ( ) { return size ; } public int getPropertyCount ( ) { return properties . length ; } protected Property [ ] properties ; public Property [ ] getProperties ( ) { return properties ; } protected Section ( ) { } public Section ( final byte [ ] src , final int offset ) throws UnsupportedEncodingException { int o1 = offset ; formatID = new ClassID ( src , o1 ) ; o1 += ClassID . LENGTH ; this . offset = LittleEndian . getUInt ( src , o1 ) ; o1 = ( int ) this . offset ; size = ( int ) LittleEndian . getUInt ( src , o1 ) ; o1 += LittleEndian . INT_SIZE ; final int propertyCount = ( int ) LittleEndian . getUInt ( src , o1 ) ; o1 += LittleEndian . INT_SIZE ; properties = new Property [ propertyCount ] ; int pass1Offset = o1 ; List propertyList = new ArrayList ( propertyCount ) ; PropertyListEntry ple ; for ( int i = 0 ; i < properties . length ; i ++ ) { ple = new PropertyListEntry ( ) ; ple . id = ( int ) LittleEndian . getUInt ( src , pass1Offset ) ; pass1Offset += LittleEndian . INT_SIZE ; ple . offset = ( int ) LittleEndian . getUInt ( src , pass1Offset ) ; pass1Offset += LittleEndian . INT_SIZE ; propertyList . add ( ple ) ; } Collections . sort ( propertyList ) ; for ( int i = 0 ; i < propertyCount - 1 ; i ++ ) { final PropertyListEntry ple1 = ( PropertyListEntry ) propertyList . get ( i ) ; final PropertyListEntry ple2 = ( PropertyListEntry ) propertyList . get ( i + 1 ) ; ple1 . length = ple2 . offset - ple1 . offset ; } if ( propertyCount > 0 ) { ple = ( PropertyListEntry ) propertyList . get ( propertyCount - 1 ) ; ple . length = size - ple . offset ; } int codepage = - 1 ; for ( final Iterator i = propertyList . iterator ( ) ; codepage == - 1 && i . hasNext ( ) ; ) { ple = ( PropertyListEntry ) i . next ( ) ; if ( ple . id == PropertyIDMap . PID_CODEPAGE ) { int o = ( int ) ( this . offset + ple . offset ) ; final long type = LittleEndian . getUInt ( src , o ) ; o += LittleEndian . INT_SIZE ; if ( type != Variant . VT_I2 ) throw new HPSFRuntimeException ( "Value type of property ID 1 is not VT_I2 but " + type + "." ) ; codepage = LittleEndian . getUShort ( src , o ) ; } } int i1 = 0 ; for ( final Iterator i = propertyList . iterator ( ) ; i . hasNext ( ) ; ) { ple = ( PropertyListEntry ) i . next ( ) ; Property p = new Property ( ple . id , src , this . offset + ple . offset , ple . length , codepage ) ; if ( p . getID ( ) == PropertyIDMap . PID_CODEPAGE ) p = new Property ( p . getID ( ) , p . getType ( ) , new Integer ( codepage ) ) ; properties [ i1 ++ ] = p ; } dictionary = ( Map ) getProperty ( 0 ) ; } class PropertyListEntry implements Comparable { int id ; int offset ; int length ; public int compareTo ( final Object o ) { if ( ! ( o instanceof PropertyListEntry ) ) throw new ClassCastException ( o . toString ( ) ) ; final int otherOffset = ( ( PropertyListEntry ) o ) . offset ; if ( offset < otherOffset ) return - 1 ; else if ( offset == otherOffset ) return 0 ; else return 1 ; } } public Object getProperty ( final long id ) { wasNull = false ; for ( int i = 0 ; i < properties . length ; i ++ ) if ( id == properties [ i ] . getID ( ) ) return properties [ i ] . getValue ( ) ; wasNull = true ; return null ; } protected int getPropertyIntValue ( final long id ) { final Number i ; final Object o = getProperty ( id ) ; if ( o == null ) return 0 ; if ( ! ( o instanceof Long || o instanceof Integer ) ) throw new HPSFRuntimeException ( "This property is not an integer type, but " + o . getClass ( ) . getName ( ) + "." ) ; i = ( Number ) o ; return i . intValue ( ) ; } protected boolean getPropertyBooleanValue ( final int id ) { final Boolean b = ( Boolean ) getProperty ( id ) ; if ( b != null ) return b . booleanValue ( ) ; else return false ; } private boolean wasNull ; public boolean wasNull ( ) { return wasNull ; } public String getPIDString ( final long pid ) { String s = null ; if ( dictionary != null ) s = ( String ) dictionary . get ( new Long ( pid ) ) ; if ( s == null ) s = SectionIDMap . getPIDString ( getFormatID ( ) . getBytes ( ) , pid ) ; if ( s == null ) s = SectionIDMap . UNDEFINED ; return s ; } public boolean equals ( final Object o ) { if ( o == null || ! ( o instanceof Section ) ) return false ; final Section s = ( Section ) o ; if ( ! s . getFormatID ( ) . equals ( getFormatID ( ) ) ) return false ; Property [ ] pa1 = new Property [ getProperties ( ) . length ] ; Property [ ] pa2 = new Property [ s . getProperties ( ) . length ] ; System . arraycopy ( getProperties ( ) , 0 , pa1 , 0 , pa1 . length ) ; System . arraycopy ( s . getProperties ( ) , 0 , pa2 , 0 , pa2 . length ) ; Property p10 = null ; Property p20 = null ; for ( int i = 0 ; i < pa1 . length ; i ++ ) { final long id = pa1 [ i ] . getID ( ) ; if ( id == 0 ) { p10 = pa1 [ i ] ; pa1 = remove ( pa1 , i ) ; i -- ; } if ( id == 1 ) { pa1 = remove ( pa1 , i ) ; i -- ; } } for ( int i = 0 ; i < pa2 . length ; i ++ ) { final long id = pa2 [ i ] . getID ( ) ; if ( id == 0 ) { p20 = pa2 [ i ] ; pa2 = remove ( pa2 , i ) ; i -- ; } if ( id == 1 ) { pa2 = remove ( pa2 , i ) ; i -- ; } } if ( pa1 . length != pa2 . length ) return false ; boolean dictionaryEqual = true ; if ( p10 != null && p20 != null ) dictionaryEqual = p10 . getValue ( ) . equals ( p20 . getValue ( ) ) ; else if ( p10 != null || p20 != null ) dictionaryEqual = false ; if ( ! dictionaryEqual ) return false ; else return Util . equals ( pa1 , pa2 ) ; } private Property [ ] remove ( final Property [ ] pa , final int i ) { final Property [ ] h = new Property [ pa . length - 1 ] ; if ( i > 0 ) System . arraycopy ( pa , 0 , h , 0 , i ) ; System . arraycopy ( pa , i + 1 , h , i , h . length - i ) ; return h ; } public int hashCode ( ) { long hashCode = 0 ; hashCode += getFormatID ( ) . hashCode ( ) ; final Property [ ] pa = getProperties ( ) ; for ( int i = 0 ; i < pa . length ; i ++ ) hashCode += pa [ i ] . hashCode ( ) ; final int returnHashCode = ( int ) ( hashCode & 0x0ffffffffL ) ; return returnHashCode ; } public String toString ( ) { final StringBuffer b = new StringBuffer ( ) ; final Property [ ] pa = getProperties ( ) ; b . append ( getClass ( ) . getName ( ) ) ; b . append ( '[' ) ; b . append ( "formatID: " ) ; b . append ( getFormatID ( ) ) ; b . append ( ", offset: " ) ; b . append ( getOffset ( ) ) ; b . append ( ", propertyCount: " ) ; b . append ( getPropertyCount ( ) ) ; b . append ( ", size: " ) ; b . append ( getSize ( ) ) ; b . append ( ", properties: [\n" ) ; for ( int i = 0 ; i < pa . length ; i ++ ) { b . append ( pa [ i ] . toString ( ) ) ; b . append ( ",\n" ) ; } b . append ( ']' ) ; b . append ( ']' ) ; return b . toString ( ) ; } public Map getDictionary ( ) { return dictionary ; } public int getCodepage ( ) { final Integer codepage = ( Integer ) getProperty ( PropertyIDMap . PID_CODEPAGE ) ; if ( codepage == null ) return - 1 ; int cp = codepage . intValue ( ) ; return cp ; } } 	1
package org . apache . poi . hssf . record ; import org . apache . poi . util . LittleEndian ; import org . apache . poi . util . StringUtil ; public class BoundSheetRecord extends Record { public final static short sid = 0x85 ; private int field_1_position_of_BOF ; private short field_2_option_flags ; private byte field_3_sheetname_length ; private byte field_4_compressed_unicode_flag ; private String field_5_sheetname ; public BoundSheetRecord ( ) { } public BoundSheetRecord ( RecordInputStream in ) { super ( in ) ; } protected void validateSid ( short id ) { if ( id != sid ) { throw new RecordFormatException ( "NOT A Bound Sheet RECORD" ) ; } } protected void fillFields ( RecordInputStream in ) { field_1_position_of_BOF = in . readInt ( ) ; field_2_option_flags = in . readShort ( ) ; field_3_sheetname_length = in . readByte ( ) ; field_4_compressed_unicode_flag = in . readByte ( ) ; int nameLength = LittleEndian . ubyteToInt ( field_3_sheetname_length ) ; if ( ( field_4_compressed_unicode_flag & 0x01 ) == 1 ) { field_5_sheetname = in . readUnicodeLEString ( nameLength ) ; } else { field_5_sheetname = in . readCompressedUnicode ( nameLength ) ; } } public void setPositionOfBof ( int pos ) { field_1_position_of_BOF = pos ; } public void setOptionFlags ( short flags ) { field_2_option_flags = flags ; } public void setSheetnameLength ( byte len ) { field_3_sheetname_length = len ; } public void setCompressedUnicodeFlag ( byte flag ) { field_4_compressed_unicode_flag = flag ; } public void setSheetname ( String sheetname ) { if ( ( sheetname == null ) || ( sheetname . length ( ) == 0 ) || ( sheetname . length ( ) > 31 ) || ( sheetname . indexOf ( "/" ) > - 1 ) || ( sheetname . indexOf ( "\\" ) > - 1 ) || ( sheetname . indexOf ( "?" ) > - 1 ) || ( sheetname . indexOf ( "*" ) > - 1 ) || ( sheetname . indexOf ( "]" ) > - 1 ) || ( sheetname . indexOf ( "[" ) > - 1 ) ) { throw new IllegalArgumentException ( "Sheet name cannot be blank, greater than 31 chars, or contain any of /\\*?[]" ) ; } field_5_sheetname = sheetname ; setCompressedUnicodeFlag ( StringUtil . hasMultibyte ( sheetname ) ? ( byte ) 1 : ( byte ) 0 ) ; } public int getPositionOfBof ( ) { return field_1_position_of_BOF ; } public short getOptionFlags ( ) { return field_2_option_flags ; } public byte getSheetnameLength ( ) { return field_3_sheetname_length ; } public byte getRawSheetnameLength ( ) { return ( byte ) ( ( ( field_4_compressed_unicode_flag & 0x01 ) == 1 ) ? 2 * field_3_sheetname_length : field_3_sheetname_length ) ; } public byte getCompressedUnicodeFlag ( ) { return field_4_compressed_unicode_flag ; } public String getSheetname ( ) { return field_5_sheetname ; } public String toString ( ) { StringBuffer buffer = new StringBuffer ( ) ; buffer . append ( "[BOUNDSHEET]\n" ) ; buffer . append ( "    .bof             = " ) . append ( Integer . toHexString ( getPositionOfBof ( ) ) ) . append ( "\n" ) ; buffer . append ( "    .optionflags     = " ) . append ( Integer . toHexString ( getOptionFlags ( ) ) ) . append ( "\n" ) ; buffer . append ( "    .sheetname length= " ) . append ( Integer . toHexString ( getSheetnameLength ( ) ) ) . append ( "\n" ) ; buffer . append ( "    .unicodeflag     = " ) . append ( Integer . toHexString ( getCompressedUnicodeFlag ( ) ) ) . append ( "\n" ) ; buffer . append ( "    .sheetname       = " ) . append ( getSheetname ( ) ) . append ( "\n" ) ; buffer . append ( "[/BOUNDSHEET]\n" ) ; return buffer . toString ( ) ; } public int serialize ( int offset , byte [ ] data ) { LittleEndian . putShort ( data , 0 + offset , sid ) ; LittleEndian . putShort ( data , 2 + offset , ( short ) ( 8 + getRawSheetnameLength ( ) ) ) ; LittleEndian . putInt ( data , 4 + offset , getPositionOfBof ( ) ) ; LittleEndian . putShort ( data , 8 + offset , getOptionFlags ( ) ) ; data [ 10 + offset ] = ( byte ) ( getSheetnameLength ( ) ) ; data [ 11 + offset ] = getCompressedUnicodeFlag ( ) ; if ( ( field_4_compressed_unicode_flag & 0x01 ) == 1 ) StringUtil . putUnicodeLE ( getSheetname ( ) , data , 12 + offset ) ; else StringUtil . putCompressedUnicode ( getSheetname ( ) , data , 12 + offset ) ; return getRecordSize ( ) ; } public int getRecordSize ( ) { return 12 + getRawSheetnameLength ( ) ; } public short getSid ( ) { return sid ; } } 	1
package org . apache . poi . hssf . record . formula ; import org . apache . poi . hssf . model . Workbook ; import org . apache . poi . hssf . record . RecordInputStream ; import org . apache . poi . hssf . usermodel . HSSFErrorConstants ; public class ErrPtg extends Ptg { public static final short sid = 0x1c ; private static final int SIZE = 7 ; private byte field_1_error_code ; public ErrPtg ( ) { } public ErrPtg ( RecordInputStream in ) { field_1_error_code = in . readByte ( ) ; } public void writeBytes ( byte [ ] array , int offset ) { array [ offset ] = ( byte ) ( sid + ptgClass ) ; array [ offset + 1 ] = field_1_error_code ; } public String toFormulaString ( Workbook book ) { switch ( field_1_error_code ) { case HSSFErrorConstants . ERROR_NULL : return "#NULL!" ; case HSSFErrorConstants . ERROR_DIV_0 : return "#DIV/0!" ; case HSSFErrorConstants . ERROR_VALUE : return "#VALUE!" ; case HSSFErrorConstants . ERROR_REF : return "#REF!" ; case HSSFErrorConstants . ERROR_NAME : return "#NAME?" ; case HSSFErrorConstants . ERROR_NUM : return "#NUM!" ; case HSSFErrorConstants . ERROR_NA : return "#N/A" ; } return "#N/A" ; } public int getSize ( ) { return SIZE ; } public byte getDefaultOperandClass ( ) { return Ptg . CLASS_VALUE ; } public Object clone ( ) { ErrPtg ptg = new ErrPtg ( ) ; ptg . field_1_error_code = field_1_error_code ; return ptg ; } } 	0
package org . apache . poi . ddf ; import org . apache . poi . util . LittleEndian ; import org . apache . poi . util . HexDump ; public class EscherSimpleProperty extends EscherProperty { protected int propertyValue ; public EscherSimpleProperty ( short id , int propertyValue ) { super ( id ) ; this . propertyValue = propertyValue ; } public EscherSimpleProperty ( short propertyNumber , boolean isComplex , boolean isBlipId , int propertyValue ) { super ( propertyNumber , isComplex , isBlipId ) ; this . propertyValue = propertyValue ; } public int serializeSimplePart ( byte [ ] data , int offset ) { LittleEndian . putShort ( data , offset , getId ( ) ) ; LittleEndian . putInt ( data , offset + 2 , propertyValue ) ; return 6 ; } public int serializeComplexPart ( byte [ ] data , int pos ) { return 0 ; } public int getPropertyValue ( ) { return propertyValue ; } public boolean equals ( Object o ) { if ( this == o ) return true ; if ( ! ( o instanceof EscherSimpleProperty ) ) return false ; final EscherSimpleProperty escherSimpleProperty = ( EscherSimpleProperty ) o ; if ( propertyValue != escherSimpleProperty . propertyValue ) return false ; if ( getId ( ) != escherSimpleProperty . getId ( ) ) return false ; return true ; } public int hashCode ( ) { return propertyValue ; } public String toString ( ) { return "propNum: " + getPropertyNumber ( ) + ", RAW: 0x" + HexDump . toHex ( getId ( ) ) + ", propName: " + EscherProperties . getPropertyName ( getPropertyNumber ( ) ) + ", complex: " + isComplex ( ) + ", blipId: " + isBlipId ( ) + ", value: " + propertyValue + " (0x" + HexDump . toHex ( propertyValue ) + ")" ; } } 	1
package org . apache . poi . poifs . filesystem ; public class POIFSWriterEvent { private DocumentOutputStream stream ; private POIFSDocumentPath path ; private String documentName ; private int limit ; POIFSWriterEvent ( final DocumentOutputStream stream , final POIFSDocumentPath path , final String documentName , final int limit ) { this . stream = stream ; this . path = path ; this . documentName = documentName ; this . limit = limit ; } public DocumentOutputStream getStream ( ) { return stream ; } public POIFSDocumentPath getPath ( ) { return path ; } public String getName ( ) { return documentName ; } public int getLimit ( ) { return limit ; } } 	0
package org . apache . poi . hssf . record ; import org . apache . poi . util . * ; public class GroupMarkerSubRecord extends SubRecord { public final static short sid = 0x06 ; private byte [ ] reserved = new byte [ 0 ] ; public GroupMarkerSubRecord ( ) { } public GroupMarkerSubRecord ( RecordInputStream in ) { super ( in ) ; } protected void validateSid ( short id ) { if ( id != sid ) { throw new RecordFormatException ( "Not a Group Marker record" ) ; } } protected void fillFields ( RecordInputStream in ) { reserved = in . readRemainder ( ) ; } public String toString ( ) { StringBuffer buffer = new StringBuffer ( ) ; String nl = System . getProperty ( "line.separator" ) ; buffer . append ( "[ftGmo]" + nl ) ; buffer . append ( "  reserved = " ) . append ( HexDump . toHex ( reserved ) ) . append ( nl ) ; buffer . append ( "[/ftGmo]" + nl ) ; return buffer . toString ( ) ; } public int serialize ( int offset , byte [ ] data ) { LittleEndian . putShort ( data , 0 + offset , sid ) ; LittleEndian . putShort ( data , 2 + offset , ( short ) ( getRecordSize ( ) - 4 ) ) ; System . arraycopy ( reserved , 0 , data , offset + 4 , getRecordSize ( ) - 4 ) ; return getRecordSize ( ) ; } public int getRecordSize ( ) { return 4 + reserved . length ; } public short getSid ( ) { return sid ; } public Object clone ( ) { GroupMarkerSubRecord rec = new GroupMarkerSubRecord ( ) ; rec . reserved = new byte [ reserved . length ] ; for ( int i = 0 ; i < reserved . length ; i ++ ) rec . reserved [ i ] = reserved [ i ] ; return rec ; } } 	1
package org . apache . poi . util ; import java . util . * ; public class POILogFactory { private static Map _loggers = new HashMap ( ) ; ; private POILogFactory ( ) { } public static POILogger getLogger ( final Class theclass ) { return getLogger ( theclass . getName ( ) ) ; } public static POILogger getLogger ( final String cat ) { POILogger logger = null ; if ( _loggers . containsKey ( cat ) ) { logger = ( POILogger ) _loggers . get ( cat ) ; } else { try { String loggerClassName = System . getProperty ( "org.apache.poi.util.POILogger" ) ; Class loggerClass = Class . forName ( loggerClassName ) ; logger = ( POILogger ) loggerClass . newInstance ( ) ; } catch ( Exception e ) { logger = new NullLogger ( ) ; } logger . initialize ( cat ) ; _loggers . put ( cat , logger ) ; } return logger ; } } 	0
package org . apache . poi . hssf . record ; import org . apache . poi . util . BitField ; import org . apache . poi . util . BitFieldFactory ; import org . apache . poi . util . LittleEndian ; public class ExtendedFormatRecord extends Record { public final static short sid = 0xE0 ; public final static short NULL = ( short ) 0xfff0 ; public final static short XF_STYLE = 1 ; public final static short XF_CELL = 0 ; public final static short NONE = 0x0 ; public final static short THIN = 0x1 ; public final static short MEDIUM = 0x2 ; public final static short DASHED = 0x3 ; public final static short DOTTED = 0x4 ; public final static short THICK = 0x5 ; public final static short DOUBLE = 0x6 ; public final static short HAIR = 0x7 ; public final static short MEDIUM_DASHED = 0x8 ; public final static short DASH_DOT = 0x9 ; public final static short MEDIUM_DASH_DOT = 0xA ; public final static short DASH_DOT_DOT = 0xB ; public final static short MEDIUM_DASH_DOT_DOT = 0xC ; public final static short SLANTED_DASH_DOT = 0xD ; public final static short GENERAL = 0x0 ; public final static short LEFT = 0x1 ; public final static short CENTER = 0x2 ; public final static short RIGHT = 0x3 ; public final static short FILL = 0x4 ; public final static short JUSTIFY = 0x5 ; public final static short CENTER_SELECTION = 0x6 ; public final static short VERTICAL_TOP = 0x0 ; public final static short VERTICAL_CENTER = 0x1 ; public final static short VERTICAL_BOTTOM = 0x2 ; public final static short VERTICAL_JUSTIFY = 0x3 ; public final static short NO_FILL = 0 ; public final static short SOLID_FILL = 1 ; public final static short FINE_DOTS = 2 ; public final static short ALT_BARS = 3 ; public final static short SPARSE_DOTS = 4 ; public final static short THICK_HORZ_BANDS = 5 ; public final static short THICK_VERT_BANDS = 6 ; public final static short THICK_BACKWARD_DIAG = 7 ; public final static short THICK_FORWARD_DIAG = 8 ; public final static short BIG_SPOTS = 9 ; public final static short BRICKS = 10 ; public final static short THIN_HORZ_BANDS = 11 ; public final static short THIN_VERT_BANDS = 12 ; public final static short THIN_BACKWARD_DIAG = 13 ; public final static short THIN_FORWARD_DIAG = 14 ; public final static short SQUARES = 15 ; public final static short DIAMONDS = 16 ; private short field_1_font_index ; private short field_2_format_index ; static final private BitField _locked = BitFieldFactory . getInstance ( 0x0001 ) ; static final private BitField _hidden = BitFieldFactory . getInstance ( 0x0002 ) ; static final private BitField _xf_type = BitFieldFactory . getInstance ( 0x0004 ) ; static final private BitField _123_prefix = BitFieldFactory . getInstance ( 0x0008 ) ; static final private BitField _parent_index = BitFieldFactory . getInstance ( 0xFFF0 ) ; private short field_3_cell_options ; static final private BitField _alignment = BitFieldFactory . getInstance ( 0x0007 ) ; static final private BitField _wrap_text = BitFieldFactory . getInstance ( 0x0008 ) ; static final private BitField _vertical_alignment = BitFieldFactory . getInstance ( 0x0070 ) ; static final private BitField _justify_last = BitFieldFactory . getInstance ( 0x0080 ) ; static final private BitField _rotation = BitFieldFactory . getInstance ( 0xFF00 ) ; private short field_4_alignment_options ; static final private BitField _indent = BitFieldFactory . getInstance ( 0x000F ) ; static final private BitField _shrink_to_fit = BitFieldFactory . getInstance ( 0x0010 ) ; static final private BitField _merge_cells = BitFieldFactory . getInstance ( 0x0020 ) ; static final private BitField _reading_order = BitFieldFactory . getInstance ( 0x00C0 ) ; static final private BitField _indent_not_parent_format = BitFieldFactory . getInstance ( 0x0400 ) ; static final private BitField _indent_not_parent_font = BitFieldFactory . getInstance ( 0x0800 ) ; static final private BitField _indent_not_parent_alignment = BitFieldFactory . getInstance ( 0x1000 ) ; static final private BitField _indent_not_parent_border = BitFieldFactory . getInstance ( 0x2000 ) ; static final private BitField _indent_not_parent_pattern = BitFieldFactory . getInstance ( 0x4000 ) ; static final private BitField _indent_not_parent_cell_options = BitFieldFactory . getInstance ( 0x8000 ) ; private short field_5_indention_options ; static final private BitField _border_left = BitFieldFactory . getInstance ( 0x000F ) ; static final private BitField _border_right = BitFieldFactory . getInstance ( 0x00F0 ) ; static final private BitField _border_top = BitFieldFactory . getInstance ( 0x0F00 ) ; static final private BitField _border_bottom = BitFieldFactory . getInstance ( 0xF000 ) ; private short field_6_border_options ; static final private BitField _left_border_palette_idx = BitFieldFactory . getInstance ( 0x007F ) ; static final private BitField _right_border_palette_idx = BitFieldFactory . getInstance ( 0x3F80 ) ; static final private BitField _diag = BitFieldFactory . getInstance ( 0xC000 ) ; private short field_7_palette_options ; static final private BitField _top_border_palette_idx = BitFieldFactory . getInstance ( 0x0000007F ) ; static final private BitField _bottom_border_palette_idx = BitFieldFactory . getInstance ( 0x00003F80 ) ; static final private BitField _adtl_diag = BitFieldFactory . getInstance ( 0x001fc000 ) ; static final private BitField _adtl_diag_line_style = BitFieldFactory . getInstance ( 0x01e00000 ) ; static final private BitField _adtl_fill_pattern = BitFieldFactory . getInstance ( 0xfc000000 ) ; private int field_8_adtl_palette_options ; static final private BitField _fill_foreground = BitFieldFactory . getInstance ( 0x007F ) ; static final private BitField _fill_background = BitFieldFactory . getInstance ( 0x3f80 ) ; private short field_9_fill_palette_options ; public ExtendedFormatRecord ( ) { } public ExtendedFormatRecord ( RecordInputStream in ) { super ( in ) ; } protected void validateSid ( short id ) { if ( id != sid ) { throw new RecordFormatException ( "NOT A EXTENDED FORMAT RECORD" ) ; } } protected void fillFields ( RecordInputStream in ) { field_1_font_index = in . readShort ( ) ; field_2_format_index = in . readShort ( ) ; field_3_cell_options = in . readShort ( ) ; field_4_alignment_options = in . readShort ( ) ; field_5_indention_options = in . readShort ( ) ; field_6_border_options = in . readShort ( ) ; field_7_palette_options = in . readShort ( ) ; field_8_adtl_palette_options = in . readInt ( ) ; field_9_fill_palette_options = in . readShort ( ) ; } public void setFontIndex ( short index ) { field_1_font_index = index ; } public void setFormatIndex ( short index ) { field_2_format_index = index ; } public void setCellOptions ( short options ) { field_3_cell_options = options ; } public void setLocked ( boolean locked ) { field_3_cell_options = _locked . setShortBoolean ( field_3_cell_options , locked ) ; } public void setHidden ( boolean hidden ) { field_3_cell_options = _hidden . setShortBoolean ( field_3_cell_options , hidden ) ; } public void setXFType ( short type ) { field_3_cell_options = _xf_type . setShortValue ( field_3_cell_options , type ) ; } public void set123Prefix ( boolean prefix ) { field_3_cell_options = _123_prefix . setShortBoolean ( field_3_cell_options , prefix ) ; } public void setParentIndex ( short parent ) { field_3_cell_options = _parent_index . setShortValue ( field_3_cell_options , parent ) ; } public void setAlignmentOptions ( short options ) { field_4_alignment_options = options ; } public void setAlignment ( short align ) { field_4_alignment_options = _alignment . setShortValue ( field_4_alignment_options , align ) ; } public void setWrapText ( boolean wrapped ) { field_4_alignment_options = _wrap_text . setShortBoolean ( field_4_alignment_options , wrapped ) ; } public void setVerticalAlignment ( short align ) { field_4_alignment_options = _vertical_alignment . setShortValue ( field_4_alignment_options , align ) ; } public void setJustifyLast ( short justify ) { field_4_alignment_options = _justify_last . setShortValue ( field_4_alignment_options , justify ) ; } public void setRotation ( short rotation ) { field_4_alignment_options = _rotation . setShortValue ( field_4_alignment_options , rotation ) ; } public void setIndentionOptions ( short options ) { field_5_indention_options = options ; } public void setIndent ( short indent ) { field_5_indention_options = _indent . setShortValue ( field_5_indention_options , indent ) ; } public void setShrinkToFit ( boolean shrink ) { field_5_indention_options = _shrink_to_fit . setShortBoolean ( field_5_indention_options , shrink ) ; } public void setMergeCells ( boolean merge ) { field_5_indention_options = _merge_cells . setShortBoolean ( field_5_indention_options , merge ) ; } public void setReadingOrder ( short order ) { field_5_indention_options = _reading_order . setShortValue ( field_5_indention_options , order ) ; } public void setIndentNotParentFormat ( boolean parent ) { field_5_indention_options = _indent_not_parent_format . setShortBoolean ( field_5_indention_options , parent ) ; } public void setIndentNotParentFont ( boolean font ) { field_5_indention_options = _indent_not_parent_font . setShortBoolean ( field_5_indention_options , font ) ; } public void setIndentNotParentAlignment ( boolean alignment ) { field_5_indention_options = _indent_not_parent_alignment . setShortBoolean ( field_5_indention_options , alignment ) ; } public void setIndentNotParentBorder ( boolean border ) { field_5_indention_options = _indent_not_parent_border . setShortBoolean ( field_5_indention_options , border ) ; } public void setIndentNotParentPattern ( boolean pattern ) { field_5_indention_options = _indent_not_parent_pattern . setShortBoolean ( field_5_indention_options , pattern ) ; } public void setIndentNotParentCellOptions ( boolean options ) { field_5_indention_options = _indent_not_parent_cell_options . setShortBoolean ( field_5_indention_options , options ) ; } public void setBorderOptions ( short options ) { field_6_border_options = options ; } public void setBorderLeft ( short border ) { field_6_border_options = _border_left . setShortValue ( field_6_border_options , border ) ; } public void setBorderRight ( short border ) { field_6_border_options = _border_right . setShortValue ( field_6_border_options , border ) ; } public void setBorderTop ( short border ) { field_6_border_options = _border_top . setShortValue ( field_6_border_options , border ) ; } public void setBorderBottom ( short border ) { field_6_border_options = _border_bottom . setShortValue ( field_6_border_options , border ) ; } public void setPaletteOptions ( short options ) { field_7_palette_options = options ; } public void setLeftBorderPaletteIdx ( short border ) { field_7_palette_options = _left_border_palette_idx . setShortValue ( field_7_palette_options , border ) ; } public void setRightBorderPaletteIdx ( short border ) { field_7_palette_options = _right_border_palette_idx . setShortValue ( field_7_palette_options , border ) ; } public void setDiag ( short diag ) { field_7_palette_options = _diag . setShortValue ( field_7_palette_options , diag ) ; } public void setAdtlPaletteOptions ( short options ) { field_8_adtl_palette_options = options ; } public void setTopBorderPaletteIdx ( short border ) { field_8_adtl_palette_options = _top_border_palette_idx . setValue ( field_8_adtl_palette_options , border ) ; } public void setBottomBorderPaletteIdx ( short border ) { field_8_adtl_palette_options = _bottom_border_palette_idx . setValue ( field_8_adtl_palette_options , border ) ; } public void setAdtlDiag ( short diag ) { field_8_adtl_palette_options = _adtl_diag . setValue ( field_8_adtl_palette_options , diag ) ; } public void setAdtlDiagLineStyle ( short diag ) { field_8_adtl_palette_options = _adtl_diag_line_style . setValue ( field_8_adtl_palette_options , diag ) ; } public void setAdtlFillPattern ( short fill ) { field_8_adtl_palette_options = _adtl_fill_pattern . setValue ( field_8_adtl_palette_options , fill ) ; } public void setFillPaletteOptions ( short options ) { field_9_fill_palette_options = options ; } public void setFillForeground ( short color ) { field_9_fill_palette_options = _fill_foreground . setShortValue ( field_9_fill_palette_options , color ) ; } public void setFillBackground ( short color ) { field_9_fill_palette_options = _fill_background . setShortValue ( field_9_fill_palette_options , color ) ; } public short getFontIndex ( ) { return field_1_font_index ; } public short getFormatIndex ( ) { return field_2_format_index ; } public short getCellOptions ( ) { return field_3_cell_options ; } public boolean isLocked ( ) { return _locked . isSet ( field_3_cell_options ) ; } public boolean isHidden ( ) { return _hidden . isSet ( field_3_cell_options ) ; } public short getXFType ( ) { return _xf_type . getShortValue ( field_3_cell_options ) ; } public boolean get123Prefix ( ) { return _123_prefix . isSet ( field_3_cell_options ) ; } public short getParentIndex ( ) { return _parent_index . getShortValue ( field_3_cell_options ) ; } public short getAlignmentOptions ( ) { return field_4_alignment_options ; } public short getAlignment ( ) { return _alignment . getShortValue ( field_4_alignment_options ) ; } public boolean getWrapText ( ) { return _wrap_text . isSet ( field_4_alignment_options ) ; } public short getVerticalAlignment ( ) { return _vertical_alignment . getShortValue ( field_4_alignment_options ) ; } public short getJustifyLast ( ) { return _justify_last . getShortValue ( field_4_alignment_options ) ; } public short getRotation ( ) { return _rotation . getShortValue ( field_4_alignment_options ) ; } public short getIndentionOptions ( ) { return field_5_indention_options ; } public short getIndent ( ) { return _indent . getShortValue ( field_5_indention_options ) ; } public boolean getShrinkToFit ( ) { return _shrink_to_fit . isSet ( field_5_indention_options ) ; } public boolean getMergeCells ( ) { return _merge_cells . isSet ( field_5_indention_options ) ; } public short getReadingOrder ( ) { return _reading_order . getShortValue ( field_5_indention_options ) ; } public boolean isIndentNotParentFormat ( ) { return _indent_not_parent_format . isSet ( field_5_indention_options ) ; } public boolean isIndentNotParentFont ( ) { return _indent_not_parent_font . isSet ( field_5_indention_options ) ; } public boolean isIndentNotParentAlignment ( ) { return _indent_not_parent_alignment . isSet ( field_5_indention_options ) ; } public boolean isIndentNotParentBorder ( ) { return _indent_not_parent_border . isSet ( field_5_indention_options ) ; } public boolean isIndentNotParentPattern ( ) { return _indent_not_parent_pattern . isSet ( field_5_indention_options ) ; } public boolean isIndentNotParentCellOptions ( ) { return _indent_not_parent_cell_options . isSet ( field_5_indention_options ) ; } public short getBorderOptions ( ) { return field_6_border_options ; } public short getBorderLeft ( ) { return _border_left . getShortValue ( field_6_border_options ) ; } public short getBorderRight ( ) { return _border_right . getShortValue ( field_6_border_options ) ; } public short getBorderTop ( ) { return _border_top . getShortValue ( field_6_border_options ) ; } public short getBorderBottom ( ) { return _border_bottom . getShortValue ( field_6_border_options ) ; } public short getPaletteOptions ( ) { return field_7_palette_options ; } public short getLeftBorderPaletteIdx ( ) { return _left_border_palette_idx . getShortValue ( field_7_palette_options ) ; } public short getRightBorderPaletteIdx ( ) { return _right_border_palette_idx . getShortValue ( field_7_palette_options ) ; } public short getDiag ( ) { return _diag . getShortValue ( field_7_palette_options ) ; } public int getAdtlPaletteOptions ( ) { return field_8_adtl_palette_options ; } public short getTopBorderPaletteIdx ( ) { return ( short ) _top_border_palette_idx . getValue ( field_8_adtl_palette_options ) ; } public short getBottomBorderPaletteIdx ( ) { return ( short ) _bottom_border_palette_idx . getValue ( field_8_adtl_palette_options ) ; } public short getAdtlDiag ( ) { return ( short ) _adtl_diag . getValue ( field_8_adtl_palette_options ) ; } public short getAdtlDiagLineStyle ( ) { return ( short ) _adtl_diag_line_style . getValue ( field_8_adtl_palette_options ) ; } public short getAdtlFillPattern ( ) { return ( short ) _adtl_fill_pattern . getValue ( field_8_adtl_palette_options ) ; } public short getFillPaletteOptions ( ) { return field_9_fill_palette_options ; } public short getFillForeground ( ) { return _fill_foreground . getShortValue ( field_9_fill_palette_options ) ; } public short getFillBackground ( ) { return _fill_background . getShortValue ( field_9_fill_palette_options ) ; } public String toString ( ) { StringBuffer buffer = new StringBuffer ( ) ; buffer . append ( "[EXTENDEDFORMAT]\n" ) ; if ( getXFType ( ) == XF_STYLE ) { buffer . append ( " STYLE_RECORD_TYPE\n" ) ; } else if ( getXFType ( ) == XF_CELL ) { buffer . append ( " CELL_RECORD_TYPE\n" ) ; } buffer . append ( "    .fontindex       = " ) . append ( Integer . toHexString ( getFontIndex ( ) ) ) . append ( "\n" ) ; buffer . append ( "    .formatindex     = " ) . append ( Integer . toHexString ( getFormatIndex ( ) ) ) . append ( "\n" ) ; buffer . append ( "    .celloptions     = " ) . append ( Integer . toHexString ( getCellOptions ( ) ) ) . append ( "\n" ) ; buffer . append ( "          .islocked  = " ) . append ( isLocked ( ) ) . append ( "\n" ) ; buffer . append ( "          .ishidden  = " ) . append ( isHidden ( ) ) . append ( "\n" ) ; buffer . append ( "          .recordtype= " ) . append ( Integer . toHexString ( getXFType ( ) ) ) . append ( "\n" ) ; buffer . append ( "          .parentidx = " ) . append ( Integer . toHexString ( getParentIndex ( ) ) ) . append ( "\n" ) ; buffer . append ( "    .alignmentoptions= " ) . append ( Integer . toHexString ( getAlignmentOptions ( ) ) ) . append ( "\n" ) ; buffer . append ( "          .alignment = " ) . append ( getAlignment ( ) ) . append ( "\n" ) ; buffer . append ( "          .wraptext  = " ) . append ( getWrapText ( ) ) . append ( "\n" ) ; buffer . append ( "          .valignment= " ) . append ( Integer . toHexString ( getVerticalAlignment ( ) ) ) . append ( "\n" ) ; buffer . append ( "          .justlast  = " ) . append ( Integer . toHexString ( getJustifyLast ( ) ) ) . append ( "\n" ) ; buffer . append ( "          .rotation  = " ) . append ( Integer . toHexString ( getRotation ( ) ) ) . append ( "\n" ) ; buffer . append ( "    .indentionoptions= " ) . append ( Integer . toHexString ( getIndentionOptions ( ) ) ) . append ( "\n" ) ; buffer . append ( "          .indent    = " ) . append ( Integer . toHexString ( getIndent ( ) ) ) . append ( "\n" ) ; buffer . append ( "          .shrinktoft= " ) . append ( getShrinkToFit ( ) ) . append ( "\n" ) ; buffer . append ( "          .mergecells= " ) . append ( getMergeCells ( ) ) . append ( "\n" ) ; buffer . append ( "          .readngordr= " ) . append ( Integer . toHexString ( getReadingOrder ( ) ) ) . append ( "\n" ) ; buffer . append ( "          .formatflag= " ) . append ( isIndentNotParentFormat ( ) ) . append ( "\n" ) ; buffer . append ( "          .fontflag  = " ) . append ( isIndentNotParentFont ( ) ) . append ( "\n" ) ; buffer . append ( "          .prntalgnmt= " ) . append ( isIndentNotParentAlignment ( ) ) . append ( "\n" ) ; buffer . append ( "          .borderflag= " ) . append ( isIndentNotParentBorder ( ) ) . append ( "\n" ) ; buffer . append ( "          .paternflag= " ) . append ( isIndentNotParentPattern ( ) ) . append ( "\n" ) ; buffer . append ( "          .celloption= " ) . append ( isIndentNotParentCellOptions ( ) ) . append ( "\n" ) ; buffer . append ( "    .borderoptns     = " ) . append ( Integer . toHexString ( getBorderOptions ( ) ) ) . append ( "\n" ) ; buffer . append ( "          .lftln     = " ) . append ( Integer . toHexString ( getBorderLeft ( ) ) ) . append ( "\n" ) ; buffer . append ( "          .rgtln     = " ) . append ( Integer . toHexString ( getBorderRight ( ) ) ) . append ( "\n" ) ; buffer . append ( "          .topln     = " ) . append ( Integer . toHexString ( getBorderTop ( ) ) ) . append ( "\n" ) ; buffer . append ( "          .btmln     = " ) . append ( Integer . toHexString ( getBorderBottom ( ) ) ) . append ( "\n" ) ; buffer . append ( "    .paleteoptns     = " ) . append ( Integer . toHexString ( getPaletteOptions ( ) ) ) . append ( "\n" ) ; buffer . append ( "          .leftborder= " ) . append ( Integer . toHexString ( getLeftBorderPaletteIdx ( ) ) ) . append ( "\n" ) ; buffer . append ( "          .rghtborder= " ) . append ( Integer . toHexString ( getRightBorderPaletteIdx ( ) ) ) . append ( "\n" ) ; buffer . append ( "          .diag      = " ) . append ( Integer . toHexString ( getDiag ( ) ) ) . append ( "\n" ) ; buffer . append ( "    .paleteoptn2     = " ) . append ( Integer . toHexString ( getAdtlPaletteOptions ( ) ) ) . append ( "\n" ) ; buffer . append ( "          .topborder = " ) . append ( Integer . toHexString ( getTopBorderPaletteIdx ( ) ) ) . append ( "\n" ) ; buffer . append ( "          .botmborder= " ) . append ( Integer . toHexString ( getBottomBorderPaletteIdx ( ) ) ) . append ( "\n" ) ; buffer . append ( "          .adtldiag  = " ) . append ( Integer . toHexString ( getAdtlDiag ( ) ) ) . append ( "\n" ) ; buffer . append ( "          .diaglnstyl= " ) . append ( Integer . toHexString ( getAdtlDiagLineStyle ( ) ) ) . append ( "\n" ) ; buffer . append ( "          .fillpattrn= " ) . append ( Integer . toHexString ( getAdtlFillPattern ( ) ) ) . append ( "\n" ) ; buffer . append ( "    .fillpaloptn     = " ) . append ( Integer . toHexString ( getFillPaletteOptions ( ) ) ) . append ( "\n" ) ; buffer . append ( "          .foreground= " ) . append ( Integer . toHexString ( getFillForeground ( ) ) ) . append ( "\n" ) ; buffer . append ( "          .background= " ) . append ( Integer . toHexString ( getFillBackground ( ) ) ) . append ( "\n" ) ; buffer . append ( "[/EXTENDEDFORMAT]\n" ) ; return buffer . toString ( ) ; } public int serialize ( int offset , byte [ ] data ) { LittleEndian . putShort ( data , 0 + offset , sid ) ; LittleEndian . putShort ( data , 2 + offset , ( short ) ( 20 ) ) ; LittleEndian . putShort ( data , 4 + offset , getFontIndex ( ) ) ; LittleEndian . putShort ( data , 6 + offset , getFormatIndex ( ) ) ; LittleEndian . putShort ( data , 8 + offset , getCellOptions ( ) ) ; LittleEndian . putShort ( data , 10 + offset , getAlignmentOptions ( ) ) ; LittleEndian . putShort ( data , 12 + offset , getIndentionOptions ( ) ) ; LittleEndian . putShort ( data , 14 + offset , getBorderOptions ( ) ) ; LittleEndian . putShort ( data , 16 + offset , getPaletteOptions ( ) ) ; LittleEndian . putInt ( data , 18 + offset , getAdtlPaletteOptions ( ) ) ; LittleEndian . putShort ( data , 22 + offset , getFillPaletteOptions ( ) ) ; return getRecordSize ( ) ; } public int getRecordSize ( ) { return 24 ; } public short getSid ( ) { return sid ; } } 	1
package org . apache . poi . hssf . record . formula ; import org . apache . poi . hssf . model . Workbook ; import org . apache . poi . hssf . record . RecordInputStream ; public class GreaterEqualPtg extends OperationPtg { public final static int SIZE = 1 ; public final static byte sid = 0x0c ; public GreaterEqualPtg ( ) { } public GreaterEqualPtg ( RecordInputStream in ) { } public void writeBytes ( byte [ ] array , int offset ) { array [ offset + 0 ] = sid ; } public int getSize ( ) { return SIZE ; } public int getType ( ) { return TYPE_BINARY ; } public int getNumberOfOperands ( ) { return 2 ; } public String toFormulaString ( Workbook book ) { return ">=" ; } public String toFormulaString ( String [ ] operands ) { StringBuffer buffer = new StringBuffer ( ) ; buffer . append ( operands [ 0 ] ) ; buffer . append ( toFormulaString ( ( Workbook ) null ) ) ; buffer . append ( operands [ 1 ] ) ; return buffer . toString ( ) ; } public Object clone ( ) { return new GreaterEqualPtg ( ) ; } } 	1
package org . apache . poi . hpsf ; public class NoSingleSectionException extends HPSFRuntimeException { public NoSingleSectionException ( ) { super ( ) ; } public NoSingleSectionException ( final String msg ) { super ( msg ) ; } public NoSingleSectionException ( final Throwable reason ) { super ( reason ) ; } public NoSingleSectionException ( final String msg , final Throwable reason ) { super ( msg , reason ) ; } } 	0
package org . apache . poi . hssf . usermodel ; public class HSSFSimpleShape extends HSSFShape { public final static short OBJECT_TYPE_LINE = 1 ; public final static short OBJECT_TYPE_RECTANGLE = 2 ; public final static short OBJECT_TYPE_OVAL = 3 ; public final static short OBJECT_TYPE_PICTURE = 8 ; public final static short OBJECT_TYPE_COMMENT = 25 ; int shapeType = OBJECT_TYPE_LINE ; HSSFSimpleShape ( HSSFShape parent , HSSFAnchor anchor ) { super ( parent , anchor ) ; } public int getShapeType ( ) { return shapeType ; } public void setShapeType ( int shapeType ) { this . shapeType = shapeType ; } } 	0
package org . apache . poi . hssf . usermodel ; public abstract class HSSFShape { public static final int LINEWIDTH_ONE_PT = 12700 ; public static final int LINEWIDTH_DEFAULT = 9525 ; public static final int LINESTYLE_SOLID = 0 ; public static final int LINESTYLE_DASHSYS = 1 ; public static final int LINESTYLE_DOTSYS = 2 ; public static final int LINESTYLE_DASHDOTSYS = 3 ; public static final int LINESTYLE_DASHDOTDOTSYS = 4 ; public static final int LINESTYLE_DOTGEL = 5 ; public static final int LINESTYLE_DASHGEL = 6 ; public static final int LINESTYLE_LONGDASHGEL = 7 ; public static final int LINESTYLE_DASHDOTGEL = 8 ; public static final int LINESTYLE_LONGDASHDOTGEL = 9 ; public static final int LINESTYLE_LONGDASHDOTDOTGEL = 10 ; public static final int LINESTYLE_NONE = - 1 ; HSSFShape parent ; HSSFAnchor anchor ; int lineStyleColor = 0x08000040 ; int fillColor = 0x08000009 ; int lineWidth = LINEWIDTH_DEFAULT ; int lineStyle = LINESTYLE_SOLID ; boolean noFill = false ; HSSFShape ( HSSFShape parent , HSSFAnchor anchor ) { this . parent = parent ; this . anchor = anchor ; } public HSSFShape getParent ( ) { return parent ; } public HSSFAnchor getAnchor ( ) { return anchor ; } public void setAnchor ( HSSFAnchor anchor ) { if ( parent == null ) { if ( anchor instanceof HSSFChildAnchor ) throw new IllegalArgumentException ( "Must use client anchors for shapes directly attached to sheet." ) ; } else { if ( anchor instanceof HSSFClientAnchor ) throw new IllegalArgumentException ( "Must use child anchors for shapes attached to groups." ) ; } this . anchor = anchor ; } public int getLineStyleColor ( ) { return lineStyleColor ; } public void setLineStyleColor ( int lineStyleColor ) { this . lineStyleColor = lineStyleColor ; } public void setLineStyleColor ( int red , int green , int blue ) { this . lineStyleColor = ( ( blue ) << 16 ) | ( ( green ) << 8 ) | red ; } public int getFillColor ( ) { return fillColor ; } public void setFillColor ( int fillColor ) { this . fillColor = fillColor ; } public void setFillColor ( int red , int green , int blue ) { this . fillColor = ( ( blue ) << 16 ) | ( ( green ) << 8 ) | red ; } public int getLineWidth ( ) { return lineWidth ; } public void setLineWidth ( int lineWidth ) { this . lineWidth = lineWidth ; } public int getLineStyle ( ) { return lineStyle ; } public void setLineStyle ( int lineStyle ) { this . lineStyle = lineStyle ; } public boolean isNoFill ( ) { return noFill ; } public void setNoFill ( boolean noFill ) { this . noFill = noFill ; } public int countOfAllChildren ( ) { return 1 ; } } 	1
package org . apache . poi . hpsf ; import java . io . IOException ; import java . io . InputStream ; import java . io . UnsupportedEncodingException ; import java . util . ArrayList ; import java . util . List ; import org . apache . poi . hpsf . wellknown . SectionIDMap ; import org . apache . poi . util . LittleEndian ; public class PropertySet { static final byte [ ] BYTE_ORDER_ASSERTION = new byte [ ] { ( byte ) 0xFE , ( byte ) 0xFF } ; protected int byteOrder ; public int getByteOrder ( ) { return byteOrder ; } static final byte [ ] FORMAT_ASSERTION = new byte [ ] { ( byte ) 0x00 , ( byte ) 0x00 } ; protected int format ; public int getFormat ( ) { return format ; } protected int osVersion ; public static final int OS_WIN16 = 0x0000 ; public static final int OS_MACINTOSH = 0x0001 ; public static final int OS_WIN32 = 0x0002 ; public int getOSVersion ( ) { return osVersion ; } protected ClassID classID ; public ClassID getClassID ( ) { return classID ; } public int getSectionCount ( ) { return sections . size ( ) ; } protected List sections ; public List getSections ( ) { return sections ; } protected PropertySet ( ) { } public PropertySet ( final InputStream stream ) throws NoPropertySetStreamException , MarkUnsupportedException , IOException , UnsupportedEncodingException { if ( isPropertySetStream ( stream ) ) { final int avail = stream . available ( ) ; final byte [ ] buffer = new byte [ avail ] ; stream . read ( buffer , 0 , buffer . length ) ; init ( buffer , 0 , buffer . length ) ; } else throw new NoPropertySetStreamException ( ) ; } public PropertySet ( final byte [ ] stream , final int offset , final int length ) throws NoPropertySetStreamException , UnsupportedEncodingException { if ( isPropertySetStream ( stream , offset , length ) ) init ( stream , offset , length ) ; else throw new NoPropertySetStreamException ( ) ; } public PropertySet ( final byte [ ] stream ) throws NoPropertySetStreamException , UnsupportedEncodingException { this ( stream , 0 , stream . length ) ; } public static boolean isPropertySetStream ( final InputStream stream ) throws MarkUnsupportedException , IOException { final int BUFFER_SIZE = 50 ; if ( ! stream . markSupported ( ) ) throw new MarkUnsupportedException ( stream . getClass ( ) . getName ( ) ) ; stream . mark ( BUFFER_SIZE ) ; final byte [ ] buffer = new byte [ BUFFER_SIZE ] ; final int bytes = stream . read ( buffer , 0 , Math . min ( buffer . length , stream . available ( ) ) ) ; final boolean isPropertySetStream = isPropertySetStream ( buffer , 0 , bytes ) ; stream . reset ( ) ; return isPropertySetStream ; } public static boolean isPropertySetStream ( final byte [ ] src , final int offset , final int length ) { int o = offset ; final int byteOrder = LittleEndian . getUShort ( src , o ) ; o += LittleEndian . SHORT_SIZE ; byte [ ] temp = new byte [ LittleEndian . SHORT_SIZE ] ; LittleEndian . putShort ( temp , ( short ) byteOrder ) ; if ( ! Util . equal ( temp , BYTE_ORDER_ASSERTION ) ) return false ; final int format = LittleEndian . getUShort ( src , o ) ; o += LittleEndian . SHORT_SIZE ; temp = new byte [ LittleEndian . SHORT_SIZE ] ; LittleEndian . putShort ( temp , ( short ) format ) ; if ( ! Util . equal ( temp , FORMAT_ASSERTION ) ) return false ; o += LittleEndian . INT_SIZE ; o += ClassID . LENGTH ; final long sectionCount = LittleEndian . getUInt ( src , o ) ; o += LittleEndian . INT_SIZE ; if ( sectionCount < 1 ) return false ; return true ; } private void init ( final byte [ ] src , final int offset , final int length ) throws UnsupportedEncodingException { int o = offset ; byteOrder = LittleEndian . getUShort ( src , o ) ; o += LittleEndian . SHORT_SIZE ; format = LittleEndian . getUShort ( src , o ) ; o += LittleEndian . SHORT_SIZE ; osVersion = ( int ) LittleEndian . getUInt ( src , o ) ; o += LittleEndian . INT_SIZE ; classID = new ClassID ( src , o ) ; o += ClassID . LENGTH ; final int sectionCount = LittleEndian . getInt ( src , o ) ; o += LittleEndian . INT_SIZE ; if ( sectionCount <= 0 ) throw new HPSFRuntimeException ( "Section count " + sectionCount + " must be greater than 0." ) ; sections = new ArrayList ( sectionCount ) ; for ( int i = 0 ; i < sectionCount ; i ++ ) { final Section s = new Section ( src , o ) ; o += ClassID . LENGTH + LittleEndian . INT_SIZE ; sections . add ( s ) ; } } public boolean isSummaryInformation ( ) { return Util . equal ( ( ( Section ) sections . get ( 0 ) ) . getFormatID ( ) . getBytes ( ) , SectionIDMap . SUMMARY_INFORMATION_ID ) ; } public boolean isDocumentSummaryInformation ( ) { return Util . equal ( ( ( Section ) sections . get ( 0 ) ) . getFormatID ( ) . getBytes ( ) , SectionIDMap . DOCUMENT_SUMMARY_INFORMATION_ID [ 0 ] ) ; } public Property [ ] getProperties ( ) throws NoSingleSectionException { return getFirstSection ( ) . getProperties ( ) ; } protected Object getProperty ( final int id ) throws NoSingleSectionException { return getFirstSection ( ) . getProperty ( id ) ; } protected boolean getPropertyBooleanValue ( final int id ) throws NoSingleSectionException { return getFirstSection ( ) . getPropertyBooleanValue ( id ) ; } protected int getPropertyIntValue ( final int id ) throws NoSingleSectionException { return getFirstSection ( ) . getPropertyIntValue ( id ) ; } public boolean wasNull ( ) throws NoSingleSectionException { return getFirstSection ( ) . wasNull ( ) ; } public Section getFirstSection ( ) { if ( getSectionCount ( ) < 1 ) throw new MissingSectionException ( "Property set does not contain any sections." ) ; return ( ( Section ) sections . get ( 0 ) ) ; } public Section getSingleSection ( ) { final int sectionCount = getSectionCount ( ) ; if ( sectionCount != 1 ) throw new NoSingleSectionException ( "Property set contains " + sectionCount + " sections." ) ; return ( ( Section ) sections . get ( 0 ) ) ; } public boolean equals ( final Object o ) { if ( o == null || ! ( o instanceof PropertySet ) ) return false ; final PropertySet ps = ( PropertySet ) o ; int byteOrder1 = ps . getByteOrder ( ) ; int byteOrder2 = getByteOrder ( ) ; ClassID classID1 = ps . getClassID ( ) ; ClassID classID2 = getClassID ( ) ; int format1 = ps . getFormat ( ) ; int format2 = getFormat ( ) ; int osVersion1 = ps . getOSVersion ( ) ; int osVersion2 = getOSVersion ( ) ; int sectionCount1 = ps . getSectionCount ( ) ; int sectionCount2 = getSectionCount ( ) ; if ( byteOrder1 != byteOrder2 || ! classID1 . equals ( classID2 ) || format1 != format2 || osVersion1 != osVersion2 || sectionCount1 != sectionCount2 ) return false ; return Util . equals ( getSections ( ) , ps . getSections ( ) ) ; } public int hashCode ( ) { throw new UnsupportedOperationException ( "FIXME: Not yet implemented." ) ; } public String toString ( ) { final StringBuffer b = new StringBuffer ( ) ; final int sectionCount = getSectionCount ( ) ; b . append ( getClass ( ) . getName ( ) ) ; b . append ( '[' ) ; b . append ( "byteOrder: " ) ; b . append ( getByteOrder ( ) ) ; b . append ( ", classID: " ) ; b . append ( getClassID ( ) ) ; b . append ( ", format: " ) ; b . append ( getFormat ( ) ) ; b . append ( ", OSVersion: " ) ; b . append ( getOSVersion ( ) ) ; b . append ( ", sectionCount: " ) ; b . append ( sectionCount ) ; b . append ( ", sections: [\n" ) ; final List sections = getSections ( ) ; for ( int i = 0 ; i < sectionCount ; i ++ ) b . append ( ( ( Section ) sections . get ( i ) ) . toString ( ) ) ; b . append ( ']' ) ; b . append ( ']' ) ; return b . toString ( ) ; } } 	0
package org . apache . poi . hssf . record ; import org . apache . poi . util . * ; public class PaneRecord extends Record { public final static short sid = 0x41 ; private short field_1_x ; private short field_2_y ; private short field_3_topRow ; private short field_4_leftColumn ; private short field_5_activePane ; public final static short ACTIVE_PANE_LOWER_RIGHT = 0 ; public final static short ACTIVE_PANE_UPPER_RIGHT = 1 ; public final static short ACTIVE_PANE_LOWER_LEFT = 2 ; public final static short ACTIVE_PANE_UPER_LEFT = 3 ; public PaneRecord ( ) { } public PaneRecord ( RecordInputStream in ) { super ( in ) ; } protected void validateSid ( short id ) { if ( id != sid ) { throw new RecordFormatException ( "Not a Pane record" ) ; } } protected void fillFields ( RecordInputStream in ) { field_1_x = in . readShort ( ) ; field_2_y = in . readShort ( ) ; field_3_topRow = in . readShort ( ) ; field_4_leftColumn = in . readShort ( ) ; field_5_activePane = in . readShort ( ) ; } public String toString ( ) { StringBuffer buffer = new StringBuffer ( ) ; buffer . append ( "[PANE]\n" ) ; buffer . append ( "    .x                    = " ) . append ( "0x" ) . append ( HexDump . toHex ( getX ( ) ) ) . append ( " (" ) . append ( getX ( ) ) . append ( " )" ) ; buffer . append ( System . getProperty ( "line.separator" ) ) ; buffer . append ( "    .y                    = " ) . append ( "0x" ) . append ( HexDump . toHex ( getY ( ) ) ) . append ( " (" ) . append ( getY ( ) ) . append ( " )" ) ; buffer . append ( System . getProperty ( "line.separator" ) ) ; buffer . append ( "    .topRow               = " ) . append ( "0x" ) . append ( HexDump . toHex ( getTopRow ( ) ) ) . append ( " (" ) . append ( getTopRow ( ) ) . append ( " )" ) ; buffer . append ( System . getProperty ( "line.separator" ) ) ; buffer . append ( "    .leftColumn           = " ) . append ( "0x" ) . append ( HexDump . toHex ( getLeftColumn ( ) ) ) . append ( " (" ) . append ( getLeftColumn ( ) ) . append ( " )" ) ; buffer . append ( System . getProperty ( "line.separator" ) ) ; buffer . append ( "    .activePane           = " ) . append ( "0x" ) . append ( HexDump . toHex ( getActivePane ( ) ) ) . append ( " (" ) . append ( getActivePane ( ) ) . append ( " )" ) ; buffer . append ( System . getProperty ( "line.separator" ) ) ; buffer . append ( "[/PANE]\n" ) ; return buffer . toString ( ) ; } public int serialize ( int offset , byte [ ] data ) { int pos = 0 ; LittleEndian . putShort ( data , 0 + offset , sid ) ; LittleEndian . putShort ( data , 2 + offset , ( short ) ( getRecordSize ( ) - 4 ) ) ; LittleEndian . putShort ( data , 4 + offset + pos , field_1_x ) ; LittleEndian . putShort ( data , 6 + offset + pos , field_2_y ) ; LittleEndian . putShort ( data , 8 + offset + pos , field_3_topRow ) ; LittleEndian . putShort ( data , 10 + offset + pos , field_4_leftColumn ) ; LittleEndian . putShort ( data , 12 + offset + pos , field_5_activePane ) ; return getRecordSize ( ) ; } public int getRecordSize ( ) { return 4 + 2 + 2 + 2 + 2 + 2 ; } public short getSid ( ) { return sid ; } public Object clone ( ) { PaneRecord rec = new PaneRecord ( ) ; rec . field_1_x = field_1_x ; rec . field_2_y = field_2_y ; rec . field_3_topRow = field_3_topRow ; rec . field_4_leftColumn = field_4_leftColumn ; rec . field_5_activePane = field_5_activePane ; return rec ; } public short getX ( ) { return field_1_x ; } public void setX ( short field_1_x ) { this . field_1_x = field_1_x ; } public short getY ( ) { return field_2_y ; } public void setY ( short field_2_y ) { this . field_2_y = field_2_y ; } public short getTopRow ( ) { return field_3_topRow ; } public void setTopRow ( short field_3_topRow ) { this . field_3_topRow = field_3_topRow ; } public short getLeftColumn ( ) { return field_4_leftColumn ; } public void setLeftColumn ( short field_4_leftColumn ) { this . field_4_leftColumn = field_4_leftColumn ; } public short getActivePane ( ) { return field_5_activePane ; } public void setActivePane ( short field_5_activePane ) { this . field_5_activePane = field_5_activePane ; } } 	1
package org . apache . poi . util ; import java . util . List ; import java . util . ArrayList ; public class List2d { List rows = new ArrayList ( ) ; public Object get ( int col , int row ) { if ( row >= rows . size ( ) ) { return null ; } else { List cols = ( List ) rows . get ( row ) ; if ( col >= cols . size ( ) ) return null ; else return cols . get ( col ) ; } } public void set ( int col , int row , Object value ) { resizeRows ( row ) ; resizeCols ( row , col ) ; List cols = ( List ) rows . get ( row ) ; cols . set ( col , value ) ; } private void resizeRows ( int row ) { while ( rows . size ( ) <= row ) rows . add ( new ArrayList ( ) ) ; } private void resizeCols ( int row , int col ) { List cols = ( List ) rows . get ( row ) ; while ( cols . size ( ) <= col ) cols . add ( null ) ; } } 	0
package org . apache . poi . hssf . usermodel ; public class HSSFTextbox extends HSSFSimpleShape { public final static short OBJECT_TYPE_TEXT = 6 ; int marginLeft , marginRight , marginTop , marginBottom ; HSSFRichTextString string = new HSSFRichTextString ( "" ) ; public HSSFTextbox ( HSSFShape parent , HSSFAnchor anchor ) { super ( parent , anchor ) ; setShapeType ( OBJECT_TYPE_TEXT ) ; } public HSSFRichTextString getString ( ) { return string ; } public void setString ( HSSFRichTextString string ) { this . string = string ; } public int getMarginLeft ( ) { return marginLeft ; } public void setMarginLeft ( int marginLeft ) { this . marginLeft = marginLeft ; } public int getMarginRight ( ) { return marginRight ; } public void setMarginRight ( int marginRight ) { this . marginRight = marginRight ; } public int getMarginTop ( ) { return marginTop ; } public void setMarginTop ( int marginTop ) { this . marginTop = marginTop ; } public int getMarginBottom ( ) { return marginBottom ; } public void setMarginBottom ( int marginBottom ) { this . marginBottom = marginBottom ; } } 	1
package org . apache . poi . hssf . model ; import org . apache . poi . hssf . record . * ; import org . apache . poi . hssf . record . aggregates . ColumnInfoRecordsAggregate ; import org . apache . poi . hssf . record . aggregates . FormulaRecordAggregate ; import org . apache . poi . hssf . record . aggregates . RowRecordsAggregate ; import org . apache . poi . hssf . record . aggregates . ValueRecordsAggregate ; import org . apache . poi . hssf . record . formula . Ptg ; import org . apache . poi . hssf . util . PaneInformation ; import org . apache . poi . util . POILogFactory ; import org . apache . poi . util . POILogger ; import java . util . ArrayList ; import java . util . Iterator ; import java . util . List ; public class Sheet implements Model { public static final short LeftMargin = 0 ; public static final short RightMargin = 1 ; public static final short TopMargin = 2 ; public static final short BottomMargin = 3 ; private static POILogger log = POILogFactory . getLogger ( Sheet . class ) ; protected ArrayList records = null ; int preoffset = 0 ; int loc = 0 ; protected int dimsloc = 0 ; protected DimensionsRecord dims ; protected DefaultColWidthRecord defaultcolwidth = null ; protected DefaultRowHeightRecord defaultrowheight = null ; protected GridsetRecord gridset = null ; protected PrintSetupRecord printSetup = null ; protected HeaderRecord header = null ; protected FooterRecord footer = null ; protected PrintGridlinesRecord printGridlines = null ; protected WindowTwoRecord windowTwo = null ; protected MergeCellsRecord merged = null ; protected Margin [ ] margins = null ; protected List mergedRecords = new ArrayList ( ) ; protected int numMergedRegions = 0 ; protected SelectionRecord selection = null ; protected ColumnInfoRecordsAggregate columns = null ; protected ValueRecordsAggregate cells = null ; protected RowRecordsAggregate rows = null ; private Iterator valueRecIterator = null ; private Iterator rowRecIterator = null ; protected int eofLoc = 0 ; protected ProtectRecord protect = null ; protected PageBreakRecord rowBreaks = null ; protected PageBreakRecord colBreaks = null ; public static final byte PANE_LOWER_RIGHT = ( byte ) 0 ; public static final byte PANE_UPPER_RIGHT = ( byte ) 1 ; public static final byte PANE_LOWER_LEFT = ( byte ) 2 ; public static final byte PANE_UPPER_LEFT = ( byte ) 3 ; public Sheet ( ) { } public static Sheet createSheet ( List recs , int sheetnum , int offset ) { if ( log . check ( POILogger . DEBUG ) ) log . logFormatted ( POILogger . DEBUG , "Sheet createSheet (existing file) with %" , new Integer ( recs . size ( ) ) ) ; Sheet retval = new Sheet ( ) ; ArrayList records = new ArrayList ( recs . size ( ) / 5 ) ; boolean isfirstcell = true ; boolean isfirstrow = true ; int bofEofNestingLevel = 0 ; for ( int k = offset ; k < recs . size ( ) ; k ++ ) { Record rec = ( Record ) recs . get ( k ) ; if ( rec . getSid ( ) == BOFRecord . sid ) { bofEofNestingLevel ++ ; if ( log . check ( POILogger . DEBUG ) ) log . log ( POILogger . DEBUG , "Hit BOF record. Nesting increased to " + bofEofNestingLevel ) ; } else if ( rec . getSid ( ) == EOFRecord . sid ) { -- bofEofNestingLevel ; if ( log . check ( POILogger . DEBUG ) ) log . log ( POILogger . DEBUG , "Hit EOF record. Nesting decreased to " + bofEofNestingLevel ) ; if ( bofEofNestingLevel == 0 ) { records . add ( rec ) ; retval . eofLoc = k ; break ; } } else if ( rec . getSid ( ) == DimensionsRecord . sid ) { if ( retval . columns == null ) { retval . columns = new ColumnInfoRecordsAggregate ( ) ; records . add ( retval . columns ) ; } retval . dims = ( DimensionsRecord ) rec ; retval . dimsloc = records . size ( ) ; } else if ( rec . getSid ( ) == MergeCellsRecord . sid ) { retval . mergedRecords . add ( rec ) ; retval . merged = ( MergeCellsRecord ) rec ; retval . numMergedRegions += retval . merged . getNumAreas ( ) ; } else if ( rec . getSid ( ) == ColumnInfoRecord . sid ) { ColumnInfoRecord col = ( ColumnInfoRecord ) rec ; if ( retval . columns != null ) { rec = null ; } else { rec = retval . columns = new ColumnInfoRecordsAggregate ( ) ; } retval . columns . insertColumn ( col ) ; } else if ( rec . getSid ( ) == DefaultColWidthRecord . sid ) { retval . defaultcolwidth = ( DefaultColWidthRecord ) rec ; } else if ( rec . getSid ( ) == DefaultRowHeightRecord . sid ) { retval . defaultrowheight = ( DefaultRowHeightRecord ) rec ; } else if ( rec . isValue ( ) && bofEofNestingLevel == 1 ) { if ( isfirstcell ) { retval . cells = new ValueRecordsAggregate ( ) ; rec = retval . cells ; retval . cells . construct ( k , recs ) ; isfirstcell = false ; } else { rec = null ; } } else if ( rec . getSid ( ) == StringRecord . sid ) { rec = null ; } else if ( rec . getSid ( ) == RowRecord . sid ) { RowRecord row = ( RowRecord ) rec ; if ( ! isfirstrow ) rec = null ; if ( isfirstrow ) { retval . rows = new RowRecordsAggregate ( ) ; rec = retval . rows ; isfirstrow = false ; } retval . rows . insertRow ( row ) ; } else if ( rec . getSid ( ) == PrintGridlinesRecord . sid ) { retval . printGridlines = ( PrintGridlinesRecord ) rec ; } else if ( rec . getSid ( ) == GridsetRecord . sid ) { retval . gridset = ( GridsetRecord ) rec ; } else if ( rec . getSid ( ) == HeaderRecord . sid && bofEofNestingLevel == 1 ) { retval . header = ( HeaderRecord ) rec ; } else if ( rec . getSid ( ) == FooterRecord . sid && bofEofNestingLevel == 1 ) { retval . footer = ( FooterRecord ) rec ; } else if ( rec . getSid ( ) == PrintSetupRecord . sid && bofEofNestingLevel == 1 ) { retval . printSetup = ( PrintSetupRecord ) rec ; } else if ( rec . getSid ( ) == LeftMarginRecord . sid ) { retval . getMargins ( ) [ LeftMargin ] = ( LeftMarginRecord ) rec ; } else if ( rec . getSid ( ) == RightMarginRecord . sid ) { retval . getMargins ( ) [ RightMargin ] = ( RightMarginRecord ) rec ; } else if ( rec . getSid ( ) == TopMarginRecord . sid ) { retval . getMargins ( ) [ TopMargin ] = ( TopMarginRecord ) rec ; } else if ( rec . getSid ( ) == BottomMarginRecord . sid ) { retval . getMargins ( ) [ BottomMargin ] = ( BottomMarginRecord ) rec ; } else if ( rec . getSid ( ) == SelectionRecord . sid ) { retval . selection = ( SelectionRecord ) rec ; } else if ( rec . getSid ( ) == WindowTwoRecord . sid ) { retval . windowTwo = ( WindowTwoRecord ) rec ; } else if ( rec . getSid ( ) == DBCellRecord . sid ) { rec = null ; } else if ( rec . getSid ( ) == IndexRecord . sid ) { rec = null ; } else if ( rec . getSid ( ) == ProtectRecord . sid ) { retval . protect = ( ProtectRecord ) rec ; } else if ( rec . getSid ( ) == PageBreakRecord . HORIZONTAL_SID ) { retval . rowBreaks = ( PageBreakRecord ) rec ; } else if ( rec . getSid ( ) == PageBreakRecord . VERTICAL_SID ) { retval . colBreaks = ( PageBreakRecord ) rec ; } if ( rec != null ) { records . add ( rec ) ; } } retval . records = records ; retval . checkCells ( ) ; retval . checkRows ( ) ; if ( log . check ( POILogger . DEBUG ) ) log . log ( POILogger . DEBUG , "sheet createSheet (existing file) exited" ) ; return retval ; } public Sheet cloneSheet ( ) { ArrayList clonedRecords = new ArrayList ( this . records . size ( ) ) ; for ( int i = 0 ; i < this . records . size ( ) ; i ++ ) { Record rec = ( Record ) ( ( Record ) this . records . get ( i ) ) . clone ( ) ; if ( rec instanceof RowRecordsAggregate ) { RowRecordsAggregate rrAgg = ( RowRecordsAggregate ) rec ; for ( Iterator rowIter = rrAgg . getIterator ( ) ; rowIter . hasNext ( ) ; ) { Record rowRec = ( Record ) rowIter . next ( ) ; clonedRecords . add ( rowRec ) ; } } else if ( rec instanceof ValueRecordsAggregate ) { ValueRecordsAggregate vrAgg = ( ValueRecordsAggregate ) rec ; for ( Iterator cellIter = vrAgg . getIterator ( ) ; cellIter . hasNext ( ) ; ) { Record valRec = ( Record ) cellIter . next ( ) ; if ( valRec instanceof FormulaRecordAggregate ) { FormulaRecordAggregate fmAgg = ( FormulaRecordAggregate ) valRec ; Record fmAggRec = fmAgg . getFormulaRecord ( ) ; if ( fmAggRec != null ) clonedRecords . add ( fmAggRec ) ; fmAggRec = fmAgg . getStringRecord ( ) ; if ( fmAggRec != null ) clonedRecords . add ( fmAggRec ) ; } else { clonedRecords . add ( valRec ) ; } } } else if ( rec instanceof FormulaRecordAggregate ) { FormulaRecordAggregate fmAgg = ( FormulaRecordAggregate ) rec ; Record fmAggRec = fmAgg . getFormulaRecord ( ) ; if ( fmAggRec != null ) clonedRecords . add ( fmAggRec ) ; fmAggRec = fmAgg . getStringRecord ( ) ; if ( fmAggRec != null ) clonedRecords . add ( fmAggRec ) ; } else { clonedRecords . add ( rec ) ; } } return createSheet ( clonedRecords , 0 , 0 ) ; } public static Sheet createSheet ( List records , int sheetnum ) { if ( log . check ( POILogger . DEBUG ) ) log . log ( POILogger . DEBUG , "Sheet createSheet (exisiting file) assumed offset 0" ) ; return createSheet ( records , sheetnum , 0 ) ; } public static Sheet createSheet ( ) { if ( log . check ( POILogger . DEBUG ) ) log . log ( POILogger . DEBUG , "Sheet createsheet from scratch called" ) ; Sheet retval = new Sheet ( ) ; ArrayList records = new ArrayList ( 30 ) ; records . add ( retval . createBOF ( ) ) ; records . add ( retval . createCalcMode ( ) ) ; records . add ( retval . createCalcCount ( ) ) ; records . add ( retval . createRefMode ( ) ) ; records . add ( retval . createIteration ( ) ) ; records . add ( retval . createDelta ( ) ) ; records . add ( retval . createSaveRecalc ( ) ) ; records . add ( retval . createPrintHeaders ( ) ) ; retval . printGridlines = ( PrintGridlinesRecord ) retval . createPrintGridlines ( ) ; records . add ( retval . printGridlines ) ; retval . gridset = ( GridsetRecord ) retval . createGridset ( ) ; records . add ( retval . gridset ) ; records . add ( retval . createGuts ( ) ) ; retval . defaultrowheight = ( DefaultRowHeightRecord ) retval . createDefaultRowHeight ( ) ; records . add ( retval . defaultrowheight ) ; records . add ( retval . createWSBool ( ) ) ; retval . rowBreaks = new PageBreakRecord ( PageBreakRecord . HORIZONTAL_SID ) ; records . add ( retval . rowBreaks ) ; retval . colBreaks = new PageBreakRecord ( PageBreakRecord . VERTICAL_SID ) ; records . add ( retval . colBreaks ) ; retval . header = ( HeaderRecord ) retval . createHeader ( ) ; records . add ( retval . header ) ; retval . footer = ( FooterRecord ) retval . createFooter ( ) ; records . add ( retval . footer ) ; records . add ( retval . createHCenter ( ) ) ; records . add ( retval . createVCenter ( ) ) ; retval . printSetup = ( PrintSetupRecord ) retval . createPrintSetup ( ) ; records . add ( retval . printSetup ) ; retval . defaultcolwidth = ( DefaultColWidthRecord ) retval . createDefaultColWidth ( ) ; records . add ( retval . defaultcolwidth ) ; ColumnInfoRecordsAggregate columns = new ColumnInfoRecordsAggregate ( ) ; records . add ( columns ) ; retval . columns = columns ; retval . dims = ( DimensionsRecord ) retval . createDimensions ( ) ; records . add ( retval . dims ) ; retval . dimsloc = records . size ( ) - 1 ; records . add ( retval . windowTwo = retval . createWindowTwo ( ) ) ; retval . setLoc ( records . size ( ) - 1 ) ; retval . selection = ( SelectionRecord ) retval . createSelection ( ) ; records . add ( retval . selection ) ; retval . protect = ( ProtectRecord ) retval . createProtect ( ) ; records . add ( retval . protect ) ; records . add ( retval . createEOF ( ) ) ; retval . records = records ; if ( log . check ( POILogger . DEBUG ) ) log . log ( POILogger . DEBUG , "Sheet createsheet from scratch exit" ) ; return retval ; } private void checkCells ( ) { if ( cells == null ) { cells = new ValueRecordsAggregate ( ) ; records . add ( getDimsLoc ( ) + 1 , cells ) ; } } private void checkRows ( ) { if ( rows == null ) { rows = new RowRecordsAggregate ( ) ; records . add ( getDimsLoc ( ) + 1 , rows ) ; } } public int addMergedRegion ( int rowFrom , short colFrom , int rowTo , short colTo ) { if ( merged == null || merged . getNumAreas ( ) == 1027 ) { merged = ( MergeCellsRecord ) createMergedCells ( ) ; mergedRecords . add ( merged ) ; records . add ( records . size ( ) - 1 , merged ) ; } merged . addArea ( rowFrom , colFrom , rowTo , colTo ) ; return numMergedRegions ++ ; } public void removeMergedRegion ( int index ) { if ( index >= numMergedRegions || mergedRecords . size ( ) == 0 ) return ; int pos = 0 ; int startNumRegions = 0 ; if ( numMergedRegions - index < merged . getNumAreas ( ) ) { pos = mergedRecords . size ( ) - 1 ; startNumRegions = numMergedRegions - merged . getNumAreas ( ) ; } else { for ( int n = 0 ; n < mergedRecords . size ( ) ; n ++ ) { MergeCellsRecord record = ( MergeCellsRecord ) mergedRecords . get ( n ) ; if ( startNumRegions + record . getNumAreas ( ) > index ) { pos = n ; break ; } startNumRegions += record . getNumAreas ( ) ; } } MergeCellsRecord rec = ( MergeCellsRecord ) mergedRecords . get ( pos ) ; rec . removeAreaAt ( index - startNumRegions ) ; numMergedRegions -- ; if ( rec . getNumAreas ( ) == 0 ) { mergedRecords . remove ( pos ) ; records . remove ( merged ) ; if ( merged == rec ) { if ( mergedRecords . size ( ) > 0 ) { merged = ( MergeCellsRecord ) mergedRecords . get ( mergedRecords . size ( ) - 1 ) ; } else { merged = null ; } } } } public MergeCellsRecord . MergedRegion getMergedRegionAt ( int index ) { if ( index >= numMergedRegions || mergedRecords . size ( ) == 0 ) return null ; int pos = 0 ; int startNumRegions = 0 ; if ( numMergedRegions - index < merged . getNumAreas ( ) ) { pos = mergedRecords . size ( ) - 1 ; startNumRegions = numMergedRegions - merged . getNumAreas ( ) ; } else { for ( int n = 0 ; n < mergedRecords . size ( ) ; n ++ ) { MergeCellsRecord record = ( MergeCellsRecord ) mergedRecords . get ( n ) ; if ( startNumRegions + record . getNumAreas ( ) > index ) { pos = n ; break ; } startNumRegions += record . getNumAreas ( ) ; } } return ( ( MergeCellsRecord ) mergedRecords . get ( pos ) ) . getAreaAt ( index - startNumRegions ) ; } public int getNumMergedRegions ( ) { return numMergedRegions ; } public int getNumRecords ( ) { checkCells ( ) ; checkRows ( ) ; if ( log . check ( POILogger . DEBUG ) ) { log . log ( POILogger . DEBUG , "Sheet.getNumRecords" ) ; log . logFormatted ( POILogger . DEBUG , "returning % + % + % - 2 = %" , new int [ ] { records . size ( ) , cells . getPhysicalNumberOfCells ( ) , rows . getPhysicalNumberOfRows ( ) , records . size ( ) + cells . getPhysicalNumberOfCells ( ) + rows . getPhysicalNumberOfRows ( ) - 2 } ) ; } return records . size ( ) + cells . getPhysicalNumberOfCells ( ) + rows . getPhysicalNumberOfRows ( ) - 2 ; } public void setDimensions ( int firstrow , short firstcol , int lastrow , short lastcol ) { if ( log . check ( POILogger . DEBUG ) ) { log . log ( POILogger . DEBUG , "Sheet.setDimensions" ) ; log . log ( POILogger . DEBUG , ( new StringBuffer ( "firstrow" ) ) . append ( firstrow ) . append ( "firstcol" ) . append ( firstcol ) . append ( "lastrow" ) . append ( lastrow ) . append ( "lastcol" ) . append ( lastcol ) . toString ( ) ) ; } dims . setFirstCol ( firstcol ) ; dims . setFirstRow ( firstrow ) ; dims . setLastCol ( lastcol ) ; dims . setLastRow ( lastrow ) ; if ( log . check ( POILogger . DEBUG ) ) log . log ( POILogger . DEBUG , "Sheet.setDimensions exiting" ) ; } public void setLoc ( int loc ) { valueRecIterator = null ; if ( log . check ( POILogger . DEBUG ) ) log . log ( POILogger . DEBUG , "sheet.setLoc(): " + loc ) ; this . loc = loc ; } public int getLoc ( ) { if ( log . check ( POILogger . DEBUG ) ) log . log ( POILogger . DEBUG , "sheet.getLoc():" + loc ) ; return loc ; } public void setPreOffset ( int offset ) { this . preoffset = offset ; } public int getPreOffset ( ) { return preoffset ; } public int serialize ( int offset , byte [ ] data ) { if ( log . check ( POILogger . DEBUG ) ) log . log ( POILogger . DEBUG , "Sheet.serialize using offsets" ) ; int pos = offset ; boolean haveSerializedIndex = false ; for ( int k = 0 ; k < records . size ( ) ; k ++ ) { Record record = ( ( Record ) records . get ( k ) ) ; if ( record instanceof RowRecordsAggregate ) { pos += ( ( RowRecordsAggregate ) record ) . serialize ( pos , data , cells ) ; } else if ( record instanceof ValueRecordsAggregate ) { } else { pos += record . serialize ( pos , data ) ; } if ( record . getSid ( ) == BOFRecord . sid ) { if ( rows != null && ! haveSerializedIndex ) { haveSerializedIndex = true ; pos += serializeIndexRecord ( k , pos , data ) ; } } } if ( log . check ( POILogger . DEBUG ) ) log . log ( POILogger . DEBUG , "Sheet.serialize returning " ) ; return pos - offset ; } private int serializeIndexRecord ( final int BOFRecordIndex , final int offset , byte [ ] data ) { IndexRecord index = new IndexRecord ( ) ; index . setFirstRow ( rows . getFirstRowNum ( ) ) ; index . setLastRowAdd1 ( rows . getLastRowNum ( ) + 1 ) ; int sheetRecSize = 0 ; for ( int j = BOFRecordIndex + 1 ; j < records . size ( ) ; j ++ ) { Record tmpRec = ( ( Record ) records . get ( j ) ) ; if ( tmpRec instanceof RowRecordsAggregate ) break ; sheetRecSize += tmpRec . getRecordSize ( ) ; } int blockCount = rows . getRowBlockCount ( ) ; int indexRecSize = IndexRecord . getRecordSizeForBlockCount ( blockCount ) ; int rowBlockOffset = 0 ; int cellBlockOffset = 0 ; int dbCellOffset = 0 ; for ( int block = 0 ; block < blockCount ; block ++ ) { rowBlockOffset += rows . getRowBlockSize ( block ) ; cellBlockOffset += null == cells ? 0 : cells . getRowCellBlockSize ( rows . getStartRowNumberForBlock ( block ) , rows . getEndRowNumberForBlock ( block ) ) ; index . addDbcell ( offset + indexRecSize + sheetRecSize + dbCellOffset + rowBlockOffset + cellBlockOffset ) ; dbCellOffset += ( 8 + ( rows . getRowCountForBlock ( block ) * 2 ) ) ; } return index . serialize ( offset , data ) ; } public RowRecord createRow ( int row ) { return RowRecordsAggregate . createRow ( row ) ; } public LabelSSTRecord createLabelSST ( int row , short col , int index ) { log . logFormatted ( POILogger . DEBUG , "create labelsst row,col,index %,%,%" , new int [ ] { row , col , index } ) ; LabelSSTRecord rec = new LabelSSTRecord ( ) ; rec . setRow ( row ) ; rec . setColumn ( col ) ; rec . setSSTIndex ( index ) ; rec . setXFIndex ( ( short ) 0x0f ) ; return rec ; } public NumberRecord createNumber ( int row , short col , double value ) { log . logFormatted ( POILogger . DEBUG , "create number row,col,value %,%,%" , new double [ ] { row , col , value } ) ; NumberRecord rec = new NumberRecord ( ) ; rec . setRow ( row ) ; rec . setColumn ( col ) ; rec . setValue ( value ) ; rec . setXFIndex ( ( short ) 0x0f ) ; return rec ; } public BlankRecord createBlank ( int row , short col ) { log . logFormatted ( POILogger . DEBUG , "create blank row,col %,%" , new int [ ] { row , col } ) ; BlankRecord rec = new BlankRecord ( ) ; rec . setRow ( row ) ; rec . setColumn ( col ) ; rec . setXFIndex ( ( short ) 0x0f ) ; return rec ; } public FormulaRecord createFormula ( int row , short col , String formula ) { log . logFormatted ( POILogger . DEBUG , "create formula row,col,formula %,%,%" , new int [ ] { row , col } , formula ) ; FormulaRecord rec = new FormulaRecord ( ) ; rec . setRow ( row ) ; rec . setColumn ( col ) ; rec . setOptions ( ( short ) 2 ) ; rec . setValue ( 0 ) ; rec . setXFIndex ( ( short ) 0x0f ) ; FormulaParser fp = new FormulaParser ( formula , null ) ; fp . parse ( ) ; Ptg [ ] ptg = fp . getRPNPtg ( ) ; int size = 0 ; for ( int k = 0 ; k < ptg . length ; k ++ ) { size += ptg [ k ] . getSize ( ) ; rec . pushExpressionToken ( ptg [ k ] ) ; } rec . setExpressionLength ( ( short ) size ) ; return rec ; } public void addValueRecord ( int row , CellValueRecordInterface col ) { checkCells ( ) ; if ( log . check ( POILogger . DEBUG ) ) { log . logFormatted ( POILogger . DEBUG , "add value record  row,loc %,%" , new int [ ] { row , loc } ) ; } DimensionsRecord d = ( DimensionsRecord ) records . get ( getDimsLoc ( ) ) ; if ( col . getColumn ( ) > d . getLastCol ( ) ) { d . setLastCol ( ( short ) ( col . getColumn ( ) + 1 ) ) ; } if ( col . getColumn ( ) < d . getFirstCol ( ) ) { d . setFirstCol ( col . getColumn ( ) ) ; } cells . insertCell ( col ) ; } public void removeValueRecord ( int row , CellValueRecordInterface col ) { checkCells ( ) ; log . logFormatted ( POILogger . DEBUG , "remove value record row,dimsloc %,%" , new int [ ] { row , dimsloc } ) ; loc = dimsloc ; cells . removeCell ( col ) ; } public void replaceValueRecord ( CellValueRecordInterface newval ) { checkCells ( ) ; setLoc ( dimsloc ) ; if ( log . check ( POILogger . DEBUG ) ) log . log ( POILogger . DEBUG , "replaceValueRecord " ) ; cells . removeCell ( newval ) ; cells . insertCell ( newval ) ; } public void addRow ( RowRecord row ) { checkRows ( ) ; if ( log . check ( POILogger . DEBUG ) ) log . log ( POILogger . DEBUG , "addRow " ) ; DimensionsRecord d = ( DimensionsRecord ) records . get ( getDimsLoc ( ) ) ; if ( row . getRowNumber ( ) >= d . getLastRow ( ) ) { d . setLastRow ( row . getRowNumber ( ) + 1 ) ; } if ( row . getRowNumber ( ) < d . getFirstRow ( ) ) { d . setFirstRow ( row . getRowNumber ( ) ) ; } RowRecord existingRow = rows . getRow ( row . getRowNumber ( ) ) ; if ( existingRow != null ) rows . removeRow ( existingRow ) ; rows . insertRow ( row ) ; if ( log . check ( POILogger . DEBUG ) ) log . log ( POILogger . DEBUG , "exit addRow" ) ; } public void removeRow ( RowRecord row ) { checkRows ( ) ; setLoc ( getDimsLoc ( ) ) ; rows . removeRow ( row ) ; } public CellValueRecordInterface getNextValueRecord ( ) { if ( log . check ( POILogger . DEBUG ) ) log . log ( POILogger . DEBUG , "getNextValue loc= " + loc ) ; if ( valueRecIterator == null ) { valueRecIterator = cells . getIterator ( ) ; } if ( ! valueRecIterator . hasNext ( ) ) { return null ; } return ( CellValueRecordInterface ) valueRecIterator . next ( ) ; } public RowRecord getNextRow ( ) { if ( log . check ( POILogger . DEBUG ) ) log . log ( POILogger . DEBUG , "getNextRow loc= " + loc ) ; if ( rowRecIterator == null ) { rowRecIterator = rows . getIterator ( ) ; } if ( ! rowRecIterator . hasNext ( ) ) { return null ; } return ( RowRecord ) rowRecIterator . next ( ) ; } public RowRecord getRow ( int rownum ) { if ( log . check ( POILogger . DEBUG ) ) log . log ( POILogger . DEBUG , "getNextRow loc= " + loc ) ; return rows . getRow ( rownum ) ; } protected Record createBOF ( ) { BOFRecord retval = new BOFRecord ( ) ; retval . setVersion ( ( short ) 0x600 ) ; retval . setType ( ( short ) 0x010 ) ; retval . setBuild ( ( short ) 0x0dbb ) ; retval . setBuildYear ( ( short ) 1996 ) ; retval . setHistoryBitMask ( 0xc1 ) ; retval . setRequiredVersion ( 0x6 ) ; return retval ; } protected Record createIndex ( ) { IndexRecord retval = new IndexRecord ( ) ; retval . setFirstRow ( 0 ) ; retval . setLastRowAdd1 ( 0 ) ; return retval ; } protected Record createCalcMode ( ) { CalcModeRecord retval = new CalcModeRecord ( ) ; retval . setCalcMode ( ( short ) 1 ) ; return retval ; } protected Record createCalcCount ( ) { CalcCountRecord retval = new CalcCountRecord ( ) ; retval . setIterations ( ( short ) 0x64 ) ; return retval ; } protected Record createRefMode ( ) { RefModeRecord retval = new RefModeRecord ( ) ; retval . setMode ( RefModeRecord . USE_A1_MODE ) ; return retval ; } protected Record createIteration ( ) { IterationRecord retval = new IterationRecord ( ) ; retval . setIteration ( false ) ; return retval ; } protected Record createDelta ( ) { DeltaRecord retval = new DeltaRecord ( ) ; retval . setMaxChange ( 0.0010 ) ; return retval ; } protected Record createSaveRecalc ( ) { SaveRecalcRecord retval = new SaveRecalcRecord ( ) ; retval . setRecalc ( true ) ; return retval ; } protected Record createPrintHeaders ( ) { PrintHeadersRecord retval = new PrintHeadersRecord ( ) ; retval . setPrintHeaders ( false ) ; return retval ; } protected Record createPrintGridlines ( ) { PrintGridlinesRecord retval = new PrintGridlinesRecord ( ) ; retval . setPrintGridlines ( false ) ; return retval ; } protected Record createGridset ( ) { GridsetRecord retval = new GridsetRecord ( ) ; retval . setGridset ( true ) ; return retval ; } protected Record createGuts ( ) { GutsRecord retval = new GutsRecord ( ) ; retval . setLeftRowGutter ( ( short ) 0 ) ; retval . setTopColGutter ( ( short ) 0 ) ; retval . setRowLevelMax ( ( short ) 0 ) ; retval . setColLevelMax ( ( short ) 0 ) ; return retval ; } protected Record createDefaultRowHeight ( ) { DefaultRowHeightRecord retval = new DefaultRowHeightRecord ( ) ; retval . setOptionFlags ( ( short ) 0 ) ; retval . setRowHeight ( ( short ) 0xff ) ; return retval ; } protected Record createWSBool ( ) { WSBoolRecord retval = new WSBoolRecord ( ) ; retval . setWSBool1 ( ( byte ) 0x4 ) ; retval . setWSBool2 ( ( byte ) 0xffffffc1 ) ; return retval ; } protected Record createHeader ( ) { HeaderRecord retval = new HeaderRecord ( ) ; retval . setHeaderLength ( ( byte ) 0 ) ; retval . setHeader ( null ) ; return retval ; } protected Record createFooter ( ) { FooterRecord retval = new FooterRecord ( ) ; retval . setFooterLength ( ( byte ) 0 ) ; retval . setFooter ( null ) ; return retval ; } protected Record createHCenter ( ) { HCenterRecord retval = new HCenterRecord ( ) ; retval . setHCenter ( false ) ; return retval ; } protected Record createVCenter ( ) { VCenterRecord retval = new VCenterRecord ( ) ; retval . setVCenter ( false ) ; return retval ; } protected Record createPrintSetup ( ) { PrintSetupRecord retval = new PrintSetupRecord ( ) ; retval . setPaperSize ( ( short ) 1 ) ; retval . setScale ( ( short ) 100 ) ; retval . setPageStart ( ( short ) 1 ) ; retval . setFitWidth ( ( short ) 1 ) ; retval . setFitHeight ( ( short ) 1 ) ; retval . setOptions ( ( short ) 2 ) ; retval . setHResolution ( ( short ) 300 ) ; retval . setVResolution ( ( short ) 300 ) ; retval . setHeaderMargin ( 0.5 ) ; retval . setFooterMargin ( 0.5 ) ; retval . setCopies ( ( short ) 0 ) ; return retval ; } protected Record createDefaultColWidth ( ) { DefaultColWidthRecord retval = new DefaultColWidthRecord ( ) ; retval . setColWidth ( ( short ) 8 ) ; return retval ; } protected Record createColInfo ( ) { return ColumnInfoRecordsAggregate . createColInfo ( ) ; } public short getDefaultColumnWidth ( ) { return defaultcolwidth . getColWidth ( ) ; } public boolean isGridsPrinted ( ) { if ( gridset == null ) { gridset = ( GridsetRecord ) createGridset ( ) ; int loc = findFirstRecordLocBySid ( EOFRecord . sid ) ; records . add ( loc , gridset ) ; } return ! gridset . getGridset ( ) ; } public void setGridsPrinted ( boolean value ) { gridset . setGridset ( ! value ) ; } public void setDefaultColumnWidth ( short dcw ) { defaultcolwidth . setColWidth ( dcw ) ; } public void setDefaultRowHeight ( short dch ) { defaultrowheight . setRowHeight ( dch ) ; } public short getDefaultRowHeight ( ) { return defaultrowheight . getRowHeight ( ) ; } public short getColumnWidth ( short column ) { short retval = 0 ; ColumnInfoRecord ci = null ; if ( columns != null ) { int count = columns . getNumColumns ( ) ; for ( int k = 0 ; k < count ; k ++ ) { ci = columns . getColInfo ( k ) ; if ( ( ci . getFirstColumn ( ) <= column ) && ( column <= ci . getLastColumn ( ) ) ) { break ; } ci = null ; } } if ( ci != null ) { retval = ci . getColumnWidth ( ) ; } else { retval = defaultcolwidth . getColWidth ( ) ; } return retval ; } public short getXFIndexForColAt ( short column ) { short retval = 0 ; ColumnInfoRecord ci = null ; if ( columns != null ) { int count = columns . getNumColumns ( ) ; for ( int k = 0 ; k < count ; k ++ ) { ci = columns . getColInfo ( k ) ; if ( ( ci . getFirstColumn ( ) <= column ) && ( column <= ci . getLastColumn ( ) ) ) { break ; } ci = null ; } } retval = ( ci != null ) ? ci . getXFIndex ( ) : 0xF ; return retval ; } public void setColumnWidth ( short column , short width ) { setColumn ( column , new Short ( width ) , null , null , null ) ; } public boolean isColumnHidden ( short column ) { boolean retval = false ; ColumnInfoRecord ci = null ; if ( columns != null ) { for ( Iterator iterator = columns . getIterator ( ) ; iterator . hasNext ( ) ; ) { ci = ( ColumnInfoRecord ) iterator . next ( ) ; if ( ( ci . getFirstColumn ( ) <= column ) && ( column <= ci . getLastColumn ( ) ) ) { break ; } ci = null ; } } if ( ci != null ) { retval = ci . getHidden ( ) ; } return retval ; } public void setColumnHidden ( short column , boolean hidden ) { setColumn ( column , null , null , new Boolean ( hidden ) , null ) ; } public void setColumn ( short column , Short width , Integer level , Boolean hidden , Boolean collapsed ) { if ( columns == null ) columns = new ColumnInfoRecordsAggregate ( ) ; columns . setColumn ( column , null , width , level , hidden , collapsed ) ; } public void setColumn ( short column , Short xfStyle , Short width , Integer level , Boolean hidden , Boolean collapsed ) { if ( columns == null ) columns = new ColumnInfoRecordsAggregate ( ) ; columns . setColumn ( column , xfStyle , width , level , hidden , collapsed ) ; } public void groupColumnRange ( short fromColumn , short toColumn , boolean indent ) { columns . groupColumnRange ( fromColumn , toColumn , indent ) ; int maxLevel = 0 ; int count = columns . getNumColumns ( ) ; for ( int k = 0 ; k < count ; k ++ ) { ColumnInfoRecord columnInfoRecord = columns . getColInfo ( k ) ; maxLevel = Math . max ( columnInfoRecord . getOutlineLevel ( ) , maxLevel ) ; } GutsRecord guts = ( GutsRecord ) findFirstRecordBySid ( GutsRecord . sid ) ; guts . setColLevelMax ( ( short ) ( maxLevel + 1 ) ) ; if ( maxLevel == 0 ) guts . setTopColGutter ( ( short ) 0 ) ; else guts . setTopColGutter ( ( short ) ( 29 + ( 12 * ( maxLevel - 1 ) ) ) ) ; } protected Record createDimensions ( ) { DimensionsRecord retval = new DimensionsRecord ( ) ; retval . setFirstCol ( ( short ) 0 ) ; retval . setLastRow ( 1 ) ; retval . setFirstRow ( 0 ) ; retval . setLastCol ( ( short ) 1 ) ; return retval ; } protected WindowTwoRecord createWindowTwo ( ) { WindowTwoRecord retval = new WindowTwoRecord ( ) ; retval . setOptions ( ( short ) 0x6b6 ) ; retval . setTopRow ( ( short ) 0 ) ; retval . setLeftCol ( ( short ) 0 ) ; retval . setHeaderColor ( 0x40 ) ; retval . setPageBreakZoom ( ( short ) 0 ) ; retval . setNormalZoom ( ( short ) 0 ) ; return retval ; } protected Record createSelection ( ) { SelectionRecord retval = new SelectionRecord ( ) ; retval . setPane ( ( byte ) 0x3 ) ; retval . setActiveCellCol ( ( short ) 0x0 ) ; retval . setActiveCellRow ( ( short ) 0x0 ) ; retval . setNumRefs ( ( short ) 0x0 ) ; return retval ; } public short getTopRow ( ) { return ( windowTwo == null ) ? ( short ) 0 : windowTwo . getTopRow ( ) ; } public void setTopRow ( short topRow ) { if ( windowTwo != null ) { windowTwo . setTopRow ( topRow ) ; } } public void setLeftCol ( short leftCol ) { if ( windowTwo != null ) { windowTwo . setLeftCol ( leftCol ) ; } } public short getLeftCol ( ) { return ( windowTwo == null ) ? ( short ) 0 : windowTwo . getLeftCol ( ) ; } public int getActiveCellRow ( ) { if ( selection == null ) { return 0 ; } return selection . getActiveCellRow ( ) ; } public void setActiveCellRow ( int row ) { if ( selection != null ) { selection . setActiveCellRow ( row ) ; } } public short getActiveCellCol ( ) { if ( selection == null ) { return ( short ) 0 ; } return selection . getActiveCellCol ( ) ; } public void setActiveCellCol ( short col ) { if ( selection != null ) { selection . setActiveCellCol ( col ) ; } } protected Record createMergedCells ( ) { MergeCellsRecord retval = new MergeCellsRecord ( ) ; retval . setNumAreas ( ( short ) 0 ) ; return retval ; } protected Record createEOF ( ) { return new EOFRecord ( ) ; } public int getDimsLoc ( ) { if ( log . check ( POILogger . DEBUG ) ) log . log ( POILogger . DEBUG , "getDimsLoc dimsloc= " + dimsloc ) ; return dimsloc ; } public void checkDimsLoc ( Record rec , int recloc ) { if ( rec . getSid ( ) == DimensionsRecord . sid ) { loc = recloc ; dimsloc = recloc ; } } public int getSize ( ) { int retval = 0 ; for ( int k = 0 ; k < records . size ( ) ; k ++ ) { retval += ( ( Record ) records . get ( k ) ) . getRecordSize ( ) ; } if ( rows != null ) { final int blocks = rows . getRowBlockCount ( ) ; retval += IndexRecord . getRecordSizeForBlockCount ( blocks ) ; retval += ( 8 * blocks ) ; for ( Iterator itr = rows . getIterator ( ) ; itr . hasNext ( ) ; ) { RowRecord row = ( RowRecord ) itr . next ( ) ; if ( cells != null && cells . rowHasCells ( row . getRowNumber ( ) ) ) retval += 2 ; } } return retval ; } public List getRecords ( ) { return records ; } public GridsetRecord getGridsetRecord ( ) { return gridset ; } public Record findFirstRecordBySid ( short sid ) { for ( Iterator iterator = records . iterator ( ) ; iterator . hasNext ( ) ; ) { Record record = ( Record ) iterator . next ( ) ; if ( record . getSid ( ) == sid ) { return record ; } } return null ; } public void setSCLRecord ( SCLRecord sclRecord ) { int oldRecordLoc = findFirstRecordLocBySid ( SCLRecord . sid ) ; if ( oldRecordLoc == - 1 ) { int windowRecordLoc = findFirstRecordLocBySid ( WindowTwoRecord . sid ) ; records . add ( windowRecordLoc + 1 , sclRecord ) ; } else { records . set ( oldRecordLoc , sclRecord ) ; } } public int findFirstRecordLocBySid ( short sid ) { int index = 0 ; for ( Iterator iterator = records . iterator ( ) ; iterator . hasNext ( ) ; ) { Record record = ( Record ) iterator . next ( ) ; if ( record . getSid ( ) == sid ) { return index ; } index ++ ; } return - 1 ; } public HeaderRecord getHeader ( ) { return header ; } public void setHeader ( HeaderRecord newHeader ) { header = newHeader ; } public FooterRecord getFooter ( ) { return footer ; } public void setFooter ( FooterRecord newFooter ) { footer = newFooter ; } public PrintSetupRecord getPrintSetup ( ) { return printSetup ; } public void setPrintSetup ( PrintSetupRecord newPrintSetup ) { printSetup = newPrintSetup ; } public PrintGridlinesRecord getPrintGridlines ( ) { return printGridlines ; } public void setPrintGridlines ( PrintGridlinesRecord newPrintGridlines ) { printGridlines = newPrintGridlines ; } public void setSelected ( boolean sel ) { windowTwo . setSelected ( sel ) ; } public double getMargin ( short margin ) { if ( getMargins ( ) [ margin ] != null ) return margins [ margin ] . getMargin ( ) ; else { switch ( margin ) { case LeftMargin : return .75 ; case RightMargin : return .75 ; case TopMargin : return 1.0 ; case BottomMargin : return 1.0 ; default : throw new RuntimeException ( "Unknown margin constant:  " + margin ) ; } } } public void setMargin ( short margin , double size ) { Margin m = getMargins ( ) [ margin ] ; if ( m == null ) { switch ( margin ) { case LeftMargin : m = new LeftMarginRecord ( ) ; records . add ( getDimsLoc ( ) + 1 , m ) ; break ; case RightMargin : m = new RightMarginRecord ( ) ; records . add ( getDimsLoc ( ) + 1 , m ) ; break ; case TopMargin : m = new TopMarginRecord ( ) ; records . add ( getDimsLoc ( ) + 1 , m ) ; break ; case BottomMargin : m = new BottomMarginRecord ( ) ; records . add ( getDimsLoc ( ) + 1 , m ) ; break ; default : throw new RuntimeException ( "Unknown margin constant:  " + margin ) ; } margins [ margin ] = m ; } m . setMargin ( size ) ; } public int getEofLoc ( ) { return eofLoc ; } public void createFreezePane ( int colSplit , int rowSplit , int topRow , int leftmostColumn ) { int paneLoc = findFirstRecordLocBySid ( PaneRecord . sid ) ; if ( paneLoc != - 1 ) records . remove ( paneLoc ) ; int loc = findFirstRecordLocBySid ( WindowTwoRecord . sid ) ; PaneRecord pane = new PaneRecord ( ) ; pane . setX ( ( short ) colSplit ) ; pane . setY ( ( short ) rowSplit ) ; pane . setTopRow ( ( short ) topRow ) ; pane . setLeftColumn ( ( short ) leftmostColumn ) ; if ( rowSplit == 0 ) { pane . setTopRow ( ( short ) 0 ) ; pane . setActivePane ( ( short ) 1 ) ; } else if ( colSplit == 0 ) { pane . setLeftColumn ( ( short ) 64 ) ; pane . setActivePane ( ( short ) 2 ) ; } else { pane . setActivePane ( ( short ) 0 ) ; } records . add ( loc + 1 , pane ) ; windowTwo . setFreezePanes ( true ) ; windowTwo . setFreezePanesNoSplit ( true ) ; SelectionRecord sel = ( SelectionRecord ) findFirstRecordBySid ( SelectionRecord . sid ) ; sel . setPane ( ( byte ) pane . getActivePane ( ) ) ; } public void createSplitPane ( int xSplitPos , int ySplitPos , int topRow , int leftmostColumn , int activePane ) { int paneLoc = findFirstRecordLocBySid ( PaneRecord . sid ) ; if ( paneLoc != - 1 ) records . remove ( paneLoc ) ; int loc = findFirstRecordLocBySid ( WindowTwoRecord . sid ) ; PaneRecord r = new PaneRecord ( ) ; r . setX ( ( short ) xSplitPos ) ; r . setY ( ( short ) ySplitPos ) ; r . setTopRow ( ( short ) topRow ) ; r . setLeftColumn ( ( short ) leftmostColumn ) ; r . setActivePane ( ( short ) activePane ) ; records . add ( loc + 1 , r ) ; windowTwo . setFreezePanes ( false ) ; windowTwo . setFreezePanesNoSplit ( false ) ; SelectionRecord sel = ( SelectionRecord ) findFirstRecordBySid ( SelectionRecord . sid ) ; sel . setPane ( PANE_LOWER_RIGHT ) ; } public PaneInformation getPaneInformation ( ) { PaneRecord rec = ( PaneRecord ) findFirstRecordBySid ( PaneRecord . sid ) ; if ( rec == null ) return null ; return new PaneInformation ( rec . getX ( ) , rec . getY ( ) , rec . getTopRow ( ) , rec . getLeftColumn ( ) , ( byte ) rec . getActivePane ( ) , windowTwo . getFreezePanes ( ) ) ; } public SelectionRecord getSelection ( ) { return selection ; } public void setSelection ( SelectionRecord selection ) { this . selection = selection ; } protected Record createProtect ( ) { if ( log . check ( POILogger . DEBUG ) ) log . log ( POILogger . DEBUG , "create protect record with protection disabled" ) ; ProtectRecord retval = new ProtectRecord ( ) ; retval . setProtect ( false ) ; return retval ; } public ProtectRecord getProtect ( ) { if ( protect == null ) { protect = ( ProtectRecord ) createProtect ( ) ; int loc = findFirstRecordLocBySid ( EOFRecord . sid ) ; records . add ( loc , protect ) ; } return protect ; } public void setDisplayGridlines ( boolean show ) { windowTwo . setDisplayGridlines ( show ) ; } public boolean isDisplayGridlines ( ) { return windowTwo . getDisplayGridlines ( ) ; } public void setDisplayFormulas ( boolean show ) { windowTwo . setDisplayFormulas ( show ) ; } public boolean isDisplayFormulas ( ) { return windowTwo . getDisplayFormulas ( ) ; } public void setDisplayRowColHeadings ( boolean show ) { windowTwo . setDisplayRowColHeadings ( show ) ; } public boolean isDisplayRowColHeadings ( ) { return windowTwo . getDisplayRowColHeadings ( ) ; } protected Margin [ ] getMargins ( ) { if ( margins == null ) margins = new Margin [ 4 ] ; return margins ; } public int aggregateDrawingRecords ( DrawingManager2 drawingManager ) { int loc = findFirstRecordLocBySid ( DrawingRecord . sid ) ; boolean noDrawingRecordsFound = loc == - 1 ; if ( noDrawingRecordsFound ) { EscherAggregate aggregate = new EscherAggregate ( drawingManager ) ; loc = findFirstRecordLocBySid ( EscherAggregate . sid ) ; if ( loc == - 1 ) { loc = findFirstRecordLocBySid ( WindowTwoRecord . sid ) ; } else { getRecords ( ) . remove ( loc ) ; } getRecords ( ) . add ( loc , aggregate ) ; return loc ; } else { List records = getRecords ( ) ; EscherAggregate r = EscherAggregate . createAggregate ( records , loc , drawingManager ) ; int startloc = loc ; while ( loc + 1 < records . size ( ) && records . get ( loc ) instanceof DrawingRecord && records . get ( loc + 1 ) instanceof ObjRecord ) { loc += 2 ; } int endloc = loc - 1 ; for ( int i = 0 ; i < ( endloc - startloc + 1 ) ; i ++ ) records . remove ( startloc ) ; records . add ( startloc , r ) ; return startloc ; } } public void preSerialize ( ) { for ( Iterator iterator = getRecords ( ) . iterator ( ) ; iterator . hasNext ( ) ; ) { Record r = ( Record ) iterator . next ( ) ; if ( r instanceof EscherAggregate ) r . getRecordSize ( ) ; } } public void shiftBreaks ( PageBreakRecord breaks , short start , short stop , int count ) { if ( rowBreaks == null ) return ; Iterator iterator = breaks . getBreaksIterator ( ) ; List shiftedBreak = new ArrayList ( ) ; while ( iterator . hasNext ( ) ) { PageBreakRecord . Break breakItem = ( PageBreakRecord . Break ) iterator . next ( ) ; short breakLocation = breakItem . main ; boolean inStart = ( breakLocation >= start ) ; boolean inEnd = ( breakLocation <= stop ) ; if ( inStart && inEnd ) shiftedBreak . add ( breakItem ) ; } iterator = shiftedBreak . iterator ( ) ; while ( iterator . hasNext ( ) ) { PageBreakRecord . Break breakItem = ( PageBreakRecord . Break ) iterator . next ( ) ; breaks . removeBreak ( breakItem . main ) ; breaks . addBreak ( ( short ) ( breakItem . main + count ) , breakItem . subFrom , breakItem . subTo ) ; } } public void setRowBreak ( int row , short fromCol , short toCol ) { if ( rowBreaks == null ) { int loc = findFirstRecordLocBySid ( WindowTwoRecord . sid ) ; rowBreaks = new PageBreakRecord ( PageBreakRecord . HORIZONTAL_SID ) ; records . add ( loc , rowBreaks ) ; } rowBreaks . addBreak ( ( short ) row , fromCol , toCol ) ; } public void removeRowBreak ( int row ) { if ( rowBreaks == null ) throw new IllegalArgumentException ( "Sheet does not define any row breaks" ) ; rowBreaks . removeBreak ( ( short ) row ) ; } public boolean isRowBroken ( int row ) { return ( rowBreaks == null ) ? false : rowBreaks . getBreak ( ( short ) row ) != null ; } public void setColumnBreak ( short column , short fromRow , short toRow ) { if ( colBreaks == null ) { int loc = findFirstRecordLocBySid ( WindowTwoRecord . sid ) ; colBreaks = new PageBreakRecord ( PageBreakRecord . VERTICAL_SID ) ; records . add ( loc , colBreaks ) ; } colBreaks . addBreak ( column , fromRow , toRow ) ; } public void removeColumnBreak ( short column ) { if ( colBreaks == null ) throw new IllegalArgumentException ( "Sheet does not define any column breaks" ) ; colBreaks . removeBreak ( column ) ; } public boolean isColumnBroken ( short column ) { return ( colBreaks == null ) ? false : colBreaks . getBreak ( column ) != null ; } public void shiftRowBreaks ( int startingRow , int endingRow , int count ) { shiftBreaks ( rowBreaks , ( short ) startingRow , ( short ) endingRow , ( short ) count ) ; } public void shiftColumnBreaks ( short startingCol , short endingCol , short count ) { shiftBreaks ( colBreaks , startingCol , endingCol , count ) ; } public Iterator getRowBreaks ( ) { return rowBreaks . getBreaksIterator ( ) ; } public int getNumRowBreaks ( ) { return ( rowBreaks == null ) ? 0 : ( int ) rowBreaks . getNumBreaks ( ) ; } public Iterator getColumnBreaks ( ) { return colBreaks . getBreaksIterator ( ) ; } public int getNumColumnBreaks ( ) { return ( colBreaks == null ) ? 0 : ( int ) colBreaks . getNumBreaks ( ) ; } public void setColumnGroupCollapsed ( short columnNumber , boolean collapsed ) { if ( collapsed ) { columns . collapseColumn ( columnNumber ) ; } else { columns . expandColumn ( columnNumber ) ; } } public void groupRowRange ( int fromRow , int toRow , boolean indent ) { checkRows ( ) ; for ( int rowNum = fromRow ; rowNum <= toRow ; rowNum ++ ) { RowRecord row = getRow ( rowNum ) ; if ( row == null ) { row = createRow ( rowNum ) ; addRow ( row ) ; } int level = row . getOutlineLevel ( ) ; if ( indent ) level ++ ; else level -- ; level = Math . max ( 0 , level ) ; level = Math . min ( 7 , level ) ; row . setOutlineLevel ( ( short ) ( level ) ) ; } recalcRowGutter ( ) ; } private void recalcRowGutter ( ) { int maxLevel = 0 ; Iterator iterator = rows . getIterator ( ) ; while ( iterator . hasNext ( ) ) { RowRecord rowRecord = ( RowRecord ) iterator . next ( ) ; maxLevel = Math . max ( rowRecord . getOutlineLevel ( ) , maxLevel ) ; } GutsRecord guts = ( GutsRecord ) findFirstRecordBySid ( GutsRecord . sid ) ; guts . setRowLevelMax ( ( short ) ( maxLevel + 1 ) ) ; guts . setLeftRowGutter ( ( short ) ( 29 + ( 12 * ( maxLevel ) ) ) ) ; } public void setRowGroupCollapsed ( int row , boolean collapse ) { if ( collapse ) { rows . collapseRow ( row ) ; } else { rows . expandRow ( row ) ; } } } 	1
package org . apache . poi . hssf . record ; import org . apache . poi . util . LittleEndian ; public class ProtectionRev4Record extends Record { public final static short sid = 0x1af ; private short field_1_protect ; public ProtectionRev4Record ( ) { } public ProtectionRev4Record ( RecordInputStream in ) { super ( in ) ; } protected void validateSid ( short id ) { if ( id != sid ) { throw new RecordFormatException ( "NOT A PROTECTION REV 4 RECORD" ) ; } } protected void fillFields ( RecordInputStream in ) { field_1_protect = in . readShort ( ) ; } public void setProtect ( boolean protect ) { if ( protect ) { field_1_protect = 1 ; } else { field_1_protect = 0 ; } } public boolean getProtect ( ) { return ( field_1_protect == 1 ) ; } public String toString ( ) { StringBuffer buffer = new StringBuffer ( ) ; buffer . append ( "[PROT4REV]\n" ) ; buffer . append ( "    .protect         = " ) . append ( getProtect ( ) ) . append ( "\n" ) ; buffer . append ( "[/PROT4REV]\n" ) ; return buffer . toString ( ) ; } public int serialize ( int offset , byte [ ] data ) { LittleEndian . putShort ( data , 0 + offset , sid ) ; LittleEndian . putShort ( data , 2 + offset , ( ( short ) 0x02 ) ) ; LittleEndian . putShort ( data , 4 + offset , field_1_protect ) ; return getRecordSize ( ) ; } public int getRecordSize ( ) { return 6 ; } public short getSid ( ) { return sid ; } } 	1
package org . apache . poi . hssf . record ; import org . apache . poi . util . * ; public class TickRecord extends Record { public final static short sid = 0x101e ; private byte field_1_majorTickType ; private byte field_2_minorTickType ; private byte field_3_labelPosition ; private byte field_4_background ; private int field_5_labelColorRgb ; private int field_6_zero1 ; private int field_7_zero2 ; private int field_8_zero3 ; private int field_9_zero4 ; private short field_10_options ; private BitField autoTextColor = BitFieldFactory . getInstance ( 0x1 ) ; private BitField autoTextBackground = BitFieldFactory . getInstance ( 0x2 ) ; private BitField rotation = BitFieldFactory . getInstance ( 0x1c ) ; private BitField autorotate = BitFieldFactory . getInstance ( 0x20 ) ; private short field_11_tickColor ; private short field_12_zero5 ; public TickRecord ( ) { } public TickRecord ( RecordInputStream in ) { super ( in ) ; } protected void validateSid ( short id ) { if ( id != sid ) { throw new RecordFormatException ( "Not a Tick record" ) ; } } protected void fillFields ( RecordInputStream in ) { field_1_majorTickType = in . readByte ( ) ; field_2_minorTickType = in . readByte ( ) ; field_3_labelPosition = in . readByte ( ) ; field_4_background = in . readByte ( ) ; field_5_labelColorRgb = in . readInt ( ) ; field_6_zero1 = in . readInt ( ) ; field_7_zero2 = in . readInt ( ) ; field_8_zero3 = in . readInt ( ) ; field_9_zero4 = in . readInt ( ) ; field_10_options = in . readShort ( ) ; field_11_tickColor = in . readShort ( ) ; field_12_zero5 = in . readShort ( ) ; } public String toString ( ) { StringBuffer buffer = new StringBuffer ( ) ; buffer . append ( "[TICK]\n" ) ; buffer . append ( "    .majorTickType        = " ) . append ( "0x" ) . append ( HexDump . toHex ( getMajorTickType ( ) ) ) . append ( " (" ) . append ( getMajorTickType ( ) ) . append ( " )" ) ; buffer . append ( System . getProperty ( "line.separator" ) ) ; buffer . append ( "    .minorTickType        = " ) . append ( "0x" ) . append ( HexDump . toHex ( getMinorTickType ( ) ) ) . append ( " (" ) . append ( getMinorTickType ( ) ) . append ( " )" ) ; buffer . append ( System . getProperty ( "line.separator" ) ) ; buffer . append ( "    .labelPosition        = " ) . append ( "0x" ) . append ( HexDump . toHex ( getLabelPosition ( ) ) ) . append ( " (" ) . append ( getLabelPosition ( ) ) . append ( " )" ) ; buffer . append ( System . getProperty ( "line.separator" ) ) ; buffer . append ( "    .background           = " ) . append ( "0x" ) . append ( HexDump . toHex ( getBackground ( ) ) ) . append ( " (" ) . append ( getBackground ( ) ) . append ( " )" ) ; buffer . append ( System . getProperty ( "line.separator" ) ) ; buffer . append ( "    .labelColorRgb        = " ) . append ( "0x" ) . append ( HexDump . toHex ( getLabelColorRgb ( ) ) ) . append ( " (" ) . append ( getLabelColorRgb ( ) ) . append ( " )" ) ; buffer . append ( System . getProperty ( "line.separator" ) ) ; buffer . append ( "    .zero1                = " ) . append ( "0x" ) . append ( HexDump . toHex ( getZero1 ( ) ) ) . append ( " (" ) . append ( getZero1 ( ) ) . append ( " )" ) ; buffer . append ( System . getProperty ( "line.separator" ) ) ; buffer . append ( "    .zero2                = " ) . append ( "0x" ) . append ( HexDump . toHex ( getZero2 ( ) ) ) . append ( " (" ) . append ( getZero2 ( ) ) . append ( " )" ) ; buffer . append ( System . getProperty ( "line.separator" ) ) ; buffer . append ( "    .options              = " ) . append ( "0x" ) . append ( HexDump . toHex ( getOptions ( ) ) ) . append ( " (" ) . append ( getOptions ( ) ) . append ( " )" ) ; buffer . append ( System . getProperty ( "line.separator" ) ) ; buffer . append ( "         .autoTextColor            = " ) . append ( isAutoTextColor ( ) ) . append ( '\n' ) ; buffer . append ( "         .autoTextBackground       = " ) . append ( isAutoTextBackground ( ) ) . append ( '\n' ) ; buffer . append ( "         .rotation                 = " ) . append ( getRotation ( ) ) . append ( '\n' ) ; buffer . append ( "         .autorotate               = " ) . append ( isAutorotate ( ) ) . append ( '\n' ) ; buffer . append ( "    .tickColor            = " ) . append ( "0x" ) . append ( HexDump . toHex ( getTickColor ( ) ) ) . append ( " (" ) . append ( getTickColor ( ) ) . append ( " )" ) ; buffer . append ( System . getProperty ( "line.separator" ) ) ; buffer . append ( "    .zero3                = " ) . append ( "0x" ) . append ( HexDump . toHex ( getZero3 ( ) ) ) . append ( " (" ) . append ( getZero3 ( ) ) . append ( " )" ) ; buffer . append ( System . getProperty ( "line.separator" ) ) ; buffer . append ( "[/TICK]\n" ) ; return buffer . toString ( ) ; } public int serialize ( int offset , byte [ ] data ) { int pos = 0 ; LittleEndian . putShort ( data , 0 + offset , sid ) ; LittleEndian . putShort ( data , 2 + offset , ( short ) ( getRecordSize ( ) - 4 ) ) ; data [ 4 + offset + pos ] = field_1_majorTickType ; data [ 5 + offset + pos ] = field_2_minorTickType ; data [ 6 + offset + pos ] = field_3_labelPosition ; data [ 7 + offset + pos ] = field_4_background ; LittleEndian . putInt ( data , 8 + offset + pos , field_5_labelColorRgb ) ; LittleEndian . putInt ( data , 12 + offset + pos , field_6_zero1 ) ; LittleEndian . putInt ( data , 16 + offset + pos , field_7_zero2 ) ; LittleEndian . putInt ( data , 20 + offset + pos , field_8_zero3 ) ; LittleEndian . putInt ( data , 24 + offset + pos , field_9_zero4 ) ; LittleEndian . putShort ( data , 28 + offset + pos , field_10_options ) ; LittleEndian . putShort ( data , 30 + offset + pos , field_11_tickColor ) ; LittleEndian . putShort ( data , 32 + offset + pos , field_12_zero5 ) ; return getRecordSize ( ) ; } public int getRecordSize ( ) { return 4 + 1 + 1 + 1 + 1 + 4 + 8 + 8 + 2 + 2 + 2 ; } public short getSid ( ) { return sid ; } public Object clone ( ) { TickRecord rec = new TickRecord ( ) ; rec . field_1_majorTickType = field_1_majorTickType ; rec . field_2_minorTickType = field_2_minorTickType ; rec . field_3_labelPosition = field_3_labelPosition ; rec . field_4_background = field_4_background ; rec . field_5_labelColorRgb = field_5_labelColorRgb ; rec . field_6_zero1 = field_6_zero1 ; rec . field_7_zero2 = field_7_zero2 ; rec . field_8_zero3 = field_8_zero3 ; rec . field_9_zero4 = field_9_zero4 ; rec . field_10_options = field_10_options ; rec . field_11_tickColor = field_11_tickColor ; rec . field_12_zero5 = field_12_zero5 ; return rec ; } public byte getMajorTickType ( ) { return field_1_majorTickType ; } public void setMajorTickType ( byte field_1_majorTickType ) { this . field_1_majorTickType = field_1_majorTickType ; } public byte getMinorTickType ( ) { return field_2_minorTickType ; } public void setMinorTickType ( byte field_2_minorTickType ) { this . field_2_minorTickType = field_2_minorTickType ; } public byte getLabelPosition ( ) { return field_3_labelPosition ; } public void setLabelPosition ( byte field_3_labelPosition ) { this . field_3_labelPosition = field_3_labelPosition ; } public byte getBackground ( ) { return field_4_background ; } public void setBackground ( byte field_4_background ) { this . field_4_background = field_4_background ; } public int getLabelColorRgb ( ) { return field_5_labelColorRgb ; } public void setLabelColorRgb ( int field_5_labelColorRgb ) { this . field_5_labelColorRgb = field_5_labelColorRgb ; } public int getZero1 ( ) { return field_6_zero1 ; } public void setZero1 ( int field_6_zero1 ) { this . field_6_zero1 = field_6_zero1 ; } public int getZero2 ( ) { return field_7_zero2 ; } public void setZero2 ( int field_7_zero2 ) { this . field_7_zero2 = field_7_zero2 ; } public short getOptions ( ) { return field_10_options ; } public void setOptions ( short field_10_options ) { this . field_10_options = field_10_options ; } public short getTickColor ( ) { return field_11_tickColor ; } public void setTickColor ( short field_11_tickColor ) { this . field_11_tickColor = field_11_tickColor ; } public short getZero3 ( ) { return field_12_zero5 ; } public void setZero3 ( short field_12_zero3 ) { this . field_12_zero5 = field_12_zero3 ; } public void setAutoTextColor ( boolean value ) { field_10_options = autoTextColor . setShortBoolean ( field_10_options , value ) ; } public boolean isAutoTextColor ( ) { return autoTextColor . isSet ( field_10_options ) ; } public void setAutoTextBackground ( boolean value ) { field_10_options = autoTextBackground . setShortBoolean ( field_10_options , value ) ; } public boolean isAutoTextBackground ( ) { return autoTextBackground . isSet ( field_10_options ) ; } public void setRotation ( short value ) { field_10_options = rotation . setShortValue ( field_10_options , value ) ; } public short getRotation ( ) { return rotation . getShortValue ( field_10_options ) ; } public void setAutorotate ( boolean value ) { field_10_options = autorotate . setShortBoolean ( field_10_options , value ) ; } public boolean isAutorotate ( ) { return autorotate . isSet ( field_10_options ) ; } } 	1
package org . apache . poi . hssf . record ; import org . apache . poi . util . LittleEndian ; import org . apache . poi . util . StringUtil ; import org . apache . poi . util . BitField ; import org . apache . poi . util . BitFieldFactory ; public class StyleRecord extends Record { public final static short sid = 0x293 ; public final static short STYLE_USER_DEFINED = 0 ; public final static short STYLE_BUILT_IN = 1 ; private short field_1_xf_index ; private byte field_2_builtin_style ; private byte field_3_outline_style_level ; private short field_2_name_length ; private byte field_3_string_options ; private BitField fHighByte ; private String field_4_name ; public StyleRecord ( ) { } public StyleRecord ( RecordInputStream in ) { super ( in ) ; } protected void validateSid ( short id ) { if ( id != sid ) { throw new RecordFormatException ( "NOT A STYLE RECORD" ) ; } } protected void fillFields ( RecordInputStream in ) { fHighByte = BitFieldFactory . getInstance ( 0x01 ) ; field_1_xf_index = in . readShort ( ) ; if ( getType ( ) == STYLE_BUILT_IN ) { field_2_builtin_style = in . readByte ( ) ; field_3_outline_style_level = in . readByte ( ) ; } else if ( getType ( ) == STYLE_USER_DEFINED ) { field_2_name_length = in . readShort ( ) ; field_3_string_options = in . readByte ( ) ; byte [ ] string = in . readRemainder ( ) ; if ( fHighByte . isSet ( field_3_string_options ) ) { field_4_name = StringUtil . getFromUnicodeBE ( string , 0 , field_2_name_length ) ; } else { field_4_name = StringUtil . getFromCompressedUnicode ( string , 0 , field_2_name_length ) ; } } } public void setIndex ( short index ) { field_1_xf_index = index ; } public void setType ( short type ) { field_1_xf_index = setField ( field_1_xf_index , type , 0x8000 , 15 ) ; } public void setXFIndex ( short index ) { field_1_xf_index = setField ( field_1_xf_index , index , 0x1FFF , 0 ) ; } public void setNameLength ( byte length ) { field_2_name_length = length ; } public void setName ( String name ) { field_4_name = name ; } public void setBuiltin ( byte builtin ) { field_2_builtin_style = builtin ; } public void setOutlineStyleLevel ( byte level ) { field_3_outline_style_level = level ; } public short getIndex ( ) { return field_1_xf_index ; } public short getType ( ) { return ( short ) ( ( field_1_xf_index & 0x8000 ) > > 15 ) ; } public short getXFIndex ( ) { return ( short ) ( field_1_xf_index & 0x1FFF ) ; } public short getNameLength ( ) { return field_2_name_length ; } public String getName ( ) { return field_4_name ; } public byte getBuiltin ( ) { return field_2_builtin_style ; } public byte getOutlineStyleLevel ( ) { return field_3_outline_style_level ; } public String toString ( ) { StringBuffer buffer = new StringBuffer ( ) ; buffer . append ( "[STYLE]\n" ) ; buffer . append ( "    .xf_index_raw    = " ) . append ( Integer . toHexString ( getIndex ( ) ) ) . append ( "\n" ) ; buffer . append ( "        .type        = " ) . append ( Integer . toHexString ( getType ( ) ) ) . append ( "\n" ) ; buffer . append ( "        .xf_index    = " ) . append ( Integer . toHexString ( getXFIndex ( ) ) ) . append ( "\n" ) ; if ( getType ( ) == STYLE_BUILT_IN ) { buffer . append ( "    .builtin_style   = " ) . append ( Integer . toHexString ( getBuiltin ( ) ) ) . append ( "\n" ) ; buffer . append ( "    .outline_level   = " ) . append ( Integer . toHexString ( getOutlineStyleLevel ( ) ) ) . append ( "\n" ) ; } else if ( getType ( ) == STYLE_USER_DEFINED ) { buffer . append ( "    .name_length     = " ) . append ( Integer . toHexString ( getNameLength ( ) ) ) . append ( "\n" ) ; buffer . append ( "    .name            = " ) . append ( getName ( ) ) . append ( "\n" ) ; } buffer . append ( "[/STYLE]\n" ) ; return buffer . toString ( ) ; } private short setField ( int fieldValue , int new_value , int mask , int shiftLeft ) { return ( short ) ( ( fieldValue & ~ mask ) | ( ( new_value << shiftLeft ) & mask ) ) ; } public int serialize ( int offset , byte [ ] data ) { LittleEndian . putShort ( data , 0 + offset , sid ) ; if ( getType ( ) == STYLE_BUILT_IN ) { LittleEndian . putShort ( data , 2 + offset , ( ( short ) 0x04 ) ) ; } else { LittleEndian . putShort ( data , 2 + offset , ( ( short ) ( getRecordSize ( ) - 4 ) ) ) ; } LittleEndian . putShort ( data , 4 + offset , getIndex ( ) ) ; if ( getType ( ) == STYLE_BUILT_IN ) { data [ 6 + offset ] = getBuiltin ( ) ; data [ 7 + offset ] = getOutlineStyleLevel ( ) ; } else { LittleEndian . putShort ( data , 6 + offset , getNameLength ( ) ) ; data [ 8 + offset ] = this . field_3_string_options ; StringUtil . putCompressedUnicode ( getName ( ) , data , 9 + offset ) ; } return getRecordSize ( ) ; } public int getRecordSize ( ) { int retval ; if ( getType ( ) == STYLE_BUILT_IN ) { retval = 8 ; } else { if ( fHighByte . isSet ( field_3_string_options ) ) { retval = 9 + 2 * getNameLength ( ) ; } else { retval = 9 + getNameLength ( ) ; } } return retval ; } public short getSid ( ) { return sid ; } } 	1
package org . apache . poi . hssf . record . formula ; import org . apache . poi . util . LittleEndian ; import org . apache . poi . hssf . util . AreaReference ; import org . apache . poi . hssf . util . CellReference ; import org . apache . poi . hssf . util . SheetReferences ; import org . apache . poi . hssf . model . Workbook ; import org . apache . poi . hssf . record . RecordInputStream ; import org . apache . poi . util . BitField ; import org . apache . poi . util . BitFieldFactory ; public class Area3DPtg extends Ptg { public final static byte sid = 0x3b ; private final static int SIZE = 11 ; private short field_1_index_extern_sheet ; private short field_2_first_row ; private short field_3_last_row ; private short field_4_first_column ; private short field_5_last_column ; private BitField rowRelative = BitFieldFactory . getInstance ( 0x8000 ) ; private BitField colRelative = BitFieldFactory . getInstance ( 0x4000 ) ; public Area3DPtg ( ) { } public Area3DPtg ( String arearef , short externIdx ) { setArea ( arearef ) ; setExternSheetIndex ( externIdx ) ; } public Area3DPtg ( RecordInputStream in ) { field_1_index_extern_sheet = in . readShort ( ) ; field_2_first_row = in . readShort ( ) ; field_3_last_row = in . readShort ( ) ; field_4_first_column = in . readShort ( ) ; field_5_last_column = in . readShort ( ) ; } public String toString ( ) { StringBuffer buffer = new StringBuffer ( ) ; buffer . append ( "AreaPtg\n" ) ; buffer . append ( "Index to Extern Sheet = " + getExternSheetIndex ( ) ) . append ( "\n" ) ; buffer . append ( "firstRow = " + getFirstRow ( ) ) . append ( "\n" ) ; buffer . append ( "lastRow  = " + getLastRow ( ) ) . append ( "\n" ) ; buffer . append ( "firstCol = " + getFirstColumn ( ) ) . append ( "\n" ) ; buffer . append ( "lastCol  = " + getLastColumn ( ) ) . append ( "\n" ) ; buffer . append ( "firstColRel= " + isFirstRowRelative ( ) ) . append ( "\n" ) ; buffer . append ( "lastColRowRel = " + isLastRowRelative ( ) ) . append ( "\n" ) ; buffer . append ( "firstColRel   = " + isFirstColRelative ( ) ) . append ( "\n" ) ; buffer . append ( "lastColRel    = " + isLastColRelative ( ) ) . append ( "\n" ) ; return buffer . toString ( ) ; } public void writeBytes ( byte [ ] array , int offset ) { array [ 0 + offset ] = ( byte ) ( sid + ptgClass ) ; LittleEndian . putShort ( array , 1 + offset , getExternSheetIndex ( ) ) ; LittleEndian . putShort ( array , 3 + offset , getFirstRow ( ) ) ; LittleEndian . putShort ( array , 5 + offset , getLastRow ( ) ) ; LittleEndian . putShort ( array , 7 + offset , getFirstColumnRaw ( ) ) ; LittleEndian . putShort ( array , 9 + offset , getLastColumnRaw ( ) ) ; } public int getSize ( ) { return SIZE ; } public short getExternSheetIndex ( ) { return field_1_index_extern_sheet ; } public void setExternSheetIndex ( short index ) { field_1_index_extern_sheet = index ; } public short getFirstRow ( ) { return field_2_first_row ; } public void setFirstRow ( short row ) { field_2_first_row = row ; } public short getLastRow ( ) { return field_3_last_row ; } public void setLastRow ( short row ) { field_3_last_row = row ; } public short getFirstColumn ( ) { return ( short ) ( field_4_first_column & 0xFF ) ; } public short getFirstColumnRaw ( ) { return field_4_first_column ; } public boolean isFirstRowRelative ( ) { return rowRelative . isSet ( field_4_first_column ) ; } public boolean isFirstColRelative ( ) { return colRelative . isSet ( field_4_first_column ) ; } public void setFirstColumn ( short column ) { field_4_first_column &= 0xFF00 ; field_4_first_column |= column & 0xFF ; } public void setFirstColumnRaw ( short column ) { field_4_first_column = column ; } public short getLastColumn ( ) { return ( short ) ( field_5_last_column & 0xFF ) ; } public short getLastColumnRaw ( ) { return field_5_last_column ; } public boolean isLastRowRelative ( ) { return rowRelative . isSet ( field_5_last_column ) ; } public boolean isLastColRelative ( ) { return colRelative . isSet ( field_5_last_column ) ; } public void setLastColumn ( short column ) { field_5_last_column &= 0xFF00 ; field_5_last_column |= column & 0xFF ; } public void setLastColumnRaw ( short column ) { field_5_last_column = column ; } public void setFirstRowRelative ( boolean rel ) { field_4_first_column = rowRelative . setShortBoolean ( field_4_first_column , rel ) ; } public void setFirstColRelative ( boolean rel ) { field_4_first_column = colRelative . setShortBoolean ( field_4_first_column , rel ) ; } public void setLastRowRelative ( boolean rel ) { field_5_last_column = rowRelative . setShortBoolean ( field_5_last_column , rel ) ; } public void setLastColRelative ( boolean rel ) { field_5_last_column = colRelative . setShortBoolean ( field_5_last_column , rel ) ; } public void setArea ( String ref ) { AreaReference ar = new AreaReference ( ref ) ; setFirstRow ( ( short ) ar . getCells ( ) [ 0 ] . getRow ( ) ) ; setFirstColumn ( ( short ) ar . getCells ( ) [ 0 ] . getCol ( ) ) ; setLastRow ( ( short ) ar . getCells ( ) [ 1 ] . getRow ( ) ) ; setLastColumn ( ( short ) ar . getCells ( ) [ 1 ] . getCol ( ) ) ; setFirstColRelative ( ! ar . getCells ( ) [ 0 ] . isColAbsolute ( ) ) ; setLastColRelative ( ! ar . getCells ( ) [ 1 ] . isColAbsolute ( ) ) ; setFirstRowRelative ( ! ar . getCells ( ) [ 0 ] . isRowAbsolute ( ) ) ; setLastRowRelative ( ! ar . getCells ( ) [ 1 ] . isRowAbsolute ( ) ) ; } public String toFormulaString ( Workbook book ) { SheetReferences refs = book == null ? null : book . getSheetReferences ( ) ; StringBuffer retval = new StringBuffer ( ) ; if ( refs != null ) { retval . append ( refs . getSheetName ( this . field_1_index_extern_sheet ) ) ; retval . append ( '!' ) ; } retval . append ( ( new CellReference ( getFirstRow ( ) , getFirstColumn ( ) , ! isFirstRowRelative ( ) , ! isFirstColRelative ( ) ) ) . toString ( ) ) ; retval . append ( ':' ) ; retval . append ( ( new CellReference ( getLastRow ( ) , getLastColumn ( ) , ! isLastRowRelative ( ) , ! isLastColRelative ( ) ) ) . toString ( ) ) ; return retval . toString ( ) ; } public byte getDefaultOperandClass ( ) { return Ptg . CLASS_REF ; } public Object clone ( ) { Area3DPtg ptg = new Area3DPtg ( ) ; ptg . field_1_index_extern_sheet = field_1_index_extern_sheet ; ptg . field_2_first_row = field_2_first_row ; ptg . field_3_last_row = field_3_last_row ; ptg . field_4_first_column = field_4_first_column ; ptg . field_5_last_column = field_5_last_column ; ptg . setClass ( ptgClass ) ; return ptg ; } public boolean equals ( Object o ) { if ( this == o ) return true ; if ( ! ( o instanceof Area3DPtg ) ) return false ; final Area3DPtg area3DPtg = ( Area3DPtg ) o ; if ( field_1_index_extern_sheet != area3DPtg . field_1_index_extern_sheet ) return false ; if ( field_2_first_row != area3DPtg . field_2_first_row ) return false ; if ( field_3_last_row != area3DPtg . field_3_last_row ) return false ; if ( field_4_first_column != area3DPtg . field_4_first_column ) return false ; if ( field_5_last_column != area3DPtg . field_5_last_column ) return false ; return true ; } public int hashCode ( ) { int result ; result = ( int ) field_1_index_extern_sheet ; result = 29 * result + ( int ) field_2_first_row ; result = 29 * result + ( int ) field_3_last_row ; result = 29 * result + ( int ) field_4_first_column ; result = 29 * result + ( int ) field_5_last_column ; return result ; } } 	1
package org . apache . poi . hssf . record ; import org . apache . poi . util . BitField ; import org . apache . poi . util . BitFieldFactory ; import org . apache . poi . util . LittleEndian ; public class WSBoolRecord extends Record { public final static short sid = 0x81 ; private byte field_1_wsbool ; private byte field_2_wsbool ; static final private BitField autobreaks = BitFieldFactory . getInstance ( 0x01 ) ; static final private BitField dialog = BitFieldFactory . getInstance ( 0x10 ) ; static final private BitField applystyles = BitFieldFactory . getInstance ( 0x20 ) ; static final private BitField rowsumsbelow = BitFieldFactory . getInstance ( 0x40 ) ; static final private BitField rowsumsright = BitFieldFactory . getInstance ( 0x80 ) ; static final private BitField fittopage = BitFieldFactory . getInstance ( 0x01 ) ; static final private BitField displayguts = BitFieldFactory . getInstance ( 0x06 ) ; static final private BitField alternateexpression = BitFieldFactory . getInstance ( 0x40 ) ; static final private BitField alternateformula = BitFieldFactory . getInstance ( 0x80 ) ; public WSBoolRecord ( ) { } public WSBoolRecord ( RecordInputStream in ) { super ( in ) ; } protected void validateSid ( short id ) { if ( id != sid ) { throw new RecordFormatException ( "NOT A WSBoolRECORD" ) ; } } protected void fillFields ( RecordInputStream in ) { byte data [ ] = in . readRemainder ( ) ; field_1_wsbool = data [ 1 ] ; field_2_wsbool = data [ 0 ] ; } public void setWSBool1 ( byte bool1 ) { field_1_wsbool = bool1 ; } public void setAutobreaks ( boolean ab ) { field_1_wsbool = autobreaks . setByteBoolean ( field_1_wsbool , ab ) ; } public void setDialog ( boolean isDialog ) { field_1_wsbool = dialog . setByteBoolean ( field_1_wsbool , isDialog ) ; } public void setRowSumsBelow ( boolean below ) { field_1_wsbool = rowsumsbelow . setByteBoolean ( field_1_wsbool , below ) ; } public void setRowSumsRight ( boolean right ) { field_1_wsbool = rowsumsright . setByteBoolean ( field_1_wsbool , right ) ; } public void setWSBool2 ( byte bool2 ) { field_2_wsbool = bool2 ; } public void setFitToPage ( boolean fit2page ) { field_2_wsbool = fittopage . setByteBoolean ( field_2_wsbool , fit2page ) ; } public void setDisplayGuts ( boolean guts ) { field_2_wsbool = displayguts . setByteBoolean ( field_2_wsbool , guts ) ; } public void setAlternateExpression ( boolean altexp ) { field_2_wsbool = alternateexpression . setByteBoolean ( field_2_wsbool , altexp ) ; } public void setAlternateFormula ( boolean formula ) { field_2_wsbool = alternateformula . setByteBoolean ( field_2_wsbool , formula ) ; } public byte getWSBool1 ( ) { return field_1_wsbool ; } public boolean getAutobreaks ( ) { return autobreaks . isSet ( field_1_wsbool ) ; } public boolean getDialog ( ) { return dialog . isSet ( field_1_wsbool ) ; } public boolean getRowSumsBelow ( ) { return rowsumsbelow . isSet ( field_1_wsbool ) ; } public boolean getRowSumsRight ( ) { return rowsumsright . isSet ( field_1_wsbool ) ; } public byte getWSBool2 ( ) { return field_2_wsbool ; } public boolean getFitToPage ( ) { return fittopage . isSet ( field_2_wsbool ) ; } public boolean getDisplayGuts ( ) { return displayguts . isSet ( field_2_wsbool ) ; } public boolean getAlternateExpression ( ) { return alternateexpression . isSet ( field_2_wsbool ) ; } public boolean getAlternateFormula ( ) { return alternateformula . isSet ( field_2_wsbool ) ; } public String toString ( ) { StringBuffer buffer = new StringBuffer ( ) ; buffer . append ( "[WSBOOL]\n" ) ; buffer . append ( "    .wsbool1        = " ) . append ( Integer . toHexString ( getWSBool1 ( ) ) ) . append ( "\n" ) ; buffer . append ( "        .autobreaks = " ) . append ( getAutobreaks ( ) ) . append ( "\n" ) ; buffer . append ( "        .dialog     = " ) . append ( getDialog ( ) ) . append ( "\n" ) ; buffer . append ( "        .rowsumsbelw= " ) . append ( getRowSumsBelow ( ) ) . append ( "\n" ) ; buffer . append ( "        .rowsumsrigt= " ) . append ( getRowSumsRight ( ) ) . append ( "\n" ) ; buffer . append ( "    .wsbool2        = " ) . append ( Integer . toHexString ( getWSBool2 ( ) ) ) . append ( "\n" ) ; buffer . append ( "        .fittopage  = " ) . append ( getFitToPage ( ) ) . append ( "\n" ) ; buffer . append ( "        .displayguts= " ) . append ( getDisplayGuts ( ) ) . append ( "\n" ) ; buffer . append ( "        .alternateex= " ) . append ( getAlternateExpression ( ) ) . append ( "\n" ) ; buffer . append ( "        .alternatefo= " ) . append ( getAlternateFormula ( ) ) . append ( "\n" ) ; buffer . append ( "[/WSBOOL]\n" ) ; return buffer . toString ( ) ; } public int serialize ( int offset , byte [ ] data ) { LittleEndian . putShort ( data , 0 + offset , sid ) ; LittleEndian . putShort ( data , 2 + offset , ( short ) 0x2 ) ; data [ 5 + offset ] = getWSBool1 ( ) ; data [ 4 + offset ] = getWSBool2 ( ) ; return getRecordSize ( ) ; } public int getRecordSize ( ) { return 6 ; } public short getSid ( ) { return sid ; } public Object clone ( ) { WSBoolRecord rec = new WSBoolRecord ( ) ; rec . field_1_wsbool = field_1_wsbool ; rec . field_2_wsbool = field_2_wsbool ; return rec ; } } 	1
package org . apache . poi . hssf . record ; import org . apache . poi . util . LittleEndian ; public class NoteRecord extends Record { public final static short sid = 0x1C ; public final static short NOTE_HIDDEN = 0x0 ; public final static short NOTE_VISIBLE = 0x2 ; private short field_1_row ; private short field_2_col ; private short field_3_flags ; private short field_4_shapeid ; private String field_5_author ; public NoteRecord ( ) { field_5_author = "" ; field_3_flags = 0 ; } public NoteRecord ( RecordInputStream in ) { super ( in ) ; } public short getSid ( ) { return sid ; } protected void validateSid ( short id ) { if ( id != sid ) { throw new RecordFormatException ( "Not a NoteRecord record" ) ; } } protected void fillFields ( RecordInputStream in ) { field_1_row = in . readShort ( ) ; field_2_col = in . readShort ( ) ; field_3_flags = in . readShort ( ) ; field_4_shapeid = in . readShort ( ) ; int length = in . readShort ( ) ; byte [ ] bytes = in . readRemainder ( ) ; field_5_author = new String ( bytes , 1 , length ) ; } public int serialize ( int offset , byte [ ] data ) { LittleEndian . putShort ( data , 0 + offset , sid ) ; LittleEndian . putShort ( data , 2 + offset , ( short ) ( getRecordSize ( ) - 4 ) ) ; LittleEndian . putShort ( data , 4 + offset , field_1_row ) ; LittleEndian . putShort ( data , 6 + offset , field_2_col ) ; LittleEndian . putShort ( data , 8 + offset , field_3_flags ) ; LittleEndian . putShort ( data , 10 + offset , field_4_shapeid ) ; LittleEndian . putShort ( data , 12 + offset , ( short ) field_5_author . length ( ) ) ; byte [ ] str = field_5_author . getBytes ( ) ; System . arraycopy ( str , 0 , data , 15 + offset , str . length ) ; return getRecordSize ( ) ; } public int getRecordSize ( ) { int retval = 4 + 2 + 2 + 2 + 2 + 2 + 1 + field_5_author . length ( ) + 1 ; return retval ; } public String toString ( ) { StringBuffer buffer = new StringBuffer ( ) ; buffer . append ( "[NOTE]\n" ) ; buffer . append ( "    .recordid = 0x" + Integer . toHexString ( getSid ( ) ) + ", size = " + getRecordSize ( ) + "\n" ) ; buffer . append ( "    .row =     " + field_1_row + "\n" ) ; buffer . append ( "    .col =     " + field_2_col + "\n" ) ; buffer . append ( "    .flags =   " + field_3_flags + "\n" ) ; buffer . append ( "    .shapeid = " + field_4_shapeid + "\n" ) ; buffer . append ( "    .author =  " + field_5_author + "\n" ) ; buffer . append ( "[/NOTE]\n" ) ; return buffer . toString ( ) ; } public short getRow ( ) { return field_1_row ; } public void setRow ( short row ) { field_1_row = row ; } public short getColumn ( ) { return field_2_col ; } public void setColumn ( short col ) { field_2_col = col ; } public short getFlags ( ) { return field_3_flags ; } public void setFlags ( short flags ) { field_3_flags = flags ; } public short getShapeId ( ) { return field_4_shapeid ; } public void setShapeId ( short id ) { field_4_shapeid = id ; } public String getAuthor ( ) { return field_5_author ; } public void setAuthor ( String author ) { field_5_author = author ; } } 	1
package org . apache . poi . hssf . record ; import org . apache . poi . util . * ; public class LegendRecord extends Record { public final static short sid = 0x1015 ; private int field_1_xAxisUpperLeft ; private int field_2_yAxisUpperLeft ; private int field_3_xSize ; private int field_4_ySize ; private byte field_5_type ; public final static byte TYPE_BOTTOM = 0 ; public final static byte TYPE_CORNER = 1 ; public final static byte TYPE_TOP = 2 ; public final static byte TYPE_RIGHT = 3 ; public final static byte TYPE_LEFT = 4 ; public final static byte TYPE_UNDOCKED = 7 ; private byte field_6_spacing ; public final static byte SPACING_CLOSE = 0 ; public final static byte SPACING_MEDIUM = 1 ; public final static byte SPACING_OPEN = 2 ; private short field_7_options ; private BitField autoPosition = BitFieldFactory . getInstance ( 0x1 ) ; private BitField autoSeries = BitFieldFactory . getInstance ( 0x2 ) ; private BitField autoXPositioning = BitFieldFactory . getInstance ( 0x4 ) ; private BitField autoYPositioning = BitFieldFactory . getInstance ( 0x8 ) ; private BitField vertical = BitFieldFactory . getInstance ( 0x10 ) ; private BitField dataTable = BitFieldFactory . getInstance ( 0x20 ) ; public LegendRecord ( ) { } public LegendRecord ( RecordInputStream in ) { super ( in ) ; } protected void validateSid ( short id ) { if ( id != sid ) { throw new RecordFormatException ( "Not a Legend record" ) ; } } protected void fillFields ( RecordInputStream in ) { field_1_xAxisUpperLeft = in . readInt ( ) ; field_2_yAxisUpperLeft = in . readInt ( ) ; field_3_xSize = in . readInt ( ) ; field_4_ySize = in . readInt ( ) ; field_5_type = in . readByte ( ) ; field_6_spacing = in . readByte ( ) ; field_7_options = in . readShort ( ) ; } public String toString ( ) { StringBuffer buffer = new StringBuffer ( ) ; buffer . append ( "[LEGEND]\n" ) ; buffer . append ( "    .xAxisUpperLeft       = " ) . append ( "0x" ) . append ( HexDump . toHex ( getXAxisUpperLeft ( ) ) ) . append ( " (" ) . append ( getXAxisUpperLeft ( ) ) . append ( " )" ) ; buffer . append ( System . getProperty ( "line.separator" ) ) ; buffer . append ( "    .yAxisUpperLeft       = " ) . append ( "0x" ) . append ( HexDump . toHex ( getYAxisUpperLeft ( ) ) ) . append ( " (" ) . append ( getYAxisUpperLeft ( ) ) . append ( " )" ) ; buffer . append ( System . getProperty ( "line.separator" ) ) ; buffer . append ( "    .xSize                = " ) . append ( "0x" ) . append ( HexDump . toHex ( getXSize ( ) ) ) . append ( " (" ) . append ( getXSize ( ) ) . append ( " )" ) ; buffer . append ( System . getProperty ( "line.separator" ) ) ; buffer . append ( "    .ySize                = " ) . append ( "0x" ) . append ( HexDump . toHex ( getYSize ( ) ) ) . append ( " (" ) . append ( getYSize ( ) ) . append ( " )" ) ; buffer . append ( System . getProperty ( "line.separator" ) ) ; buffer . append ( "    .type                 = " ) . append ( "0x" ) . append ( HexDump . toHex ( getType ( ) ) ) . append ( " (" ) . append ( getType ( ) ) . append ( " )" ) ; buffer . append ( System . getProperty ( "line.separator" ) ) ; buffer . append ( "    .spacing              = " ) . append ( "0x" ) . append ( HexDump . toHex ( getSpacing ( ) ) ) . append ( " (" ) . append ( getSpacing ( ) ) . append ( " )" ) ; buffer . append ( System . getProperty ( "line.separator" ) ) ; buffer . append ( "    .options              = " ) . append ( "0x" ) . append ( HexDump . toHex ( getOptions ( ) ) ) . append ( " (" ) . append ( getOptions ( ) ) . append ( " )" ) ; buffer . append ( System . getProperty ( "line.separator" ) ) ; buffer . append ( "         .autoPosition             = " ) . append ( isAutoPosition ( ) ) . append ( '\n' ) ; buffer . append ( "         .autoSeries               = " ) . append ( isAutoSeries ( ) ) . append ( '\n' ) ; buffer . append ( "         .autoXPositioning         = " ) . append ( isAutoXPositioning ( ) ) . append ( '\n' ) ; buffer . append ( "         .autoYPositioning         = " ) . append ( isAutoYPositioning ( ) ) . append ( '\n' ) ; buffer . append ( "         .vertical                 = " ) . append ( isVertical ( ) ) . append ( '\n' ) ; buffer . append ( "         .dataTable                = " ) . append ( isDataTable ( ) ) . append ( '\n' ) ; buffer . append ( "[/LEGEND]\n" ) ; return buffer . toString ( ) ; } public int serialize ( int offset , byte [ ] data ) { int pos = 0 ; LittleEndian . putShort ( data , 0 + offset , sid ) ; LittleEndian . putShort ( data , 2 + offset , ( short ) ( getRecordSize ( ) - 4 ) ) ; LittleEndian . putInt ( data , 4 + offset + pos , field_1_xAxisUpperLeft ) ; LittleEndian . putInt ( data , 8 + offset + pos , field_2_yAxisUpperLeft ) ; LittleEndian . putInt ( data , 12 + offset + pos , field_3_xSize ) ; LittleEndian . putInt ( data , 16 + offset + pos , field_4_ySize ) ; data [ 20 + offset + pos ] = field_5_type ; data [ 21 + offset + pos ] = field_6_spacing ; LittleEndian . putShort ( data , 22 + offset + pos , field_7_options ) ; return getRecordSize ( ) ; } public int getRecordSize ( ) { return 4 + 4 + 4 + 4 + 4 + 1 + 1 + 2 ; } public short getSid ( ) { return sid ; } public Object clone ( ) { LegendRecord rec = new LegendRecord ( ) ; rec . field_1_xAxisUpperLeft = field_1_xAxisUpperLeft ; rec . field_2_yAxisUpperLeft = field_2_yAxisUpperLeft ; rec . field_3_xSize = field_3_xSize ; rec . field_4_ySize = field_4_ySize ; rec . field_5_type = field_5_type ; rec . field_6_spacing = field_6_spacing ; rec . field_7_options = field_7_options ; return rec ; } public int getXAxisUpperLeft ( ) { return field_1_xAxisUpperLeft ; } public void setXAxisUpperLeft ( int field_1_xAxisUpperLeft ) { this . field_1_xAxisUpperLeft = field_1_xAxisUpperLeft ; } public int getYAxisUpperLeft ( ) { return field_2_yAxisUpperLeft ; } public void setYAxisUpperLeft ( int field_2_yAxisUpperLeft ) { this . field_2_yAxisUpperLeft = field_2_yAxisUpperLeft ; } public int getXSize ( ) { return field_3_xSize ; } public void setXSize ( int field_3_xSize ) { this . field_3_xSize = field_3_xSize ; } public int getYSize ( ) { return field_4_ySize ; } public void setYSize ( int field_4_ySize ) { this . field_4_ySize = field_4_ySize ; } public byte getType ( ) { return field_5_type ; } public void setType ( byte field_5_type ) { this . field_5_type = field_5_type ; } public byte getSpacing ( ) { return field_6_spacing ; } public void setSpacing ( byte field_6_spacing ) { this . field_6_spacing = field_6_spacing ; } public short getOptions ( ) { return field_7_options ; } public void setOptions ( short field_7_options ) { this . field_7_options = field_7_options ; } public void setAutoPosition ( boolean value ) { field_7_options = autoPosition . setShortBoolean ( field_7_options , value ) ; } public boolean isAutoPosition ( ) { return autoPosition . isSet ( field_7_options ) ; } public void setAutoSeries ( boolean value ) { field_7_options = autoSeries . setShortBoolean ( field_7_options , value ) ; } public boolean isAutoSeries ( ) { return autoSeries . isSet ( field_7_options ) ; } public void setAutoXPositioning ( boolean value ) { field_7_options = autoXPositioning . setShortBoolean ( field_7_options , value ) ; } public boolean isAutoXPositioning ( ) { return autoXPositioning . isSet ( field_7_options ) ; } public void setAutoYPositioning ( boolean value ) { field_7_options = autoYPositioning . setShortBoolean ( field_7_options , value ) ; } public boolean isAutoYPositioning ( ) { return autoYPositioning . isSet ( field_7_options ) ; } public void setVertical ( boolean value ) { field_7_options = vertical . setShortBoolean ( field_7_options , value ) ; } public boolean isVertical ( ) { return vertical . isSet ( field_7_options ) ; } public void setDataTable ( boolean value ) { field_7_options = dataTable . setShortBoolean ( field_7_options , value ) ; } public boolean isDataTable ( ) { return dataTable . isSet ( field_7_options ) ; } } 	1
package org . apache . poi . hssf . record ; import org . apache . poi . util . * ; public class DefaultDataLabelTextPropertiesRecord extends Record { public final static short sid = 0x1024 ; private short field_1_categoryDataType ; public final static short CATEGORY_DATA_TYPE_SHOW_LABELS_CHARACTERISTIC = 0 ; public final static short CATEGORY_DATA_TYPE_VALUE_AND_PERCENTAGE_CHARACTERISTIC = 1 ; public final static short CATEGORY_DATA_TYPE_ALL_TEXT_CHARACTERISTIC = 2 ; public DefaultDataLabelTextPropertiesRecord ( ) { } public DefaultDataLabelTextPropertiesRecord ( RecordInputStream in ) { super ( in ) ; } protected void validateSid ( short id ) { if ( id != sid ) { throw new RecordFormatException ( "Not a DefaultDataLabelTextProperties record" ) ; } } protected void fillFields ( RecordInputStream in ) { field_1_categoryDataType = in . readShort ( ) ; } public String toString ( ) { StringBuffer buffer = new StringBuffer ( ) ; buffer . append ( "[DEFAULTTEXT]\n" ) ; buffer . append ( "    .categoryDataType     = " ) . append ( "0x" ) . append ( HexDump . toHex ( getCategoryDataType ( ) ) ) . append ( " (" ) . append ( getCategoryDataType ( ) ) . append ( " )" ) ; buffer . append ( System . getProperty ( "line.separator" ) ) ; buffer . append ( "[/DEFAULTTEXT]\n" ) ; return buffer . toString ( ) ; } public int serialize ( int offset , byte [ ] data ) { int pos = 0 ; LittleEndian . putShort ( data , 0 + offset , sid ) ; LittleEndian . putShort ( data , 2 + offset , ( short ) ( getRecordSize ( ) - 4 ) ) ; LittleEndian . putShort ( data , 4 + offset + pos , field_1_categoryDataType ) ; return getRecordSize ( ) ; } public int getRecordSize ( ) { return 4 + 2 ; } public short getSid ( ) { return sid ; } public Object clone ( ) { DefaultDataLabelTextPropertiesRecord rec = new DefaultDataLabelTextPropertiesRecord ( ) ; rec . field_1_categoryDataType = field_1_categoryDataType ; return rec ; } public short getCategoryDataType ( ) { return field_1_categoryDataType ; } public void setCategoryDataType ( short field_1_categoryDataType ) { this . field_1_categoryDataType = field_1_categoryDataType ; } } 	1
package org . apache . poi . hssf . record ; import org . apache . poi . util . * ; public class SeriesListRecord extends Record { public final static short sid = 0x1016 ; private short [ ] field_1_seriesNumbers ; public SeriesListRecord ( ) { } public SeriesListRecord ( RecordInputStream in ) { super ( in ) ; } protected void validateSid ( short id ) { if ( id != sid ) { throw new RecordFormatException ( "Not a SeriesList record" ) ; } } protected void fillFields ( RecordInputStream in ) { field_1_seriesNumbers = in . readShortArray ( ) ; } public String toString ( ) { StringBuffer buffer = new StringBuffer ( ) ; buffer . append ( "[SERIESLIST]\n" ) ; buffer . append ( "    .seriesNumbers        = " ) . append ( " (" ) . append ( getSeriesNumbers ( ) ) . append ( " )" ) ; buffer . append ( System . getProperty ( "line.separator" ) ) ; buffer . append ( "[/SERIESLIST]\n" ) ; return buffer . toString ( ) ; } public int serialize ( int offset , byte [ ] data ) { int pos = 0 ; LittleEndian . putShort ( data , 0 + offset , sid ) ; LittleEndian . putShort ( data , 2 + offset , ( short ) ( getRecordSize ( ) - 4 ) ) ; LittleEndian . putShortArray ( data , 4 + offset + pos , field_1_seriesNumbers ) ; return getRecordSize ( ) ; } public int getRecordSize ( ) { return 4 + field_1_seriesNumbers . length * 2 + 2 ; } public short getSid ( ) { return sid ; } public Object clone ( ) { SeriesListRecord rec = new SeriesListRecord ( ) ; rec . field_1_seriesNumbers = field_1_seriesNumbers ; return rec ; } public short [ ] getSeriesNumbers ( ) { return field_1_seriesNumbers ; } public void setSeriesNumbers ( short [ ] field_1_seriesNumbers ) { this . field_1_seriesNumbers = field_1_seriesNumbers ; } } 	1
package org . apache . poi . ddf ; public interface EscherRecordFactory { EscherRecord createRecord ( byte [ ] data , int offset ) ; } 	1
package org . apache . poi . poifs . filesystem ; import java . io . * ; import java . util . * ; import org . apache . poi . poifs . common . POIFSConstants ; import org . apache . poi . poifs . dev . POIFSViewable ; import org . apache . poi . poifs . property . DirectoryProperty ; import org . apache . poi . poifs . property . DocumentProperty ; import org . apache . poi . poifs . property . Property ; import org . apache . poi . poifs . property . PropertyTable ; import org . apache . poi . poifs . storage . BATBlock ; import org . apache . poi . poifs . storage . BlockAllocationTableReader ; import org . apache . poi . poifs . storage . BlockAllocationTableWriter ; import org . apache . poi . poifs . storage . BlockList ; import org . apache . poi . poifs . storage . BlockWritable ; import org . apache . poi . poifs . storage . HeaderBlockReader ; import org . apache . poi . poifs . storage . HeaderBlockWriter ; import org . apache . poi . poifs . storage . RawDataBlock ; import org . apache . poi . poifs . storage . RawDataBlockList ; import org . apache . poi . poifs . storage . SmallBlockTableReader ; import org . apache . poi . poifs . storage . SmallBlockTableWriter ; import org . apache . poi . poifs . storage . SmallDocumentBlock ; public class POIFSFileSystem implements POIFSViewable { private PropertyTable _property_table ; private List _documents ; private DirectoryNode _root ; public POIFSFileSystem ( ) { _property_table = new PropertyTable ( ) ; _documents = new ArrayList ( ) ; _root = null ; } public POIFSFileSystem ( final InputStream stream ) throws IOException { this ( ) ; HeaderBlockReader header_block_reader = new HeaderBlockReader ( stream ) ; RawDataBlockList data_blocks = new RawDataBlockList ( stream ) ; new BlockAllocationTableReader ( header_block_reader . getBATCount ( ) , header_block_reader . getBATArray ( ) , header_block_reader . getXBATCount ( ) , header_block_reader . getXBATIndex ( ) , data_blocks ) ; PropertyTable properties = new PropertyTable ( header_block_reader . getPropertyStart ( ) , data_blocks ) ; processProperties ( SmallBlockTableReader . getSmallDocumentBlocks ( data_blocks , properties . getRoot ( ) , header_block_reader . getSBATStart ( ) ) , data_blocks , properties . getRoot ( ) . getChildren ( ) , null ) ; } public DocumentEntry createDocument ( final InputStream stream , final String name ) throws IOException { return getRoot ( ) . createDocument ( name , stream ) ; } public DocumentEntry createDocument ( final String name , final int size , final POIFSWriterListener writer ) throws IOException { return getRoot ( ) . createDocument ( name , size , writer ) ; } public DirectoryEntry createDirectory ( final String name ) throws IOException { return getRoot ( ) . createDirectory ( name ) ; } public void writeFilesystem ( final OutputStream stream ) throws IOException { _property_table . preWrite ( ) ; SmallBlockTableWriter sbtw = new SmallBlockTableWriter ( _documents , _property_table . getRoot ( ) ) ; BlockAllocationTableWriter bat = new BlockAllocationTableWriter ( ) ; List bm_objects = new ArrayList ( ) ; bm_objects . addAll ( _documents ) ; bm_objects . add ( _property_table ) ; bm_objects . add ( sbtw ) ; bm_objects . add ( sbtw . getSBAT ( ) ) ; Iterator iter = bm_objects . iterator ( ) ; while ( iter . hasNext ( ) ) { BATManaged bmo = ( BATManaged ) iter . next ( ) ; int block_count = bmo . countBlocks ( ) ; if ( block_count != 0 ) { bmo . setStartBlock ( bat . allocateSpace ( block_count ) ) ; } else { } } int batStartBlock = bat . createBlocks ( ) ; HeaderBlockWriter header_block_writer = new HeaderBlockWriter ( ) ; BATBlock [ ] xbat_blocks = header_block_writer . setBATBlocks ( bat . countBlocks ( ) , batStartBlock ) ; header_block_writer . setPropertyStart ( _property_table . getStartBlock ( ) ) ; header_block_writer . setSBATStart ( sbtw . getSBAT ( ) . getStartBlock ( ) ) ; header_block_writer . setSBATBlockCount ( sbtw . getSBATBlockCount ( ) ) ; List writers = new ArrayList ( ) ; writers . add ( header_block_writer ) ; writers . addAll ( _documents ) ; writers . add ( _property_table ) ; writers . add ( sbtw ) ; writers . add ( sbtw . getSBAT ( ) ) ; writers . add ( bat ) ; for ( int j = 0 ; j < xbat_blocks . length ; j ++ ) { writers . add ( xbat_blocks [ j ] ) ; } iter = writers . iterator ( ) ; while ( iter . hasNext ( ) ) { BlockWritable writer = ( BlockWritable ) iter . next ( ) ; writer . writeBlocks ( stream ) ; } } public static void main ( String args [ ] ) throws IOException { if ( args . length != 2 ) { System . err . println ( "two arguments required: input filename and output filename" ) ; System . exit ( 1 ) ; } FileInputStream istream = new FileInputStream ( args [ 0 ] ) ; FileOutputStream ostream = new FileOutputStream ( args [ 1 ] ) ; new POIFSFileSystem ( istream ) . writeFilesystem ( ostream ) ; istream . close ( ) ; ostream . close ( ) ; } public DirectoryEntry getRoot ( ) { if ( _root == null ) { _root = new DirectoryNode ( _property_table . getRoot ( ) , this , null ) ; } return _root ; } public DocumentInputStream createDocumentInputStream ( final String documentName ) throws IOException { Entry document = getRoot ( ) . getEntry ( documentName ) ; if ( ! document . isDocumentEntry ( ) ) { throw new IOException ( "Entry '" + documentName + "' is not a DocumentEntry" ) ; } return new DocumentInputStream ( ( DocumentEntry ) document ) ; } void addDocument ( final POIFSDocument document ) { _documents . add ( document ) ; _property_table . addProperty ( document . getDocumentProperty ( ) ) ; } void addDirectory ( final DirectoryProperty directory ) { _property_table . addProperty ( directory ) ; } void remove ( EntryNode entry ) { _property_table . removeProperty ( entry . getProperty ( ) ) ; if ( entry . isDocumentEntry ( ) ) { _documents . remove ( ( ( DocumentNode ) entry ) . getDocument ( ) ) ; } } private void processProperties ( final BlockList small_blocks , final BlockList big_blocks , final Iterator properties , final DirectoryNode dir ) throws IOException { while ( properties . hasNext ( ) ) { Property property = ( Property ) properties . next ( ) ; String name = property . getName ( ) ; DirectoryNode parent = ( dir == null ) ? ( ( DirectoryNode ) getRoot ( ) ) : dir ; if ( property . isDirectory ( ) ) { DirectoryNode new_dir = ( DirectoryNode ) parent . createDirectory ( name ) ; new_dir . setStorageClsid ( property . getStorageClsid ( ) ) ; processProperties ( small_blocks , big_blocks , ( ( DirectoryProperty ) property ) . getChildren ( ) , new_dir ) ; } else { int startBlock = property . getStartBlock ( ) ; int size = property . getSize ( ) ; POIFSDocument document = null ; if ( property . shouldUseSmallBlocks ( ) ) { document = new POIFSDocument ( name , small_blocks . fetchBlocks ( startBlock ) , size ) ; } else { document = new POIFSDocument ( name , big_blocks . fetchBlocks ( startBlock ) , size ) ; } parent . createDocument ( document ) ; } } } public Object [ ] getViewableArray ( ) { if ( preferArray ( ) ) { return ( ( POIFSViewable ) getRoot ( ) ) . getViewableArray ( ) ; } else { return new Object [ 0 ] ; } } public Iterator getViewableIterator ( ) { if ( ! preferArray ( ) ) { return ( ( POIFSViewable ) getRoot ( ) ) . getViewableIterator ( ) ; } else { return Collections . EMPTY_LIST . iterator ( ) ; } } public boolean preferArray ( ) { return ( ( POIFSViewable ) getRoot ( ) ) . preferArray ( ) ; } public String getShortDescription ( ) { return "POIFS FileSystem" ; } } 	1
package org . apache . poi . poifs . filesystem ; import java . io . * ; import java . util . * ; import org . apache . poi . hpsf . ClassID ; import org . apache . poi . poifs . dev . POIFSViewable ; import org . apache . poi . poifs . property . DirectoryProperty ; import org . apache . poi . poifs . property . DocumentProperty ; import org . apache . poi . poifs . property . Property ; public class DirectoryNode extends EntryNode implements DirectoryEntry , POIFSViewable { private Map _entries ; private POIFSFileSystem _filesystem ; private POIFSDocumentPath _path ; DirectoryNode ( final DirectoryProperty property , final POIFSFileSystem filesystem , final DirectoryNode parent ) { super ( property , parent ) ; if ( parent == null ) { _path = new POIFSDocumentPath ( ) ; } else { _path = new POIFSDocumentPath ( parent . _path , new String [ ] { property . getName ( ) } ) ; } _filesystem = filesystem ; _entries = new HashMap ( ) ; Iterator iter = property . getChildren ( ) ; while ( iter . hasNext ( ) ) { Property child = ( Property ) iter . next ( ) ; Entry childNode = null ; if ( child . isDirectory ( ) ) { childNode = new DirectoryNode ( ( DirectoryProperty ) child , _filesystem , this ) ; } else { childNode = new DocumentNode ( ( DocumentProperty ) child , this ) ; } _entries . put ( childNode . getName ( ) , childNode ) ; } } public POIFSDocumentPath getPath ( ) { return _path ; } DocumentEntry createDocument ( final POIFSDocument document ) throws IOException { DocumentProperty property = document . getDocumentProperty ( ) ; DocumentNode rval = new DocumentNode ( property , this ) ; ( ( DirectoryProperty ) getProperty ( ) ) . addChild ( property ) ; _filesystem . addDocument ( document ) ; _entries . put ( property . getName ( ) , rval ) ; return rval ; } boolean changeName ( final String oldName , final String newName ) { boolean rval = false ; EntryNode child = ( EntryNode ) _entries . get ( oldName ) ; if ( child != null ) { rval = ( ( DirectoryProperty ) getProperty ( ) ) . changeName ( child . getProperty ( ) , newName ) ; if ( rval ) { _entries . remove ( oldName ) ; _entries . put ( child . getProperty ( ) . getName ( ) , child ) ; } } return rval ; } boolean deleteEntry ( final EntryNode entry ) { boolean rval = ( ( DirectoryProperty ) getProperty ( ) ) . deleteChild ( entry . getProperty ( ) ) ; if ( rval ) { _entries . remove ( entry . getName ( ) ) ; _filesystem . remove ( entry ) ; } return rval ; } public Iterator getEntries ( ) { return _entries . values ( ) . iterator ( ) ; } public boolean isEmpty ( ) { return _entries . isEmpty ( ) ; } public int getEntryCount ( ) { return _entries . size ( ) ; } public Entry getEntry ( final String name ) throws FileNotFoundException { Entry rval = null ; if ( name != null ) { rval = ( Entry ) _entries . get ( name ) ; } if ( rval == null ) { throw new FileNotFoundException ( "no such entry: \"" + name + "\"" ) ; } return rval ; } public DocumentEntry createDocument ( final String name , final InputStream stream ) throws IOException { return createDocument ( new POIFSDocument ( name , stream ) ) ; } public DocumentEntry createDocument ( final String name , final int size , final POIFSWriterListener writer ) throws IOException { return createDocument ( new POIFSDocument ( name , size , _path , writer ) ) ; } public DirectoryEntry createDirectory ( final String name ) throws IOException { DirectoryProperty property = new DirectoryProperty ( name ) ; DirectoryNode rval = new DirectoryNode ( property , _filesystem , this ) ; ( ( DirectoryProperty ) getProperty ( ) ) . addChild ( property ) ; _filesystem . addDirectory ( property ) ; _entries . put ( name , rval ) ; return rval ; } public ClassID getStorageClsid ( ) { return getProperty ( ) . getStorageClsid ( ) ; } public void setStorageClsid ( ClassID clsidStorage ) { getProperty ( ) . setStorageClsid ( clsidStorage ) ; } public boolean isDirectoryEntry ( ) { return true ; } protected boolean isDeleteOK ( ) { return isEmpty ( ) ; } public Object [ ] getViewableArray ( ) { return new Object [ 0 ] ; } public Iterator getViewableIterator ( ) { List components = new ArrayList ( ) ; components . add ( getProperty ( ) ) ; SortedMap sortedEntries = new TreeMap ( _entries ) ; Iterator iter = sortedEntries . values ( ) . iterator ( ) ; while ( iter . hasNext ( ) ) { components . add ( iter . next ( ) ) ; } return components . iterator ( ) ; } public boolean preferArray ( ) { return false ; } public String getShortDescription ( ) { return getName ( ) ; } } 	0
package org . apache . poi . dev ; import java . io . File ; import java . io . FileNotFoundException ; import java . io . FileReader ; import java . io . Reader ; import java . util . Properties ; import javax . xml . parsers . DocumentBuilder ; import javax . xml . parsers . DocumentBuilderFactory ; import javax . xml . transform . OutputKeys ; import javax . xml . transform . Result ; import javax . xml . transform . Transformer ; import javax . xml . transform . TransformerException ; import javax . xml . transform . TransformerFactory ; import javax . xml . transform . stream . StreamResult ; import javax . xml . transform . stream . StreamSource ; import org . w3c . dom . Document ; import org . w3c . dom . Element ; public class RecordGenerator { public static void main ( String [ ] args ) throws Exception { Class . forName ( "org.apache.poi.generator.FieldIterator" ) ; if ( args . length != 4 ) { System . out . println ( "Usage:" ) ; System . out . println ( "  java org.apache.poi.hssf.util.RecordGenerator RECORD_DEFINTIONS RECORD_STYLES DEST_SRC_PATH TEST_SRC_PATH" ) ; } else { generateRecords ( args [ 0 ] , args [ 1 ] , args [ 2 ] , args [ 3 ] ) ; } } private static void generateRecords ( String defintionsDir , String recordStyleDir , String destSrcPathDir , String testSrcPathDir ) throws Exception { File definitionsFile = new File ( defintionsDir ) ; for ( int i = 0 ; i < definitionsFile . listFiles ( ) . length ; i ++ ) { File file = definitionsFile . listFiles ( ) [ i ] ; if ( file . isFile ( ) && ( file . getName ( ) . endsWith ( "_record.xml" ) || file . getName ( ) . endsWith ( "_type.xml" ) ) ) { DocumentBuilderFactory factory = DocumentBuilderFactory . newInstance ( ) ; DocumentBuilder builder = factory . newDocumentBuilder ( ) ; Document document = builder . parse ( file ) ; Element record = document . getDocumentElement ( ) ; String extendstg = record . getElementsByTagName ( "extends" ) . item ( 0 ) . getFirstChild ( ) . getNodeValue ( ) ; String suffix = record . getElementsByTagName ( "suffix" ) . item ( 0 ) . getFirstChild ( ) . getNodeValue ( ) ; String recordName = record . getAttributes ( ) . getNamedItem ( "name" ) . getNodeValue ( ) ; String packageName = record . getAttributes ( ) . getNamedItem ( "package" ) . getNodeValue ( ) ; packageName = packageName . replace ( '.' , '/' ) ; String destinationPath = destSrcPathDir + "/" + packageName ; File destinationPathFile = new File ( destinationPath ) ; destinationPathFile . mkdirs ( ) ; String destinationFilepath = destinationPath + "/" + recordName + suffix + ".java" ; transform ( file , new File ( destinationFilepath ) , new File ( recordStyleDir + "/" + extendstg . toLowerCase ( ) + ".xsl" ) ) ; System . out . println ( "Generated " + suffix + ": " + destinationFilepath ) ; destinationPath = testSrcPathDir + "/" + packageName ; destinationPathFile = new File ( destinationPath ) ; destinationPathFile . mkdirs ( ) ; destinationFilepath = destinationPath + "/Test" + recordName + suffix + ".java" ; if ( new File ( destinationFilepath ) . exists ( ) == false ) { String temp = ( recordStyleDir + "/" + extendstg . toLowerCase ( ) + "_test.xsl" ) ; transform ( file , new File ( destinationFilepath ) , new File ( temp ) ) ; System . out . println ( "Generated test: " + destinationFilepath ) ; } else { System . out . println ( "Skipped test generation: " + destinationFilepath ) ; } } } } private static void transform ( final File in , final File out , final File xslt ) throws FileNotFoundException , TransformerException { final Reader r = new FileReader ( xslt ) ; final StreamSource ss = new StreamSource ( r ) ; final TransformerFactory tf = TransformerFactory . newInstance ( ) ; final Transformer t ; try { t = tf . newTransformer ( ss ) ; } catch ( TransformerException ex ) { System . err . println ( "Error compiling XSL style sheet " + xslt ) ; throw ex ; } final Properties p = new Properties ( ) ; p . setProperty ( OutputKeys . METHOD , "text" ) ; t . setOutputProperties ( p ) ; final Result result = new StreamResult ( out ) ; t . transform ( new StreamSource ( in ) , result ) ; } } 	0
package org . apache . poi . hpsf ; import org . apache . poi . util . HexDump ; public class ClassID { protected byte [ ] bytes ; public ClassID ( final byte [ ] src , final int offset ) { read ( src , offset ) ; } public ClassID ( ) { bytes = new byte [ LENGTH ] ; for ( int i = 0 ; i < LENGTH ; i ++ ) bytes [ i ] = 0x00 ; } public static final int LENGTH = 16 ; public int length ( ) { return LENGTH ; } public byte [ ] getBytes ( ) { return bytes ; } public void setBytes ( final byte [ ] bytes ) { for ( int i = 0 ; i < this . bytes . length ; i ++ ) this . bytes [ i ] = bytes [ i ] ; } public byte [ ] read ( final byte [ ] src , final int offset ) { bytes = new byte [ 16 ] ; bytes [ 0 ] = src [ 3 + offset ] ; bytes [ 1 ] = src [ 2 + offset ] ; bytes [ 2 ] = src [ 1 + offset ] ; bytes [ 3 ] = src [ 0 + offset ] ; bytes [ 4 ] = src [ 5 + offset ] ; bytes [ 5 ] = src [ 4 + offset ] ; bytes [ 6 ] = src [ 7 + offset ] ; bytes [ 7 ] = src [ 6 + offset ] ; for ( int i = 8 ; i < 16 ; i ++ ) bytes [ i ] = src [ i + offset ] ; return bytes ; } public void write ( final byte [ ] dst , final int offset ) throws ArrayStoreException { if ( dst . length < 16 ) throw new ArrayStoreException ( "Destination byte[] must have room for at least 16 bytes, " + "but has a length of only " + dst . length + "." ) ; dst [ 0 + offset ] = bytes [ 3 ] ; dst [ 1 + offset ] = bytes [ 2 ] ; dst [ 2 + offset ] = bytes [ 1 ] ; dst [ 3 + offset ] = bytes [ 0 ] ; dst [ 4 + offset ] = bytes [ 5 ] ; dst [ 5 + offset ] = bytes [ 4 ] ; dst [ 6 + offset ] = bytes [ 7 ] ; dst [ 7 + offset ] = bytes [ 6 ] ; for ( int i = 8 ; i < 16 ; i ++ ) dst [ i + offset ] = bytes [ i ] ; } public boolean equals ( final Object o ) { if ( o == null || ! ( o instanceof ClassID ) ) return false ; final ClassID cid = ( ClassID ) o ; if ( bytes . length != cid . bytes . length ) return false ; for ( int i = 0 ; i < bytes . length ; i ++ ) if ( bytes [ i ] != cid . bytes [ i ] ) return false ; return true ; } public int hashCode ( ) { return new String ( bytes ) . hashCode ( ) ; } public String toString ( ) { StringBuffer sbClassId = new StringBuffer ( 38 ) ; sbClassId . append ( '{' ) ; for ( int i = 0 ; i < 16 ; i ++ ) { sbClassId . append ( HexDump . toHex ( bytes [ i ] ) ) ; if ( i == 3 || i == 5 || i == 7 || i == 9 ) sbClassId . append ( '-' ) ; } sbClassId . append ( '}' ) ; return sbClassId . toString ( ) ; } } 	0
package org . apache . poi . poifs . filesystem ; public interface POIFSWriterListener { public void processPOIFSWriterEvent ( POIFSWriterEvent event ) ; } 	0
package org . apache . poi . hssf . record ; import org . apache . poi . util . * ; public class CategorySeriesAxisRecord extends Record { public final static short sid = 0x1020 ; private short field_1_crossingPoint ; private short field_2_labelFrequency ; private short field_3_tickMarkFrequency ; private short field_4_options ; private BitField valueAxisCrossing = BitFieldFactory . getInstance ( 0x1 ) ; private BitField crossesFarRight = BitFieldFactory . getInstance ( 0x2 ) ; private BitField reversed = BitFieldFactory . getInstance ( 0x4 ) ; public CategorySeriesAxisRecord ( ) { } public CategorySeriesAxisRecord ( RecordInputStream in ) { super ( in ) ; } protected void validateSid ( short id ) { if ( id != sid ) { throw new RecordFormatException ( "Not a CategorySeriesAxis record" ) ; } } protected void fillFields ( RecordInputStream in ) { field_1_crossingPoint = in . readShort ( ) ; field_2_labelFrequency = in . readShort ( ) ; field_3_tickMarkFrequency = in . readShort ( ) ; field_4_options = in . readShort ( ) ; } public String toString ( ) { StringBuffer buffer = new StringBuffer ( ) ; buffer . append ( "[CATSERRANGE]\n" ) ; buffer . append ( "    .crossingPoint        = " ) . append ( "0x" ) . append ( HexDump . toHex ( getCrossingPoint ( ) ) ) . append ( " (" ) . append ( getCrossingPoint ( ) ) . append ( " )" ) ; buffer . append ( System . getProperty ( "line.separator" ) ) ; buffer . append ( "    .labelFrequency       = " ) . append ( "0x" ) . append ( HexDump . toHex ( getLabelFrequency ( ) ) ) . append ( " (" ) . append ( getLabelFrequency ( ) ) . append ( " )" ) ; buffer . append ( System . getProperty ( "line.separator" ) ) ; buffer . append ( "    .tickMarkFrequency    = " ) . append ( "0x" ) . append ( HexDump . toHex ( getTickMarkFrequency ( ) ) ) . append ( " (" ) . append ( getTickMarkFrequency ( ) ) . append ( " )" ) ; buffer . append ( System . getProperty ( "line.separator" ) ) ; buffer . append ( "    .options              = " ) . append ( "0x" ) . append ( HexDump . toHex ( getOptions ( ) ) ) . append ( " (" ) . append ( getOptions ( ) ) . append ( " )" ) ; buffer . append ( System . getProperty ( "line.separator" ) ) ; buffer . append ( "         .valueAxisCrossing        = " ) . append ( isValueAxisCrossing ( ) ) . append ( '\n' ) ; buffer . append ( "         .crossesFarRight          = " ) . append ( isCrossesFarRight ( ) ) . append ( '\n' ) ; buffer . append ( "         .reversed                 = " ) . append ( isReversed ( ) ) . append ( '\n' ) ; buffer . append ( "[/CATSERRANGE]\n" ) ; return buffer . toString ( ) ; } public int serialize ( int offset , byte [ ] data ) { int pos = 0 ; LittleEndian . putShort ( data , 0 + offset , sid ) ; LittleEndian . putShort ( data , 2 + offset , ( short ) ( getRecordSize ( ) - 4 ) ) ; LittleEndian . putShort ( data , 4 + offset + pos , field_1_crossingPoint ) ; LittleEndian . putShort ( data , 6 + offset + pos , field_2_labelFrequency ) ; LittleEndian . putShort ( data , 8 + offset + pos , field_3_tickMarkFrequency ) ; LittleEndian . putShort ( data , 10 + offset + pos , field_4_options ) ; return getRecordSize ( ) ; } public int getRecordSize ( ) { return 4 + 2 + 2 + 2 + 2 ; } public short getSid ( ) { return sid ; } public Object clone ( ) { CategorySeriesAxisRecord rec = new CategorySeriesAxisRecord ( ) ; rec . field_1_crossingPoint = field_1_crossingPoint ; rec . field_2_labelFrequency = field_2_labelFrequency ; rec . field_3_tickMarkFrequency = field_3_tickMarkFrequency ; rec . field_4_options = field_4_options ; return rec ; } public short getCrossingPoint ( ) { return field_1_crossingPoint ; } public void setCrossingPoint ( short field_1_crossingPoint ) { this . field_1_crossingPoint = field_1_crossingPoint ; } public short getLabelFrequency ( ) { return field_2_labelFrequency ; } public void setLabelFrequency ( short field_2_labelFrequency ) { this . field_2_labelFrequency = field_2_labelFrequency ; } public short getTickMarkFrequency ( ) { return field_3_tickMarkFrequency ; } public void setTickMarkFrequency ( short field_3_tickMarkFrequency ) { this . field_3_tickMarkFrequency = field_3_tickMarkFrequency ; } public short getOptions ( ) { return field_4_options ; } public void setOptions ( short field_4_options ) { this . field_4_options = field_4_options ; } public void setValueAxisCrossing ( boolean value ) { field_4_options = valueAxisCrossing . setShortBoolean ( field_4_options , value ) ; } public boolean isValueAxisCrossing ( ) { return valueAxisCrossing . isSet ( field_4_options ) ; } public void setCrossesFarRight ( boolean value ) { field_4_options = crossesFarRight . setShortBoolean ( field_4_options , value ) ; } public boolean isCrossesFarRight ( ) { return crossesFarRight . isSet ( field_4_options ) ; } public void setReversed ( boolean value ) { field_4_options = reversed . setShortBoolean ( field_4_options , value ) ; } public boolean isReversed ( ) { return reversed . isSet ( field_4_options ) ; } } 	1
package org . apache . poi . poifs . filesystem ; public class DocumentDescriptor { private POIFSDocumentPath path ; private String name ; private int hashcode = 0 ; public DocumentDescriptor ( final POIFSDocumentPath path , final String name ) { if ( path == null ) { throw new NullPointerException ( "path must not be null" ) ; } if ( name == null ) { throw new NullPointerException ( "name must not be null" ) ; } if ( name . length ( ) == 0 ) { throw new IllegalArgumentException ( "name cannot be empty" ) ; } this . path = path ; this . name = name ; } public boolean equals ( final Object o ) { boolean rval = false ; if ( ( o != null ) && ( o . getClass ( ) == this . getClass ( ) ) ) { if ( this == o ) { rval = true ; } else { DocumentDescriptor descriptor = ( DocumentDescriptor ) o ; rval = this . path . equals ( descriptor . path ) && this . name . equals ( descriptor . name ) ; } } return rval ; } public int hashCode ( ) { if ( hashcode == 0 ) { hashcode = path . hashCode ( ) ^ name . hashCode ( ) ; } return hashcode ; } public String toString ( ) { StringBuffer buffer = new StringBuffer ( 40 * ( path . length ( ) + 1 ) ) ; for ( int j = 0 ; j < path . length ( ) ; j ++ ) { buffer . append ( path . getComponent ( j ) ) . append ( "/" ) ; } buffer . append ( name ) ; return buffer . toString ( ) ; } } 	0
package org . apache . poi . hssf . record ; import org . apache . poi . util . * ; public class FontIndexRecord extends Record { public final static short sid = 0x1026 ; private short field_1_fontIndex ; public FontIndexRecord ( ) { } public FontIndexRecord ( RecordInputStream in ) { super ( in ) ; } protected void validateSid ( short id ) { if ( id != sid ) { throw new RecordFormatException ( "Not a FontIndex record" ) ; } } protected void fillFields ( RecordInputStream in ) { field_1_fontIndex = in . readShort ( ) ; } public String toString ( ) { StringBuffer buffer = new StringBuffer ( ) ; buffer . append ( "[FONTX]\n" ) ; buffer . append ( "    .fontIndex            = " ) . append ( "0x" ) . append ( HexDump . toHex ( getFontIndex ( ) ) ) . append ( " (" ) . append ( getFontIndex ( ) ) . append ( " )" ) ; buffer . append ( System . getProperty ( "line.separator" ) ) ; buffer . append ( "[/FONTX]\n" ) ; return buffer . toString ( ) ; } public int serialize ( int offset , byte [ ] data ) { int pos = 0 ; LittleEndian . putShort ( data , 0 + offset , sid ) ; LittleEndian . putShort ( data , 2 + offset , ( short ) ( getRecordSize ( ) - 4 ) ) ; LittleEndian . putShort ( data , 4 + offset + pos , field_1_fontIndex ) ; return getRecordSize ( ) ; } public int getRecordSize ( ) { return 4 + 2 ; } public short getSid ( ) { return sid ; } public Object clone ( ) { FontIndexRecord rec = new FontIndexRecord ( ) ; rec . field_1_fontIndex = field_1_fontIndex ; return rec ; } public short getFontIndex ( ) { return field_1_fontIndex ; } public void setFontIndex ( short field_1_fontIndex ) { this . field_1_fontIndex = field_1_fontIndex ; } } 	1
package org . apache . poi . hssf . record . formula ; import org . apache . poi . hssf . model . Workbook ; import org . apache . poi . hssf . record . RecordInputStream ; public class LessEqualPtg extends OperationPtg { public final static int SIZE = 1 ; public final static byte sid = 0x0a ; public LessEqualPtg ( ) { } public LessEqualPtg ( RecordInputStream in ) { } public void writeBytes ( byte [ ] array , int offset ) { array [ offset + 0 ] = sid ; } public int getSize ( ) { return SIZE ; } public int getType ( ) { return TYPE_BINARY ; } public int getNumberOfOperands ( ) { return 2 ; } public String toFormulaString ( Workbook book ) { return "<=" ; } public String toFormulaString ( String [ ] operands ) { StringBuffer buffer = new StringBuffer ( ) ; buffer . append ( operands [ 0 ] ) ; buffer . append ( toFormulaString ( ( Workbook ) null ) ) ; buffer . append ( operands [ 1 ] ) ; return buffer . toString ( ) ; } public Object clone ( ) { return new LessEqualPtg ( ) ; } } 	1
package org . apache . poi . hssf . record . formula ; import org . apache . poi . hssf . model . Workbook ; import org . apache . poi . hssf . record . RecordInputStream ; public class PercentPtg extends OperationPtg { public final static int SIZE = 1 ; public final static byte sid = 0x14 ; private final static String PERCENT = "%" ; public PercentPtg ( ) { } public PercentPtg ( RecordInputStream in ) { } public void writeBytes ( byte [ ] array , int offset ) { array [ offset + 0 ] = sid ; } public int getSize ( ) { return SIZE ; } public int getType ( ) { return TYPE_UNARY ; } public int getNumberOfOperands ( ) { return 1 ; } public String toFormulaString ( Workbook book ) { return "%" ; } public String toFormulaString ( String [ ] operands ) { StringBuffer buffer = new StringBuffer ( ) ; buffer . append ( operands [ 0 ] ) ; buffer . append ( PERCENT ) ; return buffer . toString ( ) ; } public byte getDefaultOperandClass ( ) { return Ptg . CLASS_VALUE ; } public Object clone ( ) { return new PercentPtg ( ) ; } } 	0
package org . apache . poi . hssf . usermodel ; import org . apache . poi . ddf . EscherBitmapBlip ; public class HSSFPictureData { public static final short MSOBI_WMF = 0x2160 ; public static final short MSOBI_EMF = 0x3D40 ; public static final short MSOBI_PICT = 0x5420 ; public static final short MSOBI_PNG = 0x6E00 ; public static final short MSOBI_JPEG = 0x46A0 ; public static final short MSOBI_DIB = 0x7A80 ; public static final short FORMAT_MASK = ( short ) 0xFFF0 ; private EscherBitmapBlip blip ; HSSFPictureData ( EscherBitmapBlip blip ) { this . blip = blip ; } public byte [ ] getData ( ) { return blip . getPicturedata ( ) ; } public String suggestFileExtension ( ) { switch ( blip . getOptions ( ) & FORMAT_MASK ) { case MSOBI_WMF : return "wmf" ; case MSOBI_EMF : return "emf" ; case MSOBI_PICT : return "pict" ; case MSOBI_PNG : return "png" ; case MSOBI_JPEG : return "jpeg" ; case MSOBI_DIB : return "dib" ; default : return "" ; } } } 	1
package org . apache . poi . util ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import java . util . * ; public class CommonsLogger extends POILogger { private static LogFactory _creator = LogFactory . getFactory ( ) ; private Log log = null ; public void initialize ( final String cat ) { this . log = _creator . getInstance ( cat ) ; } public void log ( final int level , final Object obj1 ) { if ( level == FATAL ) { if ( log . isFatalEnabled ( ) ) { log . fatal ( obj1 ) ; } } else if ( level == ERROR ) { if ( log . isErrorEnabled ( ) ) { log . error ( obj1 ) ; } } else if ( level == WARN ) { if ( log . isWarnEnabled ( ) ) { log . warn ( obj1 ) ; } } else if ( level == INFO ) { if ( log . isInfoEnabled ( ) ) { log . info ( obj1 ) ; } } else if ( level == DEBUG ) { if ( log . isDebugEnabled ( ) ) { log . debug ( obj1 ) ; } } else { if ( log . isTraceEnabled ( ) ) { log . trace ( obj1 ) ; } } } public boolean check ( final int level ) { if ( level == FATAL ) { if ( log . isFatalEnabled ( ) ) { return true ; } } else if ( level == ERROR ) { if ( log . isErrorEnabled ( ) ) { return true ; } } else if ( level == WARN ) { if ( log . isWarnEnabled ( ) ) { return true ; } } else if ( level == INFO ) { if ( log . isInfoEnabled ( ) ) { return true ; } } else if ( level == DEBUG ) { if ( log . isDebugEnabled ( ) ) { return true ; } } return false ; } } 	0
package org . apache . poi . hssf . record ; import org . apache . poi . util . * ; public class TextObjectBaseRecord extends Record { public final static short sid = 0x1B6 ; private short field_1_options ; private BitField reserved1 = BitFieldFactory . getInstance ( 0x1 ) ; private BitField HorizontalTextAlignment = BitFieldFactory . getInstance ( 0x000E ) ; public final static short HORIZONTAL_TEXT_ALIGNMENT_LEFT_ALIGNED = 1 ; public final static short HORIZONTAL_TEXT_ALIGNMENT_CENTERED = 2 ; public final static short HORIZONTAL_TEXT_ALIGNMENT_RIGHT_ALIGNED = 3 ; public final static short HORIZONTAL_TEXT_ALIGNMENT_JUSTIFIED = 4 ; private BitField VerticalTextAlignment = BitFieldFactory . getInstance ( 0x0070 ) ; public final static short VERTICAL_TEXT_ALIGNMENT_TOP = 1 ; public final static short VERTICAL_TEXT_ALIGNMENT_CENTER = 2 ; public final static short VERTICAL_TEXT_ALIGNMENT_BOTTOM = 3 ; public final static short VERTICAL_TEXT_ALIGNMENT_JUSTIFY = 4 ; private BitField reserved2 = BitFieldFactory . getInstance ( 0x0180 ) ; private BitField textLocked = BitFieldFactory . getInstance ( 0x200 ) ; private BitField reserved3 = BitFieldFactory . getInstance ( 0xFC00 ) ; private short field_2_textOrientation ; public final static short TEXT_ORIENTATION_NONE = 0 ; public final static short TEXT_ORIENTATION_TOP_TO_BOTTOM = 1 ; public final static short TEXT_ORIENTATION_ROT_RIGHT = 2 ; public final static short TEXT_ORIENTATION_ROT_LEFT = 3 ; private short field_3_reserved4 ; private short field_4_reserved5 ; private short field_5_reserved6 ; private short field_6_textLength ; private short field_7_formattingRunLength ; private int field_8_reserved7 ; public TextObjectBaseRecord ( ) { } public TextObjectBaseRecord ( RecordInputStream in ) { super ( in ) ; } protected void validateSid ( short id ) { if ( id != sid ) { throw new RecordFormatException ( "Not a TextObjectBase record" ) ; } } protected void fillFields ( RecordInputStream in ) { field_1_options = in . readShort ( ) ; field_2_textOrientation = in . readShort ( ) ; field_3_reserved4 = in . readShort ( ) ; field_4_reserved5 = in . readShort ( ) ; field_5_reserved6 = in . readShort ( ) ; field_6_textLength = in . readShort ( ) ; field_7_formattingRunLength = in . readShort ( ) ; field_8_reserved7 = in . readInt ( ) ; } public String toString ( ) { StringBuffer buffer = new StringBuffer ( ) ; buffer . append ( "[TXO]\n" ) ; buffer . append ( "    .options              = " ) . append ( "0x" ) . append ( HexDump . toHex ( getOptions ( ) ) ) . append ( " (" ) . append ( getOptions ( ) ) . append ( " )" ) ; buffer . append ( System . getProperty ( "line.separator" ) ) ; buffer . append ( "         .reserved1                = " ) . append ( isReserved1 ( ) ) . append ( '\n' ) ; buffer . append ( "         .HorizontalTextAlignment     = " ) . append ( getHorizontalTextAlignment ( ) ) . append ( '\n' ) ; buffer . append ( "         .VerticalTextAlignment     = " ) . append ( getVerticalTextAlignment ( ) ) . append ( '\n' ) ; buffer . append ( "         .reserved2                = " ) . append ( getReserved2 ( ) ) . append ( '\n' ) ; buffer . append ( "         .textLocked               = " ) . append ( isTextLocked ( ) ) . append ( '\n' ) ; buffer . append ( "         .reserved3                = " ) . append ( getReserved3 ( ) ) . append ( '\n' ) ; buffer . append ( "    .textOrientation      = " ) . append ( "0x" ) . append ( HexDump . toHex ( getTextOrientation ( ) ) ) . append ( " (" ) . append ( getTextOrientation ( ) ) . append ( " )" ) ; buffer . append ( System . getProperty ( "line.separator" ) ) ; buffer . append ( "    .reserved4            = " ) . append ( "0x" ) . append ( HexDump . toHex ( getReserved4 ( ) ) ) . append ( " (" ) . append ( getReserved4 ( ) ) . append ( " )" ) ; buffer . append ( System . getProperty ( "line.separator" ) ) ; buffer . append ( "    .reserved5            = " ) . append ( "0x" ) . append ( HexDump . toHex ( getReserved5 ( ) ) ) . append ( " (" ) . append ( getReserved5 ( ) ) . append ( " )" ) ; buffer . append ( System . getProperty ( "line.separator" ) ) ; buffer . append ( "    .reserved6            = " ) . append ( "0x" ) . append ( HexDump . toHex ( getReserved6 ( ) ) ) . append ( " (" ) . append ( getReserved6 ( ) ) . append ( " )" ) ; buffer . append ( System . getProperty ( "line.separator" ) ) ; buffer . append ( "    .textLength           = " ) . append ( "0x" ) . append ( HexDump . toHex ( getTextLength ( ) ) ) . append ( " (" ) . append ( getTextLength ( ) ) . append ( " )" ) ; buffer . append ( System . getProperty ( "line.separator" ) ) ; buffer . append ( "    .formattingRunLength  = " ) . append ( "0x" ) . append ( HexDump . toHex ( getFormattingRunLength ( ) ) ) . append ( " (" ) . append ( getFormattingRunLength ( ) ) . append ( " )" ) ; buffer . append ( System . getProperty ( "line.separator" ) ) ; buffer . append ( "    .reserved7            = " ) . append ( "0x" ) . append ( HexDump . toHex ( getReserved7 ( ) ) ) . append ( " (" ) . append ( getReserved7 ( ) ) . append ( " )" ) ; buffer . append ( System . getProperty ( "line.separator" ) ) ; buffer . append ( "[/TXO]\n" ) ; return buffer . toString ( ) ; } public int serialize ( int offset , byte [ ] data ) { int pos = 0 ; LittleEndian . putShort ( data , 0 + offset , sid ) ; LittleEndian . putShort ( data , 2 + offset , ( short ) ( getRecordSize ( ) - 4 ) ) ; LittleEndian . putShort ( data , 4 + offset + pos , field_1_options ) ; LittleEndian . putShort ( data , 6 + offset + pos , field_2_textOrientation ) ; LittleEndian . putShort ( data , 8 + offset + pos , field_3_reserved4 ) ; LittleEndian . putShort ( data , 10 + offset + pos , field_4_reserved5 ) ; LittleEndian . putShort ( data , 12 + offset + pos , field_5_reserved6 ) ; LittleEndian . putShort ( data , 14 + offset + pos , field_6_textLength ) ; LittleEndian . putShort ( data , 16 + offset + pos , field_7_formattingRunLength ) ; LittleEndian . putInt ( data , 18 + offset + pos , field_8_reserved7 ) ; return getRecordSize ( ) ; } public int getRecordSize ( ) { return 4 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 4 ; } public short getSid ( ) { return sid ; } public Object clone ( ) { TextObjectBaseRecord rec = new TextObjectBaseRecord ( ) ; rec . field_1_options = field_1_options ; rec . field_2_textOrientation = field_2_textOrientation ; rec . field_3_reserved4 = field_3_reserved4 ; rec . field_4_reserved5 = field_4_reserved5 ; rec . field_5_reserved6 = field_5_reserved6 ; rec . field_6_textLength = field_6_textLength ; rec . field_7_formattingRunLength = field_7_formattingRunLength ; rec . field_8_reserved7 = field_8_reserved7 ; return rec ; } public short getOptions ( ) { return field_1_options ; } public void setOptions ( short field_1_options ) { this . field_1_options = field_1_options ; } public short getTextOrientation ( ) { return field_2_textOrientation ; } public void setTextOrientation ( short field_2_textOrientation ) { this . field_2_textOrientation = field_2_textOrientation ; } public short getReserved4 ( ) { return field_3_reserved4 ; } public void setReserved4 ( short field_3_reserved4 ) { this . field_3_reserved4 = field_3_reserved4 ; } public short getReserved5 ( ) { return field_4_reserved5 ; } public void setReserved5 ( short field_4_reserved5 ) { this . field_4_reserved5 = field_4_reserved5 ; } public short getReserved6 ( ) { return field_5_reserved6 ; } public void setReserved6 ( short field_5_reserved6 ) { this . field_5_reserved6 = field_5_reserved6 ; } public short getTextLength ( ) { return field_6_textLength ; } public void setTextLength ( short field_6_textLength ) { this . field_6_textLength = field_6_textLength ; } public short getFormattingRunLength ( ) { return field_7_formattingRunLength ; } public void setFormattingRunLength ( short field_7_formattingRunLength ) { this . field_7_formattingRunLength = field_7_formattingRunLength ; } public int getReserved7 ( ) { return field_8_reserved7 ; } public void setReserved7 ( int field_8_reserved7 ) { this . field_8_reserved7 = field_8_reserved7 ; } public void setReserved1 ( boolean value ) { field_1_options = reserved1 . setShortBoolean ( field_1_options , value ) ; } public boolean isReserved1 ( ) { return reserved1 . isSet ( field_1_options ) ; } public void setHorizontalTextAlignment ( short value ) { field_1_options = HorizontalTextAlignment . setShortValue ( field_1_options , value ) ; } public short getHorizontalTextAlignment ( ) { return HorizontalTextAlignment . getShortValue ( field_1_options ) ; } public void setVerticalTextAlignment ( short value ) { field_1_options = VerticalTextAlignment . setShortValue ( field_1_options , value ) ; } public short getVerticalTextAlignment ( ) { return VerticalTextAlignment . getShortValue ( field_1_options ) ; } public void setReserved2 ( short value ) { field_1_options = reserved2 . setShortValue ( field_1_options , value ) ; } public short getReserved2 ( ) { return reserved2 . getShortValue ( field_1_options ) ; } public void setTextLocked ( boolean value ) { field_1_options = textLocked . setShortBoolean ( field_1_options , value ) ; } public boolean isTextLocked ( ) { return textLocked . isSet ( field_1_options ) ; } public void setReserved3 ( short value ) { field_1_options = reserved3 . setShortValue ( field_1_options , value ) ; } public short getReserved3 ( ) { return reserved3 . getShortValue ( field_1_options ) ; } } 	1
package org . apache . poi . hssf . usermodel ; import org . apache . poi . hssf . util . HSSFColor ; import org . apache . poi . util . POILogFactory ; import org . apache . poi . util . POILogger ; import java . awt . * ; import java . awt . image . ImageObserver ; import java . text . AttributedCharacterIterator ; public class EscherGraphics extends Graphics { private HSSFShapeGroup escherGroup ; private HSSFWorkbook workbook ; private float verticalPointsPerPixel = 1.0f ; private float verticalPixelsPerPoint ; private Color foreground ; private Color background = Color . white ; private Font font ; private static POILogger logger = POILogFactory . getLogger ( EscherGraphics . class ) ; public EscherGraphics ( HSSFShapeGroup escherGroup , HSSFWorkbook workbook , Color forecolor , float verticalPointsPerPixel ) { this . escherGroup = escherGroup ; this . workbook = workbook ; this . verticalPointsPerPixel = verticalPointsPerPixel ; this . verticalPixelsPerPoint = 1 / verticalPointsPerPixel ; this . font = new Font ( "Arial" , 0 , 10 ) ; this . foreground = forecolor ; } EscherGraphics ( HSSFShapeGroup escherGroup , HSSFWorkbook workbook , Color foreground , Font font , float verticalPointsPerPixel ) { this . escherGroup = escherGroup ; this . workbook = workbook ; this . foreground = foreground ; this . font = font ; this . verticalPointsPerPixel = verticalPointsPerPixel ; this . verticalPixelsPerPoint = 1 / verticalPointsPerPixel ; } public void clearRect ( int x , int y , int width , int height ) { Color color = foreground ; setColor ( background ) ; fillRect ( x , y , width , height ) ; setColor ( color ) ; } public void clipRect ( int x , int y , int width , int height ) { if ( logger . check ( POILogger . WARN ) ) logger . log ( POILogger . WARN , "clipRect not supported" ) ; } public void copyArea ( int x , int y , int width , int height , int dx , int dy ) { if ( logger . check ( POILogger . WARN ) ) logger . log ( POILogger . WARN , "copyArea not supported" ) ; } public Graphics create ( ) { EscherGraphics g = new EscherGraphics ( escherGroup , workbook , foreground , font , verticalPointsPerPixel ) ; return g ; } public void dispose ( ) { } public void drawArc ( int x , int y , int width , int height , int startAngle , int arcAngle ) { if ( logger . check ( POILogger . WARN ) ) logger . log ( POILogger . WARN , "drawArc not supported" ) ; } public boolean drawImage ( Image img , int dx1 , int dy1 , int dx2 , int dy2 , int sx1 , int sy1 , int sx2 , int sy2 , Color bgcolor , ImageObserver observer ) { if ( logger . check ( POILogger . WARN ) ) logger . log ( POILogger . WARN , "drawImage not supported" ) ; return true ; } public boolean drawImage ( Image img , int dx1 , int dy1 , int dx2 , int dy2 , int sx1 , int sy1 , int sx2 , int sy2 , ImageObserver observer ) { if ( logger . check ( POILogger . WARN ) ) logger . log ( POILogger . WARN , "drawImage not supported" ) ; return true ; } public boolean drawImage ( Image image , int i , int j , int k , int l , Color color , ImageObserver imageobserver ) { return drawImage ( image , i , j , i + k , j + l , 0 , 0 , image . getWidth ( imageobserver ) , image . getHeight ( imageobserver ) , color , imageobserver ) ; } public boolean drawImage ( Image image , int i , int j , int k , int l , ImageObserver imageobserver ) { return drawImage ( image , i , j , i + k , j + l , 0 , 0 , image . getWidth ( imageobserver ) , image . getHeight ( imageobserver ) , imageobserver ) ; } public boolean drawImage ( Image image , int i , int j , Color color , ImageObserver imageobserver ) { return drawImage ( image , i , j , image . getWidth ( imageobserver ) , image . getHeight ( imageobserver ) , color , imageobserver ) ; } public boolean drawImage ( Image image , int i , int j , ImageObserver imageobserver ) { return drawImage ( image , i , j , image . getWidth ( imageobserver ) , image . getHeight ( imageobserver ) , imageobserver ) ; } public void drawLine ( int x1 , int y1 , int x2 , int y2 ) { drawLine ( x1 , y1 , x2 , y2 , 0 ) ; } public void drawLine ( int x1 , int y1 , int x2 , int y2 , int width ) { HSSFSimpleShape shape = escherGroup . createShape ( new HSSFChildAnchor ( x1 , y1 , x2 , y2 ) ) ; shape . setShapeType ( HSSFSimpleShape . OBJECT_TYPE_LINE ) ; shape . setLineWidth ( width ) ; shape . setLineStyleColor ( foreground . getRed ( ) , foreground . getGreen ( ) , foreground . getBlue ( ) ) ; } public void drawOval ( int x , int y , int width , int height ) { HSSFSimpleShape shape = escherGroup . createShape ( new HSSFChildAnchor ( x , y , x + width , y + height ) ) ; shape . setShapeType ( HSSFSimpleShape . OBJECT_TYPE_OVAL ) ; shape . setLineWidth ( 0 ) ; shape . setLineStyleColor ( foreground . getRed ( ) , foreground . getGreen ( ) , foreground . getBlue ( ) ) ; shape . setNoFill ( true ) ; } public void drawPolygon ( int xPoints [ ] , int yPoints [ ] , int nPoints ) { int right = findBiggest ( xPoints ) ; int bottom = findBiggest ( yPoints ) ; int left = findSmallest ( xPoints ) ; int top = findSmallest ( yPoints ) ; HSSFPolygon shape = escherGroup . createPolygon ( new HSSFChildAnchor ( left , top , right , bottom ) ) ; shape . setPolygonDrawArea ( right - left , bottom - top ) ; shape . setPoints ( addToAll ( xPoints , - left ) , addToAll ( yPoints , - top ) ) ; shape . setLineStyleColor ( foreground . getRed ( ) , foreground . getGreen ( ) , foreground . getBlue ( ) ) ; shape . setLineWidth ( 0 ) ; shape . setNoFill ( true ) ; } private int [ ] addToAll ( int [ ] values , int amount ) { int [ ] result = new int [ values . length ] ; for ( int i = 0 ; i < values . length ; i ++ ) result [ i ] = values [ i ] + amount ; return result ; } public void drawPolyline ( int xPoints [ ] , int yPoints [ ] , int nPoints ) { if ( logger . check ( POILogger . WARN ) ) logger . log ( POILogger . WARN , "drawPolyline not supported" ) ; } public void drawRect ( int x , int y , int width , int height ) { if ( logger . check ( POILogger . WARN ) ) logger . log ( POILogger . WARN , "drawRect not supported" ) ; } public void drawRoundRect ( int x , int y , int width , int height , int arcWidth , int arcHeight ) { if ( logger . check ( POILogger . WARN ) ) logger . log ( POILogger . WARN , "drawRoundRect not supported" ) ; } public void drawString ( String str , int x , int y ) { if ( str == null || str . equals ( "" ) ) return ; Font excelFont = font ; if ( font . getName ( ) . equals ( "SansSerif" ) ) { excelFont = new Font ( "Arial" , font . getStyle ( ) , ( int ) ( font . getSize ( ) / verticalPixelsPerPoint ) ) ; } else { excelFont = new Font ( font . getName ( ) , font . getStyle ( ) , ( int ) ( font . getSize ( ) / verticalPixelsPerPoint ) ) ; } FontDetails d = StaticFontMetrics . getFontDetails ( excelFont ) ; int width = ( int ) ( ( d . getStringWidth ( str ) * 8 ) + 12 ) ; int height = ( int ) ( ( font . getSize ( ) / verticalPixelsPerPoint ) + 6 ) * 2 ; y -= ( font . getSize ( ) / verticalPixelsPerPoint ) + 2 * verticalPixelsPerPoint ; HSSFTextbox textbox = escherGroup . createTextbox ( new HSSFChildAnchor ( x , y , x + width , y + height ) ) ; textbox . setNoFill ( true ) ; textbox . setLineStyle ( HSSFShape . LINESTYLE_NONE ) ; HSSFRichTextString s = new HSSFRichTextString ( str ) ; HSSFFont hssfFont = matchFont ( excelFont ) ; s . applyFont ( hssfFont ) ; textbox . setString ( s ) ; } private HSSFFont matchFont ( Font font ) { HSSFColor hssfColor = workbook . getCustomPalette ( ) . findColor ( ( byte ) foreground . getRed ( ) , ( byte ) foreground . getGreen ( ) , ( byte ) foreground . getBlue ( ) ) ; if ( hssfColor == null ) hssfColor = workbook . getCustomPalette ( ) . findSimilarColor ( ( byte ) foreground . getRed ( ) , ( byte ) foreground . getGreen ( ) , ( byte ) foreground . getBlue ( ) ) ; boolean bold = ( font . getStyle ( ) & Font . BOLD ) != 0 ; boolean italic = ( font . getStyle ( ) & Font . ITALIC ) != 0 ; HSSFFont hssfFont = workbook . findFont ( bold ? HSSFFont . BOLDWEIGHT_BOLD : 0 , hssfColor . getIndex ( ) , ( short ) ( font . getSize ( ) * 20 ) , font . getName ( ) , italic , false , ( short ) 0 , ( byte ) 0 ) ; if ( hssfFont == null ) { hssfFont = workbook . createFont ( ) ; hssfFont . setBoldweight ( bold ? HSSFFont . BOLDWEIGHT_BOLD : 0 ) ; hssfFont . setColor ( hssfColor . getIndex ( ) ) ; hssfFont . setFontHeight ( ( short ) ( font . getSize ( ) * 20 ) ) ; hssfFont . setFontName ( font . getName ( ) ) ; hssfFont . setItalic ( italic ) ; hssfFont . setStrikeout ( false ) ; hssfFont . setTypeOffset ( ( short ) 0 ) ; hssfFont . setUnderline ( ( byte ) 0 ) ; } return hssfFont ; } public void drawString ( AttributedCharacterIterator iterator , int x , int y ) { if ( logger . check ( POILogger . WARN ) ) logger . log ( POILogger . WARN , "drawString not supported" ) ; } public void fillArc ( int x , int y , int width , int height , int startAngle , int arcAngle ) { if ( logger . check ( POILogger . WARN ) ) logger . log ( POILogger . WARN , "fillArc not supported" ) ; } public void fillOval ( int x , int y , int width , int height ) { HSSFSimpleShape shape = escherGroup . createShape ( new HSSFChildAnchor ( x , y , x + width , y + height ) ) ; shape . setShapeType ( HSSFSimpleShape . OBJECT_TYPE_OVAL ) ; shape . setLineStyle ( HSSFShape . LINESTYLE_NONE ) ; shape . setFillColor ( foreground . getRed ( ) , foreground . getGreen ( ) , foreground . getBlue ( ) ) ; shape . setLineStyleColor ( foreground . getRed ( ) , foreground . getGreen ( ) , foreground . getBlue ( ) ) ; } public void fillPolygon ( int xPoints [ ] , int yPoints [ ] , int nPoints ) { int right = findBiggest ( xPoints ) ; int bottom = findBiggest ( yPoints ) ; int left = findSmallest ( xPoints ) ; int top = findSmallest ( yPoints ) ; HSSFPolygon shape = escherGroup . createPolygon ( new HSSFChildAnchor ( left , top , right , bottom ) ) ; shape . setPolygonDrawArea ( right - left , bottom - top ) ; shape . setPoints ( addToAll ( xPoints , - left ) , addToAll ( yPoints , - top ) ) ; shape . setLineStyleColor ( foreground . getRed ( ) , foreground . getGreen ( ) , foreground . getBlue ( ) ) ; shape . setFillColor ( foreground . getRed ( ) , foreground . getGreen ( ) , foreground . getBlue ( ) ) ; } private int findBiggest ( int [ ] values ) { int result = Integer . MIN_VALUE ; for ( int i = 0 ; i < values . length ; i ++ ) { if ( values [ i ] > result ) result = values [ i ] ; } return result ; } private int findSmallest ( int [ ] values ) { int result = Integer . MAX_VALUE ; for ( int i = 0 ; i < values . length ; i ++ ) { if ( values [ i ] < result ) result = values [ i ] ; } return result ; } public void fillRect ( int x , int y , int width , int height ) { HSSFSimpleShape shape = escherGroup . createShape ( new HSSFChildAnchor ( x , y , x + width , y + height ) ) ; shape . setShapeType ( HSSFSimpleShape . OBJECT_TYPE_RECTANGLE ) ; shape . setLineStyle ( HSSFShape . LINESTYLE_NONE ) ; shape . setFillColor ( foreground . getRed ( ) , foreground . getGreen ( ) , foreground . getBlue ( ) ) ; shape . setLineStyleColor ( foreground . getRed ( ) , foreground . getGreen ( ) , foreground . getBlue ( ) ) ; } public void fillRoundRect ( int x , int y , int width , int height , int arcWidth , int arcHeight ) { if ( logger . check ( POILogger . WARN ) ) logger . log ( POILogger . WARN , "fillRoundRect not supported" ) ; } public Shape getClip ( ) { return getClipBounds ( ) ; } public Rectangle getClipBounds ( ) { return null ; } public Rectangle getClipRect ( ) { return getClipBounds ( ) ; } public Color getColor ( ) { return foreground ; } public Font getFont ( ) { return font ; } public FontMetrics getFontMetrics ( Font f ) { return Toolkit . getDefaultToolkit ( ) . getFontMetrics ( f ) ; } public void setClip ( int x , int y , int width , int height ) { setClip ( ( ( Shape ) ( new Rectangle ( x , y , width , height ) ) ) ) ; } public void setClip ( Shape shape ) { } public void setColor ( Color color ) { foreground = color ; } public void setFont ( Font f ) { font = f ; } public void setPaintMode ( ) { if ( logger . check ( POILogger . WARN ) ) logger . log ( POILogger . WARN , "setPaintMode not supported" ) ; } public void setXORMode ( Color color ) { if ( logger . check ( POILogger . WARN ) ) logger . log ( POILogger . WARN , "setXORMode not supported" ) ; } public void translate ( int x , int y ) { if ( logger . check ( POILogger . WARN ) ) logger . log ( POILogger . WARN , "translate not supported" ) ; } public Color getBackground ( ) { return background ; } public void setBackground ( Color background ) { this . background = background ; } HSSFShapeGroup getEscherGraphics ( ) { return escherGroup ; } } 	1
package org . apache . poi . hssf . eventmodel ; import org . apache . poi . hssf . model . Model ; public interface ModelFactoryListener { public boolean process ( Model model ) ; } 	0
package org . apache . poi . poifs . storage ; import java . io . IOException ; public interface ListManagedBlock { public byte [ ] getData ( ) throws IOException ; } 	0
package org . apache . poi . hssf . record ; import org . apache . poi . util . LittleEndian ; public class UnknownRecord extends Record { private short sid = 0 ; private byte [ ] thedata = null ; public UnknownRecord ( ) { } public UnknownRecord ( short id , byte [ ] data ) { this . sid = id ; this . thedata = data ; } public UnknownRecord ( RecordInputStream in ) { sid = in . getSid ( ) ; thedata = in . readRemainder ( ) ; } public int serialize ( int offset , byte [ ] data ) { if ( thedata == null ) { thedata = new byte [ 0 ] ; } LittleEndian . putShort ( data , 0 + offset , sid ) ; LittleEndian . putShort ( data , 2 + offset , ( short ) ( thedata . length ) ) ; if ( thedata . length > 0 ) { System . arraycopy ( thedata , 0 , data , 4 + offset , thedata . length ) ; } return getRecordSize ( ) ; } public int getRecordSize ( ) { int retval = 4 ; if ( thedata != null ) { retval += thedata . length ; } return retval ; } protected void fillFields ( byte [ ] data , short sid ) { this . sid = sid ; thedata = data ; } protected void validateSid ( short id ) { } public String toString ( ) { StringBuffer buffer = new StringBuffer ( ) ; buffer . append ( "[UNKNOWN RECORD:" + Integer . toHexString ( sid ) + "]\n" ) ; buffer . append ( "    .id        = " ) . append ( Integer . toHexString ( sid ) ) . append ( "\n" ) ; buffer . append ( "[/UNKNOWN RECORD]\n" ) ; return buffer . toString ( ) ; } public short getSid ( ) { return sid ; } protected void fillFields ( RecordInputStream in ) { throw new RecordFormatException ( "Unknown record cannot be constructed via offset -- we need a copy of the data" ) ; } public Object clone ( ) { UnknownRecord rec = new UnknownRecord ( ) ; rec . sid = sid ; rec . thedata = thedata ; return rec ; } } 	1
package org . apache . poi . ddf ; public interface EscherSerializationListener { void beforeRecordSerialize ( int offset , short recordId , EscherRecord record ) ; void afterRecordSerialize ( int offset , short recordId , int size , EscherRecord record ) ; } 	1
package org . apache . poi . hssf . record ; import org . apache . poi . util . * ; public class AxisUsedRecord extends Record { public final static short sid = 0x1046 ; private short field_1_numAxis ; public AxisUsedRecord ( ) { } public AxisUsedRecord ( RecordInputStream in ) { super ( in ) ; } protected void validateSid ( short id ) { if ( id != sid ) { throw new RecordFormatException ( "Not a AxisUsed record" ) ; } } protected void fillFields ( RecordInputStream in ) { field_1_numAxis = in . readShort ( ) ; } public String toString ( ) { StringBuffer buffer = new StringBuffer ( ) ; buffer . append ( "[AXISUSED]\n" ) ; buffer . append ( "    .numAxis              = " ) . append ( "0x" ) . append ( HexDump . toHex ( getNumAxis ( ) ) ) . append ( " (" ) . append ( getNumAxis ( ) ) . append ( " )" ) ; buffer . append ( System . getProperty ( "line.separator" ) ) ; buffer . append ( "[/AXISUSED]\n" ) ; return buffer . toString ( ) ; } public int serialize ( int offset , byte [ ] data ) { int pos = 0 ; LittleEndian . putShort ( data , 0 + offset , sid ) ; LittleEndian . putShort ( data , 2 + offset , ( short ) ( getRecordSize ( ) - 4 ) ) ; LittleEndian . putShort ( data , 4 + offset + pos , field_1_numAxis ) ; return getRecordSize ( ) ; } public int getRecordSize ( ) { return 4 + 2 ; } public short getSid ( ) { return sid ; } public Object clone ( ) { AxisUsedRecord rec = new AxisUsedRecord ( ) ; rec . field_1_numAxis = field_1_numAxis ; return rec ; } public short getNumAxis ( ) { return field_1_numAxis ; } public void setNumAxis ( short field_1_numAxis ) { this . field_1_numAxis = field_1_numAxis ; } } 	1
package org . apache . poi . hpsf ; import java . util . Date ; import org . apache . poi . hpsf . wellknown . PropertyIDMap ; public class SummaryInformation extends SpecialPropertySet { public static final String DEFAULT_STREAM_NAME = "\005SummaryInformation" ; public SummaryInformation ( final PropertySet ps ) throws UnexpectedPropertySetTypeException { super ( ps ) ; if ( ! isSummaryInformation ( ) ) throw new UnexpectedPropertySetTypeException ( "Not a " + getClass ( ) . getName ( ) ) ; } public String getTitle ( ) { return ( String ) getProperty ( PropertyIDMap . PID_TITLE ) ; } public void setTitle ( final String title ) { final MutableSection s = ( MutableSection ) getFirstSection ( ) ; s . setProperty ( PropertyIDMap . PID_TITLE , title ) ; } public void removeTitle ( ) { final MutableSection s = ( MutableSection ) getFirstSection ( ) ; s . removeProperty ( PropertyIDMap . PID_TITLE ) ; } public String getSubject ( ) { return ( String ) getProperty ( PropertyIDMap . PID_SUBJECT ) ; } public void setSubject ( final String subject ) { final MutableSection s = ( MutableSection ) getFirstSection ( ) ; s . setProperty ( PropertyIDMap . PID_SUBJECT , subject ) ; } public void removeSubject ( ) { final MutableSection s = ( MutableSection ) getFirstSection ( ) ; s . removeProperty ( PropertyIDMap . PID_SUBJECT ) ; } public String getAuthor ( ) { return ( String ) getProperty ( PropertyIDMap . PID_AUTHOR ) ; } public void setAuthor ( final String author ) { final MutableSection s = ( MutableSection ) getFirstSection ( ) ; s . setProperty ( PropertyIDMap . PID_AUTHOR , author ) ; } public void removeAuthor ( ) { final MutableSection s = ( MutableSection ) getFirstSection ( ) ; s . removeProperty ( PropertyIDMap . PID_AUTHOR ) ; } public String getKeywords ( ) { return ( String ) getProperty ( PropertyIDMap . PID_KEYWORDS ) ; } public void setKeywords ( final String keywords ) { final MutableSection s = ( MutableSection ) getFirstSection ( ) ; s . setProperty ( PropertyIDMap . PID_KEYWORDS , keywords ) ; } public void removeKeywords ( ) { final MutableSection s = ( MutableSection ) getFirstSection ( ) ; s . removeProperty ( PropertyIDMap . PID_KEYWORDS ) ; } public String getComments ( ) { return ( String ) getProperty ( PropertyIDMap . PID_COMMENTS ) ; } public void setComments ( final String comments ) { final MutableSection s = ( MutableSection ) getFirstSection ( ) ; s . setProperty ( PropertyIDMap . PID_COMMENTS , comments ) ; } public void removeComments ( ) { final MutableSection s = ( MutableSection ) getFirstSection ( ) ; s . removeProperty ( PropertyIDMap . PID_COMMENTS ) ; } public String getTemplate ( ) { return ( String ) getProperty ( PropertyIDMap . PID_TEMPLATE ) ; } public void setTemplate ( final String template ) { final MutableSection s = ( MutableSection ) getFirstSection ( ) ; s . setProperty ( PropertyIDMap . PID_TEMPLATE , template ) ; } public void removeTemplate ( ) { final MutableSection s = ( MutableSection ) getFirstSection ( ) ; s . removeProperty ( PropertyIDMap . PID_TEMPLATE ) ; } public String getLastAuthor ( ) { return ( String ) getProperty ( PropertyIDMap . PID_LASTAUTHOR ) ; } public void setLastAuthor ( final String lastAuthor ) { final MutableSection s = ( MutableSection ) getFirstSection ( ) ; s . setProperty ( PropertyIDMap . PID_LASTAUTHOR , lastAuthor ) ; } public void removeLastAuthor ( ) { final MutableSection s = ( MutableSection ) getFirstSection ( ) ; s . removeProperty ( PropertyIDMap . PID_LASTAUTHOR ) ; } public String getRevNumber ( ) { return ( String ) getProperty ( PropertyIDMap . PID_REVNUMBER ) ; } public void setRevNumber ( final String revNumber ) { final MutableSection s = ( MutableSection ) getFirstSection ( ) ; s . setProperty ( PropertyIDMap . PID_REVNUMBER , revNumber ) ; } public void removeRevNumber ( ) { final MutableSection s = ( MutableSection ) getFirstSection ( ) ; s . removeProperty ( PropertyIDMap . PID_REVNUMBER ) ; } public long getEditTime ( ) { final Date d = ( Date ) getProperty ( PropertyIDMap . PID_EDITTIME ) ; if ( d == null ) return 0 ; else return Util . dateToFileTime ( d ) ; } public void setEditTime ( final long time ) { final Date d = Util . filetimeToDate ( time ) ; final MutableSection s = ( MutableSection ) getFirstSection ( ) ; s . setProperty ( PropertyIDMap . PID_EDITTIME , Variant . VT_FILETIME , d ) ; } public void removeEditTime ( ) { final MutableSection s = ( MutableSection ) getFirstSection ( ) ; s . removeProperty ( PropertyIDMap . PID_EDITTIME ) ; } public Date getLastPrinted ( ) { return ( Date ) getProperty ( PropertyIDMap . PID_LASTPRINTED ) ; } public void setLastPrinted ( final Date lastPrinted ) { final MutableSection s = ( MutableSection ) getFirstSection ( ) ; s . setProperty ( PropertyIDMap . PID_LASTPRINTED , Variant . VT_FILETIME , lastPrinted ) ; } public void removeLastPrinted ( ) { final MutableSection s = ( MutableSection ) getFirstSection ( ) ; s . removeProperty ( PropertyIDMap . PID_LASTPRINTED ) ; } public Date getCreateDateTime ( ) { return ( Date ) getProperty ( PropertyIDMap . PID_CREATE_DTM ) ; } public void setCreateDateTime ( final Date createDateTime ) { final MutableSection s = ( MutableSection ) getFirstSection ( ) ; s . setProperty ( PropertyIDMap . PID_CREATE_DTM , Variant . VT_FILETIME , createDateTime ) ; } public void removeCreateDateTime ( ) { final MutableSection s = ( MutableSection ) getFirstSection ( ) ; s . removeProperty ( PropertyIDMap . PID_CREATE_DTM ) ; } public Date getLastSaveDateTime ( ) { return ( Date ) getProperty ( PropertyIDMap . PID_LASTSAVE_DTM ) ; } public void setLastSaveDateTime ( final Date time ) { final MutableSection s = ( MutableSection ) getFirstSection ( ) ; s . setProperty ( PropertyIDMap . PID_LASTSAVE_DTM , Variant . VT_FILETIME , time ) ; } public void removeLastSaveDateTime ( ) { final MutableSection s = ( MutableSection ) getFirstSection ( ) ; s . removeProperty ( PropertyIDMap . PID_LASTSAVE_DTM ) ; } public int getPageCount ( ) { return getPropertyIntValue ( PropertyIDMap . PID_PAGECOUNT ) ; } public void setPageCount ( final int pageCount ) { final MutableSection s = ( MutableSection ) getFirstSection ( ) ; s . setProperty ( PropertyIDMap . PID_PAGECOUNT , pageCount ) ; } public void removePageCount ( ) { final MutableSection s = ( MutableSection ) getFirstSection ( ) ; s . removeProperty ( PropertyIDMap . PID_PAGECOUNT ) ; } public int getWordCount ( ) { return getPropertyIntValue ( PropertyIDMap . PID_WORDCOUNT ) ; } public void setWordCount ( final int wordCount ) { final MutableSection s = ( MutableSection ) getFirstSection ( ) ; s . setProperty ( PropertyIDMap . PID_WORDCOUNT , wordCount ) ; } public void removeWordCount ( ) { final MutableSection s = ( MutableSection ) getFirstSection ( ) ; s . removeProperty ( PropertyIDMap . PID_WORDCOUNT ) ; } public int getCharCount ( ) { return getPropertyIntValue ( PropertyIDMap . PID_CHARCOUNT ) ; } public void setCharCount ( final int charCount ) { final MutableSection s = ( MutableSection ) getFirstSection ( ) ; s . setProperty ( PropertyIDMap . PID_CHARCOUNT , charCount ) ; } public void removeCharCount ( ) { final MutableSection s = ( MutableSection ) getFirstSection ( ) ; s . removeProperty ( PropertyIDMap . PID_CHARCOUNT ) ; } public byte [ ] getThumbnail ( ) { return ( byte [ ] ) getProperty ( PropertyIDMap . PID_THUMBNAIL ) ; } public void setThumbnail ( final byte [ ] thumbnail ) { final MutableSection s = ( MutableSection ) getFirstSection ( ) ; s . setProperty ( PropertyIDMap . PID_THUMBNAIL , Variant . VT_LPSTR , thumbnail ) ; } public void removeThumbnail ( ) { final MutableSection s = ( MutableSection ) getFirstSection ( ) ; s . removeProperty ( PropertyIDMap . PID_THUMBNAIL ) ; } public String getApplicationName ( ) { return ( String ) getProperty ( PropertyIDMap . PID_APPNAME ) ; } public void setApplicationName ( final String applicationName ) { final MutableSection s = ( MutableSection ) getFirstSection ( ) ; s . setProperty ( PropertyIDMap . PID_APPNAME , applicationName ) ; } public void removeApplicationName ( ) { final MutableSection s = ( MutableSection ) getFirstSection ( ) ; s . removeProperty ( PropertyIDMap . PID_APPNAME ) ; } public int getSecurity ( ) { return getPropertyIntValue ( PropertyIDMap . PID_SECURITY ) ; } public void setSecurity ( final int security ) { final MutableSection s = ( MutableSection ) getFirstSection ( ) ; s . setProperty ( PropertyIDMap . PID_SECURITY , security ) ; } public void removeSecurity ( ) { final MutableSection s = ( MutableSection ) getFirstSection ( ) ; s . removeProperty ( PropertyIDMap . PID_SECURITY ) ; } } 	1
package org . apache . poi . hssf . record ; import org . apache . poi . util . LittleEndian ; public class PasswordRev4Record extends Record { public final static short sid = 0x1BC ; private short field_1_password ; public PasswordRev4Record ( ) { } public PasswordRev4Record ( RecordInputStream in ) { super ( in ) ; } protected void validateSid ( short id ) { if ( id != sid ) { throw new RecordFormatException ( "NOT A PROT4REVPASSWORD RECORD" ) ; } } protected void fillFields ( RecordInputStream in ) { field_1_password = in . readShort ( ) ; } public void setPassword ( short pw ) { field_1_password = pw ; } public short getPassword ( ) { return field_1_password ; } public String toString ( ) { StringBuffer buffer = new StringBuffer ( ) ; buffer . append ( "[PROT4REVPASSWORD]\n" ) ; buffer . append ( "    .password       = " ) . append ( Integer . toHexString ( getPassword ( ) ) ) . append ( "\n" ) ; buffer . append ( "[/PROT4REVPASSWORD]\n" ) ; return buffer . toString ( ) ; } public int serialize ( int offset , byte [ ] data ) { LittleEndian . putShort ( data , 0 + offset , sid ) ; LittleEndian . putShort ( data , 2 + offset , ( ( short ) 0x02 ) ) ; LittleEndian . putShort ( data , 4 + offset , getPassword ( ) ) ; return getRecordSize ( ) ; } public int getRecordSize ( ) { return 6 ; } public short getSid ( ) { return sid ; } } 	1
package org . apache . poi . ddf ; public class EscherBoolProperty extends EscherSimpleProperty { public EscherBoolProperty ( short propertyNumber , int value ) { super ( propertyNumber , value ) ; } public boolean isTrue ( ) { return propertyValue != 0 ; } public boolean isFalse ( ) { return propertyValue == 0 ; } } 	1
package org . apache . poi . util ; import java . util . * ; public class DoubleList { private double [ ] _array ; private int _limit ; private static final int _default_size = 128 ; public DoubleList ( ) { this ( _default_size ) ; } public DoubleList ( final DoubleList list ) { this ( list . _array . length ) ; System . arraycopy ( list . _array , 0 , _array , 0 , _array . length ) ; _limit = list . _limit ; } public DoubleList ( final int initialCapacity ) { _array = new double [ initialCapacity ] ; _limit = 0 ; } public void add ( final int index , final double value ) { if ( index > _limit ) { throw new IndexOutOfBoundsException ( ) ; } else if ( index == _limit ) { add ( value ) ; } else { if ( _limit == _array . length ) { growArray ( _limit * 2 ) ; } System . arraycopy ( _array , index , _array , index + 1 , _limit - index ) ; _array [ index ] = value ; _limit ++ ; } } public boolean add ( final double value ) { if ( _limit == _array . length ) { growArray ( _limit * 2 ) ; } _array [ _limit ++ ] = value ; return true ; } public boolean addAll ( final DoubleList c ) { if ( c . _limit != 0 ) { if ( ( _limit + c . _limit ) > _array . length ) { growArray ( _limit + c . _limit ) ; } System . arraycopy ( c . _array , 0 , _array , _limit , c . _limit ) ; _limit += c . _limit ; } return true ; } public boolean addAll ( final int index , final DoubleList c ) { if ( index > _limit ) { throw new IndexOutOfBoundsException ( ) ; } if ( c . _limit != 0 ) { if ( ( _limit + c . _limit ) > _array . length ) { growArray ( _limit + c . _limit ) ; } System . arraycopy ( _array , index , _array , index + c . _limit , _limit - index ) ; System . arraycopy ( c . _array , 0 , _array , index , c . _limit ) ; _limit += c . _limit ; } return true ; } public void clear ( ) { _limit = 0 ; } public boolean contains ( final double o ) { boolean rval = false ; for ( int j = 0 ; ! rval && ( j < _limit ) ; j ++ ) { if ( _array [ j ] == o ) { rval = true ; } } return rval ; } public boolean containsAll ( final DoubleList c ) { boolean rval = true ; if ( this != c ) { for ( int j = 0 ; rval && ( j < c . _limit ) ; j ++ ) { if ( ! contains ( c . _array [ j ] ) ) { rval = false ; } } } return rval ; } public boolean equals ( final Object o ) { boolean rval = this == o ; if ( ! rval && ( o != null ) && ( o . getClass ( ) == this . getClass ( ) ) ) { DoubleList other = ( DoubleList ) o ; if ( other . _limit == _limit ) { rval = true ; for ( int j = 0 ; rval && ( j < _limit ) ; j ++ ) { rval = _array [ j ] == other . _array [ j ] ; } } } return rval ; } public double get ( final int index ) { if ( index >= _limit ) { throw new IndexOutOfBoundsException ( ) ; } return _array [ index ] ; } public int hashCode ( ) { int hash = 0 ; for ( int j = 0 ; j < _limit ; j ++ ) { hash = ( 31 * hash ) + ( ( int ) _array [ j ] ) ; } return hash ; } public int indexOf ( final double o ) { int rval = 0 ; for ( ; rval < _limit ; rval ++ ) { if ( o == _array [ rval ] ) { break ; } } if ( rval == _limit ) { rval = - 1 ; } return rval ; } public boolean isEmpty ( ) { return _limit == 0 ; } public int lastIndexOf ( final double o ) { int rval = _limit - 1 ; for ( ; rval >= 0 ; rval -- ) { if ( o == _array [ rval ] ) { break ; } } return rval ; } public double remove ( final int index ) { if ( index >= _limit ) { throw new IndexOutOfBoundsException ( ) ; } double rval = _array [ index ] ; System . arraycopy ( _array , index + 1 , _array , index , _limit - index ) ; _limit -- ; return rval ; } public boolean removeValue ( final double o ) { boolean rval = false ; for ( int j = 0 ; ! rval && ( j < _limit ) ; j ++ ) { if ( o == _array [ j ] ) { System . arraycopy ( _array , j + 1 , _array , j , _limit - j ) ; _limit -- ; rval = true ; } } return rval ; } public boolean removeAll ( final DoubleList c ) { boolean rval = false ; for ( int j = 0 ; j < c . _limit ; j ++ ) { if ( removeValue ( c . _array [ j ] ) ) { rval = true ; } } return rval ; } public boolean retainAll ( final DoubleList c ) { boolean rval = false ; for ( int j = 0 ; j < _limit ; ) { if ( ! c . contains ( _array [ j ] ) ) { remove ( j ) ; rval = true ; } else { j ++ ; } } return rval ; } public double set ( final int index , final double element ) { if ( index >= _limit ) { throw new IndexOutOfBoundsException ( ) ; } double rval = _array [ index ] ; _array [ index ] = element ; return rval ; } public int size ( ) { return _limit ; } public double [ ] toArray ( ) { double [ ] rval = new double [ _limit ] ; System . arraycopy ( _array , 0 , rval , 0 , _limit ) ; return rval ; } public double [ ] toArray ( final double [ ] a ) { double [ ] rval ; if ( a . length == _limit ) { System . arraycopy ( _array , 0 , a , 0 , _limit ) ; rval = a ; } else { rval = toArray ( ) ; } return rval ; } private void growArray ( final int new_size ) { int size = ( new_size == _array . length ) ? new_size + 1 : new_size ; double [ ] new_array = new double [ size ] ; System . arraycopy ( _array , 0 , new_array , 0 , _limit ) ; _array = new_array ; } } 	0
package org . apache . poi . hssf . record ; import org . apache . poi . util . LittleEndian ; public class VCenterRecord extends Record { public final static short sid = 0x84 ; private short field_1_vcenter ; public VCenterRecord ( ) { } public VCenterRecord ( RecordInputStream in ) { super ( in ) ; } protected void validateSid ( short id ) { if ( id != sid ) { throw new RecordFormatException ( "NOT A VCenter RECORD" ) ; } } protected void fillFields ( RecordInputStream in ) { field_1_vcenter = in . readShort ( ) ; } public void setVCenter ( boolean hc ) { if ( hc == true ) { field_1_vcenter = 1 ; } else { field_1_vcenter = 0 ; } } public boolean getVCenter ( ) { return ( field_1_vcenter == 1 ) ; } public String toString ( ) { StringBuffer buffer = new StringBuffer ( ) ; buffer . append ( "[VCENTER]\n" ) ; buffer . append ( "    .vcenter        = " ) . append ( getVCenter ( ) ) . append ( "\n" ) ; buffer . append ( "[/VCENTER]\n" ) ; return buffer . toString ( ) ; } public int serialize ( int offset , byte [ ] data ) { LittleEndian . putShort ( data , 0 + offset , sid ) ; LittleEndian . putShort ( data , 2 + offset , ( short ) 0x2 ) ; LittleEndian . putShort ( data , 4 + offset , ( short ) field_1_vcenter ) ; return getRecordSize ( ) ; } public int getRecordSize ( ) { return 6 ; } public short getSid ( ) { return sid ; } public Object clone ( ) { VCenterRecord rec = new VCenterRecord ( ) ; rec . field_1_vcenter = field_1_vcenter ; return rec ; } } 	1
package org . apache . poi . ddf ; import org . apache . poi . util . HexDump ; import org . apache . poi . util . LittleEndian ; import java . util . ArrayList ; import java . util . Iterator ; import java . util . List ; import java . io . PrintWriter ; public class EscherContainerRecord extends EscherRecord { public static final short DGG_CONTAINER = ( short ) 0xF000 ; public static final short BSTORE_CONTAINER = ( short ) 0xF001 ; public static final short DG_CONTAINER = ( short ) 0xF002 ; public static final short SPGR_CONTAINER = ( short ) 0xF003 ; public static final short SP_CONTAINER = ( short ) 0xF004 ; public static final short SOLVER_CONTAINER = ( short ) 0xF005 ; private List childRecords = new ArrayList ( ) ; public int fillFields ( byte [ ] data , int offset , EscherRecordFactory recordFactory ) { int bytesRemaining = readHeader ( data , offset ) ; int bytesWritten = 8 ; offset += 8 ; while ( bytesRemaining > 0 && offset < data . length ) { EscherRecord child = recordFactory . createRecord ( data , offset ) ; int childBytesWritten = child . fillFields ( data , offset , recordFactory ) ; bytesWritten += childBytesWritten ; offset += childBytesWritten ; bytesRemaining -= childBytesWritten ; getChildRecords ( ) . add ( child ) ; if ( offset >= data . length && bytesRemaining > 0 ) { System . out . println ( "WARNING: " + bytesRemaining + " bytes remaining but no space left" ) ; } } return bytesWritten ; } public int serialize ( int offset , byte [ ] data , EscherSerializationListener listener ) { listener . beforeRecordSerialize ( offset , getRecordId ( ) , this ) ; LittleEndian . putShort ( data , offset , getOptions ( ) ) ; LittleEndian . putShort ( data , offset + 2 , getRecordId ( ) ) ; int remainingBytes = 0 ; for ( Iterator iterator = getChildRecords ( ) . iterator ( ) ; iterator . hasNext ( ) ; ) { EscherRecord r = ( EscherRecord ) iterator . next ( ) ; remainingBytes += r . getRecordSize ( ) ; } LittleEndian . putInt ( data , offset + 4 , remainingBytes ) ; int pos = offset + 8 ; for ( Iterator iterator = getChildRecords ( ) . iterator ( ) ; iterator . hasNext ( ) ; ) { EscherRecord r = ( EscherRecord ) iterator . next ( ) ; pos += r . serialize ( pos , data , listener ) ; } listener . afterRecordSerialize ( pos , getRecordId ( ) , pos - offset , this ) ; return pos - offset ; } public int getRecordSize ( ) { int childRecordsSize = 0 ; for ( Iterator iterator = getChildRecords ( ) . iterator ( ) ; iterator . hasNext ( ) ; ) { EscherRecord r = ( EscherRecord ) iterator . next ( ) ; childRecordsSize += r . getRecordSize ( ) ; } return 8 + childRecordsSize ; } public List getChildRecords ( ) { return childRecords ; } public void setChildRecords ( List childRecords ) { this . childRecords = childRecords ; } public String getRecordName ( ) { switch ( ( short ) getRecordId ( ) ) { case DGG_CONTAINER : return "DggContainer" ; case BSTORE_CONTAINER : return "BStoreContainer" ; case DG_CONTAINER : return "DgContainer" ; case SPGR_CONTAINER : return "SpgrContainer" ; case SP_CONTAINER : return "SpContainer" ; case SOLVER_CONTAINER : return "SolverContainer" ; default : return "Container 0x" + HexDump . toHex ( getRecordId ( ) ) ; } } public void display ( PrintWriter w , int indent ) { super . display ( w , indent ) ; for ( Iterator iterator = childRecords . iterator ( ) ; iterator . hasNext ( ) ; ) { EscherRecord escherRecord = ( EscherRecord ) iterator . next ( ) ; escherRecord . display ( w , indent + 1 ) ; } } public void addChildRecord ( EscherRecord record ) { this . childRecords . add ( record ) ; } public String toString ( ) { String nl = System . getProperty ( "line.separator" ) ; StringBuffer children = new StringBuffer ( ) ; if ( getChildRecords ( ) . size ( ) > 0 ) { children . append ( "  children: " + nl ) ; for ( Iterator iterator = getChildRecords ( ) . iterator ( ) ; iterator . hasNext ( ) ; ) { EscherRecord record = ( EscherRecord ) iterator . next ( ) ; children . append ( record . toString ( ) ) ; } } return getClass ( ) . getName ( ) + " (" + getRecordName ( ) + "):" + nl + "  isContainer: " + isContainerRecord ( ) + nl + "  options: 0x" + HexDump . toHex ( getOptions ( ) ) + nl + "  recordId: 0x" + HexDump . toHex ( getRecordId ( ) ) + nl + "  numchildren: " + getChildRecords ( ) . size ( ) + nl + children . toString ( ) ; } public EscherSpRecord getChildById ( short recordId ) { for ( Iterator iterator = childRecords . iterator ( ) ; iterator . hasNext ( ) ; ) { EscherRecord escherRecord = ( EscherRecord ) iterator . next ( ) ; if ( escherRecord . getRecordId ( ) == recordId ) return ( EscherSpRecord ) escherRecord ; } return null ; } } 	1
package org . apache . poi . hssf . usermodel ; import org . apache . poi . hssf . record . HeaderRecord ; public class HSSFHeader { HeaderRecord headerRecord ; String left ; String center ; String right ; protected HSSFHeader ( HeaderRecord headerRecord ) { this . headerRecord = headerRecord ; String head = headerRecord . getHeader ( ) ; while ( head != null && head . length ( ) > 1 ) { int pos = head . length ( ) ; switch ( head . substring ( 1 , 2 ) . charAt ( 0 ) ) { case 'L' : if ( head . indexOf ( "&C" ) >= 0 ) { pos = Math . min ( pos , head . indexOf ( "&C" ) ) ; } if ( head . indexOf ( "&R" ) >= 0 ) { pos = Math . min ( pos , head . indexOf ( "&R" ) ) ; } left = head . substring ( 2 , pos ) ; head = head . substring ( pos ) ; break ; case 'C' : if ( head . indexOf ( "&L" ) >= 0 ) { pos = Math . min ( pos , head . indexOf ( "&L" ) ) ; } if ( head . indexOf ( "&R" ) >= 0 ) { pos = Math . min ( pos , head . indexOf ( "&R" ) ) ; } center = head . substring ( 2 , pos ) ; head = head . substring ( pos ) ; break ; case 'R' : if ( head . indexOf ( "&C" ) >= 0 ) { pos = Math . min ( pos , head . indexOf ( "&C" ) ) ; } if ( head . indexOf ( "&L" ) >= 0 ) { pos = Math . min ( pos , head . indexOf ( "&L" ) ) ; } right = head . substring ( 2 , pos ) ; head = head . substring ( pos ) ; break ; default : head = null ; } } } public String getLeft ( ) { return left ; } public void setLeft ( String newLeft ) { left = newLeft ; createHeaderString ( ) ; } public String getCenter ( ) { return center ; } public void setCenter ( String newCenter ) { center = newCenter ; createHeaderString ( ) ; } public String getRight ( ) { return right ; } public void setRight ( String newRight ) { right = newRight ; createHeaderString ( ) ; } private void createHeaderString ( ) { headerRecord . setHeader ( "&C" + ( center == null ? "" : center ) + "&L" + ( left == null ? "" : left ) + "&R" + ( right == null ? "" : right ) ) ; headerRecord . setHeaderLength ( ( byte ) headerRecord . getHeader ( ) . length ( ) ) ; } public static String fontSize ( short size ) { return "&" + size ; } public static String font ( String font , String style ) { return "&\"" + font + "," + style + "\"" ; } public static String page ( ) { return "&P" ; } public static String numPages ( ) { return "&N" ; } public static String date ( ) { return "&D" ; } public static String time ( ) { return "&T" ; } public static String file ( ) { return "&F" ; } public static String tab ( ) { return "&A" ; } public static String startUnderline ( ) { return "&U" ; } public static String endUnderline ( ) { return "&U" ; } public static String startDoubleUnderline ( ) { return "&E" ; } public static String endDoubleUnderline ( ) { return "&E" ; } } 	1
package org . apache . poi . hssf . record . formula ; import org . apache . poi . util . LittleEndian ; import org . apache . poi . hssf . util . RangeAddress ; import org . apache . poi . hssf . util . CellReference ; import org . apache . poi . hssf . util . SheetReferences ; import org . apache . poi . hssf . model . Workbook ; import org . apache . poi . util . BitField ; import org . apache . poi . util . BitFieldFactory ; import org . apache . poi . hssf . model . Workbook ; import org . apache . poi . hssf . record . RecordInputStream ; public class Ref3DPtg extends Ptg { public final static byte sid = 0x3a ; private final static int SIZE = 7 ; private short field_1_index_extern_sheet ; private short field_2_row ; private short field_3_column ; private BitField rowRelative = BitFieldFactory . getInstance ( 0x8000 ) ; private BitField colRelative = BitFieldFactory . getInstance ( 0x4000 ) ; public Ref3DPtg ( ) { } public Ref3DPtg ( RecordInputStream in ) { field_1_index_extern_sheet = in . readShort ( ) ; field_2_row = in . readShort ( ) ; field_3_column = in . readShort ( ) ; } public Ref3DPtg ( String cellref , short externIdx ) { CellReference c = new CellReference ( cellref ) ; setRow ( ( short ) c . getRow ( ) ) ; setColumn ( ( short ) c . getCol ( ) ) ; setColRelative ( ! c . isColAbsolute ( ) ) ; setRowRelative ( ! c . isRowAbsolute ( ) ) ; setExternSheetIndex ( externIdx ) ; } public String toString ( ) { StringBuffer buffer = new StringBuffer ( ) ; buffer . append ( "Ref3dPtg\n" ) ; buffer . append ( "Index to Extern Sheet = " + getExternSheetIndex ( ) ) . append ( "\n" ) ; buffer . append ( "Row = " + getRow ( ) ) . append ( "\n" ) ; buffer . append ( "Col  = " + getColumn ( ) ) . append ( "\n" ) ; buffer . append ( "ColRowRel= " + isRowRelative ( ) ) . append ( "\n" ) ; buffer . append ( "ColRel   = " + isColRelative ( ) ) . append ( "\n" ) ; return buffer . toString ( ) ; } public void writeBytes ( byte [ ] array , int offset ) { array [ 0 + offset ] = ( byte ) ( sid + ptgClass ) ; LittleEndian . putShort ( array , 1 + offset , getExternSheetIndex ( ) ) ; LittleEndian . putShort ( array , 3 + offset , getRow ( ) ) ; LittleEndian . putShort ( array , 5 + offset , getColumnRaw ( ) ) ; } public int getSize ( ) { return SIZE ; } public short getExternSheetIndex ( ) { return field_1_index_extern_sheet ; } public void setExternSheetIndex ( short index ) { field_1_index_extern_sheet = index ; } public short getRow ( ) { return field_2_row ; } public void setRow ( short row ) { field_2_row = row ; } public short getColumn ( ) { return ( short ) ( field_3_column & 0xFF ) ; } public short getColumnRaw ( ) { return field_3_column ; } public boolean isRowRelative ( ) { return rowRelative . isSet ( field_3_column ) ; } public void setRowRelative ( boolean rel ) { field_3_column = rowRelative . setShortBoolean ( field_3_column , rel ) ; } public boolean isColRelative ( ) { return colRelative . isSet ( field_3_column ) ; } public void setColRelative ( boolean rel ) { field_3_column = colRelative . setShortBoolean ( field_3_column , rel ) ; } public void setColumn ( short column ) { field_3_column &= 0xFF00 ; field_3_column |= column & 0xFF ; } public void setColumnRaw ( short column ) { field_3_column = column ; } public void setArea ( String ref ) { RangeAddress ra = new RangeAddress ( ref ) ; String from = ra . getFromCell ( ) ; setColumn ( ( short ) ( ra . getXPosition ( from ) - 1 ) ) ; setRow ( ( short ) ( ra . getYPosition ( from ) - 1 ) ) ; } public String toFormulaString ( Workbook book ) { StringBuffer retval = new StringBuffer ( ) ; SheetReferences refs = book == null ? null : book . getSheetReferences ( ) ; if ( refs != null ) { String sheetName = refs . getSheetName ( ( int ) this . field_1_index_extern_sheet ) ; boolean appendQuotes = sheetName . indexOf ( " " ) >= 0 ; if ( appendQuotes ) retval . append ( "'" ) ; retval . append ( sheetName ) ; if ( appendQuotes ) retval . append ( "'" ) ; retval . append ( '!' ) ; } retval . append ( ( new CellReference ( getRow ( ) , getColumn ( ) , ! isRowRelative ( ) , ! isColRelative ( ) ) ) . toString ( ) ) ; return retval . toString ( ) ; } public byte getDefaultOperandClass ( ) { return Ptg . CLASS_REF ; } public Object clone ( ) { Ref3DPtg ptg = new Ref3DPtg ( ) ; ptg . field_1_index_extern_sheet = field_1_index_extern_sheet ; ptg . field_2_row = field_2_row ; ptg . field_3_column = field_3_column ; ptg . setClass ( ptgClass ) ; return ptg ; } } 	0
package org . apache . poi . hssf . record ; import org . apache . poi . util . * ; public class SeriesIndexRecord extends Record { public final static short sid = 0x1065 ; private short field_1_index ; public SeriesIndexRecord ( ) { } public SeriesIndexRecord ( RecordInputStream in ) { super ( in ) ; } protected void validateSid ( short id ) { if ( id != sid ) { throw new RecordFormatException ( "Not a SeriesIndex record" ) ; } } protected void fillFields ( RecordInputStream in ) { field_1_index = in . readShort ( ) ; } public String toString ( ) { StringBuffer buffer = new StringBuffer ( ) ; buffer . append ( "[SINDEX]\n" ) ; buffer . append ( "    .index                = " ) . append ( "0x" ) . append ( HexDump . toHex ( getIndex ( ) ) ) . append ( " (" ) . append ( getIndex ( ) ) . append ( " )" ) ; buffer . append ( System . getProperty ( "line.separator" ) ) ; buffer . append ( "[/SINDEX]\n" ) ; return buffer . toString ( ) ; } public int serialize ( int offset , byte [ ] data ) { int pos = 0 ; LittleEndian . putShort ( data , 0 + offset , sid ) ; LittleEndian . putShort ( data , 2 + offset , ( short ) ( getRecordSize ( ) - 4 ) ) ; LittleEndian . putShort ( data , 4 + offset + pos , field_1_index ) ; return getRecordSize ( ) ; } public int getRecordSize ( ) { return 4 + 2 ; } public short getSid ( ) { return sid ; } public Object clone ( ) { SeriesIndexRecord rec = new SeriesIndexRecord ( ) ; rec . field_1_index = field_1_index ; return rec ; } public short getIndex ( ) { return field_1_index ; } public void setIndex ( short field_1_index ) { this . field_1_index = field_1_index ; } } 	1
package org . apache . poi . hssf . record ; import org . apache . poi . util . * ; public class TextRecord extends Record { public final static short sid = 0x1025 ; private byte field_1_horizontalAlignment ; public final static byte HORIZONTAL_ALIGNMENT_LEFT = 1 ; public final static byte HORIZONTAL_ALIGNMENT_CENTER = 2 ; public final static byte HORIZONTAL_ALIGNMENT_BOTTOM = 3 ; public final static byte HORIZONTAL_ALIGNMENT_JUSTIFY = 4 ; private byte field_2_verticalAlignment ; public final static byte VERTICAL_ALIGNMENT_TOP = 1 ; public final static byte VERTICAL_ALIGNMENT_CENTER = 2 ; public final static byte VERTICAL_ALIGNMENT_BOTTOM = 3 ; public final static byte VERTICAL_ALIGNMENT_JUSTIFY = 4 ; private short field_3_displayMode ; public final static short DISPLAY_MODE_TRANSPARENT = 1 ; public final static short DISPLAY_MODE_OPAQUE = 2 ; private int field_4_rgbColor ; private int field_5_x ; private int field_6_y ; private int field_7_width ; private int field_8_height ; private short field_9_options1 ; private BitField autoColor = BitFieldFactory . getInstance ( 0x1 ) ; private BitField showKey = BitFieldFactory . getInstance ( 0x2 ) ; private BitField showValue = BitFieldFactory . getInstance ( 0x4 ) ; private BitField vertical = BitFieldFactory . getInstance ( 0x8 ) ; private BitField autoGeneratedText = BitFieldFactory . getInstance ( 0x10 ) ; private BitField generated = BitFieldFactory . getInstance ( 0x20 ) ; private BitField autoLabelDeleted = BitFieldFactory . getInstance ( 0x40 ) ; private BitField autoBackground = BitFieldFactory . getInstance ( 0x80 ) ; private BitField rotation = BitFieldFactory . getInstance ( 0x0700 ) ; public final static short ROTATION_NONE = 0 ; public final static short ROTATION_TOP_TO_BOTTOM = 1 ; public final static short ROTATION_ROTATED_90_DEGREES = 2 ; public final static short ROTATION_ROTATED_90_DEGREES_CLOCKWISE = 3 ; private BitField showCategoryLabelAsPercentage = BitFieldFactory . getInstance ( 0x800 ) ; private BitField showValueAsPercentage = BitFieldFactory . getInstance ( 0x1000 ) ; private BitField showBubbleSizes = BitFieldFactory . getInstance ( 0x2000 ) ; private BitField showLabel = BitFieldFactory . getInstance ( 0x4000 ) ; private short field_10_indexOfColorValue ; private short field_11_options2 ; private BitField dataLabelPlacement = BitFieldFactory . getInstance ( 0x000F ) ; public final static short DATA_LABEL_PLACEMENT_CHART_DEPENDENT = 0 ; public final static short DATA_LABEL_PLACEMENT_OUTSIDE = 1 ; public final static short DATA_LABEL_PLACEMENT_INSIDE = 2 ; public final static short DATA_LABEL_PLACEMENT_CENTER = 3 ; public final static short DATA_LABEL_PLACEMENT_AXIS = 4 ; public final static short DATA_LABEL_PLACEMENT_ABOVE = 5 ; public final static short DATA_LABEL_PLACEMENT_BELOW = 6 ; public final static short DATA_LABEL_PLACEMENT_LEFT = 7 ; public final static short DATA_LABEL_PLACEMENT_RIGHT = 8 ; public final static short DATA_LABEL_PLACEMENT_AUTO = 9 ; public final static short DATA_LABEL_PLACEMENT_USER_MOVED = 10 ; private short field_12_textRotation ; public TextRecord ( ) { } public TextRecord ( RecordInputStream in ) { super ( in ) ; } protected void validateSid ( short id ) { if ( id != sid ) { throw new RecordFormatException ( "Not a Text record" ) ; } } protected void fillFields ( RecordInputStream in ) { field_1_horizontalAlignment = in . readByte ( ) ; field_2_verticalAlignment = in . readByte ( ) ; field_3_displayMode = in . readShort ( ) ; field_4_rgbColor = in . readInt ( ) ; field_5_x = in . readInt ( ) ; field_6_y = in . readInt ( ) ; field_7_width = in . readInt ( ) ; field_8_height = in . readInt ( ) ; field_9_options1 = in . readShort ( ) ; field_10_indexOfColorValue = in . readShort ( ) ; field_11_options2 = in . readShort ( ) ; field_12_textRotation = in . readShort ( ) ; } public String toString ( ) { StringBuffer buffer = new StringBuffer ( ) ; buffer . append ( "[TEXT]\n" ) ; buffer . append ( "    .horizontalAlignment  = " ) . append ( "0x" ) . append ( HexDump . toHex ( getHorizontalAlignment ( ) ) ) . append ( " (" ) . append ( getHorizontalAlignment ( ) ) . append ( " )" ) ; buffer . append ( System . getProperty ( "line.separator" ) ) ; buffer . append ( "    .verticalAlignment    = " ) . append ( "0x" ) . append ( HexDump . toHex ( getVerticalAlignment ( ) ) ) . append ( " (" ) . append ( getVerticalAlignment ( ) ) . append ( " )" ) ; buffer . append ( System . getProperty ( "line.separator" ) ) ; buffer . append ( "    .displayMode          = " ) . append ( "0x" ) . append ( HexDump . toHex ( getDisplayMode ( ) ) ) . append ( " (" ) . append ( getDisplayMode ( ) ) . append ( " )" ) ; buffer . append ( System . getProperty ( "line.separator" ) ) ; buffer . append ( "    .rgbColor             = " ) . append ( "0x" ) . append ( HexDump . toHex ( getRgbColor ( ) ) ) . append ( " (" ) . append ( getRgbColor ( ) ) . append ( " )" ) ; buffer . append ( System . getProperty ( "line.separator" ) ) ; buffer . append ( "    .x                    = " ) . append ( "0x" ) . append ( HexDump . toHex ( getX ( ) ) ) . append ( " (" ) . append ( getX ( ) ) . append ( " )" ) ; buffer . append ( System . getProperty ( "line.separator" ) ) ; buffer . append ( "    .y                    = " ) . append ( "0x" ) . append ( HexDump . toHex ( getY ( ) ) ) . append ( " (" ) . append ( getY ( ) ) . append ( " )" ) ; buffer . append ( System . getProperty ( "line.separator" ) ) ; buffer . append ( "    .width                = " ) . append ( "0x" ) . append ( HexDump . toHex ( getWidth ( ) ) ) . append ( " (" ) . append ( getWidth ( ) ) . append ( " )" ) ; buffer . append ( System . getProperty ( "line.separator" ) ) ; buffer . append ( "    .height               = " ) . append ( "0x" ) . append ( HexDump . toHex ( getHeight ( ) ) ) . append ( " (" ) . append ( getHeight ( ) ) . append ( " )" ) ; buffer . append ( System . getProperty ( "line.separator" ) ) ; buffer . append ( "    .options1             = " ) . append ( "0x" ) . append ( HexDump . toHex ( getOptions1 ( ) ) ) . append ( " (" ) . append ( getOptions1 ( ) ) . append ( " )" ) ; buffer . append ( System . getProperty ( "line.separator" ) ) ; buffer . append ( "         .autoColor                = " ) . append ( isAutoColor ( ) ) . append ( '\n' ) ; buffer . append ( "         .showKey                  = " ) . append ( isShowKey ( ) ) . append ( '\n' ) ; buffer . append ( "         .showValue                = " ) . append ( isShowValue ( ) ) . append ( '\n' ) ; buffer . append ( "         .vertical                 = " ) . append ( isVertical ( ) ) . append ( '\n' ) ; buffer . append ( "         .autoGeneratedText        = " ) . append ( isAutoGeneratedText ( ) ) . append ( '\n' ) ; buffer . append ( "         .generated                = " ) . append ( isGenerated ( ) ) . append ( '\n' ) ; buffer . append ( "         .autoLabelDeleted         = " ) . append ( isAutoLabelDeleted ( ) ) . append ( '\n' ) ; buffer . append ( "         .autoBackground           = " ) . append ( isAutoBackground ( ) ) . append ( '\n' ) ; buffer . append ( "         .rotation                 = " ) . append ( getRotation ( ) ) . append ( '\n' ) ; buffer . append ( "         .showCategoryLabelAsPercentage     = " ) . append ( isShowCategoryLabelAsPercentage ( ) ) . append ( '\n' ) ; buffer . append ( "         .showValueAsPercentage     = " ) . append ( isShowValueAsPercentage ( ) ) . append ( '\n' ) ; buffer . append ( "         .showBubbleSizes          = " ) . append ( isShowBubbleSizes ( ) ) . append ( '\n' ) ; buffer . append ( "         .showLabel                = " ) . append ( isShowLabel ( ) ) . append ( '\n' ) ; buffer . append ( "    .indexOfColorValue    = " ) . append ( "0x" ) . append ( HexDump . toHex ( getIndexOfColorValue ( ) ) ) . append ( " (" ) . append ( getIndexOfColorValue ( ) ) . append ( " )" ) ; buffer . append ( System . getProperty ( "line.separator" ) ) ; buffer . append ( "    .options2             = " ) . append ( "0x" ) . append ( HexDump . toHex ( getOptions2 ( ) ) ) . append ( " (" ) . append ( getOptions2 ( ) ) . append ( " )" ) ; buffer . append ( System . getProperty ( "line.separator" ) ) ; buffer . append ( "         .dataLabelPlacement       = " ) . append ( getDataLabelPlacement ( ) ) . append ( '\n' ) ; buffer . append ( "    .textRotation         = " ) . append ( "0x" ) . append ( HexDump . toHex ( getTextRotation ( ) ) ) . append ( " (" ) . append ( getTextRotation ( ) ) . append ( " )" ) ; buffer . append ( System . getProperty ( "line.separator" ) ) ; buffer . append ( "[/TEXT]\n" ) ; return buffer . toString ( ) ; } public int serialize ( int offset , byte [ ] data ) { int pos = 0 ; LittleEndian . putShort ( data , 0 + offset , sid ) ; LittleEndian . putShort ( data , 2 + offset , ( short ) ( getRecordSize ( ) - 4 ) ) ; data [ 4 + offset + pos ] = field_1_horizontalAlignment ; data [ 5 + offset + pos ] = field_2_verticalAlignment ; LittleEndian . putShort ( data , 6 + offset + pos , field_3_displayMode ) ; LittleEndian . putInt ( data , 8 + offset + pos , field_4_rgbColor ) ; LittleEndian . putInt ( data , 12 + offset + pos , field_5_x ) ; LittleEndian . putInt ( data , 16 + offset + pos , field_6_y ) ; LittleEndian . putInt ( data , 20 + offset + pos , field_7_width ) ; LittleEndian . putInt ( data , 24 + offset + pos , field_8_height ) ; LittleEndian . putShort ( data , 28 + offset + pos , field_9_options1 ) ; LittleEndian . putShort ( data , 30 + offset + pos , field_10_indexOfColorValue ) ; LittleEndian . putShort ( data , 32 + offset + pos , field_11_options2 ) ; LittleEndian . putShort ( data , 34 + offset + pos , field_12_textRotation ) ; return getRecordSize ( ) ; } public int getRecordSize ( ) { return 4 + 1 + 1 + 2 + 4 + 4 + 4 + 4 + 4 + 2 + 2 + 2 + 2 ; } public short getSid ( ) { return sid ; } public Object clone ( ) { TextRecord rec = new TextRecord ( ) ; rec . field_1_horizontalAlignment = field_1_horizontalAlignment ; rec . field_2_verticalAlignment = field_2_verticalAlignment ; rec . field_3_displayMode = field_3_displayMode ; rec . field_4_rgbColor = field_4_rgbColor ; rec . field_5_x = field_5_x ; rec . field_6_y = field_6_y ; rec . field_7_width = field_7_width ; rec . field_8_height = field_8_height ; rec . field_9_options1 = field_9_options1 ; rec . field_10_indexOfColorValue = field_10_indexOfColorValue ; rec . field_11_options2 = field_11_options2 ; rec . field_12_textRotation = field_12_textRotation ; return rec ; } public byte getHorizontalAlignment ( ) { return field_1_horizontalAlignment ; } public void setHorizontalAlignment ( byte field_1_horizontalAlignment ) { this . field_1_horizontalAlignment = field_1_horizontalAlignment ; } public byte getVerticalAlignment ( ) { return field_2_verticalAlignment ; } public void setVerticalAlignment ( byte field_2_verticalAlignment ) { this . field_2_verticalAlignment = field_2_verticalAlignment ; } public short getDisplayMode ( ) { return field_3_displayMode ; } public void setDisplayMode ( short field_3_displayMode ) { this . field_3_displayMode = field_3_displayMode ; } public int getRgbColor ( ) { return field_4_rgbColor ; } public void setRgbColor ( int field_4_rgbColor ) { this . field_4_rgbColor = field_4_rgbColor ; } public int getX ( ) { return field_5_x ; } public void setX ( int field_5_x ) { this . field_5_x = field_5_x ; } public int getY ( ) { return field_6_y ; } public void setY ( int field_6_y ) { this . field_6_y = field_6_y ; } public int getWidth ( ) { return field_7_width ; } public void setWidth ( int field_7_width ) { this . field_7_width = field_7_width ; } public int getHeight ( ) { return field_8_height ; } public void setHeight ( int field_8_height ) { this . field_8_height = field_8_height ; } public short getOptions1 ( ) { return field_9_options1 ; } public void setOptions1 ( short field_9_options1 ) { this . field_9_options1 = field_9_options1 ; } public short getIndexOfColorValue ( ) { return field_10_indexOfColorValue ; } public void setIndexOfColorValue ( short field_10_indexOfColorValue ) { this . field_10_indexOfColorValue = field_10_indexOfColorValue ; } public short getOptions2 ( ) { return field_11_options2 ; } public void setOptions2 ( short field_11_options2 ) { this . field_11_options2 = field_11_options2 ; } public short getTextRotation ( ) { return field_12_textRotation ; } public void setTextRotation ( short field_12_textRotation ) { this . field_12_textRotation = field_12_textRotation ; } public void setAutoColor ( boolean value ) { field_9_options1 = autoColor . setShortBoolean ( field_9_options1 , value ) ; } public boolean isAutoColor ( ) { return autoColor . isSet ( field_9_options1 ) ; } public void setShowKey ( boolean value ) { field_9_options1 = showKey . setShortBoolean ( field_9_options1 , value ) ; } public boolean isShowKey ( ) { return showKey . isSet ( field_9_options1 ) ; } public void setShowValue ( boolean value ) { field_9_options1 = showValue . setShortBoolean ( field_9_options1 , value ) ; } public boolean isShowValue ( ) { return showValue . isSet ( field_9_options1 ) ; } public void setVertical ( boolean value ) { field_9_options1 = vertical . setShortBoolean ( field_9_options1 , value ) ; } public boolean isVertical ( ) { return vertical . isSet ( field_9_options1 ) ; } public void setAutoGeneratedText ( boolean value ) { field_9_options1 = autoGeneratedText . setShortBoolean ( field_9_options1 , value ) ; } public boolean isAutoGeneratedText ( ) { return autoGeneratedText . isSet ( field_9_options1 ) ; } public void setGenerated ( boolean value ) { field_9_options1 = generated . setShortBoolean ( field_9_options1 , value ) ; } public boolean isGenerated ( ) { return generated . isSet ( field_9_options1 ) ; } public void setAutoLabelDeleted ( boolean value ) { field_9_options1 = autoLabelDeleted . setShortBoolean ( field_9_options1 , value ) ; } public boolean isAutoLabelDeleted ( ) { return autoLabelDeleted . isSet ( field_9_options1 ) ; } public void setAutoBackground ( boolean value ) { field_9_options1 = autoBackground . setShortBoolean ( field_9_options1 , value ) ; } public boolean isAutoBackground ( ) { return autoBackground . isSet ( field_9_options1 ) ; } public void setRotation ( short value ) { field_9_options1 = rotation . setShortValue ( field_9_options1 , value ) ; } public short getRotation ( ) { return rotation . getShortValue ( field_9_options1 ) ; } public void setShowCategoryLabelAsPercentage ( boolean value ) { field_9_options1 = showCategoryLabelAsPercentage . setShortBoolean ( field_9_options1 , value ) ; } public boolean isShowCategoryLabelAsPercentage ( ) { return showCategoryLabelAsPercentage . isSet ( field_9_options1 ) ; } public void setShowValueAsPercentage ( boolean value ) { field_9_options1 = showValueAsPercentage . setShortBoolean ( field_9_options1 , value ) ; } public boolean isShowValueAsPercentage ( ) { return showValueAsPercentage . isSet ( field_9_options1 ) ; } public void setShowBubbleSizes ( boolean value ) { field_9_options1 = showBubbleSizes . setShortBoolean ( field_9_options1 , value ) ; } public boolean isShowBubbleSizes ( ) { return showBubbleSizes . isSet ( field_9_options1 ) ; } public void setShowLabel ( boolean value ) { field_9_options1 = showLabel . setShortBoolean ( field_9_options1 , value ) ; } public boolean isShowLabel ( ) { return showLabel . isSet ( field_9_options1 ) ; } public void setDataLabelPlacement ( short value ) { field_11_options2 = dataLabelPlacement . setShortValue ( field_11_options2 , value ) ; } public short getDataLabelPlacement ( ) { return dataLabelPlacement . getShortValue ( field_11_options2 ) ; } } 	1
package org . apache . poi . hssf . model ; import org . apache . poi . ddf . * ; import org . apache . poi . hssf . record . * ; import org . apache . poi . hssf . usermodel . * ; public class PictureShape extends AbstractShape { private EscherContainerRecord spContainer ; private ObjRecord objRecord ; PictureShape ( HSSFSimpleShape hssfShape , int shapeId ) { spContainer = createSpContainer ( hssfShape , shapeId ) ; objRecord = createObjRecord ( hssfShape , shapeId ) ; } private EscherContainerRecord createSpContainer ( HSSFSimpleShape hssfShape , int shapeId ) { HSSFPicture shape = ( HSSFPicture ) hssfShape ; EscherContainerRecord spContainer = new EscherContainerRecord ( ) ; EscherSpRecord sp = new EscherSpRecord ( ) ; EscherOptRecord opt = new EscherOptRecord ( ) ; EscherRecord anchor ; EscherClientDataRecord clientData = new EscherClientDataRecord ( ) ; spContainer . setRecordId ( EscherContainerRecord . SP_CONTAINER ) ; spContainer . setOptions ( ( short ) 0x000F ) ; sp . setRecordId ( EscherSpRecord . RECORD_ID ) ; sp . setOptions ( ( short ) ( ( EscherAggregate . ST_PICTUREFRAME << 4 ) | 0x2 ) ) ; sp . setShapeId ( shapeId ) ; sp . setFlags ( EscherSpRecord . FLAG_HAVEANCHOR | EscherSpRecord . FLAG_HASSHAPETYPE ) ; opt . setRecordId ( EscherOptRecord . RECORD_ID ) ; opt . addEscherProperty ( new EscherSimpleProperty ( EscherProperties . BLIP__BLIPTODISPLAY , false , true , shape . getPictureIndex ( ) ) ) ; addStandardOptions ( shape , opt ) ; HSSFAnchor userAnchor = shape . getAnchor ( ) ; if ( userAnchor . isHorizontallyFlipped ( ) ) sp . setFlags ( sp . getFlags ( ) | EscherSpRecord . FLAG_FLIPHORIZ ) ; if ( userAnchor . isVerticallyFlipped ( ) ) sp . setFlags ( sp . getFlags ( ) | EscherSpRecord . FLAG_FLIPVERT ) ; anchor = createAnchor ( userAnchor ) ; clientData . setRecordId ( EscherClientDataRecord . RECORD_ID ) ; clientData . setOptions ( ( short ) 0x0000 ) ; spContainer . addChildRecord ( sp ) ; spContainer . addChildRecord ( opt ) ; spContainer . addChildRecord ( anchor ) ; spContainer . addChildRecord ( clientData ) ; return spContainer ; } private ObjRecord createObjRecord ( HSSFShape hssfShape , int shapeId ) { HSSFShape shape = hssfShape ; ObjRecord obj = new ObjRecord ( ) ; CommonObjectDataSubRecord c = new CommonObjectDataSubRecord ( ) ; c . setObjectType ( ( short ) ( ( HSSFSimpleShape ) shape ) . getShapeType ( ) ) ; c . setObjectId ( ( short ) ( shapeId ) ) ; c . setLocked ( true ) ; c . setPrintable ( true ) ; c . setAutofill ( true ) ; c . setAutoline ( true ) ; c . setReserved2 ( 0x0 ) ; EndSubRecord e = new EndSubRecord ( ) ; obj . addSubRecord ( c ) ; obj . addSubRecord ( e ) ; return obj ; } public EscherContainerRecord getSpContainer ( ) { return spContainer ; } public ObjRecord getObjRecord ( ) { return objRecord ; } } 	1
package org . apache . poi . hssf . record ; import org . apache . poi . util . * ; public class AreaFormatRecord extends Record { public final static short sid = 0x100a ; private int field_1_foregroundColor ; private int field_2_backgroundColor ; private short field_3_pattern ; private short field_4_formatFlags ; private BitField automatic = BitFieldFactory . getInstance ( 0x1 ) ; private BitField invert = BitFieldFactory . getInstance ( 0x2 ) ; private short field_5_forecolorIndex ; private short field_6_backcolorIndex ; public AreaFormatRecord ( ) { } public AreaFormatRecord ( RecordInputStream in ) { super ( in ) ; } protected void validateSid ( short id ) { if ( id != sid ) { throw new RecordFormatException ( "Not a AreaFormat record" ) ; } } protected void fillFields ( RecordInputStream in ) { field_1_foregroundColor = in . readInt ( ) ; field_2_backgroundColor = in . readInt ( ) ; field_3_pattern = in . readShort ( ) ; field_4_formatFlags = in . readShort ( ) ; field_5_forecolorIndex = in . readShort ( ) ; field_6_backcolorIndex = in . readShort ( ) ; } public String toString ( ) { StringBuffer buffer = new StringBuffer ( ) ; buffer . append ( "[AREAFORMAT]\n" ) ; buffer . append ( "    .foregroundColor      = " ) . append ( "0x" ) . append ( HexDump . toHex ( getForegroundColor ( ) ) ) . append ( " (" ) . append ( getForegroundColor ( ) ) . append ( " )" ) ; buffer . append ( System . getProperty ( "line.separator" ) ) ; buffer . append ( "    .backgroundColor      = " ) . append ( "0x" ) . append ( HexDump . toHex ( getBackgroundColor ( ) ) ) . append ( " (" ) . append ( getBackgroundColor ( ) ) . append ( " )" ) ; buffer . append ( System . getProperty ( "line.separator" ) ) ; buffer . append ( "    .pattern              = " ) . append ( "0x" ) . append ( HexDump . toHex ( getPattern ( ) ) ) . append ( " (" ) . append ( getPattern ( ) ) . append ( " )" ) ; buffer . append ( System . getProperty ( "line.separator" ) ) ; buffer . append ( "    .formatFlags          = " ) . append ( "0x" ) . append ( HexDump . toHex ( getFormatFlags ( ) ) ) . append ( " (" ) . append ( getFormatFlags ( ) ) . append ( " )" ) ; buffer . append ( System . getProperty ( "line.separator" ) ) ; buffer . append ( "         .automatic                = " ) . append ( isAutomatic ( ) ) . append ( '\n' ) ; buffer . append ( "         .invert                   = " ) . append ( isInvert ( ) ) . append ( '\n' ) ; buffer . append ( "    .forecolorIndex       = " ) . append ( "0x" ) . append ( HexDump . toHex ( getForecolorIndex ( ) ) ) . append ( " (" ) . append ( getForecolorIndex ( ) ) . append ( " )" ) ; buffer . append ( System . getProperty ( "line.separator" ) ) ; buffer . append ( "    .backcolorIndex       = " ) . append ( "0x" ) . append ( HexDump . toHex ( getBackcolorIndex ( ) ) ) . append ( " (" ) . append ( getBackcolorIndex ( ) ) . append ( " )" ) ; buffer . append ( System . getProperty ( "line.separator" ) ) ; buffer . append ( "[/AREAFORMAT]\n" ) ; return buffer . toString ( ) ; } public int serialize ( int offset , byte [ ] data ) { int pos = 0 ; LittleEndian . putShort ( data , 0 + offset , sid ) ; LittleEndian . putShort ( data , 2 + offset , ( short ) ( getRecordSize ( ) - 4 ) ) ; LittleEndian . putInt ( data , 4 + offset + pos , field_1_foregroundColor ) ; LittleEndian . putInt ( data , 8 + offset + pos , field_2_backgroundColor ) ; LittleEndian . putShort ( data , 12 + offset + pos , field_3_pattern ) ; LittleEndian . putShort ( data , 14 + offset + pos , field_4_formatFlags ) ; LittleEndian . putShort ( data , 16 + offset + pos , field_5_forecolorIndex ) ; LittleEndian . putShort ( data , 18 + offset + pos , field_6_backcolorIndex ) ; return getRecordSize ( ) ; } public int getRecordSize ( ) { return 4 + 4 + 4 + 2 + 2 + 2 + 2 ; } public short getSid ( ) { return sid ; } public Object clone ( ) { AreaFormatRecord rec = new AreaFormatRecord ( ) ; rec . field_1_foregroundColor = field_1_foregroundColor ; rec . field_2_backgroundColor = field_2_backgroundColor ; rec . field_3_pattern = field_3_pattern ; rec . field_4_formatFlags = field_4_formatFlags ; rec . field_5_forecolorIndex = field_5_forecolorIndex ; rec . field_6_backcolorIndex = field_6_backcolorIndex ; return rec ; } public int getForegroundColor ( ) { return field_1_foregroundColor ; } public void setForegroundColor ( int field_1_foregroundColor ) { this . field_1_foregroundColor = field_1_foregroundColor ; } public int getBackgroundColor ( ) { return field_2_backgroundColor ; } public void setBackgroundColor ( int field_2_backgroundColor ) { this . field_2_backgroundColor = field_2_backgroundColor ; } public short getPattern ( ) { return field_3_pattern ; } public void setPattern ( short field_3_pattern ) { this . field_3_pattern = field_3_pattern ; } public short getFormatFlags ( ) { return field_4_formatFlags ; } public void setFormatFlags ( short field_4_formatFlags ) { this . field_4_formatFlags = field_4_formatFlags ; } public short getForecolorIndex ( ) { return field_5_forecolorIndex ; } public void setForecolorIndex ( short field_5_forecolorIndex ) { this . field_5_forecolorIndex = field_5_forecolorIndex ; } public short getBackcolorIndex ( ) { return field_6_backcolorIndex ; } public void setBackcolorIndex ( short field_6_backcolorIndex ) { this . field_6_backcolorIndex = field_6_backcolorIndex ; } public void setAutomatic ( boolean value ) { field_4_formatFlags = automatic . setShortBoolean ( field_4_formatFlags , value ) ; } public boolean isAutomatic ( ) { return automatic . isSet ( field_4_formatFlags ) ; } public void setInvert ( boolean value ) { field_4_formatFlags = invert . setShortBoolean ( field_4_formatFlags , value ) ; } public boolean isInvert ( ) { return invert . isSet ( field_4_formatFlags ) ; } } 	1
package org . apache . poi . hssf . record ; import org . apache . poi . util . LittleEndian ; public class UseSelFSRecord extends Record { public final static short sid = 0x160 ; public final static short TRUE = 1 ; public final static short FALSE = 0 ; private short field_1_flag ; public UseSelFSRecord ( ) { } public UseSelFSRecord ( RecordInputStream in ) { super ( in ) ; } protected void validateSid ( short id ) { if ( id != sid ) { throw new RecordFormatException ( "NOT A UseSelFS RECORD" ) ; } } protected void fillFields ( RecordInputStream in ) { field_1_flag = in . readShort ( ) ; } public void setFlag ( short flag ) { field_1_flag = flag ; } public short getFlag ( ) { return field_1_flag ; } public String toString ( ) { StringBuffer buffer = new StringBuffer ( ) ; buffer . append ( "[USESELFS]\n" ) ; buffer . append ( "    .flag            = " ) . append ( Integer . toHexString ( getFlag ( ) ) ) . append ( "\n" ) ; buffer . append ( "[/USESELFS]\n" ) ; return buffer . toString ( ) ; } public int serialize ( int offset , byte [ ] data ) { LittleEndian . putShort ( data , 0 + offset , sid ) ; LittleEndian . putShort ( data , 2 + offset , ( ( short ) 0x02 ) ) ; LittleEndian . putShort ( data , 4 + offset , getFlag ( ) ) ; return getRecordSize ( ) ; } public int getRecordSize ( ) { return 6 ; } public short getSid ( ) { return sid ; } } 	1
package org . apache . poi . hssf . model ; import org . apache . poi . ddf . * ; import org . apache . poi . hssf . record . * ; import org . apache . poi . hssf . util . HSSFColor ; import org . apache . poi . hssf . util . SheetReferences ; import org . apache . poi . util . POILogFactory ; import org . apache . poi . util . POILogger ; import java . util . ArrayList ; import java . util . Iterator ; import java . util . List ; import java . util . Locale ; public class Workbook implements Model { private static final int DEBUG = POILogger . DEBUG ; private final static short CODEPAGE = ( short ) 0x4b0 ; protected WorkbookRecordList records = new WorkbookRecordList ( ) ; protected SSTRecord sst = null ; protected ExternSheetRecord externSheet = null ; protected ArrayList boundsheets = new ArrayList ( ) ; protected ArrayList formats = new ArrayList ( ) ; protected ArrayList names = new ArrayList ( ) ; protected int numxfs = 0 ; protected int numfonts = 0 ; private short maxformatid = - 1 ; private boolean uses1904datewindowing = false ; private DrawingManager2 drawingManager ; private List escherBSERecords = new ArrayList ( ) ; private WindowOneRecord windowOne ; private static POILogger log = POILogFactory . getLogger ( Workbook . class ) ; public Workbook ( ) { } public static Workbook createWorkbook ( List recs ) { if ( log . check ( POILogger . DEBUG ) ) log . log ( DEBUG , "Workbook (readfile) created with reclen=" , new Integer ( recs . size ( ) ) ) ; Workbook retval = new Workbook ( ) ; ArrayList records = new ArrayList ( recs . size ( ) / 3 ) ; for ( int k = 0 ; k < recs . size ( ) ; k ++ ) { Record rec = ( Record ) recs . get ( k ) ; if ( rec . getSid ( ) == EOFRecord . sid ) { records . add ( rec ) ; if ( log . check ( POILogger . DEBUG ) ) log . log ( DEBUG , "found workbook eof record at " + k ) ; break ; } switch ( rec . getSid ( ) ) { case BoundSheetRecord . sid : if ( log . check ( POILogger . DEBUG ) ) log . log ( DEBUG , "found boundsheet record at " + k ) ; retval . boundsheets . add ( rec ) ; retval . records . setBspos ( k ) ; break ; case SSTRecord . sid : if ( log . check ( POILogger . DEBUG ) ) log . log ( DEBUG , "found sst record at " + k ) ; retval . sst = ( SSTRecord ) rec ; break ; case FontRecord . sid : if ( log . check ( POILogger . DEBUG ) ) log . log ( DEBUG , "found font record at " + k ) ; retval . records . setFontpos ( k ) ; retval . numfonts ++ ; break ; case ExtendedFormatRecord . sid : if ( log . check ( POILogger . DEBUG ) ) log . log ( DEBUG , "found XF record at " + k ) ; retval . records . setXfpos ( k ) ; retval . numxfs ++ ; break ; case TabIdRecord . sid : if ( log . check ( POILogger . DEBUG ) ) log . log ( DEBUG , "found tabid record at " + k ) ; retval . records . setTabpos ( k ) ; break ; case ProtectRecord . sid : if ( log . check ( POILogger . DEBUG ) ) log . log ( DEBUG , "found protect record at " + k ) ; retval . records . setProtpos ( k ) ; break ; case BackupRecord . sid : if ( log . check ( POILogger . DEBUG ) ) log . log ( DEBUG , "found backup record at " + k ) ; retval . records . setBackuppos ( k ) ; break ; case ExternSheetRecord . sid : if ( log . check ( POILogger . DEBUG ) ) log . log ( DEBUG , "found extern sheet record at " + k ) ; retval . externSheet = ( ExternSheetRecord ) rec ; break ; case NameRecord . sid : if ( log . check ( POILogger . DEBUG ) ) log . log ( DEBUG , "found name record at " + k ) ; retval . names . add ( rec ) ; break ; case SupBookRecord . sid : if ( log . check ( POILogger . DEBUG ) ) log . log ( DEBUG , "found SupBook record at " + k ) ; break ; case FormatRecord . sid : if ( log . check ( POILogger . DEBUG ) ) log . log ( DEBUG , "found format record at " + k ) ; retval . formats . add ( rec ) ; retval . maxformatid = retval . maxformatid >= ( ( FormatRecord ) rec ) . getIndexCode ( ) ? retval . maxformatid : ( ( FormatRecord ) rec ) . getIndexCode ( ) ; break ; case DateWindow1904Record . sid : if ( log . check ( POILogger . DEBUG ) ) log . log ( DEBUG , "found datewindow1904 record at " + k ) ; retval . uses1904datewindowing = ( ( DateWindow1904Record ) rec ) . getWindowing ( ) == 1 ; break ; case PaletteRecord . sid : if ( log . check ( POILogger . DEBUG ) ) log . log ( DEBUG , "found palette record at " + k ) ; retval . records . setPalettepos ( k ) ; break ; case WindowOneRecord . sid : if ( log . check ( POILogger . DEBUG ) ) log . log ( DEBUG , "found WindowOneRecord at " + k ) ; retval . windowOne = ( WindowOneRecord ) rec ; default : } records . add ( rec ) ; } retval . records . setRecords ( records ) ; if ( retval . windowOne == null ) { retval . windowOne = ( WindowOneRecord ) retval . createWindowOne ( ) ; } if ( log . check ( POILogger . DEBUG ) ) log . log ( DEBUG , "exit create workbook from existing file function" ) ; return retval ; } public static Workbook createWorkbook ( ) { if ( log . check ( POILogger . DEBUG ) ) log . log ( DEBUG , "creating new workbook from scratch" ) ; Workbook retval = new Workbook ( ) ; ArrayList records = new ArrayList ( 30 ) ; ArrayList formats = new ArrayList ( 8 ) ; records . add ( retval . createBOF ( ) ) ; records . add ( retval . createInterfaceHdr ( ) ) ; records . add ( retval . createMMS ( ) ) ; records . add ( retval . createInterfaceEnd ( ) ) ; records . add ( retval . createWriteAccess ( ) ) ; records . add ( retval . createCodepage ( ) ) ; records . add ( retval . createDSF ( ) ) ; records . add ( retval . createTabId ( ) ) ; retval . records . setTabpos ( records . size ( ) - 1 ) ; records . add ( retval . createFnGroupCount ( ) ) ; records . add ( retval . createWindowProtect ( ) ) ; records . add ( retval . createProtect ( ) ) ; retval . records . setProtpos ( records . size ( ) - 1 ) ; records . add ( retval . createPassword ( ) ) ; records . add ( retval . createProtectionRev4 ( ) ) ; records . add ( retval . createPasswordRev4 ( ) ) ; retval . windowOne = ( WindowOneRecord ) retval . createWindowOne ( ) ; records . add ( retval . windowOne ) ; records . add ( retval . createBackup ( ) ) ; retval . records . setBackuppos ( records . size ( ) - 1 ) ; records . add ( retval . createHideObj ( ) ) ; records . add ( retval . createDateWindow1904 ( ) ) ; records . add ( retval . createPrecision ( ) ) ; records . add ( retval . createRefreshAll ( ) ) ; records . add ( retval . createBookBool ( ) ) ; records . add ( retval . createFont ( ) ) ; records . add ( retval . createFont ( ) ) ; records . add ( retval . createFont ( ) ) ; records . add ( retval . createFont ( ) ) ; retval . records . setFontpos ( records . size ( ) - 1 ) ; retval . numfonts = 4 ; for ( int i = 0 ; i <= 7 ; i ++ ) { Record rec ; rec = retval . createFormat ( i ) ; retval . maxformatid = retval . maxformatid >= ( ( FormatRecord ) rec ) . getIndexCode ( ) ? retval . maxformatid : ( ( FormatRecord ) rec ) . getIndexCode ( ) ; formats . add ( rec ) ; records . add ( rec ) ; } retval . formats = formats ; for ( int k = 0 ; k < 21 ; k ++ ) { records . add ( retval . createExtendedFormat ( k ) ) ; retval . numxfs ++ ; } retval . records . setXfpos ( records . size ( ) - 1 ) ; for ( int k = 0 ; k < 6 ; k ++ ) { records . add ( retval . createStyle ( k ) ) ; } records . add ( retval . createUseSelFS ( ) ) ; for ( int k = 0 ; k < 1 ; k ++ ) { BoundSheetRecord bsr = ( BoundSheetRecord ) retval . createBoundSheet ( k ) ; records . add ( bsr ) ; retval . boundsheets . add ( bsr ) ; retval . records . setBspos ( records . size ( ) - 1 ) ; } records . add ( retval . createCountry ( ) ) ; retval . sst = ( SSTRecord ) retval . createSST ( ) ; records . add ( retval . sst ) ; records . add ( retval . createExtendedSST ( ) ) ; records . add ( retval . createEOF ( ) ) ; retval . records . setRecords ( records ) ; if ( log . check ( POILogger . DEBUG ) ) log . log ( DEBUG , "exit create new workbook from scratch" ) ; return retval ; } public NameRecord getSpecificBuiltinRecord ( byte name , int sheetIndex ) { Iterator iterator = names . iterator ( ) ; while ( iterator . hasNext ( ) ) { NameRecord record = ( NameRecord ) iterator . next ( ) ; if ( record . getBuiltInName ( ) == name && record . getIndexToSheet ( ) == sheetIndex ) { return record ; } } return null ; } public void removeBuiltinRecord ( byte name , int sheetIndex ) { NameRecord record = getSpecificBuiltinRecord ( name , sheetIndex ) ; if ( record != null ) { names . remove ( record ) ; } } public int getNumRecords ( ) { return records . size ( ) ; } public FontRecord getFontRecordAt ( int idx ) { int index = idx ; if ( index > 4 ) { index -= 1 ; } if ( index > ( numfonts - 1 ) ) { throw new ArrayIndexOutOfBoundsException ( "There are only " + numfonts + " font records, you asked for " + idx ) ; } FontRecord retval = ( FontRecord ) records . get ( ( records . getFontpos ( ) - ( numfonts - 1 ) ) + index ) ; return retval ; } public FontRecord createNewFont ( ) { FontRecord rec = ( FontRecord ) createFont ( ) ; records . add ( records . getFontpos ( ) + 1 , rec ) ; records . setFontpos ( records . getFontpos ( ) + 1 ) ; numfonts ++ ; return rec ; } public int getNumberOfFontRecords ( ) { return numfonts ; } public void setSheetBof ( int sheetnum , int pos ) { if ( log . check ( POILogger . DEBUG ) ) log . log ( DEBUG , "setting bof for sheetnum =" , new Integer ( sheetnum ) , " at pos=" , new Integer ( pos ) ) ; checkSheets ( sheetnum ) ; ( ( BoundSheetRecord ) boundsheets . get ( sheetnum ) ) . setPositionOfBof ( pos ) ; } public BackupRecord getBackupRecord ( ) { return ( BackupRecord ) records . get ( records . getBackuppos ( ) ) ; } public void setSheetName ( int sheetnum , String sheetname ) { checkSheets ( sheetnum ) ; BoundSheetRecord sheet = ( BoundSheetRecord ) boundsheets . get ( sheetnum ) ; sheet . setSheetname ( sheetname ) ; sheet . setSheetnameLength ( ( byte ) sheetname . length ( ) ) ; } public boolean doesContainsSheetName ( String name , int excludeSheetIdx ) { for ( int i = 0 ; i < boundsheets . size ( ) ; i ++ ) { BoundSheetRecord boundSheetRecord = ( BoundSheetRecord ) boundsheets . get ( i ) ; if ( excludeSheetIdx != i && name . equals ( boundSheetRecord . getSheetname ( ) ) ) return true ; } return false ; } public void setSheetName ( int sheetnum , String sheetname , short encoding ) { checkSheets ( sheetnum ) ; BoundSheetRecord sheet = ( BoundSheetRecord ) boundsheets . get ( sheetnum ) ; sheet . setSheetname ( sheetname ) ; sheet . setSheetnameLength ( ( byte ) sheetname . length ( ) ) ; sheet . setCompressedUnicodeFlag ( ( byte ) encoding ) ; } public void setSheetOrder ( String sheetname , int pos ) { int sheetNumber = getSheetIndex ( sheetname ) ; boundsheets . add ( pos , boundsheets . remove ( sheetNumber ) ) ; } public String getSheetName ( int sheetnum ) { return ( ( BoundSheetRecord ) boundsheets . get ( sheetnum ) ) . getSheetname ( ) ; } public int getSheetIndex ( String name ) { int retval = - 1 ; for ( int k = 0 ; k < boundsheets . size ( ) ; k ++ ) { String sheet = getSheetName ( k ) ; if ( sheet . equalsIgnoreCase ( name ) ) { retval = k ; break ; } } return retval ; } private void checkSheets ( int sheetnum ) { if ( ( boundsheets . size ( ) ) <= sheetnum ) { if ( ( boundsheets . size ( ) + 1 ) <= sheetnum ) { throw new RuntimeException ( "Sheet number out of bounds!" ) ; } BoundSheetRecord bsr = ( BoundSheetRecord ) createBoundSheet ( sheetnum ) ; records . add ( records . getBspos ( ) + 1 , bsr ) ; records . setBspos ( records . getBspos ( ) + 1 ) ; boundsheets . add ( bsr ) ; fixTabIdRecord ( ) ; } } public void removeSheet ( int sheetnum ) { if ( boundsheets . size ( ) > sheetnum ) { records . remove ( records . getBspos ( ) - ( boundsheets . size ( ) - 1 ) + sheetnum ) ; boundsheets . remove ( sheetnum ) ; fixTabIdRecord ( ) ; } } private void fixTabIdRecord ( ) { TabIdRecord tir = ( TabIdRecord ) records . get ( records . getTabpos ( ) ) ; short [ ] tia = new short [ boundsheets . size ( ) ] ; for ( short k = 0 ; k < tia . length ; k ++ ) { tia [ k ] = k ; } tir . setTabIdArray ( tia ) ; } public int getNumSheets ( ) { if ( log . check ( POILogger . DEBUG ) ) log . log ( DEBUG , "getNumSheets=" , new Integer ( boundsheets . size ( ) ) ) ; return boundsheets . size ( ) ; } public int getNumExFormats ( ) { if ( log . check ( POILogger . DEBUG ) ) log . log ( DEBUG , "getXF=" , new Integer ( numxfs ) ) ; return numxfs ; } public ExtendedFormatRecord getExFormatAt ( int index ) { int xfptr = records . getXfpos ( ) - ( numxfs - 1 ) ; xfptr += index ; ExtendedFormatRecord retval = ( ExtendedFormatRecord ) records . get ( xfptr ) ; return retval ; } public ExtendedFormatRecord createCellXF ( ) { ExtendedFormatRecord xf = createExtendedFormat ( ) ; records . add ( records . getXfpos ( ) + 1 , xf ) ; records . setXfpos ( records . getXfpos ( ) + 1 ) ; numxfs ++ ; return xf ; } public int addSSTString ( UnicodeString string ) { if ( log . check ( POILogger . DEBUG ) ) log . log ( DEBUG , "insert to sst string='" , string ) ; if ( sst == null ) { insertSST ( ) ; } return sst . addString ( string ) ; } public UnicodeString getSSTString ( int str ) { if ( sst == null ) { insertSST ( ) ; } UnicodeString retval = sst . getString ( str ) ; if ( log . check ( POILogger . DEBUG ) ) log . log ( DEBUG , "Returning SST for index=" , new Integer ( str ) , " String= " , retval ) ; return retval ; } public void insertSST ( ) { if ( log . check ( POILogger . DEBUG ) ) log . log ( DEBUG , "creating new SST via insertSST!" ) ; sst = ( SSTRecord ) createSST ( ) ; records . add ( records . size ( ) - 1 , createExtendedSST ( ) ) ; records . add ( records . size ( ) - 2 , sst ) ; } public int serialize ( int offset , byte [ ] data ) { if ( log . check ( POILogger . DEBUG ) ) log . log ( DEBUG , "Serializing Workbook with offsets" ) ; int pos = 0 ; SSTRecord sst = null ; int sstPos = 0 ; for ( int k = 0 ; k < records . size ( ) ; k ++ ) { Record record = records . get ( k ) ; if ( record . getSid ( ) != RecalcIdRecord . sid || ( ( RecalcIdRecord ) record ) . isNeeded ( ) ) { if ( record instanceof SSTRecord ) { sst = ( SSTRecord ) record ; sstPos = pos ; } if ( record . getSid ( ) == ExtSSTRecord . sid && sst != null ) { record = sst . createExtSSTRecord ( sstPos + offset ) ; } int len = record . serialize ( pos + offset , data ) ; pos += len ; } } if ( log . check ( POILogger . DEBUG ) ) log . log ( DEBUG , "Exiting serialize workbook" ) ; return pos ; } public int getSize ( ) { int retval = 0 ; SSTRecord sst = null ; for ( int k = 0 ; k < records . size ( ) ; k ++ ) { Record record = records . get ( k ) ; if ( record . getSid ( ) != RecalcIdRecord . sid || ( ( RecalcIdRecord ) record ) . isNeeded ( ) ) { if ( record instanceof SSTRecord ) sst = ( SSTRecord ) record ; if ( record . getSid ( ) == ExtSSTRecord . sid && sst != null ) retval += sst . calcExtSSTRecordSize ( ) ; else retval += record . getRecordSize ( ) ; } } return retval ; } protected Record createBOF ( ) { BOFRecord retval = new BOFRecord ( ) ; retval . setVersion ( ( short ) 0x600 ) ; retval . setType ( ( short ) 5 ) ; retval . setBuild ( ( short ) 0x10d3 ) ; retval . setBuildYear ( ( short ) 1996 ) ; retval . setHistoryBitMask ( 0x41 ) ; retval . setRequiredVersion ( 0x6 ) ; return retval ; } protected Record createInterfaceHdr ( ) { InterfaceHdrRecord retval = new InterfaceHdrRecord ( ) ; retval . setCodepage ( CODEPAGE ) ; return retval ; } protected Record createMMS ( ) { MMSRecord retval = new MMSRecord ( ) ; retval . setAddMenuCount ( ( byte ) 0 ) ; retval . setDelMenuCount ( ( byte ) 0 ) ; return retval ; } protected Record createInterfaceEnd ( ) { return new InterfaceEndRecord ( ) ; } protected Record createWriteAccess ( ) { WriteAccessRecord retval = new WriteAccessRecord ( ) ; try { retval . setUsername ( System . getProperty ( "user.name" ) ) ; } catch ( java . security . AccessControlException e ) { retval . setUsername ( "POI" ) ; } return retval ; } protected Record createCodepage ( ) { CodepageRecord retval = new CodepageRecord ( ) ; retval . setCodepage ( CODEPAGE ) ; return retval ; } protected Record createDSF ( ) { DSFRecord retval = new DSFRecord ( ) ; retval . setDsf ( ( short ) 0 ) ; return retval ; } protected Record createTabId ( ) { TabIdRecord retval = new TabIdRecord ( ) ; short [ ] tabidarray = { 0 } ; retval . setTabIdArray ( tabidarray ) ; return retval ; } protected Record createFnGroupCount ( ) { FnGroupCountRecord retval = new FnGroupCountRecord ( ) ; retval . setCount ( ( short ) 14 ) ; return retval ; } protected Record createWindowProtect ( ) { WindowProtectRecord retval = new WindowProtectRecord ( ) ; retval . setProtect ( false ) ; return retval ; } protected Record createProtect ( ) { ProtectRecord retval = new ProtectRecord ( ) ; retval . setProtect ( false ) ; return retval ; } protected Record createPassword ( ) { PasswordRecord retval = new PasswordRecord ( ) ; retval . setPassword ( ( short ) 0 ) ; return retval ; } protected Record createProtectionRev4 ( ) { ProtectionRev4Record retval = new ProtectionRev4Record ( ) ; retval . setProtect ( false ) ; return retval ; } protected Record createPasswordRev4 ( ) { PasswordRev4Record retval = new PasswordRev4Record ( ) ; retval . setPassword ( ( short ) 0 ) ; return retval ; } protected Record createWindowOne ( ) { WindowOneRecord retval = new WindowOneRecord ( ) ; retval . setHorizontalHold ( ( short ) 0x168 ) ; retval . setVerticalHold ( ( short ) 0x10e ) ; retval . setWidth ( ( short ) 0x3a5c ) ; retval . setHeight ( ( short ) 0x23be ) ; retval . setOptions ( ( short ) 0x38 ) ; retval . setSelectedTab ( ( short ) 0x0 ) ; retval . setDisplayedTab ( ( short ) 0x0 ) ; retval . setNumSelectedTabs ( ( short ) 1 ) ; retval . setTabWidthRatio ( ( short ) 0x258 ) ; return retval ; } protected Record createBackup ( ) { BackupRecord retval = new BackupRecord ( ) ; retval . setBackup ( ( short ) 0 ) ; return retval ; } protected Record createHideObj ( ) { HideObjRecord retval = new HideObjRecord ( ) ; retval . setHideObj ( ( short ) 0 ) ; return retval ; } protected Record createDateWindow1904 ( ) { DateWindow1904Record retval = new DateWindow1904Record ( ) ; retval . setWindowing ( ( short ) 0 ) ; return retval ; } protected Record createPrecision ( ) { PrecisionRecord retval = new PrecisionRecord ( ) ; retval . setFullPrecision ( true ) ; return retval ; } protected Record createRefreshAll ( ) { RefreshAllRecord retval = new RefreshAllRecord ( ) ; retval . setRefreshAll ( false ) ; return retval ; } protected Record createBookBool ( ) { BookBoolRecord retval = new BookBoolRecord ( ) ; retval . setSaveLinkValues ( ( short ) 0 ) ; return retval ; } protected Record createFont ( ) { FontRecord retval = new FontRecord ( ) ; retval . setFontHeight ( ( short ) 0xc8 ) ; retval . setAttributes ( ( short ) 0x0 ) ; retval . setColorPaletteIndex ( ( short ) 0x7fff ) ; retval . setBoldWeight ( ( short ) 0x190 ) ; retval . setFontNameLength ( ( byte ) 5 ) ; retval . setFontName ( "Arial" ) ; return retval ; } protected Record createFormat ( int id ) { FormatRecord retval = new FormatRecord ( ) ; switch ( id ) { case 0 : retval . setIndexCode ( ( short ) 5 ) ; retval . setFormatStringLength ( ( byte ) 0x17 ) ; retval . setFormatString ( "\"$\"#,##0_);\\(\"$\"#,##0\\)" ) ; break ; case 1 : retval . setIndexCode ( ( short ) 6 ) ; retval . setFormatStringLength ( ( byte ) 0x1c ) ; retval . setFormatString ( "\"$\"#,##0_);[Red]\\(\"$\"#,##0\\)" ) ; break ; case 2 : retval . setIndexCode ( ( short ) 7 ) ; retval . setFormatStringLength ( ( byte ) 0x1d ) ; retval . setFormatString ( "\"$\"#,##0.00_);\\(\"$\"#,##0.00\\)" ) ; break ; case 3 : retval . setIndexCode ( ( short ) 8 ) ; retval . setFormatStringLength ( ( byte ) 0x22 ) ; retval . setFormatString ( "\"$\"#,##0.00_);[Red]\\(\"$\"#,##0.00\\)" ) ; break ; case 4 : retval . setIndexCode ( ( short ) 0x2a ) ; retval . setFormatStringLength ( ( byte ) 0x32 ) ; retval . setFormatString ( "_(\"$\"* #,##0_);_(\"$\"* \\(#,##0\\);_(\"$\"* \"-\"_);_(@_)" ) ; break ; case 5 : retval . setIndexCode ( ( short ) 0x29 ) ; retval . setFormatStringLength ( ( byte ) 0x29 ) ; retval . setFormatString ( "_(* #,##0_);_(* \\(#,##0\\);_(* \"-\"_);_(@_)" ) ; break ; case 6 : retval . setIndexCode ( ( short ) 0x2c ) ; retval . setFormatStringLength ( ( byte ) 0x3a ) ; retval . setFormatString ( "_(\"$\"* #,##0.00_);_(\"$\"* \\(#,##0.00\\);_(\"$\"* \"-\"??_);_(@_)" ) ; break ; case 7 : retval . setIndexCode ( ( short ) 0x2b ) ; retval . setFormatStringLength ( ( byte ) 0x31 ) ; retval . setFormatString ( "_(* #,##0.00_);_(* \\(#,##0.00\\);_(* \"-\"??_);_(@_)" ) ; break ; } return retval ; } protected Record createExtendedFormat ( int id ) { ExtendedFormatRecord retval = new ExtendedFormatRecord ( ) ; switch ( id ) { case 0 : retval . setFontIndex ( ( short ) 0 ) ; retval . setFormatIndex ( ( short ) 0 ) ; retval . setCellOptions ( ( short ) 0xfffffff5 ) ; retval . setAlignmentOptions ( ( short ) 0x20 ) ; retval . setIndentionOptions ( ( short ) 0 ) ; retval . setBorderOptions ( ( short ) 0 ) ; retval . setPaletteOptions ( ( short ) 0 ) ; retval . setAdtlPaletteOptions ( ( short ) 0 ) ; retval . setFillPaletteOptions ( ( short ) 0x20c0 ) ; break ; case 1 : retval . setFontIndex ( ( short ) 1 ) ; retval . setFormatIndex ( ( short ) 0 ) ; retval . setCellOptions ( ( short ) 0xfffffff5 ) ; retval . setAlignmentOptions ( ( short ) 0x20 ) ; retval . setIndentionOptions ( ( short ) 0xfffff400 ) ; retval . setBorderOptions ( ( short ) 0 ) ; retval . setPaletteOptions ( ( short ) 0 ) ; retval . setAdtlPaletteOptions ( ( short ) 0 ) ; retval . setFillPaletteOptions ( ( short ) 0x20c0 ) ; break ; case 2 : retval . setFontIndex ( ( short ) 1 ) ; retval . setFormatIndex ( ( short ) 0 ) ; retval . setCellOptions ( ( short ) 0xfffffff5 ) ; retval . setAlignmentOptions ( ( short ) 0x20 ) ; retval . setIndentionOptions ( ( short ) 0xfffff400 ) ; retval . setBorderOptions ( ( short ) 0 ) ; retval . setPaletteOptions ( ( short ) 0 ) ; retval . setAdtlPaletteOptions ( ( short ) 0 ) ; retval . setFillPaletteOptions ( ( short ) 0x20c0 ) ; break ; case 3 : retval . setFontIndex ( ( short ) 2 ) ; retval . setFormatIndex ( ( short ) 0 ) ; retval . setCellOptions ( ( short ) 0xfffffff5 ) ; retval . setAlignmentOptions ( ( short ) 0x20 ) ; retval . setIndentionOptions ( ( short ) 0xfffff400 ) ; retval . setBorderOptions ( ( short ) 0 ) ; retval . setPaletteOptions ( ( short ) 0 ) ; retval . setAdtlPaletteOptions ( ( short ) 0 ) ; retval . setFillPaletteOptions ( ( short ) 0x20c0 ) ; break ; case 4 : retval . setFontIndex ( ( short ) 2 ) ; retval . setFormatIndex ( ( short ) 0 ) ; retval . setCellOptions ( ( short ) 0xfffffff5 ) ; retval . setAlignmentOptions ( ( short ) 0x20 ) ; retval . setIndentionOptions ( ( short ) 0xfffff400 ) ; retval . setBorderOptions ( ( short ) 0 ) ; retval . setPaletteOptions ( ( short ) 0 ) ; retval . setAdtlPaletteOptions ( ( short ) 0 ) ; retval . setFillPaletteOptions ( ( short ) 0x20c0 ) ; break ; case 5 : retval . setFontIndex ( ( short ) 0 ) ; retval . setFormatIndex ( ( short ) 0 ) ; retval . setCellOptions ( ( short ) 0xfffffff5 ) ; retval . setAlignmentOptions ( ( short ) 0x20 ) ; retval . setIndentionOptions ( ( short ) 0xfffff400 ) ; retval . setBorderOptions ( ( short ) 0 ) ; retval . setPaletteOptions ( ( short ) 0 ) ; retval . setAdtlPaletteOptions ( ( short ) 0 ) ; retval . setFillPaletteOptions ( ( short ) 0x20c0 ) ; break ; case 6 : retval . setFontIndex ( ( short ) 0 ) ; retval . setFormatIndex ( ( short ) 0 ) ; retval . setCellOptions ( ( short ) 0xfffffff5 ) ; retval . setAlignmentOptions ( ( short ) 0x20 ) ; retval . setIndentionOptions ( ( short ) 0xfffff400 ) ; retval . setBorderOptions ( ( short ) 0 ) ; retval . setPaletteOptions ( ( short ) 0 ) ; retval . setAdtlPaletteOptions ( ( short ) 0 ) ; retval . setFillPaletteOptions ( ( short ) 0x20c0 ) ; break ; case 7 : retval . setFontIndex ( ( short ) 0 ) ; retval . setFormatIndex ( ( short ) 0 ) ; retval . setCellOptions ( ( short ) 0xfffffff5 ) ; retval . setAlignmentOptions ( ( short ) 0x20 ) ; retval . setIndentionOptions ( ( short ) 0xfffff400 ) ; retval . setBorderOptions ( ( short ) 0 ) ; retval . setPaletteOptions ( ( short ) 0 ) ; retval . setAdtlPaletteOptions ( ( short ) 0 ) ; retval . setFillPaletteOptions ( ( short ) 0x20c0 ) ; break ; case 8 : retval . setFontIndex ( ( short ) 0 ) ; retval . setFormatIndex ( ( short ) 0 ) ; retval . setCellOptions ( ( short ) 0xfffffff5 ) ; retval . setAlignmentOptions ( ( short ) 0x20 ) ; retval . setIndentionOptions ( ( short ) 0xfffff400 ) ; retval . setBorderOptions ( ( short ) 0 ) ; retval . setPaletteOptions ( ( short ) 0 ) ; retval . setAdtlPaletteOptions ( ( short ) 0 ) ; retval . setFillPaletteOptions ( ( short ) 0x20c0 ) ; break ; case 9 : retval . setFontIndex ( ( short ) 0 ) ; retval . setFormatIndex ( ( short ) 0 ) ; retval . setCellOptions ( ( short ) 0xfffffff5 ) ; retval . setAlignmentOptions ( ( short ) 0x20 ) ; retval . setIndentionOptions ( ( short ) 0xfffff400 ) ; retval . setBorderOptions ( ( short ) 0 ) ; retval . setPaletteOptions ( ( short ) 0 ) ; retval . setAdtlPaletteOptions ( ( short ) 0 ) ; retval . setFillPaletteOptions ( ( short ) 0x20c0 ) ; break ; case 10 : retval . setFontIndex ( ( short ) 0 ) ; retval . setFormatIndex ( ( short ) 0 ) ; retval . setCellOptions ( ( short ) 0xfffffff5 ) ; retval . setAlignmentOptions ( ( short ) 0x20 ) ; retval . setIndentionOptions ( ( short ) 0xfffff400 ) ; retval . setBorderOptions ( ( short ) 0 ) ; retval . setPaletteOptions ( ( short ) 0 ) ; retval . setAdtlPaletteOptions ( ( short ) 0 ) ; retval . setFillPaletteOptions ( ( short ) 0x20c0 ) ; break ; case 11 : retval . setFontIndex ( ( short ) 0 ) ; retval . setFormatIndex ( ( short ) 0 ) ; retval . setCellOptions ( ( short ) 0xfffffff5 ) ; retval . setAlignmentOptions ( ( short ) 0x20 ) ; retval . setIndentionOptions ( ( short ) 0xfffff400 ) ; retval . setBorderOptions ( ( short ) 0 ) ; retval . setPaletteOptions ( ( short ) 0 ) ; retval . setAdtlPaletteOptions ( ( short ) 0 ) ; retval . setFillPaletteOptions ( ( short ) 0x20c0 ) ; break ; case 12 : retval . setFontIndex ( ( short ) 0 ) ; retval . setFormatIndex ( ( short ) 0 ) ; retval . setCellOptions ( ( short ) 0xfffffff5 ) ; retval . setAlignmentOptions ( ( short ) 0x20 ) ; retval . setIndentionOptions ( ( short ) 0xfffff400 ) ; retval . setBorderOptions ( ( short ) 0 ) ; retval . setPaletteOptions ( ( short ) 0 ) ; retval . setAdtlPaletteOptions ( ( short ) 0 ) ; retval . setFillPaletteOptions ( ( short ) 0x20c0 ) ; break ; case 13 : retval . setFontIndex ( ( short ) 0 ) ; retval . setFormatIndex ( ( short ) 0 ) ; retval . setCellOptions ( ( short ) 0xfffffff5 ) ; retval . setAlignmentOptions ( ( short ) 0x20 ) ; retval . setIndentionOptions ( ( short ) 0xfffff400 ) ; retval . setBorderOptions ( ( short ) 0 ) ; retval . setPaletteOptions ( ( short ) 0 ) ; retval . setAdtlPaletteOptions ( ( short ) 0 ) ; retval . setFillPaletteOptions ( ( short ) 0x20c0 ) ; break ; case 14 : retval . setFontIndex ( ( short ) 0 ) ; retval . setFormatIndex ( ( short ) 0 ) ; retval . setCellOptions ( ( short ) 0xfffffff5 ) ; retval . setAlignmentOptions ( ( short ) 0x20 ) ; retval . setIndentionOptions ( ( short ) 0xfffff400 ) ; retval . setBorderOptions ( ( short ) 0 ) ; retval . setPaletteOptions ( ( short ) 0 ) ; retval . setAdtlPaletteOptions ( ( short ) 0 ) ; retval . setFillPaletteOptions ( ( short ) 0x20c0 ) ; break ; case 15 : retval . setFontIndex ( ( short ) 0 ) ; retval . setFormatIndex ( ( short ) 0 ) ; retval . setCellOptions ( ( short ) 0x1 ) ; retval . setAlignmentOptions ( ( short ) 0x20 ) ; retval . setIndentionOptions ( ( short ) 0x0 ) ; retval . setBorderOptions ( ( short ) 0 ) ; retval . setPaletteOptions ( ( short ) 0 ) ; retval . setAdtlPaletteOptions ( ( short ) 0 ) ; retval . setFillPaletteOptions ( ( short ) 0x20c0 ) ; break ; case 16 : retval . setFontIndex ( ( short ) 1 ) ; retval . setFormatIndex ( ( short ) 0x2b ) ; retval . setCellOptions ( ( short ) 0xfffffff5 ) ; retval . setAlignmentOptions ( ( short ) 0x20 ) ; retval . setIndentionOptions ( ( short ) 0xfffff800 ) ; retval . setBorderOptions ( ( short ) 0 ) ; retval . setPaletteOptions ( ( short ) 0 ) ; retval . setAdtlPaletteOptions ( ( short ) 0 ) ; retval . setFillPaletteOptions ( ( short ) 0x20c0 ) ; break ; case 17 : retval . setFontIndex ( ( short ) 1 ) ; retval . setFormatIndex ( ( short ) 0x29 ) ; retval . setCellOptions ( ( short ) 0xfffffff5 ) ; retval . setAlignmentOptions ( ( short ) 0x20 ) ; retval . setIndentionOptions ( ( short ) 0xfffff800 ) ; retval . setBorderOptions ( ( short ) 0 ) ; retval . setPaletteOptions ( ( short ) 0 ) ; retval . setAdtlPaletteOptions ( ( short ) 0 ) ; retval . setFillPaletteOptions ( ( short ) 0x20c0 ) ; break ; case 18 : retval . setFontIndex ( ( short ) 1 ) ; retval . setFormatIndex ( ( short ) 0x2c ) ; retval . setCellOptions ( ( short ) 0xfffffff5 ) ; retval . setAlignmentOptions ( ( short ) 0x20 ) ; retval . setIndentionOptions ( ( short ) 0xfffff800 ) ; retval . setBorderOptions ( ( short ) 0 ) ; retval . setPaletteOptions ( ( short ) 0 ) ; retval . setAdtlPaletteOptions ( ( short ) 0 ) ; retval . setFillPaletteOptions ( ( short ) 0x20c0 ) ; break ; case 19 : retval . setFontIndex ( ( short ) 1 ) ; retval . setFormatIndex ( ( short ) 0x2a ) ; retval . setCellOptions ( ( short ) 0xfffffff5 ) ; retval . setAlignmentOptions ( ( short ) 0x20 ) ; retval . setIndentionOptions ( ( short ) 0xfffff800 ) ; retval . setBorderOptions ( ( short ) 0 ) ; retval . setPaletteOptions ( ( short ) 0 ) ; retval . setAdtlPaletteOptions ( ( short ) 0 ) ; retval . setFillPaletteOptions ( ( short ) 0x20c0 ) ; break ; case 20 : retval . setFontIndex ( ( short ) 1 ) ; retval . setFormatIndex ( ( short ) 0x9 ) ; retval . setCellOptions ( ( short ) 0xfffffff5 ) ; retval . setAlignmentOptions ( ( short ) 0x20 ) ; retval . setIndentionOptions ( ( short ) 0xfffff800 ) ; retval . setBorderOptions ( ( short ) 0 ) ; retval . setPaletteOptions ( ( short ) 0 ) ; retval . setAdtlPaletteOptions ( ( short ) 0 ) ; retval . setFillPaletteOptions ( ( short ) 0x20c0 ) ; break ; case 21 : retval . setFontIndex ( ( short ) 5 ) ; retval . setFormatIndex ( ( short ) 0x0 ) ; retval . setCellOptions ( ( short ) 0x1 ) ; retval . setAlignmentOptions ( ( short ) 0x20 ) ; retval . setIndentionOptions ( ( short ) 0x800 ) ; retval . setBorderOptions ( ( short ) 0 ) ; retval . setPaletteOptions ( ( short ) 0 ) ; retval . setAdtlPaletteOptions ( ( short ) 0 ) ; retval . setFillPaletteOptions ( ( short ) 0x20c0 ) ; break ; case 22 : retval . setFontIndex ( ( short ) 6 ) ; retval . setFormatIndex ( ( short ) 0x0 ) ; retval . setCellOptions ( ( short ) 0x1 ) ; retval . setAlignmentOptions ( ( short ) 0x20 ) ; retval . setIndentionOptions ( ( short ) 0x5c00 ) ; retval . setBorderOptions ( ( short ) 0 ) ; retval . setPaletteOptions ( ( short ) 0 ) ; retval . setAdtlPaletteOptions ( ( short ) 0 ) ; retval . setFillPaletteOptions ( ( short ) 0x20c0 ) ; break ; case 23 : retval . setFontIndex ( ( short ) 0 ) ; retval . setFormatIndex ( ( short ) 0x31 ) ; retval . setCellOptions ( ( short ) 0x1 ) ; retval . setAlignmentOptions ( ( short ) 0x20 ) ; retval . setIndentionOptions ( ( short ) 0x5c00 ) ; retval . setBorderOptions ( ( short ) 0 ) ; retval . setPaletteOptions ( ( short ) 0 ) ; retval . setAdtlPaletteOptions ( ( short ) 0 ) ; retval . setFillPaletteOptions ( ( short ) 0x20c0 ) ; break ; case 24 : retval . setFontIndex ( ( short ) 0 ) ; retval . setFormatIndex ( ( short ) 0x8 ) ; retval . setCellOptions ( ( short ) 0x1 ) ; retval . setAlignmentOptions ( ( short ) 0x20 ) ; retval . setIndentionOptions ( ( short ) 0x5c00 ) ; retval . setBorderOptions ( ( short ) 0 ) ; retval . setPaletteOptions ( ( short ) 0 ) ; retval . setAdtlPaletteOptions ( ( short ) 0 ) ; retval . setFillPaletteOptions ( ( short ) 0x20c0 ) ; break ; case 25 : retval . setFontIndex ( ( short ) 6 ) ; retval . setFormatIndex ( ( short ) 0x8 ) ; retval . setCellOptions ( ( short ) 0x1 ) ; retval . setAlignmentOptions ( ( short ) 0x20 ) ; retval . setIndentionOptions ( ( short ) 0x5c00 ) ; retval . setBorderOptions ( ( short ) 0 ) ; retval . setPaletteOptions ( ( short ) 0 ) ; retval . setAdtlPaletteOptions ( ( short ) 0 ) ; retval . setFillPaletteOptions ( ( short ) 0x20c0 ) ; break ; } return retval ; } protected ExtendedFormatRecord createExtendedFormat ( ) { ExtendedFormatRecord retval = new ExtendedFormatRecord ( ) ; retval . setFontIndex ( ( short ) 0 ) ; retval . setFormatIndex ( ( short ) 0x0 ) ; retval . setCellOptions ( ( short ) 0x1 ) ; retval . setAlignmentOptions ( ( short ) 0x20 ) ; retval . setIndentionOptions ( ( short ) 0 ) ; retval . setBorderOptions ( ( short ) 0 ) ; retval . setPaletteOptions ( ( short ) 0 ) ; retval . setAdtlPaletteOptions ( ( short ) 0 ) ; retval . setFillPaletteOptions ( ( short ) 0x20c0 ) ; retval . setTopBorderPaletteIdx ( HSSFColor . BLACK . index ) ; retval . setBottomBorderPaletteIdx ( HSSFColor . BLACK . index ) ; retval . setLeftBorderPaletteIdx ( HSSFColor . BLACK . index ) ; retval . setRightBorderPaletteIdx ( HSSFColor . BLACK . index ) ; return retval ; } protected Record createStyle ( int id ) { StyleRecord retval = new StyleRecord ( ) ; switch ( id ) { case 0 : retval . setIndex ( ( short ) 0xffff8010 ) ; retval . setBuiltin ( ( byte ) 3 ) ; retval . setOutlineStyleLevel ( ( byte ) 0xffffffff ) ; break ; case 1 : retval . setIndex ( ( short ) 0xffff8011 ) ; retval . setBuiltin ( ( byte ) 6 ) ; retval . setOutlineStyleLevel ( ( byte ) 0xffffffff ) ; break ; case 2 : retval . setIndex ( ( short ) 0xffff8012 ) ; retval . setBuiltin ( ( byte ) 4 ) ; retval . setOutlineStyleLevel ( ( byte ) 0xffffffff ) ; break ; case 3 : retval . setIndex ( ( short ) 0xffff8013 ) ; retval . setBuiltin ( ( byte ) 7 ) ; retval . setOutlineStyleLevel ( ( byte ) 0xffffffff ) ; break ; case 4 : retval . setIndex ( ( short ) 0xffff8000 ) ; retval . setBuiltin ( ( byte ) 0 ) ; retval . setOutlineStyleLevel ( ( byte ) 0xffffffff ) ; break ; case 5 : retval . setIndex ( ( short ) 0xffff8014 ) ; retval . setBuiltin ( ( byte ) 5 ) ; retval . setOutlineStyleLevel ( ( byte ) 0xffffffff ) ; break ; } return retval ; } protected PaletteRecord createPalette ( ) { return new PaletteRecord ( ) ; } protected Record createUseSelFS ( ) { UseSelFSRecord retval = new UseSelFSRecord ( ) ; retval . setFlag ( ( short ) 0 ) ; return retval ; } protected Record createBoundSheet ( int id ) { BoundSheetRecord retval = new BoundSheetRecord ( ) ; switch ( id ) { case 0 : retval . setPositionOfBof ( 0x0 ) ; retval . setOptionFlags ( ( short ) 0 ) ; retval . setSheetnameLength ( ( byte ) 0x6 ) ; retval . setCompressedUnicodeFlag ( ( byte ) 0 ) ; retval . setSheetname ( "Sheet1" ) ; break ; case 1 : retval . setPositionOfBof ( 0x0 ) ; retval . setOptionFlags ( ( short ) 0 ) ; retval . setSheetnameLength ( ( byte ) 0x6 ) ; retval . setCompressedUnicodeFlag ( ( byte ) 0 ) ; retval . setSheetname ( "Sheet2" ) ; break ; case 2 : retval . setPositionOfBof ( 0x0 ) ; retval . setOptionFlags ( ( short ) 0 ) ; retval . setSheetnameLength ( ( byte ) 0x6 ) ; retval . setCompressedUnicodeFlag ( ( byte ) 0 ) ; retval . setSheetname ( "Sheet3" ) ; break ; } return retval ; } protected Record createCountry ( ) { CountryRecord retval = new CountryRecord ( ) ; retval . setDefaultCountry ( ( short ) 1 ) ; if ( Locale . getDefault ( ) . toString ( ) . equals ( "ru_RU" ) ) { retval . setCurrentCountry ( ( short ) 7 ) ; } else { retval . setCurrentCountry ( ( short ) 1 ) ; } return retval ; } protected Record createSST ( ) { return new SSTRecord ( ) ; } protected Record createExtendedSST ( ) { ExtSSTRecord retval = new ExtSSTRecord ( ) ; retval . setNumStringsPerBucket ( ( short ) 0x8 ) ; return retval ; } protected Record createEOF ( ) { return new EOFRecord ( ) ; } public SheetReferences getSheetReferences ( ) { SheetReferences refs = new SheetReferences ( ) ; if ( externSheet != null ) { for ( int k = 0 ; k < externSheet . getNumOfREFStructures ( ) ; k ++ ) { String sheetName = findSheetNameFromExternSheet ( ( short ) k ) ; refs . addSheetReference ( sheetName , k ) ; } } return refs ; } public String findSheetNameFromExternSheet ( short num ) { String result = "" ; short indexToSheet = externSheet . getREFRecordAt ( num ) . getIndexToFirstSupBook ( ) ; if ( indexToSheet > - 1 ) { result = getSheetName ( indexToSheet ) ; } return result ; } public int getSheetIndexFromExternSheetIndex ( int externSheetNumber ) { if ( externSheetNumber >= externSheet . getNumOfREFStructures ( ) ) return - 1 ; else return externSheet . getREFRecordAt ( externSheetNumber ) . getIndexToFirstSupBook ( ) ; } public short checkExternSheet ( int sheetNumber ) { int i = 0 ; boolean flag = false ; short result = 0 ; if ( externSheet == null ) { externSheet = createExternSheet ( ) ; } while ( i < externSheet . getNumOfREFStructures ( ) && ! flag ) { ExternSheetSubRecord record = externSheet . getREFRecordAt ( i ) ; if ( record . getIndexToFirstSupBook ( ) == sheetNumber && record . getIndexToLastSupBook ( ) == sheetNumber ) { flag = true ; result = ( short ) i ; } ++ i ; } if ( ! flag ) { result = addSheetIndexToExternSheet ( ( short ) sheetNumber ) ; } return result ; } private short addSheetIndexToExternSheet ( short sheetNumber ) { short result ; ExternSheetSubRecord record = new ExternSheetSubRecord ( ) ; record . setIndexToFirstSupBook ( sheetNumber ) ; record . setIndexToLastSupBook ( sheetNumber ) ; externSheet . addREFRecord ( record ) ; externSheet . setNumOfREFStructures ( ( short ) ( externSheet . getNumOfREFStructures ( ) + 1 ) ) ; result = ( short ) ( externSheet . getNumOfREFStructures ( ) - 1 ) ; return result ; } public int getNumNames ( ) { int result = names . size ( ) ; return result ; } public NameRecord getNameRecord ( int index ) { NameRecord result = ( NameRecord ) names . get ( index ) ; return result ; } public NameRecord createName ( ) { NameRecord name = new NameRecord ( ) ; int idx = findFirstRecordLocBySid ( ExternSheetRecord . sid ) ; if ( idx == - 1 ) idx = findFirstRecordLocBySid ( SupBookRecord . sid ) ; if ( idx == - 1 ) idx = findFirstRecordLocBySid ( CountryRecord . sid ) ; records . add ( idx + names . size ( ) + 1 , name ) ; names . add ( name ) ; return name ; } public NameRecord addName ( NameRecord name ) { int idx = findFirstRecordLocBySid ( ExternSheetRecord . sid ) ; if ( idx == - 1 ) idx = findFirstRecordLocBySid ( SupBookRecord . sid ) ; if ( idx == - 1 ) idx = findFirstRecordLocBySid ( CountryRecord . sid ) ; records . add ( idx + names . size ( ) + 1 , name ) ; names . add ( name ) ; return name ; } public NameRecord createBuiltInName ( byte builtInName , int index ) { if ( index == - 1 || index + 1 > ( int ) Short . MAX_VALUE ) throw new IllegalArgumentException ( "Index is not valid [" + index + "]" ) ; NameRecord name = new NameRecord ( builtInName , ( short ) ( index ) ) ; addName ( name ) ; return name ; } public void removeName ( int namenum ) { if ( names . size ( ) > namenum ) { int idx = findFirstRecordLocBySid ( NameRecord . sid ) ; records . remove ( idx + namenum ) ; names . remove ( namenum ) ; } } protected ExternSheetRecord createExternSheet ( ) { ExternSheetRecord externSheet = new ExternSheetRecord ( ) ; int idx = findFirstRecordLocBySid ( CountryRecord . sid ) ; records . add ( idx + 1 , externSheet ) ; SupBookRecord supbook = new SupBookRecord ( ) ; supbook . setNumberOfSheets ( ( short ) getNumSheets ( ) ) ; records . add ( idx + 1 , supbook ) ; return externSheet ; } public short getFormat ( String format , boolean createIfNotFound ) { Iterator iterator ; for ( iterator = formats . iterator ( ) ; iterator . hasNext ( ) ; ) { FormatRecord r = ( FormatRecord ) iterator . next ( ) ; if ( r . getFormatString ( ) . equals ( format ) ) { return r . getIndexCode ( ) ; } } if ( createIfNotFound ) { return createFormat ( format ) ; } return - 1 ; } public ArrayList getFormats ( ) { return formats ; } public short createFormat ( String format ) { FormatRecord rec = new FormatRecord ( ) ; maxformatid = maxformatid >= ( short ) 0xa4 ? ( short ) ( maxformatid + 1 ) : ( short ) 0xa4 ; rec . setIndexCode ( maxformatid ) ; rec . setFormatStringLength ( ( byte ) format . length ( ) ) ; rec . setFormatString ( format ) ; int pos = 0 ; while ( pos < records . size ( ) && records . get ( pos ) . getSid ( ) != FormatRecord . sid ) pos ++ ; pos += formats . size ( ) ; formats . add ( rec ) ; records . add ( pos , rec ) ; return maxformatid ; } public Record findFirstRecordBySid ( short sid ) { for ( Iterator iterator = records . iterator ( ) ; iterator . hasNext ( ) ; ) { Record record = ( Record ) iterator . next ( ) ; if ( record . getSid ( ) == sid ) { return record ; } } return null ; } public int findFirstRecordLocBySid ( short sid ) { int index = 0 ; for ( Iterator iterator = records . iterator ( ) ; iterator . hasNext ( ) ; ) { Record record = ( Record ) iterator . next ( ) ; if ( record . getSid ( ) == sid ) { return index ; } index ++ ; } return - 1 ; } public Record findNextRecordBySid ( short sid , int pos ) { int matches = 0 ; for ( Iterator iterator = records . iterator ( ) ; iterator . hasNext ( ) ; ) { Record record = ( Record ) iterator . next ( ) ; if ( record . getSid ( ) == sid ) { if ( matches ++ == pos ) return record ; } } return null ; } public List getRecords ( ) { return records . getRecords ( ) ; } public boolean isUsing1904DateWindowing ( ) { return uses1904datewindowing ; } public PaletteRecord getCustomPalette ( ) { PaletteRecord palette ; int palettePos = records . getPalettepos ( ) ; if ( palettePos != - 1 ) { Record rec = records . get ( palettePos ) ; if ( rec instanceof PaletteRecord ) { palette = ( PaletteRecord ) rec ; } else throw new RuntimeException ( "InternalError: Expected PaletteRecord but got a '" + rec + "'" ) ; } else { palette = createPalette ( ) ; records . add ( 1 , palette ) ; records . setPalettepos ( 1 ) ; } return palette ; } public void createDrawingGroup ( ) { if ( drawingManager == null ) { EscherContainerRecord dggContainer = new EscherContainerRecord ( ) ; EscherDggRecord dgg = new EscherDggRecord ( ) ; EscherOptRecord opt = new EscherOptRecord ( ) ; EscherSplitMenuColorsRecord splitMenuColors = new EscherSplitMenuColorsRecord ( ) ; dggContainer . setRecordId ( ( short ) 0xF000 ) ; dggContainer . setOptions ( ( short ) 0x000F ) ; dgg . setRecordId ( EscherDggRecord . RECORD_ID ) ; dgg . setOptions ( ( short ) 0x0000 ) ; dgg . setShapeIdMax ( 1024 ) ; dgg . setNumShapesSaved ( 0 ) ; dgg . setDrawingsSaved ( 0 ) ; dgg . setFileIdClusters ( new EscherDggRecord . FileIdCluster [ ] { } ) ; drawingManager = new DrawingManager2 ( dgg ) ; EscherContainerRecord bstoreContainer = null ; if ( escherBSERecords . size ( ) > 0 ) { bstoreContainer = new EscherContainerRecord ( ) ; bstoreContainer . setRecordId ( EscherContainerRecord . BSTORE_CONTAINER ) ; bstoreContainer . setOptions ( ( short ) ( ( escherBSERecords . size ( ) << 4 ) | 0xF ) ) ; for ( Iterator iterator = escherBSERecords . iterator ( ) ; iterator . hasNext ( ) ; ) { EscherRecord escherRecord = ( EscherRecord ) iterator . next ( ) ; bstoreContainer . addChildRecord ( escherRecord ) ; } } opt . setRecordId ( ( short ) 0xF00B ) ; opt . setOptions ( ( short ) 0x0033 ) ; opt . addEscherProperty ( new EscherBoolProperty ( EscherProperties . TEXT__SIZE_TEXT_TO_FIT_SHAPE , 524296 ) ) ; opt . addEscherProperty ( new EscherRGBProperty ( EscherProperties . FILL__FILLCOLOR , 0x08000041 ) ) ; opt . addEscherProperty ( new EscherRGBProperty ( EscherProperties . LINESTYLE__COLOR , 134217792 ) ) ; splitMenuColors . setRecordId ( ( short ) 0xF11E ) ; splitMenuColors . setOptions ( ( short ) 0x0040 ) ; splitMenuColors . setColor1 ( 0x0800000D ) ; splitMenuColors . setColor2 ( 0x0800000C ) ; splitMenuColors . setColor3 ( 0x08000017 ) ; splitMenuColors . setColor4 ( 0x100000F7 ) ; dggContainer . addChildRecord ( dgg ) ; if ( bstoreContainer != null ) dggContainer . addChildRecord ( bstoreContainer ) ; dggContainer . addChildRecord ( opt ) ; dggContainer . addChildRecord ( splitMenuColors ) ; int dgLoc = findFirstRecordLocBySid ( DrawingGroupRecord . sid ) ; if ( dgLoc == - 1 ) { DrawingGroupRecord drawingGroup = new DrawingGroupRecord ( ) ; drawingGroup . addEscherRecord ( dggContainer ) ; int loc = findFirstRecordLocBySid ( CountryRecord . sid ) ; getRecords ( ) . add ( loc + 1 , drawingGroup ) ; } else { DrawingGroupRecord drawingGroup = new DrawingGroupRecord ( ) ; drawingGroup . addEscherRecord ( dggContainer ) ; getRecords ( ) . set ( dgLoc , drawingGroup ) ; } } } public WindowOneRecord getWindowOne ( ) { return windowOne ; } public int addBSERecord ( EscherBSERecord e ) { createDrawingGroup ( ) ; escherBSERecords . add ( e ) ; int dgLoc = findFirstRecordLocBySid ( DrawingGroupRecord . sid ) ; DrawingGroupRecord drawingGroup = ( DrawingGroupRecord ) getRecords ( ) . get ( dgLoc ) ; EscherContainerRecord dggContainer = ( EscherContainerRecord ) drawingGroup . getEscherRecord ( 0 ) ; EscherContainerRecord bstoreContainer ; if ( dggContainer . getChild ( 1 ) . getRecordId ( ) == EscherContainerRecord . BSTORE_CONTAINER ) { bstoreContainer = ( EscherContainerRecord ) dggContainer . getChild ( 1 ) ; } else { bstoreContainer = new EscherContainerRecord ( ) ; bstoreContainer . setRecordId ( EscherContainerRecord . BSTORE_CONTAINER ) ; dggContainer . getChildRecords ( ) . add ( 1 , bstoreContainer ) ; } bstoreContainer . setOptions ( ( short ) ( ( escherBSERecords . size ( ) << 4 ) | 0xF ) ) ; bstoreContainer . addChildRecord ( e ) ; return escherBSERecords . size ( ) ; } public DrawingManager2 getDrawingManager ( ) { return drawingManager ; } } 	1
package org . apache . poi . hpsf ; import java . io . IOException ; import java . io . InputStream ; import java . io . OutputStream ; import java . util . List ; import org . apache . poi . poifs . filesystem . DirectoryEntry ; public abstract class SpecialPropertySet extends MutablePropertySet { private MutablePropertySet delegate ; public SpecialPropertySet ( final PropertySet ps ) { delegate = new MutablePropertySet ( ps ) ; } public SpecialPropertySet ( final MutablePropertySet ps ) { delegate = ps ; } public int getByteOrder ( ) { return delegate . getByteOrder ( ) ; } public int getFormat ( ) { return delegate . getFormat ( ) ; } public int getOSVersion ( ) { return delegate . getOSVersion ( ) ; } public ClassID getClassID ( ) { return delegate . getClassID ( ) ; } public int getSectionCount ( ) { return delegate . getSectionCount ( ) ; } public List getSections ( ) { return delegate . getSections ( ) ; } public boolean isSummaryInformation ( ) { return delegate . isSummaryInformation ( ) ; } public boolean isDocumentSummaryInformation ( ) { return delegate . isDocumentSummaryInformation ( ) ; } public Section getFirstSection ( ) { return delegate . getFirstSection ( ) ; } public void addSection ( final Section section ) { delegate . addSection ( section ) ; } public void clearSections ( ) { delegate . clearSections ( ) ; } public void setByteOrder ( final int byteOrder ) { delegate . setByteOrder ( byteOrder ) ; } public void setClassID ( final ClassID classID ) { delegate . setClassID ( classID ) ; } public void setFormat ( final int format ) { delegate . setFormat ( format ) ; } public void setOSVersion ( final int osVersion ) { delegate . setOSVersion ( osVersion ) ; } public InputStream toInputStream ( ) throws IOException , WritingNotSupportedException { return delegate . toInputStream ( ) ; } public void write ( final DirectoryEntry dir , final String name ) throws WritingNotSupportedException , IOException { delegate . write ( dir , name ) ; } public void write ( final OutputStream out ) throws WritingNotSupportedException , IOException { delegate . write ( out ) ; } public boolean equals ( final Object o ) { return delegate . equals ( o ) ; } public Property [ ] getProperties ( ) throws NoSingleSectionException { return delegate . getProperties ( ) ; } protected Object getProperty ( final int id ) throws NoSingleSectionException { return delegate . getProperty ( id ) ; } protected boolean getPropertyBooleanValue ( final int id ) throws NoSingleSectionException { return delegate . getPropertyBooleanValue ( id ) ; } protected int getPropertyIntValue ( final int id ) throws NoSingleSectionException { return delegate . getPropertyIntValue ( id ) ; } public int hashCode ( ) { return delegate . hashCode ( ) ; } public String toString ( ) { return delegate . toString ( ) ; } public boolean wasNull ( ) throws NoSingleSectionException { return delegate . wasNull ( ) ; } } 	0
package org . apache . poi . hssf . record ; import org . apache . poi . util . LittleEndian ; public class DefaultColWidthRecord extends Record { public final static short sid = 0x55 ; private short field_1_col_width ; public DefaultColWidthRecord ( ) { } public DefaultColWidthRecord ( RecordInputStream in ) { super ( in ) ; } protected void validateSid ( short id ) { if ( id != sid ) { throw new RecordFormatException ( "NOT A DefaultColWidth RECORD" ) ; } } protected void fillFields ( RecordInputStream in ) { field_1_col_width = in . readShort ( ) ; } public void setColWidth ( short height ) { field_1_col_width = height ; } public short getColWidth ( ) { return field_1_col_width ; } public String toString ( ) { StringBuffer buffer = new StringBuffer ( ) ; buffer . append ( "[DEFAULTCOLWIDTH]\n" ) ; buffer . append ( "    .colwidth      = " ) . append ( Integer . toHexString ( getColWidth ( ) ) ) . append ( "\n" ) ; buffer . append ( "[/DEFAULTCOLWIDTH]\n" ) ; return buffer . toString ( ) ; } public int serialize ( int offset , byte [ ] data ) { LittleEndian . putShort ( data , 0 + offset , sid ) ; LittleEndian . putShort ( data , 2 + offset , ( short ) 0x2 ) ; LittleEndian . putShort ( data , 4 + offset , getColWidth ( ) ) ; return getRecordSize ( ) ; } public int getRecordSize ( ) { return 6 ; } public short getSid ( ) { return sid ; } public Object clone ( ) { DefaultColWidthRecord rec = new DefaultColWidthRecord ( ) ; rec . field_1_col_width = field_1_col_width ; return rec ; } } 	1
package org . apache . poi . hssf . usermodel ; import org . apache . poi . ddf . EscherRecord ; import org . apache . poi . hssf . model . Sheet ; import org . apache . poi . hssf . model . Workbook ; import org . apache . poi . hssf . record . * ; import org . apache . poi . hssf . util . Region ; import org . apache . poi . hssf . util . PaneInformation ; import org . apache . poi . util . POILogFactory ; import org . apache . poi . util . POILogger ; import java . io . PrintWriter ; import java . util . ArrayList ; import java . util . Iterator ; import java . util . List ; import java . util . TreeMap ; import java . text . AttributedString ; import java . text . NumberFormat ; import java . text . DecimalFormat ; import java . awt . font . TextLayout ; import java . awt . font . FontRenderContext ; import java . awt . font . TextAttribute ; public class HSSFSheet { private static final int DEBUG = POILogger . DEBUG ; public static final short LeftMargin = Sheet . LeftMargin ; public static final short RightMargin = Sheet . RightMargin ; public static final short TopMargin = Sheet . TopMargin ; public static final short BottomMargin = Sheet . BottomMargin ; public static final byte PANE_LOWER_RIGHT = ( byte ) 0 ; public static final byte PANE_UPPER_RIGHT = ( byte ) 1 ; public static final byte PANE_LOWER_LEFT = ( byte ) 2 ; public static final byte PANE_UPPER_LEFT = ( byte ) 3 ; public final static int INITIAL_CAPACITY = 20 ; private Sheet sheet ; private TreeMap rows ; private Workbook book ; private int firstrow ; private int lastrow ; private static POILogger log = POILogFactory . getLogger ( HSSFSheet . class ) ; protected HSSFSheet ( Workbook book ) { sheet = Sheet . createSheet ( ) ; rows = new TreeMap ( ) ; this . book = book ; } protected HSSFSheet ( Workbook book , Sheet sheet ) { this . sheet = sheet ; rows = new TreeMap ( ) ; this . book = book ; setPropertiesFromSheet ( sheet ) ; } HSSFSheet cloneSheet ( Workbook book ) { return new HSSFSheet ( book , sheet . cloneSheet ( ) ) ; } private void setPropertiesFromSheet ( Sheet sheet ) { int sloc = sheet . getLoc ( ) ; RowRecord row = sheet . getNextRow ( ) ; while ( row != null ) { createRowFromRecord ( row ) ; row = sheet . getNextRow ( ) ; } sheet . setLoc ( sloc ) ; CellValueRecordInterface cval = sheet . getNextValueRecord ( ) ; long timestart = System . currentTimeMillis ( ) ; if ( log . check ( POILogger . DEBUG ) ) log . log ( DEBUG , "Time at start of cell creating in HSSF sheet = " , new Long ( timestart ) ) ; HSSFRow lastrow = null ; while ( cval != null ) { long cellstart = System . currentTimeMillis ( ) ; HSSFRow hrow = lastrow ; if ( ( lastrow == null ) || ( lastrow . getRowNum ( ) != cval . getRow ( ) ) ) { hrow = getRow ( cval . getRow ( ) ) ; } if ( hrow != null ) { lastrow = hrow ; if ( log . check ( POILogger . DEBUG ) ) log . log ( DEBUG , "record id = " + Integer . toHexString ( ( ( Record ) cval ) . getSid ( ) ) ) ; hrow . createCellFromRecord ( cval ) ; cval = sheet . getNextValueRecord ( ) ; if ( log . check ( POILogger . DEBUG ) ) log . log ( DEBUG , "record took " , new Long ( System . currentTimeMillis ( ) - cellstart ) ) ; } else { cval = null ; } } if ( log . check ( POILogger . DEBUG ) ) log . log ( DEBUG , "total sheet cell creation took " , new Long ( System . currentTimeMillis ( ) - timestart ) ) ; } public HSSFRow createRow ( int rownum ) { HSSFRow row = new HSSFRow ( book , sheet , rownum ) ; addRow ( row , true ) ; return row ; } private HSSFRow createRowFromRecord ( RowRecord row ) { HSSFRow hrow = new HSSFRow ( book , sheet , row ) ; addRow ( hrow , false ) ; return hrow ; } public void removeRow ( HSSFRow row ) { sheet . setLoc ( sheet . getDimsLoc ( ) ) ; if ( rows . size ( ) > 0 ) { rows . remove ( row ) ; if ( row . getRowNum ( ) == getLastRowNum ( ) ) { lastrow = findLastRow ( lastrow ) ; } if ( row . getRowNum ( ) == getFirstRowNum ( ) ) { firstrow = findFirstRow ( firstrow ) ; } Iterator iter = row . cellIterator ( ) ; while ( iter . hasNext ( ) ) { HSSFCell cell = ( HSSFCell ) iter . next ( ) ; sheet . removeValueRecord ( row . getRowNum ( ) , cell . getCellValueRecord ( ) ) ; } sheet . removeRow ( row . getRowRecord ( ) ) ; } } private int findLastRow ( int lastrow ) { int rownum = lastrow - 1 ; HSSFRow r = getRow ( rownum ) ; while ( r == null && rownum > 0 ) { r = getRow ( -- rownum ) ; } if ( r == null ) return - 1 ; return rownum ; } private int findFirstRow ( int firstrow ) { int rownum = firstrow + 1 ; HSSFRow r = getRow ( rownum ) ; while ( r == null && rownum <= getLastRowNum ( ) ) { r = getRow ( ++ rownum ) ; } if ( rownum > getLastRowNum ( ) ) return - 1 ; return rownum ; } private void addRow ( HSSFRow row , boolean addLow ) { rows . put ( row , row ) ; if ( addLow ) { sheet . addRow ( row . getRowRecord ( ) ) ; } if ( row . getRowNum ( ) > getLastRowNum ( ) ) { lastrow = row . getRowNum ( ) ; } if ( row . getRowNum ( ) < getFirstRowNum ( ) ) { firstrow = row . getRowNum ( ) ; } } public HSSFRow getRow ( int rownum ) { HSSFRow row = new HSSFRow ( ) ; row . setRowNum ( rownum ) ; return ( HSSFRow ) rows . get ( row ) ; } public int getPhysicalNumberOfRows ( ) { return rows . size ( ) ; } public int getFirstRowNum ( ) { return firstrow ; } public int getLastRowNum ( ) { return lastrow ; } public void setColumnHidden ( short column , boolean hidden ) { sheet . setColumnHidden ( column , hidden ) ; } public boolean isColumnHidden ( short column ) { return sheet . isColumnHidden ( column ) ; } public void setColumnWidth ( short column , short width ) { sheet . setColumnWidth ( column , width ) ; } public short getColumnWidth ( short column ) { return sheet . getColumnWidth ( column ) ; } public short getDefaultColumnWidth ( ) { return sheet . getDefaultColumnWidth ( ) ; } public short getDefaultRowHeight ( ) { return sheet . getDefaultRowHeight ( ) ; } public float getDefaultRowHeightInPoints ( ) { return ( sheet . getDefaultRowHeight ( ) / 20 ) ; } public void setDefaultColumnWidth ( short width ) { sheet . setDefaultColumnWidth ( width ) ; } public void setDefaultRowHeight ( short height ) { sheet . setDefaultRowHeight ( height ) ; } public void setDefaultRowHeightInPoints ( float height ) { sheet . setDefaultRowHeight ( ( short ) ( height * 20 ) ) ; } public boolean isGridsPrinted ( ) { return sheet . isGridsPrinted ( ) ; } public void setGridsPrinted ( boolean value ) { sheet . setGridsPrinted ( value ) ; } public int addMergedRegion ( Region region ) { return sheet . addMergedRegion ( region . getRowFrom ( ) , region . getColumnFrom ( ) , region . getRowTo ( ) , region . getColumnTo ( ) ) ; } public void setVerticallyCenter ( boolean value ) { VCenterRecord record = ( VCenterRecord ) sheet . findFirstRecordBySid ( VCenterRecord . sid ) ; record . setVCenter ( value ) ; } public boolean getVerticallyCenter ( boolean value ) { VCenterRecord record = ( VCenterRecord ) sheet . findFirstRecordBySid ( VCenterRecord . sid ) ; return record . getVCenter ( ) ; } public void setHorizontallyCenter ( boolean value ) { HCenterRecord record = ( HCenterRecord ) sheet . findFirstRecordBySid ( HCenterRecord . sid ) ; record . setHCenter ( value ) ; } public boolean getHorizontallyCenter ( ) { HCenterRecord record = ( HCenterRecord ) sheet . findFirstRecordBySid ( HCenterRecord . sid ) ; return record . getHCenter ( ) ; } public void removeMergedRegion ( int index ) { sheet . removeMergedRegion ( index ) ; } public int getNumMergedRegions ( ) { return sheet . getNumMergedRegions ( ) ; } public Region getMergedRegionAt ( int index ) { return new Region ( sheet . getMergedRegionAt ( index ) ) ; } public Iterator rowIterator ( ) { return rows . values ( ) . iterator ( ) ; } protected Sheet getSheet ( ) { return sheet ; } public void setAlternativeExpression ( boolean b ) { WSBoolRecord record = ( WSBoolRecord ) sheet . findFirstRecordBySid ( WSBoolRecord . sid ) ; record . setAlternateExpression ( b ) ; } public void setAlternativeFormula ( boolean b ) { WSBoolRecord record = ( WSBoolRecord ) sheet . findFirstRecordBySid ( WSBoolRecord . sid ) ; record . setAlternateFormula ( b ) ; } public void setAutobreaks ( boolean b ) { WSBoolRecord record = ( WSBoolRecord ) sheet . findFirstRecordBySid ( WSBoolRecord . sid ) ; record . setAutobreaks ( b ) ; } public void setDialog ( boolean b ) { WSBoolRecord record = ( WSBoolRecord ) sheet . findFirstRecordBySid ( WSBoolRecord . sid ) ; record . setDialog ( b ) ; } public void setDisplayGuts ( boolean b ) { WSBoolRecord record = ( WSBoolRecord ) sheet . findFirstRecordBySid ( WSBoolRecord . sid ) ; record . setDisplayGuts ( b ) ; } public void setFitToPage ( boolean b ) { WSBoolRecord record = ( WSBoolRecord ) sheet . findFirstRecordBySid ( WSBoolRecord . sid ) ; record . setFitToPage ( b ) ; } public void setRowSumsBelow ( boolean b ) { WSBoolRecord record = ( WSBoolRecord ) sheet . findFirstRecordBySid ( WSBoolRecord . sid ) ; record . setRowSumsBelow ( b ) ; } public void setRowSumsRight ( boolean b ) { WSBoolRecord record = ( WSBoolRecord ) sheet . findFirstRecordBySid ( WSBoolRecord . sid ) ; record . setRowSumsRight ( b ) ; } public boolean getAlternateExpression ( ) { return ( ( WSBoolRecord ) sheet . findFirstRecordBySid ( WSBoolRecord . sid ) ) . getAlternateExpression ( ) ; } public boolean getAlternateFormula ( ) { return ( ( WSBoolRecord ) sheet . findFirstRecordBySid ( WSBoolRecord . sid ) ) . getAlternateFormula ( ) ; } public boolean getAutobreaks ( ) { return ( ( WSBoolRecord ) sheet . findFirstRecordBySid ( WSBoolRecord . sid ) ) . getAutobreaks ( ) ; } public boolean getDialog ( ) { return ( ( WSBoolRecord ) sheet . findFirstRecordBySid ( WSBoolRecord . sid ) ) . getDialog ( ) ; } public boolean getDisplayGuts ( ) { return ( ( WSBoolRecord ) sheet . findFirstRecordBySid ( WSBoolRecord . sid ) ) . getDisplayGuts ( ) ; } public boolean getFitToPage ( ) { return ( ( WSBoolRecord ) sheet . findFirstRecordBySid ( WSBoolRecord . sid ) ) . getFitToPage ( ) ; } public boolean getRowSumsBelow ( ) { return ( ( WSBoolRecord ) sheet . findFirstRecordBySid ( WSBoolRecord . sid ) ) . getRowSumsBelow ( ) ; } public boolean getRowSumsRight ( ) { return ( ( WSBoolRecord ) sheet . findFirstRecordBySid ( WSBoolRecord . sid ) ) . getRowSumsRight ( ) ; } public boolean isPrintGridlines ( ) { return getSheet ( ) . getPrintGridlines ( ) . getPrintGridlines ( ) ; } public void setPrintGridlines ( boolean newPrintGridlines ) { getSheet ( ) . getPrintGridlines ( ) . setPrintGridlines ( newPrintGridlines ) ; } public HSSFPrintSetup getPrintSetup ( ) { return new HSSFPrintSetup ( getSheet ( ) . getPrintSetup ( ) ) ; } public HSSFHeader getHeader ( ) { return new HSSFHeader ( getSheet ( ) . getHeader ( ) ) ; } public HSSFFooter getFooter ( ) { return new HSSFFooter ( getSheet ( ) . getFooter ( ) ) ; } public void setSelected ( boolean sel ) { getSheet ( ) . setSelected ( sel ) ; } public double getMargin ( short margin ) { return getSheet ( ) . getMargin ( margin ) ; } public void setMargin ( short margin , double size ) { getSheet ( ) . setMargin ( margin , size ) ; } public boolean getProtect ( ) { return getSheet ( ) . getProtect ( ) . getProtect ( ) ; } public void setProtect ( boolean protect ) { getSheet ( ) . getProtect ( ) . setProtect ( protect ) ; } public void setZoom ( int numerator , int denominator ) { if ( numerator < 1 || numerator > 65535 ) throw new IllegalArgumentException ( "Numerator must be greater than 1 and less than 65536" ) ; if ( denominator < 1 || denominator > 65535 ) throw new IllegalArgumentException ( "Denominator must be greater than 1 and less than 65536" ) ; SCLRecord sclRecord = new SCLRecord ( ) ; sclRecord . setNumerator ( ( short ) numerator ) ; sclRecord . setDenominator ( ( short ) denominator ) ; getSheet ( ) . setSCLRecord ( sclRecord ) ; } public short getTopRow ( ) { return sheet . getTopRow ( ) ; } public short getLeftCol ( ) { return sheet . getLeftCol ( ) ; } public void showInPane ( short toprow , short leftcol ) { this . sheet . setTopRow ( ( short ) toprow ) ; this . sheet . setLeftCol ( ( short ) leftcol ) ; } protected void shiftMerged ( int startRow , int endRow , int n , boolean isRow ) { List shiftedRegions = new ArrayList ( ) ; for ( int i = 0 ; i < this . getNumMergedRegions ( ) ; i ++ ) { Region merged = this . getMergedRegionAt ( i ) ; boolean inStart = ( merged . getRowFrom ( ) >= startRow || merged . getRowTo ( ) >= startRow ) ; boolean inEnd = ( merged . getRowTo ( ) <= endRow || merged . getRowFrom ( ) <= endRow ) ; if ( ! ( inStart && inEnd ) ) continue ; if ( ! merged . contains ( startRow - 1 , ( short ) 0 ) && ! merged . contains ( endRow + 1 , ( short ) 0 ) ) { merged . setRowFrom ( merged . getRowFrom ( ) + n ) ; merged . setRowTo ( merged . getRowTo ( ) + n ) ; shiftedRegions . add ( merged ) ; this . removeMergedRegion ( i ) ; i = i - 1 ; } } Iterator iterator = shiftedRegions . iterator ( ) ; while ( iterator . hasNext ( ) ) { Region region = ( Region ) iterator . next ( ) ; this . addMergedRegion ( region ) ; } } public void shiftRows ( int startRow , int endRow , int n ) { shiftRows ( startRow , endRow , n , false , false ) ; } public void shiftRows ( int startRow , int endRow , int n , boolean copyRowHeight , boolean resetOriginalRowHeight ) { int s , e , inc ; if ( n < 0 ) { s = startRow ; e = endRow ; inc = 1 ; } else { s = endRow ; e = startRow ; inc = - 1 ; } shiftMerged ( startRow , endRow , n , true ) ; sheet . shiftRowBreaks ( startRow , endRow , n ) ; for ( int rowNum = s ; rowNum >= startRow && rowNum <= endRow && rowNum >= 0 && rowNum < 65536 ; rowNum += inc ) { HSSFRow row = getRow ( rowNum ) ; HSSFRow row2Replace = getRow ( rowNum + n ) ; if ( row2Replace == null ) row2Replace = createRow ( rowNum + n ) ; HSSFCell cell ; for ( short col = row2Replace . getFirstCellNum ( ) ; col <= row2Replace . getLastCellNum ( ) ; col ++ ) { cell = row2Replace . getCell ( col ) ; if ( cell != null ) row2Replace . removeCell ( cell ) ; } if ( row == null ) continue ; else { if ( copyRowHeight ) { row2Replace . setHeight ( row . getHeight ( ) ) ; } if ( resetOriginalRowHeight ) { row . setHeight ( ( short ) 0xff ) ; } } for ( short col = row . getFirstCellNum ( ) ; col <= row . getLastCellNum ( ) ; col ++ ) { cell = row . getCell ( col ) ; if ( cell != null ) { row . removeCell ( cell ) ; CellValueRecordInterface cellRecord = cell . getCellValueRecord ( ) ; cellRecord . setRow ( rowNum + n ) ; row2Replace . createCellFromRecord ( cellRecord ) ; sheet . addValueRecord ( rowNum + n , cellRecord ) ; } } } if ( endRow == lastrow || endRow + n > lastrow ) lastrow = Math . min ( endRow + n , 65535 ) ; if ( startRow == firstrow || startRow + n < firstrow ) firstrow = Math . max ( startRow + n , 0 ) ; } protected void insertChartRecords ( List records ) { int window2Loc = sheet . findFirstRecordLocBySid ( WindowTwoRecord . sid ) ; sheet . getRecords ( ) . addAll ( window2Loc , records ) ; } public void createFreezePane ( int colSplit , int rowSplit , int leftmostColumn , int topRow ) { if ( colSplit < 0 || colSplit > 255 ) throw new IllegalArgumentException ( "Column must be between 0 and 255" ) ; if ( rowSplit < 0 || rowSplit > 65535 ) throw new IllegalArgumentException ( "Row must be between 0 and 65535" ) ; if ( leftmostColumn < colSplit ) throw new IllegalArgumentException ( "leftmostColumn parameter must not be less than colSplit parameter" ) ; if ( topRow < rowSplit ) throw new IllegalArgumentException ( "topRow parameter must not be less than leftmostColumn parameter" ) ; getSheet ( ) . createFreezePane ( colSplit , rowSplit , topRow , leftmostColumn ) ; } public void createFreezePane ( int colSplit , int rowSplit ) { createFreezePane ( colSplit , rowSplit , colSplit , rowSplit ) ; } public void createSplitPane ( int xSplitPos , int ySplitPos , int leftmostColumn , int topRow , int activePane ) { getSheet ( ) . createSplitPane ( xSplitPos , ySplitPos , topRow , leftmostColumn , activePane ) ; } public PaneInformation getPaneInformation ( ) { return getSheet ( ) . getPaneInformation ( ) ; } public void setDisplayGridlines ( boolean show ) { sheet . setDisplayGridlines ( show ) ; } public boolean isDisplayGridlines ( ) { return sheet . isDisplayGridlines ( ) ; } public void setDisplayFormulas ( boolean show ) { sheet . setDisplayFormulas ( show ) ; } public boolean isDisplayFormulas ( ) { return sheet . isDisplayFormulas ( ) ; } public void setDisplayRowColHeadings ( boolean show ) { sheet . setDisplayRowColHeadings ( show ) ; } public boolean isDisplayRowColHeadings ( ) { return sheet . isDisplayRowColHeadings ( ) ; } public void setRowBreak ( int row ) { validateRow ( row ) ; sheet . setRowBreak ( row , ( short ) 0 , ( short ) 255 ) ; } public boolean isRowBroken ( int row ) { return sheet . isRowBroken ( row ) ; } public void removeRowBreak ( int row ) { sheet . removeRowBreak ( row ) ; } public int [ ] getRowBreaks ( ) { int count = sheet . getNumRowBreaks ( ) ; if ( count > 0 ) { int [ ] returnValue = new int [ count ] ; Iterator iterator = sheet . getRowBreaks ( ) ; int i = 0 ; while ( iterator . hasNext ( ) ) { PageBreakRecord . Break breakItem = ( PageBreakRecord . Break ) iterator . next ( ) ; returnValue [ i ++ ] = ( int ) breakItem . main ; } return returnValue ; } return null ; } public short [ ] getColumnBreaks ( ) { int count = sheet . getNumColumnBreaks ( ) ; if ( count > 0 ) { short [ ] returnValue = new short [ count ] ; Iterator iterator = sheet . getColumnBreaks ( ) ; int i = 0 ; while ( iterator . hasNext ( ) ) { PageBreakRecord . Break breakItem = ( PageBreakRecord . Break ) iterator . next ( ) ; returnValue [ i ++ ] = breakItem . main ; } return returnValue ; } return null ; } public void setColumnBreak ( short column ) { validateColumn ( column ) ; sheet . setColumnBreak ( column , ( short ) 0 , ( short ) 65535 ) ; } public boolean isColumnBroken ( short column ) { return sheet . isColumnBroken ( column ) ; } public void removeColumnBreak ( short column ) { sheet . removeColumnBreak ( column ) ; } protected void validateRow ( int row ) { if ( row > 65535 ) throw new IllegalArgumentException ( "Maximum row number is 65535" ) ; if ( row < 0 ) throw new IllegalArgumentException ( "Minumum row number is 0" ) ; } protected void validateColumn ( short column ) { if ( column > 255 ) throw new IllegalArgumentException ( "Maximum column number is 255" ) ; if ( column < 0 ) throw new IllegalArgumentException ( "Minimum column number is 0" ) ; } public void dumpDrawingRecords ( boolean fat ) { sheet . aggregateDrawingRecords ( book . getDrawingManager ( ) ) ; EscherAggregate r = ( EscherAggregate ) getSheet ( ) . findFirstRecordBySid ( EscherAggregate . sid ) ; List escherRecords = r . getEscherRecords ( ) ; PrintWriter w = new PrintWriter ( System . out ) ; for ( Iterator iterator = escherRecords . iterator ( ) ; iterator . hasNext ( ) ; ) { EscherRecord escherRecord = ( EscherRecord ) iterator . next ( ) ; if ( fat ) System . out . println ( escherRecord . toString ( ) ) ; else escherRecord . display ( w , 0 ) ; } w . flush ( ) ; } public HSSFPatriarch createDrawingPatriarch ( ) { book . createDrawingGroup ( ) ; sheet . aggregateDrawingRecords ( book . getDrawingManager ( ) ) ; EscherAggregate agg = ( EscherAggregate ) sheet . findFirstRecordBySid ( EscherAggregate . sid ) ; HSSFPatriarch patriarch = new HSSFPatriarch ( this ) ; agg . clear ( ) ; agg . setPatriarch ( patriarch ) ; return patriarch ; } public void setColumnGroupCollapsed ( short columnNumber , boolean collapsed ) { sheet . setColumnGroupCollapsed ( columnNumber , collapsed ) ; } public void groupColumn ( short fromColumn , short toColumn ) { sheet . groupColumnRange ( fromColumn , toColumn , true ) ; } public void ungroupColumn ( short fromColumn , short toColumn ) { sheet . groupColumnRange ( fromColumn , toColumn , false ) ; } public void groupRow ( int fromRow , int toRow ) { sheet . groupRowRange ( fromRow , toRow , true ) ; } public void ungroupRow ( int fromRow , int toRow ) { sheet . groupRowRange ( fromRow , toRow , false ) ; } public void setRowGroupCollapsed ( int row , boolean collapse ) { sheet . setRowGroupCollapsed ( row , collapse ) ; } public void setDefaultColumnStyle ( short column , HSSFCellStyle style ) { sheet . setColumn ( column , new Short ( style . getIndex ( ) ) , null , null , null , null ) ; } public void autoSizeColumn ( short column ) { AttributedString str ; TextLayout layout ; char defaultChar = '0' ; FontRenderContext frc = new FontRenderContext ( null , true , true ) ; HSSFWorkbook wb = new HSSFWorkbook ( book ) ; HSSFFont defaultFont = wb . getFontAt ( ( short ) 0 ) ; str = new AttributedString ( "" + defaultChar ) ; str . addAttribute ( TextAttribute . FAMILY , defaultFont . getFontName ( ) ) ; str . addAttribute ( TextAttribute . SIZE , new Float ( defaultFont . getFontHeightInPoints ( ) ) ) ; layout = new TextLayout ( str . getIterator ( ) , frc ) ; int defaultCharWidth = ( int ) layout . getAdvance ( ) ; double width = - 1 ; for ( Iterator it = rowIterator ( ) ; it . hasNext ( ) ; ) { HSSFRow row = ( HSSFRow ) it . next ( ) ; HSSFCell cell = row . getCell ( column ) ; if ( cell == null ) continue ; HSSFCellStyle style = cell . getCellStyle ( ) ; HSSFFont font = wb . getFontAt ( style . getFontIndex ( ) ) ; if ( cell . getCellType ( ) == HSSFCell . CELL_TYPE_STRING ) { HSSFRichTextString rt = cell . getRichStringCellValue ( ) ; String [ ] lines = rt . getString ( ) . split ( "\\n" ) ; for ( int i = 0 ; i < lines . length ; i ++ ) { str = new AttributedString ( lines [ i ] + defaultChar ) ; str . addAttribute ( TextAttribute . FAMILY , font . getFontName ( ) ) ; str . addAttribute ( TextAttribute . SIZE , new Float ( font . getFontHeightInPoints ( ) ) ) ; if ( font . getBoldweight ( ) == HSSFFont . BOLDWEIGHT_BOLD ) str . addAttribute ( TextAttribute . WEIGHT , TextAttribute . WEIGHT_BOLD ) ; if ( rt . numFormattingRuns ( ) > 0 ) { for ( int j = 0 ; j < lines [ i ] . length ( ) ; j ++ ) { int idx = rt . getFontAtIndex ( j ) ; if ( idx != 0 ) { HSSFFont fnt = wb . getFontAt ( ( short ) idx ) ; str . addAttribute ( TextAttribute . FAMILY , fnt . getFontName ( ) , j , j + 1 ) ; str . addAttribute ( TextAttribute . SIZE , new Float ( fnt . getFontHeightInPoints ( ) ) , j , j + 1 ) ; } } } layout = new TextLayout ( str . getIterator ( ) , frc ) ; width = Math . max ( width , layout . getAdvance ( ) / defaultCharWidth ) ; } } else { String sval = null ; if ( cell . getCellType ( ) == HSSFCell . CELL_TYPE_NUMERIC ) { HSSFDataFormat dataformat = wb . createDataFormat ( ) ; short idx = style . getDataFormat ( ) ; String format = dataformat . getFormat ( idx ) . replaceAll ( "\"" , "" ) ; double value = cell . getNumericCellValue ( ) ; try { NumberFormat fmt ; if ( "General" . equals ( format ) ) fmt = new DecimalFormat ( ) ; else fmt = new DecimalFormat ( format ) ; sval = fmt . format ( value ) ; } catch ( Exception e ) { sval = "" + value ; } } else if ( cell . getCellType ( ) == HSSFCell . CELL_TYPE_BOOLEAN ) { sval = String . valueOf ( cell . getBooleanCellValue ( ) ) ; } str = new AttributedString ( sval + defaultChar ) ; str . addAttribute ( TextAttribute . FAMILY , font . getFontName ( ) ) ; str . addAttribute ( TextAttribute . SIZE , new Float ( font . getFontHeightInPoints ( ) ) ) ; layout = new TextLayout ( str . getIterator ( ) , frc ) ; width = Math . max ( width , layout . getAdvance ( ) / defaultCharWidth ) ; } if ( width != - 1 ) { sheet . setColumnWidth ( column , ( short ) ( width * 256 ) ) ; } } } public HSSFComment getCellComment ( int row , int column ) { return HSSFCell . findCellComment ( sheet , row , column ) ; } } 	1
package org . apache . poi . hssf . eventusermodel ; import org . apache . poi . hssf . record . Record ; public interface HSSFListener { public void processRecord ( Record record ) ; } 	0
package org . apache . poi . hssf . record ; import java . util . ArrayList ; import java . util . List ; import org . apache . poi . util . LittleEndian ; public class PaletteRecord extends Record { public final static short sid = 0x92 ; public final static byte STANDARD_PALETTE_SIZE = ( byte ) 56 ; public final static short FIRST_COLOR_INDEX = ( short ) 0x8 ; private short field_1_numcolors ; private List field_2_colors ; public PaletteRecord ( ) { createDefaultPalette ( ) ; } public PaletteRecord ( RecordInputStream in ) { super ( in ) ; } protected void validateSid ( short id ) { if ( id != sid ) { throw new RecordFormatException ( "NOT An Palette RECORD" ) ; } } protected void fillFields ( RecordInputStream in ) { field_1_numcolors = in . readShort ( ) ; field_2_colors = new ArrayList ( field_1_numcolors ) ; for ( int k = 0 ; k < field_1_numcolors ; k ++ ) { field_2_colors . add ( new PColor ( in . readByte ( ) , in . readByte ( ) , in . readByte ( ) ) ) ; in . readByte ( ) ; } } public String toString ( ) { StringBuffer buffer = new StringBuffer ( ) ; buffer . append ( "[PALETTE]\n" ) ; buffer . append ( "  numcolors     = " ) . append ( field_1_numcolors ) . append ( '\n' ) ; for ( int k = 0 ; k < field_1_numcolors ; k ++ ) { PColor c = ( PColor ) field_2_colors . get ( k ) ; buffer . append ( "* colornum      = " ) . append ( k ) . append ( '\n' ) ; buffer . append ( c . toString ( ) ) ; buffer . append ( "/*colornum      = " ) . append ( k ) . append ( '\n' ) ; } buffer . append ( "[/PALETTE]\n" ) ; return buffer . toString ( ) ; } public int serialize ( int offset , byte [ ] data ) { LittleEndian . putShort ( data , 0 + offset , sid ) ; LittleEndian . putShort ( data , 2 + offset , ( short ) ( getRecordSize ( ) - 4 ) ) ; LittleEndian . putShort ( data , 4 + offset , field_1_numcolors ) ; for ( int k = 0 ; k < field_1_numcolors ; k ++ ) { PColor c = ( PColor ) field_2_colors . get ( k ) ; c . serialize ( data , ( 6 + offset + ( k * 4 ) ) ) ; } return getRecordSize ( ) ; } public int getRecordSize ( ) { return 4 + 2 + ( field_1_numcolors * 4 ) ; } public short getSid ( ) { return sid ; } public byte [ ] getColor ( short byteIndex ) { int i = byteIndex - FIRST_COLOR_INDEX ; if ( i < 0 || i >= field_2_colors . size ( ) ) { return null ; } PColor color = ( PColor ) field_2_colors . get ( i ) ; return new byte [ ] { color . red , color . green , color . blue } ; } public void setColor ( short byteIndex , byte red , byte green , byte blue ) { int i = byteIndex - FIRST_COLOR_INDEX ; if ( i < 0 || i >= STANDARD_PALETTE_SIZE ) { return ; } while ( field_2_colors . size ( ) <= i ) { field_2_colors . add ( new PColor ( ( byte ) 0 , ( byte ) 0 , ( byte ) 0 ) ) ; } PColor custColor = new PColor ( red , green , blue ) ; field_2_colors . set ( i , custColor ) ; } private void createDefaultPalette ( ) { field_1_numcolors = STANDARD_PALETTE_SIZE ; field_2_colors = new ArrayList ( field_1_numcolors ) ; byte [ ] palette = new byte [ ] { ( byte ) 0 , ( byte ) 0 , ( byte ) 0 , ( byte ) 0 , ( byte ) 255 , ( byte ) 255 , ( byte ) 255 , ( byte ) 0 , ( byte ) 255 , ( byte ) 0 , ( byte ) 0 , ( byte ) 0 , ( byte ) 0 , ( byte ) 255 , ( byte ) 0 , ( byte ) 0 , ( byte ) 0 , ( byte ) 0 , ( byte ) 255 , ( byte ) 0 , ( byte ) 255 , ( byte ) 255 , ( byte ) 0 , ( byte ) 0 , ( byte ) 255 , ( byte ) 0 , ( byte ) 255 , ( byte ) 0 , ( byte ) 0 , ( byte ) 255 , ( byte ) 255 , ( byte ) 0 , ( byte ) 128 , ( byte ) 0 , ( byte ) 0 , ( byte ) 0 , ( byte ) 0 , ( byte ) 128 , ( byte ) 0 , ( byte ) 0 , ( byte ) 0 , ( byte ) 0 , ( byte ) 128 , ( byte ) 0 , ( byte ) 128 , ( byte ) 128 , ( byte ) 0 , ( byte ) 0 , ( byte ) 128 , ( byte ) 0 , ( byte ) 128 , ( byte ) 0 , ( byte ) 0 , ( byte ) 128 , ( byte ) 128 , ( byte ) 0 , ( byte ) 192 , ( byte ) 192 , ( byte ) 192 , ( byte ) 0 , ( byte ) 128 , ( byte ) 128 , ( byte ) 128 , ( byte ) 0 , ( byte ) 153 , ( byte ) 153 , ( byte ) 255 , ( byte ) 0 , ( byte ) 153 , ( byte ) 51 , ( byte ) 102 , ( byte ) 0 , ( byte ) 255 , ( byte ) 255 , ( byte ) 204 , ( byte ) 0 , ( byte ) 204 , ( byte ) 255 , ( byte ) 255 , ( byte ) 0 , ( byte ) 102 , ( byte ) 0 , ( byte ) 102 , ( byte ) 0 , ( byte ) 255 , ( byte ) 128 , ( byte ) 128 , ( byte ) 0 , ( byte ) 0 , ( byte ) 102 , ( byte ) 204 , ( byte ) 0 , ( byte ) 204 , ( byte ) 204 , ( byte ) 255 , ( byte ) 0 , ( byte ) 0 , ( byte ) 0 , ( byte ) 128 , ( byte ) 0 , ( byte ) 255 , ( byte ) 0 , ( byte ) 255 , ( byte ) 0 , ( byte ) 255 , ( byte ) 255 , ( byte ) 0 , ( byte ) 0 , ( byte ) 0 , ( byte ) 255 , ( byte ) 255 , ( byte ) 0 , ( byte ) 128 , ( byte ) 0 , ( byte ) 128 , ( byte ) 0 , ( byte ) 128 , ( byte ) 0 , ( byte ) 0 , ( byte ) 0 , ( byte ) 0 , ( byte ) 128 , ( byte ) 128 , ( byte ) 0 , ( byte ) 0 , ( byte ) 0 , ( byte ) 255 , ( byte ) 0 , ( byte ) 0 , ( byte ) 204 , ( byte ) 255 , ( byte ) 0 , ( byte ) 204 , ( byte ) 255 , ( byte ) 255 , ( byte ) 0 , ( byte ) 204 , ( byte ) 255 , ( byte ) 204 , ( byte ) 0 , ( byte ) 255 , ( byte ) 255 , ( byte ) 153 , ( byte ) 0 , ( byte ) 153 , ( byte ) 204 , ( byte ) 255 , ( byte ) 0 , ( byte ) 255 , ( byte ) 153 , ( byte ) 204 , ( byte ) 0 , ( byte ) 204 , ( byte ) 153 , ( byte ) 255 , ( byte ) 0 , ( byte ) 255 , ( byte ) 204 , ( byte ) 153 , ( byte ) 0 , ( byte ) 51 , ( byte ) 102 , ( byte ) 255 , ( byte ) 0 , ( byte ) 51 , ( byte ) 204 , ( byte ) 204 , ( byte ) 0 , ( byte ) 153 , ( byte ) 204 , ( byte ) 0 , ( byte ) 0 , ( byte ) 255 , ( byte ) 204 , ( byte ) 0 , ( byte ) 0 , ( byte ) 255 , ( byte ) 153 , ( byte ) 0 , ( byte ) 0 , ( byte ) 255 , ( byte ) 102 , ( byte ) 0 , ( byte ) 0 , ( byte ) 102 , ( byte ) 102 , ( byte ) 153 , ( byte ) 0 , ( byte ) 150 , ( byte ) 150 , ( byte ) 150 , ( byte ) 0 , ( byte ) 0 , ( byte ) 51 , ( byte ) 102 , ( byte ) 0 , ( byte ) 51 , ( byte ) 153 , ( byte ) 102 , ( byte ) 0 , ( byte ) 0 , ( byte ) 51 , ( byte ) 0 , ( byte ) 0 , ( byte ) 51 , ( byte ) 51 , ( byte ) 0 , ( byte ) 0 , ( byte ) 153 , ( byte ) 51 , ( byte ) 0 , ( byte ) 0 , ( byte ) 153 , ( byte ) 51 , ( byte ) 102 , ( byte ) 0 , ( byte ) 51 , ( byte ) 51 , ( byte ) 153 , ( byte ) 0 , ( byte ) 51 , ( byte ) 51 , ( byte ) 51 , ( byte ) 0 } ; for ( int k = 0 ; k < field_1_numcolors ; k ++ ) { field_2_colors . add ( new PColor ( palette [ k * 4 ] , palette [ k * 4 + 1 ] , palette [ k * 4 + 2 ] ) ) ; } } } class PColor { public byte red ; public byte green ; public byte blue ; public PColor ( byte red , byte green , byte blue ) { this . red = red ; this . green = green ; this . blue = blue ; } public void serialize ( byte [ ] data , int offset ) { data [ offset + 0 ] = red ; data [ offset + 1 ] = green ; data [ offset + 2 ] = blue ; data [ offset + 3 ] = 0 ; } public String toString ( ) { StringBuffer buffer = new StringBuffer ( ) ; buffer . append ( "  red           = " ) . append ( red & 0xff ) . append ( '\n' ) ; buffer . append ( "  green         = " ) . append ( green & 0xff ) . append ( '\n' ) ; buffer . append ( "  blue          = " ) . append ( blue & 0xff ) . append ( '\n' ) ; return buffer . toString ( ) ; } } 	1
package org . apache . poi . hssf . record ; import java . util . Stack ; import java . util . List ; import org . apache . poi . hssf . record . formula . * ; import org . apache . poi . util . LittleEndian ; public class SharedFormulaRecord extends Record { public final static short sid = 0x4BC ; private int field_1_first_row ; private int field_2_last_row ; private short field_3_first_column ; private short field_4_last_column ; private int field_5_reserved ; private short field_6_expression_len ; private Stack field_7_parsed_expr ; public SharedFormulaRecord ( ) { } public SharedFormulaRecord ( RecordInputStream in ) { super ( in ) ; } protected void validateSid ( short id ) { if ( id != this . sid ) { throw new RecordFormatException ( "Not a valid SharedFormula" ) ; } } public int getFirstRow ( ) { return field_1_first_row ; } public int getLastRow ( ) { return field_2_last_row ; } public short getFirstColumn ( ) { return field_3_first_column ; } public short getLastColumn ( ) { return field_4_last_column ; } public short getExpressionLength ( ) { return field_6_expression_len ; } public int serialize ( int offset , byte [ ] data ) { throw new UnsupportedOperationException ( "Cannot serialize a SharedFormulaRecord" ) ; } public int getRecordSize ( ) { throw new UnsupportedOperationException ( "Cannot get the size for a SharedFormulaRecord" ) ; } public String toString ( ) { StringBuffer buffer = new StringBuffer ( ) ; buffer . append ( "[SHARED FORMULA RECORD:" + Integer . toHexString ( sid ) + "]\n" ) ; buffer . append ( "    .id        = " ) . append ( Integer . toHexString ( sid ) ) . append ( "\n" ) ; buffer . append ( "    .first_row       = " ) . append ( Integer . toHexString ( getFirstRow ( ) ) ) . append ( "\n" ) ; buffer . append ( "    .last_row    = " ) . append ( Integer . toHexString ( getLastRow ( ) ) ) . append ( "\n" ) ; buffer . append ( "    .first_column       = " ) . append ( Integer . toHexString ( getFirstColumn ( ) ) ) . append ( "\n" ) ; buffer . append ( "    .last_column    = " ) . append ( Integer . toHexString ( getLastColumn ( ) ) ) . append ( "\n" ) ; buffer . append ( "    .reserved    = " ) . append ( Integer . toHexString ( field_5_reserved ) ) . append ( "\n" ) ; buffer . append ( "    .expressionlength= " ) . append ( getExpressionLength ( ) ) . append ( "\n" ) ; buffer . append ( "    .numptgsinarray  = " ) . append ( field_7_parsed_expr . size ( ) ) . append ( "\n" ) ; for ( int k = 0 ; k < field_7_parsed_expr . size ( ) ; k ++ ) { buffer . append ( "Formula " ) . append ( k ) . append ( "\n" ) . append ( field_7_parsed_expr . get ( k ) . toString ( ) ) . append ( "\n" ) ; } buffer . append ( "[/SHARED FORMULA RECORD]\n" ) ; return buffer . toString ( ) ; } public short getSid ( ) { return sid ; } protected void fillFields ( RecordInputStream in ) { field_1_first_row = in . readShort ( ) ; field_2_last_row = in . readShort ( ) ; field_3_first_column = in . readByte ( ) ; field_4_last_column = in . readByte ( ) ; field_5_reserved = in . readShort ( ) ; field_6_expression_len = in . readShort ( ) ; field_7_parsed_expr = getParsedExpressionTokens ( in ) ; } private Stack getParsedExpressionTokens ( RecordInputStream in ) { Stack stack = new Stack ( ) ; while ( in . remaining ( ) != 0 ) { Ptg ptg = Ptg . createPtg ( in ) ; stack . push ( ptg ) ; } return stack ; } public boolean isFormulaInShared ( FormulaRecord formula ) { final int formulaRow = formula . getRow ( ) ; final int formulaColumn = formula . getColumn ( ) ; return ( ( getFirstRow ( ) <= formulaRow ) && ( getLastRow ( ) >= formulaRow ) && ( getFirstColumn ( ) <= formulaColumn ) && ( getLastColumn ( ) >= formulaColumn ) ) ; } public void convertSharedFormulaRecord ( FormulaRecord formula ) { final int formulaRow = formula . getRow ( ) ; final int formulaColumn = formula . getColumn ( ) ; if ( isFormulaInShared ( formula ) ) { formula . setExpressionLength ( getExpressionLength ( ) ) ; Stack newPtgStack = new Stack ( ) ; if ( field_7_parsed_expr != null ) for ( int k = 0 ; k < field_7_parsed_expr . size ( ) ; k ++ ) { Ptg ptg = ( Ptg ) field_7_parsed_expr . get ( k ) ; if ( ptg instanceof RefNPtg ) { RefNPtg refNPtg = ( RefNPtg ) ptg ; ptg = new ReferencePtg ( ( short ) ( formulaRow + refNPtg . getRow ( ) ) , ( byte ) ( formulaColumn + refNPtg . getColumn ( ) ) , refNPtg . isRowRelative ( ) , refNPtg . isColRelative ( ) ) ; } else if ( ptg instanceof RefNVPtg ) { RefNVPtg refNVPtg = ( RefNVPtg ) ptg ; ptg = new RefVPtg ( ( short ) ( formulaRow + refNVPtg . getRow ( ) ) , ( byte ) ( formulaColumn + refNVPtg . getColumn ( ) ) , refNVPtg . isRowRelative ( ) , refNVPtg . isColRelative ( ) ) ; } else if ( ptg instanceof RefNAPtg ) { RefNAPtg refNAPtg = ( RefNAPtg ) ptg ; ptg = new RefAPtg ( ( short ) ( formulaRow + refNAPtg . getRow ( ) ) , ( byte ) ( formulaColumn + refNAPtg . getColumn ( ) ) , refNAPtg . isRowRelative ( ) , refNAPtg . isColRelative ( ) ) ; } else if ( ptg instanceof AreaNPtg ) { AreaNPtg areaNPtg = ( AreaNPtg ) ptg ; ptg = new AreaPtg ( ( short ) ( formulaRow + areaNPtg . getFirstRow ( ) ) , ( short ) ( formulaRow + areaNPtg . getLastRow ( ) ) , ( short ) ( formulaColumn + areaNPtg . getFirstColumn ( ) ) , ( short ) ( formulaColumn + areaNPtg . getLastColumn ( ) ) , areaNPtg . isFirstRowRelative ( ) , areaNPtg . isLastRowRelative ( ) , areaNPtg . isFirstColRelative ( ) , areaNPtg . isLastColRelative ( ) ) ; } else if ( ptg instanceof AreaNVPtg ) { AreaNVPtg areaNVPtg = ( AreaNVPtg ) ptg ; ptg = new AreaVPtg ( ( short ) ( formulaRow + areaNVPtg . getFirstRow ( ) ) , ( short ) ( formulaRow + areaNVPtg . getLastRow ( ) ) , ( short ) ( formulaColumn + areaNVPtg . getFirstColumn ( ) ) , ( short ) ( formulaColumn + areaNVPtg . getLastColumn ( ) ) , areaNVPtg . isFirstRowRelative ( ) , areaNVPtg . isLastRowRelative ( ) , areaNVPtg . isFirstColRelative ( ) , areaNVPtg . isLastColRelative ( ) ) ; } else if ( ptg instanceof AreaNAPtg ) { AreaNAPtg areaNAPtg = ( AreaNAPtg ) ptg ; ptg = new AreaAPtg ( ( short ) ( formulaRow + areaNAPtg . getFirstRow ( ) ) , ( short ) ( formulaRow + areaNAPtg . getLastRow ( ) ) , ( short ) ( formulaColumn + areaNAPtg . getFirstColumn ( ) ) , ( short ) ( formulaColumn + areaNAPtg . getLastColumn ( ) ) , areaNAPtg . isFirstRowRelative ( ) , areaNAPtg . isLastRowRelative ( ) , areaNAPtg . isFirstColRelative ( ) , areaNAPtg . isLastColRelative ( ) ) ; } newPtgStack . add ( ptg ) ; } formula . setParsedExpression ( newPtgStack ) ; formula . setSharedFormula ( false ) ; } else { throw new RuntimeException ( "Shared Formula Conversion: Coding Error" ) ; } } public boolean isInValueSection ( ) { return true ; } public boolean isValue ( ) { return true ; } public Object clone ( ) { throw new UnsupportedOperationException ( "Cannot clone a SharedFormulaRecord" ) ; } } 	1
package org . apache . poi . hssf . usermodel ; import org . apache . poi . hssf . model . Workbook ; import org . apache . poi . hssf . record . FormatRecord ; import java . util . Iterator ; import java . util . List ; import java . util . ListIterator ; import java . util . Vector ; public class HSSFDataFormat { private static List builtinFormats = createBuiltinFormats ( ) ; private Vector formats = new Vector ( ) ; private Workbook workbook ; private boolean movedBuiltins = false ; public HSSFDataFormat ( Workbook workbook ) { this . workbook = workbook ; Iterator i = workbook . getFormats ( ) . iterator ( ) ; while ( i . hasNext ( ) ) { FormatRecord r = ( FormatRecord ) i . next ( ) ; if ( formats . size ( ) < r . getIndexCode ( ) + 1 ) { formats . setSize ( r . getIndexCode ( ) + 1 ) ; } formats . set ( r . getIndexCode ( ) , r . getFormatString ( ) ) ; } } private static synchronized List createBuiltinFormats ( ) { List builtinFormats = new Vector ( ) ; builtinFormats . add ( 0 , "General" ) ; builtinFormats . add ( 1 , "0" ) ; builtinFormats . add ( 2 , "0.00" ) ; builtinFormats . add ( 3 , "#,##0" ) ; builtinFormats . add ( 4 , "#,##0.00" ) ; builtinFormats . add ( 5 , "($#,##0_);($#,##0)" ) ; builtinFormats . add ( 6 , "($#,##0_);[Red]($#,##0)" ) ; builtinFormats . add ( 7 , "($#,##0.00);($#,##0.00)" ) ; builtinFormats . add ( 8 , "($#,##0.00_);[Red]($#,##0.00)" ) ; builtinFormats . add ( 9 , "0%" ) ; builtinFormats . add ( 0xa , "0.00%" ) ; builtinFormats . add ( 0xb , "0.00E+00" ) ; builtinFormats . add ( 0xc , "# ?/?" ) ; builtinFormats . add ( 0xd , "# ??/??" ) ; builtinFormats . add ( 0xe , "m/d/yy" ) ; builtinFormats . add ( 0xf , "d-mmm-yy" ) ; builtinFormats . add ( 0x10 , "d-mmm" ) ; builtinFormats . add ( 0x11 , "mmm-yy" ) ; builtinFormats . add ( 0x12 , "h:mm AM/PM" ) ; builtinFormats . add ( 0x13 , "h:mm:ss AM/PM" ) ; builtinFormats . add ( 0x14 , "h:mm" ) ; builtinFormats . add ( 0x15 , "h:mm:ss" ) ; builtinFormats . add ( 0x16 , "m/d/yy h:mm" ) ; builtinFormats . add ( 0x17 , "0x17" ) ; builtinFormats . add ( 0x18 , "0x18" ) ; builtinFormats . add ( 0x19 , "0x19" ) ; builtinFormats . add ( 0x1a , "0x1a" ) ; builtinFormats . add ( 0x1b , "0x1b" ) ; builtinFormats . add ( 0x1c , "0x1c" ) ; builtinFormats . add ( 0x1d , "0x1d" ) ; builtinFormats . add ( 0x1e , "0x1e" ) ; builtinFormats . add ( 0x1f , "0x1f" ) ; builtinFormats . add ( 0x20 , "0x20" ) ; builtinFormats . add ( 0x21 , "0x21" ) ; builtinFormats . add ( 0x22 , "0x22" ) ; builtinFormats . add ( 0x23 , "0x23" ) ; builtinFormats . add ( 0x24 , "0x24" ) ; builtinFormats . add ( 0x25 , "(#,##0_);(#,##0)" ) ; builtinFormats . add ( 0x26 , "(#,##0_);[Red](#,##0)" ) ; builtinFormats . add ( 0x27 , "(#,##0.00_);(#,##0.00)" ) ; builtinFormats . add ( 0x28 , "(#,##0.00_);[Red](#,##0.00)" ) ; builtinFormats . add ( 0x29 , "_(*#,##0_);_(*(#,##0);_(* \"-\"_);_(@_)" ) ; builtinFormats . add ( 0x2a , "_($*#,##0_);_($*(#,##0);_($* \"-\"_);_(@_)" ) ; builtinFormats . add ( 0x2b , "_(*#,##0.00_);_(*(#,##0.00);_(*\"-\"??_);_(@_)" ) ; builtinFormats . add ( 0x2c , "_($*#,##0.00_);_($*(#,##0.00);_($*\"-\"??_);_(@_)" ) ; builtinFormats . add ( 0x2d , "mm:ss" ) ; builtinFormats . add ( 0x2e , "[h]:mm:ss" ) ; builtinFormats . add ( 0x2f , "mm:ss.0" ) ; builtinFormats . add ( 0x30 , "##0.0E+0" ) ; builtinFormats . add ( 0x31 , "@" ) ; return builtinFormats ; } public static List getBuiltinFormats ( ) { return builtinFormats ; } public static short getBuiltinFormat ( String format ) { if ( format . toUpperCase ( ) . equals ( "TEXT" ) ) format = "@" ; short retval = - 1 ; for ( short k = 0 ; k <= 0x31 ; k ++ ) { String nformat = ( String ) builtinFormats . get ( k ) ; if ( ( nformat != null ) && nformat . equals ( format ) ) { retval = k ; break ; } } return retval ; } public short getFormat ( String format ) { ListIterator i ; int ind ; if ( format . toUpperCase ( ) . equals ( "TEXT" ) ) format = "@" ; if ( ! movedBuiltins ) { i = builtinFormats . listIterator ( ) ; while ( i . hasNext ( ) ) { ind = i . nextIndex ( ) ; if ( formats . size ( ) < ind + 1 ) { formats . setSize ( ind + 1 ) ; } formats . set ( ind , i . next ( ) ) ; } movedBuiltins = true ; } i = formats . listIterator ( ) ; while ( i . hasNext ( ) ) { ind = i . nextIndex ( ) ; if ( format . equals ( i . next ( ) ) ) return ( short ) ind ; } ind = workbook . getFormat ( format , true ) ; if ( formats . size ( ) <= ind ) formats . setSize ( ind + 1 ) ; formats . set ( ind , format ) ; return ( short ) ind ; } public String getFormat ( short index ) { if ( movedBuiltins ) return ( String ) formats . get ( index ) ; else return ( String ) ( builtinFormats . size ( ) > index && builtinFormats . get ( index ) != null ? builtinFormats . get ( index ) : formats . get ( index ) ) ; } public static String getBuiltinFormat ( short index ) { return ( String ) builtinFormats . get ( index ) ; } public static int getNumberOfBuiltinBuiltinFormats ( ) { return builtinFormats . size ( ) ; } } 	0
package org . apache . poi . util ; import java . io . IOException ; import java . io . InputStream ; import java . util . Arrays ; public class LittleEndian implements LittleEndianConsts { private LittleEndian ( ) { } public static short getShort ( final byte [ ] data , final int offset ) { return ( short ) getNumber ( data , offset , SHORT_SIZE ) ; } public static int getUShort ( final byte [ ] data , final int offset ) { short num = ( short ) getNumber ( data , offset , SHORT_SIZE ) ; int retNum ; if ( num < 0 ) { retNum = ( Short . MAX_VALUE + 1 ) * 2 + num ; } else { retNum = num ; } return retNum ; } public static short [ ] getSimpleShortArray ( final byte [ ] data , final int offset , final int size ) { short [ ] results = new short [ size ] ; for ( int i = 0 ; i < size ; i ++ ) { results [ i ] = getShort ( data , offset + 2 + ( i * 2 ) ) ; } return results ; } public static short [ ] getShortArray ( final byte [ ] data , final int offset ) { int size = ( int ) getNumber ( data , offset , SHORT_SIZE ) ; short [ ] results = getSimpleShortArray ( data , offset , size ) ; return results ; } public static short getShort ( final byte [ ] data ) { return getShort ( data , 0 ) ; } public static int getUShort ( final byte [ ] data ) { return getUShort ( data , 0 ) ; } public static int getInt ( final byte [ ] data , final int offset ) { return ( int ) getNumber ( data , offset , INT_SIZE ) ; } public static int getInt ( final byte [ ] data ) { return getInt ( data , 0 ) ; } public static long getUInt ( final byte [ ] data , final int offset ) { int num = ( int ) getNumber ( data , offset , INT_SIZE ) ; long retNum ; if ( num < 0 ) { retNum = ( ( long ) Integer . MAX_VALUE + 1 ) * 2 + num ; } else { retNum = num ; } return retNum ; } public static long getUInt ( final byte [ ] data ) { return getUInt ( data , 0 ) ; } public static long getLong ( final byte [ ] data , final int offset ) { return getNumber ( data , offset , LONG_SIZE ) ; } public static long getLong ( final byte [ ] data ) { return getLong ( data , 0 ) ; } public static double getDouble ( final byte [ ] data , final int offset ) { return Double . longBitsToDouble ( getNumber ( data , offset , DOUBLE_SIZE ) ) ; } public static double getDouble ( final byte [ ] data ) { return getDouble ( data , 0 ) ; } public static void putShort ( final byte [ ] data , final int offset , final short value ) { putNumber ( data , offset , value , SHORT_SIZE ) ; } public static void putShortArray ( final byte [ ] data , final int offset , final short [ ] value ) { putNumber ( data , offset , value . length , SHORT_SIZE ) ; for ( int i = 0 ; i < value . length ; i ++ ) { putNumber ( data , offset + 2 + ( i * 2 ) , value [ i ] , SHORT_SIZE ) ; } } public static void putUShort ( final byte [ ] data , final int offset , final int value ) { putNumber ( data , offset , value , SHORT_SIZE ) ; } public static void putShort ( final byte [ ] data , final short value ) { putShort ( data , 0 , value ) ; } public static void putInt ( final byte [ ] data , final int offset , final int value ) { putNumber ( data , offset , value , INT_SIZE ) ; } public static void putInt ( final byte [ ] data , final int value ) { putInt ( data , 0 , value ) ; } public static void putLong ( final byte [ ] data , final int offset , final long value ) { putNumber ( data , offset , value , LONG_SIZE ) ; } public static void putLong ( final byte [ ] data , final long value ) { putLong ( data , 0 , value ) ; } public static void putDouble ( final byte [ ] data , final int offset , final double value ) { if ( Double . isNaN ( value ) ) putNumber ( data , offset , - 276939487313920L , DOUBLE_SIZE ) ; else putNumber ( data , offset , Double . doubleToLongBits ( value ) , DOUBLE_SIZE ) ; } public static void putDouble ( final byte [ ] data , final double value ) { putDouble ( data , 0 , value ) ; } public static class BufferUnderrunException extends IOException { BufferUnderrunException ( ) { super ( "buffer underrun" ) ; } } public static short readShort ( final InputStream stream ) throws IOException , BufferUnderrunException { return getShort ( readFromStream ( stream , SHORT_SIZE ) ) ; } public static int readInt ( final InputStream stream ) throws IOException , BufferUnderrunException { return getInt ( readFromStream ( stream , INT_SIZE ) ) ; } public static long readLong ( final InputStream stream ) throws IOException , BufferUnderrunException { return getLong ( readFromStream ( stream , LONG_SIZE ) ) ; } public static byte [ ] readFromStream ( final InputStream stream , final int size ) throws IOException , BufferUnderrunException { byte [ ] buffer = new byte [ size ] ; int count = stream . read ( buffer ) ; if ( count == - 1 ) { Arrays . fill ( buffer , ( byte ) 0 ) ; } else if ( count != size ) { throw new BufferUnderrunException ( ) ; } return buffer ; } private static long getNumber ( final byte [ ] data , final int offset , final int size ) { long result = 0 ; for ( int j = offset + size - 1 ; j >= offset ; j -- ) { result <<= 8 ; result |= 0xff & data [ j ] ; } return result ; } private static void putNumber ( final byte [ ] data , final int offset , final long value , final int size ) { int limit = size + offset ; long v = value ; for ( int j = offset ; j < limit ; j ++ ) { data [ j ] = ( byte ) ( v & 0xFF ) ; v >>= 8 ; } } public static int ubyteToInt ( byte b ) { return ( ( b & 0x80 ) == 0 ? ( int ) b : ( b & ( byte ) 0x7f ) + 0x80 ) ; } public static int getUnsignedByte ( final byte [ ] data , final int offset ) { return ( int ) getNumber ( data , offset , BYTE_SIZE ) ; } public static int getUnsignedByte ( final byte [ ] data ) { return getUnsignedByte ( data , 0 ) ; } public static byte [ ] getByteArray ( final byte [ ] data , int offset , int size ) { byte [ ] copy = new byte [ size ] ; System . arraycopy ( data , offset , copy , 0 , size ) ; return copy ; } public static long getULong ( final byte [ ] data , final int offset ) { int num = ( int ) getNumber ( data , offset , LONG_SIZE ) ; long retNum ; if ( num < 0 ) retNum = ( ( long ) Integer . MAX_VALUE + 1 ) * 2 + num ; else retNum = num ; return retNum ; } } 	1
package org . apache . poi . hssf . record . formula ; import org . apache . poi . hssf . model . Workbook ; import org . apache . poi . hssf . record . RecordInputStream ; public class UnknownPtg extends Ptg { private short size ; public UnknownPtg ( ) { } public UnknownPtg ( RecordInputStream in ) { } public void writeBytes ( byte [ ] array , int offset ) { } public int getSize ( ) { return size ; } public String toFormulaString ( Workbook book ) { return "UNKNOWN" ; } public byte getDefaultOperandClass ( ) { return Ptg . CLASS_VALUE ; } public Object clone ( ) { return new UnknownPtg ( ) ; } } 	0
package org . apache . poi . hssf . record ; import org . apache . poi . util . LittleEndian ; public class FnGroupCountRecord extends Record { public final static short sid = 0x9c ; public final static short COUNT = 14 ; private short field_1_count ; public FnGroupCountRecord ( ) { } public FnGroupCountRecord ( RecordInputStream in ) { super ( in ) ; } protected void validateSid ( short id ) { if ( id != sid ) { throw new RecordFormatException ( "NOT A FNGROUPCOUNT RECORD" ) ; } } protected void fillFields ( RecordInputStream in ) { field_1_count = in . readShort ( ) ; } public void setCount ( short count ) { field_1_count = count ; } public short getCount ( ) { return field_1_count ; } public String toString ( ) { StringBuffer buffer = new StringBuffer ( ) ; buffer . append ( "[FNGROUPCOUNT]\n" ) ; buffer . append ( "    .count            = " ) . append ( getCount ( ) ) . append ( "\n" ) ; buffer . append ( "[/FNGROUPCOUNT]\n" ) ; return buffer . toString ( ) ; } public int serialize ( int offset , byte [ ] data ) { LittleEndian . putShort ( data , 0 + offset , sid ) ; LittleEndian . putShort ( data , 2 + offset , ( ( short ) 0x02 ) ) ; LittleEndian . putShort ( data , 4 + offset , getCount ( ) ) ; return getRecordSize ( ) ; } public int getRecordSize ( ) { return 6 ; } public short getSid ( ) { return sid ; } } 	1
package org . apache . poi . hssf . record . formula ; import java . util . List ; import org . apache . poi . hssf . model . Workbook ; import org . apache . poi . hssf . record . RecordInputStream ; public class UnaryMinusPtg extends OperationPtg { public final static int SIZE = 1 ; public final static byte sid = 0x13 ; private final static String MINUS = "-" ; public UnaryMinusPtg ( ) { } public UnaryMinusPtg ( RecordInputStream in ) { } public void writeBytes ( byte [ ] array , int offset ) { array [ offset + 0 ] = sid ; } public int getSize ( ) { return SIZE ; } public int getType ( ) { return this . TYPE_UNARY ; } public int getNumberOfOperands ( ) { return 1 ; } public String toFormulaString ( Workbook book ) { return "+" ; } public String toFormulaString ( String [ ] operands ) { StringBuffer buffer = new StringBuffer ( ) ; buffer . append ( MINUS ) ; buffer . append ( operands [ 0 ] ) ; return buffer . toString ( ) ; } public byte getDefaultOperandClass ( ) { return Ptg . CLASS_VALUE ; } public Object clone ( ) { return new UnaryPlusPtg ( ) ; } } 	0
package org . apache . poi . ddf ; import org . apache . poi . util . HexDump ; import org . apache . poi . util . LittleEndian ; public class EscherChildAnchorRecord extends EscherRecord { public static final short RECORD_ID = ( short ) 0xF00F ; public static final String RECORD_DESCRIPTION = "MsofbtChildAnchor" ; private int field_1_dx1 ; private int field_2_dy1 ; private int field_3_dx2 ; private int field_4_dy2 ; public int fillFields ( byte [ ] data , int offset , EscherRecordFactory recordFactory ) { int bytesRemaining = readHeader ( data , offset ) ; int pos = offset + 8 ; int size = 0 ; field_1_dx1 = LittleEndian . getInt ( data , pos + size ) ; size += 4 ; field_2_dy1 = LittleEndian . getInt ( data , pos + size ) ; size += 4 ; field_3_dx2 = LittleEndian . getInt ( data , pos + size ) ; size += 4 ; field_4_dy2 = LittleEndian . getInt ( data , pos + size ) ; size += 4 ; return 8 + size ; } public int serialize ( int offset , byte [ ] data , EscherSerializationListener listener ) { listener . beforeRecordSerialize ( offset , getRecordId ( ) , this ) ; int pos = offset ; LittleEndian . putShort ( data , pos , getOptions ( ) ) ; pos += 2 ; LittleEndian . putShort ( data , pos , getRecordId ( ) ) ; pos += 2 ; LittleEndian . putInt ( data , pos , getRecordSize ( ) - 8 ) ; pos += 4 ; LittleEndian . putInt ( data , pos , field_1_dx1 ) ; pos += 4 ; LittleEndian . putInt ( data , pos , field_2_dy1 ) ; pos += 4 ; LittleEndian . putInt ( data , pos , field_3_dx2 ) ; pos += 4 ; LittleEndian . putInt ( data , pos , field_4_dy2 ) ; pos += 4 ; listener . afterRecordSerialize ( pos , getRecordId ( ) , pos - offset , this ) ; return pos - offset ; } public int getRecordSize ( ) { return 8 + 4 * 4 ; } public short getRecordId ( ) { return RECORD_ID ; } public String getRecordName ( ) { return "ChildAnchor" ; } public String toString ( ) { String nl = System . getProperty ( "line.separator" ) ; return getClass ( ) . getName ( ) + ":" + nl + "  RecordId: 0x" + HexDump . toHex ( RECORD_ID ) + nl + "  Options: 0x" + HexDump . toHex ( getOptions ( ) ) + nl + "  X1: " + field_1_dx1 + nl + "  Y1: " + field_2_dy1 + nl + "  X2: " + field_3_dx2 + nl + "  Y2: " + field_4_dy2 + nl ; } public int getDx1 ( ) { return field_1_dx1 ; } public void setDx1 ( int field_1_dx1 ) { this . field_1_dx1 = field_1_dx1 ; } public int getDy1 ( ) { return field_2_dy1 ; } public void setDy1 ( int field_2_dy1 ) { this . field_2_dy1 = field_2_dy1 ; } public int getDx2 ( ) { return field_3_dx2 ; } public void setDx2 ( int field_3_dx2 ) { this . field_3_dx2 = field_3_dx2 ; } public int getDy2 ( ) { return field_4_dy2 ; } public void setDy2 ( int field_4_dy2 ) { this . field_4_dy2 = field_4_dy2 ; } } 	1
package org . apache . poi . hssf . util ; public class AreaReference { private CellReference [ ] cells ; private int dim ; public AreaReference ( String reference ) { String [ ] refs = seperateAreaRefs ( reference ) ; dim = refs . length ; cells = new CellReference [ dim ] ; for ( int i = 0 ; i < dim ; i ++ ) { cells [ i ] = new CellReference ( refs [ i ] ) ; } } public int getDim ( ) { return dim ; } public CellReference [ ] getCells ( ) { return cells ; } public String toString ( ) { StringBuffer retval = new StringBuffer ( ) ; for ( int i = 0 ; i < dim ; i ++ ) { retval . append ( ':' ) ; retval . append ( cells [ i ] . toString ( ) ) ; } retval . deleteCharAt ( 0 ) ; return retval . toString ( ) ; } private String [ ] seperateAreaRefs ( String reference ) { String [ ] retval = null ; int length = reference . length ( ) ; int loc = reference . indexOf ( ':' , 0 ) ; if ( loc == - 1 ) { retval = new String [ 1 ] ; retval [ 0 ] = reference ; } else { retval = new String [ 2 ] ; int sheetStart = reference . indexOf ( "!" ) ; retval [ 0 ] = reference . substring ( 0 , sheetStart + 1 ) + reference . substring ( sheetStart + 1 , loc ) ; retval [ 1 ] = reference . substring ( 0 , sheetStart + 1 ) + reference . substring ( loc + 1 ) ; } return retval ; } } 	1
package org . apache . poi . hssf . record ; import org . apache . poi . util . * ; public class BarRecord extends Record { public final static short sid = 0x1017 ; private short field_1_barSpace ; private short field_2_categorySpace ; private short field_3_formatFlags ; private BitField horizontal = BitFieldFactory . getInstance ( 0x1 ) ; private BitField stacked = BitFieldFactory . getInstance ( 0x2 ) ; private BitField displayAsPercentage = BitFieldFactory . getInstance ( 0x4 ) ; private BitField shadow = BitFieldFactory . getInstance ( 0x8 ) ; public BarRecord ( ) { } public BarRecord ( RecordInputStream in ) { super ( in ) ; } protected void validateSid ( short id ) { if ( id != sid ) { throw new RecordFormatException ( "Not a Bar record" ) ; } } protected void fillFields ( RecordInputStream in ) { field_1_barSpace = in . readShort ( ) ; field_2_categorySpace = in . readShort ( ) ; field_3_formatFlags = in . readShort ( ) ; } public String toString ( ) { StringBuffer buffer = new StringBuffer ( ) ; buffer . append ( "[BAR]\n" ) ; buffer . append ( "    .barSpace             = " ) . append ( "0x" ) . append ( HexDump . toHex ( getBarSpace ( ) ) ) . append ( " (" ) . append ( getBarSpace ( ) ) . append ( " )" ) ; buffer . append ( System . getProperty ( "line.separator" ) ) ; buffer . append ( "    .categorySpace        = " ) . append ( "0x" ) . append ( HexDump . toHex ( getCategorySpace ( ) ) ) . append ( " (" ) . append ( getCategorySpace ( ) ) . append ( " )" ) ; buffer . append ( System . getProperty ( "line.separator" ) ) ; buffer . append ( "    .formatFlags          = " ) . append ( "0x" ) . append ( HexDump . toHex ( getFormatFlags ( ) ) ) . append ( " (" ) . append ( getFormatFlags ( ) ) . append ( " )" ) ; buffer . append ( System . getProperty ( "line.separator" ) ) ; buffer . append ( "         .horizontal               = " ) . append ( isHorizontal ( ) ) . append ( '\n' ) ; buffer . append ( "         .stacked                  = " ) . append ( isStacked ( ) ) . append ( '\n' ) ; buffer . append ( "         .displayAsPercentage      = " ) . append ( isDisplayAsPercentage ( ) ) . append ( '\n' ) ; buffer . append ( "         .shadow                   = " ) . append ( isShadow ( ) ) . append ( '\n' ) ; buffer . append ( "[/BAR]\n" ) ; return buffer . toString ( ) ; } public int serialize ( int offset , byte [ ] data ) { int pos = 0 ; LittleEndian . putShort ( data , 0 + offset , sid ) ; LittleEndian . putShort ( data , 2 + offset , ( short ) ( getRecordSize ( ) - 4 ) ) ; LittleEndian . putShort ( data , 4 + offset + pos , field_1_barSpace ) ; LittleEndian . putShort ( data , 6 + offset + pos , field_2_categorySpace ) ; LittleEndian . putShort ( data , 8 + offset + pos , field_3_formatFlags ) ; return getRecordSize ( ) ; } public int getRecordSize ( ) { return 4 + 2 + 2 + 2 ; } public short getSid ( ) { return sid ; } public Object clone ( ) { BarRecord rec = new BarRecord ( ) ; rec . field_1_barSpace = field_1_barSpace ; rec . field_2_categorySpace = field_2_categorySpace ; rec . field_3_formatFlags = field_3_formatFlags ; return rec ; } public short getBarSpace ( ) { return field_1_barSpace ; } public void setBarSpace ( short field_1_barSpace ) { this . field_1_barSpace = field_1_barSpace ; } public short getCategorySpace ( ) { return field_2_categorySpace ; } public void setCategorySpace ( short field_2_categorySpace ) { this . field_2_categorySpace = field_2_categorySpace ; } public short getFormatFlags ( ) { return field_3_formatFlags ; } public void setFormatFlags ( short field_3_formatFlags ) { this . field_3_formatFlags = field_3_formatFlags ; } public void setHorizontal ( boolean value ) { field_3_formatFlags = horizontal . setShortBoolean ( field_3_formatFlags , value ) ; } public boolean isHorizontal ( ) { return horizontal . isSet ( field_3_formatFlags ) ; } public void setStacked ( boolean value ) { field_3_formatFlags = stacked . setShortBoolean ( field_3_formatFlags , value ) ; } public boolean isStacked ( ) { return stacked . isSet ( field_3_formatFlags ) ; } public void setDisplayAsPercentage ( boolean value ) { field_3_formatFlags = displayAsPercentage . setShortBoolean ( field_3_formatFlags , value ) ; } public boolean isDisplayAsPercentage ( ) { return displayAsPercentage . isSet ( field_3_formatFlags ) ; } public void setShadow ( boolean value ) { field_3_formatFlags = shadow . setShortBoolean ( field_3_formatFlags , value ) ; } public boolean isShadow ( ) { return shadow . isSet ( field_3_formatFlags ) ; } } 	1
package org . apache . poi . hssf . record ; import org . apache . poi . util . LittleEndian ; public class BackupRecord extends Record { public final static short sid = 0x40 ; private short field_1_backup ; public BackupRecord ( ) { } public BackupRecord ( RecordInputStream in ) { super ( in ) ; } protected void validateSid ( short id ) { if ( id != sid ) { throw new RecordFormatException ( "NOT A BACKUP RECORD" ) ; } } protected void fillFields ( RecordInputStream in ) { field_1_backup = in . readShort ( ) ; } public void setBackup ( short backup ) { field_1_backup = backup ; } public short getBackup ( ) { return field_1_backup ; } public String toString ( ) { StringBuffer buffer = new StringBuffer ( ) ; buffer . append ( "[BACKUP]\n" ) ; buffer . append ( "    .backup          = " ) . append ( Integer . toHexString ( getBackup ( ) ) ) . append ( "\n" ) ; buffer . append ( "[/BACKUP]\n" ) ; return buffer . toString ( ) ; } public int serialize ( int offset , byte [ ] data ) { LittleEndian . putShort ( data , 0 + offset , sid ) ; LittleEndian . putShort ( data , 2 + offset , ( ( short ) 0x02 ) ) ; LittleEndian . putShort ( data , 4 + offset , getBackup ( ) ) ; return getRecordSize ( ) ; } public int getRecordSize ( ) { return 6 ; } public short getSid ( ) { return sid ; } } 	1
package org . apache . poi . hssf . usermodel ; import java . util . List ; public interface HSSFShapeContainer { List getChildren ( ) ; } 	0
package org . apache . poi . hssf . model ; import java . util . ArrayList ; import java . util . Iterator ; import java . util . LinkedList ; import java . util . List ; import org . apache . poi . hssf . record . formula . * ; public class FormulaParser { public static int FORMULA_TYPE_CELL = 0 ; public static int FORMULA_TYPE_SHARED = 1 ; public static int FORMULA_TYPE_ARRAY = 2 ; public static int FORMULA_TYPE_CONDFOMRAT = 3 ; public static int FORMULA_TYPE_NAMEDRANGE = 4 ; private String formulaString ; private int pointer = 0 ; private int formulaLength ; private List tokens = new java . util . Stack ( ) ; private List functionTokens = new LinkedList ( ) ; private static char TAB = '\t' ; private static char CR = '\n' ; private char look ; private Workbook book ; public FormulaParser ( String formula , Workbook book ) { formulaString = formula ; pointer = 0 ; this . book = book ; formulaLength = formulaString . length ( ) ; } private void GetChar ( ) { if ( pointer == formulaLength ) { look = ( char ) 0 ; return ; } look = formulaString . charAt ( pointer ++ ) ; } private void Error ( String s ) { System . out . println ( "Error: " + s ) ; } private void Abort ( String s ) { Error ( s ) ; throw new RuntimeException ( "Cannot Parse, sorry : " + s + " @ " + pointer + " [Formula String was: '" + formulaString + "']" ) ; } private void Expected ( String s ) { Abort ( s + " Expected" ) ; } private boolean IsAlpha ( char c ) { return Character . isLetter ( c ) || c == '$' || c == '_' ; } private boolean IsDigit ( char c ) { return Character . isDigit ( c ) ; } private boolean IsAlNum ( char c ) { return ( IsAlpha ( c ) || IsDigit ( c ) ) ; } private boolean IsAddop ( char c ) { return ( c == '+' || c == '-' ) ; } private boolean IsWhite ( char c ) { return ( c == ' ' || c == TAB ) ; } private boolean IsSpecialChar ( char c ) { return ( c == '>' || c == '<' || c == '=' || c == '&' || c == '[' || c == ']' ) ; } private void SkipWhite ( ) { while ( IsWhite ( look ) ) { GetChar ( ) ; } } private void Match ( char x ) { if ( look != x ) { Expected ( "" + x + "" ) ; } else { GetChar ( ) ; SkipWhite ( ) ; } } private String GetName ( ) { StringBuffer Token = new StringBuffer ( ) ; if ( ! IsAlpha ( look ) && look != '\'' ) { Expected ( "Name" ) ; } if ( look == '\'' ) { Match ( '\'' ) ; boolean done = look == '\'' ; while ( ! done ) { Token . append ( Character . toUpperCase ( look ) ) ; GetChar ( ) ; if ( look == '\'' ) { Match ( '\'' ) ; done = look != '\'' ; } } } else { while ( IsAlNum ( look ) ) { Token . append ( Character . toUpperCase ( look ) ) ; GetChar ( ) ; } } SkipWhite ( ) ; return Token . toString ( ) ; } private String GetNameAsIs ( ) { StringBuffer Token = new StringBuffer ( ) ; while ( IsAlNum ( look ) || IsWhite ( look ) || IsSpecialChar ( look ) ) { Token = Token . append ( look ) ; GetChar ( ) ; } return Token . toString ( ) ; } private String GetExponent ( ) { StringBuffer retval = new StringBuffer ( ) ; String sign = "" ; GetChar ( ) ; if ( '-' == look ) { sign = "-" ; GetChar ( ) ; } while ( IsDigit ( look ) ) { retval . append ( look ) ; GetChar ( ) ; } if ( retval . length ( ) > 0 ) { retval . insert ( 0 , sign ) ; } return retval . toString ( ) ; } private String GetNum ( ) { StringBuffer value = new StringBuffer ( ) ; if ( ! IsDigit ( look ) ) Expected ( "Integer" ) ; while ( IsDigit ( look ) ) { value . append ( look ) ; GetChar ( ) ; } SkipWhite ( ) ; return value . toString ( ) ; } private void Emit ( String s ) { System . out . print ( TAB + s ) ; } private void EmitLn ( String s ) { Emit ( s ) ; System . out . println ( ) ; ; } private void Ident ( ) { String name ; name = GetName ( ) ; if ( look == '(' ) { function ( name ) ; } else if ( look == ':' ) { String first = name ; Match ( ':' ) ; String second = GetName ( ) ; tokens . add ( new AreaPtg ( first + ":" + second ) ) ; } else if ( look == '!' ) { Match ( '!' ) ; String sheetName = name ; String first = GetName ( ) ; short externIdx = book . checkExternSheet ( book . getSheetIndex ( sheetName ) ) ; if ( look == ':' ) { Match ( ':' ) ; String second = GetName ( ) ; if ( look == '!' ) { Match ( '!' ) ; String third = GetName ( ) ; if ( ! sheetName . equals ( second ) ) throw new RuntimeException ( "Unhandled double sheet reference." ) ; tokens . add ( new Area3DPtg ( first + ":" + third , externIdx ) ) ; } else { tokens . add ( new Area3DPtg ( first + ":" + second , externIdx ) ) ; } } else { tokens . add ( new Ref3DPtg ( first , externIdx ) ) ; } } else { boolean cellRef = true ; boolean boolLit = ( name . equals ( "TRUE" ) || name . equals ( "FALSE" ) ) ; if ( boolLit ) { tokens . add ( new BoolPtg ( name ) ) ; } else if ( cellRef ) { tokens . add ( new ReferencePtg ( name ) ) ; } else { } } } private void addArgumentPointer ( ) { if ( this . functionTokens . size ( ) > 0 ) { List arguments = ( List ) this . functionTokens . get ( 0 ) ; arguments . add ( tokens . get ( tokens . size ( ) - 1 ) ) ; } } private void function ( String name ) { this . functionTokens . add ( 0 , new ArrayList ( 2 ) ) ; Match ( '(' ) ; int numArgs = Arguments ( ) ; Match ( ')' ) ; AbstractFunctionPtg functionPtg = getFunction ( name , ( byte ) numArgs ) ; tokens . add ( functionPtg ) ; if ( functionPtg . getName ( ) . equals ( "externalflag" ) ) { tokens . add ( new NamePtg ( name , this . book ) ) ; } this . functionTokens . remove ( 0 ) ; } private int getPtgSize ( int index ) { int count = 0 ; Iterator ptgIterator = tokens . listIterator ( index ) ; while ( ptgIterator . hasNext ( ) ) { Ptg ptg = ( Ptg ) ptgIterator . next ( ) ; count += ptg . getSize ( ) ; } return count ; } private int getPtgSize ( int start , int end ) { int count = 0 ; int index = start ; Iterator ptgIterator = tokens . listIterator ( index ) ; while ( ptgIterator . hasNext ( ) && index <= end ) { Ptg ptg = ( Ptg ) ptgIterator . next ( ) ; count += ptg . getSize ( ) ; index ++ ; } return count ; } private AbstractFunctionPtg getFunction ( String name , byte numArgs ) { AbstractFunctionPtg retval = null ; if ( name . equals ( "IF" ) ) { retval = new FuncVarPtg ( AbstractFunctionPtg . ATTR_NAME , numArgs ) ; List argumentPointers = ( List ) this . functionTokens . get ( 0 ) ; AttrPtg ifPtg = new AttrPtg ( ) ; ifPtg . setData ( ( short ) 7 ) ; ifPtg . setOptimizedIf ( true ) ; if ( argumentPointers . size ( ) != 2 && argumentPointers . size ( ) != 3 ) { throw new IllegalArgumentException ( "[" + argumentPointers . size ( ) + "] Arguments Found - An IF formula requires 2 or 3 arguments. IF(CONDITION, TRUE_VALUE, FALSE_VALUE [OPTIONAL]" ) ; } int ifIndex = tokens . indexOf ( argumentPointers . get ( 0 ) ) + 1 ; tokens . add ( ifIndex , ifPtg ) ; int gotoIndex = tokens . indexOf ( argumentPointers . get ( 1 ) ) + 1 ; AttrPtg goto1Ptg = new AttrPtg ( ) ; goto1Ptg . setGoto ( true ) ; tokens . add ( gotoIndex , goto1Ptg ) ; if ( numArgs > 2 ) { AttrPtg goto2Ptg = new AttrPtg ( ) ; goto2Ptg . setGoto ( true ) ; goto2Ptg . setData ( ( short ) ( retval . getSize ( ) - 1 ) ) ; tokens . add ( goto2Ptg ) ; } ifPtg . setData ( ( short ) ( getPtgSize ( ifIndex + 1 , gotoIndex ) ) ) ; int ptgCount = this . getPtgSize ( gotoIndex ) - goto1Ptg . getSize ( ) + retval . getSize ( ) ; if ( ptgCount > ( int ) Short . MAX_VALUE ) { throw new RuntimeException ( "Ptg Size exceeds short when being specified for a goto ptg in an if" ) ; } goto1Ptg . setData ( ( short ) ( ptgCount - 1 ) ) ; } else { retval = new FuncVarPtg ( name , numArgs ) ; } return retval ; } private int Arguments ( ) { int numArgs = 0 ; if ( look != ')' ) { numArgs ++ ; Expression ( ) ; addArgumentPointer ( ) ; } while ( look == ',' || look == ';' ) { if ( look == ',' ) { Match ( ',' ) ; } else { Match ( ';' ) ; } Expression ( ) ; addArgumentPointer ( ) ; numArgs ++ ; } return numArgs ; } private void Factor ( ) { if ( look == '-' ) { Match ( '-' ) ; Factor ( ) ; tokens . add ( new UnaryMinusPtg ( ) ) ; } else if ( look == '+' ) { Match ( '+' ) ; Factor ( ) ; tokens . add ( new UnaryPlusPtg ( ) ) ; } else if ( look == '(' ) { Match ( '(' ) ; Expression ( ) ; Match ( ')' ) ; tokens . add ( new ParenthesisPtg ( ) ) ; } else if ( IsAlpha ( look ) || look == '\'' ) { Ident ( ) ; } else if ( look == '"' ) { StringLiteral ( ) ; } else if ( look == ')' || look == ',' ) { tokens . add ( new MissingArgPtg ( ) ) ; } else { String number = GetNum ( ) ; if ( look == '.' ) { Match ( '.' ) ; String decimalPart = null ; if ( IsDigit ( look ) ) number = number + "." + GetNum ( ) ; if ( 'E' == look ) { String exponent = GetExponent ( ) ; number += 'E' + exponent ; } tokens . add ( new NumberPtg ( number ) ) ; } else if ( 'E' == look ) { String exponent = GetExponent ( ) ; number += 'E' + exponent ; tokens . add ( new NumberPtg ( number ) ) ; } else { tokens . add ( getNumberPtgFromString ( number ) ) ; } } } private Ptg getNumberPtgFromString ( String number ) { try { return new IntPtg ( number ) ; } catch ( NumberFormatException e ) { return new NumberPtg ( number ) ; } } private void StringLiteral ( ) { if ( look != '"' ) Expected ( "\"" ) ; else { GetChar ( ) ; StringBuffer Token = new StringBuffer ( ) ; for ( ; ; ) { if ( look == '"' ) { GetChar ( ) ; SkipWhite ( ) ; if ( look == '"' ) Token . append ( "\"" ) ; else break ; } else if ( look == 0 ) { break ; } else { Token . append ( look ) ; GetChar ( ) ; } } tokens . add ( new StringPtg ( Token . toString ( ) ) ) ; } } private void Multiply ( ) { Match ( '*' ) ; Factor ( ) ; tokens . add ( new MultiplyPtg ( ) ) ; } private void Divide ( ) { Match ( '/' ) ; Factor ( ) ; tokens . add ( new DividePtg ( ) ) ; } private void Term ( ) { Factor ( ) ; while ( look == '*' || look == '/' || look == '^' || look == '&' ) { if ( look == '*' ) Multiply ( ) ; else if ( look == '/' ) Divide ( ) ; else if ( look == '^' ) Power ( ) ; else if ( look == '&' ) Concat ( ) ; } } private void Add ( ) { Match ( '+' ) ; Term ( ) ; tokens . add ( new AddPtg ( ) ) ; } private void Concat ( ) { Match ( '&' ) ; Term ( ) ; tokens . add ( new ConcatPtg ( ) ) ; } private void Equal ( ) { Match ( '=' ) ; Expression ( ) ; tokens . add ( new EqualPtg ( ) ) ; } private void Subtract ( ) { Match ( '-' ) ; Term ( ) ; tokens . add ( new SubtractPtg ( ) ) ; } private void Power ( ) { Match ( '^' ) ; Term ( ) ; tokens . add ( new PowerPtg ( ) ) ; } private void Expression ( ) { Term ( ) ; while ( IsAddop ( look ) ) { if ( look == '+' ) Add ( ) ; else if ( look == '-' ) Subtract ( ) ; } if ( look == '=' || look == '>' || look == '<' ) { if ( look == '=' ) Equal ( ) ; else if ( look == '>' ) GreaterThan ( ) ; else if ( look == '<' ) LessThan ( ) ; return ; } } private void GreaterThan ( ) { Match ( '>' ) ; if ( look == '=' ) GreaterEqual ( ) ; else { Expression ( ) ; tokens . add ( new GreaterThanPtg ( ) ) ; } } private void LessThan ( ) { Match ( '<' ) ; if ( look == '=' ) LessEqual ( ) ; else if ( look == '>' ) NotEqual ( ) ; else { Expression ( ) ; tokens . add ( new LessThanPtg ( ) ) ; } } private void GreaterEqual ( ) { Match ( '=' ) ; Expression ( ) ; tokens . add ( new GreaterEqualPtg ( ) ) ; } private void LessEqual ( ) { Match ( '=' ) ; Expression ( ) ; tokens . add ( new LessEqualPtg ( ) ) ; } private void NotEqual ( ) { Match ( '>' ) ; Expression ( ) ; tokens . add ( new NotEqualPtg ( ) ) ; } private void init ( ) { GetChar ( ) ; SkipWhite ( ) ; } public void parse ( ) { synchronized ( tokens ) { init ( ) ; Expression ( ) ; } } public Ptg [ ] getRPNPtg ( ) { return getRPNPtg ( FORMULA_TYPE_CELL ) ; } public Ptg [ ] getRPNPtg ( int formulaType ) { Node node = createTree ( ) ; setRootLevelRVA ( node , formulaType ) ; setParameterRVA ( node , formulaType ) ; return ( Ptg [ ] ) tokens . toArray ( new Ptg [ 0 ] ) ; } private void setRootLevelRVA ( Node n , int formulaType ) { Ptg p = ( Ptg ) n . getValue ( ) ; if ( formulaType == FormulaParser . FORMULA_TYPE_NAMEDRANGE ) { if ( p . getDefaultOperandClass ( ) == Ptg . CLASS_REF ) { setClass ( n , Ptg . CLASS_REF ) ; } else { setClass ( n , Ptg . CLASS_ARRAY ) ; } } else { setClass ( n , Ptg . CLASS_VALUE ) ; } } private void setParameterRVA ( Node n , int formulaType ) { Ptg p = n . getValue ( ) ; int numOperands = n . getNumChildren ( ) ; if ( p instanceof AbstractFunctionPtg ) { for ( int i = 0 ; i < numOperands ; i ++ ) { setParameterRVA ( n . getChild ( i ) , ( ( AbstractFunctionPtg ) p ) . getParameterClass ( i ) , formulaType ) ; setParameterRVA ( n . getChild ( i ) , formulaType ) ; } } else { for ( int i = 0 ; i < numOperands ; i ++ ) { setParameterRVA ( n . getChild ( i ) , formulaType ) ; } } } private void setParameterRVA ( Node n , int expectedClass , int formulaType ) { Ptg p = ( Ptg ) n . getValue ( ) ; if ( expectedClass == Ptg . CLASS_REF ) { if ( p . getDefaultOperandClass ( ) == Ptg . CLASS_REF ) { setClass ( n , Ptg . CLASS_REF ) ; } if ( p . getDefaultOperandClass ( ) == Ptg . CLASS_VALUE ) { if ( formulaType == FORMULA_TYPE_CELL || formulaType == FORMULA_TYPE_SHARED ) { setClass ( n , Ptg . CLASS_VALUE ) ; } else { setClass ( n , Ptg . CLASS_ARRAY ) ; } } if ( p . getDefaultOperandClass ( ) == Ptg . CLASS_ARRAY ) { setClass ( n , Ptg . CLASS_ARRAY ) ; } } else if ( expectedClass == Ptg . CLASS_VALUE ) { if ( formulaType == FORMULA_TYPE_NAMEDRANGE ) { setClass ( n , Ptg . CLASS_ARRAY ) ; } else { setClass ( n , Ptg . CLASS_VALUE ) ; } } else { if ( p . getDefaultOperandClass ( ) == Ptg . CLASS_VALUE && ( formulaType == FORMULA_TYPE_CELL || formulaType == FORMULA_TYPE_SHARED ) ) { setClass ( n , Ptg . CLASS_VALUE ) ; } else { setClass ( n , Ptg . CLASS_ARRAY ) ; } } } private void setClass ( Node n , byte theClass ) { Ptg p = ( Ptg ) n . getValue ( ) ; if ( p instanceof AbstractFunctionPtg || ! ( p instanceof OperationPtg ) ) { p . setClass ( theClass ) ; } else { for ( int i = 0 ; i < n . getNumChildren ( ) ; i ++ ) { setClass ( n . getChild ( i ) , theClass ) ; } } } public static String toFormulaString ( Workbook book , List lptgs ) { String retval = null ; if ( lptgs == null || lptgs . size ( ) == 0 ) return "#NAME" ; Ptg [ ] ptgs = new Ptg [ lptgs . size ( ) ] ; ptgs = ( Ptg [ ] ) lptgs . toArray ( ptgs ) ; retval = toFormulaString ( book , ptgs ) ; return retval ; } public static String toFormulaString ( Workbook book , Ptg [ ] ptgs ) { if ( ptgs == null || ptgs . length == 0 ) return "#NAME" ; java . util . Stack stack = new java . util . Stack ( ) ; AttrPtg ifptg = null ; stack . push ( ptgs [ 0 ] . toFormulaString ( book ) ) ; for ( int i = 1 ; i < ptgs . length ; i ++ ) { if ( ! ( ptgs [ i ] instanceof OperationPtg ) ) { stack . push ( ptgs [ i ] . toFormulaString ( book ) ) ; continue ; } if ( ptgs [ i ] instanceof AttrPtg && ( ( AttrPtg ) ptgs [ i ] ) . isOptimizedIf ( ) ) { ifptg = ( AttrPtg ) ptgs [ i ] ; continue ; } final OperationPtg o = ( OperationPtg ) ptgs [ i ] ; final String [ ] operands = new String [ o . getNumberOfOperands ( ) ] ; for ( int j = operands . length ; j > 0 ; j -- ) { operands [ j - 1 ] = ( String ) stack . pop ( ) ; } stack . push ( o . toFormulaString ( operands ) ) ; if ( ! ( o instanceof AbstractFunctionPtg ) ) continue ; final AbstractFunctionPtg f = ( AbstractFunctionPtg ) o ; final String fname = f . getName ( ) ; if ( fname == null ) continue ; if ( ( ifptg != null ) && ( fname . equals ( "specialflag" ) ) ) { stack . push ( ifptg . toFormulaString ( new String [ ] { ( String ) stack . pop ( ) } ) ) ; continue ; } if ( fname . equals ( "externalflag" ) ) { final String top = ( String ) stack . pop ( ) ; final int paren = top . indexOf ( '(' ) ; final int comma = top . indexOf ( ',' ) ; if ( comma == - 1 ) { final int rparen = top . indexOf ( ')' ) ; stack . push ( top . substring ( paren + 1 , rparen ) + "()" ) ; } else { stack . push ( top . substring ( paren + 1 , comma ) + '(' + top . substring ( comma + 1 ) ) ; } } } return ( String ) stack . pop ( ) ; } private Node createTree ( ) { java . util . Stack stack = new java . util . Stack ( ) ; int numPtgs = tokens . size ( ) ; OperationPtg o ; int numOperands ; Node [ ] operands ; for ( int i = 0 ; i < numPtgs ; i ++ ) { if ( tokens . get ( i ) instanceof OperationPtg ) { o = ( OperationPtg ) tokens . get ( i ) ; numOperands = o . getNumberOfOperands ( ) ; operands = new Node [ numOperands ] ; for ( int j = 0 ; j < numOperands ; j ++ ) { operands [ numOperands - j - 1 ] = ( Node ) stack . pop ( ) ; } Node result = new Node ( o ) ; result . setChildren ( operands ) ; stack . push ( result ) ; } else { stack . push ( new Node ( ( Ptg ) tokens . get ( i ) ) ) ; } } return ( Node ) stack . pop ( ) ; } public String toString ( ) { StringBuffer buf = new StringBuffer ( ) ; for ( int i = 0 ; i < tokens . size ( ) ; i ++ ) { buf . append ( ( ( Ptg ) tokens . get ( i ) ) . toFormulaString ( book ) ) ; buf . append ( ' ' ) ; } return buf . toString ( ) ; } } class Node { private Ptg value = null ; private Node [ ] children = new Node [ 0 ] ; private int numChild = 0 ; public Node ( Ptg val ) { value = val ; } public void setChildren ( Node [ ] child ) { children = child ; numChild = child . length ; } public int getNumChildren ( ) { return numChild ; } public Node getChild ( int number ) { return children [ number ] ; } public Ptg getValue ( ) { return value ; } } 	1
package org . apache . poi . hssf . record ; import org . apache . poi . util . * ; public class AreaRecord extends Record { public final static short sid = 0x101A ; private short field_1_formatFlags ; private BitField stacked = BitFieldFactory . getInstance ( 0x1 ) ; private BitField displayAsPercentage = BitFieldFactory . getInstance ( 0x2 ) ; private BitField shadow = BitFieldFactory . getInstance ( 0x4 ) ; public AreaRecord ( ) { } public AreaRecord ( RecordInputStream in ) { super ( in ) ; } protected void validateSid ( short id ) { if ( id != sid ) { throw new RecordFormatException ( "Not a Area record" ) ; } } protected void fillFields ( RecordInputStream in ) { field_1_formatFlags = in . readShort ( ) ; } public String toString ( ) { StringBuffer buffer = new StringBuffer ( ) ; buffer . append ( "[AREA]\n" ) ; buffer . append ( "    .formatFlags          = " ) . append ( "0x" ) . append ( HexDump . toHex ( getFormatFlags ( ) ) ) . append ( " (" ) . append ( getFormatFlags ( ) ) . append ( " )" ) ; buffer . append ( System . getProperty ( "line.separator" ) ) ; buffer . append ( "         .stacked                  = " ) . append ( isStacked ( ) ) . append ( '\n' ) ; buffer . append ( "         .displayAsPercentage      = " ) . append ( isDisplayAsPercentage ( ) ) . append ( '\n' ) ; buffer . append ( "         .shadow                   = " ) . append ( isShadow ( ) ) . append ( '\n' ) ; buffer . append ( "[/AREA]\n" ) ; return buffer . toString ( ) ; } public int serialize ( int offset , byte [ ] data ) { int pos = 0 ; LittleEndian . putShort ( data , 0 + offset , sid ) ; LittleEndian . putShort ( data , 2 + offset , ( short ) ( getRecordSize ( ) - 4 ) ) ; LittleEndian . putShort ( data , 4 + offset + pos , field_1_formatFlags ) ; return getRecordSize ( ) ; } public int getRecordSize ( ) { return 4 + 2 ; } public short getSid ( ) { return sid ; } public Object clone ( ) { AreaRecord rec = new AreaRecord ( ) ; rec . field_1_formatFlags = field_1_formatFlags ; return rec ; } public short getFormatFlags ( ) { return field_1_formatFlags ; } public void setFormatFlags ( short field_1_formatFlags ) { this . field_1_formatFlags = field_1_formatFlags ; } public void setStacked ( boolean value ) { field_1_formatFlags = stacked . setShortBoolean ( field_1_formatFlags , value ) ; } public boolean isStacked ( ) { return stacked . isSet ( field_1_formatFlags ) ; } public void setDisplayAsPercentage ( boolean value ) { field_1_formatFlags = displayAsPercentage . setShortBoolean ( field_1_formatFlags , value ) ; } public boolean isDisplayAsPercentage ( ) { return displayAsPercentage . isSet ( field_1_formatFlags ) ; } public void setShadow ( boolean value ) { field_1_formatFlags = shadow . setShortBoolean ( field_1_formatFlags , value ) ; } public boolean isShadow ( ) { return shadow . isSet ( field_1_formatFlags ) ; } } 	1
package org . apache . poi . hssf . record ; import org . apache . poi . util . * ; public class SeriesRecord extends Record { public final static short sid = 0x1003 ; private short field_1_categoryDataType ; public final static short CATEGORY_DATA_TYPE_DATES = 0 ; public final static short CATEGORY_DATA_TYPE_NUMERIC = 1 ; public final static short CATEGORY_DATA_TYPE_SEQUENCE = 2 ; public final static short CATEGORY_DATA_TYPE_TEXT = 3 ; private short field_2_valuesDataType ; public final static short VALUES_DATA_TYPE_DATES = 0 ; public final static short VALUES_DATA_TYPE_NUMERIC = 1 ; public final static short VALUES_DATA_TYPE_SEQUENCE = 2 ; public final static short VALUES_DATA_TYPE_TEXT = 3 ; private short field_3_numCategories ; private short field_4_numValues ; private short field_5_bubbleSeriesType ; public final static short BUBBLE_SERIES_TYPE_DATES = 0 ; public final static short BUBBLE_SERIES_TYPE_NUMERIC = 1 ; public final static short BUBBLE_SERIES_TYPE_SEQUENCE = 2 ; public final static short BUBBLE_SERIES_TYPE_TEXT = 3 ; private short field_6_numBubbleValues ; public SeriesRecord ( ) { } public SeriesRecord ( RecordInputStream in ) { super ( in ) ; } protected void validateSid ( short id ) { if ( id != sid ) { throw new RecordFormatException ( "Not a Series record" ) ; } } protected void fillFields ( RecordInputStream in ) { field_1_categoryDataType = in . readShort ( ) ; field_2_valuesDataType = in . readShort ( ) ; field_3_numCategories = in . readShort ( ) ; field_4_numValues = in . readShort ( ) ; field_5_bubbleSeriesType = in . readShort ( ) ; field_6_numBubbleValues = in . readShort ( ) ; } public String toString ( ) { StringBuffer buffer = new StringBuffer ( ) ; buffer . append ( "[SERIES]\n" ) ; buffer . append ( "    .categoryDataType     = " ) . append ( "0x" ) . append ( HexDump . toHex ( getCategoryDataType ( ) ) ) . append ( " (" ) . append ( getCategoryDataType ( ) ) . append ( " )" ) ; buffer . append ( System . getProperty ( "line.separator" ) ) ; buffer . append ( "    .valuesDataType       = " ) . append ( "0x" ) . append ( HexDump . toHex ( getValuesDataType ( ) ) ) . append ( " (" ) . append ( getValuesDataType ( ) ) . append ( " )" ) ; buffer . append ( System . getProperty ( "line.separator" ) ) ; buffer . append ( "    .numCategories        = " ) . append ( "0x" ) . append ( HexDump . toHex ( getNumCategories ( ) ) ) . append ( " (" ) . append ( getNumCategories ( ) ) . append ( " )" ) ; buffer . append ( System . getProperty ( "line.separator" ) ) ; buffer . append ( "    .numValues            = " ) . append ( "0x" ) . append ( HexDump . toHex ( getNumValues ( ) ) ) . append ( " (" ) . append ( getNumValues ( ) ) . append ( " )" ) ; buffer . append ( System . getProperty ( "line.separator" ) ) ; buffer . append ( "    .bubbleSeriesType     = " ) . append ( "0x" ) . append ( HexDump . toHex ( getBubbleSeriesType ( ) ) ) . append ( " (" ) . append ( getBubbleSeriesType ( ) ) . append ( " )" ) ; buffer . append ( System . getProperty ( "line.separator" ) ) ; buffer . append ( "    .numBubbleValues      = " ) . append ( "0x" ) . append ( HexDump . toHex ( getNumBubbleValues ( ) ) ) . append ( " (" ) . append ( getNumBubbleValues ( ) ) . append ( " )" ) ; buffer . append ( System . getProperty ( "line.separator" ) ) ; buffer . append ( "[/SERIES]\n" ) ; return buffer . toString ( ) ; } public int serialize ( int offset , byte [ ] data ) { int pos = 0 ; LittleEndian . putShort ( data , 0 + offset , sid ) ; LittleEndian . putShort ( data , 2 + offset , ( short ) ( getRecordSize ( ) - 4 ) ) ; LittleEndian . putShort ( data , 4 + offset + pos , field_1_categoryDataType ) ; LittleEndian . putShort ( data , 6 + offset + pos , field_2_valuesDataType ) ; LittleEndian . putShort ( data , 8 + offset + pos , field_3_numCategories ) ; LittleEndian . putShort ( data , 10 + offset + pos , field_4_numValues ) ; LittleEndian . putShort ( data , 12 + offset + pos , field_5_bubbleSeriesType ) ; LittleEndian . putShort ( data , 14 + offset + pos , field_6_numBubbleValues ) ; return getRecordSize ( ) ; } public int getRecordSize ( ) { return 4 + 2 + 2 + 2 + 2 + 2 + 2 ; } public short getSid ( ) { return sid ; } public Object clone ( ) { SeriesRecord rec = new SeriesRecord ( ) ; rec . field_1_categoryDataType = field_1_categoryDataType ; rec . field_2_valuesDataType = field_2_valuesDataType ; rec . field_3_numCategories = field_3_numCategories ; rec . field_4_numValues = field_4_numValues ; rec . field_5_bubbleSeriesType = field_5_bubbleSeriesType ; rec . field_6_numBubbleValues = field_6_numBubbleValues ; return rec ; } public short getCategoryDataType ( ) { return field_1_categoryDataType ; } public void setCategoryDataType ( short field_1_categoryDataType ) { this . field_1_categoryDataType = field_1_categoryDataType ; } public short getValuesDataType ( ) { return field_2_valuesDataType ; } public void setValuesDataType ( short field_2_valuesDataType ) { this . field_2_valuesDataType = field_2_valuesDataType ; } public short getNumCategories ( ) { return field_3_numCategories ; } public void setNumCategories ( short field_3_numCategories ) { this . field_3_numCategories = field_3_numCategories ; } public short getNumValues ( ) { return field_4_numValues ; } public void setNumValues ( short field_4_numValues ) { this . field_4_numValues = field_4_numValues ; } public short getBubbleSeriesType ( ) { return field_5_bubbleSeriesType ; } public void setBubbleSeriesType ( short field_5_bubbleSeriesType ) { this . field_5_bubbleSeriesType = field_5_bubbleSeriesType ; } public short getNumBubbleValues ( ) { return field_6_numBubbleValues ; } public void setNumBubbleValues ( short field_6_numBubbleValues ) { this . field_6_numBubbleValues = field_6_numBubbleValues ; } } 	1
package org . apache . poi . hssf . model ; import org . apache . poi . hssf . record . * ; import org . apache . poi . hssf . usermodel . HSSFComment ; import org . apache . poi . hssf . usermodel . HSSFShape ; import org . apache . poi . util . LittleEndian ; import org . apache . poi . ddf . * ; import java . util . List ; import java . util . Iterator ; public class CommentShape extends TextboxShape { private NoteRecord note ; public CommentShape ( HSSFComment hssfShape , int shapeId ) { super ( hssfShape , shapeId ) ; note = createNoteRecord ( hssfShape , shapeId ) ; ObjRecord obj = getObjRecord ( ) ; List records = obj . getSubRecords ( ) ; int cmoIdx = 0 ; for ( int i = 0 ; i < records . size ( ) ; i ++ ) { Object r = records . get ( i ) ; if ( r instanceof CommonObjectDataSubRecord ) { CommonObjectDataSubRecord cmo = ( CommonObjectDataSubRecord ) r ; cmo . setAutofill ( false ) ; cmoIdx = i ; } } NoteStructureSubRecord u = new NoteStructureSubRecord ( ) ; obj . addSubRecord ( cmoIdx + 1 , u ) ; } private NoteRecord createNoteRecord ( HSSFComment shape , int shapeId ) { NoteRecord note = new NoteRecord ( ) ; note . setColumn ( shape . getColumn ( ) ) ; note . setRow ( ( short ) shape . getRow ( ) ) ; note . setFlags ( shape . isVisible ( ) ? NoteRecord . NOTE_VISIBLE : NoteRecord . NOTE_HIDDEN ) ; note . setShapeId ( ( short ) shapeId ) ; note . setAuthor ( shape . getAuthor ( ) == null ? "" : shape . getAuthor ( ) ) ; return note ; } protected int addStandardOptions ( HSSFShape shape , EscherOptRecord opt ) { super . addStandardOptions ( shape , opt ) ; java . util . List props = opt . getEscherProperties ( ) ; for ( Iterator iterator = props . iterator ( ) ; iterator . hasNext ( ) ; ) { EscherProperty prop = ( EscherProperty ) iterator . next ( ) ; switch ( prop . getId ( ) ) { case EscherProperties . TEXT__TEXTLEFT : case EscherProperties . TEXT__TEXTRIGHT : case EscherProperties . TEXT__TEXTTOP : case EscherProperties . TEXT__TEXTBOTTOM : case EscherProperties . GROUPSHAPE__PRINT : case EscherProperties . FILL__FILLBACKCOLOR : case EscherProperties . LINESTYLE__COLOR : iterator . remove ( ) ; break ; } } HSSFComment comment = ( HSSFComment ) shape ; opt . addEscherProperty ( new EscherSimpleProperty ( EscherProperties . GROUPSHAPE__PRINT , comment . isVisible ( ) ? 0x000A0000 : 0x000A0002 ) ) ; opt . addEscherProperty ( new EscherSimpleProperty ( EscherProperties . SHADOWSTYLE__SHADOWOBSURED , 0x00030003 ) ) ; opt . addEscherProperty ( new EscherSimpleProperty ( EscherProperties . SHADOWSTYLE__COLOR , 0x00000000 ) ) ; opt . sortProperties ( ) ; return opt . getEscherProperties ( ) . size ( ) ; } public NoteRecord getNoteRecord ( ) { return note ; } } 	1
package org . apache . poi . poifs . property ; import java . io . IOException ; import java . util . * ; import org . apache . poi . poifs . common . POIFSConstants ; import org . apache . poi . poifs . storage . ListManagedBlock ; class PropertyFactory { private PropertyFactory ( ) { } static List convertToProperties ( ListManagedBlock [ ] blocks ) throws IOException { List properties = new ArrayList ( ) ; for ( int j = 0 ; j < blocks . length ; j ++ ) { byte [ ] data = blocks [ j ] . getData ( ) ; int property_count = data . length / POIFSConstants . PROPERTY_SIZE ; int offset = 0 ; for ( int k = 0 ; k < property_count ; k ++ ) { switch ( data [ offset + PropertyConstants . PROPERTY_TYPE_OFFSET ] ) { case PropertyConstants . DIRECTORY_TYPE : properties . add ( new DirectoryProperty ( properties . size ( ) , data , offset ) ) ; break ; case PropertyConstants . DOCUMENT_TYPE : properties . add ( new DocumentProperty ( properties . size ( ) , data , offset ) ) ; break ; case PropertyConstants . ROOT_TYPE : properties . add ( new RootProperty ( properties . size ( ) , data , offset ) ) ; break ; default : properties . add ( null ) ; break ; } offset += POIFSConstants . PROPERTY_SIZE ; } } return properties ; } } 	0
package org . apache . poi . hssf . record . formula ; import org . apache . poi . util . LittleEndian ; import org . apache . poi . hssf . model . Workbook ; import org . apache . poi . hssf . record . RecordInputStream ; public class NameXPtg extends Ptg { public final static short sid = 0x39 ; private final static int SIZE = 7 ; private short field_1_ixals ; private short field_2_ilbl ; private short field_3_reserved ; private NameXPtg ( ) { } public NameXPtg ( String name ) { } public NameXPtg ( RecordInputStream in ) { field_1_ixals = in . readShort ( ) ; field_2_ilbl = in . readShort ( ) ; field_3_reserved = in . readShort ( ) ; } public void writeBytes ( byte [ ] array , int offset ) { array [ offset + 0 ] = ( byte ) ( sid + ptgClass ) ; LittleEndian . putShort ( array , offset + 1 , field_1_ixals ) ; LittleEndian . putShort ( array , offset + 3 , field_2_ilbl ) ; LittleEndian . putShort ( array , offset + 5 , field_3_reserved ) ; } public int getSize ( ) { return SIZE ; } public String toFormulaString ( Workbook book ) { return "NO IDEA - NAME" ; } public byte getDefaultOperandClass ( ) { return Ptg . CLASS_VALUE ; } public Object clone ( ) { NameXPtg ptg = new NameXPtg ( ) ; ptg . field_1_ixals = field_1_ixals ; ptg . field_3_reserved = field_3_reserved ; ptg . field_2_ilbl = field_2_ilbl ; ptg . setClass ( ptgClass ) ; return ptg ; } } 	0
package org . apache . poi . util ; import java . util . * ; public class IntMapper { private List elements ; private Map valueKeyMap ; private static final int _default_size = 10 ; public IntMapper ( ) { this ( _default_size ) ; } public IntMapper ( final int initialCapacity ) { elements = new ArrayList ( initialCapacity ) ; valueKeyMap = new HashMap ( initialCapacity ) ; } public boolean add ( final Object value ) { int index = elements . size ( ) ; elements . add ( value ) ; valueKeyMap . put ( value , new Integer ( index ) ) ; return true ; } public int size ( ) { return elements . size ( ) ; } public Object get ( int index ) { return elements . get ( index ) ; } public int getIndex ( Object o ) { Integer i = ( ( Integer ) valueKeyMap . get ( o ) ) ; if ( i == null ) return - 1 ; return i . intValue ( ) ; } public Iterator iterator ( ) { return elements . iterator ( ) ; } } 	1
package org . apache . poi . hssf . usermodel ; public abstract class HSSFAnchor { int dx1 ; int dy1 ; int dx2 ; int dy2 ; public HSSFAnchor ( ) { } public HSSFAnchor ( int dx1 , int dy1 , int dx2 , int dy2 ) { this . dx1 = dx1 ; this . dy1 = dy1 ; this . dx2 = dx2 ; this . dy2 = dy2 ; } public int getDx1 ( ) { return dx1 ; } public void setDx1 ( int dx1 ) { this . dx1 = dx1 ; } public int getDy1 ( ) { return dy1 ; } public void setDy1 ( int dy1 ) { this . dy1 = dy1 ; } public int getDy2 ( ) { return dy2 ; } public void setDy2 ( int dy2 ) { this . dy2 = dy2 ; } public int getDx2 ( ) { return dx2 ; } public void setDx2 ( int dx2 ) { this . dx2 = dx2 ; } public abstract boolean isHorizontallyFlipped ( ) ; public abstract boolean isVerticallyFlipped ( ) ; } 	0
package org . apache . poi . hssf . model ; import org . apache . poi . ddf . EscherDggRecord ; import org . apache . poi . ddf . EscherDgRecord ; import java . util . Map ; import java . util . HashMap ; public class DrawingManager { EscherDggRecord dgg ; Map dgMap = new HashMap ( ) ; public DrawingManager ( EscherDggRecord dgg ) { this . dgg = dgg ; } public EscherDgRecord createDgRecord ( ) { EscherDgRecord dg = new EscherDgRecord ( ) ; dg . setRecordId ( EscherDgRecord . RECORD_ID ) ; short dgId = findNewDrawingGroupId ( ) ; dg . setOptions ( ( short ) ( dgId << 4 ) ) ; dg . setNumShapes ( 0 ) ; dg . setLastMSOSPID ( - 1 ) ; dgg . addCluster ( dgId , 0 ) ; dgg . setDrawingsSaved ( dgg . getDrawingsSaved ( ) + 1 ) ; dgMap . put ( new Short ( dgId ) , dg ) ; return dg ; } public int allocateShapeId ( short drawingGroupId ) { EscherDgRecord dg = ( EscherDgRecord ) dgMap . get ( new Short ( drawingGroupId ) ) ; int lastShapeId = dg . getLastMSOSPID ( ) ; int newShapeId = 0 ; if ( lastShapeId % 1024 == 1023 ) { newShapeId = findFreeSPIDBlock ( ) ; dgg . addCluster ( drawingGroupId , 1 ) ; } else { for ( int i = 0 ; i < dgg . getFileIdClusters ( ) . length ; i ++ ) { EscherDggRecord . FileIdCluster c = dgg . getFileIdClusters ( ) [ i ] ; if ( c . getDrawingGroupId ( ) == drawingGroupId ) { if ( c . getNumShapeIdsUsed ( ) != 1024 ) { c . incrementShapeId ( ) ; } } if ( dg . getLastMSOSPID ( ) == - 1 ) { newShapeId = findFreeSPIDBlock ( ) ; } else { newShapeId = dg . getLastMSOSPID ( ) + 1 ; } } } dgg . setNumShapesSaved ( dgg . getNumShapesSaved ( ) + 1 ) ; if ( newShapeId >= dgg . getShapeIdMax ( ) ) { dgg . setShapeIdMax ( newShapeId + 1 ) ; } dg . setLastMSOSPID ( newShapeId ) ; dg . incrementShapeCount ( ) ; return newShapeId ; } short findNewDrawingGroupId ( ) { short dgId = 1 ; while ( drawingGroupExists ( dgId ) ) dgId ++ ; return dgId ; } boolean drawingGroupExists ( short dgId ) { for ( int i = 0 ; i < dgg . getFileIdClusters ( ) . length ; i ++ ) { if ( dgg . getFileIdClusters ( ) [ i ] . getDrawingGroupId ( ) == dgId ) return true ; } return false ; } int findFreeSPIDBlock ( ) { int max = dgg . getShapeIdMax ( ) ; int next = ( ( max / 1024 ) + 1 ) * 1024 ; return next ; } public EscherDggRecord getDgg ( ) { return dgg ; } } 	0
package org . apache . poi . util ; import java . util . * ; public class ShortList { private short [ ] _array ; private int _limit ; private static final int _default_size = 128 ; public ShortList ( ) { this ( _default_size ) ; } public ShortList ( final ShortList list ) { this ( list . _array . length ) ; System . arraycopy ( list . _array , 0 , _array , 0 , _array . length ) ; _limit = list . _limit ; } public ShortList ( final int initialCapacity ) { _array = new short [ initialCapacity ] ; _limit = 0 ; } public void add ( final int index , final short value ) { if ( index > _limit ) { throw new IndexOutOfBoundsException ( ) ; } else if ( index == _limit ) { add ( value ) ; } else { if ( _limit == _array . length ) { growArray ( _limit * 2 ) ; } System . arraycopy ( _array , index , _array , index + 1 , _limit - index ) ; _array [ index ] = value ; _limit ++ ; } } public boolean add ( final short value ) { if ( _limit == _array . length ) { growArray ( _limit * 2 ) ; } _array [ _limit ++ ] = value ; return true ; } public boolean addAll ( final ShortList c ) { if ( c . _limit != 0 ) { if ( ( _limit + c . _limit ) > _array . length ) { growArray ( _limit + c . _limit ) ; } System . arraycopy ( c . _array , 0 , _array , _limit , c . _limit ) ; _limit += c . _limit ; } return true ; } public boolean addAll ( final int index , final ShortList c ) { if ( index > _limit ) { throw new IndexOutOfBoundsException ( ) ; } if ( c . _limit != 0 ) { if ( ( _limit + c . _limit ) > _array . length ) { growArray ( _limit + c . _limit ) ; } System . arraycopy ( _array , index , _array , index + c . _limit , _limit - index ) ; System . arraycopy ( c . _array , 0 , _array , index , c . _limit ) ; _limit += c . _limit ; } return true ; } public void clear ( ) { _limit = 0 ; } public boolean contains ( final short o ) { boolean rval = false ; for ( int j = 0 ; ! rval && ( j < _limit ) ; j ++ ) { if ( _array [ j ] == o ) { rval = true ; } } return rval ; } public boolean containsAll ( final ShortList c ) { boolean rval = true ; if ( this != c ) { for ( int j = 0 ; rval && ( j < c . _limit ) ; j ++ ) { if ( ! contains ( c . _array [ j ] ) ) { rval = false ; } } } return rval ; } public boolean equals ( final Object o ) { boolean rval = this == o ; if ( ! rval && ( o != null ) && ( o . getClass ( ) == this . getClass ( ) ) ) { ShortList other = ( ShortList ) o ; if ( other . _limit == _limit ) { rval = true ; for ( int j = 0 ; rval && ( j < _limit ) ; j ++ ) { rval = _array [ j ] == other . _array [ j ] ; } } } return rval ; } public short get ( final int index ) { if ( index >= _limit ) { throw new IndexOutOfBoundsException ( ) ; } return _array [ index ] ; } public int hashCode ( ) { int hash = 0 ; for ( int j = 0 ; j < _limit ; j ++ ) { hash = ( 31 * hash ) + _array [ j ] ; } return hash ; } public int indexOf ( final short o ) { int rval = 0 ; for ( ; rval < _limit ; rval ++ ) { if ( o == _array [ rval ] ) { break ; } } if ( rval == _limit ) { rval = - 1 ; } return rval ; } public boolean isEmpty ( ) { return _limit == 0 ; } public int lastIndexOf ( final short o ) { int rval = _limit - 1 ; for ( ; rval >= 0 ; rval -- ) { if ( o == _array [ rval ] ) { break ; } } return rval ; } public short remove ( final int index ) { if ( index >= _limit ) { throw new IndexOutOfBoundsException ( ) ; } short rval = _array [ index ] ; System . arraycopy ( _array , index + 1 , _array , index , _limit - index ) ; _limit -- ; return rval ; } public boolean removeValue ( final short o ) { boolean rval = false ; for ( int j = 0 ; ! rval && ( j < _limit ) ; j ++ ) { if ( o == _array [ j ] ) { System . arraycopy ( _array , j + 1 , _array , j , _limit - j ) ; _limit -- ; rval = true ; } } return rval ; } public boolean removeAll ( final ShortList c ) { boolean rval = false ; for ( int j = 0 ; j < c . _limit ; j ++ ) { if ( removeValue ( c . _array [ j ] ) ) { rval = true ; } } return rval ; } public boolean retainAll ( final ShortList c ) { boolean rval = false ; for ( int j = 0 ; j < _limit ; ) { if ( ! c . contains ( _array [ j ] ) ) { remove ( j ) ; rval = true ; } else { j ++ ; } } return rval ; } public short set ( final int index , final short element ) { if ( index >= _limit ) { throw new IndexOutOfBoundsException ( ) ; } short rval = _array [ index ] ; _array [ index ] = element ; return rval ; } public int size ( ) { return _limit ; } public short [ ] toArray ( ) { short [ ] rval = new short [ _limit ] ; System . arraycopy ( _array , 0 , rval , 0 , _limit ) ; return rval ; } public short [ ] toArray ( final short [ ] a ) { short [ ] rval ; if ( a . length == _limit ) { System . arraycopy ( _array , 0 , a , 0 , _limit ) ; rval = a ; } else { rval = toArray ( ) ; } return rval ; } private void growArray ( final int new_size ) { int size = ( new_size == _array . length ) ? new_size + 1 : new_size ; short [ ] new_array = new short [ size ] ; System . arraycopy ( _array , 0 , new_array , 0 , _limit ) ; _array = new_array ; } } 	1
package org . apache . poi . hssf . record . formula ; import java . util . List ; import org . apache . poi . hssf . model . Workbook ; import org . apache . poi . hssf . record . RecordInputStream ; public class ParenthesisPtg extends OperationPtg { private final static int SIZE = 1 ; public final static byte sid = 0x15 ; public ParenthesisPtg ( ) { } public ParenthesisPtg ( RecordInputStream in ) { } public void writeBytes ( byte [ ] array , int offset ) { array [ offset + 0 ] = sid ; } public int getSize ( ) { return SIZE ; } public int getType ( ) { return TYPE_BINARY ; } public int getNumberOfOperands ( ) { return 1 ; } public String toFormulaString ( Workbook book ) { return "()" ; } public String toFormulaString ( String [ ] operands ) { return "(" + operands [ 0 ] + ")" ; } public byte getDefaultOperandClass ( ) { return Ptg . CLASS_VALUE ; } public Object clone ( ) { return new ParenthesisPtg ( ) ; } } 	0
package org . apache . poi . poifs . storage ; import org . apache . poi . poifs . property . RootProperty ; import java . util . * ; import java . io . * ; public class SmallBlockTableReader { public static BlockList getSmallDocumentBlocks ( final RawDataBlockList blockList , final RootProperty root , final int sbatStart ) throws IOException { BlockList list = new SmallDocumentBlockList ( SmallDocumentBlock . extract ( blockList . fetchBlocks ( root . getStartBlock ( ) ) ) ) ; new BlockAllocationTableReader ( blockList . fetchBlocks ( sbatStart ) , list ) ; return list ; } } 	1
package org . apache . poi . hssf . record ; import org . apache . poi . util . LittleEndian ; public class HCenterRecord extends Record { public final static short sid = 0x83 ; private short field_1_hcenter ; public HCenterRecord ( ) { } public HCenterRecord ( RecordInputStream in ) { super ( in ) ; } protected void validateSid ( short id ) { if ( id != sid ) { throw new RecordFormatException ( "NOT A HCenter RECORD" ) ; } } protected void fillFields ( RecordInputStream in ) { field_1_hcenter = in . readShort ( ) ; } public void setHCenter ( boolean hc ) { if ( hc == true ) { field_1_hcenter = 1 ; } else { field_1_hcenter = 0 ; } } public boolean getHCenter ( ) { return ( field_1_hcenter == 1 ) ; } public String toString ( ) { StringBuffer buffer = new StringBuffer ( ) ; buffer . append ( "[HCENTER]\n" ) ; buffer . append ( "    .hcenter        = " ) . append ( getHCenter ( ) ) . append ( "\n" ) ; buffer . append ( "[/HCENTER]\n" ) ; return buffer . toString ( ) ; } public int serialize ( int offset , byte [ ] data ) { LittleEndian . putShort ( data , 0 + offset , sid ) ; LittleEndian . putShort ( data , 2 + offset , ( short ) 0x2 ) ; LittleEndian . putShort ( data , 4 + offset , ( short ) field_1_hcenter ) ; return getRecordSize ( ) ; } public int getRecordSize ( ) { return 6 ; } public short getSid ( ) { return sid ; } public Object clone ( ) { HCenterRecord rec = new HCenterRecord ( ) ; rec . field_1_hcenter = field_1_hcenter ; return rec ; } } 	1
package org . apache . poi . hssf . record ; import org . apache . poi . hssf . usermodel . HSSFRichTextString ; import org . apache . poi . util . LittleEndian ; import org . apache . poi . util . HexDump ; import java . io . UnsupportedEncodingException ; public class TextObjectRecord extends TextObjectBaseRecord { HSSFRichTextString str ; public TextObjectRecord ( ) { } public TextObjectRecord ( RecordInputStream in ) { super ( in ) ; if ( str == null ) str = new HSSFRichTextString ( "" ) ; } protected void fillFields ( RecordInputStream in ) { super . fillFields ( in ) ; if ( getTextLength ( ) > 0 ) { if ( in . isContinueNext ( ) && in . remaining ( ) == 0 ) { in . nextRecord ( ) ; processRawString ( in ) ; } else throw new RecordFormatException ( "Expected Continue record to hold string data for TextObjectRecord" ) ; } if ( getFormattingRunLength ( ) > 0 ) { if ( in . isContinueNext ( ) && in . remaining ( ) == 0 ) { in . nextRecord ( ) ; processFontRuns ( in ) ; } else throw new RecordFormatException ( "Expected Continue Record to hold font runs for TextObjectRecord" ) ; } } public int getRecordSize ( ) { int continue1Size = 0 ; int continue2Size = 0 ; if ( str . length ( ) != 0 ) { continue1Size = str . length ( ) * 2 + 1 + 4 ; continue2Size = ( str . numFormattingRuns ( ) + 1 ) * 8 + 4 ; } return super . getRecordSize ( ) + continue1Size + continue2Size ; } public int serialize ( int offset , byte [ ] data ) { HSSFRichTextString temp = str ; str = new HSSFRichTextString ( "" ) ; int bytesWritten1 = super . serialize ( offset , data ) ; str = temp ; int pos = offset + bytesWritten1 ; if ( str . getString ( ) . equals ( "" ) == false ) { ContinueRecord c1 = createContinue1 ( ) ; ContinueRecord c2 = createContinue2 ( ) ; int bytesWritten2 = c1 . serialize ( pos , data ) ; pos += bytesWritten2 ; int bytesWritten3 = c2 . serialize ( pos , data ) ; pos += bytesWritten3 ; int size = bytesWritten1 + bytesWritten2 + bytesWritten3 ; if ( size != getRecordSize ( ) ) throw new RecordFormatException ( size + " bytes written but getRecordSize() reports " + getRecordSize ( ) ) ; return size ; } if ( bytesWritten1 != getRecordSize ( ) ) throw new RecordFormatException ( bytesWritten1 + " bytes written but getRecordSize() reports " + getRecordSize ( ) ) ; return bytesWritten1 ; } private ContinueRecord createContinue1 ( ) { ContinueRecord c1 = new ContinueRecord ( ) ; byte [ ] c1Data = new byte [ str . length ( ) * 2 + 1 ] ; try { c1Data [ 0 ] = 1 ; System . arraycopy ( str . getString ( ) . getBytes ( "UTF-16LE" ) , 0 , c1Data , 1 , str . length ( ) * 2 ) ; } catch ( UnsupportedEncodingException e ) { throw new RuntimeException ( e . getMessage ( ) ) ; } c1 . setData ( c1Data ) ; return c1 ; } private ContinueRecord createContinue2 ( ) { ContinueRecord c2 = new ContinueRecord ( ) ; byte [ ] c2Data = new byte [ str . numFormattingRuns ( ) * 8 + 8 ] ; int pos = 0 ; for ( int i = 0 ; i < str . numFormattingRuns ( ) ; i ++ ) { LittleEndian . putShort ( c2Data , pos , ( short ) str . getIndexOfFormattingRun ( i ) ) ; pos += 2 ; LittleEndian . putShort ( c2Data , pos , str . getFontOfFormattingRun ( i ) == str . NO_FONT ? 0 : str . getFontOfFormattingRun ( i ) ) ; pos += 2 ; pos += 4 ; } LittleEndian . putShort ( c2Data , pos , ( short ) str . length ( ) ) ; pos += 2 ; LittleEndian . putShort ( c2Data , pos , ( short ) 0 ) ; pos += 2 ; pos += 4 ; c2 . setData ( c2Data ) ; return c2 ; } private void processFontRuns ( RecordInputStream in ) { while ( in . remaining ( ) > 0 ) { short index = in . readShort ( ) ; short iFont = in . readShort ( ) ; in . readInt ( ) ; str . applyFont ( index , str . length ( ) , iFont ) ; } } private void processRawString ( RecordInputStream in ) { String s ; byte compressByte = in . readByte ( ) ; boolean isCompressed = compressByte == 0 ; if ( isCompressed ) { s = in . readCompressedUnicode ( getTextLength ( ) ) ; } else { s = in . readUnicodeLEString ( getTextLength ( ) ) ; } str = new HSSFRichTextString ( s ) ; } public HSSFRichTextString getStr ( ) { return str ; } public void setStr ( HSSFRichTextString str ) { this . str = str ; } public String toString ( ) { StringBuffer buffer = new StringBuffer ( ) ; buffer . append ( "[TXO]\n" ) ; buffer . append ( "    .options              = " ) . append ( "0x" ) . append ( HexDump . toHex ( getOptions ( ) ) ) . append ( " (" ) . append ( getOptions ( ) ) . append ( " )" ) ; buffer . append ( System . getProperty ( "line.separator" ) ) ; buffer . append ( "         .reserved1                = " ) . append ( isReserved1 ( ) ) . append ( '\n' ) ; buffer . append ( "         .HorizontalTextAlignment     = " ) . append ( getHorizontalTextAlignment ( ) ) . append ( '\n' ) ; buffer . append ( "         .VerticalTextAlignment     = " ) . append ( getVerticalTextAlignment ( ) ) . append ( '\n' ) ; buffer . append ( "         .reserved2                = " ) . append ( getReserved2 ( ) ) . append ( '\n' ) ; buffer . append ( "         .textLocked               = " ) . append ( isTextLocked ( ) ) . append ( '\n' ) ; buffer . append ( "         .reserved3                = " ) . append ( getReserved3 ( ) ) . append ( '\n' ) ; buffer . append ( "    .textOrientation      = " ) . append ( "0x" ) . append ( HexDump . toHex ( getTextOrientation ( ) ) ) . append ( " (" ) . append ( getTextOrientation ( ) ) . append ( " )" ) ; buffer . append ( System . getProperty ( "line.separator" ) ) ; buffer . append ( "    .reserved4            = " ) . append ( "0x" ) . append ( HexDump . toHex ( getReserved4 ( ) ) ) . append ( " (" ) . append ( getReserved4 ( ) ) . append ( " )" ) ; buffer . append ( System . getProperty ( "line.separator" ) ) ; buffer . append ( "    .reserved5            = " ) . append ( "0x" ) . append ( HexDump . toHex ( getReserved5 ( ) ) ) . append ( " (" ) . append ( getReserved5 ( ) ) . append ( " )" ) ; buffer . append ( System . getProperty ( "line.separator" ) ) ; buffer . append ( "    .reserved6            = " ) . append ( "0x" ) . append ( HexDump . toHex ( getReserved6 ( ) ) ) . append ( " (" ) . append ( getReserved6 ( ) ) . append ( " )" ) ; buffer . append ( System . getProperty ( "line.separator" ) ) ; buffer . append ( "    .textLength           = " ) . append ( "0x" ) . append ( HexDump . toHex ( getTextLength ( ) ) ) . append ( " (" ) . append ( getTextLength ( ) ) . append ( " )" ) ; buffer . append ( System . getProperty ( "line.separator" ) ) ; buffer . append ( "    .reserved7            = " ) . append ( "0x" ) . append ( HexDump . toHex ( getReserved7 ( ) ) ) . append ( " (" ) . append ( getReserved7 ( ) ) . append ( " )" ) ; buffer . append ( System . getProperty ( "line.separator" ) ) ; buffer . append ( "    .string = " ) . append ( str ) . append ( '\n' ) ; buffer . append ( "[/TXO]\n" ) ; return buffer . toString ( ) ; } } 	1
package org . apache . poi . util ; import java . util . * ; public class IntList { private int [ ] _array ; private int _limit ; private int fillval = 0 ; private static final int _default_size = 128 ; public IntList ( ) { this ( _default_size ) ; } public IntList ( final int initialCapacity ) { this ( initialCapacity , 0 ) ; } public IntList ( final IntList list ) { this ( list . _array . length ) ; System . arraycopy ( list . _array , 0 , _array , 0 , _array . length ) ; _limit = list . _limit ; } public IntList ( final int initialCapacity , int fillvalue ) { _array = new int [ initialCapacity ] ; if ( fillval != 0 ) { fillval = fillvalue ; fillArray ( fillval , _array , 0 ) ; } _limit = 0 ; } private void fillArray ( int val , int [ ] array , int index ) { for ( int k = index ; k < array . length ; k ++ ) { array [ k ] = val ; } } public void add ( final int index , final int value ) { if ( index > _limit ) { throw new IndexOutOfBoundsException ( ) ; } else if ( index == _limit ) { add ( value ) ; } else { if ( _limit == _array . length ) { growArray ( _limit * 2 ) ; } System . arraycopy ( _array , index , _array , index + 1 , _limit - index ) ; _array [ index ] = value ; _limit ++ ; } } public boolean add ( final int value ) { if ( _limit == _array . length ) { growArray ( _limit * 2 ) ; } _array [ _limit ++ ] = value ; return true ; } public boolean addAll ( final IntList c ) { if ( c . _limit != 0 ) { if ( ( _limit + c . _limit ) > _array . length ) { growArray ( _limit + c . _limit ) ; } System . arraycopy ( c . _array , 0 , _array , _limit , c . _limit ) ; _limit += c . _limit ; } return true ; } public boolean addAll ( final int index , final IntList c ) { if ( index > _limit ) { throw new IndexOutOfBoundsException ( ) ; } if ( c . _limit != 0 ) { if ( ( _limit + c . _limit ) > _array . length ) { growArray ( _limit + c . _limit ) ; } System . arraycopy ( _array , index , _array , index + c . _limit , _limit - index ) ; System . arraycopy ( c . _array , 0 , _array , index , c . _limit ) ; _limit += c . _limit ; } return true ; } public void clear ( ) { _limit = 0 ; } public boolean contains ( final int o ) { boolean rval = false ; for ( int j = 0 ; ! rval && ( j < _limit ) ; j ++ ) { if ( _array [ j ] == o ) { rval = true ; } } return rval ; } public boolean containsAll ( final IntList c ) { boolean rval = true ; if ( this != c ) { for ( int j = 0 ; rval && ( j < c . _limit ) ; j ++ ) { if ( ! contains ( c . _array [ j ] ) ) { rval = false ; } } } return rval ; } public boolean equals ( final Object o ) { boolean rval = this == o ; if ( ! rval && ( o != null ) && ( o . getClass ( ) == this . getClass ( ) ) ) { IntList other = ( IntList ) o ; if ( other . _limit == _limit ) { rval = true ; for ( int j = 0 ; rval && ( j < _limit ) ; j ++ ) { rval = _array [ j ] == other . _array [ j ] ; } } } return rval ; } public int get ( final int index ) { if ( index >= _limit ) { throw new IndexOutOfBoundsException ( ) ; } return _array [ index ] ; } public int hashCode ( ) { int hash = 0 ; for ( int j = 0 ; j < _limit ; j ++ ) { hash = ( 31 * hash ) + _array [ j ] ; } return hash ; } public int indexOf ( final int o ) { int rval = 0 ; for ( ; rval < _limit ; rval ++ ) { if ( o == _array [ rval ] ) { break ; } } if ( rval == _limit ) { rval = - 1 ; } return rval ; } public boolean isEmpty ( ) { return _limit == 0 ; } public int lastIndexOf ( final int o ) { int rval = _limit - 1 ; for ( ; rval >= 0 ; rval -- ) { if ( o == _array [ rval ] ) { break ; } } return rval ; } public int remove ( final int index ) { if ( index >= _limit ) { throw new IndexOutOfBoundsException ( ) ; } int rval = _array [ index ] ; System . arraycopy ( _array , index + 1 , _array , index , _limit - index ) ; _limit -- ; return rval ; } public boolean removeValue ( final int o ) { boolean rval = false ; for ( int j = 0 ; ! rval && ( j < _limit ) ; j ++ ) { if ( o == _array [ j ] ) { if ( j + 1 < _limit ) { System . arraycopy ( _array , j + 1 , _array , j , _limit - j ) ; } _limit -- ; rval = true ; } } return rval ; } public boolean removeAll ( final IntList c ) { boolean rval = false ; for ( int j = 0 ; j < c . _limit ; j ++ ) { if ( removeValue ( c . _array [ j ] ) ) { rval = true ; } } return rval ; } public boolean retainAll ( final IntList c ) { boolean rval = false ; for ( int j = 0 ; j < _limit ; ) { if ( ! c . contains ( _array [ j ] ) ) { remove ( j ) ; rval = true ; } else { j ++ ; } } return rval ; } public int set ( final int index , final int element ) { if ( index >= _limit ) { throw new IndexOutOfBoundsException ( ) ; } int rval = _array [ index ] ; _array [ index ] = element ; return rval ; } public int size ( ) { return _limit ; } public int [ ] toArray ( ) { int [ ] rval = new int [ _limit ] ; System . arraycopy ( _array , 0 , rval , 0 , _limit ) ; return rval ; } public int [ ] toArray ( final int [ ] a ) { int [ ] rval ; if ( a . length == _limit ) { System . arraycopy ( _array , 0 , a , 0 , _limit ) ; rval = a ; } else { rval = toArray ( ) ; } return rval ; } private void growArray ( final int new_size ) { int size = ( new_size == _array . length ) ? new_size + 1 : new_size ; int [ ] new_array = new int [ size ] ; if ( fillval != 0 ) { fillArray ( fillval , new_array , _array . length ) ; } System . arraycopy ( _array , 0 , new_array , 0 , _limit ) ; _array = new_array ; } } 	1
package org . apache . poi . hssf . record ; import org . apache . poi . ddf . * ; import org . apache . poi . hssf . usermodel . * ; import org . apache . poi . hssf . model . AbstractShape ; import org . apache . poi . hssf . model . TextboxShape ; import org . apache . poi . hssf . model . DrawingManager2 ; import org . apache . poi . hssf . model . ConvertAnchor ; import org . apache . poi . hssf . model . CommentShape ; import java . util . * ; public class EscherAggregate extends AbstractEscherHolderRecord { public static final short sid = 9876 ; public static final short ST_MIN = ( short ) 0 ; public static final short ST_NOT_PRIMATIVE = ST_MIN ; public static final short ST_RECTANGLE = ( short ) 1 ; public static final short ST_ROUNDRECTANGLE = ( short ) 2 ; public static final short ST_ELLIPSE = ( short ) 3 ; public static final short ST_DIAMOND = ( short ) 4 ; public static final short ST_ISOCELESTRIANGLE = ( short ) 5 ; public static final short ST_RIGHTTRIANGLE = ( short ) 6 ; public static final short ST_PARALLELOGRAM = ( short ) 7 ; public static final short ST_TRAPEZOID = ( short ) 8 ; public static final short ST_HEXAGON = ( short ) 9 ; public static final short ST_OCTAGON = ( short ) 10 ; public static final short ST_PLUS = ( short ) 11 ; public static final short ST_STAR = ( short ) 12 ; public static final short ST_ARROW = ( short ) 13 ; public static final short ST_THICKARROW = ( short ) 14 ; public static final short ST_HOMEPLATE = ( short ) 15 ; public static final short ST_CUBE = ( short ) 16 ; public static final short ST_BALLOON = ( short ) 17 ; public static final short ST_SEAL = ( short ) 18 ; public static final short ST_ARC = ( short ) 19 ; public static final short ST_LINE = ( short ) 20 ; public static final short ST_PLAQUE = ( short ) 21 ; public static final short ST_CAN = ( short ) 22 ; public static final short ST_DONUT = ( short ) 23 ; public static final short ST_TEXTSIMPLE = ( short ) 24 ; public static final short ST_TEXTOCTAGON = ( short ) 25 ; public static final short ST_TEXTHEXAGON = ( short ) 26 ; public static final short ST_TEXTCURVE = ( short ) 27 ; public static final short ST_TEXTWAVE = ( short ) 28 ; public static final short ST_TEXTRING = ( short ) 29 ; public static final short ST_TEXTONCURVE = ( short ) 30 ; public static final short ST_TEXTONRING = ( short ) 31 ; public static final short ST_STRAIGHTCONNECTOR1 = ( short ) 32 ; public static final short ST_BENTCONNECTOR2 = ( short ) 33 ; public static final short ST_BENTCONNECTOR3 = ( short ) 34 ; public static final short ST_BENTCONNECTOR4 = ( short ) 35 ; public static final short ST_BENTCONNECTOR5 = ( short ) 36 ; public static final short ST_CURVEDCONNECTOR2 = ( short ) 37 ; public static final short ST_CURVEDCONNECTOR3 = ( short ) 38 ; public static final short ST_CURVEDCONNECTOR4 = ( short ) 39 ; public static final short ST_CURVEDCONNECTOR5 = ( short ) 40 ; public static final short ST_CALLOUT1 = ( short ) 41 ; public static final short ST_CALLOUT2 = ( short ) 42 ; public static final short ST_CALLOUT3 = ( short ) 43 ; public static final short ST_ACCENTCALLOUT1 = ( short ) 44 ; public static final short ST_ACCENTCALLOUT2 = ( short ) 45 ; public static final short ST_ACCENTCALLOUT3 = ( short ) 46 ; public static final short ST_BORDERCALLOUT1 = ( short ) 47 ; public static final short ST_BORDERCALLOUT2 = ( short ) 48 ; public static final short ST_BORDERCALLOUT3 = ( short ) 49 ; public static final short ST_ACCENTBORDERCALLOUT1 = ( short ) 50 ; public static final short ST_ACCENTBORDERCALLOUT2 = ( short ) 51 ; public static final short ST_ACCENTBORDERCALLOUT3 = ( short ) 52 ; public static final short ST_RIBBON = ( short ) 53 ; public static final short ST_RIBBON2 = ( short ) 54 ; public static final short ST_CHEVRON = ( short ) 55 ; public static final short ST_PENTAGON = ( short ) 56 ; public static final short ST_NOSMOKING = ( short ) 57 ; public static final short ST_SEAL8 = ( short ) 58 ; public static final short ST_SEAL16 = ( short ) 59 ; public static final short ST_SEAL32 = ( short ) 60 ; public static final short ST_WEDGERECTCALLOUT = ( short ) 61 ; public static final short ST_WEDGERRECTCALLOUT = ( short ) 62 ; public static final short ST_WEDGEELLIPSECALLOUT = ( short ) 63 ; public static final short ST_WAVE = ( short ) 64 ; public static final short ST_FOLDEDCORNER = ( short ) 65 ; public static final short ST_LEFTARROW = ( short ) 66 ; public static final short ST_DOWNARROW = ( short ) 67 ; public static final short ST_UPARROW = ( short ) 68 ; public static final short ST_LEFTRIGHTARROW = ( short ) 69 ; public static final short ST_UPDOWNARROW = ( short ) 70 ; public static final short ST_IRREGULARSEAL1 = ( short ) 71 ; public static final short ST_IRREGULARSEAL2 = ( short ) 72 ; public static final short ST_LIGHTNINGBOLT = ( short ) 73 ; public static final short ST_HEART = ( short ) 74 ; public static final short ST_PICTUREFRAME = ( short ) 75 ; public static final short ST_QUADARROW = ( short ) 76 ; public static final short ST_LEFTARROWCALLOUT = ( short ) 77 ; public static final short ST_RIGHTARROWCALLOUT = ( short ) 78 ; public static final short ST_UPARROWCALLOUT = ( short ) 79 ; public static final short ST_DOWNARROWCALLOUT = ( short ) 80 ; public static final short ST_LEFTRIGHTARROWCALLOUT = ( short ) 81 ; public static final short ST_UPDOWNARROWCALLOUT = ( short ) 82 ; public static final short ST_QUADARROWCALLOUT = ( short ) 83 ; public static final short ST_BEVEL = ( short ) 84 ; public static final short ST_LEFTBRACKET = ( short ) 85 ; public static final short ST_RIGHTBRACKET = ( short ) 86 ; public static final short ST_LEFTBRACE = ( short ) 87 ; public static final short ST_RIGHTBRACE = ( short ) 88 ; public static final short ST_LEFTUPARROW = ( short ) 89 ; public static final short ST_BENTUPARROW = ( short ) 90 ; public static final short ST_BENTARROW = ( short ) 91 ; public static final short ST_SEAL24 = ( short ) 92 ; public static final short ST_STRIPEDRIGHTARROW = ( short ) 93 ; public static final short ST_NOTCHEDRIGHTARROW = ( short ) 94 ; public static final short ST_BLOCKARC = ( short ) 95 ; public static final short ST_SMILEYFACE = ( short ) 96 ; public static final short ST_VERTICALSCROLL = ( short ) 97 ; public static final short ST_HORIZONTALSCROLL = ( short ) 98 ; public static final short ST_CIRCULARARROW = ( short ) 99 ; public static final short ST_NOTCHEDCIRCULARARROW = ( short ) 100 ; public static final short ST_UTURNARROW = ( short ) 101 ; public static final short ST_CURVEDRIGHTARROW = ( short ) 102 ; public static final short ST_CURVEDLEFTARROW = ( short ) 103 ; public static final short ST_CURVEDUPARROW = ( short ) 104 ; public static final short ST_CURVEDDOWNARROW = ( short ) 105 ; public static final short ST_CLOUDCALLOUT = ( short ) 106 ; public static final short ST_ELLIPSERIBBON = ( short ) 107 ; public static final short ST_ELLIPSERIBBON2 = ( short ) 108 ; public static final short ST_FLOWCHARTPROCESS = ( short ) 109 ; public static final short ST_FLOWCHARTDECISION = ( short ) 110 ; public static final short ST_FLOWCHARTINPUTOUTPUT = ( short ) 111 ; public static final short ST_FLOWCHARTPREDEFINEDPROCESS = ( short ) 112 ; public static final short ST_FLOWCHARTINTERNALSTORAGE = ( short ) 113 ; public static final short ST_FLOWCHARTDOCUMENT = ( short ) 114 ; public static final short ST_FLOWCHARTMULTIDOCUMENT = ( short ) 115 ; public static final short ST_FLOWCHARTTERMINATOR = ( short ) 116 ; public static final short ST_FLOWCHARTPREPARATION = ( short ) 117 ; public static final short ST_FLOWCHARTMANUALINPUT = ( short ) 118 ; public static final short ST_FLOWCHARTMANUALOPERATION = ( short ) 119 ; public static final short ST_FLOWCHARTCONNECTOR = ( short ) 120 ; public static final short ST_FLOWCHARTPUNCHEDCARD = ( short ) 121 ; public static final short ST_FLOWCHARTPUNCHEDTAPE = ( short ) 122 ; public static final short ST_FLOWCHARTSUMMINGJUNCTION = ( short ) 123 ; public static final short ST_FLOWCHARTOR = ( short ) 124 ; public static final short ST_FLOWCHARTCOLLATE = ( short ) 125 ; public static final short ST_FLOWCHARTSORT = ( short ) 126 ; public static final short ST_FLOWCHARTEXTRACT = ( short ) 127 ; public static final short ST_FLOWCHARTMERGE = ( short ) 128 ; public static final short ST_FLOWCHARTOFFLINESTORAGE = ( short ) 129 ; public static final short ST_FLOWCHARTONLINESTORAGE = ( short ) 130 ; public static final short ST_FLOWCHARTMAGNETICTAPE = ( short ) 131 ; public static final short ST_FLOWCHARTMAGNETICDISK = ( short ) 132 ; public static final short ST_FLOWCHARTMAGNETICDRUM = ( short ) 133 ; public static final short ST_FLOWCHARTDISPLAY = ( short ) 134 ; public static final short ST_FLOWCHARTDELAY = ( short ) 135 ; public static final short ST_TEXTPLAINTEXT = ( short ) 136 ; public static final short ST_TEXTSTOP = ( short ) 137 ; public static final short ST_TEXTTRIANGLE = ( short ) 138 ; public static final short ST_TEXTTRIANGLEINVERTED = ( short ) 139 ; public static final short ST_TEXTCHEVRON = ( short ) 140 ; public static final short ST_TEXTCHEVRONINVERTED = ( short ) 141 ; public static final short ST_TEXTRINGINSIDE = ( short ) 142 ; public static final short ST_TEXTRINGOUTSIDE = ( short ) 143 ; public static final short ST_TEXTARCHUPCURVE = ( short ) 144 ; public static final short ST_TEXTARCHDOWNCURVE = ( short ) 145 ; public static final short ST_TEXTCIRCLECURVE = ( short ) 146 ; public static final short ST_TEXTBUTTONCURVE = ( short ) 147 ; public static final short ST_TEXTARCHUPPOUR = ( short ) 148 ; public static final short ST_TEXTARCHDOWNPOUR = ( short ) 149 ; public static final short ST_TEXTCIRCLEPOUR = ( short ) 150 ; public static final short ST_TEXTBUTTONPOUR = ( short ) 151 ; public static final short ST_TEXTCURVEUP = ( short ) 152 ; public static final short ST_TEXTCURVEDOWN = ( short ) 153 ; public static final short ST_TEXTCASCADEUP = ( short ) 154 ; public static final short ST_TEXTCASCADEDOWN = ( short ) 155 ; public static final short ST_TEXTWAVE1 = ( short ) 156 ; public static final short ST_TEXTWAVE2 = ( short ) 157 ; public static final short ST_TEXTWAVE3 = ( short ) 158 ; public static final short ST_TEXTWAVE4 = ( short ) 159 ; public static final short ST_TEXTINFLATE = ( short ) 160 ; public static final short ST_TEXTDEFLATE = ( short ) 161 ; public static final short ST_TEXTINFLATEBOTTOM = ( short ) 162 ; public static final short ST_TEXTDEFLATEBOTTOM = ( short ) 163 ; public static final short ST_TEXTINFLATETOP = ( short ) 164 ; public static final short ST_TEXTDEFLATETOP = ( short ) 165 ; public static final short ST_TEXTDEFLATEINFLATE = ( short ) 166 ; public static final short ST_TEXTDEFLATEINFLATEDEFLATE = ( short ) 167 ; public static final short ST_TEXTFADERIGHT = ( short ) 168 ; public static final short ST_TEXTFADELEFT = ( short ) 169 ; public static final short ST_TEXTFADEUP = ( short ) 170 ; public static final short ST_TEXTFADEDOWN = ( short ) 171 ; public static final short ST_TEXTSLANTUP = ( short ) 172 ; public static final short ST_TEXTSLANTDOWN = ( short ) 173 ; public static final short ST_TEXTCANUP = ( short ) 174 ; public static final short ST_TEXTCANDOWN = ( short ) 175 ; public static final short ST_FLOWCHARTALTERNATEPROCESS = ( short ) 176 ; public static final short ST_FLOWCHARTOFFPAGECONNECTOR = ( short ) 177 ; public static final short ST_CALLOUT90 = ( short ) 178 ; public static final short ST_ACCENTCALLOUT90 = ( short ) 179 ; public static final short ST_BORDERCALLOUT90 = ( short ) 180 ; public static final short ST_ACCENTBORDERCALLOUT90 = ( short ) 181 ; public static final short ST_LEFTRIGHTUPARROW = ( short ) 182 ; public static final short ST_SUN = ( short ) 183 ; public static final short ST_MOON = ( short ) 184 ; public static final short ST_BRACKETPAIR = ( short ) 185 ; public static final short ST_BRACEPAIR = ( short ) 186 ; public static final short ST_SEAL4 = ( short ) 187 ; public static final short ST_DOUBLEWAVE = ( short ) 188 ; public static final short ST_ACTIONBUTTONBLANK = ( short ) 189 ; public static final short ST_ACTIONBUTTONHOME = ( short ) 190 ; public static final short ST_ACTIONBUTTONHELP = ( short ) 191 ; public static final short ST_ACTIONBUTTONINFORMATION = ( short ) 192 ; public static final short ST_ACTIONBUTTONFORWARDNEXT = ( short ) 193 ; public static final short ST_ACTIONBUTTONBACKPREVIOUS = ( short ) 194 ; public static final short ST_ACTIONBUTTONEND = ( short ) 195 ; public static final short ST_ACTIONBUTTONBEGINNING = ( short ) 196 ; public static final short ST_ACTIONBUTTONRETURN = ( short ) 197 ; public static final short ST_ACTIONBUTTONDOCUMENT = ( short ) 198 ; public static final short ST_ACTIONBUTTONSOUND = ( short ) 199 ; public static final short ST_ACTIONBUTTONMOVIE = ( short ) 200 ; public static final short ST_HOSTCONTROL = ( short ) 201 ; public static final short ST_TEXTBOX = ( short ) 202 ; public static final short ST_NIL = ( short ) 0x0FFF ; protected HSSFPatriarch patriarch ; private Map shapeToObj = new HashMap ( ) ; private DrawingManager2 drawingManager ; private short drawingGroupId ; private List tailRec = new ArrayList ( ) ; public EscherAggregate ( DrawingManager2 drawingManager ) { this . drawingManager = drawingManager ; } public short getSid ( ) { return sid ; } protected void fillFields ( byte [ ] data , short size , int offset ) { throw new IllegalStateException ( "Should not reach here" ) ; } public String toString ( ) { String nl = System . getProperty ( "line.separtor" ) ; StringBuffer result = new StringBuffer ( ) ; result . append ( '[' ) . append ( getRecordName ( ) ) . append ( ']' + nl ) ; for ( Iterator iterator = getEscherRecords ( ) . iterator ( ) ; iterator . hasNext ( ) ; ) { EscherRecord escherRecord = ( EscherRecord ) iterator . next ( ) ; result . append ( escherRecord . toString ( ) ) ; } result . append ( "[/" ) . append ( getRecordName ( ) ) . append ( ']' + nl ) ; return result . toString ( ) ; } public static EscherAggregate createAggregate ( List records , int locFirstDrawingRecord , DrawingManager2 drawingManager ) { final List shapeRecords = new ArrayList ( ) ; EscherRecordFactory recordFactory = new DefaultEscherRecordFactory ( ) { public EscherRecord createRecord ( byte [ ] data , int offset ) { EscherRecord r = super . createRecord ( data , offset ) ; if ( r . getRecordId ( ) == EscherClientDataRecord . RECORD_ID || r . getRecordId ( ) == EscherTextboxRecord . RECORD_ID ) { shapeRecords . add ( r ) ; } return r ; } } ; EscherAggregate agg = new EscherAggregate ( drawingManager ) ; int loc = locFirstDrawingRecord ; int dataSize = 0 ; while ( loc + 1 < records . size ( ) && sid ( records , loc ) == DrawingRecord . sid && isObjectRecord ( records , loc + 1 ) ) { dataSize += ( ( DrawingRecord ) records . get ( loc ) ) . getData ( ) . length ; loc += 2 ; } byte buffer [ ] = new byte [ dataSize ] ; int offset = 0 ; loc = locFirstDrawingRecord ; while ( loc + 1 < records . size ( ) && sid ( records , loc ) == DrawingRecord . sid && isObjectRecord ( records , loc + 1 ) ) { DrawingRecord drawingRecord = ( DrawingRecord ) records . get ( loc ) ; System . arraycopy ( drawingRecord . getData ( ) , 0 , buffer , offset , drawingRecord . getData ( ) . length ) ; offset += drawingRecord . getData ( ) . length ; loc += 2 ; } int pos = 0 ; while ( pos < dataSize ) { EscherRecord r = recordFactory . createRecord ( buffer , pos ) ; int bytesRead = r . fillFields ( buffer , pos , recordFactory ) ; agg . addEscherRecord ( r ) ; pos += bytesRead ; } loc = locFirstDrawingRecord ; int shapeIndex = 0 ; agg . shapeToObj = new HashMap ( ) ; while ( loc + 1 < records . size ( ) && sid ( records , loc ) == DrawingRecord . sid && isObjectRecord ( records , loc + 1 ) ) { Record objRecord = ( Record ) records . get ( loc + 1 ) ; agg . shapeToObj . put ( shapeRecords . get ( shapeIndex ++ ) , objRecord ) ; loc += 2 ; } return agg ; } public int serialize ( int offset , byte [ ] data ) { convertUserModelToRecords ( ) ; List records = getEscherRecords ( ) ; int size = getEscherRecordSize ( records ) ; byte [ ] buffer = new byte [ size ] ; final List spEndingOffsets = new ArrayList ( ) ; final List shapes = new ArrayList ( ) ; int pos = 0 ; for ( Iterator iterator = records . iterator ( ) ; iterator . hasNext ( ) ; ) { EscherRecord e = ( EscherRecord ) iterator . next ( ) ; pos += e . serialize ( pos , buffer , new EscherSerializationListener ( ) { public void beforeRecordSerialize ( int offset , short recordId , EscherRecord record ) { } public void afterRecordSerialize ( int offset , short recordId , int size , EscherRecord record ) { if ( recordId == EscherClientDataRecord . RECORD_ID || recordId == EscherTextboxRecord . RECORD_ID ) { spEndingOffsets . add ( new Integer ( offset ) ) ; shapes . add ( record ) ; } } } ) ; } shapes . add ( 0 , null ) ; spEndingOffsets . add ( 0 , null ) ; pos = offset ; for ( int i = 1 ; i < shapes . size ( ) ; i ++ ) { int endOffset = ( ( Integer ) spEndingOffsets . get ( i ) ) . intValue ( ) - 1 ; int startOffset ; if ( i == 1 ) startOffset = 0 ; else startOffset = ( ( Integer ) spEndingOffsets . get ( i - 1 ) ) . intValue ( ) ; DrawingRecord drawing = new DrawingRecord ( ) ; byte [ ] drawingData = new byte [ endOffset - startOffset + 1 ] ; System . arraycopy ( buffer , startOffset , drawingData , 0 , drawingData . length ) ; drawing . setData ( drawingData ) ; int temp = drawing . serialize ( pos , data ) ; pos += temp ; Record obj = ( Record ) shapeToObj . get ( shapes . get ( i ) ) ; temp = obj . serialize ( pos , data ) ; pos += temp ; } for ( int i = 0 ; i < tailRec . size ( ) ; i ++ ) { Record rec = ( Record ) tailRec . get ( i ) ; pos += rec . serialize ( pos , data ) ; } int bytesWritten = pos - offset ; if ( bytesWritten != getRecordSize ( ) ) throw new RecordFormatException ( bytesWritten + " bytes written but getRecordSize() reports " + getRecordSize ( ) ) ; return bytesWritten ; } private int getEscherRecordSize ( List records ) { int size = 0 ; for ( Iterator iterator = records . iterator ( ) ; iterator . hasNext ( ) ; ) size += ( ( EscherRecord ) iterator . next ( ) ) . getRecordSize ( ) ; return size ; } public int getRecordSize ( ) { convertUserModelToRecords ( ) ; List records = getEscherRecords ( ) ; int rawEscherSize = getEscherRecordSize ( records ) ; int drawingRecordSize = rawEscherSize + ( shapeToObj . size ( ) ) * 4 ; int objRecordSize = 0 ; for ( Iterator iterator = shapeToObj . values ( ) . iterator ( ) ; iterator . hasNext ( ) ; ) { Record r = ( Record ) iterator . next ( ) ; objRecordSize += r . getRecordSize ( ) ; } int tailRecordSize = 0 ; for ( Iterator iterator = tailRec . iterator ( ) ; iterator . hasNext ( ) ; ) { Record r = ( Record ) iterator . next ( ) ; tailRecordSize += r . getRecordSize ( ) ; } return drawingRecordSize + objRecordSize + tailRecordSize ; } public Object assoicateShapeToObjRecord ( EscherRecord r , Record objRecord ) { return shapeToObj . put ( r , objRecord ) ; } public HSSFPatriarch getPatriarch ( ) { return patriarch ; } public void setPatriarch ( HSSFPatriarch patriarch ) { this . patriarch = patriarch ; } public void clear ( ) { clearEscherRecords ( ) ; shapeToObj . clear ( ) ; } protected String getRecordName ( ) { return "ESCHERAGGREGATE" ; } private static boolean isObjectRecord ( List records , int loc ) { return sid ( records , loc ) == ObjRecord . sid || sid ( records , loc ) == TextObjectRecord . sid ; } private void convertUserModelToRecords ( ) { if ( patriarch != null ) { shapeToObj . clear ( ) ; tailRec . clear ( ) ; clearEscherRecords ( ) ; if ( patriarch . getChildren ( ) . size ( ) != 0 ) { convertPatriarch ( patriarch ) ; EscherContainerRecord dgContainer = ( EscherContainerRecord ) getEscherRecord ( 0 ) ; EscherContainerRecord spgrContainer = null ; for ( int i = 0 ; i < dgContainer . getChildRecords ( ) . size ( ) ; i ++ ) if ( dgContainer . getChild ( i ) . getRecordId ( ) == EscherContainerRecord . SPGR_CONTAINER ) spgrContainer = ( EscherContainerRecord ) dgContainer . getChild ( i ) ; convertShapes ( patriarch , spgrContainer , shapeToObj ) ; patriarch = null ; } } } private void convertShapes ( HSSFShapeContainer parent , EscherContainerRecord escherParent , Map shapeToObj ) { if ( escherParent == null ) throw new IllegalArgumentException ( "Parent record required" ) ; List shapes = parent . getChildren ( ) ; for ( Iterator iterator = shapes . iterator ( ) ; iterator . hasNext ( ) ; ) { HSSFShape shape = ( HSSFShape ) iterator . next ( ) ; if ( shape instanceof HSSFShapeGroup ) { convertGroup ( ( HSSFShapeGroup ) shape , escherParent , shapeToObj ) ; } else { AbstractShape shapeModel = AbstractShape . createShape ( shape , drawingManager . allocateShapeId ( drawingGroupId ) ) ; shapeToObj . put ( findClientData ( shapeModel . getSpContainer ( ) ) , shapeModel . getObjRecord ( ) ) ; if ( shapeModel instanceof TextboxShape ) { EscherRecord escherTextbox = ( ( TextboxShape ) shapeModel ) . getEscherTextbox ( ) ; shapeToObj . put ( escherTextbox , ( ( TextboxShape ) shapeModel ) . getTextObjectRecord ( ) ) ; if ( shapeModel instanceof CommentShape ) { CommentShape comment = ( CommentShape ) shapeModel ; tailRec . add ( comment . getNoteRecord ( ) ) ; } } escherParent . addChildRecord ( shapeModel . getSpContainer ( ) ) ; } } } private void convertGroup ( HSSFShapeGroup shape , EscherContainerRecord escherParent , Map shapeToObj ) { EscherContainerRecord spgrContainer = new EscherContainerRecord ( ) ; EscherContainerRecord spContainer = new EscherContainerRecord ( ) ; EscherSpgrRecord spgr = new EscherSpgrRecord ( ) ; EscherSpRecord sp = new EscherSpRecord ( ) ; EscherOptRecord opt = new EscherOptRecord ( ) ; EscherRecord anchor ; EscherClientDataRecord clientData = new EscherClientDataRecord ( ) ; spgrContainer . setRecordId ( EscherContainerRecord . SPGR_CONTAINER ) ; spgrContainer . setOptions ( ( short ) 0x000F ) ; spContainer . setRecordId ( EscherContainerRecord . SP_CONTAINER ) ; spContainer . setOptions ( ( short ) 0x000F ) ; spgr . setRecordId ( EscherSpgrRecord . RECORD_ID ) ; spgr . setOptions ( ( short ) 0x0001 ) ; spgr . setRectX1 ( shape . getX1 ( ) ) ; spgr . setRectY1 ( shape . getY1 ( ) ) ; spgr . setRectX2 ( shape . getX2 ( ) ) ; spgr . setRectY2 ( shape . getY2 ( ) ) ; sp . setRecordId ( EscherSpRecord . RECORD_ID ) ; sp . setOptions ( ( short ) 0x0002 ) ; int shapeId = drawingManager . allocateShapeId ( drawingGroupId ) ; sp . setShapeId ( shapeId ) ; if ( shape . getAnchor ( ) instanceof HSSFClientAnchor ) sp . setFlags ( EscherSpRecord . FLAG_GROUP | EscherSpRecord . FLAG_HAVEANCHOR ) ; else sp . setFlags ( EscherSpRecord . FLAG_GROUP | EscherSpRecord . FLAG_HAVEANCHOR | EscherSpRecord . FLAG_CHILD ) ; opt . setRecordId ( EscherOptRecord . RECORD_ID ) ; opt . setOptions ( ( short ) 0x0023 ) ; opt . addEscherProperty ( new EscherBoolProperty ( EscherProperties . PROTECTION__LOCKAGAINSTGROUPING , 0x00040004 ) ) ; opt . addEscherProperty ( new EscherBoolProperty ( EscherProperties . GROUPSHAPE__PRINT , 0x00080000 ) ) ; anchor = ConvertAnchor . createAnchor ( shape . getAnchor ( ) ) ; clientData . setRecordId ( EscherClientDataRecord . RECORD_ID ) ; clientData . setOptions ( ( short ) 0x0000 ) ; spgrContainer . addChildRecord ( spContainer ) ; spContainer . addChildRecord ( spgr ) ; spContainer . addChildRecord ( sp ) ; spContainer . addChildRecord ( opt ) ; spContainer . addChildRecord ( anchor ) ; spContainer . addChildRecord ( clientData ) ; ObjRecord obj = new ObjRecord ( ) ; CommonObjectDataSubRecord cmo = new CommonObjectDataSubRecord ( ) ; cmo . setObjectType ( CommonObjectDataSubRecord . OBJECT_TYPE_GROUP ) ; cmo . setObjectId ( ( short ) ( shapeId ) ) ; cmo . setLocked ( true ) ; cmo . setPrintable ( true ) ; cmo . setAutofill ( true ) ; cmo . setAutoline ( true ) ; GroupMarkerSubRecord gmo = new GroupMarkerSubRecord ( ) ; EndSubRecord end = new EndSubRecord ( ) ; obj . addSubRecord ( cmo ) ; obj . addSubRecord ( gmo ) ; obj . addSubRecord ( end ) ; shapeToObj . put ( clientData , obj ) ; escherParent . addChildRecord ( spgrContainer ) ; convertShapes ( shape , spgrContainer , shapeToObj ) ; } private EscherRecord findClientData ( EscherContainerRecord spContainer ) { for ( Iterator iterator = spContainer . getChildRecords ( ) . iterator ( ) ; iterator . hasNext ( ) ; ) { EscherRecord r = ( EscherRecord ) iterator . next ( ) ; if ( r . getRecordId ( ) == EscherClientDataRecord . RECORD_ID ) return r ; } throw new IllegalArgumentException ( "Can not find client data record" ) ; } private void convertPatriarch ( HSSFPatriarch patriarch ) { EscherContainerRecord dgContainer = new EscherContainerRecord ( ) ; EscherDgRecord dg ; EscherContainerRecord spgrContainer = new EscherContainerRecord ( ) ; EscherContainerRecord spContainer1 = new EscherContainerRecord ( ) ; EscherSpgrRecord spgr = new EscherSpgrRecord ( ) ; EscherSpRecord sp1 = new EscherSpRecord ( ) ; dgContainer . setRecordId ( EscherContainerRecord . DG_CONTAINER ) ; dgContainer . setOptions ( ( short ) 0x000F ) ; dg = drawingManager . createDgRecord ( ) ; drawingGroupId = dg . getDrawingGroupId ( ) ; spgrContainer . setRecordId ( EscherContainerRecord . SPGR_CONTAINER ) ; spgrContainer . setOptions ( ( short ) 0x000F ) ; spContainer1 . setRecordId ( EscherContainerRecord . SP_CONTAINER ) ; spContainer1 . setOptions ( ( short ) 0x000F ) ; spgr . setRecordId ( EscherSpgrRecord . RECORD_ID ) ; spgr . setOptions ( ( short ) 0x0001 ) ; spgr . setRectX1 ( patriarch . getX1 ( ) ) ; spgr . setRectY1 ( patriarch . getY1 ( ) ) ; spgr . setRectX2 ( patriarch . getX2 ( ) ) ; spgr . setRectY2 ( patriarch . getY2 ( ) ) ; sp1 . setRecordId ( EscherSpRecord . RECORD_ID ) ; sp1 . setOptions ( ( short ) 0x0002 ) ; sp1 . setShapeId ( drawingManager . allocateShapeId ( dg . getDrawingGroupId ( ) ) ) ; sp1 . setFlags ( EscherSpRecord . FLAG_GROUP | EscherSpRecord . FLAG_PATRIARCH ) ; dgContainer . addChildRecord ( dg ) ; dgContainer . addChildRecord ( spgrContainer ) ; spgrContainer . addChildRecord ( spContainer1 ) ; spContainer1 . addChildRecord ( spgr ) ; spContainer1 . addChildRecord ( sp1 ) ; addEscherRecord ( dgContainer ) ; } private static short sid ( List records , int loc ) { return ( ( Record ) records . get ( loc ) ) . getSid ( ) ; } } 	1
package org . apache . poi . ddf ; import org . apache . poi . util . LittleEndian ; import org . apache . poi . util . HexDump ; import java . io . ByteArrayOutputStream ; public class EscherBlipRecord extends EscherRecord { public static final short RECORD_ID_START = ( short ) 0xF018 ; public static final short RECORD_ID_END = ( short ) 0xF117 ; public static final String RECORD_DESCRIPTION = "msofbtBlip" ; private static final int HEADER_SIZE = 8 ; protected byte [ ] field_pictureData ; public EscherBlipRecord ( ) { } public int fillFields ( byte [ ] data , int offset , EscherRecordFactory recordFactory ) { int bytesAfterHeader = readHeader ( data , offset ) ; int pos = offset + HEADER_SIZE ; field_pictureData = new byte [ bytesAfterHeader ] ; System . arraycopy ( data , pos , field_pictureData , 0 , bytesAfterHeader ) ; return bytesAfterHeader + 8 ; } public int serialize ( int offset , byte [ ] data , EscherSerializationListener listener ) { listener . beforeRecordSerialize ( offset , getRecordId ( ) , this ) ; LittleEndian . putShort ( data , offset , getOptions ( ) ) ; LittleEndian . putShort ( data , offset + 2 , getRecordId ( ) ) ; System . arraycopy ( field_pictureData , 0 , data , offset + 4 , field_pictureData . length ) ; listener . afterRecordSerialize ( offset + 4 + field_pictureData . length , getRecordId ( ) , field_pictureData . length + 4 , this ) ; return field_pictureData . length + 4 ; } public int getRecordSize ( ) { return field_pictureData . length + 4 ; } public String getRecordName ( ) { return "Blip" ; } public String toString ( ) { String nl = System . getProperty ( "line.separator" ) ; String extraData ; ByteArrayOutputStream b = new ByteArrayOutputStream ( ) ; try { HexDump . dump ( this . field_pictureData , 0 , b , 0 ) ; extraData = b . toString ( ) ; } catch ( Exception e ) { extraData = e . toString ( ) ; } return getClass ( ) . getName ( ) + ":" + nl + "  RecordId: 0x" + HexDump . toHex ( getRecordId ( ) ) + nl + "  Options: 0x" + HexDump . toHex ( getOptions ( ) ) + nl + "  Extra Data:" + nl + extraData ; } } 	1
package org . apache . poi . hssf . record ; import org . apache . poi . util . LittleEndian ; public class HideObjRecord extends Record { public final static short sid = 0x8d ; public final static short HIDE_ALL = 2 ; public final static short SHOW_PLACEHOLDERS = 1 ; public final static short SHOW_ALL = 0 ; private short field_1_hide_obj ; public HideObjRecord ( ) { } public HideObjRecord ( RecordInputStream in ) { super ( in ) ; } protected void validateSid ( short id ) { if ( id != sid ) { throw new RecordFormatException ( "NOT A HIDEOBJ RECORD" ) ; } } protected void fillFields ( RecordInputStream in ) { field_1_hide_obj = in . readShort ( ) ; } public void setHideObj ( short hide ) { field_1_hide_obj = hide ; } public short getHideObj ( ) { return field_1_hide_obj ; } public String toString ( ) { StringBuffer buffer = new StringBuffer ( ) ; buffer . append ( "[HIDEOBJ]\n" ) ; buffer . append ( "    .hideobj         = " ) . append ( Integer . toHexString ( getHideObj ( ) ) ) . append ( "\n" ) ; buffer . append ( "[/HIDEOBJ]\n" ) ; return buffer . toString ( ) ; } public int serialize ( int offset , byte [ ] data ) { LittleEndian . putShort ( data , 0 + offset , sid ) ; LittleEndian . putShort ( data , 2 + offset , ( ( short ) 0x02 ) ) ; LittleEndian . putShort ( data , 4 + offset , getHideObj ( ) ) ; return getRecordSize ( ) ; } public int getRecordSize ( ) { return 6 ; } public short getSid ( ) { return sid ; } } 	1
package org . apache . poi . hssf . record ; import org . apache . poi . util . LittleEndian ; public class DefaultRowHeightRecord extends Record { public final static short sid = 0x225 ; private short field_1_option_flags ; private short field_2_row_height ; public DefaultRowHeightRecord ( ) { } public DefaultRowHeightRecord ( RecordInputStream in ) { super ( in ) ; } protected void validateSid ( short id ) { if ( id != sid ) { throw new RecordFormatException ( "NOT A DefaultRowHeight RECORD" ) ; } } protected void fillFields ( RecordInputStream in ) { field_1_option_flags = in . readShort ( ) ; field_2_row_height = in . readShort ( ) ; } public void setOptionFlags ( short flags ) { field_1_option_flags = flags ; } public void setRowHeight ( short height ) { field_2_row_height = height ; } public short getOptionFlags ( ) { return field_1_option_flags ; } public short getRowHeight ( ) { return field_2_row_height ; } public String toString ( ) { StringBuffer buffer = new StringBuffer ( ) ; buffer . append ( "[DEFAULTROWHEIGHT]\n" ) ; buffer . append ( "    .optionflags    = " ) . append ( Integer . toHexString ( getOptionFlags ( ) ) ) . append ( "\n" ) ; buffer . append ( "    .rowheight      = " ) . append ( Integer . toHexString ( getRowHeight ( ) ) ) . append ( "\n" ) ; buffer . append ( "[/DEFAULTROWHEIGHT]\n" ) ; return buffer . toString ( ) ; } public int serialize ( int offset , byte [ ] data ) { LittleEndian . putShort ( data , 0 + offset , sid ) ; LittleEndian . putShort ( data , 2 + offset , ( short ) 0x4 ) ; LittleEndian . putShort ( data , 4 + offset , getOptionFlags ( ) ) ; LittleEndian . putShort ( data , 6 + offset , getRowHeight ( ) ) ; return getRecordSize ( ) ; } public int getRecordSize ( ) { return 8 ; } public short getSid ( ) { return sid ; } public Object clone ( ) { DefaultRowHeightRecord rec = new DefaultRowHeightRecord ( ) ; rec . field_1_option_flags = field_1_option_flags ; rec . field_2_row_height = field_2_row_height ; return rec ; } } 	1
package org . apache . poi . poifs . filesystem ; import org . apache . poi . poifs . property . Property ; public abstract class EntryNode implements Entry { private Property _property ; private DirectoryNode _parent ; protected EntryNode ( final Property property , final DirectoryNode parent ) { _property = property ; _parent = parent ; } protected Property getProperty ( ) { return _property ; } protected boolean isRoot ( ) { return ( _parent == null ) ; } protected abstract boolean isDeleteOK ( ) ; public String getName ( ) { return _property . getName ( ) ; } public boolean isDirectoryEntry ( ) { return false ; } public boolean isDocumentEntry ( ) { return false ; } public DirectoryEntry getParent ( ) { return _parent ; } public boolean delete ( ) { boolean rval = false ; if ( ( ! isRoot ( ) ) && isDeleteOK ( ) ) { rval = _parent . deleteEntry ( this ) ; } return rval ; } public boolean renameTo ( final String newName ) { boolean rval = false ; if ( ! isRoot ( ) ) { rval = _parent . changeName ( getName ( ) , newName ) ; } return rval ; } } 	0
package org . apache . poi . hssf . record . formula ; import org . apache . poi . hssf . model . Workbook ; import org . apache . poi . hssf . record . RecordInputStream ; public class RangePtg extends OperationPtg { public final static byte sid = 0x11 ; public RangePtg ( ) { } public RangePtg ( RecordInputStream in ) { } public int getSize ( ) { return 1 ; } public void writeBytes ( byte [ ] array , int offset ) { array [ offset + 0 ] = sid ; } public Object clone ( ) { return new RangePtg ( ) ; } public int getType ( ) { return TYPE_BINARY ; } public String toFormulaString ( Workbook book ) { return ":" ; } public String toFormulaString ( String [ ] operands ) { StringBuffer buffer = new StringBuffer ( ) ; buffer . append ( operands [ 0 ] ) ; buffer . append ( ":" ) ; buffer . append ( operands [ 1 ] ) ; return buffer . toString ( ) ; } public int getNumberOfOperands ( ) { return 2 ; } } 	0
package org . apache . poi . util ; import org . apache . poi . util . LittleEndian . BufferUnderrunException ; import java . io . * ; public interface FixedField { public void readFromBytes ( byte [ ] data ) throws ArrayIndexOutOfBoundsException ; public void readFromStream ( InputStream stream ) throws IOException , BufferUnderrunException ; public void writeToBytes ( byte [ ] data ) throws ArrayIndexOutOfBoundsException ; public String toString ( ) ; } 	0
package org . apache . poi . hssf . record ; import org . apache . poi . util . LittleEndian ; public class ProtectRecord extends Record { public final static short sid = 0x12 ; private short field_1_protect ; public ProtectRecord ( ) { } public ProtectRecord ( RecordInputStream in ) { super ( in ) ; } protected void validateSid ( short id ) { if ( id != sid ) { throw new RecordFormatException ( "NOT A PROTECT RECORD" ) ; } } protected void fillFields ( RecordInputStream in ) { field_1_protect = in . readShort ( ) ; } public void setProtect ( boolean protect ) { if ( protect ) { field_1_protect = 1 ; } else { field_1_protect = 0 ; } } public boolean getProtect ( ) { return ( field_1_protect == 1 ) ; } public String toString ( ) { StringBuffer buffer = new StringBuffer ( ) ; buffer . append ( "[PROTECT]\n" ) ; buffer . append ( "    .protect         = " ) . append ( getProtect ( ) ) . append ( "\n" ) ; buffer . append ( "[/PROTECT]\n" ) ; return buffer . toString ( ) ; } public int serialize ( int offset , byte [ ] data ) { LittleEndian . putShort ( data , 0 + offset , sid ) ; LittleEndian . putShort ( data , 2 + offset , ( ( short ) 0x02 ) ) ; LittleEndian . putShort ( data , 4 + offset , field_1_protect ) ; return getRecordSize ( ) ; } public int getRecordSize ( ) { return 6 ; } public short getSid ( ) { return sid ; } public Object clone ( ) { ProtectRecord rec = new ProtectRecord ( ) ; rec . field_1_protect = field_1_protect ; return rec ; } } 	1
package org . apache . poi . hssf . record ; abstract public class SubRecord extends Record { public SubRecord ( ) { } public SubRecord ( RecordInputStream in ) { super ( in ) ; } public static Record createSubRecord ( RecordInputStream in ) { Record r = null ; switch ( in . getSid ( ) ) { case CommonObjectDataSubRecord . sid : r = new CommonObjectDataSubRecord ( in ) ; break ; case GroupMarkerSubRecord . sid : r = new GroupMarkerSubRecord ( in ) ; break ; case EndSubRecord . sid : r = new EndSubRecord ( in ) ; break ; case NoteStructureSubRecord . sid : r = new NoteStructureSubRecord ( in ) ; break ; default : r = new UnknownRecord ( in ) ; } return r ; } } 	1
package org . apache . poi . hssf . record ; import org . apache . poi . util . * ; public class AxisOptionsRecord extends Record { public final static short sid = 0x1062 ; private short field_1_minimumCategory ; private short field_2_maximumCategory ; private short field_3_majorUnitValue ; private short field_4_majorUnit ; private short field_5_minorUnitValue ; private short field_6_minorUnit ; private short field_7_baseUnit ; private short field_8_crossingPoint ; private short field_9_options ; private BitField defaultMinimum = BitFieldFactory . getInstance ( 0x1 ) ; private BitField defaultMaximum = BitFieldFactory . getInstance ( 0x2 ) ; private BitField defaultMajor = BitFieldFactory . getInstance ( 0x4 ) ; private BitField defaultMinorUnit = BitFieldFactory . getInstance ( 0x8 ) ; private BitField isDate = BitFieldFactory . getInstance ( 0x10 ) ; private BitField defaultBase = BitFieldFactory . getInstance ( 0x20 ) ; private BitField defaultCross = BitFieldFactory . getInstance ( 0x40 ) ; private BitField defaultDateSettings = BitFieldFactory . getInstance ( 0x80 ) ; public AxisOptionsRecord ( ) { } public AxisOptionsRecord ( RecordInputStream in ) { super ( in ) ; } protected void validateSid ( short id ) { if ( id != sid ) { throw new RecordFormatException ( "Not a AxisOptions record" ) ; } } protected void fillFields ( RecordInputStream in ) { field_1_minimumCategory = in . readShort ( ) ; field_2_maximumCategory = in . readShort ( ) ; field_3_majorUnitValue = in . readShort ( ) ; field_4_majorUnit = in . readShort ( ) ; field_5_minorUnitValue = in . readShort ( ) ; field_6_minorUnit = in . readShort ( ) ; field_7_baseUnit = in . readShort ( ) ; field_8_crossingPoint = in . readShort ( ) ; field_9_options = in . readShort ( ) ; } public String toString ( ) { StringBuffer buffer = new StringBuffer ( ) ; buffer . append ( "[AXCEXT]\n" ) ; buffer . append ( "    .minimumCategory      = " ) . append ( "0x" ) . append ( HexDump . toHex ( getMinimumCategory ( ) ) ) . append ( " (" ) . append ( getMinimumCategory ( ) ) . append ( " )" ) ; buffer . append ( System . getProperty ( "line.separator" ) ) ; buffer . append ( "    .maximumCategory      = " ) . append ( "0x" ) . append ( HexDump . toHex ( getMaximumCategory ( ) ) ) . append ( " (" ) . append ( getMaximumCategory ( ) ) . append ( " )" ) ; buffer . append ( System . getProperty ( "line.separator" ) ) ; buffer . append ( "    .majorUnitValue       = " ) . append ( "0x" ) . append ( HexDump . toHex ( getMajorUnitValue ( ) ) ) . append ( " (" ) . append ( getMajorUnitValue ( ) ) . append ( " )" ) ; buffer . append ( System . getProperty ( "line.separator" ) ) ; buffer . append ( "    .majorUnit            = " ) . append ( "0x" ) . append ( HexDump . toHex ( getMajorUnit ( ) ) ) . append ( " (" ) . append ( getMajorUnit ( ) ) . append ( " )" ) ; buffer . append ( System . getProperty ( "line.separator" ) ) ; buffer . append ( "    .minorUnitValue       = " ) . append ( "0x" ) . append ( HexDump . toHex ( getMinorUnitValue ( ) ) ) . append ( " (" ) . append ( getMinorUnitValue ( ) ) . append ( " )" ) ; buffer . append ( System . getProperty ( "line.separator" ) ) ; buffer . append ( "    .minorUnit            = " ) . append ( "0x" ) . append ( HexDump . toHex ( getMinorUnit ( ) ) ) . append ( " (" ) . append ( getMinorUnit ( ) ) . append ( " )" ) ; buffer . append ( System . getProperty ( "line.separator" ) ) ; buffer . append ( "    .baseUnit             = " ) . append ( "0x" ) . append ( HexDump . toHex ( getBaseUnit ( ) ) ) . append ( " (" ) . append ( getBaseUnit ( ) ) . append ( " )" ) ; buffer . append ( System . getProperty ( "line.separator" ) ) ; buffer . append ( "    .crossingPoint        = " ) . append ( "0x" ) . append ( HexDump . toHex ( getCrossingPoint ( ) ) ) . append ( " (" ) . append ( getCrossingPoint ( ) ) . append ( " )" ) ; buffer . append ( System . getProperty ( "line.separator" ) ) ; buffer . append ( "    .options              = " ) . append ( "0x" ) . append ( HexDump . toHex ( getOptions ( ) ) ) . append ( " (" ) . append ( getOptions ( ) ) . append ( " )" ) ; buffer . append ( System . getProperty ( "line.separator" ) ) ; buffer . append ( "         .defaultMinimum           = " ) . append ( isDefaultMinimum ( ) ) . append ( '\n' ) ; buffer . append ( "         .defaultMaximum           = " ) . append ( isDefaultMaximum ( ) ) . append ( '\n' ) ; buffer . append ( "         .defaultMajor             = " ) . append ( isDefaultMajor ( ) ) . append ( '\n' ) ; buffer . append ( "         .defaultMinorUnit         = " ) . append ( isDefaultMinorUnit ( ) ) . append ( '\n' ) ; buffer . append ( "         .isDate                   = " ) . append ( isIsDate ( ) ) . append ( '\n' ) ; buffer . append ( "         .defaultBase              = " ) . append ( isDefaultBase ( ) ) . append ( '\n' ) ; buffer . append ( "         .defaultCross             = " ) . append ( isDefaultCross ( ) ) . append ( '\n' ) ; buffer . append ( "         .defaultDateSettings      = " ) . append ( isDefaultDateSettings ( ) ) . append ( '\n' ) ; buffer . append ( "[/AXCEXT]\n" ) ; return buffer . toString ( ) ; } public int serialize ( int offset , byte [ ] data ) { int pos = 0 ; LittleEndian . putShort ( data , 0 + offset , sid ) ; LittleEndian . putShort ( data , 2 + offset , ( short ) ( getRecordSize ( ) - 4 ) ) ; LittleEndian . putShort ( data , 4 + offset + pos , field_1_minimumCategory ) ; LittleEndian . putShort ( data , 6 + offset + pos , field_2_maximumCategory ) ; LittleEndian . putShort ( data , 8 + offset + pos , field_3_majorUnitValue ) ; LittleEndian . putShort ( data , 10 + offset + pos , field_4_majorUnit ) ; LittleEndian . putShort ( data , 12 + offset + pos , field_5_minorUnitValue ) ; LittleEndian . putShort ( data , 14 + offset + pos , field_6_minorUnit ) ; LittleEndian . putShort ( data , 16 + offset + pos , field_7_baseUnit ) ; LittleEndian . putShort ( data , 18 + offset + pos , field_8_crossingPoint ) ; LittleEndian . putShort ( data , 20 + offset + pos , field_9_options ) ; return getRecordSize ( ) ; } public int getRecordSize ( ) { return 4 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 ; } public short getSid ( ) { return sid ; } public Object clone ( ) { AxisOptionsRecord rec = new AxisOptionsRecord ( ) ; rec . field_1_minimumCategory = field_1_minimumCategory ; rec . field_2_maximumCategory = field_2_maximumCategory ; rec . field_3_majorUnitValue = field_3_majorUnitValue ; rec . field_4_majorUnit = field_4_majorUnit ; rec . field_5_minorUnitValue = field_5_minorUnitValue ; rec . field_6_minorUnit = field_6_minorUnit ; rec . field_7_baseUnit = field_7_baseUnit ; rec . field_8_crossingPoint = field_8_crossingPoint ; rec . field_9_options = field_9_options ; return rec ; } public short getMinimumCategory ( ) { return field_1_minimumCategory ; } public void setMinimumCategory ( short field_1_minimumCategory ) { this . field_1_minimumCategory = field_1_minimumCategory ; } public short getMaximumCategory ( ) { return field_2_maximumCategory ; } public void setMaximumCategory ( short field_2_maximumCategory ) { this . field_2_maximumCategory = field_2_maximumCategory ; } public short getMajorUnitValue ( ) { return field_3_majorUnitValue ; } public void setMajorUnitValue ( short field_3_majorUnitValue ) { this . field_3_majorUnitValue = field_3_majorUnitValue ; } public short getMajorUnit ( ) { return field_4_majorUnit ; } public void setMajorUnit ( short field_4_majorUnit ) { this . field_4_majorUnit = field_4_majorUnit ; } public short getMinorUnitValue ( ) { return field_5_minorUnitValue ; } public void setMinorUnitValue ( short field_5_minorUnitValue ) { this . field_5_minorUnitValue = field_5_minorUnitValue ; } public short getMinorUnit ( ) { return field_6_minorUnit ; } public void setMinorUnit ( short field_6_minorUnit ) { this . field_6_minorUnit = field_6_minorUnit ; } public short getBaseUnit ( ) { return field_7_baseUnit ; } public void setBaseUnit ( short field_7_baseUnit ) { this . field_7_baseUnit = field_7_baseUnit ; } public short getCrossingPoint ( ) { return field_8_crossingPoint ; } public void setCrossingPoint ( short field_8_crossingPoint ) { this . field_8_crossingPoint = field_8_crossingPoint ; } public short getOptions ( ) { return field_9_options ; } public void setOptions ( short field_9_options ) { this . field_9_options = field_9_options ; } public void setDefaultMinimum ( boolean value ) { field_9_options = defaultMinimum . setShortBoolean ( field_9_options , value ) ; } public boolean isDefaultMinimum ( ) { return defaultMinimum . isSet ( field_9_options ) ; } public void setDefaultMaximum ( boolean value ) { field_9_options = defaultMaximum . setShortBoolean ( field_9_options , value ) ; } public boolean isDefaultMaximum ( ) { return defaultMaximum . isSet ( field_9_options ) ; } public void setDefaultMajor ( boolean value ) { field_9_options = defaultMajor . setShortBoolean ( field_9_options , value ) ; } public boolean isDefaultMajor ( ) { return defaultMajor . isSet ( field_9_options ) ; } public void setDefaultMinorUnit ( boolean value ) { field_9_options = defaultMinorUnit . setShortBoolean ( field_9_options , value ) ; } public boolean isDefaultMinorUnit ( ) { return defaultMinorUnit . isSet ( field_9_options ) ; } public void setIsDate ( boolean value ) { field_9_options = isDate . setShortBoolean ( field_9_options , value ) ; } public boolean isIsDate ( ) { return isDate . isSet ( field_9_options ) ; } public void setDefaultBase ( boolean value ) { field_9_options = defaultBase . setShortBoolean ( field_9_options , value ) ; } public boolean isDefaultBase ( ) { return defaultBase . isSet ( field_9_options ) ; } public void setDefaultCross ( boolean value ) { field_9_options = defaultCross . setShortBoolean ( field_9_options , value ) ; } public boolean isDefaultCross ( ) { return defaultCross . isSet ( field_9_options ) ; } public void setDefaultDateSettings ( boolean value ) { field_9_options = defaultDateSettings . setShortBoolean ( field_9_options , value ) ; } public boolean isDefaultDateSettings ( ) { return defaultDateSettings . isSet ( field_9_options ) ; } } 	1
package org . apache . poi . poifs . storage ; import java . io . * ; import java . util . * ; class BlockListImpl implements BlockList { private ListManagedBlock [ ] _blocks ; private BlockAllocationTableReader _bat ; protected BlockListImpl ( ) { _blocks = new ListManagedBlock [ 0 ] ; _bat = null ; } protected void setBlocks ( final ListManagedBlock [ ] blocks ) { _blocks = blocks ; } public void zap ( final int index ) { if ( ( index >= 0 ) && ( index < _blocks . length ) ) { _blocks [ index ] = null ; } } public ListManagedBlock remove ( final int index ) throws IOException { ListManagedBlock result = null ; try { result = _blocks [ index ] ; if ( result == null ) { throw new IOException ( "block[ " + index + " ] already removed" ) ; } _blocks [ index ] = null ; } catch ( ArrayIndexOutOfBoundsException ignored ) { throw new IOException ( "Cannot remove block[ " + index + " ]; out of range" ) ; } return result ; } public ListManagedBlock [ ] fetchBlocks ( final int startBlock ) throws IOException { if ( _bat == null ) { throw new IOException ( "Improperly initialized list: no block allocation table provided" ) ; } return _bat . fetchBlocks ( startBlock , this ) ; } public void setBAT ( final BlockAllocationTableReader bat ) throws IOException { if ( _bat != null ) { throw new IOException ( "Attempt to replace existing BlockAllocationTable" ) ; } _bat = bat ; } } 	1
package org . apache . poi . hpsf . wellknown ; import java . util . Collections ; import java . util . HashMap ; import java . util . Map ; public class PropertyIDMap extends HashMap { public static final int PID_TITLE = 2 ; public static final int PID_SUBJECT = 3 ; public static final int PID_AUTHOR = 4 ; public static final int PID_KEYWORDS = 5 ; public static final int PID_COMMENTS = 6 ; public static final int PID_TEMPLATE = 7 ; public static final int PID_LASTAUTHOR = 8 ; public static final int PID_REVNUMBER = 9 ; public static final int PID_EDITTIME = 10 ; public static final int PID_LASTPRINTED = 11 ; public static final int PID_CREATE_DTM = 12 ; public static final int PID_LASTSAVE_DTM = 13 ; public static final int PID_PAGECOUNT = 14 ; public static final int PID_WORDCOUNT = 15 ; public static final int PID_CHARCOUNT = 16 ; public static final int PID_THUMBNAIL = 17 ; public static final int PID_APPNAME = 18 ; public static final int PID_SECURITY = 19 ; public static final int PID_DICTIONARY = 0 ; public static final int PID_CODEPAGE = 1 ; public static final int PID_CATEGORY = 2 ; public static final int PID_PRESFORMAT = 3 ; public static final int PID_BYTECOUNT = 4 ; public static final int PID_LINECOUNT = 5 ; public static final int PID_PARCOUNT = 6 ; public static final int PID_SLIDECOUNT = 7 ; public static final int PID_NOTECOUNT = 8 ; public static final int PID_HIDDENCOUNT = 9 ; public static final int PID_MMCLIPCOUNT = 10 ; public static final int PID_SCALE = 11 ; public static final int PID_HEADINGPAIR = 12 ; public static final int PID_DOCPARTS = 13 ; public static final int PID_MANAGER = 14 ; public static final int PID_COMPANY = 15 ; public static final int PID_LINKSDIRTY = 16 ; public static final int PID_MAX = PID_LINKSDIRTY ; private static PropertyIDMap summaryInformationProperties ; private static PropertyIDMap documentSummaryInformationProperties ; public PropertyIDMap ( final int initialCapacity , final float loadFactor ) { super ( initialCapacity , loadFactor ) ; } public PropertyIDMap ( final Map map ) { super ( map ) ; } public Object put ( final long id , final String idString ) { return put ( new Long ( id ) , idString ) ; } public Object get ( final long id ) { return get ( new Long ( id ) ) ; } public static PropertyIDMap getSummaryInformationProperties ( ) { if ( summaryInformationProperties == null ) { PropertyIDMap m = new PropertyIDMap ( 18 , ( float ) 1.0 ) ; m . put ( PID_TITLE , "PID_TITLE" ) ; m . put ( PID_SUBJECT , "PID_SUBJECT" ) ; m . put ( PID_AUTHOR , "PID_AUTHOR" ) ; m . put ( PID_KEYWORDS , "PID_KEYWORDS" ) ; m . put ( PID_COMMENTS , "PID_COMMENTS" ) ; m . put ( PID_TEMPLATE , "PID_TEMPLATE" ) ; m . put ( PID_LASTAUTHOR , "PID_LASTAUTHOR" ) ; m . put ( PID_REVNUMBER , "PID_REVNUMBER" ) ; m . put ( PID_EDITTIME , "PID_EDITTIME" ) ; m . put ( PID_LASTPRINTED , "PID_LASTPRINTED" ) ; m . put ( PID_CREATE_DTM , "PID_CREATE_DTM" ) ; m . put ( PID_LASTSAVE_DTM , "PID_LASTSAVE_DTM" ) ; m . put ( PID_PAGECOUNT , "PID_PAGECOUNT" ) ; m . put ( PID_WORDCOUNT , "PID_WORDCOUNT" ) ; m . put ( PID_CHARCOUNT , "PID_CHARCOUNT" ) ; m . put ( PID_THUMBNAIL , "PID_THUMBNAIL" ) ; m . put ( PID_APPNAME , "PID_APPNAME" ) ; m . put ( PID_SECURITY , "PID_SECURITY" ) ; summaryInformationProperties = new PropertyIDMap ( Collections . unmodifiableMap ( m ) ) ; } return summaryInformationProperties ; } public static PropertyIDMap getDocumentSummaryInformationProperties ( ) { if ( documentSummaryInformationProperties == null ) { PropertyIDMap m = new PropertyIDMap ( 17 , ( float ) 1.0 ) ; m . put ( PID_DICTIONARY , "PID_DICTIONARY" ) ; m . put ( PID_CODEPAGE , "PID_CODEPAGE" ) ; m . put ( PID_CATEGORY , "PID_CATEGORY" ) ; m . put ( PID_PRESFORMAT , "PID_PRESFORMAT" ) ; m . put ( PID_BYTECOUNT , "PID_BYTECOUNT" ) ; m . put ( PID_LINECOUNT , "PID_LINECOUNT" ) ; m . put ( PID_PARCOUNT , "PID_PARCOUNT" ) ; m . put ( PID_SLIDECOUNT , "PID_SLIDECOUNT" ) ; m . put ( PID_NOTECOUNT , "PID_NOTECOUNT" ) ; m . put ( PID_HIDDENCOUNT , "PID_HIDDENCOUNT" ) ; m . put ( PID_MMCLIPCOUNT , "PID_MMCLIPCOUNT" ) ; m . put ( PID_SCALE , "PID_SCALE" ) ; m . put ( PID_HEADINGPAIR , "PID_HEADINGPAIR" ) ; m . put ( PID_DOCPARTS , "PID_DOCPARTS" ) ; m . put ( PID_MANAGER , "PID_MANAGER" ) ; m . put ( PID_COMPANY , "PID_COMPANY" ) ; m . put ( PID_LINKSDIRTY , "PID_LINKSDIRTY" ) ; documentSummaryInformationProperties = new PropertyIDMap ( Collections . unmodifiableMap ( m ) ) ; } return documentSummaryInformationProperties ; } public static void main ( final String [ ] args ) { PropertyIDMap s1 = getSummaryInformationProperties ( ) ; PropertyIDMap s2 = getDocumentSummaryInformationProperties ( ) ; System . out . println ( "s1: " + s1 ) ; System . out . println ( "s2: " + s2 ) ; } } 	0
package org . apache . poi . hssf . record . formula ; import org . apache . poi . util . LittleEndian ; import org . apache . poi . util . BitField ; import org . apache . poi . util . BitFieldFactory ; import org . apache . poi . hssf . util . CellReference ; import org . apache . poi . hssf . model . Workbook ; import org . apache . poi . hssf . record . RecordInputStream ; public class ReferencePtg extends Ptg { private final static int SIZE = 5 ; public final static byte sid = 0x24 ; private short field_1_row ; private short field_2_col ; private BitField rowRelative = BitFieldFactory . getInstance ( 0x8000 ) ; private BitField colRelative = BitFieldFactory . getInstance ( 0x4000 ) ; private BitField column = BitFieldFactory . getInstance ( 0x3FFF ) ; protected ReferencePtg ( ) { } public ReferencePtg ( String cellref ) { CellReference c = new CellReference ( cellref ) ; setRow ( ( short ) c . getRow ( ) ) ; setColumn ( ( short ) c . getCol ( ) ) ; setColRelative ( ! c . isColAbsolute ( ) ) ; setRowRelative ( ! c . isRowAbsolute ( ) ) ; } public ReferencePtg ( short row , short column , boolean isRowRelative , boolean isColumnRelative ) { setRow ( row ) ; setColumn ( column ) ; setRowRelative ( isRowRelative ) ; setColRelative ( isColumnRelative ) ; } public ReferencePtg ( RecordInputStream in ) { field_1_row = in . readShort ( ) ; field_2_col = in . readShort ( ) ; } public String getRefPtgName ( ) { return "ReferencePtg" ; } public String toString ( ) { StringBuffer buffer = new StringBuffer ( "[" ) ; buffer . append ( getRefPtgName ( ) ) ; buffer . append ( "]\n" ) ; buffer . append ( "row = " ) . append ( getRow ( ) ) . append ( "\n" ) ; buffer . append ( "col = " ) . append ( getColumn ( ) ) . append ( "\n" ) ; buffer . append ( "rowrelative = " ) . append ( isRowRelative ( ) ) . append ( "\n" ) ; buffer . append ( "colrelative = " ) . append ( isColRelative ( ) ) . append ( "\n" ) ; return buffer . toString ( ) ; } public void writeBytes ( byte [ ] array , int offset ) { array [ offset ] = ( byte ) ( sid + ptgClass ) ; LittleEndian . putShort ( array , offset + 1 , field_1_row ) ; LittleEndian . putShort ( array , offset + 3 , field_2_col ) ; } public void setRow ( short row ) { field_1_row = row ; } public short getRow ( ) { return field_1_row ; } public boolean isRowRelative ( ) { return rowRelative . isSet ( field_2_col ) ; } public void setRowRelative ( boolean rel ) { field_2_col = rowRelative . setShortBoolean ( field_2_col , rel ) ; } public boolean isColRelative ( ) { return colRelative . isSet ( field_2_col ) ; } public void setColRelative ( boolean rel ) { field_2_col = colRelative . setShortBoolean ( field_2_col , rel ) ; } public void setColumnRaw ( short col ) { field_2_col = col ; } public short getColumnRaw ( ) { return field_2_col ; } public void setColumn ( short col ) { field_2_col = column . setShortValue ( field_2_col , col ) ; } public short getColumn ( ) { return column . getShortValue ( field_2_col ) ; } public int getSize ( ) { return SIZE ; } public String toFormulaString ( Workbook book ) { return ( new CellReference ( getRow ( ) , getColumn ( ) , ! isRowRelative ( ) , ! isColRelative ( ) ) ) . toString ( ) ; } public byte getDefaultOperandClass ( ) { return Ptg . CLASS_REF ; } public Object clone ( ) { ReferencePtg ptg = new ReferencePtg ( ) ; ptg . field_1_row = field_1_row ; ptg . field_2_col = field_2_col ; ptg . setClass ( ptgClass ) ; return ptg ; } } 	1
package org . apache . poi . hssf . record ; import org . apache . poi . util . LittleEndian ; public class TabIdRecord extends Record { public final static short sid = 0x13d ; public short [ ] field_1_tabids ; public TabIdRecord ( ) { } public TabIdRecord ( RecordInputStream in ) { super ( in ) ; } protected void validateSid ( short id ) { if ( id != sid ) { throw new RecordFormatException ( "NOT A TABID RECORD" ) ; } } protected void fillFields ( RecordInputStream in ) { field_1_tabids = new short [ in . remaining ( ) / 2 ] ; for ( int k = 0 ; k < field_1_tabids . length ; k ++ ) { field_1_tabids [ k ] = in . readShort ( ) ; } } public void setTabIdArray ( short [ ] array ) { field_1_tabids = array ; } public short [ ] getTabIdArray ( ) { return field_1_tabids ; } public String toString ( ) { StringBuffer buffer = new StringBuffer ( ) ; buffer . append ( "[TABID]\n" ) ; buffer . append ( "    .elements        = " ) . append ( field_1_tabids . length ) . append ( "\n" ) ; for ( int k = 0 ; k < field_1_tabids . length ; k ++ ) { buffer . append ( "    .element_" + k + "       = " ) . append ( field_1_tabids [ k ] ) . append ( "\n" ) ; } buffer . append ( "[/TABID]\n" ) ; return buffer . toString ( ) ; } public int serialize ( int offset , byte [ ] data ) { short [ ] tabids = getTabIdArray ( ) ; short length = ( short ) ( tabids . length * 2 ) ; int byteoffset = 4 ; LittleEndian . putShort ( data , 0 + offset , sid ) ; LittleEndian . putShort ( data , 2 + offset , ( ( short ) length ) ) ; for ( int k = 0 ; k < ( length / 2 ) ; k ++ ) { LittleEndian . putShort ( data , byteoffset + offset , tabids [ k ] ) ; byteoffset += 2 ; } return getRecordSize ( ) ; } public int getRecordSize ( ) { return 4 + ( getTabIdArray ( ) . length * 2 ) ; } public short getSid ( ) { return sid ; } } 	1
package org . apache . poi . hpsf ; public abstract class VariantTypeException extends HPSFException { private Object value ; private long variantType ; public VariantTypeException ( final long variantType , final Object value , final String msg ) { super ( msg ) ; this . variantType = variantType ; this . value = value ; } public long getVariantType ( ) { return variantType ; } public Object getValue ( ) { return value ; } } 	0
