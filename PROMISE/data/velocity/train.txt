package org . apache . velocity . runtime . parser . node ; import java . io . IOException ; import java . io . Writer ; import org . apache . velocity . context . InternalContextAdapter ; import org . apache . velocity . exception . MethodInvocationException ; import org . apache . velocity . exception . ParseErrorException ; import org . apache . velocity . exception . ResourceNotFoundException ; import org . apache . velocity . runtime . parser . Parser ; import org . apache . velocity . runtime . parser . ParserVisitor ; public class ASTIfStatement extends SimpleNode { public ASTIfStatement ( int id ) { super ( id ) ; } public ASTIfStatement ( Parser p , int id ) { super ( p , id ) ; } public Object jjtAccept ( ParserVisitor visitor , Object data ) { return visitor . visit ( this , data ) ; } public boolean render ( InternalContextAdapter context , Writer writer ) throws IOException , MethodInvocationException , ResourceNotFoundException , ParseErrorException { if ( jjtGetChild ( 0 ) . evaluate ( context ) ) { jjtGetChild ( 1 ) . render ( context , writer ) ; return true ; } int totalNodes = jjtGetNumChildren ( ) ; for ( int i = 2 ; i < totalNodes ; i ++ ) { if ( jjtGetChild ( i ) . evaluate ( context ) ) { jjtGetChild ( i ) . render ( context , writer ) ; return true ; } } return true ; } public void process ( InternalContextAdapter context , ParserVisitor visitor ) { } } 	0
package org . apache . velocity . runtime . log ; import java . util . logging . Level ; import java . util . logging . Logger ; import org . apache . velocity . runtime . RuntimeServices ; public class JdkLogChute implements LogChute { public static final String RUNTIME_LOG_JDK_LOGGER = "runtime.log.logsystem.jdk.logger" ; public static final String DEFAULT_LOG_NAME = "org.apache.velocity" ; protected Logger logger = null ; public void init ( RuntimeServices rs ) { String name = ( String ) rs . getProperty ( RUNTIME_LOG_JDK_LOGGER ) ; if ( name == null ) { name = DEFAULT_LOG_NAME ; } logger = Logger . getLogger ( name ) ; log ( LogChute . DEBUG_ID , "JdkLogChute will use logger '" + name + '\'' ) ; } protected Level getJdkLevel ( int level ) { switch ( level ) { case LogChute . WARN_ID : return Level . WARNING ; case LogChute . INFO_ID : return Level . INFO ; case LogChute . DEBUG_ID : return Level . FINE ; case LogChute . TRACE_ID : return Level . FINEST ; case LogChute . ERROR_ID : return Level . SEVERE ; default : return Level . FINER ; } } public void log ( int level , String message ) { log ( level , message , null ) ; } public void log ( int level , String message , Throwable t ) { Level jdkLevel = getJdkLevel ( level ) ; if ( t == null ) { logger . log ( jdkLevel , message ) ; } else { logger . log ( jdkLevel , message , t ) ; } } public boolean isLevelEnabled ( int level ) { Level jdkLevel = getJdkLevel ( level ) ; return logger . isLoggable ( jdkLevel ) ; } } 	1
package org . apache . velocity . anakia ; import org . jdom . Element ; import org . jdom . Namespace ; import org . jdom . output . XMLOutputter ; import java . util . List ; public class AnakiaElement extends Element { private static final long serialVersionUID = 8429597252274491314L ; private static final XMLOutputter DEFAULT_OUTPUTTER = new XMLOutputter ( ) ; static { DEFAULT_OUTPUTTER . getFormat ( ) . setLineSeparator ( System . getProperty ( "line.separator" ) ) ; } public AnakiaElement ( String name , Namespace namespace ) { super ( name , namespace ) ; } public AnakiaElement ( String name ) { super ( name ) ; } public AnakiaElement ( String name , String uri ) { super ( name , uri ) ; } public AnakiaElement ( String name , String prefix , String uri ) { super ( name , prefix , uri ) ; } public NodeList selectNodes ( String xpathExpression ) { return new NodeList ( XPathCache . getXPath ( xpathExpression ) . applyTo ( this ) , false ) ; } public String toString ( ) { return DEFAULT_OUTPUTTER . outputString ( this ) ; } public List getContent ( ) { return new NodeList ( super . getContent ( ) , false ) ; } public List getChildren ( ) { return new NodeList ( super . getChildren ( ) , false ) ; } public List getChildren ( String name ) { return new NodeList ( super . getChildren ( name ) ) ; } public List getChildren ( String name , Namespace ns ) { return new NodeList ( super . getChildren ( name , ns ) ) ; } public List getAttributes ( ) { return new NodeList ( super . getAttributes ( ) ) ; } } 	0
package org . apache . velocity . util . introspection ; import java . lang . reflect . Method ; import org . apache . velocity . runtime . log . Log ; public abstract class IntrospectorBase implements IntrospectorCacheListener { protected final Log log ; private final IntrospectorCache introspectorCache ; protected IntrospectorBase ( final Log log ) { this . log = log ; introspectorCache = new IntrospectorCacheImpl ( log ) ; introspectorCache . addListener ( this ) ; } public Method getMethod ( final Class c , final String name , final Object [ ] params ) throws IllegalArgumentException , MethodMap . AmbiguousException { if ( c == null ) { throw new IllegalArgumentException ( "class object is null!" ) ; } if ( params == null ) { throw new IllegalArgumentException ( "params object is null!" ) ; } ClassMap classMap = null ; IntrospectorCache ic = getIntrospectorCache ( ) ; synchronized ( ic ) { classMap = ic . get ( c ) ; if ( classMap == null ) { classMap = ic . put ( c ) ; } } return classMap . findMethod ( name , params ) ; } protected IntrospectorCache getIntrospectorCache ( ) { return introspectorCache ; } protected void clearCache ( ) { getIntrospectorCache ( ) . clear ( ) ; } protected ClassMap createClassMap ( final Class c ) { return getIntrospectorCache ( ) . put ( c ) ; } protected ClassMap lookupClassMap ( final Class c ) { return getIntrospectorCache ( ) . get ( c ) ; } public void triggerClear ( ) { } public void triggerGet ( Class c , ClassMap classMap ) { } public void triggerPut ( Class c , ClassMap classMap ) { } } 	1
package org . apache . velocity . runtime . resource . loader ; import java . io . InputStream ; import org . apache . commons . collections . ExtendedProperties ; import org . apache . commons . lang . StringUtils ; import org . apache . velocity . exception . ResourceNotFoundException ; import org . apache . velocity . runtime . resource . Resource ; import org . apache . velocity . util . ClassUtils ; import org . apache . velocity . util . ExceptionUtils ; public class ClasspathResourceLoader extends ResourceLoader { public void init ( ExtendedProperties configuration ) { if ( log . isTraceEnabled ( ) ) { log . trace ( "ClasspathResourceLoader : initialization complete." ) ; } } public InputStream getResourceStream ( String name ) throws ResourceNotFoundException { InputStream result = null ; if ( StringUtils . isEmpty ( name ) ) { throw new ResourceNotFoundException ( "No template name provided" ) ; } try { result = ClassUtils . getResourceAsStream ( getClass ( ) , name ) ; } catch ( Exception fnfe ) { throw ( ResourceNotFoundException ) ExceptionUtils . createWithCause ( ResourceNotFoundException . class , "problem with template: " + name , fnfe ) ; } if ( result == null ) { String msg = "ClasspathResourceLoader Error: cannot find resource " + name ; throw new ResourceNotFoundException ( msg ) ; } return result ; } public boolean isSourceModified ( Resource resource ) { return false ; } public long getLastModified ( Resource resource ) { return 0 ; } } 	0
package org . apache . velocity . runtime . directive ; import java . io . IOException ; import java . io . Writer ; import org . apache . velocity . app . event . EventHandlerUtil ; import org . apache . velocity . context . InternalContextAdapter ; import org . apache . velocity . exception . MethodInvocationException ; import org . apache . velocity . exception . ResourceNotFoundException ; import org . apache . velocity . exception . TemplateInitException ; import org . apache . velocity . runtime . RuntimeConstants ; import org . apache . velocity . runtime . RuntimeServices ; import org . apache . velocity . runtime . parser . ParserTreeConstants ; import org . apache . velocity . runtime . parser . node . Node ; import org . apache . velocity . runtime . resource . Resource ; public class Include extends InputBase { private String outputMsgStart = "" ; private String outputMsgEnd = "" ; public String getName ( ) { return "include" ; } public int getType ( ) { return LINE ; } public void init ( RuntimeServices rs , InternalContextAdapter context , Node node ) throws TemplateInitException { super . init ( rs , context , node ) ; outputMsgStart = rsvc . getString ( RuntimeConstants . ERRORMSG_START ) ; outputMsgStart = outputMsgStart + " " ; outputMsgEnd = rsvc . getString ( RuntimeConstants . ERRORMSG_END ) ; outputMsgEnd = " " + outputMsgEnd ; } public boolean render ( InternalContextAdapter context , Writer writer , Node node ) throws IOException , MethodInvocationException , ResourceNotFoundException { int argCount = node . jjtGetNumChildren ( ) ; for ( int i = 0 ; i < argCount ; i ++ ) { Node n = node . jjtGetChild ( i ) ; if ( n . getType ( ) == ParserTreeConstants . JJTSTRINGLITERAL || n . getType ( ) == ParserTreeConstants . JJTREFERENCE ) { if ( ! renderOutput ( n , context , writer ) ) outputErrorToStream ( writer , "error with arg " + i + " please see log." ) ; } else { rsvc . getLog ( ) . error ( "#include() invalid argument type: " + n . toString ( ) ) ; outputErrorToStream ( writer , "error with arg " + i + " please see log." ) ; } } return true ; } private boolean renderOutput ( Node node , InternalContextAdapter context , Writer writer ) throws IOException , MethodInvocationException , ResourceNotFoundException { if ( node == null ) { rsvc . getLog ( ) . error ( "#include() null argument" ) ; return false ; } Object value = node . value ( context ) ; if ( value == null ) { rsvc . getLog ( ) . error ( "#include()  null argument" ) ; return false ; } String sourcearg = value . toString ( ) ; String arg = EventHandlerUtil . includeEvent ( rsvc , context , sourcearg , context . getCurrentTemplateName ( ) , getName ( ) ) ; boolean blockinput = false ; if ( arg == null ) blockinput = true ; Resource resource = null ; try { if ( ! blockinput ) resource = rsvc . getContent ( arg , getInputEncoding ( context ) ) ; } catch ( ResourceNotFoundException rnfe ) { rsvc . getLog ( ) . error ( "#include(): cannot find resource '" + arg + "', called from template " + context . getCurrentTemplateName ( ) + " at (" + getLine ( ) + ", " + getColumn ( ) + ")" ) ; throw rnfe ; } catch ( RuntimeException e ) { throw e ; } catch ( Exception e ) { rsvc . getLog ( ) . error ( "#include(): arg = '" + arg + "', called from template " + context . getCurrentTemplateName ( ) + " at (" + getLine ( ) + ", " + getColumn ( ) + ')' , e ) ; } if ( blockinput ) return true ; else if ( resource == null ) return false ; writer . write ( ( String ) resource . getData ( ) ) ; return true ; } private void outputErrorToStream ( Writer writer , String msg ) throws IOException { if ( outputMsgStart != null && outputMsgEnd != null ) { writer . write ( outputMsgStart ) ; writer . write ( msg ) ; writer . write ( outputMsgEnd ) ; } } } 	1
package org . apache . velocity . anakia ; public class Escape { public static final String LINE_SEPARATOR = System . getProperty ( "line.separator" ) ; public Escape ( ) { } public static final String getText ( String st ) { StringBuffer buff = new StringBuffer ( ) ; char [ ] block = st . toCharArray ( ) ; String stEntity = null ; int i , last ; for ( i = 0 , last = 0 ; i < block . length ; i ++ ) { switch ( block [ i ] ) { case '<' : stEntity = "&lt;" ; break ; case '>' : stEntity = "&gt;" ; break ; case '&' : stEntity = "&amp;" ; break ; case '"' : stEntity = "&quot;" ; break ; case '\n' : stEntity = LINE_SEPARATOR ; break ; default : break ; } if ( stEntity != null ) { buff . append ( block , last , i - last ) ; buff . append ( stEntity ) ; stEntity = null ; last = i + 1 ; } } if ( last < block . length ) { buff . append ( block , last , i - last ) ; } return buff . toString ( ) ; } } 	0
package org . apache . velocity . app . event . implement ; import java . util . ArrayList ; import java . util . List ; import org . apache . velocity . app . event . InvalidReferenceEventHandler ; import org . apache . velocity . context . Context ; import org . apache . velocity . exception . ParseErrorException ; import org . apache . velocity . runtime . RuntimeServices ; import org . apache . velocity . util . RuntimeServicesAware ; import org . apache . velocity . util . introspection . Info ; public class ReportInvalidReferences implements InvalidReferenceEventHandler , RuntimeServicesAware { public static final String EVENTHANDLER_INVALIDREFERENCE_EXCEPTION = "eventhandler.invalidreference.exception" ; List invalidReferences = new ArrayList ( ) ; private boolean stopOnFirstInvalidReference = false ; public Object invalidGetMethod ( Context context , String reference , Object object , String property , Info info ) { reportInvalidReference ( reference , info ) ; return null ; } public Object invalidMethod ( Context context , String reference , Object object , String method , Info info ) { if ( reference == null ) { reportInvalidReference ( object . getClass ( ) . getName ( ) + "." + method , info ) ; } else { reportInvalidReference ( reference , info ) ; } return null ; } public boolean invalidSetMethod ( Context context , String leftreference , String rightreference , Info info ) { reportInvalidReference ( leftreference , info ) ; return false ; } private void reportInvalidReference ( String reference , Info info ) { InvalidReferenceInfo invalidReferenceInfo = new InvalidReferenceInfo ( reference , info ) ; invalidReferences . add ( invalidReferenceInfo ) ; if ( stopOnFirstInvalidReference ) { throw new ParseErrorException ( "Error in page - invalid reference.  " , info , invalidReferenceInfo . getInvalidReference ( ) ) ; } } public List getInvalidReferences ( ) { return invalidReferences ; } public void setRuntimeServices ( RuntimeServices rs ) { stopOnFirstInvalidReference = rs . getConfiguration ( ) . getBoolean ( EVENTHANDLER_INVALIDREFERENCE_EXCEPTION , false ) ; } } 	1
package org . apache . velocity . runtime . parser . node ; import org . apache . velocity . context . InternalContextAdapter ; import org . apache . velocity . runtime . parser . Parser ; import org . apache . velocity . runtime . parser . ParserVisitor ; public class ASTFalse extends SimpleNode { private static Boolean value = Boolean . FALSE ; public ASTFalse ( int id ) { super ( id ) ; } public ASTFalse ( Parser p , int id ) { super ( p , id ) ; } public Object jjtAccept ( ParserVisitor visitor , Object data ) { return visitor . visit ( this , data ) ; } public boolean evaluate ( InternalContextAdapter context ) { return false ; } public Object value ( InternalContextAdapter context ) { return value ; } } 	0
package org . apache . velocity . runtime . parser . node ; import java . math . BigDecimal ; import org . apache . velocity . context . InternalContextAdapter ; import org . apache . velocity . exception . TemplateInitException ; import org . apache . velocity . runtime . parser . Parser ; import org . apache . velocity . runtime . parser . ParserVisitor ; public class ASTFloatingPointLiteral extends SimpleNode { private Number value = null ; public ASTFloatingPointLiteral ( int id ) { super ( id ) ; } public ASTFloatingPointLiteral ( Parser p , int id ) { super ( p , id ) ; } public Object jjtAccept ( ParserVisitor visitor , Object data ) { return visitor . visit ( this , data ) ; } public Object init ( InternalContextAdapter context , Object data ) throws TemplateInitException { super . init ( context , data ) ; String str = getFirstToken ( ) . image ; try { value = new Double ( str ) ; } catch ( NumberFormatException E1 ) { value = new BigDecimal ( str ) ; } return data ; } public Object value ( InternalContextAdapter context ) { return value ; } } 	1
package org . apache . velocity . runtime . log ; import org . apache . log4j . Category ; import org . apache . log4j . Level ; import org . apache . log4j . PatternLayout ; import org . apache . log4j . RollingFileAppender ; import org . apache . velocity . runtime . RuntimeConstants ; import org . apache . velocity . runtime . RuntimeServices ; public class SimpleLog4JLogSystem implements LogSystem { private RuntimeServices rsvc = null ; private RollingFileAppender appender = null ; protected Category logger = null ; public SimpleLog4JLogSystem ( ) { } public void init ( RuntimeServices rs ) { rsvc = rs ; String categoryname = ( String ) rsvc . getProperty ( "runtime.log.logsystem.log4j.category" ) ; if ( categoryname != null ) { logger = Category . getInstance ( categoryname ) ; logVelocityMessage ( 0 , "SimpleLog4JLogSystem using category '" + categoryname + "'" ) ; return ; } String logfile = rsvc . getString ( RuntimeConstants . RUNTIME_LOG ) ; try { internalInit ( logfile ) ; logVelocityMessage ( 0 , "SimpleLog4JLogSystem initialized using logfile '" + logfile + "'" ) ; } catch ( Exception e ) { System . err . println ( "PANIC : error configuring SimpleLog4JLogSystem : " + e ) ; } } private void internalInit ( String logfile ) throws Exception { logger = Category . getInstance ( this . getClass ( ) . getName ( ) ) ; logger . setAdditivity ( false ) ; logger . setLevel ( Level . DEBUG ) ; appender = new RollingFileAppender ( new PatternLayout ( "%d - %m%n" ) , logfile , true ) ; appender . setMaxBackupIndex ( 1 ) ; appender . setMaximumFileSize ( 100000 ) ; logger . addAppender ( appender ) ; } public void logVelocityMessage ( int level , String message ) { switch ( level ) { case LogSystem . WARN_ID : logger . warn ( message ) ; break ; case LogSystem . INFO_ID : logger . info ( message ) ; break ; case LogSystem . DEBUG_ID : logger . debug ( message ) ; break ; case LogSystem . ERROR_ID : logger . error ( message ) ; break ; default : logger . debug ( message ) ; break ; } } protected void finalize ( ) throws Throwable { shutdown ( ) ; } public void shutdown ( ) { if ( appender != null ) { logger . removeAppender ( appender ) ; appender . close ( ) ; appender = null ; } } } 	0
package org . apache . velocity . runtime . resource ; import org . apache . velocity . runtime . RuntimeServices ; import org . apache . velocity . runtime . RuntimeConstants ; import org . apache . velocity . runtime . resource . loader . ResourceLoader ; import org . apache . velocity . exception . ResourceNotFoundException ; import org . apache . velocity . exception . ParseErrorException ; public abstract class Resource { protected RuntimeServices rsvc = null ; protected ResourceLoader resourceLoader ; protected static final long MILLIS_PER_SECOND = 1000 ; protected long modificationCheckInterval = 0 ; protected long lastModified = 0 ; protected long nextCheck = 0 ; protected String name ; protected String encoding = RuntimeConstants . ENCODING_DEFAULT ; protected Object data = null ; public Resource ( ) { } public void setRuntimeServices ( RuntimeServices rs ) { rsvc = rs ; } public abstract boolean process ( ) throws ResourceNotFoundException , ParseErrorException , Exception ; public boolean isSourceModified ( ) { return resourceLoader . isSourceModified ( this ) ; } public void setModificationCheckInterval ( long modificationCheckInterval ) { this . modificationCheckInterval = modificationCheckInterval ; } public boolean requiresChecking ( ) { if ( modificationCheckInterval <= 0 ) { return false ; } return ( System . currentTimeMillis ( ) >= nextCheck ) ; } public void touch ( ) { nextCheck = System . currentTimeMillis ( ) + ( MILLIS_PER_SECOND * modificationCheckInterval ) ; } public void setName ( String name ) { this . name = name ; } public String getName ( ) { return name ; } public void setEncoding ( String encoding ) { this . encoding = encoding ; } public String getEncoding ( ) { return encoding ; } public long getLastModified ( ) { return lastModified ; } public void setLastModified ( long lastModified ) { this . lastModified = lastModified ; } public ResourceLoader getResourceLoader ( ) { return resourceLoader ; } public void setResourceLoader ( ResourceLoader resourceLoader ) { this . resourceLoader = resourceLoader ; } public void setData ( Object data ) { this . data = data ; } public Object getData ( ) { return data ; } } 	1
package org . apache . velocity . runtime . parser . node ; import org . apache . velocity . context . InternalContextAdapter ; import org . apache . velocity . runtime . parser . Parser ; import org . apache . velocity . runtime . parser . ParserVisitor ; import org . apache . velocity . exception . MethodInvocationException ; public class ASTExpression extends SimpleNode { public ASTExpression ( int id ) { super ( id ) ; } public ASTExpression ( Parser p , int id ) { super ( p , id ) ; } public Object jjtAccept ( ParserVisitor visitor , Object data ) { return visitor . visit ( this , data ) ; } public boolean evaluate ( InternalContextAdapter context ) throws MethodInvocationException { return jjtGetChild ( 0 ) . evaluate ( context ) ; } public Object value ( InternalContextAdapter context ) throws MethodInvocationException { return jjtGetChild ( 0 ) . value ( context ) ; } } 	0
package org . apache . velocity . app . event . implement ; import java . io . PrintWriter ; import java . io . StringWriter ; import org . apache . velocity . app . event . MethodExceptionEventHandler ; import org . apache . velocity . runtime . RuntimeServices ; import org . apache . velocity . util . RuntimeServicesAware ; public class PrintExceptions implements MethodExceptionEventHandler , RuntimeServicesAware { private static String SHOW_MESSAGE = "eventhandler.methodexception.message" ; private static String SHOW_STACK_TRACE = "eventhandler.methodexception.stacktrace" ; private RuntimeServices rs = null ; public Object methodException ( Class claz , String method , Exception e ) throws Exception { boolean showMessage = rs . getBoolean ( SHOW_MESSAGE , false ) ; boolean showStackTrace = rs . getBoolean ( SHOW_STACK_TRACE , false ) ; StringBuffer st ; if ( showMessage && showStackTrace ) { st = new StringBuffer ( 200 ) ; st . append ( e . getClass ( ) . getName ( ) ) . append ( "\n" ) ; st . append ( e . getMessage ( ) ) . append ( "\n" ) ; st . append ( getStackTrace ( e ) ) ; } else if ( showMessage ) { st = new StringBuffer ( 50 ) ; st . append ( e . getClass ( ) . getName ( ) ) . append ( "\n" ) ; st . append ( e . getMessage ( ) ) . append ( "\n" ) ; } else if ( showStackTrace ) { st = new StringBuffer ( 200 ) ; st . append ( e . getClass ( ) . getName ( ) ) . append ( "\n" ) ; st . append ( getStackTrace ( e ) ) ; } else { st = new StringBuffer ( 15 ) ; st . append ( e . getClass ( ) . getName ( ) ) . append ( "\n" ) ; } return st . toString ( ) ; } private static String getStackTrace ( Throwable throwable ) { PrintWriter printWriter = null ; try { StringWriter stackTraceWriter = new StringWriter ( ) ; printWriter = new PrintWriter ( stackTraceWriter ) ; throwable . printStackTrace ( printWriter ) ; printWriter . flush ( ) ; return stackTraceWriter . toString ( ) ; } finally { if ( printWriter != null ) { printWriter . close ( ) ; } } } public void setRuntimeServices ( RuntimeServices rs ) { this . rs = rs ; } } 	1
package org . apache . velocity . context ; import org . apache . velocity . app . event . EventCartridge ; public interface InternalEventContext { public EventCartridge attachEventCartridge ( EventCartridge ec ) ; public EventCartridge getEventCartridge ( ) ; } 	0
package org . apache . velocity . app . event . implement ; import org . apache . commons . lang . StringEscapeUtils ; public class EscapeXmlReference extends EscapeReference { protected String escape ( Object text ) { return StringEscapeUtils . escapeXml ( text . toString ( ) ) ; } protected String getMatchAttribute ( ) { return "eventhandler.escape.xml.match" ; } } 	1
package org . apache . velocity . io ; import java . io . IOException ; import java . io . Writer ; public final class VelocityWriter extends Writer { public static final int NO_BUFFER = 0 ; public static final int DEFAULT_BUFFER = - 1 ; public static final int UNBOUNDED_BUFFER = - 2 ; private int bufferSize ; private boolean autoFlush ; private Writer writer ; private char cb [ ] ; private int nextChar ; private static int defaultCharBufferSize = 8 * 1024 ; public VelocityWriter ( Writer writer ) { this ( writer , defaultCharBufferSize , true ) ; } private VelocityWriter ( int bufferSize , boolean autoFlush ) { this . bufferSize = bufferSize ; this . autoFlush = autoFlush ; } public int getBufferSize ( ) { return bufferSize ; } public boolean isAutoFlush ( ) { return autoFlush ; } public VelocityWriter ( Writer writer , int sz , boolean autoFlush ) { this ( sz , autoFlush ) ; if ( sz < 0 ) throw new IllegalArgumentException ( "Buffer size <= 0" ) ; this . writer = writer ; cb = sz == 0 ? null : new char [ sz ] ; nextChar = 0 ; } private final void flushBuffer ( ) throws IOException { if ( bufferSize == 0 ) return ; if ( nextChar == 0 ) return ; writer . write ( cb , 0 , nextChar ) ; nextChar = 0 ; } public final void clear ( ) { nextChar = 0 ; } private final void bufferOverflow ( ) throws IOException { throw new IOException ( "overflow" ) ; } public final void flush ( ) throws IOException { flushBuffer ( ) ; if ( writer != null ) { writer . flush ( ) ; } } public final void close ( ) throws IOException { if ( writer == null ) return ; flush ( ) ; } public final int getRemaining ( ) { return bufferSize - nextChar ; } public final void write ( int c ) throws IOException { if ( bufferSize == 0 ) { writer . write ( c ) ; } else { if ( nextChar >= bufferSize ) if ( autoFlush ) flushBuffer ( ) ; else bufferOverflow ( ) ; cb [ nextChar ++ ] = ( char ) c ; } } private final int min ( int a , int b ) { return ( a < b ? a : b ) ; } public final void write ( char cbuf [ ] , int off , int len ) throws IOException { if ( bufferSize == 0 ) { writer . write ( cbuf , off , len ) ; return ; } if ( len == 0 ) { return ; } if ( len >= bufferSize ) { if ( autoFlush ) flushBuffer ( ) ; else bufferOverflow ( ) ; writer . write ( cbuf , off , len ) ; return ; } int b = off , t = off + len ; while ( b < t ) { int d = min ( bufferSize - nextChar , t - b ) ; System . arraycopy ( cbuf , b , cb , nextChar , d ) ; b += d ; nextChar += d ; if ( nextChar >= bufferSize ) if ( autoFlush ) flushBuffer ( ) ; else bufferOverflow ( ) ; } } public final void write ( char buf [ ] ) throws IOException { write ( buf , 0 , buf . length ) ; } public final void write ( String s , int off , int len ) throws IOException { if ( bufferSize == 0 ) { writer . write ( s , off , len ) ; return ; } int b = off , t = off + len ; while ( b < t ) { int d = min ( bufferSize - nextChar , t - b ) ; s . getChars ( b , b + d , cb , nextChar ) ; b += d ; nextChar += d ; if ( nextChar >= bufferSize ) if ( autoFlush ) flushBuffer ( ) ; else bufferOverflow ( ) ; } } public final void write ( String s ) throws IOException { if ( s != null ) { write ( s , 0 , s . length ( ) ) ; } } public final void recycle ( Writer writer ) { this . writer = writer ; clear ( ) ; } } 	0
package org . apache . velocity . runtime ; public interface RuntimeConstants { String RUNTIME_LOG = "runtime.log" ; String RUNTIME_LOG_LOGSYSTEM = "runtime.log.logsystem" ; String RUNTIME_LOG_LOGSYSTEM_CLASS = "runtime.log.logsystem.class" ; String RUNTIME_LOG_ERROR_STACKTRACE = "runtime.log.error.stacktrace" ; String RUNTIME_LOG_WARN_STACKTRACE = "runtime.log.warn.stacktrace" ; String RUNTIME_LOG_INFO_STACKTRACE = "runtime.log.info.stacktrace" ; String RUNTIME_LOG_REFERENCE_LOG_INVALID = "runtime.log.invalid.references" ; String TRACE_PREFIX = " [trace] " ; String DEBUG_PREFIX = " [debug] " ; String INFO_PREFIX = "  [info] " ; String WARN_PREFIX = "  [warn] " ; String ERROR_PREFIX = " [error] " ; String UNKNOWN_PREFIX = " [unknown] " ; String COUNTER_NAME = "directive.foreach.counter.name" ; String COUNTER_INITIAL_VALUE = "directive.foreach.counter.initial.value" ; String MAX_NUMBER_LOOPS = "directive.foreach.maxloops" ; String SET_NULL_ALLOWED = "directive.set.null.allowed" ; String ERRORMSG_START = "directive.include.output.errormsg.start" ; String ERRORMSG_END = "directive.include.output.errormsg.end" ; String PARSE_DIRECTIVE_MAXDEPTH = "directive.parse.max.depth" ; String RESOURCE_MANAGER_CLASS = "resource.manager.class" ; String RESOURCE_MANAGER_CACHE_CLASS = "resource.manager.cache.class" ; String RESOURCE_MANAGER_DEFAULTCACHE_SIZE = "resource.manager.defaultcache.size" ; String RESOURCE_MANAGER_LOGWHENFOUND = "resource.manager.logwhenfound" ; String RESOURCE_LOADER = "resource.loader" ; String FILE_RESOURCE_LOADER_PATH = "file.resource.loader.path" ; String FILE_RESOURCE_LOADER_CACHE = "file.resource.loader.cache" ; String EVENTHANDLER_REFERENCEINSERTION = "eventhandler.referenceinsertion.class" ; String EVENTHANDLER_NULLSET = "eventhandler.nullset.class" ; String EVENTHANDLER_METHODEXCEPTION = "eventhandler.methodexception.class" ; String EVENTHANDLER_INCLUDE = "eventhandler.include.class" ; String EVENTHANDLER_INVALIDREFERENCES = "eventhandler.invalidreferences.class" ; String VM_LIBRARY = "velocimacro.library" ; String VM_LIBRARY_DEFAULT = "VM_global_library.vm" ; String VM_LIBRARY_AUTORELOAD = "velocimacro.library.autoreload" ; String VM_PERM_ALLOW_INLINE = "velocimacro.permissions.allow.inline" ; String VM_PERM_ALLOW_INLINE_REPLACE_GLOBAL = "velocimacro.permissions.allow.inline.to.replace.global" ; String VM_PERM_INLINE_LOCAL = "velocimacro.permissions.allow.inline.local.scope" ; String VM_MESSAGES_ON = "velocimacro.messages.on" ; String VM_CONTEXT_LOCALSCOPE = "velocimacro.context.localscope" ; String VM_ARGUMENTS_STRICT = "velocimacro.arguments.strict" ; String INTERPOLATE_STRINGLITERALS = "runtime.interpolate.string.literals" ; String INPUT_ENCODING = "input.encoding" ; String OUTPUT_ENCODING = "output.encoding" ; String ENCODING_DEFAULT = "ISO-8859-1" ; String UBERSPECT_CLASSNAME = "runtime.introspector.uberspect" ; String INTROSPECTOR_RESTRICT_PACKAGES = "introspector.restrict.packages" ; String INTROSPECTOR_RESTRICT_CLASSES = "introspector.restrict.classes" ; String PARSER_POOL_CLASS = "parser.pool.class" ; String PARSER_POOL_SIZE = "parser.pool.size" ; String DEFAULT_RUNTIME_PROPERTIES = "org/apache/velocity/runtime/defaults/velocity.properties" ; String DEFAULT_RUNTIME_DIRECTIVES = "org/apache/velocity/runtime/defaults/directive.properties" ; int NUMBER_OF_PARSERS = 20 ; } 	1
package org . apache . velocity . runtime . parser . node ; import org . apache . velocity . runtime . parser . Parser ; import org . apache . velocity . runtime . parser . ParserVisitor ; public class ASTprocess extends SimpleNode { public ASTprocess ( int id ) { super ( id ) ; } public ASTprocess ( Parser p , int id ) { super ( p , id ) ; } public Object jjtAccept ( ParserVisitor visitor , Object data ) { return visitor . visit ( this , data ) ; } } 	0
package org . apache . velocity . runtime ; import java . util . HashMap ; import java . util . Map ; import java . util . Vector ; import org . apache . commons . lang . StringUtils ; import org . apache . velocity . Template ; import org . apache . velocity . runtime . directive . Directive ; import org . apache . velocity . runtime . directive . Macro ; import org . apache . velocity . runtime . directive . VelocimacroProxy ; import org . apache . velocity . runtime . log . LogDisplayWrapper ; public class VelocimacroFactory { private final RuntimeServices rsvc ; private final LogDisplayWrapper log ; private VelocimacroManager vmManager = null ; private boolean replaceAllowed = false ; private boolean addNewAllowed = true ; private boolean templateLocal = false ; private boolean autoReloadLibrary = false ; private Vector macroLibVec = null ; private Map libModMap ; public VelocimacroFactory ( final RuntimeServices rsvc ) { this . rsvc = rsvc ; this . log = new LogDisplayWrapper ( rsvc . getLog ( ) , "Velocimacro : " , rsvc . getBoolean ( RuntimeConstants . VM_MESSAGES_ON , true ) ) ; libModMap = new HashMap ( ) ; vmManager = new VelocimacroManager ( rsvc ) ; } public void initVelocimacro ( ) { synchronized ( this ) { log . trace ( "initialization starting." ) ; setReplacementPermission ( true ) ; vmManager . setNamespaceUsage ( false ) ; Object libfiles = rsvc . getProperty ( RuntimeConstants . VM_LIBRARY ) ; if ( libfiles == null ) { log . debug ( "\"" + RuntimeConstants . VM_LIBRARY + "\" is not set.  Trying default library: " + RuntimeConstants . VM_LIBRARY_DEFAULT ) ; if ( rsvc . getLoaderNameForResource ( RuntimeConstants . VM_LIBRARY_DEFAULT ) != null ) { libfiles = RuntimeConstants . VM_LIBRARY_DEFAULT ; } else { log . debug ( "Default library not found." ) ; } } if ( libfiles != null ) { if ( libfiles instanceof Vector ) { macroLibVec = ( Vector ) libfiles ; } else if ( libfiles instanceof String ) { macroLibVec = new Vector ( ) ; macroLibVec . addElement ( libfiles ) ; } for ( int i = 0 ; i < macroLibVec . size ( ) ; i ++ ) { String lib = ( String ) macroLibVec . elementAt ( i ) ; if ( StringUtils . isNotEmpty ( lib ) ) { vmManager . setRegisterFromLib ( true ) ; log . debug ( "adding VMs from VM library : " + lib ) ; try { Template template = rsvc . getTemplate ( lib ) ; Twonk twonk = new Twonk ( ) ; twonk . template = template ; twonk . modificationTime = template . getLastModified ( ) ; libModMap . put ( lib , twonk ) ; } catch ( Exception e ) { log . error ( true , "Velocimacro : Error using VM library : " + lib , e ) ; } log . trace ( "VM library registration complete." ) ; vmManager . setRegisterFromLib ( false ) ; } } } setAddMacroPermission ( true ) ; if ( ! rsvc . getBoolean ( RuntimeConstants . VM_PERM_ALLOW_INLINE , true ) ) { setAddMacroPermission ( false ) ; log . info ( "allowInline = false : VMs can NOT be defined inline in templates" ) ; } else { log . debug ( "allowInline = true : VMs can be defined inline in templates" ) ; } setReplacementPermission ( false ) ; if ( rsvc . getBoolean ( RuntimeConstants . VM_PERM_ALLOW_INLINE_REPLACE_GLOBAL , false ) ) { setReplacementPermission ( true ) ; log . info ( "allowInlineToOverride = true : VMs " + "defined inline may replace previous VM definitions" ) ; } else { log . debug ( "allowInlineToOverride = false : VMs " + "defined inline may NOT replace previous VM definitions" ) ; } vmManager . setNamespaceUsage ( true ) ; setTemplateLocalInline ( rsvc . getBoolean ( RuntimeConstants . VM_PERM_INLINE_LOCAL , false ) ) ; if ( getTemplateLocalInline ( ) ) { log . info ( "allowInlineLocal = true : VMs " + "defined inline will be local to their defining template only." ) ; } else { log . debug ( "allowInlineLocal = false : VMs " + "defined inline will be global in scope if allowed." ) ; } vmManager . setTemplateLocalInlineVM ( getTemplateLocalInline ( ) ) ; setAutoload ( rsvc . getBoolean ( RuntimeConstants . VM_LIBRARY_AUTORELOAD , false ) ) ; if ( getAutoload ( ) ) { log . info ( "autoload on : VM system " + "will automatically reload global library macros" ) ; } else { log . debug ( "autoload off : VM system " + "will not automatically reload global library macros" ) ; } log . trace ( "Velocimacro : initialization complete." ) ; } } public boolean addVelocimacro ( String name , String macroBody , String argArray [ ] , String sourceTemplate ) { if ( name == null || macroBody == null || argArray == null || sourceTemplate == null ) { log . warn ( "VM addition rejected : programmer error : arg null" ) ; return false ; } if ( ! canAddVelocimacro ( name , sourceTemplate ) ) { return false ; } synchronized ( this ) { vmManager . addVM ( name , macroBody , argArray , sourceTemplate ) ; } StringBuffer msg = new StringBuffer ( "added " ) ; Macro . macroToString ( msg , argArray ) ; msg . append ( " : source = " ) . append ( sourceTemplate ) ; log . info ( msg . toString ( ) ) ; return true ; } private synchronized boolean canAddVelocimacro ( String name , String sourceTemplate ) { if ( getAutoload ( ) && ( macroLibVec != null ) ) { for ( int i = 0 ; i < macroLibVec . size ( ) ; i ++ ) { String lib = ( String ) macroLibVec . elementAt ( i ) ; if ( lib . equals ( sourceTemplate ) ) { return true ; } } } if ( ! addNewAllowed ) { log . warn ( "VM addition rejected : " + name + " : inline VMs not allowed." ) ; return false ; } if ( ! templateLocal ) { if ( isVelocimacro ( name , sourceTemplate ) && ! replaceAllowed ) { log . warn ( "VM addition rejected : " + name + " : inline not allowed to replace existing VM" ) ; return false ; } } return true ; } public boolean isVelocimacro ( String vm , String sourceTemplate ) { synchronized ( this ) { if ( vmManager . get ( vm , sourceTemplate ) != null ) return true ; } return false ; } public Directive getVelocimacro ( String vmName , String sourceTemplate ) { VelocimacroProxy vp = null ; synchronized ( this ) { vp = vmManager . get ( vmName , sourceTemplate ) ; if ( vp != null && getAutoload ( ) ) { String lib = vmManager . getLibraryName ( vmName , sourceTemplate ) ; if ( lib != null ) { try { Twonk tw = ( Twonk ) libModMap . get ( lib ) ; if ( tw != null ) { Template template = tw . template ; long tt = tw . modificationTime ; long ft = template . getResourceLoader ( ) . getLastModified ( template ) ; if ( ft > tt ) { log . debug ( "auto-reloading VMs from VM library : " + lib ) ; tw . modificationTime = ft ; template = rsvc . getTemplate ( lib ) ; tw . template = template ; tw . modificationTime = template . getLastModified ( ) ; } } } catch ( Exception e ) { log . error ( true , "Velocimacro : Error using VM library : " + lib , e ) ; } vp = vmManager . get ( vmName , sourceTemplate ) ; } } } return vp ; } public boolean dumpVMNamespace ( String namespace ) { return vmManager . dumpNamespace ( namespace ) ; } private void setTemplateLocalInline ( boolean b ) { templateLocal = b ; } private boolean getTemplateLocalInline ( ) { return templateLocal ; } private boolean setAddMacroPermission ( final boolean addNewAllowed ) { boolean b = this . addNewAllowed ; this . addNewAllowed = addNewAllowed ; return b ; } private boolean setReplacementPermission ( boolean arg ) { boolean b = replaceAllowed ; replaceAllowed = arg ; return b ; } private void setAutoload ( boolean b ) { autoReloadLibrary = b ; } private boolean getAutoload ( ) { return autoReloadLibrary ; } private static class Twonk { public Template template ; public long modificationTime ; } } 	1
package org . apache . velocity . runtime . resource ; import java . util . Iterator ; import org . apache . velocity . runtime . RuntimeServices ; public interface ResourceCache { public void initialize ( RuntimeServices rs ) ; public Resource get ( Object resourceKey ) ; public Resource put ( Object resourceKey , Resource resource ) ; public Resource remove ( Object resourceKey ) ; public Iterator enumerateKeys ( ) ; } 	0
package org . apache . velocity . runtime . parser . node ; import org . apache . velocity . context . InternalContextAdapter ; import org . apache . velocity . runtime . parser . Parser ; import org . apache . velocity . runtime . parser . ParserVisitor ; import org . apache . velocity . exception . MethodInvocationException ; import org . apache . velocity . util . TemplateNumber ; public class ASTAddNode extends SimpleNode { public ASTAddNode ( int id ) { super ( id ) ; } public ASTAddNode ( Parser p , int id ) { super ( p , id ) ; } public Object jjtAccept ( ParserVisitor visitor , Object data ) { return visitor . visit ( this , data ) ; } public Object value ( InternalContextAdapter context ) throws MethodInvocationException { Object left = jjtGetChild ( 0 ) . value ( context ) ; Object right = jjtGetChild ( 1 ) . value ( context ) ; if ( left == null || right == null ) { log . error ( ( left == null ? "Left" : "Right" ) + " side (" + jjtGetChild ( ( left == null ? 0 : 1 ) ) . literal ( ) + ") of addition operation has null value." + " Operation not possible. " + context . getCurrentTemplateName ( ) + " [line " + getLine ( ) + ", column " + getColumn ( ) + "]" ) ; return null ; } if ( left instanceof TemplateNumber ) { left = ( ( TemplateNumber ) left ) . getAsNumber ( ) ; } if ( right instanceof TemplateNumber ) { right = ( ( TemplateNumber ) right ) . getAsNumber ( ) ; } if ( left instanceof Number && right instanceof Number ) { return MathUtils . add ( ( Number ) left , ( Number ) right ) ; } if ( left instanceof String || right instanceof String ) { return left . toString ( ) . concat ( right . toString ( ) ) ; } log . error ( ( ! ( left instanceof Number || left instanceof String ) ? "Left" : "Right" ) + " side of addition operation is not a valid type. " + "Currently only Strings, numbers (1,2,3...) and Number type are supported. " + context . getCurrentTemplateName ( ) + " [line " + getLine ( ) + ", column " + getColumn ( ) + "]" ) ; return null ; } } 	1
package org . apache . velocity . runtime . parser ; public class TokenMgrError extends Error { static final int LEXICAL_ERROR = 0 ; static final int STATIC_LEXER_ERROR = 1 ; static final int INVALID_LEXICAL_STATE = 2 ; static final int LOOP_DETECTED = 3 ; int errorCode ; protected static final String addEscapes ( String str ) { StringBuffer retval = new StringBuffer ( ) ; char ch ; for ( int i = 0 ; i < str . length ( ) ; i ++ ) { switch ( str . charAt ( i ) ) { case 0 : continue ; case '\b' : retval . append ( "\\b" ) ; continue ; case '\t' : retval . append ( "\\t" ) ; continue ; case '\n' : retval . append ( "\\n" ) ; continue ; case '\f' : retval . append ( "\\f" ) ; continue ; case '\r' : retval . append ( "\\r" ) ; continue ; case '\"' : retval . append ( "\\\"" ) ; continue ; case '\'' : retval . append ( "\\\'" ) ; continue ; case '\\' : retval . append ( "\\\\" ) ; continue ; default : if ( ( ch = str . charAt ( i ) ) < 0x20 || ch > 0x7e ) { String s = "0000" + Integer . toString ( ch , 16 ) ; retval . append ( "\\u" + s . substring ( s . length ( ) - 4 , s . length ( ) ) ) ; } else { retval . append ( ch ) ; } continue ; } } return retval . toString ( ) ; } protected static String LexicalError ( boolean EOFSeen , int lexState , int errorLine , int errorColumn , String errorAfter , char curChar ) { return ( "Lexical error at line " + errorLine + ", column " + errorColumn + ".  Encountered: " + ( EOFSeen ? "<EOF> " : ( "\"" + addEscapes ( String . valueOf ( curChar ) ) + "\"" ) + " (" + ( int ) curChar + "), " ) + "after : \"" + addEscapes ( errorAfter ) + "\"" ) ; } public String getMessage ( ) { return super . getMessage ( ) ; } public TokenMgrError ( ) { } public TokenMgrError ( String message , int reason ) { super ( message ) ; errorCode = reason ; } public TokenMgrError ( boolean EOFSeen , int lexState , int errorLine , int errorColumn , String errorAfter , char curChar , int reason ) { this ( LexicalError ( EOFSeen , lexState , errorLine , errorColumn , errorAfter , curChar ) , reason ) ; } } 	0
package org . apache . velocity . runtime . directive ; import java . io . Writer ; import java . io . IOException ; import java . util . List ; import java . util . ArrayList ; import org . apache . velocity . context . InternalContextAdapter ; import org . apache . velocity . exception . TemplateInitException ; import org . apache . velocity . runtime . parser . node . Node ; import org . apache . velocity . runtime . parser . node . NodeUtils ; import org . apache . velocity . runtime . parser . Token ; import org . apache . velocity . runtime . parser . ParseException ; import org . apache . velocity . runtime . parser . ParserTreeConstants ; import org . apache . velocity . runtime . RuntimeServices ; public class Macro extends Directive { private static boolean debugMode = false ; public String getName ( ) { return "macro" ; } public int getType ( ) { return BLOCK ; } public boolean render ( InternalContextAdapter context , Writer writer , Node node ) throws IOException { return true ; } public void init ( RuntimeServices rs , InternalContextAdapter context , Node node ) throws TemplateInitException { super . init ( rs , context , node ) ; } public static void processAndRegister ( RuntimeServices rs , Token t , Node node , String sourceTemplate ) throws IOException , ParseException { int numArgs = node . jjtGetNumChildren ( ) ; if ( numArgs < 2 ) { rs . getLog ( ) . error ( "#macro error : Velocimacro must have name as 1st " + "argument to #macro(). #args = " + numArgs ) ; throw new MacroParseException ( "First argument to #macro() must be " + " macro name." , sourceTemplate , t ) ; } int firstType = node . jjtGetChild ( 0 ) . getType ( ) ; if ( firstType != ParserTreeConstants . JJTWORD ) { throw new MacroParseException ( "First argument to #macro() must be a" + " token without surrounding \' or \", which specifies" + " the macro name.  Currently it is a " + ParserTreeConstants . jjtNodeName [ firstType ] , sourceTemplate , t ) ; } String argArray [ ] = getArgArray ( node , rs ) ; List macroArray = getASTAsStringArray ( node . jjtGetChild ( numArgs - 1 ) ) ; StringBuffer macroBody = new StringBuffer ( ) ; for ( int i = 0 ; i < macroArray . size ( ) ; i ++ ) { macroBody . append ( macroArray . get ( i ) ) ; } boolean macroAdded = rs . addVelocimacro ( argArray [ 0 ] , macroBody . toString ( ) , argArray , sourceTemplate ) ; if ( ! macroAdded && rs . getLog ( ) . isWarnEnabled ( ) ) { StringBuffer msg = new StringBuffer ( "Failed to add macro: " ) ; macroToString ( msg , argArray ) ; msg . append ( " : source = " ) . append ( sourceTemplate ) ; rs . getLog ( ) . warn ( msg ) ; } } private static String [ ] getArgArray ( Node node , RuntimeServices rsvc ) { int numArgs = node . jjtGetNumChildren ( ) ; numArgs -- ; String argArray [ ] = new String [ numArgs ] ; int i = 0 ; while ( i < numArgs ) { argArray [ i ] = node . jjtGetChild ( i ) . getFirstToken ( ) . image ; if ( i > 0 ) { if ( argArray [ i ] . startsWith ( "$" ) ) { argArray [ i ] = argArray [ i ] . substring ( 1 , argArray [ i ] . length ( ) ) ; } } i ++ ; } if ( debugMode ) { StringBuffer msg = new StringBuffer ( "Macro.getArgArray() : nbrArgs=" ) ; msg . append ( numArgs ) . append ( " : " ) ; macroToString ( msg , argArray ) ; rsvc . getLog ( ) . debug ( msg ) ; } return argArray ; } private static List getASTAsStringArray ( Node rootNode ) { Token t = rootNode . getFirstToken ( ) ; Token tLast = rootNode . getLastToken ( ) ; List list = new ArrayList ( ) ; while ( t != tLast ) { list . add ( NodeUtils . tokenLiteral ( t ) ) ; t = t . next ; } list . add ( NodeUtils . tokenLiteral ( t ) ) ; return list ; } public static final StringBuffer macroToString ( final StringBuffer buf , final String [ ] argArray ) { StringBuffer ret = ( buf == null ) ? new StringBuffer ( ) : buf ; ret . append ( '#' ) . append ( argArray [ 0 ] ) . append ( "( " ) ; for ( int i = 1 ; i < argArray . length ; i ++ ) { ret . append ( ' ' ) . append ( argArray [ i ] ) ; } ret . append ( " )" ) ; return ret ; } } 	1
package org . apache . velocity . anakia ; import java . io . IOException ; import java . io . StringWriter ; import java . io . Writer ; import java . util . ArrayList ; import java . util . Collection ; import java . util . Iterator ; import java . util . List ; import java . util . ListIterator ; import org . jdom . Attribute ; import org . jdom . CDATA ; import org . jdom . Comment ; import org . jdom . DocType ; import org . jdom . Document ; import org . jdom . Element ; import org . jdom . EntityRef ; import org . jdom . ProcessingInstruction ; import org . jdom . Text ; import org . jdom . output . XMLOutputter ; public class NodeList implements List , Cloneable { private static final AttributeXMLOutputter DEFAULT_OUTPUTTER = new AttributeXMLOutputter ( ) ; private List nodes ; public NodeList ( ) { nodes = new ArrayList ( ) ; } public NodeList ( Document document ) { this ( ( Object ) document ) ; } public NodeList ( Element element ) { this ( ( Object ) element ) ; } private NodeList ( Object object ) { if ( object == null ) { throw new IllegalArgumentException ( "Cannot construct NodeList with null." ) ; } nodes = new ArrayList ( 1 ) ; nodes . add ( object ) ; } public NodeList ( List nodes ) { this ( nodes , true ) ; } public NodeList ( List nodes , boolean copy ) { if ( nodes == null ) { throw new IllegalArgumentException ( "Cannot initialize NodeList with null list" ) ; } this . nodes = copy ? new ArrayList ( nodes ) : nodes ; } public List getList ( ) { return nodes ; } public String toString ( ) { if ( nodes . isEmpty ( ) ) { return "" ; } StringWriter sw = new StringWriter ( nodes . size ( ) * 128 ) ; try { for ( Iterator i = nodes . iterator ( ) ; i . hasNext ( ) ; ) { Object node = i . next ( ) ; if ( node instanceof Element ) { DEFAULT_OUTPUTTER . output ( ( Element ) node , sw ) ; } else if ( node instanceof Attribute ) { DEFAULT_OUTPUTTER . output ( ( Attribute ) node , sw ) ; } else if ( node instanceof Text ) { DEFAULT_OUTPUTTER . output ( ( Text ) node , sw ) ; } else if ( node instanceof Document ) { DEFAULT_OUTPUTTER . output ( ( Document ) node , sw ) ; } else if ( node instanceof ProcessingInstruction ) { DEFAULT_OUTPUTTER . output ( ( ProcessingInstruction ) node , sw ) ; } else if ( node instanceof Comment ) { DEFAULT_OUTPUTTER . output ( ( Comment ) node , sw ) ; } else if ( node instanceof CDATA ) { DEFAULT_OUTPUTTER . output ( ( CDATA ) node , sw ) ; } else if ( node instanceof DocType ) { DEFAULT_OUTPUTTER . output ( ( DocType ) node , sw ) ; } else if ( node instanceof EntityRef ) { DEFAULT_OUTPUTTER . output ( ( EntityRef ) node , sw ) ; } else { throw new IllegalArgumentException ( "Cannot process a " + ( node == null ? "null node" : "node of class " + node . getClass ( ) . getName ( ) ) ) ; } } } catch ( IOException e ) { throw new Error ( ) ; } return sw . toString ( ) ; } public Object clone ( ) throws CloneNotSupportedException { NodeList clonedList = ( NodeList ) super . clone ( ) ; clonedList . cloneNodes ( ) ; return clonedList ; } private void cloneNodes ( ) throws CloneNotSupportedException { Class listClass = nodes . getClass ( ) ; try { List clonedNodes = ( List ) listClass . newInstance ( ) ; clonedNodes . addAll ( nodes ) ; nodes = clonedNodes ; } catch ( IllegalAccessException e ) { throw new CloneNotSupportedException ( "Cannot clone NodeList since" + " there is no accessible no-arg constructor on class " + listClass . getName ( ) ) ; } catch ( InstantiationException e ) { throw new Error ( ) ; } } public int hashCode ( ) { return nodes . hashCode ( ) ; } public boolean equals ( Object o ) { return o instanceof NodeList ? ( ( NodeList ) o ) . nodes . equals ( nodes ) : false ; } public NodeList selectNodes ( String xpathString ) { return new NodeList ( XPathCache . getXPath ( xpathString ) . applyTo ( nodes ) , false ) ; } public boolean add ( Object o ) { return nodes . add ( o ) ; } public void add ( int index , Object o ) { nodes . add ( index , o ) ; } public boolean addAll ( Collection c ) { return nodes . addAll ( c ) ; } public boolean addAll ( int index , Collection c ) { return nodes . addAll ( index , c ) ; } public void clear ( ) { nodes . clear ( ) ; } public boolean contains ( Object o ) { return nodes . contains ( o ) ; } public boolean containsAll ( Collection c ) { return nodes . containsAll ( c ) ; } public Object get ( int index ) { return nodes . get ( index ) ; } public int indexOf ( Object o ) { return nodes . indexOf ( o ) ; } public boolean isEmpty ( ) { return nodes . isEmpty ( ) ; } public Iterator iterator ( ) { return nodes . iterator ( ) ; } public int lastIndexOf ( Object o ) { return nodes . lastIndexOf ( o ) ; } public ListIterator listIterator ( ) { return nodes . listIterator ( ) ; } public ListIterator listIterator ( int index ) { return nodes . listIterator ( index ) ; } public Object remove ( int index ) { return nodes . remove ( index ) ; } public boolean remove ( Object o ) { return nodes . remove ( o ) ; } public boolean removeAll ( Collection c ) { return nodes . removeAll ( c ) ; } public boolean retainAll ( Collection c ) { return nodes . retainAll ( c ) ; } public Object set ( int index , Object o ) { return nodes . set ( index , o ) ; } public int size ( ) { return nodes . size ( ) ; } public List subList ( int fromIndex , int toIndex ) { return new NodeList ( nodes . subList ( fromIndex , toIndex ) ) ; } public Object [ ] toArray ( ) { return nodes . toArray ( ) ; } public Object [ ] toArray ( Object [ ] a ) { return nodes . toArray ( a ) ; } private static final class AttributeXMLOutputter extends XMLOutputter { public void output ( Attribute attribute , Writer out ) throws IOException { out . write ( " " ) ; out . write ( attribute . getQualifiedName ( ) ) ; out . write ( "=" ) ; out . write ( "\"" ) ; out . write ( escapeAttributeEntities ( attribute . getValue ( ) ) ) ; out . write ( "\"" ) ; } } } 	0
package org . apache . velocity . app . event . implement ; import org . apache . velocity . util . introspection . Info ; public class InvalidReferenceInfo extends Info { private String invalidReference ; public InvalidReferenceInfo ( String invalidReference , Info info ) { super ( info . getTemplateName ( ) , info . getLine ( ) , info . getColumn ( ) ) ; this . invalidReference = invalidReference ; } public String getInvalidReference ( ) { return invalidReference ; } public String toString ( ) { return getTemplateName ( ) + " [line " + getLine ( ) + ", column " + getColumn ( ) + "]: " + invalidReference ; } } 	1
package org . apache . velocity . util . introspection ; import java . util . Iterator ; public interface Uberspect { public void init ( ) throws Exception ; public Iterator getIterator ( Object obj , Info info ) throws Exception ; public VelMethod getMethod ( Object obj , String method , Object [ ] args , Info info ) throws Exception ; public VelPropertyGet getPropertyGet ( Object obj , String identifier , Info info ) throws Exception ; public VelPropertySet getPropertySet ( Object obj , String identifier , Object arg , Info info ) throws Exception ; } 	0
package org . apache . velocity . util ; import org . apache . velocity . context . Context ; public interface ContextAware { public void setContext ( Context context ) ; } 	1
package org . apache . velocity . runtime . log ; import java . util . Date ; import org . apache . log . format . PatternFormatter ; public class VelocityFormatter extends PatternFormatter { public VelocityFormatter ( String format ) { super ( format ) ; } protected String getTime ( final long time , final String format ) { return new Date ( ) . toString ( ) ; } } 	0
package org . apache . velocity . util . introspection ; import java . lang . reflect . Method ; import org . apache . velocity . runtime . log . Log ; public class SecureIntrospectorImpl extends Introspector implements SecureIntrospectorControl { private String [ ] badClasses ; private String [ ] badPackages ; public SecureIntrospectorImpl ( String [ ] badClasses , String [ ] badPackages , Log log ) { super ( log ) ; this . badClasses = badClasses ; this . badPackages = badPackages ; } public Method getMethod ( Class clazz , String methodName , Object [ ] params ) throws IllegalArgumentException { if ( ! checkObjectExecutePermission ( clazz , methodName ) ) { log . warn ( "Cannot retrieve method " + methodName + " from object of class " + clazz . getName ( ) + " due to security restrictions." ) ; return null ; } else { return super . getMethod ( clazz , methodName , params ) ; } } public boolean checkObjectExecutePermission ( Class clazz , String methodName ) { if ( ( methodName != null ) && ( methodName . equals ( "wait" ) || methodName . equals ( "notify" ) ) ) { return false ; } else if ( java . lang . Number . class . isAssignableFrom ( clazz ) ) { return true ; } else if ( java . lang . Boolean . class . isAssignableFrom ( clazz ) ) { return true ; } else if ( java . lang . String . class . isAssignableFrom ( clazz ) ) { return true ; } else if ( java . lang . Class . class . isAssignableFrom ( clazz ) && ( methodName != null ) && methodName . equals ( "getName" ) ) { return true ; } String className = clazz . getName ( ) ; if ( className . startsWith ( "[L" ) && className . endsWith ( ";" ) ) { className = className . substring ( 2 , className . length ( ) - 1 ) ; } String packageName ; int dotPos = className . lastIndexOf ( '.' ) ; packageName = ( dotPos == - 1 ) ? "" : className . substring ( 0 , dotPos ) ; int sz = badPackages . length ; for ( int i = 0 ; i < sz ; i ++ ) { if ( packageName . equals ( badPackages [ i ] ) ) { return false ; } } sz = badClasses . length ; for ( int i = 0 ; i < sz ; i ++ ) { if ( className . equals ( badClasses [ i ] ) ) { return false ; } } return true ; } } 	1
package org . apache . velocity . util . introspection ; public interface VelPropertySet { public Object invoke ( Object o , Object arg ) throws Exception ; public boolean isCacheable ( ) ; public String getMethodName ( ) ; } 	0
package org . apache . velocity . runtime . resource . util ; public interface StringResourceRepository { StringResource getStringResource ( String name ) ; void putStringResource ( String name , String body ) ; void removeStringResource ( String name ) ; void setEncoding ( String encoding ) ; String getEncoding ( ) ; } 	1
package org . apache . velocity . anakia ; import java . io . IOException ; import java . io . StringWriter ; import org . jdom . Element ; import org . jdom . output . XMLOutputter ; import org . jdom . output . Format ; public class OutputWrapper extends XMLOutputter { public OutputWrapper ( ) { } public OutputWrapper ( Format f ) { super ( f ) ; } public String outputString ( Element element , boolean strip ) { StringWriter buff = new StringWriter ( ) ; try { outputElementContent ( element , buff ) ; } catch ( IOException e ) { } return buff . toString ( ) ; } } 	0
package org . apache . velocity . runtime . parser . node ; import org . apache . velocity . context . InternalContextAdapter ; import org . apache . velocity . exception . MethodInvocationException ; import org . apache . velocity . runtime . parser . Parser ; import org . apache . velocity . runtime . parser . ParserVisitor ; import org . apache . velocity . util . TemplateNumber ; public class ASTModNode extends SimpleNode { public ASTModNode ( int id ) { super ( id ) ; } public ASTModNode ( Parser p , int id ) { super ( p , id ) ; } public Object jjtAccept ( ParserVisitor visitor , Object data ) { return visitor . visit ( this , data ) ; } public Object value ( InternalContextAdapter context ) throws MethodInvocationException { Object left = jjtGetChild ( 0 ) . value ( context ) ; Object right = jjtGetChild ( 1 ) . value ( context ) ; if ( left == null || right == null ) { log . error ( ( left == null ? "Left" : "Right" ) + " side (" + jjtGetChild ( ( left == null ? 0 : 1 ) ) . literal ( ) + ") of modulus operation has null value." + " Operation not possible. " + context . getCurrentTemplateName ( ) + " [line " + getLine ( ) + ", column " + getColumn ( ) + "]" ) ; return null ; } if ( left instanceof TemplateNumber ) { left = ( ( TemplateNumber ) left ) . getAsNumber ( ) ; } if ( right instanceof TemplateNumber ) { right = ( ( TemplateNumber ) right ) . getAsNumber ( ) ; } if ( ! ( left instanceof Number ) || ! ( right instanceof Number ) ) { log . error ( ( ! ( left instanceof Number ) ? "Left" : "Right" ) + " side " + " of modulus operation is not a Number. " + context . getCurrentTemplateName ( ) + " [line " + getLine ( ) + ", column " + getColumn ( ) + "]" ) ; return null ; } if ( MathUtils . isZero ( ( Number ) right ) ) { log . error ( "Right side of modulus operation is zero. Must be non-zero. " + context . getCurrentTemplateName ( ) + " [line " + getLine ( ) + ", column " + getColumn ( ) + "]" ) ; return null ; } return MathUtils . modulo ( ( Number ) left , ( Number ) right ) ; } } 	1
package org . apache . velocity . runtime . parser . node ; import org . apache . velocity . context . InternalContextAdapter ; import org . apache . velocity . runtime . parser . Parser ; import org . apache . velocity . runtime . parser . ParserVisitor ; import org . apache . velocity . exception . MethodInvocationException ; public class ASTAndNode extends SimpleNode { public ASTAndNode ( int id ) { super ( id ) ; } public ASTAndNode ( Parser p , int id ) { super ( p , id ) ; } public Object jjtAccept ( ParserVisitor visitor , Object data ) { return visitor . visit ( this , data ) ; } public Object value ( InternalContextAdapter context ) throws MethodInvocationException { return new Boolean ( evaluate ( context ) ) ; } public boolean evaluate ( InternalContextAdapter context ) throws MethodInvocationException { Node left = jjtGetChild ( 0 ) ; Node right = jjtGetChild ( 1 ) ; if ( left == null || right == null ) { log . error ( ( left == null ? "Left" : "Right" ) + " side of '&&' operation is null." + " Operation not possible. " + context . getCurrentTemplateName ( ) + " [line " + getLine ( ) + ", column " + getColumn ( ) + "]" ) ; return false ; } if ( left . evaluate ( context ) ) { if ( right . evaluate ( context ) ) { return true ; } } return false ; } } 	0
package org . apache . velocity . runtime . parser . node ; import org . apache . velocity . context . InternalContextAdapter ; import org . apache . velocity . runtime . parser . Parser ; import org . apache . velocity . runtime . parser . ParserVisitor ; import org . apache . velocity . exception . MethodInvocationException ; import org . apache . velocity . util . TemplateNumber ; public class ASTLTNode extends SimpleNode { public ASTLTNode ( int id ) { super ( id ) ; } public ASTLTNode ( Parser p , int id ) { super ( p , id ) ; } public Object jjtAccept ( ParserVisitor visitor , Object data ) { return visitor . visit ( this , data ) ; } public boolean evaluate ( InternalContextAdapter context ) throws MethodInvocationException { Object left = jjtGetChild ( 0 ) . value ( context ) ; Object right = jjtGetChild ( 1 ) . value ( context ) ; if ( left == null || right == null ) { log . error ( ( left == null ? "Left" : "Right" ) + " side (" + jjtGetChild ( ( left == null ? 0 : 1 ) ) . literal ( ) + ") of '<' operation has null value." + " Operation not possible. " + context . getCurrentTemplateName ( ) + " [line " + getLine ( ) + ", column " + getColumn ( ) + "]" ) ; return false ; } if ( left instanceof TemplateNumber ) { left = ( ( TemplateNumber ) left ) . getAsNumber ( ) ; } if ( right instanceof TemplateNumber ) { right = ( ( TemplateNumber ) right ) . getAsNumber ( ) ; } if ( ! ( left instanceof Number ) || ! ( right instanceof Number ) ) { log . error ( ( ! ( left instanceof Number ) ? "Left" : "Right" ) + " side of '>=' operation is not a valid Number. " + context . getCurrentTemplateName ( ) + " [line " + getLine ( ) + ", column " + getColumn ( ) + "]" ) ; return false ; } return MathUtils . compare ( ( Number ) left , ( Number ) right ) == - 1 ; } public Object value ( InternalContextAdapter context ) throws MethodInvocationException { boolean val = evaluate ( context ) ; return val ? Boolean . TRUE : Boolean . FALSE ; } } 	1
package org . apache . velocity . runtime . parser ; import org . apache . velocity . runtime . parser . node . ASTAddNode ; import org . apache . velocity . runtime . parser . node . ASTAndNode ; import org . apache . velocity . runtime . parser . node . ASTAssignment ; import org . apache . velocity . runtime . parser . node . ASTBlock ; import org . apache . velocity . runtime . parser . node . ASTComment ; import org . apache . velocity . runtime . parser . node . ASTDirective ; import org . apache . velocity . runtime . parser . node . ASTDivNode ; import org . apache . velocity . runtime . parser . node . ASTEQNode ; import org . apache . velocity . runtime . parser . node . ASTElseIfStatement ; import org . apache . velocity . runtime . parser . node . ASTElseStatement ; import org . apache . velocity . runtime . parser . node . ASTEscape ; import org . apache . velocity . runtime . parser . node . ASTEscapedDirective ; import org . apache . velocity . runtime . parser . node . ASTExpression ; import org . apache . velocity . runtime . parser . node . ASTFalse ; import org . apache . velocity . runtime . parser . node . ASTFloatingPointLiteral ; import org . apache . velocity . runtime . parser . node . ASTGENode ; import org . apache . velocity . runtime . parser . node . ASTGTNode ; import org . apache . velocity . runtime . parser . node . ASTIdentifier ; import org . apache . velocity . runtime . parser . node . ASTIfStatement ; import org . apache . velocity . runtime . parser . node . ASTIntegerLiteral ; import org . apache . velocity . runtime . parser . node . ASTIntegerRange ; import org . apache . velocity . runtime . parser . node . ASTLENode ; import org . apache . velocity . runtime . parser . node . ASTLTNode ; import org . apache . velocity . runtime . parser . node . ASTMap ; import org . apache . velocity . runtime . parser . node . ASTMethod ; import org . apache . velocity . runtime . parser . node . ASTModNode ; import org . apache . velocity . runtime . parser . node . ASTMulNode ; import org . apache . velocity . runtime . parser . node . ASTNENode ; import org . apache . velocity . runtime . parser . node . ASTNotNode ; import org . apache . velocity . runtime . parser . node . ASTObjectArray ; import org . apache . velocity . runtime . parser . node . ASTOrNode ; import org . apache . velocity . runtime . parser . node . ASTReference ; import org . apache . velocity . runtime . parser . node . ASTSetDirective ; import org . apache . velocity . runtime . parser . node . ASTStop ; import org . apache . velocity . runtime . parser . node . ASTStringLiteral ; import org . apache . velocity . runtime . parser . node . ASTSubtractNode ; import org . apache . velocity . runtime . parser . node . ASTText ; import org . apache . velocity . runtime . parser . node . ASTTrue ; import org . apache . velocity . runtime . parser . node . ASTWord ; import org . apache . velocity . runtime . parser . node . ASTprocess ; import org . apache . velocity . runtime . parser . node . SimpleNode ; public interface ParserVisitor { public Object visit ( SimpleNode node , Object data ) ; public Object visit ( ASTprocess node , Object data ) ; public Object visit ( ASTEscapedDirective node , Object data ) ; public Object visit ( ASTEscape node , Object data ) ; public Object visit ( ASTComment node , Object data ) ; public Object visit ( ASTFloatingPointLiteral node , Object data ) ; public Object visit ( ASTIntegerLiteral node , Object data ) ; public Object visit ( ASTStringLiteral node , Object data ) ; public Object visit ( ASTIdentifier node , Object data ) ; public Object visit ( ASTWord node , Object data ) ; public Object visit ( ASTDirective node , Object data ) ; public Object visit ( ASTBlock node , Object data ) ; public Object visit ( ASTMap node , Object data ) ; public Object visit ( ASTObjectArray node , Object data ) ; public Object visit ( ASTIntegerRange node , Object data ) ; public Object visit ( ASTMethod node , Object data ) ; public Object visit ( ASTReference node , Object data ) ; public Object visit ( ASTTrue node , Object data ) ; public Object visit ( ASTFalse node , Object data ) ; public Object visit ( ASTText node , Object data ) ; public Object visit ( ASTIfStatement node , Object data ) ; public Object visit ( ASTElseStatement node , Object data ) ; public Object visit ( ASTElseIfStatement node , Object data ) ; public Object visit ( ASTSetDirective node , Object data ) ; public Object visit ( ASTStop node , Object data ) ; public Object visit ( ASTExpression node , Object data ) ; public Object visit ( ASTAssignment node , Object data ) ; public Object visit ( ASTOrNode node , Object data ) ; public Object visit ( ASTAndNode node , Object data ) ; public Object visit ( ASTEQNode node , Object data ) ; public Object visit ( ASTNENode node , Object data ) ; public Object visit ( ASTLTNode node , Object data ) ; public Object visit ( ASTGTNode node , Object data ) ; public Object visit ( ASTLENode node , Object data ) ; public Object visit ( ASTGENode node , Object data ) ; public Object visit ( ASTAddNode node , Object data ) ; public Object visit ( ASTSubtractNode node , Object data ) ; public Object visit ( ASTMulNode node , Object data ) ; public Object visit ( ASTDivNode node , Object data ) ; public Object visit ( ASTModNode node , Object data ) ; public Object visit ( ASTNotNode node , Object data ) ; } 	0
package org . apache . velocity . app . event . implement ; import org . apache . commons . lang . StringEscapeUtils ; public class EscapeSqlReference extends EscapeReference { protected String escape ( Object text ) { return StringEscapeUtils . escapeSql ( text . toString ( ) ) ; } protected String getMatchAttribute ( ) { return "eventhandler.escape.sql.match" ; } } 	1
package org . apache . velocity . context ; public interface Context { Object put ( String key , Object value ) ; Object get ( String key ) ; boolean containsKey ( Object key ) ; Object [ ] getKeys ( ) ; Object remove ( Object key ) ; } 	0
package org . apache . velocity . runtime . parser . node ; import java . io . IOException ; import java . io . Writer ; import org . apache . commons . lang . builder . ToStringBuilder ; import org . apache . velocity . context . InternalContextAdapter ; import org . apache . velocity . exception . MethodInvocationException ; import org . apache . velocity . exception . ParseErrorException ; import org . apache . velocity . exception . ResourceNotFoundException ; import org . apache . velocity . exception . TemplateInitException ; import org . apache . velocity . runtime . RuntimeServices ; import org . apache . velocity . runtime . log . Log ; import org . apache . velocity . runtime . parser . Parser ; import org . apache . velocity . runtime . parser . ParserVisitor ; import org . apache . velocity . runtime . parser . Token ; public class SimpleNode implements Node { protected RuntimeServices rsvc = null ; protected Log log = null ; protected Node parent ; protected Node [ ] children ; protected int id ; protected Parser parser ; protected int info ; public boolean state ; protected boolean invalid = false ; protected Token first ; protected Token last ; public SimpleNode ( int i ) { id = i ; } public SimpleNode ( Parser p , int i ) { this ( i ) ; parser = p ; } public void jjtOpen ( ) { first = parser . getToken ( 1 ) ; } public void jjtClose ( ) { last = parser . getToken ( 0 ) ; } public void setFirstToken ( Token t ) { this . first = t ; } public Token getFirstToken ( ) { return first ; } public Token getLastToken ( ) { return last ; } public void jjtSetParent ( Node n ) { parent = n ; } public Node jjtGetParent ( ) { return parent ; } public void jjtAddChild ( Node n , int i ) { if ( children == null ) { children = new Node [ i + 1 ] ; } else if ( i >= children . length ) { Node c [ ] = new Node [ i + 1 ] ; System . arraycopy ( children , 0 , c , 0 , children . length ) ; children = c ; } children [ i ] = n ; } public Node jjtGetChild ( int i ) { return children [ i ] ; } public int jjtGetNumChildren ( ) { return ( children == null ) ? 0 : children . length ; } public Object jjtAccept ( ParserVisitor visitor , Object data ) { return visitor . visit ( this , data ) ; } public Object childrenAccept ( ParserVisitor visitor , Object data ) { if ( children != null ) { for ( int i = 0 ; i < children . length ; ++ i ) { children [ i ] . jjtAccept ( visitor , data ) ; } } return data ; } public String toString ( String prefix ) { return prefix + toString ( ) ; } public void dump ( String prefix ) { System . out . println ( toString ( prefix ) ) ; if ( children != null ) { for ( int i = 0 ; i < children . length ; ++ i ) { SimpleNode n = ( SimpleNode ) children [ i ] ; if ( n != null ) { n . dump ( prefix + " " ) ; } } } } public String literal ( ) { Token t = first ; StringBuffer sb = new StringBuffer ( t . image ) ; while ( t != last ) { t = t . next ; sb . append ( t . image ) ; } return sb . toString ( ) ; } public Object init ( InternalContextAdapter context , Object data ) throws TemplateInitException { rsvc = ( RuntimeServices ) data ; log = rsvc . getLog ( ) ; int i , k = jjtGetNumChildren ( ) ; for ( i = 0 ; i < k ; i ++ ) { jjtGetChild ( i ) . init ( context , data ) ; } return data ; } public boolean evaluate ( InternalContextAdapter context ) throws MethodInvocationException { return false ; } public Object value ( InternalContextAdapter context ) throws MethodInvocationException { return null ; } public boolean render ( InternalContextAdapter context , Writer writer ) throws IOException , MethodInvocationException , ParseErrorException , ResourceNotFoundException { int i , k = jjtGetNumChildren ( ) ; for ( i = 0 ; i < k ; i ++ ) jjtGetChild ( i ) . render ( context , writer ) ; return true ; } public Object execute ( Object o , InternalContextAdapter context ) throws MethodInvocationException { return null ; } public int getType ( ) { return id ; } public void setInfo ( int info ) { this . info = info ; } public int getInfo ( ) { return info ; } public void setInvalid ( ) { invalid = true ; } public boolean isInvalid ( ) { return invalid ; } public int getLine ( ) { return first . beginLine ; } public int getColumn ( ) { return first . beginColumn ; } public String toString ( ) { StringBuffer tokens = new StringBuffer ( ) ; for ( Token t = getFirstToken ( ) ; t != null ; ) { tokens . append ( "[" ) . append ( t . image ) . append ( "]" ) ; if ( t . next != null ) { if ( t . equals ( getLastToken ( ) ) ) { break ; } else { tokens . append ( ", " ) ; } } t = t . next ; } return new ToStringBuilder ( this ) . append ( "id" , getType ( ) ) . append ( "info" , getInfo ( ) ) . append ( "invalid" , isInvalid ( ) ) . append ( "children" , jjtGetNumChildren ( ) ) . append ( "tokens" , tokens ) . toString ( ) ; } } 	1
package org . apache . velocity . runtime . parser . node ; import org . apache . velocity . runtime . parser . Parser ; import org . apache . velocity . runtime . parser . ParserVisitor ; public class ASTVariable extends SimpleNode { public ASTVariable ( int id ) { super ( id ) ; } public ASTVariable ( Parser p , int id ) { super ( p , id ) ; } public Object jjtAccept ( ParserVisitor visitor , Object data ) { return visitor . visit ( this , data ) ; } } 	0
package org . apache . velocity . util ; import java . lang . reflect . Constructor ; import java . lang . reflect . Method ; public class ExceptionUtils { private static boolean causesAllowed = true ; public static RuntimeException createRuntimeException ( String message , Throwable cause ) { return ( RuntimeException ) createWithCause ( RuntimeException . class , message , cause ) ; } public static Throwable createWithCause ( Class clazz , String message , Throwable cause ) { Throwable re = null ; if ( causesAllowed ) { try { Constructor constructor = clazz . getConstructor ( new Class [ ] { String . class , Throwable . class } ) ; re = ( Throwable ) constructor . newInstance ( new Object [ ] { message , cause } ) ; } catch ( RuntimeException e ) { throw e ; } catch ( Exception e ) { causesAllowed = false ; } } if ( re == null ) { try { Constructor constructor = clazz . getConstructor ( new Class [ ] { String . class } ) ; re = ( Throwable ) constructor . newInstance ( new Object [ ] { message + " caused by " + cause } ) ; } catch ( RuntimeException e ) { throw e ; } catch ( Exception e ) { throw new RuntimeException ( "Error caused " + e ) ; } } return re ; } public static void setCause ( Throwable onObject , Throwable cause ) { if ( causesAllowed ) { try { Method method = onObject . getClass ( ) . getMethod ( "initCause" , new Class [ ] { Throwable . class } ) ; method . invoke ( onObject , new Object [ ] { cause } ) ; } catch ( RuntimeException e ) { throw e ; } catch ( Exception e ) { causesAllowed = false ; } } } } 	1
package org . apache . velocity . texen ; import java . io . File ; import java . io . InputStream ; import java . io . FileInputStream ; import java . io . BufferedInputStream ; import java . io . Writer ; import java . io . FileWriter ; import java . io . IOException ; import java . io . StringWriter ; import java . io . OutputStreamWriter ; import java . io . BufferedWriter ; import java . io . FileOutputStream ; import java . util . Enumeration ; import java . util . Hashtable ; import java . util . Iterator ; import java . util . Properties ; import org . apache . velocity . Template ; import org . apache . velocity . context . Context ; import org . apache . velocity . VelocityContext ; import org . apache . velocity . app . VelocityEngine ; import org . apache . velocity . util . ClassUtils ; public class Generator { public static final String OUTPUT_PATH = "output.path" ; public static final String TEMPLATE_PATH = "template.path" ; private static final String DEFAULT_TEXEN_PROPERTIES = "org/apache/velocity/texen/defaults/texen.properties" ; private Properties props = new Properties ( ) ; private Context controlContext ; private Hashtable writers = new Hashtable ( ) ; private static Generator instance = new Generator ( ) ; protected String outputEncoding ; protected String inputEncoding ; protected VelocityEngine ve ; private Generator ( ) { setDefaultProps ( ) ; } public static Generator getInstance ( ) { return instance ; } public void setVelocityEngine ( VelocityEngine ve ) { this . ve = ve ; } public Generator ( String propFile ) { try { BufferedInputStream bi = null ; try { bi = new BufferedInputStream ( new FileInputStream ( propFile ) ) ; props . load ( bi ) ; } finally { if ( bi != null ) { bi . close ( ) ; } } } catch ( IOException e ) { System . err . println ( "Could not load " + propFile + ", falling back to defaults. (" + e . getMessage ( ) + ")" ) ; setDefaultProps ( ) ; } } public Generator ( Properties props ) { this . props = ( Properties ) props . clone ( ) ; } protected void setDefaultProps ( ) { ClassLoader classLoader = VelocityEngine . class . getClassLoader ( ) ; try { InputStream inputStream = null ; try { inputStream = classLoader . getResourceAsStream ( DEFAULT_TEXEN_PROPERTIES ) ; props . load ( inputStream ) ; } finally { if ( inputStream != null ) { inputStream . close ( ) ; } } } catch ( IOException ioe ) { System . err . println ( "Cannot get default properties: " + ioe . getMessage ( ) ) ; } } public void setTemplatePath ( String templatePath ) { props . put ( TEMPLATE_PATH , templatePath ) ; } public String getTemplatePath ( ) { return props . getProperty ( TEMPLATE_PATH ) ; } public void setOutputPath ( String outputPath ) { props . put ( OUTPUT_PATH , outputPath ) ; } public String getOutputPath ( ) { return props . getProperty ( OUTPUT_PATH ) ; } public void setOutputEncoding ( String outputEncoding ) { this . outputEncoding = outputEncoding ; } public void setInputEncoding ( String inputEncoding ) { this . inputEncoding = inputEncoding ; } public Writer getWriter ( String path , String encoding ) throws Exception { Writer writer ; if ( encoding == null || encoding . length ( ) == 0 || encoding . equals ( "8859-1" ) || encoding . equals ( "8859_1" ) ) { writer = new FileWriter ( path ) ; } else { writer = new BufferedWriter ( new OutputStreamWriter ( new FileOutputStream ( path ) , encoding ) ) ; } return writer ; } public Template getTemplate ( String templateName , String encoding ) throws Exception { Template template ; if ( encoding == null || encoding . length ( ) == 0 || encoding . equals ( "8859-1" ) || encoding . equals ( "8859_1" ) ) { template = ve . getTemplate ( templateName ) ; } else { template = ve . getTemplate ( templateName , encoding ) ; } return template ; } public String parse ( String inputTemplate , String outputFile ) throws Exception { return parse ( inputTemplate , outputFile , null , null ) ; } public String parse ( String inputTemplate , String outputFile , String objectID , Object object ) throws Exception { return parse ( inputTemplate , null , outputFile , null , objectID , object ) ; } public String parse ( String inputTemplate , String inputEncoding , String outputFile , String outputEncoding , String objectID , Object object ) throws Exception { if ( objectID != null && object != null ) { controlContext . put ( objectID , object ) ; } Template template = getTemplate ( inputTemplate , inputEncoding != null ? inputEncoding : this . inputEncoding ) ; if ( outputFile == null || outputFile . equals ( "" ) ) { StringWriter sw = new StringWriter ( ) ; template . merge ( controlContext , sw ) ; return sw . toString ( ) ; } else { Writer writer = null ; if ( writers . get ( outputFile ) == null ) { writer = getWriter ( getOutputPath ( ) + File . separator + outputFile , outputEncoding != null ? outputEncoding : this . outputEncoding ) ; writers . put ( outputFile , writer ) ; } else { writer = ( Writer ) writers . get ( outputFile ) ; } VelocityContext vc = new VelocityContext ( controlContext ) ; template . merge ( vc , writer ) ; return "" ; } } public String parse ( String controlTemplate , Context controlContext ) throws Exception { this . controlContext = controlContext ; fillContextDefaults ( this . controlContext ) ; fillContextProperties ( this . controlContext ) ; Template template = getTemplate ( controlTemplate , inputEncoding ) ; StringWriter sw = new StringWriter ( ) ; template . merge ( controlContext , sw ) ; return sw . toString ( ) ; } protected Context getContext ( Hashtable objs ) { fillContextHash ( controlContext , objs ) ; return controlContext ; } protected void fillContextHash ( Context context , Hashtable objs ) { Enumeration enumeration = objs . keys ( ) ; while ( enumeration . hasMoreElements ( ) ) { String key = enumeration . nextElement ( ) . toString ( ) ; context . put ( key , objs . get ( key ) ) ; } } protected void fillContextDefaults ( Context context ) { context . put ( "generator" , instance ) ; context . put ( "outputDirectory" , getOutputPath ( ) ) ; } protected void fillContextProperties ( Context context ) { Enumeration enumeration = props . propertyNames ( ) ; while ( enumeration . hasMoreElements ( ) ) { String nm = ( String ) enumeration . nextElement ( ) ; if ( nm . startsWith ( "context.objects." ) ) { String contextObj = props . getProperty ( nm ) ; int colon = nm . lastIndexOf ( '.' ) ; String contextName = nm . substring ( colon + 1 ) ; try { Object o = ClassUtils . getNewInstance ( contextObj ) ; context . put ( contextName , o ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; } } } } public void shutdown ( ) { Iterator iterator = writers . values ( ) . iterator ( ) ; while ( iterator . hasNext ( ) ) { Writer writer = ( Writer ) iterator . next ( ) ; try { writer . flush ( ) ; } catch ( IOException e ) { } try { writer . close ( ) ; } catch ( IOException e ) { } } writers . clear ( ) ; } } 	0
package org . apache . velocity . runtime . parser . node ; import org . apache . velocity . context . InternalContextAdapter ; import org . apache . velocity . runtime . parser . Parser ; import org . apache . velocity . runtime . parser . ParserVisitor ; import org . apache . velocity . exception . MethodInvocationException ; import org . apache . velocity . util . TemplateNumber ; public class ASTLENode extends SimpleNode { public ASTLENode ( int id ) { super ( id ) ; } public ASTLENode ( Parser p , int id ) { super ( p , id ) ; } public Object jjtAccept ( ParserVisitor visitor , Object data ) { return visitor . visit ( this , data ) ; } public boolean evaluate ( InternalContextAdapter context ) throws MethodInvocationException { Object left = jjtGetChild ( 0 ) . value ( context ) ; Object right = jjtGetChild ( 1 ) . value ( context ) ; if ( left == null || right == null ) { log . error ( ( left == null ? "Left" : "Right" ) + " side (" + jjtGetChild ( ( left == null ? 0 : 1 ) ) . literal ( ) + ") of '<=' operation has null value." + " Operation not possible. " + context . getCurrentTemplateName ( ) + " [line " + getLine ( ) + ", column " + getColumn ( ) + "]" ) ; return false ; } if ( left instanceof TemplateNumber ) { left = ( ( TemplateNumber ) left ) . getAsNumber ( ) ; } if ( right instanceof TemplateNumber ) { right = ( ( TemplateNumber ) right ) . getAsNumber ( ) ; } if ( ! ( left instanceof Number ) || ! ( right instanceof Number ) ) { log . error ( ( ! ( left instanceof Number ) ? "Left" : "Right" ) + " side of '>=' operation is not a Number. " + context . getCurrentTemplateName ( ) + " [line " + getLine ( ) + ", column " + getColumn ( ) + "]" ) ; return false ; } return MathUtils . compare ( ( Number ) left , ( Number ) right ) <= 0 ; } public Object value ( InternalContextAdapter context ) throws MethodInvocationException { boolean val = evaluate ( context ) ; return val ? Boolean . TRUE : Boolean . FALSE ; } } 	1
package org . apache . velocity . util ; import java . util . Iterator ; import java . util . NoSuchElementException ; import java . lang . reflect . Array ; public class ArrayIterator implements Iterator { private Object array ; private int pos ; private int size ; public ArrayIterator ( Object array ) { if ( ! array . getClass ( ) . isArray ( ) ) { throw new IllegalArgumentException ( "Programmer error : internal ArrayIterator invoked w/o array" ) ; } this . array = array ; pos = 0 ; size = Array . getLength ( this . array ) ; } public Object next ( ) { if ( pos < size ) return Array . get ( array , pos ++ ) ; throw new NoSuchElementException ( "No more elements: " + pos + " / " + size ) ; } public boolean hasNext ( ) { return ( pos < size ) ; } public void remove ( ) { throw new UnsupportedOperationException ( ) ; } } 	0
package org . apache . velocity . runtime . resource . loader ; import java . io . BufferedInputStream ; import java . io . InputStream ; import java . sql . Connection ; import java . sql . PreparedStatement ; import java . sql . ResultSet ; import java . sql . SQLException ; import java . sql . Timestamp ; import javax . naming . InitialContext ; import javax . naming . NamingException ; import javax . sql . DataSource ; import org . apache . commons . collections . ExtendedProperties ; import org . apache . velocity . exception . ResourceNotFoundException ; import org . apache . velocity . runtime . resource . Resource ; import org . apache . velocity . util . ExceptionUtils ; import org . apache . velocity . util . StringUtils ; public class DataSourceResourceLoader extends ResourceLoader { private String dataSourceName ; private String tableName ; private String keyColumn ; private String templateColumn ; private String timestampColumn ; private InitialContext ctx ; private DataSource dataSource ; public void init ( ExtendedProperties configuration ) { dataSourceName = StringUtils . nullTrim ( configuration . getString ( "resource.datasource" ) ) ; tableName = StringUtils . nullTrim ( configuration . getString ( "resource.table" ) ) ; keyColumn = StringUtils . nullTrim ( configuration . getString ( "resource.keycolumn" ) ) ; templateColumn = StringUtils . nullTrim ( configuration . getString ( "resource.templatecolumn" ) ) ; timestampColumn = StringUtils . nullTrim ( configuration . getString ( "resource.timestampcolumn" ) ) ; if ( dataSource != null ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "DataSourceResourceLoader: using dataSource instance with table \"" + tableName + "\"" ) ; log . debug ( "DataSourceResourceLoader: using columns \"" + keyColumn + "\", \"" + templateColumn + "\" and \"" + timestampColumn + "\"" ) ; } log . trace ( "DataSourceResourceLoader initialized." ) ; } else if ( dataSourceName != null ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "DataSourceResourceLoader: using \"" + dataSourceName + "\" datasource with table \"" + tableName + "\"" ) ; log . debug ( "DataSourceResourceLoader: using columns \"" + keyColumn + "\", \"" + templateColumn + "\" and \"" + timestampColumn + "\"" ) ; } log . trace ( "DataSourceResourceLoader initialized." ) ; } else { log . warn ( "DataSourceResourceLoader not properly initialized. No DataSource was identified." ) ; } } public void setDataSource ( final DataSource dataSource ) { this . dataSource = dataSource ; } public boolean isSourceModified ( final Resource resource ) { return ( resource . getLastModified ( ) != readLastModified ( resource , "checking timestamp" ) ) ; } public long getLastModified ( final Resource resource ) { return readLastModified ( resource , "getting timestamp" ) ; } public synchronized InputStream getResourceStream ( final String name ) throws ResourceNotFoundException { if ( org . apache . commons . lang . StringUtils . isEmpty ( name ) ) { throw new ResourceNotFoundException ( "DataSourceResourceLoader: " + "Template name was empty or null" ) ; } Connection conn = null ; ResultSet rs = null ; try { conn = openDbConnection ( ) ; rs = readData ( conn , templateColumn , name ) ; if ( rs . next ( ) ) { InputStream ascStream = rs . getAsciiStream ( templateColumn ) ; if ( ascStream == null ) { throw new ResourceNotFoundException ( "DataSourceResourceLoader: " + "template column for '" + name + "' is null" ) ; } return new BufferedInputStream ( ascStream ) ; } else { throw new ResourceNotFoundException ( "DataSourceResourceLoader: " + "could not find resource '" + name + "'" ) ; } } catch ( SQLException sqle ) { String msg = "DataSourceResourceLoader: database problem while getting resource '" + name + "': " ; log . error ( msg , sqle ) ; throw new ResourceNotFoundException ( msg ) ; } catch ( NamingException ne ) { String msg = "DataSourceResourceLoader: database problem while getting resource '" + name + "': " ; log . error ( msg , ne ) ; throw new ResourceNotFoundException ( msg ) ; } finally { closeResultSet ( rs ) ; closeDbConnection ( conn ) ; } } private long readLastModified ( final Resource resource , final String operation ) { long timeStamp = 0 ; String name = resource . getName ( ) ; if ( name == null || name . length ( ) == 0 ) { log . error ( "DataSourceResourceLoader: " + "Template name was empty or null" ) ; } else { Connection conn = null ; ResultSet rs = null ; try { conn = openDbConnection ( ) ; rs = readData ( conn , timestampColumn , name ) ; if ( rs . next ( ) ) { Timestamp ts = rs . getTimestamp ( timestampColumn ) ; timeStamp = ts != null ? ts . getTime ( ) : 0 ; } else { log . error ( "DataSourceResourceLoader: could not find resource " + name + " while " + operation ) ; } } catch ( SQLException sqle ) { String msg = "DataSourceResourceLoader: database problem while " + operation + " of '" + name + "': " ; log . error ( msg , sqle ) ; throw ExceptionUtils . createRuntimeException ( msg , sqle ) ; } catch ( NamingException ne ) { String msg = "DataSourceResourceLoader: database problem while " + operation + " of '" + name + "': " ; log . error ( msg , ne ) ; throw ExceptionUtils . createRuntimeException ( msg , ne ) ; } finally { closeResultSet ( rs ) ; closeDbConnection ( conn ) ; } } return timeStamp ; } private Connection openDbConnection ( ) throws NamingException , SQLException { if ( dataSource != null ) { return dataSource . getConnection ( ) ; } if ( ctx == null ) { ctx = new InitialContext ( ) ; } dataSource = ( DataSource ) ctx . lookup ( dataSourceName ) ; return dataSource . getConnection ( ) ; } private void closeDbConnection ( final Connection conn ) { if ( conn != null ) { try { conn . close ( ) ; } catch ( RuntimeException re ) { throw re ; } catch ( Exception e ) { log . warn ( "DataSourceResourceLoader: problem when closing connection" , e ) ; } } } private void closeResultSet ( final ResultSet rs ) { if ( rs != null ) { try { rs . close ( ) ; } catch ( RuntimeException re ) { throw re ; } catch ( Exception e ) { log . warn ( "DataSourceResourceLoader: problem when closing result set: " , e ) ; } } } private ResultSet readData ( final Connection conn , final String columnNames , final String templateName ) throws SQLException { PreparedStatement ps = conn . prepareStatement ( "SELECT " + columnNames + " FROM " + tableName + " WHERE " + keyColumn + " = ?" ) ; ps . setString ( 1 , templateName ) ; return ps . executeQuery ( ) ; } } 	1
package org . apache . velocity . anakia ; import org . jdom . Element ; import org . jdom . Namespace ; import org . jdom . DefaultJDOMFactory ; public class AnakiaJDOMFactory extends DefaultJDOMFactory { public AnakiaJDOMFactory ( ) { } public Element element ( String name , Namespace namespace ) { return new AnakiaElement ( name , namespace ) ; } public Element element ( String name ) { return new AnakiaElement ( name ) ; } public Element element ( String name , String uri ) { return new AnakiaElement ( name , uri ) ; } public Element element ( String name , String prefix , String uri ) { return new AnakiaElement ( name , prefix , uri ) ; } } 	0
package org . apache . velocity . runtime . resource . loader ; import org . apache . velocity . runtime . RuntimeServices ; import org . apache . velocity . util . ClassUtils ; import org . apache . velocity . util . StringUtils ; public class ResourceLoaderFactory { public static ResourceLoader getLoader ( RuntimeServices rs , String loaderClassName ) throws Exception { ResourceLoader loader = null ; try { loader = ( ResourceLoader ) ClassUtils . getNewInstance ( loaderClassName ) ; rs . getLog ( ) . debug ( "ResourceLoader instantiated: " + loader . getClass ( ) . getName ( ) ) ; return loader ; } catch ( Exception e ) { rs . getLog ( ) . error ( "Problem instantiating the template loader.\n" + "Look at your properties file and make sure the\n" + "name of the template loader is correct. Here is the\n" + "error:" , e ) ; throw new Exception ( "Problem initializing template loader: " + loaderClassName + "\nError is: " + StringUtils . stackTrace ( e ) ) ; } } } 	1
package org . apache . velocity . app . tools ; import java . lang . reflect . Array ; import java . text . DateFormat ; import java . util . Date ; import java . util . List ; import org . apache . velocity . context . Context ; public class VelocityFormatter { Context context = null ; public VelocityFormatter ( Context context ) { this . context = context ; } public String formatShortDate ( Date date ) { return DateFormat . getDateInstance ( DateFormat . SHORT ) . format ( date ) ; } public String formatLongDate ( Date date ) { return DateFormat . getDateInstance ( DateFormat . LONG ) . format ( date ) ; } public String formatShortDateTime ( Date date ) { return DateFormat . getDateTimeInstance ( DateFormat . SHORT , DateFormat . SHORT ) . format ( date ) ; } public String formatLongDateTime ( Date date ) { return DateFormat . getDateTimeInstance ( DateFormat . LONG , DateFormat . LONG ) . format ( date ) ; } public String formatArray ( Object array ) { return formatArray ( array , ", " , " and " ) ; } public String formatArray ( Object array , String delim ) { return formatArray ( array , delim , delim ) ; } public String formatArray ( Object array , String delim , String finaldelim ) { StringBuffer sb = new StringBuffer ( ) ; int arrayLen = Array . getLength ( array ) ; for ( int i = 0 ; i < arrayLen ; i ++ ) { sb . append ( Array . get ( array , i ) . toString ( ) ) ; if ( i < arrayLen - 2 ) { sb . append ( delim ) ; } else if ( i < arrayLen - 1 ) { sb . append ( finaldelim ) ; } } return sb . toString ( ) ; } public String formatVector ( List list ) { return formatVector ( list , ", " , " and " ) ; } public String formatVector ( List list , String delim ) { return formatVector ( list , delim , delim ) ; } public String formatVector ( List list , String delim , String finaldelim ) { StringBuffer sb = new StringBuffer ( ) ; int size = list . size ( ) ; for ( int i = 0 ; i < size ; i ++ ) { sb . append ( list . get ( i ) ) ; if ( i < size - 2 ) { sb . append ( delim ) ; } else if ( i < size - 1 ) { sb . append ( finaldelim ) ; } } return sb . toString ( ) ; } public String limitLen ( int maxlen , String string ) { return limitLen ( maxlen , string , "..." ) ; } public String limitLen ( int maxlen , String string , String suffix ) { String ret = string ; if ( string . length ( ) > maxlen ) { ret = string . substring ( 0 , maxlen - suffix . length ( ) ) + suffix ; } return ret ; } public class VelocityAlternator { protected String [ ] alternates = null ; protected int current = 0 ; public VelocityAlternator ( String [ ] alternates ) { this . alternates = alternates ; } public String alternate ( ) { current ++ ; current %= alternates . length ; return "" ; } public String toString ( ) { return alternates [ current ] ; } } public class VelocityAutoAlternator extends VelocityAlternator { public VelocityAutoAlternator ( String [ ] alternates ) { super ( alternates ) ; } public final String toString ( ) { String s = alternates [ current ] ; alternate ( ) ; return s ; } } public String makeAlternator ( String name , String alt1 , String alt2 ) { String [ ] alternates = { alt1 , alt2 } ; context . put ( name , new VelocityAlternator ( alternates ) ) ; return "" ; } public String makeAlternator ( String name , String alt1 , String alt2 , String alt3 ) { String [ ] alternates = { alt1 , alt2 , alt3 } ; context . put ( name , new VelocityAlternator ( alternates ) ) ; return "" ; } public String makeAlternator ( String name , String alt1 , String alt2 , String alt3 , String alt4 ) { String [ ] alternates = { alt1 , alt2 , alt3 , alt4 } ; context . put ( name , new VelocityAlternator ( alternates ) ) ; return "" ; } public String makeAutoAlternator ( String name , String alt1 , String alt2 ) { String [ ] alternates = { alt1 , alt2 } ; context . put ( name , new VelocityAutoAlternator ( alternates ) ) ; return "" ; } public Object isNull ( Object o , Object dflt ) { if ( o == null ) { return dflt ; } else { return o ; } } } 	0
package org . apache . velocity . runtime . resource . loader ; import java . io . BufferedInputStream ; import java . io . File ; import java . io . FileInputStream ; import java . io . FileNotFoundException ; import java . io . IOException ; import java . io . InputStream ; import java . util . ArrayList ; import java . util . Collections ; import java . util . HashMap ; import java . util . List ; import java . util . Map ; import org . apache . commons . collections . ExtendedProperties ; import org . apache . velocity . exception . ResourceNotFoundException ; import org . apache . velocity . io . UnicodeInputStream ; import org . apache . velocity . runtime . resource . Resource ; import org . apache . velocity . util . StringUtils ; public class FileResourceLoader extends ResourceLoader { private List paths = new ArrayList ( ) ; private Map templatePaths = Collections . synchronizedMap ( new HashMap ( ) ) ; private boolean unicode = false ; public void init ( ExtendedProperties configuration ) { if ( log . isTraceEnabled ( ) ) { log . trace ( "FileResourceLoader : initialization starting." ) ; } paths . addAll ( configuration . getVector ( "path" ) ) ; unicode = configuration . getBoolean ( "unicode" , false ) ; if ( log . isDebugEnabled ( ) ) { log . debug ( "Do unicode file recognition:  " + unicode ) ; } StringUtils . trimStrings ( paths ) ; if ( log . isInfoEnabled ( ) ) { int sz = paths . size ( ) ; for ( int i = 0 ; i < sz ; i ++ ) { log . info ( "FileResourceLoader : adding path '" + ( String ) paths . get ( i ) + "'" ) ; } log . trace ( "FileResourceLoader : initialization complete." ) ; } } public InputStream getResourceStream ( String templateName ) throws ResourceNotFoundException { if ( org . apache . commons . lang . StringUtils . isEmpty ( templateName ) ) { throw new ResourceNotFoundException ( "Need to specify a file name or file path!" ) ; } String template = StringUtils . normalizePath ( templateName ) ; if ( template == null || template . length ( ) == 0 ) { String msg = "File resource error : argument " + template + " contains .. and may be trying to access " + "content outside of template root.  Rejected." ; log . error ( "FileResourceLoader : " + msg ) ; throw new ResourceNotFoundException ( msg ) ; } int size = paths . size ( ) ; for ( int i = 0 ; i < size ; i ++ ) { String path = ( String ) paths . get ( i ) ; InputStream inputStream = null ; try { inputStream = findTemplate ( path , template ) ; } catch ( IOException ioe ) { log . error ( "While loading Template " + template + ": " , ioe ) ; } if ( inputStream != null ) { templatePaths . put ( templateName , path ) ; return inputStream ; } } throw new ResourceNotFoundException ( "FileResourceLoader : cannot find " + template ) ; } private InputStream findTemplate ( final String path , final String template ) throws IOException { try { File file = getFile ( path , template ) ; if ( file . canRead ( ) ) { FileInputStream fis = null ; try { fis = new FileInputStream ( file . getAbsolutePath ( ) ) ; if ( unicode ) { UnicodeInputStream uis = null ; try { uis = new UnicodeInputStream ( fis , true ) ; if ( log . isDebugEnabled ( ) ) { log . debug ( "File Encoding for " + file + " is: " + uis . getEncodingFromStream ( ) ) ; } return new BufferedInputStream ( uis ) ; } catch ( IOException e ) { closeQuiet ( uis ) ; throw e ; } } else { return new BufferedInputStream ( fis ) ; } } catch ( IOException e ) { closeQuiet ( fis ) ; throw e ; } } else { return null ; } } catch ( FileNotFoundException fnfe ) { return null ; } } private void closeQuiet ( final InputStream is ) { if ( is != null ) { try { is . close ( ) ; } catch ( IOException ioe ) { } } } public boolean isSourceModified ( Resource resource ) { boolean modified = true ; String fileName = resource . getName ( ) ; String path = ( String ) templatePaths . get ( fileName ) ; File currentFile = null ; for ( int i = 0 ; currentFile == null && i < paths . size ( ) ; i ++ ) { String testPath = ( String ) paths . get ( i ) ; File testFile = getFile ( testPath , fileName ) ; if ( testFile . canRead ( ) ) { currentFile = testFile ; } } File file = getFile ( path , fileName ) ; if ( currentFile == null || ! file . exists ( ) ) { } else if ( currentFile . equals ( file ) && file . canRead ( ) ) { modified = ( file . lastModified ( ) != resource . getLastModified ( ) ) ; } return modified ; } public long getLastModified ( Resource resource ) { String path = ( String ) templatePaths . get ( resource . getName ( ) ) ; File file = getFile ( path , resource . getName ( ) ) ; if ( file . canRead ( ) ) { return file . lastModified ( ) ; } else { return 0 ; } } private File getFile ( String path , String template ) { File file = null ; if ( "" . equals ( path ) ) { file = new File ( template ) ; } else { if ( template . startsWith ( "/" ) ) { template = template . substring ( 1 ) ; } file = new File ( path , template ) ; } return file ; } } 	1
package org . apache . velocity . anakia ; import java . io . BufferedWriter ; import java . io . File ; import java . io . FileOutputStream ; import java . io . IOException ; import java . io . OutputStreamWriter ; import java . io . Writer ; import java . util . Iterator ; import java . util . LinkedList ; import java . util . List ; import java . util . StringTokenizer ; import org . apache . commons . collections . ExtendedProperties ; import org . apache . tools . ant . BuildException ; import org . apache . tools . ant . DirectoryScanner ; import org . apache . tools . ant . Project ; import org . apache . tools . ant . taskdefs . MatchingTask ; import org . apache . velocity . Template ; import org . apache . velocity . VelocityContext ; import org . apache . velocity . app . VelocityEngine ; import org . apache . velocity . runtime . RuntimeConstants ; import org . apache . velocity . util . StringUtils ; import org . jdom . Document ; import org . jdom . JDOMException ; import org . jdom . input . SAXBuilder ; import org . jdom . output . Format ; import org . xml . sax . SAXParseException ; public class AnakiaTask extends MatchingTask { SAXBuilder builder ; private File destDir = null ; File baseDir = null ; private String style = null ; private long styleSheetLastModified = 0 ; private String projectAttribute = null ; private File projectFile = null ; private long projectFileLastModified = 0 ; private boolean lastModifiedCheck = true ; private String extension = ".html" ; private String templatePath = null ; private File velocityPropertiesFile = null ; private VelocityEngine ve = new VelocityEngine ( ) ; private List contexts = new LinkedList ( ) ; public AnakiaTask ( ) { builder = new SAXBuilder ( ) ; builder . setFactory ( new AnakiaJDOMFactory ( ) ) ; } public void setBasedir ( File dir ) { baseDir = dir ; } public void setDestdir ( File dir ) { destDir = dir ; } public void setExtension ( String extension ) { this . extension = extension ; } public void setStyle ( String style ) { this . style = style ; } public void setProjectFile ( String projectAttribute ) { this . projectAttribute = projectAttribute ; } public void setTemplatePath ( File templatePath ) { try { this . templatePath = templatePath . getCanonicalPath ( ) ; } catch ( java . io . IOException ioe ) { throw new BuildException ( ioe ) ; } } public void setVelocityPropertiesFile ( File velocityPropertiesFile ) { this . velocityPropertiesFile = velocityPropertiesFile ; } public void setLastModifiedCheck ( String lastmod ) { if ( lastmod . equalsIgnoreCase ( "false" ) || lastmod . equalsIgnoreCase ( "no" ) || lastmod . equalsIgnoreCase ( "off" ) ) { this . lastModifiedCheck = false ; } } public void execute ( ) throws BuildException { DirectoryScanner scanner ; String [ ] list ; if ( baseDir == null ) { baseDir = project . resolveFile ( "." ) ; } if ( destDir == null ) { String msg = "destdir attribute must be set!" ; throw new BuildException ( msg ) ; } if ( style == null ) { throw new BuildException ( "style attribute must be set!" ) ; } if ( velocityPropertiesFile == null ) { velocityPropertiesFile = new File ( "velocity.properties" ) ; } if ( ! velocityPropertiesFile . exists ( ) && templatePath == null ) { throw new BuildException ( "No template path and could not " + "locate velocity.properties file: " + velocityPropertiesFile . getAbsolutePath ( ) ) ; } log ( "Transforming into: " + destDir . getAbsolutePath ( ) , Project . MSG_INFO ) ; if ( projectAttribute != null && projectAttribute . length ( ) > 0 ) { projectFile = new File ( baseDir , projectAttribute ) ; if ( projectFile . exists ( ) ) { projectFileLastModified = projectFile . lastModified ( ) ; } else { log ( "Project file is defined, but could not be located: " + projectFile . getAbsolutePath ( ) , Project . MSG_INFO ) ; projectFile = null ; } } Document projectDocument = null ; try { if ( velocityPropertiesFile . exists ( ) ) { String file = velocityPropertiesFile . getAbsolutePath ( ) ; ExtendedProperties config = new ExtendedProperties ( file ) ; ve . setExtendedProperties ( config ) ; } if ( templatePath != null && templatePath . length ( ) > 0 ) { ve . setProperty ( RuntimeConstants . FILE_RESOURCE_LOADER_PATH , templatePath ) ; } ve . init ( ) ; styleSheetLastModified = ve . getTemplate ( style ) . getLastModified ( ) ; if ( projectFile != null ) { projectDocument = builder . build ( projectFile ) ; } } catch ( Exception e ) { log ( "Error: " + e . toString ( ) , Project . MSG_INFO ) ; throw new BuildException ( e ) ; } scanner = getDirectoryScanner ( baseDir ) ; list = scanner . getIncludedFiles ( ) ; for ( int i = 0 ; i < list . length ; ++ i ) { process ( list [ i ] , projectDocument ) ; } } private void process ( String xmlFile , Document projectDocument ) throws BuildException { File outFile = null ; File inFile = null ; Writer writer = null ; try { inFile = new File ( baseDir , xmlFile ) ; outFile = new File ( destDir , xmlFile . substring ( 0 , xmlFile . lastIndexOf ( '.' ) ) + extension ) ; if ( lastModifiedCheck == false || ( inFile . lastModified ( ) > outFile . lastModified ( ) || styleSheetLastModified > outFile . lastModified ( ) || projectFileLastModified > outFile . lastModified ( ) || userContextsModifed ( outFile . lastModified ( ) ) ) ) { ensureDirectoryFor ( outFile ) ; log ( "Input:  " + xmlFile , Project . MSG_INFO ) ; Document root = builder . build ( inFile ) ; VelocityContext context = new VelocityContext ( ) ; String encoding = ( String ) ve . getProperty ( RuntimeConstants . OUTPUT_ENCODING ) ; if ( encoding == null || encoding . length ( ) == 0 || encoding . equals ( "8859-1" ) || encoding . equals ( "8859_1" ) ) { encoding = "ISO-8859-1" ; } Format f = Format . getRawFormat ( ) ; f . setEncoding ( encoding ) ; OutputWrapper ow = new OutputWrapper ( f ) ; context . put ( "root" , root . getRootElement ( ) ) ; context . put ( "xmlout" , ow ) ; context . put ( "relativePath" , getRelativePath ( xmlFile ) ) ; context . put ( "treeWalk" , new TreeWalker ( ) ) ; context . put ( "xpath" , new XPathTool ( ) ) ; context . put ( "escape" , new Escape ( ) ) ; context . put ( "date" , new java . util . Date ( ) ) ; if ( projectDocument != null ) { context . put ( "project" , projectDocument . getRootElement ( ) ) ; } for ( Iterator iter = contexts . iterator ( ) ; iter . hasNext ( ) ; ) { Context subContext = ( Context ) iter . next ( ) ; if ( subContext == null ) { throw new BuildException ( "Found an undefined SubContext!" ) ; } if ( subContext . getContextDocument ( ) == null ) { throw new BuildException ( "Could not build a subContext for " + subContext . getName ( ) ) ; } context . put ( subContext . getName ( ) , subContext . getContextDocument ( ) . getRootElement ( ) ) ; } writer = new BufferedWriter ( new OutputStreamWriter ( new FileOutputStream ( outFile ) , encoding ) ) ; Template template = ve . getTemplate ( style ) ; template . merge ( context , writer ) ; log ( "Output: " + outFile , Project . MSG_INFO ) ; } } catch ( JDOMException e ) { outFile . delete ( ) ; if ( e . getCause ( ) != null ) { Throwable rootCause = e . getCause ( ) ; if ( rootCause instanceof SAXParseException ) { System . out . println ( "" ) ; System . out . println ( "Error: " + rootCause . getMessage ( ) ) ; System . out . println ( "       Line: " + ( ( SAXParseException ) rootCause ) . getLineNumber ( ) + " Column: " + ( ( SAXParseException ) rootCause ) . getColumnNumber ( ) ) ; System . out . println ( "" ) ; } else { rootCause . printStackTrace ( ) ; } } else { e . printStackTrace ( ) ; } } catch ( Throwable e ) { if ( outFile != null ) { outFile . delete ( ) ; } e . printStackTrace ( ) ; } finally { if ( writer != null ) { try { writer . flush ( ) ; } catch ( IOException e ) { } try { writer . close ( ) ; } catch ( IOException e ) { } } } } private String getRelativePath ( String file ) { if ( file == null || file . length ( ) == 0 ) return "" ; StringTokenizer st = new StringTokenizer ( file , "/\\" ) ; int slashCount = st . countTokens ( ) - 1 ; StringBuffer sb = new StringBuffer ( ) ; for ( int i = 0 ; i < slashCount ; i ++ ) { sb . append ( "../" ) ; } if ( sb . toString ( ) . length ( ) > 0 ) { return StringUtils . chop ( sb . toString ( ) , 1 ) ; } return "." ; } private void ensureDirectoryFor ( File targetFile ) throws BuildException { File directory = new File ( targetFile . getParent ( ) ) ; if ( ! directory . exists ( ) ) { if ( ! directory . mkdirs ( ) ) { throw new BuildException ( "Unable to create directory: " + directory . getAbsolutePath ( ) ) ; } } } private boolean userContextsModifed ( long lastModified ) { for ( Iterator iter = contexts . iterator ( ) ; iter . hasNext ( ) ; ) { AnakiaTask . Context ctx = ( AnakiaTask . Context ) iter . next ( ) ; if ( ctx . getLastModified ( ) > lastModified ) { return true ; } } return false ; } public Context createContext ( ) { Context context = new Context ( ) ; contexts . add ( context ) ; return context ; } public class Context { private String name ; private Document contextDoc = null ; private String file ; public Context ( ) { } public String getName ( ) { return name ; } public void setName ( String name ) { if ( name . equals ( "relativePath" ) || name . equals ( "treeWalk" ) || name . equals ( "xpath" ) || name . equals ( "escape" ) || name . equals ( "date" ) || name . equals ( "project" ) ) { throw new IllegalArgumentException ( "Context name '" + name + "' is reserved by Anakia" ) ; } this . name = name ; } public void setFile ( String file ) { this . file = file ; } public long getLastModified ( ) { return new File ( baseDir , file ) . lastModified ( ) ; } public Document getContextDocument ( ) { if ( contextDoc == null ) { File contextFile = new File ( baseDir , file ) ; try { contextDoc = builder . build ( contextFile ) ; } catch ( Exception e ) { throw new BuildException ( e ) ; } } return contextDoc ; } } } 	0
package org . apache . velocity . app . event . implement ; import org . apache . commons . lang . StringEscapeUtils ; public class EscapeJavaScriptReference extends EscapeReference { protected String escape ( Object text ) { return StringEscapeUtils . escapeJavaScript ( text . toString ( ) ) ; } protected String getMatchAttribute ( ) { return "eventhandler.escape.javascript.match" ; } } 	1
package org . apache . velocity . context ; public interface InternalContextAdapter extends InternalHousekeepingContext , Context , InternalWrapperContext , InternalEventContext { } 	0
package org . apache . velocity . runtime . parser . node ; import java . io . IOException ; import java . io . Writer ; import org . apache . commons . lang . builder . ToStringBuilder ; import org . apache . velocity . context . InternalContextAdapter ; import org . apache . velocity . exception . MethodInvocationException ; import org . apache . velocity . exception . ParseErrorException ; import org . apache . velocity . exception . ResourceNotFoundException ; import org . apache . velocity . exception . TemplateInitException ; import org . apache . velocity . runtime . directive . Directive ; import org . apache . velocity . runtime . parser . ParseException ; import org . apache . velocity . runtime . parser . Parser ; import org . apache . velocity . runtime . parser . ParserVisitor ; import org . apache . velocity . util . ExceptionUtils ; public class ASTDirective extends SimpleNode { private Directive directive = null ; private String directiveName = "" ; private boolean isDirective ; public ASTDirective ( int id ) { super ( id ) ; } public ASTDirective ( Parser p , int id ) { super ( p , id ) ; } public Object jjtAccept ( ParserVisitor visitor , Object data ) { return visitor . visit ( this , data ) ; } public Object init ( InternalContextAdapter context , Object data ) throws TemplateInitException { super . init ( context , data ) ; if ( parser . isDirective ( directiveName ) ) { isDirective = true ; try { directive = ( Directive ) parser . getDirective ( directiveName ) . getClass ( ) . newInstance ( ) ; } catch ( InstantiationException e ) { throw ExceptionUtils . createRuntimeException ( "Couldn't initialize " + "directive of class " + parser . getDirective ( directiveName ) . getClass ( ) . getName ( ) , e ) ; } catch ( IllegalAccessException e ) { throw ExceptionUtils . createRuntimeException ( "Couldn't initialize " + "directive of class " + parser . getDirective ( directiveName ) . getClass ( ) . getName ( ) , e ) ; } directive . init ( rsvc , context , this ) ; directive . setLocation ( getLine ( ) , getColumn ( ) ) ; } else if ( rsvc . isVelocimacro ( directiveName , context . getCurrentTemplateName ( ) ) ) { isDirective = true ; directive = rsvc . getVelocimacro ( directiveName , context . getCurrentTemplateName ( ) ) ; try { directive . init ( rsvc , context , this ) ; } catch ( TemplateInitException die ) { throw new TemplateInitException ( die . getMessage ( ) , ( ParseException ) die . getWrappedThrowable ( ) , die . getTemplateName ( ) , die . getColumnNumber ( ) + getColumn ( ) , die . getLineNumber ( ) + getLine ( ) ) ; } directive . setLocation ( getLine ( ) , getColumn ( ) ) ; } else { isDirective = false ; } return data ; } public boolean render ( InternalContextAdapter context , Writer writer ) throws IOException , MethodInvocationException , ResourceNotFoundException , ParseErrorException { if ( isDirective ) { directive . render ( context , writer , this ) ; } else { if ( context . getAllowRendering ( ) ) { writer . write ( "#" ) ; writer . write ( directiveName ) ; } } return true ; } public void setDirectiveName ( String str ) { directiveName = str ; } public String getDirectiveName ( ) { return directiveName ; } public String toString ( ) { return new ToStringBuilder ( this ) . appendSuper ( super . toString ( ) ) . append ( "directiveName" , getDirectiveName ( ) ) . toString ( ) ; } } 	1
package org . apache . velocity . runtime . parser . node ; import org . apache . velocity . runtime . parser . Parser ; import org . apache . velocity . runtime . parser . ParserVisitor ; public class ASTWord extends SimpleNode { public ASTWord ( int id ) { super ( id ) ; } public ASTWord ( Parser p , int id ) { super ( p , id ) ; } public Object jjtAccept ( ParserVisitor visitor , Object data ) { return visitor . visit ( this , data ) ; } } 	0
package org . apache . velocity . app . event ; import java . util . Iterator ; import org . apache . velocity . context . InternalContextAdapter ; import org . apache . velocity . runtime . RuntimeServices ; import org . apache . velocity . util . ExceptionUtils ; import org . apache . velocity . util . introspection . Info ; public class EventHandlerUtil { public static Object referenceInsert ( RuntimeServices rsvc , InternalContextAdapter context , String reference , Object value ) { EventCartridge ev1 = rsvc . getApplicationEventCartridge ( ) ; Iterator applicationEventHandlerIterator = ( ev1 == null ) ? null : ev1 . getReferenceInsertionEventHandlers ( ) ; EventCartridge ev2 = context . getEventCartridge ( ) ; initializeEventCartridge ( rsvc , ev2 ) ; Iterator contextEventHandlerIterator = ( ev2 == null ) ? null : ev2 . getReferenceInsertionEventHandlers ( ) ; try { EventHandlerMethodExecutor methodExecutor = new ReferenceInsertionEventHandler . referenceInsertExecutor ( context , reference , value ) ; callEventHandlers ( applicationEventHandlerIterator , contextEventHandlerIterator , methodExecutor ) ; return methodExecutor . getReturnValue ( ) ; } catch ( RuntimeException e ) { throw e ; } catch ( Exception e ) { throw ExceptionUtils . createRuntimeException ( "Exception in event handler." , e ) ; } } public static boolean shouldLogOnNullSet ( RuntimeServices rsvc , InternalContextAdapter context , String lhs , String rhs ) { EventCartridge ev1 = rsvc . getApplicationEventCartridge ( ) ; Iterator applicationEventHandlerIterator = ( ev1 == null ) ? null : ev1 . getNullSetEventHandlers ( ) ; EventCartridge ev2 = context . getEventCartridge ( ) ; initializeEventCartridge ( rsvc , ev2 ) ; Iterator contextEventHandlerIterator = ( ev2 == null ) ? null : ev2 . getNullSetEventHandlers ( ) ; try { EventHandlerMethodExecutor methodExecutor = new NullSetEventHandler . ShouldLogOnNullSetExecutor ( context , lhs , rhs ) ; callEventHandlers ( applicationEventHandlerIterator , contextEventHandlerIterator , methodExecutor ) ; return ( ( Boolean ) methodExecutor . getReturnValue ( ) ) . booleanValue ( ) ; } catch ( RuntimeException e ) { throw e ; } catch ( Exception e ) { throw ExceptionUtils . createRuntimeException ( "Exception in event handler." , e ) ; } } public static Object methodException ( RuntimeServices rsvc , InternalContextAdapter context , Class claz , String method , Exception e ) throws Exception { EventCartridge ev1 = rsvc . getApplicationEventCartridge ( ) ; Iterator applicationEventHandlerIterator = ( ev1 == null ) ? null : ev1 . getMethodExceptionEventHandlers ( ) ; EventCartridge ev2 = context . getEventCartridge ( ) ; initializeEventCartridge ( rsvc , ev2 ) ; Iterator contextEventHandlerIterator = ( ev2 == null ) ? null : ev2 . getMethodExceptionEventHandlers ( ) ; EventHandlerMethodExecutor methodExecutor = new MethodExceptionEventHandler . MethodExceptionExecutor ( context , claz , method , e ) ; if ( ( ( applicationEventHandlerIterator == null ) || ! applicationEventHandlerIterator . hasNext ( ) ) && ( ( contextEventHandlerIterator == null ) || ! contextEventHandlerIterator . hasNext ( ) ) ) { throw e ; } callEventHandlers ( applicationEventHandlerIterator , contextEventHandlerIterator , methodExecutor ) ; return methodExecutor . getReturnValue ( ) ; } public static String includeEvent ( RuntimeServices rsvc , InternalContextAdapter context , String includeResourcePath , String currentResourcePath , String directiveName ) { EventCartridge ev1 = rsvc . getApplicationEventCartridge ( ) ; Iterator applicationEventHandlerIterator = ( ev1 == null ) ? null : ev1 . getIncludeEventHandlers ( ) ; EventCartridge ev2 = context . getEventCartridge ( ) ; initializeEventCartridge ( rsvc , ev2 ) ; Iterator contextEventHandlerIterator = ( ev2 == null ) ? null : ev2 . getIncludeEventHandlers ( ) ; try { EventHandlerMethodExecutor methodExecutor = new IncludeEventHandler . IncludeEventExecutor ( context , includeResourcePath , currentResourcePath , directiveName ) ; callEventHandlers ( applicationEventHandlerIterator , contextEventHandlerIterator , methodExecutor ) ; return ( String ) methodExecutor . getReturnValue ( ) ; } catch ( RuntimeException e ) { throw e ; } catch ( Exception e ) { throw ExceptionUtils . createRuntimeException ( "Exception in event handler." , e ) ; } } public static Object invalidGetMethod ( RuntimeServices rsvc , InternalContextAdapter context , String reference , Object object , String property , Info info ) { return invalidReferenceHandlerCall ( new InvalidReferenceEventHandler . InvalidGetMethodExecutor ( context , reference , object , property , info ) , rsvc , context ) ; } public static void invalidSetMethod ( RuntimeServices rsvc , InternalContextAdapter context , String leftreference , String rightreference , Info info ) { invalidReferenceHandlerCall ( new InvalidReferenceEventHandler . InvalidSetMethodExecutor ( context , leftreference , rightreference , info ) , rsvc , context ) ; } public static Object invalidMethod ( RuntimeServices rsvc , InternalContextAdapter context , String reference , Object object , String method , Info info ) { return invalidReferenceHandlerCall ( new InvalidReferenceEventHandler . InvalidMethodExecutor ( context , reference , object , method , info ) , rsvc , context ) ; } public static Object invalidReferenceHandlerCall ( EventHandlerMethodExecutor methodExecutor , RuntimeServices rsvc , InternalContextAdapter context ) { EventCartridge ev1 = rsvc . getApplicationEventCartridge ( ) ; Iterator applicationEventHandlerIterator = ( ev1 == null ) ? null : ev1 . getInvalidReferenceEventHandlers ( ) ; EventCartridge ev2 = context . getEventCartridge ( ) ; initializeEventCartridge ( rsvc , ev2 ) ; Iterator contextEventHandlerIterator = ( ev2 == null ) ? null : ev2 . getInvalidReferenceEventHandlers ( ) ; try { callEventHandlers ( applicationEventHandlerIterator , contextEventHandlerIterator , methodExecutor ) ; return methodExecutor . getReturnValue ( ) ; } catch ( RuntimeException e ) { throw e ; } catch ( Exception e ) { throw ExceptionUtils . createRuntimeException ( "Exception in event handler." , e ) ; } } private static void initializeEventCartridge ( RuntimeServices rsvc , EventCartridge eventCartridge ) { if ( eventCartridge != null ) { try { eventCartridge . initialize ( rsvc ) ; } catch ( Exception e ) { throw ExceptionUtils . createRuntimeException ( "Couldn't initialize event cartridge : " , e ) ; } } } private static void callEventHandlers ( Iterator applicationEventHandlerIterator , Iterator contextEventHandlerIterator , EventHandlerMethodExecutor eventExecutor ) throws Exception { iterateOverEventHandlers ( applicationEventHandlerIterator , eventExecutor ) ; iterateOverEventHandlers ( contextEventHandlerIterator , eventExecutor ) ; } private static void iterateOverEventHandlers ( Iterator handlerIterator , EventHandlerMethodExecutor eventExecutor ) throws Exception { if ( handlerIterator != null ) { for ( Iterator i = handlerIterator ; i . hasNext ( ) ; ) { EventHandler eventHandler = ( EventHandler ) i . next ( ) ; if ( ! eventExecutor . isDone ( ) ) { eventExecutor . execute ( eventHandler ) ; } } } } } 	1
package org . apache . velocity . runtime . parser . node ; import java . io . Writer ; import java . io . IOException ; import org . apache . velocity . context . InternalContextAdapter ; import org . apache . velocity . exception . TemplateInitException ; import org . apache . velocity . runtime . parser . Parser ; import org . apache . velocity . runtime . parser . ParserVisitor ; import org . apache . velocity . runtime . parser . Token ; public class ASTText extends SimpleNode { private char [ ] ctext ; public ASTText ( int id ) { super ( id ) ; } public ASTText ( Parser p , int id ) { super ( p , id ) ; } public Object jjtAccept ( ParserVisitor visitor , Object data ) { return visitor . visit ( this , data ) ; } public Object init ( InternalContextAdapter context , Object data ) throws TemplateInitException { Token t = getFirstToken ( ) ; String text = NodeUtils . tokenLiteral ( t ) ; ctext = text . toCharArray ( ) ; return data ; } public boolean render ( InternalContextAdapter context , Writer writer ) throws IOException { if ( context . getAllowRendering ( ) ) { writer . write ( ctext ) ; } return true ; } } 	0
package org . apache . velocity . context ; public abstract class AbstractContext extends InternalContextBase implements Context { private Context innerContext = null ; public abstract Object internalGet ( String key ) ; public abstract Object internalPut ( String key , Object value ) ; public abstract boolean internalContainsKey ( Object key ) ; public abstract Object [ ] internalGetKeys ( ) ; public abstract Object internalRemove ( Object key ) ; public AbstractContext ( ) { } public AbstractContext ( Context inner ) { innerContext = inner ; if ( innerContext instanceof InternalEventContext ) { attachEventCartridge ( ( ( InternalEventContext ) innerContext ) . getEventCartridge ( ) ) ; } } public Object put ( String key , Object value ) { if ( key == null ) { return null ; } else if ( value == null ) { return null ; } return internalPut ( key , value ) ; } public Object get ( String key ) { if ( key == null ) { return null ; } Object o = internalGet ( key ) ; if ( o == null && innerContext != null ) { o = innerContext . get ( key ) ; } return o ; } public boolean containsKey ( Object key ) { if ( key == null ) { return false ; } return internalContainsKey ( key ) ; } public Object [ ] getKeys ( ) { return internalGetKeys ( ) ; } public Object remove ( Object key ) { if ( key == null ) { return null ; } return internalRemove ( key ) ; } public Context getChainedContext ( ) { return innerContext ; } } 	1
package org . apache . velocity . runtime . resource ; import org . apache . velocity . runtime . RuntimeServices ; import org . apache . velocity . exception . ResourceNotFoundException ; import org . apache . velocity . exception . ParseErrorException ; public interface ResourceManager { public static final int RESOURCE_TEMPLATE = 1 ; public static final int RESOURCE_CONTENT = 2 ; public void initialize ( RuntimeServices rs ) throws Exception ; public Resource getResource ( String resourceName , int resourceType , String encoding ) throws ResourceNotFoundException , ParseErrorException , Exception ; public String getLoaderNameForResource ( String resourceName ) ; } 	0
package org . apache . velocity . runtime . parser . node ; import java . util . Map ; import org . apache . velocity . runtime . log . Log ; public class MapGetExecutor extends AbstractExecutor { private final String property ; public MapGetExecutor ( final Log log , final Class clazz , final String property ) { this . log = log ; this . property = property ; discover ( clazz ) ; } protected void discover ( final Class clazz ) { Class [ ] interfaces = clazz . getInterfaces ( ) ; for ( int i = 0 ; i < interfaces . length ; i ++ ) { if ( interfaces [ i ] . equals ( Map . class ) ) { try { if ( property != null ) { setMethod ( Map . class . getMethod ( "get" , new Class [ ] { Object . class } ) ) ; } } catch ( RuntimeException e ) { throw e ; } catch ( Exception e ) { log . error ( "While looking for get('" + property + "') method:" , e ) ; } break ; } } } public Object execute ( final Object o ) { return ( ( Map ) o ) . get ( property ) ; } } 	1
package org . apache . velocity . runtime . parser . node ; import org . apache . velocity . context . InternalContextAdapter ; import org . apache . velocity . exception . MethodInvocationException ; import org . apache . velocity . runtime . parser . Parser ; import org . apache . velocity . runtime . parser . ParserVisitor ; public class ASTNotNode extends SimpleNode { public ASTNotNode ( int id ) { super ( id ) ; } public ASTNotNode ( Parser p , int id ) { super ( p , id ) ; } public Object jjtAccept ( ParserVisitor visitor , Object data ) { return visitor . visit ( this , data ) ; } public boolean evaluate ( InternalContextAdapter context ) throws MethodInvocationException { if ( jjtGetChild ( 0 ) . evaluate ( context ) ) return false ; else return true ; } public Object value ( InternalContextAdapter context ) throws MethodInvocationException { return ( jjtGetChild ( 0 ) . evaluate ( context ) ? Boolean . FALSE : Boolean . TRUE ) ; } } 	0
package org . apache . velocity . runtime . log ; import java . io . IOException ; import java . lang . reflect . Field ; import org . apache . log4j . Level ; import org . apache . log4j . Logger ; import org . apache . log4j . PatternLayout ; import org . apache . log4j . RollingFileAppender ; import org . apache . velocity . runtime . RuntimeConstants ; import org . apache . velocity . runtime . RuntimeServices ; import org . apache . velocity . util . ExceptionUtils ; public class Log4JLogChute implements LogChute { public static final String RUNTIME_LOG_LOG4J_LOGGER = "runtime.log.logsystem.log4j.logger" ; private RuntimeServices rsvc = null ; private boolean hasTrace = false ; private RollingFileAppender appender = null ; protected Logger logger = null ; public void init ( RuntimeServices rs ) throws Exception { rsvc = rs ; String name = ( String ) rsvc . getProperty ( RUNTIME_LOG_LOG4J_LOGGER ) ; if ( name != null ) { logger = Logger . getLogger ( name ) ; log ( DEBUG_ID , "Log4JLogChute using logger '" + name + '\'' ) ; } else { logger = Logger . getLogger ( this . getClass ( ) . getName ( ) ) ; String file = rsvc . getString ( RuntimeConstants . RUNTIME_LOG ) ; if ( file != null && file . length ( ) > 0 ) { initAppender ( file ) ; } } try { Field traceLevel = Level . class . getField ( "TRACE" ) ; hasTrace = true ; } catch ( NoSuchFieldException e ) { log ( DEBUG_ID , "The version of log4j being used does not support the \"trace\" level." ) ; } } private void initAppender ( String file ) throws Exception { try { PatternLayout layout = new PatternLayout ( "%d - %m%n" ) ; this . appender = new RollingFileAppender ( layout , file , true ) ; appender . setMaxBackupIndex ( 1 ) ; appender . setMaximumFileSize ( 100000 ) ; logger . setAdditivity ( false ) ; logger . setLevel ( Level . DEBUG ) ; logger . addAppender ( appender ) ; log ( DEBUG_ID , "Log4JLogChute initialized using file '" + file + '\'' ) ; } catch ( IOException ioe ) { rsvc . getLog ( ) . warn ( "Could not create file appender '" + file + '\'' , ioe ) ; throw ExceptionUtils . createRuntimeException ( "Error configuring Log4JLogChute : " , ioe ) ; } } public void log ( int level , String message ) { switch ( level ) { case LogChute . WARN_ID : logger . warn ( message ) ; break ; case LogChute . INFO_ID : logger . info ( message ) ; break ; case LogChute . DEBUG_ID : logger . debug ( message ) ; break ; case LogChute . TRACE_ID : if ( hasTrace ) { logger . trace ( message ) ; } else { logger . debug ( message ) ; } break ; case LogChute . ERROR_ID : logger . error ( message ) ; break ; default : logger . debug ( message ) ; break ; } } public void log ( int level , String message , Throwable t ) { switch ( level ) { case LogChute . WARN_ID : logger . warn ( message , t ) ; break ; case LogChute . INFO_ID : logger . info ( message , t ) ; break ; case LogChute . DEBUG_ID : logger . debug ( message , t ) ; break ; case LogChute . TRACE_ID : if ( hasTrace ) { logger . trace ( message , t ) ; } else { logger . debug ( message , t ) ; } break ; case LogChute . ERROR_ID : logger . error ( message , t ) ; break ; default : logger . debug ( message , t ) ; break ; } } public boolean isLevelEnabled ( int level ) { switch ( level ) { case LogChute . DEBUG_ID : return logger . isDebugEnabled ( ) ; case LogChute . INFO_ID : return logger . isInfoEnabled ( ) ; case LogChute . TRACE_ID : if ( hasTrace ) { return logger . isTraceEnabled ( ) ; } else { return logger . isDebugEnabled ( ) ; } case LogChute . WARN_ID : return logger . isEnabledFor ( Level . WARN ) ; case LogChute . ERROR_ID : return logger . isEnabledFor ( Level . ERROR ) ; default : return true ; } } protected void finalize ( ) throws Throwable { shutdown ( ) ; } public void shutdown ( ) { if ( appender != null ) { logger . removeAppender ( appender ) ; appender . close ( ) ; appender = null ; } } } 	1
package org . apache . velocity . anakia ; import com . werken . xpath . XPath ; import java . util . Map ; import java . util . WeakHashMap ; class XPathCache { private static final Map XPATH_CACHE = new WeakHashMap ( ) ; private XPathCache ( ) { } static XPath getXPath ( String xpathString ) { XPath xpath = null ; synchronized ( XPATH_CACHE ) { xpath = ( XPath ) XPATH_CACHE . get ( xpathString ) ; if ( xpath == null ) { xpath = new XPath ( xpathString ) ; XPATH_CACHE . put ( xpathString , xpath ) ; } } return xpath ; } } 	0
package org . apache . velocity . util ; public interface TemplateNumber { public Number getAsNumber ( ) ; } 	1
package org . apache . velocity . runtime . log ; public class Log4JLogSystem extends Log4JLogChute implements LogSystem { public void logVelocityMessage ( int level , String message ) { log ( level , message ) ; } } 	0
package org . apache . velocity . runtime . parser . node ; import org . apache . velocity . context . InternalContextAdapter ; import org . apache . velocity . runtime . parser . Parser ; import org . apache . velocity . runtime . parser . ParserVisitor ; import org . apache . velocity . exception . MethodInvocationException ; import org . apache . velocity . util . TemplateNumber ; public class ASTGENode extends SimpleNode { public ASTGENode ( int id ) { super ( id ) ; } public ASTGENode ( Parser p , int id ) { super ( p , id ) ; } public Object jjtAccept ( ParserVisitor visitor , Object data ) { return visitor . visit ( this , data ) ; } public boolean evaluate ( InternalContextAdapter context ) throws MethodInvocationException { Object left = jjtGetChild ( 0 ) . value ( context ) ; Object right = jjtGetChild ( 1 ) . value ( context ) ; if ( left == null || right == null ) { log . error ( ( left == null ? "Left" : "Right" ) + " side (" + jjtGetChild ( ( left == null ? 0 : 1 ) ) . literal ( ) + ") of '>=' operation has null value." + " Operation not possible. " + context . getCurrentTemplateName ( ) + " [line " + getLine ( ) + ", column " + getColumn ( ) + "]" ) ; return false ; } if ( left instanceof TemplateNumber ) { left = ( ( TemplateNumber ) left ) . getAsNumber ( ) ; } if ( right instanceof TemplateNumber ) { right = ( ( TemplateNumber ) right ) . getAsNumber ( ) ; } if ( ! ( left instanceof Number ) || ! ( right instanceof Number ) ) { log . error ( ( ! ( left instanceof Number ) ? "Left" : "Right" ) + " side of '>=' operation is not a Number. " + context . getCurrentTemplateName ( ) + " [line " + getLine ( ) + ", column " + getColumn ( ) + "]" ) ; return false ; } return MathUtils . compare ( ( Number ) left , ( Number ) right ) >= 0 ; } public Object value ( InternalContextAdapter context ) throws MethodInvocationException { boolean val = evaluate ( context ) ; return val ? Boolean . TRUE : Boolean . FALSE ; } } 	1
package org . apache . velocity . util . introspection ; public interface VelMethod { public Object invoke ( Object o , Object [ ] params ) throws Exception ; public boolean isCacheable ( ) ; public String getMethodName ( ) ; public Class getReturnType ( ) ; } 	0
package org . apache . velocity . runtime . parser . node ; import org . apache . velocity . context . InternalContextAdapter ; import org . apache . velocity . runtime . parser . Parser ; import org . apache . velocity . runtime . parser . ParserVisitor ; import org . apache . velocity . exception . MethodInvocationException ; import org . apache . velocity . util . TemplateNumber ; public class ASTNENode extends SimpleNode { public ASTNENode ( int id ) { super ( id ) ; } public ASTNENode ( Parser p , int id ) { super ( p , id ) ; } public Object jjtAccept ( ParserVisitor visitor , Object data ) { return visitor . visit ( this , data ) ; } public boolean evaluate ( InternalContextAdapter context ) throws MethodInvocationException { Object left = jjtGetChild ( 0 ) . value ( context ) ; Object right = jjtGetChild ( 1 ) . value ( context ) ; if ( left == null || right == null ) { log . error ( ( left == null ? "Left" : "Right" ) + " side (" + jjtGetChild ( ( left == null ? 0 : 1 ) ) . literal ( ) + ") of '!=' operation has null value." + " Operation not possible. " + context . getCurrentTemplateName ( ) + " [line " + getLine ( ) + ", column " + getColumn ( ) + "]" ) ; return false ; } if ( left instanceof TemplateNumber ) { left = ( ( TemplateNumber ) left ) . getAsNumber ( ) ; } if ( right instanceof TemplateNumber ) { right = ( ( TemplateNumber ) right ) . getAsNumber ( ) ; } if ( left instanceof Number && right instanceof Number ) { return MathUtils . compare ( ( Number ) left , ( Number ) right ) != 0 ; } if ( left . getClass ( ) . isAssignableFrom ( right . getClass ( ) ) || right . getClass ( ) . isAssignableFrom ( left . getClass ( ) ) ) { return ! left . equals ( right ) ; } else { if ( ( left . toString ( ) == null ) || ( right . toString ( ) == null ) ) { boolean culprit = ( left . toString ( ) == null ) ; log . error ( ( culprit ? "Left" : "Right" ) + " string side " + "String representation (" + jjtGetChild ( ( culprit ? 0 : 1 ) ) . literal ( ) + ") of '!=' operation has null value." + " Operation not possible. " + context . getCurrentTemplateName ( ) + " [line " + getLine ( ) + ", column " + getColumn ( ) + "]" ) ; return false ; } else { return ! left . toString ( ) . equals ( right . toString ( ) ) ; } } } public Object value ( InternalContextAdapter context ) throws MethodInvocationException { boolean val = evaluate ( context ) ; return val ? Boolean . TRUE : Boolean . FALSE ; } } 	1
package org . apache . velocity . convert ; import java . io . File ; import java . io . FileWriter ; import java . io . IOException ; import org . apache . oro . text . perl . Perl5Util ; import org . apache . velocity . util . StringUtils ; import org . apache . tools . ant . DirectoryScanner ; public class WebMacro { protected static final String VM_EXT = ".vm" ; protected static final String WM_EXT = ".wm" ; protected static String [ ] perLineREs = { "#if\\s*[(]\\s*(.*\\S)\\s*[)]\\s*(#begin|{)[ \\t]?" , "#if( $1 )" , "[ \\t]?(#end|})[ \\t]*\n(\\s*)#else\\s*(#begin|{)[ \\t]?(\\w)" , "$2#else#**#$4" , "[ \\t]?(#end|})[ \\t]*\n(\\s*)#else\\s*(#begin|{)[ \\t]?" , "$2#else" , "(#end|})(\\s*#else)\\s*(#begin|{)[ \\t]?" , "$1\n$2" , "#foreach\\s+(\\$\\w+)\\s+in\\s+(\\$[^\\s#]+)\\s*(#begin|{)[ \\t]?" , "#foreach( $1 in $2 )" , "#set\\s+(\\$[^\\s=]+)\\s*=\\s*([\\S \\t]+)" , "#set( $1 = $2 )" , "(##[# \\t\\w]*)\\)" , ")$1" , "#parse\\s+([^\\s#]+)[ \\t]?" , "#parse( $1 )" , "#include\\s+([^\\s#]+)[ \\t]?" , "#include( $1 )" , "\\$\\(([^\\)]+)\\)" , "${$1}" , "\\${([^}\\(]+)\\(([^}]+)}\\)" , "${$1($2)}" , "\\$_" , "$l_" , "\\${(_[^}]+)}" , "${l$1}" , "(#set\\s*\\([^;]+);(\\s*\\))" , "$1$2" , "(^|[^\\\\])\\$(\\w[^=\n;'\"]*);" , "$1${$2}" , "\\.wm" , ".vm" } ; public void convert ( String target ) { File file = new File ( target ) ; if ( ! file . exists ( ) ) { throw new RuntimeException ( "The specified template or directory does not exist" ) ; } if ( file . isDirectory ( ) ) { String basedir = file . getAbsolutePath ( ) ; String newBasedir = basedir + VM_EXT ; DirectoryScanner ds = new DirectoryScanner ( ) ; ds . setBasedir ( basedir ) ; ds . addDefaultExcludes ( ) ; ds . scan ( ) ; String [ ] files = ds . getIncludedFiles ( ) ; for ( int i = 0 ; i < files . length ; i ++ ) { writeTemplate ( files [ i ] , basedir , newBasedir ) ; } } else { writeTemplate ( file . getAbsolutePath ( ) , "" , "" ) ; } } private boolean writeTemplate ( String file , String basedir , String newBasedir ) { if ( file . indexOf ( WM_EXT ) < 0 ) { return false ; } System . out . println ( "Converting " + file + "..." ) ; String template = file ; String newTemplate = convertName ( file ) ; if ( basedir . length ( ) > 0 ) { String templateDir = newBasedir + extractPath ( file ) ; File outputDirectory = new File ( templateDir ) ; template = basedir + File . separator + file ; if ( ! outputDirectory . exists ( ) ) { outputDirectory . mkdirs ( ) ; } newTemplate = newBasedir + File . separator + convertName ( file ) ; } String convertedTemplate = convertTemplate ( template ) ; FileWriter fw = null ; try { fw = new FileWriter ( newTemplate ) ; fw . write ( convertedTemplate ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; } finally { if ( fw != null ) { try { fw . close ( ) ; } catch ( IOException io ) { } } } return true ; } private final String extractPath ( String file ) { int lastSepPos = file . lastIndexOf ( File . separator ) ; return ( lastSepPos == - 1 ? "" : File . separator + file . substring ( 0 , lastSepPos ) ) ; } private String convertName ( String name ) { return ( name . indexOf ( WM_EXT ) < 0 ) ? name : name . substring ( 0 , name . indexOf ( WM_EXT ) ) + VM_EXT ; } private static final void usage ( ) { System . err . println ( "Usage: convert-wm <template.wm | directory>" ) ; } public String convertTemplate ( String template ) { String contents = StringUtils . fileContentsToString ( template ) ; if ( ! contents . endsWith ( "\n" ) ) { contents += "\n" ; } Perl5Util perl = new Perl5Util ( ) ; for ( int i = 0 ; i < perLineREs . length ; i += 2 ) { contents = perl . substitute ( makeSubstRE ( i ) , contents ) ; } if ( perl . match ( "m/javascript/i" , contents ) ) { contents = perl . substitute ( "s/\n}/\n#end/g" , contents ) ; } else { contents = perl . substitute ( "s/(\n\\s*)}/$1#end/g" , contents ) ; contents = perl . substitute ( "s/#end\\s*\n\\s*#else/#else/g" , contents ) ; } return contents ; } private final String makeSubstRE ( int i ) { return ( "s/" + perLineREs [ i ] + '/' + perLineREs [ i + 1 ] + "/g" ) ; } public static void main ( String [ ] args ) { if ( args . length > 0 ) { for ( int x = 0 ; x < args . length ; x ++ ) { WebMacro converter = new WebMacro ( ) ; converter . convert ( args [ x ] ) ; } } else { usage ( ) ; } } } 	0
package org . apache . velocity . runtime . parser ; import java . io . * ; import java . util . * ; import org . apache . velocity . runtime . RuntimeServices ; import org . apache . velocity . runtime . parser . node . * ; import org . apache . velocity . runtime . directive . Directive ; import org . apache . velocity . runtime . directive . Macro ; import org . apache . velocity . runtime . directive . MacroParseException ; import org . apache . velocity . util . StringUtils ; public class Parser implements ParserTreeConstants , ParserConstants { protected JJTParserState jjtree = new JJTParserState ( ) ; private Hashtable directives = new Hashtable ( 0 ) ; String currentTemplateName = "" ; VelocityCharStream velcharstream = null ; private RuntimeServices rsvc = null ; public Parser ( RuntimeServices rs ) { this ( new VelocityCharStream ( new ByteArrayInputStream ( "\n" . getBytes ( ) ) , 1 , 1 ) ) ; velcharstream = new VelocityCharStream ( new ByteArrayInputStream ( "\n" . getBytes ( ) ) , 1 , 1 ) ; rsvc = rs ; } public SimpleNode parse ( Reader reader , String templateName ) throws ParseException { SimpleNode sn = null ; currentTemplateName = templateName ; try { token_source . clearStateVars ( ) ; velcharstream . ReInit ( reader , 1 , 1 ) ; ReInit ( velcharstream ) ; sn = process ( ) ; } catch ( MacroParseException mee ) { rsvc . getLog ( ) . error ( "Parser Error: #macro() : " + templateName , mee ) ; throw mee ; } catch ( ParseException pe ) { rsvc . getLog ( ) . error ( "Parser Exception: " + templateName , pe ) ; throw new TemplateParseException ( pe . currentToken , pe . expectedTokenSequences , pe . tokenImage , currentTemplateName ) ; } catch ( TokenMgrError tme ) { throw new ParseException ( "Lexical error: " + tme . toString ( ) ) ; } catch ( Exception e ) { rsvc . getLog ( ) . error ( "Parser Error: " + templateName , e ) ; } currentTemplateName = "" ; return sn ; } public void setDirectives ( Hashtable directives ) { this . directives = directives ; } public Directive getDirective ( String directive ) { return ( Directive ) directives . get ( directive ) ; } public boolean isDirective ( String directive ) { return directives . containsKey ( directive ) ; } private String escapedDirective ( String strImage ) { int iLast = strImage . lastIndexOf ( "\\" ) ; String strDirective = strImage . substring ( iLast + 1 ) ; boolean bRecognizedDirective = false ; if ( isDirective ( strDirective . substring ( 1 ) ) ) { bRecognizedDirective = true ; } else if ( rsvc . isVelocimacro ( strDirective . substring ( 1 ) , currentTemplateName ) ) { bRecognizedDirective = true ; } else { if ( strDirective . substring ( 1 ) . equals ( "if" ) || strDirective . substring ( 1 ) . equals ( "end" ) || strDirective . substring ( 1 ) . equals ( "set" ) || strDirective . substring ( 1 ) . equals ( "else" ) || strDirective . substring ( 1 ) . equals ( "elseif" ) || strDirective . substring ( 1 ) . equals ( "stop" ) ) { bRecognizedDirective = true ; } } if ( bRecognizedDirective ) return ( strImage . substring ( 0 , iLast / 2 ) + strDirective ) ; else return ( strImage ) ; } final public SimpleNode process ( ) throws ParseException { ASTprocess jjtn000 = new ASTprocess ( this , JJTPROCESS ) ; boolean jjtc000 = true ; jjtree . openNodeScope ( jjtn000 ) ; try { label_1 : while ( true ) { switch ( ( jj_ntk == - 1 ) ? jj_ntk ( ) : jj_ntk ) { case LPAREN : case RPAREN : case ESCAPE_DIRECTIVE : case SET_DIRECTIVE : case SINGLE_LINE_COMMENT_START : case DOUBLE_ESCAPE : case ESCAPE : case TEXT : case FORMAL_COMMENT : case MULTI_LINE_COMMENT : case STRING_LITERAL : case IF_DIRECTIVE : case STOP_DIRECTIVE : case INTEGER_LITERAL : case FLOATING_POINT_LITERAL : case WORD : case BRACKETED_WORD : case IDENTIFIER : case DOT : case LCURLY : case RCURLY : ; break ; default : jj_la1 [ 0 ] = jj_gen ; break label_1 ; } Statement ( ) ; } jj_consume_token ( 0 ) ; jjtree . closeNodeScope ( jjtn000 , true ) ; jjtc000 = false ; { if ( true ) return jjtn000 ; } } catch ( Throwable jjte000 ) { if ( jjtc000 ) { jjtree . clearNodeScope ( jjtn000 ) ; jjtc000 = false ; } else { jjtree . popNode ( ) ; } if ( jjte000 instanceof RuntimeException ) { { if ( true ) throw ( RuntimeException ) jjte000 ; } } if ( jjte000 instanceof ParseException ) { { if ( true ) throw ( ParseException ) jjte000 ; } } { if ( true ) throw ( Error ) jjte000 ; } } finally { if ( jjtc000 ) { jjtree . closeNodeScope ( jjtn000 , true ) ; } } throw new Error ( "Missing return statement in function" ) ; } final public void Statement ( ) throws ParseException { switch ( ( jj_ntk == - 1 ) ? jj_ntk ( ) : jj_ntk ) { case IF_DIRECTIVE : IfStatement ( ) ; break ; case STOP_DIRECTIVE : StopStatement ( ) ; break ; default : jj_la1 [ 1 ] = jj_gen ; if ( jj_2_1 ( 2 ) ) { Reference ( ) ; } else { switch ( ( jj_ntk == - 1 ) ? jj_ntk ( ) : jj_ntk ) { case SINGLE_LINE_COMMENT_START : case FORMAL_COMMENT : case MULTI_LINE_COMMENT : Comment ( ) ; break ; case SET_DIRECTIVE : SetDirective ( ) ; break ; case ESCAPE_DIRECTIVE : EscapedDirective ( ) ; break ; case DOUBLE_ESCAPE : Escape ( ) ; break ; case WORD : case BRACKETED_WORD : Directive ( ) ; break ; case LPAREN : case RPAREN : case ESCAPE : case TEXT : case STRING_LITERAL : case INTEGER_LITERAL : case FLOATING_POINT_LITERAL : case DOT : case LCURLY : case RCURLY : Text ( ) ; break ; default : jj_la1 [ 2 ] = jj_gen ; jj_consume_token ( - 1 ) ; throw new ParseException ( ) ; } } } } final public void EscapedDirective ( ) throws ParseException { ASTEscapedDirective jjtn000 = new ASTEscapedDirective ( this , JJTESCAPEDDIRECTIVE ) ; boolean jjtc000 = true ; jjtree . openNodeScope ( jjtn000 ) ; try { Token t = null ; t = jj_consume_token ( ESCAPE_DIRECTIVE ) ; jjtree . closeNodeScope ( jjtn000 , true ) ; jjtc000 = false ; t . image = escapedDirective ( t . image ) ; } finally { if ( jjtc000 ) { jjtree . closeNodeScope ( jjtn000 , true ) ; } } } final public void Escape ( ) throws ParseException { ASTEscape jjtn000 = new ASTEscape ( this , JJTESCAPE ) ; boolean jjtc000 = true ; jjtree . openNodeScope ( jjtn000 ) ; try { Token t = null ; int count = 0 ; boolean control = false ; label_2 : while ( true ) { t = jj_consume_token ( DOUBLE_ESCAPE ) ; count ++ ; if ( jj_2_2 ( 2 ) ) { ; } else { break label_2 ; } } jjtree . closeNodeScope ( jjtn000 , true ) ; jjtc000 = false ; switch ( t . next . kind ) { case IF_DIRECTIVE : case ELSE_DIRECTIVE : case ELSEIF_DIRECTIVE : case END : case STOP_DIRECTIVE : control = true ; break ; } if ( isDirective ( t . next . image . substring ( 1 ) ) ) control = true ; else if ( rsvc . isVelocimacro ( t . next . image . substring ( 1 ) , currentTemplateName ) ) control = true ; jjtn000 . val = "" ; for ( int i = 0 ; i < count ; i ++ ) jjtn000 . val += ( control ? "\\" : "\\\\" ) ; } finally { if ( jjtc000 ) { jjtree . closeNodeScope ( jjtn000 , true ) ; } } } final public void Comment ( ) throws ParseException { ASTComment jjtn000 = new ASTComment ( this , JJTCOMMENT ) ; boolean jjtc000 = true ; jjtree . openNodeScope ( jjtn000 ) ; try { switch ( ( jj_ntk == - 1 ) ? jj_ntk ( ) : jj_ntk ) { case SINGLE_LINE_COMMENT_START : jj_consume_token ( SINGLE_LINE_COMMENT_START ) ; switch ( ( jj_ntk == - 1 ) ? jj_ntk ( ) : jj_ntk ) { case SINGLE_LINE_COMMENT : jj_consume_token ( SINGLE_LINE_COMMENT ) ; break ; default : jj_la1 [ 3 ] = jj_gen ; ; } break ; case MULTI_LINE_COMMENT : jj_consume_token ( MULTI_LINE_COMMENT ) ; break ; case FORMAL_COMMENT : jj_consume_token ( FORMAL_COMMENT ) ; break ; default : jj_la1 [ 4 ] = jj_gen ; jj_consume_token ( - 1 ) ; throw new ParseException ( ) ; } } finally { if ( jjtc000 ) { jjtree . closeNodeScope ( jjtn000 , true ) ; } } } final public void FloatingPointLiteral ( ) throws ParseException { ASTFloatingPointLiteral jjtn000 = new ASTFloatingPointLiteral ( this , JJTFLOATINGPOINTLITERAL ) ; boolean jjtc000 = true ; jjtree . openNodeScope ( jjtn000 ) ; try { jj_consume_token ( FLOATING_POINT_LITERAL ) ; } finally { if ( jjtc000 ) { jjtree . closeNodeScope ( jjtn000 , true ) ; } } } final public void IntegerLiteral ( ) throws ParseException { ASTIntegerLiteral jjtn000 = new ASTIntegerLiteral ( this , JJTINTEGERLITERAL ) ; boolean jjtc000 = true ; jjtree . openNodeScope ( jjtn000 ) ; try { jj_consume_token ( INTEGER_LITERAL ) ; } finally { if ( jjtc000 ) { jjtree . closeNodeScope ( jjtn000 , true ) ; } } } final public void StringLiteral ( ) throws ParseException { ASTStringLiteral jjtn000 = new ASTStringLiteral ( this , JJTSTRINGLITERAL ) ; boolean jjtc000 = true ; jjtree . openNodeScope ( jjtn000 ) ; try { jj_consume_token ( STRING_LITERAL ) ; } finally { if ( jjtc000 ) { jjtree . closeNodeScope ( jjtn000 , true ) ; } } } final public void Identifier ( ) throws ParseException { ASTIdentifier jjtn000 = new ASTIdentifier ( this , JJTIDENTIFIER ) ; boolean jjtc000 = true ; jjtree . openNodeScope ( jjtn000 ) ; try { jj_consume_token ( IDENTIFIER ) ; } finally { if ( jjtc000 ) { jjtree . closeNodeScope ( jjtn000 , true ) ; } } } final public void Word ( ) throws ParseException { ASTWord jjtn000 = new ASTWord ( this , JJTWORD ) ; boolean jjtc000 = true ; jjtree . openNodeScope ( jjtn000 ) ; try { jj_consume_token ( WORD ) ; } finally { if ( jjtc000 ) { jjtree . closeNodeScope ( jjtn000 , true ) ; } } } final public int DirectiveArg ( ) throws ParseException { switch ( ( jj_ntk == - 1 ) ? jj_ntk ( ) : jj_ntk ) { case IDENTIFIER : case LCURLY : Reference ( ) ; { if ( true ) return ParserTreeConstants . JJTREFERENCE ; } break ; case WORD : Word ( ) ; { if ( true ) return ParserTreeConstants . JJTWORD ; } break ; case STRING_LITERAL : StringLiteral ( ) ; { if ( true ) return ParserTreeConstants . JJTSTRINGLITERAL ; } break ; case INTEGER_LITERAL : IntegerLiteral ( ) ; { if ( true ) return ParserTreeConstants . JJTINTEGERLITERAL ; } break ; default : jj_la1 [ 5 ] = jj_gen ; if ( jj_2_3 ( 2147483647 ) ) { IntegerRange ( ) ; { if ( true ) return ParserTreeConstants . JJTINTEGERRANGE ; } } else { switch ( ( jj_ntk == - 1 ) ? jj_ntk ( ) : jj_ntk ) { case FLOATING_POINT_LITERAL : FloatingPointLiteral ( ) ; { if ( true ) return ParserTreeConstants . JJTFLOATINGPOINTLITERAL ; } break ; case LEFT_CURLEY : Map ( ) ; { if ( true ) return ParserTreeConstants . JJTMAP ; } break ; case LBRACKET : ObjectArray ( ) ; { if ( true ) return ParserTreeConstants . JJTOBJECTARRAY ; } break ; case TRUE : True ( ) ; { if ( true ) return ParserTreeConstants . JJTTRUE ; } break ; case FALSE : False ( ) ; { if ( true ) return ParserTreeConstants . JJTFALSE ; } break ; default : jj_la1 [ 6 ] = jj_gen ; jj_consume_token ( - 1 ) ; throw new ParseException ( ) ; } } } throw new Error ( "Missing return statement in function" ) ; } final public SimpleNode Directive ( ) throws ParseException { ASTDirective jjtn000 = new ASTDirective ( this , JJTDIRECTIVE ) ; boolean jjtc000 = true ; jjtree . openNodeScope ( jjtn000 ) ; Token t = null ; int argType ; int argPos = 0 ; Directive d ; int directiveType ; boolean isVM = false ; boolean doItNow = false ; try { switch ( ( jj_ntk == - 1 ) ? jj_ntk ( ) : jj_ntk ) { case WORD : t = jj_consume_token ( WORD ) ; break ; case BRACKETED_WORD : t = jj_consume_token ( BRACKETED_WORD ) ; break ; default : jj_la1 [ 7 ] = jj_gen ; jj_consume_token ( - 1 ) ; throw new ParseException ( ) ; } String directiveName ; if ( t . kind == ParserConstants . BRACKETED_WORD ) { directiveName = t . image . substring ( 2 , t . image . length ( ) - 1 ) ; } else { directiveName = t . image . substring ( 1 ) ; } d = ( Directive ) directives . get ( directiveName ) ; if ( directiveName . equals ( "macro" ) ) { doItNow = true ; } jjtn000 . setDirectiveName ( directiveName ) ; if ( d == null ) { isVM = rsvc . isVelocimacro ( directiveName , currentTemplateName ) ; if ( ! isVM ) { token_source . stateStackPop ( ) ; token_source . inDirective = false ; { if ( true ) return jjtn000 ; } } directiveType = Directive . LINE ; } else { directiveType = d . getType ( ) ; } token_source . SwitchTo ( DIRECTIVE ) ; argPos = 0 ; switch ( ( jj_ntk == - 1 ) ? jj_ntk ( ) : jj_ntk ) { case WHITESPACE : jj_consume_token ( WHITESPACE ) ; break ; default : jj_la1 [ 8 ] = jj_gen ; ; } jj_consume_token ( LPAREN ) ; label_3 : while ( true ) { if ( jj_2_4 ( 2 ) ) { ; } else { break label_3 ; } switch ( ( jj_ntk == - 1 ) ? jj_ntk ( ) : jj_ntk ) { case WHITESPACE : jj_consume_token ( WHITESPACE ) ; break ; default : jj_la1 [ 9 ] = jj_gen ; ; } switch ( ( jj_ntk == - 1 ) ? jj_ntk ( ) : jj_ntk ) { case COMMA : jj_consume_token ( COMMA ) ; switch ( ( jj_ntk == - 1 ) ? jj_ntk ( ) : jj_ntk ) { case WHITESPACE : jj_consume_token ( WHITESPACE ) ; break ; default : jj_la1 [ 10 ] = jj_gen ; ; } break ; default : jj_la1 [ 11 ] = jj_gen ; ; } argType = DirectiveArg ( ) ; if ( argType == ParserTreeConstants . JJTWORD ) { if ( doItNow && argPos == 0 ) { ; } else if ( ( t . image . equals ( "#foreach" ) || t . image . equals ( "#{foreach}" ) ) && argPos == 1 ) { ; } else { { if ( true ) throw new MacroParseException ( "Invalid arg #" + argPos + " in " + ( isVM ? "VM " : "directive " ) + t . image , currentTemplateName , t ) ; } } } else { if ( doItNow && argPos == 0 ) { { if ( true ) throw new MacroParseException ( "Invalid first arg" + " in #macro() directive - must be a" + " word token (no \' or \" surrounding)" , currentTemplateName , t ) ; } } } argPos ++ ; } switch ( ( jj_ntk == - 1 ) ? jj_ntk ( ) : jj_ntk ) { case WHITESPACE : jj_consume_token ( WHITESPACE ) ; break ; default : jj_la1 [ 12 ] = jj_gen ; ; } jj_consume_token ( RPAREN ) ; if ( directiveType == Directive . LINE ) { { if ( true ) return jjtn000 ; } } ASTBlock jjtn001 = new ASTBlock ( this , JJTBLOCK ) ; boolean jjtc001 = true ; jjtree . openNodeScope ( jjtn001 ) ; try { label_4 : while ( true ) { Statement ( ) ; switch ( ( jj_ntk == - 1 ) ? jj_ntk ( ) : jj_ntk ) { case LPAREN : case RPAREN : case ESCAPE_DIRECTIVE : case SET_DIRECTIVE : case SINGLE_LINE_COMMENT_START : case DOUBLE_ESCAPE : case ESCAPE : case TEXT : case FORMAL_COMMENT : case MULTI_LINE_COMMENT : case STRING_LITERAL : case IF_DIRECTIVE : case STOP_DIRECTIVE : case INTEGER_LITERAL : case FLOATING_POINT_LITERAL : case WORD : case BRACKETED_WORD : case IDENTIFIER : case DOT : case LCURLY : case RCURLY : ; break ; default : jj_la1 [ 13 ] = jj_gen ; break label_4 ; } } } catch ( Throwable jjte001 ) { if ( jjtc001 ) { jjtree . clearNodeScope ( jjtn001 ) ; jjtc001 = false ; } else { jjtree . popNode ( ) ; } if ( jjte001 instanceof RuntimeException ) { { if ( true ) throw ( RuntimeException ) jjte001 ; } } if ( jjte001 instanceof ParseException ) { { if ( true ) throw ( ParseException ) jjte001 ; } } { if ( true ) throw ( Error ) jjte001 ; } } finally { if ( jjtc001 ) { jjtree . closeNodeScope ( jjtn001 , true ) ; } } jj_consume_token ( END ) ; jjtree . closeNodeScope ( jjtn000 , true ) ; jjtc000 = false ; if ( doItNow ) { Macro . processAndRegister ( rsvc , t , jjtn000 , currentTemplateName ) ; } { if ( true ) return jjtn000 ; } } catch ( Throwable jjte000 ) { if ( jjtc000 ) { jjtree . clearNodeScope ( jjtn000 ) ; jjtc000 = false ; } else { jjtree . popNode ( ) ; } if ( jjte000 instanceof RuntimeException ) { { if ( true ) throw ( RuntimeException ) jjte000 ; } } if ( jjte000 instanceof ParseException ) { { if ( true ) throw ( ParseException ) jjte000 ; } } { if ( true ) throw ( Error ) jjte000 ; } } finally { if ( jjtc000 ) { jjtree . closeNodeScope ( jjtn000 , true ) ; } } throw new Error ( "Missing return statement in function" ) ; } final public void Map ( ) throws ParseException { ASTMap jjtn000 = new ASTMap ( this , JJTMAP ) ; boolean jjtc000 = true ; jjtree . openNodeScope ( jjtn000 ) ; try { jj_consume_token ( LEFT_CURLEY ) ; if ( jj_2_5 ( 2 ) ) { Parameter ( ) ; jj_consume_token ( COLON ) ; Parameter ( ) ; label_5 : while ( true ) { switch ( ( jj_ntk == - 1 ) ? jj_ntk ( ) : jj_ntk ) { case COMMA : ; break ; default : jj_la1 [ 14 ] = jj_gen ; break label_5 ; } jj_consume_token ( COMMA ) ; Parameter ( ) ; jj_consume_token ( COLON ) ; Parameter ( ) ; } } else { switch ( ( jj_ntk == - 1 ) ? jj_ntk ( ) : jj_ntk ) { case WHITESPACE : jj_consume_token ( WHITESPACE ) ; break ; default : jj_la1 [ 15 ] = jj_gen ; ; } } jj_consume_token ( RIGHT_CURLEY ) ; } catch ( Throwable jjte000 ) { if ( jjtc000 ) { jjtree . clearNodeScope ( jjtn000 ) ; jjtc000 = false ; } else { jjtree . popNode ( ) ; } if ( jjte000 instanceof RuntimeException ) { { if ( true ) throw ( RuntimeException ) jjte000 ; } } if ( jjte000 instanceof ParseException ) { { if ( true ) throw ( ParseException ) jjte000 ; } } { if ( true ) throw ( Error ) jjte000 ; } } finally { if ( jjtc000 ) { jjtree . closeNodeScope ( jjtn000 , true ) ; } } } final public void ObjectArray ( ) throws ParseException { ASTObjectArray jjtn000 = new ASTObjectArray ( this , JJTOBJECTARRAY ) ; boolean jjtc000 = true ; jjtree . openNodeScope ( jjtn000 ) ; try { jj_consume_token ( LBRACKET ) ; switch ( ( jj_ntk == - 1 ) ? jj_ntk ( ) : jj_ntk ) { case LBRACKET : case LEFT_CURLEY : case WHITESPACE : case STRING_LITERAL : case TRUE : case FALSE : case INTEGER_LITERAL : case FLOATING_POINT_LITERAL : case IDENTIFIER : case LCURLY : Parameter ( ) ; label_6 : while ( true ) { switch ( ( jj_ntk == - 1 ) ? jj_ntk ( ) : jj_ntk ) { case COMMA : ; break ; default : jj_la1 [ 16 ] = jj_gen ; break label_6 ; } jj_consume_token ( COMMA ) ; Parameter ( ) ; } break ; default : jj_la1 [ 17 ] = jj_gen ; ; } jj_consume_token ( RBRACKET ) ; } catch ( Throwable jjte000 ) { if ( jjtc000 ) { jjtree . clearNodeScope ( jjtn000 ) ; jjtc000 = false ; } else { jjtree . popNode ( ) ; } if ( jjte000 instanceof RuntimeException ) { { if ( true ) throw ( RuntimeException ) jjte000 ; } } if ( jjte000 instanceof ParseException ) { { if ( true ) throw ( ParseException ) jjte000 ; } } { if ( true ) throw ( Error ) jjte000 ; } } finally { if ( jjtc000 ) { jjtree . closeNodeScope ( jjtn000 , true ) ; } } } final public void IntegerRange ( ) throws ParseException { ASTIntegerRange jjtn000 = new ASTIntegerRange ( this , JJTINTEGERRANGE ) ; boolean jjtc000 = true ; jjtree . openNodeScope ( jjtn000 ) ; try { jj_consume_token ( LBRACKET ) ; switch ( ( jj_ntk == - 1 ) ? jj_ntk ( ) : jj_ntk ) { case WHITESPACE : jj_consume_token ( WHITESPACE ) ; break ; default : jj_la1 [ 18 ] = jj_gen ; ; } switch ( ( jj_ntk == - 1 ) ? jj_ntk ( ) : jj_ntk ) { case IDENTIFIER : case LCURLY : Reference ( ) ; break ; case INTEGER_LITERAL : IntegerLiteral ( ) ; break ; default : jj_la1 [ 19 ] = jj_gen ; jj_consume_token ( - 1 ) ; throw new ParseException ( ) ; } switch ( ( jj_ntk == - 1 ) ? jj_ntk ( ) : jj_ntk ) { case WHITESPACE : jj_consume_token ( WHITESPACE ) ; break ; default : jj_la1 [ 20 ] = jj_gen ; ; } jj_consume_token ( DOUBLEDOT ) ; switch ( ( jj_ntk == - 1 ) ? jj_ntk ( ) : jj_ntk ) { case WHITESPACE : jj_consume_token ( WHITESPACE ) ; break ; default : jj_la1 [ 21 ] = jj_gen ; ; } switch ( ( jj_ntk == - 1 ) ? jj_ntk ( ) : jj_ntk ) { case IDENTIFIER : case LCURLY : Reference ( ) ; break ; case INTEGER_LITERAL : IntegerLiteral ( ) ; break ; default : jj_la1 [ 22 ] = jj_gen ; jj_consume_token ( - 1 ) ; throw new ParseException ( ) ; } switch ( ( jj_ntk == - 1 ) ? jj_ntk ( ) : jj_ntk ) { case WHITESPACE : jj_consume_token ( WHITESPACE ) ; break ; default : jj_la1 [ 23 ] = jj_gen ; ; } jj_consume_token ( RBRACKET ) ; } catch ( Throwable jjte000 ) { if ( jjtc000 ) { jjtree . clearNodeScope ( jjtn000 ) ; jjtc000 = false ; } else { jjtree . popNode ( ) ; } if ( jjte000 instanceof RuntimeException ) { { if ( true ) throw ( RuntimeException ) jjte000 ; } } if ( jjte000 instanceof ParseException ) { { if ( true ) throw ( ParseException ) jjte000 ; } } { if ( true ) throw ( Error ) jjte000 ; } } finally { if ( jjtc000 ) { jjtree . closeNodeScope ( jjtn000 , true ) ; } } } final public void Parameter ( ) throws ParseException { switch ( ( jj_ntk == - 1 ) ? jj_ntk ( ) : jj_ntk ) { case WHITESPACE : jj_consume_token ( WHITESPACE ) ; break ; default : jj_la1 [ 24 ] = jj_gen ; ; } switch ( ( jj_ntk == - 1 ) ? jj_ntk ( ) : jj_ntk ) { case STRING_LITERAL : StringLiteral ( ) ; break ; case INTEGER_LITERAL : IntegerLiteral ( ) ; break ; default : jj_la1 [ 25 ] = jj_gen ; if ( jj_2_6 ( 2147483647 ) ) { IntegerRange ( ) ; } else { switch ( ( jj_ntk == - 1 ) ? jj_ntk ( ) : jj_ntk ) { case LEFT_CURLEY : Map ( ) ; break ; case LBRACKET : ObjectArray ( ) ; break ; case TRUE : True ( ) ; break ; case FALSE : False ( ) ; break ; case IDENTIFIER : case LCURLY : Reference ( ) ; break ; case FLOATING_POINT_LITERAL : FloatingPointLiteral ( ) ; break ; default : jj_la1 [ 26 ] = jj_gen ; jj_consume_token ( - 1 ) ; throw new ParseException ( ) ; } } } switch ( ( jj_ntk == - 1 ) ? jj_ntk ( ) : jj_ntk ) { case WHITESPACE : jj_consume_token ( WHITESPACE ) ; break ; default : jj_la1 [ 27 ] = jj_gen ; ; } } final public void Method ( ) throws ParseException { ASTMethod jjtn000 = new ASTMethod ( this , JJTMETHOD ) ; boolean jjtc000 = true ; jjtree . openNodeScope ( jjtn000 ) ; try { Identifier ( ) ; jj_consume_token ( LPAREN ) ; switch ( ( jj_ntk == - 1 ) ? jj_ntk ( ) : jj_ntk ) { case LBRACKET : case LEFT_CURLEY : case WHITESPACE : case STRING_LITERAL : case TRUE : case FALSE : case INTEGER_LITERAL : case FLOATING_POINT_LITERAL : case IDENTIFIER : case LCURLY : Parameter ( ) ; label_7 : while ( true ) { switch ( ( jj_ntk == - 1 ) ? jj_ntk ( ) : jj_ntk ) { case COMMA : ; break ; default : jj_la1 [ 28 ] = jj_gen ; break label_7 ; } jj_consume_token ( COMMA ) ; Parameter ( ) ; } break ; default : jj_la1 [ 29 ] = jj_gen ; ; } jj_consume_token ( REFMOD2_RPAREN ) ; } catch ( Throwable jjte000 ) { if ( jjtc000 ) { jjtree . clearNodeScope ( jjtn000 ) ; jjtc000 = false ; } else { jjtree . popNode ( ) ; } if ( jjte000 instanceof RuntimeException ) { { if ( true ) throw ( RuntimeException ) jjte000 ; } } if ( jjte000 instanceof ParseException ) { { if ( true ) throw ( ParseException ) jjte000 ; } } { if ( true ) throw ( Error ) jjte000 ; } } finally { if ( jjtc000 ) { jjtree . closeNodeScope ( jjtn000 , true ) ; } } } final public void Reference ( ) throws ParseException { ASTReference jjtn000 = new ASTReference ( this , JJTREFERENCE ) ; boolean jjtc000 = true ; jjtree . openNodeScope ( jjtn000 ) ; try { switch ( ( jj_ntk == - 1 ) ? jj_ntk ( ) : jj_ntk ) { case IDENTIFIER : jj_consume_token ( IDENTIFIER ) ; label_8 : while ( true ) { if ( jj_2_7 ( 2 ) ) { ; } else { break label_8 ; } jj_consume_token ( DOT ) ; if ( jj_2_8 ( 3 ) ) { Method ( ) ; } else { switch ( ( jj_ntk == - 1 ) ? jj_ntk ( ) : jj_ntk ) { case IDENTIFIER : Identifier ( ) ; break ; default : jj_la1 [ 30 ] = jj_gen ; jj_consume_token ( - 1 ) ; throw new ParseException ( ) ; } } } break ; case LCURLY : jj_consume_token ( LCURLY ) ; jj_consume_token ( IDENTIFIER ) ; label_9 : while ( true ) { if ( jj_2_9 ( 2 ) ) { ; } else { break label_9 ; } jj_consume_token ( DOT ) ; if ( jj_2_10 ( 3 ) ) { Method ( ) ; } else { switch ( ( jj_ntk == - 1 ) ? jj_ntk ( ) : jj_ntk ) { case IDENTIFIER : Identifier ( ) ; break ; default : jj_la1 [ 31 ] = jj_gen ; jj_consume_token ( - 1 ) ; throw new ParseException ( ) ; } } } jj_consume_token ( RCURLY ) ; break ; default : jj_la1 [ 32 ] = jj_gen ; jj_consume_token ( - 1 ) ; throw new ParseException ( ) ; } } catch ( Throwable jjte000 ) { if ( jjtc000 ) { jjtree . clearNodeScope ( jjtn000 ) ; jjtc000 = false ; } else { jjtree . popNode ( ) ; } if ( jjte000 instanceof RuntimeException ) { { if ( true ) throw ( RuntimeException ) jjte000 ; } } if ( jjte000 instanceof ParseException ) { { if ( true ) throw ( ParseException ) jjte000 ; } } { if ( true ) throw ( Error ) jjte000 ; } } finally { if ( jjtc000 ) { jjtree . closeNodeScope ( jjtn000 , true ) ; } } } final public void True ( ) throws ParseException { ASTTrue jjtn000 = new ASTTrue ( this , JJTTRUE ) ; boolean jjtc000 = true ; jjtree . openNodeScope ( jjtn000 ) ; try { jj_consume_token ( TRUE ) ; } finally { if ( jjtc000 ) { jjtree . closeNodeScope ( jjtn000 , true ) ; } } } final public void False ( ) throws ParseException { ASTFalse jjtn000 = new ASTFalse ( this , JJTFALSE ) ; boolean jjtc000 = true ; jjtree . openNodeScope ( jjtn000 ) ; try { jj_consume_token ( FALSE ) ; } finally { if ( jjtc000 ) { jjtree . closeNodeScope ( jjtn000 , true ) ; } } } final public void Text ( ) throws ParseException { ASTText jjtn000 = new ASTText ( this , JJTTEXT ) ; boolean jjtc000 = true ; jjtree . openNodeScope ( jjtn000 ) ; try { switch ( ( jj_ntk == - 1 ) ? jj_ntk ( ) : jj_ntk ) { case TEXT : jj_consume_token ( TEXT ) ; break ; case DOT : jj_consume_token ( DOT ) ; break ; case RPAREN : jj_consume_token ( RPAREN ) ; break ; case LPAREN : jj_consume_token ( LPAREN ) ; break ; case INTEGER_LITERAL : jj_consume_token ( INTEGER_LITERAL ) ; break ; case FLOATING_POINT_LITERAL : jj_consume_token ( FLOATING_POINT_LITERAL ) ; break ; case STRING_LITERAL : jj_consume_token ( STRING_LITERAL ) ; break ; case ESCAPE : jj_consume_token ( ESCAPE ) ; break ; case LCURLY : jj_consume_token ( LCURLY ) ; break ; case RCURLY : jj_consume_token ( RCURLY ) ; break ; default : jj_la1 [ 33 ] = jj_gen ; jj_consume_token ( - 1 ) ; throw new ParseException ( ) ; } } finally { if ( jjtc000 ) { jjtree . closeNodeScope ( jjtn000 , true ) ; } } } final public void IfStatement ( ) throws ParseException { ASTIfStatement jjtn000 = new ASTIfStatement ( this , JJTIFSTATEMENT ) ; boolean jjtc000 = true ; jjtree . openNodeScope ( jjtn000 ) ; try { jj_consume_token ( IF_DIRECTIVE ) ; switch ( ( jj_ntk == - 1 ) ? jj_ntk ( ) : jj_ntk ) { case WHITESPACE : jj_consume_token ( WHITESPACE ) ; break ; default : jj_la1 [ 34 ] = jj_gen ; ; } jj_consume_token ( LPAREN ) ; Expression ( ) ; jj_consume_token ( RPAREN ) ; ASTBlock jjtn001 = new ASTBlock ( this , JJTBLOCK ) ; boolean jjtc001 = true ; jjtree . openNodeScope ( jjtn001 ) ; try { label_10 : while ( true ) { switch ( ( jj_ntk == - 1 ) ? jj_ntk ( ) : jj_ntk ) { case LPAREN : case RPAREN : case ESCAPE_DIRECTIVE : case SET_DIRECTIVE : case SINGLE_LINE_COMMENT_START : case DOUBLE_ESCAPE : case ESCAPE : case TEXT : case FORMAL_COMMENT : case MULTI_LINE_COMMENT : case STRING_LITERAL : case IF_DIRECTIVE : case STOP_DIRECTIVE : case INTEGER_LITERAL : case FLOATING_POINT_LITERAL : case WORD : case BRACKETED_WORD : case IDENTIFIER : case DOT : case LCURLY : case RCURLY : ; break ; default : jj_la1 [ 35 ] = jj_gen ; break label_10 ; } Statement ( ) ; } } catch ( Throwable jjte001 ) { if ( jjtc001 ) { jjtree . clearNodeScope ( jjtn001 ) ; jjtc001 = false ; } else { jjtree . popNode ( ) ; } if ( jjte001 instanceof RuntimeException ) { { if ( true ) throw ( RuntimeException ) jjte001 ; } } if ( jjte001 instanceof ParseException ) { { if ( true ) throw ( ParseException ) jjte001 ; } } { if ( true ) throw ( Error ) jjte001 ; } } finally { if ( jjtc001 ) { jjtree . closeNodeScope ( jjtn001 , true ) ; } } switch ( ( jj_ntk == - 1 ) ? jj_ntk ( ) : jj_ntk ) { case ELSEIF_DIRECTIVE : label_11 : while ( true ) { ElseIfStatement ( ) ; switch ( ( jj_ntk == - 1 ) ? jj_ntk ( ) : jj_ntk ) { case ELSEIF_DIRECTIVE : ; break ; default : jj_la1 [ 36 ] = jj_gen ; break label_11 ; } } break ; default : jj_la1 [ 37 ] = jj_gen ; ; } switch ( ( jj_ntk == - 1 ) ? jj_ntk ( ) : jj_ntk ) { case ELSE_DIRECTIVE : ElseStatement ( ) ; break ; default : jj_la1 [ 38 ] = jj_gen ; ; } jj_consume_token ( END ) ; } catch ( Throwable jjte000 ) { if ( jjtc000 ) { jjtree . clearNodeScope ( jjtn000 ) ; jjtc000 = false ; } else { jjtree . popNode ( ) ; } if ( jjte000 instanceof RuntimeException ) { { if ( true ) throw ( RuntimeException ) jjte000 ; } } if ( jjte000 instanceof ParseException ) { { if ( true ) throw ( ParseException ) jjte000 ; } } { if ( true ) throw ( Error ) jjte000 ; } } finally { if ( jjtc000 ) { jjtree . closeNodeScope ( jjtn000 , true ) ; } } } final public void ElseStatement ( ) throws ParseException { ASTElseStatement jjtn000 = new ASTElseStatement ( this , JJTELSESTATEMENT ) ; boolean jjtc000 = true ; jjtree . openNodeScope ( jjtn000 ) ; try { jj_consume_token ( ELSE_DIRECTIVE ) ; ASTBlock jjtn001 = new ASTBlock ( this , JJTBLOCK ) ; boolean jjtc001 = true ; jjtree . openNodeScope ( jjtn001 ) ; try { label_12 : while ( true ) { switch ( ( jj_ntk == - 1 ) ? jj_ntk ( ) : jj_ntk ) { case LPAREN : case RPAREN : case ESCAPE_DIRECTIVE : case SET_DIRECTIVE : case SINGLE_LINE_COMMENT_START : case DOUBLE_ESCAPE : case ESCAPE : case TEXT : case FORMAL_COMMENT : case MULTI_LINE_COMMENT : case STRING_LITERAL : case IF_DIRECTIVE : case STOP_DIRECTIVE : case INTEGER_LITERAL : case FLOATING_POINT_LITERAL : case WORD : case BRACKETED_WORD : case IDENTIFIER : case DOT : case LCURLY : case RCURLY : ; break ; default : jj_la1 [ 39 ] = jj_gen ; break label_12 ; } Statement ( ) ; } } catch ( Throwable jjte001 ) { if ( jjtc001 ) { jjtree . clearNodeScope ( jjtn001 ) ; jjtc001 = false ; } else { jjtree . popNode ( ) ; } if ( jjte001 instanceof RuntimeException ) { { if ( true ) throw ( RuntimeException ) jjte001 ; } } if ( jjte001 instanceof ParseException ) { { if ( true ) throw ( ParseException ) jjte001 ; } } { if ( true ) throw ( Error ) jjte001 ; } } finally { if ( jjtc001 ) { jjtree . closeNodeScope ( jjtn001 , true ) ; } } } catch ( Throwable jjte000 ) { if ( jjtc000 ) { jjtree . clearNodeScope ( jjtn000 ) ; jjtc000 = false ; } else { jjtree . popNode ( ) ; } if ( jjte000 instanceof RuntimeException ) { { if ( true ) throw ( RuntimeException ) jjte000 ; } } if ( jjte000 instanceof ParseException ) { { if ( true ) throw ( ParseException ) jjte000 ; } } { if ( true ) throw ( Error ) jjte000 ; } } finally { if ( jjtc000 ) { jjtree . closeNodeScope ( jjtn000 , true ) ; } } } final public void ElseIfStatement ( ) throws ParseException { ASTElseIfStatement jjtn000 = new ASTElseIfStatement ( this , JJTELSEIFSTATEMENT ) ; boolean jjtc000 = true ; jjtree . openNodeScope ( jjtn000 ) ; try { jj_consume_token ( ELSEIF_DIRECTIVE ) ; switch ( ( jj_ntk == - 1 ) ? jj_ntk ( ) : jj_ntk ) { case WHITESPACE : jj_consume_token ( WHITESPACE ) ; break ; default : jj_la1 [ 40 ] = jj_gen ; ; } jj_consume_token ( LPAREN ) ; Expression ( ) ; jj_consume_token ( RPAREN ) ; ASTBlock jjtn001 = new ASTBlock ( this , JJTBLOCK ) ; boolean jjtc001 = true ; jjtree . openNodeScope ( jjtn001 ) ; try { label_13 : while ( true ) { switch ( ( jj_ntk == - 1 ) ? jj_ntk ( ) : jj_ntk ) { case LPAREN : case RPAREN : case ESCAPE_DIRECTIVE : case SET_DIRECTIVE : case SINGLE_LINE_COMMENT_START : case DOUBLE_ESCAPE : case ESCAPE : case TEXT : case FORMAL_COMMENT : case MULTI_LINE_COMMENT : case STRING_LITERAL : case IF_DIRECTIVE : case STOP_DIRECTIVE : case INTEGER_LITERAL : case FLOATING_POINT_LITERAL : case WORD : case BRACKETED_WORD : case IDENTIFIER : case DOT : case LCURLY : case RCURLY : ; break ; default : jj_la1 [ 41 ] = jj_gen ; break label_13 ; } Statement ( ) ; } } catch ( Throwable jjte001 ) { if ( jjtc001 ) { jjtree . clearNodeScope ( jjtn001 ) ; jjtc001 = false ; } else { jjtree . popNode ( ) ; } if ( jjte001 instanceof RuntimeException ) { { if ( true ) throw ( RuntimeException ) jjte001 ; } } if ( jjte001 instanceof ParseException ) { { if ( true ) throw ( ParseException ) jjte001 ; } } { if ( true ) throw ( Error ) jjte001 ; } } finally { if ( jjtc001 ) { jjtree . closeNodeScope ( jjtn001 , true ) ; } } } catch ( Throwable jjte000 ) { if ( jjtc000 ) { jjtree . clearNodeScope ( jjtn000 ) ; jjtc000 = false ; } else { jjtree . popNode ( ) ; } if ( jjte000 instanceof RuntimeException ) { { if ( true ) throw ( RuntimeException ) jjte000 ; } } if ( jjte000 instanceof ParseException ) { { if ( true ) throw ( ParseException ) jjte000 ; } } { if ( true ) throw ( Error ) jjte000 ; } } finally { if ( jjtc000 ) { jjtree . closeNodeScope ( jjtn000 , true ) ; } } } final public void SetDirective ( ) throws ParseException { ASTSetDirective jjtn000 = new ASTSetDirective ( this , JJTSETDIRECTIVE ) ; boolean jjtc000 = true ; jjtree . openNodeScope ( jjtn000 ) ; try { jj_consume_token ( SET_DIRECTIVE ) ; switch ( ( jj_ntk == - 1 ) ? jj_ntk ( ) : jj_ntk ) { case WHITESPACE : jj_consume_token ( WHITESPACE ) ; break ; default : jj_la1 [ 42 ] = jj_gen ; ; } Reference ( ) ; switch ( ( jj_ntk == - 1 ) ? jj_ntk ( ) : jj_ntk ) { case WHITESPACE : jj_consume_token ( WHITESPACE ) ; break ; default : jj_la1 [ 43 ] = jj_gen ; ; } jj_consume_token ( EQUALS ) ; Expression ( ) ; jj_consume_token ( RPAREN ) ; token_source . inSet = false ; switch ( ( jj_ntk == - 1 ) ? jj_ntk ( ) : jj_ntk ) { case NEWLINE : jj_consume_token ( NEWLINE ) ; break ; default : jj_la1 [ 44 ] = jj_gen ; ; } } catch ( Throwable jjte000 ) { if ( jjtc000 ) { jjtree . clearNodeScope ( jjtn000 ) ; jjtc000 = false ; } else { jjtree . popNode ( ) ; } if ( jjte000 instanceof RuntimeException ) { { if ( true ) throw ( RuntimeException ) jjte000 ; } } if ( jjte000 instanceof ParseException ) { { if ( true ) throw ( ParseException ) jjte000 ; } } { if ( true ) throw ( Error ) jjte000 ; } } finally { if ( jjtc000 ) { jjtree . closeNodeScope ( jjtn000 , true ) ; } } } final public void StopStatement ( ) throws ParseException { ASTStop jjtn000 = new ASTStop ( this , JJTSTOP ) ; boolean jjtc000 = true ; jjtree . openNodeScope ( jjtn000 ) ; try { jj_consume_token ( STOP_DIRECTIVE ) ; } finally { if ( jjtc000 ) { jjtree . closeNodeScope ( jjtn000 , 0 ) ; } } } final public void Expression ( ) throws ParseException { ASTExpression jjtn000 = new ASTExpression ( this , JJTEXPRESSION ) ; boolean jjtc000 = true ; jjtree . openNodeScope ( jjtn000 ) ; try { ConditionalOrExpression ( ) ; } catch ( Throwable jjte000 ) { if ( jjtc000 ) { jjtree . clearNodeScope ( jjtn000 ) ; jjtc000 = false ; } else { jjtree . popNode ( ) ; } if ( jjte000 instanceof RuntimeException ) { { if ( true ) throw ( RuntimeException ) jjte000 ; } } if ( jjte000 instanceof ParseException ) { { if ( true ) throw ( ParseException ) jjte000 ; } } { if ( true ) throw ( Error ) jjte000 ; } } finally { if ( jjtc000 ) { jjtree . closeNodeScope ( jjtn000 , true ) ; } } } final public void Assignment ( ) throws ParseException { ASTAssignment jjtn000 = new ASTAssignment ( this , JJTASSIGNMENT ) ; boolean jjtc000 = true ; jjtree . openNodeScope ( jjtn000 ) ; try { PrimaryExpression ( ) ; jj_consume_token ( EQUALS ) ; Expression ( ) ; } catch ( Throwable jjte000 ) { if ( jjtc000 ) { jjtree . clearNodeScope ( jjtn000 ) ; jjtc000 = false ; } else { jjtree . popNode ( ) ; } if ( jjte000 instanceof RuntimeException ) { { if ( true ) throw ( RuntimeException ) jjte000 ; } } if ( jjte000 instanceof ParseException ) { { if ( true ) throw ( ParseException ) jjte000 ; } } { if ( true ) throw ( Error ) jjte000 ; } } finally { if ( jjtc000 ) { jjtree . closeNodeScope ( jjtn000 , 2 ) ; } } } final public void ConditionalOrExpression ( ) throws ParseException { ConditionalAndExpression ( ) ; label_14 : while ( true ) { switch ( ( jj_ntk == - 1 ) ? jj_ntk ( ) : jj_ntk ) { case LOGICAL_OR : ; break ; default : jj_la1 [ 45 ] = jj_gen ; break label_14 ; } jj_consume_token ( LOGICAL_OR ) ; ASTOrNode jjtn001 = new ASTOrNode ( this , JJTORNODE ) ; boolean jjtc001 = true ; jjtree . openNodeScope ( jjtn001 ) ; try { ConditionalAndExpression ( ) ; } catch ( Throwable jjte001 ) { if ( jjtc001 ) { jjtree . clearNodeScope ( jjtn001 ) ; jjtc001 = false ; } else { jjtree . popNode ( ) ; } if ( jjte001 instanceof RuntimeException ) { { if ( true ) throw ( RuntimeException ) jjte001 ; } } if ( jjte001 instanceof ParseException ) { { if ( true ) throw ( ParseException ) jjte001 ; } } { if ( true ) throw ( Error ) jjte001 ; } } finally { if ( jjtc001 ) { jjtree . closeNodeScope ( jjtn001 , 2 ) ; } } } } final public void ConditionalAndExpression ( ) throws ParseException { EqualityExpression ( ) ; label_15 : while ( true ) { switch ( ( jj_ntk == - 1 ) ? jj_ntk ( ) : jj_ntk ) { case LOGICAL_AND : ; break ; default : jj_la1 [ 46 ] = jj_gen ; break label_15 ; } jj_consume_token ( LOGICAL_AND ) ; ASTAndNode jjtn001 = new ASTAndNode ( this , JJTANDNODE ) ; boolean jjtc001 = true ; jjtree . openNodeScope ( jjtn001 ) ; try { EqualityExpression ( ) ; } catch ( Throwable jjte001 ) { if ( jjtc001 ) { jjtree . clearNodeScope ( jjtn001 ) ; jjtc001 = false ; } else { jjtree . popNode ( ) ; } if ( jjte001 instanceof RuntimeException ) { { if ( true ) throw ( RuntimeException ) jjte001 ; } } if ( jjte001 instanceof ParseException ) { { if ( true ) throw ( ParseException ) jjte001 ; } } { if ( true ) throw ( Error ) jjte001 ; } } finally { if ( jjtc001 ) { jjtree . closeNodeScope ( jjtn001 , 2 ) ; } } } } final public void EqualityExpression ( ) throws ParseException { RelationalExpression ( ) ; label_16 : while ( true ) { switch ( ( jj_ntk == - 1 ) ? jj_ntk ( ) : jj_ntk ) { case LOGICAL_EQUALS : case LOGICAL_NOT_EQUALS : ; break ; default : jj_la1 [ 47 ] = jj_gen ; break label_16 ; } switch ( ( jj_ntk == - 1 ) ? jj_ntk ( ) : jj_ntk ) { case LOGICAL_EQUALS : jj_consume_token ( LOGICAL_EQUALS ) ; ASTEQNode jjtn001 = new ASTEQNode ( this , JJTEQNODE ) ; boolean jjtc001 = true ; jjtree . openNodeScope ( jjtn001 ) ; try { RelationalExpression ( ) ; } catch ( Throwable jjte001 ) { if ( jjtc001 ) { jjtree . clearNodeScope ( jjtn001 ) ; jjtc001 = false ; } else { jjtree . popNode ( ) ; } if ( jjte001 instanceof RuntimeException ) { { if ( true ) throw ( RuntimeException ) jjte001 ; } } if ( jjte001 instanceof ParseException ) { { if ( true ) throw ( ParseException ) jjte001 ; } } { if ( true ) throw ( Error ) jjte001 ; } } finally { if ( jjtc001 ) { jjtree . closeNodeScope ( jjtn001 , 2 ) ; } } break ; case LOGICAL_NOT_EQUALS : jj_consume_token ( LOGICAL_NOT_EQUALS ) ; ASTNENode jjtn002 = new ASTNENode ( this , JJTNENODE ) ; boolean jjtc002 = true ; jjtree . openNodeScope ( jjtn002 ) ; try { RelationalExpression ( ) ; } catch ( Throwable jjte002 ) { if ( jjtc002 ) { jjtree . clearNodeScope ( jjtn002 ) ; jjtc002 = false ; } else { jjtree . popNode ( ) ; } if ( jjte002 instanceof RuntimeException ) { { if ( true ) throw ( RuntimeException ) jjte002 ; } } if ( jjte002 instanceof ParseException ) { { if ( true ) throw ( ParseException ) jjte002 ; } } { if ( true ) throw ( Error ) jjte002 ; } } finally { if ( jjtc002 ) { jjtree . closeNodeScope ( jjtn002 , 2 ) ; } } break ; default : jj_la1 [ 48 ] = jj_gen ; jj_consume_token ( - 1 ) ; throw new ParseException ( ) ; } } } final public void RelationalExpression ( ) throws ParseException { AdditiveExpression ( ) ; label_17 : while ( true ) { switch ( ( jj_ntk == - 1 ) ? jj_ntk ( ) : jj_ntk ) { case LOGICAL_LT : case LOGICAL_LE : case LOGICAL_GT : case LOGICAL_GE : ; break ; default : jj_la1 [ 49 ] = jj_gen ; break label_17 ; } switch ( ( jj_ntk == - 1 ) ? jj_ntk ( ) : jj_ntk ) { case LOGICAL_LT : jj_consume_token ( LOGICAL_LT ) ; ASTLTNode jjtn001 = new ASTLTNode ( this , JJTLTNODE ) ; boolean jjtc001 = true ; jjtree . openNodeScope ( jjtn001 ) ; try { AdditiveExpression ( ) ; } catch ( Throwable jjte001 ) { if ( jjtc001 ) { jjtree . clearNodeScope ( jjtn001 ) ; jjtc001 = false ; } else { jjtree . popNode ( ) ; } if ( jjte001 instanceof RuntimeException ) { { if ( true ) throw ( RuntimeException ) jjte001 ; } } if ( jjte001 instanceof ParseException ) { { if ( true ) throw ( ParseException ) jjte001 ; } } { if ( true ) throw ( Error ) jjte001 ; } } finally { if ( jjtc001 ) { jjtree . closeNodeScope ( jjtn001 , 2 ) ; } } break ; case LOGICAL_GT : jj_consume_token ( LOGICAL_GT ) ; ASTGTNode jjtn002 = new ASTGTNode ( this , JJTGTNODE ) ; boolean jjtc002 = true ; jjtree . openNodeScope ( jjtn002 ) ; try { AdditiveExpression ( ) ; } catch ( Throwable jjte002 ) { if ( jjtc002 ) { jjtree . clearNodeScope ( jjtn002 ) ; jjtc002 = false ; } else { jjtree . popNode ( ) ; } if ( jjte002 instanceof RuntimeException ) { { if ( true ) throw ( RuntimeException ) jjte002 ; } } if ( jjte002 instanceof ParseException ) { { if ( true ) throw ( ParseException ) jjte002 ; } } { if ( true ) throw ( Error ) jjte002 ; } } finally { if ( jjtc002 ) { jjtree . closeNodeScope ( jjtn002 , 2 ) ; } } break ; case LOGICAL_LE : jj_consume_token ( LOGICAL_LE ) ; ASTLENode jjtn003 = new ASTLENode ( this , JJTLENODE ) ; boolean jjtc003 = true ; jjtree . openNodeScope ( jjtn003 ) ; try { AdditiveExpression ( ) ; } catch ( Throwable jjte003 ) { if ( jjtc003 ) { jjtree . clearNodeScope ( jjtn003 ) ; jjtc003 = false ; } else { jjtree . popNode ( ) ; } if ( jjte003 instanceof RuntimeException ) { { if ( true ) throw ( RuntimeException ) jjte003 ; } } if ( jjte003 instanceof ParseException ) { { if ( true ) throw ( ParseException ) jjte003 ; } } { if ( true ) throw ( Error ) jjte003 ; } } finally { if ( jjtc003 ) { jjtree . closeNodeScope ( jjtn003 , 2 ) ; } } break ; case LOGICAL_GE : jj_consume_token ( LOGICAL_GE ) ; ASTGENode jjtn004 = new ASTGENode ( this , JJTGENODE ) ; boolean jjtc004 = true ; jjtree . openNodeScope ( jjtn004 ) ; try { AdditiveExpression ( ) ; } catch ( Throwable jjte004 ) { if ( jjtc004 ) { jjtree . clearNodeScope ( jjtn004 ) ; jjtc004 = false ; } else { jjtree . popNode ( ) ; } if ( jjte004 instanceof RuntimeException ) { { if ( true ) throw ( RuntimeException ) jjte004 ; } } if ( jjte004 instanceof ParseException ) { { if ( true ) throw ( ParseException ) jjte004 ; } } { if ( true ) throw ( Error ) jjte004 ; } } finally { if ( jjtc004 ) { jjtree . closeNodeScope ( jjtn004 , 2 ) ; } } break ; default : jj_la1 [ 50 ] = jj_gen ; jj_consume_token ( - 1 ) ; throw new ParseException ( ) ; } } } final public void AdditiveExpression ( ) throws ParseException { MultiplicativeExpression ( ) ; label_18 : while ( true ) { switch ( ( jj_ntk == - 1 ) ? jj_ntk ( ) : jj_ntk ) { case MINUS : case PLUS : ; break ; default : jj_la1 [ 51 ] = jj_gen ; break label_18 ; } switch ( ( jj_ntk == - 1 ) ? jj_ntk ( ) : jj_ntk ) { case PLUS : jj_consume_token ( PLUS ) ; ASTAddNode jjtn001 = new ASTAddNode ( this , JJTADDNODE ) ; boolean jjtc001 = true ; jjtree . openNodeScope ( jjtn001 ) ; try { MultiplicativeExpression ( ) ; } catch ( Throwable jjte001 ) { if ( jjtc001 ) { jjtree . clearNodeScope ( jjtn001 ) ; jjtc001 = false ; } else { jjtree . popNode ( ) ; } if ( jjte001 instanceof RuntimeException ) { { if ( true ) throw ( RuntimeException ) jjte001 ; } } if ( jjte001 instanceof ParseException ) { { if ( true ) throw ( ParseException ) jjte001 ; } } { if ( true ) throw ( Error ) jjte001 ; } } finally { if ( jjtc001 ) { jjtree . closeNodeScope ( jjtn001 , 2 ) ; } } break ; case MINUS : jj_consume_token ( MINUS ) ; ASTSubtractNode jjtn002 = new ASTSubtractNode ( this , JJTSUBTRACTNODE ) ; boolean jjtc002 = true ; jjtree . openNodeScope ( jjtn002 ) ; try { MultiplicativeExpression ( ) ; } catch ( Throwable jjte002 ) { if ( jjtc002 ) { jjtree . clearNodeScope ( jjtn002 ) ; jjtc002 = false ; } else { jjtree . popNode ( ) ; } if ( jjte002 instanceof RuntimeException ) { { if ( true ) throw ( RuntimeException ) jjte002 ; } } if ( jjte002 instanceof ParseException ) { { if ( true ) throw ( ParseException ) jjte002 ; } } { if ( true ) throw ( Error ) jjte002 ; } } finally { if ( jjtc002 ) { jjtree . closeNodeScope ( jjtn002 , 2 ) ; } } break ; default : jj_la1 [ 52 ] = jj_gen ; jj_consume_token ( - 1 ) ; throw new ParseException ( ) ; } } } final public void MultiplicativeExpression ( ) throws ParseException { UnaryExpression ( ) ; label_19 : while ( true ) { switch ( ( jj_ntk == - 1 ) ? jj_ntk ( ) : jj_ntk ) { case MULTIPLY : case DIVIDE : case MODULUS : ; break ; default : jj_la1 [ 53 ] = jj_gen ; break label_19 ; } switch ( ( jj_ntk == - 1 ) ? jj_ntk ( ) : jj_ntk ) { case MULTIPLY : jj_consume_token ( MULTIPLY ) ; ASTMulNode jjtn001 = new ASTMulNode ( this , JJTMULNODE ) ; boolean jjtc001 = true ; jjtree . openNodeScope ( jjtn001 ) ; try { UnaryExpression ( ) ; } catch ( Throwable jjte001 ) { if ( jjtc001 ) { jjtree . clearNodeScope ( jjtn001 ) ; jjtc001 = false ; } else { jjtree . popNode ( ) ; } if ( jjte001 instanceof RuntimeException ) { { if ( true ) throw ( RuntimeException ) jjte001 ; } } if ( jjte001 instanceof ParseException ) { { if ( true ) throw ( ParseException ) jjte001 ; } } { if ( true ) throw ( Error ) jjte001 ; } } finally { if ( jjtc001 ) { jjtree . closeNodeScope ( jjtn001 , 2 ) ; } } break ; case DIVIDE : jj_consume_token ( DIVIDE ) ; ASTDivNode jjtn002 = new ASTDivNode ( this , JJTDIVNODE ) ; boolean jjtc002 = true ; jjtree . openNodeScope ( jjtn002 ) ; try { UnaryExpression ( ) ; } catch ( Throwable jjte002 ) { if ( jjtc002 ) { jjtree . clearNodeScope ( jjtn002 ) ; jjtc002 = false ; } else { jjtree . popNode ( ) ; } if ( jjte002 instanceof RuntimeException ) { { if ( true ) throw ( RuntimeException ) jjte002 ; } } if ( jjte002 instanceof ParseException ) { { if ( true ) throw ( ParseException ) jjte002 ; } } { if ( true ) throw ( Error ) jjte002 ; } } finally { if ( jjtc002 ) { jjtree . closeNodeScope ( jjtn002 , 2 ) ; } } break ; case MODULUS : jj_consume_token ( MODULUS ) ; ASTModNode jjtn003 = new ASTModNode ( this , JJTMODNODE ) ; boolean jjtc003 = true ; jjtree . openNodeScope ( jjtn003 ) ; try { UnaryExpression ( ) ; } catch ( Throwable jjte003 ) { if ( jjtc003 ) { jjtree . clearNodeScope ( jjtn003 ) ; jjtc003 = false ; } else { jjtree . popNode ( ) ; } if ( jjte003 instanceof RuntimeException ) { { if ( true ) throw ( RuntimeException ) jjte003 ; } } if ( jjte003 instanceof ParseException ) { { if ( true ) throw ( ParseException ) jjte003 ; } } { if ( true ) throw ( Error ) jjte003 ; } } finally { if ( jjtc003 ) { jjtree . closeNodeScope ( jjtn003 , 2 ) ; } } break ; default : jj_la1 [ 54 ] = jj_gen ; jj_consume_token ( - 1 ) ; throw new ParseException ( ) ; } } } final public void UnaryExpression ( ) throws ParseException { if ( jj_2_11 ( 2 ) ) { switch ( ( jj_ntk == - 1 ) ? jj_ntk ( ) : jj_ntk ) { case WHITESPACE : jj_consume_token ( WHITESPACE ) ; break ; default : jj_la1 [ 55 ] = jj_gen ; ; } jj_consume_token ( LOGICAL_NOT ) ; ASTNotNode jjtn001 = new ASTNotNode ( this , JJTNOTNODE ) ; boolean jjtc001 = true ; jjtree . openNodeScope ( jjtn001 ) ; try { UnaryExpression ( ) ; } catch ( Throwable jjte001 ) { if ( jjtc001 ) { jjtree . clearNodeScope ( jjtn001 ) ; jjtc001 = false ; } else { jjtree . popNode ( ) ; } if ( jjte001 instanceof RuntimeException ) { { if ( true ) throw ( RuntimeException ) jjte001 ; } } if ( jjte001 instanceof ParseException ) { { if ( true ) throw ( ParseException ) jjte001 ; } } { if ( true ) throw ( Error ) jjte001 ; } } finally { if ( jjtc001 ) { jjtree . closeNodeScope ( jjtn001 , 1 ) ; } } } else { switch ( ( jj_ntk == - 1 ) ? jj_ntk ( ) : jj_ntk ) { case LBRACKET : case LEFT_CURLEY : case LPAREN : case WHITESPACE : case STRING_LITERAL : case TRUE : case FALSE : case INTEGER_LITERAL : case FLOATING_POINT_LITERAL : case IDENTIFIER : case LCURLY : PrimaryExpression ( ) ; break ; default : jj_la1 [ 56 ] = jj_gen ; jj_consume_token ( - 1 ) ; throw new ParseException ( ) ; } } } final public void PrimaryExpression ( ) throws ParseException { switch ( ( jj_ntk == - 1 ) ? jj_ntk ( ) : jj_ntk ) { case WHITESPACE : jj_consume_token ( WHITESPACE ) ; break ; default : jj_la1 [ 57 ] = jj_gen ; ; } switch ( ( jj_ntk == - 1 ) ? jj_ntk ( ) : jj_ntk ) { case STRING_LITERAL : StringLiteral ( ) ; break ; case IDENTIFIER : case LCURLY : Reference ( ) ; break ; case INTEGER_LITERAL : IntegerLiteral ( ) ; break ; default : jj_la1 [ 58 ] = jj_gen ; if ( jj_2_12 ( 2147483647 ) ) { IntegerRange ( ) ; } else { switch ( ( jj_ntk == - 1 ) ? jj_ntk ( ) : jj_ntk ) { case FLOATING_POINT_LITERAL : FloatingPointLiteral ( ) ; break ; case LEFT_CURLEY : Map ( ) ; break ; case LBRACKET : ObjectArray ( ) ; break ; case TRUE : True ( ) ; break ; case FALSE : False ( ) ; break ; case LPAREN : jj_consume_token ( LPAREN ) ; Expression ( ) ; jj_consume_token ( RPAREN ) ; break ; default : jj_la1 [ 59 ] = jj_gen ; jj_consume_token ( - 1 ) ; throw new ParseException ( ) ; } } } switch ( ( jj_ntk == - 1 ) ? jj_ntk ( ) : jj_ntk ) { case WHITESPACE : jj_consume_token ( WHITESPACE ) ; break ; default : jj_la1 [ 60 ] = jj_gen ; ; } } final private boolean jj_2_1 ( int xla ) { jj_la = xla ; jj_lastpos = jj_scanpos = token ; try { return ! jj_3_1 ( ) ; } catch ( LookaheadSuccess ls ) { return true ; } finally { jj_save ( 0 , xla ) ; } } final private boolean jj_2_2 ( int xla ) { jj_la = xla ; jj_lastpos = jj_scanpos = token ; try { return ! jj_3_2 ( ) ; } catch ( LookaheadSuccess ls ) { return true ; } finally { jj_save ( 1 , xla ) ; } } final private boolean jj_2_3 ( int xla ) { jj_la = xla ; jj_lastpos = jj_scanpos = token ; try { return ! jj_3_3 ( ) ; } catch ( LookaheadSuccess ls ) { return true ; } finally { jj_save ( 2 , xla ) ; } } final private boolean jj_2_4 ( int xla ) { jj_la = xla ; jj_lastpos = jj_scanpos = token ; try { return ! jj_3_4 ( ) ; } catch ( LookaheadSuccess ls ) { return true ; } finally { jj_save ( 3 , xla ) ; } } final private boolean jj_2_5 ( int xla ) { jj_la = xla ; jj_lastpos = jj_scanpos = token ; try { return ! jj_3_5 ( ) ; } catch ( LookaheadSuccess ls ) { return true ; } finally { jj_save ( 4 , xla ) ; } } final private boolean jj_2_6 ( int xla ) { jj_la = xla ; jj_lastpos = jj_scanpos = token ; try { return ! jj_3_6 ( ) ; } catch ( LookaheadSuccess ls ) { return true ; } finally { jj_save ( 5 , xla ) ; } } final private boolean jj_2_7 ( int xla ) { jj_la = xla ; jj_lastpos = jj_scanpos = token ; try { return ! jj_3_7 ( ) ; } catch ( LookaheadSuccess ls ) { return true ; } finally { jj_save ( 6 , xla ) ; } } final private boolean jj_2_8 ( int xla ) { jj_la = xla ; jj_lastpos = jj_scanpos = token ; try { return ! jj_3_8 ( ) ; } catch ( LookaheadSuccess ls ) { return true ; } finally { jj_save ( 7 , xla ) ; } } final private boolean jj_2_9 ( int xla ) { jj_la = xla ; jj_lastpos = jj_scanpos = token ; try { return ! jj_3_9 ( ) ; } catch ( LookaheadSuccess ls ) { return true ; } finally { jj_save ( 8 , xla ) ; } } final private boolean jj_2_10 ( int xla ) { jj_la = xla ; jj_lastpos = jj_scanpos = token ; try { return ! jj_3_10 ( ) ; } catch ( LookaheadSuccess ls ) { return true ; } finally { jj_save ( 9 , xla ) ; } } final private boolean jj_2_11 ( int xla ) { jj_la = xla ; jj_lastpos = jj_scanpos = token ; try { return ! jj_3_11 ( ) ; } catch ( LookaheadSuccess ls ) { return true ; } finally { jj_save ( 10 , xla ) ; } } final private boolean jj_2_12 ( int xla ) { jj_la = xla ; jj_lastpos = jj_scanpos = token ; try { return ! jj_3_12 ( ) ; } catch ( LookaheadSuccess ls ) { return true ; } finally { jj_save ( 11 , xla ) ; } } final private boolean jj_3R_82 ( ) { if ( jj_scan_token ( COMMA ) ) return true ; if ( jj_3R_25 ( ) ) return true ; return false ; } final private boolean jj_3_8 ( ) { if ( jj_3R_29 ( ) ) return true ; return false ; } final private boolean jj_3R_26 ( ) { if ( jj_3R_20 ( ) ) return true ; return false ; } final private boolean jj_3R_66 ( ) { if ( jj_scan_token ( FALSE ) ) return true ; return false ; } final private boolean jj_3R_65 ( ) { if ( jj_scan_token ( TRUE ) ) return true ; return false ; } final private boolean jj_3_9 ( ) { if ( jj_scan_token ( DOT ) ) return true ; Token xsp ; xsp = jj_scanpos ; if ( jj_3_10 ( ) ) { jj_scanpos = xsp ; if ( jj_3R_30 ( ) ) return true ; } return false ; } final private boolean jj_3R_57 ( ) { if ( jj_3R_25 ( ) ) return true ; Token xsp ; while ( true ) { xsp = jj_scanpos ; if ( jj_3R_82 ( ) ) { jj_scanpos = xsp ; break ; } } return false ; } final private boolean jj_3_7 ( ) { if ( jj_scan_token ( DOT ) ) return true ; Token xsp ; xsp = jj_scanpos ; if ( jj_3_8 ( ) ) { jj_scanpos = xsp ; if ( jj_3R_28 ( ) ) return true ; } return false ; } final private boolean jj_3_2 ( ) { if ( jj_scan_token ( DOUBLE_ESCAPE ) ) return true ; return false ; } final private boolean jj_3R_35 ( ) { if ( jj_scan_token ( LCURLY ) ) return true ; if ( jj_scan_token ( IDENTIFIER ) ) return true ; Token xsp ; while ( true ) { xsp = jj_scanpos ; if ( jj_3_9 ( ) ) { jj_scanpos = xsp ; break ; } } if ( jj_scan_token ( RCURLY ) ) return true ; return false ; } final private boolean jj_3_12 ( ) { if ( jj_scan_token ( LBRACKET ) ) return true ; Token xsp ; xsp = jj_scanpos ; if ( jj_scan_token ( 26 ) ) jj_scanpos = xsp ; xsp = jj_scanpos ; if ( jj_3R_32 ( ) ) { jj_scanpos = xsp ; if ( jj_3R_33 ( ) ) return true ; } xsp = jj_scanpos ; if ( jj_scan_token ( 26 ) ) jj_scanpos = xsp ; if ( jj_scan_token ( DOUBLEDOT ) ) return true ; return false ; } final private boolean jj_3R_34 ( ) { if ( jj_scan_token ( IDENTIFIER ) ) return true ; Token xsp ; while ( true ) { xsp = jj_scanpos ; if ( jj_3_7 ( ) ) { jj_scanpos = xsp ; break ; } } return false ; } final private boolean jj_3R_81 ( ) { if ( jj_scan_token ( LPAREN ) ) return true ; return false ; } final private boolean jj_3R_80 ( ) { if ( jj_3R_66 ( ) ) return true ; return false ; } final private boolean jj_3R_79 ( ) { if ( jj_3R_65 ( ) ) return true ; return false ; } final private boolean jj_3R_20 ( ) { Token xsp ; xsp = jj_scanpos ; if ( jj_3R_34 ( ) ) { jj_scanpos = xsp ; if ( jj_3R_35 ( ) ) return true ; } return false ; } final private boolean jj_3R_78 ( ) { if ( jj_3R_64 ( ) ) return true ; return false ; } final private boolean jj_3R_77 ( ) { if ( jj_3R_63 ( ) ) return true ; return false ; } final private boolean jj_3R_76 ( ) { if ( jj_3R_62 ( ) ) return true ; return false ; } final private boolean jj_3R_75 ( ) { if ( jj_3R_61 ( ) ) return true ; return false ; } final private boolean jj_3R_74 ( ) { if ( jj_3R_36 ( ) ) return true ; return false ; } final private boolean jj_3R_73 ( ) { if ( jj_3R_20 ( ) ) return true ; return false ; } final private boolean jj_3_6 ( ) { if ( jj_scan_token ( LBRACKET ) ) return true ; Token xsp ; xsp = jj_scanpos ; if ( jj_scan_token ( 26 ) ) jj_scanpos = xsp ; xsp = jj_scanpos ; if ( jj_3R_26 ( ) ) { jj_scanpos = xsp ; if ( jj_3R_27 ( ) ) return true ; } xsp = jj_scanpos ; if ( jj_scan_token ( 26 ) ) jj_scanpos = xsp ; if ( jj_scan_token ( DOUBLEDOT ) ) return true ; return false ; } final private boolean jj_3R_29 ( ) { if ( jj_3R_56 ( ) ) return true ; if ( jj_scan_token ( LPAREN ) ) return true ; Token xsp ; xsp = jj_scanpos ; if ( jj_3R_57 ( ) ) jj_scanpos = xsp ; if ( jj_scan_token ( REFMOD2_RPAREN ) ) return true ; return false ; } final private boolean jj_3R_72 ( ) { if ( jj_3R_60 ( ) ) return true ; return false ; } final private boolean jj_3R_67 ( ) { Token xsp ; xsp = jj_scanpos ; if ( jj_scan_token ( 26 ) ) jj_scanpos = xsp ; xsp = jj_scanpos ; if ( jj_3R_72 ( ) ) { jj_scanpos = xsp ; if ( jj_3R_73 ( ) ) { jj_scanpos = xsp ; if ( jj_3R_74 ( ) ) { jj_scanpos = xsp ; if ( jj_3R_75 ( ) ) { jj_scanpos = xsp ; if ( jj_3R_76 ( ) ) { jj_scanpos = xsp ; if ( jj_3R_77 ( ) ) { jj_scanpos = xsp ; if ( jj_3R_78 ( ) ) { jj_scanpos = xsp ; if ( jj_3R_79 ( ) ) { jj_scanpos = xsp ; if ( jj_3R_80 ( ) ) { jj_scanpos = xsp ; if ( jj_3R_81 ( ) ) return true ; } } } } } } } } } return false ; } final private boolean jj_3R_55 ( ) { if ( jj_3R_62 ( ) ) return true ; return false ; } final private boolean jj_3R_54 ( ) { if ( jj_3R_20 ( ) ) return true ; return false ; } final private boolean jj_3R_53 ( ) { if ( jj_3R_66 ( ) ) return true ; return false ; } final private boolean jj_3R_85 ( ) { if ( jj_scan_token ( COMMA ) ) return true ; if ( jj_3R_25 ( ) ) return true ; if ( jj_scan_token ( COLON ) ) return true ; if ( jj_3R_25 ( ) ) return true ; return false ; } final private boolean jj_3R_52 ( ) { if ( jj_3R_65 ( ) ) return true ; return false ; } final private boolean jj_3R_31 ( ) { Token xsp ; xsp = jj_scanpos ; if ( jj_3_11 ( ) ) { jj_scanpos = xsp ; if ( jj_3R_58 ( ) ) return true ; } return false ; } final private boolean jj_3_11 ( ) { Token xsp ; xsp = jj_scanpos ; if ( jj_scan_token ( 26 ) ) jj_scanpos = xsp ; if ( jj_scan_token ( LOGICAL_NOT ) ) return true ; if ( jj_3R_31 ( ) ) return true ; return false ; } final private boolean jj_3R_58 ( ) { if ( jj_3R_67 ( ) ) return true ; return false ; } final private boolean jj_3R_51 ( ) { if ( jj_3R_64 ( ) ) return true ; return false ; } final private boolean jj_3R_50 ( ) { if ( jj_3R_63 ( ) ) return true ; return false ; } final private boolean jj_3R_49 ( ) { if ( jj_3R_61 ( ) ) return true ; return false ; } final private boolean jj_3R_48 ( ) { if ( jj_3R_36 ( ) ) return true ; return false ; } final private boolean jj_3R_47 ( ) { if ( jj_3R_60 ( ) ) return true ; return false ; } final private boolean jj_3R_22 ( ) { if ( jj_3R_36 ( ) ) return true ; return false ; } final private boolean jj_3R_84 ( ) { if ( jj_3R_36 ( ) ) return true ; return false ; } final private boolean jj_3R_69 ( ) { if ( jj_3R_36 ( ) ) return true ; return false ; } final private boolean jj_3R_86 ( ) { if ( jj_scan_token ( COMMA ) ) return true ; if ( jj_3R_25 ( ) ) return true ; return false ; } final private boolean jj_3R_25 ( ) { Token xsp ; xsp = jj_scanpos ; if ( jj_scan_token ( 26 ) ) jj_scanpos = xsp ; xsp = jj_scanpos ; if ( jj_3R_47 ( ) ) { jj_scanpos = xsp ; if ( jj_3R_48 ( ) ) { jj_scanpos = xsp ; if ( jj_3R_49 ( ) ) { jj_scanpos = xsp ; if ( jj_3R_50 ( ) ) { jj_scanpos = xsp ; if ( jj_3R_51 ( ) ) { jj_scanpos = xsp ; if ( jj_3R_52 ( ) ) { jj_scanpos = xsp ; if ( jj_3R_53 ( ) ) { jj_scanpos = xsp ; if ( jj_3R_54 ( ) ) { jj_scanpos = xsp ; if ( jj_3R_55 ( ) ) return true ; } } } } } } } } xsp = jj_scanpos ; if ( jj_scan_token ( 26 ) ) jj_scanpos = xsp ; return false ; } final private boolean jj_3_1 ( ) { if ( jj_3R_20 ( ) ) return true ; return false ; } final private boolean jj_3R_21 ( ) { if ( jj_3R_20 ( ) ) return true ; return false ; } final private boolean jj_3R_83 ( ) { if ( jj_3R_20 ( ) ) return true ; return false ; } final private boolean jj_3R_68 ( ) { if ( jj_3R_20 ( ) ) return true ; return false ; } final private boolean jj_3R_71 ( ) { if ( jj_3R_25 ( ) ) return true ; Token xsp ; while ( true ) { xsp = jj_scanpos ; if ( jj_3R_86 ( ) ) { jj_scanpos = xsp ; break ; } } return false ; } final private boolean jj_3R_61 ( ) { if ( jj_scan_token ( LBRACKET ) ) return true ; Token xsp ; xsp = jj_scanpos ; if ( jj_scan_token ( 26 ) ) jj_scanpos = xsp ; xsp = jj_scanpos ; if ( jj_3R_68 ( ) ) { jj_scanpos = xsp ; if ( jj_3R_69 ( ) ) return true ; } xsp = jj_scanpos ; if ( jj_scan_token ( 26 ) ) jj_scanpos = xsp ; if ( jj_scan_token ( DOUBLEDOT ) ) return true ; xsp = jj_scanpos ; if ( jj_scan_token ( 26 ) ) jj_scanpos = xsp ; xsp = jj_scanpos ; if ( jj_3R_83 ( ) ) { jj_scanpos = xsp ; if ( jj_3R_84 ( ) ) return true ; } xsp = jj_scanpos ; if ( jj_scan_token ( 26 ) ) jj_scanpos = xsp ; if ( jj_scan_token ( RBRACKET ) ) return true ; return false ; } final private boolean jj_3R_64 ( ) { if ( jj_scan_token ( LBRACKET ) ) return true ; Token xsp ; xsp = jj_scanpos ; if ( jj_3R_71 ( ) ) jj_scanpos = xsp ; if ( jj_scan_token ( RBRACKET ) ) return true ; return false ; } final private boolean jj_3R_46 ( ) { if ( jj_3R_66 ( ) ) return true ; return false ; } final private boolean jj_3R_70 ( ) { Token xsp ; xsp = jj_scanpos ; if ( jj_scan_token ( 26 ) ) jj_scanpos = xsp ; return false ; } final private boolean jj_3_5 ( ) { if ( jj_3R_25 ( ) ) return true ; if ( jj_scan_token ( COLON ) ) return true ; if ( jj_3R_25 ( ) ) return true ; Token xsp ; while ( true ) { xsp = jj_scanpos ; if ( jj_3R_85 ( ) ) { jj_scanpos = xsp ; break ; } } return false ; } final private boolean jj_3R_45 ( ) { if ( jj_3R_65 ( ) ) return true ; return false ; } final private boolean jj_3R_63 ( ) { if ( jj_scan_token ( LEFT_CURLEY ) ) return true ; Token xsp ; xsp = jj_scanpos ; if ( jj_3_5 ( ) ) { jj_scanpos = xsp ; if ( jj_3R_70 ( ) ) return true ; } if ( jj_scan_token ( RIGHT_CURLEY ) ) return true ; return false ; } final private boolean jj_3_3 ( ) { if ( jj_scan_token ( LBRACKET ) ) return true ; Token xsp ; xsp = jj_scanpos ; if ( jj_scan_token ( 26 ) ) jj_scanpos = xsp ; xsp = jj_scanpos ; if ( jj_3R_21 ( ) ) { jj_scanpos = xsp ; if ( jj_3R_22 ( ) ) return true ; } xsp = jj_scanpos ; if ( jj_scan_token ( 26 ) ) jj_scanpos = xsp ; if ( jj_scan_token ( DOUBLEDOT ) ) return true ; return false ; } final private boolean jj_3R_44 ( ) { if ( jj_3R_64 ( ) ) return true ; return false ; } final private boolean jj_3R_43 ( ) { if ( jj_3R_63 ( ) ) return true ; return false ; } final private boolean jj_3R_42 ( ) { if ( jj_3R_62 ( ) ) return true ; return false ; } final private boolean jj_3R_41 ( ) { if ( jj_3R_61 ( ) ) return true ; return false ; } final private boolean jj_3R_40 ( ) { if ( jj_3R_36 ( ) ) return true ; return false ; } final private boolean jj_3R_39 ( ) { if ( jj_3R_60 ( ) ) return true ; return false ; } final private boolean jj_3R_23 ( ) { if ( jj_scan_token ( COMMA ) ) return true ; Token xsp ; xsp = jj_scanpos ; if ( jj_scan_token ( 26 ) ) jj_scanpos = xsp ; return false ; } final private boolean jj_3R_38 ( ) { if ( jj_3R_59 ( ) ) return true ; return false ; } final private boolean jj_3R_37 ( ) { if ( jj_3R_20 ( ) ) return true ; return false ; } final private boolean jj_3R_24 ( ) { Token xsp ; xsp = jj_scanpos ; if ( jj_3R_37 ( ) ) { jj_scanpos = xsp ; if ( jj_3R_38 ( ) ) { jj_scanpos = xsp ; if ( jj_3R_39 ( ) ) { jj_scanpos = xsp ; if ( jj_3R_40 ( ) ) { jj_scanpos = xsp ; if ( jj_3R_41 ( ) ) { jj_scanpos = xsp ; if ( jj_3R_42 ( ) ) { jj_scanpos = xsp ; if ( jj_3R_43 ( ) ) { jj_scanpos = xsp ; if ( jj_3R_44 ( ) ) { jj_scanpos = xsp ; if ( jj_3R_45 ( ) ) { jj_scanpos = xsp ; if ( jj_3R_46 ( ) ) return true ; } } } } } } } } } return false ; } final private boolean jj_3R_59 ( ) { if ( jj_scan_token ( WORD ) ) return true ; return false ; } final private boolean jj_3R_56 ( ) { if ( jj_scan_token ( IDENTIFIER ) ) return true ; return false ; } final private boolean jj_3_4 ( ) { Token xsp ; xsp = jj_scanpos ; if ( jj_scan_token ( 26 ) ) jj_scanpos = xsp ; xsp = jj_scanpos ; if ( jj_3R_23 ( ) ) jj_scanpos = xsp ; if ( jj_3R_24 ( ) ) return true ; return false ; } final private boolean jj_3R_60 ( ) { if ( jj_scan_token ( STRING_LITERAL ) ) return true ; return false ; } final private boolean jj_3R_30 ( ) { if ( jj_3R_56 ( ) ) return true ; return false ; } final private boolean jj_3R_36 ( ) { if ( jj_scan_token ( INTEGER_LITERAL ) ) return true ; return false ; } final private boolean jj_3R_28 ( ) { if ( jj_3R_56 ( ) ) return true ; return false ; } final private boolean jj_3R_62 ( ) { if ( jj_scan_token ( FLOATING_POINT_LITERAL ) ) return true ; return false ; } final private boolean jj_3R_33 ( ) { if ( jj_3R_36 ( ) ) return true ; return false ; } final private boolean jj_3R_32 ( ) { if ( jj_3R_20 ( ) ) return true ; return false ; } final private boolean jj_3R_27 ( ) { if ( jj_3R_36 ( ) ) return true ; return false ; } final private boolean jj_3_10 ( ) { if ( jj_3R_29 ( ) ) return true ; return false ; } public ParserTokenManager token_source ; public Token token , jj_nt ; private int jj_ntk ; private Token jj_scanpos , jj_lastpos ; private int jj_la ; public boolean lookingAhead = false ; private boolean jj_semLA ; private int jj_gen ; final private int [ ] jj_la1 = new int [ 61 ] ; static private int [ ] jj_la1_0 ; static private int [ ] jj_la1_1 ; static private int [ ] jj_la1_2 ; static { jj_la1_0 ( ) ; jj_la1_1 ( ) ; jj_la1_2 ( ) ; } private static void jj_la1_0 ( ) { jj_la1_0 = new int [ ] { 0x9bc1b00 , 0x0 , 0x9bc1b00 , 0x400000 , 0x1840000 , 0x8000000 , 0x30000042 , 0x0 , 0x4000000 , 0x4000000 , 0x4000000 , 0x8 , 0x4000000 , 0x9bc1b00 , 0x8 , 0x4000000 , 0x8 , 0x3c000042 , 0x4000000 , 0x0 , 0x4000000 , 0x4000000 , 0x0 , 0x4000000 , 0x4000000 , 0x8000000 , 0x30000042 , 0x4000000 , 0x8 , 0x3c000042 , 0x0 , 0x0 , 0x0 , 0x8300300 , 0x4000000 , 0x9bc1b00 , 0x0 , 0x0 , 0x0 , 0x9bc1b00 , 0x4000000 , 0x9bc1b00 , 0x4000000 , 0x4000000 , 0x40000000 , 0x0 , 0x0 , 0x0 , 0x0 , 0x0 , 0x0 , 0x80000000 , 0x80000000 , 0x0 , 0x0 , 0x4000000 , 0x3c000142 , 0x4000000 , 0x8000000 , 0x30000142 , 0x4000000 , } ; } private static void jj_la1_1 ( ) { jj_la1_1 = new int [ ] { 0xc6348000 , 0x48000 , 0x86300000 , 0x0 , 0x0 , 0x42100000 , 0x200000 , 0x6000000 , 0x0 , 0x0 , 0x0 , 0x0 , 0x0 , 0xc6348000 , 0x0 , 0x0 , 0x0 , 0x40300000 , 0x0 , 0x40100000 , 0x0 , 0x0 , 0x40100000 , 0x0 , 0x0 , 0x100000 , 0x40200000 , 0x0 , 0x0 , 0x40300000 , 0x40000000 , 0x40000000 , 0x40000000 , 0x80300000 , 0x0 , 0xc6348000 , 0x10000 , 0x10000 , 0x20000 , 0xc6348000 , 0x0 , 0xc6348000 , 0x0 , 0x0 , 0x0 , 0x20 , 0x10 , 0xc00 , 0xc00 , 0x3c0 , 0x3c0 , 0x1 , 0x1 , 0xe , 0xe , 0x0 , 0x40300000 , 0x0 , 0x40100000 , 0x200000 , 0x0 , } ; } private static void jj_la1_2 ( ) { jj_la1_2 = new int [ ] { 0x3 , 0x0 , 0x3 , 0x0 , 0x0 , 0x1 , 0x0 , 0x0 , 0x0 , 0x0 , 0x0 , 0x0 , 0x0 , 0x3 , 0x0 , 0x0 , 0x0 , 0x1 , 0x0 , 0x1 , 0x0 , 0x0 , 0x1 , 0x0 , 0x0 , 0x0 , 0x1 , 0x0 , 0x0 , 0x1 , 0x0 , 0x0 , 0x1 , 0x3 , 0x0 , 0x3 , 0x0 , 0x0 , 0x0 , 0x3 , 0x0 , 0x3 , 0x0 , 0x0 , 0x0 , 0x0 , 0x0 , 0x0 , 0x0 , 0x0 , 0x0 , 0x0 , 0x0 , 0x0 , 0x0 , 0x0 , 0x1 , 0x0 , 0x1 , 0x0 , 0x0 , } ; } final private JJCalls [ ] jj_2_rtns = new JJCalls [ 12 ] ; private boolean jj_rescan = false ; private int jj_gc = 0 ; public Parser ( CharStream stream ) { token_source = new ParserTokenManager ( stream ) ; token = new Token ( ) ; jj_ntk = - 1 ; jj_gen = 0 ; for ( int i = 0 ; i < 61 ; i ++ ) jj_la1 [ i ] = - 1 ; for ( int i = 0 ; i < jj_2_rtns . length ; i ++ ) jj_2_rtns [ i ] = new JJCalls ( ) ; } public void ReInit ( CharStream stream ) { token_source . ReInit ( stream ) ; token = new Token ( ) ; jj_ntk = - 1 ; jjtree . reset ( ) ; jj_gen = 0 ; for ( int i = 0 ; i < 61 ; i ++ ) jj_la1 [ i ] = - 1 ; for ( int i = 0 ; i < jj_2_rtns . length ; i ++ ) jj_2_rtns [ i ] = new JJCalls ( ) ; } public Parser ( ParserTokenManager tm ) { token_source = tm ; token = new Token ( ) ; jj_ntk = - 1 ; jj_gen = 0 ; for ( int i = 0 ; i < 61 ; i ++ ) jj_la1 [ i ] = - 1 ; for ( int i = 0 ; i < jj_2_rtns . length ; i ++ ) jj_2_rtns [ i ] = new JJCalls ( ) ; } public void ReInit ( ParserTokenManager tm ) { token_source = tm ; token = new Token ( ) ; jj_ntk = - 1 ; jjtree . reset ( ) ; jj_gen = 0 ; for ( int i = 0 ; i < 61 ; i ++ ) jj_la1 [ i ] = - 1 ; for ( int i = 0 ; i < jj_2_rtns . length ; i ++ ) jj_2_rtns [ i ] = new JJCalls ( ) ; } final private Token jj_consume_token ( int kind ) throws ParseException { Token oldToken ; if ( ( oldToken = token ) . next != null ) token = token . next ; else token = token . next = token_source . getNextToken ( ) ; jj_ntk = - 1 ; if ( token . kind == kind ) { jj_gen ++ ; if ( ++ jj_gc > 100 ) { jj_gc = 0 ; for ( int i = 0 ; i < jj_2_rtns . length ; i ++ ) { JJCalls c = jj_2_rtns [ i ] ; while ( c != null ) { if ( c . gen < jj_gen ) c . first = null ; c = c . next ; } } } return token ; } token = oldToken ; jj_kind = kind ; throw generateParseException ( ) ; } static private final class LookaheadSuccess extends java . lang . Error { } final private LookaheadSuccess jj_ls = new LookaheadSuccess ( ) ; final private boolean jj_scan_token ( int kind ) { if ( jj_scanpos == jj_lastpos ) { jj_la -- ; if ( jj_scanpos . next == null ) { jj_lastpos = jj_scanpos = jj_scanpos . next = token_source . getNextToken ( ) ; } else { jj_lastpos = jj_scanpos = jj_scanpos . next ; } } else { jj_scanpos = jj_scanpos . next ; } if ( jj_rescan ) { int i = 0 ; Token tok = token ; while ( tok != null && tok != jj_scanpos ) { i ++ ; tok = tok . next ; } if ( tok != null ) jj_add_error_token ( kind , i ) ; } if ( jj_scanpos . kind != kind ) return true ; if ( jj_la == 0 && jj_scanpos == jj_lastpos ) throw jj_ls ; return false ; } final public Token getNextToken ( ) { if ( token . next != null ) token = token . next ; else token = token . next = token_source . getNextToken ( ) ; jj_ntk = - 1 ; jj_gen ++ ; return token ; } final public Token getToken ( int index ) { Token t = lookingAhead ? jj_scanpos : token ; for ( int i = 0 ; i < index ; i ++ ) { if ( t . next != null ) t = t . next ; else t = t . next = token_source . getNextToken ( ) ; } return t ; } final private int jj_ntk ( ) { if ( ( jj_nt = token . next ) == null ) return ( jj_ntk = ( token . next = token_source . getNextToken ( ) ) . kind ) ; else return ( jj_ntk = jj_nt . kind ) ; } private java . util . Vector jj_expentries = new java . util . Vector ( ) ; private int [ ] jj_expentry ; private int jj_kind = - 1 ; private int [ ] jj_lasttokens = new int [ 100 ] ; private int jj_endpos ; private void jj_add_error_token ( int kind , int pos ) { if ( pos >= 100 ) return ; if ( pos == jj_endpos + 1 ) { jj_lasttokens [ jj_endpos ++ ] = kind ; } else if ( jj_endpos != 0 ) { jj_expentry = new int [ jj_endpos ] ; for ( int i = 0 ; i < jj_endpos ; i ++ ) { jj_expentry [ i ] = jj_lasttokens [ i ] ; } boolean exists = false ; for ( java . util . Enumeration e = jj_expentries . elements ( ) ; e . hasMoreElements ( ) ; ) { int [ ] oldentry = ( int [ ] ) ( e . nextElement ( ) ) ; if ( oldentry . length == jj_expentry . length ) { exists = true ; for ( int i = 0 ; i < jj_expentry . length ; i ++ ) { if ( oldentry [ i ] != jj_expentry [ i ] ) { exists = false ; break ; } } if ( exists ) break ; } } if ( ! exists ) jj_expentries . addElement ( jj_expentry ) ; if ( pos != 0 ) jj_lasttokens [ ( jj_endpos = pos ) - 1 ] = kind ; } } public ParseException generateParseException ( ) { jj_expentries . removeAllElements ( ) ; boolean [ ] la1tokens = new boolean [ 68 ] ; for ( int i = 0 ; i < 68 ; i ++ ) { la1tokens [ i ] = false ; } if ( jj_kind >= 0 ) { la1tokens [ jj_kind ] = true ; jj_kind = - 1 ; } for ( int i = 0 ; i < 61 ; i ++ ) { if ( jj_la1 [ i ] == jj_gen ) { for ( int j = 0 ; j < 32 ; j ++ ) { if ( ( jj_la1_0 [ i ] & ( 1 << j ) ) != 0 ) { la1tokens [ j ] = true ; } if ( ( jj_la1_1 [ i ] & ( 1 << j ) ) != 0 ) { la1tokens [ 32 + j ] = true ; } if ( ( jj_la1_2 [ i ] & ( 1 << j ) ) != 0 ) { la1tokens [ 64 + j ] = true ; } } } } for ( int i = 0 ; i < 68 ; i ++ ) { if ( la1tokens [ i ] ) { jj_expentry = new int [ 1 ] ; jj_expentry [ 0 ] = i ; jj_expentries . addElement ( jj_expentry ) ; } } jj_endpos = 0 ; jj_rescan_token ( ) ; jj_add_error_token ( 0 , 0 ) ; int [ ] [ ] exptokseq = new int [ jj_expentries . size ( ) ] [ ] ; for ( int i = 0 ; i < jj_expentries . size ( ) ; i ++ ) { exptokseq [ i ] = ( int [ ] ) jj_expentries . elementAt ( i ) ; } return new ParseException ( token , exptokseq , tokenImage ) ; } final public void enable_tracing ( ) { } final public void disable_tracing ( ) { } final private void jj_rescan_token ( ) { jj_rescan = true ; for ( int i = 0 ; i < 12 ; i ++ ) { try { JJCalls p = jj_2_rtns [ i ] ; do { if ( p . gen > jj_gen ) { jj_la = p . arg ; jj_lastpos = jj_scanpos = p . first ; switch ( i ) { case 0 : jj_3_1 ( ) ; break ; case 1 : jj_3_2 ( ) ; break ; case 2 : jj_3_3 ( ) ; break ; case 3 : jj_3_4 ( ) ; break ; case 4 : jj_3_5 ( ) ; break ; case 5 : jj_3_6 ( ) ; break ; case 6 : jj_3_7 ( ) ; break ; case 7 : jj_3_8 ( ) ; break ; case 8 : jj_3_9 ( ) ; break ; case 9 : jj_3_10 ( ) ; break ; case 10 : jj_3_11 ( ) ; break ; case 11 : jj_3_12 ( ) ; break ; } } p = p . next ; } while ( p != null ) ; } catch ( LookaheadSuccess ls ) { } } jj_rescan = false ; } final private void jj_save ( int index , int xla ) { JJCalls p = jj_2_rtns [ index ] ; while ( p . gen > jj_gen ) { if ( p . next == null ) { p = p . next = new JJCalls ( ) ; break ; } p = p . next ; } p . gen = jj_gen + xla - jj_la ; p . first = token ; p . arg = xla ; } static final class JJCalls { int gen ; Token first ; int arg ; JJCalls next ; } } 	1
package org . apache . velocity . runtime . parser . node ; import java . io . Writer ; import java . io . IOException ; import org . apache . velocity . context . InternalContextAdapter ; import org . apache . velocity . runtime . parser . Parser ; import org . apache . velocity . runtime . parser . ParserVisitor ; public class ASTEscape extends SimpleNode { public String val ; private char [ ] ctext ; public ASTEscape ( int id ) { super ( id ) ; } public ASTEscape ( Parser p , int id ) { super ( p , id ) ; } public Object jjtAccept ( ParserVisitor visitor , Object data ) { return visitor . visit ( this , data ) ; } public Object init ( InternalContextAdapter context , Object data ) { ctext = val . toCharArray ( ) ; return data ; } public boolean render ( InternalContextAdapter context , Writer writer ) throws IOException { if ( context . getAllowRendering ( ) ) { writer . write ( ctext ) ; } return true ; } } 	0
package org . apache . velocity . runtime . log ; import org . apache . velocity . runtime . RuntimeServices ; public class SystemLogChute implements LogChute { public static final String RUNTIME_LOG_LEVEL_KEY = "runtime.log.logsystem.system.level" ; public static final String RUNTIME_LOG_SYSTEM_ERR_LEVEL_KEY = "runtime.log.logsystem.system.err.level" ; private int enabled = TRACE_ID ; private int errLevel = TRACE_ID ; public void init ( RuntimeServices rs ) throws Exception { String level = ( String ) rs . getProperty ( RUNTIME_LOG_LEVEL_KEY ) ; if ( level != null ) { setEnabledLevel ( toLevel ( level ) ) ; } String errLevel = ( String ) rs . getProperty ( RUNTIME_LOG_SYSTEM_ERR_LEVEL_KEY ) ; if ( errLevel != null ) { setSystemErrLevel ( toLevel ( errLevel ) ) ; } } protected int toLevel ( String level ) { if ( level . equalsIgnoreCase ( "debug" ) ) { return DEBUG_ID ; } else if ( level . equalsIgnoreCase ( "info" ) ) { return INFO_ID ; } else if ( level . equalsIgnoreCase ( "warn" ) ) { return WARN_ID ; } else if ( level . equalsIgnoreCase ( "error" ) ) { return ERROR_ID ; } else { return TRACE_ID ; } } protected String getPrefix ( int level ) { switch ( level ) { case WARN_ID : return WARN_PREFIX ; case INFO_ID : return INFO_PREFIX ; case DEBUG_ID : return DEBUG_PREFIX ; case TRACE_ID : return TRACE_PREFIX ; case ERROR_ID : return ERROR_PREFIX ; default : return INFO_PREFIX ; } } public void log ( int level , String message ) { log ( level , message , null ) ; } public void log ( int level , String message , Throwable t ) { if ( ! isLevelEnabled ( level ) ) { return ; } String prefix = getPrefix ( level ) ; if ( level >= this . errLevel ) { System . err . print ( prefix ) ; System . err . println ( message ) ; if ( t != null ) { System . err . println ( t . getMessage ( ) ) ; t . printStackTrace ( ) ; } } else { System . out . print ( prefix ) ; System . out . println ( message ) ; if ( t != null ) { System . out . println ( t . getMessage ( ) ) ; t . printStackTrace ( System . out ) ; } } } public void setEnabledLevel ( int level ) { this . enabled = level ; } public int getEnabledLevel ( ) { return this . enabled ; } public void setSystemErrLevel ( int level ) { this . errLevel = level ; } public int getSystemErrLevel ( ) { return this . errLevel ; } public boolean isLevelEnabled ( int level ) { return ( level >= this . enabled ) ; } } 	1
package org . apache . velocity . util . introspection ; public interface VelPropertyGet { public Object invoke ( Object o ) throws Exception ; public boolean isCacheable ( ) ; public String getMethodName ( ) ; } 	0
package org . apache . velocity . app ; import java . io . BufferedReader ; import java . io . IOException ; import java . io . InputStream ; import java . io . InputStreamReader ; import java . io . Reader ; import java . io . StringReader ; import java . io . UnsupportedEncodingException ; import java . io . Writer ; import java . util . Properties ; import org . apache . commons . collections . ExtendedProperties ; import org . apache . velocity . Template ; import org . apache . velocity . context . Context ; import org . apache . velocity . context . InternalContextAdapterImpl ; import org . apache . velocity . exception . MethodInvocationException ; import org . apache . velocity . exception . ParseErrorException ; import org . apache . velocity . exception . ResourceNotFoundException ; import org . apache . velocity . exception . TemplateInitException ; import org . apache . velocity . runtime . RuntimeConstants ; import org . apache . velocity . runtime . RuntimeInstance ; import org . apache . velocity . runtime . log . Log ; import org . apache . velocity . runtime . parser . ParseException ; import org . apache . velocity . runtime . parser . node . SimpleNode ; public class VelocityEngine implements RuntimeConstants { private RuntimeInstance ri = new RuntimeInstance ( ) ; public VelocityEngine ( ) { } public VelocityEngine ( String propsFilename ) throws Exception { ri . init ( propsFilename ) ; } public VelocityEngine ( Properties p ) throws Exception { ri . init ( p ) ; } public void init ( ) throws Exception { ri . init ( ) ; } public void init ( String propsFilename ) throws Exception { ri . init ( propsFilename ) ; } public void init ( Properties p ) throws Exception { ri . init ( p ) ; } public void setProperty ( String key , Object value ) { ri . setProperty ( key , value ) ; } public void addProperty ( String key , Object value ) { ri . addProperty ( key , value ) ; } public void clearProperty ( String key ) { ri . clearProperty ( key ) ; } public void setExtendedProperties ( ExtendedProperties configuration ) { ri . setConfiguration ( configuration ) ; } public Object getProperty ( String key ) { return ri . getProperty ( key ) ; } public boolean evaluate ( Context context , Writer out , String logTag , String instring ) throws ParseErrorException , MethodInvocationException , ResourceNotFoundException , IOException { return evaluate ( context , out , logTag , new BufferedReader ( new StringReader ( instring ) ) ) ; } public boolean evaluate ( Context context , Writer writer , String logTag , InputStream instream ) throws ParseErrorException , MethodInvocationException , ResourceNotFoundException , IOException { BufferedReader br = null ; String encoding = null ; try { encoding = ri . getString ( INPUT_ENCODING , ENCODING_DEFAULT ) ; br = new BufferedReader ( new InputStreamReader ( instream , encoding ) ) ; } catch ( UnsupportedEncodingException uce ) { String msg = "Unsupported input encoding : " + encoding + " for template " + logTag ; throw new ParseErrorException ( msg ) ; } return evaluate ( context , writer , logTag , br ) ; } public boolean evaluate ( Context context , Writer writer , String logTag , Reader reader ) throws ParseErrorException , MethodInvocationException , ResourceNotFoundException , IOException { SimpleNode nodeTree = null ; try { nodeTree = ri . parse ( reader , logTag ) ; } catch ( ParseException pex ) { throw new ParseErrorException ( pex ) ; } catch ( TemplateInitException pex ) { throw new ParseErrorException ( pex ) ; } if ( nodeTree != null ) { InternalContextAdapterImpl ica = new InternalContextAdapterImpl ( context ) ; ica . pushCurrentTemplateName ( logTag ) ; try { try { nodeTree . init ( ica , ri ) ; } catch ( TemplateInitException pex ) { throw new ParseErrorException ( pex ) ; } catch ( RuntimeException e ) { throw e ; } catch ( Exception e ) { getLog ( ) . error ( "Velocity.evaluate() : init exception for tag = " + logTag , e ) ; } nodeTree . render ( ica , writer ) ; } finally { ica . popCurrentTemplateName ( ) ; } return true ; } return false ; } public boolean invokeVelocimacro ( String vmName , String logTag , String params [ ] , Context context , Writer writer ) throws Exception { if ( vmName == null || params == null || context == null || writer == null || logTag == null ) { getLog ( ) . error ( "VelocityEngine.invokeVelocimacro() : invalid parameter" ) ; return false ; } if ( ! ri . isVelocimacro ( vmName , logTag ) ) { getLog ( ) . error ( "VelocityEngine.invokeVelocimacro() : VM '" + vmName + "' not registered." ) ; return false ; } StringBuffer construct = new StringBuffer ( "#" ) ; construct . append ( vmName ) ; construct . append ( "(" ) ; for ( int i = 0 ; i < params . length ; i ++ ) { construct . append ( " $" ) ; construct . append ( params [ i ] ) ; } construct . append ( " )" ) ; try { boolean retval = evaluate ( context , writer , logTag , construct . toString ( ) ) ; return retval ; } catch ( RuntimeException e ) { throw e ; } catch ( Exception e ) { getLog ( ) . error ( "VelocityEngine.invokeVelocimacro() : error " , e ) ; throw e ; } } public boolean mergeTemplate ( String templateName , Context context , Writer writer ) throws ResourceNotFoundException , ParseErrorException , MethodInvocationException , Exception { return mergeTemplate ( templateName , ri . getString ( INPUT_ENCODING , ENCODING_DEFAULT ) , context , writer ) ; } public boolean mergeTemplate ( String templateName , String encoding , Context context , Writer writer ) throws ResourceNotFoundException , ParseErrorException , MethodInvocationException , Exception { Template template = ri . getTemplate ( templateName , encoding ) ; if ( template == null ) { getLog ( ) . error ( "Velocity.mergeTemplate() was unable to load template '" + templateName + "'" ) ; return false ; } else { template . merge ( context , writer ) ; return true ; } } public Template getTemplate ( String name ) throws ResourceNotFoundException , ParseErrorException , Exception { return ri . getTemplate ( name ) ; } public Template getTemplate ( String name , String encoding ) throws ResourceNotFoundException , ParseErrorException , Exception { return ri . getTemplate ( name , encoding ) ; } public boolean resourceExists ( String resourceName ) { return ( ri . getLoaderNameForResource ( resourceName ) != null ) ; } public boolean templateExists ( String resourceName ) { return resourceExists ( resourceName ) ; } public Log getLog ( ) { return ri . getLog ( ) ; } public void warn ( Object message ) { getLog ( ) . warn ( message ) ; } public void info ( Object message ) { getLog ( ) . info ( message ) ; } public void error ( Object message ) { getLog ( ) . error ( message ) ; } public void debug ( Object message ) { getLog ( ) . debug ( message ) ; } public void setApplicationAttribute ( Object key , Object value ) { ri . setApplicationAttribute ( key , value ) ; } public Object getApplicationAttribute ( Object key ) { return ri . getApplicationAttribute ( key ) ; } } 	1
package org . apache . velocity . runtime . parser . node ; import org . apache . velocity . runtime . parser . Parser ; import org . apache . velocity . runtime . parser . ParserVisitor ; public class ASTIncludeStatement extends SimpleNode { public ASTIncludeStatement ( int id ) { super ( id ) ; } public ASTIncludeStatement ( Parser p , int id ) { super ( p , id ) ; } public Object jjtAccept ( ParserVisitor visitor , Object data ) { return visitor . visit ( this , data ) ; } } 	0
package org . apache . velocity . util ; import java . io . InputStream ; public class ClassUtils { private ClassUtils ( ) { } public static Class getClass ( String clazz ) throws ClassNotFoundException { ClassLoader loader = Thread . currentThread ( ) . getContextClassLoader ( ) ; if ( loader != null ) { try { return Class . forName ( clazz , true , loader ) ; } catch ( ClassNotFoundException E ) { } } return Class . forName ( clazz ) ; } public static Object getNewInstance ( String clazz ) throws ClassNotFoundException , IllegalAccessException , InstantiationException { return getClass ( clazz ) . newInstance ( ) ; } public static InputStream getResourceAsStream ( Class claz , String name ) { InputStream result = null ; while ( name . startsWith ( "/" ) ) { name = name . substring ( 1 ) ; } ClassLoader classLoader = Thread . currentThread ( ) . getContextClassLoader ( ) ; if ( classLoader == null ) { classLoader = claz . getClassLoader ( ) ; result = classLoader . getResourceAsStream ( name ) ; } else { result = classLoader . getResourceAsStream ( name ) ; if ( result == null ) { classLoader = claz . getClassLoader ( ) ; if ( classLoader != null ) result = classLoader . getResourceAsStream ( name ) ; } } return result ; } } 	1
package org . apache . velocity . runtime . parser . node ; import org . apache . velocity . runtime . parser . Parser ; import org . apache . velocity . runtime . parser . ParserVisitor ; public class ASTAssignment extends SimpleNode { public ASTAssignment ( int id ) { super ( id ) ; } public ASTAssignment ( Parser p , int id ) { super ( p , id ) ; } public Object jjtAccept ( ParserVisitor visitor , Object data ) { return visitor . visit ( this , data ) ; } } 	0
package org . apache . velocity . runtime . parser . node ; import java . io . IOException ; import java . io . Writer ; import org . apache . velocity . app . event . EventHandlerUtil ; import org . apache . velocity . context . InternalContextAdapter ; import org . apache . velocity . exception . MethodInvocationException ; import org . apache . velocity . exception . TemplateInitException ; import org . apache . velocity . runtime . RuntimeConstants ; import org . apache . velocity . runtime . parser . Parser ; import org . apache . velocity . runtime . parser . ParserVisitor ; import org . apache . velocity . util . introspection . Info ; public class ASTSetDirective extends SimpleNode { private String leftReference = "" ; private Node right = null ; private ASTReference left = null ; boolean logOnNull = false ; protected Info uberInfo ; public ASTSetDirective ( int id ) { super ( id ) ; } public ASTSetDirective ( Parser p , int id ) { super ( p , id ) ; } public Object jjtAccept ( ParserVisitor visitor , Object data ) { return visitor . visit ( this , data ) ; } public Object init ( InternalContextAdapter context , Object data ) throws TemplateInitException { super . init ( context , data ) ; uberInfo = new Info ( context . getCurrentTemplateName ( ) , getLine ( ) , getColumn ( ) ) ; right = getRightHandSide ( ) ; left = getLeftHandSide ( ) ; logOnNull = rsvc . getBoolean ( RuntimeConstants . RUNTIME_LOG_REFERENCE_LOG_INVALID , true ) ; leftReference = left . getFirstToken ( ) . image . substring ( 1 ) ; return data ; } public boolean render ( InternalContextAdapter context , Writer writer ) throws IOException , MethodInvocationException { Object value = right . value ( context ) ; if ( ! rsvc . getBoolean ( RuntimeConstants . SET_NULL_ALLOWED , false ) ) { if ( value == null ) { if ( logOnNull ) { boolean doit = EventHandlerUtil . shouldLogOnNullSet ( rsvc , context , left . literal ( ) , right . literal ( ) ) ; if ( doit && log . isInfoEnabled ( ) ) { log . info ( "RHS of #set statement is null. Context will not be modified. " + context . getCurrentTemplateName ( ) + " [line " + getLine ( ) + ", column " + getColumn ( ) + "]" ) ; } } String rightReference = null ; if ( right instanceof ASTExpression ) { rightReference = ( ( ASTExpression ) right ) . getLastToken ( ) . image ; } EventHandlerUtil . invalidSetMethod ( rsvc , context , leftReference , rightReference , uberInfo ) ; return false ; } } if ( value == null ) { String rightReference = null ; if ( right instanceof ASTExpression ) { rightReference = ( ( ASTExpression ) right ) . getLastToken ( ) . image ; } EventHandlerUtil . invalidSetMethod ( rsvc , context , leftReference , rightReference , uberInfo ) ; context . remove ( leftReference ) ; return false ; } else { if ( left . jjtGetNumChildren ( ) == 0 ) { context . put ( leftReference , value ) ; } else { left . setValue ( context , value ) ; } } return true ; } private ASTReference getLeftHandSide ( ) { return ( ASTReference ) jjtGetChild ( 0 ) ; } private Node getRightHandSide ( ) { return jjtGetChild ( 1 ) ; } } 	1
package org . apache . velocity . runtime . parser . node ; import java . io . Writer ; import java . io . IOException ; import org . apache . velocity . context . InternalContextAdapter ; import org . apache . velocity . runtime . parser . Parser ; import org . apache . velocity . runtime . parser . ParserVisitor ; import org . apache . velocity . exception . MethodInvocationException ; import org . apache . velocity . exception . ParseErrorException ; import org . apache . velocity . exception . ResourceNotFoundException ; public class ASTBlock extends SimpleNode { public ASTBlock ( int id ) { super ( id ) ; } public ASTBlock ( Parser p , int id ) { super ( p , id ) ; } public Object jjtAccept ( ParserVisitor visitor , Object data ) { return visitor . visit ( this , data ) ; } public boolean render ( InternalContextAdapter context , Writer writer ) throws IOException , MethodInvocationException , ResourceNotFoundException , ParseErrorException { int i , k = jjtGetNumChildren ( ) ; for ( i = 0 ; i < k ; i ++ ) jjtGetChild ( i ) . render ( context , writer ) ; return true ; } } 	0
package org . apache . velocity . app . event . implement ; import org . apache . commons . lang . StringEscapeUtils ; public class EscapeHtmlReference extends EscapeReference { protected String escape ( Object text ) { return StringEscapeUtils . escapeHtml ( text . toString ( ) ) ; } protected String getMatchAttribute ( ) { return "eventhandler.escape.html.match" ; } } 	1
package org . apache . velocity . runtime . parser . node ; import java . io . IOException ; import java . io . Writer ; import org . apache . velocity . context . InternalContextAdapter ; import org . apache . velocity . exception . MethodInvocationException ; import org . apache . velocity . exception . ParseErrorException ; import org . apache . velocity . exception . ResourceNotFoundException ; import org . apache . velocity . runtime . parser . Parser ; import org . apache . velocity . runtime . parser . ParserVisitor ; public class ASTElseIfStatement extends SimpleNode { public ASTElseIfStatement ( int id ) { super ( id ) ; } public ASTElseIfStatement ( Parser p , int id ) { super ( p , id ) ; } public Object jjtAccept ( ParserVisitor visitor , Object data ) { return visitor . visit ( this , data ) ; } public boolean evaluate ( InternalContextAdapter context ) throws MethodInvocationException { return jjtGetChild ( 0 ) . evaluate ( context ) ; } public boolean render ( InternalContextAdapter context , Writer writer ) throws IOException , MethodInvocationException , ResourceNotFoundException , ParseErrorException { return jjtGetChild ( 1 ) . render ( context , writer ) ; } } 	0
package org . apache . velocity . runtime . parser ; import org . apache . velocity . runtime . parser . node . Node ; class JJTParserState { private java . util . Stack nodes ; private java . util . Stack marks ; private int sp ; private int mk ; private boolean node_created ; JJTParserState ( ) { nodes = new java . util . Stack ( ) ; marks = new java . util . Stack ( ) ; sp = 0 ; mk = 0 ; } boolean nodeCreated ( ) { return node_created ; } void reset ( ) { nodes . removeAllElements ( ) ; marks . removeAllElements ( ) ; sp = 0 ; mk = 0 ; } Node rootNode ( ) { return ( Node ) nodes . elementAt ( 0 ) ; } void pushNode ( Node n ) { nodes . push ( n ) ; ++ sp ; } Node popNode ( ) { if ( -- sp < mk ) { mk = ( ( Integer ) marks . pop ( ) ) . intValue ( ) ; } return ( Node ) nodes . pop ( ) ; } Node peekNode ( ) { return ( Node ) nodes . peek ( ) ; } int nodeArity ( ) { return sp - mk ; } void clearNodeScope ( Node n ) { while ( sp > mk ) { popNode ( ) ; } mk = ( ( Integer ) marks . pop ( ) ) . intValue ( ) ; } void openNodeScope ( Node n ) { marks . push ( new Integer ( mk ) ) ; mk = sp ; n . jjtOpen ( ) ; } void closeNodeScope ( Node n , int num ) { mk = ( ( Integer ) marks . pop ( ) ) . intValue ( ) ; while ( num -- > 0 ) { Node c = popNode ( ) ; c . jjtSetParent ( n ) ; n . jjtAddChild ( c , num ) ; } n . jjtClose ( ) ; pushNode ( n ) ; node_created = true ; } void closeNodeScope ( Node n , boolean condition ) { if ( condition ) { int a = nodeArity ( ) ; mk = ( ( Integer ) marks . pop ( ) ) . intValue ( ) ; while ( a -- > 0 ) { Node c = popNode ( ) ; c . jjtSetParent ( n ) ; n . jjtAddChild ( c , a ) ; } n . jjtClose ( ) ; pushNode ( n ) ; node_created = true ; } else { mk = ( ( Integer ) marks . pop ( ) ) . intValue ( ) ; node_created = false ; } } } 	1
package org . apache . velocity . runtime . log ; public class AvalonLogSystem extends AvalonLogChute implements LogSystem { public void logVelocityMessage ( int level , String message ) { log ( level , message ) ; } } 	0
package org . apache . velocity . exception ; import org . apache . velocity . util . ExceptionUtils ; public class VelocityException extends RuntimeException { private static final long serialVersionUID = 1251243065134956045L ; private final Throwable wrapped ; public VelocityException ( final String exceptionMessage ) { super ( exceptionMessage ) ; wrapped = null ; } public VelocityException ( final String exceptionMessage , final Throwable wrapped ) { super ( exceptionMessage ) ; this . wrapped = wrapped ; ExceptionUtils . setCause ( this , wrapped ) ; } public VelocityException ( final Throwable wrapped ) { super ( ) ; this . wrapped = wrapped ; ExceptionUtils . setCause ( this , wrapped ) ; } public Throwable getWrappedThrowable ( ) { return wrapped ; } } 	1
package org . apache . velocity . runtime . log ; import org . apache . velocity . runtime . RuntimeServices ; public interface LogSystem { public final static boolean DEBUG_ON = true ; public final static int DEBUG_ID = 0 ; public final static int INFO_ID = 1 ; public final static int WARN_ID = 2 ; public final static int ERROR_ID = 3 ; public void init ( RuntimeServices rs ) throws Exception ; public void logVelocityMessage ( int level , String message ) ; } 	0
package org . apache . velocity . runtime . resource ; import java . util . Collections ; import java . util . Hashtable ; import java . util . Map ; import java . util . Iterator ; import org . apache . commons . collections . map . LRUMap ; import org . apache . velocity . runtime . RuntimeConstants ; import org . apache . velocity . runtime . RuntimeServices ; public class ResourceCacheImpl implements ResourceCache { protected Map cache = new Hashtable ( ) ; protected RuntimeServices rsvc = null ; public void initialize ( RuntimeServices rs ) { rsvc = rs ; int maxSize = rsvc . getInt ( RuntimeConstants . RESOURCE_MANAGER_DEFAULTCACHE_SIZE , 89 ) ; if ( maxSize > 0 ) { Map lruCache = Collections . synchronizedMap ( new LRUMap ( maxSize ) ) ; lruCache . putAll ( cache ) ; cache = lruCache ; } rsvc . getLog ( ) . debug ( "ResourceCache: initialized (" + this . getClass ( ) + ')' ) ; } public Resource get ( Object key ) { return ( Resource ) cache . get ( key ) ; } public Resource put ( Object key , Resource value ) { return ( Resource ) cache . put ( key , value ) ; } public Resource remove ( Object key ) { return ( Resource ) cache . remove ( key ) ; } public Iterator enumerateKeys ( ) { return cache . keySet ( ) . iterator ( ) ; } } 	1
package org . apache . velocity . texen . util ; import java . io . File ; public class FileUtil { static public String mkdir ( String s ) { try { if ( ( new File ( s ) ) . mkdirs ( ) ) return "Created dir: " + s ; else return "Failed to create dir or dir already exists: " + s ; } catch ( Exception e ) { return e . toString ( ) ; } } public static File file ( String s ) { File f = new File ( s ) ; return f ; } public static File file ( String base , String s ) { File f = new File ( base , s ) ; return f ; } } 	0
package org . apache . velocity . runtime . resource . loader ; import java . io . ByteArrayInputStream ; import java . io . InputStream ; import java . io . UnsupportedEncodingException ; import org . apache . commons . collections . ExtendedProperties ; import org . apache . commons . lang . StringUtils ; import org . apache . velocity . exception . ResourceNotFoundException ; import org . apache . velocity . exception . VelocityException ; import org . apache . velocity . runtime . log . Log ; import org . apache . velocity . runtime . resource . Resource ; import org . apache . velocity . runtime . resource . util . StringResource ; import org . apache . velocity . runtime . resource . util . StringResourceRepository ; import org . apache . velocity . runtime . resource . util . StringResourceRepositoryImpl ; import org . apache . velocity . util . ClassUtils ; public class StringResourceLoader extends ResourceLoader { public static final String REPOSITORY_CLASS = "repository.class" ; public static final String REPOSITORY_CLASS_DEFAULT = StringResourceRepositoryImpl . class . getName ( ) ; public static final String REPOSITORY_ENCODING = "repository.encoding" ; public static final String REPOSITORY_ENCODING_DEFAULT = "UTF-8" ; public static StringResourceRepository getRepository ( ) { return RepositoryFactory . getRepository ( ) ; } public void init ( final ExtendedProperties configuration ) { log . info ( "StringResourceLoader : initialization starting." ) ; String repositoryClass = configuration . getString ( REPOSITORY_CLASS , REPOSITORY_CLASS_DEFAULT ) ; String encoding = configuration . getString ( REPOSITORY_ENCODING , REPOSITORY_ENCODING_DEFAULT ) ; RepositoryFactory . setRepositoryClass ( repositoryClass ) ; RepositoryFactory . setEncoding ( encoding ) ; RepositoryFactory . init ( log ) ; log . info ( "StringResourceLoader : initialization complete." ) ; } public InputStream getResourceStream ( final String name ) throws ResourceNotFoundException { if ( StringUtils . isEmpty ( name ) ) { throw new ResourceNotFoundException ( "No template name provided" ) ; } StringResource resource = getRepository ( ) . getStringResource ( name ) ; if ( resource == null ) { throw new ResourceNotFoundException ( "Could not locate resource '" + name + "'" ) ; } byte [ ] byteArray = null ; try { byteArray = resource . getBody ( ) . getBytes ( resource . getEncoding ( ) ) ; return new ByteArrayInputStream ( byteArray ) ; } catch ( UnsupportedEncodingException ue ) { throw new VelocityException ( "Could not convert String using encoding " + resource . getEncoding ( ) , ue ) ; } } public boolean isSourceModified ( final Resource resource ) { StringResource original = null ; boolean result = true ; original = getRepository ( ) . getStringResource ( resource . getName ( ) ) ; if ( original != null ) { result = original . getLastModified ( ) != resource . getLastModified ( ) ; } return result ; } public long getLastModified ( final Resource resource ) { StringResource original = null ; original = getRepository ( ) . getStringResource ( resource . getName ( ) ) ; return ( original != null ) ? original . getLastModified ( ) : 0 ; } private static final class RepositoryFactory { private static boolean isInitialized = false ; private static StringResourceRepository repository = null ; public static void setRepositoryClass ( final String className ) { if ( isInitialized ) { throw new IllegalStateException ( "The RepositoryFactory has already been initialized!" ) ; } try { repository = ( StringResourceRepository ) ClassUtils . getNewInstance ( className ) ; } catch ( ClassNotFoundException cnfe ) { throw new VelocityException ( "Could not find '" + className + "'" , cnfe ) ; } catch ( IllegalAccessException iae ) { throw new VelocityException ( "Could not access '" + className + "'" , iae ) ; } catch ( InstantiationException ie ) { throw new VelocityException ( "Could not instantiante '" + className + "'" , ie ) ; } } public static void setEncoding ( final String encoding ) { if ( repository == null ) { throw new IllegalStateException ( "The Repository class has not yet been set!" ) ; } repository . setEncoding ( encoding ) ; } public static synchronized void init ( final Log log ) throws VelocityException { if ( isInitialized ) { throw new IllegalStateException ( "Attempted to re-initialize Factory!" ) ; } if ( log . isInfoEnabled ( ) ) { log . info ( "Using " + repository . getClass ( ) . getName ( ) + " as repository implementation" ) ; log . info ( "Current repository encoding is " + repository . getEncoding ( ) ) ; } isInitialized = true ; } public static StringResourceRepository getRepository ( ) { if ( ! isInitialized ) { throw new IllegalStateException ( "RepositoryFactory was not properly set up" ) ; } return repository ; } } } 	1
package org . apache . velocity . texen . util ; import java . io . FileInputStream ; import java . io . InputStream ; import java . util . Properties ; import java . util . StringTokenizer ; import org . apache . velocity . texen . Generator ; public class PropertiesUtil { public Properties load ( final String propertiesFile ) { Properties properties = null ; String templatePath = Generator . getInstance ( ) . getTemplatePath ( ) ; try { if ( templatePath != null ) { properties = loadFromTemplatePath ( propertiesFile ) ; } else { properties = loadFromClassPath ( propertiesFile ) ; } } catch ( RuntimeException e ) { throw e ; } catch ( Exception e ) { throw new RuntimeException ( "Could not load properties: " + e . getMessage ( ) ) ; } return properties ; } protected Properties loadFromTemplatePath ( final String propertiesFile ) throws Exception { Properties properties = new Properties ( ) ; String templatePath = Generator . getInstance ( ) . getTemplatePath ( ) ; StringTokenizer st = new StringTokenizer ( templatePath , "," ) ; while ( st . hasMoreTokens ( ) ) { String templateDir = st . nextToken ( ) ; InputStream stream = null ; try { String fullPath = propertiesFile ; if ( ! fullPath . startsWith ( templateDir ) ) { fullPath = templateDir + "/" + propertiesFile ; } stream = new FileInputStream ( fullPath ) ; properties . load ( stream ) ; break ; } finally { if ( stream != null ) { stream . close ( ) ; } } } return properties ; } protected Properties loadFromClassPath ( final String propertiesName ) throws Exception { Properties properties = new Properties ( ) ; ClassLoader classLoader = this . getClass ( ) . getClassLoader ( ) ; InputStream inputStream = null ; try { String propertiesFile = propertiesName . startsWith ( "$generator" ) ? propertiesName . substring ( "$generator.templatePath/" . length ( ) ) : propertiesName ; inputStream = classLoader . getResourceAsStream ( propertiesFile ) ; properties . load ( inputStream ) ; } finally { if ( inputStream != null ) { inputStream . close ( ) ; } } return properties ; } } 	0
package org . apache . velocity . exception ; import org . apache . velocity . runtime . parser . ParseException ; public class TemplateInitException extends VelocityException implements ExtendedParseException { private final String templateName ; private final int col ; private final int line ; private static final long serialVersionUID = - 4985224672336070621L ; public TemplateInitException ( final String msg , final String templateName , final int col , final int line ) { super ( msg ) ; this . templateName = templateName ; this . col = col ; this . line = line ; } public TemplateInitException ( final String msg , ParseException parseException , final String templateName , final int col , final int line ) { super ( msg , parseException ) ; this . templateName = templateName ; this . col = col ; this . line = line ; } public String getTemplateName ( ) { return templateName ; } public int getLineNumber ( ) { return line ; } public int getColumnNumber ( ) { return col ; } } 	1
package org . apache . velocity . runtime . parser . node ; import java . io . Writer ; import java . io . IOException ; import org . apache . velocity . context . InternalContextAdapter ; import org . apache . velocity . runtime . parser . Parser ; import org . apache . velocity . runtime . parser . ParserVisitor ; public class ASTEscapedDirective extends SimpleNode { public ASTEscapedDirective ( int id ) { super ( id ) ; } public ASTEscapedDirective ( Parser p , int id ) { super ( p , id ) ; } public Object jjtAccept ( ParserVisitor visitor , Object data ) { return visitor . visit ( this , data ) ; } public boolean render ( InternalContextAdapter context , Writer writer ) throws IOException { if ( context . getAllowRendering ( ) ) { writer . write ( getFirstToken ( ) . image ) ; } return true ; } } 	0
package org . apache . velocity . runtime . parser . node ; import org . apache . velocity . context . InternalContextAdapter ; import org . apache . velocity . exception . MethodInvocationException ; import org . apache . velocity . runtime . parser . Parser ; import org . apache . velocity . runtime . parser . ParserVisitor ; import org . apache . velocity . util . TemplateNumber ; public class ASTMulNode extends SimpleNode { public ASTMulNode ( int id ) { super ( id ) ; } public ASTMulNode ( Parser p , int id ) { super ( p , id ) ; } public Object jjtAccept ( ParserVisitor visitor , Object data ) { return visitor . visit ( this , data ) ; } public Object value ( InternalContextAdapter context ) throws MethodInvocationException { Object left = jjtGetChild ( 0 ) . value ( context ) ; Object right = jjtGetChild ( 1 ) . value ( context ) ; if ( left == null || right == null ) { log . error ( ( left == null ? "Left" : "Right" ) + " side (" + jjtGetChild ( ( left == null ? 0 : 1 ) ) . literal ( ) + ") of multiplication operation has null value." + " Operation not possible. " + context . getCurrentTemplateName ( ) + " [line " + getLine ( ) + ", column " + getColumn ( ) + "]" ) ; return null ; } if ( left instanceof TemplateNumber ) { left = ( ( TemplateNumber ) left ) . getAsNumber ( ) ; } if ( right instanceof TemplateNumber ) { right = ( ( TemplateNumber ) right ) . getAsNumber ( ) ; } if ( ! ( left instanceof Number ) || ! ( right instanceof Number ) ) { log . error ( ( ! ( left instanceof Number ) ? "Left" : "Right" ) + " side of multiplication operation is not a Number. " + context . getCurrentTemplateName ( ) + " [line " + getLine ( ) + ", column " + getColumn ( ) + "]" ) ; return null ; } return MathUtils . multiply ( ( Number ) left , ( Number ) right ) ; } } 	1
package org . apache . velocity ; import java . util . HashMap ; import java . util . Map ; import org . apache . velocity . context . AbstractContext ; import org . apache . velocity . context . Context ; public class VelocityContext extends AbstractContext implements Cloneable { private static final long serialVersionUID = 9033846851064645037L ; private Map context = null ; public VelocityContext ( ) { this ( null , null ) ; } public VelocityContext ( Map context ) { this ( context , null ) ; } public VelocityContext ( Context innerContext ) { this ( null , innerContext ) ; } public VelocityContext ( Map context , Context innerContext ) { super ( innerContext ) ; this . context = ( context == null ? new HashMap ( ) : context ) ; } public Object internalGet ( String key ) { return context . get ( key ) ; } public Object internalPut ( String key , Object value ) { return context . put ( key , value ) ; } public boolean internalContainsKey ( Object key ) { return context . containsKey ( key ) ; } public Object [ ] internalGetKeys ( ) { return context . keySet ( ) . toArray ( ) ; } public Object internalRemove ( Object key ) { return context . remove ( key ) ; } public Object clone ( ) { VelocityContext clone = null ; try { clone = ( VelocityContext ) super . clone ( ) ; clone . context = new HashMap ( context ) ; } catch ( CloneNotSupportedException ignored ) { } return clone ; } } 	0
package org . apache . velocity . util . introspection ; import java . lang . reflect . Method ; import org . apache . velocity . runtime . RuntimeLogger ; import org . apache . velocity . runtime . log . Log ; import org . apache . velocity . runtime . log . RuntimeLoggerLog ; public class Introspector extends IntrospectorBase { public final static String CACHEDUMP_MSG = "Introspector: detected classloader change. Dumping cache." ; public Introspector ( final Log log ) { super ( log ) ; } public Introspector ( final RuntimeLogger logger ) { this ( new RuntimeLoggerLog ( logger ) ) ; } public Method getMethod ( final Class c , final String name , final Object [ ] params ) throws IllegalArgumentException { try { return super . getMethod ( c , name , params ) ; } catch ( MethodMap . AmbiguousException ae ) { StringBuffer msg = new StringBuffer ( "Introspection Error : Ambiguous method invocation " ) . append ( name ) . append ( "(" ) ; for ( int i = 0 ; i < params . length ; i ++ ) { if ( i > 0 ) { msg . append ( ", " ) ; } if ( params [ i ] == null ) { msg . append ( "null" ) ; } else { msg . append ( params [ i ] . getClass ( ) . getName ( ) ) ; } } msg . append ( ") for class " ) . append ( c ) ; log . error ( msg . toString ( ) ) ; } return null ; } public void triggerClear ( ) { super . triggerClear ( ) ; log . info ( CACHEDUMP_MSG ) ; } } 	1
package org . apache . velocity . texen . ant ; import java . io . File ; import java . io . FileInputStream ; import java . io . IOException ; import java . io . InputStream ; import java . io . Writer ; import java . util . Date ; import java . util . Iterator ; import java . util . StringTokenizer ; import org . apache . commons . collections . ExtendedProperties ; import org . apache . tools . ant . BuildException ; import org . apache . tools . ant . Project ; import org . apache . tools . ant . Task ; import org . apache . velocity . VelocityContext ; import org . apache . velocity . app . VelocityEngine ; import org . apache . velocity . context . Context ; import org . apache . velocity . exception . MethodInvocationException ; import org . apache . velocity . exception . ParseErrorException ; import org . apache . velocity . exception . ResourceNotFoundException ; import org . apache . velocity . runtime . RuntimeConstants ; import org . apache . velocity . texen . Generator ; import org . apache . velocity . util . StringUtils ; public class TexenTask extends Task { private final static String ERR_MSG_FRAGMENT = ". For more information consult the velocity log, or invoke ant " + "with the -debug flag." ; protected String controlTemplate ; protected String templatePath ; protected String outputDirectory ; protected String outputFile ; protected String outputEncoding ; protected String inputEncoding ; protected ExtendedProperties contextProperties ; protected boolean useClasspath ; protected String logFile ; protected String useResourceLoaderCache = "false" ; protected String resourceLoaderModificationCheckInterval = "2" ; public void setControlTemplate ( String controlTemplate ) { this . controlTemplate = controlTemplate ; } public String getControlTemplate ( ) { return controlTemplate ; } public void setTemplatePath ( String templatePath ) throws Exception { StringBuffer resolvedPath = new StringBuffer ( ) ; StringTokenizer st = new StringTokenizer ( templatePath , "," ) ; while ( st . hasMoreTokens ( ) ) { File fullPath = project . resolveFile ( st . nextToken ( ) ) ; resolvedPath . append ( fullPath . getCanonicalPath ( ) ) ; if ( st . hasMoreTokens ( ) ) { resolvedPath . append ( "," ) ; } } this . templatePath = resolvedPath . toString ( ) ; System . out . println ( templatePath ) ; } public String getTemplatePath ( ) { return templatePath ; } public void setOutputDirectory ( File outputDirectory ) { try { this . outputDirectory = outputDirectory . getCanonicalPath ( ) ; } catch ( java . io . IOException ioe ) { throw new BuildException ( ioe ) ; } } public String getOutputDirectory ( ) { return outputDirectory ; } public void setOutputFile ( String outputFile ) { this . outputFile = outputFile ; } public void setOutputEncoding ( String outputEncoding ) { this . outputEncoding = outputEncoding ; } public void setInputEncoding ( String inputEncoding ) { this . inputEncoding = inputEncoding ; } public String getOutputFile ( ) { return outputFile ; } public void setLogFile ( String log ) { this . logFile = log ; } public String getLogFile ( ) { return this . logFile ; } public void setContextProperties ( String file ) { String [ ] sources = StringUtils . split ( file , "," ) ; contextProperties = new ExtendedProperties ( ) ; for ( int i = 0 ; i < sources . length ; i ++ ) { ExtendedProperties source = new ExtendedProperties ( ) ; try { File fullPath = project . resolveFile ( sources [ i ] ) ; log ( "Using contextProperties file: " + fullPath ) ; source . load ( new FileInputStream ( fullPath ) ) ; } catch ( IOException e ) { ClassLoader classLoader = this . getClass ( ) . getClassLoader ( ) ; try { InputStream inputStream = classLoader . getResourceAsStream ( sources [ i ] ) ; if ( inputStream == null ) { throw new BuildException ( "Context properties file " + sources [ i ] + " could not be found in the file system or on the classpath!" ) ; } else { source . load ( inputStream ) ; } } catch ( IOException ioe ) { source = null ; } } if ( source != null ) { for ( Iterator j = source . getKeys ( ) ; j . hasNext ( ) ; ) { String name = ( String ) j . next ( ) ; String value = StringUtils . nullTrim ( source . getString ( name ) ) ; contextProperties . setProperty ( name , value ) ; } } } } public ExtendedProperties getContextProperties ( ) { return contextProperties ; } public void setUseClasspath ( boolean useClasspath ) { this . useClasspath = useClasspath ; } public void setUseResourceLoaderCache ( String useResourceLoaderCache ) { this . useResourceLoaderCache = useResourceLoaderCache ; } public void setResourceLoaderModificationCheckInterval ( String resourceLoaderModificationCheckInterval ) { this . resourceLoaderModificationCheckInterval = resourceLoaderModificationCheckInterval ; } public Context initControlContext ( ) throws Exception { return new VelocityContext ( ) ; } public void execute ( ) throws BuildException { if ( templatePath == null && useClasspath == false ) { throw new BuildException ( "The template path needs to be defined if you are not using " + "the classpath for locating templates!" ) ; } if ( controlTemplate == null ) { throw new BuildException ( "The control template needs to be defined!" ) ; } if ( outputDirectory == null ) { throw new BuildException ( "The output directory needs to be defined!" ) ; } if ( outputFile == null ) { throw new BuildException ( "The output file needs to be defined!" ) ; } VelocityEngine ve = new VelocityEngine ( ) ; try { if ( templatePath != null ) { log ( "Using templatePath: " + templatePath , Project . MSG_VERBOSE ) ; ve . setProperty ( RuntimeConstants . FILE_RESOURCE_LOADER_PATH , templatePath ) ; } if ( useClasspath ) { log ( "Using classpath" ) ; ve . addProperty ( VelocityEngine . RESOURCE_LOADER , "classpath" ) ; ve . setProperty ( "classpath." + VelocityEngine . RESOURCE_LOADER + ".class" , "org.apache.velocity.runtime.resource.loader.ClasspathResourceLoader" ) ; ve . setProperty ( "classpath." + VelocityEngine . RESOURCE_LOADER + ".cache" , useResourceLoaderCache ) ; ve . setProperty ( "classpath." + VelocityEngine . RESOURCE_LOADER + ".modificationCheckInterval" , resourceLoaderModificationCheckInterval ) ; } if ( this . logFile != null ) { ve . setProperty ( RuntimeConstants . RUNTIME_LOG , this . logFile ) ; } ve . init ( ) ; Generator generator = Generator . getInstance ( ) ; generator . setVelocityEngine ( ve ) ; generator . setOutputPath ( outputDirectory ) ; generator . setInputEncoding ( inputEncoding ) ; generator . setOutputEncoding ( outputEncoding ) ; if ( templatePath != null ) { generator . setTemplatePath ( templatePath ) ; } File file = new File ( outputDirectory ) ; if ( ! file . exists ( ) ) { file . mkdirs ( ) ; } String path = outputDirectory + File . separator + outputFile ; log ( "Generating to file " + path , Project . MSG_INFO ) ; Writer writer = generator . getWriter ( path , outputEncoding ) ; Context c = initControlContext ( ) ; populateInitialContext ( c ) ; if ( contextProperties != null ) { Iterator i = contextProperties . getKeys ( ) ; while ( i . hasNext ( ) ) { String property = ( String ) i . next ( ) ; String value = StringUtils . nullTrim ( contextProperties . getString ( property ) ) ; try { c . put ( property , new Integer ( value ) ) ; } catch ( NumberFormatException nfe ) { String booleanString = contextProperties . testBoolean ( value ) ; if ( booleanString != null ) { c . put ( property , Boolean . valueOf ( booleanString ) ) ; } else { if ( property . endsWith ( "file.contents" ) ) { value = StringUtils . fileContentsToString ( project . resolveFile ( value ) . getCanonicalPath ( ) ) ; property = property . substring ( 0 , property . indexOf ( "file.contents" ) - 1 ) ; } c . put ( property , value ) ; } } } } writer . write ( generator . parse ( controlTemplate , c ) ) ; writer . flush ( ) ; writer . close ( ) ; generator . shutdown ( ) ; cleanup ( ) ; } catch ( BuildException e ) { throw e ; } catch ( MethodInvocationException e ) { throw new BuildException ( "Exception thrown by '" + e . getReferenceName ( ) + "." + e . getMethodName ( ) + "'" + ERR_MSG_FRAGMENT , e . getWrappedThrowable ( ) ) ; } catch ( ParseErrorException e ) { throw new BuildException ( "Velocity syntax error" + ERR_MSG_FRAGMENT , e ) ; } catch ( ResourceNotFoundException e ) { throw new BuildException ( "Resource not found" + ERR_MSG_FRAGMENT , e ) ; } catch ( Exception e ) { throw new BuildException ( "Generation failed" + ERR_MSG_FRAGMENT , e ) ; } } protected void populateInitialContext ( Context context ) throws Exception { context . put ( "now" , new Date ( ) . toString ( ) ) ; } protected void cleanup ( ) throws Exception { } } 	0
package org . apache . velocity . context ; import org . apache . velocity . util . introspection . IntrospectionCacheData ; import org . apache . velocity . runtime . resource . Resource ; interface InternalHousekeepingContext { void pushCurrentTemplateName ( String s ) ; void popCurrentTemplateName ( ) ; String getCurrentTemplateName ( ) ; Object [ ] getTemplateNameStack ( ) ; IntrospectionCacheData icacheGet ( Object key ) ; void icachePut ( Object key , IntrospectionCacheData o ) ; Resource getCurrentResource ( ) ; void setCurrentResource ( Resource r ) ; boolean getAllowRendering ( ) ; void setAllowRendering ( boolean v ) ; } 	1
package org . apache . velocity . runtime . log ; public class PrimordialLogSystem extends HoldingLogChute implements LogSystem { public void logVelocityMessage ( int level , String message ) { log ( level , message ) ; } public void dumpLogMessages ( LogSystem newLogger ) { transferTo ( new LogChuteSystem ( newLogger ) ) ; } } 	0
package org . apache . velocity . runtime . parser . node ; import java . io . BufferedReader ; import java . io . IOException ; import java . io . StringReader ; import java . io . StringWriter ; import org . apache . velocity . context . InternalContextAdapter ; import org . apache . velocity . exception . MethodInvocationException ; import org . apache . velocity . exception . ParseErrorException ; import org . apache . velocity . exception . ResourceNotFoundException ; import org . apache . velocity . exception . TemplateInitException ; import org . apache . velocity . runtime . RuntimeConstants ; import org . apache . velocity . runtime . parser . ParseException ; import org . apache . velocity . runtime . parser . Parser ; import org . apache . velocity . runtime . parser . ParserVisitor ; public class ASTStringLiteral extends SimpleNode { private boolean interpolate = true ; private SimpleNode nodeTree = null ; private String image = "" ; private String interpolateimage = "" ; private boolean containsLineComment ; public ASTStringLiteral ( int id ) { super ( id ) ; } public ASTStringLiteral ( Parser p , int id ) { super ( p , id ) ; } public Object init ( InternalContextAdapter context , Object data ) throws TemplateInitException { super . init ( context , data ) ; interpolate = rsvc . getBoolean ( RuntimeConstants . INTERPOLATE_STRINGLITERALS , true ) && getFirstToken ( ) . image . startsWith ( "\"" ) && ( ( getFirstToken ( ) . image . indexOf ( '$' ) != - 1 ) || ( getFirstToken ( ) . image . indexOf ( '#' ) != - 1 ) ) ; image = getFirstToken ( ) . image . substring ( 1 , getFirstToken ( ) . image . length ( ) - 1 ) ; containsLineComment = ( image . indexOf ( "##" ) != - 1 ) ; if ( ! containsLineComment ) { interpolateimage = image + " " ; } else { interpolateimage = image ; } if ( interpolate ) { BufferedReader br = new BufferedReader ( new StringReader ( interpolateimage ) ) ; try { nodeTree = rsvc . parse ( br , ( context != null ) ? context . getCurrentTemplateName ( ) : "StringLiteral" , false ) ; } catch ( ParseException e ) { throw new TemplateInitException ( "Problem parsing String literal." , e , ( context != null ) ? context . getCurrentTemplateName ( ) : "StringLiteral" , getColumn ( ) , getLine ( ) ) ; } nodeTree . init ( context , rsvc ) ; } return data ; } public Object jjtAccept ( ParserVisitor visitor , Object data ) { return visitor . visit ( this , data ) ; } public Object value ( InternalContextAdapter context ) { if ( interpolate ) { try { StringWriter writer = new StringWriter ( ) ; nodeTree . render ( context , writer ) ; String ret = writer . toString ( ) ; if ( ! containsLineComment && ret . length ( ) > 0 ) { return ret . substring ( 0 , ret . length ( ) - 1 ) ; } else { return ret ; } } catch ( ParseErrorException e ) { log . error ( "Error in interpolating string literal" , e ) ; } catch ( MethodInvocationException e ) { log . error ( "Error in interpolating string literal" , e ) ; } catch ( ResourceNotFoundException e ) { log . error ( "Error in interpolating string literal" , e ) ; } catch ( RuntimeException e ) { throw e ; } catch ( IOException e ) { log . error ( "Error in interpolating string literal" , e ) ; } } return image ; } } 	1
package org . apache . velocity . util . introspection ; import org . apache . velocity . runtime . RuntimeLogger ; import org . apache . velocity . runtime . log . Log ; public interface UberspectLoggable { public void setLog ( Log log ) ; public void setRuntimeLogger ( RuntimeLogger logger ) ; } 	0
package org . apache . velocity . util . introspection ; import java . util . HashMap ; import java . util . HashSet ; import java . util . Iterator ; import java . util . Map ; import java . util . Set ; import org . apache . velocity . runtime . log . Log ; public final class IntrospectorCacheImpl implements IntrospectorCache { private final Log log ; private final Map classMapCache = new HashMap ( ) ; private final Set classNameCache = new HashSet ( ) ; private final Set listeners = new HashSet ( ) ; public IntrospectorCacheImpl ( final Log log ) { this . log = log ; } public synchronized void clear ( ) { classMapCache . clear ( ) ; classNameCache . clear ( ) ; for ( Iterator it = listeners . iterator ( ) ; it . hasNext ( ) ; ) { ( ( IntrospectorCacheListener ) it . next ( ) ) . triggerClear ( ) ; } } public synchronized ClassMap get ( final Class c ) { if ( c == null ) { throw new IllegalArgumentException ( "class is null!" ) ; } ClassMap classMap = ( ClassMap ) classMapCache . get ( c ) ; if ( classMap == null ) { if ( classNameCache . contains ( c . getName ( ) ) ) { clear ( ) ; } } for ( Iterator it = listeners . iterator ( ) ; it . hasNext ( ) ; ) { ( ( IntrospectorCacheListener ) it . next ( ) ) . triggerGet ( c , classMap ) ; } return classMap ; } public synchronized ClassMap put ( final Class c ) { ClassMap classMap = new ClassMap ( c , log ) ; classMapCache . put ( c , classMap ) ; classNameCache . add ( c . getName ( ) ) ; for ( Iterator it = listeners . iterator ( ) ; it . hasNext ( ) ; ) { ( ( IntrospectorCacheListener ) it . next ( ) ) . triggerPut ( c , classMap ) ; } return classMap ; } public void addListener ( final IntrospectorCacheListener listener ) { listeners . add ( listener ) ; } public void removeListener ( final IntrospectorCacheListener listener ) { listeners . remove ( listener ) ; } } 	1
package org . apache . velocity . runtime . directive ; import org . apache . velocity . context . InternalContextAdapter ; import org . apache . velocity . runtime . RuntimeConstants ; import org . apache . velocity . runtime . resource . Resource ; public abstract class InputBase extends Directive { protected String getInputEncoding ( InternalContextAdapter context ) { Resource current = context . getCurrentResource ( ) ; if ( current != null ) { return current . getEncoding ( ) ; } else { return ( String ) rsvc . getProperty ( RuntimeConstants . INPUT_ENCODING ) ; } } } 	0
package org . apache . velocity . runtime . parser . node ; import java . io . IOException ; import java . io . Writer ; import org . apache . velocity . context . InternalContextAdapter ; import org . apache . velocity . exception . MethodInvocationException ; import org . apache . velocity . exception . ParseErrorException ; import org . apache . velocity . exception . ResourceNotFoundException ; import org . apache . velocity . exception . TemplateInitException ; import org . apache . velocity . runtime . parser . ParserVisitor ; import org . apache . velocity . runtime . parser . Token ; public interface Node { public void jjtOpen ( ) ; public void jjtClose ( ) ; public void jjtSetParent ( Node n ) ; public Node jjtGetParent ( ) ; public void jjtAddChild ( Node n , int i ) ; public Node jjtGetChild ( int i ) ; public int jjtGetNumChildren ( ) ; public Object jjtAccept ( ParserVisitor visitor , Object data ) ; public Object childrenAccept ( ParserVisitor visitor , Object data ) ; public Token getFirstToken ( ) ; public Token getLastToken ( ) ; public int getType ( ) ; public Object init ( InternalContextAdapter context , Object data ) throws TemplateInitException ; public boolean evaluate ( InternalContextAdapter context ) throws MethodInvocationException ; public Object value ( InternalContextAdapter context ) throws MethodInvocationException ; public boolean render ( InternalContextAdapter context , Writer writer ) throws IOException , MethodInvocationException , ParseErrorException , ResourceNotFoundException ; public Object execute ( Object o , InternalContextAdapter context ) throws MethodInvocationException ; public void setInfo ( int info ) ; public int getInfo ( ) ; public String literal ( ) ; public void setInvalid ( ) ; public boolean isInvalid ( ) ; public int getLine ( ) ; public int getColumn ( ) ; } 	1
package org . apache . velocity . runtime . parser . node ; import org . apache . velocity . context . InternalContextAdapter ; import org . apache . velocity . runtime . parser . Parser ; import org . apache . velocity . runtime . parser . ParserVisitor ; public class ASTElseStatement extends SimpleNode { public ASTElseStatement ( int id ) { super ( id ) ; } public ASTElseStatement ( Parser p , int id ) { super ( p , id ) ; } public Object jjtAccept ( ParserVisitor visitor , Object data ) { return visitor . visit ( this , data ) ; } public boolean evaluate ( InternalContextAdapter context ) { return true ; } } 	0
package org . apache . velocity . runtime . resource . util ; import java . util . Collections ; import java . util . HashMap ; import java . util . Map ; import org . apache . velocity . runtime . resource . loader . StringResourceLoader ; public class StringResourceRepositoryImpl implements StringResourceRepository { protected Map resources = Collections . synchronizedMap ( new HashMap ( ) ) ; private String encoding = StringResourceLoader . REPOSITORY_ENCODING_DEFAULT ; public StringResource getStringResource ( final String name ) { return ( StringResource ) resources . get ( name ) ; } public void putStringResource ( final String name , final String body ) { resources . put ( name , new StringResource ( body , getEncoding ( ) ) ) ; } public void removeStringResource ( final String name ) { resources . remove ( name ) ; } public String getEncoding ( ) { return encoding ; } public void setEncoding ( final String encoding ) { this . encoding = encoding ; } } 	1
package org . apache . velocity . runtime . parser . node ; import org . apache . velocity . context . InternalContextAdapter ; import org . apache . velocity . runtime . parser . Parser ; import org . apache . velocity . runtime . parser . ParserVisitor ; public class ASTTrue extends SimpleNode { private static Boolean value = Boolean . TRUE ; public ASTTrue ( int id ) { super ( id ) ; } public ASTTrue ( Parser p , int id ) { super ( p , id ) ; } public Object jjtAccept ( ParserVisitor visitor , Object data ) { return visitor . visit ( this , data ) ; } public boolean evaluate ( InternalContextAdapter context ) { return true ; } public Object value ( InternalContextAdapter context ) { return value ; } } 	0
package org . apache . velocity . runtime . parser . node ; import org . apache . velocity . context . InternalContextAdapter ; import org . apache . velocity . runtime . parser . Parser ; import org . apache . velocity . runtime . parser . ParserVisitor ; import org . apache . velocity . exception . MethodInvocationException ; import java . util . HashMap ; import java . util . Map ; public class ASTMap extends SimpleNode { public ASTMap ( int id ) { super ( id ) ; } public ASTMap ( Parser p , int id ) { super ( p , id ) ; } public Object jjtAccept ( ParserVisitor visitor , Object data ) { return visitor . visit ( this , data ) ; } public Object value ( InternalContextAdapter context ) throws MethodInvocationException { int size = jjtGetNumChildren ( ) ; Map objectMap = new HashMap ( ) ; for ( int i = 0 ; i < size ; i += 2 ) { SimpleNode keyNode = ( SimpleNode ) jjtGetChild ( i ) ; SimpleNode valueNode = ( SimpleNode ) jjtGetChild ( i + 1 ) ; Object key = ( keyNode == null ? null : keyNode . value ( context ) ) ; Object value = ( valueNode == null ? null : valueNode . value ( context ) ) ; objectMap . put ( key , value ) ; } return objectMap ; } } 	1
package org . apache . velocity . runtime . parser ; public interface CharStream { char readChar ( ) throws java . io . IOException ; int getColumn ( ) ; int getLine ( ) ; int getEndColumn ( ) ; int getEndLine ( ) ; int getBeginColumn ( ) ; int getBeginLine ( ) ; void backup ( int amount ) ; char BeginToken ( ) throws java . io . IOException ; String GetImage ( ) ; char [ ] GetSuffix ( int len ) ; void Done ( ) ; } 	0
package org . apache . velocity . app . event ; import org . apache . velocity . context . Context ; import org . apache . velocity . util . introspection . Info ; public interface InvalidReferenceEventHandler extends EventHandler { public Object invalidGetMethod ( Context context , String reference , Object object , String property , Info info ) ; public boolean invalidSetMethod ( Context context , String leftreference , String rightreference , Info info ) ; public Object invalidMethod ( Context context , String reference , Object object , String method , Info info ) ; static class InvalidGetMethodExecutor implements EventHandlerMethodExecutor { private Context context ; private String reference ; private Object object ; private String property ; private Info info ; private Object result ; InvalidGetMethodExecutor ( Context context , String reference , Object object , String property , Info info ) { this . context = context ; this . reference = reference ; this . object = object ; this . property = property ; this . info = info ; } public void execute ( EventHandler handler ) { result = ( ( InvalidReferenceEventHandler ) handler ) . invalidGetMethod ( context , reference , object , property , info ) ; } public Object getReturnValue ( ) { return result ; } public boolean isDone ( ) { return ( result != null ) ; } } static class InvalidSetMethodExecutor implements EventHandlerMethodExecutor { private Context context ; private String leftreference ; private String rightreference ; private Info info ; private boolean result ; InvalidSetMethodExecutor ( Context context , String leftreference , String rightreference , Info info ) { this . context = context ; this . leftreference = leftreference ; this . rightreference = rightreference ; this . info = info ; } public void execute ( EventHandler handler ) { result = ( ( InvalidReferenceEventHandler ) handler ) . invalidSetMethod ( context , leftreference , rightreference , info ) ; } public Object getReturnValue ( ) { return null ; } public boolean isDone ( ) { return result ; } } static class InvalidMethodExecutor implements EventHandlerMethodExecutor { private Context context ; private String reference ; private Object object ; private String method ; private Info info ; private Object result ; private boolean executed = false ; InvalidMethodExecutor ( Context context , String reference , Object object , String method , Info info ) { this . context = context ; this . reference = reference ; this . object = object ; this . method = method ; this . info = info ; } public void execute ( EventHandler handler ) { executed = true ; result = ( ( InvalidReferenceEventHandler ) handler ) . invalidMethod ( context , reference , object , method , info ) ; } public Object getReturnValue ( ) { return result ; } public boolean isDone ( ) { return executed && ( result != null ) ; } } } 	1
package org . apache . velocity . runtime . parser ; public class Token { public int kind ; public int beginLine , beginColumn , endLine , endColumn ; public String image ; public Token next ; public Token specialToken ; public String toString ( ) { return image ; } public static final Token newToken ( int ofKind ) { switch ( ofKind ) { default : return new Token ( ) ; } } } 	0
package org . apache . velocity . runtime . parser . node ; import java . lang . reflect . InvocationTargetException ; import org . apache . commons . lang . StringUtils ; import org . apache . velocity . runtime . RuntimeLogger ; import org . apache . velocity . runtime . log . Log ; import org . apache . velocity . runtime . log . RuntimeLoggerLog ; import org . apache . velocity . util . introspection . Introspector ; public class PropertyExecutor extends AbstractExecutor { private final Introspector introspector ; public PropertyExecutor ( final Log log , final Introspector introspector , final Class clazz , final String property ) { this . log = log ; this . introspector = introspector ; if ( StringUtils . isNotEmpty ( property ) ) { discover ( clazz , property ) ; } } public PropertyExecutor ( final RuntimeLogger r , final Introspector introspector , final Class clazz , final String property ) { this ( new RuntimeLoggerLog ( r ) , introspector , clazz , property ) ; } protected Introspector getIntrospector ( ) { return this . introspector ; } protected void discover ( final Class clazz , final String property ) { try { Object [ ] params = { } ; StringBuffer sb = new StringBuffer ( "get" ) ; sb . append ( property ) ; setMethod ( introspector . getMethod ( clazz , sb . toString ( ) , params ) ) ; if ( ! isAlive ( ) ) { char c = sb . charAt ( 3 ) ; if ( Character . isLowerCase ( c ) ) { sb . setCharAt ( 3 , Character . toUpperCase ( c ) ) ; } else { sb . setCharAt ( 3 , Character . toLowerCase ( c ) ) ; } setMethod ( introspector . getMethod ( clazz , sb . toString ( ) , params ) ) ; } } catch ( RuntimeException e ) { throw e ; } catch ( Exception e ) { log . error ( "While looking for property getter for '" + property + "':" , e ) ; } } public Object execute ( Object o ) throws IllegalAccessException , InvocationTargetException { return isAlive ( ) ? getMethod ( ) . invoke ( o , ( ( Object [ ] ) null ) ) : null ; } } 	1
package org . apache . velocity . app . event ; public interface EventHandler { } 	0
package org . apache . velocity . runtime . parser . node ; import org . apache . velocity . runtime . RuntimeLogger ; import org . apache . velocity . runtime . log . Log ; import org . apache . velocity . runtime . log . RuntimeLoggerLog ; import org . apache . velocity . util . introspection . Introspector ; public class BooleanPropertyExecutor extends PropertyExecutor { public BooleanPropertyExecutor ( final Log log , final Introspector introspector , final Class clazz , final String property ) { super ( log , introspector , clazz , property ) ; } public BooleanPropertyExecutor ( final RuntimeLogger rlog , final Introspector introspector , final Class clazz , final String property ) { super ( new RuntimeLoggerLog ( rlog ) , introspector , clazz , property ) ; } protected void discover ( final Class clazz , final String property ) { try { Object [ ] params = { } ; StringBuffer sb = new StringBuffer ( "is" ) ; sb . append ( property ) ; setMethod ( getIntrospector ( ) . getMethod ( clazz , sb . toString ( ) , params ) ) ; if ( ! isAlive ( ) ) { char c = sb . charAt ( 2 ) ; if ( Character . isLowerCase ( c ) ) { sb . setCharAt ( 2 , Character . toUpperCase ( c ) ) ; } else { sb . setCharAt ( 2 , Character . toLowerCase ( c ) ) ; } setMethod ( getIntrospector ( ) . getMethod ( clazz , sb . toString ( ) , params ) ) ; } if ( isAlive ( ) ) { if ( getMethod ( ) . getReturnType ( ) != Boolean . TYPE ) { setMethod ( null ) ; } } } catch ( RuntimeException e ) { throw e ; } catch ( Exception e ) { log . error ( "While looking for boolean property getter for '" + property + "':" , e ) ; } } } 	1
package org . apache . velocity . runtime ; public interface RuntimeLogger { public void warn ( Object message ) ; public void info ( Object message ) ; public void error ( Object message ) ; public void debug ( Object message ) ; } 	0
package org . apache . velocity . util . introspection ; public interface IntrospectorCache { void clear ( ) ; ClassMap get ( Class c ) ; ClassMap put ( Class c ) ; void addListener ( IntrospectorCacheListener listener ) ; void removeListener ( IntrospectorCacheListener listener ) ; } 	1
package org . apache . velocity . servlet ; import java . io . FileNotFoundException ; import java . io . IOException ; import java . io . OutputStreamWriter ; import java . io . PrintWriter ; import java . io . StringWriter ; import java . io . UnsupportedEncodingException ; import java . util . Properties ; import javax . servlet . ServletConfig ; import javax . servlet . ServletContext ; import javax . servlet . ServletException ; import javax . servlet . ServletOutputStream ; import javax . servlet . http . HttpServlet ; import javax . servlet . http . HttpServletRequest ; import javax . servlet . http . HttpServletResponse ; import org . apache . velocity . Template ; import org . apache . velocity . VelocityContext ; import org . apache . velocity . app . Velocity ; import org . apache . velocity . context . Context ; import org . apache . velocity . exception . MethodInvocationException ; import org . apache . velocity . exception . ParseErrorException ; import org . apache . velocity . exception . ResourceNotFoundException ; import org . apache . velocity . io . VelocityWriter ; import org . apache . velocity . runtime . RuntimeConstants ; import org . apache . velocity . runtime . RuntimeSingleton ; import org . apache . velocity . util . SimplePool ; public abstract class VelocityServlet extends HttpServlet { public static final String REQUEST = "req" ; public static final String RESPONSE = "res" ; public static final String CONTENT_TYPE = "default.contentType" ; public static final String DEFAULT_CONTENT_TYPE = "text/html" ; public static final String DEFAULT_OUTPUT_ENCODING = "ISO-8859-1" ; private static String defaultContentType ; protected static final String INIT_PROPS_KEY = "org.apache.velocity.properties" ; private static final String OLD_INIT_PROPS_KEY = "properties" ; private static SimplePool writerPool = new SimplePool ( 40 ) ; public void init ( ServletConfig config ) throws ServletException { super . init ( config ) ; initVelocity ( config ) ; VelocityServlet . defaultContentType = RuntimeSingleton . getString ( CONTENT_TYPE , DEFAULT_CONTENT_TYPE ) ; } protected void initVelocity ( ServletConfig config ) throws ServletException { try { Properties props = loadConfiguration ( config ) ; Velocity . init ( props ) ; } catch ( Exception e ) { throw new ServletException ( "Error initializing Velocity: " + e , e ) ; } } protected Properties loadConfiguration ( ServletConfig config ) throws IOException , FileNotFoundException { String propsFile = config . getInitParameter ( INIT_PROPS_KEY ) ; if ( propsFile == null || propsFile . length ( ) == 0 ) { ServletContext sc = config . getServletContext ( ) ; propsFile = config . getInitParameter ( OLD_INIT_PROPS_KEY ) ; if ( propsFile == null || propsFile . length ( ) == 0 ) { propsFile = sc . getInitParameter ( INIT_PROPS_KEY ) ; if ( propsFile == null || propsFile . length ( ) == 0 ) { propsFile = sc . getInitParameter ( OLD_INIT_PROPS_KEY ) ; if ( propsFile != null && propsFile . length ( ) > 0 ) { sc . log ( "Use of the properties initialization " + "parameter '" + OLD_INIT_PROPS_KEY + "' has " + "been deprecated by '" + INIT_PROPS_KEY + '\'' ) ; } } } else { sc . log ( "Use of the properties initialization parameter '" + OLD_INIT_PROPS_KEY + "' has been deprecated by '" + INIT_PROPS_KEY + '\'' ) ; } } Properties p = new Properties ( ) ; if ( propsFile != null ) { p . load ( getServletContext ( ) . getResourceAsStream ( propsFile ) ) ; } return p ; } public void doGet ( HttpServletRequest request , HttpServletResponse response ) throws ServletException , IOException { doRequest ( request , response ) ; } public void doPost ( HttpServletRequest request , HttpServletResponse response ) throws ServletException , IOException { doRequest ( request , response ) ; } protected void doRequest ( HttpServletRequest request , HttpServletResponse response ) throws ServletException , IOException { Context context = null ; try { context = createContext ( request , response ) ; setContentType ( request , response ) ; Template template = handleRequest ( request , response , context ) ; if ( template == null ) { return ; } mergeTemplate ( template , context , response ) ; } catch ( Exception e ) { error ( request , response , e ) ; } finally { requestCleanup ( request , response , context ) ; } } protected void requestCleanup ( HttpServletRequest request , HttpServletResponse response , Context context ) { } protected void mergeTemplate ( Template template , Context context , HttpServletResponse response ) throws ResourceNotFoundException , ParseErrorException , MethodInvocationException , IOException , UnsupportedEncodingException , Exception { ServletOutputStream output = response . getOutputStream ( ) ; VelocityWriter vw = null ; String encoding = response . getCharacterEncoding ( ) ; try { vw = ( VelocityWriter ) writerPool . get ( ) ; if ( vw == null ) { vw = new VelocityWriter ( new OutputStreamWriter ( output , encoding ) , 4 * 1024 , true ) ; } else { vw . recycle ( new OutputStreamWriter ( output , encoding ) ) ; } template . merge ( context , vw ) ; } finally { if ( vw != null ) { try { vw . flush ( ) ; } catch ( IOException e ) { } vw . recycle ( null ) ; writerPool . put ( vw ) ; } } } protected void setContentType ( HttpServletRequest request , HttpServletResponse response ) { String contentType = VelocityServlet . defaultContentType ; int index = contentType . lastIndexOf ( ';' ) + 1 ; if ( index <= 0 || ( index < contentType . length ( ) && contentType . indexOf ( "charset" , index ) == - 1 ) ) { String encoding = chooseCharacterEncoding ( request ) ; if ( ! DEFAULT_OUTPUT_ENCODING . equalsIgnoreCase ( encoding ) ) { contentType += "; charset=" + encoding ; } } response . setContentType ( contentType ) ; } protected String chooseCharacterEncoding ( HttpServletRequest request ) { return RuntimeSingleton . getString ( RuntimeConstants . OUTPUT_ENCODING , DEFAULT_OUTPUT_ENCODING ) ; } protected Context createContext ( HttpServletRequest request , HttpServletResponse response ) { VelocityContext context = new VelocityContext ( ) ; context . put ( REQUEST , request ) ; context . put ( RESPONSE , response ) ; return context ; } public Template getTemplate ( String name ) throws ResourceNotFoundException , ParseErrorException , Exception { return RuntimeSingleton . getTemplate ( name ) ; } public Template getTemplate ( String name , String encoding ) throws ResourceNotFoundException , ParseErrorException , Exception { return RuntimeSingleton . getTemplate ( name , encoding ) ; } protected Template handleRequest ( HttpServletRequest request , HttpServletResponse response , Context ctx ) throws Exception { Template t = handleRequest ( ctx ) ; if ( t == null ) { throw new Exception ( "handleRequest(Context) returned null - no template selected!" ) ; } return t ; } protected Template handleRequest ( Context ctx ) throws Exception { throw new Exception ( "You must override VelocityServlet.handleRequest( Context) " + " or VelocityServlet.handleRequest( HttpServletRequest, " + " HttpServletResponse, Context)" ) ; } protected void error ( HttpServletRequest request , HttpServletResponse response , Exception cause ) throws ServletException , IOException { StringBuffer html = new StringBuffer ( ) ; html . append ( "<html>" ) ; html . append ( "<title>Error</title>" ) ; html . append ( "<body bgcolor=\"#ffffff\">" ) ; html . append ( "<h2>VelocityServlet: Error processing the template</h2>" ) ; html . append ( "<pre>" ) ; String why = cause . getMessage ( ) ; if ( why != null && why . trim ( ) . length ( ) > 0 ) { html . append ( why ) ; html . append ( "<br>" ) ; } StringWriter sw = new StringWriter ( ) ; cause . printStackTrace ( new PrintWriter ( sw ) ) ; html . append ( sw . toString ( ) ) ; html . append ( "</pre>" ) ; html . append ( "</body>" ) ; html . append ( "</html>" ) ; response . getOutputStream ( ) . print ( html . toString ( ) ) ; } } 	0
package org . apache . velocity . runtime . visitor ; import java . util . Map ; import org . apache . velocity . runtime . parser . node . ASTReference ; public class VMReferenceMungeVisitor extends BaseVisitor { private Map argmap = null ; public VMReferenceMungeVisitor ( Map map ) { argmap = map ; } public Object visit ( ASTReference node , Object data ) { String override = ( String ) argmap . get ( node . literal ( ) . substring ( 1 ) ) ; if ( override != null ) { node . setLiteral ( override ) ; } data = node . childrenAccept ( this , data ) ; return data ; } } 	1
package org . apache . velocity . runtime . log ; public class NullLogSystem extends NullLogChute implements LogSystem { public void logVelocityMessage ( int level , String message ) { } } 	0
package org . apache . velocity . runtime . parser . node ; import java . math . BigDecimal ; import java . math . BigInteger ; import java . util . HashMap ; import java . util . Map ; import java . util . List ; import java . util . ArrayList ; public abstract class MathUtils { protected static final BigDecimal DECIMAL_ZERO = new BigDecimal ( BigInteger . ZERO ) ; protected static final int BASE_LONG = 0 ; protected static final int BASE_FLOAT = 1 ; protected static final int BASE_DOUBLE = 2 ; protected static final int BASE_BIGINTEGER = 3 ; protected static final int BASE_BIGDECIMAL = 4 ; protected static final Map ints = new HashMap ( ) ; static { ints . put ( Byte . class , BigDecimal . valueOf ( Byte . MAX_VALUE ) ) ; ints . put ( Short . class , BigDecimal . valueOf ( Short . MAX_VALUE ) ) ; ints . put ( Integer . class , BigDecimal . valueOf ( Integer . MAX_VALUE ) ) ; ints . put ( Long . class , BigDecimal . valueOf ( Long . MAX_VALUE ) ) ; ints . put ( BigInteger . class , BigDecimal . valueOf ( - 1 ) ) ; } protected static final List typesBySize = new ArrayList ( ) ; static { typesBySize . add ( Byte . class ) ; typesBySize . add ( Short . class ) ; typesBySize . add ( Integer . class ) ; typesBySize . add ( Long . class ) ; typesBySize . add ( Float . class ) ; typesBySize . add ( Double . class ) ; } public static BigDecimal toBigDecimal ( Number n ) { if ( n instanceof BigDecimal ) { return ( BigDecimal ) n ; } if ( n instanceof BigInteger ) { return new BigDecimal ( ( BigInteger ) n ) ; } return new BigDecimal ( n . doubleValue ( ) ) ; } public static BigInteger toBigInteger ( Number n ) { if ( n instanceof BigInteger ) { return ( BigInteger ) n ; } return BigInteger . valueOf ( n . longValue ( ) ) ; } public static boolean isZero ( Number n ) { if ( isInteger ( n ) ) { if ( n instanceof BigInteger ) { return ( ( BigInteger ) n ) . compareTo ( BigInteger . ZERO ) == 0 ; } return n . doubleValue ( ) == 0 ; } if ( n instanceof Float ) { return n . floatValue ( ) == 0f ; } if ( n instanceof Double ) { return n . doubleValue ( ) == 0d ; } return toBigDecimal ( n ) . compareTo ( DECIMAL_ZERO ) == 0 ; } public static boolean isInteger ( Number n ) { return ints . containsKey ( n . getClass ( ) ) ; } public static Number wrapPrimitive ( long value , Class type ) { if ( type == Byte . class ) { if ( value > Byte . MAX_VALUE || value < Byte . MIN_VALUE ) { type = Short . class ; } else { return new Byte ( ( byte ) value ) ; } } if ( type == Short . class ) { if ( value > Short . MAX_VALUE || value < Short . MIN_VALUE ) { type = Integer . class ; } else { return new Short ( ( short ) value ) ; } } if ( type == Integer . class ) { if ( value > Integer . MAX_VALUE || value < Integer . MIN_VALUE ) { type = Long . class ; } else { return new Integer ( ( int ) value ) ; } } if ( type == Long . class ) { return new Long ( value ) ; } return BigInteger . valueOf ( value ) ; } private static Number wrapPrimitive ( long value , Number op1 , Number op2 ) { if ( typesBySize . indexOf ( op1 . getClass ( ) ) > typesBySize . indexOf ( op2 . getClass ( ) ) ) { return wrapPrimitive ( value , op1 . getClass ( ) ) ; } return wrapPrimitive ( value , op2 . getClass ( ) ) ; } private static int findCalculationBase ( Number op1 , Number op2 ) { boolean op1Int = isInteger ( op1 ) ; boolean op2Int = isInteger ( op2 ) ; if ( ( op1 instanceof BigDecimal || op2 instanceof BigDecimal ) || ( ( ! op1Int || ! op2Int ) && ( op1 instanceof BigInteger || op2 instanceof BigInteger ) ) ) { return BASE_BIGDECIMAL ; } if ( op1Int && op2Int ) { if ( op1 instanceof BigInteger || op2 instanceof BigInteger ) { return BASE_BIGINTEGER ; } return BASE_LONG ; } if ( ( op1 instanceof Double ) || ( op2 instanceof Double ) ) { return BASE_DOUBLE ; } return BASE_FLOAT ; } public static Number add ( Number op1 , Number op2 ) { int calcBase = findCalculationBase ( op1 , op2 ) ; switch ( calcBase ) { case BASE_BIGINTEGER : return toBigInteger ( op1 ) . add ( toBigInteger ( op2 ) ) ; case BASE_LONG : long l1 = op1 . longValue ( ) ; long l2 = op2 . longValue ( ) ; long result = l1 + l2 ; if ( ( result ^ l1 ) < 0 && ( result ^ l2 ) < 0 ) { return toBigInteger ( op1 ) . add ( toBigInteger ( op2 ) ) ; } return wrapPrimitive ( result , op1 , op2 ) ; case BASE_FLOAT : return new Float ( op1 . floatValue ( ) + op2 . floatValue ( ) ) ; case BASE_DOUBLE : return new Double ( op1 . doubleValue ( ) + op2 . doubleValue ( ) ) ; default : return toBigDecimal ( op1 ) . add ( toBigDecimal ( op2 ) ) ; } } public static Number subtract ( Number op1 , Number op2 ) { int calcBase = findCalculationBase ( op1 , op2 ) ; switch ( calcBase ) { case BASE_BIGINTEGER : return toBigInteger ( op1 ) . subtract ( toBigInteger ( op2 ) ) ; case BASE_LONG : long l1 = op1 . longValue ( ) ; long l2 = op2 . longValue ( ) ; long result = l1 - l2 ; if ( ( result ^ l1 ) < 0 && ( result ^ ~ l2 ) < 0 ) { return toBigInteger ( op1 ) . subtract ( toBigInteger ( op2 ) ) ; } return wrapPrimitive ( result , op1 , op2 ) ; case BASE_FLOAT : return new Float ( op1 . floatValue ( ) - op2 . floatValue ( ) ) ; case BASE_DOUBLE : return new Double ( op1 . doubleValue ( ) - op2 . doubleValue ( ) ) ; default : return toBigDecimal ( op1 ) . subtract ( toBigDecimal ( op2 ) ) ; } } public static Number multiply ( Number op1 , Number op2 ) { int calcBase = findCalculationBase ( op1 , op2 ) ; switch ( calcBase ) { case BASE_BIGINTEGER : return toBigInteger ( op1 ) . multiply ( toBigInteger ( op2 ) ) ; case BASE_LONG : long l1 = op1 . longValue ( ) ; long l2 = op2 . longValue ( ) ; long result = l1 * l2 ; if ( ( l2 != 0 ) && ( result / l2 != l1 ) ) { return toBigInteger ( op1 ) . multiply ( toBigInteger ( op2 ) ) ; } return wrapPrimitive ( result , op1 , op2 ) ; case BASE_FLOAT : return new Float ( op1 . floatValue ( ) * op2 . floatValue ( ) ) ; case BASE_DOUBLE : return new Double ( op1 . doubleValue ( ) * op2 . doubleValue ( ) ) ; default : return toBigDecimal ( op1 ) . multiply ( toBigDecimal ( op2 ) ) ; } } public static Number divide ( Number op1 , Number op2 ) { int calcBase = findCalculationBase ( op1 , op2 ) ; switch ( calcBase ) { case BASE_BIGINTEGER : BigInteger b1 = toBigInteger ( op1 ) ; BigInteger b2 = toBigInteger ( op2 ) ; return b1 . divide ( b2 ) ; case BASE_LONG : long l1 = op1 . longValue ( ) ; long l2 = op2 . longValue ( ) ; return wrapPrimitive ( l1 / l2 , op1 , op2 ) ; case BASE_FLOAT : return new Float ( op1 . floatValue ( ) / op2 . floatValue ( ) ) ; case BASE_DOUBLE : return new Double ( op1 . doubleValue ( ) / op2 . doubleValue ( ) ) ; default : return toBigDecimal ( op1 ) . divide ( toBigDecimal ( op2 ) , BigDecimal . ROUND_HALF_DOWN ) ; } } public static Number modulo ( Number op1 , Number op2 ) throws ArithmeticException { int calcBase = findCalculationBase ( op1 , op2 ) ; switch ( calcBase ) { case BASE_BIGINTEGER : return toBigInteger ( op1 ) . mod ( toBigInteger ( op2 ) ) ; case BASE_LONG : return wrapPrimitive ( op1 . longValue ( ) % op2 . longValue ( ) , op1 , op2 ) ; case BASE_FLOAT : return new Float ( op1 . floatValue ( ) % op2 . floatValue ( ) ) ; case BASE_DOUBLE : return new Double ( op1 . doubleValue ( ) % op2 . doubleValue ( ) ) ; default : throw new ArithmeticException ( "Cannot calculate the modulo of BigDecimals." ) ; } } public static int compare ( Number op1 , Number op2 ) { int calcBase = findCalculationBase ( op1 , op2 ) ; switch ( calcBase ) { case BASE_BIGINTEGER : return toBigInteger ( op1 ) . compareTo ( toBigInteger ( op2 ) ) ; case BASE_LONG : long l1 = op1 . longValue ( ) ; long l2 = op2 . longValue ( ) ; if ( l1 < l2 ) { return - 1 ; } if ( l1 > l2 ) { return 1 ; } return 0 ; case BASE_FLOAT : float f1 = op1 . floatValue ( ) ; float f2 = op2 . floatValue ( ) ; if ( f1 < f2 ) { return - 1 ; } if ( f1 > f2 ) { return 1 ; } return 0 ; case BASE_DOUBLE : double d1 = op1 . doubleValue ( ) ; double d2 = op2 . doubleValue ( ) ; if ( d1 < d2 ) { return - 1 ; } if ( d1 > d2 ) { return 1 ; } return 0 ; default : return toBigDecimal ( op1 ) . compareTo ( toBigDecimal ( op2 ) ) ; } } } 	1
package org . apache . velocity . runtime . directive ; import java . io . IOException ; import java . io . Writer ; import org . apache . velocity . context . InternalContextAdapter ; import org . apache . velocity . exception . TemplateInitException ; import org . apache . velocity . runtime . RuntimeServices ; import org . apache . velocity . runtime . parser . node . Node ; public class Literal extends Directive { String literalText ; public String getName ( ) { return "literal" ; } public int getType ( ) { return BLOCK ; } public void init ( RuntimeServices rs , InternalContextAdapter context , Node node ) throws TemplateInitException { super . init ( rs , context , node ) ; literalText = node . jjtGetChild ( 0 ) . literal ( ) ; } public boolean render ( InternalContextAdapter context , Writer writer , Node node ) throws IOException { writer . write ( literalText ) ; return true ; } } 	0
package org . apache . velocity . runtime . visitor ; import org . apache . velocity . runtime . parser . Token ; import org . apache . velocity . runtime . parser . node . ASTAddNode ; import org . apache . velocity . runtime . parser . node . ASTAndNode ; import org . apache . velocity . runtime . parser . node . ASTAssignment ; import org . apache . velocity . runtime . parser . node . ASTBlock ; import org . apache . velocity . runtime . parser . node . ASTDirective ; import org . apache . velocity . runtime . parser . node . ASTDivNode ; import org . apache . velocity . runtime . parser . node . ASTEQNode ; import org . apache . velocity . runtime . parser . node . ASTElseIfStatement ; import org . apache . velocity . runtime . parser . node . ASTElseStatement ; import org . apache . velocity . runtime . parser . node . ASTEscape ; import org . apache . velocity . runtime . parser . node . ASTEscapedDirective ; import org . apache . velocity . runtime . parser . node . ASTExpression ; import org . apache . velocity . runtime . parser . node . ASTFalse ; import org . apache . velocity . runtime . parser . node . ASTFloatingPointLiteral ; import org . apache . velocity . runtime . parser . node . ASTGENode ; import org . apache . velocity . runtime . parser . node . ASTGTNode ; import org . apache . velocity . runtime . parser . node . ASTIdentifier ; import org . apache . velocity . runtime . parser . node . ASTIfStatement ; import org . apache . velocity . runtime . parser . node . ASTIntegerLiteral ; import org . apache . velocity . runtime . parser . node . ASTIntegerRange ; import org . apache . velocity . runtime . parser . node . ASTLENode ; import org . apache . velocity . runtime . parser . node . ASTLTNode ; import org . apache . velocity . runtime . parser . node . ASTMap ; import org . apache . velocity . runtime . parser . node . ASTMethod ; import org . apache . velocity . runtime . parser . node . ASTModNode ; import org . apache . velocity . runtime . parser . node . ASTMulNode ; import org . apache . velocity . runtime . parser . node . ASTNENode ; import org . apache . velocity . runtime . parser . node . ASTNotNode ; import org . apache . velocity . runtime . parser . node . ASTObjectArray ; import org . apache . velocity . runtime . parser . node . ASTOrNode ; import org . apache . velocity . runtime . parser . node . ASTReference ; import org . apache . velocity . runtime . parser . node . ASTSetDirective ; import org . apache . velocity . runtime . parser . node . ASTStop ; import org . apache . velocity . runtime . parser . node . ASTStringLiteral ; import org . apache . velocity . runtime . parser . node . ASTSubtractNode ; import org . apache . velocity . runtime . parser . node . ASTText ; import org . apache . velocity . runtime . parser . node . ASTTrue ; import org . apache . velocity . runtime . parser . node . ASTWord ; import org . apache . velocity . runtime . parser . node . ASTprocess ; import org . apache . velocity . runtime . parser . node . Node ; import org . apache . velocity . runtime . parser . node . SimpleNode ; public class NodeViewMode extends BaseVisitor { private int indent = 0 ; private boolean showTokens = true ; private String indentString ( ) { StringBuffer sb = new StringBuffer ( ) ; for ( int i = 0 ; i < indent ; ++ i ) { sb . append ( "  " ) ; } return sb . toString ( ) ; } private Object showNode ( Node node , Object data ) { String tokens = "" ; String special = "" ; Token t ; if ( showTokens ) { t = node . getFirstToken ( ) ; if ( t . specialToken != null && ! t . specialToken . image . startsWith ( "##" ) ) special = t . specialToken . image ; tokens = " -> " + special + t . image ; } System . out . println ( indentString ( ) + node + tokens ) ; ++ indent ; data = node . childrenAccept ( this , data ) ; -- indent ; return data ; } public Object visit ( SimpleNode node , Object data ) { return showNode ( node , data ) ; } public Object visit ( ASTprocess node , Object data ) { return showNode ( node , data ) ; } public Object visit ( ASTExpression node , Object data ) { return showNode ( node , data ) ; } public Object visit ( ASTAssignment node , Object data ) { return showNode ( node , data ) ; } public Object visit ( ASTOrNode node , Object data ) { return showNode ( node , data ) ; } public Object visit ( ASTAndNode node , Object data ) { return showNode ( node , data ) ; } public Object visit ( ASTEQNode node , Object data ) { return showNode ( node , data ) ; } public Object visit ( ASTNENode node , Object data ) { return showNode ( node , data ) ; } public Object visit ( ASTLTNode node , Object data ) { return showNode ( node , data ) ; } public Object visit ( ASTGTNode node , Object data ) { return showNode ( node , data ) ; } public Object visit ( ASTLENode node , Object data ) { return showNode ( node , data ) ; } public Object visit ( ASTGENode node , Object data ) { return showNode ( node , data ) ; } public Object visit ( ASTAddNode node , Object data ) { return showNode ( node , data ) ; } public Object visit ( ASTSubtractNode node , Object data ) { return showNode ( node , data ) ; } public Object visit ( ASTMulNode node , Object data ) { return showNode ( node , data ) ; } public Object visit ( ASTDivNode node , Object data ) { return showNode ( node , data ) ; } public Object visit ( ASTModNode node , Object data ) { return showNode ( node , data ) ; } public Object visit ( ASTNotNode node , Object data ) { return showNode ( node , data ) ; } public Object visit ( ASTFloatingPointLiteral node , Object data ) { return showNode ( node , data ) ; } public Object visit ( ASTIntegerLiteral node , Object data ) { return showNode ( node , data ) ; } public Object visit ( ASTStringLiteral node , Object data ) { return showNode ( node , data ) ; } public Object visit ( ASTIdentifier node , Object data ) { return showNode ( node , data ) ; } public Object visit ( ASTMethod node , Object data ) { return showNode ( node , data ) ; } public Object visit ( ASTReference node , Object data ) { return showNode ( node , data ) ; } public Object visit ( ASTTrue node , Object data ) { return showNode ( node , data ) ; } public Object visit ( ASTFalse node , Object data ) { return showNode ( node , data ) ; } public Object visit ( ASTBlock node , Object data ) { return showNode ( node , data ) ; } public Object visit ( ASTText node , Object data ) { return showNode ( node , data ) ; } public Object visit ( ASTIfStatement node , Object data ) { return showNode ( node , data ) ; } public Object visit ( ASTElseStatement node , Object data ) { return showNode ( node , data ) ; } public Object visit ( ASTElseIfStatement node , Object data ) { return showNode ( node , data ) ; } public Object visit ( ASTObjectArray node , Object data ) { return showNode ( node , data ) ; } public Object visit ( ASTDirective node , Object data ) { return showNode ( node , data ) ; } public Object visit ( ASTWord node , Object data ) { return showNode ( node , data ) ; } public Object visit ( ASTSetDirective node , Object data ) { return showNode ( node , data ) ; } public Object visit ( ASTEscapedDirective node , Object data ) { return showNode ( node , data ) ; } public Object visit ( ASTEscape node , Object data ) { return showNode ( node , data ) ; } public Object visit ( ASTMap node , Object data ) { return showNode ( node , data ) ; } public Object visit ( ASTIntegerRange node , Object data ) { return showNode ( node , data ) ; } public Object visit ( ASTStop node , Object data ) { return showNode ( node , data ) ; } } 	1
package org . apache . velocity . util ; public final class SimplePool { private Object pool [ ] ; private int max ; private int current = - 1 ; public SimplePool ( int max ) { this . max = max ; pool = new Object [ max ] ; } public void put ( Object o ) { int idx = - 1 ; synchronized ( this ) { if ( current < max - 1 ) { idx = ++ current ; } if ( idx >= 0 ) { pool [ idx ] = o ; } } } public Object get ( ) { synchronized ( this ) { if ( current >= 0 ) { Object o = pool [ current ] ; pool [ current ] = null ; current -- ; return o ; } } return null ; } public int getMax ( ) { return max ; } Object [ ] getPool ( ) { return pool ; } } 	0
package org . apache . velocity . util ; import org . apache . velocity . runtime . RuntimeServices ; public interface RuntimeServicesAware { public void setRuntimeServices ( RuntimeServices rs ) ; } 	1
package org . apache . velocity . anakia ; import java . util . ArrayList ; import java . util . Collection ; import java . util . Iterator ; import org . jdom . Element ; public class TreeWalker { public TreeWalker ( ) { } public NodeList allElements ( Element e ) { ArrayList theElements = new ArrayList ( ) ; treeWalk ( e , theElements ) ; return new NodeList ( theElements , false ) ; } private final void treeWalk ( Element e , Collection theElements ) { for ( Iterator i = e . getChildren ( ) . iterator ( ) ; i . hasNext ( ) ; ) { Element child = ( Element ) i . next ( ) ; theElements . add ( child ) ; treeWalk ( child , theElements ) ; } } } 	0
package org . apache . velocity . runtime . parser . node ; import java . util . ArrayList ; import java . util . List ; import org . apache . velocity . context . InternalContextAdapter ; import org . apache . velocity . exception . MethodInvocationException ; import org . apache . velocity . runtime . parser . Parser ; import org . apache . velocity . runtime . parser . ParserVisitor ; public class ASTIntegerRange extends SimpleNode { public ASTIntegerRange ( int id ) { super ( id ) ; } public ASTIntegerRange ( Parser p , int id ) { super ( p , id ) ; } public Object jjtAccept ( ParserVisitor visitor , Object data ) { return visitor . visit ( this , data ) ; } public Object value ( InternalContextAdapter context ) throws MethodInvocationException { Object left = jjtGetChild ( 0 ) . value ( context ) ; Object right = jjtGetChild ( 1 ) . value ( context ) ; if ( left == null || right == null ) { log . error ( ( left == null ? "Left" : "Right" ) + " side of range operator [n..m] has null value." + " Operation not possible. " + context . getCurrentTemplateName ( ) + " [line " + getLine ( ) + ", column " + getColumn ( ) + "]" ) ; return null ; } if ( ! ( left instanceof Integer ) || ! ( right instanceof Integer ) ) { log . error ( ( ! ( left instanceof Integer ) ? "Left" : "Right" ) + " side of range operator is not a valid type. " + "Currently only integers (1,2,3...) and Integer type is supported. " + context . getCurrentTemplateName ( ) + " [line " + getLine ( ) + ", column " + getColumn ( ) + "]" ) ; return null ; } int l = ( ( Integer ) left ) . intValue ( ) ; int r = ( ( Integer ) right ) . intValue ( ) ; int nbrElements = Math . abs ( l - r ) ; nbrElements += 1 ; int delta = ( l >= r ) ? - 1 : 1 ; List elements = new ArrayList ( nbrElements ) ; int value = l ; for ( int i = 0 ; i < nbrElements ; i ++ ) { elements . add ( new Integer ( value ) ) ; value += delta ; } return elements ; } } 	1
package org . apache . velocity . anakia ; import java . util . List ; import org . jdom . Document ; import org . jdom . Element ; public class XPathTool { public XPathTool ( ) { } public NodeList applyTo ( String xpathSpec , Document doc ) { return new NodeList ( XPathCache . getXPath ( xpathSpec ) . applyTo ( doc ) , false ) ; } public NodeList applyTo ( String xpathSpec , Element elem ) { return new NodeList ( XPathCache . getXPath ( xpathSpec ) . applyTo ( elem ) , false ) ; } public NodeList applyTo ( String xpathSpec , List nodeSet ) { return new NodeList ( XPathCache . getXPath ( xpathSpec ) . applyTo ( nodeSet ) , false ) ; } } 	0
package org . apache . velocity . runtime . directive ; import java . io . BufferedReader ; import java . io . StringReader ; import java . io . StringWriter ; import org . apache . velocity . VelocityContext ; import org . apache . velocity . context . InternalContextAdapter ; import org . apache . velocity . context . InternalContextAdapterImpl ; import org . apache . velocity . exception . MethodInvocationException ; import org . apache . velocity . runtime . RuntimeServices ; import org . apache . velocity . runtime . log . Log ; import org . apache . velocity . runtime . parser . ParserTreeConstants ; import org . apache . velocity . runtime . parser . node . ASTReference ; import org . apache . velocity . runtime . parser . node . SimpleNode ; public class VMProxyArg { private static final int GENERALSTATIC = - 1 ; private int type = 0 ; private SimpleNode nodeTree = null ; private Object staticObject = null ; private int numTreeChildren = 0 ; private String contextReference = null ; private String callerReference = null ; private String singleLevelRef = null ; private boolean constant = false ; private RuntimeServices rsvc = null ; private Log log = null ; public VMProxyArg ( RuntimeServices rs , String contextRef , String callerRef , int t ) { rsvc = rs ; log = rsvc . getLog ( ) ; contextReference = contextRef ; callerReference = callerRef ; type = t ; setup ( ) ; if ( nodeTree != null ) { numTreeChildren = nodeTree . jjtGetNumChildren ( ) ; } if ( type == ParserTreeConstants . JJTREFERENCE ) { if ( numTreeChildren == 0 ) { singleLevelRef = ( ( ASTReference ) nodeTree ) . getRootString ( ) ; } } } public boolean isConstant ( ) { return constant ; } public Object setObject ( InternalContextAdapter context , Object o ) { if ( type == ParserTreeConstants . JJTREFERENCE ) { if ( numTreeChildren > 0 ) { try { ( ( ASTReference ) nodeTree ) . setValue ( context , o ) ; } catch ( MethodInvocationException mie ) { log . error ( "VMProxyArg.getObject() : method invocation error setting value" , mie ) ; } } else { context . put ( singleLevelRef , o ) ; } } else { type = GENERALSTATIC ; staticObject = o ; log . error ( "VMProxyArg.setObject() : Programmer error : I am a constant!  No setting! : " + contextReference + " / " + callerReference ) ; } return null ; } public Object getObject ( InternalContextAdapter context ) throws MethodInvocationException { try { Object retObject = null ; if ( type == ParserTreeConstants . JJTREFERENCE ) { if ( numTreeChildren == 0 ) { retObject = context . get ( singleLevelRef ) ; } else { retObject = nodeTree . execute ( null , context ) ; } } else if ( type == ParserTreeConstants . JJTMAP ) { retObject = nodeTree . value ( context ) ; } else if ( type == ParserTreeConstants . JJTOBJECTARRAY ) { retObject = nodeTree . value ( context ) ; } else if ( type == ParserTreeConstants . JJTINTEGERRANGE ) { retObject = nodeTree . value ( context ) ; } else if ( type == ParserTreeConstants . JJTTRUE ) { retObject = staticObject ; } else if ( type == ParserTreeConstants . JJTFALSE ) { retObject = staticObject ; } else if ( type == ParserTreeConstants . JJTSTRINGLITERAL ) { retObject = nodeTree . value ( context ) ; } else if ( type == ParserTreeConstants . JJTINTEGERLITERAL ) { retObject = staticObject ; } else if ( type == ParserTreeConstants . JJTFLOATINGPOINTLITERAL ) { retObject = staticObject ; } else if ( type == ParserTreeConstants . JJTTEXT ) { try { StringWriter writer = new StringWriter ( ) ; nodeTree . render ( context , writer ) ; retObject = writer ; } catch ( RuntimeException e ) { throw e ; } catch ( Exception e ) { log . error ( "VMProxyArg.getObject() : error rendering reference" , e ) ; } } else if ( type == GENERALSTATIC ) { retObject = staticObject ; } else { log . error ( "Unsupported VM arg type : VM arg = " + callerReference + " type = " + type + "( VMProxyArg.getObject() )" ) ; } return retObject ; } catch ( MethodInvocationException mie ) { log . error ( "VMProxyArg.getObject() : method invocation error getting value" , mie ) ; throw mie ; } } private void setup ( ) { switch ( type ) { case ParserTreeConstants . JJTINTEGERRANGE : case ParserTreeConstants . JJTREFERENCE : case ParserTreeConstants . JJTOBJECTARRAY : case ParserTreeConstants . JJTMAP : case ParserTreeConstants . JJTSTRINGLITERAL : case ParserTreeConstants . JJTTEXT : { constant = false ; try { String buff = "#include(" + callerReference + " ) " ; BufferedReader br = new BufferedReader ( new StringReader ( buff ) ) ; nodeTree = rsvc . parse ( br , "VMProxyArg:" + callerReference , true ) ; nodeTree = ( SimpleNode ) nodeTree . jjtGetChild ( 0 ) . jjtGetChild ( 0 ) ; if ( nodeTree != null ) { if ( nodeTree . getType ( ) != type ) { log . error ( "VMProxyArg.setup() : programmer error : type doesn't match node type." ) ; } InternalContextAdapter ica = new InternalContextAdapterImpl ( new VelocityContext ( ) ) ; ica . pushCurrentTemplateName ( "VMProxyArg : " + ParserTreeConstants . jjtNodeName [ type ] ) ; nodeTree . init ( ica , rsvc ) ; } } catch ( RuntimeException e ) { throw e ; } catch ( Exception e ) { log . error ( "VMProxyArg.setup() : exception " + callerReference , e ) ; } break ; } case ParserTreeConstants . JJTTRUE : { constant = true ; staticObject = Boolean . TRUE ; break ; } case ParserTreeConstants . JJTFALSE : { constant = true ; staticObject = Boolean . FALSE ; break ; } case ParserTreeConstants . JJTINTEGERLITERAL : { constant = true ; staticObject = new Integer ( callerReference ) ; break ; } case ParserTreeConstants . JJTFLOATINGPOINTLITERAL : { constant = true ; staticObject = new Double ( callerReference ) ; break ; } case ParserTreeConstants . JJTWORD : { log . error ( "Unsupported arg type : " + callerReference + " You most likely intended to call a VM with a string literal, so enclose with ' or \" characters. (VMProxyArg.setup())" ) ; constant = true ; staticObject = callerReference ; break ; } default : { log . error ( "VMProxyArg.setup() : unsupported type : " + callerReference ) ; } } } public VMProxyArg ( VMProxyArg model , InternalContextAdapter c ) { contextReference = model . getContextReference ( ) ; callerReference = model . getCallerReference ( ) ; nodeTree = model . getNodeTree ( ) ; staticObject = model . getStaticObject ( ) ; type = model . getType ( ) ; if ( nodeTree != null ) numTreeChildren = nodeTree . jjtGetNumChildren ( ) ; if ( type == ParserTreeConstants . JJTREFERENCE ) { if ( numTreeChildren == 0 ) { singleLevelRef = ( ( ASTReference ) nodeTree ) . getRootString ( ) ; } } } public String getCallerReference ( ) { return callerReference ; } public String getContextReference ( ) { return contextReference ; } public SimpleNode getNodeTree ( ) { return nodeTree ; } public Object getStaticObject ( ) { return staticObject ; } public int getType ( ) { return type ; } } 	1
package org . apache . velocity . util ; import java . util . Iterator ; import java . util . Enumeration ; public class EnumerationIterator implements Iterator { private Enumeration enumeration = null ; public EnumerationIterator ( Enumeration enumeration ) { this . enumeration = enumeration ; } public Object next ( ) { return enumeration . nextElement ( ) ; } public boolean hasNext ( ) { return enumeration . hasMoreElements ( ) ; } public void remove ( ) { } } 	0
package org . apache . velocity . app . event ; public interface EventHandlerMethodExecutor { public void execute ( EventHandler handler ) throws Exception ; public boolean isDone ( ) ; public Object getReturnValue ( ) ; } 	1
package org . apache . velocity . runtime . parser . node ; import org . apache . velocity . runtime . parser . Parser ; import org . apache . velocity . runtime . parser . ParserVisitor ; import org . apache . velocity . context . InternalContextAdapter ; import org . apache . velocity . exception . MethodInvocationException ; public class ASTOrNode extends SimpleNode { public ASTOrNode ( int id ) { super ( id ) ; } public ASTOrNode ( Parser p , int id ) { super ( p , id ) ; } public Object jjtAccept ( ParserVisitor visitor , Object data ) { return visitor . visit ( this , data ) ; } public Object value ( InternalContextAdapter context ) throws MethodInvocationException { return new Boolean ( evaluate ( context ) ) ; } public boolean evaluate ( InternalContextAdapter context ) throws MethodInvocationException { Node left = jjtGetChild ( 0 ) ; Node right = jjtGetChild ( 1 ) ; if ( left != null && left . evaluate ( context ) ) return true ; if ( right != null && right . evaluate ( context ) ) return true ; return false ; } } 	0
package org . apache . velocity . runtime . parser . node ; import java . lang . reflect . InvocationTargetException ; import java . lang . reflect . Method ; import org . apache . velocity . runtime . log . Log ; public abstract class SetExecutor { protected Log log = null ; private Method method = null ; public abstract Object execute ( Object o , Object value ) throws IllegalAccessException , InvocationTargetException ; public boolean isAlive ( ) { return ( method != null ) ; } public Method getMethod ( ) { return method ; } protected void setMethod ( final Method method ) { this . method = method ; } } 	1
package org . apache . velocity . runtime . directive ; public interface DirectiveConstants { public static final int BLOCK = 1 ; public static final int LINE = 2 ; } 	0
package org . apache . velocity . runtime . log ; import org . apache . velocity . runtime . RuntimeLogger ; public class RuntimeLoggerLog extends Log { private RuntimeLogger rlog ; public RuntimeLoggerLog ( RuntimeLogger rlog ) { if ( rlog == null ) { throw new NullPointerException ( "RuntimeLogger cannot be null!" ) ; } this . rlog = rlog ; } protected void setLogChute ( LogChute newLogChute ) { throw new UnsupportedOperationException ( "RuntimeLoggerLog does not support this method." ) ; } protected LogChute getLogChute ( ) { throw new UnsupportedOperationException ( "RuntimeLoggerLog does not support this method." ) ; } protected void setShowStackTraces ( boolean showStacks ) { throw new UnsupportedOperationException ( "RuntimeLoggerLog does not support this method." ) ; } public boolean getShowStackTraces ( ) { throw new UnsupportedOperationException ( "RuntimeLoggerLog does not support this method." ) ; } public boolean isTraceEnabled ( ) { return true ; } public void trace ( Object message ) { debug ( message ) ; } public void trace ( Object message , Throwable t ) { debug ( message , t ) ; } public boolean isDebugEnabled ( ) { return true ; } public void debug ( Object message ) { rlog . debug ( message ) ; } public void debug ( Object message , Throwable t ) { rlog . debug ( message ) ; rlog . debug ( t ) ; } public boolean isInfoEnabled ( ) { return true ; } public void info ( Object message ) { rlog . info ( message ) ; } public void info ( Object message , Throwable t ) { rlog . info ( message ) ; rlog . info ( t ) ; } public boolean isWarnEnabled ( ) { return true ; } public void warn ( Object message ) { rlog . warn ( message ) ; } public void warn ( Object message , Throwable t ) { rlog . warn ( message ) ; rlog . warn ( t ) ; } public boolean isErrorEnabled ( ) { return true ; } public void error ( Object message ) { rlog . error ( message ) ; } public void error ( Object message , Throwable t ) { rlog . error ( message ) ; rlog . error ( t ) ; } } 	1
package org . apache . velocity . runtime . parser ; public class ParseException extends Exception { private static final long serialVersionUID = - 309603325673449381L ; public ParseException ( Token currentTokenVal , int [ ] [ ] expectedTokenSequencesVal , String [ ] tokenImageVal ) { super ( "" ) ; specialConstructor = true ; currentToken = currentTokenVal ; expectedTokenSequences = expectedTokenSequencesVal ; tokenImage = tokenImageVal ; } public ParseException ( ) { super ( ) ; specialConstructor = false ; } public ParseException ( String message ) { super ( message ) ; specialConstructor = false ; } protected boolean specialConstructor ; public Token currentToken ; public int [ ] [ ] expectedTokenSequences ; public String [ ] tokenImage ; public String getMessage ( ) { if ( ! specialConstructor ) { return super . getMessage ( ) ; } String expected = "" ; int maxSize = 0 ; for ( int i = 0 ; i < expectedTokenSequences . length ; i ++ ) { if ( maxSize < expectedTokenSequences [ i ] . length ) { maxSize = expectedTokenSequences [ i ] . length ; } for ( int j = 0 ; j < expectedTokenSequences [ i ] . length ; j ++ ) { expected += tokenImage [ expectedTokenSequences [ i ] [ j ] ] + " " ; } if ( expectedTokenSequences [ i ] [ expectedTokenSequences [ i ] . length - 1 ] != 0 ) { expected += "..." ; } expected += eol + "    " ; } String retval = "Encountered \"" ; Token tok = currentToken . next ; for ( int i = 0 ; i < maxSize ; i ++ ) { if ( i != 0 ) retval += " " ; if ( tok . kind == 0 ) { retval += tokenImage [ 0 ] ; break ; } retval += add_escapes ( tok . image ) ; tok = tok . next ; } retval += "\" at line " + currentToken . next . beginLine + ", column " + currentToken . next . beginColumn ; retval += "." + eol ; if ( expectedTokenSequences . length == 1 ) { retval += "Was expecting:" + eol + "    " ; } else { retval += "Was expecting one of:" + eol + "    " ; } retval += expected ; return retval ; } protected String eol = System . getProperty ( "line.separator" , "\n" ) ; protected String add_escapes ( String str ) { StringBuffer retval = new StringBuffer ( ) ; char ch ; for ( int i = 0 ; i < str . length ( ) ; i ++ ) { switch ( str . charAt ( i ) ) { case 0 : continue ; case '\b' : retval . append ( "\\b" ) ; continue ; case '\t' : retval . append ( "\\t" ) ; continue ; case '\n' : retval . append ( "\\n" ) ; continue ; case '\f' : retval . append ( "\\f" ) ; continue ; case '\r' : retval . append ( "\\r" ) ; continue ; case '\"' : retval . append ( "\\\"" ) ; continue ; case '\'' : retval . append ( "\\\'" ) ; continue ; case '\\' : retval . append ( "\\\\" ) ; continue ; default : if ( ( ch = str . charAt ( i ) ) < 0x20 || ch > 0x7e ) { String s = "0000" + Integer . toString ( ch , 16 ) ; retval . append ( "\\u" + s . substring ( s . length ( ) - 4 , s . length ( ) ) ) ; } else { retval . append ( ch ) ; } continue ; } } return retval . toString ( ) ; } } 	0
package org . apache . velocity . runtime . parser . node ; import org . apache . velocity . context . InternalContextAdapter ; import org . apache . velocity . exception . MethodInvocationException ; import org . apache . velocity . runtime . parser . Parser ; import org . apache . velocity . runtime . parser . ParserVisitor ; import org . apache . velocity . util . TemplateNumber ; public class ASTEQNode extends SimpleNode { public ASTEQNode ( int id ) { super ( id ) ; } public ASTEQNode ( Parser p , int id ) { super ( p , id ) ; } public Object jjtAccept ( ParserVisitor visitor , Object data ) { return visitor . visit ( this , data ) ; } public boolean evaluate ( InternalContextAdapter context ) throws MethodInvocationException { Object left = jjtGetChild ( 0 ) . value ( context ) ; Object right = jjtGetChild ( 1 ) . value ( context ) ; if ( left == null || right == null ) { log . error ( ( left == null ? "Left" : "Right" ) + " side (" + jjtGetChild ( ( left == null ? 0 : 1 ) ) . literal ( ) + ") of '==' operation " + "has null value. " + "If a reference, it may not be in the context." + " Operation not possible. " + context . getCurrentTemplateName ( ) + " [line " + getLine ( ) + ", column " + getColumn ( ) + "]" ) ; return false ; } if ( left instanceof TemplateNumber ) { left = ( ( TemplateNumber ) left ) . getAsNumber ( ) ; } if ( right instanceof TemplateNumber ) { right = ( ( TemplateNumber ) right ) . getAsNumber ( ) ; } if ( left instanceof Number && right instanceof Number ) { return MathUtils . compare ( ( Number ) left , ( Number ) right ) == 0 ; } if ( left . getClass ( ) . isAssignableFrom ( right . getClass ( ) ) || right . getClass ( ) . isAssignableFrom ( left . getClass ( ) ) ) { return left . equals ( right ) ; } else { if ( ( left . toString ( ) == null ) || ( right . toString ( ) == null ) ) { boolean culprit = ( left . toString ( ) == null ) ; log . error ( ( culprit ? "Left" : "Right" ) + " string side " + "String representation (" + jjtGetChild ( ( culprit ? 0 : 1 ) ) . literal ( ) + ") of '!=' operation has null value." + " Operation not possible. " + context . getCurrentTemplateName ( ) + " [line " + getLine ( ) + ", column " + getColumn ( ) + "]" ) ; return false ; } else { return left . toString ( ) . equals ( right . toString ( ) ) ; } } } public Object value ( InternalContextAdapter context ) throws MethodInvocationException { return evaluate ( context ) ? Boolean . TRUE : Boolean . FALSE ; } } 	1
package org . apache . velocity . runtime . resource ; import org . apache . velocity . Template ; public class ResourceFactory { public static Resource getResource ( String resourceName , int resourceType ) { Resource resource = null ; switch ( resourceType ) { case ResourceManager . RESOURCE_TEMPLATE : resource = new Template ( ) ; break ; case ResourceManager . RESOURCE_CONTENT : resource = new ContentResource ( ) ; break ; } return resource ; } } 	0
package org . apache . velocity . runtime ; import org . apache . velocity . runtime . parser . Parser ; import org . apache . velocity . util . SimplePool ; public class ParserPoolImpl implements ParserPool { RuntimeServices rsvc = null ; SimplePool pool = null ; int max = RuntimeConstants . NUMBER_OF_PARSERS ; public void initialize ( RuntimeServices rsvc ) { this . rsvc = rsvc ; max = rsvc . getInt ( RuntimeConstants . PARSER_POOL_SIZE , RuntimeConstants . NUMBER_OF_PARSERS ) ; pool = new SimplePool ( max ) ; for ( int i = 0 ; i < max ; i ++ ) { pool . put ( rsvc . createNewParser ( ) ) ; } if ( rsvc . getLog ( ) . isDebugEnabled ( ) ) { rsvc . getLog ( ) . debug ( "Created '" + max + "' parsers." ) ; } } public Parser get ( ) { Parser parser = ( Parser ) pool . get ( ) ; if ( parser == null ) { rsvc . getLog ( ) . debug ( "Created new " + "parser (pool exhausted).  Consider " + "increasing pool size." ) ; parser = rsvc . createNewParser ( ) ; } return parser ; } public void put ( Parser parser ) { pool . put ( parser ) ; } } 	1
package org . apache . velocity . runtime . parser . node ; import org . apache . velocity . runtime . parser . Parser ; import org . apache . velocity . runtime . parser . ParserVisitor ; public class ASTParameters extends SimpleNode { public ASTParameters ( int id ) { super ( id ) ; } public ASTParameters ( Parser p , int id ) { super ( p , id ) ; } public Object jjtAccept ( ParserVisitor visitor , Object data ) { return visitor . visit ( this , data ) ; } } 	0
package org . apache . velocity . app . event . implement ; import org . apache . velocity . app . event . IncludeEventHandler ; import org . apache . velocity . runtime . RuntimeServices ; import org . apache . velocity . util . RuntimeServicesAware ; import org . apache . velocity . util . StringUtils ; public class IncludeNotFound implements IncludeEventHandler , RuntimeServicesAware { private static final String DEFAULT_NOT_FOUND = "notfound.vm" ; private static final String PROPERTY_NOT_FOUND = "eventhandler.include.notfound" ; private RuntimeServices rs = null ; String notfound ; public String includeEvent ( String includeResourcePath , String currentResourcePath , String directiveName ) { boolean exists = ( rs . getLoaderNameForResource ( includeResourcePath ) != null ) ; if ( ! exists ) { if ( rs . getLoaderNameForResource ( notfound ) == null ) { return notfound ; } else { rs . getLog ( ) . error ( "Can't find include not found page: " + notfound ) ; return null ; } } else return includeResourcePath ; } public void setRuntimeServices ( RuntimeServices rs ) { this . rs = rs ; notfound = StringUtils . nullTrim ( rs . getString ( PROPERTY_NOT_FOUND , DEFAULT_NOT_FOUND ) ) ; } } 	1
package org . apache . velocity . context ; public interface InternalWrapperContext { Context getInternalUserContext ( ) ; InternalContextAdapter getBaseContext ( ) ; Object localPut ( final String key , final Object value ) ; } 	0
package org . apache . velocity . util . introspection ; public interface SecureIntrospectorControl { public boolean checkObjectExecutePermission ( Class clazz , String method ) ; } 	1
package org . apache . velocity . util . introspection ; public class IntrospectionCacheData { public Object thingy ; public Class contextData ; } 	0
package org . apache . velocity . runtime . directive ; import java . io . BufferedReader ; import java . io . IOException ; import java . io . StringReader ; import java . io . Writer ; import java . util . HashMap ; import org . apache . commons . lang . StringUtils ; import org . apache . velocity . context . InternalContextAdapter ; import org . apache . velocity . context . VMContext ; import org . apache . velocity . exception . MethodInvocationException ; import org . apache . velocity . exception . TemplateInitException ; import org . apache . velocity . runtime . RuntimeConstants ; import org . apache . velocity . runtime . RuntimeServices ; import org . apache . velocity . runtime . parser . ParserTreeConstants ; import org . apache . velocity . runtime . parser . Token ; import org . apache . velocity . runtime . parser . node . ASTDirective ; import org . apache . velocity . runtime . parser . node . Node ; import org . apache . velocity . runtime . parser . node . SimpleNode ; import org . apache . velocity . runtime . visitor . VMReferenceMungeVisitor ; public class VelocimacroProxy extends Directive { private String macroName = "" ; private String macroBody = "" ; private String [ ] argArray = null ; private SimpleNode nodeTree = null ; private int numMacroArgs = 0 ; private String namespace = "" ; private boolean init = false ; private String [ ] callingArgs ; private int [ ] callingArgTypes ; private HashMap proxyArgHash = new HashMap ( ) ; private boolean strictArguments ; public String getName ( ) { return macroName ; } public int getType ( ) { return LINE ; } public void setName ( String name ) { macroName = name ; } public void setArgArray ( String [ ] arr ) { argArray = arr ; numMacroArgs = argArray . length - 1 ; } public void setNodeTree ( SimpleNode tree ) { nodeTree = tree ; } public int getNumArgs ( ) { return numMacroArgs ; } public void setMacrobody ( String mb ) { macroBody = mb ; } public void setNamespace ( String ns ) { this . namespace = ns ; } public boolean render ( InternalContextAdapter context , Writer writer , Node node ) throws IOException , MethodInvocationException { try { if ( nodeTree != null ) { if ( ! init ) { nodeTree . init ( context , rsvc ) ; init = true ; } VMContext vmc = new VMContext ( context , rsvc ) ; for ( int i = 1 ; i < argArray . length ; i ++ ) { VMProxyArg arg = ( VMProxyArg ) proxyArgHash . get ( argArray [ i ] ) ; vmc . addVMProxyArg ( arg ) ; } nodeTree . render ( vmc , writer ) ; } else { rsvc . getLog ( ) . error ( "VM error " + macroName + ". Null AST" ) ; } } catch ( MethodInvocationException e ) { throw e ; } catch ( RuntimeException e ) { throw e ; } catch ( Exception e ) { rsvc . getLog ( ) . error ( "VelocimacroProxy.render() : exception VM = #" + macroName + "()" , e ) ; } return true ; } public void init ( RuntimeServices rs , InternalContextAdapter context , Node node ) throws TemplateInitException { super . init ( rs , context , node ) ; strictArguments = rs . getConfiguration ( ) . getBoolean ( RuntimeConstants . VM_ARGUMENTS_STRICT , false ) ; int i = node . jjtGetNumChildren ( ) ; if ( getNumArgs ( ) != i ) { for ( Node parent = node . jjtGetParent ( ) ; parent != null ; ) { if ( ( parent instanceof ASTDirective ) && StringUtils . equals ( ( ( ASTDirective ) parent ) . getDirectiveName ( ) , "macro" ) ) { return ; } parent = parent . jjtGetParent ( ) ; } String errormsg = "VM #" + macroName + ": error : too " + ( ( getNumArgs ( ) > i ) ? "few" : "many" ) + " arguments to macro. Wanted " + getNumArgs ( ) + " got " + i ; if ( strictArguments ) { throw new TemplateInitException ( errormsg , context . getCurrentTemplateName ( ) , 0 , 0 ) ; } else { rsvc . getLog ( ) . error ( errormsg ) ; return ; } } callingArgs = getArgArray ( node ) ; setupMacro ( callingArgs , callingArgTypes ) ; } public boolean setupMacro ( String [ ] callArgs , int [ ] callArgTypes ) { setupProxyArgs ( callArgs , callArgTypes ) ; parseTree ( callArgs ) ; return true ; } private void parseTree ( String [ ] callArgs ) { try { BufferedReader br = new BufferedReader ( new StringReader ( macroBody ) ) ; nodeTree = rsvc . parse ( br , namespace , false ) ; HashMap hm = new HashMap ( ) ; for ( int i = 1 ; i < argArray . length ; i ++ ) { String arg = callArgs [ i - 1 ] ; if ( arg . charAt ( 0 ) == '$' ) { hm . put ( argArray [ i ] , arg ) ; } } VMReferenceMungeVisitor v = new VMReferenceMungeVisitor ( hm ) ; nodeTree . jjtAccept ( v , null ) ; } catch ( RuntimeException e ) { throw e ; } catch ( Exception e ) { rsvc . getLog ( ) . error ( "VelocimacroManager.parseTree() : exception " + macroName , e ) ; } } private void setupProxyArgs ( String [ ] callArgs , int [ ] callArgTypes ) { for ( int i = 1 ; i < argArray . length ; i ++ ) { VMProxyArg arg = new VMProxyArg ( rsvc , argArray [ i ] , callArgs [ i - 1 ] , callArgTypes [ i - 1 ] ) ; proxyArgHash . put ( argArray [ i ] , arg ) ; } } private String [ ] getArgArray ( Node node ) { int numArgs = node . jjtGetNumChildren ( ) ; String args [ ] = new String [ numArgs ] ; callingArgTypes = new int [ numArgs ] ; int i = 0 ; Token t = null ; Token tLast = null ; while ( i < numArgs ) { args [ i ] = "" ; callingArgTypes [ i ] = node . jjtGetChild ( i ) . getType ( ) ; if ( false && node . jjtGetChild ( i ) . getType ( ) == ParserTreeConstants . JJTSTRINGLITERAL ) { args [ i ] += node . jjtGetChild ( i ) . getFirstToken ( ) . image . substring ( 1 , node . jjtGetChild ( i ) . getFirstToken ( ) . image . length ( ) - 1 ) ; } else { t = node . jjtGetChild ( i ) . getFirstToken ( ) ; tLast = node . jjtGetChild ( i ) . getLastToken ( ) ; while ( t != tLast ) { args [ i ] += t . image ; t = t . next ; } args [ i ] += t . image ; } i ++ ; } return args ; } } 	1
package org . apache . velocity . runtime . parser . node ; import java . io . IOException ; import java . io . Writer ; import org . apache . velocity . context . InternalContextAdapter ; import org . apache . velocity . exception . MethodInvocationException ; import org . apache . velocity . exception . ParseErrorException ; import org . apache . velocity . exception . ResourceNotFoundException ; import org . apache . velocity . runtime . parser . Parser ; import org . apache . velocity . runtime . parser . ParserVisitor ; import org . apache . velocity . runtime . parser . Token ; public class ASTComment extends SimpleNode { private static final char [ ] ZILCH = "" . toCharArray ( ) ; private char [ ] carr ; public ASTComment ( int id ) { super ( id ) ; } public ASTComment ( Parser p , int id ) { super ( p , id ) ; } public Object jjtAccept ( ParserVisitor visitor , Object data ) { return visitor . visit ( this , data ) ; } public Object init ( InternalContextAdapter context , Object data ) { Token t = getFirstToken ( ) ; int loc1 = t . image . indexOf ( "##" ) ; int loc2 = t . image . indexOf ( "#*" ) ; if ( loc1 == - 1 && loc2 == - 1 ) { carr = ZILCH ; } else { carr = t . image . substring ( 0 , ( loc1 == - 1 ) ? loc2 : loc1 ) . toCharArray ( ) ; } return data ; } public boolean render ( InternalContextAdapter context , Writer writer ) throws IOException , MethodInvocationException , ParseErrorException , ResourceNotFoundException { if ( context . getAllowRendering ( ) ) { writer . write ( carr ) ; } return true ; } } 	0
package org . apache . velocity . app . event ; import java . util . ArrayList ; import java . util . HashSet ; import java . util . Iterator ; import java . util . List ; import java . util . Set ; import org . apache . velocity . context . Context ; import org . apache . velocity . context . InternalEventContext ; import org . apache . velocity . runtime . RuntimeServices ; import org . apache . velocity . util . RuntimeServicesAware ; public class EventCartridge { private List referenceHandlers = new ArrayList ( ) ; private List nullSetHandlers = new ArrayList ( ) ; private List methodExceptionHandlers = new ArrayList ( ) ; private List includeHandlers = new ArrayList ( ) ; private List invalidReferenceHandlers = new ArrayList ( ) ; Set initializedHandlers = new HashSet ( ) ; public boolean addEventHandler ( EventHandler ev ) { if ( ev == null ) { return false ; } boolean found = false ; if ( ev instanceof ReferenceInsertionEventHandler ) { addReferenceInsertionEventHandler ( ( ReferenceInsertionEventHandler ) ev ) ; found = true ; } if ( ev instanceof NullSetEventHandler ) { addNullSetEventHandler ( ( NullSetEventHandler ) ev ) ; found = true ; } if ( ev instanceof MethodExceptionEventHandler ) { addMethodExceptionHandler ( ( MethodExceptionEventHandler ) ev ) ; found = true ; } if ( ev instanceof IncludeEventHandler ) { addIncludeEventHandler ( ( IncludeEventHandler ) ev ) ; found = true ; } if ( ev instanceof InvalidReferenceEventHandler ) { addInvalidReferenceEventHandler ( ( InvalidReferenceEventHandler ) ev ) ; found = true ; } return found ; } public void addReferenceInsertionEventHandler ( ReferenceInsertionEventHandler ev ) { referenceHandlers . add ( ev ) ; } public void addNullSetEventHandler ( NullSetEventHandler ev ) { nullSetHandlers . add ( ev ) ; } public void addMethodExceptionHandler ( MethodExceptionEventHandler ev ) { methodExceptionHandlers . add ( ev ) ; } public void addIncludeEventHandler ( IncludeEventHandler ev ) { includeHandlers . add ( ev ) ; } public void addInvalidReferenceEventHandler ( InvalidReferenceEventHandler ev ) { invalidReferenceHandlers . add ( ev ) ; } public boolean removeEventHandler ( EventHandler ev ) { if ( ev == null ) { return false ; } boolean found = false ; if ( ev instanceof ReferenceInsertionEventHandler ) return referenceHandlers . remove ( ev ) ; if ( ev instanceof NullSetEventHandler ) return nullSetHandlers . remove ( ev ) ; if ( ev instanceof MethodExceptionEventHandler ) return methodExceptionHandlers . remove ( ev ) ; if ( ev instanceof IncludeEventHandler ) return includeHandlers . remove ( ev ) ; if ( ev instanceof InvalidReferenceEventHandler ) return invalidReferenceHandlers . remove ( ev ) ; return found ; } public Iterator getReferenceInsertionEventHandlers ( ) { return referenceHandlers . iterator ( ) ; } public Iterator getNullSetEventHandlers ( ) { return nullSetHandlers . iterator ( ) ; } public Iterator getMethodExceptionEventHandlers ( ) { return methodExceptionHandlers . iterator ( ) ; } public Iterator getIncludeEventHandlers ( ) { return includeHandlers . iterator ( ) ; } public Iterator getInvalidReferenceEventHandlers ( ) { return invalidReferenceHandlers . iterator ( ) ; } public final boolean attachToContext ( Context context ) { if ( context instanceof InternalEventContext ) { InternalEventContext iec = ( InternalEventContext ) context ; iec . attachEventCartridge ( this ) ; return true ; } else { return false ; } } public void initialize ( RuntimeServices rs ) throws Exception { for ( Iterator i = referenceHandlers . iterator ( ) ; i . hasNext ( ) ; ) { EventHandler eh = ( EventHandler ) i . next ( ) ; if ( ( eh instanceof RuntimeServicesAware ) && ! initializedHandlers . contains ( eh ) ) { ( ( RuntimeServicesAware ) eh ) . setRuntimeServices ( rs ) ; initializedHandlers . add ( eh ) ; } } for ( Iterator i = nullSetHandlers . iterator ( ) ; i . hasNext ( ) ; ) { EventHandler eh = ( EventHandler ) i . next ( ) ; if ( ( eh instanceof RuntimeServicesAware ) && ! initializedHandlers . contains ( eh ) ) { ( ( RuntimeServicesAware ) eh ) . setRuntimeServices ( rs ) ; initializedHandlers . add ( eh ) ; } } for ( Iterator i = methodExceptionHandlers . iterator ( ) ; i . hasNext ( ) ; ) { EventHandler eh = ( EventHandler ) i . next ( ) ; if ( ( eh instanceof RuntimeServicesAware ) && ! initializedHandlers . contains ( eh ) ) { ( ( RuntimeServicesAware ) eh ) . setRuntimeServices ( rs ) ; initializedHandlers . add ( eh ) ; } } for ( Iterator i = includeHandlers . iterator ( ) ; i . hasNext ( ) ; ) { EventHandler eh = ( EventHandler ) i . next ( ) ; if ( ( eh instanceof RuntimeServicesAware ) && ! initializedHandlers . contains ( eh ) ) { ( ( RuntimeServicesAware ) eh ) . setRuntimeServices ( rs ) ; initializedHandlers . add ( eh ) ; } } for ( Iterator i = invalidReferenceHandlers . iterator ( ) ; i . hasNext ( ) ; ) { EventHandler eh = ( EventHandler ) i . next ( ) ; if ( ( eh instanceof RuntimeServicesAware ) && ! initializedHandlers . contains ( eh ) ) { ( ( RuntimeServicesAware ) eh ) . setRuntimeServices ( rs ) ; initializedHandlers . add ( eh ) ; } } } } 	1
package org . apache . velocity . runtime . exception ; import org . apache . velocity . runtime . parser . node . Node ; public class NodeException extends Exception { public NodeException ( String exceptionMessage , Node node ) { super ( exceptionMessage + ": " + node . literal ( ) + " [line " + node . getLine ( ) + ",column " + node . getColumn ( ) + "]" ) ; } } 	0
package org . apache . velocity . context ; public interface Context { Object put ( String key , Object value ) ; Object get ( String key ) ; boolean containsKey ( Object key ) ; Object [ ] getKeys ( ) ; Object remove ( Object key ) ; } 	1
package org . apache . velocity . test ; import java . io . BufferedWriter ; import java . io . FileOutputStream ; import java . io . OutputStreamWriter ; import java . io . StringWriter ; import java . util . Vector ; import org . apache . velocity . VelocityContext ; import org . apache . velocity . Template ; import org . apache . velocity . app . Velocity ; import org . apache . velocity . test . provider . TestProvider ; import org . apache . velocity . util . StringUtils ; import org . apache . velocity . app . Velocity ; import junit . framework . TestCase ; public class VelocityAppTestCase extends BaseTestCase implements TemplateTestBase { private StringWriter compare1 = new StringWriter ( ) ; private String input1 = "My name is $name -> $Floog" ; private String result1 = "My name is jason -> floogie woogie" ; public VelocityAppTestCase ( ) { super ( "VelocityAppTestCase" ) ; try { Velocity . setProperty ( Velocity . FILE_RESOURCE_LOADER_PATH , FILE_RESOURCE_LOADER_PATH ) ; Velocity . init ( ) ; } catch ( Exception e ) { System . err . println ( "Cannot setup VelocityAppTestCase!" ) ; e . printStackTrace ( ) ; System . exit ( 1 ) ; } } public static junit . framework . Test suite ( ) { return new VelocityAppTestCase ( ) ; } public void runTest ( ) { VelocityContext context = new VelocityContext ( ) ; context . put ( "name" , "jason" ) ; context . put ( "Floog" , "floogie woogie" ) ; try { Velocity . evaluate ( context , compare1 , "evaltest" , input1 ) ; if ( ! result1 . equals ( compare1 . toString ( ) ) ) { fail ( "Output incorrect." ) ; } } catch ( Exception e ) { fail ( e . getMessage ( ) ) ; } } } 	0
package org . apache . velocity . util . introspection ; import org . apache . velocity . util . ArrayIterator ; import org . apache . velocity . util . EnumerationIterator ; import org . apache . velocity . runtime . RuntimeServices ; import org . apache . velocity . runtime . RuntimeLogger ; import org . apache . velocity . runtime . parser . node . AbstractExecutor ; import org . apache . velocity . runtime . parser . node . PropertyExecutor ; import org . apache . velocity . runtime . parser . node . GetExecutor ; import org . apache . velocity . runtime . parser . node . BooleanPropertyExecutor ; import java . lang . reflect . Method ; import java . util . Iterator ; import java . util . Collection ; import java . util . Map ; import java . util . Enumeration ; import java . util . ArrayList ; public class UberspectImpl implements Uberspect , UberspectLoggable { private RuntimeLogger rlog ; private static Introspector introspector ; public void init ( ) throws Exception { } public void setRuntimeLogger ( RuntimeLogger runtimeLogger ) { rlog = runtimeLogger ; introspector = new Introspector ( rlog ) ; } public Iterator getIterator ( Object obj , Info i ) throws Exception { if ( obj . getClass ( ) . isArray ( ) ) { return new ArrayIterator ( obj ) ; } else if ( obj instanceof Collection ) { return ( ( Collection ) obj ) . iterator ( ) ; } else if ( obj instanceof Map ) { return ( ( Map ) obj ) . values ( ) . iterator ( ) ; } else if ( obj instanceof Iterator ) { rlog . warn ( "Warning! The iterative " + " is an Iterator in the #foreach() loop at [" + i . getLine ( ) + "," + i . getColumn ( ) + "]" + " in template " + i . getTemplateName ( ) + ". Because it's not resetable," + " if used in more than once, this may lead to" + " unexpected results." ) ; return ( ( Iterator ) obj ) ; } else if ( obj instanceof Enumeration ) { rlog . warn ( "Warning! The iterative " + " is an Enumeration in the #foreach() loop at [" + i . getLine ( ) + "," + i . getColumn ( ) + "]" + " in template " + i . getTemplateName ( ) + ". Because it's not resetable," + " if used in more than once, this may lead to" + " unexpected results." ) ; return new EnumerationIterator ( ( Enumeration ) obj ) ; } rlog . warn ( "Could not determine type of iterator in " + "#foreach loop " + " at [" + i . getLine ( ) + "," + i . getColumn ( ) + "]" + " in template " + i . getTemplateName ( ) ) ; return null ; } public VelMethod getMethod ( Object obj , String methodName , Object [ ] args , Info i ) throws Exception { if ( obj == null ) return null ; Method m = introspector . getMethod ( obj . getClass ( ) , methodName , args ) ; return ( m != null ) ? new VelMethodImpl ( m ) : null ; } public VelPropertyGet getPropertyGet ( Object obj , String identifier , Info i ) throws Exception { AbstractExecutor executor ; Class claz = obj . getClass ( ) ; executor = new PropertyExecutor ( rlog , introspector , claz , identifier ) ; if ( executor . isAlive ( ) == false ) { executor = new GetExecutor ( rlog , introspector , claz , identifier ) ; } if ( executor . isAlive ( ) == false ) { executor = new BooleanPropertyExecutor ( rlog , introspector , claz , identifier ) ; } return ( executor != null ) ? new VelGetterImpl ( executor ) : null ; } public VelPropertySet getPropertySet ( Object obj , String identifier , Object arg , Info i ) throws Exception { Class claz = obj . getClass ( ) ; VelPropertySet vs = null ; VelMethod vm = null ; try { Object [ ] params = { arg } ; try { vm = getMethod ( obj , "set" + identifier , params , i ) ; if ( vm == null ) { throw new NoSuchMethodException ( ) ; } } catch ( NoSuchMethodException nsme2 ) { StringBuffer sb = new StringBuffer ( "set" ) ; sb . append ( identifier ) ; if ( Character . isLowerCase ( sb . charAt ( 3 ) ) ) { sb . setCharAt ( 3 , Character . toUpperCase ( sb . charAt ( 3 ) ) ) ; } else { sb . setCharAt ( 3 , Character . toLowerCase ( sb . charAt ( 3 ) ) ) ; } vm = getMethod ( obj , sb . toString ( ) , params , i ) ; if ( vm == null ) { throw new NoSuchMethodException ( ) ; } } } catch ( NoSuchMethodException nsme ) { if ( Map . class . isAssignableFrom ( claz ) ) { Object [ ] params = { new Object ( ) , new Object ( ) } ; vm = getMethod ( obj , "put" , params , i ) ; if ( vm != null ) return new VelSetterImpl ( vm , identifier ) ; } } return ( vm != null ) ? new VelSetterImpl ( vm ) : null ; } public class VelMethodImpl implements VelMethod { Method method = null ; public VelMethodImpl ( Method m ) { method = m ; } private VelMethodImpl ( ) { } public Object invoke ( Object o , Object [ ] params ) throws Exception { return method . invoke ( o , params ) ; } public boolean isCacheable ( ) { return true ; } public String getMethodName ( ) { return method . getName ( ) ; } public Class getReturnType ( ) { return method . getReturnType ( ) ; } } public class VelGetterImpl implements VelPropertyGet { AbstractExecutor ae = null ; public VelGetterImpl ( AbstractExecutor exec ) { ae = exec ; } private VelGetterImpl ( ) { } public Object invoke ( Object o ) throws Exception { return ae . execute ( o ) ; } public boolean isCacheable ( ) { return true ; } public String getMethodName ( ) { return ae . getMethod ( ) . getName ( ) ; } } public class VelSetterImpl implements VelPropertySet { VelMethod vm = null ; String putKey = null ; public VelSetterImpl ( VelMethod velmethod ) { this . vm = velmethod ; } public VelSetterImpl ( VelMethod velmethod , String key ) { this . vm = velmethod ; putKey = key ; } private VelSetterImpl ( ) { } public Object invoke ( Object o , Object value ) throws Exception { ArrayList al = new ArrayList ( ) ; if ( putKey != null ) { al . add ( putKey ) ; al . add ( value ) ; } else { al . add ( value ) ; } return vm . invoke ( o , al . toArray ( ) ) ; } public boolean isCacheable ( ) { return true ; } public String getMethodName ( ) { return vm . getMethodName ( ) ; } } } 	1
package org . apache . velocity . test ; import java . io . StringWriter ; import junit . framework . TestCase ; import org . apache . velocity . app . Velocity ; import org . apache . velocity . VelocityContext ; import org . apache . velocity . runtime . log . LogSystem ; import org . apache . velocity . exception . ParseErrorException ; import org . apache . velocity . exception . MethodInvocationException ; import org . apache . velocity . app . event . EventCartridge ; import org . apache . velocity . app . event . ReferenceInsertionEventHandler ; import org . apache . velocity . app . event . MethodExceptionEventHandler ; import org . apache . velocity . app . event . NullSetEventHandler ; import org . apache . velocity . runtime . RuntimeServices ; public class EventHandlingTestCase extends TestCase implements ReferenceInsertionEventHandler , NullSetEventHandler , MethodExceptionEventHandler , LogSystem { private String logString = null ; private boolean exceptionSwitch = true ; private static String NO_REFERENCE_VALUE = "<no reference value>" ; private static String REFERENCE_VALUE = "<reference value>" ; public EventHandlingTestCase ( ) { super ( "EventHandlingTestCase" ) ; try { Velocity . setProperty ( Velocity . RUNTIME_LOG_LOGSYSTEM , this ) ; Velocity . init ( ) ; } catch ( Exception e ) { System . err . println ( "Cannot setup event handling test : " + e ) ; System . exit ( 1 ) ; } } public void init ( RuntimeServices rs ) { } public static junit . framework . Test suite ( ) { return new EventHandlingTestCase ( ) ; } public void runTest ( ) { VelocityContext inner = new VelocityContext ( ) ; EventCartridge ec = new EventCartridge ( ) ; ec . addEventHandler ( this ) ; ec . attachToContext ( inner ) ; VelocityContext context = new VelocityContext ( inner ) ; context . put ( "name" , "Velocity" ) ; try { String s = "$name" ; StringWriter w = new StringWriter ( ) ; Velocity . evaluate ( context , w , "mystring" , s ) ; if ( ! w . toString ( ) . equals ( REFERENCE_VALUE ) ) { fail ( "Reference insertion test 1" ) ; } s = "$floobie" ; w = new StringWriter ( ) ; Velocity . evaluate ( context , w , "mystring" , s ) ; if ( ! w . toString ( ) . equals ( NO_REFERENCE_VALUE ) ) { fail ( "Reference insertion test 2" ) ; } s = "#set($settest = $NotAReference)" ; w = new StringWriter ( ) ; logString = null ; Velocity . evaluate ( context , w , "mystring" , s ) ; if ( logString != null ) { fail ( "NullSetEventHandler test 1" ) ; } s = "#set($logthis = $NotAReference)" ; w = new StringWriter ( ) ; logString = null ; Velocity . evaluate ( context , w , "mystring" , s ) ; if ( logString == null ) { fail ( "NullSetEventHandler test 1" ) ; } exceptionSwitch = true ; context . put ( "this" , this ) ; s = " $this.throwException()" ; w = new StringWriter ( ) ; try { Velocity . evaluate ( context , w , "mystring" , s ) ; } catch ( MethodInvocationException mee ) { fail ( "MethodExceptionEvent test 1" ) ; } catch ( Exception e ) { fail ( "MethodExceptionEvent test 1" ) ; } exceptionSwitch = false ; s = " $this.throwException()" ; w = new StringWriter ( ) ; try { Velocity . evaluate ( context , w , "mystring" , s ) ; fail ( "MethodExceptionEvent test 2" ) ; } catch ( MethodInvocationException mee ) { } catch ( Exception e ) { fail ( "MethodExceptionEvent test 2" ) ; } } catch ( ParseErrorException pee ) { fail ( "ParseErrorException" + pee ) ; } catch ( MethodInvocationException mee ) { fail ( "MethodInvocationException" + mee ) ; } catch ( Exception e ) { fail ( "Exception" + e ) ; } } public void throwException ( ) throws Exception { throw new Exception ( "Hello from throwException()" ) ; } public Object referenceInsert ( String reference , Object value ) { String s = null ; if ( value != null ) { s = REFERENCE_VALUE ; } else { if ( reference . equals ( "$floobie" ) ) { s = NO_REFERENCE_VALUE ; } } return s ; } public boolean shouldLogOnNullSet ( String lhs , String rhs ) { if ( lhs . equals ( "$settest" ) ) return false ; return true ; } public Object methodException ( Class claz , String method , Exception e ) throws Exception { if ( exceptionSwitch && method . equals ( "throwException" ) ) { return "handler" ; } throw e ; } public void logVelocityMessage ( int level , String message ) { logString = message ; } } 	0
package org . apache . velocity . runtime . parser . node ; import org . apache . velocity . runtime . parser . * ; public class ASTIncludeStatement extends SimpleNode { public ASTIncludeStatement ( int id ) { super ( id ) ; } public ASTIncludeStatement ( Parser p , int id ) { super ( p , id ) ; } public Object jjtAccept ( ParserVisitor visitor , Object data ) { return visitor . visit ( this , data ) ; } } 	1
package org . apache . velocity . runtime . parser . node ; public interface ParserVisitor { public Object visit ( SimpleNode node , Object data ) ; public Object visit ( ASTprocess node , Object data ) ; public Object visit ( ASTComment node , Object data ) ; public Object visit ( ASTNumberLiteral node , Object data ) ; public Object visit ( ASTStringLiteral node , Object data ) ; public Object visit ( ASTIdentifier node , Object data ) ; public Object visit ( ASTWord node , Object data ) ; public Object visit ( ASTDirective node , Object data ) ; public Object visit ( ASTBlock node , Object data ) ; public Object visit ( ASTObjectArray node , Object data ) ; public Object visit ( ASTMethod node , Object data ) ; public Object visit ( ASTReference node , Object data ) ; public Object visit ( ASTTrue node , Object data ) ; public Object visit ( ASTFalse node , Object data ) ; public Object visit ( ASTText node , Object data ) ; public Object visit ( ASTIfStatement node , Object data ) ; public Object visit ( ASTElseStatement node , Object data ) ; public Object visit ( ASTElseIfStatement node , Object data ) ; public Object visit ( ASTSetDirective node , Object data ) ; public Object visit ( ASTExpression node , Object data ) ; public Object visit ( ASTAssignment node , Object data ) ; public Object visit ( ASTOrNode node , Object data ) ; public Object visit ( ASTAndNode node , Object data ) ; public Object visit ( ASTEQNode node , Object data ) ; public Object visit ( ASTNENode node , Object data ) ; public Object visit ( ASTLTNode node , Object data ) ; public Object visit ( ASTGTNode node , Object data ) ; public Object visit ( ASTLENode node , Object data ) ; public Object visit ( ASTGENode node , Object data ) ; public Object visit ( ASTAddNode node , Object data ) ; public Object visit ( ASTSubtractNode node , Object data ) ; public Object visit ( ASTMulNode node , Object data ) ; public Object visit ( ASTDivNode node , Object data ) ; public Object visit ( ASTModNode node , Object data ) ; public Object visit ( ASTNotNode node , Object data ) ; } 	0
package org . apache . velocity . util . introspection ; import java . util . Map ; import java . util . Set ; import java . util . HashMap ; import java . util . HashSet ; import java . lang . reflect . Method ; public class IntrospectorBase { protected Map classMethodMaps = new HashMap ( ) ; protected Set cachedClassNames = new HashSet ( ) ; public Method getMethod ( Class c , String name , Object [ ] params ) throws Exception { if ( c == null ) { throw new Exception ( "Introspector.getMethod(): Class method key was null: " + name ) ; } ClassMap classMap = null ; synchronized ( classMethodMaps ) { classMap = ( ClassMap ) classMethodMaps . get ( c ) ; if ( classMap == null ) { if ( cachedClassNames . contains ( c . getName ( ) ) ) { clearCache ( ) ; } classMap = createClassMap ( c ) ; } } return classMap . findMethod ( name , params ) ; } protected ClassMap createClassMap ( Class c ) { ClassMap classMap = new ClassMap ( c ) ; classMethodMaps . put ( c , classMap ) ; cachedClassNames . add ( c . getName ( ) ) ; return classMap ; } protected void clearCache ( ) { classMethodMaps . clear ( ) ; cachedClassNames = new HashSet ( ) ; } } 	1
package org . apache . velocity . test ; import java . io . BufferedWriter ; import java . io . FileOutputStream ; import java . io . OutputStreamWriter ; import java . io . Writer ; import java . util . Properties ; import org . apache . velocity . VelocityContext ; import org . apache . velocity . Template ; import org . apache . velocity . app . Velocity ; import org . apache . velocity . runtime . RuntimeSingleton ; import org . apache . velocity . test . provider . TestProvider ; import org . apache . velocity . util . StringUtils ; import org . apache . velocity . runtime . VelocimacroFactory ; import junit . framework . TestCase ; public class InlineScopeVMTestCase extends BaseTestCase implements TemplateTestBase { private static final String TEST_CASE_NAME = "InlineScopeVMTestCase" ; InlineScopeVMTestCase ( ) { super ( TEST_CASE_NAME ) ; try { Velocity . setProperty ( Velocity . VM_PERM_ALLOW_INLINE_REPLACE_GLOBAL , "true" ) ; Velocity . setProperty ( Velocity . VM_PERM_INLINE_LOCAL , "true" ) ; Velocity . setProperty ( Velocity . FILE_RESOURCE_LOADER_PATH , FILE_RESOURCE_LOADER_PATH ) ; Velocity . init ( ) ; } catch ( Exception e ) { System . err . println ( "Cannot setup " + TEST_CASE_NAME ) ; System . exit ( 1 ) ; } } public static junit . framework . Test suite ( ) { return new InlineScopeVMTestCase ( ) ; } public void runTest ( ) { try { assureResultsDirectoryExists ( RESULT_DIR ) ; Template template2 = RuntimeSingleton . getTemplate ( getFileName ( null , "vm_test2" , TMPL_FILE_EXT ) ) ; Template template1 = RuntimeSingleton . getTemplate ( getFileName ( null , "vm_test1" , TMPL_FILE_EXT ) ) ; FileOutputStream fos1 = new FileOutputStream ( getFileName ( RESULT_DIR , "vm_test1" , RESULT_FILE_EXT ) ) ; FileOutputStream fos2 = new FileOutputStream ( getFileName ( RESULT_DIR , "vm_test2" , RESULT_FILE_EXT ) ) ; Writer writer1 = new BufferedWriter ( new OutputStreamWriter ( fos1 ) ) ; Writer writer2 = new BufferedWriter ( new OutputStreamWriter ( fos2 ) ) ; VelocityContext context = new VelocityContext ( ) ; template1 . merge ( context , writer1 ) ; writer1 . flush ( ) ; writer1 . close ( ) ; template2 . merge ( context , writer2 ) ; writer2 . flush ( ) ; writer2 . close ( ) ; if ( ! isMatch ( RESULT_DIR , COMPARE_DIR , "vm_test1" , RESULT_FILE_EXT , CMP_FILE_EXT ) || ! isMatch ( RESULT_DIR , COMPARE_DIR , "vm_test2" , RESULT_FILE_EXT , CMP_FILE_EXT ) ) { fail ( "Output incorrect." ) ; } } catch ( Exception e ) { fail ( e . getMessage ( ) ) ; } } } 	0
package org . apache . velocity . runtime . parser . node ; import java . io . Writer ; import java . io . IOException ; import org . apache . velocity . context . InternalContextAdapter ; import org . apache . velocity . runtime . parser . * ; import org . apache . velocity . exception . MethodInvocationException ; import org . apache . velocity . exception . ParseErrorException ; import org . apache . velocity . exception . ResourceNotFoundException ; public class ASTIfStatement extends SimpleNode { public ASTIfStatement ( int id ) { super ( id ) ; } public ASTIfStatement ( Parser p , int id ) { super ( p , id ) ; } public Object jjtAccept ( ParserVisitor visitor , Object data ) { return visitor . visit ( this , data ) ; } public boolean render ( InternalContextAdapter context , Writer writer ) throws IOException , MethodInvocationException , ResourceNotFoundException , ParseErrorException { if ( jjtGetChild ( 0 ) . evaluate ( context ) ) { jjtGetChild ( 1 ) . render ( context , writer ) ; return true ; } int totalNodes = jjtGetNumChildren ( ) ; for ( int i = 2 ; i < totalNodes ; i ++ ) { if ( jjtGetChild ( i ) . evaluate ( context ) ) { jjtGetChild ( i ) . render ( context , writer ) ; return true ; } } return true ; } public void process ( InternalContextAdapter context , ParserVisitor visitor ) { } } 	1
package org . apache . velocity . runtime . parser ; import java . io . * ; import java . util . * ; import org . apache . velocity . runtime . RuntimeServices ; import org . apache . velocity . runtime . parser . node . * ; import org . apache . velocity . runtime . directive . Directive ; import org . apache . velocity . runtime . directive . Macro ; import org . apache . velocity . runtime . directive . MacroParseException ; import org . apache . velocity . util . StringUtils ; public class ParserTokenManager implements ParserConstants { private int fileDepth = 0 ; private int lparen = 0 ; private int rparen = 0 ; Stack stateStack = new Stack ( ) ; public boolean debugPrint = false ; private boolean inReference ; public boolean inDirective ; private boolean inComment ; public boolean inSet ; public boolean stateStackPop ( ) { Hashtable h ; try { h = ( Hashtable ) stateStack . pop ( ) ; } catch ( EmptyStackException e ) { lparen = 0 ; SwitchTo ( DEFAULT ) ; return false ; } if ( debugPrint ) System . out . println ( " stack pop (" + stateStack . size ( ) + ") : lparen=" + ( ( Integer ) h . get ( "lparen" ) ) . intValue ( ) + " newstate=" + ( ( Integer ) h . get ( "lexstate" ) ) . intValue ( ) ) ; lparen = ( ( Integer ) h . get ( "lparen" ) ) . intValue ( ) ; rparen = ( ( Integer ) h . get ( "rparen" ) ) . intValue ( ) ; SwitchTo ( ( ( Integer ) h . get ( "lexstate" ) ) . intValue ( ) ) ; return true ; } public boolean stateStackPush ( ) { if ( debugPrint ) System . out . println ( " (" + stateStack . size ( ) + ") pushing cur state : " + curLexState ) ; Hashtable h = new Hashtable ( ) ; h . put ( "lexstate" , new Integer ( curLexState ) ) ; h . put ( "lparen" , new Integer ( lparen ) ) ; h . put ( "rparen" , new Integer ( rparen ) ) ; lparen = 0 ; stateStack . push ( h ) ; return true ; } public void clearStateVars ( ) { stateStack . clear ( ) ; lparen = 0 ; rparen = 0 ; inReference = false ; inDirective = false ; inComment = false ; inSet = false ; return ; } private void RPARENHandler ( ) { boolean closed = false ; if ( inComment ) closed = true ; while ( ! closed ) { if ( lparen > 0 ) { if ( lparen == rparen + 1 ) { stateStackPop ( ) ; } else { rparen ++ ; } closed = true ; } else { if ( ! stateStackPop ( ) ) break ; } } } public java . io . PrintStream debugStream = System . out ; public void setDebugStream ( java . io . PrintStream ds ) { debugStream = ds ; } private final int jjStopStringLiteralDfa_0 ( int pos , long active0 ) { switch ( pos ) { case 0 : if ( ( active0 & 0x6000000L ) != 0L ) { jjmatchedKind = 52 ; return 33 ; } if ( ( active0 & 0x10000000L ) != 0L ) return 31 ; if ( ( active0 & 0xd000L ) != 0L ) return 7 ; return - 1 ; case 1 : if ( ( active0 & 0x6000000L ) != 0L ) { jjmatchedKind = 52 ; jjmatchedPos = 1 ; return 33 ; } if ( ( active0 & 0x4000L ) != 0L ) return 5 ; return - 1 ; case 2 : if ( ( active0 & 0x6000000L ) != 0L ) { jjmatchedKind = 52 ; jjmatchedPos = 2 ; return 33 ; } return - 1 ; case 3 : if ( ( active0 & 0x4000000L ) != 0L ) { jjmatchedKind = 52 ; jjmatchedPos = 3 ; return 33 ; } if ( ( active0 & 0x2000000L ) != 0L ) return 33 ; return - 1 ; default : return - 1 ; } } private final int jjStartNfa_0 ( int pos , long active0 ) { return jjMoveNfa_0 ( jjStopStringLiteralDfa_0 ( pos , active0 ) , pos + 1 ) ; } private final int jjStopAtPos ( int pos , int kind ) { jjmatchedKind = kind ; jjmatchedPos = pos ; return pos + 1 ; } private final int jjStartNfaWithStates_0 ( int pos , int kind , int state ) { jjmatchedKind = kind ; jjmatchedPos = pos ; try { curChar = input_stream . readChar ( ) ; } catch ( java . io . IOException e ) { return pos + 1 ; } return jjMoveNfa_0 ( state , pos + 1 ) ; } private final int jjMoveStringLiteralDfa0_0 ( ) { switch ( curChar ) { case 33 : jjmatchedKind = 41 ; return jjMoveStringLiteralDfa1_0 ( 0x10000000000L ) ; case 35 : jjmatchedKind = 15 ; return jjMoveStringLiteralDfa1_0 ( 0x5000L ) ; case 37 : return jjStopAtPos ( 0 , 32 ) ; case 38 : return jjMoveStringLiteralDfa1_0 ( 0x200000000L ) ; case 40 : return jjStopAtPos ( 0 , 5 ) ; case 42 : return jjStopAtPos ( 0 , 30 ) ; case 43 : return jjStopAtPos ( 0 , 29 ) ; case 44 : return jjStopAtPos ( 0 , 3 ) ; case 45 : return jjStartNfaWithStates_0 ( 0 , 28 , 31 ) ; case 46 : return jjMoveStringLiteralDfa1_0 ( 0x10L ) ; case 47 : return jjStopAtPos ( 0 , 31 ) ; case 60 : jjmatchedKind = 35 ; return jjMoveStringLiteralDfa1_0 ( 0x1000000000L ) ; case 61 : jjmatchedKind = 42 ; return jjMoveStringLiteralDfa1_0 ( 0x8000000000L ) ; case 62 : jjmatchedKind = 37 ; return jjMoveStringLiteralDfa1_0 ( 0x4000000000L ) ; case 91 : return jjStopAtPos ( 0 , 1 ) ; case 93 : return jjStopAtPos ( 0 , 2 ) ; case 102 : return jjMoveStringLiteralDfa1_0 ( 0x4000000L ) ; case 116 : return jjMoveStringLiteralDfa1_0 ( 0x2000000L ) ; case 124 : return jjMoveStringLiteralDfa1_0 ( 0x400000000L ) ; default : return jjMoveNfa_0 ( 0 , 0 ) ; } } private final int jjMoveStringLiteralDfa1_0 ( long active0 ) { try { curChar = input_stream . readChar ( ) ; } catch ( java . io . IOException e ) { jjStopStringLiteralDfa_0 ( 0 , active0 ) ; return 1 ; } switch ( curChar ) { case 35 : if ( ( active0 & 0x1000L ) != 0L ) return jjStopAtPos ( 1 , 12 ) ; break ; case 38 : if ( ( active0 & 0x200000000L ) != 0L ) return jjStopAtPos ( 1 , 33 ) ; break ; case 42 : if ( ( active0 & 0x4000L ) != 0L ) return jjStartNfaWithStates_0 ( 1 , 14 , 5 ) ; break ; case 46 : if ( ( active0 & 0x10L ) != 0L ) return jjStopAtPos ( 1 , 4 ) ; break ; case 61 : if ( ( active0 & 0x1000000000L ) != 0L ) return jjStopAtPos ( 1 , 36 ) ; else if ( ( active0 & 0x4000000000L ) != 0L ) return jjStopAtPos ( 1 , 38 ) ; else if ( ( active0 & 0x8000000000L ) != 0L ) return jjStopAtPos ( 1 , 39 ) ; else if ( ( active0 & 0x10000000000L ) != 0L ) return jjStopAtPos ( 1 , 40 ) ; break ; case 97 : return jjMoveStringLiteralDfa2_0 ( active0 , 0x4000000L ) ; case 114 : return jjMoveStringLiteralDfa2_0 ( active0 , 0x2000000L ) ; case 124 : if ( ( active0 & 0x400000000L ) != 0L ) return jjStopAtPos ( 1 , 34 ) ; break ; default : break ; } return jjStartNfa_0 ( 0 , active0 ) ; } private final int jjMoveStringLiteralDfa2_0 ( long old0 , long active0 ) { if ( ( ( active0 &= old0 ) ) == 0L ) return jjStartNfa_0 ( 0 , old0 ) ; try { curChar = input_stream . readChar ( ) ; } catch ( java . io . IOException e ) { jjStopStringLiteralDfa_0 ( 1 , active0 ) ; return 2 ; } switch ( curChar ) { case 108 : return jjMoveStringLiteralDfa3_0 ( active0 , 0x4000000L ) ; case 117 : return jjMoveStringLiteralDfa3_0 ( active0 , 0x2000000L ) ; default : break ; } return jjStartNfa_0 ( 1 , active0 ) ; } private final int jjMoveStringLiteralDfa3_0 ( long old0 , long active0 ) { if ( ( ( active0 &= old0 ) ) == 0L ) return jjStartNfa_0 ( 1 , old0 ) ; try { curChar = input_stream . readChar ( ) ; } catch ( java . io . IOException e ) { jjStopStringLiteralDfa_0 ( 2 , active0 ) ; return 3 ; } switch ( curChar ) { case 101 : if ( ( active0 & 0x2000000L ) != 0L ) return jjStartNfaWithStates_0 ( 3 , 25 , 33 ) ; break ; case 115 : return jjMoveStringLiteralDfa4_0 ( active0 , 0x4000000L ) ; default : break ; } return jjStartNfa_0 ( 2 , active0 ) ; } private final int jjMoveStringLiteralDfa4_0 ( long old0 , long active0 ) { if ( ( ( active0 &= old0 ) ) == 0L ) return jjStartNfa_0 ( 2 , old0 ) ; try { curChar = input_stream . readChar ( ) ; } catch ( java . io . IOException e ) { jjStopStringLiteralDfa_0 ( 3 , active0 ) ; return 4 ; } switch ( curChar ) { case 101 : if ( ( active0 & 0x4000000L ) != 0L ) return jjStartNfaWithStates_0 ( 4 , 26 , 33 ) ; break ; default : break ; } return jjStartNfa_0 ( 3 , active0 ) ; } private final void jjCheckNAdd ( int state ) { if ( jjrounds [ state ] != jjround ) { jjstateSet [ jjnewStateCnt ++ ] = state ; jjrounds [ state ] = jjround ; } } private final void jjAddStates ( int start , int end ) { do { jjstateSet [ jjnewStateCnt ++ ] = jjnextStates [ start ] ; } while ( start ++ != end ) ; } private final void jjCheckNAddTwoStates ( int state1 , int state2 ) { jjCheckNAdd ( state1 ) ; jjCheckNAdd ( state2 ) ; } private final void jjCheckNAddStates ( int start , int end ) { do { jjCheckNAdd ( jjnextStates [ start ] ) ; } while ( start ++ != end ) ; } private final void jjCheckNAddStates ( int start ) { jjCheckNAdd ( jjnextStates [ start ] ) ; jjCheckNAdd ( jjnextStates [ start + 1 ] ) ; } static final long [ ] jjbitVec0 = { 0xfffffffffffffffeL , 0xffffffffffffffffL , 0xffffffffffffffffL , 0xffffffffffffffffL } ; static final long [ ] jjbitVec2 = { 0x0L , 0x0L , 0xffffffffffffffffL , 0xffffffffffffffffL } ; private final int jjMoveNfa_0 ( int startState , int curPos ) { int [ ] nextStates ; int startsAt = 0 ; jjnewStateCnt = 42 ; int i = 1 ; jjstateSet [ 0 ] = startState ; int j , kind = 0x7fffffff ; for ( ; ; ) { if ( ++ jjround == 0x7fffffff ) ReInitRounds ( ) ; if ( curChar < 64 ) { long l = 1L << curChar ; MatchLoop : do { switch ( jjstateSet [ -- i ] ) { case 0 : if ( ( 0x3ff000000000000L & l ) != 0L ) { if ( kind > 49 ) kind = 49 ; jjCheckNAdd ( 31 ) ; } else if ( ( 0x2400L & l ) != 0L ) { if ( kind > 27 ) kind = 27 ; } else if ( ( 0x100000200L & l ) != 0L ) { if ( kind > 23 ) kind = 23 ; jjCheckNAdd ( 9 ) ; } else if ( curChar == 36 ) { if ( kind > 10 ) kind = 10 ; jjCheckNAddTwoStates ( 39 , 40 ) ; } else if ( curChar == 45 ) jjCheckNAdd ( 31 ) ; else if ( curChar == 39 ) jjCheckNAddStates ( 0 , 2 ) ; else if ( curChar == 34 ) jjCheckNAddStates ( 3 , 5 ) ; else if ( curChar == 35 ) jjstateSet [ jjnewStateCnt ++ ] = 7 ; else if ( curChar == 41 ) { if ( kind > 6 ) kind = 6 ; jjCheckNAddStates ( 6 , 8 ) ; } if ( curChar == 13 ) jjstateSet [ jjnewStateCnt ++ ] = 28 ; break ; case 1 : if ( ( 0x100000200L & l ) != 0L ) jjCheckNAddStates ( 6 , 8 ) ; break ; case 2 : if ( ( 0x2400L & l ) != 0L && kind > 6 ) kind = 6 ; break ; case 3 : if ( curChar == 10 && kind > 6 ) kind = 6 ; break ; case 4 : if ( curChar == 13 ) jjstateSet [ jjnewStateCnt ++ ] = 3 ; break ; case 5 : if ( curChar == 42 ) jjstateSet [ jjnewStateCnt ++ ] = 6 ; break ; case 6 : if ( ( 0xfffffff7ffffffffL & l ) != 0L && kind > 13 ) kind = 13 ; break ; case 7 : if ( curChar == 42 ) jjstateSet [ jjnewStateCnt ++ ] = 5 ; break ; case 8 : if ( curChar == 35 ) jjstateSet [ jjnewStateCnt ++ ] = 7 ; break ; case 9 : if ( ( 0x100000200L & l ) == 0L ) break ; if ( kind > 23 ) kind = 23 ; jjCheckNAdd ( 9 ) ; break ; case 10 : if ( curChar == 34 ) jjCheckNAddStates ( 3 , 5 ) ; break ; case 11 : if ( ( 0xfffffffbffffdbffL & l ) != 0L ) jjCheckNAddStates ( 3 , 5 ) ; break ; case 12 : if ( curChar == 34 && kind > 24 ) kind = 24 ; break ; case 14 : if ( ( 0x8400000000L & l ) != 0L ) jjCheckNAddStates ( 3 , 5 ) ; break ; case 15 : if ( ( 0xff000000000000L & l ) != 0L ) jjCheckNAddStates ( 9 , 12 ) ; break ; case 16 : if ( ( 0xff000000000000L & l ) != 0L ) jjCheckNAddStates ( 3 , 5 ) ; break ; case 17 : if ( ( 0xf000000000000L & l ) != 0L ) jjstateSet [ jjnewStateCnt ++ ] = 18 ; break ; case 18 : if ( ( 0xff000000000000L & l ) != 0L ) jjCheckNAdd ( 16 ) ; break ; case 19 : if ( curChar == 32 ) jjAddStates ( 13 , 14 ) ; break ; case 20 : if ( curChar == 10 ) jjCheckNAddStates ( 3 , 5 ) ; break ; case 21 : if ( curChar == 39 ) jjCheckNAddStates ( 0 , 2 ) ; break ; case 22 : if ( ( 0xffffff7fffffdbffL & l ) != 0L ) jjCheckNAddStates ( 0 , 2 ) ; break ; case 24 : if ( curChar == 32 ) jjAddStates ( 15 , 16 ) ; break ; case 25 : if ( curChar == 10 ) jjCheckNAddStates ( 0 , 2 ) ; break ; case 26 : if ( curChar == 39 && kind > 24 ) kind = 24 ; break ; case 27 : if ( ( 0x2400L & l ) != 0L && kind > 27 ) kind = 27 ; break ; case 28 : if ( curChar == 10 && kind > 27 ) kind = 27 ; break ; case 29 : if ( curChar == 13 ) jjstateSet [ jjnewStateCnt ++ ] = 28 ; break ; case 30 : if ( curChar == 45 ) jjCheckNAdd ( 31 ) ; break ; case 31 : if ( ( 0x3ff000000000000L & l ) == 0L ) break ; if ( kind > 49 ) kind = 49 ; jjCheckNAdd ( 31 ) ; break ; case 33 : if ( ( 0x3ff000000000000L & l ) == 0L ) break ; if ( kind > 52 ) kind = 52 ; jjstateSet [ jjnewStateCnt ++ ] = 33 ; break ; case 36 : if ( curChar == 36 && kind > 10 ) kind = 10 ; break ; case 38 : if ( curChar == 36 ) jjCheckNAddTwoStates ( 39 , 40 ) ; break ; case 40 : if ( curChar == 33 && kind > 11 ) kind = 11 ; break ; case 41 : if ( curChar != 36 ) break ; if ( kind > 10 ) kind = 10 ; jjCheckNAddTwoStates ( 39 , 40 ) ; break ; default : break ; } } while ( i != startsAt ) ; } else if ( curChar < 128 ) { long l = 1L << ( curChar & 077 ) ; MatchLoop : do { switch ( jjstateSet [ -- i ] ) { case 0 : if ( ( 0x7fffffe87fffffeL & l ) != 0L ) { if ( kind > 52 ) kind = 52 ; jjCheckNAdd ( 33 ) ; } else if ( curChar == 92 ) jjCheckNAddStates ( 17 , 20 ) ; break ; case 6 : if ( kind > 13 ) kind = 13 ; break ; case 11 : if ( ( 0xffffffffefffffffL & l ) != 0L ) jjCheckNAddStates ( 3 , 5 ) ; break ; case 13 : if ( curChar == 92 ) jjAddStates ( 21 , 25 ) ; break ; case 14 : if ( ( 0x14404410000000L & l ) != 0L ) jjCheckNAddStates ( 3 , 5 ) ; break ; case 22 : jjAddStates ( 0 , 2 ) ; break ; case 23 : if ( curChar == 92 ) jjAddStates ( 15 , 16 ) ; break ; case 32 : case 33 : if ( ( 0x7fffffe87fffffeL & l ) == 0L ) break ; if ( kind > 52 ) kind = 52 ; jjCheckNAdd ( 33 ) ; break ; case 34 : if ( curChar == 92 ) jjCheckNAddStates ( 17 , 20 ) ; break ; case 35 : if ( curChar == 92 ) jjCheckNAddTwoStates ( 35 , 36 ) ; break ; case 37 : if ( curChar == 92 ) jjCheckNAddTwoStates ( 37 , 38 ) ; break ; case 39 : if ( curChar == 92 ) jjAddStates ( 26 , 27 ) ; break ; default : break ; } } while ( i != startsAt ) ; } else { int hiByte = ( int ) ( curChar > > 8 ) ; int i1 = hiByte > > 6 ; long l1 = 1L << ( hiByte & 077 ) ; int i2 = ( curChar & 0xff ) > > 6 ; long l2 = 1L << ( curChar & 077 ) ; MatchLoop : do { switch ( jjstateSet [ -- i ] ) { case 6 : if ( jjCanMove_0 ( hiByte , i1 , i2 , l1 , l2 ) && kind > 13 ) kind = 13 ; break ; case 11 : if ( jjCanMove_0 ( hiByte , i1 , i2 , l1 , l2 ) ) jjAddStates ( 3 , 5 ) ; break ; case 22 : if ( jjCanMove_0 ( hiByte , i1 , i2 , l1 , l2 ) ) jjAddStates ( 0 , 2 ) ; break ; default : break ; } } while ( i != startsAt ) ; } if ( kind != 0x7fffffff ) { jjmatchedKind = kind ; jjmatchedPos = curPos ; kind = 0x7fffffff ; } ++ curPos ; if ( ( i = jjnewStateCnt ) == ( startsAt = 42 - ( jjnewStateCnt = startsAt ) ) ) return curPos ; try { curChar = input_stream . readChar ( ) ; } catch ( java . io . IOException e ) { return curPos ; } } } private final int jjStopStringLiteralDfa_6 ( int pos , long active0 ) { switch ( pos ) { case 0 : if ( ( active0 & 0xd000L ) != 0L ) return 2 ; return - 1 ; default : return - 1 ; } } private final int jjStartNfa_6 ( int pos , long active0 ) { return jjMoveNfa_6 ( jjStopStringLiteralDfa_6 ( pos , active0 ) , pos + 1 ) ; } private final int jjStartNfaWithStates_6 ( int pos , int kind , int state ) { jjmatchedKind = kind ; jjmatchedPos = pos ; try { curChar = input_stream . readChar ( ) ; } catch ( java . io . IOException e ) { return pos + 1 ; } return jjMoveNfa_6 ( state , pos + 1 ) ; } private final int jjMoveStringLiteralDfa0_6 ( ) { switch ( curChar ) { case 35 : jjmatchedKind = 15 ; return jjMoveStringLiteralDfa1_6 ( 0x5000L ) ; case 42 : return jjMoveStringLiteralDfa1_6 ( 0x200000L ) ; default : return jjMoveNfa_6 ( 3 , 0 ) ; } } private final int jjMoveStringLiteralDfa1_6 ( long active0 ) { try { curChar = input_stream . readChar ( ) ; } catch ( java . io . IOException e ) { jjStopStringLiteralDfa_6 ( 0 , active0 ) ; return 1 ; } switch ( curChar ) { case 35 : if ( ( active0 & 0x1000L ) != 0L ) return jjStopAtPos ( 1 , 12 ) ; else if ( ( active0 & 0x200000L ) != 0L ) return jjStopAtPos ( 1 , 21 ) ; break ; case 42 : if ( ( active0 & 0x4000L ) != 0L ) return jjStartNfaWithStates_6 ( 1 , 14 , 0 ) ; break ; default : break ; } return jjStartNfa_6 ( 0 , active0 ) ; } private final int jjMoveNfa_6 ( int startState , int curPos ) { int [ ] nextStates ; int startsAt = 0 ; jjnewStateCnt = 12 ; int i = 1 ; jjstateSet [ 0 ] = startState ; int j , kind = 0x7fffffff ; for ( ; ; ) { if ( ++ jjround == 0x7fffffff ) ReInitRounds ( ) ; if ( curChar < 64 ) { long l = 1L << curChar ; MatchLoop : do { switch ( jjstateSet [ -- i ] ) { case 3 : if ( curChar == 36 ) { if ( kind > 10 ) kind = 10 ; jjCheckNAddTwoStates ( 9 , 10 ) ; } else if ( curChar == 35 ) jjstateSet [ jjnewStateCnt ++ ] = 2 ; break ; case 0 : if ( curChar == 42 ) jjstateSet [ jjnewStateCnt ++ ] = 1 ; break ; case 1 : if ( ( 0xfffffff7ffffffffL & l ) != 0L && kind > 13 ) kind = 13 ; break ; case 2 : if ( curChar == 42 ) jjstateSet [ jjnewStateCnt ++ ] = 0 ; break ; case 6 : if ( curChar == 36 && kind > 10 ) kind = 10 ; break ; case 8 : if ( curChar == 36 ) jjCheckNAddTwoStates ( 9 , 10 ) ; break ; case 10 : if ( curChar == 33 && kind > 11 ) kind = 11 ; break ; case 11 : if ( curChar != 36 ) break ; if ( kind > 10 ) kind = 10 ; jjCheckNAddTwoStates ( 9 , 10 ) ; break ; default : break ; } } while ( i != startsAt ) ; } else if ( curChar < 128 ) { long l = 1L << ( curChar & 077 ) ; MatchLoop : do { switch ( jjstateSet [ -- i ] ) { case 3 : if ( curChar == 92 ) jjCheckNAddStates ( 28 , 31 ) ; break ; case 1 : if ( kind > 13 ) kind = 13 ; break ; case 5 : if ( curChar == 92 ) jjCheckNAddTwoStates ( 5 , 6 ) ; break ; case 7 : if ( curChar == 92 ) jjCheckNAddTwoStates ( 7 , 8 ) ; break ; case 9 : if ( curChar == 92 ) jjAddStates ( 32 , 33 ) ; break ; default : break ; } } while ( i != startsAt ) ; } else { int hiByte = ( int ) ( curChar > > 8 ) ; int i1 = hiByte > > 6 ; long l1 = 1L << ( hiByte & 077 ) ; int i2 = ( curChar & 0xff ) > > 6 ; long l2 = 1L << ( curChar & 077 ) ; MatchLoop : do { switch ( jjstateSet [ -- i ] ) { case 1 : if ( jjCanMove_0 ( hiByte , i1 , i2 , l1 , l2 ) && kind > 13 ) kind = 13 ; break ; default : break ; } } while ( i != startsAt ) ; } if ( kind != 0x7fffffff ) { jjmatchedKind = kind ; jjmatchedPos = curPos ; kind = 0x7fffffff ; } ++ curPos ; if ( ( i = jjnewStateCnt ) == ( startsAt = 12 - ( jjnewStateCnt = startsAt ) ) ) return curPos ; try { curChar = input_stream . readChar ( ) ; } catch ( java . io . IOException e ) { return curPos ; } } } private final int jjStopStringLiteralDfa_4 ( int pos , long active0 ) { switch ( pos ) { case 0 : if ( ( active0 & 0xd000L ) != 0L ) return 2 ; if ( ( active0 & 0x200000000000L ) != 0L ) { jjmatchedKind = 52 ; return 22 ; } if ( ( active0 & 0x900000000000L ) != 0L ) { jjmatchedKind = 52 ; return 7 ; } return - 1 ; case 1 : if ( ( active0 & 0x4000L ) != 0L ) return 0 ; if ( ( active0 & 0x200000000000L ) != 0L ) { jjmatchedKind = 52 ; jjmatchedPos = 1 ; return 28 ; } if ( ( active0 & 0x800000000000L ) != 0L ) { jjmatchedKind = 52 ; jjmatchedPos = 1 ; return 7 ; } if ( ( active0 & 0x100000000000L ) != 0L ) return 7 ; return - 1 ; case 2 : if ( ( active0 & 0x200000000000L ) != 0L ) { jjmatchedKind = 52 ; jjmatchedPos = 2 ; return 23 ; } if ( ( active0 & 0x800000000000L ) != 0L ) { jjmatchedKind = 52 ; jjmatchedPos = 2 ; return 7 ; } return - 1 ; case 3 : if ( ( active0 & 0x800000000000L ) != 0L ) return 7 ; if ( ( active0 & 0x200000000000L ) != 0L ) { jjmatchedKind = 46 ; jjmatchedPos = 3 ; return 30 ; } return - 1 ; case 4 : if ( ( active0 & 0x200000000000L ) != 0L ) { jjmatchedKind = 52 ; jjmatchedPos = 4 ; return 7 ; } return - 1 ; default : return - 1 ; } } private final int jjStartNfa_4 ( int pos , long active0 ) { return jjMoveNfa_4 ( jjStopStringLiteralDfa_4 ( pos , active0 ) , pos + 1 ) ; } private final int jjStartNfaWithStates_4 ( int pos , int kind , int state ) { jjmatchedKind = kind ; jjmatchedPos = pos ; try { curChar = input_stream . readChar ( ) ; } catch ( java . io . IOException e ) { return pos + 1 ; } return jjMoveNfa_4 ( state , pos + 1 ) ; } private final int jjMoveStringLiteralDfa0_4 ( ) { switch ( curChar ) { case 35 : jjmatchedKind = 15 ; return jjMoveStringLiteralDfa1_4 ( 0x5000L ) ; case 101 : return jjMoveStringLiteralDfa1_4 ( 0x200000000000L ) ; case 105 : return jjMoveStringLiteralDfa1_4 ( 0x100000000000L ) ; case 115 : return jjMoveStringLiteralDfa1_4 ( 0x800000000000L ) ; default : return jjMoveNfa_4 ( 3 , 0 ) ; } } private final int jjMoveStringLiteralDfa1_4 ( long active0 ) { try { curChar = input_stream . readChar ( ) ; } catch ( java . io . IOException e ) { jjStopStringLiteralDfa_4 ( 0 , active0 ) ; return 1 ; } switch ( curChar ) { case 35 : if ( ( active0 & 0x1000L ) != 0L ) return jjStopAtPos ( 1 , 12 ) ; break ; case 42 : if ( ( active0 & 0x4000L ) != 0L ) return jjStartNfaWithStates_4 ( 1 , 14 , 0 ) ; break ; case 102 : if ( ( active0 & 0x100000000000L ) != 0L ) return jjStartNfaWithStates_4 ( 1 , 44 , 7 ) ; break ; case 108 : return jjMoveStringLiteralDfa2_4 ( active0 , 0x200000000000L ) ; case 116 : return jjMoveStringLiteralDfa2_4 ( active0 , 0x800000000000L ) ; default : break ; } return jjStartNfa_4 ( 0 , active0 ) ; } private final int jjMoveStringLiteralDfa2_4 ( long old0 , long active0 ) { if ( ( ( active0 &= old0 ) ) == 0L ) return jjStartNfa_4 ( 0 , old0 ) ; try { curChar = input_stream . readChar ( ) ; } catch ( java . io . IOException e ) { jjStopStringLiteralDfa_4 ( 1 , active0 ) ; return 2 ; } switch ( curChar ) { case 111 : return jjMoveStringLiteralDfa3_4 ( active0 , 0x800000000000L ) ; case 115 : return jjMoveStringLiteralDfa3_4 ( active0 , 0x200000000000L ) ; default : break ; } return jjStartNfa_4 ( 1 , active0 ) ; } private final int jjMoveStringLiteralDfa3_4 ( long old0 , long active0 ) { if ( ( ( active0 &= old0 ) ) == 0L ) return jjStartNfa_4 ( 1 , old0 ) ; try { curChar = input_stream . readChar ( ) ; } catch ( java . io . IOException e ) { jjStopStringLiteralDfa_4 ( 2 , active0 ) ; return 3 ; } switch ( curChar ) { case 101 : return jjMoveStringLiteralDfa4_4 ( active0 , 0x200000000000L ) ; case 112 : if ( ( active0 & 0x800000000000L ) != 0L ) return jjStartNfaWithStates_4 ( 3 , 47 , 7 ) ; break ; default : break ; } return jjStartNfa_4 ( 2 , active0 ) ; } private final int jjMoveStringLiteralDfa4_4 ( long old0 , long active0 ) { if ( ( ( active0 &= old0 ) ) == 0L ) return jjStartNfa_4 ( 2 , old0 ) ; try { curChar = input_stream . readChar ( ) ; } catch ( java . io . IOException e ) { jjStopStringLiteralDfa_4 ( 3 , active0 ) ; return 4 ; } switch ( curChar ) { case 105 : return jjMoveStringLiteralDfa5_4 ( active0 , 0x200000000000L ) ; default : break ; } return jjStartNfa_4 ( 3 , active0 ) ; } private final int jjMoveStringLiteralDfa5_4 ( long old0 , long active0 ) { if ( ( ( active0 &= old0 ) ) == 0L ) return jjStartNfa_4 ( 3 , old0 ) ; try { curChar = input_stream . readChar ( ) ; } catch ( java . io . IOException e ) { jjStopStringLiteralDfa_4 ( 4 , active0 ) ; return 5 ; } switch ( curChar ) { case 102 : if ( ( active0 & 0x200000000000L ) != 0L ) return jjStartNfaWithStates_4 ( 5 , 45 , 7 ) ; break ; default : break ; } return jjStartNfa_4 ( 4 , active0 ) ; } private final int jjMoveNfa_4 ( int startState , int curPos ) { int [ ] nextStates ; int startsAt = 0 ; jjnewStateCnt = 30 ; int i = 1 ; jjstateSet [ 0 ] = startState ; int j , kind = 0x7fffffff ; for ( ; ; ) { if ( ++ jjround == 0x7fffffff ) ReInitRounds ( ) ; if ( curChar < 64 ) { long l = 1L << curChar ; MatchLoop : do { switch ( jjstateSet [ -- i ] ) { case 3 : if ( ( 0x3ff000000000000L & l ) != 0L ) { if ( kind > 49 ) kind = 49 ; jjCheckNAdd ( 5 ) ; } else if ( curChar == 36 ) { if ( kind > 10 ) kind = 10 ; jjCheckNAddTwoStates ( 13 , 14 ) ; } else if ( curChar == 45 ) jjCheckNAdd ( 5 ) ; else if ( curChar == 35 ) jjstateSet [ jjnewStateCnt ++ ] = 2 ; break ; case 30 : if ( ( 0x3ff000000000000L & l ) != 0L ) { if ( kind > 52 ) kind = 52 ; jjCheckNAdd ( 7 ) ; } else if ( ( 0x2400L & l ) != 0L ) { if ( kind > 46 ) kind = 46 ; } else if ( ( 0x100000200L & l ) != 0L ) jjCheckNAddStates ( 34 , 36 ) ; if ( curChar == 13 ) jjstateSet [ jjnewStateCnt ++ ] = 26 ; break ; case 22 : case 7 : if ( ( 0x3ff000000000000L & l ) == 0L ) break ; if ( kind > 52 ) kind = 52 ; jjCheckNAdd ( 7 ) ; break ; case 28 : if ( ( 0x3ff000000000000L & l ) == 0L ) break ; if ( kind > 52 ) kind = 52 ; jjCheckNAdd ( 7 ) ; break ; case 23 : if ( ( 0x3ff000000000000L & l ) == 0L ) break ; if ( kind > 52 ) kind = 52 ; jjCheckNAdd ( 7 ) ; break ; case 0 : if ( curChar == 42 ) jjstateSet [ jjnewStateCnt ++ ] = 1 ; break ; case 1 : if ( ( 0xfffffff7ffffffffL & l ) != 0L && kind > 13 ) kind = 13 ; break ; case 2 : if ( curChar == 42 ) jjstateSet [ jjnewStateCnt ++ ] = 0 ; break ; case 4 : if ( curChar == 45 ) jjCheckNAdd ( 5 ) ; break ; case 5 : if ( ( 0x3ff000000000000L & l ) == 0L ) break ; if ( kind > 49 ) kind = 49 ; jjCheckNAdd ( 5 ) ; break ; case 10 : if ( curChar == 36 && kind > 10 ) kind = 10 ; break ; case 12 : if ( curChar == 36 ) jjCheckNAddTwoStates ( 13 , 14 ) ; break ; case 14 : if ( curChar == 33 && kind > 11 ) kind = 11 ; break ; case 15 : if ( curChar != 36 ) break ; if ( kind > 10 ) kind = 10 ; jjCheckNAddTwoStates ( 13 , 14 ) ; break ; case 18 : if ( ( 0x100000200L & l ) != 0L ) jjAddStates ( 37 , 39 ) ; break ; case 19 : if ( ( 0x2400L & l ) != 0L && kind > 43 ) kind = 43 ; break ; case 20 : if ( curChar == 10 && kind > 43 ) kind = 43 ; break ; case 21 : if ( curChar == 13 ) jjstateSet [ jjnewStateCnt ++ ] = 20 ; break ; case 24 : if ( ( 0x100000200L & l ) != 0L ) jjCheckNAddStates ( 34 , 36 ) ; break ; case 25 : if ( ( 0x2400L & l ) != 0L && kind > 46 ) kind = 46 ; break ; case 26 : if ( curChar == 10 && kind > 46 ) kind = 46 ; break ; case 27 : if ( curChar == 13 ) jjstateSet [ jjnewStateCnt ++ ] = 26 ; break ; default : break ; } } while ( i != startsAt ) ; } else if ( curChar < 128 ) { long l = 1L << ( curChar & 077 ) ; MatchLoop : do { switch ( jjstateSet [ -- i ] ) { case 3 : if ( ( 0x7fffffe87fffffeL & l ) != 0L ) { if ( kind > 52 ) kind = 52 ; jjCheckNAdd ( 7 ) ; } else if ( curChar == 92 ) jjCheckNAddStates ( 40 , 43 ) ; if ( curChar == 101 ) jjAddStates ( 44 , 45 ) ; break ; case 30 : case 7 : if ( ( 0x7fffffe87fffffeL & l ) == 0L ) break ; if ( kind > 52 ) kind = 52 ; jjCheckNAdd ( 7 ) ; break ; case 22 : if ( ( 0x7fffffe87fffffeL & l ) != 0L ) { if ( kind > 52 ) kind = 52 ; jjCheckNAdd ( 7 ) ; } if ( curChar == 108 ) jjstateSet [ jjnewStateCnt ++ ] = 28 ; else if ( curChar == 110 ) jjstateSet [ jjnewStateCnt ++ ] = 17 ; break ; case 28 : if ( ( 0x7fffffe87fffffeL & l ) != 0L ) { if ( kind > 52 ) kind = 52 ; jjCheckNAdd ( 7 ) ; } if ( curChar == 115 ) jjstateSet [ jjnewStateCnt ++ ] = 23 ; break ; case 23 : if ( ( 0x7fffffe87fffffeL & l ) != 0L ) { if ( kind > 52 ) kind = 52 ; jjCheckNAdd ( 7 ) ; } if ( curChar == 101 ) { if ( kind > 46 ) kind = 46 ; jjAddStates ( 34 , 36 ) ; } break ; case 1 : if ( kind > 13 ) kind = 13 ; break ; case 6 : if ( ( 0x7fffffe87fffffeL & l ) == 0L ) break ; if ( kind > 52 ) kind = 52 ; jjCheckNAdd ( 7 ) ; break ; case 8 : if ( curChar == 92 ) jjCheckNAddStates ( 40 , 43 ) ; break ; case 9 : if ( curChar == 92 ) jjCheckNAddTwoStates ( 9 , 10 ) ; break ; case 11 : if ( curChar == 92 ) jjCheckNAddTwoStates ( 11 , 12 ) ; break ; case 13 : if ( curChar == 92 ) jjAddStates ( 46 , 47 ) ; break ; case 16 : if ( curChar == 101 ) jjAddStates ( 44 , 45 ) ; break ; case 17 : if ( curChar != 100 ) break ; if ( kind > 43 ) kind = 43 ; jjAddStates ( 37 , 39 ) ; break ; case 29 : if ( curChar == 108 ) jjstateSet [ jjnewStateCnt ++ ] = 28 ; break ; default : break ; } } while ( i != startsAt ) ; } else { int hiByte = ( int ) ( curChar > > 8 ) ; int i1 = hiByte > > 6 ; long l1 = 1L << ( hiByte & 077 ) ; int i2 = ( curChar & 0xff ) > > 6 ; long l2 = 1L << ( curChar & 077 ) ; MatchLoop : do { switch ( jjstateSet [ -- i ] ) { case 1 : if ( jjCanMove_0 ( hiByte , i1 , i2 , l1 , l2 ) && kind > 13 ) kind = 13 ; break ; default : break ; } } while ( i != startsAt ) ; } if ( kind != 0x7fffffff ) { jjmatchedKind = kind ; jjmatchedPos = curPos ; kind = 0x7fffffff ; } ++ curPos ; if ( ( i = jjnewStateCnt ) == ( startsAt = 30 - ( jjnewStateCnt = startsAt ) ) ) return curPos ; try { curChar = input_stream . readChar ( ) ; } catch ( java . io . IOException e ) { return curPos ; } } } private final int jjStopStringLiteralDfa_3 ( int pos , long active0 ) { switch ( pos ) { case 0 : if ( ( active0 & 0x30000L ) != 0L ) return 9 ; if ( ( active0 & 0xd000L ) != 0L ) return 16 ; return - 1 ; default : return - 1 ; } } private final int jjStartNfa_3 ( int pos , long active0 ) { return jjMoveNfa_3 ( jjStopStringLiteralDfa_3 ( pos , active0 ) , pos + 1 ) ; } private final int jjStartNfaWithStates_3 ( int pos , int kind , int state ) { jjmatchedKind = kind ; jjmatchedPos = pos ; try { curChar = input_stream . readChar ( ) ; } catch ( java . io . IOException e ) { return pos + 1 ; } return jjMoveNfa_3 ( state , pos + 1 ) ; } private final int jjMoveStringLiteralDfa0_3 ( ) { switch ( curChar ) { case 35 : jjmatchedKind = 15 ; return jjMoveStringLiteralDfa1_3 ( 0x5000L ) ; case 92 : jjmatchedKind = 17 ; return jjMoveStringLiteralDfa1_3 ( 0x10000L ) ; default : return jjMoveNfa_3 ( 13 , 0 ) ; } } private final int jjMoveStringLiteralDfa1_3 ( long active0 ) { try { curChar = input_stream . readChar ( ) ; } catch ( java . io . IOException e ) { jjStopStringLiteralDfa_3 ( 0 , active0 ) ; return 1 ; } switch ( curChar ) { case 35 : if ( ( active0 & 0x1000L ) != 0L ) return jjStopAtPos ( 1 , 12 ) ; break ; case 42 : if ( ( active0 & 0x4000L ) != 0L ) return jjStartNfaWithStates_3 ( 1 , 14 , 14 ) ; break ; case 92 : if ( ( active0 & 0x10000L ) != 0L ) return jjStartNfaWithStates_3 ( 1 , 16 , 25 ) ; break ; default : break ; } return jjStartNfa_3 ( 0 , active0 ) ; } private final int jjMoveNfa_3 ( int startState , int curPos ) { int [ ] nextStates ; int startsAt = 0 ; jjnewStateCnt = 25 ; int i = 1 ; jjstateSet [ 0 ] = startState ; int j , kind = 0x7fffffff ; for ( ; ; ) { if ( ++ jjround == 0x7fffffff ) ReInitRounds ( ) ; if ( curChar < 64 ) { long l = 1L << curChar ; MatchLoop : do { switch ( jjstateSet [ -- i ] ) { case 16 : if ( curChar == 42 ) jjstateSet [ jjnewStateCnt ++ ] = 14 ; break ; case 13 : if ( ( 0xffffffe7ffffffffL & l ) != 0L ) { if ( kind > 18 ) kind = 18 ; jjCheckNAdd ( 7 ) ; } else if ( curChar == 36 ) { if ( kind > 10 ) kind = 10 ; jjCheckNAddTwoStates ( 22 , 23 ) ; } else if ( curChar == 35 ) jjCheckNAddTwoStates ( 5 , 16 ) ; if ( ( 0x100000200L & l ) != 0L ) jjCheckNAddTwoStates ( 0 , 6 ) ; break ; case 25 : if ( curChar == 36 ) jjCheckNAddTwoStates ( 22 , 23 ) ; if ( curChar == 36 ) { if ( kind > 10 ) kind = 10 ; } break ; case 9 : if ( curChar == 36 ) jjCheckNAddTwoStates ( 22 , 23 ) ; else if ( curChar == 35 ) jjstateSet [ jjnewStateCnt ++ ] = 11 ; if ( curChar == 36 ) { if ( kind > 10 ) kind = 10 ; } break ; case 0 : if ( ( 0x100000200L & l ) != 0L ) jjCheckNAddTwoStates ( 0 , 6 ) ; break ; case 2 : if ( curChar == 32 ) jjAddStates ( 48 , 49 ) ; break ; case 3 : if ( curChar == 40 && kind > 9 ) kind = 9 ; break ; case 6 : if ( curChar == 35 ) jjCheckNAdd ( 5 ) ; break ; case 7 : if ( ( 0xffffffe7ffffffffL & l ) == 0L ) break ; if ( kind > 18 ) kind = 18 ; jjCheckNAdd ( 7 ) ; break ; case 10 : if ( curChar == 35 ) jjstateSet [ jjnewStateCnt ++ ] = 11 ; break ; case 12 : if ( ( 0x3ff000000000000L & l ) == 0L ) break ; if ( kind > 8 ) kind = 8 ; jjstateSet [ jjnewStateCnt ++ ] = 12 ; break ; case 14 : if ( curChar == 42 ) jjstateSet [ jjnewStateCnt ++ ] = 15 ; break ; case 15 : if ( ( 0xfffffff7ffffffffL & l ) != 0L && kind > 13 ) kind = 13 ; break ; case 19 : if ( curChar == 36 && kind > 10 ) kind = 10 ; break ; case 21 : if ( curChar == 36 ) jjCheckNAddTwoStates ( 22 , 23 ) ; break ; case 23 : if ( curChar == 33 && kind > 11 ) kind = 11 ; break ; case 24 : if ( curChar != 36 ) break ; if ( kind > 10 ) kind = 10 ; jjCheckNAddTwoStates ( 22 , 23 ) ; break ; default : break ; } } while ( i != startsAt ) ; } else if ( curChar < 128 ) { long l = 1L << ( curChar & 077 ) ; MatchLoop : do { switch ( jjstateSet [ -- i ] ) { case 16 : case 5 : if ( curChar == 115 ) jjstateSet [ jjnewStateCnt ++ ] = 4 ; break ; case 13 : if ( ( 0xffffffffefffffffL & l ) != 0L ) { if ( kind > 18 ) kind = 18 ; jjCheckNAdd ( 7 ) ; } else if ( curChar == 92 ) jjCheckNAddStates ( 50 , 53 ) ; if ( curChar == 92 ) jjAddStates ( 32 , 33 ) ; break ; case 25 : if ( curChar == 92 ) jjAddStates ( 32 , 33 ) ; if ( curChar == 92 ) jjCheckNAddTwoStates ( 20 , 21 ) ; if ( curChar == 92 ) jjCheckNAddTwoStates ( 18 , 19 ) ; break ; case 9 : if ( curChar == 92 ) jjCheckNAddTwoStates ( 20 , 21 ) ; if ( curChar == 92 ) jjCheckNAddTwoStates ( 18 , 19 ) ; if ( curChar == 92 ) jjstateSet [ jjnewStateCnt ++ ] = 8 ; break ; case 1 : if ( curChar == 116 ) jjAddStates ( 48 , 49 ) ; break ; case 4 : if ( curChar == 101 ) jjstateSet [ jjnewStateCnt ++ ] = 1 ; break ; case 7 : if ( ( 0xffffffffefffffffL & l ) == 0L ) break ; if ( kind > 18 ) kind = 18 ; jjCheckNAdd ( 7 ) ; break ; case 8 : if ( curChar == 92 ) jjAddStates ( 32 , 33 ) ; break ; case 11 : case 12 : if ( ( 0x7fffffe87fffffeL & l ) == 0L ) break ; if ( kind > 8 ) kind = 8 ; jjCheckNAdd ( 12 ) ; break ; case 15 : if ( kind > 13 ) kind = 13 ; break ; case 17 : if ( curChar == 92 ) jjCheckNAddStates ( 50 , 53 ) ; break ; case 18 : if ( curChar == 92 ) jjCheckNAddTwoStates ( 18 , 19 ) ; break ; case 20 : if ( curChar == 92 ) jjCheckNAddTwoStates ( 20 , 21 ) ; break ; case 22 : if ( curChar == 92 ) jjAddStates ( 54 , 55 ) ; break ; default : break ; } } while ( i != startsAt ) ; } else { int hiByte = ( int ) ( curChar > > 8 ) ; int i1 = hiByte > > 6 ; long l1 = 1L << ( hiByte & 077 ) ; int i2 = ( curChar & 0xff ) > > 6 ; long l2 = 1L << ( curChar & 077 ) ; MatchLoop : do { switch ( jjstateSet [ -- i ] ) { case 13 : case 7 : if ( ! jjCanMove_0 ( hiByte , i1 , i2 , l1 , l2 ) ) break ; if ( kind > 18 ) kind = 18 ; jjCheckNAdd ( 7 ) ; break ; case 15 : if ( jjCanMove_0 ( hiByte , i1 , i2 , l1 , l2 ) && kind > 13 ) kind = 13 ; break ; default : break ; } } while ( i != startsAt ) ; } if ( kind != 0x7fffffff ) { jjmatchedKind = kind ; jjmatchedPos = curPos ; kind = 0x7fffffff ; } ++ curPos ; if ( ( i = jjnewStateCnt ) == ( startsAt = 25 - ( jjnewStateCnt = startsAt ) ) ) return curPos ; try { curChar = input_stream . readChar ( ) ; } catch ( java . io . IOException e ) { return curPos ; } } } private final int jjStopStringLiteralDfa_7 ( int pos , long active0 ) { switch ( pos ) { case 0 : if ( ( active0 & 0xd000L ) != 0L ) return 2 ; return - 1 ; default : return - 1 ; } } private final int jjStartNfa_7 ( int pos , long active0 ) { return jjMoveNfa_7 ( jjStopStringLiteralDfa_7 ( pos , active0 ) , pos + 1 ) ; } private final int jjStartNfaWithStates_7 ( int pos , int kind , int state ) { jjmatchedKind = kind ; jjmatchedPos = pos ; try { curChar = input_stream . readChar ( ) ; } catch ( java . io . IOException e ) { return pos + 1 ; } return jjMoveNfa_7 ( state , pos + 1 ) ; } private final int jjMoveStringLiteralDfa0_7 ( ) { switch ( curChar ) { case 35 : jjmatchedKind = 15 ; return jjMoveStringLiteralDfa1_7 ( 0x5000L ) ; case 42 : return jjMoveStringLiteralDfa1_7 ( 0x100000L ) ; default : return jjMoveNfa_7 ( 3 , 0 ) ; } } private final int jjMoveStringLiteralDfa1_7 ( long active0 ) { try { curChar = input_stream . readChar ( ) ; } catch ( java . io . IOException e ) { jjStopStringLiteralDfa_7 ( 0 , active0 ) ; return 1 ; } switch ( curChar ) { case 35 : if ( ( active0 & 0x1000L ) != 0L ) return jjStopAtPos ( 1 , 12 ) ; else if ( ( active0 & 0x100000L ) != 0L ) return jjStopAtPos ( 1 , 20 ) ; break ; case 42 : if ( ( active0 & 0x4000L ) != 0L ) return jjStartNfaWithStates_7 ( 1 , 14 , 0 ) ; break ; default : break ; } return jjStartNfa_7 ( 0 , active0 ) ; } private final int jjMoveNfa_7 ( int startState , int curPos ) { int [ ] nextStates ; int startsAt = 0 ; jjnewStateCnt = 12 ; int i = 1 ; jjstateSet [ 0 ] = startState ; int j , kind = 0x7fffffff ; for ( ; ; ) { if ( ++ jjround == 0x7fffffff ) ReInitRounds ( ) ; if ( curChar < 64 ) { long l = 1L << curChar ; MatchLoop : do { switch ( jjstateSet [ -- i ] ) { case 3 : if ( curChar == 36 ) { if ( kind > 10 ) kind = 10 ; jjCheckNAddTwoStates ( 9 , 10 ) ; } else if ( curChar == 35 ) jjstateSet [ jjnewStateCnt ++ ] = 2 ; break ; case 0 : if ( curChar == 42 ) jjstateSet [ jjnewStateCnt ++ ] = 1 ; break ; case 1 : if ( ( 0xfffffff7ffffffffL & l ) != 0L && kind > 13 ) kind = 13 ; break ; case 2 : if ( curChar == 42 ) jjstateSet [ jjnewStateCnt ++ ] = 0 ; break ; case 6 : if ( curChar == 36 && kind > 10 ) kind = 10 ; break ; case 8 : if ( curChar == 36 ) jjCheckNAddTwoStates ( 9 , 10 ) ; break ; case 10 : if ( curChar == 33 && kind > 11 ) kind = 11 ; break ; case 11 : if ( curChar != 36 ) break ; if ( kind > 10 ) kind = 10 ; jjCheckNAddTwoStates ( 9 , 10 ) ; break ; default : break ; } } while ( i != startsAt ) ; } else if ( curChar < 128 ) { long l = 1L << ( curChar & 077 ) ; MatchLoop : do { switch ( jjstateSet [ -- i ] ) { case 3 : if ( curChar == 92 ) jjCheckNAddStates ( 28 , 31 ) ; break ; case 1 : if ( kind > 13 ) kind = 13 ; break ; case 5 : if ( curChar == 92 ) jjCheckNAddTwoStates ( 5 , 6 ) ; break ; case 7 : if ( curChar == 92 ) jjCheckNAddTwoStates ( 7 , 8 ) ; break ; case 9 : if ( curChar == 92 ) jjAddStates ( 32 , 33 ) ; break ; default : break ; } } while ( i != startsAt ) ; } else { int hiByte = ( int ) ( curChar > > 8 ) ; int i1 = hiByte > > 6 ; long l1 = 1L << ( hiByte & 077 ) ; int i2 = ( curChar & 0xff ) > > 6 ; long l2 = 1L << ( curChar & 077 ) ; MatchLoop : do { switch ( jjstateSet [ -- i ] ) { case 1 : if ( jjCanMove_0 ( hiByte , i1 , i2 , l1 , l2 ) && kind > 13 ) kind = 13 ; break ; default : break ; } } while ( i != startsAt ) ; } if ( kind != 0x7fffffff ) { jjmatchedKind = kind ; jjmatchedPos = curPos ; kind = 0x7fffffff ; } ++ curPos ; if ( ( i = jjnewStateCnt ) == ( startsAt = 12 - ( jjnewStateCnt = startsAt ) ) ) return curPos ; try { curChar = input_stream . readChar ( ) ; } catch ( java . io . IOException e ) { return curPos ; } } } private final int jjStopStringLiteralDfa_8 ( int pos , long active0 ) { switch ( pos ) { case 0 : if ( ( active0 & 0xd000L ) != 0L ) return 2 ; return - 1 ; default : return - 1 ; } } private final int jjStartNfa_8 ( int pos , long active0 ) { return jjMoveNfa_8 ( jjStopStringLiteralDfa_8 ( pos , active0 ) , pos + 1 ) ; } private final int jjStartNfaWithStates_8 ( int pos , int kind , int state ) { jjmatchedKind = kind ; jjmatchedPos = pos ; try { curChar = input_stream . readChar ( ) ; } catch ( java . io . IOException e ) { return pos + 1 ; } return jjMoveNfa_8 ( state , pos + 1 ) ; } private final int jjMoveStringLiteralDfa0_8 ( ) { switch ( curChar ) { case 35 : jjmatchedKind = 15 ; return jjMoveStringLiteralDfa1_8 ( 0x5000L ) ; default : return jjMoveNfa_8 ( 3 , 0 ) ; } } private final int jjMoveStringLiteralDfa1_8 ( long active0 ) { try { curChar = input_stream . readChar ( ) ; } catch ( java . io . IOException e ) { jjStopStringLiteralDfa_8 ( 0 , active0 ) ; return 1 ; } switch ( curChar ) { case 35 : if ( ( active0 & 0x1000L ) != 0L ) return jjStopAtPos ( 1 , 12 ) ; break ; case 42 : if ( ( active0 & 0x4000L ) != 0L ) return jjStartNfaWithStates_8 ( 1 , 14 , 0 ) ; break ; default : break ; } return jjStartNfa_8 ( 0 , active0 ) ; } private final int jjMoveNfa_8 ( int startState , int curPos ) { int [ ] nextStates ; int startsAt = 0 ; jjnewStateCnt = 15 ; int i = 1 ; jjstateSet [ 0 ] = startState ; int j , kind = 0x7fffffff ; for ( ; ; ) { if ( ++ jjround == 0x7fffffff ) ReInitRounds ( ) ; if ( curChar < 64 ) { long l = 1L << curChar ; MatchLoop : do { switch ( jjstateSet [ -- i ] ) { case 3 : if ( ( 0x2400L & l ) != 0L ) { if ( kind > 19 ) kind = 19 ; } else if ( curChar == 36 ) { if ( kind > 10 ) kind = 10 ; jjCheckNAddTwoStates ( 12 , 13 ) ; } else if ( curChar == 35 ) jjstateSet [ jjnewStateCnt ++ ] = 2 ; if ( curChar == 13 ) jjstateSet [ jjnewStateCnt ++ ] = 5 ; break ; case 0 : if ( curChar == 42 ) jjstateSet [ jjnewStateCnt ++ ] = 1 ; break ; case 1 : if ( ( 0xfffffff7ffffffffL & l ) != 0L && kind > 13 ) kind = 13 ; break ; case 2 : if ( curChar == 42 ) jjstateSet [ jjnewStateCnt ++ ] = 0 ; break ; case 4 : if ( ( 0x2400L & l ) != 0L && kind > 19 ) kind = 19 ; break ; case 5 : if ( curChar == 10 && kind > 19 ) kind = 19 ; break ; case 6 : if ( curChar == 13 ) jjstateSet [ jjnewStateCnt ++ ] = 5 ; break ; case 9 : if ( curChar == 36 && kind > 10 ) kind = 10 ; break ; case 11 : if ( curChar == 36 ) jjCheckNAddTwoStates ( 12 , 13 ) ; break ; case 13 : if ( curChar == 33 && kind > 11 ) kind = 11 ; break ; case 14 : if ( curChar != 36 ) break ; if ( kind > 10 ) kind = 10 ; jjCheckNAddTwoStates ( 12 , 13 ) ; break ; default : break ; } } while ( i != startsAt ) ; } else if ( curChar < 128 ) { long l = 1L << ( curChar & 077 ) ; MatchLoop : do { switch ( jjstateSet [ -- i ] ) { case 3 : if ( curChar == 92 ) jjCheckNAddStates ( 56 , 59 ) ; break ; case 1 : if ( kind > 13 ) kind = 13 ; break ; case 8 : if ( curChar == 92 ) jjCheckNAddTwoStates ( 8 , 9 ) ; break ; case 10 : if ( curChar == 92 ) jjCheckNAddTwoStates ( 10 , 11 ) ; break ; case 12 : if ( curChar == 92 ) jjAddStates ( 60 , 61 ) ; break ; default : break ; } } while ( i != startsAt ) ; } else { int hiByte = ( int ) ( curChar > > 8 ) ; int i1 = hiByte > > 6 ; long l1 = 1L << ( hiByte & 077 ) ; int i2 = ( curChar & 0xff ) > > 6 ; long l2 = 1L << ( curChar & 077 ) ; MatchLoop : do { switch ( jjstateSet [ -- i ] ) { case 1 : if ( jjCanMove_0 ( hiByte , i1 , i2 , l1 , l2 ) && kind > 13 ) kind = 13 ; break ; default : break ; } } while ( i != startsAt ) ; } if ( kind != 0x7fffffff ) { jjmatchedKind = kind ; jjmatchedPos = curPos ; kind = 0x7fffffff ; } ++ curPos ; if ( ( i = jjnewStateCnt ) == ( startsAt = 15 - ( jjnewStateCnt = startsAt ) ) ) return curPos ; try { curChar = input_stream . readChar ( ) ; } catch ( java . io . IOException e ) { return curPos ; } } } private final int jjStopStringLiteralDfa_5 ( int pos , long active0 ) { switch ( pos ) { case 0 : if ( ( active0 & 0xd000L ) != 0L ) return 2 ; if ( ( active0 & 0x6000000L ) != 0L ) { jjmatchedKind = 56 ; return 5 ; } return - 1 ; case 1 : if ( ( active0 & 0x4000L ) != 0L ) return 0 ; if ( ( active0 & 0x6000000L ) != 0L ) { jjmatchedKind = 56 ; jjmatchedPos = 1 ; return 5 ; } return - 1 ; case 2 : if ( ( active0 & 0x6000000L ) != 0L ) { jjmatchedKind = 56 ; jjmatchedPos = 2 ; return 5 ; } return - 1 ; case 3 : if ( ( active0 & 0x4000000L ) != 0L ) { jjmatchedKind = 56 ; jjmatchedPos = 3 ; return 5 ; } if ( ( active0 & 0x2000000L ) != 0L ) return 5 ; return - 1 ; default : return - 1 ; } } private final int jjStartNfa_5 ( int pos , long active0 ) { return jjMoveNfa_5 ( jjStopStringLiteralDfa_5 ( pos , active0 ) , pos + 1 ) ; } private final int jjStartNfaWithStates_5 ( int pos , int kind , int state ) { jjmatchedKind = kind ; jjmatchedPos = pos ; try { curChar = input_stream . readChar ( ) ; } catch ( java . io . IOException e ) { return pos + 1 ; } return jjMoveNfa_5 ( state , pos + 1 ) ; } private final int jjMoveStringLiteralDfa0_5 ( ) { switch ( curChar ) { case 35 : jjmatchedKind = 15 ; return jjMoveStringLiteralDfa1_5 ( 0x5000L ) ; case 102 : return jjMoveStringLiteralDfa1_5 ( 0x4000000L ) ; case 116 : return jjMoveStringLiteralDfa1_5 ( 0x2000000L ) ; case 123 : return jjStopAtPos ( 0 , 58 ) ; case 125 : return jjStopAtPos ( 0 , 59 ) ; default : return jjMoveNfa_5 ( 3 , 0 ) ; } } private final int jjMoveStringLiteralDfa1_5 ( long active0 ) { try { curChar = input_stream . readChar ( ) ; } catch ( java . io . IOException e ) { jjStopStringLiteralDfa_5 ( 0 , active0 ) ; return 1 ; } switch ( curChar ) { case 35 : if ( ( active0 & 0x1000L ) != 0L ) return jjStopAtPos ( 1 , 12 ) ; break ; case 42 : if ( ( active0 & 0x4000L ) != 0L ) return jjStartNfaWithStates_5 ( 1 , 14 , 0 ) ; break ; case 97 : return jjMoveStringLiteralDfa2_5 ( active0 , 0x4000000L ) ; case 114 : return jjMoveStringLiteralDfa2_5 ( active0 , 0x2000000L ) ; default : break ; } return jjStartNfa_5 ( 0 , active0 ) ; } private final int jjMoveStringLiteralDfa2_5 ( long old0 , long active0 ) { if ( ( ( active0 &= old0 ) ) == 0L ) return jjStartNfa_5 ( 0 , old0 ) ; try { curChar = input_stream . readChar ( ) ; } catch ( java . io . IOException e ) { jjStopStringLiteralDfa_5 ( 1 , active0 ) ; return 2 ; } switch ( curChar ) { case 108 : return jjMoveStringLiteralDfa3_5 ( active0 , 0x4000000L ) ; case 117 : return jjMoveStringLiteralDfa3_5 ( active0 , 0x2000000L ) ; default : break ; } return jjStartNfa_5 ( 1 , active0 ) ; } private final int jjMoveStringLiteralDfa3_5 ( long old0 , long active0 ) { if ( ( ( active0 &= old0 ) ) == 0L ) return jjStartNfa_5 ( 1 , old0 ) ; try { curChar = input_stream . readChar ( ) ; } catch ( java . io . IOException e ) { jjStopStringLiteralDfa_5 ( 2 , active0 ) ; return 3 ; } switch ( curChar ) { case 101 : if ( ( active0 & 0x2000000L ) != 0L ) return jjStartNfaWithStates_5 ( 3 , 25 , 5 ) ; break ; case 115 : return jjMoveStringLiteralDfa4_5 ( active0 , 0x4000000L ) ; default : break ; } return jjStartNfa_5 ( 2 , active0 ) ; } private final int jjMoveStringLiteralDfa4_5 ( long old0 , long active0 ) { if ( ( ( active0 &= old0 ) ) == 0L ) return jjStartNfa_5 ( 2 , old0 ) ; try { curChar = input_stream . readChar ( ) ; } catch ( java . io . IOException e ) { jjStopStringLiteralDfa_5 ( 3 , active0 ) ; return 4 ; } switch ( curChar ) { case 101 : if ( ( active0 & 0x4000000L ) != 0L ) return jjStartNfaWithStates_5 ( 4 , 26 , 5 ) ; break ; default : break ; } return jjStartNfa_5 ( 3 , active0 ) ; } private final int jjMoveNfa_5 ( int startState , int curPos ) { int [ ] nextStates ; int startsAt = 0 ; jjnewStateCnt = 16 ; int i = 1 ; jjstateSet [ 0 ] = startState ; int j , kind = 0x7fffffff ; for ( ; ; ) { if ( ++ jjround == 0x7fffffff ) ReInitRounds ( ) ; if ( curChar < 64 ) { long l = 1L << curChar ; MatchLoop : do { switch ( jjstateSet [ -- i ] ) { case 3 : if ( curChar == 36 ) { if ( kind > 10 ) kind = 10 ; jjCheckNAddTwoStates ( 13 , 14 ) ; } else if ( curChar == 46 ) jjstateSet [ jjnewStateCnt ++ ] = 7 ; else if ( curChar == 35 ) jjstateSet [ jjnewStateCnt ++ ] = 2 ; break ; case 0 : if ( curChar == 42 ) jjstateSet [ jjnewStateCnt ++ ] = 1 ; break ; case 1 : if ( ( 0xfffffff7ffffffffL & l ) != 0L && kind > 13 ) kind = 13 ; break ; case 2 : if ( curChar == 42 ) jjstateSet [ jjnewStateCnt ++ ] = 0 ; break ; case 5 : if ( ( 0x3ff200000000000L & l ) == 0L ) break ; if ( kind > 56 ) kind = 56 ; jjstateSet [ jjnewStateCnt ++ ] = 5 ; break ; case 6 : if ( curChar == 46 ) jjstateSet [ jjnewStateCnt ++ ] = 7 ; break ; case 10 : if ( curChar == 36 && kind > 10 ) kind = 10 ; break ; case 12 : if ( curChar == 36 ) jjCheckNAddTwoStates ( 13 , 14 ) ; break ; case 14 : if ( curChar == 33 && kind > 11 ) kind = 11 ; break ; case 15 : if ( curChar != 36 ) break ; if ( kind > 10 ) kind = 10 ; jjCheckNAddTwoStates ( 13 , 14 ) ; break ; default : break ; } } while ( i != startsAt ) ; } else if ( curChar < 128 ) { long l = 1L << ( curChar & 077 ) ; MatchLoop : do { switch ( jjstateSet [ -- i ] ) { case 3 : if ( ( 0x7fffffe87fffffeL & l ) != 0L ) { if ( kind > 56 ) kind = 56 ; jjCheckNAdd ( 5 ) ; } else if ( curChar == 92 ) jjCheckNAddStates ( 40 , 43 ) ; break ; case 1 : if ( kind > 13 ) kind = 13 ; break ; case 4 : case 5 : if ( ( 0x7fffffe87fffffeL & l ) == 0L ) break ; if ( kind > 56 ) kind = 56 ; jjCheckNAdd ( 5 ) ; break ; case 7 : if ( ( 0x7fffffe07fffffeL & l ) != 0L && kind > 57 ) kind = 57 ; break ; case 8 : if ( curChar == 92 ) jjCheckNAddStates ( 40 , 43 ) ; break ; case 9 : if ( curChar == 92 ) jjCheckNAddTwoStates ( 9 , 10 ) ; break ; case 11 : if ( curChar == 92 ) jjCheckNAddTwoStates ( 11 , 12 ) ; break ; case 13 : if ( curChar == 92 ) jjAddStates ( 46 , 47 ) ; break ; default : break ; } } while ( i != startsAt ) ; } else { int hiByte = ( int ) ( curChar > > 8 ) ; int i1 = hiByte > > 6 ; long l1 = 1L << ( hiByte & 077 ) ; int i2 = ( curChar & 0xff ) > > 6 ; long l2 = 1L << ( curChar & 077 ) ; MatchLoop : do { switch ( jjstateSet [ -- i ] ) { case 1 : if ( jjCanMove_0 ( hiByte , i1 , i2 , l1 , l2 ) && kind > 13 ) kind = 13 ; break ; default : break ; } } while ( i != startsAt ) ; } if ( kind != 0x7fffffff ) { jjmatchedKind = kind ; jjmatchedPos = curPos ; kind = 0x7fffffff ; } ++ curPos ; if ( ( i = jjnewStateCnt ) == ( startsAt = 16 - ( jjnewStateCnt = startsAt ) ) ) return curPos ; try { curChar = input_stream . readChar ( ) ; } catch ( java . io . IOException e ) { return curPos ; } } } private final int jjStopStringLiteralDfa_1 ( int pos , long active0 ) { switch ( pos ) { case 0 : if ( ( active0 & 0xd000L ) != 0L ) return 2 ; if ( ( active0 & 0x6000000L ) != 0L ) { jjmatchedKind = 56 ; return 25 ; } if ( ( active0 & 0x10L ) != 0L ) return 27 ; return - 1 ; case 1 : if ( ( active0 & 0x4000L ) != 0L ) return 0 ; if ( ( active0 & 0x6000000L ) != 0L ) { jjmatchedKind = 56 ; jjmatchedPos = 1 ; return 25 ; } return - 1 ; case 2 : if ( ( active0 & 0x6000000L ) != 0L ) { jjmatchedKind = 56 ; jjmatchedPos = 2 ; return 25 ; } return - 1 ; case 3 : if ( ( active0 & 0x4000000L ) != 0L ) { jjmatchedKind = 56 ; jjmatchedPos = 3 ; return 25 ; } if ( ( active0 & 0x2000000L ) != 0L ) return 25 ; return - 1 ; default : return - 1 ; } } private final int jjStartNfa_1 ( int pos , long active0 ) { return jjMoveNfa_1 ( jjStopStringLiteralDfa_1 ( pos , active0 ) , pos + 1 ) ; } private final int jjStartNfaWithStates_1 ( int pos , int kind , int state ) { jjmatchedKind = kind ; jjmatchedPos = pos ; try { curChar = input_stream . readChar ( ) ; } catch ( java . io . IOException e ) { return pos + 1 ; } return jjMoveNfa_1 ( state , pos + 1 ) ; } private final int jjMoveStringLiteralDfa0_1 ( ) { switch ( curChar ) { case 35 : jjmatchedKind = 15 ; return jjMoveStringLiteralDfa1_1 ( 0x5000L ) ; case 41 : return jjStopAtPos ( 0 , 7 ) ; case 44 : return jjStopAtPos ( 0 , 3 ) ; case 46 : return jjMoveStringLiteralDfa1_1 ( 0x10L ) ; case 91 : return jjStopAtPos ( 0 , 1 ) ; case 93 : return jjStopAtPos ( 0 , 2 ) ; case 102 : return jjMoveStringLiteralDfa1_1 ( 0x4000000L ) ; case 116 : return jjMoveStringLiteralDfa1_1 ( 0x2000000L ) ; case 123 : return jjStopAtPos ( 0 , 58 ) ; case 125 : return jjStopAtPos ( 0 , 59 ) ; default : return jjMoveNfa_1 ( 3 , 0 ) ; } } private final int jjMoveStringLiteralDfa1_1 ( long active0 ) { try { curChar = input_stream . readChar ( ) ; } catch ( java . io . IOException e ) { jjStopStringLiteralDfa_1 ( 0 , active0 ) ; return 1 ; } switch ( curChar ) { case 35 : if ( ( active0 & 0x1000L ) != 0L ) return jjStopAtPos ( 1 , 12 ) ; break ; case 42 : if ( ( active0 & 0x4000L ) != 0L ) return jjStartNfaWithStates_1 ( 1 , 14 , 0 ) ; break ; case 46 : if ( ( active0 & 0x10L ) != 0L ) return jjStopAtPos ( 1 , 4 ) ; break ; case 97 : return jjMoveStringLiteralDfa2_1 ( active0 , 0x4000000L ) ; case 114 : return jjMoveStringLiteralDfa2_1 ( active0 , 0x2000000L ) ; default : break ; } return jjStartNfa_1 ( 0 , active0 ) ; } private final int jjMoveStringLiteralDfa2_1 ( long old0 , long active0 ) { if ( ( ( active0 &= old0 ) ) == 0L ) return jjStartNfa_1 ( 0 , old0 ) ; try { curChar = input_stream . readChar ( ) ; } catch ( java . io . IOException e ) { jjStopStringLiteralDfa_1 ( 1 , active0 ) ; return 2 ; } switch ( curChar ) { case 108 : return jjMoveStringLiteralDfa3_1 ( active0 , 0x4000000L ) ; case 117 : return jjMoveStringLiteralDfa3_1 ( active0 , 0x2000000L ) ; default : break ; } return jjStartNfa_1 ( 1 , active0 ) ; } private final int jjMoveStringLiteralDfa3_1 ( long old0 , long active0 ) { if ( ( ( active0 &= old0 ) ) == 0L ) return jjStartNfa_1 ( 1 , old0 ) ; try { curChar = input_stream . readChar ( ) ; } catch ( java . io . IOException e ) { jjStopStringLiteralDfa_1 ( 2 , active0 ) ; return 3 ; } switch ( curChar ) { case 101 : if ( ( active0 & 0x2000000L ) != 0L ) return jjStartNfaWithStates_1 ( 3 , 25 , 25 ) ; break ; case 115 : return jjMoveStringLiteralDfa4_1 ( active0 , 0x4000000L ) ; default : break ; } return jjStartNfa_1 ( 2 , active0 ) ; } private final int jjMoveStringLiteralDfa4_1 ( long old0 , long active0 ) { if ( ( ( active0 &= old0 ) ) == 0L ) return jjStartNfa_1 ( 2 , old0 ) ; try { curChar = input_stream . readChar ( ) ; } catch ( java . io . IOException e ) { jjStopStringLiteralDfa_1 ( 3 , active0 ) ; return 4 ; } switch ( curChar ) { case 101 : if ( ( active0 & 0x4000000L ) != 0L ) return jjStartNfaWithStates_1 ( 4 , 26 , 25 ) ; break ; default : break ; } return jjStartNfa_1 ( 3 , active0 ) ; } private final int jjMoveNfa_1 ( int startState , int curPos ) { int [ ] nextStates ; int startsAt = 0 ; jjnewStateCnt = 36 ; int i = 1 ; jjstateSet [ 0 ] = startState ; int j , kind = 0x7fffffff ; for ( ; ; ) { if ( ++ jjround == 0x7fffffff ) ReInitRounds ( ) ; if ( curChar < 64 ) { long l = 1L << curChar ; MatchLoop : do { switch ( jjstateSet [ -- i ] ) { case 3 : if ( ( 0x3ff000000000000L & l ) != 0L ) { if ( kind > 49 ) kind = 49 ; jjCheckNAdd ( 23 ) ; } else if ( ( 0x100000200L & l ) != 0L ) { if ( kind > 23 ) kind = 23 ; jjCheckNAdd ( 4 ) ; } else if ( curChar == 36 ) { if ( kind > 10 ) kind = 10 ; jjCheckNAddTwoStates ( 33 , 34 ) ; } else if ( curChar == 46 ) jjstateSet [ jjnewStateCnt ++ ] = 27 ; else if ( curChar == 45 ) jjCheckNAdd ( 23 ) ; else if ( curChar == 39 ) jjCheckNAddStates ( 62 , 64 ) ; else if ( curChar == 34 ) jjCheckNAddStates ( 65 , 67 ) ; else if ( curChar == 35 ) jjstateSet [ jjnewStateCnt ++ ] = 2 ; break ; case 0 : if ( curChar == 42 ) jjstateSet [ jjnewStateCnt ++ ] = 1 ; break ; case 1 : if ( ( 0xfffffff7ffffffffL & l ) != 0L && kind > 13 ) kind = 13 ; break ; case 2 : if ( curChar == 42 ) jjstateSet [ jjnewStateCnt ++ ] = 0 ; break ; case 4 : if ( ( 0x100000200L & l ) == 0L ) break ; if ( kind > 23 ) kind = 23 ; jjCheckNAdd ( 4 ) ; break ; case 5 : if ( curChar == 34 ) jjCheckNAddStates ( 65 , 67 ) ; break ; case 6 : if ( ( 0xfffffffbffffdbffL & l ) != 0L ) jjCheckNAddStates ( 65 , 67 ) ; break ; case 7 : if ( curChar == 34 && kind > 24 ) kind = 24 ; break ; case 9 : if ( ( 0x8400000000L & l ) != 0L ) jjCheckNAddStates ( 65 , 67 ) ; break ; case 10 : if ( ( 0xff000000000000L & l ) != 0L ) jjCheckNAddStates ( 68 , 71 ) ; break ; case 11 : if ( ( 0xff000000000000L & l ) != 0L ) jjCheckNAddStates ( 65 , 67 ) ; break ; case 12 : if ( ( 0xf000000000000L & l ) != 0L ) jjstateSet [ jjnewStateCnt ++ ] = 13 ; break ; case 13 : if ( ( 0xff000000000000L & l ) != 0L ) jjCheckNAdd ( 11 ) ; break ; case 14 : if ( curChar == 32 ) jjAddStates ( 72 , 73 ) ; break ; case 15 : if ( curChar == 10 ) jjCheckNAddStates ( 65 , 67 ) ; break ; case 16 : if ( curChar == 39 ) jjCheckNAddStates ( 62 , 64 ) ; break ; case 17 : if ( ( 0xffffff7fffffdbffL & l ) != 0L ) jjCheckNAddStates ( 62 , 64 ) ; break ; case 19 : if ( curChar == 32 ) jjAddStates ( 13 , 14 ) ; break ; case 20 : if ( curChar == 10 ) jjCheckNAddStates ( 62 , 64 ) ; break ; case 21 : if ( curChar == 39 && kind > 24 ) kind = 24 ; break ; case 22 : if ( curChar == 45 ) jjCheckNAdd ( 23 ) ; break ; case 23 : if ( ( 0x3ff000000000000L & l ) == 0L ) break ; if ( kind > 49 ) kind = 49 ; jjCheckNAdd ( 23 ) ; break ; case 25 : if ( ( 0x3ff200000000000L & l ) == 0L ) break ; if ( kind > 56 ) kind = 56 ; jjstateSet [ jjnewStateCnt ++ ] = 25 ; break ; case 26 : if ( curChar == 46 ) jjstateSet [ jjnewStateCnt ++ ] = 27 ; break ; case 30 : if ( curChar == 36 && kind > 10 ) kind = 10 ; break ; case 32 : if ( curChar == 36 ) jjCheckNAddTwoStates ( 33 , 34 ) ; break ; case 34 : if ( curChar == 33 && kind > 11 ) kind = 11 ; break ; case 35 : if ( curChar != 36 ) break ; if ( kind > 10 ) kind = 10 ; jjCheckNAddTwoStates ( 33 , 34 ) ; break ; default : break ; } } while ( i != startsAt ) ; } else if ( curChar < 128 ) { long l = 1L << ( curChar & 077 ) ; MatchLoop : do { switch ( jjstateSet [ -- i ] ) { case 3 : if ( ( 0x7fffffe87fffffeL & l ) != 0L ) { if ( kind > 56 ) kind = 56 ; jjCheckNAdd ( 25 ) ; } else if ( curChar == 92 ) jjCheckNAddStates ( 74 , 77 ) ; break ; case 1 : if ( kind > 13 ) kind = 13 ; break ; case 6 : if ( ( 0xffffffffefffffffL & l ) != 0L ) jjCheckNAddStates ( 65 , 67 ) ; break ; case 8 : if ( curChar == 92 ) jjAddStates ( 78 , 82 ) ; break ; case 9 : if ( ( 0x14404410000000L & l ) != 0L ) jjCheckNAddStates ( 65 , 67 ) ; break ; case 17 : jjAddStates ( 62 , 64 ) ; break ; case 18 : if ( curChar == 92 ) jjAddStates ( 13 , 14 ) ; break ; case 24 : case 25 : if ( ( 0x7fffffe87fffffeL & l ) == 0L ) break ; if ( kind > 56 ) kind = 56 ; jjCheckNAdd ( 25 ) ; break ; case 27 : if ( ( 0x7fffffe07fffffeL & l ) != 0L && kind > 57 ) kind = 57 ; break ; case 28 : if ( curChar == 92 ) jjCheckNAddStates ( 74 , 77 ) ; break ; case 29 : if ( curChar == 92 ) jjCheckNAddTwoStates ( 29 , 30 ) ; break ; case 31 : if ( curChar == 92 ) jjCheckNAddTwoStates ( 31 , 32 ) ; break ; case 33 : if ( curChar == 92 ) jjAddStates ( 83 , 84 ) ; break ; default : break ; } } while ( i != startsAt ) ; } else { int hiByte = ( int ) ( curChar > > 8 ) ; int i1 = hiByte > > 6 ; long l1 = 1L << ( hiByte & 077 ) ; int i2 = ( curChar & 0xff ) > > 6 ; long l2 = 1L << ( curChar & 077 ) ; MatchLoop : do { switch ( jjstateSet [ -- i ] ) { case 1 : if ( jjCanMove_0 ( hiByte , i1 , i2 , l1 , l2 ) && kind > 13 ) kind = 13 ; break ; case 6 : if ( jjCanMove_0 ( hiByte , i1 , i2 , l1 , l2 ) ) jjAddStates ( 65 , 67 ) ; break ; case 17 : if ( jjCanMove_0 ( hiByte , i1 , i2 , l1 , l2 ) ) jjAddStates ( 62 , 64 ) ; break ; default : break ; } } while ( i != startsAt ) ; } if ( kind != 0x7fffffff ) { jjmatchedKind = kind ; jjmatchedPos = curPos ; kind = 0x7fffffff ; } ++ curPos ; if ( ( i = jjnewStateCnt ) == ( startsAt = 36 - ( jjnewStateCnt = startsAt ) ) ) return curPos ; try { curChar = input_stream . readChar ( ) ; } catch ( java . io . IOException e ) { return curPos ; } } } private final int jjStopStringLiteralDfa_2 ( int pos , long active0 ) { switch ( pos ) { case 0 : if ( ( active0 & 0xd000L ) != 0L ) return 2 ; if ( ( active0 & 0x6000000L ) != 0L ) { jjmatchedKind = 56 ; return 5 ; } return - 1 ; case 1 : if ( ( active0 & 0x4000L ) != 0L ) return 0 ; if ( ( active0 & 0x6000000L ) != 0L ) { jjmatchedKind = 56 ; jjmatchedPos = 1 ; return 5 ; } return - 1 ; case 2 : if ( ( active0 & 0x6000000L ) != 0L ) { jjmatchedKind = 56 ; jjmatchedPos = 2 ; return 5 ; } return - 1 ; case 3 : if ( ( active0 & 0x4000000L ) != 0L ) { jjmatchedKind = 56 ; jjmatchedPos = 3 ; return 5 ; } if ( ( active0 & 0x2000000L ) != 0L ) return 5 ; return - 1 ; default : return - 1 ; } } private final int jjStartNfa_2 ( int pos , long active0 ) { return jjMoveNfa_2 ( jjStopStringLiteralDfa_2 ( pos , active0 ) , pos + 1 ) ; } private final int jjStartNfaWithStates_2 ( int pos , int kind , int state ) { jjmatchedKind = kind ; jjmatchedPos = pos ; try { curChar = input_stream . readChar ( ) ; } catch ( java . io . IOException e ) { return pos + 1 ; } return jjMoveNfa_2 ( state , pos + 1 ) ; } private final int jjMoveStringLiteralDfa0_2 ( ) { switch ( curChar ) { case 35 : jjmatchedKind = 15 ; return jjMoveStringLiteralDfa1_2 ( 0x5000L ) ; case 40 : return jjStopAtPos ( 0 , 5 ) ; case 102 : return jjMoveStringLiteralDfa1_2 ( 0x4000000L ) ; case 116 : return jjMoveStringLiteralDfa1_2 ( 0x2000000L ) ; case 123 : return jjStopAtPos ( 0 , 58 ) ; case 125 : return jjStopAtPos ( 0 , 59 ) ; default : return jjMoveNfa_2 ( 3 , 0 ) ; } } private final int jjMoveStringLiteralDfa1_2 ( long active0 ) { try { curChar = input_stream . readChar ( ) ; } catch ( java . io . IOException e ) { jjStopStringLiteralDfa_2 ( 0 , active0 ) ; return 1 ; } switch ( curChar ) { case 35 : if ( ( active0 & 0x1000L ) != 0L ) return jjStopAtPos ( 1 , 12 ) ; break ; case 42 : if ( ( active0 & 0x4000L ) != 0L ) return jjStartNfaWithStates_2 ( 1 , 14 , 0 ) ; break ; case 97 : return jjMoveStringLiteralDfa2_2 ( active0 , 0x4000000L ) ; case 114 : return jjMoveStringLiteralDfa2_2 ( active0 , 0x2000000L ) ; default : break ; } return jjStartNfa_2 ( 0 , active0 ) ; } private final int jjMoveStringLiteralDfa2_2 ( long old0 , long active0 ) { if ( ( ( active0 &= old0 ) ) == 0L ) return jjStartNfa_2 ( 0 , old0 ) ; try { curChar = input_stream . readChar ( ) ; } catch ( java . io . IOException e ) { jjStopStringLiteralDfa_2 ( 1 , active0 ) ; return 2 ; } switch ( curChar ) { case 108 : return jjMoveStringLiteralDfa3_2 ( active0 , 0x4000000L ) ; case 117 : return jjMoveStringLiteralDfa3_2 ( active0 , 0x2000000L ) ; default : break ; } return jjStartNfa_2 ( 1 , active0 ) ; } private final int jjMoveStringLiteralDfa3_2 ( long old0 , long active0 ) { if ( ( ( active0 &= old0 ) ) == 0L ) return jjStartNfa_2 ( 1 , old0 ) ; try { curChar = input_stream . readChar ( ) ; } catch ( java . io . IOException e ) { jjStopStringLiteralDfa_2 ( 2 , active0 ) ; return 3 ; } switch ( curChar ) { case 101 : if ( ( active0 & 0x2000000L ) != 0L ) return jjStartNfaWithStates_2 ( 3 , 25 , 5 ) ; break ; case 115 : return jjMoveStringLiteralDfa4_2 ( active0 , 0x4000000L ) ; default : break ; } return jjStartNfa_2 ( 2 , active0 ) ; } private final int jjMoveStringLiteralDfa4_2 ( long old0 , long active0 ) { if ( ( ( active0 &= old0 ) ) == 0L ) return jjStartNfa_2 ( 2 , old0 ) ; try { curChar = input_stream . readChar ( ) ; } catch ( java . io . IOException e ) { jjStopStringLiteralDfa_2 ( 3 , active0 ) ; return 4 ; } switch ( curChar ) { case 101 : if ( ( active0 & 0x4000000L ) != 0L ) return jjStartNfaWithStates_2 ( 4 , 26 , 5 ) ; break ; default : break ; } return jjStartNfa_2 ( 3 , active0 ) ; } private final int jjMoveNfa_2 ( int startState , int curPos ) { int [ ] nextStates ; int startsAt = 0 ; jjnewStateCnt = 16 ; int i = 1 ; jjstateSet [ 0 ] = startState ; int j , kind = 0x7fffffff ; for ( ; ; ) { if ( ++ jjround == 0x7fffffff ) ReInitRounds ( ) ; if ( curChar < 64 ) { long l = 1L << curChar ; MatchLoop : do { switch ( jjstateSet [ -- i ] ) { case 3 : if ( curChar == 36 ) { if ( kind > 10 ) kind = 10 ; jjCheckNAddTwoStates ( 13 , 14 ) ; } else if ( curChar == 46 ) jjstateSet [ jjnewStateCnt ++ ] = 7 ; else if ( curChar == 35 ) jjstateSet [ jjnewStateCnt ++ ] = 2 ; break ; case 0 : if ( curChar == 42 ) jjstateSet [ jjnewStateCnt ++ ] = 1 ; break ; case 1 : if ( ( 0xfffffff7ffffffffL & l ) != 0L && kind > 13 ) kind = 13 ; break ; case 2 : if ( curChar == 42 ) jjstateSet [ jjnewStateCnt ++ ] = 0 ; break ; case 5 : if ( ( 0x3ff200000000000L & l ) == 0L ) break ; if ( kind > 56 ) kind = 56 ; jjstateSet [ jjnewStateCnt ++ ] = 5 ; break ; case 6 : if ( curChar == 46 ) jjstateSet [ jjnewStateCnt ++ ] = 7 ; break ; case 10 : if ( curChar == 36 && kind > 10 ) kind = 10 ; break ; case 12 : if ( curChar == 36 ) jjCheckNAddTwoStates ( 13 , 14 ) ; break ; case 14 : if ( curChar == 33 && kind > 11 ) kind = 11 ; break ; case 15 : if ( curChar != 36 ) break ; if ( kind > 10 ) kind = 10 ; jjCheckNAddTwoStates ( 13 , 14 ) ; break ; default : break ; } } while ( i != startsAt ) ; } else if ( curChar < 128 ) { long l = 1L << ( curChar & 077 ) ; MatchLoop : do { switch ( jjstateSet [ -- i ] ) { case 3 : if ( ( 0x7fffffe87fffffeL & l ) != 0L ) { if ( kind > 56 ) kind = 56 ; jjCheckNAdd ( 5 ) ; } else if ( curChar == 92 ) jjCheckNAddStates ( 40 , 43 ) ; break ; case 1 : if ( kind > 13 ) kind = 13 ; break ; case 4 : case 5 : if ( ( 0x7fffffe87fffffeL & l ) == 0L ) break ; if ( kind > 56 ) kind = 56 ; jjCheckNAdd ( 5 ) ; break ; case 7 : if ( ( 0x7fffffe07fffffeL & l ) != 0L && kind > 57 ) kind = 57 ; break ; case 8 : if ( curChar == 92 ) jjCheckNAddStates ( 40 , 43 ) ; break ; case 9 : if ( curChar == 92 ) jjCheckNAddTwoStates ( 9 , 10 ) ; break ; case 11 : if ( curChar == 92 ) jjCheckNAddTwoStates ( 11 , 12 ) ; break ; case 13 : if ( curChar == 92 ) jjAddStates ( 46 , 47 ) ; break ; default : break ; } } while ( i != startsAt ) ; } else { int hiByte = ( int ) ( curChar > > 8 ) ; int i1 = hiByte > > 6 ; long l1 = 1L << ( hiByte & 077 ) ; int i2 = ( curChar & 0xff ) > > 6 ; long l2 = 1L << ( curChar & 077 ) ; MatchLoop : do { switch ( jjstateSet [ -- i ] ) { case 1 : if ( jjCanMove_0 ( hiByte , i1 , i2 , l1 , l2 ) && kind > 13 ) kind = 13 ; break ; default : break ; } } while ( i != startsAt ) ; } if ( kind != 0x7fffffff ) { jjmatchedKind = kind ; jjmatchedPos = curPos ; kind = 0x7fffffff ; } ++ curPos ; if ( ( i = jjnewStateCnt ) == ( startsAt = 16 - ( jjnewStateCnt = startsAt ) ) ) return curPos ; try { curChar = input_stream . readChar ( ) ; } catch ( java . io . IOException e ) { return curPos ; } } } static final int [ ] jjnextStates = { 22 , 23 , 26 , 11 , 12 , 13 , 1 , 2 , 4 , 11 , 16 , 12 , 13 , 19 , 20 , 24 , 25 , 35 , 36 , 37 , 38 , 14 , 15 , 17 , 19 , 20 , 39 , 40 , 5 , 6 , 7 , 8 , 9 , 10 , 24 , 25 , 27 , 18 , 19 , 21 , 9 , 10 , 11 , 12 , 22 , 29 , 13 , 14 , 2 , 3 , 18 , 19 , 20 , 21 , 22 , 23 , 8 , 9 , 10 , 11 , 12 , 13 , 17 , 18 , 21 , 6 , 7 , 8 , 6 , 11 , 7 , 8 , 14 , 15 , 29 , 30 , 31 , 32 , 9 , 10 , 12 , 14 , 15 , 33 , 34 , } ; private static final boolean jjCanMove_0 ( int hiByte , int i1 , int i2 , long l1 , long l2 ) { switch ( hiByte ) { case 0 : return ( ( jjbitVec2 [ i2 ] & l2 ) != 0L ) ; default : if ( ( jjbitVec0 [ i1 ] & l1 ) != 0L ) return true ; return false ; } } public static final String [ ] jjstrLiteralImages = { null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , } ; public static final String [ ] lexStateNames = { "DIRECTIVE" , "REFMOD2" , "REFMODIFIER" , "DEFAULT" , "PRE_DIRECTIVE" , "REFERENCE" , "IN_MULTI_LINE_COMMENT" , "IN_FORMAL_COMMENT" , "IN_SINGLE_LINE_COMMENT" , } ; public static final int [ ] jjnewLexState = { - 1 , - 1 , - 1 , - 1 , - 1 , - 1 , - 1 , - 1 , - 1 , - 1 , - 1 , - 1 , - 1 , - 1 , - 1 , - 1 , - 1 , - 1 , - 1 , - 1 , - 1 , - 1 , - 1 , - 1 , - 1 , - 1 , - 1 , - 1 , - 1 , - 1 , - 1 , - 1 , - 1 , - 1 , - 1 , - 1 , - 1 , - 1 , - 1 , - 1 , - 1 , - 1 , - 1 , - 1 , - 1 , - 1 , - 1 , - 1 , - 1 , - 1 , - 1 , - 1 , - 1 , - 1 , - 1 , - 1 , - 1 , - 1 , - 1 , - 1 , - 1 , - 1 , } ; static final long [ ] jjtoToken = { 0xf12ffffffbf03ffL , } ; static final long [ ] jjtoSkip = { 0x3000000000000000L , } ; static final long [ ] jjtoSpecial = { 0x3000000000000000L , } ; static final long [ ] jjtoMore = { 0x40fc00L , } ; private CharStream input_stream ; private final int [ ] jjrounds = new int [ 42 ] ; private final int [ ] jjstateSet = new int [ 84 ] ; StringBuffer image ; int jjimageLen ; int lengthOfMatch ; protected char curChar ; public ParserTokenManager ( CharStream stream ) { input_stream = stream ; } public ParserTokenManager ( CharStream stream , int lexState ) { this ( stream ) ; SwitchTo ( lexState ) ; } public void ReInit ( CharStream stream ) { jjmatchedPos = jjnewStateCnt = 0 ; curLexState = defaultLexState ; input_stream = stream ; ReInitRounds ( ) ; } private final void ReInitRounds ( ) { int i ; jjround = 0x80000001 ; for ( i = 42 ; i -- > 0 ; ) jjrounds [ i ] = 0x80000000 ; } public void ReInit ( CharStream stream , int lexState ) { ReInit ( stream ) ; SwitchTo ( lexState ) ; } public void SwitchTo ( int lexState ) { if ( lexState >= 9 || lexState < 0 ) throw new TokenMgrError ( "Error: Ignoring invalid lexical state : " + lexState + ". State unchanged." , TokenMgrError . INVALID_LEXICAL_STATE ) ; else curLexState = lexState ; } private final Token jjFillToken ( ) { Token t = Token . newToken ( jjmatchedKind ) ; t . kind = jjmatchedKind ; String im = jjstrLiteralImages [ jjmatchedKind ] ; t . image = ( im == null ) ? input_stream . GetImage ( ) : im ; t . beginLine = input_stream . getBeginLine ( ) ; t . beginColumn = input_stream . getBeginColumn ( ) ; t . endLine = input_stream . getEndLine ( ) ; t . endColumn = input_stream . getEndColumn ( ) ; return t ; } int curLexState = 3 ; int defaultLexState = 3 ; int jjnewStateCnt ; int jjround ; int jjmatchedPos ; int jjmatchedKind ; public final Token getNextToken ( ) { int kind ; Token specialToken = null ; Token matchedToken ; int curPos = 0 ; EOFLoop : for ( ; ; ) { try { curChar = input_stream . BeginToken ( ) ; } catch ( java . io . IOException e ) { jjmatchedKind = 0 ; matchedToken = jjFillToken ( ) ; matchedToken . specialToken = specialToken ; return matchedToken ; } image = null ; jjimageLen = 0 ; for ( ; ; ) { switch ( curLexState ) { case 0 : jjmatchedKind = 0x7fffffff ; jjmatchedPos = 0 ; curPos = jjMoveStringLiteralDfa0_0 ( ) ; break ; case 1 : jjmatchedKind = 0x7fffffff ; jjmatchedPos = 0 ; curPos = jjMoveStringLiteralDfa0_1 ( ) ; if ( jjmatchedPos == 0 && jjmatchedKind > 60 ) { jjmatchedKind = 60 ; } break ; case 2 : jjmatchedKind = 0x7fffffff ; jjmatchedPos = 0 ; curPos = jjMoveStringLiteralDfa0_2 ( ) ; if ( jjmatchedPos == 0 && jjmatchedKind > 60 ) { jjmatchedKind = 60 ; } break ; case 3 : jjmatchedKind = 0x7fffffff ; jjmatchedPos = 0 ; curPos = jjMoveStringLiteralDfa0_3 ( ) ; break ; case 4 : jjmatchedKind = 0x7fffffff ; jjmatchedPos = 0 ; curPos = jjMoveStringLiteralDfa0_4 ( ) ; if ( jjmatchedPos == 0 && jjmatchedKind > 61 ) { jjmatchedKind = 61 ; } break ; case 5 : jjmatchedKind = 0x7fffffff ; jjmatchedPos = 0 ; curPos = jjMoveStringLiteralDfa0_5 ( ) ; if ( jjmatchedPos == 0 && jjmatchedKind > 60 ) { jjmatchedKind = 60 ; } break ; case 6 : jjmatchedKind = 0x7fffffff ; jjmatchedPos = 0 ; curPos = jjMoveStringLiteralDfa0_6 ( ) ; if ( jjmatchedPos == 0 && jjmatchedKind > 22 ) { jjmatchedKind = 22 ; } break ; case 7 : jjmatchedKind = 0x7fffffff ; jjmatchedPos = 0 ; curPos = jjMoveStringLiteralDfa0_7 ( ) ; if ( jjmatchedPos == 0 && jjmatchedKind > 22 ) { jjmatchedKind = 22 ; } break ; case 8 : jjmatchedKind = 0x7fffffff ; jjmatchedPos = 0 ; curPos = jjMoveStringLiteralDfa0_8 ( ) ; if ( jjmatchedPos == 0 && jjmatchedKind > 22 ) { jjmatchedKind = 22 ; } break ; } if ( jjmatchedKind != 0x7fffffff ) { if ( jjmatchedPos + 1 < curPos ) input_stream . backup ( curPos - jjmatchedPos - 1 ) ; if ( ( jjtoToken [ jjmatchedKind > > 6 ] & ( 1L << ( jjmatchedKind & 077 ) ) ) != 0L ) { matchedToken = jjFillToken ( ) ; matchedToken . specialToken = specialToken ; TokenLexicalActions ( matchedToken ) ; if ( jjnewLexState [ jjmatchedKind ] != - 1 ) curLexState = jjnewLexState [ jjmatchedKind ] ; return matchedToken ; } else if ( ( jjtoSkip [ jjmatchedKind > > 6 ] & ( 1L << ( jjmatchedKind & 077 ) ) ) != 0L ) { if ( ( jjtoSpecial [ jjmatchedKind > > 6 ] & ( 1L << ( jjmatchedKind & 077 ) ) ) != 0L ) { matchedToken = jjFillToken ( ) ; if ( specialToken == null ) specialToken = matchedToken ; else { matchedToken . specialToken = specialToken ; specialToken = ( specialToken . next = matchedToken ) ; } SkipLexicalActions ( matchedToken ) ; } else SkipLexicalActions ( null ) ; if ( jjnewLexState [ jjmatchedKind ] != - 1 ) curLexState = jjnewLexState [ jjmatchedKind ] ; continue EOFLoop ; } MoreLexicalActions ( ) ; if ( jjnewLexState [ jjmatchedKind ] != - 1 ) curLexState = jjnewLexState [ jjmatchedKind ] ; curPos = 0 ; jjmatchedKind = 0x7fffffff ; try { curChar = input_stream . readChar ( ) ; continue ; } catch ( java . io . IOException e1 ) { } } int error_line = input_stream . getEndLine ( ) ; int error_column = input_stream . getEndColumn ( ) ; String error_after = null ; boolean EOFSeen = false ; try { input_stream . readChar ( ) ; input_stream . backup ( 1 ) ; } catch ( java . io . IOException e1 ) { EOFSeen = true ; error_after = curPos <= 1 ? "" : input_stream . GetImage ( ) ; if ( curChar == '\n' || curChar == '\r' ) { error_line ++ ; error_column = 0 ; } else error_column ++ ; } if ( ! EOFSeen ) { input_stream . backup ( 1 ) ; error_after = curPos <= 1 ? "" : input_stream . GetImage ( ) ; } throw new TokenMgrError ( EOFSeen , curLexState , error_line , error_column , error_after , curChar , TokenMgrError . LEXICAL_ERROR ) ; } } } final void SkipLexicalActions ( Token matchedToken ) { switch ( jjmatchedKind ) { case 60 : if ( image == null ) image = new StringBuffer ( new String ( input_stream . GetSuffix ( jjimageLen + ( lengthOfMatch = jjmatchedPos + 1 ) ) ) ) ; else image . append ( input_stream . GetSuffix ( jjimageLen + ( lengthOfMatch = jjmatchedPos + 1 ) ) ) ; input_stream . backup ( 1 ) ; inReference = false ; if ( debugPrint ) System . out . print ( "REF_TERM :" ) ; stateStackPop ( ) ; break ; case 61 : if ( image == null ) image = new StringBuffer ( new String ( input_stream . GetSuffix ( jjimageLen + ( lengthOfMatch = jjmatchedPos + 1 ) ) ) ) ; else image . append ( input_stream . GetSuffix ( jjimageLen + ( lengthOfMatch = jjmatchedPos + 1 ) ) ) ; if ( debugPrint ) System . out . print ( "DIRECTIVE_TERM :" ) ; input_stream . backup ( 1 ) ; inDirective = false ; stateStackPop ( ) ; break ; default : break ; } } final void MoreLexicalActions ( ) { jjimageLen += ( lengthOfMatch = jjmatchedPos + 1 ) ; switch ( jjmatchedKind ) { case 10 : if ( image == null ) image = new StringBuffer ( new String ( input_stream . GetSuffix ( jjimageLen ) ) ) ; else image . append ( input_stream . GetSuffix ( jjimageLen ) ) ; jjimageLen = 0 ; if ( ! inComment ) { if ( curLexState == REFERENCE ) { inReference = false ; stateStackPop ( ) ; } inReference = true ; if ( debugPrint ) System . out . print ( "$  : going to " + REFERENCE ) ; stateStackPush ( ) ; SwitchTo ( REFERENCE ) ; } break ; case 11 : if ( image == null ) image = new StringBuffer ( new String ( input_stream . GetSuffix ( jjimageLen ) ) ) ; else image . append ( input_stream . GetSuffix ( jjimageLen ) ) ; jjimageLen = 0 ; if ( ! inComment ) { if ( curLexState == REFERENCE ) { inReference = false ; stateStackPop ( ) ; } inReference = true ; if ( debugPrint ) System . out . print ( "$!  : going to " + REFERENCE ) ; stateStackPush ( ) ; SwitchTo ( REFERENCE ) ; } break ; case 12 : if ( image == null ) image = new StringBuffer ( new String ( input_stream . GetSuffix ( jjimageLen ) ) ) ; else image . append ( input_stream . GetSuffix ( jjimageLen ) ) ; jjimageLen = 0 ; if ( ! inComment ) { if ( curLexState == REFERENCE ) { inReference = false ; stateStackPop ( ) ; } inComment = true ; stateStackPush ( ) ; SwitchTo ( IN_SINGLE_LINE_COMMENT ) ; } break ; case 13 : if ( image == null ) image = new StringBuffer ( new String ( input_stream . GetSuffix ( jjimageLen ) ) ) ; else image . append ( input_stream . GetSuffix ( jjimageLen ) ) ; jjimageLen = 0 ; input_stream . backup ( 1 ) ; inComment = true ; stateStackPush ( ) ; SwitchTo ( IN_FORMAL_COMMENT ) ; break ; case 14 : if ( image == null ) image = new StringBuffer ( new String ( input_stream . GetSuffix ( jjimageLen ) ) ) ; else image . append ( input_stream . GetSuffix ( jjimageLen ) ) ; jjimageLen = 0 ; inComment = true ; stateStackPush ( ) ; SwitchTo ( IN_MULTI_LINE_COMMENT ) ; break ; case 15 : if ( image == null ) image = new StringBuffer ( new String ( input_stream . GetSuffix ( jjimageLen ) ) ) ; else image . append ( input_stream . GetSuffix ( jjimageLen ) ) ; jjimageLen = 0 ; if ( ! inComment ) { if ( curLexState == REFERENCE || curLexState == REFMODIFIER ) { inReference = false ; stateStackPop ( ) ; } inDirective = true ; if ( debugPrint ) System . out . print ( "# :  going to " + DIRECTIVE ) ; stateStackPush ( ) ; SwitchTo ( PRE_DIRECTIVE ) ; } break ; default : break ; } } final void TokenLexicalActions ( Token matchedToken ) { switch ( jjmatchedKind ) { case 5 : if ( image == null ) image = new StringBuffer ( new String ( input_stream . GetSuffix ( jjimageLen + ( lengthOfMatch = jjmatchedPos + 1 ) ) ) ) ; else image . append ( input_stream . GetSuffix ( jjimageLen + ( lengthOfMatch = jjmatchedPos + 1 ) ) ) ; if ( ! inComment ) lparen ++ ; if ( curLexState == REFMODIFIER ) SwitchTo ( REFMOD2 ) ; break ; case 6 : if ( image == null ) image = new StringBuffer ( new String ( input_stream . GetSuffix ( jjimageLen + ( lengthOfMatch = jjmatchedPos + 1 ) ) ) ) ; else image . append ( input_stream . GetSuffix ( jjimageLen + ( lengthOfMatch = jjmatchedPos + 1 ) ) ) ; RPARENHandler ( ) ; break ; case 7 : if ( image == null ) image = new StringBuffer ( new String ( input_stream . GetSuffix ( jjimageLen + ( lengthOfMatch = jjmatchedPos + 1 ) ) ) ) ; else image . append ( input_stream . GetSuffix ( jjimageLen + ( lengthOfMatch = jjmatchedPos + 1 ) ) ) ; SwitchTo ( REFERENCE ) ; break ; case 9 : if ( image == null ) image = new StringBuffer ( new String ( input_stream . GetSuffix ( jjimageLen + ( lengthOfMatch = jjmatchedPos + 1 ) ) ) ) ; else image . append ( input_stream . GetSuffix ( jjimageLen + ( lengthOfMatch = jjmatchedPos + 1 ) ) ) ; if ( ! inComment ) { inDirective = true ; if ( debugPrint ) System . out . print ( "#set :  going to " + DIRECTIVE ) ; stateStackPush ( ) ; inSet = true ; SwitchTo ( DIRECTIVE ) ; } if ( ! inComment ) { lparen ++ ; if ( curLexState == REFMODIFIER ) SwitchTo ( REFMOD2 ) ; } break ; case 19 : if ( image == null ) image = new StringBuffer ( new String ( input_stream . GetSuffix ( jjimageLen + ( lengthOfMatch = jjmatchedPos + 1 ) ) ) ) ; else image . append ( input_stream . GetSuffix ( jjimageLen + ( lengthOfMatch = jjmatchedPos + 1 ) ) ) ; inComment = false ; stateStackPop ( ) ; break ; case 20 : if ( image == null ) image = new StringBuffer ( new String ( input_stream . GetSuffix ( jjimageLen + ( lengthOfMatch = jjmatchedPos + 1 ) ) ) ) ; else image . append ( input_stream . GetSuffix ( jjimageLen + ( lengthOfMatch = jjmatchedPos + 1 ) ) ) ; inComment = false ; stateStackPop ( ) ; break ; case 21 : if ( image == null ) image = new StringBuffer ( new String ( input_stream . GetSuffix ( jjimageLen + ( lengthOfMatch = jjmatchedPos + 1 ) ) ) ) ; else image . append ( input_stream . GetSuffix ( jjimageLen + ( lengthOfMatch = jjmatchedPos + 1 ) ) ) ; inComment = false ; stateStackPop ( ) ; break ; case 24 : if ( image == null ) image = new StringBuffer ( new String ( input_stream . GetSuffix ( jjimageLen + ( lengthOfMatch = jjmatchedPos + 1 ) ) ) ) ; else image . append ( input_stream . GetSuffix ( jjimageLen + ( lengthOfMatch = jjmatchedPos + 1 ) ) ) ; if ( curLexState == DIRECTIVE && ! inSet && lparen == 0 ) stateStackPop ( ) ; break ; case 27 : if ( image == null ) image = new StringBuffer ( new String ( input_stream . GetSuffix ( jjimageLen + ( lengthOfMatch = jjmatchedPos + 1 ) ) ) ) ; else image . append ( input_stream . GetSuffix ( jjimageLen + ( lengthOfMatch = jjmatchedPos + 1 ) ) ) ; if ( debugPrint ) System . out . println ( " NEWLINE :" ) ; stateStackPop ( ) ; if ( inSet ) inSet = false ; if ( inDirective ) inDirective = false ; break ; case 43 : if ( image == null ) image = new StringBuffer ( new String ( input_stream . GetSuffix ( jjimageLen + ( lengthOfMatch = jjmatchedPos + 1 ) ) ) ) ; else image . append ( input_stream . GetSuffix ( jjimageLen + ( lengthOfMatch = jjmatchedPos + 1 ) ) ) ; inDirective = false ; stateStackPop ( ) ; break ; case 44 : if ( image == null ) image = new StringBuffer ( new String ( input_stream . GetSuffix ( jjimageLen + ( lengthOfMatch = jjmatchedPos + 1 ) ) ) ) ; else image . append ( input_stream . GetSuffix ( jjimageLen + ( lengthOfMatch = jjmatchedPos + 1 ) ) ) ; SwitchTo ( DIRECTIVE ) ; break ; case 45 : if ( image == null ) image = new StringBuffer ( new String ( input_stream . GetSuffix ( jjimageLen + ( lengthOfMatch = jjmatchedPos + 1 ) ) ) ) ; else image . append ( input_stream . GetSuffix ( jjimageLen + ( lengthOfMatch = jjmatchedPos + 1 ) ) ) ; SwitchTo ( DIRECTIVE ) ; break ; case 46 : if ( image == null ) image = new StringBuffer ( new String ( input_stream . GetSuffix ( jjimageLen + ( lengthOfMatch = jjmatchedPos + 1 ) ) ) ) ; else image . append ( input_stream . GetSuffix ( jjimageLen + ( lengthOfMatch = jjmatchedPos + 1 ) ) ) ; inDirective = false ; stateStackPop ( ) ; break ; case 47 : if ( image == null ) image = new StringBuffer ( new String ( input_stream . GetSuffix ( jjimageLen + ( lengthOfMatch = jjmatchedPos + 1 ) ) ) ) ; else image . append ( input_stream . GetSuffix ( jjimageLen + ( lengthOfMatch = jjmatchedPos + 1 ) ) ) ; matchedToken . kind = EOF ; fileDepth = 0 ; break ; case 49 : if ( image == null ) image = new StringBuffer ( new String ( input_stream . GetSuffix ( jjimageLen + ( lengthOfMatch = jjmatchedPos + 1 ) ) ) ) ; else image . append ( input_stream . GetSuffix ( jjimageLen + ( lengthOfMatch = jjmatchedPos + 1 ) ) ) ; if ( lparen == 0 && ! inSet && curLexState != REFMOD2 ) { stateStackPop ( ) ; } break ; case 57 : if ( image == null ) image = new StringBuffer ( new String ( input_stream . GetSuffix ( jjimageLen + ( lengthOfMatch = jjmatchedPos + 1 ) ) ) ) ; else image . append ( input_stream . GetSuffix ( jjimageLen + ( lengthOfMatch = jjmatchedPos + 1 ) ) ) ; input_stream . backup ( 1 ) ; matchedToken . image = "." ; if ( debugPrint ) System . out . print ( "DOT : switching to " + REFMODIFIER ) ; SwitchTo ( REFMODIFIER ) ; break ; case 59 : if ( image == null ) image = new StringBuffer ( new String ( input_stream . GetSuffix ( jjimageLen + ( lengthOfMatch = jjmatchedPos + 1 ) ) ) ) ; else image . append ( input_stream . GetSuffix ( jjimageLen + ( lengthOfMatch = jjmatchedPos + 1 ) ) ) ; stateStackPop ( ) ; break ; default : break ; } } } 	0
package org . apache . velocity . app . event ; import org . apache . velocity . context . InternalEventContext ; import org . apache . velocity . context . Context ; public class EventCartridge implements ReferenceInsertionEventHandler , NullSetEventHandler , MethodExceptionEventHandler { private ReferenceInsertionEventHandler rieh = null ; private NullSetEventHandler nseh = null ; private MethodExceptionEventHandler meeh = null ; public boolean addEventHandler ( EventHandler ev ) { if ( ev == null ) { return false ; } boolean found = false ; if ( ev instanceof ReferenceInsertionEventHandler ) { rieh = ( ReferenceInsertionEventHandler ) ev ; found = true ; } if ( ev instanceof NullSetEventHandler ) { nseh = ( NullSetEventHandler ) ev ; found = true ; } if ( ev instanceof MethodExceptionEventHandler ) { meeh = ( MethodExceptionEventHandler ) ev ; found = true ; } return found ; } public boolean removeEventHandler ( EventHandler ev ) { if ( ev == null ) { return false ; } boolean found = false ; if ( ev == rieh ) { rieh = null ; found = true ; } if ( ev == nseh ) { nseh = null ; found = true ; } if ( ev == meeh ) { meeh = null ; found = true ; } return found ; } public Object referenceInsert ( String reference , Object value ) { if ( rieh == null ) { return value ; } return rieh . referenceInsert ( reference , value ) ; } public boolean shouldLogOnNullSet ( String lhs , String rhs ) { if ( nseh == null ) { return true ; } return nseh . shouldLogOnNullSet ( lhs , rhs ) ; } public Object methodException ( Class claz , String method , Exception e ) throws Exception { if ( meeh == null ) { throw e ; } return meeh . methodException ( claz , method , e ) ; } public final boolean attachToContext ( Context context ) { if ( context instanceof InternalEventContext ) { InternalEventContext iec = ( InternalEventContext ) context ; iec . attachEventCartridge ( this ) ; return true ; } else { return false ; } } } 	1
package org . apache . velocity . test ; import java . io . FileWriter ; import java . util . Iterator ; import java . util . Vector ; import org . apache . commons . collections . ExtendedProperties ; public class CommonsExtPropTestCase extends BaseTestCase { private static final String COMPARE_DIR = "../test/configuration/compare" ; private static final String RESULTS_DIR = "../test/configuration/results" ; private static final String TEST_CONFIG = "../test/configuration/test.config" ; public CommonsExtPropTestCase ( ) { super ( "CommonsExtPropTestCase" ) ; } public static junit . framework . Test suite ( ) { return new CommonsExtPropTestCase ( ) ; } public void runTest ( ) { try { assureResultsDirectoryExists ( RESULTS_DIR ) ; ExtendedProperties c = new ExtendedProperties ( TEST_CONFIG ) ; FileWriter result = new FileWriter ( getFileName ( RESULTS_DIR , "output" , "res" ) ) ; message ( result , "Testing order of keys ..." ) ; showIterator ( result , c . getKeys ( ) ) ; message ( result , "Testing retrieval of CSV values ..." ) ; showVector ( result , c . getVector ( "resource.loader" ) ) ; message ( result , "Testing subset(prefix).getKeys() ..." ) ; ExtendedProperties subset = c . subset ( "file.resource.loader" ) ; showIterator ( result , subset . getKeys ( ) ) ; message ( result , "Testing getVector(prefix) ..." ) ; showVector ( result , subset . getVector ( "path" ) ) ; message ( result , "Testing getString(key) ..." ) ; result . write ( c . getString ( "config.string.value" ) ) ; result . write ( "\n\n" ) ; message ( result , "Testing getBoolean(key) ..." ) ; result . write ( new Boolean ( c . getBoolean ( "config.boolean.value" ) ) . toString ( ) ) ; result . write ( "\n\n" ) ; message ( result , "Testing getByte(key) ..." ) ; result . write ( new Byte ( c . getByte ( "config.byte.value" ) ) . toString ( ) ) ; result . write ( "\n\n" ) ; message ( result , "Testing getShort(key) ..." ) ; result . write ( new Short ( c . getShort ( "config.short.value" ) ) . toString ( ) ) ; result . write ( "\n\n" ) ; message ( result , "Testing getInt(key) ..." ) ; result . write ( new Integer ( c . getInt ( "config.int.value" ) ) . toString ( ) ) ; result . write ( "\n\n" ) ; message ( result , "Testing getLong(key) ..." ) ; result . write ( new Long ( c . getLong ( "config.long.value" ) ) . toString ( ) ) ; result . write ( "\n\n" ) ; message ( result , "Testing getFloat(key) ..." ) ; result . write ( new Float ( c . getFloat ( "config.float.value" ) ) . toString ( ) ) ; result . write ( "\n\n" ) ; message ( result , "Testing getDouble(key) ..." ) ; result . write ( new Double ( c . getDouble ( "config.double.value" ) ) . toString ( ) ) ; result . write ( "\n\n" ) ; message ( result , "Testing escaped-comma scalar..." ) ; result . write ( c . getString ( "escape.comma1" ) ) ; result . write ( "\n\n" ) ; message ( result , "Testing escaped-comma vector..." ) ; showVector ( result , c . getVector ( "escape.comma2" ) ) ; result . write ( "\n\n" ) ; result . flush ( ) ; result . close ( ) ; if ( ! isMatch ( RESULTS_DIR , COMPARE_DIR , "output" , "res" , "cmp" ) ) { fail ( "Output incorrect." ) ; } } catch ( Exception e ) { System . err . println ( "Cannot setup CommonsExtPropTestCase!" ) ; e . printStackTrace ( ) ; System . exit ( 1 ) ; } } private void showIterator ( FileWriter result , Iterator i ) throws Exception { while ( i . hasNext ( ) ) { result . write ( ( String ) i . next ( ) ) ; result . write ( "\n" ) ; } result . write ( "\n" ) ; } private void showVector ( FileWriter result , Vector v ) throws Exception { for ( int j = 0 ; j < v . size ( ) ; j ++ ) { result . write ( ( String ) v . get ( j ) ) ; result . write ( "\n" ) ; } result . write ( "\n" ) ; } private void message ( FileWriter result , String message ) throws Exception { result . write ( "--------------------------------------------------\n" ) ; result . write ( message + "\n" ) ; result . write ( "--------------------------------------------------\n" ) ; result . write ( "\n" ) ; } } 	0
package org . apache . velocity . exception ; public class MethodInvocationException extends VelocityException { private String methodName = "" ; private String referenceName = "" ; private Throwable wrapped = null ; public MethodInvocationException ( String message , Throwable e , String methodName ) { super ( message ) ; this . wrapped = e ; this . methodName = methodName ; } public String getMethodName ( ) { return methodName ; } public Throwable getWrappedThrowable ( ) { return wrapped ; } public void setReferenceName ( String ref ) { referenceName = ref ; } public String getReferenceName ( ) { return referenceName ; } } 	1
package org . apache . velocity . test ; import java . io . BufferedWriter ; import java . io . FileOutputStream ; import java . io . OutputStreamWriter ; import java . io . Writer ; import java . io . File ; import java . util . Properties ; import org . apache . velocity . VelocityContext ; import org . apache . velocity . Template ; import org . apache . velocity . app . Velocity ; import org . apache . velocity . runtime . RuntimeSingleton ; import org . apache . velocity . test . provider . TestProvider ; import org . apache . velocity . util . StringUtils ; import org . apache . velocity . runtime . VelocimacroFactory ; import junit . framework . TestCase ; public class MultipleFileResourcePathTest extends BaseTestCase { private static final String TMPL_FILE_EXT = "vm" ; private static final String CMP_FILE_EXT = "cmp" ; private static final String RESULT_FILE_EXT = "res" ; private final static String FILE_RESOURCE_LOADER_PATH1 = "../test/multi/path1" ; private final static String FILE_RESOURCE_LOADER_PATH2 = "../test/multi/path2" ; private static final String RESULTS_DIR = "../test/multi/results" ; private static final String COMPARE_DIR = "../test/multi/compare" ; MultipleFileResourcePathTest ( ) { super ( "MultipleFileResourcePathTest" ) ; try { assureResultsDirectoryExists ( RESULTS_DIR ) ; Velocity . addProperty ( Velocity . FILE_RESOURCE_LOADER_PATH , FILE_RESOURCE_LOADER_PATH1 ) ; Velocity . addProperty ( Velocity . FILE_RESOURCE_LOADER_PATH , FILE_RESOURCE_LOADER_PATH2 ) ; Velocity . init ( ) ; } catch ( Exception e ) { System . err . println ( "Cannot setup MultipleFileResourcePathTest!" ) ; e . printStackTrace ( ) ; System . exit ( 1 ) ; } } public static junit . framework . Test suite ( ) { return new MultipleFileResourcePathTest ( ) ; } public void runTest ( ) { try { Template template1 = RuntimeSingleton . getTemplate ( getFileName ( null , "path1" , TMPL_FILE_EXT ) ) ; Template template2 = RuntimeSingleton . getTemplate ( getFileName ( null , "path2" , TMPL_FILE_EXT ) ) ; FileOutputStream fos1 = new FileOutputStream ( getFileName ( RESULTS_DIR , "path1" , RESULT_FILE_EXT ) ) ; FileOutputStream fos2 = new FileOutputStream ( getFileName ( RESULTS_DIR , "path2" , RESULT_FILE_EXT ) ) ; Writer writer1 = new BufferedWriter ( new OutputStreamWriter ( fos1 ) ) ; Writer writer2 = new BufferedWriter ( new OutputStreamWriter ( fos2 ) ) ; VelocityContext context = new VelocityContext ( ) ; template1 . merge ( context , writer1 ) ; writer1 . flush ( ) ; writer1 . close ( ) ; template2 . merge ( context , writer2 ) ; writer2 . flush ( ) ; writer2 . close ( ) ; if ( ! isMatch ( RESULTS_DIR , COMPARE_DIR , "path1" , RESULT_FILE_EXT , CMP_FILE_EXT ) || ! isMatch ( RESULTS_DIR , COMPARE_DIR , "path2" , RESULT_FILE_EXT , CMP_FILE_EXT ) ) { fail ( "Output incorrect." ) ; } } catch ( Exception e ) { fail ( e . getMessage ( ) ) ; } } } 	0
package org . apache . velocity . util . introspection ; import java . util . Map ; import java . util . List ; import java . util . Hashtable ; import java . lang . reflect . Method ; import java . lang . reflect . Modifier ; public class ClassMap { private static final class CacheMiss { } private static final CacheMiss CACHE_MISS = new CacheMiss ( ) ; private static final Object OBJECT = new Object ( ) ; private Class clazz ; private Map methodCache = new Hashtable ( ) ; private MethodMap methodMap = new MethodMap ( ) ; public ClassMap ( Class clazz ) { this . clazz = clazz ; populateMethodCache ( ) ; } private ClassMap ( ) { } Class getCachedClass ( ) { return clazz ; } public Method findMethod ( String name , Object [ ] params ) throws MethodMap . AmbiguousException { String methodKey = makeMethodKey ( name , params ) ; Object cacheEntry = methodCache . get ( methodKey ) ; if ( cacheEntry == CACHE_MISS ) { return null ; } if ( cacheEntry == null ) { try { cacheEntry = methodMap . find ( name , params ) ; } catch ( MethodMap . AmbiguousException ae ) { methodCache . put ( methodKey , CACHE_MISS ) ; throw ae ; } if ( cacheEntry == null ) { methodCache . put ( methodKey , CACHE_MISS ) ; } else { methodCache . put ( methodKey , cacheEntry ) ; } } return ( Method ) cacheEntry ; } private void populateMethodCache ( ) { StringBuffer methodKey ; Method [ ] methods = getAccessibleMethods ( clazz ) ; for ( int i = 0 ; i < methods . length ; i ++ ) { Method method = methods [ i ] ; Method publicMethod = getPublicMethod ( method ) ; if ( publicMethod != null ) { methodMap . add ( publicMethod ) ; methodCache . put ( makeMethodKey ( publicMethod ) , publicMethod ) ; } } } private String makeMethodKey ( Method method ) { Class [ ] parameterTypes = method . getParameterTypes ( ) ; StringBuffer methodKey = new StringBuffer ( method . getName ( ) ) ; for ( int j = 0 ; j < parameterTypes . length ; j ++ ) { if ( parameterTypes [ j ] . isPrimitive ( ) ) { if ( parameterTypes [ j ] . equals ( Boolean . TYPE ) ) methodKey . append ( "java.lang.Boolean" ) ; else if ( parameterTypes [ j ] . equals ( Byte . TYPE ) ) methodKey . append ( "java.lang.Byte" ) ; else if ( parameterTypes [ j ] . equals ( Character . TYPE ) ) methodKey . append ( "java.lang.Character" ) ; else if ( parameterTypes [ j ] . equals ( Double . TYPE ) ) methodKey . append ( "java.lang.Double" ) ; else if ( parameterTypes [ j ] . equals ( Float . TYPE ) ) methodKey . append ( "java.lang.Float" ) ; else if ( parameterTypes [ j ] . equals ( Integer . TYPE ) ) methodKey . append ( "java.lang.Integer" ) ; else if ( parameterTypes [ j ] . equals ( Long . TYPE ) ) methodKey . append ( "java.lang.Long" ) ; else if ( parameterTypes [ j ] . equals ( Short . TYPE ) ) methodKey . append ( "java.lang.Short" ) ; } else { methodKey . append ( parameterTypes [ j ] . getName ( ) ) ; } } return methodKey . toString ( ) ; } private static String makeMethodKey ( String method , Object [ ] params ) { StringBuffer methodKey = new StringBuffer ( ) . append ( method ) ; for ( int j = 0 ; j < params . length ; j ++ ) { Object arg = params [ j ] ; if ( arg == null ) { arg = OBJECT ; } methodKey . append ( arg . getClass ( ) . getName ( ) ) ; } return methodKey . toString ( ) ; } private static Method [ ] getAccessibleMethods ( Class clazz ) { Method [ ] methods = clazz . getMethods ( ) ; if ( Modifier . isPublic ( clazz . getModifiers ( ) ) ) { return methods ; } MethodInfo [ ] methodInfos = new MethodInfo [ methods . length ] ; for ( int i = methods . length ; i -- > 0 ; ) { methodInfos [ i ] = new MethodInfo ( methods [ i ] ) ; } int upcastCount = getAccessibleMethods ( clazz , methodInfos , 0 ) ; if ( upcastCount < methods . length ) { methods = new Method [ upcastCount ] ; } int j = 0 ; for ( int i = 0 ; i < methodInfos . length ; ++ i ) { MethodInfo methodInfo = methodInfos [ i ] ; if ( methodInfo . upcast ) { methods [ j ++ ] = methodInfo . method ; } } return methods ; } private static int getAccessibleMethods ( Class clazz , MethodInfo [ ] methodInfos , int upcastCount ) { int l = methodInfos . length ; if ( Modifier . isPublic ( clazz . getModifiers ( ) ) ) { for ( int i = 0 ; i < l && upcastCount < l ; ++ i ) { try { MethodInfo methodInfo = methodInfos [ i ] ; if ( ! methodInfo . upcast ) { methodInfo . tryUpcasting ( clazz ) ; upcastCount ++ ; } } catch ( NoSuchMethodException e ) { } } if ( upcastCount == l ) { return upcastCount ; } } Class superclazz = clazz . getSuperclass ( ) ; if ( superclazz != null ) { upcastCount = getAccessibleMethods ( superclazz , methodInfos , upcastCount ) ; if ( upcastCount == l ) { return upcastCount ; } } Class [ ] interfaces = clazz . getInterfaces ( ) ; for ( int i = interfaces . length ; i -- > 0 ; ) { upcastCount = getAccessibleMethods ( interfaces [ i ] , methodInfos , upcastCount ) ; if ( upcastCount == l ) { return upcastCount ; } } return upcastCount ; } public static Method getPublicMethod ( Method method ) { Class clazz = method . getDeclaringClass ( ) ; if ( ( clazz . getModifiers ( ) & Modifier . PUBLIC ) != 0 ) { return method ; } return getPublicMethod ( clazz , method . getName ( ) , method . getParameterTypes ( ) ) ; } private static Method getPublicMethod ( Class clazz , String name , Class [ ] paramTypes ) { if ( ( clazz . getModifiers ( ) & Modifier . PUBLIC ) != 0 ) { try { return clazz . getMethod ( name , paramTypes ) ; } catch ( NoSuchMethodException e ) { return null ; } } Class superclazz = clazz . getSuperclass ( ) ; if ( superclazz != null ) { Method superclazzMethod = getPublicMethod ( superclazz , name , paramTypes ) ; if ( superclazzMethod != null ) { return superclazzMethod ; } } Class [ ] interfaces = clazz . getInterfaces ( ) ; for ( int i = 0 ; i < interfaces . length ; ++ i ) { Method interfaceMethod = getPublicMethod ( interfaces [ i ] , name , paramTypes ) ; if ( interfaceMethod != null ) { return interfaceMethod ; } } return null ; } private static final class MethodInfo { Method method ; String name ; Class [ ] parameterTypes ; boolean upcast ; MethodInfo ( Method method ) { this . method = null ; name = method . getName ( ) ; parameterTypes = method . getParameterTypes ( ) ; upcast = false ; } void tryUpcasting ( Class clazz ) throws NoSuchMethodException { method = clazz . getMethod ( name , parameterTypes ) ; name = null ; parameterTypes = null ; upcast = true ; } } } 	1
package org . apache . velocity . test ; import junit . framework . Test ; import junit . framework . TestCase ; import junit . framework . TestSuite ; import org . apache . velocity . app . VelocityEngine ; import org . apache . velocity . VelocityContext ; import org . apache . velocity . exception . ParseErrorException ; import java . io . StringWriter ; public class ParserTestCase extends TestCase { public ParserTestCase ( String testName ) { super ( testName ) ; } public static Test suite ( ) { return new TestSuite ( ParserTestCase . class ) ; } public void testEquals ( ) throws Exception { VelocityEngine ve = new VelocityEngine ( ) ; ve . init ( ) ; String template = "#if($a == $b) foo #end" ; ve . evaluate ( new VelocityContext ( ) , new StringWriter ( ) , "foo" , template ) ; template = "#if($a = $b) foo #end" ; try { ve . evaluate ( new VelocityContext ( ) , new StringWriter ( ) , "foo" , template ) ; assertTrue ( false ) ; } catch ( ParseErrorException pe ) { } } public void testMacro ( ) throws Exception { VelocityEngine ve = new VelocityEngine ( ) ; ve . init ( ) ; String template = "#macro(foo) foo #end" ; ve . evaluate ( new VelocityContext ( ) , new StringWriter ( ) , "foo" , template ) ; template = "#macro($x) foo #end" ; try { ve . evaluate ( new VelocityContext ( ) , new StringWriter ( ) , "foo" , template ) ; assertTrue ( false ) ; } catch ( ParseErrorException pe ) { } } public void testArgs ( ) throws Exception { VelocityEngine ve = new VelocityEngine ( ) ; ve . init ( ) ; String template = "#macro(foo) foo #end" ; ve . evaluate ( new VelocityContext ( ) , new StringWriter ( ) , "foo" , template ) ; template = "#foreach(  $i     in  $woogie   ) end #end" ; ve . evaluate ( new VelocityContext ( ) , new StringWriter ( ) , "foo" , template ) ; template = "#macro(   foo $a) $a #end #foo(woogie)" ; try { ve . evaluate ( new VelocityContext ( ) , new StringWriter ( ) , "foo" , template ) ; assertTrue ( false ) ; } catch ( ParseErrorException pe ) { System . out . println ( "Caught pee!" ) ; } } } 	0
package org . apache . velocity . util ; import java . io . File ; import java . io . FileReader ; import java . io . ByteArrayOutputStream ; import java . io . PrintWriter ; import java . net . MalformedURLException ; import java . util . ArrayList ; import java . util . Hashtable ; import java . util . List ; import java . util . StringTokenizer ; import java . util . Map ; public class StringUtils { private static final String EOL = System . getProperty ( "line.separator" ) ; private static final int EOL_LENGTH = EOL . length ( ) ; public String concat ( List list ) { StringBuffer sb = new StringBuffer ( ) ; int size = list . size ( ) ; for ( int i = 0 ; i < size ; i ++ ) { sb . append ( list . get ( i ) . toString ( ) ) ; } return sb . toString ( ) ; } static public String getPackageAsPath ( String pckge ) { return pckge . replace ( '.' , File . separator . charAt ( 0 ) ) + File . separator ; } static public String removeUnderScores ( String data ) { String temp = null ; StringBuffer out = new StringBuffer ( ) ; temp = data ; StringTokenizer st = new StringTokenizer ( temp , "_" ) ; while ( st . hasMoreTokens ( ) ) { String element = ( String ) st . nextElement ( ) ; out . append ( firstLetterCaps ( element ) ) ; } return out . toString ( ) ; } static public String removeAndHump ( String data ) { return removeAndHump ( data , "_" ) ; } static public String removeAndHump ( String data , String replaceThis ) { String temp = null ; StringBuffer out = new StringBuffer ( ) ; temp = data ; StringTokenizer st = new StringTokenizer ( temp , replaceThis ) ; while ( st . hasMoreTokens ( ) ) { String element = ( String ) st . nextElement ( ) ; out . append ( capitalizeFirstLetter ( element ) ) ; } return out . toString ( ) ; } static public String firstLetterCaps ( String data ) { String firstLetter = data . substring ( 0 , 1 ) . toUpperCase ( ) ; String restLetters = data . substring ( 1 ) . toLowerCase ( ) ; return firstLetter + restLetters ; } static public String capitalizeFirstLetter ( String data ) { String firstLetter = data . substring ( 0 , 1 ) . toUpperCase ( ) ; String restLetters = data . substring ( 1 ) ; return firstLetter + restLetters ; } public static String [ ] split ( String line , String delim ) { List list = new ArrayList ( ) ; StringTokenizer t = new StringTokenizer ( line , delim ) ; while ( t . hasMoreTokens ( ) ) { list . add ( t . nextToken ( ) ) ; } return ( String [ ] ) list . toArray ( new String [ list . size ( ) ] ) ; } public static String chop ( String s , int i ) { return chop ( s , i , EOL ) ; } public static String chop ( String s , int i , String eol ) { if ( i == 0 || s == null || eol == null ) { return s ; } int length = s . length ( ) ; if ( eol . length ( ) == 2 && s . endsWith ( eol ) ) { length -= 2 ; i -= 1 ; } if ( i > 0 ) { length -= i ; } if ( length < 0 ) { length = 0 ; } return s . substring ( 0 , length ) ; } public static StringBuffer stringSubstitution ( String argStr , Hashtable vars ) { return stringSubstitution ( argStr , ( Map ) vars ) ; } public static StringBuffer stringSubstitution ( String argStr , Map vars ) { StringBuffer argBuf = new StringBuffer ( ) ; for ( int cIdx = 0 ; cIdx < argStr . length ( ) ; ) { char ch = argStr . charAt ( cIdx ) ; switch ( ch ) { case '$' : StringBuffer nameBuf = new StringBuffer ( ) ; for ( ++ cIdx ; cIdx < argStr . length ( ) ; ++ cIdx ) { ch = argStr . charAt ( cIdx ) ; if ( ch == '_' || Character . isLetterOrDigit ( ch ) ) nameBuf . append ( ch ) ; else break ; } if ( nameBuf . length ( ) > 0 ) { String value = ( String ) vars . get ( nameBuf . toString ( ) ) ; if ( value != null ) { argBuf . append ( value ) ; } } break ; default : argBuf . append ( ch ) ; ++ cIdx ; break ; } } return argBuf ; } public static String fileContentsToString ( String file ) { String contents = "" ; File f = new File ( file ) ; if ( f . exists ( ) ) { try { FileReader fr = new FileReader ( f ) ; char [ ] template = new char [ ( int ) f . length ( ) ] ; fr . read ( template ) ; contents = new String ( template ) ; } catch ( Exception e ) { System . out . println ( e ) ; e . printStackTrace ( ) ; } } return contents ; } public static String collapseNewlines ( String argStr ) { char last = argStr . charAt ( 0 ) ; StringBuffer argBuf = new StringBuffer ( ) ; for ( int cIdx = 0 ; cIdx < argStr . length ( ) ; cIdx ++ ) { char ch = argStr . charAt ( cIdx ) ; if ( ch != '\n' || last != '\n' ) { argBuf . append ( ch ) ; last = ch ; } } return argBuf . toString ( ) ; } public static String collapseSpaces ( String argStr ) { char last = argStr . charAt ( 0 ) ; StringBuffer argBuf = new StringBuffer ( ) ; for ( int cIdx = 0 ; cIdx < argStr . length ( ) ; cIdx ++ ) { char ch = argStr . charAt ( cIdx ) ; if ( ch != ' ' || last != ' ' ) { argBuf . append ( ch ) ; last = ch ; } } return argBuf . toString ( ) ; } public static final String sub ( String line , String oldString , String newString ) { int i = 0 ; if ( ( i = line . indexOf ( oldString , i ) ) >= 0 ) { char [ ] line2 = line . toCharArray ( ) ; char [ ] newString2 = newString . toCharArray ( ) ; int oLength = oldString . length ( ) ; StringBuffer buf = new StringBuffer ( line2 . length ) ; buf . append ( line2 , 0 , i ) . append ( newString2 ) ; i += oLength ; int j = i ; while ( ( i = line . indexOf ( oldString , i ) ) > 0 ) { buf . append ( line2 , j , i - j ) . append ( newString2 ) ; i += oLength ; j = i ; } buf . append ( line2 , j , line2 . length - j ) ; return buf . toString ( ) ; } return line ; } public static final String stackTrace ( Throwable e ) { String foo = null ; try { ByteArrayOutputStream ostr = new ByteArrayOutputStream ( ) ; e . printStackTrace ( new PrintWriter ( ostr , true ) ) ; foo = ostr . toString ( ) ; } catch ( Exception f ) { } return foo ; } public static final String normalizePath ( String path ) { String normalized = path ; if ( normalized . indexOf ( '\\' ) >= 0 ) { normalized = normalized . replace ( '\\' , '/' ) ; } if ( ! normalized . startsWith ( "/" ) ) { normalized = "/" + normalized ; } while ( true ) { int index = normalized . indexOf ( "//" ) ; if ( index < 0 ) break ; normalized = normalized . substring ( 0 , index ) + normalized . substring ( index + 1 ) ; } while ( true ) { int index = normalized . indexOf ( "%20" ) ; if ( index < 0 ) break ; normalized = normalized . substring ( 0 , index ) + " " + normalized . substring ( index + 3 ) ; } while ( true ) { int index = normalized . indexOf ( "/./" ) ; if ( index < 0 ) break ; normalized = normalized . substring ( 0 , index ) + normalized . substring ( index + 2 ) ; } while ( true ) { int index = normalized . indexOf ( "/../" ) ; if ( index < 0 ) break ; if ( index == 0 ) return ( null ) ; int index2 = normalized . lastIndexOf ( '/' , index - 1 ) ; normalized = normalized . substring ( 0 , index2 ) + normalized . substring ( index + 3 ) ; } return ( normalized ) ; } public String select ( boolean state , String trueString , String falseString ) { if ( state ) { return trueString ; } else { return falseString ; } } public boolean allEmpty ( List list ) { int size = list . size ( ) ; for ( int i = 0 ; i < size ; i ++ ) { if ( list . get ( i ) != null && list . get ( i ) . toString ( ) . length ( ) > 0 ) { return false ; } } return true ; } } 	1
package org . apache . velocity . test . provider ; import java . util . * ; public class TestProvider { String title = "lunatic" ; boolean state ; Object ob = null ; public static String PUB_STAT_STRING = "Public Static String" ; int stateint = 0 ; public String getName ( ) { return "jason" ; } public Stack getStack ( ) { Stack stack = new Stack ( ) ; stack . push ( "stack element 1" ) ; stack . push ( "stack element 2" ) ; stack . push ( "stack element 3" ) ; return stack ; } public List getEmptyList ( ) { List list = new ArrayList ( ) ; return list ; } public List getList ( ) { List list = new ArrayList ( ) ; list . add ( "list element 1" ) ; list . add ( "list element 2" ) ; list . add ( "list element 3" ) ; return list ; } public Hashtable getSearch ( ) { Hashtable h = new Hashtable ( ) ; h . put ( "Text" , "this is some text" ) ; h . put ( "EscText" , "this is escaped text" ) ; h . put ( "Title" , "this is the title" ) ; h . put ( "Index" , "this is the index" ) ; h . put ( "URL" , "http://periapt.com" ) ; ArrayList al = new ArrayList ( ) ; al . add ( h ) ; h . put ( "RelatedLinks" , al ) ; return h ; } public Hashtable getHashtable ( ) { Hashtable h = new Hashtable ( ) ; h . put ( "key0" , "value0" ) ; h . put ( "key1" , "value1" ) ; h . put ( "key2" , "value2" ) ; return h ; } public ArrayList getRelSearches ( ) { ArrayList al = new ArrayList ( ) ; al . add ( getSearch ( ) ) ; return al ; } public String getTitle ( ) { return title ; } public void setTitle ( String title ) { this . title = title ; } public Object [ ] getMenu ( ) { Object [ ] menu = new Object [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { Hashtable item = new Hashtable ( ) ; item . put ( "id" , "item" + Integer . toString ( i + 1 ) ) ; item . put ( "name" , "name" + Integer . toString ( i + 1 ) ) ; item . put ( "label" , "label" + Integer . toString ( i + 1 ) ) ; menu [ i ] = item ; } return menu ; } public ArrayList getCustomers ( ) { ArrayList list = new ArrayList ( ) ; list . add ( "ArrayList element 1" ) ; list . add ( "ArrayList element 2" ) ; list . add ( "ArrayList element 3" ) ; list . add ( "ArrayList element 4" ) ; return list ; } public ArrayList getCustomers2 ( ) { ArrayList list = new ArrayList ( ) ; list . add ( new TestProvider ( ) ) ; list . add ( new TestProvider ( ) ) ; list . add ( new TestProvider ( ) ) ; list . add ( new TestProvider ( ) ) ; return list ; } public Object me ( ) { return this ; } public String toString ( ) { return ( "test provider" ) ; } public Vector getVector ( ) { Vector list = new Vector ( ) ; list . addElement ( "vector element 1" ) ; list . addElement ( "vector element 2" ) ; return list ; } public String [ ] getArray ( ) { String [ ] strings = new String [ 2 ] ; strings [ 0 ] = "first element" ; strings [ 1 ] = "second element" ; return strings ; } public boolean theAPLRules ( ) { return true ; } public boolean getStateTrue ( ) { return true ; } public boolean getStateFalse ( ) { return false ; } public String objectArrayMethod ( Object [ ] o ) { return "result of objectArrayMethod" ; } public String concat ( Object [ ] strings ) { StringBuffer result = new StringBuffer ( ) ; for ( int i = 0 ; i < strings . length ; i ++ ) { result . append ( ( String ) strings [ i ] ) . append ( ' ' ) ; } return result . toString ( ) ; } public String concat ( List strings ) { StringBuffer result = new StringBuffer ( ) ; for ( int i = 0 ; i < strings . size ( ) ; i ++ ) { result . append ( ( String ) strings . get ( i ) ) . append ( ' ' ) ; } return result . toString ( ) ; } public String objConcat ( List objects ) { StringBuffer result = new StringBuffer ( ) ; for ( int i = 0 ; i < objects . size ( ) ; i ++ ) { result . append ( objects . get ( i ) ) . append ( ' ' ) ; } return result . toString ( ) ; } public String parse ( String a , Object o , String c , String d ) { return a + o . toString ( ) + c + d ; } public String concat ( String a , String b ) { return a + b ; } public Person getPerson ( ) { return new Person ( ) ; } public Child getChild ( ) { return new Child ( ) ; } public String showPerson ( Person person ) { return person . getName ( ) ; } public String chop ( String string , int i ) { return ( string . substring ( 0 , string . length ( ) - i ) ) ; } public boolean allEmpty ( Object [ ] list ) { int size = list . length ; for ( int i = 0 ; i < size ; i ++ ) if ( list [ i ] . toString ( ) . length ( ) > 0 ) return false ; return true ; } public void setState ( Boolean state ) { } public void setBangStart ( Integer i ) { System . out . println ( "SetBangStart() : called with val = " + i ) ; stateint = i . intValue ( ) ; } public Integer bang ( ) { System . out . println ( "Bang! : " + stateint ) ; Integer ret = new Integer ( stateint ) ; stateint ++ ; return ret ; } public String get ( String key ) { return key ; } public String put ( String key , Object o ) { ob = o ; return key ; } public String getFoo ( ) throws Exception { System . out . println ( "Hello from getfoo" ) ; throw new Exception ( "From getFoo()" ) ; } public String getThrow ( ) throws Exception { System . out . println ( "Hello from geThrow" ) ; throw new Exception ( "From getThrow()" ) ; } } 	0
package org . apache . velocity . runtime . resource . loader ; import java . io . InputStream ; import org . apache . velocity . runtime . resource . Resource ; import org . apache . velocity . exception . ResourceNotFoundException ; import org . apache . commons . collections . ExtendedProperties ; public class ClasspathResourceLoader extends ResourceLoader { public void init ( ExtendedProperties configuration ) { rsvc . info ( "ClasspathResourceLoader : initialization starting." ) ; rsvc . info ( "ClasspathResourceLoader : initialization complete." ) ; } public synchronized InputStream getResourceStream ( String name ) throws ResourceNotFoundException { InputStream result = null ; if ( name == null || name . length ( ) == 0 ) { throw new ResourceNotFoundException ( "No template name provided" ) ; } try { ClassLoader classLoader = this . getClass ( ) . getClassLoader ( ) ; result = classLoader . getResourceAsStream ( name ) ; } catch ( Exception fnfe ) { throw new ResourceNotFoundException ( fnfe . getMessage ( ) ) ; } return result ; } public boolean isSourceModified ( Resource resource ) { return false ; } public long getLastModified ( Resource resource ) { return 0 ; } } 	1
package org . apache . velocity . test ; import java . io . BufferedWriter ; import java . io . File ; import java . io . FileOutputStream ; import java . io . OutputStreamWriter ; import java . io . Writer ; import java . util . ArrayList ; import java . util . Hashtable ; import java . util . HashMap ; import java . util . Vector ; import org . apache . velocity . VelocityContext ; import org . apache . velocity . Template ; import org . apache . velocity . runtime . RuntimeSingleton ; import org . apache . velocity . test . provider . TestProvider ; import org . apache . velocity . test . provider . BoolObj ; import org . apache . velocity . util . StringUtils ; import org . apache . velocity . app . FieldMethodizer ; import junit . framework . TestCase ; public class TemplateTestCase extends BaseTestCase implements TemplateTestBase { protected String baseFileName ; private TestProvider provider ; private ArrayList al ; private Hashtable h ; private VelocityContext context ; private VelocityContext context1 ; private VelocityContext context2 ; private Vector vec ; public TemplateTestCase ( String baseFileName ) { super ( getTestCaseName ( baseFileName ) ) ; this . baseFileName = baseFileName ; } public static junit . framework . Test suite ( ) { return new TemplateTestSuite ( ) ; } protected void setUp ( ) { provider = new TestProvider ( ) ; al = provider . getCustomers ( ) ; h = new Hashtable ( ) ; h . put ( "Bar" , "this is from a hashtable!" ) ; h . put ( "Foo" , "this is from a hashtable too!" ) ; vec = new Vector ( ) ; vec . addElement ( new String ( "string1" ) ) ; vec . addElement ( new String ( "string2" ) ) ; context2 = new VelocityContext ( ) ; context1 = new VelocityContext ( context2 ) ; context = new VelocityContext ( context1 ) ; context . put ( "provider" , provider ) ; context1 . put ( "name" , "jason" ) ; context2 . put ( "providers" , provider . getCustomers2 ( ) ) ; context . put ( "list" , al ) ; context1 . put ( "hashtable" , h ) ; context2 . put ( "hashmap" , new HashMap ( ) ) ; context2 . put ( "search" , provider . getSearch ( ) ) ; context . put ( "relatedSearches" , provider . getRelSearches ( ) ) ; context1 . put ( "searchResults" , provider . getRelSearches ( ) ) ; context2 . put ( "stringarray" , provider . getArray ( ) ) ; context . put ( "vector" , vec ) ; context . put ( "mystring" , new String ( ) ) ; context . put ( "runtime" , new FieldMethodizer ( "org.apache.velocity.runtime.RuntimeSingleton" ) ) ; context . put ( "fmprov" , new FieldMethodizer ( provider ) ) ; context . put ( "Floog" , "floogie woogie" ) ; context . put ( "boolobj" , new BoolObj ( ) ) ; Object [ ] oarr = { "a" , "b" , "c" , "d" } ; int intarr [ ] = { 10 , 20 , 30 , 40 , 50 } ; context . put ( "collection" , vec ) ; context2 . put ( "iterator" , vec . iterator ( ) ) ; context1 . put ( "map" , h ) ; context . put ( "obarr" , oarr ) ; context . put ( "enumerator" , vec . elements ( ) ) ; context . put ( "intarr" , intarr ) ; } public void runTest ( ) { try { Template template = RuntimeSingleton . getTemplate ( getFileName ( null , baseFileName , TMPL_FILE_EXT ) ) ; assureResultsDirectoryExists ( RESULT_DIR ) ; FileOutputStream fos = new FileOutputStream ( getFileName ( RESULT_DIR , baseFileName , RESULT_FILE_EXT ) ) ; Writer writer = new BufferedWriter ( new OutputStreamWriter ( fos ) ) ; template . merge ( context , writer ) ; writer . flush ( ) ; writer . close ( ) ; if ( ! isMatch ( RESULT_DIR , COMPARE_DIR , baseFileName , RESULT_FILE_EXT , CMP_FILE_EXT ) ) { fail ( "Processed template did not match expected output" ) ; } } catch ( Exception e ) { System . out . println ( "EXCEPTION : " + e ) ; fail ( e . getMessage ( ) ) ; } } } 	0
package org . apache . velocity . runtime ; public interface RuntimeConstants { public static final String RUNTIME_LOG = "runtime.log" ; public static final String RUNTIME_LOG_LOGSYSTEM = "runtime.log.logsystem" ; public static final String RUNTIME_LOG_LOGSYSTEM_CLASS = "runtime.log.logsystem.class" ; public static final String RUNTIME_LOG_ERROR_STACKTRACE = "runtime.log.error.stacktrace" ; public static final String RUNTIME_LOG_WARN_STACKTRACE = "runtime.log.warn.stacktrace" ; public static final String RUNTIME_LOG_INFO_STACKTRACE = "runtime.log.info.stacktrace" ; public static final String RUNTIME_LOG_REFERENCE_LOG_INVALID = "runtime.log.invalid.references" ; public final static String DEBUG_PREFIX = " [debug] " ; public final static String INFO_PREFIX = "  [info] " ; public final static String WARN_PREFIX = "  [warn] " ; public final static String ERROR_PREFIX = " [error] " ; public final static String UNKNOWN_PREFIX = " [unknown] " ; public final static String LOGSYSTEM_LOG4J_PATTERN = "runtime.log.logsystem.log4j.pattern" ; public final static String LOGSYSTEM_LOG4J_FILE_SIZE = "runtime.log.logsystem.log4j.file.size" ; public final static String LOGSYSTEM_LOG4J_FILE_BACKUPS = "runtime.log.logsystem.log4j.file.backups" ; public final static String LOGSYSTEM_LOG4J_SYSLOGD_HOST = "runtime.log.logsystem.log4j.syslogd.host" ; public final static String LOGSYSTEM_LOG4J_SYSLOGD_FACILITY = "runtime.log.logsystem.log4j.syslogd.facility" ; public final static String LOGSYSTEM_LOG4J_REMOTE_HOST = "runtime.log.logsystem.log4j.remote.host" ; public final static String LOGSYSTEM_LOG4J_REMOTE_PORT = "runtime.log.logsystem.log4j.remote.port" ; public final static String LOGSYSTEM_LOG4J_EMAIL_SERVER = "runtime.log.logsystem.log4j.email.server" ; public final static String LOGSYSTEM_LOG4J_EMAIL_FROM = "runtime.log.logsystem.log4j.email.from" ; public final static String LOGSYSTEM_LOG4J_EMAIL_TO = "runtime.log.logsystem.log4j.email.to" ; public final static String LOGSYSTEM_LOG4J_EMAIL_SUBJECT = "runtime.log.logsystem.log4j.email.subject" ; public final static String LOGSYSTEM_LOG4J_EMAIL_BUFFER_SIZE = "runtime.log.logsystem.log4j.email.buffer.size" ; public static final String COUNTER_NAME = "directive.foreach.counter.name" ; public static final String COUNTER_INITIAL_VALUE = "directive.foreach.counter.initial.value" ; public static String ERRORMSG_START = "directive.include.output.errormsg.start" ; public static String ERRORMSG_END = "directive.include.output.errormsg.end" ; public static String PARSE_DIRECTIVE_MAXDEPTH = "directive.parse.max.depth" ; public static String RESOURCE_MANAGER_CLASS = "resource.manager.class" ; public static String RESOURCE_MANAGER_CACHE_CLASS = "resource.manager.cache.class" ; public static final String RESOURCE_MANAGER_LOGWHENFOUND = "resource.manager.logwhenfound" ; public static final String RESOURCE_LOADER = "resource.loader" ; public static final String FILE_RESOURCE_LOADER_PATH = "file.resource.loader.path" ; public static final String FILE_RESOURCE_LOADER_CACHE = "file.resource.loader.cache" ; public static final String VM_LIBRARY = "velocimacro.library" ; public final static String VM_LIBRARY_AUTORELOAD = "velocimacro.library.autoreload" ; public static final String VM_PERM_ALLOW_INLINE = "velocimacro.permissions.allow.inline" ; public final static String VM_PERM_ALLOW_INLINE_REPLACE_GLOBAL = "velocimacro.permissions.allow.inline.to.replace.global" ; public final static String VM_PERM_INLINE_LOCAL = "velocimacro.permissions.allow.inline.local.scope" ; public final static String VM_MESSAGES_ON = "velocimacro.messages.on" ; public final static String VM_CONTEXT_LOCALSCOPE = "velocimacro.context.localscope" ; public static String INTERPOLATE_STRINGLITERALS = "runtime.interpolate.string.literals" ; public static final String INPUT_ENCODING = "input.encoding" ; public static final String OUTPUT_ENCODING = "output.encoding" ; public static final String ENCODING_DEFAULT = "ISO-8859-1" ; final static String DEFAULT_RUNTIME_PROPERTIES = "org/apache/velocity/runtime/defaults/velocity.properties" ; final static String DEFAULT_RUNTIME_DIRECTIVES = "org/apache/velocity/runtime/defaults/directive.properties" ; final static int NUMBER_OF_PARSERS = 20 ; final static String PARSER_POOL_SIZE = "parser.pool.size" ; final static String UBERSPECT_CLASSNAME = "runtime.introspector.uberspect" ; } 	1
package org . apache . velocity . test ; import java . util . ArrayList ; import java . lang . reflect . Method ; import org . apache . velocity . runtime . RuntimeSingleton ; import junit . framework . TestCase ; public class IntrospectorTestCase extends BaseTestCase { private Method method ; private String result ; private String type ; private ArrayList failures = new ArrayList ( ) ; IntrospectorTestCase ( ) { super ( "IntrospectorTestCase" ) ; } public IntrospectorTestCase ( String name ) { super ( name ) ; } public static junit . framework . Test suite ( ) { return new IntrospectorTestCase ( ) ; } public void runTest ( ) { MethodProvider mp = new MethodProvider ( ) ; try { Object [ ] booleanParams = { new Boolean ( true ) } ; type = "boolean" ; method = RuntimeSingleton . getIntrospector ( ) . getMethod ( MethodProvider . class , type + "Method" , booleanParams ) ; result = ( String ) method . invoke ( mp , booleanParams ) ; if ( ! result . equals ( type ) ) failures . add ( type + "Method could not be found!" ) ; Object [ ] byteParams = { new Byte ( "1" ) } ; type = "byte" ; method = RuntimeSingleton . getIntrospector ( ) . getMethod ( MethodProvider . class , type + "Method" , byteParams ) ; result = ( String ) method . invoke ( mp , byteParams ) ; if ( ! result . equals ( type ) ) failures . add ( type + "Method could not be found!" ) ; Object [ ] characterParams = { new Character ( 'a' ) } ; type = "character" ; method = RuntimeSingleton . getIntrospector ( ) . getMethod ( MethodProvider . class , type + "Method" , characterParams ) ; result = ( String ) method . invoke ( mp , characterParams ) ; if ( ! result . equals ( type ) ) failures . add ( type + "Method could not be found!" ) ; Object [ ] doubleParams = { new Double ( ( double ) 1 ) } ; type = "double" ; method = RuntimeSingleton . getIntrospector ( ) . getMethod ( MethodProvider . class , type + "Method" , doubleParams ) ; result = ( String ) method . invoke ( mp , doubleParams ) ; if ( ! result . equals ( type ) ) failures . add ( type + "Method could not be found!" ) ; Object [ ] floatParams = { new Float ( ( float ) 1 ) } ; type = "float" ; method = RuntimeSingleton . getIntrospector ( ) . getMethod ( MethodProvider . class , type + "Method" , floatParams ) ; result = ( String ) method . invoke ( mp , floatParams ) ; if ( ! result . equals ( type ) ) failures . add ( type + "Method could not be found!" ) ; Object [ ] integerParams = { new Integer ( ( int ) 1 ) } ; type = "integer" ; method = RuntimeSingleton . getIntrospector ( ) . getMethod ( MethodProvider . class , type + "Method" , integerParams ) ; result = ( String ) method . invoke ( mp , integerParams ) ; if ( ! result . equals ( type ) ) failures . add ( type + "Method could not be found!" ) ; Object [ ] longParams = { new Long ( ( long ) 1 ) } ; type = "long" ; method = RuntimeSingleton . getIntrospector ( ) . getMethod ( MethodProvider . class , type + "Method" , longParams ) ; result = ( String ) method . invoke ( mp , longParams ) ; if ( ! result . equals ( type ) ) failures . add ( type + "Method could not be found!" ) ; Object [ ] shortParams = { new Short ( ( short ) 1 ) } ; type = "short" ; method = RuntimeSingleton . getIntrospector ( ) . getMethod ( MethodProvider . class , type + "Method" , shortParams ) ; result = ( String ) method . invoke ( mp , shortParams ) ; if ( ! result . equals ( type ) ) failures . add ( type + "Method could not be found!" ) ; Object [ ] params = { } ; method = RuntimeSingleton . getIntrospector ( ) . getMethod ( MethodProvider . class , "untouchable" , params ) ; if ( method != null ) failures . add ( type + "able to access a private-access method." ) ; method = RuntimeSingleton . getIntrospector ( ) . getMethod ( MethodProvider . class , "reallyuntouchable" , params ) ; if ( method != null ) failures . add ( type + "able to access a default-access method." ) ; int totalFailures = failures . size ( ) ; if ( totalFailures > 0 ) { StringBuffer sb = new StringBuffer ( "\nIntrospection Errors:\n" ) ; for ( int i = 0 ; i < totalFailures ; i ++ ) sb . append ( ( String ) failures . get ( i ) ) . append ( "\n" ) ; fail ( sb . toString ( ) ) ; } } catch ( Exception e ) { fail ( e . toString ( ) ) ; } } public static class MethodProvider { public String booleanMethod ( boolean p ) { return "boolean" ; } public String byteMethod ( byte p ) { return "byte" ; } public String characterMethod ( char p ) { return "character" ; } public String doubleMethod ( double p ) { return "double" ; } public String floatMethod ( float p ) { return "float" ; } public String integerMethod ( int p ) { return "integer" ; } public String longMethod ( long p ) { return "long" ; } public String shortMethod ( short p ) { return "short" ; } String untouchable ( ) { return "yech" ; } private String reallyuntouchable ( ) { return "yech!" ; } } } 	0
package org . apache . velocity . anakia ; public class Escape { public Escape ( ) { } public static final String getText ( String st ) { StringBuffer buff = new StringBuffer ( ) ; char [ ] block = st . toCharArray ( ) ; String stEntity = null ; int i , last ; for ( i = 0 , last = 0 ; i < block . length ; i ++ ) { switch ( block [ i ] ) { case '<' : stEntity = "&lt;" ; break ; case '>' : stEntity = "&gt;" ; break ; case '&' : stEntity = "&amp;" ; break ; case '"' : stEntity = "&quot;" ; break ; default : ; } if ( stEntity != null ) { buff . append ( block , last , i - last ) ; buff . append ( stEntity ) ; stEntity = null ; last = i + 1 ; } } if ( last < block . length ) { buff . append ( block , last , i - last ) ; } return buff . toString ( ) ; } } 	1
package org . apache . velocity . test . misc ; import java . io . BufferedWriter ; import java . io . File ; import java . io . FileInputStream ; import java . io . OutputStreamWriter ; import java . io . Writer ; import java . io . StringWriter ; import java . util . ArrayList ; import java . util . Hashtable ; import java . util . HashMap ; import java . util . Properties ; import java . util . Stack ; import java . util . Vector ; import java . util . Enumeration ; import org . apache . velocity . VelocityContext ; import org . apache . velocity . Template ; import org . apache . velocity . app . FieldMethodizer ; import org . apache . velocity . app . Velocity ; import org . apache . velocity . exception . ParseErrorException ; import org . apache . velocity . exception . ResourceNotFoundException ; import org . apache . velocity . exception . MethodInvocationException ; import org . apache . velocity . runtime . RuntimeSingleton ; import org . apache . velocity . test . provider . TestProvider ; import org . apache . velocity . app . event . EventCartridge ; import org . apache . velocity . app . event . ReferenceInsertionEventHandler ; import org . apache . velocity . app . event . MethodExceptionEventHandler ; import org . apache . velocity . app . event . NullSetEventHandler ; import org . apache . velocity . context . Context ; public class Test implements ReferenceInsertionEventHandler , NullSetEventHandler , MethodExceptionEventHandler { private static Stack writerStack = new Stack ( ) ; public Test ( String templateFile , String encoding ) { Writer writer = null ; TestProvider provider = new TestProvider ( ) ; ArrayList al = provider . getCustomers ( ) ; Hashtable h = new Hashtable ( ) ; h . put ( "Bar" , "this is from a hashtable!" ) ; h . put ( "Foo" , "this is from a hashtable too!" ) ; Vector v = new Vector ( ) ; String str = "mystr" ; v . addElement ( new String ( "hello" ) ) ; v . addElement ( new String ( "hello2" ) ) ; v . addElement ( str ) ; try { Properties p = new Properties ( ) ; try { FileInputStream fis = new FileInputStream ( new File ( "velocity.properties" ) ) ; if ( fis != null ) p . load ( fis ) ; } catch ( Exception ex ) { } for ( Enumeration e = p . propertyNames ( ) ; e . hasMoreElements ( ) ; ) { String el = ( String ) e . nextElement ( ) ; Velocity . setProperty ( el , p . getProperty ( el ) ) ; } Velocity . setProperty ( Velocity . RUNTIME_LOG_ERROR_STACKTRACE , "true" ) ; Velocity . setProperty ( Velocity . RUNTIME_LOG_WARN_STACKTRACE , "true" ) ; Velocity . setProperty ( Velocity . RUNTIME_LOG_INFO_STACKTRACE , "true" ) ; Velocity . init ( ) ; if ( templateFile == null ) { templateFile = "examples/example.vm" ; } Template template = null ; try { template = RuntimeSingleton . getTemplate ( templateFile , encoding ) ; } catch ( ResourceNotFoundException rnfe ) { System . out . println ( "Test : RNFE : Cannot find template " + templateFile ) ; } catch ( ParseErrorException pee ) { System . out . println ( "Test : Syntax error in template " + templateFile + ":" + pee ) ; } VelocityContext context = new VelocityContext ( ) ; context . put ( "provider" , provider ) ; context . put ( "name" , "jason" ) ; context . put ( "providers" , provider . getCustomers2 ( ) ) ; context . put ( "list" , al ) ; context . put ( "hashtable" , h ) ; context . put ( "search" , provider . getSearch ( ) ) ; context . put ( "relatedSearches" , provider . getRelSearches ( ) ) ; context . put ( "searchResults" , provider . getRelSearches ( ) ) ; context . put ( "menu" , provider . getMenu ( ) ) ; context . put ( "stringarray" , provider . getArray ( ) ) ; context . put ( "vector" , v ) ; context . put ( "mystring" , new String ( ) ) ; context . put ( "hashmap" , new HashMap ( ) ) ; context . put ( "runtime" , new FieldMethodizer ( "org.apache.velocity.runtime.RuntimeSingleton" ) ) ; context . put ( "fmprov" , new FieldMethodizer ( provider ) ) ; context . put ( "Floog" , "floogie woogie" ) ; context . put ( "geirstring" , str ) ; context . put ( "mylong" , new Long ( 5 ) ) ; int intarr [ ] = { 10 , 20 , 30 , 40 , 50 } ; Object [ ] oarr = { "a" , "b" , "c" , "d" } ; context . put ( "collection" , v ) ; context . put ( "iterator" , v . iterator ( ) ) ; context . put ( "map" , h ) ; context . put ( "obarr" , oarr ) ; context . put ( "intarr" , intarr ) ; String stest = " My name is $name -> $Floog" ; StringWriter w = new StringWriter ( ) ; w = new StringWriter ( ) ; w = new StringWriter ( ) ; EventCartridge ec = new EventCartridge ( ) ; ec . addEventHandler ( this ) ; ec . attachToContext ( context ) ; VelocityContext vc = new VelocityContext ( context ) ; if ( template != null ) { writer = new BufferedWriter ( new OutputStreamWriter ( System . out , encoding ) ) ; template . merge ( vc , writer ) ; writer . flush ( ) ; writer . close ( ) ; } } catch ( MethodInvocationException mie ) { System . out . println ( "MIE : " + mie ) ; } catch ( Exception e ) { RuntimeSingleton . error ( "Test- exception : " + e ) ; e . printStackTrace ( ) ; } } public Object referenceInsert ( String reference , Object value ) { if ( value != null ) ; return value ; } public boolean shouldLogOnNullSet ( String lhs , String rhs ) { if ( lhs . equals ( "$woogie" ) ) return false ; return true ; } public Object methodException ( Class claz , String method , Exception e ) throws Exception { if ( method . equals ( "getThrow" ) ) return "I should have thrown" ; throw e ; } public static void main ( String [ ] args ) { Test t ; String encoding = "ISO-8859-1" ; if ( args . length > 1 ) encoding = args [ 1 ] ; t = new Test ( args [ 0 ] , encoding ) ; } } 	0
package org . apache . velocity . runtime ; import org . apache . velocity . Template ; import org . apache . velocity . runtime . directive . Directive ; import org . apache . velocity . runtime . directive . VelocimacroProxy ; import java . util . Vector ; import java . util . Map ; import java . util . HashMap ; public class VelocimacroFactory { private RuntimeServices rsvc = null ; private VelocimacroManager vmManager = null ; private boolean replaceAllowed = false ; private boolean addNewAllowed = true ; private boolean templateLocal = false ; private boolean blather = false ; private boolean autoReloadLibrary = false ; private Vector macroLibVec = null ; private Map libModMap ; public VelocimacroFactory ( RuntimeServices rs ) { this . rsvc = rs ; libModMap = new HashMap ( ) ; vmManager = new VelocimacroManager ( rsvc ) ; } public void initVelocimacro ( ) { synchronized ( this ) { setReplacementPermission ( true ) ; setBlather ( true ) ; logVMMessageInfo ( "Velocimacro : initialization starting." ) ; vmManager . setNamespaceUsage ( false ) ; Object libfiles = rsvc . getProperty ( RuntimeConstants . VM_LIBRARY ) ; if ( libfiles != null ) { if ( libfiles instanceof Vector ) { macroLibVec = ( Vector ) libfiles ; } else if ( libfiles instanceof String ) { macroLibVec = new Vector ( ) ; macroLibVec . addElement ( libfiles ) ; } for ( int i = 0 ; i < macroLibVec . size ( ) ; i ++ ) { String lib = ( String ) macroLibVec . elementAt ( i ) ; if ( lib != null && ! lib . equals ( "" ) ) { vmManager . setRegisterFromLib ( true ) ; logVMMessageInfo ( "Velocimacro : adding VMs from " + "VM library template : " + lib ) ; try { Template template = rsvc . getTemplate ( lib ) ; Twonk twonk = new Twonk ( ) ; twonk . template = template ; twonk . modificationTime = template . getLastModified ( ) ; libModMap . put ( lib , twonk ) ; } catch ( Exception e ) { logVMMessageInfo ( "Velocimacro : error using  VM " + "library template " + lib + " : " + e ) ; } logVMMessageInfo ( "Velocimacro :  VM library template " + "macro registration complete." ) ; vmManager . setRegisterFromLib ( false ) ; } } } setAddMacroPermission ( true ) ; if ( ! rsvc . getBoolean ( RuntimeConstants . VM_PERM_ALLOW_INLINE , true ) ) { setAddMacroPermission ( false ) ; logVMMessageInfo ( "Velocimacro : allowInline = false : VMs can not " + "be defined inline in templates" ) ; } else { logVMMessageInfo ( "Velocimacro : allowInline = true : VMs can be " + "defined inline in templates" ) ; } setReplacementPermission ( false ) ; if ( rsvc . getBoolean ( RuntimeConstants . VM_PERM_ALLOW_INLINE_REPLACE_GLOBAL , false ) ) { setReplacementPermission ( true ) ; logVMMessageInfo ( "Velocimacro : allowInlineToOverride = true : VMs " + "defined inline may replace previous VM definitions" ) ; } else { logVMMessageInfo ( "Velocimacro : allowInlineToOverride = false : VMs " + "defined inline may NOT replace previous VM definitions" ) ; } vmManager . setNamespaceUsage ( true ) ; setTemplateLocalInline ( rsvc . getBoolean ( RuntimeConstants . VM_PERM_INLINE_LOCAL , false ) ) ; if ( getTemplateLocalInline ( ) ) { logVMMessageInfo ( "Velocimacro : allowInlineLocal = true : VMs " + "defined inline will be local to their defining template only." ) ; } else { logVMMessageInfo ( "Velocimacro : allowInlineLocal = false : VMs " + "defined inline will be  global in scope if allowed." ) ; } vmManager . setTemplateLocalInlineVM ( getTemplateLocalInline ( ) ) ; setBlather ( rsvc . getBoolean ( RuntimeConstants . VM_MESSAGES_ON , true ) ) ; if ( getBlather ( ) ) { logVMMessageInfo ( "Velocimacro : messages on  : VM system " + "will output logging messages" ) ; } else { logVMMessageInfo ( "Velocimacro : messages off : VM system will be quiet" ) ; } setAutoload ( rsvc . getBoolean ( RuntimeConstants . VM_LIBRARY_AUTORELOAD , false ) ) ; if ( getAutoload ( ) ) { logVMMessageInfo ( "Velocimacro : autoload on  : VM system " + "will automatically reload global library macros" ) ; } else { logVMMessageInfo ( "Velocimacro : autoload off  : VM system " + "will not automatically reload global library macros" ) ; } rsvc . info ( "Velocimacro : initialization complete." ) ; } return ; } public boolean addVelocimacro ( String name , String macroBody , String argArray [ ] , String sourceTemplate ) { if ( name == null || macroBody == null || argArray == null || sourceTemplate == null ) { logVMMessageWarn ( "Velocimacro : VM addition rejected : " + "programmer error : arg null" ) ; return false ; } if ( ! canAddVelocimacro ( name , sourceTemplate ) ) { return false ; } synchronized ( this ) { vmManager . addVM ( name , macroBody , argArray , sourceTemplate ) ; } if ( blather ) { String s = "#" + argArray [ 0 ] ; s += "(" ; for ( int i = 1 ; i < argArray . length ; i ++ ) { s += " " ; s += argArray [ i ] ; } s += " ) : source = " ; s += sourceTemplate ; logVMMessageInfo ( "Velocimacro : added new VM : " + s ) ; } return true ; } private boolean canAddVelocimacro ( String name , String sourceTemplate ) { if ( getAutoload ( ) ) { for ( int i = 0 ; i < macroLibVec . size ( ) ; i ++ ) { String lib = ( String ) macroLibVec . elementAt ( i ) ; if ( lib . equals ( sourceTemplate ) ) { return true ; } } } if ( ! addNewAllowed ) { logVMMessageWarn ( "Velocimacro : VM addition rejected : " + name + " : inline VMs not allowed." ) ; return false ; } if ( ! templateLocal ) { if ( isVelocimacro ( name , sourceTemplate ) && ! replaceAllowed ) { logVMMessageWarn ( "Velocimacro : VM addition rejected : " + name + " : inline not allowed to replace existing VM" ) ; return false ; } } return true ; } private void logVMMessageInfo ( String s ) { if ( blather ) rsvc . info ( s ) ; } private void logVMMessageWarn ( String s ) { if ( blather ) rsvc . warn ( s ) ; } public boolean isVelocimacro ( String vm , String sourceTemplate ) { synchronized ( this ) { if ( vmManager . get ( vm , sourceTemplate ) != null ) return true ; } return false ; } public Directive getVelocimacro ( String vmName , String sourceTemplate ) { VelocimacroProxy vp = null ; synchronized ( this ) { vp = vmManager . get ( vmName , sourceTemplate ) ; if ( vp != null && getAutoload ( ) ) { String lib = vmManager . getLibraryName ( vmName , sourceTemplate ) ; if ( lib != null ) { try { Twonk tw = ( Twonk ) libModMap . get ( lib ) ; if ( tw != null ) { Template template = tw . template ; long tt = tw . modificationTime ; long ft = template . getResourceLoader ( ) . getLastModified ( template ) ; if ( ft > tt ) { logVMMessageInfo ( "Velocimacro : autoload reload for VMs from " + "VM library template : " + lib ) ; tw . modificationTime = ft ; template = rsvc . getTemplate ( lib ) ; tw . template = template ; tw . modificationTime = template . getLastModified ( ) ; } } } catch ( Exception e ) { logVMMessageInfo ( "Velocimacro : error using  VM " + "library template " + lib + " : " + e ) ; } vp = vmManager . get ( vmName , sourceTemplate ) ; } } } return vp ; } public boolean dumpVMNamespace ( String namespace ) { return vmManager . dumpNamespace ( namespace ) ; } private void setTemplateLocalInline ( boolean b ) { templateLocal = b ; } private boolean getTemplateLocalInline ( ) { return templateLocal ; } private boolean setAddMacroPermission ( boolean arg ) { boolean b = addNewAllowed ; addNewAllowed = arg ; return b ; } private boolean setReplacementPermission ( boolean arg ) { boolean b = replaceAllowed ; replaceAllowed = arg ; return b ; } private void setBlather ( boolean b ) { blather = b ; } private boolean getBlather ( ) { return blather ; } private void setAutoload ( boolean b ) { autoReloadLibrary = b ; } private boolean getAutoload ( ) { return autoReloadLibrary ; } private class Twonk { public Template template ; public long modificationTime ; } } 	1
package org . apache . velocity . test ; import java . io . BufferedWriter ; import java . io . FileOutputStream ; import java . io . OutputStreamWriter ; import java . io . Writer ; import java . io . File ; import java . util . Properties ; import org . apache . velocity . Template ; import org . apache . velocity . app . Velocity ; import org . apache . velocity . VelocityContext ; import org . apache . velocity . test . provider . TestProvider ; import org . apache . velocity . util . StringUtils ; import org . apache . velocity . runtime . VelocimacroFactory ; import junit . framework . TestCase ; public class MultiLoaderTestCase extends BaseTestCase { private static final String TMPL_FILE_EXT = "vm" ; private static final String CMP_FILE_EXT = "cmp" ; private static final String RESULT_FILE_EXT = "res" ; private static final String RESULTS_DIR = "../test/multiloader/results" ; private final static String FILE_RESOURCE_LOADER_PATH = "../test/multiloader" ; private static final String COMPARE_DIR = "../test/multiloader/compare" ; public MultiLoaderTestCase ( ) { super ( "MultiLoaderTestCase" ) ; try { assureResultsDirectoryExists ( RESULTS_DIR ) ; Velocity . setProperty ( Velocity . RESOURCE_LOADER , "file" ) ; Velocity . setProperty ( Velocity . FILE_RESOURCE_LOADER_PATH , FILE_RESOURCE_LOADER_PATH ) ; Velocity . addProperty ( Velocity . RESOURCE_LOADER , "classpath" ) ; Velocity . addProperty ( Velocity . RESOURCE_LOADER , "jar" ) ; Velocity . setProperty ( "classpath." + Velocity . RESOURCE_LOADER + ".class" , "org.apache.velocity.runtime.resource.loader.ClasspathResourceLoader" ) ; Velocity . setProperty ( "classpath." + Velocity . RESOURCE_LOADER + ".cache" , "false" ) ; Velocity . setProperty ( "classpath." + Velocity . RESOURCE_LOADER + ".modificationCheckInterval" , "2" ) ; Velocity . setProperty ( "jar." + Velocity . RESOURCE_LOADER + ".class" , "org.apache.velocity.runtime.resource.loader.JarResourceLoader" ) ; Velocity . setProperty ( "jar." + Velocity . RESOURCE_LOADER + ".path" , "jar:file:" + FILE_RESOURCE_LOADER_PATH + "/test2.jar" ) ; Velocity . init ( ) ; } catch ( Exception e ) { System . err . println ( "Cannot setup MultiLoaderTestCase!" ) ; e . printStackTrace ( ) ; System . exit ( 1 ) ; } } public static junit . framework . Test suite ( ) { return new MultiLoaderTestCase ( ) ; } public void runTest ( ) { try { assureResultsDirectoryExists ( RESULTS_DIR ) ; Template template1 = Velocity . getTemplate ( getFileName ( null , "path1" , TMPL_FILE_EXT ) ) ; Template template2 = Velocity . getTemplate ( getFileName ( null , "template/test1" , TMPL_FILE_EXT ) ) ; Template template3 = Velocity . getTemplate ( getFileName ( null , "template/test2" , TMPL_FILE_EXT ) ) ; FileOutputStream fos1 = new FileOutputStream ( getFileName ( RESULTS_DIR , "path1" , RESULT_FILE_EXT ) ) ; FileOutputStream fos2 = new FileOutputStream ( getFileName ( RESULTS_DIR , "test2" , RESULT_FILE_EXT ) ) ; FileOutputStream fos3 = new FileOutputStream ( getFileName ( RESULTS_DIR , "test3" , RESULT_FILE_EXT ) ) ; Writer writer1 = new BufferedWriter ( new OutputStreamWriter ( fos1 ) ) ; Writer writer2 = new BufferedWriter ( new OutputStreamWriter ( fos2 ) ) ; Writer writer3 = new BufferedWriter ( new OutputStreamWriter ( fos3 ) ) ; VelocityContext context = new VelocityContext ( ) ; template1 . merge ( context , writer1 ) ; writer1 . flush ( ) ; writer1 . close ( ) ; template2 . merge ( context , writer2 ) ; writer2 . flush ( ) ; writer2 . close ( ) ; template3 . merge ( context , writer3 ) ; writer3 . flush ( ) ; writer3 . close ( ) ; if ( ! isMatch ( RESULTS_DIR , COMPARE_DIR , "path1" , RESULT_FILE_EXT , CMP_FILE_EXT ) ) { fail ( "Output incorrect for FileResourceLoader test." ) ; } if ( ! isMatch ( RESULTS_DIR , COMPARE_DIR , "test2" , RESULT_FILE_EXT , CMP_FILE_EXT ) ) { fail ( "Output incorrect for ClasspathResourceLoader test." ) ; } if ( ! isMatch ( RESULTS_DIR , COMPARE_DIR , "test3" , RESULT_FILE_EXT , CMP_FILE_EXT ) ) { fail ( "Output incorrect for JarResourceLoader test." ) ; } } catch ( Exception e ) { fail ( e . getMessage ( ) ) ; } } } 	0
package org . apache . velocity . runtime . parser . node ; import org . apache . velocity . context . InternalContextAdapter ; import org . apache . velocity . runtime . parser . Parser ; import org . apache . velocity . exception . MethodInvocationException ; public class ASTAddNode extends SimpleNode { public ASTAddNode ( int id ) { super ( id ) ; } public ASTAddNode ( Parser p , int id ) { super ( p , id ) ; } public Object jjtAccept ( ParserVisitor visitor , Object data ) { return visitor . visit ( this , data ) ; } public Object value ( InternalContextAdapter context ) throws MethodInvocationException { Object left = jjtGetChild ( 0 ) . value ( context ) ; Object right = jjtGetChild ( 1 ) . value ( context ) ; if ( left == null || right == null ) { rsvc . error ( ( left == null ? "Left" : "Right" ) + " side (" + jjtGetChild ( ( left == null ? 0 : 1 ) ) . literal ( ) + ") of addition operation has null value." + " Operation not possible. " + context . getCurrentTemplateName ( ) + " [line " + getLine ( ) + ", column " + getColumn ( ) + "]" ) ; return null ; } if ( ! ( left instanceof Integer ) || ! ( right instanceof Integer ) ) { rsvc . error ( ( ! ( left instanceof Integer ) ? "Left" : "Right" ) + " side of addition operation is not a valid type. " + "Currently only integers (1,2,3...) and Integer type is supported. " + context . getCurrentTemplateName ( ) + " [line " + getLine ( ) + ", column " + getColumn ( ) + "]" ) ; return null ; } return new Integer ( ( ( Integer ) left ) . intValue ( ) + ( ( Integer ) right ) . intValue ( ) ) ; } } 	1
package org . apache . velocity . runtime . directive ; import java . util . Stack ; public class ParseDirectiveException extends Exception { private Stack filenameStack = new Stack ( ) ; private String msg = "" ; private int depthCount = 0 ; ParseDirectiveException ( String m , int i ) { msg = m ; depthCount = i ; } public String getMessage ( ) { String returnStr = "#parse() exception : depth = " + depthCount + " -> " + msg ; returnStr += " File stack : " ; try { while ( ! filenameStack . empty ( ) ) { returnStr += ( String ) filenameStack . pop ( ) ; returnStr += " -> " ; } } catch ( Exception e ) { } return returnStr ; } public void addFile ( String s ) { filenameStack . push ( s ) ; } } 	0
package org . apache . velocity . runtime . directive ; import java . io . Writer ; import java . io . IOException ; import java . util . List ; import java . util . ArrayList ; import org . apache . velocity . context . InternalContextAdapter ; import org . apache . velocity . runtime . parser . node . Node ; import org . apache . velocity . runtime . parser . node . NodeUtils ; import org . apache . velocity . runtime . parser . Token ; import org . apache . velocity . runtime . parser . ParseException ; import org . apache . velocity . runtime . parser . ParserTreeConstants ; import org . apache . velocity . runtime . RuntimeServices ; public class Macro extends Directive { private static boolean debugMode = false ; public String getName ( ) { return "macro" ; } public int getType ( ) { return BLOCK ; } public boolean render ( InternalContextAdapter context , Writer writer , Node node ) throws IOException { return true ; } public void init ( RuntimeServices rs , InternalContextAdapter context , Node node ) throws Exception { super . init ( rs , context , node ) ; return ; } public static void processAndRegister ( RuntimeServices rs , Node node , String sourceTemplate ) throws IOException , ParseException { int numArgs = node . jjtGetNumChildren ( ) ; if ( numArgs < 2 ) { rs . error ( "#macro error : Velocimacro must have name as 1st " + "argument to #macro(). #args = " + numArgs ) ; throw new MacroParseException ( "First argument to #macro() must be " + " macro name." ) ; } int firstType = node . jjtGetChild ( 0 ) . getType ( ) ; if ( firstType != ParserTreeConstants . JJTWORD ) { Token t = node . jjtGetChild ( 0 ) . getFirstToken ( ) ; throw new MacroParseException ( "First argument to #macro() must be a" + " token without surrounding \' or \", which specifies" + " the macro name.  Currently it is a " + ParserTreeConstants . jjtNodeName [ firstType ] ) ; } String argArray [ ] = getArgArray ( node ) ; List macroArray = getASTAsStringArray ( node . jjtGetChild ( numArgs - 1 ) ) ; StringBuffer temp = new StringBuffer ( ) ; for ( int i = 0 ; i < macroArray . size ( ) ; i ++ ) { temp . append ( macroArray . get ( i ) ) ; } String macroBody = temp . toString ( ) ; boolean bRet = rs . addVelocimacro ( argArray [ 0 ] , macroBody , argArray , sourceTemplate ) ; return ; } private static String [ ] getArgArray ( Node node ) { int numArgs = node . jjtGetNumChildren ( ) ; numArgs -- ; String argArray [ ] = new String [ numArgs ] ; int i = 0 ; while ( i < numArgs ) { argArray [ i ] = node . jjtGetChild ( i ) . getFirstToken ( ) . image ; if ( i > 0 ) { if ( argArray [ i ] . startsWith ( "$" ) ) { argArray [ i ] = argArray [ i ] . substring ( 1 , argArray [ i ] . length ( ) ) ; } } i ++ ; } if ( debugMode ) { System . out . println ( "Macro.getArgArray() : #args = " + numArgs ) ; System . out . print ( argArray [ 0 ] + "(" ) ; for ( i = 1 ; i < numArgs ; i ++ ) { System . out . print ( " " + argArray [ i ] ) ; } System . out . println ( " )" ) ; } return argArray ; } private static List getASTAsStringArray ( Node rootNode ) { Token t = rootNode . getFirstToken ( ) ; Token tLast = rootNode . getLastToken ( ) ; ArrayList list = new ArrayList ( ) ; t = rootNode . getFirstToken ( ) ; while ( t != tLast ) { list . add ( NodeUtils . tokenLiteral ( t ) ) ; t = t . next ; } list . add ( NodeUtils . tokenLiteral ( t ) ) ; return list ; } } 	1
package org . apache . velocity . test ; import java . io . FileWriter ; import java . util . Iterator ; import java . util . Vector ; import org . apache . velocity . runtime . configuration . Configuration ; public class ConfigurationTestCase extends BaseTestCase { private static final String COMPARE_DIR = "../test/configuration/compare" ; private static final String RESULTS_DIR = "../test/configuration/results" ; private static final String TEST_CONFIG = "../test/configuration/test.config" ; public ConfigurationTestCase ( ) { super ( "ConfigurationTestCase" ) ; } public static junit . framework . Test suite ( ) { return new ConfigurationTestCase ( ) ; } public void runTest ( ) { try { assureResultsDirectoryExists ( RESULTS_DIR ) ; Configuration c = new Configuration ( TEST_CONFIG ) ; FileWriter result = new FileWriter ( getFileName ( RESULTS_DIR , "output" , "res" ) ) ; message ( result , "Testing order of keys ..." ) ; showIterator ( result , c . getKeys ( ) ) ; message ( result , "Testing retrieval of CSV values ..." ) ; showVector ( result , c . getVector ( "resource.loader" ) ) ; message ( result , "Testing subset(prefix).getKeys() ..." ) ; Configuration subset = c . subset ( "file.resource.loader" ) ; showIterator ( result , subset . getKeys ( ) ) ; message ( result , "Testing getVector(prefix) ..." ) ; showVector ( result , subset . getVector ( "path" ) ) ; message ( result , "Testing getString(key) ..." ) ; result . write ( c . getString ( "config.string.value" ) ) ; result . write ( "\n\n" ) ; message ( result , "Testing getBoolean(key) ..." ) ; result . write ( new Boolean ( c . getBoolean ( "config.boolean.value" ) ) . toString ( ) ) ; result . write ( "\n\n" ) ; message ( result , "Testing getByte(key) ..." ) ; result . write ( new Byte ( c . getByte ( "config.byte.value" ) ) . toString ( ) ) ; result . write ( "\n\n" ) ; message ( result , "Testing getShort(key) ..." ) ; result . write ( new Short ( c . getShort ( "config.short.value" ) ) . toString ( ) ) ; result . write ( "\n\n" ) ; message ( result , "Testing getInt(key) ..." ) ; result . write ( new Integer ( c . getInt ( "config.int.value" ) ) . toString ( ) ) ; result . write ( "\n\n" ) ; message ( result , "Testing getLong(key) ..." ) ; result . write ( new Long ( c . getLong ( "config.long.value" ) ) . toString ( ) ) ; result . write ( "\n\n" ) ; message ( result , "Testing getFloat(key) ..." ) ; result . write ( new Float ( c . getFloat ( "config.float.value" ) ) . toString ( ) ) ; result . write ( "\n\n" ) ; message ( result , "Testing getDouble(key) ..." ) ; result . write ( new Double ( c . getDouble ( "config.double.value" ) ) . toString ( ) ) ; result . write ( "\n\n" ) ; message ( result , "Testing escaped-comma scalar..." ) ; result . write ( c . getString ( "escape.comma1" ) ) ; result . write ( "\n\n" ) ; message ( result , "Testing escaped-comma vector..." ) ; showVector ( result , c . getVector ( "escape.comma2" ) ) ; result . write ( "\n\n" ) ; result . flush ( ) ; result . close ( ) ; if ( ! isMatch ( RESULTS_DIR , COMPARE_DIR , "output" , "res" , "cmp" ) ) { fail ( "Output incorrect." ) ; } } catch ( Exception e ) { System . err . println ( "Cannot setup ConfigurationTestCase!" ) ; e . printStackTrace ( ) ; System . exit ( 1 ) ; } } private void showIterator ( FileWriter result , Iterator i ) throws Exception { while ( i . hasNext ( ) ) { result . write ( ( String ) i . next ( ) ) ; result . write ( "\n" ) ; } result . write ( "\n" ) ; } private void showVector ( FileWriter result , Vector v ) throws Exception { for ( int j = 0 ; j < v . size ( ) ; j ++ ) { result . write ( ( String ) v . get ( j ) ) ; result . write ( "\n" ) ; } result . write ( "\n" ) ; } private void message ( FileWriter result , String message ) throws Exception { result . write ( "--------------------------------------------------\n" ) ; result . write ( message + "\n" ) ; result . write ( "--------------------------------------------------\n" ) ; result . write ( "\n" ) ; } } 	0
package org . apache . velocity . runtime . log ; import java . io . File ; import org . apache . log . Priority ; import org . apache . log . Logger ; import org . apache . log . Hierarchy ; import org . apache . log . LogTarget ; import org . apache . log . output . io . FileTarget ; import org . apache . velocity . runtime . RuntimeServices ; import org . apache . velocity . runtime . RuntimeConstants ; public class AvalonLogSystem implements LogSystem { private Logger logger = null ; private RuntimeServices rsvc = null ; public AvalonLogSystem ( ) { } public void init ( RuntimeServices rs ) throws Exception { this . rsvc = rs ; String loggerName = ( String ) rsvc . getProperty ( "runtime.log.logsystem.avalon.logger" ) ; if ( loggerName != null ) { this . logger = Hierarchy . getDefaultHierarchy ( ) . getLoggerFor ( loggerName ) ; } else { String logfile = ( String ) rsvc . getProperty ( RuntimeConstants . RUNTIME_LOG ) ; try { init ( logfile ) ; logVelocityMessage ( 0 , "AvalonLogSystem initialized using logfile '" + logfile + "'" ) ; } catch ( Exception e ) { System . out . println ( "PANIC : Error configuring AvalonLogSystem : " + e ) ; System . err . println ( "PANIC : Error configuring AvalonLogSystem : " + e ) ; throw new Exception ( "Unable to configure AvalonLogSystem : " + e ) ; } } } public void init ( String logFile ) throws Exception { FileTarget target = new FileTarget ( new File ( logFile ) , false , new VelocityFormatter ( "%{time} %{message}\\n%{throwable}" ) ) ; logger = Hierarchy . getDefaultHierarchy ( ) . getLoggerFor ( rsvc . toString ( ) ) ; logger . setPriority ( Priority . DEBUG ) ; logger . setLogTargets ( new LogTarget [ ] { target } ) ; } public void logVelocityMessage ( int level , String message ) { switch ( level ) { case LogSystem . WARN_ID : logger . warn ( RuntimeConstants . WARN_PREFIX + message ) ; break ; case LogSystem . INFO_ID : logger . info ( RuntimeConstants . INFO_PREFIX + message ) ; break ; case LogSystem . DEBUG_ID : logger . debug ( RuntimeConstants . DEBUG_PREFIX + message ) ; break ; case LogSystem . ERROR_ID : logger . error ( RuntimeConstants . ERROR_PREFIX + message ) ; break ; default : logger . info ( message ) ; break ; } } } 	1
package org . apache . velocity . test ; import java . io . StringWriter ; import org . apache . velocity . app . Velocity ; import org . apache . velocity . VelocityContext ; import org . apache . velocity . runtime . log . LogSystem ; import org . apache . velocity . exception . MethodInvocationException ; import junit . framework . TestCase ; public class MethodInvocationExceptionTest extends TestCase { public MethodInvocationExceptionTest ( ) { super ( "MethodInvocationExceptionTest" ) ; try { Velocity . init ( ) ; } catch ( Exception e ) { System . err . println ( "Cannot setup MethodInvocationExceptionTest : " + e ) ; System . exit ( 1 ) ; } } public static junit . framework . Test suite ( ) { return new MethodInvocationExceptionTest ( ) ; } public void runTest ( ) { String template = "$woogie.doException() boing!" ; VelocityContext vc = new VelocityContext ( ) ; vc . put ( "woogie" , this ) ; StringWriter w = new StringWriter ( ) ; try { Velocity . evaluate ( vc , w , "test" , template ) ; fail ( "No exception thrown" ) ; } catch ( MethodInvocationException mie ) { System . out . println ( "Caught MIE (good!) :" ) ; System . out . println ( "  reference = " + mie . getReferenceName ( ) ) ; System . out . println ( "  method    = " + mie . getMethodName ( ) ) ; Throwable t = mie . getWrappedThrowable ( ) ; System . out . println ( "  throwable = " + t ) ; if ( t instanceof Exception ) { System . out . println ( "  exception = " + ( ( Exception ) t ) . getMessage ( ) ) ; } } catch ( Exception e ) { fail ( "Wrong exception thrown, first test." + e ) ; e . printStackTrace ( ) ; } template = "$woogie.foo boing!" ; try { Velocity . evaluate ( vc , w , "test" , template ) ; fail ( "No exception thrown, second test." ) ; } catch ( MethodInvocationException mie ) { System . out . println ( "Caught MIE (good!) :" ) ; System . out . println ( "  reference = " + mie . getReferenceName ( ) ) ; System . out . println ( "  method    = " + mie . getMethodName ( ) ) ; Throwable t = mie . getWrappedThrowable ( ) ; System . out . println ( "  throwable = " + t ) ; if ( t instanceof Exception ) { System . out . println ( "  exception = " + ( ( Exception ) t ) . getMessage ( ) ) ; } } catch ( Exception e ) { fail ( "Wrong exception thrown, second test" ) ; } template = "$woogie.Foo boing!" ; try { Velocity . evaluate ( vc , w , "test" , template ) ; fail ( "No exception thrown, third test." ) ; } catch ( MethodInvocationException mie ) { System . out . println ( "Caught MIE (good!) :" ) ; System . out . println ( "  reference = " + mie . getReferenceName ( ) ) ; System . out . println ( "  method    = " + mie . getMethodName ( ) ) ; Throwable t = mie . getWrappedThrowable ( ) ; System . out . println ( "  throwable = " + t ) ; if ( t instanceof Exception ) { System . out . println ( "  exception = " + ( ( Exception ) t ) . getMessage ( ) ) ; } } catch ( Exception e ) { fail ( "Wrong exception thrown, third test" ) ; } template = "#set($woogie.foo = 'lala') boing!" ; try { Velocity . evaluate ( vc , w , "test" , template ) ; fail ( "No exception thrown, set test." ) ; } catch ( MethodInvocationException mie ) { System . out . println ( "Caught MIE (good!) :" ) ; System . out . println ( "  reference = " + mie . getReferenceName ( ) ) ; System . out . println ( "  method    = " + mie . getMethodName ( ) ) ; Throwable t = mie . getWrappedThrowable ( ) ; System . out . println ( "  throwable = " + t ) ; if ( t instanceof Exception ) { System . out . println ( "  exception = " + ( ( Exception ) t ) . getMessage ( ) ) ; } } catch ( Exception e ) { fail ( "Wrong exception thrown, set test" ) ; } } public void doException ( ) throws Exception { throw new NullPointerException ( ) ; } public void getFoo ( ) throws Exception { throw new Exception ( "Hello from getFoo()" ) ; } public void setFoo ( String foo ) throws Exception { throw new Exception ( "Hello from setFoo()" ) ; } } 	0
package org . apache . velocity . runtime . parser . node ; import org . apache . velocity . context . InternalContextAdapter ; import org . apache . velocity . runtime . parser . Parser ; public class ASTFalse extends SimpleNode { private static Boolean value = Boolean . FALSE ; public ASTFalse ( int id ) { super ( id ) ; } public ASTFalse ( Parser p , int id ) { super ( p , id ) ; } public Object jjtAccept ( ParserVisitor visitor , Object data ) { return visitor . visit ( this , data ) ; } public boolean evaluate ( InternalContextAdapter context ) { return false ; } public Object value ( InternalContextAdapter context ) { return value ; } } 	1
package org . apache . velocity . test ; import java . io . BufferedWriter ; import java . io . FileOutputStream ; import java . io . OutputStreamWriter ; import java . io . StringWriter ; import java . util . Vector ; import org . apache . velocity . VelocityContext ; import org . apache . velocity . Template ; import org . apache . velocity . app . Velocity ; import org . apache . velocity . test . provider . TestProvider ; import org . apache . velocity . util . StringUtils ; import org . apache . velocity . app . Velocity ; import junit . framework . TestCase ; public class VelocimacroTestCase extends TestCase { private String template1 = "#macro(foo $a)$a#end #macro(bar $b)#foo($b)#end #foreach($i in [1..3])#bar($i)#end" ; private String result1 = "  123" ; public VelocimacroTestCase ( ) { super ( "VelocimacroTestCase" ) ; try { Velocity . setProperty ( Velocity . VM_PERM_INLINE_LOCAL , Boolean . TRUE ) ; Velocity . init ( ) ; } catch ( Exception e ) { System . err . println ( "Cannot setup VelocimacroTestCase!" ) ; System . exit ( 1 ) ; } } public static junit . framework . Test suite ( ) { return new VelocimacroTestCase ( ) ; } public void runTest ( ) { VelocityContext context = new VelocityContext ( ) ; try { StringWriter writer = new StringWriter ( ) ; Velocity . evaluate ( context , writer , "vm_chain1" , template1 ) ; String out = writer . toString ( ) ; if ( ! result1 . equals ( out ) ) { fail ( "output incorrect." ) ; } } catch ( Exception e ) { fail ( e . getMessage ( ) ) ; } } } 	0
package org . apache . velocity . runtime ; import java . io . InputStream ; import java . io . File ; import java . io . IOException ; import java . io . Reader ; import java . util . Map ; import java . util . Hashtable ; import java . util . Properties ; import java . util . Enumeration ; import java . util . HashMap ; import org . apache . velocity . Template ; import org . apache . velocity . runtime . log . LogManager ; import org . apache . velocity . runtime . log . LogSystem ; import org . apache . velocity . runtime . log . PrimordialLogSystem ; import org . apache . velocity . runtime . log . NullLogSystem ; import org . apache . velocity . runtime . parser . Parser ; import org . apache . velocity . runtime . parser . ParseException ; import org . apache . velocity . runtime . parser . node . SimpleNode ; import org . apache . velocity . runtime . directive . Directive ; import org . apache . velocity . runtime . VelocimacroFactory ; import org . apache . velocity . runtime . resource . ContentResource ; import org . apache . velocity . runtime . resource . ResourceManager ; import org . apache . velocity . util . SimplePool ; import org . apache . velocity . util . StringUtils ; import org . apache . velocity . util . introspection . Introspector ; import org . apache . velocity . util . introspection . Uberspect ; import org . apache . velocity . util . introspection . UberspectLoggable ; import org . apache . velocity . exception . ResourceNotFoundException ; import org . apache . velocity . exception . ParseErrorException ; import org . apache . commons . collections . ExtendedProperties ; public class RuntimeInstance implements RuntimeConstants , RuntimeServices { private VelocimacroFactory vmFactory = null ; private LogSystem logSystem = new PrimordialLogSystem ( ) ; private SimplePool parserPool ; private boolean initialized ; private ExtendedProperties overridingProperties = null ; private Hashtable runtimeDirectives ; private ExtendedProperties configuration = new ExtendedProperties ( ) ; private ResourceManager resourceManager = null ; private Introspector introspector = null ; private Map applicationAttributes = null ; private Uberspect uberSpect ; public RuntimeInstance ( ) { vmFactory = new VelocimacroFactory ( this ) ; introspector = new Introspector ( this ) ; applicationAttributes = new HashMap ( ) ; } public synchronized void init ( ) throws Exception { if ( initialized == false ) { info ( "************************************************************** " ) ; info ( "Starting Jakarta Velocity v1.4" ) ; info ( "RuntimeInstance initializing." ) ; initializeProperties ( ) ; initializeLogger ( ) ; initializeResourceManager ( ) ; initializeDirectives ( ) ; initializeParserPool ( ) ; initializeIntrospection ( ) ; vmFactory . initVelocimacro ( ) ; info ( "Velocity successfully started." ) ; initialized = true ; } } private void initializeIntrospection ( ) throws Exception { String rm = getString ( RuntimeConstants . UBERSPECT_CLASSNAME ) ; if ( rm != null && rm . length ( ) > 0 ) { Object o = null ; try { o = Class . forName ( rm ) . newInstance ( ) ; } catch ( ClassNotFoundException cnfe ) { String err = "The specified class for Uberspect (" + rm + ") does not exist (or is not accessible to the current classlaoder." ; error ( err ) ; throw new Exception ( err ) ; } if ( ! ( o instanceof Uberspect ) ) { String err = "The specified class for Uberspect (" + rm + ") does not implement org.apache.velocity.util.introspector.Uberspect." + " Velocity not initialized correctly." ; error ( err ) ; throw new Exception ( err ) ; } uberSpect = ( Uberspect ) o ; if ( uberSpect instanceof UberspectLoggable ) { ( ( UberspectLoggable ) uberSpect ) . setRuntimeLogger ( this ) ; } uberSpect . init ( ) ; } else { String err = "It appears that no class was specified as the" + " Uberspect.  Please ensure that all configuration" + " information is correct." ; error ( err ) ; throw new Exception ( err ) ; } } private void setDefaultProperties ( ) { try { InputStream inputStream = getClass ( ) . getResourceAsStream ( '/' + DEFAULT_RUNTIME_PROPERTIES ) ; configuration . load ( inputStream ) ; info ( "Default Properties File: " + new File ( DEFAULT_RUNTIME_PROPERTIES ) . getPath ( ) ) ; } catch ( IOException ioe ) { System . err . println ( "Cannot get Velocity Runtime default properties!" ) ; } } public void setProperty ( String key , Object value ) { if ( overridingProperties == null ) { overridingProperties = new ExtendedProperties ( ) ; } overridingProperties . setProperty ( key , value ) ; } public void setConfiguration ( ExtendedProperties configuration ) { if ( overridingProperties == null ) { overridingProperties = configuration ; } else { if ( overridingProperties != configuration ) { overridingProperties . combine ( configuration ) ; } } } public void addProperty ( String key , Object value ) { if ( overridingProperties == null ) { overridingProperties = new ExtendedProperties ( ) ; } overridingProperties . addProperty ( key , value ) ; } public void clearProperty ( String key ) { if ( overridingProperties != null ) { overridingProperties . clearProperty ( key ) ; } } public Object getProperty ( String key ) { return configuration . getProperty ( key ) ; } private void initializeProperties ( ) { if ( configuration . isInitialized ( ) == false ) { setDefaultProperties ( ) ; } if ( overridingProperties != null ) { configuration . combine ( overridingProperties ) ; } } public void init ( Properties p ) throws Exception { overridingProperties = ExtendedProperties . convertProperties ( p ) ; init ( ) ; } public void init ( String configurationFile ) throws Exception { overridingProperties = new ExtendedProperties ( configurationFile ) ; init ( ) ; } private void initializeResourceManager ( ) throws Exception { String rm = getString ( RuntimeConstants . RESOURCE_MANAGER_CLASS ) ; if ( rm != null && rm . length ( ) > 0 ) { Object o = null ; try { o = Class . forName ( rm ) . newInstance ( ) ; } catch ( ClassNotFoundException cnfe ) { String err = "The specified class for Resourcemanager (" + rm + ") does not exist (or is not accessible to the current classlaoder." ; error ( err ) ; throw new Exception ( err ) ; } if ( ! ( o instanceof ResourceManager ) ) { String err = "The specified class for ResourceManager (" + rm + ") does not implement org.apache.runtime.resource.ResourceManager." + " Velocity not initialized correctly." ; error ( err ) ; throw new Exception ( err ) ; } resourceManager = ( ResourceManager ) o ; resourceManager . initialize ( this ) ; } else { String err = "It appears that no class was specified as the" + " ResourceManager.  Please ensure that all configuration" + " information is correct." ; error ( err ) ; throw new Exception ( err ) ; } } private void initializeLogger ( ) throws Exception { if ( logSystem instanceof PrimordialLogSystem ) { PrimordialLogSystem pls = ( PrimordialLogSystem ) logSystem ; logSystem = LogManager . createLogSystem ( this ) ; if ( logSystem == null ) { logSystem = new NullLogSystem ( ) ; } else { pls . dumpLogMessages ( logSystem ) ; } } } private void initializeDirectives ( ) throws Exception { runtimeDirectives = new Hashtable ( ) ; Properties directiveProperties = new Properties ( ) ; InputStream inputStream = getClass ( ) . getResourceAsStream ( '/' + DEFAULT_RUNTIME_DIRECTIVES ) ; if ( inputStream == null ) throw new Exception ( "Error loading directive.properties! " + "Something is very wrong if these properties " + "aren't being located. Either your Velocity " + "distribution is incomplete or your Velocity " + "jar file is corrupted!" ) ; directiveProperties . load ( inputStream ) ; Enumeration directiveClasses = directiveProperties . elements ( ) ; while ( directiveClasses . hasMoreElements ( ) ) { String directiveClass = ( String ) directiveClasses . nextElement ( ) ; loadDirective ( directiveClass , "System" ) ; } String [ ] userdirective = configuration . getStringArray ( "userdirective" ) ; for ( int i = 0 ; i < userdirective . length ; i ++ ) { loadDirective ( userdirective [ i ] , "User" ) ; } } private void loadDirective ( String directiveClass , String caption ) { try { Object o = Class . forName ( directiveClass ) . newInstance ( ) ; if ( o instanceof Directive ) { Directive directive = ( Directive ) o ; runtimeDirectives . put ( directive . getName ( ) , directive ) ; info ( "Loaded " + caption + " Directive: " + directiveClass ) ; } else { error ( caption + " Directive " + directiveClass + " is not org.apache.velocity.runtime.directive.Directive." + " Ignoring. " ) ; } } catch ( Exception e ) { error ( "Exception Loading " + caption + " Directive: " + directiveClass + " : " + e ) ; } } private void initializeParserPool ( ) { int numParsers = getInt ( PARSER_POOL_SIZE , NUMBER_OF_PARSERS ) ; parserPool = new SimplePool ( numParsers ) ; for ( int i = 0 ; i < numParsers ; i ++ ) { parserPool . put ( createNewParser ( ) ) ; } info ( "Created: " + numParsers + " parsers." ) ; } public Parser createNewParser ( ) { Parser parser = new Parser ( this ) ; parser . setDirectives ( runtimeDirectives ) ; return parser ; } public SimpleNode parse ( Reader reader , String templateName ) throws ParseException { return parse ( reader , templateName , true ) ; } public SimpleNode parse ( Reader reader , String templateName , boolean dumpNamespace ) throws ParseException { SimpleNode ast = null ; Parser parser = ( Parser ) parserPool . get ( ) ; boolean madeNew = false ; if ( parser == null ) { error ( "Runtime : ran out of parsers. Creating new.  " + " Please increment the parser.pool.size property." + " The current value is too small." ) ; parser = createNewParser ( ) ; if ( parser != null ) { madeNew = true ; } } if ( parser != null ) { try { if ( dumpNamespace ) { dumpVMNamespace ( templateName ) ; } ast = parser . parse ( reader , templateName ) ; } finally { if ( ! madeNew ) { parserPool . put ( parser ) ; } } } else { error ( "Runtime : ran out of parsers and unable to create more." ) ; } return ast ; } public Template getTemplate ( String name ) throws ResourceNotFoundException , ParseErrorException , Exception { return getTemplate ( name , getString ( INPUT_ENCODING , ENCODING_DEFAULT ) ) ; } public Template getTemplate ( String name , String encoding ) throws ResourceNotFoundException , ParseErrorException , Exception { return ( Template ) resourceManager . getResource ( name , ResourceManager . RESOURCE_TEMPLATE , encoding ) ; } public ContentResource getContent ( String name ) throws ResourceNotFoundException , ParseErrorException , Exception { return getContent ( name , getString ( INPUT_ENCODING , ENCODING_DEFAULT ) ) ; } public ContentResource getContent ( String name , String encoding ) throws ResourceNotFoundException , ParseErrorException , Exception { return ( ContentResource ) resourceManager . getResource ( name , ResourceManager . RESOURCE_CONTENT , encoding ) ; } public String getLoaderNameForResource ( String resourceName ) { return resourceManager . getLoaderNameForResource ( resourceName ) ; } private boolean showStackTrace ( ) { if ( configuration . isInitialized ( ) ) { return getBoolean ( RUNTIME_LOG_WARN_STACKTRACE , false ) ; } else { return false ; } } private void log ( int level , Object message ) { String out ; if ( showStackTrace ( ) && ( message instanceof Throwable || message instanceof Exception ) ) { out = StringUtils . stackTrace ( ( Throwable ) message ) ; } else { out = message . toString ( ) ; } logSystem . logVelocityMessage ( level , out ) ; } public void warn ( Object message ) { log ( LogSystem . WARN_ID , message ) ; } public void info ( Object message ) { log ( LogSystem . INFO_ID , message ) ; } public void error ( Object message ) { log ( LogSystem . ERROR_ID , message ) ; } public void debug ( Object message ) { log ( LogSystem . DEBUG_ID , message ) ; } public String getString ( String key , String defaultValue ) { return configuration . getString ( key , defaultValue ) ; } public Directive getVelocimacro ( String vmName , String templateName ) { return vmFactory . getVelocimacro ( vmName , templateName ) ; } public boolean addVelocimacro ( String name , String macro , String argArray [ ] , String sourceTemplate ) { return vmFactory . addVelocimacro ( name , macro , argArray , sourceTemplate ) ; } public boolean isVelocimacro ( String vmName , String templateName ) { return vmFactory . isVelocimacro ( vmName , templateName ) ; } public boolean dumpVMNamespace ( String namespace ) { return vmFactory . dumpVMNamespace ( namespace ) ; } public String getString ( String key ) { return configuration . getString ( key ) ; } public int getInt ( String key ) { return configuration . getInt ( key ) ; } public int getInt ( String key , int defaultValue ) { return configuration . getInt ( key , defaultValue ) ; } public boolean getBoolean ( String key , boolean def ) { return configuration . getBoolean ( key , def ) ; } public ExtendedProperties getConfiguration ( ) { return configuration ; } public Introspector getIntrospector ( ) { return introspector ; } public Object getApplicationAttribute ( Object key ) { return applicationAttributes . get ( key ) ; } public Object setApplicationAttribute ( Object key , Object o ) { return applicationAttributes . put ( key , o ) ; } public Uberspect getUberspect ( ) { return uberSpect ; } } 	1
package org . apache . velocity . test ; import java . io . BufferedWriter ; import java . io . FileOutputStream ; import java . io . OutputStreamWriter ; import java . io . Writer ; import org . apache . velocity . Template ; import org . apache . velocity . app . Velocity ; import org . apache . velocity . VelocityContext ; import org . apache . velocity . runtime . RuntimeSingleton ; public class ClasspathResourceTest extends BaseTestCase { private static final String TMPL_FILE_EXT = "vm" ; private static final String CMP_FILE_EXT = "cmp" ; private static final String RESULT_FILE_EXT = "res" ; private static final String RESULTS_DIR = "../test/cpload/results" ; private static final String COMPARE_DIR = "../test/cpload/compare" ; public ClasspathResourceTest ( ) { super ( "ClasspathResourceTest" ) ; try { assureResultsDirectoryExists ( RESULTS_DIR ) ; Velocity . setProperty ( Velocity . RESOURCE_LOADER , "classpath" ) ; Velocity . addProperty ( "classpath." + Velocity . RESOURCE_LOADER + ".class" , "org.apache.velocity.runtime.resource.loader.ClasspathResourceLoader" ) ; Velocity . setProperty ( "classpath." + Velocity . RESOURCE_LOADER + ".cache" , "false" ) ; Velocity . setProperty ( "classpath." + Velocity . RESOURCE_LOADER + ".modificationCheckInterval" , "2" ) ; Velocity . init ( ) ; } catch ( Exception e ) { System . err . println ( "Cannot setup ClasspathResourceTest!" ) ; e . printStackTrace ( ) ; System . exit ( 1 ) ; } } public static junit . framework . Test suite ( ) { return new ClasspathResourceTest ( ) ; } public void runTest ( ) { try { assureResultsDirectoryExists ( RESULTS_DIR ) ; Template template1 = RuntimeSingleton . getTemplate ( getFileName ( null , "template/test1" , TMPL_FILE_EXT ) ) ; Template template2 = RuntimeSingleton . getTemplate ( getFileName ( null , "template/test2" , TMPL_FILE_EXT ) ) ; FileOutputStream fos1 = new FileOutputStream ( getFileName ( RESULTS_DIR , "test1" , RESULT_FILE_EXT ) ) ; FileOutputStream fos2 = new FileOutputStream ( getFileName ( RESULTS_DIR , "test2" , RESULT_FILE_EXT ) ) ; Writer writer1 = new BufferedWriter ( new OutputStreamWriter ( fos1 ) ) ; Writer writer2 = new BufferedWriter ( new OutputStreamWriter ( fos2 ) ) ; VelocityContext context = new VelocityContext ( ) ; template1 . merge ( context , writer1 ) ; writer1 . flush ( ) ; writer1 . close ( ) ; template2 . merge ( context , writer2 ) ; writer2 . flush ( ) ; writer2 . close ( ) ; if ( ! isMatch ( RESULTS_DIR , COMPARE_DIR , "test1" , RESULT_FILE_EXT , CMP_FILE_EXT ) || ! isMatch ( RESULTS_DIR , COMPARE_DIR , "test2" , RESULT_FILE_EXT , CMP_FILE_EXT ) ) { fail ( "Output is incorrect!" ) ; } } catch ( Exception e ) { fail ( e . getMessage ( ) ) ; } } } 	0
package org . apache . velocity . runtime . resource . loader ; import java . io . InputStream ; import java . util . Hashtable ; import java . util . Vector ; import org . apache . velocity . util . StringUtils ; import org . apache . velocity . runtime . resource . Resource ; import org . apache . velocity . exception . ResourceNotFoundException ; import org . apache . commons . collections . ExtendedProperties ; public class JarResourceLoader extends ResourceLoader { private Hashtable entryDirectory = new Hashtable ( 559 ) ; private Hashtable jarfiles = new Hashtable ( 89 ) ; public void init ( ExtendedProperties configuration ) { rsvc . info ( "JarResourceLoader : initialization starting." ) ; Vector paths = configuration . getVector ( "path" ) ; if ( paths == null || paths . size ( ) == 0 ) { paths = configuration . getVector ( "resource.path" ) ; if ( paths != null && paths . size ( ) > 0 ) { rsvc . warn ( "JarResourceLoader : you are using a deprecated configuration" + " property for the JarResourceLoader -> '<name>.resource.loader.resource.path'." + " Please change to the conventional '<name>.resource.loader.path'." ) ; } } rsvc . info ( "JarResourceLoader # of paths : " + paths . size ( ) ) ; for ( int i = 0 ; i < paths . size ( ) ; i ++ ) { loadJar ( ( String ) paths . get ( i ) ) ; } rsvc . info ( "JarResourceLoader : initialization complete." ) ; } private void loadJar ( String path ) { rsvc . info ( "JarResourceLoader : trying to load: " + path ) ; if ( path == null ) { rsvc . error ( "JarResourceLoader : can not load JAR - JAR path is null" ) ; } if ( ! path . startsWith ( "jar:" ) ) { rsvc . error ( "JarResourceLoader : JAR path must start with jar: -> " + "see java.net.JarURLConnection for information" ) ; } if ( ! path . endsWith ( "!/" ) ) { path += "!/" ; } closeJar ( path ) ; JarHolder temp = new JarHolder ( rsvc , path ) ; addEntries ( temp . getEntries ( ) ) ; jarfiles . put ( temp . getUrlPath ( ) , temp ) ; } private void closeJar ( String path ) { if ( jarfiles . containsKey ( path ) ) { JarHolder theJar = ( JarHolder ) jarfiles . get ( path ) ; theJar . close ( ) ; } } private synchronized void addEntries ( Hashtable entries ) { entryDirectory . putAll ( entries ) ; } public synchronized InputStream getResourceStream ( String source ) throws ResourceNotFoundException { InputStream results = null ; if ( source == null || source . length ( ) == 0 ) { throw new ResourceNotFoundException ( "Need to have a resource!" ) ; } String normalizedPath = StringUtils . normalizePath ( source ) ; if ( normalizedPath == null || normalizedPath . length ( ) == 0 ) { String msg = "JAR resource error : argument " + normalizedPath + " contains .. and may be trying to access " + "content outside of template root.  Rejected." ; rsvc . error ( "JarResourceLoader : " + msg ) ; throw new ResourceNotFoundException ( msg ) ; } if ( normalizedPath . startsWith ( "/" ) ) { normalizedPath = normalizedPath . substring ( 1 ) ; } if ( entryDirectory . containsKey ( normalizedPath ) ) { String jarurl = ( String ) entryDirectory . get ( normalizedPath ) ; if ( jarfiles . containsKey ( jarurl ) ) { JarHolder holder = ( JarHolder ) jarfiles . get ( jarurl ) ; results = holder . getResource ( normalizedPath ) ; return results ; } } throw new ResourceNotFoundException ( "JarResourceLoader Error: cannot find resource " + source ) ; } public boolean isSourceModified ( Resource resource ) { return true ; } public long getLastModified ( Resource resource ) { return 0 ; } } 	1
package org . apache . velocity . runtime . parser . node ; import org . apache . velocity . context . InternalContextAdapter ; import org . apache . velocity . runtime . parser . Parser ; public class ASTNumberLiteral extends SimpleNode { private Integer value = null ; public ASTNumberLiteral ( int id ) { super ( id ) ; } public ASTNumberLiteral ( Parser p , int id ) { super ( p , id ) ; } public Object jjtAccept ( ParserVisitor visitor , Object data ) { return visitor . visit ( this , data ) ; } public Object init ( InternalContextAdapter context , Object data ) throws Exception { super . init ( context , data ) ; value = new Integer ( getFirstToken ( ) . image ) ; return data ; } public Object value ( InternalContextAdapter context ) { return value ; } } 	0
package org . apache . velocity . texen . util ; import java . io . File ; public class FileUtil { static public String mkdir ( String s ) { try { if ( ( new File ( s ) ) . mkdirs ( ) ) return "Created dir: " + s ; else return "Failed to create dir or dir already exists: " + s ; } catch ( Exception e ) { return e . toString ( ) ; } } public static File file ( String s ) { File f = new File ( s ) ; return f ; } public static File file ( String base , String s ) { File f = new File ( base , s ) ; return f ; } } 	1
package org . apache . velocity . test . provider ; public class BoolObj { public boolean isBoolean ( ) { return true ; } public String isNotboolean ( ) { return "hello" ; } } 	0
package org . apache . velocity . context ; import java . util . HashMap ; import org . apache . velocity . runtime . RuntimeServices ; import org . apache . velocity . runtime . RuntimeConstants ; import org . apache . velocity . runtime . directive . VMProxyArg ; import org . apache . velocity . util . introspection . IntrospectionCacheData ; import org . apache . velocity . runtime . resource . Resource ; import org . apache . velocity . app . event . EventCartridge ; public class VMContext implements InternalContextAdapter { HashMap vmproxyhash = new HashMap ( ) ; HashMap localcontext = new HashMap ( ) ; InternalContextAdapter innerContext = null ; InternalContextAdapter wrappedContext = null ; private boolean localcontextscope = false ; public VMContext ( InternalContextAdapter inner , RuntimeServices rsvc ) { localcontextscope = rsvc . getBoolean ( RuntimeConstants . VM_CONTEXT_LOCALSCOPE , false ) ; wrappedContext = inner ; innerContext = inner . getBaseContext ( ) ; } public Context getInternalUserContext ( ) { return innerContext . getInternalUserContext ( ) ; } public InternalContextAdapter getBaseContext ( ) { return innerContext . getBaseContext ( ) ; } public void addVMProxyArg ( VMProxyArg vmpa ) { String key = vmpa . getContextReference ( ) ; if ( vmpa . isConstant ( ) ) { localcontext . put ( key , vmpa . getObject ( wrappedContext ) ) ; } else { vmproxyhash . put ( key , vmpa ) ; } } public Object put ( String key , Object value ) { VMProxyArg vmpa = ( VMProxyArg ) vmproxyhash . get ( key ) ; if ( vmpa != null ) { return vmpa . setObject ( wrappedContext , value ) ; } else { if ( localcontextscope ) { return localcontext . put ( key , value ) ; } else { if ( localcontext . containsKey ( key ) ) { return localcontext . put ( key , value ) ; } else { return innerContext . put ( key , value ) ; } } } } public Object get ( String key ) { Object o = null ; VMProxyArg vmpa = ( VMProxyArg ) vmproxyhash . get ( key ) ; if ( vmpa != null ) { o = vmpa . getObject ( wrappedContext ) ; } else { if ( localcontextscope ) { o = localcontext . get ( key ) ; } else { o = localcontext . get ( key ) ; if ( o == null ) { o = innerContext . get ( key ) ; } } } return o ; } public boolean containsKey ( Object key ) { return false ; } public Object [ ] getKeys ( ) { return vmproxyhash . keySet ( ) . toArray ( ) ; } public Object remove ( Object key ) { return vmproxyhash . remove ( key ) ; } public void pushCurrentTemplateName ( String s ) { innerContext . pushCurrentTemplateName ( s ) ; } public void popCurrentTemplateName ( ) { innerContext . popCurrentTemplateName ( ) ; } public String getCurrentTemplateName ( ) { return innerContext . getCurrentTemplateName ( ) ; } public Object [ ] getTemplateNameStack ( ) { return innerContext . getTemplateNameStack ( ) ; } public IntrospectionCacheData icacheGet ( Object key ) { return innerContext . icacheGet ( key ) ; } public void icachePut ( Object key , IntrospectionCacheData o ) { innerContext . icachePut ( key , o ) ; } public EventCartridge attachEventCartridge ( EventCartridge ec ) { return innerContext . attachEventCartridge ( ec ) ; } public EventCartridge getEventCartridge ( ) { return innerContext . getEventCartridge ( ) ; } public void setCurrentResource ( Resource r ) { innerContext . setCurrentResource ( r ) ; } public Resource getCurrentResource ( ) { return innerContext . getCurrentResource ( ) ; } } 	1
package org . apache . velocity . test ; import java . io . File ; import org . apache . velocity . VelocityContext ; import org . apache . velocity . util . StringUtils ; import junit . framework . TestCase ; public class TexenTestCase extends BaseTestCase { private static final String RESULTS_DIR = "../test/texen/results" ; private static final String COMPARE_DIR = "../test/texen/compare" ; public TexenTestCase ( ) { super ( "TexenTestCase" ) ; } public static junit . framework . Test suite ( ) { return new TexenTestCase ( ) ; } protected void setUp ( ) { } public void runTest ( ) { try { assureResultsDirectoryExists ( RESULTS_DIR ) ; if ( ! isMatch ( RESULTS_DIR , COMPARE_DIR , "TurbineWeather" , "java" , "java" ) || ! isMatch ( RESULTS_DIR , COMPARE_DIR , "TurbineWeatherService" , "java" , "java" ) || ! isMatch ( RESULTS_DIR , COMPARE_DIR , "WeatherService" , "java" , "java" ) || ! isMatch ( RESULTS_DIR , COMPARE_DIR , "book" , "txt" , "txt" ) || ! isMatch ( RESULTS_DIR , COMPARE_DIR , "Test" , "txt" , "txt" ) ) { fail ( "Output is incorrect!" ) ; } } catch ( Exception e ) { } } } 	0
package org . apache . velocity . runtime . log ; import java . util . Enumeration ; import org . apache . log4j . Category ; import org . apache . log4j . RollingFileAppender ; import org . apache . log4j . PatternLayout ; import org . apache . log4j . Priority ; import org . apache . log4j . Appender ; import org . apache . velocity . runtime . RuntimeConstants ; import org . apache . velocity . runtime . RuntimeServices ; public class SimpleLog4JLogSystem implements LogSystem { private RuntimeServices rsvc = null ; protected Category logger = null ; public SimpleLog4JLogSystem ( ) { } public void init ( RuntimeServices rs ) { rsvc = rs ; String categoryname = ( String ) rsvc . getProperty ( "runtime.log.logsystem.log4j.category" ) ; if ( categoryname != null ) { logger = Category . getInstance ( categoryname ) ; logVelocityMessage ( 0 , "SimpleLog4JLogSystem using category '" + categoryname + "'" ) ; return ; } String logfile = rsvc . getString ( RuntimeConstants . RUNTIME_LOG ) ; try { internalInit ( logfile ) ; logVelocityMessage ( 0 , "SimpleLog4JLogSystem initialized using logfile '" + logfile + "'" ) ; } catch ( Exception e ) { System . out . println ( "PANIC : error configuring SimpleLog4JLogSystem : " + e ) ; } } private void internalInit ( String logfile ) throws Exception { logger = Category . getInstance ( this . getClass ( ) . getName ( ) ) ; logger . setAdditivity ( false ) ; logger . setPriority ( Priority . DEBUG ) ; RollingFileAppender appender = new RollingFileAppender ( new PatternLayout ( "%d - %m%n" ) , logfile , true ) ; appender . setMaxBackupIndex ( 1 ) ; appender . setMaximumFileSize ( 100000 ) ; logger . addAppender ( appender ) ; } public void logVelocityMessage ( int level , String message ) { switch ( level ) { case LogSystem . WARN_ID : logger . warn ( message ) ; break ; case LogSystem . INFO_ID : logger . info ( message ) ; break ; case LogSystem . DEBUG_ID : logger . debug ( message ) ; break ; case LogSystem . ERROR_ID : logger . error ( message ) ; break ; default : logger . debug ( message ) ; break ; } } protected void finalize ( ) throws Throwable { shutdown ( ) ; } public void shutdown ( ) { Enumeration appenders = logger . getAllAppenders ( ) ; while ( appenders . hasMoreElements ( ) ) { Appender appender = ( Appender ) appenders . nextElement ( ) ; appender . close ( ) ; } } } 	1
package org . apache . velocity . test ; import junit . framework . TestCase ; import junit . framework . Test ; import org . apache . velocity . util . StringUtils ; public class MiscTestCase extends BaseTestCase { public MiscTestCase ( ) { super ( "MiscTestCase" ) ; } public MiscTestCase ( String name ) { super ( name ) ; } public static Test suite ( ) { return new MiscTestCase ( ) ; } public void runTest ( ) { String eol = "XY" ; String arg = "XY" ; String res = StringUtils . chop ( arg , 1 , eol ) ; assertTrue ( "Test 1" , res . equals ( "" ) ) ; arg = "X" ; res = StringUtils . chop ( arg , 1 , eol ) ; assertTrue ( "Test 2" , res . equals ( "" ) ) ; arg = "ZXY" ; res = StringUtils . chop ( arg , 1 , eol ) ; assertTrue ( "Test 3" , res . equals ( "Z" ) ) ; arg = "Hello!" ; res = StringUtils . chop ( arg , 2 , eol ) ; assertTrue ( "Test 4" , res . equals ( "Hell" ) ) ; } } 	0
package org . apache . velocity . runtime . parser . node ; import java . io . Writer ; import java . io . IOException ; import org . apache . velocity . context . InternalContextAdapter ; import org . apache . velocity . runtime . RuntimeServices ; import org . apache . velocity . runtime . exception . ReferenceException ; import org . apache . velocity . runtime . parser . Parser ; import org . apache . velocity . runtime . parser . Token ; import org . apache . velocity . exception . MethodInvocationException ; import org . apache . velocity . exception . ParseErrorException ; import org . apache . velocity . exception . ResourceNotFoundException ; public class SimpleNode implements Node { protected RuntimeServices rsvc = null ; protected Node parent ; protected Node [ ] children ; protected int id ; protected Parser parser ; protected int info ; public boolean state ; protected boolean invalid = false ; protected Token first , last ; public SimpleNode ( int i ) { id = i ; } public SimpleNode ( Parser p , int i ) { this ( i ) ; parser = p ; } public void jjtOpen ( ) { first = parser . getToken ( 1 ) ; } public void jjtClose ( ) { last = parser . getToken ( 0 ) ; } public void setFirstToken ( Token t ) { this . first = t ; } public Token getFirstToken ( ) { return first ; } public Token getLastToken ( ) { return last ; } public void jjtSetParent ( Node n ) { parent = n ; } public Node jjtGetParent ( ) { return parent ; } public void jjtAddChild ( Node n , int i ) { if ( children == null ) { children = new Node [ i + 1 ] ; } else if ( i >= children . length ) { Node c [ ] = new Node [ i + 1 ] ; System . arraycopy ( children , 0 , c , 0 , children . length ) ; children = c ; } children [ i ] = n ; } public Node jjtGetChild ( int i ) { return children [ i ] ; } public int jjtGetNumChildren ( ) { return ( children == null ) ? 0 : children . length ; } public Object jjtAccept ( ParserVisitor visitor , Object data ) { return visitor . visit ( this , data ) ; } public Object childrenAccept ( ParserVisitor visitor , Object data ) { if ( children != null ) { for ( int i = 0 ; i < children . length ; ++ i ) { children [ i ] . jjtAccept ( visitor , data ) ; } } return data ; } public String toString ( String prefix ) { return prefix + toString ( ) ; } public void dump ( String prefix ) { System . out . println ( toString ( prefix ) ) ; if ( children != null ) { for ( int i = 0 ; i < children . length ; ++ i ) { SimpleNode n = ( SimpleNode ) children [ i ] ; if ( n != null ) { n . dump ( prefix + " " ) ; } } } } public String literal ( ) { Token t = first ; StringBuffer sb = new StringBuffer ( t . image ) ; while ( t != last ) { t = t . next ; sb . append ( t . image ) ; } return sb . toString ( ) ; } public Object init ( InternalContextAdapter context , Object data ) throws Exception { rsvc = ( RuntimeServices ) data ; int i , k = jjtGetNumChildren ( ) ; for ( i = 0 ; i < k ; i ++ ) { try { jjtGetChild ( i ) . init ( context , data ) ; } catch ( ReferenceException re ) { rsvc . error ( re ) ; } } return data ; } public boolean evaluate ( InternalContextAdapter context ) throws MethodInvocationException { return false ; } public Object value ( InternalContextAdapter context ) throws MethodInvocationException { return null ; } public boolean render ( InternalContextAdapter context , Writer writer ) throws IOException , MethodInvocationException , ParseErrorException , ResourceNotFoundException { int i , k = jjtGetNumChildren ( ) ; for ( i = 0 ; i < k ; i ++ ) jjtGetChild ( i ) . render ( context , writer ) ; return true ; } public Object execute ( Object o , InternalContextAdapter context ) throws MethodInvocationException { return null ; } public int getType ( ) { return id ; } public void setInfo ( int info ) { this . info = info ; } public int getInfo ( ) { return info ; } public void setInvalid ( ) { invalid = true ; } public boolean isInvalid ( ) { return invalid ; } public int getLine ( ) { return first . beginLine ; } public int getColumn ( ) { return first . beginColumn ; } } 	1
package org . apache . velocity . runtime . parser ; public interface ParserConstants { int EOF = 0 ; int LBRACKET = 1 ; int RBRACKET = 2 ; int COMMA = 3 ; int DOUBLEDOT = 4 ; int LPAREN = 5 ; int RPAREN = 6 ; int REFMOD2_RPAREN = 7 ; int ESCAPE_DIRECTIVE = 8 ; int SET_DIRECTIVE = 9 ; int DOLLAR = 10 ; int DOLLARBANG = 11 ; int HASH = 15 ; int DOUBLE_ESCAPE = 16 ; int ESCAPE = 17 ; int TEXT = 18 ; int SINGLE_LINE_COMMENT = 19 ; int FORMAL_COMMENT = 20 ; int MULTI_LINE_COMMENT = 21 ; int WHITESPACE = 23 ; int STRING_LITERAL = 24 ; int TRUE = 25 ; int FALSE = 26 ; int NEWLINE = 27 ; int MINUS = 28 ; int PLUS = 29 ; int MULTIPLY = 30 ; int DIVIDE = 31 ; int MODULUS = 32 ; int LOGICAL_AND = 33 ; int LOGICAL_OR = 34 ; int LOGICAL_LT = 35 ; int LOGICAL_LE = 36 ; int LOGICAL_GT = 37 ; int LOGICAL_GE = 38 ; int LOGICAL_EQUALS = 39 ; int LOGICAL_NOT_EQUALS = 40 ; int LOGICAL_NOT = 41 ; int EQUALS = 42 ; int END = 43 ; int IF_DIRECTIVE = 44 ; int ELSEIF_DIRECTIVE = 45 ; int ELSE_DIRECTIVE = 46 ; int STOP_DIRECTIVE = 47 ; int DIGIT = 48 ; int NUMBER_LITERAL = 49 ; int LETTER = 50 ; int DIRECTIVE_CHAR = 51 ; int WORD = 52 ; int ALPHA_CHAR = 53 ; int ALPHANUM_CHAR = 54 ; int IDENTIFIER_CHAR = 55 ; int IDENTIFIER = 56 ; int DOT = 57 ; int LCURLY = 58 ; int RCURLY = 59 ; int REFERENCE_TERMINATOR = 60 ; int DIRECTIVE_TERMINATOR = 61 ; int DIRECTIVE = 0 ; int REFMOD2 = 1 ; int REFMODIFIER = 2 ; int DEFAULT = 3 ; int PRE_DIRECTIVE = 4 ; int REFERENCE = 5 ; int IN_MULTI_LINE_COMMENT = 6 ; int IN_FORMAL_COMMENT = 7 ; int IN_SINGLE_LINE_COMMENT = 8 ; String [ ] tokenImage = { "<EOF>" , "\"[\"" , "\"]\"" , "\",\"" , "\"..\"" , "\"(\"" , "<RPAREN>" , "\")\"" , "<ESCAPE_DIRECTIVE>" , "<SET_DIRECTIVE>" , "<DOLLAR>" , "<DOLLARBANG>" , "\"##\"" , "<token of kind 13>" , "\"#*\"" , "\"#\"" , "\"\\\\\\\\\"" , "\"\\\\\"" , "<TEXT>" , "<SINGLE_LINE_COMMENT>" , "\"*#\"" , "\"*#\"" , "<token of kind 22>" , "<WHITESPACE>" , "<STRING_LITERAL>" , "\"true\"" , "\"false\"" , "<NEWLINE>" , "\"-\"" , "\"+\"" , "\"*\"" , "\"/\"" , "\"%\"" , "\"&&\"" , "\"||\"" , "\"<\"" , "\"<=\"" , "\">\"" , "\">=\"" , "\"==\"" , "\"!=\"" , "\"!\"" , "\"=\"" , "<END>" , "\"if\"" , "\"elseif\"" , "<ELSE_DIRECTIVE>" , "\"stop\"" , "<DIGIT>" , "<NUMBER_LITERAL>" , "<LETTER>" , "<DIRECTIVE_CHAR>" , "<WORD>" , "<ALPHA_CHAR>" , "<ALPHANUM_CHAR>" , "<IDENTIFIER_CHAR>" , "<IDENTIFIER>" , "<DOT>" , "\"{\"" , "\"}\"" , "<REFERENCE_TERMINATOR>" , "<DIRECTIVE_TERMINATOR>" , } ; } 	0
package org . apache . velocity . runtime . parser . node ; import org . apache . velocity . context . InternalContextAdapter ; import org . apache . velocity . runtime . parser . Parser ; import org . apache . velocity . exception . MethodInvocationException ; public class ASTLENode extends SimpleNode { public ASTLENode ( int id ) { super ( id ) ; } public ASTLENode ( Parser p , int id ) { super ( p , id ) ; } public Object jjtAccept ( ParserVisitor visitor , Object data ) { return visitor . visit ( this , data ) ; } public boolean evaluate ( InternalContextAdapter context ) throws MethodInvocationException { Object left = jjtGetChild ( 0 ) . value ( context ) ; Object right = jjtGetChild ( 1 ) . value ( context ) ; if ( left == null || right == null ) { rsvc . error ( ( left == null ? "Left" : "Right" ) + " side (" + jjtGetChild ( ( left == null ? 0 : 1 ) ) . literal ( ) + ") of '<=' operation has null value." + " Operation not possible. " + context . getCurrentTemplateName ( ) + " [line " + getLine ( ) + ", column " + getColumn ( ) + "]" ) ; return false ; } if ( ! ( left instanceof Integer ) || ! ( right instanceof Integer ) ) { rsvc . error ( ( ! ( left instanceof Integer ) ? "Left" : "Right" ) + " side of '<=' operation is not a valid type. " + " It is a " + ( ! ( left instanceof Integer ) ? left . getClass ( ) : right . getClass ( ) ) + ". Currently only integers (1,2,3...) and Integer type is supported. " + context . getCurrentTemplateName ( ) + " [line " + getLine ( ) + ", column " + getColumn ( ) + "]" ) ; return false ; } return ( ( Integer ) left ) . intValue ( ) <= ( ( Integer ) right ) . intValue ( ) ; } public Object value ( InternalContextAdapter context ) throws MethodInvocationException { boolean val = evaluate ( context ) ; return val ? Boolean . TRUE : Boolean . FALSE ; } } 	1
package org . apache . velocity . test . provider ; public class Child extends Person { public String getName ( ) { return "Child" ; } } 	0
package org . apache . velocity . runtime . parser . node ; import org . apache . velocity . context . InternalContextAdapter ; import org . apache . velocity . runtime . parser . * ; import org . apache . velocity . util . introspection . IntrospectionCacheData ; import org . apache . velocity . util . introspection . VelMethod ; import org . apache . velocity . util . introspection . Info ; import org . apache . velocity . exception . MethodInvocationException ; import java . lang . reflect . InvocationTargetException ; import org . apache . velocity . app . event . EventCartridge ; public class ASTMethod extends SimpleNode { private String methodName = "" ; private int paramCount = 0 ; public ASTMethod ( int id ) { super ( id ) ; } public ASTMethod ( Parser p , int id ) { super ( p , id ) ; } public Object jjtAccept ( ParserVisitor visitor , Object data ) { return visitor . visit ( this , data ) ; } public Object init ( InternalContextAdapter context , Object data ) throws Exception { super . init ( context , data ) ; methodName = getFirstToken ( ) . image ; paramCount = jjtGetNumChildren ( ) - 1 ; return data ; } public Object execute ( Object o , InternalContextAdapter context ) throws MethodInvocationException { VelMethod method = null ; Object [ ] params = new Object [ paramCount ] ; try { IntrospectionCacheData icd = context . icacheGet ( this ) ; Class c = o . getClass ( ) ; if ( icd != null && icd . contextData == c ) { for ( int j = 0 ; j < paramCount ; j ++ ) params [ j ] = jjtGetChild ( j + 1 ) . value ( context ) ; method = ( VelMethod ) icd . thingy ; } else { for ( int j = 0 ; j < paramCount ; j ++ ) params [ j ] = jjtGetChild ( j + 1 ) . value ( context ) ; method = rsvc . getUberspect ( ) . getMethod ( o , methodName , params , new Info ( "" , 1 , 1 ) ) ; if ( method != null ) { icd = new IntrospectionCacheData ( ) ; icd . contextData = c ; icd . thingy = method ; context . icachePut ( this , icd ) ; } } if ( method == null ) return null ; } catch ( MethodInvocationException mie ) { throw mie ; } catch ( Exception e ) { rsvc . error ( "ASTMethod.execute() : exception from introspection : " + e ) ; return null ; } try { Object obj = method . invoke ( o , params ) ; if ( obj == null ) { if ( method . getReturnType ( ) == Void . TYPE ) return new String ( "" ) ; } return obj ; } catch ( InvocationTargetException ite ) { EventCartridge ec = context . getEventCartridge ( ) ; if ( ec != null && ite . getTargetException ( ) instanceof java . lang . Exception ) { try { return ec . methodException ( o . getClass ( ) , methodName , ( Exception ) ite . getTargetException ( ) ) ; } catch ( Exception e ) { throw new MethodInvocationException ( "Invocation of method '" + methodName + "' in  " + o . getClass ( ) + " threw exception " + e . getClass ( ) + " : " + e . getMessage ( ) , e , methodName ) ; } } else { throw new MethodInvocationException ( "Invocation of method '" + methodName + "' in  " + o . getClass ( ) + " threw exception " + ite . getTargetException ( ) . getClass ( ) + " : " + ite . getTargetException ( ) . getMessage ( ) , ite . getTargetException ( ) , methodName ) ; } } catch ( Exception e ) { rsvc . error ( "ASTMethod.execute() : exception invoking method '" + methodName + "' in " + o . getClass ( ) + " : " + e ) ; return null ; } } } 	1
package org . apache . velocity . test . provider ; public class Person { public String getName ( ) { return "Person" ; } } 	0
package org . apache . velocity ; import java . util . HashMap ; import java . util . Map ; import org . apache . velocity . context . AbstractContext ; import org . apache . velocity . context . Context ; public class VelocityContext extends AbstractContext implements Cloneable { private Map context = null ; public VelocityContext ( ) { this ( null , null ) ; } public VelocityContext ( Map context ) { this ( context , null ) ; } public VelocityContext ( Context innerContext ) { this ( null , innerContext ) ; } public VelocityContext ( Map context , Context innerContext ) { super ( innerContext ) ; this . context = ( context == null ? new HashMap ( ) : context ) ; } public Object internalGet ( String key ) { return context . get ( key ) ; } public Object internalPut ( String key , Object value ) { return context . put ( key , value ) ; } public boolean internalContainsKey ( Object key ) { return context . containsKey ( key ) ; } public Object [ ] internalGetKeys ( ) { return context . keySet ( ) . toArray ( ) ; } public Object internalRemove ( Object key ) { return context . remove ( key ) ; } public Object clone ( ) { VelocityContext clone = null ; try { clone = ( VelocityContext ) super . clone ( ) ; clone . context = new HashMap ( context ) ; } catch ( CloneNotSupportedException ignored ) { } return clone ; } } 	1
package org . apache . velocity . test . view ; import java . io . IOException ; import java . io . PrintWriter ; import java . io . FileInputStream ; import java . io . BufferedReader ; import java . io . InputStreamReader ; import org . apache . velocity . runtime . RuntimeSingleton ; import org . apache . velocity . runtime . visitor . NodeViewMode ; import org . apache . velocity . runtime . parser . node . SimpleNode ; public class TemplateNodeView { private SimpleNode document ; private NodeViewMode visitor ; public TemplateNodeView ( String template ) { try { RuntimeSingleton . init ( "velocity.properties" ) ; InputStreamReader isr = new InputStreamReader ( new FileInputStream ( template ) , RuntimeSingleton . getString ( RuntimeSingleton . INPUT_ENCODING ) ) ; BufferedReader br = new BufferedReader ( isr ) ; document = RuntimeSingleton . parse ( br , template ) ; visitor = new NodeViewMode ( ) ; visitor . setContext ( null ) ; visitor . setWriter ( new PrintWriter ( System . out ) ) ; document . jjtAccept ( visitor , null ) ; } catch ( Exception e ) { System . out . println ( e ) ; e . printStackTrace ( ) ; } } public static void main ( String args [ ] ) { TemplateNodeView v = new TemplateNodeView ( args [ 0 ] ) ; } } 	0
package org . apache . velocity ; import java . io . InputStream ; import java . io . Writer ; import java . io . BufferedReader ; import java . io . InputStreamReader ; import java . io . UnsupportedEncodingException ; import org . apache . velocity . runtime . resource . Resource ; import org . apache . velocity . runtime . parser . ParseException ; import org . apache . velocity . runtime . parser . node . SimpleNode ; import org . apache . velocity . VelocityContext ; import org . apache . velocity . context . Context ; import org . apache . velocity . context . InternalContextAdapterImpl ; import org . apache . velocity . exception . ResourceNotFoundException ; import org . apache . velocity . exception . ParseErrorException ; import org . apache . velocity . exception . MethodInvocationException ; public class Template extends Resource { private boolean initialized = false ; private Exception errorCondition = null ; public Template ( ) { } public boolean process ( ) throws ResourceNotFoundException , ParseErrorException , Exception { data = null ; InputStream is = null ; errorCondition = null ; try { is = resourceLoader . getResourceStream ( name ) ; } catch ( ResourceNotFoundException rnfe ) { errorCondition = rnfe ; throw rnfe ; } if ( is != null ) { try { BufferedReader br = new BufferedReader ( new InputStreamReader ( is , encoding ) ) ; data = rsvc . parse ( br , name ) ; initDocument ( ) ; return true ; } catch ( UnsupportedEncodingException uce ) { String msg = "Template.process : Unsupported input encoding : " + encoding + " for template " + name ; errorCondition = new ParseErrorException ( msg ) ; throw errorCondition ; } catch ( ParseException pex ) { errorCondition = new ParseErrorException ( pex . getMessage ( ) ) ; throw errorCondition ; } catch ( Exception e ) { errorCondition = e ; throw e ; } finally { is . close ( ) ; } } else { errorCondition = new ResourceNotFoundException ( "Unknown resource error for resource " + name ) ; throw errorCondition ; } } public void initDocument ( ) throws Exception { InternalContextAdapterImpl ica = new InternalContextAdapterImpl ( new VelocityContext ( ) ) ; try { ica . pushCurrentTemplateName ( name ) ; ( ( SimpleNode ) data ) . init ( ica , rsvc ) ; } finally { ica . popCurrentTemplateName ( ) ; } } public void merge ( Context context , Writer writer ) throws ResourceNotFoundException , ParseErrorException , MethodInvocationException , Exception { if ( errorCondition != null ) { throw errorCondition ; } if ( data != null ) { InternalContextAdapterImpl ica = new InternalContextAdapterImpl ( context ) ; try { ica . pushCurrentTemplateName ( name ) ; ica . setCurrentResource ( this ) ; ( ( SimpleNode ) data ) . render ( ica , writer ) ; } finally { ica . popCurrentTemplateName ( ) ; ica . setCurrentResource ( null ) ; } } else { String msg = "Template.merge() failure. The document is null, " + "most likely due to parsing error." ; rsvc . error ( msg ) ; throw new Exception ( msg ) ; } } } 	1
package org . apache . velocity . runtime . parser ; public interface ParserTreeConstants { public int JJTPROCESS = 0 ; public int JJTVOID = 1 ; public int JJTESCAPEDDIRECTIVE = 2 ; public int JJTESCAPE = 3 ; public int JJTCOMMENT = 4 ; public int JJTNUMBERLITERAL = 5 ; public int JJTSTRINGLITERAL = 6 ; public int JJTIDENTIFIER = 7 ; public int JJTWORD = 8 ; public int JJTDIRECTIVE = 9 ; public int JJTBLOCK = 10 ; public int JJTOBJECTARRAY = 11 ; public int JJTINTEGERRANGE = 12 ; public int JJTMETHOD = 13 ; public int JJTREFERENCE = 14 ; public int JJTTRUE = 15 ; public int JJTFALSE = 16 ; public int JJTTEXT = 17 ; public int JJTIFSTATEMENT = 18 ; public int JJTELSESTATEMENT = 19 ; public int JJTELSEIFSTATEMENT = 20 ; public int JJTSETDIRECTIVE = 21 ; public int JJTEXPRESSION = 22 ; public int JJTASSIGNMENT = 23 ; public int JJTORNODE = 24 ; public int JJTANDNODE = 25 ; public int JJTEQNODE = 26 ; public int JJTNENODE = 27 ; public int JJTLTNODE = 28 ; public int JJTGTNODE = 29 ; public int JJTLENODE = 30 ; public int JJTGENODE = 31 ; public int JJTADDNODE = 32 ; public int JJTSUBTRACTNODE = 33 ; public int JJTMULNODE = 34 ; public int JJTDIVNODE = 35 ; public int JJTMODNODE = 36 ; public int JJTNOTNODE = 37 ; public String [ ] jjtNodeName = { "process" , "void" , "EscapedDirective" , "Escape" , "Comment" , "NumberLiteral" , "StringLiteral" , "Identifier" , "Word" , "Directive" , "Block" , "ObjectArray" , "IntegerRange" , "Method" , "Reference" , "True" , "False" , "Text" , "IfStatement" , "ElseStatement" , "ElseIfStatement" , "SetDirective" , "Expression" , "Assignment" , "OrNode" , "AndNode" , "EQNode" , "NENode" , "LTNode" , "GTNode" , "LENode" , "GENode" , "AddNode" , "SubtractNode" , "MulNode" , "DivNode" , "ModNode" , "NotNode" , } ; } 	0
package org . apache . velocity . exception ; public class ParseErrorException extends VelocityException { public ParseErrorException ( String exceptionMessage ) { super ( exceptionMessage ) ; } } 	1
package org . apache . velocity . test ; import java . io . InputStream ; import java . io . IOException ; import java . net . MalformedURLException ; import java . net . URL ; import java . util . Enumeration ; import java . util . Properties ; import javax . servlet . RequestDispatcher ; import javax . servlet . Servlet ; import javax . servlet . ServletConfig ; import javax . servlet . ServletContext ; import javax . servlet . ServletException ; import javax . servlet . http . HttpServletRequest ; import javax . servlet . http . HttpServletResponse ; import org . apache . velocity . app . Velocity ; import org . apache . velocity . runtime . RuntimeSingleton ; import org . apache . velocity . runtime . RuntimeConstants ; import org . apache . velocity . servlet . VelocityServlet ; import junit . framework . TestCase ; public class VelocityServletTest extends TestCase { public VelocityServletTest ( ) { super ( "VelocityServletTest" ) ; } public static junit . framework . Test suite ( ) { return new VelocityServletTest ( ) ; } public void runTest ( ) { MockVelocityServlet servlet = new MockVelocityServlet ( ) ; try { servlet . init ( new MockServletConfig ( ) ) ; } catch ( ServletException e ) { e . printStackTrace ( ) ; } System . out . println ( RuntimeConstants . OUTPUT_ENCODING + "=" + RuntimeSingleton . getProperty ( RuntimeConstants . OUTPUT_ENCODING ) ) ; HttpServletResponse res = new MockHttpServletResponse ( ) ; servlet . visibleSetContentType ( null , res ) ; assertEquals ( "Character encoding not set to UTF-8" , "UTF-8" , res . getCharacterEncoding ( ) ) ; } class MockVelocityServlet extends VelocityServlet { void visibleSetContentType ( HttpServletRequest req , HttpServletResponse res ) { setContentType ( req , res ) ; } protected Properties loadConfiguration ( ServletConfig config ) throws IOException { Properties p = new Properties ( ) ; p . setProperty ( RuntimeConstants . OUTPUT_ENCODING , "UTF-8" ) ; return p ; } public ServletConfig getServletConfig ( ) { return new MockServletConfig ( ) ; } } static class MockServletConfig implements ServletConfig { public String getInitParameter ( String ignored ) { return null ; } public Enumeration getInitParameterNames ( ) { return null ; } public ServletContext getServletContext ( ) { return new MockServletContext ( ) ; } public String getServletName ( ) { return "VelocityServlet" ; } } static class MockServletContext implements ServletContext { public Object getAttribute ( String ignored ) { return null ; } public Enumeration getAttributeNames ( ) { return null ; } public ServletContext getContext ( String ignored ) { return this ; } public String getInitParameter ( String ignored ) { return null ; } public Enumeration getInitParameterNames ( ) { return null ; } public int getMajorVersion ( ) { return - 1 ; } public String getMimeType ( String ignored ) { return null ; } public int getMinorVersion ( ) { return - 1 ; } public RequestDispatcher getNamedDispatcher ( String ignored ) { return null ; } public String getRealPath ( String ignored ) { return null ; } public RequestDispatcher getRequestDispatcher ( String ignored ) { return null ; } public URL getResource ( String ignored ) throws MalformedURLException { return null ; } public InputStream getResourceAsStream ( String ignored ) { return null ; } public String getServerInfo ( ) { return "Velocity Test Suite" ; } public Servlet getServlet ( String ignored ) throws ServletException { return null ; } public Enumeration getServletNames ( ) { return null ; } public Enumeration getServlets ( ) { return null ; } public void log ( Exception e , String msg ) { } public void log ( String msg ) { } public void log ( String msg , Throwable t ) { } public void removeAttribute ( String name ) { } public void setAttribute ( String name , Object value ) { } } static class MockHttpServletResponse implements HttpServletResponse { private String encoding ; public void flushBuffer ( ) throws IOException { } public int getBufferSize ( ) { return - 1 ; } public String getCharacterEncoding ( ) { return ( encoding != null ? encoding : "ISO-8859-1" ) ; } public java . util . Locale getLocale ( ) { return null ; } public javax . servlet . ServletOutputStream getOutputStream ( ) throws IOException { return null ; } public java . io . PrintWriter getWriter ( ) throws IOException { return null ; } public boolean isCommitted ( ) { return false ; } public void reset ( ) { } public void setBufferSize ( int i ) { } public void setContentLength ( int i ) { } public void setContentType ( String contentType ) { if ( contentType != null ) { int index = contentType . lastIndexOf ( ';' ) + 1 ; if ( 0 <= index || index < contentType . length ( ) ) { index = contentType . indexOf ( "charset=" , index ) ; if ( index != - 1 ) { index += 8 ; this . encoding = contentType . substring ( index ) . trim ( ) ; } } } } public void setLocale ( java . util . Locale l ) { } public void addCookie ( javax . servlet . http . Cookie c ) { } public void addDateHeader ( String s , long l ) { } public void addHeader ( String name , String value ) { } public void addIntHeader ( String name , int value ) { } public boolean containsHeader ( String name ) { return false ; } public String encodeRedirectURL ( String url ) { return url ; } public String encodeRedirectUrl ( String url ) { return url ; } public String encodeURL ( String url ) { return url ; } public String encodeUrl ( String url ) { return url ; } public void sendError ( int i ) throws IOException { } public void sendError ( int i , String s ) throws IOException { } public void sendRedirect ( String s ) throws IOException { } public void setDateHeader ( String s , long l ) { } public void setHeader ( String name , String value ) { } public void setIntHeader ( String s , int i ) { } public void setStatus ( int i ) { } public void setStatus ( int i , String s ) { } } } 	0
package org . apache . velocity . runtime . resource . loader ; import java . io . File ; import java . io . InputStream ; import java . io . FileInputStream ; import java . io . BufferedInputStream ; import java . io . FileNotFoundException ; import java . util . Hashtable ; import java . util . Vector ; import org . apache . velocity . util . StringUtils ; import org . apache . velocity . runtime . resource . Resource ; import org . apache . velocity . exception . ResourceNotFoundException ; import org . apache . commons . collections . ExtendedProperties ; public class FileResourceLoader extends ResourceLoader { private Vector paths = null ; private Hashtable templatePaths = new Hashtable ( ) ; public void init ( ExtendedProperties configuration ) { rsvc . info ( "FileResourceLoader : initialization starting." ) ; paths = configuration . getVector ( "path" ) ; int sz = paths . size ( ) ; for ( int i = 0 ; i < sz ; i ++ ) { rsvc . info ( "FileResourceLoader : adding path '" + ( String ) paths . get ( i ) + "'" ) ; } rsvc . info ( "FileResourceLoader : initialization complete." ) ; } public synchronized InputStream getResourceStream ( String templateName ) throws ResourceNotFoundException { if ( templateName == null || templateName . length ( ) == 0 ) { throw new ResourceNotFoundException ( "Need to specify a file name or file path!" ) ; } String template = StringUtils . normalizePath ( templateName ) ; if ( template == null || template . length ( ) == 0 ) { String msg = "File resource error : argument " + template + " contains .. and may be trying to access " + "content outside of template root.  Rejected." ; rsvc . error ( "FileResourceLoader : " + msg ) ; throw new ResourceNotFoundException ( msg ) ; } if ( template . startsWith ( "/" ) ) { template = template . substring ( 1 ) ; } int size = paths . size ( ) ; for ( int i = 0 ; i < size ; i ++ ) { String path = ( String ) paths . get ( i ) ; InputStream inputStream = findTemplate ( path , template ) ; if ( inputStream != null ) { templatePaths . put ( templateName , path ) ; return inputStream ; } } String msg = "FileResourceLoader Error: cannot find resource " + template ; throw new ResourceNotFoundException ( msg ) ; } private InputStream findTemplate ( String path , String template ) { try { File file = new File ( path , template ) ; if ( file . canRead ( ) ) { return new BufferedInputStream ( new FileInputStream ( file . getAbsolutePath ( ) ) ) ; } else { return null ; } } catch ( FileNotFoundException fnfe ) { return null ; } } public boolean isSourceModified ( Resource resource ) { boolean modified = true ; String fileName = resource . getName ( ) ; String path = ( String ) templatePaths . get ( fileName ) ; File currentFile = null ; for ( int i = 0 ; currentFile == null && i < paths . size ( ) ; i ++ ) { String testPath = ( String ) paths . get ( i ) ; File testFile = new File ( testPath , fileName ) ; if ( testFile . canRead ( ) ) { currentFile = testFile ; } } File file = new File ( path , fileName ) ; if ( currentFile == null || ! file . exists ( ) ) { } else if ( currentFile . equals ( file ) && file . canRead ( ) ) { modified = ( file . lastModified ( ) != resource . getLastModified ( ) ) ; } return modified ; } public long getLastModified ( Resource resource ) { String path = ( String ) templatePaths . get ( resource . getName ( ) ) ; File file = new File ( path , resource . getName ( ) ) ; if ( file . canRead ( ) ) { return file . lastModified ( ) ; } else { return 0 ; } } } 	1
package org . apache . velocity . runtime . configuration ; import java . io . IOException ; import java . io . File ; import java . io . FileInputStream ; import java . io . InputStream ; import java . io . InputStreamReader ; import java . io . LineNumberReader ; import java . io . OutputStream ; import java . io . PrintWriter ; import java . io . Reader ; import java . util . ArrayList ; import java . util . Enumeration ; import java . util . Hashtable ; import java . util . Iterator ; import java . util . NoSuchElementException ; import java . util . Properties ; import java . util . StringTokenizer ; import java . util . Vector ; import org . apache . commons . collections . ExtendedProperties ; public class Configuration extends Hashtable { private ExtendedProperties deprecationCrutch = new ExtendedProperties ( ) ; private Configuration defaults ; protected String file ; protected String basePath ; protected String fileSeparator = System . getProperty ( "file.separator" ) ; protected boolean isInitialized = false ; protected static String include = "include" ; protected ArrayList keysAsListed = new ArrayList ( ) ; class PropertiesReader extends LineNumberReader { public PropertiesReader ( Reader reader ) { super ( reader ) ; } public String readProperty ( ) throws IOException { StringBuffer buffer = new StringBuffer ( ) ; try { while ( true ) { String line = readLine ( ) . trim ( ) ; if ( ( line . length ( ) != 0 ) && ( line . charAt ( 0 ) != '#' ) ) { if ( line . endsWith ( "\\" ) ) { line = line . substring ( 0 , line . length ( ) - 1 ) ; buffer . append ( line ) ; } else { buffer . append ( line ) ; break ; } } } } catch ( NullPointerException e ) { return null ; } return buffer . toString ( ) ; } } class PropertiesTokenizer extends StringTokenizer { static final String DELIMITER = "," ; public PropertiesTokenizer ( String string ) { super ( string , DELIMITER ) ; } public boolean hasMoreTokens ( ) { return super . hasMoreTokens ( ) ; } public String nextToken ( ) { StringBuffer buffer = new StringBuffer ( ) ; while ( hasMoreTokens ( ) ) { String token = super . nextToken ( ) ; if ( token . endsWith ( "\\" ) ) { buffer . append ( token . substring ( 0 , token . length ( ) - 1 ) ) ; buffer . append ( DELIMITER ) ; } else { buffer . append ( token ) ; break ; } } return buffer . toString ( ) . trim ( ) ; } } public Configuration ( ) { super ( ) ; } public Configuration ( String file ) throws IOException { this ( file , null ) ; } public Configuration ( String file , String defaultFile ) throws IOException { this . file = file ; basePath = new File ( file ) . getAbsolutePath ( ) ; basePath = basePath . substring ( 0 , basePath . lastIndexOf ( fileSeparator ) + 1 ) ; this . load ( new FileInputStream ( file ) ) ; if ( defaultFile != null ) { defaults = new Configuration ( defaultFile ) ; } } private void init ( Configuration exp ) throws IOException { isInitialized = true ; } public boolean isInitialized ( ) { return isInitialized ; } public String getInclude ( ) { return Configuration . include ; } public void setInclude ( String inc ) { Configuration . include = inc ; } public synchronized void load ( InputStream input ) throws IOException { PropertiesReader reader = new PropertiesReader ( new InputStreamReader ( input ) ) ; try { while ( true ) { String line = reader . readProperty ( ) ; int equalSign = line . indexOf ( '=' ) ; if ( equalSign > 0 ) { String key = line . substring ( 0 , equalSign ) . trim ( ) ; String value = line . substring ( equalSign + 1 ) . trim ( ) ; if ( "" . equals ( value ) ) continue ; if ( getInclude ( ) != null && key . equalsIgnoreCase ( getInclude ( ) ) ) { File file = null ; if ( value . startsWith ( fileSeparator ) ) { file = new File ( value ) ; } else { if ( value . startsWith ( "." + fileSeparator ) ) { value = value . substring ( 2 ) ; } file = new File ( basePath + value ) ; } if ( file != null && file . exists ( ) && file . canRead ( ) ) { load ( new FileInputStream ( file ) ) ; } } else { addProperty ( key , value ) ; } } } } catch ( NullPointerException e ) { return ; } } public Object getProperty ( String key ) { Object o = this . get ( key ) ; if ( o == null ) { if ( defaults != null ) { o = defaults . get ( key ) ; } } return o ; } public void addProperty ( String key , Object token ) { deprecationCrutch . addProperty ( key , token ) ; Object o = this . get ( key ) ; if ( o instanceof String ) { Vector v = new Vector ( 2 ) ; v . addElement ( o ) ; v . addElement ( token ) ; put ( key , v ) ; } else if ( o instanceof Vector ) { ( ( Vector ) o ) . addElement ( token ) ; } else { if ( token instanceof String && ( ( String ) token ) . indexOf ( PropertiesTokenizer . DELIMITER ) > 0 ) { PropertiesTokenizer tokenizer = new PropertiesTokenizer ( ( String ) token ) ; while ( tokenizer . hasMoreTokens ( ) ) { String value = tokenizer . nextToken ( ) ; addStringProperty ( key , value ) ; } } else { if ( ! containsKey ( key ) ) { keysAsListed . add ( key ) ; } put ( key , token ) ; } } } private void addStringProperty ( String key , String token ) { Object o = this . get ( key ) ; if ( o instanceof String ) { Vector v = new Vector ( 2 ) ; v . addElement ( o ) ; v . addElement ( token ) ; put ( key , v ) ; } else if ( o instanceof Vector ) { ( ( Vector ) o ) . addElement ( token ) ; } else { if ( ! containsKey ( key ) ) { keysAsListed . add ( key ) ; } put ( key , token ) ; } } public void setProperty ( String key , Object value ) { clearProperty ( key ) ; addProperty ( key , value ) ; } public synchronized void save ( OutputStream output , String Header ) throws IOException { if ( output != null ) { PrintWriter theWrtr = new PrintWriter ( output ) ; if ( Header != null ) { theWrtr . println ( Header ) ; } Enumeration theKeys = keys ( ) ; while ( theKeys . hasMoreElements ( ) ) { String key = ( String ) theKeys . nextElement ( ) ; Object value = get ( ( Object ) key ) ; if ( value != null ) { if ( value instanceof String ) { StringBuffer currentOutput = new StringBuffer ( ) ; currentOutput . append ( key ) ; currentOutput . append ( "=" ) ; currentOutput . append ( ( String ) value ) ; theWrtr . println ( currentOutput . toString ( ) ) ; } else if ( value instanceof Vector ) { Vector values = ( Vector ) value ; Enumeration valuesEnum = values . elements ( ) ; while ( valuesEnum . hasMoreElements ( ) ) { String currentElement = ( String ) valuesEnum . nextElement ( ) ; StringBuffer currentOutput = new StringBuffer ( ) ; currentOutput . append ( key ) ; currentOutput . append ( "=" ) ; currentOutput . append ( currentElement ) ; theWrtr . println ( currentOutput . toString ( ) ) ; } } } theWrtr . println ( ) ; theWrtr . flush ( ) ; } } } public void combine ( Configuration c ) { for ( Iterator i = c . getKeys ( ) ; i . hasNext ( ) ; ) { String key = ( String ) i . next ( ) ; setProperty ( key , c . get ( key ) ) ; } } public void clearProperty ( String key ) { deprecationCrutch . clearProperty ( key ) ; if ( containsKey ( key ) ) { for ( int i = 0 ; i < keysAsListed . size ( ) ; i ++ ) { if ( ( ( String ) keysAsListed . get ( i ) ) . equals ( key ) ) { keysAsListed . remove ( i ) ; break ; } } remove ( key ) ; } } public Iterator getKeys ( ) { return keysAsListed . iterator ( ) ; } public Iterator getKeys ( String prefix ) { Iterator keys = getKeys ( ) ; ArrayList matchingKeys = new ArrayList ( ) ; while ( keys . hasNext ( ) ) { Object key = keys . next ( ) ; if ( key instanceof String && ( ( String ) key ) . startsWith ( prefix ) ) { matchingKeys . add ( key ) ; } } return matchingKeys . iterator ( ) ; } public Configuration subset ( String prefix ) { Configuration c = new Configuration ( ) ; Iterator keys = getKeys ( ) ; boolean validSubset = false ; while ( keys . hasNext ( ) ) { Object key = keys . next ( ) ; if ( key instanceof String && ( ( String ) key ) . startsWith ( prefix ) ) { if ( ! validSubset ) { validSubset = true ; } String newKey = null ; if ( ( ( String ) key ) . length ( ) == prefix . length ( ) ) { newKey = prefix ; } else { newKey = ( ( String ) key ) . substring ( prefix . length ( ) + 1 ) ; } c . setProperty ( newKey , get ( key ) ) ; } } if ( validSubset ) { return c ; } else { return null ; } } public void display ( ) { Iterator i = getKeys ( ) ; while ( i . hasNext ( ) ) { String key = ( String ) i . next ( ) ; Object value = get ( key ) ; System . out . println ( key + " => " + value ) ; } } public String getString ( String key ) { return getString ( key , null ) ; } public String getString ( String key , String defaultValue ) { Object value = get ( key ) ; if ( value instanceof String ) { return ( String ) value ; } else if ( value == null ) { if ( defaults != null ) { return defaults . getString ( key , defaultValue ) ; } else { return defaultValue ; } } else if ( value instanceof Vector ) { return ( String ) ( ( Vector ) value ) . get ( 0 ) ; } else { throw new ClassCastException ( '\'' + key + "' doesn't map to a String object" ) ; } } public Properties getProperties ( String key ) { return getProperties ( key , new Properties ( ) ) ; } public Properties getProperties ( String key , Properties defaults ) { String [ ] tokens = getStringArray ( key ) ; Properties props = new Properties ( defaults ) ; for ( int i = 0 ; i < tokens . length ; i ++ ) { String token = tokens [ i ] ; int equalSign = token . indexOf ( '=' ) ; if ( equalSign > 0 ) { String pkey = token . substring ( 0 , equalSign ) . trim ( ) ; String pvalue = token . substring ( equalSign + 1 ) . trim ( ) ; props . put ( pkey , pvalue ) ; } else { throw new IllegalArgumentException ( '\'' + token + "' does not contain " + "an equals sign" ) ; } } return props ; } public String [ ] getStringArray ( String key ) { Object value = get ( key ) ; Vector vector ; if ( value instanceof String ) { vector = new Vector ( 1 ) ; vector . addElement ( value ) ; } else if ( value instanceof Vector ) { vector = ( Vector ) value ; } else if ( value == null ) { if ( defaults != null ) { return defaults . getStringArray ( key ) ; } else { return new String [ 0 ] ; } } else { throw new ClassCastException ( '\'' + key + "' doesn't map to a String/Vector object" ) ; } String [ ] tokens = new String [ vector . size ( ) ] ; for ( int i = 0 ; i < tokens . length ; i ++ ) { tokens [ i ] = ( String ) vector . elementAt ( i ) ; } return tokens ; } public Vector getVector ( String key ) { return getVector ( key , null ) ; } public Vector getVector ( String key , Vector defaultValue ) { Object value = get ( key ) ; if ( value instanceof Vector ) { return ( Vector ) value ; } else if ( value instanceof String ) { Vector v = new Vector ( 1 ) ; v . addElement ( ( String ) value ) ; put ( key , v ) ; return v ; } else if ( value == null ) { if ( defaults != null ) { return defaults . getVector ( key , defaultValue ) ; } else { return ( ( defaultValue == null ) ? new Vector ( ) : defaultValue ) ; } } else { throw new ClassCastException ( '\'' + key + "' doesn't map to a Vector object" ) ; } } public boolean getBoolean ( String key ) { Boolean b = getBoolean ( key , ( Boolean ) null ) ; if ( b != null ) { return b . booleanValue ( ) ; } else { throw new NoSuchElementException ( '\'' + key + "' doesn't map to an existing object" ) ; } } public boolean getBoolean ( String key , boolean defaultValue ) { return getBoolean ( key , new Boolean ( defaultValue ) ) . booleanValue ( ) ; } public Boolean getBoolean ( String key , Boolean defaultValue ) { Object value = get ( key ) ; if ( value instanceof Boolean ) { return ( Boolean ) value ; } else if ( value instanceof String ) { String s = testBoolean ( ( String ) value ) ; Boolean b = new Boolean ( s ) ; put ( key , b ) ; return b ; } else if ( value == null ) { if ( defaults != null ) { return defaults . getBoolean ( key , defaultValue ) ; } else { return defaultValue ; } } else { throw new ClassCastException ( '\'' + key + "' doesn't map to a Boolean object" ) ; } } public String testBoolean ( String value ) { String s = ( ( String ) value ) . toLowerCase ( ) ; if ( s . equals ( "true" ) || s . equals ( "on" ) || s . equals ( "yes" ) ) { return "true" ; } else if ( s . equals ( "false" ) || s . equals ( "off" ) || s . equals ( "no" ) ) { return "false" ; } else { return null ; } } public byte getByte ( String key ) { Byte b = getByte ( key , null ) ; if ( b != null ) { return b . byteValue ( ) ; } else { throw new NoSuchElementException ( '\'' + key + " doesn't map to an existing object" ) ; } } public byte getByte ( String key , byte defaultValue ) { return getByte ( key , new Byte ( defaultValue ) ) . byteValue ( ) ; } public Byte getByte ( String key , Byte defaultValue ) { Object value = get ( key ) ; if ( value instanceof Byte ) { return ( Byte ) value ; } else if ( value instanceof String ) { Byte b = new Byte ( ( String ) value ) ; put ( key , b ) ; return b ; } else if ( value == null ) { if ( defaults != null ) { return defaults . getByte ( key , defaultValue ) ; } else { return defaultValue ; } } else { throw new ClassCastException ( '\'' + key + "' doesn't map to a Byte object" ) ; } } public short getShort ( String key ) { Short s = getShort ( key , null ) ; if ( s != null ) { return s . shortValue ( ) ; } else { throw new NoSuchElementException ( '\'' + key + "' doesn't map to an existing object" ) ; } } public short getShort ( String key , short defaultValue ) { return getShort ( key , new Short ( defaultValue ) ) . shortValue ( ) ; } public Short getShort ( String key , Short defaultValue ) { Object value = get ( key ) ; if ( value instanceof Short ) { return ( Short ) value ; } else if ( value instanceof String ) { Short s = new Short ( ( String ) value ) ; put ( key , s ) ; return s ; } else if ( value == null ) { if ( defaults != null ) { return defaults . getShort ( key , defaultValue ) ; } else { return defaultValue ; } } else { throw new ClassCastException ( '\'' + key + "' doesn't map to a Short object" ) ; } } public int getInt ( String name ) { return getInteger ( name ) ; } public int getInt ( String name , int def ) { return getInteger ( name , def ) ; } public int getInteger ( String key ) { Integer i = getInteger ( key , null ) ; if ( i != null ) { return i . intValue ( ) ; } else { throw new NoSuchElementException ( '\'' + key + "' doesn't map to an existing object" ) ; } } public int getInteger ( String key , int defaultValue ) { Integer i = getInteger ( key , null ) ; if ( i == null ) { return defaultValue ; } return i . intValue ( ) ; } public Integer getInteger ( String key , Integer defaultValue ) { Object value = get ( key ) ; if ( value instanceof Integer ) { return ( Integer ) value ; } else if ( value instanceof String ) { Integer i = new Integer ( ( String ) value ) ; put ( key , i ) ; return i ; } else if ( value == null ) { if ( defaults != null ) { return defaults . getInteger ( key , defaultValue ) ; } else { return defaultValue ; } } else { throw new ClassCastException ( '\'' + key + "' doesn't map to a Integer object" ) ; } } public long getLong ( String key ) { Long l = getLong ( key , null ) ; if ( l != null ) { return l . longValue ( ) ; } else { throw new NoSuchElementException ( '\'' + key + "' doesn't map to an existing object" ) ; } } public long getLong ( String key , long defaultValue ) { return getLong ( key , new Long ( defaultValue ) ) . longValue ( ) ; } public Long getLong ( String key , Long defaultValue ) { Object value = get ( key ) ; if ( value instanceof Long ) { return ( Long ) value ; } else if ( value instanceof String ) { Long l = new Long ( ( String ) value ) ; put ( key , l ) ; return l ; } else if ( value == null ) { if ( defaults != null ) { return defaults . getLong ( key , defaultValue ) ; } else { return defaultValue ; } } else { throw new ClassCastException ( '\'' + key + "' doesn't map to a Long object" ) ; } } public float getFloat ( String key ) { Float f = getFloat ( key , null ) ; if ( f != null ) { return f . floatValue ( ) ; } else { throw new NoSuchElementException ( '\'' + key + "' doesn't map to an existing object" ) ; } } public float getFloat ( String key , float defaultValue ) { return getFloat ( key , new Float ( defaultValue ) ) . floatValue ( ) ; } public Float getFloat ( String key , Float defaultValue ) { Object value = get ( key ) ; if ( value instanceof Float ) { return ( Float ) value ; } else if ( value instanceof String ) { Float f = new Float ( ( String ) value ) ; put ( key , f ) ; return f ; } else if ( value == null ) { if ( defaults != null ) { return defaults . getFloat ( key , defaultValue ) ; } else { return defaultValue ; } } else { throw new ClassCastException ( '\'' + key + "' doesn't map to a Float object" ) ; } } public double getDouble ( String key ) { Double d = getDouble ( key , null ) ; if ( d != null ) { return d . doubleValue ( ) ; } else { throw new NoSuchElementException ( '\'' + key + "' doesn't map to an existing object" ) ; } } public double getDouble ( String key , double defaultValue ) { return getDouble ( key , new Double ( defaultValue ) ) . doubleValue ( ) ; } public Double getDouble ( String key , Double defaultValue ) { Object value = get ( key ) ; if ( value instanceof Double ) { return ( Double ) value ; } else if ( value instanceof String ) { Double d = new Double ( ( String ) value ) ; put ( key , d ) ; return d ; } else if ( value == null ) { if ( defaults != null ) { return defaults . getDouble ( key , defaultValue ) ; } else { return defaultValue ; } } else { throw new ClassCastException ( '\'' + key + "' doesn't map to a Double object" ) ; } } public static Configuration convertProperties ( Properties p ) { Configuration c = new Configuration ( ) ; for ( Enumeration e = p . keys ( ) ; e . hasMoreElements ( ) ; ) { String s = ( String ) e . nextElement ( ) ; c . setProperty ( s , p . getProperty ( s ) ) ; } return c ; } public ExtendedProperties getExtendedProperties ( ) { return deprecationCrutch ; } } 	0
package org . apache . velocity . runtime . resource ; import java . util . Iterator ; import org . apache . velocity . runtime . RuntimeServices ; public interface ResourceCache { public void initialize ( RuntimeServices rs ) ; public Resource get ( Object resourceKey ) ; public Resource put ( Object resourceKey , Resource resource ) ; public Resource remove ( Object resourceKey ) ; public Iterator enumerateKeys ( ) ; } 	1
package org . apache . velocity . runtime . compiler ; import org . apache . bcel . generic . * ; import org . apache . bcel . Constants ; public class Compiler implements InstructionConstants { public static void main ( String [ ] args ) { String template = args [ 0 ] . substring ( 0 , args [ 0 ] . indexOf ( "." ) ) ; ClassGen cg = new ClassGen ( template , "java.lang.Object" , "<generated>" , Constants . ACC_PUBLIC | Constants . ACC_SUPER , null ) ; ConstantPoolGen cp = cg . getConstantPool ( ) ; InstructionList il = new InstructionList ( ) ; MethodGen mg = new MethodGen ( Constants . ACC_STATIC | Constants . ACC_PUBLIC , Type . VOID , new Type [ ] { new ArrayType ( Type . STRING , 1 ) } , new String [ ] { "argv" } , "main" , template , il , cp ) ; int br_index = cp . addClass ( "java.io.BufferedReader" ) ; int ir_index = cp . addClass ( "java.io.InputStreamReader" ) ; int system_out = cp . addFieldref ( "java.lang.System" , "out" , "Ljava/io/PrintStream;" ) ; int system_in = cp . addFieldref ( "java.lang.System" , "in" , "Ljava/io/InputStream;" ) ; il . append ( new NEW ( br_index ) ) ; il . append ( DUP ) ; il . append ( new NEW ( ir_index ) ) ; il . append ( DUP ) ; il . append ( new GETSTATIC ( system_in ) ) ; il . append ( new INVOKESPECIAL ( cp . addMethodref ( "java.io.InputStreamReader" , "<init>" , "(Ljava/io/InputStream;)V" ) ) ) ; il . append ( new INVOKESPECIAL ( cp . addMethodref ( "java.io.BufferedReader" , "<init>" , "(Ljava/io/Reader;)V" ) ) ) ; LocalVariableGen lg = mg . addLocalVariable ( "in" , new ObjectType ( "java.io.BufferedReader" ) , null , null ) ; int in = lg . getIndex ( ) ; lg . setStart ( il . append ( new ASTORE ( in ) ) ) ; lg = mg . addLocalVariable ( "name" , Type . STRING , null , null ) ; int name = lg . getIndex ( ) ; il . append ( ACONST_NULL ) ; lg . setStart ( il . append ( new ASTORE ( name ) ) ) ; InstructionHandle try_start = il . append ( new GETSTATIC ( system_out ) ) ; il . append ( new PUSH ( cp , "I will be a template compiler!" ) ) ; il . append ( new INVOKEVIRTUAL ( cp . addMethodref ( "java.io.PrintStream" , "println" , "(Ljava/lang/String;)V" ) ) ) ; GOTO g = new GOTO ( null ) ; InstructionHandle try_end = il . append ( g ) ; InstructionHandle handler = il . append ( RETURN ) ; mg . addExceptionHandler ( try_start , try_end , handler , new ObjectType ( "java.io.IOException" ) ) ; InstructionHandle ih = il . append ( new GETSTATIC ( system_out ) ) ; g . setTarget ( ih ) ; il . append ( new NEW ( cp . addClass ( "java.lang.StringBuffer" ) ) ) ; il . append ( DUP ) ; il . append ( new PUSH ( cp , " " ) ) ; il . append ( new INVOKESPECIAL ( cp . addMethodref ( "java.lang.StringBuffer" , "<init>" , "(Ljava/lang/String;)V" ) ) ) ; il . append ( new ALOAD ( name ) ) ; String sig = Type . getMethodSignature ( Type . STRINGBUFFER , new Type [ ] { Type . STRING } ) ; il . append ( new INVOKEVIRTUAL ( cp . addMethodref ( "java.lang.StringBuffer" , "append" , sig ) ) ) ; il . append ( new INVOKEVIRTUAL ( cp . addMethodref ( "java.lang.StringBuffer" , "toString" , "()Ljava/lang/String;" ) ) ) ; il . append ( RETURN ) ; mg . setMaxStack ( 5 ) ; cg . addMethod ( mg . getMethod ( ) ) ; cg . addEmptyConstructor ( Constants . ACC_PUBLIC ) ; try { cg . getJavaClass ( ) . dump ( template + ".class" ) ; } catch ( java . io . IOException e ) { System . err . println ( e ) ; } } } 	0
package org . apache . velocity . runtime . parser . node ; import java . util . ArrayList ; import org . apache . velocity . context . InternalContextAdapter ; import org . apache . velocity . runtime . parser . Parser ; import org . apache . velocity . exception . MethodInvocationException ; public class ASTObjectArray extends SimpleNode { public ASTObjectArray ( int id ) { super ( id ) ; } public ASTObjectArray ( Parser p , int id ) { super ( p , id ) ; } public Object jjtAccept ( ParserVisitor visitor , Object data ) { return visitor . visit ( this , data ) ; } public Object value ( InternalContextAdapter context ) throws MethodInvocationException { int size = jjtGetNumChildren ( ) ; ArrayList objectArray = new ArrayList ( ) ; for ( int i = 0 ; i < size ; i ++ ) { objectArray . add ( jjtGetChild ( i ) . value ( context ) ) ; } return objectArray ; } } 	1
package org . apache . velocity . runtime . parser ; public class TokenMgrError extends Error { static final int LEXICAL_ERROR = 0 ; static final int STATIC_LEXER_ERROR = 1 ; static final int INVALID_LEXICAL_STATE = 2 ; static final int LOOP_DETECTED = 3 ; int errorCode ; protected static final String addEscapes ( String str ) { StringBuffer retval = new StringBuffer ( ) ; char ch ; for ( int i = 0 ; i < str . length ( ) ; i ++ ) { switch ( str . charAt ( i ) ) { case 0 : continue ; case '\b' : retval . append ( "\\b" ) ; continue ; case '\t' : retval . append ( "\\t" ) ; continue ; case '\n' : retval . append ( "\\n" ) ; continue ; case '\f' : retval . append ( "\\f" ) ; continue ; case '\r' : retval . append ( "\\r" ) ; continue ; case '\"' : retval . append ( "\\\"" ) ; continue ; case '\'' : retval . append ( "\\\'" ) ; continue ; case '\\' : retval . append ( "\\\\" ) ; continue ; default : if ( ( ch = str . charAt ( i ) ) < 0x20 || ch > 0x7e ) { String s = "0000" + Integer . toString ( ch , 16 ) ; retval . append ( "\\u" + s . substring ( s . length ( ) - 4 , s . length ( ) ) ) ; } else { retval . append ( ch ) ; } continue ; } } return retval . toString ( ) ; } private static final String LexicalError ( boolean EOFSeen , int lexState , int errorLine , int errorColumn , String errorAfter , char curChar ) { return ( "Lexical error at line " + errorLine + ", column " + errorColumn + ".  Encountered: " + ( EOFSeen ? "<EOF> " : ( "\"" + addEscapes ( String . valueOf ( curChar ) ) + "\"" ) + " (" + ( int ) curChar + "), " ) + "after : \"" + addEscapes ( errorAfter ) + "\"" ) ; } public String getMessage ( ) { return super . getMessage ( ) ; } public TokenMgrError ( ) { } public TokenMgrError ( String message , int reason ) { super ( message ) ; errorCode = reason ; } public TokenMgrError ( boolean EOFSeen , int lexState , int errorLine , int errorColumn , String errorAfter , char curChar , int reason ) { this ( LexicalError ( EOFSeen , lexState , errorLine , errorColumn , errorAfter , curChar ) , reason ) ; } } 	0
package org . apache . velocity . runtime . resource ; import java . io . StringWriter ; import java . io . BufferedReader ; import java . io . InputStreamReader ; import org . apache . velocity . exception . ResourceNotFoundException ; public class ContentResource extends Resource { public ContentResource ( ) { } public boolean process ( ) throws ResourceNotFoundException { BufferedReader reader = null ; try { StringWriter sw = new StringWriter ( ) ; reader = new BufferedReader ( new InputStreamReader ( resourceLoader . getResourceStream ( name ) , encoding ) ) ; char buf [ ] = new char [ 1024 ] ; int len = 0 ; while ( ( len = reader . read ( buf , 0 , 1024 ) ) != - 1 ) sw . write ( buf , 0 , len ) ; setData ( sw . toString ( ) ) ; return true ; } catch ( ResourceNotFoundException e ) { throw e ; } catch ( Exception e ) { rsvc . error ( "Cannot process content resource : " + e . toString ( ) ) ; return false ; } finally { if ( reader != null ) { try { reader . close ( ) ; } catch ( Exception ignored ) { } } } } } 	1
package org . apache . velocity . runtime . parser ; public class Token { public int kind ; public int beginLine , beginColumn , endLine , endColumn ; public String image ; public Token next ; public Token specialToken ; public final String toString ( ) { return image ; } public static final Token newToken ( int ofKind ) { switch ( ofKind ) { default : return new Token ( ) ; } } } 	0
package org . apache . velocity . servlet ; import java . io . IOException ; import java . io . PrintWriter ; import java . io . StringWriter ; import java . io . OutputStreamWriter ; import java . io . FileInputStream ; import java . io . FileNotFoundException ; import java . io . UnsupportedEncodingException ; import java . util . Properties ; import javax . servlet . ServletConfig ; import javax . servlet . ServletContext ; import javax . servlet . ServletException ; import javax . servlet . ServletOutputStream ; import javax . servlet . http . HttpServlet ; import javax . servlet . http . HttpServletRequest ; import javax . servlet . http . HttpServletResponse ; import org . apache . velocity . Template ; import org . apache . velocity . runtime . RuntimeConstants ; import org . apache . velocity . runtime . RuntimeSingleton ; import org . apache . velocity . io . VelocityWriter ; import org . apache . velocity . util . SimplePool ; import org . apache . velocity . context . Context ; import org . apache . velocity . VelocityContext ; import org . apache . velocity . app . Velocity ; import org . apache . velocity . exception . ResourceNotFoundException ; import org . apache . velocity . exception . ParseErrorException ; import org . apache . velocity . exception . MethodInvocationException ; public abstract class VelocityServlet extends HttpServlet { public static final String REQUEST = "req" ; public static final String RESPONSE = "res" ; public static final String CONTENT_TYPE = "default.contentType" ; public static final String DEFAULT_CONTENT_TYPE = "text/html" ; public static final String DEFAULT_OUTPUT_ENCODING = "ISO-8859-1" ; private static String defaultContentType ; protected static final String INIT_PROPS_KEY = "org.apache.velocity.properties" ; private static final String OLD_INIT_PROPS_KEY = "properties" ; private static SimplePool writerPool = new SimplePool ( 40 ) ; public void init ( ServletConfig config ) throws ServletException { super . init ( config ) ; initVelocity ( config ) ; defaultContentType = RuntimeSingleton . getString ( CONTENT_TYPE , DEFAULT_CONTENT_TYPE ) ; } protected void initVelocity ( ServletConfig config ) throws ServletException { try { Properties props = loadConfiguration ( config ) ; Velocity . init ( props ) ; } catch ( Exception e ) { throw new ServletException ( "Error initializing Velocity: " + e , e ) ; } } protected Properties loadConfiguration ( ServletConfig config ) throws IOException , FileNotFoundException { String propsFile = config . getInitParameter ( INIT_PROPS_KEY ) ; if ( propsFile == null || propsFile . length ( ) == 0 ) { ServletContext sc = config . getServletContext ( ) ; propsFile = config . getInitParameter ( OLD_INIT_PROPS_KEY ) ; if ( propsFile == null || propsFile . length ( ) == 0 ) { propsFile = sc . getInitParameter ( INIT_PROPS_KEY ) ; if ( propsFile == null || propsFile . length ( ) == 0 ) { propsFile = sc . getInitParameter ( OLD_INIT_PROPS_KEY ) ; if ( propsFile != null && propsFile . length ( ) > 0 ) { sc . log ( "Use of the properties initialization " + "parameter '" + OLD_INIT_PROPS_KEY + "' has " + "been deprecated by '" + INIT_PROPS_KEY + '\'' ) ; } } } else { sc . log ( "Use of the properties initialization parameter '" + OLD_INIT_PROPS_KEY + "' has been deprecated by '" + INIT_PROPS_KEY + '\'' ) ; } } Properties p = new Properties ( ) ; if ( propsFile != null ) { String realPath = getServletContext ( ) . getRealPath ( propsFile ) ; if ( realPath != null ) { propsFile = realPath ; } p . load ( new FileInputStream ( propsFile ) ) ; } return p ; } public void doGet ( HttpServletRequest request , HttpServletResponse response ) throws ServletException , IOException { doRequest ( request , response ) ; } public void doPost ( HttpServletRequest request , HttpServletResponse response ) throws ServletException , IOException { doRequest ( request , response ) ; } protected void doRequest ( HttpServletRequest request , HttpServletResponse response ) throws ServletException , IOException { Context context = null ; try { context = createContext ( request , response ) ; setContentType ( request , response ) ; Template template = handleRequest ( request , response , context ) ; if ( template == null ) { return ; } mergeTemplate ( template , context , response ) ; } catch ( Exception e ) { error ( request , response , e ) ; } finally { requestCleanup ( request , response , context ) ; } } protected void requestCleanup ( HttpServletRequest request , HttpServletResponse response , Context context ) { return ; } protected void mergeTemplate ( Template template , Context context , HttpServletResponse response ) throws ResourceNotFoundException , ParseErrorException , MethodInvocationException , IOException , UnsupportedEncodingException , Exception { ServletOutputStream output = response . getOutputStream ( ) ; VelocityWriter vw = null ; String encoding = response . getCharacterEncoding ( ) ; try { vw = ( VelocityWriter ) writerPool . get ( ) ; if ( vw == null ) { vw = new VelocityWriter ( new OutputStreamWriter ( output , encoding ) , 4 * 1024 , true ) ; } else { vw . recycle ( new OutputStreamWriter ( output , encoding ) ) ; } template . merge ( context , vw ) ; } finally { try { if ( vw != null ) { vw . flush ( ) ; vw . recycle ( null ) ; writerPool . put ( vw ) ; } } catch ( Exception e ) { } } } protected void setContentType ( HttpServletRequest request , HttpServletResponse response ) { String contentType = defaultContentType ; int index = contentType . lastIndexOf ( ';' ) + 1 ; if ( index <= 0 || ( index < contentType . length ( ) && contentType . indexOf ( "charset" , index ) == - 1 ) ) { String encoding = chooseCharacterEncoding ( request ) ; if ( ! DEFAULT_OUTPUT_ENCODING . equalsIgnoreCase ( encoding ) ) { contentType += "; charset=" + encoding ; } } response . setContentType ( contentType ) ; } protected String chooseCharacterEncoding ( HttpServletRequest request ) { return RuntimeSingleton . getString ( RuntimeConstants . OUTPUT_ENCODING , DEFAULT_OUTPUT_ENCODING ) ; } protected Context createContext ( HttpServletRequest request , HttpServletResponse response ) { VelocityContext context = new VelocityContext ( ) ; context . put ( REQUEST , request ) ; context . put ( RESPONSE , response ) ; return context ; } public Template getTemplate ( String name ) throws ResourceNotFoundException , ParseErrorException , Exception { return RuntimeSingleton . getTemplate ( name ) ; } public Template getTemplate ( String name , String encoding ) throws ResourceNotFoundException , ParseErrorException , Exception { return RuntimeSingleton . getTemplate ( name , encoding ) ; } protected Template handleRequest ( HttpServletRequest request , HttpServletResponse response , Context ctx ) throws Exception { Template t = handleRequest ( ctx ) ; if ( t == null ) { throw new Exception ( "handleRequest(Context) returned null - no template selected!" ) ; } return t ; } protected Template handleRequest ( Context ctx ) throws Exception { throw new Exception ( "You must override VelocityServlet.handleRequest( Context) " + " or VelocityServlet.handleRequest( HttpServletRequest, " + " HttpServletResponse, Context)" ) ; } protected void error ( HttpServletRequest request , HttpServletResponse response , Exception cause ) throws ServletException , IOException { StringBuffer html = new StringBuffer ( ) ; html . append ( "<html>" ) ; html . append ( "<title>Error</title>" ) ; html . append ( "<body bgcolor=\"#ffffff\">" ) ; html . append ( "<h2>VelocityServlet: Error processing the template</h2>" ) ; html . append ( "<pre>" ) ; String why = cause . getMessage ( ) ; if ( why != null && why . trim ( ) . length ( ) > 0 ) { html . append ( why ) ; html . append ( "<br>" ) ; } StringWriter sw = new StringWriter ( ) ; cause . printStackTrace ( new PrintWriter ( sw ) ) ; html . append ( sw . toString ( ) ) ; html . append ( "</pre>" ) ; html . append ( "</body>" ) ; html . append ( "</html>" ) ; response . getOutputStream ( ) . print ( html . toString ( ) ) ; } } 	1
package org . apache . velocity . runtime . parser ; import org . apache . velocity . runtime . parser . node . * ; class JJTParserState { private java . util . Stack nodes ; private java . util . Stack marks ; private int sp ; private int mk ; private boolean node_created ; JJTParserState ( ) { nodes = new java . util . Stack ( ) ; marks = new java . util . Stack ( ) ; sp = 0 ; mk = 0 ; } boolean nodeCreated ( ) { return node_created ; } void reset ( ) { nodes . removeAllElements ( ) ; marks . removeAllElements ( ) ; sp = 0 ; mk = 0 ; } Node rootNode ( ) { return ( Node ) nodes . elementAt ( 0 ) ; } void pushNode ( Node n ) { nodes . push ( n ) ; ++ sp ; } Node popNode ( ) { if ( -- sp < mk ) { mk = ( ( Integer ) marks . pop ( ) ) . intValue ( ) ; } return ( Node ) nodes . pop ( ) ; } Node peekNode ( ) { return ( Node ) nodes . peek ( ) ; } int nodeArity ( ) { return sp - mk ; } void clearNodeScope ( Node n ) { while ( sp > mk ) { popNode ( ) ; } mk = ( ( Integer ) marks . pop ( ) ) . intValue ( ) ; } void openNodeScope ( Node n ) { marks . push ( new Integer ( mk ) ) ; mk = sp ; n . jjtOpen ( ) ; } void closeNodeScope ( Node n , int num ) { mk = ( ( Integer ) marks . pop ( ) ) . intValue ( ) ; while ( num -- > 0 ) { Node c = popNode ( ) ; c . jjtSetParent ( n ) ; n . jjtAddChild ( c , num ) ; } n . jjtClose ( ) ; pushNode ( n ) ; node_created = true ; } void closeNodeScope ( Node n , boolean condition ) { if ( condition ) { int a = nodeArity ( ) ; mk = ( ( Integer ) marks . pop ( ) ) . intValue ( ) ; while ( a -- > 0 ) { Node c = popNode ( ) ; c . jjtSetParent ( n ) ; n . jjtAddChild ( c , a ) ; } n . jjtClose ( ) ; pushNode ( n ) ; node_created = true ; } else { mk = ( ( Integer ) marks . pop ( ) ) . intValue ( ) ; node_created = false ; } } } 	0
package org . apache . velocity . app . tools ; import java . util . * ; import java . text . * ; import java . lang . reflect . Array ; import org . apache . velocity . context . * ; public class VelocityFormatter { Context context = null ; NumberFormat nf = NumberFormat . getInstance ( ) ; public VelocityFormatter ( Context context ) { this . context = context ; } public String formatShortDate ( Date date ) { return DateFormat . getDateInstance ( DateFormat . SHORT ) . format ( date ) ; } public String formatLongDate ( Date date ) { return DateFormat . getDateInstance ( DateFormat . LONG ) . format ( date ) ; } public String formatShortDateTime ( Date date ) { return DateFormat . getDateTimeInstance ( DateFormat . SHORT , DateFormat . SHORT ) . format ( date ) ; } public String formatLongDateTime ( Date date ) { return DateFormat . getDateTimeInstance ( DateFormat . LONG , DateFormat . LONG ) . format ( date ) ; } public String formatArray ( Object array ) { return formatArray ( array , ", " , " and " ) ; } public String formatArray ( Object array , String delim ) { return formatArray ( array , delim , delim ) ; } public String formatArray ( Object array , String delim , String finaldelim ) { StringBuffer sb = new StringBuffer ( ) ; int arrayLen = Array . getLength ( array ) ; for ( int i = 0 ; i < arrayLen ; i ++ ) { sb . append ( Array . get ( array , i ) . toString ( ) ) ; if ( i < arrayLen - 2 ) { sb . append ( delim ) ; } else if ( i < arrayLen - 1 ) { sb . append ( finaldelim ) ; } } return sb . toString ( ) ; } public String formatVector ( List list ) { return formatVector ( list , ", " , " and " ) ; } public String formatVector ( List list , String delim ) { return formatVector ( list , delim , delim ) ; } public String formatVector ( List list , String delim , String finaldelim ) { StringBuffer sb = new StringBuffer ( ) ; int size = list . size ( ) ; for ( int i = 0 ; i < size ; i ++ ) { sb . append ( list . get ( i ) ) ; if ( i < size - 2 ) { sb . append ( delim ) ; } else if ( i < size - 1 ) { sb . append ( finaldelim ) ; } } return sb . toString ( ) ; } public String limitLen ( int maxlen , String string ) { return limitLen ( maxlen , string , "..." ) ; } public String limitLen ( int maxlen , String string , String suffix ) { String ret = string ; if ( string . length ( ) > maxlen ) { ret = string . substring ( 0 , maxlen - suffix . length ( ) ) + suffix ; } return ret ; } public class VelocityAlternator { protected String [ ] alternates = null ; protected int current = 0 ; public VelocityAlternator ( String [ ] alternates ) { this . alternates = alternates ; } public String alternate ( ) { current ++ ; current %= alternates . length ; return "" ; } public String toString ( ) { return alternates [ current ] ; } } public class VelocityAutoAlternator extends VelocityAlternator { public VelocityAutoAlternator ( String [ ] alternates ) { super ( alternates ) ; } public final String toString ( ) { String s = alternates [ current ] ; alternate ( ) ; return s ; } } public String makeAlternator ( String name , String alt1 , String alt2 ) { String [ ] alternates = { alt1 , alt2 } ; context . put ( name , new VelocityAlternator ( alternates ) ) ; return "" ; } public String makeAlternator ( String name , String alt1 , String alt2 , String alt3 ) { String [ ] alternates = { alt1 , alt2 , alt3 } ; context . put ( name , new VelocityAlternator ( alternates ) ) ; return "" ; } public String makeAlternator ( String name , String alt1 , String alt2 , String alt3 , String alt4 ) { String [ ] alternates = { alt1 , alt2 , alt3 , alt4 } ; context . put ( name , new VelocityAlternator ( alternates ) ) ; return "" ; } public String makeAutoAlternator ( String name , String alt1 , String alt2 ) { String [ ] alternates = { alt1 , alt2 } ; context . put ( name , new VelocityAutoAlternator ( alternates ) ) ; return "" ; } public Object isNull ( Object o , Object dflt ) { if ( o == null ) { return dflt ; } else { return o ; } } } 	1
package org . apache . velocity . test ; import java . io . FileInputStream ; import java . util . Properties ; import java . util . List ; import java . util . ArrayList ; import java . util . Iterator ; import org . apache . velocity . app . Velocity ; import junit . framework . TestSuite ; public class TemplateTestSuite extends TestSuite implements TemplateTestBase { private Properties testProperties ; public TemplateTestSuite ( ) { try { Velocity . setProperty ( Velocity . FILE_RESOURCE_LOADER_PATH , FILE_RESOURCE_LOADER_PATH ) ; Velocity . setProperty ( Velocity . RUNTIME_LOG_ERROR_STACKTRACE , "true" ) ; Velocity . setProperty ( Velocity . RUNTIME_LOG_WARN_STACKTRACE , "true" ) ; Velocity . setProperty ( Velocity . RUNTIME_LOG_INFO_STACKTRACE , "true" ) ; Velocity . init ( ) ; testProperties = new Properties ( ) ; testProperties . load ( new FileInputStream ( TEST_CASE_PROPERTIES ) ) ; } catch ( Exception e ) { System . err . println ( "Cannot setup TemplateTestSuite!" ) ; e . printStackTrace ( ) ; System . exit ( 1 ) ; } addTemplateTestCases ( ) ; } private void addTemplateTestCases ( ) { String template ; for ( int i = 1 ; ; i ++ ) { template = testProperties . getProperty ( getTemplateTestKey ( i ) ) ; if ( template != null ) { System . out . println ( "Adding TemplateTestCase : " + template ) ; addTest ( new TemplateTestCase ( template ) ) ; } else { break ; } } } private static final String getTemplateTestKey ( int nbr ) { return ( "test.template." + nbr ) ; } } 	0
package org . apache . velocity . runtime . parser . node ; import org . apache . velocity . context . InternalContextAdapter ; import org . apache . velocity . runtime . parser . Parser ; import java . io . StringWriter ; import java . io . BufferedReader ; import java . io . StringReader ; import org . apache . velocity . runtime . RuntimeConstants ; public class ASTStringLiteral extends SimpleNode { private boolean interpolate = true ; private SimpleNode nodeTree = null ; private String image = "" ; private String interpolateimage = "" ; public ASTStringLiteral ( int id ) { super ( id ) ; } public ASTStringLiteral ( Parser p , int id ) { super ( p , id ) ; } public Object init ( InternalContextAdapter context , Object data ) throws Exception { super . init ( context , data ) ; interpolate = rsvc . getBoolean ( RuntimeConstants . INTERPOLATE_STRINGLITERALS , true ) && getFirstToken ( ) . image . startsWith ( "\"" ) && ( ( getFirstToken ( ) . image . indexOf ( '$' ) != - 1 ) || ( getFirstToken ( ) . image . indexOf ( '#' ) != - 1 ) ) ; image = getFirstToken ( ) . image . substring ( 1 , getFirstToken ( ) . image . length ( ) - 1 ) ; interpolateimage = image + " " ; if ( interpolate ) { BufferedReader br = new BufferedReader ( new StringReader ( interpolateimage ) ) ; nodeTree = rsvc . parse ( br , ( context != null ) ? context . getCurrentTemplateName ( ) : "StringLiteral" , false ) ; nodeTree . init ( context , rsvc ) ; } return data ; } public Object jjtAccept ( ParserVisitor visitor , Object data ) { return visitor . visit ( this , data ) ; } public Object value ( InternalContextAdapter context ) { if ( interpolate ) { try { StringWriter writer = new StringWriter ( ) ; nodeTree . render ( context , writer ) ; String ret = writer . toString ( ) ; return ret . substring ( 0 , ret . length ( ) - 1 ) ; } catch ( Exception e ) { rsvc . error ( "Error in interpolating string literal : " + e ) ; } } return image ; } } 	1
package org . apache . velocity . test ; import java . io . BufferedWriter ; import java . io . FileOutputStream ; import java . io . OutputStreamWriter ; import java . io . Writer ; import java . util . Vector ; import org . apache . velocity . VelocityContext ; import org . apache . velocity . Template ; import org . apache . velocity . app . Velocity ; import org . apache . velocity . runtime . RuntimeSingleton ; public class ContextSafetyTestCase extends BaseTestCase implements TemplateTestBase { public ContextSafetyTestCase ( ) { super ( "ContextSafetyTestCase" ) ; try { Velocity . setProperty ( Velocity . FILE_RESOURCE_LOADER_PATH , FILE_RESOURCE_LOADER_PATH ) ; Velocity . init ( ) ; } catch ( Exception e ) { System . err . println ( "Cannot setup ContextSafetyTestCase!" ) ; e . printStackTrace ( ) ; System . exit ( 1 ) ; } } public static junit . framework . Test suite ( ) { return new ContextSafetyTestCase ( ) ; } public void runTest ( ) { Vector v = new Vector ( ) ; v . addElement ( new String ( "vector hello 1" ) ) ; v . addElement ( new String ( "vector hello 2" ) ) ; v . addElement ( new String ( "vector hello 3" ) ) ; String strArray [ ] = new String [ 3 ] ; strArray [ 0 ] = "array hello 1" ; strArray [ 1 ] = "array hello 2" ; strArray [ 2 ] = "array hello 3" ; VelocityContext context = new VelocityContext ( ) ; try { assureResultsDirectoryExists ( RESULT_DIR ) ; Template template = RuntimeSingleton . getTemplate ( getFileName ( null , "context_safety" , TMPL_FILE_EXT ) ) ; FileOutputStream fos1 = new FileOutputStream ( getFileName ( RESULT_DIR , "context_safety1" , RESULT_FILE_EXT ) ) ; FileOutputStream fos2 = new FileOutputStream ( getFileName ( RESULT_DIR , "context_safety2" , RESULT_FILE_EXT ) ) ; Writer writer1 = new BufferedWriter ( new OutputStreamWriter ( fos1 ) ) ; Writer writer2 = new BufferedWriter ( new OutputStreamWriter ( fos2 ) ) ; context . put ( "vector" , v ) ; template . merge ( context , writer1 ) ; writer1 . flush ( ) ; writer1 . close ( ) ; context . put ( "vector" , strArray ) ; template . merge ( context , writer2 ) ; writer2 . flush ( ) ; writer2 . close ( ) ; if ( ! isMatch ( RESULT_DIR , COMPARE_DIR , "context_safety1" , RESULT_FILE_EXT , CMP_FILE_EXT ) || ! isMatch ( RESULT_DIR , COMPARE_DIR , "context_safety2" , RESULT_FILE_EXT , CMP_FILE_EXT ) ) { fail ( "Output incorrect." ) ; } } catch ( Exception e ) { fail ( e . getMessage ( ) ) ; } } } 	0
package org . apache . velocity . runtime . resource . loader ; import java . io . InputStream ; import org . apache . velocity . runtime . RuntimeServices ; import org . apache . velocity . runtime . resource . Resource ; import org . apache . velocity . exception . ResourceNotFoundException ; import org . apache . commons . collections . ExtendedProperties ; public abstract class ResourceLoader { protected boolean isCachingOn = false ; protected long modificationCheckInterval = 2 ; protected String className = null ; protected RuntimeServices rsvc = null ; public void commonInit ( RuntimeServices rs , ExtendedProperties configuration ) { this . rsvc = rs ; isCachingOn = configuration . getBoolean ( "cache" , false ) ; modificationCheckInterval = configuration . getLong ( "modificationCheckInterval" , 0 ) ; className = configuration . getString ( "class" ) ; } public abstract void init ( ExtendedProperties configuration ) ; public abstract InputStream getResourceStream ( String source ) throws ResourceNotFoundException ; public abstract boolean isSourceModified ( Resource resource ) ; public abstract long getLastModified ( Resource resource ) ; public String getClassName ( ) { return className ; } public void setCachingOn ( boolean value ) { isCachingOn = value ; } public boolean isCachingOn ( ) { return isCachingOn ; } public void setModificationCheckInterval ( long modificationCheckInterval ) { this . modificationCheckInterval = modificationCheckInterval ; } public long getModificationCheckInterval ( ) { return modificationCheckInterval ; } } 	1
package org . apache . velocity . test ; import java . util . ArrayList ; import java . lang . reflect . Method ; import org . apache . velocity . app . Velocity ; import org . apache . velocity . runtime . RuntimeSingleton ; import junit . framework . TestCase ; public class IntrospectorTestCase2 extends BaseTestCase { IntrospectorTestCase2 ( ) { super ( "IntrospectorTestCase2" ) ; } public IntrospectorTestCase2 ( String name ) { super ( name ) ; } public static junit . framework . Test suite ( ) { return new IntrospectorTestCase2 ( ) ; } public void runTest ( ) { try { Velocity . init ( ) ; Method method ; String result ; Tester t = new Tester ( ) ; Object [ ] params = { new Foo ( ) , new Foo ( ) } ; method = RuntimeSingleton . getIntrospector ( ) . getMethod ( Tester . class , "find" , params ) ; if ( method == null ) fail ( "Returned method was null" ) ; result = ( String ) method . invoke ( t , params ) ; if ( ! result . equals ( "Bar-Bar" ) ) { fail ( "Should have gotten 'Bar-Bar' : recieved '" + result + "'" ) ; } method = RuntimeSingleton . getIntrospector ( ) . getMethod ( Tester2 . class , "find" , params ) ; if ( method != null ) fail ( "Introspector shouldn't have found a method as it's ambiguous." ) ; } catch ( Exception e ) { fail ( e . toString ( ) ) ; } } public interface Woogie { } public static class Bar implements Woogie { int i ; } public static class Foo extends Bar { int j ; } public static class Tester { public static String find ( Woogie w , Object o ) { return "Woogie-Object" ; } public static String find ( Object w , Bar o ) { return "Object-Bar" ; } public static String find ( Bar w , Bar o ) { return "Bar-Bar" ; } public static String find ( Object o ) { return "Object" ; } public static String find ( Woogie o ) { return "Woogie" ; } } public static class Tester2 { public static String find ( Woogie w , Object o ) { return "Woogie-Object" ; } public static String find ( Object w , Bar o ) { return "Object-Bar" ; } public static String find ( Bar w , Object o ) { return "Bar-Object" ; } public static String find ( Object o ) { return "Object" ; } public static String find ( Woogie o ) { return "Woogie" ; } } } 	0
package org . apache . velocity . texen . ant ; import java . util . StringTokenizer ; import java . util . Date ; import java . util . Hashtable ; import java . util . Iterator ; import java . util . Map ; import java . io . File ; import java . io . Writer ; import java . io . FileInputStream ; import java . io . InputStream ; import java . io . IOException ; import org . apache . tools . ant . BuildException ; import org . apache . tools . ant . Task ; import org . apache . velocity . VelocityContext ; import org . apache . velocity . app . VelocityEngine ; import org . apache . velocity . context . Context ; import org . apache . velocity . texen . Generator ; import org . apache . velocity . util . StringUtils ; import org . apache . velocity . exception . MethodInvocationException ; import org . apache . velocity . exception . ParseErrorException ; import org . apache . velocity . exception . ResourceNotFoundException ; import org . apache . commons . collections . ExtendedProperties ; public class TexenTask extends Task { private final static String ERR_MSG_FRAGMENT = ". For more information consult the velocity log, or invoke ant " + "with the -debug flag." ; protected String controlTemplate ; protected String templatePath ; protected String outputDirectory ; protected String outputFile ; protected String outputEncoding ; protected String inputEncoding ; protected ExtendedProperties contextProperties ; protected boolean useClasspath ; private String fileSeparator = System . getProperty ( "file.separator" ) ; public void setControlTemplate ( String controlTemplate ) { this . controlTemplate = controlTemplate ; } public String getControlTemplate ( ) { return controlTemplate ; } public void setTemplatePath ( String templatePath ) throws Exception { StringBuffer resolvedPath = new StringBuffer ( ) ; StringTokenizer st = new StringTokenizer ( templatePath , "," ) ; while ( st . hasMoreTokens ( ) ) { File fullPath = project . resolveFile ( st . nextToken ( ) ) ; resolvedPath . append ( fullPath . getCanonicalPath ( ) ) ; if ( st . hasMoreTokens ( ) ) { resolvedPath . append ( "," ) ; } } this . templatePath = resolvedPath . toString ( ) ; System . out . println ( templatePath ) ; } public String getTemplatePath ( ) { return templatePath ; } public void setOutputDirectory ( File outputDirectory ) { try { this . outputDirectory = outputDirectory . getCanonicalPath ( ) ; } catch ( java . io . IOException ioe ) { throw new BuildException ( ioe ) ; } } public String getOutputDirectory ( ) { return outputDirectory ; } public void setOutputFile ( String outputFile ) { this . outputFile = outputFile ; } public void setOutputEncoding ( String outputEncoding ) { this . outputEncoding = outputEncoding ; } public void setInputEncoding ( String inputEncoding ) { this . inputEncoding = inputEncoding ; } public String getOutputFile ( ) { return outputFile ; } public void setContextProperties ( String file ) { String [ ] sources = StringUtils . split ( file , "," ) ; contextProperties = new ExtendedProperties ( ) ; for ( int i = 0 ; i < sources . length ; i ++ ) { ExtendedProperties source = new ExtendedProperties ( ) ; try { File fullPath = project . resolveFile ( sources [ i ] ) ; log ( "Using contextProperties file: " + fullPath ) ; source . load ( new FileInputStream ( fullPath ) ) ; } catch ( Exception e ) { ClassLoader classLoader = this . getClass ( ) . getClassLoader ( ) ; try { InputStream inputStream = classLoader . getResourceAsStream ( sources [ i ] ) ; if ( inputStream == null ) { throw new BuildException ( "Context properties file " + sources [ i ] + " could not be found in the file system or on the classpath!" ) ; } else { source . load ( inputStream ) ; } } catch ( IOException ioe ) { source = null ; } } Iterator j = source . getKeys ( ) ; while ( j . hasNext ( ) ) { String name = ( String ) j . next ( ) ; String value = source . getString ( name ) ; contextProperties . setProperty ( name , value ) ; } } } public ExtendedProperties getContextProperties ( ) { return contextProperties ; } public void setUseClasspath ( boolean useClasspath ) { this . useClasspath = useClasspath ; } public Context initControlContext ( ) throws Exception { return new VelocityContext ( ) ; } public void execute ( ) throws BuildException { if ( templatePath == null && useClasspath == false ) { throw new BuildException ( "The template path needs to be defined if you are not using " + "the classpath for locating templates!" ) ; } if ( controlTemplate == null ) { throw new BuildException ( "The control template needs to be defined!" ) ; } if ( outputDirectory == null ) { throw new BuildException ( "The output directory needs to be defined!" ) ; } if ( outputFile == null ) { throw new BuildException ( "The output file needs to be defined!" ) ; } VelocityEngine ve = new VelocityEngine ( ) ; try { if ( templatePath != null ) { log ( "Using templatePath: " + templatePath , project . MSG_VERBOSE ) ; ve . setProperty ( ve . FILE_RESOURCE_LOADER_PATH , templatePath ) ; } if ( useClasspath ) { log ( "Using classpath" ) ; ve . addProperty ( VelocityEngine . RESOURCE_LOADER , "classpath" ) ; ve . setProperty ( "classpath." + VelocityEngine . RESOURCE_LOADER + ".class" , "org.apache.velocity.runtime.resource.loader.ClasspathResourceLoader" ) ; ve . setProperty ( "classpath." + VelocityEngine . RESOURCE_LOADER + ".cache" , "false" ) ; ve . setProperty ( "classpath." + VelocityEngine . RESOURCE_LOADER + ".modificationCheckInterval" , "2" ) ; } ve . init ( ) ; Generator generator = Generator . getInstance ( ) ; generator . setVelocityEngine ( ve ) ; generator . setOutputPath ( outputDirectory ) ; generator . setInputEncoding ( inputEncoding ) ; generator . setOutputEncoding ( outputEncoding ) ; if ( templatePath != null ) { generator . setTemplatePath ( templatePath ) ; } File file = new File ( outputDirectory ) ; if ( ! file . exists ( ) ) { file . mkdirs ( ) ; } String path = outputDirectory + File . separator + outputFile ; log ( "Generating to file " + path , project . MSG_INFO ) ; Writer writer = generator . getWriter ( path , outputEncoding ) ; Context c = initControlContext ( ) ; populateInitialContext ( c ) ; if ( contextProperties != null ) { Iterator i = contextProperties . getKeys ( ) ; while ( i . hasNext ( ) ) { String property = ( String ) i . next ( ) ; String value = contextProperties . getString ( property ) ; try { c . put ( property , new Integer ( value ) ) ; } catch ( NumberFormatException nfe ) { String booleanString = contextProperties . testBoolean ( value ) ; if ( booleanString != null ) { c . put ( property , new Boolean ( booleanString ) ) ; } else { if ( property . endsWith ( "file.contents" ) ) { value = StringUtils . fileContentsToString ( project . resolveFile ( value ) . getCanonicalPath ( ) ) ; property = property . substring ( 0 , property . indexOf ( "file.contents" ) - 1 ) ; } c . put ( property , value ) ; } } } } writer . write ( generator . parse ( controlTemplate , c ) ) ; writer . flush ( ) ; writer . close ( ) ; generator . shutdown ( ) ; cleanup ( ) ; } catch ( BuildException e ) { throw e ; } catch ( MethodInvocationException e ) { throw new BuildException ( "Exception thrown by '" + e . getReferenceName ( ) + "." + e . getMethodName ( ) + "'" + ERR_MSG_FRAGMENT , e . getWrappedThrowable ( ) ) ; } catch ( ParseErrorException e ) { throw new BuildException ( "Velocity syntax error" + ERR_MSG_FRAGMENT , e ) ; } catch ( ResourceNotFoundException e ) { throw new BuildException ( "Resource not found" + ERR_MSG_FRAGMENT , e ) ; } catch ( Exception e ) { throw new BuildException ( "Generation failed" + ERR_MSG_FRAGMENT , e ) ; } } protected void populateInitialContext ( Context context ) throws Exception { context . put ( "now" , new Date ( ) . toString ( ) ) ; } protected void cleanup ( ) throws Exception { } } 	1
package org . apache . velocity . test ; import java . util . ArrayList ; import java . util . List ; import java . lang . reflect . Method ; import org . apache . velocity . runtime . RuntimeSingleton ; import junit . framework . TestCase ; import junit . framework . Test ; import junit . framework . TestSuite ; public class IntrospectorTestCase3 extends BaseTestCase { public IntrospectorTestCase3 ( String name ) { super ( name ) ; } public static Test suite ( ) { return new TestSuite ( IntrospectorTestCase3 . class ) ; } public void testSimple ( ) throws Exception { Method method ; String result ; String type ; MethodProvider mp = new MethodProvider ( ) ; Object [ ] listIntInt = { new ArrayList ( ) , new Integer ( 1 ) , new Integer ( 2 ) } ; Object [ ] listLongList = { new ArrayList ( ) , new Long ( 1 ) , new ArrayList ( ) } ; Object [ ] listLongInt = { new ArrayList ( ) , new Long ( 1 ) , new Integer ( 2 ) } ; Object [ ] intInt = { new Integer ( 1 ) , new Integer ( 2 ) } ; Object [ ] longInt = { new Long ( 1 ) , new Integer ( 2 ) } ; Object [ ] longLong = { new Long ( 1 ) , new Long ( 2 ) } ; method = RuntimeSingleton . getIntrospector ( ) . getMethod ( MethodProvider . class , "lii" , listIntInt ) ; result = ( String ) method . invoke ( mp , listIntInt ) ; assertTrue ( result . equals ( "lii" ) ) ; method = RuntimeSingleton . getIntrospector ( ) . getMethod ( MethodProvider . class , "ii" , intInt ) ; result = ( String ) method . invoke ( mp , intInt ) ; assertTrue ( result . equals ( "ii" ) ) ; method = RuntimeSingleton . getIntrospector ( ) . getMethod ( MethodProvider . class , "ll" , longInt ) ; result = ( String ) method . invoke ( mp , longInt ) ; assertTrue ( result . equals ( "ll" ) ) ; method = RuntimeSingleton . getIntrospector ( ) . getMethod ( MethodProvider . class , "ll" , longLong ) ; result = ( String ) method . invoke ( mp , longLong ) ; assertTrue ( result . equals ( "ll" ) ) ; method = RuntimeSingleton . getIntrospector ( ) . getMethod ( MethodProvider . class , "lll" , listLongList ) ; result = ( String ) method . invoke ( mp , listLongList ) ; assertTrue ( result . equals ( "lll" ) ) ; Object [ ] oa = { null , new Integer ( 0 ) } ; method = RuntimeSingleton . getIntrospector ( ) . getMethod ( MethodProvider . class , "lll" , oa ) ; result = ( String ) method . invoke ( mp , oa ) ; assertTrue ( result . equals ( "Listl" ) ) ; } public static class MethodProvider { public String ii ( int p , int d ) { return "ii" ; } public String lii ( List s , int p , int d ) { return "lii" ; } public String lll ( List s , long p , List d ) { return "lll" ; } public String lll ( List s , long p , int d ) { return "lli" ; } public String lll ( List s , long p ) { return "Listl" ; } public String ll ( long p , long d ) { return "ll" ; } } } 	0
package org . apache . velocity . runtime . log ; import java . util . Vector ; import java . util . Enumeration ; import org . apache . velocity . runtime . RuntimeServices ; public class PrimordialLogSystem implements LogSystem { private Vector pendingMessages = new Vector ( ) ; private RuntimeServices rsvc = null ; public PrimordialLogSystem ( ) { } public void init ( RuntimeServices rs ) throws Exception { rsvc = rs ; } public void logVelocityMessage ( int level , String message ) { synchronized ( this ) { Object [ ] data = new Object [ 2 ] ; data [ 0 ] = new Integer ( level ) ; data [ 1 ] = message ; pendingMessages . addElement ( data ) ; } } public void dumpLogMessages ( LogSystem newLogger ) { synchronized ( this ) { if ( ! pendingMessages . isEmpty ( ) ) { for ( Enumeration e = pendingMessages . elements ( ) ; e . hasMoreElements ( ) ; ) { Object [ ] data = ( Object [ ] ) e . nextElement ( ) ; newLogger . logVelocityMessage ( ( ( Integer ) data [ 0 ] ) . intValue ( ) , ( String ) data [ 1 ] ) ; } } } } } 	1
package org . apache . velocity . test ; public interface TemplateTestBase { public final static String TMPL_FILE_EXT = "vm" ; public final static String CMP_FILE_EXT = "cmp" ; public final static String RESULT_FILE_EXT = "res" ; public final static String FILE_RESOURCE_LOADER_PATH = "../test/templates" ; public final static String TEST_CASE_PROPERTIES = FILE_RESOURCE_LOADER_PATH + "/templates.properties" ; public final static String RESULT_DIR = FILE_RESOURCE_LOADER_PATH + "/results" ; public final static String COMPARE_DIR = FILE_RESOURCE_LOADER_PATH + "/compare" ; } 	0
package org . apache . velocity . util . introspection ; import org . apache . velocity . runtime . RuntimeLogger ; public interface UberspectLoggable { public void setRuntimeLogger ( RuntimeLogger logger ) ; } 	1
package org . apache . velocity . test ; import org . apache . velocity . app . VelocityEngine ; import org . apache . velocity . runtime . RuntimeServices ; import org . apache . velocity . runtime . log . LogSystem ; import junit . framework . TestCase ; public class ExternalLoggerTest extends TestCase implements LogSystem { private String logString = null ; private VelocityEngine ve = null ; public ExternalLoggerTest ( ) { super ( "LoggerTest" ) ; try { ve = new VelocityEngine ( ) ; ve . setProperty ( VelocityEngine . RUNTIME_LOG_LOGSYSTEM , this ) ; ve . init ( ) ; } catch ( Exception e ) { System . err . println ( "Cannot setup LoggerTest : " + e ) ; System . exit ( 1 ) ; } } public void init ( RuntimeServices rs ) { } public static junit . framework . Test suite ( ) { return new ExternalLoggerTest ( ) ; } public void runTest ( ) { logString = null ; String testString = "This is a test." ; ve . warn ( testString ) ; if ( logString == null || ! logString . equals ( VelocityEngine . WARN_PREFIX + testString ) ) { fail ( "Didn't recieve log message." ) ; } } public void logVelocityMessage ( int level , String message ) { String out = "" ; switch ( level ) { case LogSystem . DEBUG_ID : out = VelocityEngine . DEBUG_PREFIX ; break ; case LogSystem . INFO_ID : out = VelocityEngine . INFO_PREFIX ; break ; case LogSystem . WARN_ID : out = VelocityEngine . WARN_PREFIX ; break ; case LogSystem . ERROR_ID : out = VelocityEngine . ERROR_PREFIX ; break ; default : out = VelocityEngine . UNKNOWN_PREFIX ; break ; } logString = out + message ; } } 	0
package org . apache . velocity . runtime . parser . node ; import org . apache . velocity . context . InternalContextAdapter ; import org . apache . velocity . runtime . parser . Parser ; import org . apache . velocity . exception . MethodInvocationException ; public class ASTGTNode extends SimpleNode { public ASTGTNode ( int id ) { super ( id ) ; } public ASTGTNode ( Parser p , int id ) { super ( p , id ) ; } public Object jjtAccept ( ParserVisitor visitor , Object data ) { return visitor . visit ( this , data ) ; } public boolean evaluate ( InternalContextAdapter context ) throws MethodInvocationException { Object left = jjtGetChild ( 0 ) . value ( context ) ; Object right = jjtGetChild ( 1 ) . value ( context ) ; if ( left == null || right == null ) { rsvc . error ( ( left == null ? "Left" : "Right" ) + " side (" + jjtGetChild ( ( left == null ? 0 : 1 ) ) . literal ( ) + ") of '>' operation has null value." + " Operation not possible. " + context . getCurrentTemplateName ( ) + " [line " + getLine ( ) + ", column " + getColumn ( ) + "]" ) ; return false ; } if ( ! ( left instanceof Integer ) || ! ( right instanceof Integer ) ) { rsvc . error ( ( ! ( left instanceof Integer ) ? "Left" : "Right" ) + " side of '>' operation is not a valid type. " + " It is a " + ( ! ( left instanceof Integer ) ? left . getClass ( ) : right . getClass ( ) ) + ". Currently only integers (1,2,3...) and Integer type is supported. " + context . getCurrentTemplateName ( ) + " [line " + getLine ( ) + ", column " + getColumn ( ) + "]" ) ; return false ; } return ( ( Integer ) left ) . intValue ( ) > ( ( Integer ) right ) . intValue ( ) ; } public Object value ( InternalContextAdapter context ) throws MethodInvocationException { boolean val = evaluate ( context ) ; return val ? Boolean . TRUE : Boolean . FALSE ; } } 	1
package org . apache . velocity . test ; import java . io . File ; import org . apache . velocity . runtime . RuntimeSingleton ; import org . apache . velocity . util . StringUtils ; import junit . framework . TestCase ; import org . apache . oro . text . perl . Perl5Util ; public class BaseTestCase extends TestCase { private Perl5Util perl = new Perl5Util ( ) ; public BaseTestCase ( String name ) { super ( name ) ; } protected static String getFileName ( String dir , String base , String ext ) { StringBuffer buf = new StringBuffer ( ) ; if ( dir != null ) { buf . append ( dir ) . append ( '/' ) ; } buf . append ( base ) . append ( '.' ) . append ( ext ) ; return buf . toString ( ) ; } protected static void assureResultsDirectoryExists ( String resultsDirectory ) { File dir = new File ( resultsDirectory ) ; if ( ! dir . exists ( ) ) { RuntimeSingleton . info ( "Template results directory does not exist" ) ; if ( dir . mkdirs ( ) ) { RuntimeSingleton . info ( "Created template results directory" ) ; } else { String errMsg = "Unable to create template results directory" ; RuntimeSingleton . warn ( errMsg ) ; fail ( errMsg ) ; } } } protected String normalizeNewlines ( String source ) { return perl . substitute ( "s/\r[\n]/\n/g" , source ) ; } protected boolean isMatch ( String resultsDir , String compareDir , String baseFileName , String resultExt , String compareExt ) throws Exception { String result = StringUtils . fileContentsToString ( getFileName ( resultsDir , baseFileName , resultExt ) ) ; String compare = StringUtils . fileContentsToString ( getFileName ( compareDir , baseFileName , compareExt ) ) ; return normalizeNewlines ( result ) . equals ( normalizeNewlines ( compare ) ) ; } protected static final String getTestCaseName ( String s ) { StringBuffer name = new StringBuffer ( ) ; name . append ( Character . toTitleCase ( s . charAt ( 0 ) ) ) ; name . append ( s . substring ( 1 , s . length ( ) ) . toLowerCase ( ) ) ; return name . toString ( ) ; } } 	0
package org . apache . velocity . runtime . directive ; import java . io . Writer ; import java . io . IOException ; import java . util . Iterator ; import org . apache . velocity . runtime . RuntimeServices ; import org . apache . velocity . runtime . RuntimeConstants ; import org . apache . velocity . context . InternalContextAdapter ; import org . apache . velocity . runtime . parser . node . Node ; import org . apache . velocity . exception . MethodInvocationException ; import org . apache . velocity . exception . ParseErrorException ; import org . apache . velocity . exception . ResourceNotFoundException ; import org . apache . velocity . util . introspection . Info ; public class Foreach extends Directive { public String getName ( ) { return "foreach" ; } public int getType ( ) { return BLOCK ; } private String counterName ; private int counterInitialValue ; private String elementKey ; protected Info uberInfo ; public void init ( RuntimeServices rs , InternalContextAdapter context , Node node ) throws Exception { super . init ( rs , context , node ) ; counterName = rsvc . getString ( RuntimeConstants . COUNTER_NAME ) ; counterInitialValue = rsvc . getInt ( RuntimeConstants . COUNTER_INITIAL_VALUE ) ; elementKey = node . jjtGetChild ( 0 ) . getFirstToken ( ) . image . substring ( 1 ) ; uberInfo = new Info ( context . getCurrentTemplateName ( ) , getLine ( ) , getColumn ( ) ) ; } public boolean render ( InternalContextAdapter context , Writer writer , Node node ) throws IOException , MethodInvocationException , ResourceNotFoundException , ParseErrorException { Object listObject = node . jjtGetChild ( 2 ) . value ( context ) ; if ( listObject == null ) return false ; Iterator i = null ; try { i = rsvc . getUberspect ( ) . getIterator ( listObject , uberInfo ) ; } catch ( Exception ee ) { System . out . println ( ee ) ; } if ( i == null ) { return false ; } int counter = counterInitialValue ; Object o = context . get ( elementKey ) ; Object ctr = context . get ( counterName ) ; while ( i . hasNext ( ) ) { context . put ( counterName , new Integer ( counter ) ) ; context . put ( elementKey , i . next ( ) ) ; node . jjtGetChild ( 3 ) . render ( context , writer ) ; counter ++ ; } if ( ctr != null ) { context . put ( counterName , ctr ) ; } else { context . remove ( counterName ) ; } if ( o != null ) { context . put ( elementKey , o ) ; } else { context . remove ( elementKey ) ; } return true ; } } 	1
package org . apache . velocity . runtime . parser ; public class ParseException extends Exception { public ParseException ( Token currentTokenVal , int [ ] [ ] expectedTokenSequencesVal , String [ ] tokenImageVal ) { super ( "" ) ; specialConstructor = true ; currentToken = currentTokenVal ; expectedTokenSequences = expectedTokenSequencesVal ; tokenImage = tokenImageVal ; } public ParseException ( ) { super ( ) ; specialConstructor = false ; } public ParseException ( String message ) { super ( message ) ; specialConstructor = false ; } protected boolean specialConstructor ; public Token currentToken ; public int [ ] [ ] expectedTokenSequences ; public String [ ] tokenImage ; public String getMessage ( ) { if ( ! specialConstructor ) { return super . getMessage ( ) ; } String expected = "" ; int maxSize = 0 ; for ( int i = 0 ; i < expectedTokenSequences . length ; i ++ ) { if ( maxSize < expectedTokenSequences [ i ] . length ) { maxSize = expectedTokenSequences [ i ] . length ; } for ( int j = 0 ; j < expectedTokenSequences [ i ] . length ; j ++ ) { expected += tokenImage [ expectedTokenSequences [ i ] [ j ] ] + " " ; } if ( expectedTokenSequences [ i ] [ expectedTokenSequences [ i ] . length - 1 ] != 0 ) { expected += "..." ; } expected += eol + "    " ; } String retval = "Encountered \"" ; Token tok = currentToken . next ; for ( int i = 0 ; i < maxSize ; i ++ ) { if ( i != 0 ) retval += " " ; if ( tok . kind == 0 ) { retval += tokenImage [ 0 ] ; break ; } retval += add_escapes ( tok . image ) ; tok = tok . next ; } retval += "\" at line " + currentToken . next . beginLine + ", column " + currentToken . next . beginColumn ; retval += "." + eol ; if ( expectedTokenSequences . length == 1 ) { retval += "Was expecting:" + eol + "    " ; } else { retval += "Was expecting one of:" + eol + "    " ; } retval += expected ; return retval ; } protected String eol = System . getProperty ( "line.separator" , "\n" ) ; protected String add_escapes ( String str ) { StringBuffer retval = new StringBuffer ( ) ; char ch ; for ( int i = 0 ; i < str . length ( ) ; i ++ ) { switch ( str . charAt ( i ) ) { case 0 : continue ; case '\b' : retval . append ( "\\b" ) ; continue ; case '\t' : retval . append ( "\\t" ) ; continue ; case '\n' : retval . append ( "\\n" ) ; continue ; case '\f' : retval . append ( "\\f" ) ; continue ; case '\r' : retval . append ( "\\r" ) ; continue ; case '\"' : retval . append ( "\\\"" ) ; continue ; case '\'' : retval . append ( "\\\'" ) ; continue ; case '\\' : retval . append ( "\\\\" ) ; continue ; default : if ( ( ch = str . charAt ( i ) ) < 0x20 || ch > 0x7e ) { String s = "0000" + Integer . toString ( ch , 16 ) ; retval . append ( "\\u" + s . substring ( s . length ( ) - 4 , s . length ( ) ) ) ; } else { retval . append ( ch ) ; } continue ; } } return retval . toString ( ) ; } } 	0
package org . apache . velocity . runtime . parser . node ; import org . apache . velocity . context . InternalContextAdapter ; import org . apache . velocity . runtime . parser . Parser ; import org . apache . velocity . exception . MethodInvocationException ; public class ASTNENode extends SimpleNode { public ASTNENode ( int id ) { super ( id ) ; } public ASTNENode ( Parser p , int id ) { super ( p , id ) ; } public Object jjtAccept ( ParserVisitor visitor , Object data ) { return visitor . visit ( this , data ) ; } public boolean evaluate ( InternalContextAdapter context ) throws MethodInvocationException { Object left = jjtGetChild ( 0 ) . value ( context ) ; Object right = jjtGetChild ( 1 ) . value ( context ) ; if ( left == null || right == null ) { rsvc . error ( ( left == null ? "Left" : "Right" ) + " side (" + jjtGetChild ( ( left == null ? 0 : 1 ) ) . literal ( ) + ") of '!=' operation has null value." + " Operation not possible. " + context . getCurrentTemplateName ( ) + " [line " + getLine ( ) + ", column " + getColumn ( ) + "]" ) ; return false ; } if ( left . getClass ( ) . equals ( right . getClass ( ) ) ) { return ! ( left . equals ( right ) ) ; } else { rsvc . error ( "Error in evaluation of != expression." + " Both arguments must be of the same Class." + " Currently left = " + left . getClass ( ) + ", right = " + right . getClass ( ) + ". " + context . getCurrentTemplateName ( ) + " [line " + getLine ( ) + ", column " + getColumn ( ) + "] (ASTEQNode)" ) ; return false ; } } public Object value ( InternalContextAdapter context ) throws MethodInvocationException { boolean val = evaluate ( context ) ; return val ? Boolean . TRUE : Boolean . FALSE ; } } 	1
package org . apache . velocity . test ; public class AnakiaTestCase extends BaseTestCase { private static final String COMPARE_DIR = "../test/anakia/compare" ; private static final String RESULTS_DIR = "../test/anakia/results" ; private static final String FILE_EXT = ".html" ; public AnakiaTestCase ( ) { super ( "AnakiaTestCase" ) ; } public static junit . framework . Test suite ( ) { return new AnakiaTestCase ( ) ; } public void runTest ( ) { try { assureResultsDirectoryExists ( RESULTS_DIR ) ; if ( ! isMatch ( RESULTS_DIR , COMPARE_DIR , "index" , FILE_EXT , FILE_EXT ) ) { fail ( "Output is incorrect!" ) ; } else { System . out . println ( "Passed!" ) ; } } catch ( Exception e ) { } } } 	0
package org . apache . velocity . runtime . parser . node ; import java . io . IOException ; import java . io . Writer ; import org . apache . velocity . context . InternalContextAdapter ; import org . apache . velocity . runtime . RuntimeConstants ; import org . apache . velocity . runtime . parser . Parser ; import org . apache . velocity . exception . MethodInvocationException ; import org . apache . velocity . app . event . EventCartridge ; public class ASTSetDirective extends SimpleNode { private String leftReference = "" ; private Node right ; private ASTReference left ; boolean blather = false ; public ASTSetDirective ( int id ) { super ( id ) ; } public ASTSetDirective ( Parser p , int id ) { super ( p , id ) ; } public Object jjtAccept ( ParserVisitor visitor , Object data ) { return visitor . visit ( this , data ) ; } public Object init ( InternalContextAdapter context , Object data ) throws Exception { super . init ( context , data ) ; right = getRightHandSide ( ) ; left = getLeftHandSide ( ) ; blather = rsvc . getBoolean ( RuntimeConstants . RUNTIME_LOG_REFERENCE_LOG_INVALID , true ) ; leftReference = left . getFirstToken ( ) . image . substring ( 1 ) ; return data ; } public boolean render ( InternalContextAdapter context , Writer writer ) throws IOException , MethodInvocationException { Object value = right . value ( context ) ; if ( value == null ) { if ( blather ) { EventCartridge ec = context . getEventCartridge ( ) ; boolean doit = true ; if ( ec != null ) { doit = ec . shouldLogOnNullSet ( left . literal ( ) , right . literal ( ) ) ; } if ( doit ) { rsvc . error ( "RHS of #set statement is null. Context will not be modified. " + context . getCurrentTemplateName ( ) + " [line " + getLine ( ) + ", column " + getColumn ( ) + "]" ) ; } } return false ; } if ( left . jjtGetNumChildren ( ) == 0 ) { context . put ( leftReference , value ) ; } else { left . setValue ( context , value ) ; } return true ; } private ASTReference getLeftHandSide ( ) { return ( ASTReference ) jjtGetChild ( 0 ) ; } private Node getRightHandSide ( ) { return jjtGetChild ( 1 ) ; } } 	1
package org . apache . velocity . test ; import java . io . BufferedWriter ; import java . io . FileOutputStream ; import java . io . OutputStreamWriter ; import java . io . Writer ; import java . util . Vector ; import org . apache . velocity . VelocityContext ; import org . apache . velocity . Template ; import org . apache . velocity . app . Velocity ; import org . apache . velocity . test . provider . TestProvider ; import org . apache . velocity . util . StringUtils ; import junit . framework . TestCase ; public class EncodingTestCase extends BaseTestCase implements TemplateTestBase { public EncodingTestCase ( ) { super ( "EncodingTestCase" ) ; try { Velocity . setProperty ( Velocity . FILE_RESOURCE_LOADER_PATH , FILE_RESOURCE_LOADER_PATH ) ; Velocity . setProperty ( Velocity . INPUT_ENCODING , "UTF-8" ) ; Velocity . init ( ) ; } catch ( Exception e ) { System . err . println ( "Cannot setup EncodingTestCase!" ) ; e . printStackTrace ( ) ; System . exit ( 1 ) ; } } public static junit . framework . Test suite ( ) { return new EncodingTestCase ( ) ; } public void runTest ( ) { VelocityContext context = new VelocityContext ( ) ; try { assureResultsDirectoryExists ( RESULT_DIR ) ; Template template = Velocity . getTemplate ( getFileName ( null , "encodingtest" , TMPL_FILE_EXT ) , "UTF-8" ) ; FileOutputStream fos = new FileOutputStream ( getFileName ( RESULT_DIR , "encodingtest" , RESULT_FILE_EXT ) ) ; Writer writer = new BufferedWriter ( new OutputStreamWriter ( fos , "UTF-8" ) ) ; template . merge ( context , writer ) ; writer . flush ( ) ; writer . close ( ) ; if ( ! isMatch ( RESULT_DIR , COMPARE_DIR , "encodingtest" , RESULT_FILE_EXT , CMP_FILE_EXT ) ) { fail ( "Output 1 incorrect." ) ; } template = Velocity . getTemplate ( getFileName ( null , "encodingtest2" , TMPL_FILE_EXT ) , "UTF-8" ) ; fos = new FileOutputStream ( getFileName ( RESULT_DIR , "encodingtest2" , RESULT_FILE_EXT ) ) ; writer = new BufferedWriter ( new OutputStreamWriter ( fos , "UTF-8" ) ) ; template . merge ( context , writer ) ; writer . flush ( ) ; writer . close ( ) ; if ( ! isMatch ( RESULT_DIR , COMPARE_DIR , "encodingtest2" , RESULT_FILE_EXT , CMP_FILE_EXT ) ) { fail ( "Output 2 incorrect." ) ; } template = Velocity . getTemplate ( getFileName ( null , "encodingtest3" , TMPL_FILE_EXT ) , "GBK" ) ; fos = new FileOutputStream ( getFileName ( RESULT_DIR , "encodingtest3" , RESULT_FILE_EXT ) ) ; writer = new BufferedWriter ( new OutputStreamWriter ( fos , "GBK" ) ) ; template . merge ( context , writer ) ; writer . flush ( ) ; writer . close ( ) ; if ( ! isMatch ( RESULT_DIR , COMPARE_DIR , "encodingtest3" , RESULT_FILE_EXT , CMP_FILE_EXT ) ) { fail ( "Output 3 incorrect." ) ; } template = Velocity . getTemplate ( getFileName ( null , "encodingtest_KOI8-R" , TMPL_FILE_EXT ) , "KOI8-R" ) ; fos = new FileOutputStream ( getFileName ( RESULT_DIR , "encodingtest_KOI8-R" , RESULT_FILE_EXT ) ) ; writer = new BufferedWriter ( new OutputStreamWriter ( fos , "KOI8-R" ) ) ; template . merge ( context , writer ) ; writer . flush ( ) ; writer . close ( ) ; if ( ! isMatch ( RESULT_DIR , COMPARE_DIR , "encodingtest_KOI8-R" , RESULT_FILE_EXT , CMP_FILE_EXT ) ) { fail ( "Output 4 incorrect." ) ; } } catch ( Exception e ) { fail ( e . getMessage ( ) ) ; } } } 	0
package org . apache . velocity . runtime . parser . node ; import org . apache . velocity . context . InternalContextAdapter ; import org . apache . velocity . runtime . parser . Parser ; import org . apache . velocity . exception . MethodInvocationException ; public class ASTAndNode extends SimpleNode { public ASTAndNode ( int id ) { super ( id ) ; } public ASTAndNode ( Parser p , int id ) { super ( p , id ) ; } public Object jjtAccept ( ParserVisitor visitor , Object data ) { return visitor . visit ( this , data ) ; } public Object value ( InternalContextAdapter context ) throws MethodInvocationException { return new Boolean ( evaluate ( context ) ) ; } public boolean evaluate ( InternalContextAdapter context ) throws MethodInvocationException { Node left = jjtGetChild ( 0 ) ; Node right = jjtGetChild ( 1 ) ; if ( left == null || right == null ) { rsvc . error ( ( left == null ? "Left" : "Right" ) + " side of '&&' operation is null." + " Operation not possible. " + context . getCurrentTemplateName ( ) + " [line " + getLine ( ) + ", column " + getColumn ( ) + "]" ) ; return false ; } if ( left . evaluate ( context ) ) { if ( right . evaluate ( context ) ) { return true ; } } return false ; } } 	1
package org . apache . velocity . test ; import java . io . File ; import org . apache . velocity . VelocityContext ; import org . apache . velocity . util . StringUtils ; import junit . framework . TestCase ; public class TexenClasspathTestCase extends BaseTestCase { private static final String RESULTS_DIR = "../test/texen-classpath/results" ; private static final String COMPARE_DIR = "../test/texen-classpath/compare" ; public TexenClasspathTestCase ( ) { super ( "TexenClasspathTestCase" ) ; } public static junit . framework . Test suite ( ) { return new TexenClasspathTestCase ( ) ; } protected void setUp ( ) { } public void runTest ( ) { try { assureResultsDirectoryExists ( RESULTS_DIR ) ; if ( ! isMatch ( RESULTS_DIR , COMPARE_DIR , "TurbineWeather" , "java" , "java" ) || ! isMatch ( RESULTS_DIR , COMPARE_DIR , "TurbineWeatherService" , "java" , "java" ) || ! isMatch ( RESULTS_DIR , COMPARE_DIR , "WeatherService" , "java" , "java" ) || ! isMatch ( RESULTS_DIR , COMPARE_DIR , "book" , "txt" , "txt" ) || ! isMatch ( RESULTS_DIR , COMPARE_DIR , "Test" , "txt" , "txt" ) ) { fail ( "Output is incorrect!" ) ; } } catch ( Exception e ) { } } } 	0
package org . apache . velocity . runtime ; public interface RuntimeLogger { public void warn ( Object message ) ; public void info ( Object message ) ; public void error ( Object message ) ; public void debug ( Object message ) ; } 	1
package org . apache . velocity . test ; import java . lang . ClassLoader ; import java . io . File ; import java . io . FileInputStream ; import java . io . StringWriter ; import org . apache . velocity . app . VelocityEngine ; import org . apache . velocity . runtime . RuntimeServices ; import org . apache . velocity . VelocityContext ; import org . apache . velocity . runtime . log . LogSystem ; import org . apache . velocity . util . introspection . Introspector ; import junit . framework . TestCase ; public class ClassloaderChangeTest extends TestCase implements LogSystem { private VelocityEngine ve = null ; private boolean sawCacheDump = false ; private static String OUTPUT = "Hello From Foo" ; public ClassloaderChangeTest ( ) { super ( "ClassloaderChangeTest" ) ; try { ve = new VelocityEngine ( ) ; ve . setProperty ( VelocityEngine . RUNTIME_LOG_LOGSYSTEM , this ) ; ve . init ( ) ; } catch ( Exception e ) { System . err . println ( "Cannot setup ClassloaderChnageTest : " + e ) ; System . exit ( 1 ) ; } } public void init ( RuntimeServices rs ) { } public static junit . framework . Test suite ( ) { return new ClassloaderChangeTest ( ) ; } public void runTest ( ) { sawCacheDump = false ; try { VelocityContext vc = new VelocityContext ( ) ; Object foo = null ; TestClassloader cl = new TestClassloader ( ) ; Class fooclass = cl . loadClass ( "Foo" ) ; foo = fooclass . newInstance ( ) ; vc . put ( "foo" , foo ) ; StringWriter writer = new StringWriter ( ) ; ve . evaluate ( vc , writer , "test" , "$foo.doIt()" ) ; if ( ! writer . toString ( ) . equals ( OUTPUT ) ) { fail ( "Output from doIt() incorrect" ) ; } cl = new TestClassloader ( ) ; fooclass = cl . loadClass ( "Foo" ) ; foo = fooclass . newInstance ( ) ; vc . put ( "foo" , foo ) ; writer = new StringWriter ( ) ; ve . evaluate ( vc , writer , "test" , "$foo.doIt()" ) ; if ( ! writer . toString ( ) . equals ( OUTPUT ) ) { fail ( "Output from doIt() incorrect" ) ; } } catch ( Exception ee ) { System . out . println ( "ClassloaderChangeTest : " + ee ) ; } if ( ! sawCacheDump ) { fail ( "Didn't see introspector cache dump." ) ; } } public void logVelocityMessage ( int level , String message ) { if ( message . equals ( Introspector . CACHEDUMP_MSG ) ) { sawCacheDump = true ; } } } class TestClassloader extends ClassLoader { private final static String testclass = "../test/classloader/Foo.class" ; private Class fooClass = null ; public TestClassloader ( ) { try { File f = new File ( testclass ) ; byte [ ] barr = new byte [ ( int ) f . length ( ) ] ; FileInputStream fis = new FileInputStream ( f ) ; fis . read ( barr ) ; fis . close ( ) ; fooClass = defineClass ( "Foo" , barr , 0 , barr . length ) ; } catch ( Exception e ) { System . out . println ( "TestClassloader : exception : " + e ) ; } } public Class findClass ( String name ) { return fooClass ; } } 	0
package org . apache . velocity . runtime . resource . loader ; import java . io . InputStream ; import java . net . JarURLConnection ; import java . net . URL ; import java . util . Enumeration ; import java . util . jar . JarEntry ; import java . util . jar . JarFile ; import java . util . Hashtable ; import org . apache . velocity . runtime . RuntimeServices ; import org . apache . velocity . exception . ResourceNotFoundException ; public class JarHolder { private String urlpath = null ; private JarFile theJar = null ; private JarURLConnection conn = null ; private RuntimeServices rsvc = null ; public JarHolder ( RuntimeServices rs , String urlpath ) { rsvc = rs ; this . urlpath = urlpath ; init ( ) ; rsvc . info ( "  JarHolder : initialized JAR: " + urlpath ) ; } public void init ( ) { try { rsvc . info ( "  JarHolder : attempting to connect to " + urlpath ) ; URL url = new URL ( urlpath ) ; conn = ( JarURLConnection ) url . openConnection ( ) ; conn . setAllowUserInteraction ( false ) ; conn . setDoInput ( true ) ; conn . setDoOutput ( false ) ; conn . connect ( ) ; theJar = conn . getJarFile ( ) ; } catch ( Exception e ) { rsvc . error ( "  JarHolder : error establishing connection to JAR " + e ) ; } } public void close ( ) { try { theJar . close ( ) ; } catch ( Exception e ) { rsvc . error ( "  JarHolder : error Closing JAR the file " + e ) ; } theJar = null ; conn = null ; rsvc . info ( "  JarHolder : JAR file closed" ) ; } public InputStream getResource ( String theentry ) throws ResourceNotFoundException { InputStream data = null ; try { JarEntry entry = theJar . getJarEntry ( theentry ) ; if ( entry != null ) { data = theJar . getInputStream ( entry ) ; } } catch ( Exception fnfe ) { rsvc . error ( "  JarHolder : getResource() error : exception : " + fnfe ) ; throw new ResourceNotFoundException ( fnfe . getMessage ( ) ) ; } return data ; } public Hashtable getEntries ( ) { Hashtable allEntries = new Hashtable ( 559 ) ; Enumeration all = theJar . entries ( ) ; while ( all . hasMoreElements ( ) ) { JarEntry je = ( JarEntry ) all . nextElement ( ) ; if ( ! je . isDirectory ( ) ) { allEntries . put ( je . getName ( ) , this . urlpath ) ; } } return allEntries ; } public String getUrlPath ( ) { return urlpath ; } } 	1
package org . apache . velocity . runtime . parser ; public interface CharStream { char readChar ( ) throws java . io . IOException ; int getColumn ( ) ; int getLine ( ) ; int getEndColumn ( ) ; int getEndLine ( ) ; int getBeginColumn ( ) ; int getBeginLine ( ) ; void backup ( int amount ) ; char BeginToken ( ) throws java . io . IOException ; String GetImage ( ) ; char [ ] GetSuffix ( int len ) ; void Done ( ) ; } 	0
package org . apache . velocity . runtime ; import java . util . Hashtable ; import java . io . StringReader ; import java . io . BufferedReader ; import org . apache . velocity . runtime . directive . VelocimacroProxy ; import org . apache . velocity . runtime . parser . node . SimpleNode ; import org . apache . velocity . util . StringUtils ; import org . apache . velocity . context . InternalContextAdapter ; public class VelocimacroManager { private RuntimeServices rsvc = null ; private static String GLOBAL_NAMESPACE = "" ; private boolean registerFromLib = false ; private Hashtable namespaceHash = new Hashtable ( ) ; private Hashtable libraryMap = new Hashtable ( ) ; private boolean namespacesOn = true ; private boolean inlineLocalMode = false ; VelocimacroManager ( RuntimeServices rs ) { this . rsvc = rs ; addNamespace ( GLOBAL_NAMESPACE ) ; } public boolean addVM ( String vmName , String macroBody , String argArray [ ] , String namespace ) { MacroEntry me = new MacroEntry ( this , vmName , macroBody , argArray , namespace ) ; me . setFromLibrary ( registerFromLib ) ; boolean isLib = true ; if ( registerFromLib ) { libraryMap . put ( namespace , namespace ) ; } else { isLib = libraryMap . containsKey ( namespace ) ; } if ( ! isLib && usingNamespaces ( namespace ) ) { Hashtable local = getNamespace ( namespace , true ) ; local . put ( ( String ) vmName , me ) ; return true ; } else { MacroEntry exist = ( MacroEntry ) getNamespace ( GLOBAL_NAMESPACE ) . get ( vmName ) ; if ( exist != null ) { me . setFromLibrary ( exist . getFromLibrary ( ) ) ; } getNamespace ( GLOBAL_NAMESPACE ) . put ( vmName , me ) ; return true ; } } public VelocimacroProxy get ( String vmName , String namespace ) { if ( usingNamespaces ( namespace ) ) { Hashtable local = getNamespace ( namespace , false ) ; if ( local != null ) { MacroEntry me = ( MacroEntry ) local . get ( vmName ) ; if ( me != null ) { return me . createVelocimacro ( namespace ) ; } } } MacroEntry me = ( MacroEntry ) getNamespace ( GLOBAL_NAMESPACE ) . get ( vmName ) ; if ( me != null ) { return me . createVelocimacro ( namespace ) ; } return null ; } public boolean dumpNamespace ( String namespace ) { synchronized ( this ) { if ( usingNamespaces ( namespace ) ) { Hashtable h = ( Hashtable ) namespaceHash . remove ( namespace ) ; if ( h == null ) return false ; h . clear ( ) ; return true ; } return false ; } } public void setNamespaceUsage ( boolean b ) { namespacesOn = b ; } public void setRegisterFromLib ( boolean b ) { registerFromLib = b ; } public void setTemplateLocalInlineVM ( boolean b ) { inlineLocalMode = b ; } private Hashtable getNamespace ( String namespace ) { return getNamespace ( namespace , false ) ; } private Hashtable getNamespace ( String namespace , boolean addIfNew ) { Hashtable h = ( Hashtable ) namespaceHash . get ( namespace ) ; if ( h == null && addIfNew ) { h = addNamespace ( namespace ) ; } return h ; } private Hashtable addNamespace ( String namespace ) { Hashtable h = new Hashtable ( ) ; Object oh ; if ( ( oh = namespaceHash . put ( namespace , h ) ) != null ) { namespaceHash . put ( namespace , oh ) ; return null ; } return h ; } private boolean usingNamespaces ( String namespace ) { if ( ! namespacesOn ) { return false ; } if ( inlineLocalMode ) { return true ; } return false ; } public String getLibraryName ( String vmName , String namespace ) { if ( usingNamespaces ( namespace ) ) { Hashtable local = getNamespace ( namespace , false ) ; if ( local != null ) { MacroEntry me = ( MacroEntry ) local . get ( vmName ) ; if ( me != null ) { return null ; } } } MacroEntry me = ( MacroEntry ) getNamespace ( GLOBAL_NAMESPACE ) . get ( vmName ) ; if ( me != null ) { return me . getSourceTemplate ( ) ; } return null ; } protected class MacroEntry { String macroname ; String [ ] argarray ; String macrobody ; String sourcetemplate ; SimpleNode nodeTree = null ; VelocimacroManager manager = null ; boolean fromLibrary = false ; MacroEntry ( VelocimacroManager vmm , String vmName , String macroBody , String argArray [ ] , String sourceTemplate ) { this . macroname = vmName ; this . argarray = argArray ; this . macrobody = macroBody ; this . sourcetemplate = sourceTemplate ; this . manager = vmm ; } public void setFromLibrary ( boolean b ) { fromLibrary = b ; } public boolean getFromLibrary ( ) { return fromLibrary ; } public SimpleNode getNodeTree ( ) { return nodeTree ; } public String getSourceTemplate ( ) { return sourcetemplate ; } VelocimacroProxy createVelocimacro ( String namespace ) { VelocimacroProxy vp = new VelocimacroProxy ( ) ; vp . setName ( this . macroname ) ; vp . setArgArray ( this . argarray ) ; vp . setMacrobody ( this . macrobody ) ; vp . setNodeTree ( this . nodeTree ) ; vp . setNamespace ( namespace ) ; return vp ; } void setup ( InternalContextAdapter ica ) { if ( nodeTree == null ) parseTree ( ica ) ; } void parseTree ( InternalContextAdapter ica ) { try { BufferedReader br = new BufferedReader ( new StringReader ( macrobody ) ) ; nodeTree = rsvc . parse ( br , "VM:" + macroname , true ) ; nodeTree . init ( ica , null ) ; } catch ( Exception e ) { rsvc . error ( "VelocimacroManager.parseTree() : exception " + macroname + " : " + StringUtils . stackTrace ( e ) ) ; } } } } 	1
